{"pr_number": 8231, "pr_title": "[intesis] New Binding for Intesis WiFi adapters used in various AC systems", "pr_createdAt": "2020-07-30T22:36:18Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8231", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA4MDU4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r464080582", "bodyText": "Better use HttpClientFactory and us getCommonHttpClient to get a httpclient. See other bindings on how it's used.\nAlso better schedule this initialization part with calling the api to make sure initilize returns fast.", "author": "Hilbrand", "createdAt": "2020-08-02T13:48:46Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,237 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+\n+    private static HttpClient httpClient = new HttpClient();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String deviceIp = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.trace(\"Start initializing!\");\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+\n+        deviceIp = config.ipAddress;\n+        password = config.password;\n+        try {\n+            httpClient.start();", "originalCommit": "59fa0439a996103265d2e9c36e0066597781ee26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIyNTkzNw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r464225937", "bodyText": "Thanks @Hilbrand for pointing me into this direction. Will refactor my binding to address your comment.", "author": "hmerk", "createdAt": "2020-08-03T06:53:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA4MDU4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDExNzY0MA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474117640", "bodyText": "No need to save characters. Same for below.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | returnTemp | Number:Temperature | (Readonly) The ambient air temperature.                               | |\n          \n          \n            \n            | returnTemperature | Number:Temperature | (Readonly) The ambient air temperature.                               | |", "author": "fwolter", "createdAt": "2020-08-20T16:35:13Z", "path": "bundles/org.openhab.binding.intesis/README.md", "diffHunk": "@@ -0,0 +1,83 @@\n+# Intesis Binding\n+\n+This binding connects to WiFi [IntesisHome](http://www.intesishome.com/) devices using their local REST Api.\n+It does actually not support [IntesisBox](http://www.intesisbox.com/) devices but support is planned in upcoming version.\n+\n+\n+\n+## Supported Things\n+\n+This binding only supports one thing type:\n+\n+| Thing      | Thing Type | Description                                                            |\n+|------------|------------|------------------------------------------------------------------------|\n+| intesisHome | Thing      | Represents a single WiFi device                                         |\n+\n+## Discovery\n+\n+Intesis devices do not support auto discovery.\n+\n+## Thing Configuration\n+\n+The binding needs two configuration parameters, passwort and IP-Address.\n+\n+## Channels\n+\n+| Channel ID | Item Type          | Description                                                           | Possible Values |\n+|------------|--------------------|-----------------------------------------------------------------------|-|\n+| power      | Switch             | Turns power on/off for your climate system.                           | ON, OFF |\n+| mode       | String             | The heating/cooling mode.                                             | AUTO, HEAT, COOL, DRY, FAN |\n+| windspeed  | String             | Fan speed (if applicable)                                             | AUTO, 1-4 |\n+| temperature | Number:Temperature | The currently set target temperature.                                 | |\n+| returnTemp | Number:Temperature | (Readonly) The ambient air temperature.                               | |", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQzOTc3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474439776", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-08-21T06:44:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDExNzY0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDExODk2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474118963", "bodyText": "As PaperUI will be removed in OH3, can you express this more abstract?", "author": "fwolter", "createdAt": "2020-08-20T16:36:36Z", "path": "bundles/org.openhab.binding.intesis/README.md", "diffHunk": "@@ -0,0 +1,83 @@\n+# Intesis Binding\n+\n+This binding connects to WiFi [IntesisHome](http://www.intesishome.com/) devices using their local REST Api.\n+It does actually not support [IntesisBox](http://www.intesisbox.com/) devices but support is planned in upcoming version.\n+\n+\n+\n+## Supported Things\n+\n+This binding only supports one thing type:\n+\n+| Thing      | Thing Type | Description                                                            |\n+|------------|------------|------------------------------------------------------------------------|\n+| intesisHome | Thing      | Represents a single WiFi device                                         |\n+\n+## Discovery\n+\n+Intesis devices do not support auto discovery.\n+\n+## Thing Configuration\n+\n+The binding needs two configuration parameters, passwort and IP-Address.\n+\n+## Channels\n+\n+| Channel ID | Item Type          | Description                                                           | Possible Values |\n+|------------|--------------------|-----------------------------------------------------------------------|-|\n+| power      | Switch             | Turns power on/off for your climate system.                           | ON, OFF |\n+| mode       | String             | The heating/cooling mode.                                             | AUTO, HEAT, COOL, DRY, FAN |\n+| windspeed  | String             | Fan speed (if applicable)                                             | AUTO, 1-4 |\n+| temperature | Number:Temperature | The currently set target temperature.                                 | |\n+| returnTemp | Number:Temperature | (Readonly) The ambient air temperature.                               | |\n+| outdoorTemp | Number:Temperature | (Readonly) The outdoor air temperature.                               | |\n+| swingUpDown     | String             | Control of up/down vanes (if applicable)                              | AUTO, 1-9, SWING, PULSE |\n+\n+\n+\n+Note that individual A/C units may not support all channels, or all possible values for those channels.\n+For example, not all A/C units have controllable vanes. Or fan speed may be limited to 1-4, instead of all of 1-9.\n+The set point temperature is also limited to a device specific range. For set point temperature, sending an invalid value\n+will cause it to choose the minimum/maximum allowable value as appropriate. The device will also round it to\n+whatever step size it supports. For all other channels, invalid values\n+are ignored.\n+\n+## Full Example\n+\n+The binding can be fully setup from the Paper UI but if you decide to use files here is a full example:", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0MTM0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474441345", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-08-21T06:48:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDExODk2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEyMDMyOA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474120328", "bodyText": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging", "author": "fwolter", "createdAt": "2020-08-20T16:37:39Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisHandlerFactory.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal;\n+\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.THING_TYPE_INTESISHOME;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.intesis.internal.handler.IntesisHomeHandler;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link IntesisHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.intesis\", service = ThingHandlerFactory.class)\n+public class IntesisHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHandlerFactory.class);\n+    private final HttpClient httpClient;\n+\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.singleton(THING_TYPE_INTESISHOME);\n+\n+    @Activate\n+    public IntesisHandlerFactory(@Reference HttpClientFactory httpClientFactory, ComponentContext componentContext) {\n+        logger.debug(\"Activate Shelly HandlerFactory\");", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0MjIwNg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474442206", "bodyText": "Removed", "author": "hmerk", "createdAt": "2020-08-21T06:50:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEyMDMyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEyMjU1NA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474122554", "bodyText": "Can you fix the formatting?", "author": "fwolter", "createdAt": "2020-08-20T16:39:24Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.api;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * {@link IntesisHomeHttpApi} wraps the IntesisHome REST API and provides various low level function to access the\n+ * device api (not\n+ * cloud api).", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0MjQ0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474442442", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-08-21T06:51:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEyMjU1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzMTgzMg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474131832", "bodyText": "You should specify the concrete exception you want to catch, since catching Exception catches also all runtime exceptions.\nYou might want to throw the exception. Then, you don't need to return null, but handle the exception where postRequest() is invoked. You can use the exception message as an argument to set the Thing status. The message will be displayed in the UI, then.", "author": "fwolter", "createdAt": "2020-08-20T16:47:12Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.api;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * {@link IntesisHomeHttpApi} wraps the IntesisHome REST API and provides various low level function to access the\n+ * device api (not\n+ * cloud api).\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHttpApi {\n+    public static final String CONTENT_TYPE_JSON = \"application/json; charset=UTF-8\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHttpApi.class);\n+    private final HttpClient httpClient;\n+\n+    public IntesisHomeHttpApi(IntesisConfiguration config, HttpClient httpClient) {\n+        this.httpClient = httpClient;\n+    }\n+\n+    /**\n+     * Used to post a request to the device\n+     *\n+     * @param ipAddress of the device\n+     * @param content string\n+     * @return JSON string as response\n+     */\n+    @Nullable\n+    public String postRequest(String ipAddress, String contentString) {\n+\n+        String url = \"http://\" + ipAddress + \"/api.cgi\";\n+        try {\n+            Request request = httpClient.POST(url);\n+            request.header(HttpHeader.CONTENT_TYPE, \"application/json\");\n+            request.content(new StringContentProvider(contentString), \"application/json\");\n+\n+            // Do request and get response\n+            ContentResponse contentResponse = request.send();\n+\n+            String response = contentResponse.getContentAsString().replace(\"\\t\", \"\").replace(\"\\r\\n\", \"\").trim();\n+            logger.trace(\"HTTP Response for getInfo {}: {}\", contentResponse.getStatus(), response);\n+\n+            if (response != null && !response.isEmpty()) {\n+                return response;\n+            }\n+        } catch (Exception e) {\n+        }", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ1MDY5Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r475450693", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-08-24T09:11:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzMTgzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzMjIxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474132219", "bodyText": "Can this be removed?", "author": "fwolter", "createdAt": "2020-08-20T16:47:53Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0NzE5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474447195", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-08-21T07:01:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzMjIxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzMjc2OA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474132768", "bodyText": "This could be static final. Also, it's good practice to append the unit. e.g. REFRESH_INTERVAL_SEC", "author": "fwolter", "createdAt": "2020-08-20T16:48:51Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0NzU1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474447556", "bodyText": "Changed and moved to binding constants", "author": "hmerk", "createdAt": "2020-08-21T07:01:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzMjc2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzMjkzNw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474132937", "bodyText": "This could be final", "author": "fwolter", "createdAt": "2020-08-20T16:49:06Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0ODE1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474448151", "bodyText": "Made Gson final", "author": "hmerk", "createdAt": "2020-08-21T07:02:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzMjkzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzMzAzMA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474133030", "bodyText": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging", "author": "fwolter", "createdAt": "2020-08-20T16:49:17Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0OTQ2MA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474449460", "bodyText": "Hmm, You are commenting on code created with the binding skeleton, why ?\nIt is also common usage to have this debug logger.", "author": "hmerk", "createdAt": "2020-08-21T07:04:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzMzAzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5MTgxMg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r487791812", "bodyText": "I think it's supposed to be only a placeholder in the skeleton script. See point 4 in above link.", "author": "fwolter", "createdAt": "2020-09-14T09:56:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzMzAzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNDAxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474134015", "bodyText": "I think UNKNOWN would suit better. Let it go online only if the connection to the API is established.", "author": "fwolter", "createdAt": "2020-08-20T16:51:00Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0OTk3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474449975", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-08-21T07:04:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNDAxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNDk1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474134952", "bodyText": "isEmpty() is already checked in postRequest().", "author": "fwolter", "createdAt": "2020-08-20T16:52:39Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            try {\n+                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+                String response = api.postRequest(ipAddress, contentString);\n+                logger.trace(\"getInfo response : {}\", response);\n+                if (response != null && !response.isEmpty()) {\n+                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                    logger.trace(\"success response : {}\", success);\n+                    if (success) {\n+                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n+                        info devInfo = gson.fromJson(devInfoNode, info.class);\n+                        Map<String, String> properties = new HashMap<>(5);\n+                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                        updateProperties(properties);\n+\n+                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, contentString);\n+                        if (response != null && !response.isEmpty()) {", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1MTk5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474451996", "bodyText": "Removed", "author": "hmerk", "createdAt": "2020-08-21T07:07:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNDk1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNTc1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474135757", "bodyText": "What type of exception do you expect here? Can you specify the concrete type and handle it appropriately?", "author": "fwolter", "createdAt": "2020-08-20T16:54:06Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            try {\n+                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+                String response = api.postRequest(ipAddress, contentString);\n+                logger.trace(\"getInfo response : {}\", response);\n+                if (response != null && !response.isEmpty()) {\n+                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                    logger.trace(\"success response : {}\", success);\n+                    if (success) {\n+                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n+                        info devInfo = gson.fromJson(devInfoNode, info.class);\n+                        Map<String, String> properties = new HashMap<>(5);\n+                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                        updateProperties(properties);\n+\n+                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, contentString);\n+                        if (response != null && !response.isEmpty()) {\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (success) {\n+                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                                sessionId = auth.sessionID;\n+                                if (!sessionId.isEmpty()) {\n+                                    logger.trace(\"sessionID : {}\", sessionId);\n+                                    updateStatus(ThingStatus.ONLINE);\n+                                } else {\n+                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                                }\n+                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                                        TimeUnit.SECONDS);\n+                            } else {\n+                                updateStatus(ThingStatus.OFFLINE);\n+                            }\n+                        }\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (Exception e) {", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ1MTczMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r475451731", "bodyText": "Removed", "author": "hmerk", "createdAt": "2020-08-24T09:13:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNTc1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNjAyOA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474136028", "bodyText": "Is there any reason why you defer it?", "author": "fwolter", "createdAt": "2020-08-20T16:54:33Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            try {\n+                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+                String response = api.postRequest(ipAddress, contentString);\n+                logger.trace(\"getInfo response : {}\", response);\n+                if (response != null && !response.isEmpty()) {\n+                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                    logger.trace(\"success response : {}\", success);\n+                    if (success) {\n+                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n+                        info devInfo = gson.fromJson(devInfoNode, info.class);\n+                        Map<String, String> properties = new HashMap<>(5);\n+                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                        updateProperties(properties);\n+\n+                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, contentString);\n+                        if (response != null && !response.isEmpty()) {\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (success) {\n+                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                                sessionId = auth.sessionID;\n+                                if (!sessionId.isEmpty()) {\n+                                    logger.trace(\"sessionID : {}\", sessionId);\n+                                    updateStatus(ThingStatus.ONLINE);\n+                                } else {\n+                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                                }\n+                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                                        TimeUnit.SECONDS);\n+                            } else {\n+                                updateStatus(ThingStatus.OFFLINE);\n+                            }\n+                        }\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (Exception e) {\n+            }\n+        }, 2, TimeUnit.SECONDS);", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1MjQ4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474452486", "bodyText": "No, changed", "author": "hmerk", "createdAt": "2020-08-21T07:08:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNjAyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNjMwNw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474136307", "bodyText": "dispose() should return fast. Is this API logout request really necessary?", "author": "fwolter", "createdAt": "2020-08-20T16:55:04Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            try {\n+                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+                String response = api.postRequest(ipAddress, contentString);\n+                logger.trace(\"getInfo response : {}\", response);\n+                if (response != null && !response.isEmpty()) {\n+                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                    logger.trace(\"success response : {}\", success);\n+                    if (success) {\n+                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n+                        info devInfo = gson.fromJson(devInfoNode, info.class);\n+                        Map<String, String> properties = new HashMap<>(5);\n+                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                        updateProperties(properties);\n+\n+                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, contentString);\n+                        if (response != null && !response.isEmpty()) {\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (success) {\n+                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                                sessionId = auth.sessionID;\n+                                if (!sessionId.isEmpty()) {\n+                                    logger.trace(\"sessionID : {}\", sessionId);\n+                                    updateStatus(ThingStatus.ONLINE);\n+                                } else {\n+                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                                }\n+                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                                        TimeUnit.SECONDS);\n+                            } else {\n+                                updateStatus(ThingStatus.OFFLINE);\n+                            }\n+                        }\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (Exception e) {\n+            }\n+        }, 2, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+        try {\n+            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+            api.postRequest(ipAddress, contentString);\n+        } catch (Exception e) {\n+        }", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1Mjg1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474452851", "bodyText": "Removed", "author": "hmerk", "createdAt": "2020-08-21T07:08:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNjMwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNjY4NA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474136684", "bodyText": "Can you trigger an immediate polling of the data?", "author": "fwolter", "createdAt": "2020-08-20T16:55:36Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            try {\n+                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+                String response = api.postRequest(ipAddress, contentString);\n+                logger.trace(\"getInfo response : {}\", response);\n+                if (response != null && !response.isEmpty()) {\n+                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                    logger.trace(\"success response : {}\", success);\n+                    if (success) {\n+                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n+                        info devInfo = gson.fromJson(devInfoNode, info.class);\n+                        Map<String, String> properties = new HashMap<>(5);\n+                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                        updateProperties(properties);\n+\n+                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, contentString);\n+                        if (response != null && !response.isEmpty()) {\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (success) {\n+                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                                sessionId = auth.sessionID;\n+                                if (!sessionId.isEmpty()) {\n+                                    logger.trace(\"sessionID : {}\", sessionId);\n+                                    updateStatus(ThingStatus.ONLINE);\n+                                } else {\n+                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                                }\n+                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                                        TimeUnit.SECONDS);\n+                            } else {\n+                                updateStatus(ThingStatus.OFFLINE);\n+                            }\n+                        }\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (Exception e) {\n+            }\n+        }, 2, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+        try {\n+            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+            api.postRequest(ipAddress, contentString);\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // The thing is updated by the scheduled automatic refresh so do nothing here.", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4NzI3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474187271", "bodyText": "I could, but it is a really bad idea as I saw in the debugger, that all channels are refreshed at startup, which causes unnecessary traffic.", "author": "hmerk", "createdAt": "2020-08-20T18:27:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNjY4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4MzQzMA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474283430", "bodyText": "You could start a timer of e.g. 3 sec. for delaying the polling. Any Refresh command re-triggers it, so that only the last poll is invoked.", "author": "fwolter", "createdAt": "2020-08-20T21:29:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNjY4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1MzY1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474453657", "bodyText": "Don't see any benefit, as we poll the status every 30 seconds....", "author": "hmerk", "createdAt": "2020-08-21T07:09:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNjY4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNzUyMw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474137523", "bodyText": "Is this Channel documented in the readme?", "author": "fwolter", "createdAt": "2020-08-20T16:56:59Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            try {\n+                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+                String response = api.postRequest(ipAddress, contentString);\n+                logger.trace(\"getInfo response : {}\", response);\n+                if (response != null && !response.isEmpty()) {\n+                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                    logger.trace(\"success response : {}\", success);\n+                    if (success) {\n+                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n+                        info devInfo = gson.fromJson(devInfoNode, info.class);\n+                        Map<String, String> properties = new HashMap<>(5);\n+                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                        updateProperties(properties);\n+\n+                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, contentString);\n+                        if (response != null && !response.isEmpty()) {\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (success) {\n+                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                                sessionId = auth.sessionID;\n+                                if (!sessionId.isEmpty()) {\n+                                    logger.trace(\"sessionID : {}\", sessionId);\n+                                    updateStatus(ThingStatus.ONLINE);\n+                                } else {\n+                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                                }\n+                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                                        TimeUnit.SECONDS);\n+                            } else {\n+                                updateStatus(ThingStatus.OFFLINE);\n+                            }\n+                        }\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (Exception e) {\n+            }\n+        }, 2, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+        try {\n+            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+            api.postRequest(ipAddress, contentString);\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // The thing is updated by the scheduled automatic refresh so do nothing here.\n+        } else {\n+            switch (channelId) {\n+                case POWER_CHANNEL:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case MODE_CHANNEL:\n+                    uid = 2;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case WINDSPEED_CHANNEL:\n+                    uid = 4;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case SWINGUD_CHANNEL:\n+                    uid = 5;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case SWINGLR_CHANNEL:", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1NDE3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474454175", "bodyText": "Leftover, removed", "author": "hmerk", "createdAt": "2020-08-21T07:10:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNzUyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzOTM5MA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474139390", "bodyText": "As you use Units of Measure, you can cast this to QuantityType and use toUnit() to convert it to celsius. Your code would fail if the user uses Fahrenheit.", "author": "fwolter", "createdAt": "2020-08-20T17:00:00Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            try {\n+                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+                String response = api.postRequest(ipAddress, contentString);\n+                logger.trace(\"getInfo response : {}\", response);\n+                if (response != null && !response.isEmpty()) {\n+                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                    logger.trace(\"success response : {}\", success);\n+                    if (success) {\n+                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n+                        info devInfo = gson.fromJson(devInfoNode, info.class);\n+                        Map<String, String> properties = new HashMap<>(5);\n+                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                        updateProperties(properties);\n+\n+                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, contentString);\n+                        if (response != null && !response.isEmpty()) {\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (success) {\n+                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                                sessionId = auth.sessionID;\n+                                if (!sessionId.isEmpty()) {\n+                                    logger.trace(\"sessionID : {}\", sessionId);\n+                                    updateStatus(ThingStatus.ONLINE);\n+                                } else {\n+                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                                }\n+                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                                        TimeUnit.SECONDS);\n+                            } else {\n+                                updateStatus(ThingStatus.OFFLINE);\n+                            }\n+                        }\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (Exception e) {\n+            }\n+        }, 2, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+        try {\n+            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+            api.postRequest(ipAddress, contentString);\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // The thing is updated by the scheduled automatic refresh so do nothing here.\n+        } else {\n+            switch (channelId) {\n+                case POWER_CHANNEL:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case MODE_CHANNEL:\n+                    uid = 2;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case WINDSPEED_CHANNEL:\n+                    uid = 4;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case SWINGUD_CHANNEL:\n+                    uid = 5;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case SWINGLR_CHANNEL:\n+                    uid = 6;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case TEMP_CHANNEL:\n+                    uid = 9;\n+                    value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1NjExOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474456119", "bodyText": "No, the command has to deliver just an integer, so I have to remove the unit symvol and multiply the interger value by 10.", "author": "hmerk", "createdAt": "2020-08-21T07:12:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzOTM5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0NjA5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484346097", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n          \n          \n            \n                                if (command instanceof QuantityType) {\n          \n          \n            \n                                    value = ((QuantityType) command).toUnit(SIUnits.CELSIUS).intValue()  * 10;\n          \n          \n            \n                                }", "author": "Hilbrand", "createdAt": "2020-09-07T10:34:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzOTM5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzOTQ4NA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474139484", "bodyText": "See above", "author": "fwolter", "createdAt": "2020-08-20T17:00:13Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            try {\n+                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+                String response = api.postRequest(ipAddress, contentString);\n+                logger.trace(\"getInfo response : {}\", response);\n+                if (response != null && !response.isEmpty()) {\n+                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                    logger.trace(\"success response : {}\", success);\n+                    if (success) {\n+                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n+                        info devInfo = gson.fromJson(devInfoNode, info.class);\n+                        Map<String, String> properties = new HashMap<>(5);\n+                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                        updateProperties(properties);\n+\n+                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, contentString);\n+                        if (response != null && !response.isEmpty()) {\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (success) {\n+                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                                sessionId = auth.sessionID;\n+                                if (!sessionId.isEmpty()) {\n+                                    logger.trace(\"sessionID : {}\", sessionId);\n+                                    updateStatus(ThingStatus.ONLINE);\n+                                } else {\n+                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                                }\n+                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                                        TimeUnit.SECONDS);\n+                            } else {\n+                                updateStatus(ThingStatus.OFFLINE);\n+                            }\n+                        }\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (Exception e) {\n+            }\n+        }, 2, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+        try {\n+            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+            api.postRequest(ipAddress, contentString);\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // The thing is updated by the scheduled automatic refresh so do nothing here.\n+        } else {\n+            switch (channelId) {\n+                case POWER_CHANNEL:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case MODE_CHANNEL:\n+                    uid = 2;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case WINDSPEED_CHANNEL:\n+                    uid = 4;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case SWINGUD_CHANNEL:\n+                    uid = 5;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case SWINGLR_CHANNEL:\n+                    uid = 6;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case TEMP_CHANNEL:\n+                    uid = 9;\n+                    value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null && !response.isEmpty()) {", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1NjI0Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474456246", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-08-21T07:13:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzOTQ4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0MTI2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474141265", "bodyText": "It might be a good approach to extract this code into a method and re-use it.", "author": "fwolter", "createdAt": "2020-08-20T17:03:34Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            try {\n+                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+                String response = api.postRequest(ipAddress, contentString);\n+                logger.trace(\"getInfo response : {}\", response);\n+                if (response != null && !response.isEmpty()) {\n+                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                    logger.trace(\"success response : {}\", success);\n+                    if (success) {\n+                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n+                        info devInfo = gson.fromJson(devInfoNode, info.class);\n+                        Map<String, String> properties = new HashMap<>(5);\n+                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                        updateProperties(properties);\n+\n+                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, contentString);\n+                        if (response != null && !response.isEmpty()) {\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (success) {\n+                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                                sessionId = auth.sessionID;\n+                                if (!sessionId.isEmpty()) {\n+                                    logger.trace(\"sessionID : {}\", sessionId);\n+                                    updateStatus(ThingStatus.ONLINE);\n+                                } else {\n+                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                                }\n+                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                                        TimeUnit.SECONDS);\n+                            } else {\n+                                updateStatus(ThingStatus.OFFLINE);\n+                            }\n+                        }\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (Exception e) {\n+            }\n+        }, 2, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+        try {\n+            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+            api.postRequest(ipAddress, contentString);\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // The thing is updated by the scheduled automatic refresh so do nothing here.\n+        } else {\n+            switch (channelId) {\n+                case POWER_CHANNEL:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case MODE_CHANNEL:\n+                    uid = 2;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case WINDSPEED_CHANNEL:\n+                    uid = 4;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case SWINGUD_CHANNEL:\n+                    uid = 5;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case SWINGLR_CHANNEL:\n+                    uid = 6;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case TEMP_CHANNEL:\n+                    uid = 9;\n+                    value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null && !response.isEmpty()) {\n+                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                    if (response != null && !response.isEmpty()) {\n+                        success = IntesisHomeJSonDTO.getSuccess(response);\n+                        if (success) {\n+                            JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                            AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                            sessionId = auth.sessionID;\n+                            updateStatus(ThingStatus.ONLINE);\n+                            response = api.postRequest(ipAddress, contentString);\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            }\n+                        } else {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device for actuall status\");\n+        if (thing.getStatus() != ThingStatus.ONLINE) {\n+            String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, sessionString);\n+            if (response != null && !response.isEmpty()) {\n+                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (success) {", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2NjcyNw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474466727", "bodyText": "Don't see the real benefit.", "author": "hmerk", "createdAt": "2020-08-21T07:26:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0MTI2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0MTc2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474141761", "bodyText": "Better check if the array has the length you expect.", "author": "fwolter", "createdAt": "2020-08-20T17:04:32Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            try {\n+                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+                String response = api.postRequest(ipAddress, contentString);\n+                logger.trace(\"getInfo response : {}\", response);\n+                if (response != null && !response.isEmpty()) {\n+                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                    logger.trace(\"success response : {}\", success);\n+                    if (success) {\n+                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n+                        info devInfo = gson.fromJson(devInfoNode, info.class);\n+                        Map<String, String> properties = new HashMap<>(5);\n+                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                        updateProperties(properties);\n+\n+                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, contentString);\n+                        if (response != null && !response.isEmpty()) {\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (success) {\n+                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                                sessionId = auth.sessionID;\n+                                if (!sessionId.isEmpty()) {\n+                                    logger.trace(\"sessionID : {}\", sessionId);\n+                                    updateStatus(ThingStatus.ONLINE);\n+                                } else {\n+                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                                }\n+                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                                        TimeUnit.SECONDS);\n+                            } else {\n+                                updateStatus(ThingStatus.OFFLINE);\n+                            }\n+                        }\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (Exception e) {\n+            }\n+        }, 2, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+        try {\n+            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+            api.postRequest(ipAddress, contentString);\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // The thing is updated by the scheduled automatic refresh so do nothing here.\n+        } else {\n+            switch (channelId) {\n+                case POWER_CHANNEL:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case MODE_CHANNEL:\n+                    uid = 2;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case WINDSPEED_CHANNEL:\n+                    uid = 4;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case SWINGUD_CHANNEL:\n+                    uid = 5;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case SWINGLR_CHANNEL:\n+                    uid = 6;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case TEMP_CHANNEL:\n+                    uid = 9;\n+                    value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null && !response.isEmpty()) {\n+                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                    if (response != null && !response.isEmpty()) {\n+                        success = IntesisHomeJSonDTO.getSuccess(response);\n+                        if (success) {\n+                            JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                            AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                            sessionId = auth.sessionID;\n+                            updateStatus(ThingStatus.ONLINE);\n+                            response = api.postRequest(ipAddress, contentString);\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            }\n+                        } else {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device for actuall status\");\n+        if (thing.getStatus() != ThingStatus.ONLINE) {\n+            String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, sessionString);\n+            if (response != null && !response.isEmpty()) {\n+                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (success) {\n+                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                    sessionId = auth.sessionID;\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null && !response.isEmpty()) {\n+            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n+                dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n+                int value = uid[0].value;", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ3NTAxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474475019", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-08-21T07:36:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0MTc2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0Mjg0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474142843", "bodyText": "If I see correctly, the positions after the decimal point will be truncated. If this is intended, better use Math.round(), as integer division will always rounding down.", "author": "fwolter", "createdAt": "2020-08-20T17:06:35Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.AuthenticateData;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    // private final HttpClient httpClient;\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private int refreshInterval = 30;\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.ONLINE, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            try {\n+                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+                String response = api.postRequest(ipAddress, contentString);\n+                logger.trace(\"getInfo response : {}\", response);\n+                if (response != null && !response.isEmpty()) {\n+                    boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                    logger.trace(\"success response : {}\", success);\n+                    if (success) {\n+                        JsonElement devInfoNode = IntesisHomeJSonDTO.getData(response).get(\"info\");\n+                        info devInfo = gson.fromJson(devInfoNode, info.class);\n+                        Map<String, String> properties = new HashMap<>(5);\n+                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                        properties.put(PROPERTY_MODEL_ID, devInfo.deviceModel);\n+                        properties.put(PROPERTY_SERIAL_NUMBER, devInfo.sn);\n+                        properties.put(PROPERTY_FIRMWARE_VERSION, devInfo.fwVersion);\n+                        properties.put(PROPERTY_MAC_ADDRESS, devInfo.wlanSTAMAC);\n+                        updateProperties(properties);\n+\n+                        contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, contentString);\n+                        if (response != null && !response.isEmpty()) {\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (success) {\n+                                JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                                AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                                sessionId = auth.sessionID;\n+                                if (!sessionId.isEmpty()) {\n+                                    logger.trace(\"sessionID : {}\", sessionId);\n+                                    updateStatus(ThingStatus.ONLINE);\n+                                } else {\n+                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                                }\n+                                refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, refreshInterval,\n+                                        TimeUnit.SECONDS);\n+                            } else {\n+                                updateStatus(ThingStatus.OFFLINE);\n+                            }\n+                        }\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (Exception e) {\n+            }\n+        }, 2, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+        try {\n+            String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+            api.postRequest(ipAddress, contentString);\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // The thing is updated by the scheduled automatic refresh so do nothing here.\n+        } else {\n+            switch (channelId) {\n+                case POWER_CHANNEL:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case MODE_CHANNEL:\n+                    uid = 2;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case WINDSPEED_CHANNEL:\n+                    uid = 4;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case SWINGUD_CHANNEL:\n+                    uid = 5;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case SWINGLR_CHANNEL:\n+                    uid = 6;\n+                    value = Integer.parseInt(command.toString());\n+                    break;\n+                case TEMP_CHANNEL:\n+                    uid = 9;\n+                    value = (Integer.parseInt(command.toString().replace(\" \u00b0C\", \"\"))) * 10;\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null && !response.isEmpty()) {\n+                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                    if (response != null && !response.isEmpty()) {\n+                        success = IntesisHomeJSonDTO.getSuccess(response);\n+                        if (success) {\n+                            JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                            AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                            sessionId = auth.sessionID;\n+                            updateStatus(ThingStatus.ONLINE);\n+                            response = api.postRequest(ipAddress, contentString);\n+                            success = IntesisHomeJSonDTO.getSuccess(response);\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            }\n+                        } else {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device for actuall status\");\n+        if (thing.getStatus() != ThingStatus.ONLINE) {\n+            String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, sessionString);\n+            if (response != null && !response.isEmpty()) {\n+                boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+                if (success) {\n+                    JsonElement idNode = IntesisHomeJSonDTO.getData(response).get(\"id\");\n+                    AuthenticateData auth = gson.fromJson(idNode, AuthenticateData.class);\n+                    sessionId = auth.sessionID;\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null && !response.isEmpty()) {\n+            boolean success = IntesisHomeJSonDTO.getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                JsonElement dpvalNode = IntesisHomeJSonDTO.getData(response).get(\"dpval\");\n+                dpval[] uid = gson.fromJson(dpvalNode, dpval[].class);\n+                int value = uid[0].value;\n+\n+                updateState(POWER_CHANNEL, String.valueOf(value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                State stateValue = new DecimalType(uid[1].value);\n+                updateState(MODE_CHANNEL, stateValue);\n+                stateValue = new DecimalType(uid[2].value);\n+                updateState(WINDSPEED_CHANNEL, stateValue);\n+                stateValue = new DecimalType(uid[3].value);\n+                updateState(SWINGUD_CHANNEL, stateValue);\n+                int unit = (uid[4].value) / 10;\n+                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ3ODAxOA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474478018", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-08-21T07:39:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0Mjg0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0MzQxMg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474143412", "bodyText": "Could you be a bit more verbose, so that somebody who hasn't heard about it gets a clue what this is about?", "author": "fwolter", "createdAt": "2020-08-20T17:07:39Z", "path": "bundles/org.openhab.binding.intesis/src/main/resources/ESH-INF/binding/binding.xml", "diffHunk": "@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<binding:binding id=\"intesis\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:binding=\"https://openhab.org/schemas/binding/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/binding/v1.0.0 https://openhab.org/schemas/binding-1.0.0.xsd\">\n+\n+\t<name>Intesis Binding</name>\n+\t<description>This is the binding for Intesis.</description>", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ3OTUwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474479501", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-08-21T07:41:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0MzQxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0MzczMA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474143730", "bodyText": "Can this be removed?", "author": "fwolter", "createdAt": "2020-08-20T17:08:14Z", "path": "bundles/org.openhab.binding.intesis/src/main/resources/ESH-INF/i18n/intesis.properties", "diffHunk": "@@ -0,0 +1,77 @@\n+# FIXME: please substitute the xx_XX with a proper locale, ie. de_DE\n+# FIXME: please do not add the file to the repo if you add or change no content", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ1MjI5NA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r475452294", "bodyText": "removed", "author": "hmerk", "createdAt": "2020-08-24T09:14:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0MzczMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0NTE0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474145145", "bodyText": "Can this be removed?", "author": "fwolter", "createdAt": "2020-08-20T17:10:54Z", "path": "bundles/org.openhab.binding.intesis/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,104 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"intesis\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Sample Thing Type -->", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ4MDEwOA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474480108", "bodyText": "Removed", "author": "hmerk", "createdAt": "2020-08-21T07:42:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0NTE0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0NTc1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474145757", "bodyText": "I think it's more common if the IP address is entered first and after that, the password.", "author": "fwolter", "createdAt": "2020-08-20T17:11:54Z", "path": "bundles/org.openhab.binding.intesis/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,104 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"intesis\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Sample Thing Type -->\n+\t<thing-type id=\"intesisHome\">\n+\t\t<label>IntesisHome WiFi Adapter</label>\n+\t\t<description>IntesisHome WiFi Adapter</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"system.power\"/>\n+\t\t\t<channel id=\"mode\" typeId=\"mode\"/>\n+\t\t\t<channel id=\"windspeed\" typeId=\"windspeed\"/>\n+\t\t\t<channel id=\"swingUpDown\" typeId=\"swingUpDown\"/>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"returnTemp\" typeId=\"returnTemp\"/>\n+\t\t\t<channel id=\"outdoorTemp\" typeId=\"outdoorTemp\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>Password for API access.</description>\n+\t\t\t\t<context>password</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"ipAddress\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Address</label>\n+\t\t\t\t<description>IP Address of the IntesisHome device.</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t</parameter>", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ4MDY3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474480675", "bodyText": "Changed", "author": "hmerk", "createdAt": "2020-08-21T07:42:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0NTc1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0NjMyNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474146325", "bodyText": "If I see correctly, this doesn't match with the i18n file. As it is redundant, you could remove it in the i18n file.", "author": "fwolter", "createdAt": "2020-08-20T17:12:57Z", "path": "bundles/org.openhab.binding.intesis/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,104 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"intesis\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Sample Thing Type -->\n+\t<thing-type id=\"intesisHome\">\n+\t\t<label>IntesisHome WiFi Adapter</label>\n+\t\t<description>IntesisHome WiFi Adapter</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"system.power\"/>\n+\t\t\t<channel id=\"mode\" typeId=\"mode\"/>\n+\t\t\t<channel id=\"windspeed\" typeId=\"windspeed\"/>\n+\t\t\t<channel id=\"swingUpDown\" typeId=\"swingUpDown\"/>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"returnTemp\" typeId=\"returnTemp\"/>\n+\t\t\t<channel id=\"outdoorTemp\" typeId=\"outdoorTemp\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>Password for API access.</description>\n+\t\t\t\t<context>password</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"ipAddress\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Address</label>\n+\t\t\t\t<description>IP Address of the IntesisHome device.</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"mode\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.intesis.mode.label</label>\n+\t\t<description>@text/channel-type.intesis.mode.description</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"0\">Auto</option>\n+\t\t\t\t<option value=\"1\">Heat</option>\n+\t\t\t\t<option value=\"2\">Dry</option>\n+\t\t\t\t<option value=\"3\">Fan</option>\n+\t\t\t\t<option value=\"4\">Cool</option>", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0Mjc2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474442769", "bodyText": "Translations are work in progress", "author": "hmerk", "createdAt": "2020-08-21T06:52:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0NjMyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0NjgxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474146819", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<label>@Outdoor Temperature</label>\n          \n          \n            \n            \t\t<label>Outdoor Temperature</label>", "author": "fwolter", "createdAt": "2020-08-20T17:13:54Z", "path": "bundles/org.openhab.binding.intesis/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,104 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"intesis\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Sample Thing Type -->\n+\t<thing-type id=\"intesisHome\">\n+\t\t<label>IntesisHome WiFi Adapter</label>\n+\t\t<description>IntesisHome WiFi Adapter</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"system.power\"/>\n+\t\t\t<channel id=\"mode\" typeId=\"mode\"/>\n+\t\t\t<channel id=\"windspeed\" typeId=\"windspeed\"/>\n+\t\t\t<channel id=\"swingUpDown\" typeId=\"swingUpDown\"/>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"returnTemp\" typeId=\"returnTemp\"/>\n+\t\t\t<channel id=\"outdoorTemp\" typeId=\"outdoorTemp\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>Password for API access.</description>\n+\t\t\t\t<context>password</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"ipAddress\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Address</label>\n+\t\t\t\t<description>IP Address of the IntesisHome device.</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"mode\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.intesis.mode.label</label>\n+\t\t<description>@text/channel-type.intesis.mode.description</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"0\">Auto</option>\n+\t\t\t\t<option value=\"1\">Heat</option>\n+\t\t\t\t<option value=\"2\">Dry</option>\n+\t\t\t\t<option value=\"3\">Fan</option>\n+\t\t\t\t<option value=\"4\">Cool</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"windspeed\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.intesis.windspeed.label</label>\n+\t\t<description>@text/channel-type.intesis.windspeed.description</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"0\">Auto</option>\n+\t\t\t\t<option value=\"1\">UltraLow</option>\n+\t\t\t\t<option value=\"2\">Low</option>\n+\t\t\t\t<option value=\"3\">Medium</option>\n+\t\t\t\t<option value=\"4\">High</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"swingUpDown\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.intesis.swingupdown.label</label>\n+\t\t<description>@text/channel-type.intesis.swingupdown.description</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"0\">Auto/STOP</option>\n+\t\t\t\t<option value=\"1\">1</option>\n+\t\t\t\t<option value=\"2\">2</option>\n+\t\t\t\t<option value=\"3\">3</option>\n+\t\t\t\t<option value=\"4\">4</option>\n+\t\t\t\t<option value=\"5\">5</option>\n+\t\t\t\t<option value=\"6\">6</option>\n+\t\t\t\t<option value=\"7\">7</option>\n+\t\t\t\t<option value=\"8\">8</option>\n+\t\t\t\t<option value=\"9\">9</option>\n+\t\t\t\t<option value=\"10\">Swing</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"temperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>@text/channel-type.intesis.temperature.label</label>\n+\t\t<description>@text/channel-type.intesis.temperature.description</description>\n+\t\t<state min=\"16\" max=\"86\" step=\"1\" pattern=\"%d %unit%\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"returnTemp\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Room Temperature</label>\n+\t\t<description>@text/channel-type.intesis.temperature.description</description>\n+\t\t<state pattern=\"%d %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"outdoorTemp\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>@Outdoor Temperature</label>", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0Mjg5Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474442897", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-08-21T06:52:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0NjgxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0NzEzMg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474147132", "bodyText": "Can you leave the header as-is?", "author": "fwolter", "createdAt": "2020-08-20T17:14:29Z", "path": "bundles/pom.xml", "diffHunk": "@@ -1,4 +1,5 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0MzU3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474443575", "bodyText": "Don't know where this commes fromm, as my local file is ok.", "author": "hmerk", "createdAt": "2020-08-21T06:54:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0NzEzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0ODE4Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474148183", "bodyText": "Channels are handled as Number in your code. You might want to specify which number maps to which mode. Same for swingUpDown.", "author": "fwolter", "createdAt": "2020-08-20T17:16:29Z", "path": "bundles/org.openhab.binding.intesis/README.md", "diffHunk": "@@ -0,0 +1,83 @@\n+# Intesis Binding\n+\n+This binding connects to WiFi [IntesisHome](http://www.intesishome.com/) devices using their local REST Api.\n+It does actually not support [IntesisBox](http://www.intesisbox.com/) devices but support is planned in upcoming version.\n+\n+\n+\n+## Supported Things\n+\n+This binding only supports one thing type:\n+\n+| Thing      | Thing Type | Description                                                            |\n+|------------|------------|------------------------------------------------------------------------|\n+| intesisHome | Thing      | Represents a single WiFi device                                         |\n+\n+## Discovery\n+\n+Intesis devices do not support auto discovery.\n+\n+## Thing Configuration\n+\n+The binding needs two configuration parameters, passwort and IP-Address.\n+\n+## Channels\n+\n+| Channel ID | Item Type          | Description                                                           | Possible Values |\n+|------------|--------------------|-----------------------------------------------------------------------|-|\n+| power      | Switch             | Turns power on/off for your climate system.                           | ON, OFF |\n+| mode       | String             | The heating/cooling mode.                                             | AUTO, HEAT, COOL, DRY, FAN |\n+| windspeed  | String             | Fan speed (if applicable)                                             | AUTO, 1-4 |", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0NTQzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474445439", "bodyText": "Changed to Number, possible values accordingly. There will be no mapping explanation, as different AC Units may have different order of modes.", "author": "hmerk", "createdAt": "2020-08-21T06:58:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0ODE4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0ODI0MA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474148240", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | Channel ID | Item Type          | Description                                                           | Possible Values |\n          \n          \n            \n            | Channel ID | Channel Type          | Description                                                           | Possible Values |", "author": "fwolter", "createdAt": "2020-08-20T17:16:36Z", "path": "bundles/org.openhab.binding.intesis/README.md", "diffHunk": "@@ -0,0 +1,83 @@\n+# Intesis Binding\n+\n+This binding connects to WiFi [IntesisHome](http://www.intesishome.com/) devices using their local REST Api.\n+It does actually not support [IntesisBox](http://www.intesisbox.com/) devices but support is planned in upcoming version.\n+\n+\n+\n+## Supported Things\n+\n+This binding only supports one thing type:\n+\n+| Thing      | Thing Type | Description                                                            |\n+|------------|------------|------------------------------------------------------------------------|\n+| intesisHome | Thing      | Represents a single WiFi device                                         |\n+\n+## Discovery\n+\n+Intesis devices do not support auto discovery.\n+\n+## Thing Configuration\n+\n+The binding needs two configuration parameters, passwort and IP-Address.\n+\n+## Channels\n+\n+| Channel ID | Item Type          | Description                                                           | Possible Values |", "originalCommit": "9ab41331bf4efb5bead57b119004c067b32c0e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0NjM5NA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r474446394", "bodyText": "No, this describes that the channel has to be linked to a certain item Type. This is common usage in the readme files.", "author": "hmerk", "createdAt": "2020-08-21T07:00:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0ODI0MA=="}], "type": "inlineReview"}, {"oid": "e8f898bb27c4858e6464c3e2abfe4bf1521b19e3", "url": "https://github.com/openhab/openhab-addons/commit/e8f898bb27c4858e6464c3e2abfe4bf1521b19e3", "message": "Intesis Binding - initial contribution\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-24T09:22:07Z", "type": "commit"}, {"oid": "d5944f56d63f4b41bd98114ba6096cf2b1e09026", "url": "https://github.com/openhab/openhab-addons/commit/d5944f56d63f4b41bd98114ba6096cf2b1e09026", "message": "Code cleaning\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-24T09:22:07Z", "type": "commit"}, {"oid": "6c69dc92c392ec88f8e6694149aa8428120525fd", "url": "https://github.com/openhab/openhab-addons/commit/6c69dc92c392ec88f8e6694149aa8428120525fd", "message": "Add README, CODEOWNERS and pom.xml\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-24T09:22:07Z", "type": "commit"}, {"oid": "a444f3750f26f130691fd1530b5563f37ecb700b", "url": "https://github.com/openhab/openhab-addons/commit/a444f3750f26f130691fd1530b5563f37ecb700b", "message": "Code Cleaning\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-24T09:22:07Z", "type": "commit"}, {"oid": "b0f12d53c66377db2ecd35ad2456c85365700486", "url": "https://github.com/openhab/openhab-addons/commit/b0f12d53c66377db2ecd35ad2456c85365700486", "message": "Add missing classpath and project file\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-24T09:22:07Z", "type": "commit"}, {"oid": "73d3b4b587018e616ce173379fe5f4045b399104", "url": "https://github.com/openhab/openhab-addons/commit/73d3b4b587018e616ce173379fe5f4045b399104", "message": "Add missing pm.xml\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-24T09:22:07Z", "type": "commit"}, {"oid": "ac4504b2317bb3f57bdaf584cc5aaf856dcc9fbe", "url": "https://github.com/openhab/openhab-addons/commit/ac4504b2317bb3f57bdaf584cc5aaf856dcc9fbe", "message": "Add session retry\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-24T09:22:07Z", "type": "commit"}, {"oid": "253765c2c2d9dc92783e52efda4362279fb6da2e", "url": "https://github.com/openhab/openhab-addons/commit/253765c2c2d9dc92783e52efda4362279fb6da2e", "message": "Refactored to use httpClientFactory()\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-24T09:22:07Z", "type": "commit"}, {"oid": "1d706c27736996a58383935e0e8dd20c57b4643b", "url": "https://github.com/openhab/openhab-addons/commit/1d706c27736996a58383935e0e8dd20c57b4643b", "message": "Avoid NPEs in IntesisHomeHandler\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-24T09:22:07Z", "type": "commit"}, {"oid": "6ff68afc607d7fe23fe35ba62b9f2950357e7bf1", "url": "https://github.com/openhab/openhab-addons/commit/6ff68afc607d7fe23fe35ba62b9f2950357e7bf1", "message": "Catched another possible NPE in IntesisHomeJsonDTO\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-24T09:22:07Z", "type": "commit"}, {"oid": "640f8b2996d61918a219e4581b3d138583efd4e6", "url": "https://github.com/openhab/openhab-addons/commit/640f8b2996d61918a219e4581b3d138583efd4e6", "message": "Applied changes after first review\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-24T09:22:07Z", "type": "commit"}, {"oid": "7e0b358217cec54969f6a46c8ef04eb49fdfa79c", "url": "https://github.com/openhab/openhab-addons/commit/7e0b358217cec54969f6a46c8ef04eb49fdfa79c", "message": "Applied more changes after first review\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-24T09:22:07Z", "type": "commit"}, {"oid": "9d58584b0c0f9bc01a66f1abd947e1345a1e117e", "url": "https://github.com/openhab/openhab-addons/commit/9d58584b0c0f9bc01a66f1abd947e1345a1e117e", "message": "Change SNAPSHOT version\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-24T09:24:00Z", "type": "commit"}, {"oid": "e616e3645d96b3e05a7635d64d755a70e694be02", "url": "https://github.com/openhab/openhab-addons/commit/e616e3645d96b3e05a7635d64d755a70e694be02", "message": "Finished localisation and refactored some channels in preparation of IntesisBox integration\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-08-26T12:06:50Z", "type": "commit"}, {"oid": "045bd480bf18803c14df72d383755c8c9ee7a813", "url": "https://github.com/openhab/openhab-addons/commit/045bd480bf18803c14df72d383755c8c9ee7a813", "message": "Refactored channel values and added dynamic channel and stateOption creation\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-01T09:04:15Z", "type": "commit"}, {"oid": "f54520518a67399dfa88a80ca34f69709f12bc0d", "url": "https://github.com/openhab/openhab-addons/commit/f54520518a67399dfa88a80ca34f69709f12bc0d", "message": "Minor corretion in README\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-01T10:25:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0OTg5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r481049892", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The binding needs two configuration parameters, passwort and IP-Address.\n          \n          \n            \n            The binding needs two configuration parameters, password and IP-Address.\n          \n      \n    \n    \n  \n\nYou might show the exact naming of those parameters here. Maybe also show them in a table.", "author": "Hilbrand", "createdAt": "2020-09-01T10:52:28Z", "path": "bundles/org.openhab.binding.intesis/README.md", "diffHunk": "@@ -0,0 +1,87 @@\n+# Intesis Binding\n+\n+This binding connects to WiFi [IntesisHome](http://www.intesishome.com/) devices using their local REST Api.\n+It does actually not support [IntesisBox](http://www.intesisbox.com/) devices but support is planned in upcoming version.\n+\n+\n+\n+## Supported Things\n+\n+This binding only supports one thing type:\n+\n+| Thing      | Thing Type | Description                                                            |\n+|------------|------------|------------------------------------------------------------------------|\n+| intesisHome | Thing      | Represents a single WiFi device                                         |\n+\n+## Discovery\n+\n+Intesis devices do not support auto discovery.\n+\n+## Thing Configuration\n+\n+The binding needs two configuration parameters, passwort and IP-Address.", "originalCommit": "f54520518a67399dfa88a80ca34f69709f12bc0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0NTc2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484545762", "bodyText": "Changed", "author": "hmerk", "createdAt": "2020-09-07T18:55:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0OTg5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MDU1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r481050552", "bodyText": "Can you format the table. You can use http://markdowntable.com/", "author": "Hilbrand", "createdAt": "2020-09-01T10:53:47Z", "path": "bundles/org.openhab.binding.intesis/README.md", "diffHunk": "@@ -0,0 +1,87 @@\n+# Intesis Binding\n+\n+This binding connects to WiFi [IntesisHome](http://www.intesishome.com/) devices using their local REST Api.\n+It does actually not support [IntesisBox](http://www.intesisbox.com/) devices but support is planned in upcoming version.\n+\n+\n+\n+## Supported Things\n+\n+This binding only supports one thing type:\n+\n+| Thing      | Thing Type | Description                                                            |\n+|------------|------------|------------------------------------------------------------------------|\n+| intesisHome | Thing      | Represents a single WiFi device                                         |\n+\n+## Discovery\n+\n+Intesis devices do not support auto discovery.\n+\n+## Thing Configuration\n+\n+The binding needs two configuration parameters, passwort and IP-Address.\n+\n+## Channels\n+\n+| Channel ID | Item Type          | Description                                                           | Possible Values |\n+|------------|--------------------|-----------------------------------------------------------------------|-|", "originalCommit": "f54520518a67399dfa88a80ca34f69709f12bc0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0NjIzNA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484546234", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-07T18:58:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MDU1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MTg4NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r481051885", "bodyText": "If you extend BaseDynamicStateDescriptionProvider you can remove most of the code.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class IntesisDynamicStateDescriptionProvider implements DynamicStateDescriptionProvider {\n          \n          \n            \n            public class IntesisDynamicStateDescriptionProvider extends BaseDynamicStateDescriptionProvider {", "author": "Hilbrand", "createdAt": "2020-09-01T10:56:30Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.type.DynamicStateDescriptionProvider;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@Component(service = { DynamicStateDescriptionProvider.class, IntesisDynamicStateDescriptionProvider.class })\n+@NonNullByDefault\n+public class IntesisDynamicStateDescriptionProvider implements DynamicStateDescriptionProvider {", "originalCommit": "f54520518a67399dfa88a80ca34f69709f12bc0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2NDQ3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484564471", "bodyText": "Changed, but do not see what code can be removed .", "author": "hmerk", "createdAt": "2020-09-07T20:50:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MTg4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2NTc5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484565795", "bodyText": "You don't have to maintain the descriptions. The base class provides this functionallity. So all methods related to maintaining that field are not needed anymore.", "author": "Hilbrand", "createdAt": "2020-09-07T20:59:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MTg4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2ODc0Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484568746", "bodyText": "Tried to remove\nremoveAllDescriptions();\ngetStateDescription();\nBut this breaks functionality. PaperUI does not show the Options anymore", "author": "hmerk", "createdAt": "2020-09-07T21:19:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MTg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MjUzNw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r481052537", "bodyText": "Do add a timeout to the request to make sure it won't block.", "author": "Hilbrand", "createdAt": "2020-09-01T10:57:46Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.api;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * {@link IntesisHomeHttpApi} wraps the IntesisHome REST API and provides various low level function to access the\n+ * device api (not cloud api).\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHttpApi {\n+    public static final String CONTENT_TYPE_JSON = \"application/json; charset=UTF-8\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHttpApi.class);\n+    private final HttpClient httpClient;\n+\n+    public IntesisHomeHttpApi(IntesisConfiguration config, HttpClient httpClient) {\n+        this.httpClient = httpClient;\n+    }\n+\n+    /**\n+     * Used to post a request to the device\n+     *\n+     * @param ipAddress of the device\n+     * @param content string\n+     * @return JSON string as response\n+     */\n+    @Nullable\n+    public String postRequest(String ipAddress, String contentString) {\n+        String url = \"http://\" + ipAddress + \"/api.cgi\";\n+        try {\n+            Request request = httpClient.POST(url);", "originalCommit": "f54520518a67399dfa88a80ca34f69709f12bc0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0Nzk5NA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484547994", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-07T19:09:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MjUzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MjkwMA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r481052900", "bodyText": "If the serialized name is the same as the field name it's redundant to add SerializedName.", "author": "Hilbrand", "createdAt": "2020-09-01T10:58:33Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/gson/IntesisHomeJSonDTO.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.gson;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * {@link IntesisHomeJSonDTO} is used for the JSon/GSon mapping\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+public class IntesisHomeJSonDTO {\n+\n+    public static class response {\n+        @SerializedName(\"success\")", "originalCommit": "f54520518a67399dfa88a80ca34f69709f12bc0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU1MTEyMg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484551122", "bodyText": "Removed all occurences", "author": "hmerk", "createdAt": "2020-09-07T19:27:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MjkwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0Mjk1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484342957", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.CONFIGURATION_PENDING);\n          \n          \n            \n                    updateStatus(ThingStatus.UNKNOWN);\n          \n      \n    \n    \n  \n\nSee https://www.openhab.org/docs/concepts/things.html#status-details", "author": "Hilbrand", "createdAt": "2020-09-07T10:27:32Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,566 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.WordUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.thing.type.DynamicStateDescriptionProvider;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.eclipse.smarthome.core.types.StateDescriptionFragmentBuilder;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler implements DynamicStateDescriptionProvider {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<ChannelUID, @Nullable StateDescription> descriptions = new ConcurrentHashMap<>();\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    private static String beautify(final String camelCaseWording) {\n+        final StringBuilder b = new StringBuilder();\n+        for (final String s : StringUtils.splitByCharacterTypeCamelCase(camelCaseWording)) {\n+            b.append(\" \");\n+            b.append(s);\n+        }\n+        final StringBuilder bs = new StringBuilder();\n+        for (final String t : StringUtils.splitByWholeSeparator(b.toString(), \" _\")) {\n+            bs.append(\" \");\n+            bs.append(t);\n+        }\n+\n+        return WordUtils.capitalizeFully(bs.toString()).trim();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.CONFIGURATION_PENDING);", "originalCommit": "f54520518a67399dfa88a80ca34f69709f12bc0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU1MTMwNw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484551307", "bodyText": "Removed", "author": "hmerk", "createdAt": "2020-09-07T19:28:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0Mjk1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0NzY5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484347691", "bodyText": "Classes should start with uppercase character:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static class response {\n          \n          \n            \n                public static class Response {", "author": "Hilbrand", "createdAt": "2020-09-07T10:37:22Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/gson/IntesisHomeJSonDTO.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.gson;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * {@link IntesisHomeJSonDTO} is used for the JSon/GSon mapping\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+public class IntesisHomeJSonDTO {\n+\n+    public static class response {", "originalCommit": "f54520518a67399dfa88a80ca34f69709f12bc0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU1MzA4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484553087", "bodyText": "Changed", "author": "hmerk", "createdAt": "2020-09-07T19:39:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0NzY5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0ODEwMg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484348102", "bodyText": "Remove empty finally", "author": "Hilbrand", "createdAt": "2020-09-07T10:38:17Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,566 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.WordUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.thing.type.DynamicStateDescriptionProvider;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.eclipse.smarthome.core.types.StateDescriptionFragmentBuilder;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler implements DynamicStateDescriptionProvider {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<ChannelUID, @Nullable StateDescription> descriptions = new ConcurrentHashMap<>();\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    private static String beautify(final String camelCaseWording) {\n+        final StringBuilder b = new StringBuilder();\n+        for (final String s : StringUtils.splitByCharacterTypeCamelCase(camelCaseWording)) {\n+            b.append(\" \");\n+            b.append(s);\n+        }\n+        final StringBuilder bs = new StringBuilder();\n+        for (final String t : StringUtils.splitByWholeSeparator(b.toString(), \" _\")) {\n+            bs.append(\" \");\n+            bs.append(t);\n+        }\n+\n+        return WordUtils.capitalizeFully(bs.toString()).trim();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            try {\n+                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+                String response = api.postRequest(ipAddress, contentString);\n+                logger.trace(\"getInfo response : {}\", response);\n+                if (response != null) {\n+                    boolean success = getSuccess(response);\n+                    if (success) {\n+                        response resp = gson.fromJson(response, response.class);\n+                        data data = gson.fromJson(resp.data.toString(), data.class);\n+                        info info = gson.fromJson(data.info.toString(), info.class);\n+                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                        properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                        properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                        properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                        properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                        updateProperties(properties);\n+                        login();\n+                        if (!sessionId.isEmpty()) {\n+                            updateStatus(ThingStatus.ONLINE);\n+                            contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n+                                    + sessionId + \"\\\"}}\";\n+                            response = api.postRequest(ipAddress, contentString);\n+                            logger.trace(\"available Datapoints response : {}\", response);\n+                            if (response != null) {\n+                                success = getSuccess(response);\n+                                if (success) {\n+                                    logout();\n+                                    resp = gson.fromJson(response, response.class);\n+                                    data = gson.fromJson(resp.data.toString(), data.class);\n+                                    dp dp = gson.fromJson(data.dp.toString(), dp.class);\n+                                    datapoints[] datapoints = gson.fromJson(dp.datapoints, datapoints[].class);\n+                                    for (int i = 0; i < datapoints.length; i++) {\n+                                        descr descr = gson.fromJson(datapoints[i].descr, descr.class);\n+                                        String channelId = \"\";\n+                                        String itemType = \"String\";\n+                                        switch (datapoints[i].uid) {\n+                                            case 2:\n+                                                List<String> opModes = new ArrayList<>();\n+                                                String[] modString = descr.states;\n+                                                for (int i1 = 0; i1 < modString.length; i1++) {\n+                                                    switch (modString[i1]) {\n+                                                        case \"0\":\n+                                                            opModes.add(\"AUTO\");\n+                                                            break;\n+                                                        case \"1\":\n+                                                            opModes.add(\"HEAT\");\n+                                                            break;\n+                                                        case \"2\":\n+                                                            opModes.add(\"DRY\");\n+                                                            break;\n+                                                        case \"3\":\n+                                                            opModes.add(\"FAN\");\n+                                                            break;\n+                                                        case \"4\":\n+                                                            opModes.add(\"COOL\");\n+                                                            break;\n+                                                    }\n+                                                }\n+                                                properties.put(\"Supported modes\", opModes.toString());\n+                                                updateProperties(properties);\n+                                                channelId = CHANNEL_TYPE_MODE;\n+                                                addChannel(channelId, itemType, opModes);\n+                                                break;\n+                                            case 4:\n+                                                List<String> fanLevels = new ArrayList<>();\n+                                                String[] fanString = descr.states;\n+                                                for (int i1 = 0; i1 < fanString.length; i1++) {\n+                                                    if (\"AUTO\".contentEquals(fanString[i1])) {\n+                                                        fanLevels.add(\"AUTO\");\n+                                                    } else {\n+                                                        fanLevels.add(fanString[i1]);\n+                                                    }\n+                                                }\n+                                                properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                                updateProperties(properties);\n+                                                channelId = CHANNEL_TYPE_FANSPEED;\n+                                                addChannel(channelId, itemType, fanLevels);\n+                                                break;\n+                                            case 5:\n+                                                List<String> swingUDModes = new ArrayList<>();\n+                                                String[] swingUDString = descr.states;\n+                                                for (int i1 = 0; i1 < swingUDString.length; i1++) {\n+                                                    if (\"AUTO\".contentEquals(swingUDString[i1])) {\n+                                                        swingUDModes.add(\"AUTO\");\n+                                                    } else if (\"10\".contentEquals(swingUDString[i1])) {\n+                                                        swingUDModes.add(\"SWING\");\n+                                                    } else if (\"11\".contentEquals(swingUDString[i1])) {\n+                                                        swingUDModes.add(\"SWIRL\");\n+                                                    } else if (\"12\".contentEquals(swingUDString[i1])) {\n+                                                        swingUDModes.add(\"WIDE\");\n+                                                    } else {\n+                                                        swingUDModes.add(swingUDString[i1]);\n+                                                    }\n+                                                }\n+                                                channelId = CHANNEL_TYPE_VANESUD;\n+                                                properties.put(\"Supported vane up/down modes\", swingUDModes.toString());\n+                                                updateProperties(properties);\n+                                                addChannel(channelId, itemType, swingUDModes);\n+                                                break;\n+                                            case 6:\n+                                                List<String> swingLRModes = new ArrayList<>();\n+                                                String[] swingLRString = descr.states;\n+                                                for (int i1 = 0; i1 < swingLRString.length; i1++) {\n+                                                    if (\"AUTO\".contentEquals(swingLRString[i1])) {\n+                                                        swingLRModes.add(\"AUTO\");\n+                                                    } else if (\"10\".contentEquals(swingLRString[i1])) {\n+                                                        swingLRModes.add(\"SWING\");\n+                                                    } else if (\"11\".contentEquals(swingLRString[i1])) {\n+                                                        swingLRModes.add(\"SWIRL\");\n+                                                    } else if (\"12\".contentEquals(swingLRString[i1])) {\n+                                                        swingLRModes.add(\"WIDE\");\n+                                                    } else {\n+                                                        swingLRModes.add(swingLRString[i1]);\n+                                                    }\n+                                                }\n+                                                channelId = CHANNEL_TYPE_VANESLR;\n+                                                properties.put(\"Supported vane left/right modes\",\n+                                                        swingLRModes.toString());\n+                                                updateProperties(properties);\n+                                                addChannel(channelId, itemType, swingLRModes);\n+                                                break;\n+                                            case 9:\n+                                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid,\n+                                                        descr.minValue);\n+                                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid,\n+                                                        descr.maxValue);\n+                                                channelId = CHANNEL_TYPE_TARGETTEMP;\n+                                                itemType = \"Number:Temperature\";\n+                                                addChannel(channelId, itemType, null);\n+                                                break;\n+                                            case 10:\n+                                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid,\n+                                                        descr.minValue);\n+                                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid,\n+                                                        descr.maxValue);\n+                                                channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                                                itemType = \"Number:Temperature\";\n+                                                addChannel(channelId, itemType, null);\n+                                                break;\n+                                            case 37:\n+                                                logger.trace(\"Add Channel Outdoor Temperature\");\n+                                                logger.trace(\"UID : {} ; description : {}\", datapoints[i].uid,\n+                                                        datapoints[i].descr);\n+                                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid,\n+                                                        descr.minValue);\n+                                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid,\n+                                                        descr.maxValue);\n+                                                channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                                                itemType = \"Number:Temperature\";\n+                                                addChannel(channelId, itemType, null);\n+                                                break;\n+                                        }\n+                                    }\n+                                }\n+                            } else {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            }\n+                            logger.trace(\"Start Refresh Job\");\n+                            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0,\n+                                    INTESIS_REFRESH_INTERVAL_SEC, TimeUnit.SECONDS);\n+                        } else {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } finally {", "originalCommit": "f54520518a67399dfa88a80ca34f69709f12bc0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU1MzMxMA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484553310", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-07T19:40:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0ODEwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0OTk0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484349947", "bodyText": "This is a horribly long inline method. Please put this code in a method and pass with this::startupInitialization (or whatever name). Also do split the content of this method in multiple smaller methods. You can select a block of code in eclipse (if you use that) and Ctrl-1 will give you if you select a coherent part the option to extract as method. Even better would be to split different code behavior into separate classes.", "author": "Hilbrand", "createdAt": "2020-09-07T10:42:02Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,566 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.WordUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.thing.type.DynamicStateDescriptionProvider;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.eclipse.smarthome.core.types.StateDescriptionFragmentBuilder;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler implements DynamicStateDescriptionProvider {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<ChannelUID, @Nullable StateDescription> descriptions = new ConcurrentHashMap<>();\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    private static String beautify(final String camelCaseWording) {\n+        final StringBuilder b = new StringBuilder();\n+        for (final String s : StringUtils.splitByCharacterTypeCamelCase(camelCaseWording)) {\n+            b.append(\" \");\n+            b.append(s);\n+        }\n+        final StringBuilder bs = new StringBuilder();\n+        for (final String t : StringUtils.splitByWholeSeparator(b.toString(), \" _\")) {\n+            bs.append(\" \");\n+            bs.append(t);\n+        }\n+\n+        return WordUtils.capitalizeFully(bs.toString()).trim();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {", "originalCommit": "f54520518a67399dfa88a80ca34f69709f12bc0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU1NTgwNA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484555804", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-07T19:55:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM0OTk0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1MDI2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484350269", "bodyText": "This can be a switch statement", "author": "Hilbrand", "createdAt": "2020-09-07T10:42:46Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,566 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.WordUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.thing.type.DynamicStateDescriptionProvider;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.eclipse.smarthome.core.types.StateDescriptionFragmentBuilder;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler implements DynamicStateDescriptionProvider {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<ChannelUID, @Nullable StateDescription> descriptions = new ConcurrentHashMap<>();\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    private static String beautify(final String camelCaseWording) {\n+        final StringBuilder b = new StringBuilder();\n+        for (final String s : StringUtils.splitByCharacterTypeCamelCase(camelCaseWording)) {\n+            b.append(\" \");\n+            b.append(s);\n+        }\n+        final StringBuilder bs = new StringBuilder();\n+        for (final String t : StringUtils.splitByWholeSeparator(b.toString(), \" _\")) {\n+            bs.append(\" \");\n+            bs.append(t);\n+        }\n+\n+        return WordUtils.capitalizeFully(bs.toString()).trim();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.CONFIGURATION_PENDING);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            try {\n+                String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+                String response = api.postRequest(ipAddress, contentString);\n+                logger.trace(\"getInfo response : {}\", response);\n+                if (response != null) {\n+                    boolean success = getSuccess(response);\n+                    if (success) {\n+                        response resp = gson.fromJson(response, response.class);\n+                        data data = gson.fromJson(resp.data.toString(), data.class);\n+                        info info = gson.fromJson(data.info.toString(), info.class);\n+                        properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                        properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                        properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                        properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                        properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                        updateProperties(properties);\n+                        login();\n+                        if (!sessionId.isEmpty()) {\n+                            updateStatus(ThingStatus.ONLINE);\n+                            contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\"\n+                                    + sessionId + \"\\\"}}\";\n+                            response = api.postRequest(ipAddress, contentString);\n+                            logger.trace(\"available Datapoints response : {}\", response);\n+                            if (response != null) {\n+                                success = getSuccess(response);\n+                                if (success) {\n+                                    logout();\n+                                    resp = gson.fromJson(response, response.class);\n+                                    data = gson.fromJson(resp.data.toString(), data.class);\n+                                    dp dp = gson.fromJson(data.dp.toString(), dp.class);\n+                                    datapoints[] datapoints = gson.fromJson(dp.datapoints, datapoints[].class);\n+                                    for (int i = 0; i < datapoints.length; i++) {\n+                                        descr descr = gson.fromJson(datapoints[i].descr, descr.class);\n+                                        String channelId = \"\";\n+                                        String itemType = \"String\";\n+                                        switch (datapoints[i].uid) {\n+                                            case 2:\n+                                                List<String> opModes = new ArrayList<>();\n+                                                String[] modString = descr.states;\n+                                                for (int i1 = 0; i1 < modString.length; i1++) {\n+                                                    switch (modString[i1]) {\n+                                                        case \"0\":\n+                                                            opModes.add(\"AUTO\");\n+                                                            break;\n+                                                        case \"1\":\n+                                                            opModes.add(\"HEAT\");\n+                                                            break;\n+                                                        case \"2\":\n+                                                            opModes.add(\"DRY\");\n+                                                            break;\n+                                                        case \"3\":\n+                                                            opModes.add(\"FAN\");\n+                                                            break;\n+                                                        case \"4\":\n+                                                            opModes.add(\"COOL\");\n+                                                            break;\n+                                                    }\n+                                                }\n+                                                properties.put(\"Supported modes\", opModes.toString());\n+                                                updateProperties(properties);\n+                                                channelId = CHANNEL_TYPE_MODE;\n+                                                addChannel(channelId, itemType, opModes);\n+                                                break;\n+                                            case 4:\n+                                                List<String> fanLevels = new ArrayList<>();\n+                                                String[] fanString = descr.states;\n+                                                for (int i1 = 0; i1 < fanString.length; i1++) {\n+                                                    if (\"AUTO\".contentEquals(fanString[i1])) {\n+                                                        fanLevels.add(\"AUTO\");\n+                                                    } else {\n+                                                        fanLevels.add(fanString[i1]);\n+                                                    }\n+                                                }\n+                                                properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                                updateProperties(properties);\n+                                                channelId = CHANNEL_TYPE_FANSPEED;\n+                                                addChannel(channelId, itemType, fanLevels);\n+                                                break;\n+                                            case 5:\n+                                                List<String> swingUDModes = new ArrayList<>();\n+                                                String[] swingUDString = descr.states;\n+                                                for (int i1 = 0; i1 < swingUDString.length; i1++) {\n+                                                    if (\"AUTO\".contentEquals(swingUDString[i1])) {\n+                                                        swingUDModes.add(\"AUTO\");\n+                                                    } else if (\"10\".contentEquals(swingUDString[i1])) {\n+                                                        swingUDModes.add(\"SWING\");\n+                                                    } else if (\"11\".contentEquals(swingUDString[i1])) {\n+                                                        swingUDModes.add(\"SWIRL\");\n+                                                    } else if (\"12\".contentEquals(swingUDString[i1])) {\n+                                                        swingUDModes.add(\"WIDE\");\n+                                                    } else {\n+                                                        swingUDModes.add(swingUDString[i1]);\n+                                                    }\n+                                                }\n+                                                channelId = CHANNEL_TYPE_VANESUD;\n+                                                properties.put(\"Supported vane up/down modes\", swingUDModes.toString());\n+                                                updateProperties(properties);\n+                                                addChannel(channelId, itemType, swingUDModes);\n+                                                break;\n+                                            case 6:\n+                                                List<String> swingLRModes = new ArrayList<>();\n+                                                String[] swingLRString = descr.states;\n+                                                for (int i1 = 0; i1 < swingLRString.length; i1++) {\n+                                                    if (\"AUTO\".contentEquals(swingLRString[i1])) {\n+                                                        swingLRModes.add(\"AUTO\");\n+                                                    } else if (\"10\".contentEquals(swingLRString[i1])) {\n+                                                        swingLRModes.add(\"SWING\");\n+                                                    } else if (\"11\".contentEquals(swingLRString[i1])) {\n+                                                        swingLRModes.add(\"SWIRL\");\n+                                                    } else if (\"12\".contentEquals(swingLRString[i1])) {\n+                                                        swingLRModes.add(\"WIDE\");\n+                                                    } else {\n+                                                        swingLRModes.add(swingLRString[i1]);\n+                                                    }\n+                                                }\n+                                                channelId = CHANNEL_TYPE_VANESLR;\n+                                                properties.put(\"Supported vane left/right modes\",\n+                                                        swingLRModes.toString());\n+                                                updateProperties(properties);\n+                                                addChannel(channelId, itemType, swingLRModes);\n+                                                break;\n+                                            case 9:\n+                                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid,\n+                                                        descr.minValue);\n+                                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid,\n+                                                        descr.maxValue);\n+                                                channelId = CHANNEL_TYPE_TARGETTEMP;\n+                                                itemType = \"Number:Temperature\";\n+                                                addChannel(channelId, itemType, null);\n+                                                break;\n+                                            case 10:\n+                                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid,\n+                                                        descr.minValue);\n+                                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid,\n+                                                        descr.maxValue);\n+                                                channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                                                itemType = \"Number:Temperature\";\n+                                                addChannel(channelId, itemType, null);\n+                                                break;\n+                                            case 37:\n+                                                logger.trace(\"Add Channel Outdoor Temperature\");\n+                                                logger.trace(\"UID : {} ; description : {}\", datapoints[i].uid,\n+                                                        datapoints[i].descr);\n+                                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid,\n+                                                        descr.minValue);\n+                                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid,\n+                                                        descr.maxValue);\n+                                                channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                                                itemType = \"Number:Temperature\";\n+                                                addChannel(channelId, itemType, null);\n+                                                break;\n+                                        }\n+                                    }\n+                                }\n+                            } else {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            }\n+                            logger.trace(\"Start Refresh Job\");\n+                            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0,\n+                                    INTESIS_REFRESH_INTERVAL_SEC, TimeUnit.SECONDS);\n+                        } else {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } finally {\n+            }\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // getAllUidValues();\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else if ((\"SWING\").equals(command.toString())) {\n+                        value = 10;\n+                    } else if ((\"SWIRL\").equals(command.toString())) {\n+                        value = 11;\n+                    } else if ((\"WIDE\").equals(command.toString())) {\n+                        value = 12;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }", "originalCommit": "f54520518a67399dfa88a80ca34f69709f12bc0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU1NjgzNg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484556836", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-07T20:01:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1MDI2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1MDg3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484350872", "bodyText": "Remove usage of apache library as it will be removed in openHAB 3", "author": "Hilbrand", "createdAt": "2020-09-07T10:43:53Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,566 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.WordUtils;", "originalCommit": "f54520518a67399dfa88a80ca34f69709f12bc0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2MjA0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484562041", "bodyText": "Removed", "author": "hmerk", "createdAt": "2020-09-07T20:35:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1MDg3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1NDYzMA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484354630", "bodyText": "Put DynamicStateDescriptionProvider in a separate class and let it extend BaseDynamicStateDescriptionProvider that way you can make a minimal implementation.", "author": "Hilbrand", "createdAt": "2020-09-07T10:50:28Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,566 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.WordUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.thing.type.DynamicStateDescriptionProvider;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.eclipse.smarthome.core.types.StateDescriptionFragmentBuilder;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler implements DynamicStateDescriptionProvider {", "originalCommit": "f54520518a67399dfa88a80ca34f69709f12bc0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU1NzcwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484557705", "bodyText": "Removed Leftover", "author": "hmerk", "createdAt": "2020-09-07T20:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1NDYzMA=="}], "type": "inlineReview"}, {"oid": "e773227e604233c9a344f5184232133c1db725f8", "url": "https://github.com/openhab/openhab-addons/commit/e773227e604233c9a344f5184232133c1db725f8", "message": "Implement changes after review\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-07T20:52:19Z", "type": "commit"}, {"oid": "6a765029cf496a5128b348dfc805a72c32a7a405", "url": "https://github.com/openhab/openhab-addons/commit/6a765029cf496a5128b348dfc805a72c32a7a405", "message": "resolv conflicting pom.xml\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-07T20:58:14Z", "type": "commit"}, {"oid": "f4a15a66deb29dc15cdc45a854493048cd43332b", "url": "https://github.com/openhab/openhab-addons/commit/f4a15a66deb29dc15cdc45a854493048cd43332b", "message": "Merge branch '2.5.x' into Intesis_Binding", "committedDate": "2020-09-07T21:12:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkzMDUyMg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484930522", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class IntesisDynamicStateDescriptionProvider extends BaseDynamicStateDescriptionProvider {\n          \n          \n            \n            \n          \n          \n            \n                private final Logger logger = LoggerFactory.getLogger(getClass());\n          \n          \n            \n            \n          \n          \n            \n                private final Map<ChannelUID, @Nullable StateDescription> descriptions = new ConcurrentHashMap<>();\n          \n          \n            \n            \n          \n          \n            \n                public void setDescription(ChannelUID channelUID, @Nullable StateDescription description) {\n          \n          \n            \n                    logger.debug(\"Adding state description for channel {}\", channelUID);\n          \n          \n            \n                    descriptions.put(channelUID, description);\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public void removeAllDescriptions() {\n          \n          \n            \n                    logger.debug(\"Removing all state descriptions\");\n          \n          \n            \n                    descriptions.clear();\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                @Override\n          \n          \n            \n                public @Nullable StateDescription getStateDescription(Channel channel,\n          \n          \n            \n                        @Nullable StateDescription originalStateDescription, @Nullable Locale locale) {\n          \n          \n            \n                    StateDescription description = descriptions.get(channel.getUID());\n          \n          \n            \n                    return description;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                @Override\n          \n          \n            \n                @Deactivate\n          \n          \n            \n                public void deactivate() {\n          \n          \n            \n                    descriptions.clear();\n          \n          \n            \n                }\n          \n          \n            \n            }\n          \n          \n            \n            public class IntesisDynamicStateDescriptionProvider extends BaseDynamicStateDescriptionProvider {\n          \n          \n            \n            }\n          \n      \n    \n    \n  \n\nAnd in IntesisHomeHandler replace\n    updateStateDescription(thing.getChannel(channelId).getUID(), stateOptions);\n\nwith\n     intesisStateDescriptionProvider.setStateOptions(thing.getChannel(channelId).getUID(), stateOptions);\n\nAnd remove updateStateDescription.", "author": "Hilbrand", "createdAt": "2020-09-08T13:42:53Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/IntesisDynamicStateDescriptionProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseDynamicStateDescriptionProvider;\n+import org.eclipse.smarthome.core.thing.type.DynamicStateDescriptionProvider;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@Component(service = { DynamicStateDescriptionProvider.class, IntesisDynamicStateDescriptionProvider.class })\n+@NonNullByDefault\n+public class IntesisDynamicStateDescriptionProvider extends BaseDynamicStateDescriptionProvider {\n+\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private final Map<ChannelUID, @Nullable StateDescription> descriptions = new ConcurrentHashMap<>();\n+\n+    public void setDescription(ChannelUID channelUID, @Nullable StateDescription description) {\n+        logger.debug(\"Adding state description for channel {}\", channelUID);\n+        descriptions.put(channelUID, description);\n+    }\n+\n+    public void removeAllDescriptions() {\n+        logger.debug(\"Removing all state descriptions\");\n+        descriptions.clear();\n+    }\n+\n+    @Override\n+    public @Nullable StateDescription getStateDescription(Channel channel,\n+            @Nullable StateDescription originalStateDescription, @Nullable Locale locale) {\n+        StateDescription description = descriptions.get(channel.getUID());\n+        return description;\n+    }\n+\n+    @Override\n+    @Deactivate\n+    public void deactivate() {\n+        descriptions.clear();\n+    }\n+}", "originalCommit": "f4a15a66deb29dc15cdc45a854493048cd43332b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk5Mzk2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r484993961", "bodyText": "Thanks @Hilbrand, I will give it a try later tonight or tomorrow and report back.", "author": "hmerk", "createdAt": "2020-09-08T15:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkzMDUyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE4MzY2MA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r485183660", "bodyText": "Thanks again @Hilbrand !!!! That worked an is implemented now. Had some trouble with the commit, but solved it.", "author": "hmerk", "createdAt": "2020-09-08T20:40:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkzMDUyMg=="}], "type": "inlineReview"}, {"oid": "b21bc3ddd7ac54ec9a8a1dd1c0eb088e0291c0bc", "url": "https://github.com/openhab/openhab-addons/commit/b21bc3ddd7ac54ec9a8a1dd1c0eb088e0291c0bc", "message": "Refactor DynamicStateDescriptionProvider after review\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-08T20:32:24Z", "type": "commit"}, {"oid": "f2926350d73fde0aa6dbe4d6ac287bb2524d403d", "url": "https://github.com/openhab/openhab-addons/commit/f2926350d73fde0aa6dbe4d6ac287bb2524d403d", "message": "Revert \"Refactor DynamicStateDescriptionProvider after review\"\n\nThis reverts commit c87f34f5eba0cba21fda6feff73bcae2352465f0.", "committedDate": "2020-09-08T20:32:24Z", "type": "commit"}, {"oid": "fcac653784baca12d96d9bbf142e3540966e6c0d", "url": "https://github.com/openhab/openhab-addons/commit/fcac653784baca12d96d9bbf142e3540966e6c0d", "message": "Refactor dynamic state options\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-08T20:38:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4ODIyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r487788229", "bodyText": "Is this supposed to be a headline? Then, there's a space missing.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ###Note that individual A/C units may not support all channels, or all possible values for those channels.\n          \n          \n            \n            ### Note that individual A/C units may not support all channels, or all possible values for those channels.", "author": "fwolter", "createdAt": "2020-09-14T09:50:35Z", "path": "bundles/org.openhab.binding.intesis/README.md", "diffHunk": "@@ -0,0 +1,93 @@\n+# Intesis Binding\n+\n+This binding connects to WiFi [IntesisHome](http://www.intesishome.com/) devices using their local REST Api.\n+It does actually not support [IntesisBox](http://www.intesisbox.com/) devices but support is planned in upcoming version.\n+\n+\n+\n+## Supported Things\n+\n+This binding only supports one thing type:\n+\n+| Thing       | Thing Type | Description                     |\n+|------------ |------------|---------------------------------|\n+| intesisHome | Thing      | Represents a single WiFi device |\n+\n+## Discovery\n+\n+Intesis devices do not support auto discovery.\n+\n+## Thing Configuration\n+\n+The binding needs two configuration parameters.\n+\n+| Parameter | Description                                       |\n+|-----------|---------------------------------------------------|\n+| ipAddress | IP-Address of the              device             |\n+| password  | Password to login to thelocal webserver of device |\n+\n+\n+## Channels\n+\n+| Channel ID         | Item Type          | Description                                 | Possible Values           |\n+|--------------------|--------------------|---------------------------------------------|---------------------------|\n+| power              | Switch             | Turns power on/off for your climate system. | ON, OFF                   |\n+| mode               | String             | The heating/cooling mode.                   | AUTO,HEAT,DRY,FAN,COOL    |\n+| fanSpeed           | String             | Fan speed (if applicable)                   | AUTO,1-10                 |\n+| vanesUpDown        | String             | Control of up/down vanes (if applicable)    | AUTO,1-9,SWING,SWIRL,WIDE |\n+| vanesUpDown        | String             | Control of left/right vanes (if applicable) | AUTO,1-9,SWING,SWIRL,WIDE |\n+| targetTemperature  | Number:Temperature | The currently set target temperature.       |                           |\n+| ambientTemperature | Number:Temperature | (Readonly) The ambient air temperature.     |                           |\n+| outdoorTemperature | Number:Temperature | (Readonly) The outdoor air temperature.     |                           |\n+\n+\n+\n+###Note that individual A/C units may not support all channels, or all possible values for those channels.", "originalCommit": "fcac653784baca12d96d9bbf142e3540966e6c0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyNzA5OA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r487827098", "bodyText": "Changed", "author": "hmerk", "createdAt": "2020-09-14T11:01:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4ODIyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4OTYzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r487789639", "bodyText": "It seems a bit unreasonable to log the stack trace when the network fails.", "author": "fwolter", "createdAt": "2020-09-14T09:52:55Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/api/IntesisHomeHttpApi.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.api;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * {@link IntesisHomeHttpApi} wraps the IntesisHome REST API and provides various low level function to access the\n+ * device api (not cloud api).\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHttpApi {\n+    public static final String CONTENT_TYPE_JSON = \"application/json; charset=UTF-8\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHttpApi.class);\n+    private final HttpClient httpClient;\n+\n+    public IntesisHomeHttpApi(IntesisConfiguration config, HttpClient httpClient) {\n+        this.httpClient = httpClient;\n+    }\n+\n+    /**\n+     * Used to post a request to the device\n+     *\n+     * @param ipAddress of the device\n+     * @param content string\n+     * @return JSON string as response\n+     */\n+    @Nullable\n+    public String postRequest(String ipAddress, String contentString) {\n+        String url = \"http://\" + ipAddress + \"/api.cgi\";\n+        try {\n+            Request request = httpClient.POST(url);\n+            request.header(HttpHeader.CONTENT_TYPE, \"application/json\");\n+            request.content(new StringContentProvider(contentString), \"application/json\");\n+\n+            ContentResponse contentResponse = request.timeout(5, TimeUnit.SECONDS).send();\n+\n+            String response = contentResponse.getContentAsString().replace(\"\\t\", \"\").replace(\"\\r\\n\", \"\").trim();\n+            logger.trace(\"HTTP Response {}: {}\", contentResponse.getStatus(), response);\n+\n+            if (response != null && !response.isEmpty()) {\n+                return response;\n+            } else {\n+                return null;\n+            }\n+        } catch (TimeoutException | InterruptedException | ExecutionException e) {\n+            logger.debug(\"Could not make HTTP Post request\", e);", "originalCommit": "fcac653784baca12d96d9bbf142e3540966e6c0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3NTY5NA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r487875694", "bodyText": "removed logging of stack trace", "author": "hmerk", "createdAt": "2020-09-14T12:33:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4OTYzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5MjYxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r487792611", "bodyText": "Can you handle the refresh command?", "author": "fwolter", "createdAt": "2020-09-14T09:57:41Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,552 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // getAllUidValues();", "originalCommit": "fcac653784baca12d96d9bbf142e3540966e6c0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgzMDUyNw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r487830527", "bodyText": "Removed debug logger.\nRefresh command is not supported as the binding polls all values every 30 seconds.", "author": "hmerk", "createdAt": "2020-09-14T11:07:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5MjYxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5NTA0NA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r487795044", "bodyText": "toUnit() is Nullable. Please add a null check.", "author": "fwolter", "createdAt": "2020-09-14T10:01:41Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,552 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // getAllUidValues();\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        value = ((QuantityType) command).toUnit(SIUnits.CELSIUS).intValue() * 10;", "originalCommit": "fcac653784baca12d96d9bbf142e3540966e6c0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3MzQzNg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r487873436", "bodyText": "Could you help me with this ??? Can't figure out how to detect if toUnit(Unit) can be checked here.", "author": "hmerk", "createdAt": "2020-09-14T12:30:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5NTA0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAwMDI1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r488000252", "bodyText": "Solved and changed", "author": "hmerk", "createdAt": "2020-09-14T14:59:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5NTA0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5NjE0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r487796141", "bodyText": "Please add a null check instead of suppressing the warning.", "author": "fwolter", "createdAt": "2020-09-14T10:03:39Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,552 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // getAllUidValues();\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        value = ((QuantityType) command).toUnit(SIUnits.CELSIUS).intValue() * 10;\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            Response resp = gson.fromJson(response, Response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Id id = gson.fromJson(data.id.toString(), Id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        Response resp = gson.fromJson(response, Response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }\n+\n+    public void getInfo() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (success) {\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Info info = gson.fromJson(data.info.toString(), Info.class);\n+                properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                updateProperties(properties);\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {\n+        login();\n+        if (!sessionId.isEmpty()) {\n+            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.trace(\"available Datapoints response : {}\", response);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (success) {\n+                    logout();\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                    Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                    for (int i = 0; i < datapoints.length; i++) {\n+                        Descr descr = gson.fromJson(datapoints[i].descr, Descr.class);\n+                        String channelId = \"\";\n+                        String itemType = \"String\";\n+                        switch (datapoints[i].uid) {\n+                            case 2:\n+                                List<String> opModes = new ArrayList<>();\n+                                String[] modString = descr.states;\n+                                for (int i1 = 0; i1 < modString.length; i1++) {\n+                                    switch (modString[i1]) {\n+                                        case \"0\":\n+                                            opModes.add(\"AUTO\");\n+                                            break;\n+                                        case \"1\":\n+                                            opModes.add(\"HEAT\");\n+                                            break;\n+                                        case \"2\":\n+                                            opModes.add(\"DRY\");\n+                                            break;\n+                                        case \"3\":\n+                                            opModes.add(\"FAN\");\n+                                            break;\n+                                        case \"4\":\n+                                            opModes.add(\"COOL\");\n+                                            break;\n+                                    }\n+                                }\n+                                properties.put(\"Supported modes\", opModes.toString());\n+                                updateProperties(properties);\n+                                channelId = CHANNEL_TYPE_MODE;\n+                                addChannel(channelId, itemType, opModes);\n+                                break;\n+                            case 4:\n+                                List<String> fanLevels = new ArrayList<>();\n+                                String[] fanString = descr.states;\n+                                for (int i1 = 0; i1 < fanString.length; i1++) {\n+                                    if (\"AUTO\".contentEquals(fanString[i1])) {\n+                                        fanLevels.add(\"AUTO\");\n+                                    } else {\n+                                        fanLevels.add(fanString[i1]);\n+                                    }\n+                                }\n+                                properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                updateProperties(properties);\n+                                channelId = CHANNEL_TYPE_FANSPEED;\n+                                addChannel(channelId, itemType, fanLevels);\n+                                break;\n+                            case 5:\n+                                List<String> swingUDModes = new ArrayList<>();\n+                                String[] swingUDString = descr.states;\n+                                for (int i1 = 0; i1 < swingUDString.length; i1++) {\n+                                    if (\"AUTO\".contentEquals(swingUDString[i1])) {\n+                                        swingUDModes.add(\"AUTO\");\n+                                    } else if (\"10\".contentEquals(swingUDString[i1])) {\n+                                        swingUDModes.add(\"SWING\");\n+                                    } else if (\"11\".contentEquals(swingUDString[i1])) {\n+                                        swingUDModes.add(\"SWIRL\");\n+                                    } else if (\"12\".contentEquals(swingUDString[i1])) {\n+                                        swingUDModes.add(\"WIDE\");\n+                                    } else {\n+                                        swingUDModes.add(swingUDString[i1]);\n+                                    }\n+                                }\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingUDModes.toString());\n+                                updateProperties(properties);\n+                                addChannel(channelId, itemType, swingUDModes);\n+                                break;\n+                            case 6:\n+                                List<String> swingLRModes = new ArrayList<>();\n+                                String[] swingLRString = descr.states;\n+                                for (int i1 = 0; i1 < swingLRString.length; i1++) {\n+                                    if (\"AUTO\".contentEquals(swingLRString[i1])) {\n+                                        swingLRModes.add(\"AUTO\");\n+                                    } else if (\"10\".contentEquals(swingLRString[i1])) {\n+                                        swingLRModes.add(\"SWING\");\n+                                    } else if (\"11\".contentEquals(swingLRString[i1])) {\n+                                        swingLRModes.add(\"SWIRL\");\n+                                    } else if (\"12\".contentEquals(swingLRString[i1])) {\n+                                        swingLRModes.add(\"WIDE\");\n+                                    } else {\n+                                        swingLRModes.add(swingLRString[i1]);\n+                                    }\n+                                }\n+                                channelId = CHANNEL_TYPE_VANESLR;\n+                                properties.put(\"Supported vane left/right modes\", swingLRModes.toString());\n+                                updateProperties(properties);\n+                                addChannel(channelId, itemType, swingLRModes);\n+                                break;\n+                            case 9:\n+                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid, descr.minValue);\n+                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid, descr.maxValue);\n+                                channelId = CHANNEL_TYPE_TARGETTEMP;\n+                                itemType = \"Number:Temperature\";\n+                                addChannel(channelId, itemType, null);\n+                                break;\n+                            case 10:\n+                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid, descr.minValue);\n+                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid, descr.maxValue);\n+                                channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                                itemType = \"Number:Temperature\";\n+                                addChannel(channelId, itemType, null);\n+                                break;\n+                            case 37:\n+                                logger.trace(\"Add Channel Outdoor Temperature\");\n+                                logger.trace(\"UID : {} ; description : {}\", datapoints[i].uid, datapoints[i].descr);\n+                                logger.trace(\"UID : {} ; minValue : {}\", datapoints[i].uid, descr.minValue);\n+                                logger.trace(\"UID : {} ; maxValue : {}\", datapoints[i].uid, descr.maxValue);\n+                                channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                                itemType = \"Number:Temperature\";\n+                                addChannel(channelId, itemType, null);\n+                                break;\n+                        }\n+                    }\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+            logger.trace(\"Start Refresh Job\");\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                    TimeUnit.SECONDS);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"null\")", "originalCommit": "fcac653784baca12d96d9bbf142e3540966e6c0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4MjE2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r487882167", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-14T12:44:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5NjE0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5Njk2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r487796961", "bodyText": "Same for below.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            channel-type.intesis.targetTemperature.label = Soll Temperatur\n          \n          \n            \n            channel-type.intesis.targetTemperature.label = Solltemperatur", "author": "fwolter", "createdAt": "2020-09-14T10:05:05Z", "path": "bundles/org.openhab.binding.intesis/src/main/resources/ESH-INF/i18n/intesis_de.properties", "diffHunk": "@@ -0,0 +1,42 @@\n+# binding\n+binding.intesis.name = Intesis Binding\n+binding.intesis.description = Das Intesis Binding integriert die Intesis WiFi Adapter, welche in diversen Klimager\ufffdten verwendet werden.\n+\n+# thing types\n+thing-type.intesis.intesisHome.label = IntesisHome\n+thing-type.intesis.sample.description = IntesisHome WIFI Adapter\n+\n+# thing type config description\n+thing-type.config.intesis.ipAddress.label = IP Addresse\n+thing-type.config.intesis.ipAddress.description = IP Addresse des Intesis Adapters.\n+thing-type.config.intesisHome.password.label = Passwort\n+thing-type.config.intesisHome.password.description = Password zum Login in den lokalen Web-Server des IntesisHome Adapters.\n+\n+\n+# channel types\n+channel-type.intesis.power.label = Betrieb\n+channel-type.intesis.power.description = Schaltet das Ger\ufffdt Ein oder Aus.\n+channel-type.intesis.mode.label = Betriebsart\n+channel-type.intesis.mode.description = Betriebsart des Klimager\ufffdts: Auto/Heizen/Trocknen/Ventilation/K\ufffdhlen\n+channel-type.intesis.mode.state.option.auto = Auto\n+channel-type.intesis.mode.state.option.cool = K\ufffdhlen\n+channel-type.intesis.mode.state.option.dry = Trocknen\n+channel-type.intesis.mode.state.option.fan = Ventilation\n+channel-type.intesis.mode.state.option.heat = Heizen\n+channel-type.intesis.targetTemperature.label = Soll Temperatur", "originalCommit": "fcac653784baca12d96d9bbf142e3540966e6c0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg0NDgxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r487844815", "bodyText": "Corrected", "author": "hmerk", "createdAt": "2020-09-14T11:36:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5Njk2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5NzE1NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r487797155", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            channel-type.intesis.outdoorTemperature.label = Au\ufffdenemperatur\n          \n          \n            \n            channel-type.intesis.outdoorTemperature.label = Au\ufffdentemperatur", "author": "fwolter", "createdAt": "2020-09-14T10:05:23Z", "path": "bundles/org.openhab.binding.intesis/src/main/resources/ESH-INF/i18n/intesis_de.properties", "diffHunk": "@@ -0,0 +1,42 @@\n+# binding\n+binding.intesis.name = Intesis Binding\n+binding.intesis.description = Das Intesis Binding integriert die Intesis WiFi Adapter, welche in diversen Klimager\ufffdten verwendet werden.\n+\n+# thing types\n+thing-type.intesis.intesisHome.label = IntesisHome\n+thing-type.intesis.sample.description = IntesisHome WIFI Adapter\n+\n+# thing type config description\n+thing-type.config.intesis.ipAddress.label = IP Addresse\n+thing-type.config.intesis.ipAddress.description = IP Addresse des Intesis Adapters.\n+thing-type.config.intesisHome.password.label = Passwort\n+thing-type.config.intesisHome.password.description = Password zum Login in den lokalen Web-Server des IntesisHome Adapters.\n+\n+\n+# channel types\n+channel-type.intesis.power.label = Betrieb\n+channel-type.intesis.power.description = Schaltet das Ger\ufffdt Ein oder Aus.\n+channel-type.intesis.mode.label = Betriebsart\n+channel-type.intesis.mode.description = Betriebsart des Klimager\ufffdts: Auto/Heizen/Trocknen/Ventilation/K\ufffdhlen\n+channel-type.intesis.mode.state.option.auto = Auto\n+channel-type.intesis.mode.state.option.cool = K\ufffdhlen\n+channel-type.intesis.mode.state.option.dry = Trocknen\n+channel-type.intesis.mode.state.option.fan = Ventilation\n+channel-type.intesis.mode.state.option.heat = Heizen\n+channel-type.intesis.targetTemperature.label = Soll Temperatur\n+channel-type.intesis.targetTemperature.description = Stellt die gew\ufffdnschte Soll Temperatur ein.\n+channel-type.intesis.ambientTemperature.label = Umgebungstemperatur\n+channel-type.intesis.ambientTemperature.description = Zeigt die aktuelle Raumtemperatur an.\n+channel-type.intesis.outdoorTemperature.label = Au\ufffdenemperatur", "originalCommit": "fcac653784baca12d96d9bbf142e3540966e6c0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg0NTAyNg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r487845026", "bodyText": "Corrected", "author": "hmerk", "createdAt": "2020-09-14T11:37:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5NzE1NQ=="}], "type": "inlineReview"}, {"oid": "623adb7055714c71dbf4efc86ce64d0804311b66", "url": "https://github.com/openhab/openhab-addons/commit/623adb7055714c71dbf4efc86ce64d0804311b66", "message": "Applied changes after review\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-14T12:47:41Z", "type": "commit"}, {"oid": "bca20a55c1cb0440d955a3419a648b360a62f01d", "url": "https://github.com/openhab/openhab-addons/commit/bca20a55c1cb0440d955a3419a648b360a62f01d", "message": "Added null check for toUnit() usage\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-14T14:58:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwMTQwMA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489201400", "bodyText": "A for-each loop would be preferred here unless you really need to know the current index.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                for (int i = 0; i < datapoints.length; i++) {\n          \n          \n            \n                                    Descr descr = gson.fromJson(datapoints[i].descr, Descr.class);\n          \n          \n            \n                                for (Datapoints datapoint : datapoints) {\n          \n          \n            \n                                    Descr descr = gson.fromJson(datapoint.descr, Descr.class);", "author": "cpmeister", "createdAt": "2020-09-16T06:47:54Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,557 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            Response resp = gson.fromJson(response, Response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Id id = gson.fromJson(data.id.toString(), Id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        Response resp = gson.fromJson(response, Response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }\n+\n+    public void getInfo() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (success) {\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Info info = gson.fromJson(data.info.toString(), Info.class);\n+                properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                updateProperties(properties);\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {\n+        login();\n+        if (!sessionId.isEmpty()) {\n+            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.trace(\"available Datapoints response : {}\", response);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (success) {\n+                    logout();\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                    Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                    for (int i = 0; i < datapoints.length; i++) {\n+                        Descr descr = gson.fromJson(datapoints[i].descr, Descr.class);", "originalCommit": "bca20a55c1cb0440d955a3419a648b360a62f01d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIxNTU3NA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489215574", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-16T07:17:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwMTQwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwMTgwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489201801", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            String[] modString = descr.states;\n          \n          \n            \n                                            for (int i1 = 0; i1 < modString.length; i1++) {\n          \n          \n            \n                                                switch (modString[i1]) {\n          \n          \n            \n                                            for (String modString : descr.states) {\n          \n          \n            \n                                                switch (modString) {", "author": "cpmeister", "createdAt": "2020-09-16T06:48:49Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,557 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            Response resp = gson.fromJson(response, Response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Id id = gson.fromJson(data.id.toString(), Id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        Response resp = gson.fromJson(response, Response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }\n+\n+    public void getInfo() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (success) {\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Info info = gson.fromJson(data.info.toString(), Info.class);\n+                properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                updateProperties(properties);\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {\n+        login();\n+        if (!sessionId.isEmpty()) {\n+            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.trace(\"available Datapoints response : {}\", response);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (success) {\n+                    logout();\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                    Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                    for (int i = 0; i < datapoints.length; i++) {\n+                        Descr descr = gson.fromJson(datapoints[i].descr, Descr.class);\n+                        String channelId = \"\";\n+                        String itemType = \"String\";\n+                        switch (datapoints[i].uid) {\n+                            case 2:\n+                                List<String> opModes = new ArrayList<>();\n+                                String[] modString = descr.states;\n+                                for (int i1 = 0; i1 < modString.length; i1++) {\n+                                    switch (modString[i1]) {", "originalCommit": "bca20a55c1cb0440d955a3419a648b360a62f01d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIxNTY1OA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489215658", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-16T07:17:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwMTgwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwMjMxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489202311", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            String[] fanString = descr.states;\n          \n          \n            \n                                            for (int i1 = 0; i1 < fanString.length; i1++) {\n          \n          \n            \n                                                if (\"AUTO\".contentEquals(fanString[i1])) {\n          \n          \n            \n                                                    fanLevels.add(\"AUTO\");\n          \n          \n            \n                                                } else {\n          \n          \n            \n                                                    fanLevels.add(fanString[i1]);\n          \n          \n            \n                                                }\n          \n          \n            \n                                            }\n          \n          \n            \n                                            for (String fanString : descr.states) {\n          \n          \n            \n                                                if (\"AUTO\".contentEquals(fanString)) {\n          \n          \n            \n                                                    fanLevels.add(\"AUTO\");\n          \n          \n            \n                                                } else {\n          \n          \n            \n                                                    fanLevels.add(fanString);\n          \n          \n            \n                                                }\n          \n          \n            \n                                            }", "author": "cpmeister", "createdAt": "2020-09-16T06:49:47Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,557 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            Response resp = gson.fromJson(response, Response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Id id = gson.fromJson(data.id.toString(), Id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        Response resp = gson.fromJson(response, Response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }\n+\n+    public void getInfo() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (success) {\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Info info = gson.fromJson(data.info.toString(), Info.class);\n+                properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                updateProperties(properties);\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {\n+        login();\n+        if (!sessionId.isEmpty()) {\n+            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.trace(\"available Datapoints response : {}\", response);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (success) {\n+                    logout();\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                    Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                    for (int i = 0; i < datapoints.length; i++) {\n+                        Descr descr = gson.fromJson(datapoints[i].descr, Descr.class);\n+                        String channelId = \"\";\n+                        String itemType = \"String\";\n+                        switch (datapoints[i].uid) {\n+                            case 2:\n+                                List<String> opModes = new ArrayList<>();\n+                                String[] modString = descr.states;\n+                                for (int i1 = 0; i1 < modString.length; i1++) {\n+                                    switch (modString[i1]) {\n+                                        case \"0\":\n+                                            opModes.add(\"AUTO\");\n+                                            break;\n+                                        case \"1\":\n+                                            opModes.add(\"HEAT\");\n+                                            break;\n+                                        case \"2\":\n+                                            opModes.add(\"DRY\");\n+                                            break;\n+                                        case \"3\":\n+                                            opModes.add(\"FAN\");\n+                                            break;\n+                                        case \"4\":\n+                                            opModes.add(\"COOL\");\n+                                            break;\n+                                    }\n+                                }\n+                                properties.put(\"Supported modes\", opModes.toString());\n+                                updateProperties(properties);\n+                                channelId = CHANNEL_TYPE_MODE;\n+                                addChannel(channelId, itemType, opModes);\n+                                break;\n+                            case 4:\n+                                List<String> fanLevels = new ArrayList<>();\n+                                String[] fanString = descr.states;\n+                                for (int i1 = 0; i1 < fanString.length; i1++) {\n+                                    if (\"AUTO\".contentEquals(fanString[i1])) {\n+                                        fanLevels.add(\"AUTO\");\n+                                    } else {\n+                                        fanLevels.add(fanString[i1]);\n+                                    }\n+                                }", "originalCommit": "bca20a55c1cb0440d955a3419a648b360a62f01d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIxNjI5MA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489216290", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-16T07:18:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwMjMxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwMzE3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489203173", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            String[] swingUDString = descr.states;\n          \n          \n            \n                                            for (int i1 = 0; i1 < swingUDString.length; i1++) {\n          \n          \n            \n                                                if (\"AUTO\".contentEquals(swingUDString[i1])) {\n          \n          \n            \n                                                    swingUDModes.add(\"AUTO\");\n          \n          \n            \n                                                } else if (\"10\".contentEquals(swingUDString[i1])) {\n          \n          \n            \n                                                    swingUDModes.add(\"SWING\");\n          \n          \n            \n                                                } else if (\"11\".contentEquals(swingUDString[i1])) {\n          \n          \n            \n                                                    swingUDModes.add(\"SWIRL\");\n          \n          \n            \n                                                } else if (\"12\".contentEquals(swingUDString[i1])) {\n          \n          \n            \n                                                    swingUDModes.add(\"WIDE\");\n          \n          \n            \n                                                } else {\n          \n          \n            \n                                                    swingUDModes.add(swingUDString[i1]);\n          \n          \n            \n                                                }\n          \n          \n            \n                                            }\n          \n          \n            \n                                            for (String swingUDString : descr.states) {\n          \n          \n            \n                                                if (\"AUTO\".contentEquals(swingUDString)) {\n          \n          \n            \n                                                    swingUDModes.add(\"AUTO\");\n          \n          \n            \n                                                } else if (\"10\".contentEquals(swingUDString)) {\n          \n          \n            \n                                                    swingUDModes.add(\"SWING\");\n          \n          \n            \n                                                } else if (\"11\".contentEquals(swingUDString)) {\n          \n          \n            \n                                                    swingUDModes.add(\"SWIRL\");\n          \n          \n            \n                                                } else if (\"12\".contentEquals(swingUDString)) {\n          \n          \n            \n                                                    swingUDModes.add(\"WIDE\");\n          \n          \n            \n                                                } else {\n          \n          \n            \n                                                    swingUDModes.add(swingUDString);\n          \n          \n            \n                                                }\n          \n          \n            \n                                            }", "author": "cpmeister", "createdAt": "2020-09-16T06:51:27Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,557 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            Response resp = gson.fromJson(response, Response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Id id = gson.fromJson(data.id.toString(), Id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        Response resp = gson.fromJson(response, Response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }\n+\n+    public void getInfo() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (success) {\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Info info = gson.fromJson(data.info.toString(), Info.class);\n+                properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                updateProperties(properties);\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {\n+        login();\n+        if (!sessionId.isEmpty()) {\n+            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.trace(\"available Datapoints response : {}\", response);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (success) {\n+                    logout();\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                    Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                    for (int i = 0; i < datapoints.length; i++) {\n+                        Descr descr = gson.fromJson(datapoints[i].descr, Descr.class);\n+                        String channelId = \"\";\n+                        String itemType = \"String\";\n+                        switch (datapoints[i].uid) {\n+                            case 2:\n+                                List<String> opModes = new ArrayList<>();\n+                                String[] modString = descr.states;\n+                                for (int i1 = 0; i1 < modString.length; i1++) {\n+                                    switch (modString[i1]) {\n+                                        case \"0\":\n+                                            opModes.add(\"AUTO\");\n+                                            break;\n+                                        case \"1\":\n+                                            opModes.add(\"HEAT\");\n+                                            break;\n+                                        case \"2\":\n+                                            opModes.add(\"DRY\");\n+                                            break;\n+                                        case \"3\":\n+                                            opModes.add(\"FAN\");\n+                                            break;\n+                                        case \"4\":\n+                                            opModes.add(\"COOL\");\n+                                            break;\n+                                    }\n+                                }\n+                                properties.put(\"Supported modes\", opModes.toString());\n+                                updateProperties(properties);\n+                                channelId = CHANNEL_TYPE_MODE;\n+                                addChannel(channelId, itemType, opModes);\n+                                break;\n+                            case 4:\n+                                List<String> fanLevels = new ArrayList<>();\n+                                String[] fanString = descr.states;\n+                                for (int i1 = 0; i1 < fanString.length; i1++) {\n+                                    if (\"AUTO\".contentEquals(fanString[i1])) {\n+                                        fanLevels.add(\"AUTO\");\n+                                    } else {\n+                                        fanLevels.add(fanString[i1]);\n+                                    }\n+                                }\n+                                properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                updateProperties(properties);\n+                                channelId = CHANNEL_TYPE_FANSPEED;\n+                                addChannel(channelId, itemType, fanLevels);\n+                                break;\n+                            case 5:\n+                                List<String> swingUDModes = new ArrayList<>();\n+                                String[] swingUDString = descr.states;\n+                                for (int i1 = 0; i1 < swingUDString.length; i1++) {\n+                                    if (\"AUTO\".contentEquals(swingUDString[i1])) {\n+                                        swingUDModes.add(\"AUTO\");\n+                                    } else if (\"10\".contentEquals(swingUDString[i1])) {\n+                                        swingUDModes.add(\"SWING\");\n+                                    } else if (\"11\".contentEquals(swingUDString[i1])) {\n+                                        swingUDModes.add(\"SWIRL\");\n+                                    } else if (\"12\".contentEquals(swingUDString[i1])) {\n+                                        swingUDModes.add(\"WIDE\");\n+                                    } else {\n+                                        swingUDModes.add(swingUDString[i1]);\n+                                    }\n+                                }", "originalCommit": "bca20a55c1cb0440d955a3419a648b360a62f01d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMTg3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489221879", "bodyText": "Refactored", "author": "hmerk", "createdAt": "2020-09-16T07:28:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwMzE3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwMzcwOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489203709", "bodyText": "It looks like this code is almost identical to the code above. Can you refactor this code so it isn't duplicated?", "author": "cpmeister", "createdAt": "2020-09-16T06:52:36Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,557 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            Response resp = gson.fromJson(response, Response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Id id = gson.fromJson(data.id.toString(), Id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        Response resp = gson.fromJson(response, Response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }\n+\n+    public void getInfo() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (success) {\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Info info = gson.fromJson(data.info.toString(), Info.class);\n+                properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                updateProperties(properties);\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {\n+        login();\n+        if (!sessionId.isEmpty()) {\n+            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.trace(\"available Datapoints response : {}\", response);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (success) {\n+                    logout();\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                    Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                    for (int i = 0; i < datapoints.length; i++) {\n+                        Descr descr = gson.fromJson(datapoints[i].descr, Descr.class);\n+                        String channelId = \"\";\n+                        String itemType = \"String\";\n+                        switch (datapoints[i].uid) {\n+                            case 2:\n+                                List<String> opModes = new ArrayList<>();\n+                                String[] modString = descr.states;\n+                                for (int i1 = 0; i1 < modString.length; i1++) {\n+                                    switch (modString[i1]) {\n+                                        case \"0\":\n+                                            opModes.add(\"AUTO\");\n+                                            break;\n+                                        case \"1\":\n+                                            opModes.add(\"HEAT\");\n+                                            break;\n+                                        case \"2\":\n+                                            opModes.add(\"DRY\");\n+                                            break;\n+                                        case \"3\":\n+                                            opModes.add(\"FAN\");\n+                                            break;\n+                                        case \"4\":\n+                                            opModes.add(\"COOL\");\n+                                            break;\n+                                    }\n+                                }\n+                                properties.put(\"Supported modes\", opModes.toString());\n+                                updateProperties(properties);\n+                                channelId = CHANNEL_TYPE_MODE;\n+                                addChannel(channelId, itemType, opModes);\n+                                break;\n+                            case 4:\n+                                List<String> fanLevels = new ArrayList<>();\n+                                String[] fanString = descr.states;\n+                                for (int i1 = 0; i1 < fanString.length; i1++) {\n+                                    if (\"AUTO\".contentEquals(fanString[i1])) {\n+                                        fanLevels.add(\"AUTO\");\n+                                    } else {\n+                                        fanLevels.add(fanString[i1]);\n+                                    }\n+                                }\n+                                properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                updateProperties(properties);\n+                                channelId = CHANNEL_TYPE_FANSPEED;\n+                                addChannel(channelId, itemType, fanLevels);\n+                                break;\n+                            case 5:\n+                                List<String> swingUDModes = new ArrayList<>();\n+                                String[] swingUDString = descr.states;\n+                                for (int i1 = 0; i1 < swingUDString.length; i1++) {\n+                                    if (\"AUTO\".contentEquals(swingUDString[i1])) {\n+                                        swingUDModes.add(\"AUTO\");\n+                                    } else if (\"10\".contentEquals(swingUDString[i1])) {\n+                                        swingUDModes.add(\"SWING\");\n+                                    } else if (\"11\".contentEquals(swingUDString[i1])) {\n+                                        swingUDModes.add(\"SWIRL\");\n+                                    } else if (\"12\".contentEquals(swingUDString[i1])) {\n+                                        swingUDModes.add(\"WIDE\");\n+                                    } else {\n+                                        swingUDModes.add(swingUDString[i1]);\n+                                    }\n+                                }\n+                                channelId = CHANNEL_TYPE_VANESUD;\n+                                properties.put(\"Supported vane up/down modes\", swingUDModes.toString());\n+                                updateProperties(properties);\n+                                addChannel(channelId, itemType, swingUDModes);\n+                                break;\n+                            case 6:\n+                                List<String> swingLRModes = new ArrayList<>();\n+                                String[] swingLRString = descr.states;\n+                                for (int i1 = 0; i1 < swingLRString.length; i1++) {\n+                                    if (\"AUTO\".contentEquals(swingLRString[i1])) {\n+                                        swingLRModes.add(\"AUTO\");\n+                                    } else if (\"10\".contentEquals(swingLRString[i1])) {\n+                                        swingLRModes.add(\"SWING\");\n+                                    } else if (\"11\".contentEquals(swingLRString[i1])) {\n+                                        swingLRModes.add(\"SWIRL\");\n+                                    } else if (\"12\".contentEquals(swingLRString[i1])) {\n+                                        swingLRModes.add(\"WIDE\");\n+                                    } else {\n+                                        swingLRModes.add(swingLRString[i1]);\n+                                    }\n+                                }", "originalCommit": "bca20a55c1cb0440d955a3419a648b360a62f01d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMjAxMA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489222010", "bodyText": "Refactored", "author": "hmerk", "createdAt": "2020-09-16T07:28:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwMzcwOQ=="}], "type": "inlineReview"}, {"oid": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "url": "https://github.com/openhab/openhab-addons/commit/310290f6368a5e8d4e19c3e40f02fb99b952b85d", "message": "Simplified IntesisHomeHandler after review\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-16T07:31:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcwOTUwOA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489709508", "bodyText": "Please use a for-each loop here.", "author": "cpmeister", "createdAt": "2020-09-16T19:38:19Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,536 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {", "originalCommit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2NTUwOA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489765508", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-16T21:29:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcwOTUwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcxMTc5OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489711799", "bodyText": "This looks like almost duplicate code, can you refactor it? The easiest way would be to create a function (e.g. toSwingMode() that returns a String given a dpval.value parameter.\n\n                   private String toSwingMode(int value){\n                            if(value == 0) {\n                                return \"AUTO\";\n                            } else if (value == 10) {\n                                return \"SWING\";\n                            } else if (value == 11) {\n                                return \"SWIRL\";\n                            } else if (value == 12) {\n                                return \"WIDE\";\n                            } else {\n                                return String.valueOf(value);\n                            }\n                   }\n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        if ((dpval[i].value) == 0) {\n          \n          \n            \n                                            updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n          \n          \n            \n                                        } else if ((dpval[i].value) == 10) {\n          \n          \n            \n                                            updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n          \n          \n            \n                                        } else if ((dpval[i].value) == 11) {\n          \n          \n            \n                                            updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n          \n          \n            \n                                        } else if ((dpval[i].value) == 12) {\n          \n          \n            \n                                            updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n          \n          \n            \n                                        } else {\n          \n          \n            \n                                            updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n          \n          \n            \n                                        }\n          \n          \n            \n                                        break;\n          \n          \n            \n                                    case 6:\n          \n          \n            \n                                        if ((dpval[i].value) == 0) {\n          \n          \n            \n                                            updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n          \n          \n            \n                                        } else if ((dpval[i].value) == 10) {\n          \n          \n            \n                                            updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n          \n          \n            \n                                        } else if ((dpval[i].value) == 11) {\n          \n          \n            \n                                            updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n          \n          \n            \n                                        } else if ((dpval[i].value) == 12) {\n          \n          \n            \n                                            updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n          \n          \n            \n                                        } else {\n          \n          \n            \n                                            updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n          \n          \n            \n                                        }\n          \n          \n            \n                                        break;\n          \n          \n            \n                                        updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(toSwingMode(dpval.value)));\n          \n          \n            \n                                        break;\n          \n          \n            \n                                    case 6:\n          \n          \n            \n                                        updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(toSwingMode(dpval.value)));\n          \n          \n            \n                                        break;", "author": "cpmeister", "createdAt": "2020-09-16T19:42:40Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,536 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;", "originalCommit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2NjA3OA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489766078", "bodyText": "Solved with nested case", "author": "hmerk", "createdAt": "2020-09-16T21:30:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcxMTc5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyMDA5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489720095", "bodyText": "Parsing and writing json to/from a String can be pretty computationally intensive, so it would be more efficient to pass the already parsed JsonElement into gson instead.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Data data = gson.fromJson(resp.data.toString(), Data.class);\n          \n          \n            \n                            Data data = gson.fromJson(resp.data, Data.class);", "author": "cpmeister", "createdAt": "2020-09-16T19:58:56Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,536 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);", "originalCommit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2NjgxNg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489766816", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-16T21:32:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyMDA5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyMTY1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489721651", "bodyText": "Any reason that you aren't using classes for the nested json structure?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public JsonArray datapoints; // dataPoints\n          \n          \n            \n                    public Datapoints[] datapoints; // dataPoints", "author": "cpmeister", "createdAt": "2020-09-16T20:01:54Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/gson/IntesisHomeJSonDTO.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.gson;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * {@link IntesisHomeJSonDTO} is used for the JSon/GSon mapping\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+public class IntesisHomeJSonDTO {\n+\n+    public static class Response {\n+        public boolean success;\n+        public JsonElement data;\n+    }\n+\n+    public static class Data {\n+        public JsonElement id;\n+        public JsonElement info;\n+        public JsonElement userinfo;\n+        public JsonElement config;\n+        public JsonElement dp;\n+        public JsonElement dpval;\n+    }\n+\n+    public static class Id {\n+        public String sessionID; // Session ID\n+    }\n+\n+    // Device Information used for thing properties\n+    public static class Info {\n+        public String wlanSTAMAC; // Device Client MAC Address\n+        public String wlanAPMAC; // Device Access Point MAC Address\n+        public String fwVersion; // Device Firmware Version\n+        public String wlanFwVersion; // Wireless Firmware Version\n+        public String acStatus; // Air Conditioner Communication Status\n+        public String wlanLNK; // Connection Status with Wireless Network\n+        public String ssid; // Wireless Network SSID\n+        public String rssi; // Wireless Signal Strength\n+        public String tcpServerLNK; // Cloud Server Connection (Not used for communication here)\n+        public String localdatetime; // Local Date Time\n+        public String powerStatus;\n+        public String lastconfigdatetime; // Last Configuration Date Time\n+        public String deviceModel; // Device Model\n+        public String sn; // Serial Number\n+        public String lastError;\n+    }\n+\n+    public static class Userinfo {\n+        public String username;\n+        public JsonElement servicelist;\n+    }\n+\n+    // List of available services\n+    public static class Servicelist {\n+        public String setconfig;\n+        public String getconfig;\n+        public String getcurrentconfig;\n+        public String getinfo;\n+        public String login;\n+        public String logout;\n+        public String passchange;\n+        public String getavailabledatapoints;\n+        public String setdatapointvalue;\n+        public String getdatapointvalue;\n+        public String getavailableservices;\n+        public String reboot;\n+        public String setdefaults;\n+        public String getdefaultconfig;\n+    }\n+\n+    public static class Config {\n+        public String deviceModel; // Device Model\n+        public String ip; // Device IP Address\n+        public String netmask; // Device IP Address\n+        public String dfltgw; // Default gateway\n+        public boolean dhcp; // DHCP enabled\n+        public String ssid; // WLAN Access Point\n+        public int security; // Security Type\n+        public int regdomain;\n+        public int lastconfigdatetime;\n+    }\n+\n+    public static class Dp {\n+        public JsonArray datapoints; // dataPoints", "originalCommit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc2NzUzNA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489767534", "bodyText": "I tried using classes, but the returned json is a bit malformed, so this was the simplest way to solve it.", "author": "hmerk", "createdAt": "2020-09-16T21:34:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyMTY1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyNTcyMA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489725720", "bodyText": "It looks like you are parsing the response multiple times here, first to check the success flag, then again if the flag was true. Can you optimize this so it only parses the response a single time?", "author": "cpmeister", "createdAt": "2020-09-16T20:09:59Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,536 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            Response resp = gson.fromJson(response, Response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Id id = gson.fromJson(data.id.toString(), Id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        Response resp = gson.fromJson(response, Response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }\n+\n+    public void getInfo() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (success) {\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);", "originalCommit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3MjU5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489772592", "bodyText": "removed getSuccess and avoided double parsing", "author": "hmerk", "createdAt": "2020-09-16T21:45:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyNTcyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyNjk3OA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489726978", "bodyText": "I don't think you should have this method, parsing is too expensive to throw away the result on success. It would be better if you inlined this code in the callers and then got rid of this method.", "author": "cpmeister", "createdAt": "2020-09-16T20:12:34Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,536 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            Response resp = gson.fromJson(response, Response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Id id = gson.fromJson(data.id.toString(), Id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        Response resp = gson.fromJson(response, Response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }", "originalCommit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3Mjc1NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489772755", "bodyText": "removed", "author": "hmerk", "createdAt": "2020-09-16T21:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyNjk3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyOTIyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489729229", "bodyText": "You should catch any JsonSyntaxException that might be thrown when using gson. Sometimes vendors accidentally break their own api. You should make sure that your code can appropriately handle when that happens.", "author": "cpmeister", "createdAt": "2020-09-16T20:17:06Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,536 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            Response resp = gson.fromJson(response, Response.class);", "originalCommit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3Njg4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489776881", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-16T21:55:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyOTIyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyOTYwOA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489729608", "bodyText": "Please refactor this too.", "author": "cpmeister", "createdAt": "2020-09-16T20:17:52Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,536 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }", "originalCommit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3OTU2MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489779561", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-16T22:02:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyOTYwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMTYyNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489731625", "bodyText": "Starting a method name with get implies that the method would return something, but this code doesn't do that. I would suggest renaming this method populateProperties.", "author": "cpmeister", "createdAt": "2020-09-16T20:21:51Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,536 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            Response resp = gson.fromJson(response, Response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Id id = gson.fromJson(data.id.toString(), Id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        Response resp = gson.fromJson(response, Response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }\n+\n+    public void getInfo() {", "originalCommit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4MDI3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489780277", "bodyText": "renamed", "author": "hmerk", "createdAt": "2020-09-16T22:04:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMTYyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMzE1MA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489733150", "bodyText": "You add this channel to the thing in the code preceding this, so would this ever be false?", "author": "cpmeister", "createdAt": "2020-09-16T20:24:58Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,536 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            Response resp = gson.fromJson(response, Response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Id id = gson.fromJson(data.id.toString(), Id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        Response resp = gson.fromJson(response, Response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }\n+\n+    public void getInfo() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (success) {\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Info info = gson.fromJson(data.info.toString(), Info.class);\n+                properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                updateProperties(properties);\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {\n+        login();\n+        if (!sessionId.isEmpty()) {\n+            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.trace(\"available Datapoints response : {}\", response);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (success) {\n+                    logout();\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                    Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                    for (Datapoints datapoint : datapoints) {\n+                        Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                        String channelId = \"\";\n+                        String itemType = \"String\";\n+                        switch (datapoint.uid) {\n+                            case 2:\n+                                List<String> opModes = new ArrayList<>();\n+                                for (String modString : descr.states) {\n+                                    switch (modString) {\n+                                        case \"0\":\n+                                            opModes.add(\"AUTO\");\n+                                            break;\n+                                        case \"1\":\n+                                            opModes.add(\"HEAT\");\n+                                            break;\n+                                        case \"2\":\n+                                            opModes.add(\"DRY\");\n+                                            break;\n+                                        case \"3\":\n+                                            opModes.add(\"FAN\");\n+                                            break;\n+                                        case \"4\":\n+                                            opModes.add(\"COOL\");\n+                                            break;\n+                                    }\n+                                }\n+                                properties.put(\"Supported modes\", opModes.toString());\n+                                updateProperties(properties);\n+                                channelId = CHANNEL_TYPE_MODE;\n+                                addChannel(channelId, itemType, opModes);\n+                                break;\n+                            case 4:\n+                                List<String> fanLevels = new ArrayList<>();\n+                                for (String fanString : descr.states) {\n+                                    if (\"AUTO\".contentEquals(fanString)) {\n+                                        fanLevels.add(\"AUTO\");\n+                                    } else {\n+                                        fanLevels.add(fanString);\n+                                    }\n+                                }\n+                                properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                updateProperties(properties);\n+                                channelId = CHANNEL_TYPE_FANSPEED;\n+                                addChannel(channelId, itemType, fanLevels);\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                List<String> swingModes = new ArrayList<>();\n+                                for (String swingString : descr.states) {\n+                                    if (\"AUTO\".contentEquals(swingString)) {\n+                                        swingModes.add(\"AUTO\");\n+                                    } else if (\"10\".contentEquals(swingString)) {\n+                                        swingModes.add(\"SWING\");\n+                                    } else if (\"11\".contentEquals(swingString)) {\n+                                        swingModes.add(\"SWIRL\");\n+                                    } else if (\"12\".contentEquals(swingString)) {\n+                                        swingModes.add(\"WIDE\");\n+                                    } else {\n+                                        swingModes.add(swingString);\n+                                    }\n+                                }\n+                                switch (datapoint.uid) {\n+                                    case 5:\n+                                        channelId = CHANNEL_TYPE_VANESUD;\n+                                        properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                        updateProperties(properties);\n+                                        addChannel(channelId, itemType, swingModes);\n+                                        break;\n+                                    case 6:\n+                                        channelId = CHANNEL_TYPE_VANESUD;\n+                                        properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                        updateProperties(properties);\n+                                        addChannel(channelId, itemType, swingModes);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                channelId = CHANNEL_TYPE_TARGETTEMP;\n+                                itemType = \"Number:Temperature\";\n+                                addChannel(channelId, itemType, null);\n+                                break;\n+                            case 10:\n+                                channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                                itemType = \"Number:Temperature\";\n+                                addChannel(channelId, itemType, null);\n+                                break;\n+                            case 37:\n+                                channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                                itemType = \"Number:Temperature\";\n+                                addChannel(channelId, itemType, null);\n+                                break;\n+                        }\n+                    }\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+            logger.trace(\"Start Refresh Job\");\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                    TimeUnit.SECONDS);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<?> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (getThing().getChannel(channelId) != null) {", "originalCommit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4MTA5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489781096", "bodyText": "You're right, removed superfluend null check", "author": "hmerk", "createdAt": "2020-09-16T22:06:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMzE1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMzkxNw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489733917", "bodyText": "Looks like a copy/paste bug here.", "author": "cpmeister", "createdAt": "2020-09-16T20:26:26Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,536 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            getInfo();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                    uid = 5;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESLR:\n+                    uid = 6;\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                            + password + \"\\\"}}\";\n+                    response = api.postRequest(ipAddress, sessionString);\n+                } else {\n+                    logout();\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (!success) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            } else {\n+                logout();\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                for (int i = 0; i < dpval.length; i++) {\n+                    logger.trace(\"UID : {} ; value : {}\", dpval[i].uid, dpval[i].value);\n+                    switch (dpval[i].uid) {\n+                        case 1:\n+                            updateState(CHANNEL_TYPE_POWER,\n+                                    String.valueOf(dpval[i].value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                            break;\n+                        case 2:\n+                            switch (dpval[i].value) {\n+                                case 0:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                    break;\n+                                case 1:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                    break;\n+                                case 2:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                    break;\n+                                case 3:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                    break;\n+                                case 4:\n+                                    updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                    break;\n+                            }\n+                            break;\n+                        case 4:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 5:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESUD, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 6:\n+                            if ((dpval[i].value) == 0) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"AUTO\"));\n+                            } else if ((dpval[i].value) == 10) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWING\"));\n+                            } else if ((dpval[i].value) == 11) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"SWIRL\"));\n+                            } else if ((dpval[i].value) == 12) {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(\"WIDE\"));\n+                            } else {\n+                                updateState(CHANNEL_TYPE_VANESLR, StringType.valueOf(String.valueOf(dpval[i].value)));\n+                            }\n+                            break;\n+                        case 9:\n+                            int unit = Math.round((dpval[i].value) / 10);\n+                            State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                            break;\n+                        case 10:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                            break;\n+                        case 37:\n+                            unit = Math.round((dpval[i].value) / 10);\n+                            stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                            updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            Response resp = gson.fromJson(response, Response.class);\n+            boolean success = resp.success;\n+            if (success) {\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Id id = gson.fromJson(data.id.toString(), Id.class);\n+                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                    sessionId = id.sessionID.toString();\n+                    updateStatus(ThingStatus.ONLINE);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public boolean getSuccess(String response) {\n+        Response resp = gson.fromJson(response, Response.class);\n+        boolean success = resp.success;\n+        return success;\n+    }\n+\n+    public void getInfo() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            boolean success = getSuccess(response);\n+            if (success) {\n+                Response resp = gson.fromJson(response, Response.class);\n+                Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                Info info = gson.fromJson(data.info.toString(), Info.class);\n+                properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                updateProperties(properties);\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {\n+        login();\n+        if (!sessionId.isEmpty()) {\n+            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.trace(\"available Datapoints response : {}\", response);\n+            if (response != null) {\n+                boolean success = getSuccess(response);\n+                if (success) {\n+                    logout();\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                    Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                    for (Datapoints datapoint : datapoints) {\n+                        Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                        String channelId = \"\";\n+                        String itemType = \"String\";\n+                        switch (datapoint.uid) {\n+                            case 2:\n+                                List<String> opModes = new ArrayList<>();\n+                                for (String modString : descr.states) {\n+                                    switch (modString) {\n+                                        case \"0\":\n+                                            opModes.add(\"AUTO\");\n+                                            break;\n+                                        case \"1\":\n+                                            opModes.add(\"HEAT\");\n+                                            break;\n+                                        case \"2\":\n+                                            opModes.add(\"DRY\");\n+                                            break;\n+                                        case \"3\":\n+                                            opModes.add(\"FAN\");\n+                                            break;\n+                                        case \"4\":\n+                                            opModes.add(\"COOL\");\n+                                            break;\n+                                    }\n+                                }\n+                                properties.put(\"Supported modes\", opModes.toString());\n+                                updateProperties(properties);\n+                                channelId = CHANNEL_TYPE_MODE;\n+                                addChannel(channelId, itemType, opModes);\n+                                break;\n+                            case 4:\n+                                List<String> fanLevels = new ArrayList<>();\n+                                for (String fanString : descr.states) {\n+                                    if (\"AUTO\".contentEquals(fanString)) {\n+                                        fanLevels.add(\"AUTO\");\n+                                    } else {\n+                                        fanLevels.add(fanString);\n+                                    }\n+                                }\n+                                properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                updateProperties(properties);\n+                                channelId = CHANNEL_TYPE_FANSPEED;\n+                                addChannel(channelId, itemType, fanLevels);\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                List<String> swingModes = new ArrayList<>();\n+                                for (String swingString : descr.states) {\n+                                    if (\"AUTO\".contentEquals(swingString)) {\n+                                        swingModes.add(\"AUTO\");\n+                                    } else if (\"10\".contentEquals(swingString)) {\n+                                        swingModes.add(\"SWING\");\n+                                    } else if (\"11\".contentEquals(swingString)) {\n+                                        swingModes.add(\"SWIRL\");\n+                                    } else if (\"12\".contentEquals(swingString)) {\n+                                        swingModes.add(\"WIDE\");\n+                                    } else {\n+                                        swingModes.add(swingString);\n+                                    }\n+                                }\n+                                switch (datapoint.uid) {\n+                                    case 5:\n+                                        channelId = CHANNEL_TYPE_VANESUD;\n+                                        properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                        updateProperties(properties);\n+                                        addChannel(channelId, itemType, swingModes);\n+                                        break;\n+                                    case 6:\n+                                        channelId = CHANNEL_TYPE_VANESUD;\n+                                        properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                        updateProperties(properties);\n+                                        addChannel(channelId, itemType, swingModes);\n+                                        break;", "originalCommit": "310290f6368a5e8d4e19c3e40f02fb99b952b85d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3OTk0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r489779942", "bodyText": "Indeed, changed", "author": "hmerk", "createdAt": "2020-09-16T22:03:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMzkxNw=="}], "type": "inlineReview"}, {"oid": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "url": "https://github.com/openhab/openhab-addons/commit/3686e2eb700297ebf057829dc3e7b7a6de4ac439", "message": "Further simplification in  IntesisHomeHandler after review\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-16T22:08:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxMzQwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490513405", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n          \n          \n            \n                                    Dp dp = gson.fromJson(data.dp, Dp.class);", "author": "cpmeister", "createdAt": "2020-09-17T19:35:56Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);\n+                    } else {\n+                        logout();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                } else {\n+                    logout();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                    for (Dpval element : dpval) {\n+                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                        switch (element.uid) {\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_POWER,\n+                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                break;\n+                            case 2:\n+                                switch (element.value) {\n+                                    case 0:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                        break;\n+                                    case 1:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                        break;\n+                                    case 2:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                        break;\n+                                    case 3:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                        break;\n+                                    case 4:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                        break;\n+                                }\n+                                break;\n+                            case 4:\n+                                if ((element.value) == 0) {\n+                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                } else {\n+                                    updateState(CHANNEL_TYPE_FANSPEED,\n+                                            StringType.valueOf(String.valueOf(element.value)));\n+                                }\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                State state;\n+                                if ((element.value) == 0) {\n+                                    state = StringType.valueOf(\"AUTO\");\n+                                } else if ((element.value) == 10) {\n+                                    state = StringType.valueOf(\"SWING\");\n+                                } else if ((element.value) == 11) {\n+                                    state = StringType.valueOf(\"SWIRL\");\n+                                } else if ((element.value) == 12) {\n+                                    state = StringType.valueOf(\"WIDE\");\n+                                } else {\n+                                    state = StringType.valueOf(String.valueOf(element.value));\n+                                }\n+                                switch (element.uid) {\n+                                    case 5:\n+                                        updateState(CHANNEL_TYPE_VANESUD, state);\n+                                        break;\n+                                    case 6:\n+                                        updateState(CHANNEL_TYPE_VANESLR, state);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                int unit = Math.round((element.value) / 10);\n+                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                break;\n+                            case 10:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                break;\n+                            case 37:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                break;\n+                        }\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Id id = gson.fromJson(data.id.toString(), Id.class);\n+                    if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                        sessionId = id.sessionID.toString();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public void populateProperties() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Info info = gson.fromJson(data.info.toString(), Info.class);\n+                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                    updateProperties(properties);\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {\n+        login();\n+        if (!sessionId.isEmpty()) {\n+            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.trace(\"available Datapoints response : {}\", response);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (success) {\n+                        logout();\n+                        Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                        Dp dp = gson.fromJson(data.dp.toString(), Dp.class);", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczMzI4NA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490733284", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T06:39:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxMzQwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNDY5OA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490514698", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                Data data = gson.fromJson(resp.data.toString(), Data.class);\n          \n          \n            \n                                Info info = gson.fromJson(data.info.toString(), Info.class);\n          \n          \n            \n                                Data data = gson.fromJson(resp.data, Data.class);\n          \n          \n            \n                                Info info = gson.fromJson(data.info, Info.class);", "author": "cpmeister", "createdAt": "2020-09-17T19:37:23Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);\n+                    } else {\n+                        logout();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                } else {\n+                    logout();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                    for (Dpval element : dpval) {\n+                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                        switch (element.uid) {\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_POWER,\n+                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                break;\n+                            case 2:\n+                                switch (element.value) {\n+                                    case 0:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                        break;\n+                                    case 1:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                        break;\n+                                    case 2:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                        break;\n+                                    case 3:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                        break;\n+                                    case 4:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                        break;\n+                                }\n+                                break;\n+                            case 4:\n+                                if ((element.value) == 0) {\n+                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                } else {\n+                                    updateState(CHANNEL_TYPE_FANSPEED,\n+                                            StringType.valueOf(String.valueOf(element.value)));\n+                                }\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                State state;\n+                                if ((element.value) == 0) {\n+                                    state = StringType.valueOf(\"AUTO\");\n+                                } else if ((element.value) == 10) {\n+                                    state = StringType.valueOf(\"SWING\");\n+                                } else if ((element.value) == 11) {\n+                                    state = StringType.valueOf(\"SWIRL\");\n+                                } else if ((element.value) == 12) {\n+                                    state = StringType.valueOf(\"WIDE\");\n+                                } else {\n+                                    state = StringType.valueOf(String.valueOf(element.value));\n+                                }\n+                                switch (element.uid) {\n+                                    case 5:\n+                                        updateState(CHANNEL_TYPE_VANESUD, state);\n+                                        break;\n+                                    case 6:\n+                                        updateState(CHANNEL_TYPE_VANESLR, state);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                int unit = Math.round((element.value) / 10);\n+                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                break;\n+                            case 10:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                break;\n+                            case 37:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                break;\n+                        }\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Id id = gson.fromJson(data.id.toString(), Id.class);\n+                    if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                        sessionId = id.sessionID.toString();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public void populateProperties() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Info info = gson.fromJson(data.info.toString(), Info.class);", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczMDM5Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490730393", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T06:31:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNDY5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNzA1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490517057", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                Data data = gson.fromJson(resp.data.toString(), Data.class);\n          \n          \n            \n                                Id id = gson.fromJson(data.id.toString(), Id.class);\n          \n          \n            \n                                Data data = gson.fromJson(resp.data, Data.class);\n          \n          \n            \n                                Id id = gson.fromJson(data.id, Id.class);", "author": "cpmeister", "createdAt": "2020-09-17T19:41:20Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);\n+                    } else {\n+                        logout();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                } else {\n+                    logout();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                    for (Dpval element : dpval) {\n+                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                        switch (element.uid) {\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_POWER,\n+                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                break;\n+                            case 2:\n+                                switch (element.value) {\n+                                    case 0:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                        break;\n+                                    case 1:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                        break;\n+                                    case 2:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                        break;\n+                                    case 3:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                        break;\n+                                    case 4:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                        break;\n+                                }\n+                                break;\n+                            case 4:\n+                                if ((element.value) == 0) {\n+                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                } else {\n+                                    updateState(CHANNEL_TYPE_FANSPEED,\n+                                            StringType.valueOf(String.valueOf(element.value)));\n+                                }\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                State state;\n+                                if ((element.value) == 0) {\n+                                    state = StringType.valueOf(\"AUTO\");\n+                                } else if ((element.value) == 10) {\n+                                    state = StringType.valueOf(\"SWING\");\n+                                } else if ((element.value) == 11) {\n+                                    state = StringType.valueOf(\"SWIRL\");\n+                                } else if ((element.value) == 12) {\n+                                    state = StringType.valueOf(\"WIDE\");\n+                                } else {\n+                                    state = StringType.valueOf(String.valueOf(element.value));\n+                                }\n+                                switch (element.uid) {\n+                                    case 5:\n+                                        updateState(CHANNEL_TYPE_VANESUD, state);\n+                                        break;\n+                                    case 6:\n+                                        updateState(CHANNEL_TYPE_VANESLR, state);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                int unit = Math.round((element.value) / 10);\n+                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                break;\n+                            case 10:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                break;\n+                            case 37:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                break;\n+                        }\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Id id = gson.fromJson(data.id.toString(), Id.class);", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczMDY1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490730651", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T06:32:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNzA1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNzYzMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490517631", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n          \n          \n            \n                                    sessionId = id.sessionID.toString();\n          \n          \n            \n                                String sessionID = id.sessionID.toString();\n          \n          \n            \n                                if (sessionID != null && !sessionID.isEmpty()) {\n          \n          \n            \n                                    this.sessionId = sessionID;", "author": "cpmeister", "createdAt": "2020-09-17T19:42:29Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);\n+                    } else {\n+                        logout();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                } else {\n+                    logout();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                    for (Dpval element : dpval) {\n+                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                        switch (element.uid) {\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_POWER,\n+                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                break;\n+                            case 2:\n+                                switch (element.value) {\n+                                    case 0:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                        break;\n+                                    case 1:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                        break;\n+                                    case 2:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                        break;\n+                                    case 3:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                        break;\n+                                    case 4:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                        break;\n+                                }\n+                                break;\n+                            case 4:\n+                                if ((element.value) == 0) {\n+                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                } else {\n+                                    updateState(CHANNEL_TYPE_FANSPEED,\n+                                            StringType.valueOf(String.valueOf(element.value)));\n+                                }\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                State state;\n+                                if ((element.value) == 0) {\n+                                    state = StringType.valueOf(\"AUTO\");\n+                                } else if ((element.value) == 10) {\n+                                    state = StringType.valueOf(\"SWING\");\n+                                } else if ((element.value) == 11) {\n+                                    state = StringType.valueOf(\"SWIRL\");\n+                                } else if ((element.value) == 12) {\n+                                    state = StringType.valueOf(\"WIDE\");\n+                                } else {\n+                                    state = StringType.valueOf(String.valueOf(element.value));\n+                                }\n+                                switch (element.uid) {\n+                                    case 5:\n+                                        updateState(CHANNEL_TYPE_VANESUD, state);\n+                                        break;\n+                                    case 6:\n+                                        updateState(CHANNEL_TYPE_VANESLR, state);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                int unit = Math.round((element.value) / 10);\n+                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                break;\n+                            case 10:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                break;\n+                            case 37:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                break;\n+                        }\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Id id = gson.fromJson(data.id.toString(), Id.class);\n+                    if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                        sessionId = id.sessionID.toString();", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczMDk0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490730945", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T06:33:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNzYzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNzk2OA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490517968", "bodyText": "If this isn't successful should the thing go offline as well?", "author": "cpmeister", "createdAt": "2020-09-17T19:43:08Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);\n+                    } else {\n+                        logout();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                } else {\n+                    logout();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                    for (Dpval element : dpval) {\n+                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                        switch (element.uid) {\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_POWER,\n+                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                break;\n+                            case 2:\n+                                switch (element.value) {\n+                                    case 0:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                        break;\n+                                    case 1:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                        break;\n+                                    case 2:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                        break;\n+                                    case 3:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                        break;\n+                                    case 4:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                        break;\n+                                }\n+                                break;\n+                            case 4:\n+                                if ((element.value) == 0) {\n+                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                } else {\n+                                    updateState(CHANNEL_TYPE_FANSPEED,\n+                                            StringType.valueOf(String.valueOf(element.value)));\n+                                }\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                State state;\n+                                if ((element.value) == 0) {\n+                                    state = StringType.valueOf(\"AUTO\");\n+                                } else if ((element.value) == 10) {\n+                                    state = StringType.valueOf(\"SWING\");\n+                                } else if ((element.value) == 11) {\n+                                    state = StringType.valueOf(\"SWIRL\");\n+                                } else if ((element.value) == 12) {\n+                                    state = StringType.valueOf(\"WIDE\");\n+                                } else {\n+                                    state = StringType.valueOf(String.valueOf(element.value));\n+                                }\n+                                switch (element.uid) {\n+                                    case 5:\n+                                        updateState(CHANNEL_TYPE_VANESUD, state);\n+                                        break;\n+                                    case 6:\n+                                        updateState(CHANNEL_TYPE_VANESLR, state);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                int unit = Math.round((element.value) / 10);\n+                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                break;\n+                            case 10:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                break;\n+                            case 37:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                break;\n+                        }\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczMTk4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490731981", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T06:36:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNzk2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyMTIyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490521221", "bodyText": "Why are you retrieving the channel again here? Didn't you just add that channel in the code above?", "author": "cpmeister", "createdAt": "2020-09-17T19:49:28Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);\n+                    } else {\n+                        logout();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                } else {\n+                    logout();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                    for (Dpval element : dpval) {\n+                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                        switch (element.uid) {\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_POWER,\n+                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                break;\n+                            case 2:\n+                                switch (element.value) {\n+                                    case 0:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                        break;\n+                                    case 1:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                        break;\n+                                    case 2:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                        break;\n+                                    case 3:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                        break;\n+                                    case 4:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                        break;\n+                                }\n+                                break;\n+                            case 4:\n+                                if ((element.value) == 0) {\n+                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                } else {\n+                                    updateState(CHANNEL_TYPE_FANSPEED,\n+                                            StringType.valueOf(String.valueOf(element.value)));\n+                                }\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                State state;\n+                                if ((element.value) == 0) {\n+                                    state = StringType.valueOf(\"AUTO\");\n+                                } else if ((element.value) == 10) {\n+                                    state = StringType.valueOf(\"SWING\");\n+                                } else if ((element.value) == 11) {\n+                                    state = StringType.valueOf(\"SWIRL\");\n+                                } else if ((element.value) == 12) {\n+                                    state = StringType.valueOf(\"WIDE\");\n+                                } else {\n+                                    state = StringType.valueOf(String.valueOf(element.value));\n+                                }\n+                                switch (element.uid) {\n+                                    case 5:\n+                                        updateState(CHANNEL_TYPE_VANESUD, state);\n+                                        break;\n+                                    case 6:\n+                                        updateState(CHANNEL_TYPE_VANESLR, state);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                int unit = Math.round((element.value) / 10);\n+                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                break;\n+                            case 10:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                break;\n+                            case 37:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                break;\n+                        }\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Id id = gson.fromJson(data.id.toString(), Id.class);\n+                    if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                        sessionId = id.sessionID.toString();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public void populateProperties() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Info info = gson.fromJson(data.info.toString(), Info.class);\n+                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                    updateProperties(properties);\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {\n+        login();\n+        if (!sessionId.isEmpty()) {\n+            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.trace(\"available Datapoints response : {}\", response);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (success) {\n+                        logout();\n+                        Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                        Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                        for (Datapoints datapoint : datapoints) {\n+                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                            String channelId = \"\";\n+                            String itemType = \"String\";\n+                            switch (datapoint.uid) {\n+                                case 2:\n+                                    List<String> opModes = new ArrayList<>();\n+                                    for (String modString : descr.states) {\n+                                        switch (modString) {\n+                                            case \"0\":\n+                                                opModes.add(\"AUTO\");\n+                                                break;\n+                                            case \"1\":\n+                                                opModes.add(\"HEAT\");\n+                                                break;\n+                                            case \"2\":\n+                                                opModes.add(\"DRY\");\n+                                                break;\n+                                            case \"3\":\n+                                                opModes.add(\"FAN\");\n+                                                break;\n+                                            case \"4\":\n+                                                opModes.add(\"COOL\");\n+                                                break;\n+                                        }\n+                                    }\n+                                    properties.put(\"Supported modes\", opModes.toString());\n+                                    updateProperties(properties);\n+                                    channelId = CHANNEL_TYPE_MODE;\n+                                    addChannel(channelId, itemType, opModes);\n+                                    break;\n+                                case 4:\n+                                    List<String> fanLevels = new ArrayList<>();\n+                                    for (String fanString : descr.states) {\n+                                        if (\"AUTO\".contentEquals(fanString)) {\n+                                            fanLevels.add(\"AUTO\");\n+                                        } else {\n+                                            fanLevels.add(fanString);\n+                                        }\n+                                    }\n+                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                    updateProperties(properties);\n+                                    channelId = CHANNEL_TYPE_FANSPEED;\n+                                    addChannel(channelId, itemType, fanLevels);\n+                                    break;\n+                                case 5:\n+                                case 6:\n+                                    List<String> swingModes = new ArrayList<>();\n+                                    for (String swingString : descr.states) {\n+                                        if (\"AUTO\".contentEquals(swingString)) {\n+                                            swingModes.add(\"AUTO\");\n+                                        } else if (\"10\".contentEquals(swingString)) {\n+                                            swingModes.add(\"SWING\");\n+                                        } else if (\"11\".contentEquals(swingString)) {\n+                                            swingModes.add(\"SWIRL\");\n+                                        } else if (\"12\".contentEquals(swingString)) {\n+                                            swingModes.add(\"WIDE\");\n+                                        } else {\n+                                            swingModes.add(swingString);\n+                                        }\n+                                    }\n+                                    switch (datapoint.uid) {\n+                                        case 5:\n+                                            channelId = CHANNEL_TYPE_VANESUD;\n+                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                            updateProperties(properties);\n+                                            addChannel(channelId, itemType, swingModes);\n+                                            break;\n+                                        case 6:\n+                                            channelId = CHANNEL_TYPE_VANESLR;\n+                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                            updateProperties(properties);\n+                                            addChannel(channelId, itemType, swingModes);\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 9:\n+                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                                case 10:\n+                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                                case 37:\n+                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                            }\n+                        }\n+                    }\n+\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+            logger.trace(\"Start Refresh Job\");\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                    TimeUnit.SECONDS);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<?> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e.toString(),\n+                                e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                channel = thing.getChannel(channelId);\n+                if (channel != null) {\n+                    intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+                }", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczMzA1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490733056", "bodyText": "Removed", "author": "hmerk", "createdAt": "2020-09-18T06:39:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyMTIyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyNDQ4NA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490524484", "bodyText": "You should provide details when your thing goes offline. Let the user know why it went offline helps them troubleshoot and perhaps fix the issue, or at the very least helps others troubleshoot the issue.", "author": "cpmeister", "createdAt": "2020-09-17T19:54:18Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);\n+                    } else {\n+                        logout();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                } else {\n+                    logout();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                    for (Dpval element : dpval) {\n+                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                        switch (element.uid) {\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_POWER,\n+                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                break;\n+                            case 2:\n+                                switch (element.value) {\n+                                    case 0:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                        break;\n+                                    case 1:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                        break;\n+                                    case 2:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                        break;\n+                                    case 3:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                        break;\n+                                    case 4:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                        break;\n+                                }\n+                                break;\n+                            case 4:\n+                                if ((element.value) == 0) {\n+                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                } else {\n+                                    updateState(CHANNEL_TYPE_FANSPEED,\n+                                            StringType.valueOf(String.valueOf(element.value)));\n+                                }\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                State state;\n+                                if ((element.value) == 0) {\n+                                    state = StringType.valueOf(\"AUTO\");\n+                                } else if ((element.value) == 10) {\n+                                    state = StringType.valueOf(\"SWING\");\n+                                } else if ((element.value) == 11) {\n+                                    state = StringType.valueOf(\"SWIRL\");\n+                                } else if ((element.value) == 12) {\n+                                    state = StringType.valueOf(\"WIDE\");\n+                                } else {\n+                                    state = StringType.valueOf(String.valueOf(element.value));\n+                                }\n+                                switch (element.uid) {\n+                                    case 5:\n+                                        updateState(CHANNEL_TYPE_VANESUD, state);\n+                                        break;\n+                                    case 6:\n+                                        updateState(CHANNEL_TYPE_VANESLR, state);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                int unit = Math.round((element.value) / 10);\n+                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                break;\n+                            case 10:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                break;\n+                            case 37:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                break;\n+                        }\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Id id = gson.fromJson(data.id.toString(), Id.class);\n+                    if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                        sessionId = id.sessionID.toString();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public void populateProperties() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Info info = gson.fromJson(data.info.toString(), Info.class);\n+                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                    updateProperties(properties);\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {\n+        login();\n+        if (!sessionId.isEmpty()) {\n+            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.trace(\"available Datapoints response : {}\", response);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (success) {\n+                        logout();\n+                        Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                        Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                        for (Datapoints datapoint : datapoints) {\n+                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                            String channelId = \"\";\n+                            String itemType = \"String\";\n+                            switch (datapoint.uid) {\n+                                case 2:\n+                                    List<String> opModes = new ArrayList<>();\n+                                    for (String modString : descr.states) {\n+                                        switch (modString) {\n+                                            case \"0\":\n+                                                opModes.add(\"AUTO\");\n+                                                break;\n+                                            case \"1\":\n+                                                opModes.add(\"HEAT\");\n+                                                break;\n+                                            case \"2\":\n+                                                opModes.add(\"DRY\");\n+                                                break;\n+                                            case \"3\":\n+                                                opModes.add(\"FAN\");\n+                                                break;\n+                                            case \"4\":\n+                                                opModes.add(\"COOL\");\n+                                                break;\n+                                        }\n+                                    }\n+                                    properties.put(\"Supported modes\", opModes.toString());\n+                                    updateProperties(properties);\n+                                    channelId = CHANNEL_TYPE_MODE;\n+                                    addChannel(channelId, itemType, opModes);\n+                                    break;\n+                                case 4:\n+                                    List<String> fanLevels = new ArrayList<>();\n+                                    for (String fanString : descr.states) {\n+                                        if (\"AUTO\".contentEquals(fanString)) {\n+                                            fanLevels.add(\"AUTO\");\n+                                        } else {\n+                                            fanLevels.add(fanString);\n+                                        }\n+                                    }\n+                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                    updateProperties(properties);\n+                                    channelId = CHANNEL_TYPE_FANSPEED;\n+                                    addChannel(channelId, itemType, fanLevels);\n+                                    break;\n+                                case 5:\n+                                case 6:\n+                                    List<String> swingModes = new ArrayList<>();\n+                                    for (String swingString : descr.states) {\n+                                        if (\"AUTO\".contentEquals(swingString)) {\n+                                            swingModes.add(\"AUTO\");\n+                                        } else if (\"10\".contentEquals(swingString)) {\n+                                            swingModes.add(\"SWING\");\n+                                        } else if (\"11\".contentEquals(swingString)) {\n+                                            swingModes.add(\"SWIRL\");\n+                                        } else if (\"12\".contentEquals(swingString)) {\n+                                            swingModes.add(\"WIDE\");\n+                                        } else {\n+                                            swingModes.add(swingString);\n+                                        }\n+                                    }\n+                                    switch (datapoint.uid) {\n+                                        case 5:\n+                                            channelId = CHANNEL_TYPE_VANESUD;\n+                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                            updateProperties(properties);\n+                                            addChannel(channelId, itemType, swingModes);\n+                                            break;\n+                                        case 6:\n+                                            channelId = CHANNEL_TYPE_VANESLR;\n+                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                            updateProperties(properties);\n+                                            addChannel(channelId, itemType, swingModes);\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 9:\n+                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                                case 10:\n+                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                                case 37:\n+                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                            }\n+                        }\n+                    }\n+\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczNDQ4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490734487", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T06:42:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyNDQ4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyODQyMg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490528422", "bodyText": "Instead of calling updateProperties multiple times in this loop, it would be better if you only called it after you exited the loop. In fact, you might consider only calling updateProperties after both populateProperties() and this method are called as part of initialization.", "author": "cpmeister", "createdAt": "2020-09-17T20:01:38Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);\n+                    } else {\n+                        logout();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                } else {\n+                    logout();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                    for (Dpval element : dpval) {\n+                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                        switch (element.uid) {\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_POWER,\n+                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                break;\n+                            case 2:\n+                                switch (element.value) {\n+                                    case 0:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                        break;\n+                                    case 1:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                        break;\n+                                    case 2:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                        break;\n+                                    case 3:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                        break;\n+                                    case 4:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                        break;\n+                                }\n+                                break;\n+                            case 4:\n+                                if ((element.value) == 0) {\n+                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                } else {\n+                                    updateState(CHANNEL_TYPE_FANSPEED,\n+                                            StringType.valueOf(String.valueOf(element.value)));\n+                                }\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                State state;\n+                                if ((element.value) == 0) {\n+                                    state = StringType.valueOf(\"AUTO\");\n+                                } else if ((element.value) == 10) {\n+                                    state = StringType.valueOf(\"SWING\");\n+                                } else if ((element.value) == 11) {\n+                                    state = StringType.valueOf(\"SWIRL\");\n+                                } else if ((element.value) == 12) {\n+                                    state = StringType.valueOf(\"WIDE\");\n+                                } else {\n+                                    state = StringType.valueOf(String.valueOf(element.value));\n+                                }\n+                                switch (element.uid) {\n+                                    case 5:\n+                                        updateState(CHANNEL_TYPE_VANESUD, state);\n+                                        break;\n+                                    case 6:\n+                                        updateState(CHANNEL_TYPE_VANESLR, state);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                int unit = Math.round((element.value) / 10);\n+                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                break;\n+                            case 10:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                break;\n+                            case 37:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                break;\n+                        }\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Id id = gson.fromJson(data.id.toString(), Id.class);\n+                    if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                        sessionId = id.sessionID.toString();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public void populateProperties() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Info info = gson.fromJson(data.info.toString(), Info.class);\n+                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                    updateProperties(properties);\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {\n+        login();\n+        if (!sessionId.isEmpty()) {\n+            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.trace(\"available Datapoints response : {}\", response);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (success) {\n+                        logout();\n+                        Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                        Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                        for (Datapoints datapoint : datapoints) {\n+                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                            String channelId = \"\";\n+                            String itemType = \"String\";\n+                            switch (datapoint.uid) {\n+                                case 2:\n+                                    List<String> opModes = new ArrayList<>();\n+                                    for (String modString : descr.states) {\n+                                        switch (modString) {\n+                                            case \"0\":\n+                                                opModes.add(\"AUTO\");\n+                                                break;\n+                                            case \"1\":\n+                                                opModes.add(\"HEAT\");\n+                                                break;\n+                                            case \"2\":\n+                                                opModes.add(\"DRY\");\n+                                                break;\n+                                            case \"3\":\n+                                                opModes.add(\"FAN\");\n+                                                break;\n+                                            case \"4\":\n+                                                opModes.add(\"COOL\");\n+                                                break;\n+                                        }\n+                                    }\n+                                    properties.put(\"Supported modes\", opModes.toString());\n+                                    updateProperties(properties);\n+                                    channelId = CHANNEL_TYPE_MODE;\n+                                    addChannel(channelId, itemType, opModes);\n+                                    break;\n+                                case 4:\n+                                    List<String> fanLevels = new ArrayList<>();\n+                                    for (String fanString : descr.states) {\n+                                        if (\"AUTO\".contentEquals(fanString)) {\n+                                            fanLevels.add(\"AUTO\");\n+                                        } else {\n+                                            fanLevels.add(fanString);\n+                                        }\n+                                    }\n+                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                    updateProperties(properties);", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczNTU1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490735553", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T06:45:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyODQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyOTQxMA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490529410", "bodyText": "What if either of these methods fail? Would the thing properties never get populated? Perhaps you could make it retry on failure.", "author": "cpmeister", "createdAt": "2020-09-17T20:03:37Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczNzExNw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490737117", "bodyText": "I don't see a reason for a retry and did not see such a thing in other bindings. If either of these fail, the thing status is set to offline, as there is some kind of communication error.", "author": "hmerk", "createdAt": "2020-09-18T06:48:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyOTQxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzMDc3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490530771", "bodyText": "response isn't used after this point, so why set it?", "author": "cpmeister", "createdAt": "2020-09-17T20:06:10Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczODkxOA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490738918", "bodyText": "It was a leftover, removed", "author": "hmerk", "createdAt": "2020-09-18T06:52:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzMDc3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzMzE3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490533179", "bodyText": "Since you are only passing in String options you might as well make the Collection contain only Strings you don't have to call toString() on all of the option elements later on.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void addChannel(String channelId, String itemType, @Nullable final Collection<?> options) {\n          \n          \n            \n                    if (thing.getChannel(channelId) == null) {\n          \n          \n            \n                        logger.trace(\"Channel '{}' for UID to be added\", channelId);\n          \n          \n            \n                        ThingBuilder thingBuilder = editThing();\n          \n          \n            \n                        final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n          \n          \n            \n                        Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n          \n          \n            \n                                .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n          \n          \n            \n                        thingBuilder.withChannel(channel);\n          \n          \n            \n                        updateThing(thingBuilder.build());\n          \n          \n            \n            \n          \n          \n            \n                        if (options != null) {\n          \n          \n            \n                            final List<StateOption> stateOptions = options.stream()\n          \n          \n            \n                                    .map(e -> new StateOption(e.toString(),\n          \n          \n            \n                                            e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n          \n          \n            \n                                    .collect(Collectors.toList());\n          \n          \n            \n                public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n          \n          \n            \n                    if (thing.getChannel(channelId) == null) {\n          \n          \n            \n                        logger.trace(\"Channel '{}' for UID to be added\", channelId);\n          \n          \n            \n                        ThingBuilder thingBuilder = editThing();\n          \n          \n            \n                        final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n          \n          \n            \n                        Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n          \n          \n            \n                                .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n          \n          \n            \n                        thingBuilder.withChannel(channel);\n          \n          \n            \n                        updateThing(thingBuilder.build());\n          \n          \n            \n            \n          \n          \n            \n                        if (options != null) {\n          \n          \n            \n                            final List<StateOption> stateOptions = options.stream()\n          \n          \n            \n                                    .map(e -> new StateOption(e,\n          \n          \n            \n                                            e.substring(0, 1) + e.substring(1).toLowerCase()))\n          \n          \n            \n                                    .collect(Collectors.toList());", "author": "cpmeister", "createdAt": "2020-09-17T20:10:49Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);\n+                    } else {\n+                        logout();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                } else {\n+                    logout();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                    for (Dpval element : dpval) {\n+                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                        switch (element.uid) {\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_POWER,\n+                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                break;\n+                            case 2:\n+                                switch (element.value) {\n+                                    case 0:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                        break;\n+                                    case 1:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                        break;\n+                                    case 2:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                        break;\n+                                    case 3:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                        break;\n+                                    case 4:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                        break;\n+                                }\n+                                break;\n+                            case 4:\n+                                if ((element.value) == 0) {\n+                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                } else {\n+                                    updateState(CHANNEL_TYPE_FANSPEED,\n+                                            StringType.valueOf(String.valueOf(element.value)));\n+                                }\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                State state;\n+                                if ((element.value) == 0) {\n+                                    state = StringType.valueOf(\"AUTO\");\n+                                } else if ((element.value) == 10) {\n+                                    state = StringType.valueOf(\"SWING\");\n+                                } else if ((element.value) == 11) {\n+                                    state = StringType.valueOf(\"SWIRL\");\n+                                } else if ((element.value) == 12) {\n+                                    state = StringType.valueOf(\"WIDE\");\n+                                } else {\n+                                    state = StringType.valueOf(String.valueOf(element.value));\n+                                }\n+                                switch (element.uid) {\n+                                    case 5:\n+                                        updateState(CHANNEL_TYPE_VANESUD, state);\n+                                        break;\n+                                    case 6:\n+                                        updateState(CHANNEL_TYPE_VANESLR, state);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                int unit = Math.round((element.value) / 10);\n+                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                break;\n+                            case 10:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                break;\n+                            case 37:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                break;\n+                        }\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Id id = gson.fromJson(data.id.toString(), Id.class);\n+                    if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                        sessionId = id.sessionID.toString();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public void populateProperties() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Info info = gson.fromJson(data.info.toString(), Info.class);\n+                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                    updateProperties(properties);\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {\n+        login();\n+        if (!sessionId.isEmpty()) {\n+            String contentString = \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            logger.trace(\"available Datapoints response : {}\", response);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (success) {\n+                        logout();\n+                        Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                        Dp dp = gson.fromJson(data.dp.toString(), Dp.class);\n+                        Datapoints[] datapoints = gson.fromJson(dp.datapoints, Datapoints[].class);\n+                        for (Datapoints datapoint : datapoints) {\n+                            Descr descr = gson.fromJson(datapoint.descr, Descr.class);\n+                            String channelId = \"\";\n+                            String itemType = \"String\";\n+                            switch (datapoint.uid) {\n+                                case 2:\n+                                    List<String> opModes = new ArrayList<>();\n+                                    for (String modString : descr.states) {\n+                                        switch (modString) {\n+                                            case \"0\":\n+                                                opModes.add(\"AUTO\");\n+                                                break;\n+                                            case \"1\":\n+                                                opModes.add(\"HEAT\");\n+                                                break;\n+                                            case \"2\":\n+                                                opModes.add(\"DRY\");\n+                                                break;\n+                                            case \"3\":\n+                                                opModes.add(\"FAN\");\n+                                                break;\n+                                            case \"4\":\n+                                                opModes.add(\"COOL\");\n+                                                break;\n+                                        }\n+                                    }\n+                                    properties.put(\"Supported modes\", opModes.toString());\n+                                    updateProperties(properties);\n+                                    channelId = CHANNEL_TYPE_MODE;\n+                                    addChannel(channelId, itemType, opModes);\n+                                    break;\n+                                case 4:\n+                                    List<String> fanLevels = new ArrayList<>();\n+                                    for (String fanString : descr.states) {\n+                                        if (\"AUTO\".contentEquals(fanString)) {\n+                                            fanLevels.add(\"AUTO\");\n+                                        } else {\n+                                            fanLevels.add(fanString);\n+                                        }\n+                                    }\n+                                    properties.put(\"Supported fan levels\", fanLevels.toString());\n+                                    updateProperties(properties);\n+                                    channelId = CHANNEL_TYPE_FANSPEED;\n+                                    addChannel(channelId, itemType, fanLevels);\n+                                    break;\n+                                case 5:\n+                                case 6:\n+                                    List<String> swingModes = new ArrayList<>();\n+                                    for (String swingString : descr.states) {\n+                                        if (\"AUTO\".contentEquals(swingString)) {\n+                                            swingModes.add(\"AUTO\");\n+                                        } else if (\"10\".contentEquals(swingString)) {\n+                                            swingModes.add(\"SWING\");\n+                                        } else if (\"11\".contentEquals(swingString)) {\n+                                            swingModes.add(\"SWIRL\");\n+                                        } else if (\"12\".contentEquals(swingString)) {\n+                                            swingModes.add(\"WIDE\");\n+                                        } else {\n+                                            swingModes.add(swingString);\n+                                        }\n+                                    }\n+                                    switch (datapoint.uid) {\n+                                        case 5:\n+                                            channelId = CHANNEL_TYPE_VANESUD;\n+                                            properties.put(\"Supported vane up/down modes\", swingModes.toString());\n+                                            updateProperties(properties);\n+                                            addChannel(channelId, itemType, swingModes);\n+                                            break;\n+                                        case 6:\n+                                            channelId = CHANNEL_TYPE_VANESLR;\n+                                            properties.put(\"Supported vane left/right modes\", swingModes.toString());\n+                                            updateProperties(properties);\n+                                            addChannel(channelId, itemType, swingModes);\n+                                            break;\n+                                    }\n+                                    break;\n+                                case 9:\n+                                    channelId = CHANNEL_TYPE_TARGETTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                                case 10:\n+                                    channelId = CHANNEL_TYPE_AMBIENTTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                                case 37:\n+                                    channelId = CHANNEL_TYPE_OUTDOORTEMP;\n+                                    itemType = \"Number:Temperature\";\n+                                    addChannel(channelId, itemType, null);\n+                                    break;\n+                            }\n+                        }\n+                    }\n+\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+            logger.trace(\"Start Refresh Job\");\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::getAllUidValues, 0, INTESIS_REFRESH_INTERVAL_SEC,\n+                    TimeUnit.SECONDS);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<?> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e.toString(),\n+                                e.toString().substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczOTU4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490739586", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T06:54:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzMzE3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzNDc2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490534762", "bodyText": "Just like populateProperties you should probably rename this method to populateChannels", "author": "cpmeister", "createdAt": "2020-09-17T20:14:05Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);\n+                    } else {\n+                        logout();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                } else {\n+                    logout();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                    for (Dpval element : dpval) {\n+                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                        switch (element.uid) {\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_POWER,\n+                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                break;\n+                            case 2:\n+                                switch (element.value) {\n+                                    case 0:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                        break;\n+                                    case 1:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                        break;\n+                                    case 2:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                        break;\n+                                    case 3:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                        break;\n+                                    case 4:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                        break;\n+                                }\n+                                break;\n+                            case 4:\n+                                if ((element.value) == 0) {\n+                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                } else {\n+                                    updateState(CHANNEL_TYPE_FANSPEED,\n+                                            StringType.valueOf(String.valueOf(element.value)));\n+                                }\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                State state;\n+                                if ((element.value) == 0) {\n+                                    state = StringType.valueOf(\"AUTO\");\n+                                } else if ((element.value) == 10) {\n+                                    state = StringType.valueOf(\"SWING\");\n+                                } else if ((element.value) == 11) {\n+                                    state = StringType.valueOf(\"SWIRL\");\n+                                } else if ((element.value) == 12) {\n+                                    state = StringType.valueOf(\"WIDE\");\n+                                } else {\n+                                    state = StringType.valueOf(String.valueOf(element.value));\n+                                }\n+                                switch (element.uid) {\n+                                    case 5:\n+                                        updateState(CHANNEL_TYPE_VANESUD, state);\n+                                        break;\n+                                    case 6:\n+                                        updateState(CHANNEL_TYPE_VANESLR, state);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                int unit = Math.round((element.value) / 10);\n+                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                break;\n+                            case 10:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                break;\n+                            case 37:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                break;\n+                        }\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Id id = gson.fromJson(data.id.toString(), Id.class);\n+                    if (id.sessionID.toString() != null && !id.sessionID.toString().isEmpty()) {\n+                        sessionId = id.sessionID.toString();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public @Nullable String logout() {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public void populateProperties() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data.toString(), Data.class);\n+                    Info info = gson.fromJson(data.info.toString(), Info.class);\n+                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                    updateProperties(properties);\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void getDataPoints() {", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDczOTk3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490739973", "bodyText": "Renamed", "author": "hmerk", "createdAt": "2020-09-18T06:55:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzNDc2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzNjQ3OA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490536478", "bodyText": "handleCommand should execute and return quickly. Http requests can turn into lengthy operations so it would better if you ran this code asynchronously on the scheduler.", "author": "cpmeister", "createdAt": "2020-09-17T20:17:19Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);\n+                    } else {\n+                        logout();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            }\n+        }", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc2MTg3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490761873", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T07:42:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzNjQ3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzNjg0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490536849", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    scheduler.schedule(() -> {\n          \n          \n            \n                        populateProperties();\n          \n          \n            \n                        getDataPoints();\n          \n          \n            \n            \n          \n          \n            \n                    }, 0, TimeUnit.SECONDS);\n          \n          \n            \n                    scheduler.submit(() -> {\n          \n          \n            \n                        populateProperties();\n          \n          \n            \n                        getDataPoints();\n          \n          \n            \n                    });", "author": "cpmeister", "createdAt": "2020-09-17T20:17:57Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc0MTc3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490741779", "bodyText": "This gives an error in Eclipse IDE, as schedule expects three parameters:  Runnable, long, TimeUnit", "author": "hmerk", "createdAt": "2020-09-18T06:59:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzNjg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc0Mjg1OA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490742858", "bodyText": "schedule expects three parameters, yes. But I was suggesting you changed it to submit instead. execute should also work if you prefer.", "author": "cpmeister", "createdAt": "2020-09-18T07:02:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzNjg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc2ODY3MA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490768670", "bodyText": "Ah, did not see that you changed it to submit. Anyway, could be changed later...", "author": "hmerk", "createdAt": "2020-09-18T07:55:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzNjg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxNDY3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490914672", "bodyText": "Changed", "author": "hmerk", "createdAt": "2020-09-18T12:28:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzNjg0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0MjM3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490542376", "bodyText": "Since login() can fail, you should provide a way for callers to know if it executed without issue. This can be done by either adding a return value that indicates success or by throwing an exception if something goes wrong.\nSince you are currently having this method update the thing status it would be easiest to just have it return the sessionId.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void login() {\n          \n          \n            \n                public String login() {\n          \n      \n    \n    \n  \n\nThen it could be called like this:\nString sessionId = login();\nif(sessionId != null){\n...\n    logout(sessionId);\n}\n\nIf you want to take things further, a better way would be to refactor session management into a single method and allow callers to pass the functions that they want executed in a single session.\nLambdas make this easy.\nprivate void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler){\n  String sessionId = login();\n  if(sessionId != null){\n    try{\n      String request = requestFactory.apply(sessionId);\n      String response = api.postRequest(ipAddress, contentString);\n      if (response != null) {\n           \n                Response resp = gson.fromJson(response, Response.class);\n                boolean success = resp.success;\n                if (success) {\n                   handler.accept(resp);\n                } else {\n                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Request unsuccessful\");\n                }\n      }else{\n         updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n      }\n    } catch (JsonSyntaxException e) {\n      updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n    } finally {\n      logout(sessionId);\n    }\n  }\n}\n\nThen it could be called like this:\n\nprivate void handleDataPointsResponse(Response response){\n}\n\nprivate void foo(){\n    postRequest(sessionId -> \n       \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\", \n        this::handleDataPointsResponse);\n}", "author": "cpmeister", "createdAt": "2020-09-17T20:28:19Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,529 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+    private String sessionId = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.schedule(() -> {\n+            populateProperties();\n+            getDataPoints();\n+\n+        }, 0, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            login();\n+            String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\", \\\"uid\\\":\" + uid + \",\\\"value\\\":\" + value + \"}}\";\n+            String response = api.postRequest(ipAddress, contentString);\n+            if (response != null) {\n+                try {\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (!success) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        String sessionString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\"\n+                                + password + \"\\\"}}\";\n+                        response = api.postRequest(ipAddress, sessionString);\n+                    } else {\n+                        logout();\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                } catch (JsonSyntaxException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update device status and all channels\n+     */\n+    public void getAllUidValues() {\n+        logger.debug(\"Polling IntesisHome device\");\n+        login();\n+        String contentString = \"{\\\"command\\\":\\\"getdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                + \"\\\", \\\"uid\\\":\\\"all\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.debug(\"Thing {} received response {}\", this.getThing().getUID(), response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (!success) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                } else {\n+                    logout();\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Dpval[] dpval = gson.fromJson(data.dpval, Dpval[].class);\n+                    for (Dpval element : dpval) {\n+                        logger.trace(\"UID : {} ; value : {}\", element.uid, element.value);\n+                        switch (element.uid) {\n+                            case 1:\n+                                updateState(CHANNEL_TYPE_POWER,\n+                                        String.valueOf(element.value).equals(\"0\") ? OnOffType.OFF : OnOffType.ON);\n+                                break;\n+                            case 2:\n+                                switch (element.value) {\n+                                    case 0:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"AUTO\"));\n+                                        break;\n+                                    case 1:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"HEAT\"));\n+                                        break;\n+                                    case 2:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"DRY\"));\n+                                        break;\n+                                    case 3:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"FAN\"));\n+                                        break;\n+                                    case 4:\n+                                        updateState(CHANNEL_TYPE_MODE, StringType.valueOf(\"COOL\"));\n+                                        break;\n+                                }\n+                                break;\n+                            case 4:\n+                                if ((element.value) == 0) {\n+                                    updateState(CHANNEL_TYPE_FANSPEED, StringType.valueOf(\"AUTO\"));\n+                                } else {\n+                                    updateState(CHANNEL_TYPE_FANSPEED,\n+                                            StringType.valueOf(String.valueOf(element.value)));\n+                                }\n+                                break;\n+                            case 5:\n+                            case 6:\n+                                State state;\n+                                if ((element.value) == 0) {\n+                                    state = StringType.valueOf(\"AUTO\");\n+                                } else if ((element.value) == 10) {\n+                                    state = StringType.valueOf(\"SWING\");\n+                                } else if ((element.value) == 11) {\n+                                    state = StringType.valueOf(\"SWIRL\");\n+                                } else if ((element.value) == 12) {\n+                                    state = StringType.valueOf(\"WIDE\");\n+                                } else {\n+                                    state = StringType.valueOf(String.valueOf(element.value));\n+                                }\n+                                switch (element.uid) {\n+                                    case 5:\n+                                        updateState(CHANNEL_TYPE_VANESUD, state);\n+                                        break;\n+                                    case 6:\n+                                        updateState(CHANNEL_TYPE_VANESLR, state);\n+                                        break;\n+                                }\n+                                break;\n+                            case 9:\n+                                int unit = Math.round((element.value) / 10);\n+                                State stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_TARGETTEMP, stateValue);\n+                                break;\n+                            case 10:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_AMBIENTTEMP, stateValue);\n+                                break;\n+                            case 37:\n+                                unit = Math.round((element.value) / 10);\n+                                stateValue = QuantityType.valueOf(unit, SIUnits.CELSIUS);\n+                                updateState(CHANNEL_TYPE_OUTDOORTEMP, stateValue);\n+                                break;\n+                        }\n+                    }\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void login() {", "originalCommit": "3686e2eb700297ebf057829dc3e7b7a6de4ac439", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc1OTkwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490759905", "bodyText": "I have changed the sessionID handling as requested, but would like to leve your further refactoring for a later stage.\nA fist try to implement this, which indeed seems to be a good idea, lead into some errors.", "author": "hmerk", "createdAt": "2020-09-18T07:38:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0MjM3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxNDk2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r490914962", "bodyText": "Implemented this as well", "author": "hmerk", "createdAt": "2020-09-18T12:29:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0MjM3Ng=="}], "type": "inlineReview"}, {"oid": "3b651e749b28fccf9658734e0c7f00bc5add03dc", "url": "https://github.com/openhab/openhab-addons/commit/3b651e749b28fccf9658734e0c7f00bc5add03dc", "message": "Further changes in  IntesisHomeHandler after review\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-18T07:51:32Z", "type": "commit"}, {"oid": "5a46805f72bcb924860feeae643164f51c1cb094", "url": "https://github.com/openhab/openhab-addons/commit/5a46805f72bcb924860feeae643164f51c1cb094", "message": "Further simplification in  IntesisHomeHandler after review\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-18T12:30:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1NTkyNA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491055924", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            login();\n          \n          \n            \n                            String sessionId = login();\n          \n          \n            \n                            if (sessionId != null) {\n          \n          \n            \n                                String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n          \n          \n            \n                                        + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n          \n          \n            \n                                String response = api.postRequest(ipAddress, contentString);\n          \n          \n            \n                                if (response != null) {\n          \n          \n            \n                                    try {\n          \n          \n            \n                                        Response resp = gson.fromJson(response, Response.class);\n          \n          \n            \n                                        boolean success = resp.success;\n          \n          \n            \n                                        if (!success) {\n          \n          \n            \n                                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n          \n          \n            \n                                        } else {\n          \n          \n            \n                                            logout(sessionId);\n          \n          \n            \n                                            updateStatus(ThingStatus.ONLINE);\n          \n          \n            \n                                        }\n          \n          \n            \n                                    } catch (JsonSyntaxException e) {\n          \n          \n            \n                                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n          \n          \n            \n                                    }\n          \n          \n            \n                                }\n          \n          \n            \n                            }\n          \n          \n            \n                            postRequestInSession(sessionId ->  \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n          \n          \n            \n                                        + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\", r -> updateStatus(ThingStatus.ONLINE));\n          \n      \n    \n    \n  \n\npostRequestInSession is renamed version of postRequest. See my comments below for details.", "author": "cpmeister", "createdAt": "2020-09-18T16:18:14Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,537 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.submit(() -> {\n+            populateProperties();\n+            // query available dataPoints and build dynamic channels\n+            postRequest(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\", this::handleDataPointsResponse);\n+            updateProperties(properties);\n+\n+        });\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.submit(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n+                    }\n+                }", "originalCommit": "5a46805f72bcb924860feeae643164f51c1cb094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NDIwNA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491174204", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T20:26:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1NTkyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA5Mjc5OA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491092798", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n          \n          \n            \n                            + \"\\\"}}\";\n          \n          \n            \n                    String response = api.postRequest(ipAddress, contentString);\n          \n          \n            \n                    String sessionId = null;\n          \n          \n            \n                    if (response != null) {\n          \n          \n            \n                        try {\n          \n          \n            \n                            Response resp = gson.fromJson(response, Response.class);\n          \n          \n            \n                            boolean success = resp.success;\n          \n          \n            \n                            if (success) {\n          \n          \n            \n                                Data data = gson.fromJson(resp.data, Data.class);\n          \n          \n            \n                                Id id = gson.fromJson(data.id, Id.class);\n          \n          \n            \n                                sessionId = id.sessionID.toString();\n          \n          \n            \n                                if (sessionId != null && !sessionId.isEmpty()) {\n          \n          \n            \n                                    updateStatus(ThingStatus.ONLINE);\n          \n          \n            \n                                    return sessionId;\n          \n          \n            \n                                } else {\n          \n          \n            \n                                    updateStatus(ThingStatus.OFFLINE);\n          \n          \n            \n                                }\n          \n          \n            \n                            } else {\n          \n          \n            \n                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n          \n          \n            \n                                return null;\n          \n          \n            \n                            }\n          \n          \n            \n                        } catch (JsonSyntaxException e) {\n          \n          \n            \n                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n          \n          \n            \n                        }\n          \n          \n            \n                    } else {\n          \n          \n            \n                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n          \n          \n            \n                        return null;\n          \n          \n            \n                    }\n          \n          \n            \n                    return sessionId;\n          \n          \n            \n                    //lambda's can't modify local variables, so we use an array here to get around the issue\n          \n          \n            \n                    String[] sessionId = new String[1];\n          \n          \n            \n                    postRequest(\"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n          \n          \n            \n                            + \"\\\"}}\", resp -> {\n          \n          \n            \n                               Data data = gson.fromJson(resp.data, Data.class);\n          \n          \n            \n                                Id id = gson.fromJson(data.id, Id.class);\n          \n          \n            \n                                sessionId[0] = id.sessionID.toString();\n          \n          \n            \n                            });\n          \n          \n            \n                    if (sessionId[0] != null && !sessionId[0].isEmpty()) {\n          \n          \n            \n                         updateStatus(ThingStatus.ONLINE);\n          \n          \n            \n                         return sessionId[0];\n          \n          \n            \n                    } else {\n          \n          \n            \n                         updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"SessionId not received\");\n          \n          \n            \n                         return null;\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\nYou will notice that this requires a new postRequest method that I'll describe below.", "author": "cpmeister", "createdAt": "2020-09-18T17:30:52Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,537 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.submit(() -> {\n+            populateProperties();\n+            // query available dataPoints and build dynamic channels\n+            postRequest(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\", this::handleDataPointsResponse);\n+            updateProperties(properties);\n+\n+        });\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.submit(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n+                    }\n+                }\n+\n+            });\n+        }\n+    }\n+\n+    public @Nullable String login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        String sessionId = null;\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Id id = gson.fromJson(data.id, Id.class);\n+                    sessionId = id.sessionID.toString();\n+                    if (sessionId != null && !sessionId.isEmpty()) {\n+                        updateStatus(ThingStatus.ONLINE);\n+                        return sessionId;\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    return null;\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            return null;\n+        }\n+        return sessionId;", "originalCommit": "5a46805f72bcb924860feeae643164f51c1cb094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NDMzMg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491174332", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T20:26:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA5Mjc5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0NjA2NA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491146064", "bodyText": "The previous suggestion requires a version of postRequest that doesn't handle session state. We can simply refactor some of the inner code from old postRequest method to serve this purpose.\nBut since we don't want to confuse our two postRequest methods, it would also be a good idea to\nrename our old postRequest method into something more suitable. I suggest postRequestInSession.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n          \n          \n            \n                    String sessionId = login();\n          \n          \n            \n                    if (sessionId != null) {\n          \n          \n            \n                        try {\n          \n          \n            \n                            String request = requestFactory.apply(sessionId);\n          \n          \n            \n                            logger.trace(\"request : '{}'\", request);\n          \n          \n            \n            \n          \n          \n            \n                            String response = api.postRequest(ipAddress, request);\n          \n          \n            \n                            if (response != null) {\n          \n          \n            \n            \n          \n          \n            \n                                Response resp = gson.fromJson(response, Response.class);\n          \n          \n            \n                                boolean success = resp.success;\n          \n          \n            \n                                if (success) {\n          \n          \n            \n                                    handler.accept(resp);\n          \n          \n            \n                                } else {\n          \n          \n            \n                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n          \n          \n            \n                                            \"Request unsuccessful\");\n          \n          \n            \n                                }\n          \n          \n            \n                            } else {\n          \n          \n            \n                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n          \n          \n            \n                            }\n          \n          \n            \n                        } catch (JsonSyntaxException e) {\n          \n          \n            \n                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n          \n          \n            \n                        } finally {\n          \n          \n            \n                            logout(sessionId);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n                \n          \n          \n            \n                private void postRequest(String request, Consumer<Response> handler) {\n          \n          \n            \n                    try {\n          \n          \n            \n                            logger.trace(\"request : '{}'\", request);\n          \n          \n            \n            \n          \n          \n            \n                            String response = api.postRequest(ipAddress, request);\n          \n          \n            \n                            if (response != null) {\n          \n          \n            \n            \n          \n          \n            \n                                Response resp = gson.fromJson(response, Response.class);\n          \n          \n            \n                                boolean success = resp.success;\n          \n          \n            \n                                if (success) {\n          \n          \n            \n                                    handler.accept(resp);\n          \n          \n            \n                                } else {\n          \n          \n            \n                                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n          \n          \n            \n                                            \"Request unsuccessful\");\n          \n          \n            \n                                }\n          \n          \n            \n                            } else {\n          \n          \n            \n                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n          \n          \n            \n                            }\n          \n          \n            \n                     } catch (JsonSyntaxException e) {\n          \n          \n            \n                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n          \n          \n            \n                     }\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                private void postRequestInSession(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n          \n          \n            \n                    String sessionId = login();\n          \n          \n            \n                    if (sessionId != null) {\n          \n          \n            \n                        try {\n          \n          \n            \n                            String request = requestFactory.apply(sessionId);\n          \n          \n            \n                            postRequest(request, handler);\n          \n          \n            \n                        } finally {\n          \n          \n            \n                            logout(sessionId);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                }", "author": "cpmeister", "createdAt": "2020-09-18T19:20:48Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,537 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.submit(() -> {\n+            populateProperties();\n+            // query available dataPoints and build dynamic channels\n+            postRequest(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\", this::handleDataPointsResponse);\n+            updateProperties(properties);\n+\n+        });\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.submit(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n+                    }\n+                }\n+\n+            });\n+        }\n+    }\n+\n+    public @Nullable String login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        String sessionId = null;\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Id id = gson.fromJson(data.id, Id.class);\n+                    sessionId = id.sessionID.toString();\n+                    if (sessionId != null && !sessionId.isEmpty()) {\n+                        updateStatus(ThingStatus.ONLINE);\n+                        return sessionId;\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    return null;\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            return null;\n+        }\n+        return sessionId;\n+    }\n+\n+    public @Nullable String logout(String sessionId) {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public void populateProperties() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Info info = gson.fromJson(data.info, Info.class);\n+                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n+                        .collect(Collectors.toList());\n+                logger.trace(\"StateOptions : '{}'\", stateOptions);\n+                intesisStateDescriptionProvider.setStateOptions(channel.getUID(), stateOptions);\n+            }\n+        }\n+    }\n+\n+    private void postRequest(UnaryOperator<String> requestFactory, Consumer<Response> handler) {\n+        String sessionId = login();\n+        if (sessionId != null) {\n+            try {\n+                String request = requestFactory.apply(sessionId);\n+                logger.trace(\"request : '{}'\", request);\n+\n+                String response = api.postRequest(ipAddress, request);\n+                if (response != null) {\n+\n+                    Response resp = gson.fromJson(response, Response.class);\n+                    boolean success = resp.success;\n+                    if (success) {\n+                        handler.accept(resp);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Request unsuccessful\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No Response\");\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            } finally {\n+                logout(sessionId);\n+            }\n+        }\n+    }", "originalCommit": "5a46805f72bcb924860feeae643164f51c1cb094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NDQ0OA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491174448", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T20:27:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0NjA2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MTg3NA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491151874", "bodyText": "This code can now also be refactored to use our new postRequest method.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n          \n          \n            \n                    String response = api.postRequest(ipAddress, contentString);\n          \n          \n            \n                    logger.trace(\"getInfo response : {}\", response);\n          \n          \n            \n                    if (response != null) {\n          \n          \n            \n                        try {\n          \n          \n            \n                            Response resp = gson.fromJson(response, Response.class);\n          \n          \n            \n                            boolean success = resp.success;\n          \n          \n            \n                            if (success) {\n          \n          \n            \n                                Data data = gson.fromJson(resp.data, Data.class);\n          \n          \n            \n                                Info info = gson.fromJson(data.info, Info.class);\n          \n          \n            \n                                properties.put(PROPERTY_VENDOR, \"Intesis\");\n          \n          \n            \n                                properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n          \n          \n            \n                                properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n          \n          \n            \n                                properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n          \n          \n            \n                                properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n          \n          \n            \n                                updateStatus(ThingStatus.ONLINE);\n          \n          \n            \n                            }\n          \n          \n            \n                        } catch (JsonSyntaxException e) {\n          \n          \n            \n                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    postRequest(\"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\", resp -> {\n          \n          \n            \n                                Data data = gson.fromJson(resp.data, Data.class);\n          \n          \n            \n                                Info info = gson.fromJson(data.info, Info.class);\n          \n          \n            \n                                properties.put(PROPERTY_VENDOR, \"Intesis\");\n          \n          \n            \n                                properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n          \n          \n            \n                                properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n          \n          \n            \n                                properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n          \n          \n            \n                                properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n          \n          \n            \n                                updateStatus(ThingStatus.ONLINE);\n          \n          \n            \n                    });", "author": "cpmeister", "createdAt": "2020-09-18T19:33:59Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,537 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.submit(() -> {\n+            populateProperties();\n+            // query available dataPoints and build dynamic channels\n+            postRequest(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\", this::handleDataPointsResponse);\n+            updateProperties(properties);\n+\n+        });\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.submit(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n+                    }\n+                }\n+\n+            });\n+        }\n+    }\n+\n+    public @Nullable String login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        String sessionId = null;\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Id id = gson.fromJson(data.id, Id.class);\n+                    sessionId = id.sessionID.toString();\n+                    if (sessionId != null && !sessionId.isEmpty()) {\n+                        updateStatus(ThingStatus.ONLINE);\n+                        return sessionId;\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    return null;\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            return null;\n+        }\n+        return sessionId;\n+    }\n+\n+    public @Nullable String logout(String sessionId) {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public void populateProperties() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Info info = gson.fromJson(data.info, Info.class);\n+                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }", "originalCommit": "5a46805f72bcb924860feeae643164f51c1cb094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NDA1MA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491174050", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T20:26:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MTg3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MjUyMA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491152520", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))\n          \n          \n            \n                                    .map(e -> new StateOption(e, e.substring(0, 1) + e.substring(1).toLowerCase()))", "author": "cpmeister", "createdAt": "2020-09-18T19:35:22Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,537 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        // start background initialization:\n+        scheduler.submit(() -> {\n+            populateProperties();\n+            // query available dataPoints and build dynamic channels\n+            postRequest(sessionId -> \"{\\\"command\\\":\\\"getavailabledatapoints\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                    + \"\\\"}}\", this::handleDataPointsResponse);\n+            updateProperties(properties);\n+\n+        });\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"IntesisHomeHandler disposed.\");\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        int uid = 0;\n+        int value = 0;\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            // Refresh command is not supported as the binding polls all values every 30 seconds\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_TYPE_POWER:\n+                    uid = 1;\n+                    value = command.equals(OnOffType.OFF) ? 0 : 1;\n+                    break;\n+                case CHANNEL_TYPE_MODE:\n+                    uid = 2;\n+                    value = IntesisHomeModeEnum.valueOf(command.toString()).getMode();\n+                    break;\n+                case CHANNEL_TYPE_FANSPEED:\n+                    uid = 4;\n+                    if ((\"AUTO\").equals(command.toString())) {\n+                        value = 0;\n+                    } else {\n+                        value = Integer.parseInt(command.toString());\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_VANESUD:\n+                case CHANNEL_TYPE_VANESLR:\n+                    switch (command.toString()) {\n+                        case \"AUTO\":\n+                            value = 0;\n+                            break;\n+                        case \"1\":\n+                        case \"2\":\n+                        case \"3\":\n+                        case \"4\":\n+                        case \"5\":\n+                        case \"6\":\n+                        case \"7\":\n+                        case \"8\":\n+                        case \"9\":\n+                            value = Integer.parseInt(command.toString());\n+                            break;\n+                        case \"SWING\":\n+                            value = 10;\n+                            break;\n+                        case \"SWIRL\":\n+                            value = 11;\n+                            break;\n+                        case \"WIDE\":\n+                            value = 12;\n+                            break;\n+                    }\n+                    switch (channelId) {\n+                        case CHANNEL_TYPE_VANESUD:\n+                            uid = 5;\n+                            break;\n+                        case CHANNEL_TYPE_VANESLR:\n+                            uid = 6;\n+                            break;\n+                    }\n+                    break;\n+                case CHANNEL_TYPE_TARGETTEMP:\n+                    uid = 9;\n+                    if (command instanceof QuantityType) {\n+                        QuantityType<?> newVal = (QuantityType<?>) command;\n+                        newVal = newVal.toUnit(SIUnits.CELSIUS);\n+                        if (newVal != null) {\n+                            value = newVal.intValue() * 10;\n+                        }\n+                    }\n+                    break;\n+            }\n+        }\n+        if (uid != 0) {\n+            final int uId = uid;\n+            final int newValue = value;\n+            scheduler.submit(() -> {\n+                login();\n+                String sessionId = login();\n+                if (sessionId != null) {\n+                    String contentString = \"{\\\"command\\\":\\\"setdatapointvalue\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId\n+                            + \"\\\", \\\"uid\\\":\" + uId + \",\\\"value\\\":\" + newValue + \"}}\";\n+                    String response = api.postRequest(ipAddress, contentString);\n+                    if (response != null) {\n+                        try {\n+                            Response resp = gson.fromJson(response, Response.class);\n+                            boolean success = resp.success;\n+                            if (!success) {\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                            } else {\n+                                logout(sessionId);\n+                                updateStatus(ThingStatus.ONLINE);\n+                            }\n+                        } catch (JsonSyntaxException e) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                        }\n+                    }\n+                }\n+\n+            });\n+        }\n+    }\n+\n+    public @Nullable String login() {\n+        String contentString = \"{\\\"command\\\":\\\"login\\\",\\\"data\\\":{\\\"username\\\":\\\"Admin\\\",\\\"password\\\":\\\"\" + password\n+                + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        String sessionId = null;\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Id id = gson.fromJson(data.id, Id.class);\n+                    sessionId = id.sessionID.toString();\n+                    if (sessionId != null && !sessionId.isEmpty()) {\n+                        updateStatus(ThingStatus.ONLINE);\n+                        return sessionId;\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE);\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                    return null;\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            return null;\n+        }\n+        return sessionId;\n+    }\n+\n+    public @Nullable String logout(String sessionId) {\n+        String contentString = \"{\\\"command\\\":\\\"logout\\\",\\\"data\\\":{\\\"sessionID\\\":\\\"\" + sessionId + \"\\\"}}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        return response;\n+    }\n+\n+    public void populateProperties() {\n+        String contentString = \"{\\\"command\\\":\\\"getinfo\\\",\\\"data\\\":\\\"\\\"}\";\n+        String response = api.postRequest(ipAddress, contentString);\n+        logger.trace(\"getInfo response : {}\", response);\n+        if (response != null) {\n+            try {\n+                Response resp = gson.fromJson(response, Response.class);\n+                boolean success = resp.success;\n+                if (success) {\n+                    Data data = gson.fromJson(resp.data, Data.class);\n+                    Info info = gson.fromJson(data.info, Info.class);\n+                    properties.put(PROPERTY_VENDOR, \"Intesis\");\n+                    properties.put(PROPERTY_MODEL_ID, info.deviceModel);\n+                    properties.put(PROPERTY_SERIAL_NUMBER, info.sn);\n+                    properties.put(PROPERTY_FIRMWARE_VERSION, info.fwVersion);\n+                    properties.put(PROPERTY_MAC_ADDRESS, info.wlanSTAMAC);\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            } catch (JsonSyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    public void addChannel(String channelId, String itemType, @Nullable final Collection<String> options) {\n+        if (thing.getChannel(channelId) == null) {\n+            logger.trace(\"Channel '{}' for UID to be added\", channelId);\n+            ThingBuilder thingBuilder = editThing();\n+            final ChannelTypeUID channelTypeUID = new ChannelTypeUID(BINDING_ID, channelId);\n+            Channel channel = ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                    .withType(channelTypeUID).withKind(ChannelKind.STATE).build();\n+            thingBuilder.withChannel(channel);\n+            updateThing(thingBuilder.build());\n+\n+            if (options != null) {\n+                final List<StateOption> stateOptions = options.stream()\n+                        .map(e -> new StateOption(e, e.substring(0, 1) + e.toString().substring(1).toLowerCase()))", "originalCommit": "5a46805f72bcb924860feeae643164f51c1cb094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3Mzk0OA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491173948", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T20:25:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MjUyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NDAwNg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491154006", "bodyText": "If configuration is invalid there is no reason to continue initializing right?\nAlso, you should specify in the status details which configuration parameter is wrong so that users would\nknow how to fix it.", "author": "cpmeister", "createdAt": "2020-09-18T19:39:01Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,537 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;\n+        if (ipAddress.isEmpty() || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }", "originalCommit": "5a46805f72bcb924860feeae643164f51c1cb094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3OTkwNw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491179907", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T20:40:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NDAwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NTM1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491155353", "bodyText": "There is no need to cache these as their own fields in the handler when you could always just retrieve them directly from the config each time.", "author": "cpmeister", "createdAt": "2020-09-18T19:42:17Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,537 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n+        ipAddress = config.ipAddress;\n+        password = config.password;", "originalCommit": "5a46805f72bcb924860feeae643164f51c1cb094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NzI4OA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491177288", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T20:33:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NTM1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NjIxOA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491156218", "bodyText": "I assume it was your original intention save the config in your config field. This is the standard design pattern in most bindings.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n          \n          \n            \n                    config = getConfigAs(IntesisConfiguration.class);", "author": "cpmeister", "createdAt": "2020-09-18T19:44:23Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,537 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+\n+    final Gson gson = new Gson();\n+\n+    public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n+            IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider) {\n+        super(thing);\n+        this.api = new IntesisHomeHttpApi(config, httpClient);\n+        this.intesisStateDescriptionProvider = intesisStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.UNKNOWN);\n+        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);", "originalCommit": "5a46805f72bcb924860feeae643164f51c1cb094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NTE0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491175149", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T20:28:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NjIxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NjUwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491156501", "bodyText": "Might as well make this final.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n          \n          \n            \n                private final IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n          \n      \n    \n    \n  \n\nAlso, please move all final fields above the non-final ones.", "author": "cpmeister", "createdAt": "2020-09-18T19:45:03Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,537 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;", "originalCommit": "5a46805f72bcb924860feeae643164f51c1cb094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NTkwNg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491175906", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T20:30:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NjUwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NjgzOA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491156838", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final Gson gson = new Gson();\n          \n          \n            \n                private final Gson gson = new Gson();", "author": "cpmeister", "createdAt": "2020-09-18T19:45:44Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -0,0 +1,537 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.intesis.internal.handler;\n+\n+import static org.eclipse.smarthome.core.thing.Thing.*;\n+import static org.openhab.binding.intesis.internal.IntesisBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.UnaryOperator;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelKind;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.openhab.binding.intesis.internal.IntesisConfiguration;\n+import org.openhab.binding.intesis.internal.IntesisDynamicStateDescriptionProvider;\n+import org.openhab.binding.intesis.internal.IntesisHomeModeEnum;\n+import org.openhab.binding.intesis.internal.api.IntesisHomeHttpApi;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Data;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Datapoints;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Descr;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dp;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Dpval;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Id;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Info;\n+import org.openhab.binding.intesis.internal.gson.IntesisHomeJSonDTO.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IntesisHomeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans-J\u00f6rg Merk - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IntesisHomeHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IntesisHomeHandler.class);\n+    private final IntesisHomeHttpApi api;\n+    private IntesisConfiguration config = new IntesisConfiguration();\n+\n+    private final Map<String, String> properties = new HashMap<>();\n+\n+    private IntesisDynamicStateDescriptionProvider intesisStateDescriptionProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private String ipAddress = \"\";\n+    private String password = \"\";\n+\n+    final Gson gson = new Gson();", "originalCommit": "5a46805f72bcb924860feeae643164f51c1cb094", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NTgzNg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491175836", "bodyText": "Done", "author": "hmerk", "createdAt": "2020-09-18T20:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1NjgzOA=="}], "type": "inlineReview"}, {"oid": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "url": "https://github.com/openhab/openhab-addons/commit/b5316d06ce4f5000baefc57cd18b8c9671d87740", "message": "Some more code optimization after review\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-18T20:46:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1MDI1MA==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491250250", "bodyText": "Once you find that the configuration is invalid, you should bail out early subsequent errors from the improper configuration would end up burying the initial config errors.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address and password not set\");\n          \n          \n            \n                    } else if (config.ipAddress.isEmpty()) {\n          \n          \n            \n                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address not set\");\n          \n          \n            \n                    } else if (config.password.isEmpty()) {\n          \n          \n            \n                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not set\");\n          \n          \n            \n                    }\n          \n          \n            \n                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address and password not set\");\n          \n          \n            \n                        return;\n          \n          \n            \n                    } else if (config.ipAddress.isEmpty()) {\n          \n          \n            \n                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address not set\");\n          \n          \n            \n                        return;\n          \n          \n            \n                    } else if (config.password.isEmpty()) {\n          \n          \n            \n                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not set\");\n          \n          \n            \n                        return;\n          \n          \n            \n                    }", "author": "cpmeister", "createdAt": "2020-09-19T01:16:55Z", "path": "bundles/org.openhab.binding.intesis/src/main/java/org/openhab/binding/intesis/internal/handler/IntesisHomeHandler.java", "diffHunk": "@@ -99,21 +97,22 @@ public IntesisHomeHandler(final Thing thing, final HttpClient httpClient,\n     @Override\n     public void initialize() {\n         updateStatus(ThingStatus.UNKNOWN);\n-        final IntesisConfiguration config = getConfigAs(IntesisConfiguration.class);\n-        ipAddress = config.ipAddress;\n-        password = config.password;\n-        if (ipAddress.isEmpty() || password.isEmpty()) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        config = getConfigAs(IntesisConfiguration.class);\n+        if (config.ipAddress.isEmpty() && config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address and password not set\");\n+        } else if (config.ipAddress.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"IP-Address not set\");\n+        } else if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not set\");\n         }", "originalCommit": "b5316d06ce4f5000baefc57cd18b8c9671d87740", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI5NDY0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491294642", "bodyText": "Maybe better to add an else case at the last if and put the rest of the code in there\n } else {\n    // start background initialization:\n   ....\n}", "author": "Hilbrand", "createdAt": "2020-09-19T06:42:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1MDI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI5NzQyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491297421", "bodyText": "Done, implemented both changes.", "author": "hmerk", "createdAt": "2020-09-19T06:50:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1MDI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI5OTEzNg==", "url": "https://github.com/openhab/openhab-addons/pull/8231#discussion_r491299136", "bodyText": "With the else the return is technically not needed \ud83d\ude09 :", "author": "Hilbrand", "createdAt": "2020-09-19T06:55:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1MDI1MA=="}], "type": "inlineReview"}, {"oid": "a619be48d07d3b476b29034af12e1288a683833b", "url": "https://github.com/openhab/openhab-addons/commit/a619be48d07d3b476b29034af12e1288a683833b", "message": "Some more code optimization after review\n\nSigned-off-by: Hans-J\u00f6rg Merk <github@hmerk.de>", "committedDate": "2020-09-19T06:53:11Z", "type": "commit"}]}