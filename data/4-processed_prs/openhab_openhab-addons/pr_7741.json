{"pr_number": 7741, "pr_title": "[insteon] improve reconnection logic", "pr_createdAt": "2020-05-22T12:46:04Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7741", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ2Njc3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7741#discussion_r429466776", "bodyText": "I doubt it is your intention for this thread to interrupt itself.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            reconnectJob.cancel(true);\n          \n          \n            \n                            reconnectJob.cancel(false);", "author": "cpmeister", "createdAt": "2020-05-22T21:52:52Z", "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/handler/InsteonNetworkHandler.java", "diffHunk": "@@ -142,6 +149,18 @@ public void updateState(ChannelUID channelUID, State state) {\n         super.updateState(channelUID, state);\n     }\n \n+    public void bindingDisconnected() {\n+        reconnectJob = scheduler.scheduleWithFixedDelay(() -> {\n+            if (insteonBinding.reconnect()) {\n+                updateStatus(ThingStatus.ONLINE);\n+                reconnectJob.cancel(true);", "originalCommit": "ed437e5912b51a559d01886ee7b24c5cae55ddf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4MzY0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7741#discussion_r429483643", "bodyText": "fixed", "author": "robnielsen", "createdAt": "2020-05-22T22:58:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ2Njc3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3MzcwOA==", "url": "https://github.com/openhab/openhab-addons/pull/7741#discussion_r429473708", "bodyText": "You shouldn't synchronize on a non-final field, and you shouldn't synchronize on a boolean. Java synchronization operates against object instances, not against field names, so you would either need to use a dedicated lock object for synchronization:\nprivate final Object disconnectLock = new Object();\n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        synchronized (disconnected) {\n          \n          \n            \n                            if (!disconnected) {\n          \n          \n            \n                                logger.warn(\"port {} disconnected\", logName);\n          \n          \n            \n                                driver.disconnected();\n          \n          \n            \n                                disconnected = true;\n          \n          \n            \n                            }\n          \n          \n            \n                        }\n          \n          \n            \n                        synchronized (disconnectLock) {\n          \n          \n            \n                            if (!disconnected) {\n          \n          \n            \n                                logger.warn(\"port {} disconnected\", logName);\n          \n          \n            \n                                driver.disconnected();\n          \n          \n            \n                                disconnected = true;\n          \n          \n            \n                            }\n          \n          \n            \n                        }\n          \n      \n    \n    \n  \n\nOr you can change your disconnected field into one of the atomic utility classes (like AtomicBoolean) and then do the following:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        synchronized (disconnected) {\n          \n          \n            \n                            if (!disconnected) {\n          \n          \n            \n                                logger.warn(\"port {} disconnected\", logName);\n          \n          \n            \n                                driver.disconnected();\n          \n          \n            \n                                disconnected = true;\n          \n          \n            \n                            }\n          \n          \n            \n                        }\n          \n          \n            \n                        if(!disconnected.getAndSet(true)){\n          \n          \n            \n                            logger.warn(\"port {} disconnected\", logName);\n          \n          \n            \n                            driver.disconnected();\n          \n          \n            \n                        }", "author": "cpmeister", "createdAt": "2020-05-22T22:03:44Z", "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/driver/Port.java", "diffHunk": "@@ -255,6 +265,18 @@ public void modemDBComplete() {\n         driver.modemDBComplete(this);\n     }\n \n+    public void disconnected() {\n+        if (isRunning()) {\n+            synchronized (disconnected) {\n+                if (!disconnected) {\n+                    logger.warn(\"port {} disconnected\", logName);\n+                    driver.disconnected();\n+                    disconnected = true;\n+                }\n+            }", "originalCommit": "ed437e5912b51a559d01886ee7b24c5cae55ddf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4OTQxNg==", "url": "https://github.com/openhab/openhab-addons/pull/7741#discussion_r429489416", "bodyText": "Changed to AtomicBoolean", "author": "robnielsen", "createdAt": "2020-05-22T23:35:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3MzcwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NDQwOA==", "url": "https://github.com/openhab/openhab-addons/pull/7741#discussion_r429474408", "bodyText": "If you aren't going to change this to an AtomicBoolean then please make this primitive.", "author": "cpmeister", "createdAt": "2020-05-22T22:06:52Z", "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/driver/Port.java", "diffHunk": "@@ -83,6 +83,7 @@\n     private ModemDBBuilder mdbb;\n     private ArrayList<MsgListener> listeners = new ArrayList<>();\n     private LinkedBlockingQueue<Msg> writeQueue = new LinkedBlockingQueue<>();\n+    private Boolean disconnected = false;", "originalCommit": "ed437e5912b51a559d01886ee7b24c5cae55ddf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4OTQ1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7741#discussion_r429489456", "bodyText": "Changed to AtomicBoolean", "author": "robnielsen", "createdAt": "2020-05-22T23:35:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NDQwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NDc1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7741#discussion_r429474756", "bodyText": "Because this is repeatedly checked in a while loop, it would be in your best interest to make this volatile.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean stopped = false;\n          \n          \n            \n                private volatile boolean stopped = false;", "author": "cpmeister", "createdAt": "2020-05-22T22:08:37Z", "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/driver/IOStream.java", "diffHunk": "@@ -39,6 +39,10 @@\n     protected @Nullable OutputStream out = null;\n     private boolean stopped = false;", "originalCommit": "ed437e5912b51a559d01886ee7b24c5cae55ddf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4ODMxNg==", "url": "https://github.com/openhab/openhab-addons/pull/7741#discussion_r429488316", "bodyText": "done", "author": "robnielsen", "createdAt": "2020-05-22T23:28:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NDc1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NjAwNw==", "url": "https://github.com/openhab/openhab-addons/pull/7741#discussion_r429476007", "bodyText": "One thing to note, if in.read returns a -1 here, which would indicate the end of the stream, then this code turns into a busy loop.\nThere are two ways you can fix this:\nIf the calling code is expected to handle an eof then you could just break out of the loop and return -1 to the caller.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        len = in.read(b, offset, readSize);\n          \n          \n            \n                        len = in.read(b, offset, readSize);\n          \n          \n            \n                        if(len == -1){\n          \n          \n            \n                            break; \n          \n          \n            \n                        }\n          \n      \n    \n    \n  \n\nIf there is no expectation for the caller to handle a return value of -1, then I suggest throwing an exception instead.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        len = in.read(b, offset, readSize);\n          \n          \n            \n                        len = in.read(b, offset, readSize);\n          \n          \n            \n                        if(len == -1){\n          \n          \n            \n                            throw new EOFException();\n          \n          \n            \n                        }", "author": "cpmeister", "createdAt": "2020-05-22T22:15:03Z", "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/driver/IOStream.java", "diffHunk": "@@ -51,20 +55,12 @@ public void stop() {\n      * @param readSize size to read\n      * @return number of bytes read\n      */\n-    public int read(byte[] b, int offset, int readSize) throws InterruptedException {\n+    public int read(byte[] b, int offset, int readSize) throws InterruptedException, IOException {\n         int len = 0;\n         while (!stopped && len < 1) {\n-            try {\n-                len = in.read(b, offset, readSize);\n-                if (Thread.interrupted()) {\n-                    throw new InterruptedException();\n-                }\n-            } catch (IOException e) {\n-                logger.trace(\"got exception while reading: {}\", e.getMessage());\n-                while (!stopped && !reconnect()) {\n-                    logger.trace(\"sleeping before reconnecting\");\n-                    Thread.sleep(10000);\n-                }\n+            len = in.read(b, offset, readSize);", "originalCommit": "ed437e5912b51a559d01886ee7b24c5cae55ddf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4NzkyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7741#discussion_r429487929", "bodyText": "Nice catch, I'm going to have it throw an EOFException. It's been this way for years.", "author": "robnielsen", "createdAt": "2020-05-22T23:26:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NjAwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUxMjM4MA==", "url": "https://github.com/openhab/openhab-addons/pull/7741#discussion_r429512380", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    disconnected.getAndSet(false);\n          \n          \n            \n                    disconnected.set(false);", "author": "cpmeister", "createdAt": "2020-05-23T04:16:30Z", "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/driver/Port.java", "diffHunk": "@@ -188,7 +189,7 @@ public void start() {\n         }\n \n         running = true;\n-        disconnected = false;\n+        disconnected.getAndSet(false);", "originalCommit": "c2e3dc465ef2be0fdbee168d9eca58ca7f42a0c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUzOTA0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7741#discussion_r429539042", "bodyText": "done", "author": "robnielsen", "createdAt": "2020-05-23T11:48:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUxMjM4MA=="}], "type": "inlineReview"}, {"oid": "4e29da11d07b8bf66ca59360179e0db61e721735", "url": "https://github.com/openhab/openhab-addons/commit/4e29da11d07b8bf66ca59360179e0db61e721735", "message": "[insteon] improve reconnection logic\n\nSigned-off-by: Rob Nielsen <rob.nielsen@yahoo.com>", "committedDate": "2020-05-23T11:53:17Z", "type": "commit"}]}