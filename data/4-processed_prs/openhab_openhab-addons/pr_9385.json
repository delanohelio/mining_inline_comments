{"pr_number": 9385, "pr_title": "[atlona] Add support for the AT-PRO3HD66M", "pr_createdAt": "2020-12-15T01:37:25Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/9385", "timeline": [{"oid": "d1bd0c47ab2e8fc2baf620113fc2024360fcb17f", "url": "https://github.com/openhab/openhab-addons/commit/d1bd0c47ab2e8fc2baf620113fc2024360fcb17f", "message": "Add support for the AT-PRO3HD66M\n\nSigned-off-by: Michael Lobstein <michael.lobstein@gmail.com>", "committedDate": "2020-12-15T01:19:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODUyNjQ1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9385#discussion_r548526456", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections\n          \n          \n            \n                        .unmodifiableSet(Stream.of(THING_TYPE_PRO3_44M, THING_TYPE_PRO3_66M, THING_TYPE_PRO3_88M,\n          \n          \n            \n                                THING_TYPE_PRO3_1616M, THING_TYPE_PRO3HD_66M).collect(Collectors.toSet()));\n          \n          \n            \n                private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Set.of(THING_TYPE_PRO3_44M, THING_TYPE_PRO3_66M, THING_TYPE_PRO3_88M,THING_TYPE_PRO3_1616M, THING_TYPE_PRO3HD_66M);", "author": "J-N-K", "createdAt": "2020-12-24T13:10:57Z", "path": "bundles/org.openhab.binding.atlona/src/main/java/org/openhab/binding/atlona/internal/AtlonaHandlerFactory.java", "diffHunk": "@@ -44,9 +45,9 @@\n     /**\n      * The set of supported Atlona products\n      */\n-    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.unmodifiableSet(\n-            Stream.of(THING_TYPE_PRO3_44M, THING_TYPE_PRO3_66M, THING_TYPE_PRO3_88M, THING_TYPE_PRO3_1616M)\n-                    .collect(Collectors.toSet()));\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections\n+            .unmodifiableSet(Stream.of(THING_TYPE_PRO3_44M, THING_TYPE_PRO3_66M, THING_TYPE_PRO3_88M,\n+                    THING_TYPE_PRO3_1616M, THING_TYPE_PRO3HD_66M).collect(Collectors.toSet()));", "originalCommit": "d1bd0c47ab2e8fc2baf620113fc2024360fcb17f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODU2MTE5NA==", "url": "https://github.com/openhab/openhab-addons/pull/9385#discussion_r548561194", "bodyText": "fixed for all", "author": "mlobstein", "createdAt": "2020-12-24T15:33:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODUyNjQ1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODUyNjYzNg==", "url": "https://github.com/openhab/openhab-addons/pull/9385#discussion_r548526636", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                Collections.unmodifiableSet(Stream.of(6, 8).collect(Collectors.toSet())), true));\n          \n          \n            \n                              Set.of(6, 8), true));\n          \n      \n    \n    \n  \n\nalso below", "author": "J-N-K", "createdAt": "2020-12-24T13:11:52Z", "path": "bundles/org.openhab.binding.atlona/src/main/java/org/openhab/binding/atlona/internal/AtlonaHandlerFactory.java", "diffHunk": "@@ -65,30 +66,30 @@ public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n      */\n     @Override\n     protected ThingHandler createHandler(Thing thing) {\n-        if (thing == null) {\n-            logger.error(\"createHandler was given a null thing!\");\n-            return null;\n-        }\n-\n         ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n \n         if (thingTypeUID.equals(THING_TYPE_PRO3_44M)) {\n-            return new AtlonaPro3Handler(thing, new AtlonaPro3Capabilities(5, 3, Collections.singleton(5)));\n+            return new AtlonaPro3Handler(thing, new AtlonaPro3Capabilities(5, 3, Collections.singleton(5), true));\n         }\n \n         if (thingTypeUID.equals(THING_TYPE_PRO3_66M)) {\n             return new AtlonaPro3Handler(thing, new AtlonaPro3Capabilities(8, 4,\n-                    Collections.unmodifiableSet(Stream.of(6, 8).collect(Collectors.toSet()))));\n+                    Collections.unmodifiableSet(Stream.of(6, 8).collect(Collectors.toSet())), true));", "originalCommit": "d1bd0c47ab2e8fc2baf620113fc2024360fcb17f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODUyNzczNg==", "url": "https://github.com/openhab/openhab-addons/pull/9385#discussion_r548527736", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String loginUHD() throws Exception {\n          \n          \n            \n                String loginUHD() throws IOException {", "author": "J-N-K", "createdAt": "2020-12-24T13:16:10Z", "path": "bundles/org.openhab.binding.atlona/src/main/java/org/openhab/binding/atlona/internal/pro3/AtlonaPro3PortocolHandler.java", "diffHunk": "@@ -178,7 +187,7 @@\n      * @return a null if logged in successfully (or if switch didn't require login). Non-null if an exception occurred.\n      * @throws IOException an IO exception occurred during login\n      */\n-    String login() throws Exception {\n+    String loginUHD() throws Exception {", "originalCommit": "d1bd0c47ab2e8fc2baf620113fc2024360fcb17f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODUyNzgwNg==", "url": "https://github.com/openhab/openhab-addons/pull/9385#discussion_r548527806", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String loginHD() throws Exception {\n          \n          \n            \n                String loginHD() throws IOException {", "author": "J-N-K", "createdAt": "2020-12-24T13:16:25Z", "path": "bundles/org.openhab.binding.atlona/src/main/java/org/openhab/binding/atlona/internal/pro3/AtlonaPro3PortocolHandler.java", "diffHunk": "@@ -280,6 +289,94 @@ String login() throws Exception {\n         return \"Password was invalid - please check your atlona setup\";\n     }\n \n+    /**\n+     * Attempts to log into the older HD model switches using a slightly different protocol\n+     *\n+     * @return a null if logged in successfully (or if switch didn't require login). Non-null if an exception occurred.\n+     * @throws IOException an IO exception occurred during login\n+     */\n+    String loginHD() throws Exception {", "originalCommit": "d1bd0c47ab2e8fc2baf620113fc2024360fcb17f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODUyODczNQ==", "url": "https://github.com/openhab/openhab-addons/pull/9385#discussion_r548528735", "bodyText": "This whole method looks very much the same as loginHD. Do you think it is possible to have a common login(boolean isUHD) whis is called from loginHD and loginUHD and takes care of the differences?", "author": "J-N-K", "createdAt": "2020-12-24T13:20:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODUyNzgwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODU2MzU0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9385#discussion_r548563542", "bodyText": "I tried to do it in one method but the logic was complicated. I do not have the other model to test with so I decided to make a separate method to avoid breaking the core functionality of the binding.", "author": "mlobstein", "createdAt": "2020-12-24T15:37:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODUyNzgwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg3MzQyMw==", "url": "https://github.com/openhab/openhab-addons/pull/9385#discussion_r548873423", "bodyText": "ok", "author": "J-N-K", "createdAt": "2020-12-25T13:35:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODUyNzgwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODUyODA5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9385#discussion_r548528091", "bodyText": "Please do not catch Exception. I assume IOException is enough. Catching Exception also catches NPE and hides programming errors.", "author": "J-N-K", "createdAt": "2020-12-24T13:17:35Z", "path": "bundles/org.openhab.binding.atlona/src/main/java/org/openhab/binding/atlona/internal/pro3/AtlonaPro3PortocolHandler.java", "diffHunk": "@@ -192,7 +201,7 @@ String login() throws Exception {\n         try {\n             response = callback.getResponse();\n             if (!response.equals(\"\")) {\n-                logger.info(\"Altona protocol violation - didn't start with an inital empty response: '{}'\", response);\n+                logger.debug(\"Altona protocol violation - didn't start with an inital empty response: '{}'\", response);\n             }\n         } catch (Exception e) {", "originalCommit": "d1bd0c47ab2e8fc2baf620113fc2024360fcb17f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODU2OTMwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/9385#discussion_r548569305", "bodyText": "I completely agree. However in this instance, the exception being caught is explicitly thrown as Exception in getResponse() on lines 1260 & 1262. I could change those to be IOException or a custom exception. What do you think?", "author": "mlobstein", "createdAt": "2020-12-24T15:45:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODUyODA5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg3MzQwMg==", "url": "https://github.com/openhab/openhab-addons/pull/9385#discussion_r548873402", "bodyText": "I just looked at the rest of the code. This should never have been merged. Removing the Exception here will require some bigger refactoring, which is clearly out of scope here. Leave it as is.", "author": "J-N-K", "createdAt": "2020-12-25T13:34:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODUyODA5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODUyODExNA==", "url": "https://github.com/openhab/openhab-addons/pull/9385#discussion_r548528114", "bodyText": "see above", "author": "J-N-K", "createdAt": "2020-12-24T13:17:44Z", "path": "bundles/org.openhab.binding.atlona/src/main/java/org/openhab/binding/atlona/internal/pro3/AtlonaPro3PortocolHandler.java", "diffHunk": "@@ -280,6 +289,94 @@ String login() throws Exception {\n         return \"Password was invalid - please check your atlona setup\";\n     }\n \n+    /**\n+     * Attempts to log into the older HD model switches using a slightly different protocol\n+     *\n+     * @return a null if logged in successfully (or if switch didn't require login). Non-null if an exception occurred.\n+     * @throws IOException an IO exception occurred during login\n+     */\n+    String loginHD() throws Exception {\n+        logger.debug(\"Logging into atlona switch\");\n+        // Void to make sure we retrieve them\n+        modelType = null;\n+        version = null;\n+\n+        NoDispatchingCallback callback = new NoDispatchingCallback();\n+        session.addListener(callback);\n+\n+        // Burn the initial (empty) return\n+        String response;\n+        try {\n+            response = callback.getResponse();\n+            if (!response.equals(\"\")) {\n+                logger.debug(\"Altona protocol violation - didn't start with an inital empty response: '{}'\", response);\n+            }\n+        } catch (Exception e) {", "originalCommit": "d1bd0c47ab2e8fc2baf620113fc2024360fcb17f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ce62c33e2a171977fc187156b675157b6d58ca90", "url": "https://github.com/openhab/openhab-addons/commit/ce62c33e2a171977fc187156b675157b6d58ca90", "message": "review changes\n\nSigned-off-by: Michael Lobstein <michael.lobstein@gmail.com>", "committedDate": "2020-12-24T15:30:29Z", "type": "commit"}]}