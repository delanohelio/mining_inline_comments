{"pr_number": 9021, "pr_title": "[epsonprojector] Update epsonprojector binding for OH3", "pr_createdAt": "2020-11-14T06:19:55Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/9021", "timeline": [{"oid": "d913c6ed479b8cf0ee46ab8c77241f2b5e158f6f", "url": "https://github.com/openhab/openhab-addons/commit/d913c6ed479b8cf0ee46ab8c77241f2b5e158f6f", "message": "baseline EpsonProjector code from ysc\n\nSigned-off-by: Michael Lobstein <michael.lobstein@gmail.com>", "committedDate": "2020-11-11T00:44:36Z", "type": "commit"}, {"oid": "59557e21c10baa1db4a101c1607ac34c29e5b150", "url": "https://github.com/openhab/openhab-addons/commit/59557e21c10baa1db4a101c1607ac34c29e5b150", "message": "Improvements for OH3\n\nSigned-off-by: Michael Lobstein <michael.lobstein@gmail.com>", "committedDate": "2020-11-12T01:26:00Z", "type": "commit"}, {"oid": "4a08a941c2f027a86bcf6b127a4c5fdec7b02081", "url": "https://github.com/openhab/openhab-addons/commit/4a08a941c2f027a86bcf6b127a4c5fdec7b02081", "message": "Improvements for OH3\n\nSigned-off-by: Michael Lobstein <michael.lobstein@gmail.com>", "committedDate": "2020-11-13T06:25:45Z", "type": "commit"}, {"oid": "b02daec838aacc2b046d4c164db16717e71ad763", "url": "https://github.com/openhab/openhab-addons/commit/b02daec838aacc2b046d4c164db16717e71ad763", "message": "Finish epsonprojector binding for OH3\n\nSigned-off-by: Michael Lobstein <michael.lobstein@gmail.com>", "committedDate": "2020-11-14T06:09:20Z", "type": "commit"}, {"oid": "5f4d6601c1e8c1861fe2236a228665b8364dbf45", "url": "https://github.com/openhab/openhab-addons/commit/5f4d6601c1e8c1861fe2236a228665b8364dbf45", "message": "Update a couple enums\n\nSigned-off-by: Michael Lobstein <michael.lobstein@gmail.com>", "committedDate": "2020-11-16T04:50:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk2NTg5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r527965896", "bodyText": "This file is generated automatically by maven and should not be part of the PR.", "author": "fwolter", "createdAt": "2020-11-20T20:57:00Z", "path": "bundles/org.openhab.binding.epsonprojector/.classpath", "diffHunk": "@@ -0,0 +1,33 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "originalCommit": "5f4d6601c1e8c1861fe2236a228665b8364dbf45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk2NTk0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r527965945", "bodyText": "This file is generated automatically by maven and should not be part of the PR.", "author": "fwolter", "createdAt": "2020-11-20T20:57:09Z", "path": "bundles/org.openhab.binding.epsonprojector/.project", "diffHunk": "@@ -0,0 +1,23 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "originalCommit": "5f4d6601c1e8c1861fe2236a228665b8364dbf45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3MjE4OA==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r527972188", "bodyText": "This will schedule a periodic task. I think your intention is to schedule an one-shot?", "author": "fwolter", "createdAt": "2020-11-20T21:12:24Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/EpsonProjectorDevice.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorConnector;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorDefaultConnector;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorSerialConnector;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorTcpConnector;\n+import org.openhab.binding.epsonprojector.internal.enums.AspectRatio;\n+import org.openhab.binding.epsonprojector.internal.enums.Background;\n+import org.openhab.binding.epsonprojector.internal.enums.ColorMode;\n+import org.openhab.binding.epsonprojector.internal.enums.ErrorMessage;\n+import org.openhab.binding.epsonprojector.internal.enums.Gamma;\n+import org.openhab.binding.epsonprojector.internal.enums.Luminance;\n+import org.openhab.binding.epsonprojector.internal.enums.PowerStatus;\n+import org.openhab.binding.epsonprojector.internal.enums.Switch;\n+import org.openhab.core.common.ThreadPoolManager;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Provide high level interface to Epson projector.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ * @author Yannick Schaus - Refactoring\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorDevice {\n+    private static final String THING_HANDLER_THREADPOOL_NAME = \"thingHandler\";\n+\n+    protected final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(THING_HANDLER_THREADPOOL_NAME);\n+\n+    private static final int[] MAP64 = new int[] { 0, 3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51, 55, 59, 63, 66,\n+            70, 74, 78, 82, 86, 90, 94, 98, 102, 106, 110, 114, 118, 122, 126, 129, 133, 137, 141, 145, 149, 153, 157,\n+            161, 165, 169, 173, 177, 181, 185, 189, 192, 196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 236, 240,\n+            244, 248, 252 };\n+\n+    private static final int[] MAP60 = new int[] { 0, 4, 8, 12, 16, 20, 25, 29, 33, 37, 41, 46, 50, 54, 58, 62, 67, 71,\n+            75, 79, 83, 88, 92, 96, 100, 104, 109, 113, 117, 121, 125, 130, 134, 138, 142, 146, 151, 155, 159, 163, 167,\n+            172, 176, 180, 184, 188, 193, 197, 201, 205, 209, 214, 218, 222, 226, 230, 235, 239, 243, 247, 251 };\n+\n+    private static final int[] MAP49 = new int[] { 0, 5, 10, 15, 20, 25, 30, 35, 40, 46, 51, 56, 61, 66, 71, 76, 81, 87,\n+            92, 97, 102, 107, 112, 117, 122, 128, 133, 138, 143, 148, 153, 158, 163, 168, 174, 179, 184, 189, 194, 199,\n+            204, 209, 215, 220, 225, 230, 235, 240, 245, 250 };\n+\n+    private static final int[] MAP48 = new int[] { 0, 5, 10, 15, 20, 26, 31, 36, 41, 47, 52, 57, 62, 67, 73, 78, 83, 88,\n+            94, 99, 104, 109, 114, 120, 125, 130, 135, 141, 146, 151, 156, 161, 167, 172, 177, 182, 188, 193, 198, 203,\n+            208, 214, 219, 224, 229, 235, 240, 245, 250 };\n+\n+    private static final int[] MAP20 = new int[] { 0, 12, 24, 36, 48, 60, 73, 85, 97, 109, 121, 134, 146, 158, 170, 182,\n+            195, 207, 219, 231, 243 };\n+\n+    private static final int[] MAP18 = new int[] { 0, 13, 26, 40, 53, 67, 80, 94, 107, 121, 134, 148, 161, 175, 188,\n+            202, 215, 229, 242 };\n+\n+    private static final int[] MAP_COLOR_TEMP = new int[] { 0, 25, 51, 76, 102, 128, 153, 179, 204, 230 };\n+    private static final int[] MAP_FLESH_COLOR = new int[] { 0, 36, 73, 109, 146, 182, 219 };\n+\n+    private static final int DEFAULT_TIMEOUT = 5 * 1000;\n+    private static final int POWER_ON_TIMEOUT = 100 * 1000;\n+    private static final int POWER_OFF_TIMEOUT = 130 * 1000;\n+\n+    private static final String ON = \"ON\";\n+    private static final String ERR = \"ERR\";\n+\n+    private Logger logger = LoggerFactory.getLogger(EpsonProjectorDevice.class);\n+\n+    private EpsonProjectorConnector connection;\n+    private long lastLampQry = 0;\n+    private int cachedLampHours = 0;\n+    private boolean connected = false;\n+    private boolean ready = false;\n+\n+    public EpsonProjectorDevice(SerialPortManager serialPortManager, String serialPort) {\n+        connection = new EpsonProjectorSerialConnector(serialPortManager, serialPort);\n+        ready = true;\n+    }\n+\n+    public EpsonProjectorDevice(String ip, int port) {\n+        connection = new EpsonProjectorTcpConnector(ip, port);\n+        ready = true;\n+    }\n+\n+    public EpsonProjectorDevice() {\n+        connection = new EpsonProjectorDefaultConnector();\n+        ready = false;\n+    }\n+\n+    public boolean isReady() {\n+        return ready;\n+    }\n+\n+    private synchronized @Nullable String sendQuery(String query, int timeout)\n+            throws EpsonProjectorCommandException, EpsonProjectorException {\n+        logger.debug(\"Query: '{}'\", query);\n+        String response = connection.sendMessage(query, timeout);\n+\n+        if (response.length() == 0) {\n+            throw new EpsonProjectorException(\"No response received\");\n+        }\n+\n+        response = response.replace(\"\\r:\", \"\");\n+        logger.debug(\"Response: '{}'\", response);\n+\n+        if (ERR.equals(response)) {\n+            throw new EpsonProjectorCommandException(\"Error response received for command: \" + query);\n+        }\n+\n+        if (\"PWR OFF\".equals(query) && \":\".equals(response)) {\n+            // When PWR OFF command is sent, next command can be sent 10 seconds after the colon is received\n+            logger.debug(\"Refusing further commands for 10 seconds to power OFF completion\");\n+            ready = false;\n+            scheduler.scheduleWithFixedDelay(() -> {\n+                ready = true;\n+            }, 0, 10000, TimeUnit.MILLISECONDS);", "originalCommit": "5f4d6601c1e8c1861fe2236a228665b8364dbf45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA1OTkwMA==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r528059900", "bodyText": "It needs to poll the projector continuously to detect changes in state from using the physical remote control.", "author": "mlobstein", "createdAt": "2020-11-21T02:59:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3MjE4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMwMTU0OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r528301549", "bodyText": "Then, you need to cancel the task when the Thing handler's dispose() is called.", "author": "fwolter", "createdAt": "2020-11-22T08:31:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3MjE4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIzMDg2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r532230869", "bodyText": "My bad,  I was looking at the wrong scheduler call.", "author": "mlobstein", "createdAt": "2020-11-29T16:12:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3MjE4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3Mzg0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r527973847", "bodyText": "You could utilize ExpiringCache here.", "author": "fwolter", "createdAt": "2020-11-20T21:16:26Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/EpsonProjectorDevice.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorConnector;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorDefaultConnector;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorSerialConnector;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorTcpConnector;\n+import org.openhab.binding.epsonprojector.internal.enums.AspectRatio;\n+import org.openhab.binding.epsonprojector.internal.enums.Background;\n+import org.openhab.binding.epsonprojector.internal.enums.ColorMode;\n+import org.openhab.binding.epsonprojector.internal.enums.ErrorMessage;\n+import org.openhab.binding.epsonprojector.internal.enums.Gamma;\n+import org.openhab.binding.epsonprojector.internal.enums.Luminance;\n+import org.openhab.binding.epsonprojector.internal.enums.PowerStatus;\n+import org.openhab.binding.epsonprojector.internal.enums.Switch;\n+import org.openhab.core.common.ThreadPoolManager;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Provide high level interface to Epson projector.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ * @author Yannick Schaus - Refactoring\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorDevice {\n+    private static final String THING_HANDLER_THREADPOOL_NAME = \"thingHandler\";\n+\n+    protected final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(THING_HANDLER_THREADPOOL_NAME);\n+\n+    private static final int[] MAP64 = new int[] { 0, 3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51, 55, 59, 63, 66,\n+            70, 74, 78, 82, 86, 90, 94, 98, 102, 106, 110, 114, 118, 122, 126, 129, 133, 137, 141, 145, 149, 153, 157,\n+            161, 165, 169, 173, 177, 181, 185, 189, 192, 196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 236, 240,\n+            244, 248, 252 };\n+\n+    private static final int[] MAP60 = new int[] { 0, 4, 8, 12, 16, 20, 25, 29, 33, 37, 41, 46, 50, 54, 58, 62, 67, 71,\n+            75, 79, 83, 88, 92, 96, 100, 104, 109, 113, 117, 121, 125, 130, 134, 138, 142, 146, 151, 155, 159, 163, 167,\n+            172, 176, 180, 184, 188, 193, 197, 201, 205, 209, 214, 218, 222, 226, 230, 235, 239, 243, 247, 251 };\n+\n+    private static final int[] MAP49 = new int[] { 0, 5, 10, 15, 20, 25, 30, 35, 40, 46, 51, 56, 61, 66, 71, 76, 81, 87,\n+            92, 97, 102, 107, 112, 117, 122, 128, 133, 138, 143, 148, 153, 158, 163, 168, 174, 179, 184, 189, 194, 199,\n+            204, 209, 215, 220, 225, 230, 235, 240, 245, 250 };\n+\n+    private static final int[] MAP48 = new int[] { 0, 5, 10, 15, 20, 26, 31, 36, 41, 47, 52, 57, 62, 67, 73, 78, 83, 88,\n+            94, 99, 104, 109, 114, 120, 125, 130, 135, 141, 146, 151, 156, 161, 167, 172, 177, 182, 188, 193, 198, 203,\n+            208, 214, 219, 224, 229, 235, 240, 245, 250 };\n+\n+    private static final int[] MAP20 = new int[] { 0, 12, 24, 36, 48, 60, 73, 85, 97, 109, 121, 134, 146, 158, 170, 182,\n+            195, 207, 219, 231, 243 };\n+\n+    private static final int[] MAP18 = new int[] { 0, 13, 26, 40, 53, 67, 80, 94, 107, 121, 134, 148, 161, 175, 188,\n+            202, 215, 229, 242 };\n+\n+    private static final int[] MAP_COLOR_TEMP = new int[] { 0, 25, 51, 76, 102, 128, 153, 179, 204, 230 };\n+    private static final int[] MAP_FLESH_COLOR = new int[] { 0, 36, 73, 109, 146, 182, 219 };\n+\n+    private static final int DEFAULT_TIMEOUT = 5 * 1000;\n+    private static final int POWER_ON_TIMEOUT = 100 * 1000;\n+    private static final int POWER_OFF_TIMEOUT = 130 * 1000;\n+\n+    private static final String ON = \"ON\";\n+    private static final String ERR = \"ERR\";\n+\n+    private Logger logger = LoggerFactory.getLogger(EpsonProjectorDevice.class);\n+\n+    private EpsonProjectorConnector connection;\n+    private long lastLampQry = 0;\n+    private int cachedLampHours = 0;\n+    private boolean connected = false;\n+    private boolean ready = false;\n+\n+    public EpsonProjectorDevice(SerialPortManager serialPortManager, String serialPort) {\n+        connection = new EpsonProjectorSerialConnector(serialPortManager, serialPort);\n+        ready = true;\n+    }\n+\n+    public EpsonProjectorDevice(String ip, int port) {\n+        connection = new EpsonProjectorTcpConnector(ip, port);\n+        ready = true;\n+    }\n+\n+    public EpsonProjectorDevice() {\n+        connection = new EpsonProjectorDefaultConnector();\n+        ready = false;\n+    }\n+\n+    public boolean isReady() {\n+        return ready;\n+    }\n+\n+    private synchronized @Nullable String sendQuery(String query, int timeout)\n+            throws EpsonProjectorCommandException, EpsonProjectorException {\n+        logger.debug(\"Query: '{}'\", query);\n+        String response = connection.sendMessage(query, timeout);\n+\n+        if (response.length() == 0) {\n+            throw new EpsonProjectorException(\"No response received\");\n+        }\n+\n+        response = response.replace(\"\\r:\", \"\");\n+        logger.debug(\"Response: '{}'\", response);\n+\n+        if (ERR.equals(response)) {\n+            throw new EpsonProjectorCommandException(\"Error response received for command: \" + query);\n+        }\n+\n+        if (\"PWR OFF\".equals(query) && \":\".equals(response)) {\n+            // When PWR OFF command is sent, next command can be sent 10 seconds after the colon is received\n+            logger.debug(\"Refusing further commands for 10 seconds to power OFF completion\");\n+            ready = false;\n+            scheduler.scheduleWithFixedDelay(() -> {\n+                ready = true;\n+            }, 0, 10000, TimeUnit.MILLISECONDS);\n+        }\n+\n+        return response;\n+    }\n+\n+    private String splitResponse(@Nullable String response) throws EpsonProjectorException {\n+        if (response != null && !\"\".equals(response)) {\n+            String[] pieces = response.split(\"=\");\n+\n+            if (pieces.length < 2) {\n+                throw new EpsonProjectorException(\"Invalid response from projector: \" + response);\n+            }\n+\n+            return pieces[1].trim();\n+        } else {\n+            throw new EpsonProjectorException(\"No response received\");\n+        }\n+    }\n+\n+    protected void sendCommand(String command, int timeout)\n+            throws EpsonProjectorCommandException, EpsonProjectorException {\n+        sendQuery(command, timeout);\n+    }\n+\n+    protected void sendCommand(String command) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        sendCommand(command, DEFAULT_TIMEOUT);\n+    }\n+\n+    protected int queryInt(String query, int timeout, int radix)\n+            throws EpsonProjectorCommandException, EpsonProjectorException {\n+        String response = sendQuery(query, timeout);\n+\n+        String str = splitResponse(response);\n+\n+        // if the response has two number groups, get the first one (Aspect Ratio does this)\n+        if (str.contains(\" \")) {\n+            String[] subStr = str.split(\" \");\n+            str = subStr[0];\n+        }\n+\n+        return Integer.parseInt(str, radix);\n+    }\n+\n+    protected int queryInt(String query, int timeout) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        return queryInt(query, timeout, 10);\n+    }\n+\n+    protected int queryInt(String query) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        return queryInt(query, DEFAULT_TIMEOUT, 10);\n+    }\n+\n+    protected int queryHexInt(String query, int timeout)\n+            throws EpsonProjectorCommandException, EpsonProjectorException {\n+        return queryInt(query, timeout, 16);\n+    }\n+\n+    protected int queryHexInt(String query) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        return queryInt(query, DEFAULT_TIMEOUT, 16);\n+    }\n+\n+    protected String queryString(String query) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        String response = sendQuery(query, DEFAULT_TIMEOUT);\n+        return splitResponse(response);\n+    }\n+\n+    public void connect() throws EpsonProjectorException {\n+        connection.connect();\n+        connected = true;\n+    }\n+\n+    public void disconnect() throws EpsonProjectorException {\n+        connection.disconnect();\n+        connected = false;\n+    }\n+\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    /*\n+     * Power\n+     */\n+    public PowerStatus getPowerStatus() throws EpsonProjectorCommandException, EpsonProjectorException {\n+        int val = queryInt(\"PWR?\");\n+        return PowerStatus.forValue(val);\n+    }\n+\n+    public void setPower(Switch value) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        sendCommand(String.format(\"PWR %s\", value.name()), value == Switch.ON ? POWER_ON_TIMEOUT : POWER_OFF_TIMEOUT);\n+    }\n+\n+    /*\n+     * Key code\n+     */\n+    public void sendKeyCode(int value) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        sendCommand(String.format(\"KEY %02X\", value));\n+    }\n+\n+    /*\n+     * Vertical Keystone\n+     */\n+    public int getVerticalKeystone() throws EpsonProjectorCommandException, EpsonProjectorException {\n+        int vkey = queryInt(\"VKEYSTONE?\");\n+        for (int i = 0; i < MAP60.length; i++) {\n+            if (vkey == MAP60[i]) {\n+                return i - 30;\n+            }\n+        }\n+        return 0;\n+    }\n+\n+    public void setVerticalKeystone(int value) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        value = value + 30;\n+        if (value >= 0 && value <= 60) {\n+            sendCommand(String.format(\"VKEYSTONE %d\", MAP60[value]));\n+        }\n+    }\n+\n+    /*\n+     * Horizontal Keystone\n+     */\n+    public int getHorizontalKeystone() throws EpsonProjectorCommandException, EpsonProjectorException {\n+        int hkey = queryInt(\"HKEYSTONE?\");\n+        for (int i = 0; i < MAP60.length; i++) {\n+            if (hkey == MAP60[i]) {\n+                return i - 30;\n+            }\n+        }\n+        return 0;\n+    }\n+\n+    public void setHorizontalKeystone(int value) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        value = value + 30;\n+        if (value >= 0 && value <= 60) {\n+            sendCommand(String.format(\"HKEYSTONE %d\", MAP60[value]));\n+        }\n+    }\n+\n+    /*\n+     * Auto Keystone\n+     */\n+\n+    public Switch getAutoKeystone() throws EpsonProjectorCommandException, EpsonProjectorException {\n+        String val = queryString(\"AUTOKEYSTONE?\");\n+        return val.equals(ON) ? Switch.ON : Switch.OFF;\n+    }\n+\n+    public void setAutoKeystone(Switch value) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        sendCommand(String.format(\"AUTOKEYSTONE %s\", value.name()), DEFAULT_TIMEOUT);\n+    }\n+\n+    /*\n+     * Freeze\n+     */\n+    public Switch getFreeze() throws EpsonProjectorCommandException, EpsonProjectorException {\n+        String val = queryString(\"FREEZE?\");\n+        return val.equals(ON) ? Switch.ON : Switch.OFF;\n+    }\n+\n+    public void setFreeze(Switch value) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        sendCommand(String.format(\"FREEZE %s\", value.name()), DEFAULT_TIMEOUT);\n+    }\n+\n+    /*\n+     * Aspect Ratio\n+     */\n+    public AspectRatio getAspectRatio() throws EpsonProjectorCommandException, EpsonProjectorException {\n+        int val = queryHexInt(\"ASPECT?\");\n+        return AspectRatio.forValue(val);\n+    }\n+\n+    public void setAspectRatio(AspectRatio value) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        sendCommand(String.format(\"ASPECT %02X\", value.toInt()));\n+    }\n+\n+    /*\n+     * Luminance\n+     */\n+    public Luminance getLuminance() throws EpsonProjectorCommandException, EpsonProjectorException {\n+        int val = queryHexInt(\"LUMINANCE?\");\n+        return Luminance.forValue(val);\n+    }\n+\n+    public void setLuminance(Luminance value) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        sendCommand(String.format(\"LUMINANCE %02X\", value.toInt()));\n+    }\n+\n+    /*\n+     * Source\n+     */\n+    public String getSource() throws EpsonProjectorCommandException, EpsonProjectorException {\n+        return queryString(\"SOURCE?\");\n+    }\n+\n+    public void setSource(String value) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        sendCommand(String.format(\"SOURCE %s\", value));\n+    }\n+\n+    /*\n+     * Brightness\n+     */\n+    public int getBrightness() throws EpsonProjectorCommandException, EpsonProjectorException {\n+        int brt = queryInt(\"BRIGHT?\");\n+        for (int i = 0; i < MAP48.length; i++) {\n+            if (brt == MAP48[i]) {\n+                return i - 24;\n+            }\n+        }\n+        return 0;\n+    }\n+\n+    public void setBrightness(int value) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        value = value + 24;\n+        if (value >= 0 && value <= 48) {\n+            sendCommand(String.format(\"BRIGHT %d\", MAP48[value]));\n+        }\n+    }\n+\n+    /*\n+     * Contrast\n+     */\n+    public int getContrast() throws EpsonProjectorCommandException, EpsonProjectorException {\n+        int con = queryInt(\"CONTRAST?\");\n+        for (int i = 0; i < MAP48.length; i++) {\n+            if (con == MAP48[i]) {\n+                return i - 24;\n+            }\n+        }\n+        return 0;\n+    }\n+\n+    public void setContrast(int value) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        value = value + 24;\n+        if (value >= 0 && value <= 48) {\n+            sendCommand(String.format(\"CONTRAST %d\", MAP48[value]));\n+        }\n+    }\n+\n+    /*\n+     * Density\n+     */\n+    public int getDensity() throws EpsonProjectorCommandException, EpsonProjectorException {\n+        int den = queryInt(\"DENSITY?\");\n+        for (int i = 0; i < MAP64.length; i++) {\n+            if (den == MAP64[i]) {\n+                return i - 32;\n+            }\n+        }\n+        return 0;\n+    }\n+\n+    public void setDensity(int value) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        value = value + 32;\n+        if (value >= 0 && value <= 64) {\n+            sendCommand(String.format(\"DENSITY %d\", MAP64[value]));\n+        }\n+    }\n+\n+    /*\n+     * Tint\n+     */\n+    public int getTint() throws EpsonProjectorCommandException, EpsonProjectorException {\n+        int tint = queryInt(\"TINT?\");\n+        for (int i = 0; i < MAP64.length; i++) {\n+            if (tint == MAP64[i]) {\n+                return i - 32;\n+            }\n+        }\n+        return 0;\n+    }\n+\n+    public void setTint(int value) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        value = value + 32;\n+        if (value >= 0 && value <= 64) {\n+            sendCommand(String.format(\"TINT %d\", MAP64[value]));\n+        }\n+    }\n+\n+    /*\n+     * Color Temperature\n+     */\n+    public int getColorTemperature() throws EpsonProjectorCommandException, EpsonProjectorException {\n+        int ctemp = queryInt(\"CTEMP?\");\n+        for (int i = 0; i < MAP_COLOR_TEMP.length; i++) {\n+            if (ctemp == MAP_COLOR_TEMP[i]) {\n+                return i;\n+            }\n+        }\n+        return 0;\n+    }\n+\n+    public void setColorTemperature(int value) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        if (value >= 0 && value <= 9) {\n+            sendCommand(String.format(\"CTEMP %d\", MAP_COLOR_TEMP[value]));\n+        }\n+    }\n+\n+    /*\n+     * Flesh Color\n+     */\n+    public int getFleshColor() throws EpsonProjectorCommandException, EpsonProjectorException {\n+        int fclr = queryInt(\"FCOLOR?\");\n+        for (int i = 0; i < MAP_FLESH_COLOR.length; i++) {\n+            if (fclr == MAP_FLESH_COLOR[i]) {\n+                return i;\n+            }\n+        }\n+        return 0;\n+    }\n+\n+    public void setFleshColor(int value) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        if (value >= 0 && value <= 6) {\n+            sendCommand(String.format(\"FCOLOR %d\", MAP_FLESH_COLOR[value]));\n+        }\n+    }\n+\n+    /*\n+     * Color Mode\n+     */\n+    public ColorMode getColorMode() throws EpsonProjectorCommandException, EpsonProjectorException {\n+        int val = queryHexInt(\"CMODE?\");\n+        return ColorMode.forValue(val);\n+    }\n+\n+    public void setColorMode(ColorMode value) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        sendCommand(String.format(\"CMODE %02X\", value.toInt()));\n+    }\n+\n+    /*\n+     * Horizontal Position\n+     */\n+    public int getHorizontalPosition() throws EpsonProjectorCommandException, EpsonProjectorException {\n+        int hpos = queryInt(\"HPOS?\");\n+        for (int i = 0; i < MAP49.length; i++) {\n+            if (hpos == MAP49[i]) {\n+                return i - 23;\n+            }\n+        }\n+        return 0;\n+    }\n+\n+    public void setHorizontalPosition(int value) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        value = value + 23;\n+        if (value >= 0 && value <= 49) {\n+            sendCommand(String.format(\"HPOS %d\", MAP49[value]));\n+        }\n+    }\n+\n+    /*\n+     * Vertical Position\n+     */\n+    public int getVerticalPosition() throws EpsonProjectorCommandException, EpsonProjectorException {\n+        int vpos = queryInt(\"VPOS?\");\n+        for (int i = 0; i < MAP18.length; i++) {\n+            if (vpos == MAP18[i]) {\n+                return i - 8;\n+            }\n+        }\n+        return 0;\n+    }\n+\n+    public void setVerticalPosition(int value) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        value = value + 8;\n+        if (value >= 0 && value <= 18) {\n+            sendCommand(String.format(\"VPOS %d\", MAP18[value]));\n+        }\n+    }\n+\n+    /*\n+     * Gamma\n+     */\n+    public Gamma getGamma() throws EpsonProjectorCommandException, EpsonProjectorException {\n+        int val = queryHexInt(\"GAMMA?\");\n+        return Gamma.forValue(val);\n+    }\n+\n+    public void setGamma(Gamma value) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        sendCommand(String.format(\"GAMMA %02X\", value.toInt()));\n+    }\n+\n+    /*\n+     * Volume\n+     */\n+    public int getVolume() throws EpsonProjectorCommandException, EpsonProjectorException {\n+        int vol = queryInt(\"VOL?\");\n+        for (int i = 0; i < MAP20.length; i++) {\n+            if (vol == MAP20[i]) {\n+                return i;\n+            }\n+        }\n+        return 0;\n+    }\n+\n+    public void setVolume(int value) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        if (value >= 0 && value <= 20) {\n+            sendCommand(String.format(\"VOL %d\", MAP20[value]));\n+        }\n+    }\n+\n+    /*\n+     * AV Mute\n+     */\n+    public Switch getMute() throws EpsonProjectorCommandException, EpsonProjectorException {\n+        String val = queryString(\"MUTE?\");\n+        return val.equals(ON) ? Switch.ON : Switch.OFF;\n+    }\n+\n+    public void setMute(Switch value) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        sendCommand(String.format(\"MUTE %s\", value.name()));\n+    }\n+\n+    /*\n+     * Horizontal Reverse\n+     */\n+    public Switch getHorizontalReverse() throws EpsonProjectorCommandException, EpsonProjectorException {\n+        String val = queryString(\"HREVERSE?\");\n+        return val.equals(ON) ? Switch.ON : Switch.OFF;\n+    }\n+\n+    public void setHorizontalReverse(Switch value) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        sendCommand(String.format(\"HREVERSE %s\", value.name()));\n+    }\n+\n+    /*\n+     * Vertical Reverse\n+     */\n+    public Switch getVerticalReverse() throws EpsonProjectorCommandException, EpsonProjectorException {\n+        String val = queryString(\"VREVERSE?\");\n+        return val.equals(ON) ? Switch.ON : Switch.OFF;\n+    }\n+\n+    public void setVerticalReverse(Switch value) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        sendCommand(String.format(\"VREVERSE %s\", value.name()));\n+    }\n+\n+    /*\n+     * Background Select for AV Mute\n+     */\n+    public Background getBackground() throws EpsonProjectorCommandException, EpsonProjectorException {\n+        int val = queryHexInt(\"MSEL?\");\n+        return Background.forValue(val);\n+    }\n+\n+    public void setBackground(Background value) throws EpsonProjectorCommandException, EpsonProjectorException {\n+        sendCommand(String.format(\"MSEL %02X\", value.toInt()));\n+    }\n+\n+    /*\n+     * Lamp Time (hours)\n+     */\n+    public int getLampTime() throws EpsonProjectorCommandException, EpsonProjectorException {\n+        long current = System.currentTimeMillis();\n+\n+        // only do lamp time query once per ~5 minute interval\n+        if ((current - lastLampQry) > 297000) {\n+            cachedLampHours = queryInt(\"LAMP?\");\n+            lastLampQry = System.currentTimeMillis();\n+        }\n+        return cachedLampHours;", "originalCommit": "5f4d6601c1e8c1861fe2236a228665b8364dbf45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA1OTk0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r528059945", "bodyText": "done", "author": "mlobstein", "createdAt": "2020-11-21T02:59:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3Mzg0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3NjMwMg==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r527976302", "bodyText": "The name of the thread pool can change in the core. Then, this would create a new thread pool here. You could add the thing handler's scheduler as an argument to the constructor of this class.", "author": "fwolter", "createdAt": "2020-11-20T21:22:14Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/EpsonProjectorDevice.java", "diffHunk": "@@ -0,0 +1,609 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorConnector;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorDefaultConnector;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorSerialConnector;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorTcpConnector;\n+import org.openhab.binding.epsonprojector.internal.enums.AspectRatio;\n+import org.openhab.binding.epsonprojector.internal.enums.Background;\n+import org.openhab.binding.epsonprojector.internal.enums.ColorMode;\n+import org.openhab.binding.epsonprojector.internal.enums.ErrorMessage;\n+import org.openhab.binding.epsonprojector.internal.enums.Gamma;\n+import org.openhab.binding.epsonprojector.internal.enums.Luminance;\n+import org.openhab.binding.epsonprojector.internal.enums.PowerStatus;\n+import org.openhab.binding.epsonprojector.internal.enums.Switch;\n+import org.openhab.core.common.ThreadPoolManager;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Provide high level interface to Epson projector.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ * @author Yannick Schaus - Refactoring\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorDevice {\n+    private static final String THING_HANDLER_THREADPOOL_NAME = \"thingHandler\";\n+\n+    protected final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(THING_HANDLER_THREADPOOL_NAME);", "originalCommit": "5f4d6601c1e8c1861fe2236a228665b8364dbf45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA1OTk5OA==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r528059998", "bodyText": "done", "author": "mlobstein", "createdAt": "2020-11-21T03:00:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3NjMwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3NzU5OA==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r527977598", "bodyText": "This bug has been fixed. So, the workaround could be removed.", "author": "fwolter", "createdAt": "2020-11-20T21:24:34Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/connector/EpsonProjectorSerialConnector.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.connector;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorException;\n+import org.openhab.core.io.transport.serial.PortInUseException;\n+import org.openhab.core.io.transport.serial.SerialPort;\n+import org.openhab.core.io.transport.serial.SerialPortEvent;\n+import org.openhab.core.io.transport.serial.SerialPortEventListener;\n+import org.openhab.core.io.transport.serial.SerialPortIdentifier;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.openhab.core.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector for serial port communication.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorSerialConnector implements EpsonProjectorConnector, SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(EpsonProjectorSerialConnector.class);\n+    private final String serialPortName;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable InputStream in = null;\n+    private @Nullable OutputStream out = null;\n+    private @Nullable SerialPort serialPort = null;\n+\n+    public EpsonProjectorSerialConnector(SerialPortManager serialPortManager, String serialPort) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPort;\n+    }\n+\n+    @Override\n+    public void connect() throws EpsonProjectorException {\n+        try {\n+            logger.debug(\"Open connection to serial port '{}'\", serialPortName);\n+\n+            SerialPortIdentifier serialPortIdentifier = serialPortManager.getIdentifier(serialPortName);\n+\n+            if (serialPortIdentifier == null) {\n+                throw new IOException(\"Unknown serial port\");\n+            }\n+            SerialPort serialPort = serialPortIdentifier.open(this.getClass().getName(), 2000);\n+            serialPort.setSerialPortParams(9600, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);\n+            serialPort.enableReceiveThreshold(1);\n+            serialPort.disableReceiveTimeout();\n+\n+            InputStream in = serialPort.getInputStream();\n+            OutputStream out = serialPort.getOutputStream();\n+\n+            if (in != null && out != null) {\n+                out.flush();\n+                if (in.markSupported()) {\n+                    in.reset();\n+                }\n+\n+                // RXTX serial port library causes high CPU load\n+                // Start event listener, which will just sleep and slow down event loop\n+                serialPort.addEventListener(this);", "originalCommit": "5f4d6601c1e8c1861fe2236a228665b8364dbf45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA2MDE0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r528060142", "bodyText": "Done, but I checked and it is still in about 8 other bindings.", "author": "mlobstein", "createdAt": "2020-11-21T03:00:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3NzU5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMwMTY3NA==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r528301674", "bodyText": "It doesn't seem to hurt, but it's not necessary.", "author": "fwolter", "createdAt": "2020-11-22T08:33:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3NzU5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3OTY5OA==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r527979698", "bodyText": "You might want to log the exception's message. Same for the TCP class.", "author": "fwolter", "createdAt": "2020-11-20T21:26:36Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/connector/EpsonProjectorSerialConnector.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.connector;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorException;\n+import org.openhab.core.io.transport.serial.PortInUseException;\n+import org.openhab.core.io.transport.serial.SerialPort;\n+import org.openhab.core.io.transport.serial.SerialPortEvent;\n+import org.openhab.core.io.transport.serial.SerialPortEventListener;\n+import org.openhab.core.io.transport.serial.SerialPortIdentifier;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.openhab.core.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector for serial port communication.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorSerialConnector implements EpsonProjectorConnector, SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(EpsonProjectorSerialConnector.class);\n+    private final String serialPortName;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable InputStream in = null;\n+    private @Nullable OutputStream out = null;\n+    private @Nullable SerialPort serialPort = null;\n+\n+    public EpsonProjectorSerialConnector(SerialPortManager serialPortManager, String serialPort) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPort;\n+    }\n+\n+    @Override\n+    public void connect() throws EpsonProjectorException {\n+        try {\n+            logger.debug(\"Open connection to serial port '{}'\", serialPortName);\n+\n+            SerialPortIdentifier serialPortIdentifier = serialPortManager.getIdentifier(serialPortName);\n+\n+            if (serialPortIdentifier == null) {\n+                throw new IOException(\"Unknown serial port\");\n+            }\n+            SerialPort serialPort = serialPortIdentifier.open(this.getClass().getName(), 2000);\n+            serialPort.setSerialPortParams(9600, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);\n+            serialPort.enableReceiveThreshold(1);\n+            serialPort.disableReceiveTimeout();\n+\n+            InputStream in = serialPort.getInputStream();\n+            OutputStream out = serialPort.getOutputStream();\n+\n+            if (in != null && out != null) {\n+                out.flush();\n+                if (in.markSupported()) {\n+                    in.reset();\n+                }\n+\n+                // RXTX serial port library causes high CPU load\n+                // Start event listener, which will just sleep and slow down event loop\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+\n+                this.serialPort = serialPort;\n+                this.in = in;\n+                this.out = out;\n+            }\n+        } catch (PortInUseException | UnsupportedCommOperationException | IOException | TooManyListenersException e) {\n+            throw new EpsonProjectorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void disconnect() throws EpsonProjectorException {\n+        InputStream in = this.in;\n+        OutputStream out = this.out;\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (out != null) {\n+            logger.debug(\"Close serial out stream\");\n+            try {\n+                out.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error occurred when closing serial out stream\", e);\n+            }\n+            this.out = null;\n+        }\n+        if (in != null) {\n+            logger.debug(\"Close serial in stream\");\n+            try {\n+                in.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error occurred when closing serial in stream\", e);\n+            }\n+            this.in = null;\n+        }\n+        if (serialPort != null) {\n+            logger.debug(\"Close serial port\");\n+            serialPort.close();\n+            serialPort.removeEventListener();\n+            this.serialPort = null;\n+        }\n+\n+        logger.debug(\"Closed\");\n+    }\n+\n+    @Override\n+    public String sendMessage(String data, int timeout) throws EpsonProjectorException {\n+        InputStream in = this.in;\n+        OutputStream out = this.out;\n+\n+        if (in == null || out == null) {\n+            connect();\n+            in = this.in;\n+            out = this.out;\n+        }\n+\n+        try {\n+            if (in != null && out != null) {\n+                // flush input stream\n+                if (in.markSupported()) {\n+                    in.reset();\n+                } else {\n+                    while (in.available() > 0) {\n+                        int availableBytes = in.available();\n+\n+                        if (availableBytes > 0) {\n+                            byte[] tmpData = new byte[availableBytes];\n+                            in.read(tmpData, 0, availableBytes);\n+                        }\n+                    }\n+                }\n+\n+                return sendMmsg(data, timeout);\n+            } else {\n+                return \"\";\n+            }\n+        } catch (IOException e) {\n+            logger.debug(\"IO error occurred...reconnect and resend once\");", "originalCommit": "5f4d6601c1e8c1861fe2236a228665b8364dbf45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA2MDE1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r528060153", "bodyText": "done for both", "author": "mlobstein", "createdAt": "2020-11-21T03:01:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3OTY5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk4MDYyMg==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r527980622", "bodyText": "What type of exception do you expect here? Can you specify the concrete type? Same for the TCP class.", "author": "fwolter", "createdAt": "2020-11-20T21:28:36Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/connector/EpsonProjectorSerialConnector.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.connector;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorException;\n+import org.openhab.core.io.transport.serial.PortInUseException;\n+import org.openhab.core.io.transport.serial.SerialPort;\n+import org.openhab.core.io.transport.serial.SerialPortEvent;\n+import org.openhab.core.io.transport.serial.SerialPortEventListener;\n+import org.openhab.core.io.transport.serial.SerialPortIdentifier;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.openhab.core.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector for serial port communication.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorSerialConnector implements EpsonProjectorConnector, SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(EpsonProjectorSerialConnector.class);\n+    private final String serialPortName;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable InputStream in = null;\n+    private @Nullable OutputStream out = null;\n+    private @Nullable SerialPort serialPort = null;\n+\n+    public EpsonProjectorSerialConnector(SerialPortManager serialPortManager, String serialPort) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPort;\n+    }\n+\n+    @Override\n+    public void connect() throws EpsonProjectorException {\n+        try {\n+            logger.debug(\"Open connection to serial port '{}'\", serialPortName);\n+\n+            SerialPortIdentifier serialPortIdentifier = serialPortManager.getIdentifier(serialPortName);\n+\n+            if (serialPortIdentifier == null) {\n+                throw new IOException(\"Unknown serial port\");\n+            }\n+            SerialPort serialPort = serialPortIdentifier.open(this.getClass().getName(), 2000);\n+            serialPort.setSerialPortParams(9600, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);\n+            serialPort.enableReceiveThreshold(1);\n+            serialPort.disableReceiveTimeout();\n+\n+            InputStream in = serialPort.getInputStream();\n+            OutputStream out = serialPort.getOutputStream();\n+\n+            if (in != null && out != null) {\n+                out.flush();\n+                if (in.markSupported()) {\n+                    in.reset();\n+                }\n+\n+                // RXTX serial port library causes high CPU load\n+                // Start event listener, which will just sleep and slow down event loop\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+\n+                this.serialPort = serialPort;\n+                this.in = in;\n+                this.out = out;\n+            }\n+        } catch (PortInUseException | UnsupportedCommOperationException | IOException | TooManyListenersException e) {\n+            throw new EpsonProjectorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void disconnect() throws EpsonProjectorException {\n+        InputStream in = this.in;\n+        OutputStream out = this.out;\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (out != null) {\n+            logger.debug(\"Close serial out stream\");\n+            try {\n+                out.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error occurred when closing serial out stream\", e);\n+            }\n+            this.out = null;\n+        }\n+        if (in != null) {\n+            logger.debug(\"Close serial in stream\");\n+            try {\n+                in.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error occurred when closing serial in stream\", e);\n+            }\n+            this.in = null;\n+        }\n+        if (serialPort != null) {\n+            logger.debug(\"Close serial port\");\n+            serialPort.close();\n+            serialPort.removeEventListener();\n+            this.serialPort = null;\n+        }\n+\n+        logger.debug(\"Closed\");\n+    }\n+\n+    @Override\n+    public String sendMessage(String data, int timeout) throws EpsonProjectorException {\n+        InputStream in = this.in;\n+        OutputStream out = this.out;\n+\n+        if (in == null || out == null) {\n+            connect();\n+            in = this.in;\n+            out = this.out;\n+        }\n+\n+        try {\n+            if (in != null && out != null) {\n+                // flush input stream\n+                if (in.markSupported()) {\n+                    in.reset();\n+                } else {\n+                    while (in.available() > 0) {\n+                        int availableBytes = in.available();\n+\n+                        if (availableBytes > 0) {\n+                            byte[] tmpData = new byte[availableBytes];\n+                            in.read(tmpData, 0, availableBytes);\n+                        }\n+                    }\n+                }\n+\n+                return sendMmsg(data, timeout);\n+            } else {\n+                return \"\";\n+            }\n+        } catch (IOException e) {\n+            logger.debug(\"IO error occurred...reconnect and resend once\");\n+            disconnect();\n+            connect();\n+\n+            try {\n+                return sendMmsg(data, timeout);\n+            } catch (IOException e1) {\n+                throw new EpsonProjectorException(e);\n+            }\n+        } catch (Exception e) {", "originalCommit": "5f4d6601c1e8c1861fe2236a228665b8364dbf45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA2MDIwNA==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r528060204", "bodyText": "Not sure, so I removed it.", "author": "mlobstein", "createdAt": "2020-11-21T03:01:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk4MDYyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk4MDg3OA==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r527980878", "bodyText": "Can you specify the encoding you expect? E.g. StandardCharsets.UTF_8", "author": "fwolter", "createdAt": "2020-11-20T21:29:16Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/connector/EpsonProjectorSerialConnector.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.connector;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorException;\n+import org.openhab.core.io.transport.serial.PortInUseException;\n+import org.openhab.core.io.transport.serial.SerialPort;\n+import org.openhab.core.io.transport.serial.SerialPortEvent;\n+import org.openhab.core.io.transport.serial.SerialPortEventListener;\n+import org.openhab.core.io.transport.serial.SerialPortIdentifier;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.openhab.core.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector for serial port communication.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorSerialConnector implements EpsonProjectorConnector, SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(EpsonProjectorSerialConnector.class);\n+    private final String serialPortName;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable InputStream in = null;\n+    private @Nullable OutputStream out = null;\n+    private @Nullable SerialPort serialPort = null;\n+\n+    public EpsonProjectorSerialConnector(SerialPortManager serialPortManager, String serialPort) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPort;\n+    }\n+\n+    @Override\n+    public void connect() throws EpsonProjectorException {\n+        try {\n+            logger.debug(\"Open connection to serial port '{}'\", serialPortName);\n+\n+            SerialPortIdentifier serialPortIdentifier = serialPortManager.getIdentifier(serialPortName);\n+\n+            if (serialPortIdentifier == null) {\n+                throw new IOException(\"Unknown serial port\");\n+            }\n+            SerialPort serialPort = serialPortIdentifier.open(this.getClass().getName(), 2000);\n+            serialPort.setSerialPortParams(9600, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);\n+            serialPort.enableReceiveThreshold(1);\n+            serialPort.disableReceiveTimeout();\n+\n+            InputStream in = serialPort.getInputStream();\n+            OutputStream out = serialPort.getOutputStream();\n+\n+            if (in != null && out != null) {\n+                out.flush();\n+                if (in.markSupported()) {\n+                    in.reset();\n+                }\n+\n+                // RXTX serial port library causes high CPU load\n+                // Start event listener, which will just sleep and slow down event loop\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+\n+                this.serialPort = serialPort;\n+                this.in = in;\n+                this.out = out;\n+            }\n+        } catch (PortInUseException | UnsupportedCommOperationException | IOException | TooManyListenersException e) {\n+            throw new EpsonProjectorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void disconnect() throws EpsonProjectorException {\n+        InputStream in = this.in;\n+        OutputStream out = this.out;\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (out != null) {\n+            logger.debug(\"Close serial out stream\");\n+            try {\n+                out.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error occurred when closing serial out stream\", e);\n+            }\n+            this.out = null;\n+        }\n+        if (in != null) {\n+            logger.debug(\"Close serial in stream\");\n+            try {\n+                in.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error occurred when closing serial in stream\", e);\n+            }\n+            this.in = null;\n+        }\n+        if (serialPort != null) {\n+            logger.debug(\"Close serial port\");\n+            serialPort.close();\n+            serialPort.removeEventListener();\n+            this.serialPort = null;\n+        }\n+\n+        logger.debug(\"Closed\");\n+    }\n+\n+    @Override\n+    public String sendMessage(String data, int timeout) throws EpsonProjectorException {\n+        InputStream in = this.in;\n+        OutputStream out = this.out;\n+\n+        if (in == null || out == null) {\n+            connect();\n+            in = this.in;\n+            out = this.out;\n+        }\n+\n+        try {\n+            if (in != null && out != null) {\n+                // flush input stream\n+                if (in.markSupported()) {\n+                    in.reset();\n+                } else {\n+                    while (in.available() > 0) {\n+                        int availableBytes = in.available();\n+\n+                        if (availableBytes > 0) {\n+                            byte[] tmpData = new byte[availableBytes];\n+                            in.read(tmpData, 0, availableBytes);\n+                        }\n+                    }\n+                }\n+\n+                return sendMmsg(data, timeout);\n+            } else {\n+                return \"\";\n+            }\n+        } catch (IOException e) {\n+            logger.debug(\"IO error occurred...reconnect and resend once\");\n+            disconnect();\n+            connect();\n+\n+            try {\n+                return sendMmsg(data, timeout);\n+            } catch (IOException e1) {\n+                throw new EpsonProjectorException(e);\n+            }\n+        } catch (Exception e) {\n+            throw new EpsonProjectorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void serialEvent(SerialPortEvent arg0) {\n+        try {\n+            logger.trace(\"RXTX library CPU load workaround, sleep forever\");\n+            Thread.sleep(Long.MAX_VALUE);\n+        } catch (InterruptedException e) {\n+        }\n+    }\n+\n+    private String sendMmsg(String data, int timeout) throws IOException, EpsonProjectorException {\n+        String resp = \"\";\n+\n+        InputStream in = this.in;\n+        OutputStream out = this.out;\n+\n+        if (in != null && out != null) {\n+            out.write(data.getBytes());\n+            out.write(\"\\r\\n\".getBytes());\n+            out.flush();\n+\n+            long startTime = System.currentTimeMillis();\n+            long elapsedTime = 0;\n+\n+            while (elapsedTime < timeout) {\n+                int availableBytes = in.available();\n+                if (availableBytes > 0) {\n+                    byte[] tmpData = new byte[availableBytes];\n+                    int readBytes = in.read(tmpData, 0, availableBytes);\n+                    resp = resp.concat(new String(tmpData, 0, readBytes));", "originalCommit": "5f4d6601c1e8c1861fe2236a228665b8364dbf45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA2MDI0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r528060242", "bodyText": "done for both", "author": "mlobstein", "createdAt": "2020-11-21T03:01:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk4MDg3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk4MzcxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r527983715", "bodyText": "What about your name?", "author": "fwolter", "createdAt": "2020-11-20T21:36:09Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/resources/OH-INF/binding/binding.xml", "diffHunk": "@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<binding:binding id=\"epsonprojector\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:binding=\"https://openhab.org/schemas/binding/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/binding/v1.0.0 https://openhab.org/schemas/binding-1.0.0.xsd\">\n+\n+\t<name>Epson Projector Binding</name>\n+\t<description>This binding is compatible with Epson projectors which support the ESC/VP21 protocol</description>\n+\t<author>Pauli Anttila, Yannick Schaus</author>", "originalCommit": "5f4d6601c1e8c1861fe2236a228665b8364dbf45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA2MDM0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r528060347", "bodyText": "Its getting crowded in there... How many authors is too much?", "author": "mlobstein", "createdAt": "2020-11-21T03:02:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk4MzcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMwMTQzNg==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r528301436", "bodyText": "If I understand correctly, you took over the binding and you are the maintainer now. So, I'd suggest that it's only your name in the author tag.", "author": "fwolter", "createdAt": "2020-11-22T08:30:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk4MzcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzNzAxNg==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r528437016", "bodyText": "I agree author != maintainer, which is why I omitted putting my name there.", "author": "mlobstein", "createdAt": "2020-11-23T01:25:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk4MzcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTExODY0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r529118645", "bodyText": "It looks like it is a moot point anyway: #9113", "author": "mlobstein", "createdAt": "2020-11-24T01:50:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk4MzcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMxNjA4NA==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r529316084", "bodyText": "Wouldn't be suprised if it was caused by this exchange ;)", "author": "ghys", "createdAt": "2020-11-24T09:05:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk4MzcxNQ=="}], "type": "inlineReview"}, {"oid": "446698c34ad39941c7d2d79e19cfb28636d4da16", "url": "https://github.com/openhab/openhab-addons/commit/446698c34ad39941c7d2d79e19cfb28636d4da16", "message": "review changes\n\nSigned-off-by: Michael Lobstein <michael.lobstein@gmail.com>", "committedDate": "2020-11-21T02:57:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMwMjQ5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r528302492", "bodyText": "Syntactical sugar\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private ExpiringCache<Integer> cachedLampHours = new ExpiringCache<>(Duration.ofMinutes(LAMP_REFRESH_WAIT_MINUTES),\n          \n          \n            \n                        () -> queryLamp());\n          \n          \n            \n                private ExpiringCache<Integer> cachedLampHours = new ExpiringCache<>(Duration.ofMinutes(LAMP_REFRESH_WAIT_MINUTES),\n          \n          \n            \n                        this::queryLamp);", "author": "fwolter", "createdAt": "2020-11-22T08:41:25Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/EpsonProjectorDevice.java", "diffHunk": "@@ -0,0 +1,625 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorConnector;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorDefaultConnector;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorSerialConnector;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorTcpConnector;\n+import org.openhab.binding.epsonprojector.internal.enums.AspectRatio;\n+import org.openhab.binding.epsonprojector.internal.enums.Background;\n+import org.openhab.binding.epsonprojector.internal.enums.ColorMode;\n+import org.openhab.binding.epsonprojector.internal.enums.ErrorMessage;\n+import org.openhab.binding.epsonprojector.internal.enums.Gamma;\n+import org.openhab.binding.epsonprojector.internal.enums.Luminance;\n+import org.openhab.binding.epsonprojector.internal.enums.PowerStatus;\n+import org.openhab.binding.epsonprojector.internal.enums.Switch;\n+import org.openhab.core.cache.ExpiringCache;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Provide high level interface to Epson projector.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ * @author Yannick Schaus - Refactoring\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorDevice {\n+    private static final int[] MAP64 = new int[] { 0, 3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51, 55, 59, 63, 66,\n+            70, 74, 78, 82, 86, 90, 94, 98, 102, 106, 110, 114, 118, 122, 126, 129, 133, 137, 141, 145, 149, 153, 157,\n+            161, 165, 169, 173, 177, 181, 185, 189, 192, 196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 236, 240,\n+            244, 248, 252 };\n+\n+    private static final int[] MAP60 = new int[] { 0, 4, 8, 12, 16, 20, 25, 29, 33, 37, 41, 46, 50, 54, 58, 62, 67, 71,\n+            75, 79, 83, 88, 92, 96, 100, 104, 109, 113, 117, 121, 125, 130, 134, 138, 142, 146, 151, 155, 159, 163, 167,\n+            172, 176, 180, 184, 188, 193, 197, 201, 205, 209, 214, 218, 222, 226, 230, 235, 239, 243, 247, 251 };\n+\n+    private static final int[] MAP49 = new int[] { 0, 5, 10, 15, 20, 25, 30, 35, 40, 46, 51, 56, 61, 66, 71, 76, 81, 87,\n+            92, 97, 102, 107, 112, 117, 122, 128, 133, 138, 143, 148, 153, 158, 163, 168, 174, 179, 184, 189, 194, 199,\n+            204, 209, 215, 220, 225, 230, 235, 240, 245, 250 };\n+\n+    private static final int[] MAP48 = new int[] { 0, 5, 10, 15, 20, 26, 31, 36, 41, 47, 52, 57, 62, 67, 73, 78, 83, 88,\n+            94, 99, 104, 109, 114, 120, 125, 130, 135, 141, 146, 151, 156, 161, 167, 172, 177, 182, 188, 193, 198, 203,\n+            208, 214, 219, 224, 229, 235, 240, 245, 250 };\n+\n+    private static final int[] MAP20 = new int[] { 0, 12, 24, 36, 48, 60, 73, 85, 97, 109, 121, 134, 146, 158, 170, 182,\n+            195, 207, 219, 231, 243 };\n+\n+    private static final int[] MAP18 = new int[] { 0, 13, 26, 40, 53, 67, 80, 94, 107, 121, 134, 148, 161, 175, 188,\n+            202, 215, 229, 242 };\n+\n+    private static final int[] MAP_COLOR_TEMP = new int[] { 0, 25, 51, 76, 102, 128, 153, 179, 204, 230 };\n+    private static final int[] MAP_FLESH_COLOR = new int[] { 0, 36, 73, 109, 146, 182, 219 };\n+\n+    private static final int DEFAULT_TIMEOUT = 5 * 1000;\n+    private static final int POWER_ON_TIMEOUT = 100 * 1000;\n+    private static final int POWER_OFF_TIMEOUT = 130 * 1000;\n+    private static final int LAMP_REFRESH_WAIT_MINUTES = 5;\n+\n+    private static final String ON = \"ON\";\n+    private static final String ERR = \"ERR\";\n+\n+    private Logger logger = LoggerFactory.getLogger(EpsonProjectorDevice.class);\n+\n+    @Nullable\n+    private ScheduledExecutorService scheduler = null;\n+    private EpsonProjectorConnector connection;\n+    private ExpiringCache<Integer> cachedLampHours = new ExpiringCache<>(Duration.ofMinutes(LAMP_REFRESH_WAIT_MINUTES),\n+            () -> queryLamp());", "originalCommit": "446698c34ad39941c7d2d79e19cfb28636d4da16", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMwMjY5NA==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r528302694", "bodyText": "This can be removed, too.", "author": "fwolter", "createdAt": "2020-11-22T08:43:40Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/connector/EpsonProjectorSerialConnector.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.connector;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorException;\n+import org.openhab.core.io.transport.serial.PortInUseException;\n+import org.openhab.core.io.transport.serial.SerialPort;\n+import org.openhab.core.io.transport.serial.SerialPortEvent;\n+import org.openhab.core.io.transport.serial.SerialPortEventListener;\n+import org.openhab.core.io.transport.serial.SerialPortIdentifier;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.openhab.core.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector for serial port communication.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorSerialConnector implements EpsonProjectorConnector, SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(EpsonProjectorSerialConnector.class);\n+    private final String serialPortName;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable InputStream in = null;\n+    private @Nullable OutputStream out = null;\n+    private @Nullable SerialPort serialPort = null;\n+\n+    public EpsonProjectorSerialConnector(SerialPortManager serialPortManager, String serialPort) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPort;\n+    }\n+\n+    @Override\n+    public void connect() throws EpsonProjectorException {\n+        try {\n+            logger.debug(\"Open connection to serial port '{}'\", serialPortName);\n+\n+            SerialPortIdentifier serialPortIdentifier = serialPortManager.getIdentifier(serialPortName);\n+\n+            if (serialPortIdentifier == null) {\n+                throw new IOException(\"Unknown serial port\");\n+            }\n+            SerialPort serialPort = serialPortIdentifier.open(this.getClass().getName(), 2000);\n+            serialPort.setSerialPortParams(9600, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);\n+            serialPort.enableReceiveThreshold(1);\n+            serialPort.disableReceiveTimeout();\n+\n+            InputStream in = serialPort.getInputStream();\n+            OutputStream out = serialPort.getOutputStream();\n+\n+            if (in != null && out != null) {\n+                out.flush();\n+                if (in.markSupported()) {\n+                    in.reset();\n+                }\n+\n+                serialPort.notifyOnDataAvailable(true);\n+\n+                this.serialPort = serialPort;\n+                this.in = in;\n+                this.out = out;\n+            }\n+        } catch (PortInUseException | UnsupportedCommOperationException | IOException e) {\n+            throw new EpsonProjectorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void disconnect() throws EpsonProjectorException {\n+        InputStream in = this.in;\n+        OutputStream out = this.out;\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (out != null) {\n+            logger.debug(\"Close serial out stream\");\n+            try {\n+                out.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error occurred when closing serial out stream\", e);\n+            }\n+            this.out = null;\n+        }\n+        if (in != null) {\n+            logger.debug(\"Close serial in stream\");\n+            try {\n+                in.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error occurred when closing serial in stream\", e);\n+            }\n+            this.in = null;\n+        }\n+        if (serialPort != null) {\n+            logger.debug(\"Close serial port\");\n+            serialPort.close();\n+            serialPort.removeEventListener();\n+            this.serialPort = null;\n+        }\n+\n+        logger.debug(\"Closed\");\n+    }\n+\n+    @Override\n+    public String sendMessage(String data, int timeout) throws EpsonProjectorException {\n+        InputStream in = this.in;\n+        OutputStream out = this.out;\n+\n+        if (in == null || out == null) {\n+            connect();\n+            in = this.in;\n+            out = this.out;\n+        }\n+\n+        try {\n+            if (in != null && out != null) {\n+                // flush input stream\n+                if (in.markSupported()) {\n+                    in.reset();\n+                } else {\n+                    while (in.available() > 0) {\n+                        int availableBytes = in.available();\n+\n+                        if (availableBytes > 0) {\n+                            byte[] tmpData = new byte[availableBytes];\n+                            in.read(tmpData, 0, availableBytes);\n+                        }\n+                    }\n+                }\n+                return sendMmsg(data, timeout);\n+            } else {\n+                return \"\";\n+            }\n+        } catch (IOException e) {\n+            logger.debug(\"IO error occurred...reconnect and resend once\", e);\n+            disconnect();\n+            connect();\n+\n+            try {\n+                return sendMmsg(data, timeout);\n+            } catch (IOException e1) {\n+                throw new EpsonProjectorException(e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void serialEvent(SerialPortEvent arg0) {\n+        try {\n+            logger.trace(\"RXTX library CPU load workaround, sleep forever\");\n+            Thread.sleep(Long.MAX_VALUE);\n+        } catch (InterruptedException e) {\n+        }\n+    }", "originalCommit": "446698c34ad39941c7d2d79e19cfb28636d4da16", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMwMjg1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r528302852", "bodyText": "This will log the stack trace. Is logging the exception's message sufficient? Same for below and TCP.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.debug(\"Error occurred when closing serial out stream\", e);\n          \n          \n            \n                            logger.debug(\"Error occurred when closing serial out stream: {}\", e.getMessage());", "author": "fwolter", "createdAt": "2020-11-22T08:44:57Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/connector/EpsonProjectorSerialConnector.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.connector;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorException;\n+import org.openhab.core.io.transport.serial.PortInUseException;\n+import org.openhab.core.io.transport.serial.SerialPort;\n+import org.openhab.core.io.transport.serial.SerialPortEvent;\n+import org.openhab.core.io.transport.serial.SerialPortEventListener;\n+import org.openhab.core.io.transport.serial.SerialPortIdentifier;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.openhab.core.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector for serial port communication.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorSerialConnector implements EpsonProjectorConnector, SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(EpsonProjectorSerialConnector.class);\n+    private final String serialPortName;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable InputStream in = null;\n+    private @Nullable OutputStream out = null;\n+    private @Nullable SerialPort serialPort = null;\n+\n+    public EpsonProjectorSerialConnector(SerialPortManager serialPortManager, String serialPort) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPort;\n+    }\n+\n+    @Override\n+    public void connect() throws EpsonProjectorException {\n+        try {\n+            logger.debug(\"Open connection to serial port '{}'\", serialPortName);\n+\n+            SerialPortIdentifier serialPortIdentifier = serialPortManager.getIdentifier(serialPortName);\n+\n+            if (serialPortIdentifier == null) {\n+                throw new IOException(\"Unknown serial port\");\n+            }\n+            SerialPort serialPort = serialPortIdentifier.open(this.getClass().getName(), 2000);\n+            serialPort.setSerialPortParams(9600, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);\n+            serialPort.enableReceiveThreshold(1);\n+            serialPort.disableReceiveTimeout();\n+\n+            InputStream in = serialPort.getInputStream();\n+            OutputStream out = serialPort.getOutputStream();\n+\n+            if (in != null && out != null) {\n+                out.flush();\n+                if (in.markSupported()) {\n+                    in.reset();\n+                }\n+\n+                serialPort.notifyOnDataAvailable(true);\n+\n+                this.serialPort = serialPort;\n+                this.in = in;\n+                this.out = out;\n+            }\n+        } catch (PortInUseException | UnsupportedCommOperationException | IOException e) {\n+            throw new EpsonProjectorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void disconnect() throws EpsonProjectorException {\n+        InputStream in = this.in;\n+        OutputStream out = this.out;\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (out != null) {\n+            logger.debug(\"Close serial out stream\");\n+            try {\n+                out.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error occurred when closing serial out stream\", e);", "originalCommit": "446698c34ad39941c7d2d79e19cfb28636d4da16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQzNzIyMg==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r528437222", "bodyText": "Logging the message now for all.", "author": "mlobstein", "createdAt": "2020-11-23T01:27:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMwMjg1Mg=="}], "type": "inlineReview"}, {"oid": "47cce9d8d49983c9ca9933e185a27b6eef727f74", "url": "https://github.com/openhab/openhab-addons/commit/47cce9d8d49983c9ca9933e185a27b6eef727f74", "message": "improve exception logging\n\nSigned-off-by: Michael Lobstein <michael.lobstein@gmail.com>", "committedDate": "2020-11-23T01:23:17Z", "type": "commit"}, {"oid": "a6620a0bdd54c7270af1f95c3fd8f9ca074b145e", "url": "https://github.com/openhab/openhab-addons/commit/a6620a0bdd54c7270af1f95c3fd8f9ca074b145e", "message": "remove author tag\n\nSigned-off-by: Michael Lobstein <michael.lobstein@gmail.com>", "committedDate": "2020-11-24T01:53:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODMwNA==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r529478304", "bodyText": "This seems redundant. The exception already contains the message.", "author": "fwolter", "createdAt": "2020-11-24T11:35:32Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/connector/EpsonProjectorSerialConnector.java", "diffHunk": "@@ -83,7 +83,7 @@ public void connect() throws EpsonProjectorException {\n                 this.out = out;\n             }\n         } catch (PortInUseException | UnsupportedCommOperationException | IOException e) {\n-            throw new EpsonProjectorException(e);\n+            throw new EpsonProjectorException(e.getMessage(), e);", "originalCommit": "47cce9d8d49983c9ca9933e185a27b6eef727f74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYwNDQ2NA==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r529604464", "bodyText": "Removed", "author": "mlobstein", "createdAt": "2020-11-24T14:52:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3ODMwNA=="}], "type": "inlineReview"}, {"oid": "82d573a5f13193fafe2c2d8c60d913289326329b", "url": "https://github.com/openhab/openhab-addons/commit/82d573a5f13193fafe2c2d8c60d913289326329b", "message": "cleanup exception logging\n\nSigned-off-by: Michael Lobstein <michael.lobstein@gmail.com>", "committedDate": "2020-11-24T14:51:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcwNTc1MA==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r529705750", "bodyText": "You could introduce two projector things, one for serial port communication and another for ip communication, where then thing description files contain mandatory parameters for thing (serial port in another thing and ip address + port in another). Framework then force user to define all necessary parameters for thing and this class could be then removed.", "author": "paulianttila", "createdAt": "2020-11-24T16:21:53Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/connector/EpsonProjectorDefaultConnector.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.connector;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorException;\n+\n+/**\n+ * Default Connector\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorDefaultConnector implements EpsonProjectorConnector {", "originalCommit": "82d573a5f13193fafe2c2d8c60d913289326329b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA3NTU0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r530075545", "bodyText": "I tried to do that inside the handler factory and create/pass the appropriate device object to the handler based on the which thing is used.... But the configuration is not available there so I would have to refactor the device class and the connector classes to take configuration via a setter among other things.", "author": "mlobstein", "createdAt": "2020-11-25T02:54:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcwNTc1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0NDI0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r530244242", "bodyText": "You don't need to do any special changes to factory or handler itself. Both things can use same configuration class and handler internally.\nI have implemented similar to other bindings as well. Take a look e.g. rfxcom or nibe heat pump binding. I'm sure there is other bindings as well, which support multiple communication techonogies.", "author": "paulianttila", "createdAt": "2020-11-25T09:56:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcwNTc1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY5Nzc5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r530697795", "bodyText": "Thanks, I made separate things per connection type.", "author": "mlobstein", "createdAt": "2020-11-25T23:50:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcwNTc1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5NTY2MA==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r530595660", "bodyText": "Configuration validation shouldn't be done asynchronously and instead should be done inside the initialize() method.", "author": "cpmeister", "createdAt": "2020-11-25T19:20:44Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/handler/EpsonProjectorHandler.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.handler;\n+\n+import static org.openhab.binding.epsonprojector.internal.EpsonProjectorBindingConstants.*;\n+\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorCommandException;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorCommandType;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorDevice;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorException;\n+import org.openhab.binding.epsonprojector.internal.configuration.EpsonProjectorConfiguration;\n+import org.openhab.binding.epsonprojector.internal.enums.AspectRatio;\n+import org.openhab.binding.epsonprojector.internal.enums.Background;\n+import org.openhab.binding.epsonprojector.internal.enums.ColorMode;\n+import org.openhab.binding.epsonprojector.internal.enums.Gamma;\n+import org.openhab.binding.epsonprojector.internal.enums.Luminance;\n+import org.openhab.binding.epsonprojector.internal.enums.PowerStatus;\n+import org.openhab.binding.epsonprojector.internal.enums.Switch;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EpsonProjectorHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila, Yannick Schaus - Initial contribution\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorHandler extends BaseThingHandler {\n+    private static final int DEFAULT_POLLING_INTERVAL_SEC = 10;\n+\n+    private final Logger logger = LoggerFactory.getLogger(EpsonProjectorHandler.class);\n+\n+    private EpsonProjectorDevice device = new EpsonProjectorDevice();\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private final SerialPortManager serialPortManager;\n+\n+    private boolean isPowerOn = false;\n+\n+    public EpsonProjectorHandler(Thing thing, SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            Channel channel = this.thing.getChannel(channelUID);\n+            if (channel != null) {\n+                updateChannelState(channel);\n+            }\n+        } else {\n+            EpsonProjectorCommandType epsonCommand = EpsonProjectorCommandType.getCommandType(channelId);\n+            sendDataToDevice(epsonCommand, command);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        scheduler.execute(() -> {\n+            EpsonProjectorConfiguration config = getConfigAs(EpsonProjectorConfiguration.class);\n+            final String serialPort = config.serialPort;\n+            final String host = config.host;\n+            final Integer port = config.port;\n+            final Integer pollingInterval = config.pollingInterval;\n+\n+            if (serialPort != null && !serialPort.equals(\"\")) {\n+                device = new EpsonProjectorDevice(serialPortManager, serialPort, scheduler);\n+            } else if (host != null && !host.equals(\"\") && port > 0 && port < 65535) {\n+                device = new EpsonProjectorDevice(host, port, scheduler);\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+                return;\n+            }", "originalCommit": "82d573a5f13193fafe2c2d8c60d913289326329b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxNDI5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r530714292", "bodyText": "done", "author": "mlobstein", "createdAt": "2020-11-26T00:56:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5NTY2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwMTI0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r530601243", "bodyText": "You should avoid assigning class fields asynchronously since this handler might get disposed before you have a chance to assign it. This might lead to the case where this periodic task is never canceled.\nInstead you should create this task during initialize and then inside the task just check if the device is connected or not before trying to update the channels.", "author": "cpmeister", "createdAt": "2020-11-25T19:32:36Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/handler/EpsonProjectorHandler.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.handler;\n+\n+import static org.openhab.binding.epsonprojector.internal.EpsonProjectorBindingConstants.*;\n+\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorCommandException;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorCommandType;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorDevice;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorException;\n+import org.openhab.binding.epsonprojector.internal.configuration.EpsonProjectorConfiguration;\n+import org.openhab.binding.epsonprojector.internal.enums.AspectRatio;\n+import org.openhab.binding.epsonprojector.internal.enums.Background;\n+import org.openhab.binding.epsonprojector.internal.enums.ColorMode;\n+import org.openhab.binding.epsonprojector.internal.enums.Gamma;\n+import org.openhab.binding.epsonprojector.internal.enums.Luminance;\n+import org.openhab.binding.epsonprojector.internal.enums.PowerStatus;\n+import org.openhab.binding.epsonprojector.internal.enums.Switch;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EpsonProjectorHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila, Yannick Schaus - Initial contribution\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorHandler extends BaseThingHandler {\n+    private static final int DEFAULT_POLLING_INTERVAL_SEC = 10;\n+\n+    private final Logger logger = LoggerFactory.getLogger(EpsonProjectorHandler.class);\n+\n+    private EpsonProjectorDevice device = new EpsonProjectorDevice();\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private final SerialPortManager serialPortManager;\n+\n+    private boolean isPowerOn = false;\n+\n+    public EpsonProjectorHandler(Thing thing, SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            Channel channel = this.thing.getChannel(channelUID);\n+            if (channel != null) {\n+                updateChannelState(channel);\n+            }\n+        } else {\n+            EpsonProjectorCommandType epsonCommand = EpsonProjectorCommandType.getCommandType(channelId);\n+            sendDataToDevice(epsonCommand, command);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        scheduler.execute(() -> {\n+            EpsonProjectorConfiguration config = getConfigAs(EpsonProjectorConfiguration.class);\n+            final String serialPort = config.serialPort;\n+            final String host = config.host;\n+            final Integer port = config.port;\n+            final Integer pollingInterval = config.pollingInterval;\n+\n+            if (serialPort != null && !serialPort.equals(\"\")) {\n+                device = new EpsonProjectorDevice(serialPortManager, serialPort, scheduler);\n+            } else if (host != null && !host.equals(\"\") && port > 0 && port < 65535) {\n+                device = new EpsonProjectorDevice(host, port, scheduler);\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+                return;\n+            }\n+\n+            try {\n+                updateStatus(ThingStatus.OFFLINE);\n+                device.connect();\n+\n+                List<Channel> channels = this.thing.getChannels();\n+\n+                pollingJob = scheduler.scheduleWithFixedDelay(() -> {\n+                    for (Channel channel : channels) {\n+                        // only query power & lamp time when projector is off\n+                        if (isPowerOn || (channel.getUID().getId().equals(CHANNEL_TYPE_POWER)\n+                                || channel.getUID().getId().equals(CHANNEL_TYPE_LAMPTIME))) {\n+                            updateChannelState(channel);\n+                        }\n+                    }\n+                }, 0, (pollingInterval > 0) ? pollingInterval : DEFAULT_POLLING_INTERVAL_SEC, TimeUnit.SECONDS);", "originalCommit": "82d573a5f13193fafe2c2d8c60d913289326329b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxNDM0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r530714345", "bodyText": "This should be fixed now.", "author": "mlobstein", "createdAt": "2020-11-26T00:57:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwMTI0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwMjY1NA==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r530602654", "bodyText": "At no point to you create any marks. What exactly are you resetting here?", "author": "cpmeister", "createdAt": "2020-11-25T19:35:41Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/connector/EpsonProjectorSerialConnector.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.connector;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorException;\n+import org.openhab.core.io.transport.serial.PortInUseException;\n+import org.openhab.core.io.transport.serial.SerialPort;\n+import org.openhab.core.io.transport.serial.SerialPortEvent;\n+import org.openhab.core.io.transport.serial.SerialPortEventListener;\n+import org.openhab.core.io.transport.serial.SerialPortIdentifier;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.openhab.core.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector for serial port communication.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorSerialConnector implements EpsonProjectorConnector, SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(EpsonProjectorSerialConnector.class);\n+    private final String serialPortName;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable InputStream in = null;\n+    private @Nullable OutputStream out = null;\n+    private @Nullable SerialPort serialPort = null;\n+\n+    public EpsonProjectorSerialConnector(SerialPortManager serialPortManager, String serialPort) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPort;\n+    }\n+\n+    @Override\n+    public void connect() throws EpsonProjectorException {\n+        try {\n+            logger.debug(\"Open connection to serial port '{}'\", serialPortName);\n+\n+            SerialPortIdentifier serialPortIdentifier = serialPortManager.getIdentifier(serialPortName);\n+\n+            if (serialPortIdentifier == null) {\n+                throw new IOException(\"Unknown serial port\");\n+            }\n+            SerialPort serialPort = serialPortIdentifier.open(this.getClass().getName(), 2000);\n+            serialPort.setSerialPortParams(9600, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);\n+            serialPort.enableReceiveThreshold(1);\n+            serialPort.disableReceiveTimeout();\n+\n+            InputStream in = serialPort.getInputStream();\n+            OutputStream out = serialPort.getOutputStream();\n+\n+            if (in != null && out != null) {\n+                out.flush();\n+                if (in.markSupported()) {\n+                    in.reset();\n+                }", "originalCommit": "82d573a5f13193fafe2c2d8c60d913289326329b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcwNjgyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r530706829", "bodyText": "I don't know. All the communication code is unchanged for the most part from #7370 and #6922.", "author": "mlobstein", "createdAt": "2020-11-26T00:28:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwMjY1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwMzIxNQ==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r530603215", "bodyText": "The default charset varies from system to system so it is better to specify it yourself instead of using the default.", "author": "cpmeister", "createdAt": "2020-11-25T19:36:47Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/connector/EpsonProjectorSerialConnector.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.connector;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorException;\n+import org.openhab.core.io.transport.serial.PortInUseException;\n+import org.openhab.core.io.transport.serial.SerialPort;\n+import org.openhab.core.io.transport.serial.SerialPortEvent;\n+import org.openhab.core.io.transport.serial.SerialPortEventListener;\n+import org.openhab.core.io.transport.serial.SerialPortIdentifier;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.openhab.core.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector for serial port communication.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorSerialConnector implements EpsonProjectorConnector, SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(EpsonProjectorSerialConnector.class);\n+    private final String serialPortName;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable InputStream in = null;\n+    private @Nullable OutputStream out = null;\n+    private @Nullable SerialPort serialPort = null;\n+\n+    public EpsonProjectorSerialConnector(SerialPortManager serialPortManager, String serialPort) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPort;\n+    }\n+\n+    @Override\n+    public void connect() throws EpsonProjectorException {\n+        try {\n+            logger.debug(\"Open connection to serial port '{}'\", serialPortName);\n+\n+            SerialPortIdentifier serialPortIdentifier = serialPortManager.getIdentifier(serialPortName);\n+\n+            if (serialPortIdentifier == null) {\n+                throw new IOException(\"Unknown serial port\");\n+            }\n+            SerialPort serialPort = serialPortIdentifier.open(this.getClass().getName(), 2000);\n+            serialPort.setSerialPortParams(9600, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);\n+            serialPort.enableReceiveThreshold(1);\n+            serialPort.disableReceiveTimeout();\n+\n+            InputStream in = serialPort.getInputStream();\n+            OutputStream out = serialPort.getOutputStream();\n+\n+            if (in != null && out != null) {\n+                out.flush();\n+                if (in.markSupported()) {\n+                    in.reset();\n+                }\n+\n+                serialPort.notifyOnDataAvailable(true);\n+\n+                this.serialPort = serialPort;\n+                this.in = in;\n+                this.out = out;\n+            }\n+        } catch (PortInUseException | UnsupportedCommOperationException | IOException e) {\n+            throw new EpsonProjectorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void disconnect() throws EpsonProjectorException {\n+        InputStream in = this.in;\n+        OutputStream out = this.out;\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (out != null) {\n+            logger.debug(\"Close serial out stream\");\n+            try {\n+                out.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error occurred when closing serial out stream: {}\", e.getMessage());\n+            }\n+            this.out = null;\n+        }\n+        if (in != null) {\n+            logger.debug(\"Close serial in stream\");\n+            try {\n+                in.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error occurred when closing serial in stream: {}\", e.getMessage());\n+            }\n+            this.in = null;\n+        }\n+        if (serialPort != null) {\n+            logger.debug(\"Close serial port\");\n+            serialPort.close();\n+            serialPort.removeEventListener();\n+            this.serialPort = null;\n+        }\n+\n+        logger.debug(\"Closed\");\n+    }\n+\n+    @Override\n+    public String sendMessage(String data, int timeout) throws EpsonProjectorException {\n+        InputStream in = this.in;\n+        OutputStream out = this.out;\n+\n+        if (in == null || out == null) {\n+            connect();\n+            in = this.in;\n+            out = this.out;\n+        }\n+\n+        try {\n+            if (in != null && out != null) {\n+                // flush input stream\n+                if (in.markSupported()) {\n+                    in.reset();\n+                } else {\n+                    while (in.available() > 0) {\n+                        int availableBytes = in.available();\n+\n+                        if (availableBytes > 0) {\n+                            byte[] tmpData = new byte[availableBytes];\n+                            in.read(tmpData, 0, availableBytes);\n+                        }\n+                    }\n+                }\n+                return sendMmsg(data, timeout);\n+            } else {\n+                return \"\";\n+            }\n+        } catch (IOException e) {\n+            logger.debug(\"IO error occurred...reconnect and resend once: {}\", e.getMessage());\n+            disconnect();\n+            connect();\n+\n+            try {\n+                return sendMmsg(data, timeout);\n+            } catch (IOException e1) {\n+                throw new EpsonProjectorException(e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void serialEvent(SerialPortEvent arg0) {\n+    }\n+\n+    private String sendMmsg(String data, int timeout) throws IOException, EpsonProjectorException {\n+        String resp = \"\";\n+\n+        InputStream in = this.in;\n+        OutputStream out = this.out;\n+\n+        if (in != null && out != null) {\n+            out.write(data.getBytes());\n+            out.write(\"\\r\\n\".getBytes());", "originalCommit": "82d573a5f13193fafe2c2d8c60d913289326329b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxMjU5MA==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r530712590", "bodyText": "fixed", "author": "mlobstein", "createdAt": "2020-11-26T00:51:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwMzIxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwMzM1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r530603352", "bodyText": "same here", "author": "cpmeister", "createdAt": "2020-11-25T19:37:04Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/connector/EpsonProjectorTcpConnector.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.connector;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.Socket;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector for TCP communication.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorTcpConnector implements EpsonProjectorConnector {\n+\n+    private final Logger logger = LoggerFactory.getLogger(EpsonProjectorTcpConnector.class);\n+    private final String ip;\n+    private final int port;\n+\n+    private @Nullable Socket socket = null;\n+    private @Nullable InputStream in = null;\n+    private @Nullable OutputStream out = null;\n+\n+    public EpsonProjectorTcpConnector(String ip, int port) {\n+        this.ip = ip;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void connect() throws EpsonProjectorException {\n+        logger.debug(\"Open connection to address'{}:{}'\", ip, port);\n+\n+        try {\n+            Socket socket = new Socket(ip, port);\n+            this.socket = socket;\n+            in = socket.getInputStream();\n+            out = socket.getOutputStream();\n+        } catch (IOException e) {\n+            throw new EpsonProjectorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void disconnect() throws EpsonProjectorException {\n+        OutputStream out = this.out;\n+\n+        if (out != null) {\n+            logger.debug(\"Close tcp out stream\");\n+            try {\n+                out.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error occurred when closing tcp out stream: {}\", e.getMessage());\n+            }\n+        }\n+\n+        InputStream in = this.in;\n+        if (in != null) {\n+            logger.debug(\"Close tcp in stream\");\n+            try {\n+                in.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error occurred when closing tcp in stream: {}\", e.getMessage());\n+            }\n+        }\n+\n+        Socket socket = this.socket;\n+        if (socket != null) {\n+            logger.debug(\"Closing socket\");\n+            try {\n+                socket.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error occurred when closing tcp socket: {}\", e.getMessage());\n+            }\n+        }\n+\n+        this.socket = null;\n+        this.out = null;\n+        this.in = null;\n+\n+        logger.debug(\"Closed\");\n+    }\n+\n+    @Override\n+    public String sendMessage(String data, int timeout) throws EpsonProjectorException {\n+        InputStream in = this.in;\n+        OutputStream out = this.out;\n+\n+        if (in == null || out == null) {\n+            connect();\n+            in = this.in;\n+            out = this.out;\n+        }\n+\n+        try {\n+            if (in != null) {\n+                // flush input stream\n+                if (in.markSupported()) {\n+                    in.reset();\n+                } else {\n+                    while (in.available() > 0) {\n+                        int availableBytes = in.available();\n+\n+                        if (availableBytes > 0) {\n+                            byte[] tmpData = new byte[availableBytes];\n+                            in.read(tmpData, 0, availableBytes);\n+                        }\n+                    }\n+                }\n+                return sendMmsg(data, timeout);\n+            } else {\n+                return \"\";\n+            }\n+        } catch (IOException e) {\n+            logger.debug(\"IO error occurred...reconnect and resend once: {}\", e.getMessage());\n+            disconnect();\n+            connect();\n+\n+            try {\n+                return sendMmsg(data, timeout);\n+            } catch (IOException e1) {\n+                throw new EpsonProjectorException(e);\n+            }\n+        }\n+    }\n+\n+    private String sendMmsg(String data, int timeout) throws IOException, EpsonProjectorException {\n+        String resp = \"\";\n+\n+        InputStream in = this.in;\n+        OutputStream out = this.out;\n+\n+        if (in != null && out != null) {\n+            out.write(data.getBytes());\n+            out.write(\"\\r\\n\".getBytes());", "originalCommit": "82d573a5f13193fafe2c2d8c60d913289326329b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwNDExMA==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r530604110", "bodyText": "You only seem to write characters to these streams. Why not make these a Reader and Writer instead?", "author": "cpmeister", "createdAt": "2020-11-25T19:38:51Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/connector/EpsonProjectorTcpConnector.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.connector;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.Socket;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector for TCP communication.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorTcpConnector implements EpsonProjectorConnector {\n+\n+    private final Logger logger = LoggerFactory.getLogger(EpsonProjectorTcpConnector.class);\n+    private final String ip;\n+    private final int port;\n+\n+    private @Nullable Socket socket = null;\n+    private @Nullable InputStream in = null;\n+    private @Nullable OutputStream out = null;", "originalCommit": "82d573a5f13193fafe2c2d8c60d913289326329b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMDI3MA==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r530730270", "bodyText": "I had not considered this since the code was already written and had been scrutinized by the above mentioned PRs.", "author": "mlobstein", "createdAt": "2020-11-26T01:56:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwNDExMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwNDQ4Mw==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r530604483", "bodyText": "same suggestion", "author": "cpmeister", "createdAt": "2020-11-25T19:39:38Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/connector/EpsonProjectorSerialConnector.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.connector;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorException;\n+import org.openhab.core.io.transport.serial.PortInUseException;\n+import org.openhab.core.io.transport.serial.SerialPort;\n+import org.openhab.core.io.transport.serial.SerialPortEvent;\n+import org.openhab.core.io.transport.serial.SerialPortEventListener;\n+import org.openhab.core.io.transport.serial.SerialPortIdentifier;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.openhab.core.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector for serial port communication.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorSerialConnector implements EpsonProjectorConnector, SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(EpsonProjectorSerialConnector.class);\n+    private final String serialPortName;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable InputStream in = null;\n+    private @Nullable OutputStream out = null;", "originalCommit": "82d573a5f13193fafe2c2d8c60d913289326329b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwNjIyMw==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r530606223", "bodyText": "How are you handling the case where multiple message are sent at the same time from multiple threads? Are you already preventing this from happening?", "author": "cpmeister", "createdAt": "2020-11-25T19:43:32Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/connector/EpsonProjectorSerialConnector.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.connector;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorException;\n+import org.openhab.core.io.transport.serial.PortInUseException;\n+import org.openhab.core.io.transport.serial.SerialPort;\n+import org.openhab.core.io.transport.serial.SerialPortEvent;\n+import org.openhab.core.io.transport.serial.SerialPortEventListener;\n+import org.openhab.core.io.transport.serial.SerialPortIdentifier;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.openhab.core.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector for serial port communication.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorSerialConnector implements EpsonProjectorConnector, SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(EpsonProjectorSerialConnector.class);\n+    private final String serialPortName;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable InputStream in = null;\n+    private @Nullable OutputStream out = null;\n+    private @Nullable SerialPort serialPort = null;\n+\n+    public EpsonProjectorSerialConnector(SerialPortManager serialPortManager, String serialPort) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPort;\n+    }\n+\n+    @Override\n+    public void connect() throws EpsonProjectorException {\n+        try {\n+            logger.debug(\"Open connection to serial port '{}'\", serialPortName);\n+\n+            SerialPortIdentifier serialPortIdentifier = serialPortManager.getIdentifier(serialPortName);\n+\n+            if (serialPortIdentifier == null) {\n+                throw new IOException(\"Unknown serial port\");\n+            }\n+            SerialPort serialPort = serialPortIdentifier.open(this.getClass().getName(), 2000);\n+            serialPort.setSerialPortParams(9600, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);\n+            serialPort.enableReceiveThreshold(1);\n+            serialPort.disableReceiveTimeout();\n+\n+            InputStream in = serialPort.getInputStream();\n+            OutputStream out = serialPort.getOutputStream();\n+\n+            if (in != null && out != null) {\n+                out.flush();\n+                if (in.markSupported()) {\n+                    in.reset();\n+                }\n+\n+                serialPort.notifyOnDataAvailable(true);\n+\n+                this.serialPort = serialPort;\n+                this.in = in;\n+                this.out = out;\n+            }\n+        } catch (PortInUseException | UnsupportedCommOperationException | IOException e) {\n+            throw new EpsonProjectorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void disconnect() throws EpsonProjectorException {\n+        InputStream in = this.in;\n+        OutputStream out = this.out;\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (out != null) {\n+            logger.debug(\"Close serial out stream\");\n+            try {\n+                out.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error occurred when closing serial out stream: {}\", e.getMessage());\n+            }\n+            this.out = null;\n+        }\n+        if (in != null) {\n+            logger.debug(\"Close serial in stream\");\n+            try {\n+                in.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error occurred when closing serial in stream: {}\", e.getMessage());\n+            }\n+            this.in = null;\n+        }\n+        if (serialPort != null) {\n+            logger.debug(\"Close serial port\");\n+            serialPort.close();\n+            serialPort.removeEventListener();\n+            this.serialPort = null;\n+        }\n+\n+        logger.debug(\"Closed\");\n+    }\n+\n+    @Override\n+    public String sendMessage(String data, int timeout) throws EpsonProjectorException {\n+        InputStream in = this.in;\n+        OutputStream out = this.out;\n+\n+        if (in == null || out == null) {\n+            connect();\n+            in = this.in;\n+            out = this.out;\n+        }\n+\n+        try {\n+            if (in != null && out != null) {\n+                // flush input stream\n+                if (in.markSupported()) {\n+                    in.reset();\n+                } else {\n+                    while (in.available() > 0) {\n+                        int availableBytes = in.available();\n+\n+                        if (availableBytes > 0) {\n+                            byte[] tmpData = new byte[availableBytes];\n+                            in.read(tmpData, 0, availableBytes);\n+                        }\n+                    }\n+                }\n+                return sendMmsg(data, timeout);\n+            } else {\n+                return \"\";\n+            }\n+        } catch (IOException e) {\n+            logger.debug(\"IO error occurred...reconnect and resend once: {}\", e.getMessage());\n+            disconnect();\n+            connect();\n+\n+            try {\n+                return sendMmsg(data, timeout);\n+            } catch (IOException e1) {\n+                throw new EpsonProjectorException(e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void serialEvent(SerialPortEvent arg0) {\n+    }\n+\n+    private String sendMmsg(String data, int timeout) throws IOException, EpsonProjectorException {", "originalCommit": "82d573a5f13193fafe2c2d8c60d913289326329b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxNDA3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r530714079", "bodyText": "It is called by sendQuery() which is a synchronized method... Is that sufficient?", "author": "mlobstein", "createdAt": "2020-11-26T00:56:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwNjIyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwMzMxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r532103319", "bodyText": "Looks sufficient, but it would be safer if you did the synchronization in this class instead. It looks safe enough as is though, so you don't have to change it.", "author": "cpmeister", "createdAt": "2020-11-28T20:30:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwNjIyMw=="}], "type": "inlineReview"}, {"oid": "49c93affa423294856379a52e9472c3efe19075c", "url": "https://github.com/openhab/openhab-addons/commit/49c93affa423294856379a52e9472c3efe19075c", "message": "Make connection specific thing types\n\nSigned-off-by: Michael Lobstein <michael.lobstein@gmail.com>", "committedDate": "2020-11-25T23:48:32Z", "type": "commit"}, {"oid": "f9154b08eaf1a956285695056d3208f186d60e25", "url": "https://github.com/openhab/openhab-addons/commit/f9154b08eaf1a956285695056d3208f186d60e25", "message": "Review changes\n\nSigned-off-by: Michael Lobstein <michael.lobstein@gmail.com>", "committedDate": "2020-11-26T00:49:48Z", "type": "commit"}, {"oid": "ebd4e49710f805ee79918eea57b1b6c3eea8db5d", "url": "https://github.com/openhab/openhab-addons/commit/ebd4e49710f805ee79918eea57b1b6c3eea8db5d", "message": "Review changes\n\nSigned-off-by: Michael Lobstein <michael.lobstein@gmail.com>", "committedDate": "2020-11-26T02:17:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwNDIwOA==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r531204208", "bodyText": "You should move this to initialize() method, otherwise user configuration changes are not taken in use.", "author": "paulianttila", "createdAt": "2020-11-26T19:45:27Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/handler/EpsonProjectorHandler.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.handler;\n+\n+import static org.openhab.binding.epsonprojector.internal.EpsonProjectorBindingConstants.*;\n+\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorCommandException;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorCommandType;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorDevice;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorException;\n+import org.openhab.binding.epsonprojector.internal.configuration.EpsonProjectorConfiguration;\n+import org.openhab.binding.epsonprojector.internal.enums.AspectRatio;\n+import org.openhab.binding.epsonprojector.internal.enums.Background;\n+import org.openhab.binding.epsonprojector.internal.enums.ColorMode;\n+import org.openhab.binding.epsonprojector.internal.enums.Gamma;\n+import org.openhab.binding.epsonprojector.internal.enums.Luminance;\n+import org.openhab.binding.epsonprojector.internal.enums.PowerStatus;\n+import org.openhab.binding.epsonprojector.internal.enums.Switch;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EpsonProjectorHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila, Yannick Schaus - Initial contribution\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorHandler extends BaseThingHandler {\n+    private static final int DEFAULT_POLLING_INTERVAL_SEC = 10;\n+\n+    private final Logger logger = LoggerFactory.getLogger(EpsonProjectorHandler.class);\n+\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private final EpsonProjectorDevice device;\n+\n+    private boolean isPowerOn = false;\n+    private int pollingInterval = DEFAULT_POLLING_INTERVAL_SEC;\n+\n+    public EpsonProjectorHandler(Thing thing, SerialPortManager serialPortManager) {\n+        super(thing);\n+\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+        if (THING_TYPE_PROJECTOR_SERIAL.equals(thingTypeUID)) {\n+            device = new EpsonProjectorDevice(serialPortManager, getConfigAs(EpsonProjectorConfiguration.class));\n+        } else {\n+            device = new EpsonProjectorDevice(getConfigAs(EpsonProjectorConfiguration.class));\n+        }", "originalCommit": "ebd4e49710f805ee79918eea57b1b6c3eea8db5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIyMDAyNw==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r531220027", "bodyText": "Hmm, but then device still needs to be set to something here to satisfy the notnullbydefault. And EpsonProjectorDevice needs a connector in the constructor which is why I had done the EpsonProjectorDefaultConnector.", "author": "mlobstein", "createdAt": "2020-11-26T20:49:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwNDIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIyNDg5OA==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r531224898", "bodyText": "Well, notnullbydefault just forces you to think which field can be null and which not. In this case device can't be initialised or be final as it depends on the thing configuration an it can change during thing life time.\nSo it should be fine to be nullable\nprivate @Nullable EpsonProjectorDevice device;\nor if you want to avoid nulls, you could make it optional\nprivate Optional<EpsonProjectorDevice> device = Optional.empty();", "author": "paulianttila", "createdAt": "2020-11-26T21:09:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwNDIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM0MTk3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r531341975", "bodyText": "OK, fixed (using Optional).", "author": "mlobstein", "createdAt": "2020-11-27T02:08:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwNDIwOA=="}], "type": "inlineReview"}, {"oid": "478de5b3929b43610d36f46c588442cc7e619f82", "url": "https://github.com/openhab/openhab-addons/commit/478de5b3929b43610d36f46c588442cc7e619f82", "message": "Review changes\n\nSigned-off-by: Michael Lobstein <michael.lobstein@gmail.com>", "committedDate": "2020-11-27T02:07:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNDIxOA==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r532104218", "bodyText": "Since you connect automatically as part of the pollingJob, I don't think you need to attempt connecting here. But you should at least set the initial status to unknown so that the handler is marked as initialized.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    device.ifPresent(dev -> {\n          \n          \n            \n                        try {\n          \n          \n            \n                            dev.connect();\n          \n          \n            \n                        } catch (EpsonProjectorException e) {\n          \n          \n            \n                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n          \n          \n            \n                        }\n          \n          \n            \n                    });\n          \n          \n            \n                    updateStatus(ThingStatus.UNKNOWN);", "author": "cpmeister", "createdAt": "2020-11-28T20:40:00Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/handler/EpsonProjectorHandler.java", "diffHunk": "@@ -0,0 +1,425 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.handler;\n+\n+import static org.openhab.binding.epsonprojector.internal.EpsonProjectorBindingConstants.*;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorCommandException;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorCommandType;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorDevice;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorException;\n+import org.openhab.binding.epsonprojector.internal.configuration.EpsonProjectorConfiguration;\n+import org.openhab.binding.epsonprojector.internal.enums.AspectRatio;\n+import org.openhab.binding.epsonprojector.internal.enums.Background;\n+import org.openhab.binding.epsonprojector.internal.enums.ColorMode;\n+import org.openhab.binding.epsonprojector.internal.enums.Gamma;\n+import org.openhab.binding.epsonprojector.internal.enums.Luminance;\n+import org.openhab.binding.epsonprojector.internal.enums.PowerStatus;\n+import org.openhab.binding.epsonprojector.internal.enums.Switch;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EpsonProjectorHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila, Yannick Schaus - Initial contribution\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorHandler extends BaseThingHandler {\n+    private static final int DEFAULT_POLLING_INTERVAL_SEC = 10;\n+\n+    private final Logger logger = LoggerFactory.getLogger(EpsonProjectorHandler.class);\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private Optional<EpsonProjectorDevice> device = Optional.empty();\n+\n+    private boolean isPowerOn = false;\n+    private int pollingInterval = DEFAULT_POLLING_INTERVAL_SEC;\n+\n+    public EpsonProjectorHandler(Thing thing, SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            Channel channel = this.thing.getChannel(channelUID);\n+            if (channel != null) {\n+                updateChannelState(channel);\n+            }\n+        } else {\n+            EpsonProjectorCommandType epsonCommand = EpsonProjectorCommandType.getCommandType(channelId);\n+            sendDataToDevice(epsonCommand, command);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        EpsonProjectorConfiguration config = getConfigAs(EpsonProjectorConfiguration.class);\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        if (THING_TYPE_PROJECTOR_SERIAL.equals(thingTypeUID)) {\n+            device = Optional.of(new EpsonProjectorDevice(serialPortManager, config));\n+        } else if (THING_TYPE_PROJECTOR_TCP.equals(thingTypeUID)) {\n+            device = Optional.of(new EpsonProjectorDevice(config));\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        pollingInterval = config.pollingInterval;\n+        device.ifPresent(dev -> dev.setScheduler(scheduler));\n+        device.ifPresent(dev -> {\n+            try {\n+                dev.connect();\n+            } catch (EpsonProjectorException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            }\n+        });", "originalCommit": "478de5b3929b43610d36f46c588442cc7e619f82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjExOTUyNg==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r532119526", "bodyText": "fixed", "author": "mlobstein", "createdAt": "2020-11-28T23:38:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNDIxOA=="}], "type": "inlineReview"}, {"oid": "116e25bd698cd6ab804a0fb01ae41f42e0cf491d", "url": "https://github.com/openhab/openhab-addons/commit/116e25bd698cd6ab804a0fb01ae41f42e0cf491d", "message": "Review changes\n\nSigned-off-by: Michael Lobstein <michael.lobstein@gmail.com>", "committedDate": "2020-11-28T23:36:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE1MDY1NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r532150655", "bodyText": "You need to keep track of the Future this returns so you can cancel it during disconnect.", "author": "cpmeister", "createdAt": "2020-11-29T03:50:17Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/EpsonProjectorDevice.java", "diffHunk": "@@ -0,0 +1,621 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.configuration.EpsonProjectorConfiguration;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorConnector;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorSerialConnector;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorTcpConnector;\n+import org.openhab.binding.epsonprojector.internal.enums.AspectRatio;\n+import org.openhab.binding.epsonprojector.internal.enums.Background;\n+import org.openhab.binding.epsonprojector.internal.enums.ColorMode;\n+import org.openhab.binding.epsonprojector.internal.enums.ErrorMessage;\n+import org.openhab.binding.epsonprojector.internal.enums.Gamma;\n+import org.openhab.binding.epsonprojector.internal.enums.Luminance;\n+import org.openhab.binding.epsonprojector.internal.enums.PowerStatus;\n+import org.openhab.binding.epsonprojector.internal.enums.Switch;\n+import org.openhab.core.cache.ExpiringCache;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Provide high level interface to Epson projector.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ * @author Yannick Schaus - Refactoring\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorDevice {\n+    private static final int[] MAP64 = new int[] { 0, 3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51, 55, 59, 63, 66,\n+            70, 74, 78, 82, 86, 90, 94, 98, 102, 106, 110, 114, 118, 122, 126, 129, 133, 137, 141, 145, 149, 153, 157,\n+            161, 165, 169, 173, 177, 181, 185, 189, 192, 196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 236, 240,\n+            244, 248, 252 };\n+\n+    private static final int[] MAP60 = new int[] { 0, 4, 8, 12, 16, 20, 25, 29, 33, 37, 41, 46, 50, 54, 58, 62, 67, 71,\n+            75, 79, 83, 88, 92, 96, 100, 104, 109, 113, 117, 121, 125, 130, 134, 138, 142, 146, 151, 155, 159, 163, 167,\n+            172, 176, 180, 184, 188, 193, 197, 201, 205, 209, 214, 218, 222, 226, 230, 235, 239, 243, 247, 251 };\n+\n+    private static final int[] MAP49 = new int[] { 0, 5, 10, 15, 20, 25, 30, 35, 40, 46, 51, 56, 61, 66, 71, 76, 81, 87,\n+            92, 97, 102, 107, 112, 117, 122, 128, 133, 138, 143, 148, 153, 158, 163, 168, 174, 179, 184, 189, 194, 199,\n+            204, 209, 215, 220, 225, 230, 235, 240, 245, 250 };\n+\n+    private static final int[] MAP48 = new int[] { 0, 5, 10, 15, 20, 26, 31, 36, 41, 47, 52, 57, 62, 67, 73, 78, 83, 88,\n+            94, 99, 104, 109, 114, 120, 125, 130, 135, 141, 146, 151, 156, 161, 167, 172, 177, 182, 188, 193, 198, 203,\n+            208, 214, 219, 224, 229, 235, 240, 245, 250 };\n+\n+    private static final int[] MAP20 = new int[] { 0, 12, 24, 36, 48, 60, 73, 85, 97, 109, 121, 134, 146, 158, 170, 182,\n+            195, 207, 219, 231, 243 };\n+\n+    private static final int[] MAP18 = new int[] { 0, 13, 26, 40, 53, 67, 80, 94, 107, 121, 134, 148, 161, 175, 188,\n+            202, 215, 229, 242 };\n+\n+    private static final int[] MAP_COLOR_TEMP = new int[] { 0, 25, 51, 76, 102, 128, 153, 179, 204, 230 };\n+    private static final int[] MAP_FLESH_COLOR = new int[] { 0, 36, 73, 109, 146, 182, 219 };\n+\n+    private static final int DEFAULT_TIMEOUT = 5 * 1000;\n+    private static final int POWER_ON_TIMEOUT = 100 * 1000;\n+    private static final int POWER_OFF_TIMEOUT = 130 * 1000;\n+    private static final int LAMP_REFRESH_WAIT_MINUTES = 5;\n+\n+    private static final String ON = \"ON\";\n+    private static final String ERR = \"ERR\";\n+\n+    private Logger logger = LoggerFactory.getLogger(EpsonProjectorDevice.class);\n+\n+    @Nullable\n+    private ScheduledExecutorService scheduler = null;\n+    private EpsonProjectorConnector connection;\n+    private ExpiringCache<Integer> cachedLampHours = new ExpiringCache<>(Duration.ofMinutes(LAMP_REFRESH_WAIT_MINUTES),\n+            this::queryLamp);\n+    private boolean connected = false;\n+    private boolean ready = false;\n+\n+    public EpsonProjectorDevice(SerialPortManager serialPortManager, EpsonProjectorConfiguration config) {\n+        connection = new EpsonProjectorSerialConnector(serialPortManager, config.serialPort);\n+        ready = true;\n+    }\n+\n+    public EpsonProjectorDevice(EpsonProjectorConfiguration config) {\n+        connection = new EpsonProjectorTcpConnector(config.host, config.port);\n+        ready = true;\n+    }\n+\n+    public boolean isReady() {\n+        return ready;\n+    }\n+\n+    public void setScheduler(ScheduledExecutorService scheduler) {\n+        this.scheduler = scheduler;\n+    }\n+\n+    private synchronized @Nullable String sendQuery(String query, int timeout)\n+            throws EpsonProjectorCommandException, EpsonProjectorException {\n+        logger.debug(\"Query: '{}'\", query);\n+        String response = connection.sendMessage(query, timeout);\n+\n+        if (response.length() == 0) {\n+            throw new EpsonProjectorException(\"No response received\");\n+        }\n+\n+        response = response.replace(\"\\r:\", \"\");\n+        logger.debug(\"Response: '{}'\", response);\n+\n+        if (ERR.equals(response)) {\n+            throw new EpsonProjectorCommandException(\"Error response received for command: \" + query);\n+        }\n+\n+        if (\"PWR OFF\".equals(query) && \":\".equals(response)) {\n+            // When PWR OFF command is sent, next command can be sent 10 seconds after the colon is received\n+            logger.debug(\"Refusing further commands for 10 seconds to power OFF completion\");\n+            ready = false;\n+            ScheduledExecutorService scheduler = this.scheduler;\n+            if (scheduler != null) {\n+                scheduler.scheduleWithFixedDelay(() -> {\n+                    ready = true;\n+                }, 0, 10000, TimeUnit.MILLISECONDS);", "originalCommit": "116e25bd698cd6ab804a0fb01ae41f42e0cf491d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE1ODAxMg==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r532158012", "bodyText": "I think this was put in to get rid of a 10 second thread.sleep(). It should only be a one time delay for 10 seconds before setting ready back to true, so I changed it to schedule() instead.", "author": "mlobstein", "createdAt": "2020-11-29T05:25:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE1MDY1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2NDUwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r532164501", "bodyText": "You still need to track the future so you can cancel it if the handler is disposed before 10 seconds expires.", "author": "cpmeister", "createdAt": "2020-11-29T06:45:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE1MDY1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE5NzI2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r532197267", "bodyText": "I think there's a glitch in the Matrix #9021 (comment)", "author": "fwolter", "createdAt": "2020-11-29T11:41:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE1MDY1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIzMDU3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r532230576", "bodyText": "I made it cancel on disconnect.", "author": "mlobstein", "createdAt": "2020-11-29T16:10:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE1MDY1NQ=="}], "type": "inlineReview"}, {"oid": "18b48503ad4876576018691de0da9101dcc43bae", "url": "https://github.com/openhab/openhab-addons/commit/18b48503ad4876576018691de0da9101dcc43bae", "message": "Review changes\n\nSigned-off-by: Michael Lobstein <michael.lobstein@gmail.com>", "committedDate": "2020-11-29T05:18:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2NDk5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r532164995", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                private ScheduledExecutorService scheduler = null;\n          \n          \n            \n                private @NullableScheduledExecutorService scheduler = null;", "author": "cpmeister", "createdAt": "2020-11-29T06:50:51Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/EpsonProjectorDevice.java", "diffHunk": "@@ -0,0 +1,621 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.configuration.EpsonProjectorConfiguration;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorConnector;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorSerialConnector;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorTcpConnector;\n+import org.openhab.binding.epsonprojector.internal.enums.AspectRatio;\n+import org.openhab.binding.epsonprojector.internal.enums.Background;\n+import org.openhab.binding.epsonprojector.internal.enums.ColorMode;\n+import org.openhab.binding.epsonprojector.internal.enums.ErrorMessage;\n+import org.openhab.binding.epsonprojector.internal.enums.Gamma;\n+import org.openhab.binding.epsonprojector.internal.enums.Luminance;\n+import org.openhab.binding.epsonprojector.internal.enums.PowerStatus;\n+import org.openhab.binding.epsonprojector.internal.enums.Switch;\n+import org.openhab.core.cache.ExpiringCache;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Provide high level interface to Epson projector.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ * @author Yannick Schaus - Refactoring\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorDevice {\n+    private static final int[] MAP64 = new int[] { 0, 3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51, 55, 59, 63, 66,\n+            70, 74, 78, 82, 86, 90, 94, 98, 102, 106, 110, 114, 118, 122, 126, 129, 133, 137, 141, 145, 149, 153, 157,\n+            161, 165, 169, 173, 177, 181, 185, 189, 192, 196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 236, 240,\n+            244, 248, 252 };\n+\n+    private static final int[] MAP60 = new int[] { 0, 4, 8, 12, 16, 20, 25, 29, 33, 37, 41, 46, 50, 54, 58, 62, 67, 71,\n+            75, 79, 83, 88, 92, 96, 100, 104, 109, 113, 117, 121, 125, 130, 134, 138, 142, 146, 151, 155, 159, 163, 167,\n+            172, 176, 180, 184, 188, 193, 197, 201, 205, 209, 214, 218, 222, 226, 230, 235, 239, 243, 247, 251 };\n+\n+    private static final int[] MAP49 = new int[] { 0, 5, 10, 15, 20, 25, 30, 35, 40, 46, 51, 56, 61, 66, 71, 76, 81, 87,\n+            92, 97, 102, 107, 112, 117, 122, 128, 133, 138, 143, 148, 153, 158, 163, 168, 174, 179, 184, 189, 194, 199,\n+            204, 209, 215, 220, 225, 230, 235, 240, 245, 250 };\n+\n+    private static final int[] MAP48 = new int[] { 0, 5, 10, 15, 20, 26, 31, 36, 41, 47, 52, 57, 62, 67, 73, 78, 83, 88,\n+            94, 99, 104, 109, 114, 120, 125, 130, 135, 141, 146, 151, 156, 161, 167, 172, 177, 182, 188, 193, 198, 203,\n+            208, 214, 219, 224, 229, 235, 240, 245, 250 };\n+\n+    private static final int[] MAP20 = new int[] { 0, 12, 24, 36, 48, 60, 73, 85, 97, 109, 121, 134, 146, 158, 170, 182,\n+            195, 207, 219, 231, 243 };\n+\n+    private static final int[] MAP18 = new int[] { 0, 13, 26, 40, 53, 67, 80, 94, 107, 121, 134, 148, 161, 175, 188,\n+            202, 215, 229, 242 };\n+\n+    private static final int[] MAP_COLOR_TEMP = new int[] { 0, 25, 51, 76, 102, 128, 153, 179, 204, 230 };\n+    private static final int[] MAP_FLESH_COLOR = new int[] { 0, 36, 73, 109, 146, 182, 219 };\n+\n+    private static final int DEFAULT_TIMEOUT = 5 * 1000;\n+    private static final int POWER_ON_TIMEOUT = 100 * 1000;\n+    private static final int POWER_OFF_TIMEOUT = 130 * 1000;\n+    private static final int LAMP_REFRESH_WAIT_MINUTES = 5;\n+\n+    private static final String ON = \"ON\";\n+    private static final String ERR = \"ERR\";\n+\n+    private Logger logger = LoggerFactory.getLogger(EpsonProjectorDevice.class);\n+\n+    @Nullable\n+    private ScheduledExecutorService scheduler = null;", "originalCommit": "18b48503ad4876576018691de0da9101dcc43bae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2NTAyNA==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r532165024", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Logger logger = LoggerFactory.getLogger(EpsonProjectorDevice.class);\n          \n          \n            \n                private final Logger logger = LoggerFactory.getLogger(EpsonProjectorDevice.class);", "author": "cpmeister", "createdAt": "2020-11-29T06:51:17Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/EpsonProjectorDevice.java", "diffHunk": "@@ -0,0 +1,621 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.configuration.EpsonProjectorConfiguration;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorConnector;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorSerialConnector;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorTcpConnector;\n+import org.openhab.binding.epsonprojector.internal.enums.AspectRatio;\n+import org.openhab.binding.epsonprojector.internal.enums.Background;\n+import org.openhab.binding.epsonprojector.internal.enums.ColorMode;\n+import org.openhab.binding.epsonprojector.internal.enums.ErrorMessage;\n+import org.openhab.binding.epsonprojector.internal.enums.Gamma;\n+import org.openhab.binding.epsonprojector.internal.enums.Luminance;\n+import org.openhab.binding.epsonprojector.internal.enums.PowerStatus;\n+import org.openhab.binding.epsonprojector.internal.enums.Switch;\n+import org.openhab.core.cache.ExpiringCache;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Provide high level interface to Epson projector.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ * @author Yannick Schaus - Refactoring\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorDevice {\n+    private static final int[] MAP64 = new int[] { 0, 3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51, 55, 59, 63, 66,\n+            70, 74, 78, 82, 86, 90, 94, 98, 102, 106, 110, 114, 118, 122, 126, 129, 133, 137, 141, 145, 149, 153, 157,\n+            161, 165, 169, 173, 177, 181, 185, 189, 192, 196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 236, 240,\n+            244, 248, 252 };\n+\n+    private static final int[] MAP60 = new int[] { 0, 4, 8, 12, 16, 20, 25, 29, 33, 37, 41, 46, 50, 54, 58, 62, 67, 71,\n+            75, 79, 83, 88, 92, 96, 100, 104, 109, 113, 117, 121, 125, 130, 134, 138, 142, 146, 151, 155, 159, 163, 167,\n+            172, 176, 180, 184, 188, 193, 197, 201, 205, 209, 214, 218, 222, 226, 230, 235, 239, 243, 247, 251 };\n+\n+    private static final int[] MAP49 = new int[] { 0, 5, 10, 15, 20, 25, 30, 35, 40, 46, 51, 56, 61, 66, 71, 76, 81, 87,\n+            92, 97, 102, 107, 112, 117, 122, 128, 133, 138, 143, 148, 153, 158, 163, 168, 174, 179, 184, 189, 194, 199,\n+            204, 209, 215, 220, 225, 230, 235, 240, 245, 250 };\n+\n+    private static final int[] MAP48 = new int[] { 0, 5, 10, 15, 20, 26, 31, 36, 41, 47, 52, 57, 62, 67, 73, 78, 83, 88,\n+            94, 99, 104, 109, 114, 120, 125, 130, 135, 141, 146, 151, 156, 161, 167, 172, 177, 182, 188, 193, 198, 203,\n+            208, 214, 219, 224, 229, 235, 240, 245, 250 };\n+\n+    private static final int[] MAP20 = new int[] { 0, 12, 24, 36, 48, 60, 73, 85, 97, 109, 121, 134, 146, 158, 170, 182,\n+            195, 207, 219, 231, 243 };\n+\n+    private static final int[] MAP18 = new int[] { 0, 13, 26, 40, 53, 67, 80, 94, 107, 121, 134, 148, 161, 175, 188,\n+            202, 215, 229, 242 };\n+\n+    private static final int[] MAP_COLOR_TEMP = new int[] { 0, 25, 51, 76, 102, 128, 153, 179, 204, 230 };\n+    private static final int[] MAP_FLESH_COLOR = new int[] { 0, 36, 73, 109, 146, 182, 219 };\n+\n+    private static final int DEFAULT_TIMEOUT = 5 * 1000;\n+    private static final int POWER_ON_TIMEOUT = 100 * 1000;\n+    private static final int POWER_OFF_TIMEOUT = 130 * 1000;\n+    private static final int LAMP_REFRESH_WAIT_MINUTES = 5;\n+\n+    private static final String ON = \"ON\";\n+    private static final String ERR = \"ERR\";\n+\n+    private Logger logger = LoggerFactory.getLogger(EpsonProjectorDevice.class);", "originalCommit": "18b48503ad4876576018691de0da9101dcc43bae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2NTExNA==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r532165114", "bodyText": "Just set it to true in the declaration above so you don't have to do it here.", "author": "cpmeister", "createdAt": "2020-11-29T06:52:19Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/EpsonProjectorDevice.java", "diffHunk": "@@ -0,0 +1,621 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.configuration.EpsonProjectorConfiguration;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorConnector;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorSerialConnector;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorTcpConnector;\n+import org.openhab.binding.epsonprojector.internal.enums.AspectRatio;\n+import org.openhab.binding.epsonprojector.internal.enums.Background;\n+import org.openhab.binding.epsonprojector.internal.enums.ColorMode;\n+import org.openhab.binding.epsonprojector.internal.enums.ErrorMessage;\n+import org.openhab.binding.epsonprojector.internal.enums.Gamma;\n+import org.openhab.binding.epsonprojector.internal.enums.Luminance;\n+import org.openhab.binding.epsonprojector.internal.enums.PowerStatus;\n+import org.openhab.binding.epsonprojector.internal.enums.Switch;\n+import org.openhab.core.cache.ExpiringCache;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Provide high level interface to Epson projector.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ * @author Yannick Schaus - Refactoring\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorDevice {\n+    private static final int[] MAP64 = new int[] { 0, 3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51, 55, 59, 63, 66,\n+            70, 74, 78, 82, 86, 90, 94, 98, 102, 106, 110, 114, 118, 122, 126, 129, 133, 137, 141, 145, 149, 153, 157,\n+            161, 165, 169, 173, 177, 181, 185, 189, 192, 196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 236, 240,\n+            244, 248, 252 };\n+\n+    private static final int[] MAP60 = new int[] { 0, 4, 8, 12, 16, 20, 25, 29, 33, 37, 41, 46, 50, 54, 58, 62, 67, 71,\n+            75, 79, 83, 88, 92, 96, 100, 104, 109, 113, 117, 121, 125, 130, 134, 138, 142, 146, 151, 155, 159, 163, 167,\n+            172, 176, 180, 184, 188, 193, 197, 201, 205, 209, 214, 218, 222, 226, 230, 235, 239, 243, 247, 251 };\n+\n+    private static final int[] MAP49 = new int[] { 0, 5, 10, 15, 20, 25, 30, 35, 40, 46, 51, 56, 61, 66, 71, 76, 81, 87,\n+            92, 97, 102, 107, 112, 117, 122, 128, 133, 138, 143, 148, 153, 158, 163, 168, 174, 179, 184, 189, 194, 199,\n+            204, 209, 215, 220, 225, 230, 235, 240, 245, 250 };\n+\n+    private static final int[] MAP48 = new int[] { 0, 5, 10, 15, 20, 26, 31, 36, 41, 47, 52, 57, 62, 67, 73, 78, 83, 88,\n+            94, 99, 104, 109, 114, 120, 125, 130, 135, 141, 146, 151, 156, 161, 167, 172, 177, 182, 188, 193, 198, 203,\n+            208, 214, 219, 224, 229, 235, 240, 245, 250 };\n+\n+    private static final int[] MAP20 = new int[] { 0, 12, 24, 36, 48, 60, 73, 85, 97, 109, 121, 134, 146, 158, 170, 182,\n+            195, 207, 219, 231, 243 };\n+\n+    private static final int[] MAP18 = new int[] { 0, 13, 26, 40, 53, 67, 80, 94, 107, 121, 134, 148, 161, 175, 188,\n+            202, 215, 229, 242 };\n+\n+    private static final int[] MAP_COLOR_TEMP = new int[] { 0, 25, 51, 76, 102, 128, 153, 179, 204, 230 };\n+    private static final int[] MAP_FLESH_COLOR = new int[] { 0, 36, 73, 109, 146, 182, 219 };\n+\n+    private static final int DEFAULT_TIMEOUT = 5 * 1000;\n+    private static final int POWER_ON_TIMEOUT = 100 * 1000;\n+    private static final int POWER_OFF_TIMEOUT = 130 * 1000;\n+    private static final int LAMP_REFRESH_WAIT_MINUTES = 5;\n+\n+    private static final String ON = \"ON\";\n+    private static final String ERR = \"ERR\";\n+\n+    private Logger logger = LoggerFactory.getLogger(EpsonProjectorDevice.class);\n+\n+    @Nullable\n+    private ScheduledExecutorService scheduler = null;\n+    private EpsonProjectorConnector connection;\n+    private ExpiringCache<Integer> cachedLampHours = new ExpiringCache<>(Duration.ofMinutes(LAMP_REFRESH_WAIT_MINUTES),\n+            this::queryLamp);\n+    private boolean connected = false;\n+    private boolean ready = false;\n+\n+    public EpsonProjectorDevice(SerialPortManager serialPortManager, EpsonProjectorConfiguration config) {\n+        connection = new EpsonProjectorSerialConnector(serialPortManager, config.serialPort);\n+        ready = true;", "originalCommit": "18b48503ad4876576018691de0da9101dcc43bae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2NTE3OA==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r532165178", "bodyText": "same comment", "author": "cpmeister", "createdAt": "2020-11-29T06:53:14Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/EpsonProjectorDevice.java", "diffHunk": "@@ -0,0 +1,621 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.configuration.EpsonProjectorConfiguration;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorConnector;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorSerialConnector;\n+import org.openhab.binding.epsonprojector.internal.connector.EpsonProjectorTcpConnector;\n+import org.openhab.binding.epsonprojector.internal.enums.AspectRatio;\n+import org.openhab.binding.epsonprojector.internal.enums.Background;\n+import org.openhab.binding.epsonprojector.internal.enums.ColorMode;\n+import org.openhab.binding.epsonprojector.internal.enums.ErrorMessage;\n+import org.openhab.binding.epsonprojector.internal.enums.Gamma;\n+import org.openhab.binding.epsonprojector.internal.enums.Luminance;\n+import org.openhab.binding.epsonprojector.internal.enums.PowerStatus;\n+import org.openhab.binding.epsonprojector.internal.enums.Switch;\n+import org.openhab.core.cache.ExpiringCache;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Provide high level interface to Epson projector.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ * @author Yannick Schaus - Refactoring\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorDevice {\n+    private static final int[] MAP64 = new int[] { 0, 3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51, 55, 59, 63, 66,\n+            70, 74, 78, 82, 86, 90, 94, 98, 102, 106, 110, 114, 118, 122, 126, 129, 133, 137, 141, 145, 149, 153, 157,\n+            161, 165, 169, 173, 177, 181, 185, 189, 192, 196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 236, 240,\n+            244, 248, 252 };\n+\n+    private static final int[] MAP60 = new int[] { 0, 4, 8, 12, 16, 20, 25, 29, 33, 37, 41, 46, 50, 54, 58, 62, 67, 71,\n+            75, 79, 83, 88, 92, 96, 100, 104, 109, 113, 117, 121, 125, 130, 134, 138, 142, 146, 151, 155, 159, 163, 167,\n+            172, 176, 180, 184, 188, 193, 197, 201, 205, 209, 214, 218, 222, 226, 230, 235, 239, 243, 247, 251 };\n+\n+    private static final int[] MAP49 = new int[] { 0, 5, 10, 15, 20, 25, 30, 35, 40, 46, 51, 56, 61, 66, 71, 76, 81, 87,\n+            92, 97, 102, 107, 112, 117, 122, 128, 133, 138, 143, 148, 153, 158, 163, 168, 174, 179, 184, 189, 194, 199,\n+            204, 209, 215, 220, 225, 230, 235, 240, 245, 250 };\n+\n+    private static final int[] MAP48 = new int[] { 0, 5, 10, 15, 20, 26, 31, 36, 41, 47, 52, 57, 62, 67, 73, 78, 83, 88,\n+            94, 99, 104, 109, 114, 120, 125, 130, 135, 141, 146, 151, 156, 161, 167, 172, 177, 182, 188, 193, 198, 203,\n+            208, 214, 219, 224, 229, 235, 240, 245, 250 };\n+\n+    private static final int[] MAP20 = new int[] { 0, 12, 24, 36, 48, 60, 73, 85, 97, 109, 121, 134, 146, 158, 170, 182,\n+            195, 207, 219, 231, 243 };\n+\n+    private static final int[] MAP18 = new int[] { 0, 13, 26, 40, 53, 67, 80, 94, 107, 121, 134, 148, 161, 175, 188,\n+            202, 215, 229, 242 };\n+\n+    private static final int[] MAP_COLOR_TEMP = new int[] { 0, 25, 51, 76, 102, 128, 153, 179, 204, 230 };\n+    private static final int[] MAP_FLESH_COLOR = new int[] { 0, 36, 73, 109, 146, 182, 219 };\n+\n+    private static final int DEFAULT_TIMEOUT = 5 * 1000;\n+    private static final int POWER_ON_TIMEOUT = 100 * 1000;\n+    private static final int POWER_OFF_TIMEOUT = 130 * 1000;\n+    private static final int LAMP_REFRESH_WAIT_MINUTES = 5;\n+\n+    private static final String ON = \"ON\";\n+    private static final String ERR = \"ERR\";\n+\n+    private Logger logger = LoggerFactory.getLogger(EpsonProjectorDevice.class);\n+\n+    @Nullable\n+    private ScheduledExecutorService scheduler = null;\n+    private EpsonProjectorConnector connection;\n+    private ExpiringCache<Integer> cachedLampHours = new ExpiringCache<>(Duration.ofMinutes(LAMP_REFRESH_WAIT_MINUTES),\n+            this::queryLamp);\n+    private boolean connected = false;\n+    private boolean ready = false;\n+\n+    public EpsonProjectorDevice(SerialPortManager serialPortManager, EpsonProjectorConfiguration config) {\n+        connection = new EpsonProjectorSerialConnector(serialPortManager, config.serialPort);\n+        ready = true;\n+    }\n+\n+    public EpsonProjectorDevice(EpsonProjectorConfiguration config) {\n+        connection = new EpsonProjectorTcpConnector(config.host, config.port);\n+        ready = true;", "originalCommit": "18b48503ad4876576018691de0da9101dcc43bae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2NTkwMg==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r532165902", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (state != null && this.getThing().getStatus() != ThingStatus.ONLINE) {\n          \n          \n            \n                            updateStatus(ThingStatus.ONLINE);\n          \n          \n            \n                        }\n          \n          \n            \n            \n          \n          \n            \n                        if (state != null && isLinked(channel.getUID())) {\n          \n          \n            \n                            updateState(channel.getUID(), state);\n          \n          \n            \n                        }\n          \n          \n            \n                        if (state != null){\n          \n          \n            \n                            updateStatus(ThingStatus.ONLINE);\n          \n          \n            \n                            if(isLinked(channel.getUID())){\n          \n          \n            \n                                updateState(channel.getUID(), state);\n          \n          \n            \n                            }\n          \n          \n            \n                        }", "author": "cpmeister", "createdAt": "2020-11-29T07:01:32Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/handler/EpsonProjectorHandler.java", "diffHunk": "@@ -0,0 +1,418 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.handler;\n+\n+import static org.openhab.binding.epsonprojector.internal.EpsonProjectorBindingConstants.*;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorCommandException;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorCommandType;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorDevice;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorException;\n+import org.openhab.binding.epsonprojector.internal.configuration.EpsonProjectorConfiguration;\n+import org.openhab.binding.epsonprojector.internal.enums.AspectRatio;\n+import org.openhab.binding.epsonprojector.internal.enums.Background;\n+import org.openhab.binding.epsonprojector.internal.enums.ColorMode;\n+import org.openhab.binding.epsonprojector.internal.enums.Gamma;\n+import org.openhab.binding.epsonprojector.internal.enums.Luminance;\n+import org.openhab.binding.epsonprojector.internal.enums.PowerStatus;\n+import org.openhab.binding.epsonprojector.internal.enums.Switch;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EpsonProjectorHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila, Yannick Schaus - Initial contribution\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorHandler extends BaseThingHandler {\n+    private static final int DEFAULT_POLLING_INTERVAL_SEC = 10;\n+\n+    private final Logger logger = LoggerFactory.getLogger(EpsonProjectorHandler.class);\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private Optional<EpsonProjectorDevice> device = Optional.empty();\n+\n+    private boolean isPowerOn = false;\n+    private int pollingInterval = DEFAULT_POLLING_INTERVAL_SEC;\n+\n+    public EpsonProjectorHandler(Thing thing, SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            Channel channel = this.thing.getChannel(channelUID);\n+            if (channel != null) {\n+                updateChannelState(channel);\n+            }\n+        } else {\n+            EpsonProjectorCommandType epsonCommand = EpsonProjectorCommandType.getCommandType(channelId);\n+            sendDataToDevice(epsonCommand, command);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        EpsonProjectorConfiguration config = getConfigAs(EpsonProjectorConfiguration.class);\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        if (THING_TYPE_PROJECTOR_SERIAL.equals(thingTypeUID)) {\n+            device = Optional.of(new EpsonProjectorDevice(serialPortManager, config));\n+        } else if (THING_TYPE_PROJECTOR_TCP.equals(thingTypeUID)) {\n+            device = Optional.of(new EpsonProjectorDevice(config));\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        pollingInterval = config.pollingInterval;\n+        device.ifPresent(dev -> dev.setScheduler(scheduler));\n+        updateStatus(ThingStatus.UNKNOWN);\n+        schedulePollingJob();\n+    }\n+\n+    /**\n+     * Schedule the polling job\n+     */\n+    private void schedulePollingJob() {\n+        cancelPollingJob();\n+\n+        pollingJob = scheduler.scheduleWithFixedDelay(() -> {\n+            List<Channel> channels = this.thing.getChannels();\n+            for (Channel channel : channels) {\n+                // only query power & lamp time when projector is off\n+                if (isPowerOn || (channel.getUID().getId().equals(CHANNEL_TYPE_POWER)\n+                        || channel.getUID().getId().equals(CHANNEL_TYPE_LAMPTIME))) {\n+                    updateChannelState(channel);\n+                }\n+            }\n+        }, 0, (pollingInterval > 0) ? pollingInterval : DEFAULT_POLLING_INTERVAL_SEC, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Cancel the polling job\n+     */\n+    private void cancelPollingJob() {\n+        ScheduledFuture<?> pollingJob = this.pollingJob;\n+        if (pollingJob != null) {\n+            pollingJob.cancel(true);\n+            this.pollingJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancelPollingJob();\n+        closeConnection();\n+        super.dispose();\n+    }\n+\n+    private void updateChannelState(Channel channel) {\n+        try {\n+            if (!isLinked(channel.getUID()) && !channel.getUID().getId().equals(CHANNEL_TYPE_POWER)) {\n+                return;\n+            }\n+\n+            EpsonProjectorCommandType epsonCommand = EpsonProjectorCommandType.getCommandType(channel.getUID().getId());\n+\n+            State state = queryDataFromDevice(epsonCommand);\n+\n+            if (state != null && this.getThing().getStatus() != ThingStatus.ONLINE) {\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+\n+            if (state != null && isLinked(channel.getUID())) {\n+                updateState(channel.getUID(), state);\n+            }", "originalCommit": "18b48503ad4876576018691de0da9101dcc43bae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIzNDE1MA==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r532234150", "bodyText": "fixed", "author": "mlobstein", "createdAt": "2020-11-29T16:38:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2NTkwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2NjAyOA==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r532166028", "bodyText": "power state will be queried even if the channel isn't linked?", "author": "cpmeister", "createdAt": "2020-11-29T07:03:11Z", "path": "bundles/org.openhab.binding.epsonprojector/src/main/java/org/openhab/binding/epsonprojector/internal/handler/EpsonProjectorHandler.java", "diffHunk": "@@ -0,0 +1,418 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.epsonprojector.internal.handler;\n+\n+import static org.openhab.binding.epsonprojector.internal.EpsonProjectorBindingConstants.*;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorCommandException;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorCommandType;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorDevice;\n+import org.openhab.binding.epsonprojector.internal.EpsonProjectorException;\n+import org.openhab.binding.epsonprojector.internal.configuration.EpsonProjectorConfiguration;\n+import org.openhab.binding.epsonprojector.internal.enums.AspectRatio;\n+import org.openhab.binding.epsonprojector.internal.enums.Background;\n+import org.openhab.binding.epsonprojector.internal.enums.ColorMode;\n+import org.openhab.binding.epsonprojector.internal.enums.Gamma;\n+import org.openhab.binding.epsonprojector.internal.enums.Luminance;\n+import org.openhab.binding.epsonprojector.internal.enums.PowerStatus;\n+import org.openhab.binding.epsonprojector.internal.enums.Switch;\n+import org.openhab.core.io.transport.serial.SerialPortManager;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EpsonProjectorHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila, Yannick Schaus - Initial contribution\n+ * @author Michael Lobstein - Improvements for OH3\n+ */\n+@NonNullByDefault\n+public class EpsonProjectorHandler extends BaseThingHandler {\n+    private static final int DEFAULT_POLLING_INTERVAL_SEC = 10;\n+\n+    private final Logger logger = LoggerFactory.getLogger(EpsonProjectorHandler.class);\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private Optional<EpsonProjectorDevice> device = Optional.empty();\n+\n+    private boolean isPowerOn = false;\n+    private int pollingInterval = DEFAULT_POLLING_INTERVAL_SEC;\n+\n+    public EpsonProjectorHandler(Thing thing, SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        if (command instanceof RefreshType) {\n+            Channel channel = this.thing.getChannel(channelUID);\n+            if (channel != null) {\n+                updateChannelState(channel);\n+            }\n+        } else {\n+            EpsonProjectorCommandType epsonCommand = EpsonProjectorCommandType.getCommandType(channelId);\n+            sendDataToDevice(epsonCommand, command);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        EpsonProjectorConfiguration config = getConfigAs(EpsonProjectorConfiguration.class);\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        if (THING_TYPE_PROJECTOR_SERIAL.equals(thingTypeUID)) {\n+            device = Optional.of(new EpsonProjectorDevice(serialPortManager, config));\n+        } else if (THING_TYPE_PROJECTOR_TCP.equals(thingTypeUID)) {\n+            device = Optional.of(new EpsonProjectorDevice(config));\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+\n+        pollingInterval = config.pollingInterval;\n+        device.ifPresent(dev -> dev.setScheduler(scheduler));\n+        updateStatus(ThingStatus.UNKNOWN);\n+        schedulePollingJob();\n+    }\n+\n+    /**\n+     * Schedule the polling job\n+     */\n+    private void schedulePollingJob() {\n+        cancelPollingJob();\n+\n+        pollingJob = scheduler.scheduleWithFixedDelay(() -> {\n+            List<Channel> channels = this.thing.getChannels();\n+            for (Channel channel : channels) {\n+                // only query power & lamp time when projector is off\n+                if (isPowerOn || (channel.getUID().getId().equals(CHANNEL_TYPE_POWER)\n+                        || channel.getUID().getId().equals(CHANNEL_TYPE_LAMPTIME))) {\n+                    updateChannelState(channel);\n+                }\n+            }\n+        }, 0, (pollingInterval > 0) ? pollingInterval : DEFAULT_POLLING_INTERVAL_SEC, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Cancel the polling job\n+     */\n+    private void cancelPollingJob() {\n+        ScheduledFuture<?> pollingJob = this.pollingJob;\n+        if (pollingJob != null) {\n+            pollingJob.cancel(true);\n+            this.pollingJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancelPollingJob();\n+        closeConnection();\n+        super.dispose();\n+    }\n+\n+    private void updateChannelState(Channel channel) {\n+        try {\n+            if (!isLinked(channel.getUID()) && !channel.getUID().getId().equals(CHANNEL_TYPE_POWER)) {", "originalCommit": "18b48503ad4876576018691de0da9101dcc43bae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIzMjU1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/9021#discussion_r532232551", "bodyText": "Yes for two reasons:\n\nIf no channels are linked, power is still checked as a ping of the device to set the status to ONLINE and later OFFLINE if the connection is lost.\nIn the edge case of the user not linking the power channel, the power status still needs to be known to properly set the isPowerOn boolean (ie: only PWR? and LAMP? queries can be done when the power is off, because all others would fail).", "author": "mlobstein", "createdAt": "2020-11-29T16:26:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2NjAyOA=="}], "type": "inlineReview"}, {"oid": "4519ee919133a330d28dafde35794d701de358d4", "url": "https://github.com/openhab/openhab-addons/commit/4519ee919133a330d28dafde35794d701de358d4", "message": "Review changes\n\nSigned-off-by: Michael Lobstein <michael.lobstein@gmail.com>", "committedDate": "2020-11-29T16:07:50Z", "type": "commit"}, {"oid": "bae2b80b8e13c5eb7596adce4687a617c7c59891", "url": "https://github.com/openhab/openhab-addons/commit/bae2b80b8e13c5eb7596adce4687a617c7c59891", "message": "Review changes\n\nSigned-off-by: Michael Lobstein <michael.lobstein@gmail.com>", "committedDate": "2020-11-29T16:36:44Z", "type": "commit"}]}