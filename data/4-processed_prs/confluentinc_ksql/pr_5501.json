{"pr_number": 5501, "pr_title": "feat: Adds udf regexp_split_to_array", "pr_createdAt": "2020-05-28T19:22:39Z", "pr_url": "https://github.com/confluentinc/ksql/pull/5501", "timeline": [{"oid": "b440e6e4bff9dc17e4098d640c8a5473ed2cd7f6", "url": "https://github.com/confluentinc/ksql/commit/b440e6e4bff9dc17e4098d640c8a5473ed2cd7f6", "message": "Historical plans", "committedDate": "2020-05-29T17:48:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE3MDgzMQ==", "url": "https://github.com/confluentinc/ksql/pull/5501#discussion_r433170831", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            then an empty space is added to the array.\n          \n          \n            \n            then an empty element is added to the array.\n          \n      \n    \n    \n  \n\n???", "author": "big-andy-coates", "createdAt": "2020-06-01T11:01:41Z", "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "diffHunk": "@@ -415,6 +415,24 @@ the entire substring is returned by default.\n For example, `REGEXP_EXTRACT(\"(.*) (.*)\", 'hello there', 2)`\n returns \"there\".\n \n+### `REGEXP_SPLIT`\n+\n+```sql\n+REGEXP_SPLIT(col1, 'a.b+')\n+```\n+\n+Splits a string into an array of substrings based\n+on a regular expression. If there is no match,\n+then the original string is returned as the only\n+element in the array. If the regular expression is empty,\n+then all characters in the string are split.\n+If either, string or regular expression, are NULL, then a\n+NULL value is returned.\n+\n+If the regular expression is found at the beginning or end\n+of the string, or there are contiguous delimiters,\n+then an empty space is added to the array.", "originalCommit": "b440e6e4bff9dc17e4098d640c8a5473ed2cd7f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE3MTE2Nw==", "url": "https://github.com/confluentinc/ksql/pull/5501#discussion_r433171167", "bodyText": "Add the bit about empty adding empty elements from the syntax-reference.md in here to?", "author": "big-andy-coates", "createdAt": "2020-06-01T11:02:27Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/RegexpSplit.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udf.string;\n+\n+import com.google.common.base.Splitter;\n+import io.confluent.ksql.function.KsqlFunctionException;\n+import io.confluent.ksql.function.udf.Udf;\n+import io.confluent.ksql.function.udf.UdfDescription;\n+import io.confluent.ksql.function.udf.UdfParameter;\n+import io.confluent.ksql.util.KsqlConstants;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.PatternSyntaxException;\n+\n+@UdfDescription(name = \"regexp_split\",\n+    author = KsqlConstants.CONFLUENT_AUTHOR,\n+    description = \"Splits a string into an array of substrings based on a regexp. \"\n+        + \"If the regexp is found at the beginning of the string, end of the string, or there \"\n+        + \"are contiguous matches in the string, then empty strings are added to the array. \"\n+        + \"If the regexp is not found, then the original string is returned as the only \"\n+        + \"element in the array. If the regexp is empty, then all characters in the string are \"\n+        + \"split.\")", "originalCommit": "b440e6e4bff9dc17e4098d640c8a5473ed2cd7f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5MDIxOA==", "url": "https://github.com/confluentinc/ksql/pull/5501#discussion_r433490218", "bodyText": "If the regexp is found at the beginning of the string, end of the string, or there\nare contiguous matches in the string, then empty strings are added to the array.\n\nIt's there in the beginning.", "author": "AlanConfluent", "createdAt": "2020-06-01T21:06:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE3MTE2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE3MjMzNQ==", "url": "https://github.com/confluentinc/ksql/pull/5501#discussion_r433172335", "bodyText": "compiling what might be the same pattern on every invocation ain't great, but I guess we can address this when we enhance the UDF framework to detect/support liternals.", "author": "big-andy-coates", "createdAt": "2020-06-01T11:05:09Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/RegexpSplit.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udf.string;\n+\n+import com.google.common.base.Splitter;\n+import io.confluent.ksql.function.KsqlFunctionException;\n+import io.confluent.ksql.function.udf.Udf;\n+import io.confluent.ksql.function.udf.UdfDescription;\n+import io.confluent.ksql.function.udf.UdfParameter;\n+import io.confluent.ksql.util.KsqlConstants;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.PatternSyntaxException;\n+\n+@UdfDescription(name = \"regexp_split\",\n+    author = KsqlConstants.CONFLUENT_AUTHOR,\n+    description = \"Splits a string into an array of substrings based on a regexp. \"\n+        + \"If the regexp is found at the beginning of the string, end of the string, or there \"\n+        + \"are contiguous matches in the string, then empty strings are added to the array. \"\n+        + \"If the regexp is not found, then the original string is returned as the only \"\n+        + \"element in the array. If the regexp is empty, then all characters in the string are \"\n+        + \"split.\")\n+public class RegexpSplit {\n+\n+  @Udf(description = \"Splits a string into an array of substrings based on a regexp.\")\n+  public List<String> regexpSplit(\n+      @UdfParameter(\n+          description = \"The string to be split. If NULL, then function returns NULL.\")\n+      final String string,\n+      @UdfParameter(\n+          description = \"The regular expression to split the string by. \"\n+              + \"If NULL, then function returns NULL.\")\n+      final String regexp) {\n+    if (string == null || regexp == null) {\n+      return null;\n+    }\n+\n+    // Use Guava version to be compatible with other splitting functions.\n+    final Pattern p = getPattern(regexp);\n+    if (regexp.isEmpty() || p.matcher(\"\").matches()) {\n+      return Arrays.asList(p.split(string));\n+    } else {\n+      return Splitter.on(p).splitToList(string);\n+    }\n+  }\n+\n+  private Pattern getPattern(final String regexp) {\n+    try {\n+      return Pattern.compile(regexp);", "originalCommit": "b440e6e4bff9dc17e4098d640c8a5473ed2cd7f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5MDk1MA==", "url": "https://github.com/confluentinc/ksql/pull/5501#discussion_r433490950", "bodyText": "Yeah, that seems reasonable since it would be great if the system knew that the same value would be passed in every time.", "author": "AlanConfluent", "createdAt": "2020-06-01T21:07:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE3MjMzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE3MjUzMw==", "url": "https://github.com/confluentinc/ksql/pull/5501#discussion_r433172533", "bodyText": "would be nice if this test case covered the second param being null.", "author": "big-andy-coates", "createdAt": "2020-06-01T11:05:33Z", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/split.json", "diffHunk": "@@ -84,6 +84,25 @@\n         {\"topic\": \"OUTPUT\", \"key\": \"3\", \"value\": {\"S1\": \"A\", \"S2\": \"A\"}, \"timestamp\": 0},\n         {\"topic\": \"OUTPUT\", \"key\": \"4\", \"value\": {\"S1\": \"1\", \"S2\": \"3\"}, \"timestamp\": 0}\n       ]\n+    },\n+    {\n+      \"name\": \"regexp_split\",\n+      \"statements\": [\n+        \"CREATE STREAM TEST (K STRING KEY, input_string VARCHAR) WITH (kafka_topic='test_topic', value_format='JSON');\",\n+        \"CREATE STREAM OUTPUT AS SELECT K, REGEXP_SPLIT(input_string, '(ab|cd)') AS EXTRACTED FROM TEST;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"test_topic\", \"value\": {\"input_string\": \"aabcda\"}},\n+        {\"topic\": \"test_topic\", \"value\": {\"input_string\": \"aabdcda\"}},\n+        {\"topic\": \"test_topic\", \"value\": {\"input_string\": \"zxy\"}},\n+        {\"topic\": \"test_topic\", \"value\": {\"input_string\": null}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"value\": {\"EXTRACTED\": [\"a\", \"\", \"a\"]}},\n+        {\"topic\": \"OUTPUT\", \"value\": {\"EXTRACTED\": [\"a\", \"d\", \"a\"]}},\n+        {\"topic\": \"OUTPUT\", \"value\": {\"EXTRACTED\": [\"zxy\"]}},\n+        {\"topic\": \"OUTPUT\", \"value\": {\"EXTRACTED\": null}}", "originalCommit": "b440e6e4bff9dc17e4098d640c8a5473ed2cd7f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUwMTA3Mg==", "url": "https://github.com/confluentinc/ksql/pull/5501#discussion_r433501072", "bodyText": "Done", "author": "AlanConfluent", "createdAt": "2020-06-01T21:29:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE3MjUzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQyNDA3MQ==", "url": "https://github.com/confluentinc/ksql/pull/5501#discussion_r433424071", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            then the original string is returned as the only\n          \n          \n            \n            the original string is returned as the only", "author": "JimGalasyn", "createdAt": "2020-06-01T18:52:05Z", "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "diffHunk": "@@ -415,6 +415,24 @@ the entire substring is returned by default.\n For example, `REGEXP_EXTRACT(\"(.*) (.*)\", 'hello there', 2)`\n returns \"there\".\n \n+### `REGEXP_SPLIT`\n+\n+```sql\n+REGEXP_SPLIT(col1, 'a.b+')\n+```\n+\n+Splits a string into an array of substrings based\n+on a regular expression. If there is no match,\n+then the original string is returned as the only", "originalCommit": "b440e6e4bff9dc17e4098d640c8a5473ed2cd7f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQyNDQ0Mg==", "url": "https://github.com/confluentinc/ksql/pull/5501#discussion_r433424442", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If either, string or regular expression, are NULL, then a\n          \n          \n            \n            If either the string or the regular expression is `NULL`, a", "author": "JimGalasyn", "createdAt": "2020-06-01T18:52:50Z", "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "diffHunk": "@@ -415,6 +415,24 @@ the entire substring is returned by default.\n For example, `REGEXP_EXTRACT(\"(.*) (.*)\", 'hello there', 2)`\n returns \"there\".\n \n+### `REGEXP_SPLIT`\n+\n+```sql\n+REGEXP_SPLIT(col1, 'a.b+')\n+```\n+\n+Splits a string into an array of substrings based\n+on a regular expression. If there is no match,\n+then the original string is returned as the only\n+element in the array. If the regular expression is empty,\n+then all characters in the string are split.\n+If either, string or regular expression, are NULL, then a", "originalCommit": "b440e6e4bff9dc17e4098d640c8a5473ed2cd7f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQyNDUzNw==", "url": "https://github.com/confluentinc/ksql/pull/5501#discussion_r433424537", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            then an empty space is added to the array.\n          \n          \n            \n            an empty space is added to the array.", "author": "JimGalasyn", "createdAt": "2020-06-01T18:53:04Z", "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "diffHunk": "@@ -415,6 +415,24 @@ the entire substring is returned by default.\n For example, `REGEXP_EXTRACT(\"(.*) (.*)\", 'hello there', 2)`\n returns \"there\".\n \n+### `REGEXP_SPLIT`\n+\n+```sql\n+REGEXP_SPLIT(col1, 'a.b+')\n+```\n+\n+Splits a string into an array of substrings based\n+on a regular expression. If there is no match,\n+then the original string is returned as the only\n+element in the array. If the regular expression is empty,\n+then all characters in the string are split.\n+If either, string or regular expression, are NULL, then a\n+NULL value is returned.\n+\n+If the regular expression is found at the beginning or end\n+of the string, or there are contiguous delimiters,\n+then an empty space is added to the array.", "originalCommit": "b440e6e4bff9dc17e4098d640c8a5473ed2cd7f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e16b18e38c68efd0a198821551553af093ea52fd", "url": "https://github.com/confluentinc/ksql/commit/e16b18e38c68efd0a198821551553af093ea52fd", "message": "feat: Adds udf regexp_split", "committedDate": "2020-06-01T22:31:14Z", "type": "commit"}, {"oid": "dc3e90c8f75cf3e6977a799030558c078f317d26", "url": "https://github.com/confluentinc/ksql/commit/dc3e90c8f75cf3e6977a799030558c078f317d26", "message": "Added test case", "committedDate": "2020-06-01T22:31:14Z", "type": "commit"}, {"oid": "1fb25a5f10d1f34b2d358d69ab988fbc592cb2d7", "url": "https://github.com/confluentinc/ksql/commit/1fb25a5f10d1f34b2d358d69ab988fbc592cb2d7", "message": "Makes linter pass", "committedDate": "2020-06-01T22:31:14Z", "type": "commit"}, {"oid": "483e377c84a90dd84c2e0a5cec15e566dec85b92", "url": "https://github.com/confluentinc/ksql/commit/483e377c84a90dd84c2e0a5cec15e566dec85b92", "message": "Adds doc and more tests", "committedDate": "2020-06-01T22:34:09Z", "type": "commit"}, {"oid": "947c33999a310a42bff658cd7d3a941cd16cb0e5", "url": "https://github.com/confluentinc/ksql/commit/947c33999a310a42bff658cd7d3a941cd16cb0e5", "message": "Historical plans", "committedDate": "2020-06-01T22:34:10Z", "type": "commit"}, {"oid": "532134c64eeb5e6658bf841ceda13e2659b32d6e", "url": "https://github.com/confluentinc/ksql/commit/532134c64eeb5e6658bf841ceda13e2659b32d6e", "message": "Apply suggestions from code review\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>\nCo-authored-by: Andy Coates <8012398+big-andy-coates@users.noreply.github.com>", "committedDate": "2020-06-01T22:34:10Z", "type": "commit"}, {"oid": "a029a7805b3a54a637789b3ff2c3c003b91f97b2", "url": "https://github.com/confluentinc/ksql/commit/a029a7805b3a54a637789b3ff2c3c003b91f97b2", "message": "Feedback", "committedDate": "2020-06-01T22:34:10Z", "type": "commit"}, {"oid": "d81ed467ff088b526994b6705c6d656bceb7f102", "url": "https://github.com/confluentinc/ksql/commit/d81ed467ff088b526994b6705c6d656bceb7f102", "message": "Fix doc", "committedDate": "2020-06-01T22:35:05Z", "type": "commit"}, {"oid": "7104eb23e620929b42a6451765277181aab4c4af", "url": "https://github.com/confluentinc/ksql/commit/7104eb23e620929b42a6451765277181aab4c4af", "message": "Fix doc again", "committedDate": "2020-06-01T22:35:06Z", "type": "commit"}, {"oid": "7104eb23e620929b42a6451765277181aab4c4af", "url": "https://github.com/confluentinc/ksql/commit/7104eb23e620929b42a6451765277181aab4c4af", "message": "Fix doc again", "committedDate": "2020-06-01T22:35:06Z", "type": "forcePushed"}]}