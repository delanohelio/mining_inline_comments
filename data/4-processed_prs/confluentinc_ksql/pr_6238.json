{"pr_number": 6238, "pr_title": "fix: delimited format should write decimals in a format it can read", "pr_createdAt": "2020-09-16T18:44:48Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6238", "timeline": [{"oid": "4c0d5cd6c8b237cc7e0fc3309d2ac79cbb96e48b", "url": "https://github.com/confluentinc/ksql/commit/4c0d5cd6c8b237cc7e0fc3309d2ac79cbb96e48b", "message": "fix: scale of ROUND() return value\n\nfixes: https://github.com/confluentinc/ksql/issues/6233\n\nFixes the scale of the decimals values returned by the variant of the `ROUND` method that takes a decimal and a required number of decimal places to round to.\n\nThis fixes a bug where the output could not be serialized to Avro.", "committedDate": "2020-09-16T18:23:30Z", "type": "commit"}, {"oid": "0c6b1895b7b3f895dc13bd399a82004dad46c2b2", "url": "https://github.com/confluentinc/ksql/commit/0c6b1895b7b3f895dc13bd399a82004dad46c2b2", "message": "fix: delimited format should write decimals in a format it can read\n\nfixes: https://github.com/confluentinc/ksql/issues/6234\n\nBREAKING CHANGE\nThis changes the format the `DELIMITED` form writes decimals from `12,345,678,987,654,321.12345` to `12345678987654321.12345`", "committedDate": "2020-09-16T18:43:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY5NzEwNA==", "url": "https://github.com/confluentinc/ksql/pull/6238#discussion_r489697104", "bodyText": "Kids distracted me - on it...", "author": "big-andy-coates", "createdAt": "2020-09-16T19:19:31Z", "path": "ksqldb-serde/src/main/java/io/confluent/ksql/serde/delimited/KsqlDelimitedSerializer.java", "diffHunk": "@@ -95,7 +95,8 @@ private String getDecimal(final Field field) {\n       final int precision = DecimalUtil.precision(field.schema());\n       final int scale = DecimalUtil.scale(field.schema());\n \n-      return DecimalUtil.format(precision, scale, value);\n+      return value.toString();\n+//      return DecimalUtil.format(precision, scale, value);", "originalCommit": "0c6b1895b7b3f895dc13bd399a82004dad46c2b2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "957d68f22dd7ce4ffd48107c59d39287007d07ca", "url": "https://github.com/confluentinc/ksql/commit/957d68f22dd7ce4ffd48107c59d39287007d07ca", "message": "chore: missed change", "committedDate": "2020-09-16T19:20:45Z", "type": "commit"}, {"oid": "2d94a5e9447287fa47fab9076a5dc659a77bd70b", "url": "https://github.com/confluentinc/ksql/commit/2d94a5e9447287fa47fab9076a5dc659a77bd70b", "message": "chore: remove unused code", "committedDate": "2020-09-16T19:21:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5MjgyOQ==", "url": "https://github.com/confluentinc/ksql/pull/6238#discussion_r490992829", "bodyText": "Isn't this format used to add trailing zeros to decimals? Without this, we loose those zeros.\nCan the DecimalFormat be configured to avoid adding commas?", "author": "spena", "createdAt": "2020-09-18T14:34:47Z", "path": "ksqldb-serde/src/main/java/io/confluent/ksql/serde/delimited/KsqlDelimitedSerializer.java", "diffHunk": "@@ -84,20 +82,9 @@ public boolean hasNext() {\n     public Object next() {\n       final Field field = fieldIt.next();\n       throwOnUnsupportedType(field.schema());\n-      if (DecimalUtil.isDecimal(field.schema())) {\n-        return getDecimal(field);\n-      }\n       return data.get(field);\n     }\n \n-    private String getDecimal(final Field field) {\n-      final BigDecimal value = (BigDecimal) data.get(field);\n-      final int precision = DecimalUtil.precision(field.schema());\n-      final int scale = DecimalUtil.scale(field.schema());\n-\n-      return DecimalUtil.format(precision, scale, value);", "originalCommit": "2d94a5e9447287fa47fab9076a5dc659a77bd70b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE4MjEwMg==", "url": "https://github.com/confluentinc/ksql/pull/6238#discussion_r491182102", "bodyText": "I'll take a look - thanks!", "author": "big-andy-coates", "createdAt": "2020-09-18T20:45:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5MjgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk1MTg2Mg==", "url": "https://github.com/confluentinc/ksql/pull/6238#discussion_r491951862", "bodyText": "Looked into this and the trailing zeros are correctly formatted. However, we do need to call toPlanString(), rather than toString() if we want to avoid scientific notation.", "author": "big-andy-coates", "createdAt": "2020-09-21T10:54:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5MjgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI4Mjk2NA==", "url": "https://github.com/confluentinc/ksql/pull/6238#discussion_r492282964", "bodyText": "Looking at this, is there any reason to prefer plain notation over scientific notation? the plan notation is lossy while scientific notation conserves the precision/scale exactly (docs about toPlainString):\nNote that if the result of this method is passed to the string constructor, only the numerical \nvalue of this BigDecimal will necessarily be recovered; the representation of the new BigDecimal \nmay have a different scale.\n\nCompare with toString:\nThere is a one-to-one mapping between the distinguishable BigDecimal values and the \nresult of this conversion.", "author": "agavra", "createdAt": "2020-09-21T19:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5MjgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxODU3Mw==", "url": "https://github.com/confluentinc/ksql/pull/6238#discussion_r492318573", "bodyText": "The thought process behind this is that:\na) The serializer previously didn't use scientific notation, so this would be a change in behaviour beyond the bug fix to allow it to read its own decimals.\nb)  We've had users be confused about decimals in scientific notation before, in JSON I think it was, and switched that serializer to non-scientific.\nI agree that 1.23e+3 more accurately represent the scale of the value than 1230. However, our delimited deserializer will correct deserialize the latter correctly, given the correct schema.\nErgo, I think this is the best default behaviour from a useability and minimising support perspective. However, I can see the benefit of supporting scientific notation, (maybe through a config setting), for those that want it. Though I'd say this is out of scope of this bug fix.", "author": "big-andy-coates", "createdAt": "2020-09-21T20:12:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5MjgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMyMjYyNA==", "url": "https://github.com/confluentinc/ksql/pull/6238#discussion_r492322624", "bodyText": "Sounds good, I don't feel to strongly about it either way so as long as we've given it thought I'm happy here", "author": "agavra", "createdAt": "2020-09-21T20:19:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5MjgyOQ=="}], "type": "inlineReview"}, {"oid": "3b45524daf39b28e7a8fb17081483baedbbe4072", "url": "https://github.com/confluentinc/ksql/commit/3b45524daf39b28e7a8fb17081483baedbbe4072", "message": "chore: do not use scientific notation for decimals", "committedDate": "2020-09-21T10:53:12Z", "type": "commit"}, {"oid": "e77b5e6f555611f7daee6428b79c73ff728e0d14", "url": "https://github.com/confluentinc/ksql/commit/e77b5e6f555611f7daee6428b79c73ff728e0d14", "message": "chore: merge from master", "committedDate": "2020-09-21T20:31:26Z", "type": "commit"}, {"oid": "4e33fc4841d6bd288110189086edca12c41c3392", "url": "https://github.com/confluentinc/ksql/commit/4e33fc4841d6bd288110189086edca12c41c3392", "message": "chore: fix test", "committedDate": "2020-09-22T16:01:23Z", "type": "commit"}, {"oid": "55cd8180b2cb22d3f38b333c0153356f4c31ec1f", "url": "https://github.com/confluentinc/ksql/commit/55cd8180b2cb22d3f38b333c0153356f4c31ec1f", "message": "test: add historical plans", "committedDate": "2020-09-22T21:30:44Z", "type": "commit"}]}