{"pr_number": 4331, "pr_title": "refactor: drop qualifiers from logical schema", "pr_createdAt": "2020-01-16T18:04:10Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4331", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcxOTQ3OQ==", "url": "https://github.com/confluentinc/ksql/pull/4331#discussion_r367719479", "bodyText": "This will likely cause a performance regression for json schemas, since the full source name will be written into the json field names (rather than just the column names). However I think this is better optimized in the json serde by dropping any prefix common to all field names, or by using our own internally generated field names for internal topics.", "author": "rodesai", "createdAt": "2020-01-17T00:37:27Z", "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/StreamStreamJoinBuilder.java", "diffHunk": "@@ -46,7 +46,7 @@ private StreamStreamJoinBuilder() {\n     final QueryContext.Stacker stacker = QueryContext.Stacker.of(queryContext);\n     final LogicalSchema leftSchema = left.getSchema();\n     final PhysicalSchema leftPhysicalSchema = PhysicalSchema.from(\n-        leftSchema.withoutAlias(),\n+        leftSchema,", "originalCommit": "838e1a0e9301a74cb147ab1bcb24af8768a01f45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE0MTQ1MQ==", "url": "https://github.com/confluentinc/ksql/pull/4331#discussion_r368141451", "bodyText": "Do we still need this class? Can we just use ColumnName wherever this class is used? (can be a follow-up)", "author": "agavra", "createdAt": "2020-01-17T21:21:54Z", "path": "ksql-common/src/main/java/io/confluent/ksql/schema/ksql/ColumnRef.java", "diffHunk": "@@ -19,69 +19,30 @@\n \n import com.google.errorprone.annotations.Immutable;\n import io.confluent.ksql.name.ColumnName;\n-import io.confluent.ksql.name.SourceName;\n-import io.confluent.ksql.util.KsqlConstants;\n-import io.confluent.ksql.util.SchemaUtil;\n import java.util.Objects;\n-import java.util.Optional;\n \n /**\n- * A reference to a column, optionally disambiguated by a qualifier indicating\n- * the source of the column.\n+ * A reference to a column.", "originalCommit": "838e1a0e9301a74cb147ab1bcb24af8768a01f45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg4MTU0Nw==", "url": "https://github.com/confluentinc/ksql/pull/4331#discussion_r369881547", "bodyText": "I second removing ColumnRef with ColumnName. ColumnRef looks to now just be an unnecessary extra level of indirection.", "author": "big-andy-coates", "createdAt": "2020-01-23T00:41:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE0MTQ1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM5NTg4NA==", "url": "https://github.com/confluentinc/ksql/pull/4331#discussion_r370395884", "bodyText": "Agreed. will punt this to a follow-up.", "author": "rodesai", "createdAt": "2020-01-23T22:47:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE0MTQ1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE4OTA0OA==", "url": "https://github.com/confluentinc/ksql/pull/4331#discussion_r368189048", "bodyText": "could we reuse the ColumnReferenceRewriter below? (not a biggy)", "author": "agavra", "createdAt": "2020-01-18T00:35:21Z", "path": "ksql-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java", "diffHunk": "@@ -254,11 +275,49 @@ private FlatMapNode buildFlatMapNode(final PlanNode sourcePlanNode) {\n     return new FlatMapNode(new PlanNodeId(\"FlatMap\"), sourcePlanNode, functionRegistry, analysis);\n   }\n \n+  private PlanNode buildSourceForJoin(\n+      final AliasedDataSource source,\n+      final String side,\n+      final Expression joinExpression) {\n+    final DataSourceNode sourceNode = new DataSourceNode(\n+        new PlanNodeId(\"KafkaTopic_\" + side),\n+        source.getDataSource(),\n+        source.getAlias(),\n+        analysis.getSelectExpressions()\n+    );\n+    // it is always safe to build the repartition node - this operation will be\n+    // a no-op if a repartition is not required. if the source is a table, and\n+    // a repartition is needed, then an exception will be thrown\n+    final VisitParentExpressionVisitor<Optional<Expression>, Context<Void>> rewriter =\n+        new VisitParentExpressionVisitor<Optional<Expression>, Context<Void>>(\n+            Optional.empty()) {\n+          @Override\n+          public Optional<Expression> visitQualifiedColumnReference(\n+              final QualifiedColumnReferenceExp node,\n+              final Context<Void> ctx\n+          ) {\n+            return Optional.of(new ColumnReferenceExp(node.getReference()));\n+          }\n+        };", "originalCommit": "838e1a0e9301a74cb147ab1bcb24af8768a01f45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM5Njk5NA==", "url": "https://github.com/confluentinc/ksql/pull/4331#discussion_r370396994", "bodyText": "This rewriter needs to rewrite to the schema to drop qualifiers from qualified column references, but use the original names (not with the join prefix)", "author": "rodesai", "createdAt": "2020-01-23T22:50:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE4OTA0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE5NjQxMw==", "url": "https://github.com/confluentinc/ksql/pull/4331#discussion_r368196413", "bodyText": "2020 \ud83d\ude02", "author": "agavra", "createdAt": "2020-01-18T01:33:35Z", "path": "ksql-execution/src/main/java/io/confluent/ksql/execution/expression/tree/AbstractColumnReferenceExp.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2019 Confluent Inc.", "originalCommit": "838e1a0e9301a74cb147ab1bcb24af8768a01f45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg4Mjc5OA==", "url": "https://github.com/confluentinc/ksql/pull/4331#discussion_r369882798", "bodyText": "Any objection to some renaming?\n\nAbstractColumnReferenceExp -> ColumnReferenceExp\nColumnReferenceExp -> UnqualifiedColumnReferenceExp, (with suitable rename of rewriter function etc)\n\nI think this would make the distinction clearer.", "author": "big-andy-coates", "createdAt": "2020-01-23T00:46:24Z", "path": "ksql-execution/src/main/java/io/confluent/ksql/execution/expression/tree/AbstractColumnReferenceExp.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.expression.tree;\n+\n+import io.confluent.ksql.parser.NodeLocation;\n+import io.confluent.ksql.schema.ksql.ColumnRef;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+public abstract class AbstractColumnReferenceExp extends Expression {", "originalCommit": "838e1a0e9301a74cb147ab1bcb24af8768a01f45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg4NDMyNA==", "url": "https://github.com/confluentinc/ksql/pull/4331#discussion_r369884324", "bodyText": "May benefit from some high level Java doc to explain what the intent of this class is.", "author": "big-andy-coates", "createdAt": "2020-01-23T00:52:15Z", "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/RewrittenAnalysis.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.analyzer;\n+\n+import io.confluent.ksql.analyzer.Analysis.AliasedDataSource;\n+import io.confluent.ksql.analyzer.Analysis.Into;\n+import io.confluent.ksql.analyzer.Analysis.JoinInfo;\n+import io.confluent.ksql.engine.rewrite.ExpressionTreeRewriter;\n+import io.confluent.ksql.engine.rewrite.ExpressionTreeRewriter.Context;\n+import io.confluent.ksql.execution.expression.tree.Expression;\n+import io.confluent.ksql.execution.expression.tree.FunctionCall;\n+import io.confluent.ksql.execution.plan.SelectExpression;\n+import io.confluent.ksql.parser.properties.with.CreateSourceAsProperties;\n+import io.confluent.ksql.parser.tree.WindowExpression;\n+import io.confluent.ksql.schema.ksql.ColumnRef;\n+import io.confluent.ksql.serde.SerdeOption;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+\n+public class RewrittenAnalysis implements ImmutableAnalysis {", "originalCommit": "838e1a0e9301a74cb147ab1bcb24af8768a01f45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg4NDY0OQ==", "url": "https://github.com/confluentinc/ksql/pull/4331#discussion_r369884649", "bodyText": "how come these are not re-written? Or some of the others, e.g. getJoin(), etc?", "author": "big-andy-coates", "createdAt": "2020-01-23T00:53:30Z", "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/RewrittenAnalysis.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.analyzer;\n+\n+import io.confluent.ksql.analyzer.Analysis.AliasedDataSource;\n+import io.confluent.ksql.analyzer.Analysis.Into;\n+import io.confluent.ksql.analyzer.Analysis.JoinInfo;\n+import io.confluent.ksql.engine.rewrite.ExpressionTreeRewriter;\n+import io.confluent.ksql.engine.rewrite.ExpressionTreeRewriter.Context;\n+import io.confluent.ksql.execution.expression.tree.Expression;\n+import io.confluent.ksql.execution.expression.tree.FunctionCall;\n+import io.confluent.ksql.execution.plan.SelectExpression;\n+import io.confluent.ksql.parser.properties.with.CreateSourceAsProperties;\n+import io.confluent.ksql.parser.tree.WindowExpression;\n+import io.confluent.ksql.schema.ksql.ColumnRef;\n+import io.confluent.ksql.serde.SerdeOption;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+\n+public class RewrittenAnalysis implements ImmutableAnalysis {\n+  private final ImmutableAnalysis original;\n+  private final BiFunction<Expression, Context<Void>, Optional<Expression>> rewriter;\n+\n+  public RewrittenAnalysis(\n+      final ImmutableAnalysis original,\n+      final BiFunction<Expression, Context<Void>, Optional<Expression>> rewriter\n+  ) {\n+    this.original = Objects.requireNonNull(original, \"original\");\n+    this.rewriter = Objects.requireNonNull(rewriter ,\"rewriter\");\n+  }\n+\n+  public ImmutableAnalysis getOriginal() {\n+    return original;\n+  }\n+\n+  @Override\n+  public List<FunctionCall> getTableFunctions() {\n+    return rewriteList(original.getTableFunctions());\n+  }\n+\n+  @Override\n+  public List<SelectExpression> getSelectExpressions() {\n+    return original.getSelectExpressions().stream()\n+        .map(e -> SelectExpression.of(\n+            e.getAlias(),\n+            ExpressionTreeRewriter.rewriteWith(rewriter, e.getExpression())))\n+        .collect(Collectors.toList());\n+  }\n+\n+  @Override\n+  public Optional<Expression> getWhereExpression() {\n+    return rewriteOptional(original.getWhereExpression());\n+  }\n+\n+  @Override\n+  public Optional<Into> getInto() {\n+    return original.getInto();\n+  }\n+\n+  @Override\n+  public Set<ColumnRef> getSelectColumnRefs() {\n+    return original.getSelectColumnRefs();", "originalCommit": "838e1a0e9301a74cb147ab1bcb24af8768a01f45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d64ddc2f55331099c5b0ddcaf30f43e5d15a39f4", "url": "https://github.com/confluentinc/ksql/commit/d64ddc2f55331099c5b0ddcaf30f43e5d15a39f4", "message": "refactor: drop qualifiers from logical schema\n\nThis patch removes the qualifier field from LogicalSchema and ColumnRef.\n\nWe still need to support column reference expressions with qualifiers. These\nare now implemented using a new expression type called QualifiedColumnReferenceExp.\nQualifiedColumnReferenceExp contains a SourceName qualifier and a ColumnRef. The\nparser creates a QualifiedColumnReferenceExp for (sub-)expressions that have a\nsource dereference.\n\nMost of the query execution utilities (codegen, expression analyzer) should only\nworry about schemas and expressions. Since schemas don't specify a source, these\nclasses cannot handle qualified column references. Therefore these classes now\nthrow when they see qualified column references. This also  means that LogicalPlanner\nhas to resolve all qualified column refs to unqualified column refs in the final plan.\n\nFinally, without source qualifiers joins are problematic because the two sources\nmay have clashing names. To solve this, LogicalPlanner first projects each source\nto a new schema that includes the source name as a prefix. It also rewrites all\nexpressions in the query to use the prefixed column names.", "committedDate": "2020-01-23T23:34:55Z", "type": "commit"}, {"oid": "76e12069bf03b198d9bcbbe012992a49a3e81ba1", "url": "https://github.com/confluentinc/ksql/commit/76e12069bf03b198d9bcbbe012992a49a3e81ba1", "message": "merge", "committedDate": "2020-01-23T23:34:56Z", "type": "commit"}, {"oid": "6e5ca454544388cf39b86652af1feb86a1b927f9", "url": "https://github.com/confluentinc/ksql/commit/6e5ca454544388cf39b86652af1feb86a1b927f9", "message": "fix error messages in qtt", "committedDate": "2020-01-23T23:34:56Z", "type": "commit"}, {"oid": "e655e3f32e619184ee053f7e4f11f1e354f3b948", "url": "https://github.com/confluentinc/ksql/commit/e655e3f32e619184ee053f7e4f11f1e354f3b948", "message": "more error msgs", "committedDate": "2020-01-23T23:34:57Z", "type": "commit"}, {"oid": "b0acc1849117201701816c95279d726c392ba0f1", "url": "https://github.com/confluentinc/ksql/commit/b0acc1849117201701816c95279d726c392ba0f1", "message": "regenerate qtt expected topologies", "committedDate": "2020-01-23T23:34:58Z", "type": "commit"}, {"oid": "fc67aa3fa0f3060a505b35bb8a2d705bece31b7b", "url": "https://github.com/confluentinc/ksql/commit/fc67aa3fa0f3060a505b35bb8a2d705bece31b7b", "message": "fix up the join internal topics", "committedDate": "2020-01-23T23:34:58Z", "type": "commit"}, {"oid": "47391de39dd2406a6ef9d00e43e3ea5c674dc079", "url": "https://github.com/confluentinc/ksql/commit/47391de39dd2406a6ef9d00e43e3ea5c674dc079", "message": "rewrite planned test case", "committedDate": "2020-01-23T23:34:59Z", "type": "commit"}, {"oid": "ecaa01b6f14dd5fd5fd64f088b5da1e3420496ca", "url": "https://github.com/confluentinc/ksql/commit/ecaa01b6f14dd5fd5fd64f088b5da1e3420496ca", "message": "review feedback", "committedDate": "2020-01-23T23:35:00Z", "type": "commit"}, {"oid": "8bca0254385e8c80aca75fb9a2bc1de771a4169e", "url": "https://github.com/confluentinc/ksql/commit/8bca0254385e8c80aca75fb9a2bc1de771a4169e", "message": "checkstyle", "committedDate": "2020-01-23T23:56:25Z", "type": "commit"}, {"oid": "8bca0254385e8c80aca75fb9a2bc1de771a4169e", "url": "https://github.com/confluentinc/ksql/commit/8bca0254385e8c80aca75fb9a2bc1de771a4169e", "message": "checkstyle", "committedDate": "2020-01-23T23:56:25Z", "type": "forcePushed"}, {"oid": "27c46279f41bcf80e6823b534a6041bc6642847c", "url": "https://github.com/confluentinc/ksql/commit/27c46279f41bcf80e6823b534a6041bc6642847c", "message": "missing file", "committedDate": "2020-01-24T00:25:04Z", "type": "commit"}]}