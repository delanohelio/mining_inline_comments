{"pr_number": 5922, "pr_title": "chore: add basic validation for table upgrades (MINOR)", "pr_createdAt": "2020-07-31T17:48:56Z", "pr_url": "https://github.com/confluentinc/ksql/pull/5922", "timeline": [{"oid": "3a6d550ff0079b09dcdbe9f624b38de3390dba66", "url": "https://github.com/confluentinc/ksql/commit/3a6d550ff0079b09dcdbe9f624b38de3390dba66", "message": "chore: add basic validation for table upgrades", "committedDate": "2020-07-31T17:46:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1Mjk5NA==", "url": "https://github.com/confluentinc/ksql/pull/5922#discussion_r465052994", "bodyText": "This will likely results in the order of entries in the returned list changing from what it was before, and not being non-deterministic.\nNot sure if this is important, just flagging as a potential unforeseen side effect of the change.", "author": "big-andy-coates", "createdAt": "2020-08-04T13:33:27Z", "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/tools/TestExecutorUtil.java", "diffHunk": "@@ -268,7 +273,8 @@ private static void initializeTopics(\n       final StubKafkaService stubKafkaService,\n       final TestExecutionListener listener\n   ) {\n-    final ImmutableList.Builder<PersistentQueryAndSources> queriesBuilder = new Builder<>();\n+    final Map<QueryId, PersistentQueryAndSources> queries = new HashMap<>();", "originalCommit": "3a6d550ff0079b09dcdbe9f624b38de3390dba66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE4MTk0Ng==", "url": "https://github.com/confluentinc/ksql/pull/5922#discussion_r465181946", "bodyText": "good call, I will change this as I think it might be what's actually causing the QTT for some other things to fail", "author": "agavra", "createdAt": "2020-08-04T16:36:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1Mjk5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1MzIwMA==", "url": "https://github.com/confluentinc/ksql/pull/5922#discussion_r465053200", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return new ArrayList<>(queries.values());\n          \n          \n            \n                return ImmutableList.copyOf(queries.values());", "author": "big-andy-coates", "createdAt": "2020-08-04T13:33:47Z", "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/tools/TestExecutorUtil.java", "diffHunk": "@@ -284,9 +290,11 @@ private static void initializeTopics(\n \n       listener.acceptQuery(query);\n \n-      queriesBuilder.add(new PersistentQueryAndSources(query, result.getSources().get()));\n+      queries.put(\n+          query.getQueryId(),\n+          new PersistentQueryAndSources(query, result.getSources().get()));\n     }\n-    return queriesBuilder.build();\n+    return new ArrayList<>(queries.values());", "originalCommit": "3a6d550ff0079b09dcdbe9f624b38de3390dba66", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1NDE2NA==", "url": "https://github.com/confluentinc/ksql/pull/5922#discussion_r465054164", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"message\": \"Cannot REPLACE data source: DataSource '`BAR`' has schema = `ID` STRING KEY, `COL1` STRING, `COL2` STRING which is not upgradeable to `ID` STRING KEY, `COL1` STRING(The following columns are changed or missing: [`COL2` STRING])\"\n          \n          \n            \n                    \"message\": \"Cannot REPLACE data source: DataSource '`BAR`' has schema = `ID` STRING KEY, `COL1` STRING, `COL2` STRING which is not upgradeable to `ID` STRING KEY, `COL1` STRING. (The following columns are changed or missing: [`COL2` STRING])\"", "author": "big-andy-coates", "createdAt": "2020-08-04T13:35:20Z", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/upgrades.json", "diffHunk": "@@ -201,9 +214,79 @@\n         \"CREATE TABLE bar AS SELECT * FROM foo;\",\n         \"CREATE OR REPLACE TABLE bar AS SELECT * FROM foo WHERE col1 = '123';\"\n       ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },\n+    {\n+      \"name\": \"DML - TABLE - add column\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT id, col1, col2 FROM foo;\"\n+      ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },\n+    {\n+      \"name\": \"DML - TABLE - add column via select *\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT * FROM foo;\"\n+      ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },\n+    {\n+      \"name\": \"DML - TABLE - remove column\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1, col2 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT id, col1 FROM foo;\"\n+      ],\n       \"expectedException\": {\n         \"type\": \"io.confluent.ksql.util.KsqlException\",\n-        \"message\": \"Upgrades not yet supported for io.confluent.ksql.execution.plan.TableSink\"\n+        \"message\": \"Cannot REPLACE data source: DataSource '`BAR`' has schema = `ID` STRING KEY, `COL1` STRING, `COL2` STRING which is not upgradeable to `ID` STRING KEY, `COL1` STRING(The following columns are changed or missing: [`COL2` STRING])\"", "originalCommit": "3a6d550ff0079b09dcdbe9f624b38de3390dba66", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1NDcxMw==", "url": "https://github.com/confluentinc/ksql/pull/5922#discussion_r465054713", "bodyText": "Exposing internal implementation details?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"message\": \"Query is not upgradeable. Plan step of type class io.confluent.ksql.execution.plan.TableSource must have matching topicName. Values differ: foo vs. baz\"\n          \n          \n            \n                    \"message\": \"Query is not upgradeable. TableSource must have matching topicName. Values differ: foo vs. baz\"", "author": "big-andy-coates", "createdAt": "2020-08-04T13:36:13Z", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/upgrades.json", "diffHunk": "@@ -201,9 +214,79 @@\n         \"CREATE TABLE bar AS SELECT * FROM foo;\",\n         \"CREATE OR REPLACE TABLE bar AS SELECT * FROM foo WHERE col1 = '123';\"\n       ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },\n+    {\n+      \"name\": \"DML - TABLE - add column\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT id, col1, col2 FROM foo;\"\n+      ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },\n+    {\n+      \"name\": \"DML - TABLE - add column via select *\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT * FROM foo;\"\n+      ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },\n+    {\n+      \"name\": \"DML - TABLE - remove column\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1, col2 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT id, col1 FROM foo;\"\n+      ],\n       \"expectedException\": {\n         \"type\": \"io.confluent.ksql.util.KsqlException\",\n-        \"message\": \"Upgrades not yet supported for io.confluent.ksql.execution.plan.TableSink\"\n+        \"message\": \"Cannot REPLACE data source: DataSource '`BAR`' has schema = `ID` STRING KEY, `COL1` STRING, `COL2` STRING which is not upgradeable to `ID` STRING KEY, `COL1` STRING(The following columns are changed or missing: [`COL2` STRING])\"\n+      }\n+    },\n+    {\n+      \"name\": \"DML - TABLE - change source\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE baz (id VARCHAR PRIMARY KEY, col1 VARCHAR) WITH (kafka_topic='baz', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT id, col1 FROM baz;\"\n+      ],\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlException\",\n+        \"message\": \"Query is not upgradeable. Plan step of type class io.confluent.ksql.execution.plan.TableSource must have matching topicName. Values differ: foo vs. baz\"", "originalCommit": "3a6d550ff0079b09dcdbe9f624b38de3390dba66", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1NTU0Mg==", "url": "https://github.com/confluentinc/ksql/pull/5922#discussion_r465055542", "bodyText": "Exposing Optional in error message isn't ideal. Can we avoid?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"message\": \"Cannot REPLACE data source: DataSource '`BAR`' has timestampColumn = Optional.empty which is not upgradeable to Optional[TimestampColumn{column=`COL1`, format=Optional[YYYY]}]\"\n          \n          \n            \n                    \"message\": \"Cannot REPLACE data source: DataSource '`BAR`' has timestampColumn = None which is not upgradeable to TimestampColumn{column=`COL1`, format=Optional[YYYY]}\"", "author": "big-andy-coates", "createdAt": "2020-08-04T13:37:32Z", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/upgrades.json", "diffHunk": "@@ -201,9 +214,79 @@\n         \"CREATE TABLE bar AS SELECT * FROM foo;\",\n         \"CREATE OR REPLACE TABLE bar AS SELECT * FROM foo WHERE col1 = '123';\"\n       ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },\n+    {\n+      \"name\": \"DML - TABLE - add column\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT id, col1, col2 FROM foo;\"\n+      ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },\n+    {\n+      \"name\": \"DML - TABLE - add column via select *\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT * FROM foo;\"\n+      ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },\n+    {\n+      \"name\": \"DML - TABLE - remove column\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1, col2 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT id, col1 FROM foo;\"\n+      ],\n       \"expectedException\": {\n         \"type\": \"io.confluent.ksql.util.KsqlException\",\n-        \"message\": \"Upgrades not yet supported for io.confluent.ksql.execution.plan.TableSink\"\n+        \"message\": \"Cannot REPLACE data source: DataSource '`BAR`' has schema = `ID` STRING KEY, `COL1` STRING, `COL2` STRING which is not upgradeable to `ID` STRING KEY, `COL1` STRING(The following columns are changed or missing: [`COL2` STRING])\"\n+      }\n+    },\n+    {\n+      \"name\": \"DML - TABLE - change source\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE baz (id VARCHAR PRIMARY KEY, col1 VARCHAR) WITH (kafka_topic='baz', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT id, col1 FROM baz;\"\n+      ],\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlException\",\n+        \"message\": \"Query is not upgradeable. Plan step of type class io.confluent.ksql.execution.plan.TableSource must have matching topicName. Values differ: foo vs. baz\"\n+      }\n+    },\n+    {\n+      \"name\": \"DML - TABLE - change timestampColumn\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar WITH (timestamp='col1', timestamp_format='YYYY') AS SELECT id, col1 FROM bar;\"\n+      ],\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlException\",\n+        \"message\": \"Cannot REPLACE data source: DataSource '`BAR`' has timestampColumn = Optional.empty which is not upgradeable to Optional[TimestampColumn{column=`COL1`, format=Optional[YYYY]}]\"", "originalCommit": "3a6d550ff0079b09dcdbe9f624b38de3390dba66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI1Njc1OQ==", "url": "https://github.com/confluentinc/ksql/pull/5922#discussion_r465256759", "bodyText": "I can change this, but these message are all auto-generated based on the fields that are being compared. I'll leave this for a future PR", "author": "agavra", "createdAt": "2020-08-04T18:46:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1NTU0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI1OTAyNQ==", "url": "https://github.com/confluentinc/ksql/pull/5922#discussion_r465259025", "bodyText": "actually I just went ahead and chagned it", "author": "agavra", "createdAt": "2020-08-04T18:51:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1NTU0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2MzY5NQ==", "url": "https://github.com/confluentinc/ksql/pull/5922#discussion_r465263695", "bodyText": "one more go at this, it's not super trivial. I'm going to leave it as is for now", "author": "agavra", "createdAt": "2020-08-04T19:00:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1NTU0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1NTcwNg==", "url": "https://github.com/confluentinc/ksql/pull/5922#discussion_r465055706", "bodyText": "Can we add a negative test for:\n\nthe timestamp format changing?\nbigger changes, like adding:\n\nJoin\nPartition by\nGROUP BY\netc.", "author": "big-andy-coates", "createdAt": "2020-08-04T13:37:48Z", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/upgrades.json", "diffHunk": "@@ -201,9 +214,79 @@\n         \"CREATE TABLE bar AS SELECT * FROM foo;\",\n         \"CREATE OR REPLACE TABLE bar AS SELECT * FROM foo WHERE col1 = '123';\"\n       ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },\n+    {\n+      \"name\": \"DML - TABLE - add column\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT id, col1, col2 FROM foo;\"\n+      ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },\n+    {\n+      \"name\": \"DML - TABLE - add column via select *\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT * FROM foo;\"\n+      ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },\n+    {\n+      \"name\": \"DML - TABLE - remove column\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1, col2 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT id, col1 FROM foo;\"\n+      ],\n       \"expectedException\": {\n         \"type\": \"io.confluent.ksql.util.KsqlException\",\n-        \"message\": \"Upgrades not yet supported for io.confluent.ksql.execution.plan.TableSink\"\n+        \"message\": \"Cannot REPLACE data source: DataSource '`BAR`' has schema = `ID` STRING KEY, `COL1` STRING, `COL2` STRING which is not upgradeable to `ID` STRING KEY, `COL1` STRING(The following columns are changed or missing: [`COL2` STRING])\"\n+      }\n+    },\n+    {\n+      \"name\": \"DML - TABLE - change source\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE baz (id VARCHAR PRIMARY KEY, col1 VARCHAR) WITH (kafka_topic='baz', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT id, col1 FROM baz;\"\n+      ],\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlException\",\n+        \"message\": \"Query is not upgradeable. Plan step of type class io.confluent.ksql.execution.plan.TableSource must have matching topicName. Values differ: foo vs. baz\"\n+      }\n+    },\n+    {\n+      \"name\": \"DML - TABLE - change timestampColumn\",", "originalCommit": "3a6d550ff0079b09dcdbe9f624b38de3390dba66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2OTQyMA==", "url": "https://github.com/confluentinc/ksql/pull/5922#discussion_r465269420", "bodyText": "I added a few, but the implementation is an allowlist, not a denylist, so it's pretty clear that anything we don't implement will throw", "author": "agavra", "createdAt": "2020-08-04T19:10:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1NTcwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1OTA1Nw==", "url": "https://github.com/confluentinc/ksql/pull/5922#discussion_r465059057", "bodyText": "Do you have plans to extend the testing done around upgrades?\nIt seems to me that we need testing not only to ensure commands run, but that state isn't corrupted and the outputs are correct.\nE.g. we should be pumping in some initial state, (confirming the output / schemas registered in SR / metastore state), performing the upgrade, then pumping in more state and again confirming the output, SR and metastore state.\nWe likely also need tests around pull queries while upgrades are running.\nThoughts?", "author": "big-andy-coates", "createdAt": "2020-08-04T13:43:01Z", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/upgrades.json", "diffHunk": "@@ -201,9 +214,79 @@\n         \"CREATE TABLE bar AS SELECT * FROM foo;\",\n         \"CREATE OR REPLACE TABLE bar AS SELECT * FROM foo WHERE col1 = '123';\"\n       ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },\n+    {\n+      \"name\": \"DML - TABLE - add column\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT id, col1, col2 FROM foo;\"\n+      ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },", "originalCommit": "3a6d550ff0079b09dcdbe9f624b38de3390dba66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE4NDExMA==", "url": "https://github.com/confluentinc/ksql/pull/5922#discussion_r465184110", "bodyText": "I've added ReplaceIntTest in the interim while I figure out the best way to do this type of testing. QTT would require a major overhaul to test these upgrades, which is something that I plan to give a shot. But yes, I do plan to add a lot more testing before enabling the feature by default.\n\nWe likely also need tests around pull queries while upgrades are running.\n\nAt the moment, pull queries will likely fail as we terminate the old query and clean up the state. I will add a better exception (though anything that materializes it's own table actually isn't even upgradeable at the moment so it's not that big of a problem in the current state).", "author": "agavra", "createdAt": "2020-08-04T16:39:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1OTA1Nw=="}], "type": "inlineReview"}, {"oid": "39d650c36ee2bb19f05bb48949211d59cdcc0a4c", "url": "https://github.com/confluentinc/ksql/commit/39d650c36ee2bb19f05bb48949211d59cdcc0a4c", "message": "test: fix up tests", "committedDate": "2020-08-04T20:42:31Z", "type": "commit"}]}