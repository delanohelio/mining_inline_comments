{"pr_number": 4823, "pr_title": "fix: do not filter out rows where PARTITION BY resolves to null", "pr_createdAt": "2020-03-19T14:19:46Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4823", "timeline": [{"oid": "ef63feb5b97cac2771ff15be113eb629eb4ad498", "url": "https://github.com/confluentinc/ksql/commit/ef63feb5b97cac2771ff15be113eb629eb4ad498", "message": "fix: fix repartition semantics\n\nFixes: https://github.com/confluentinc/ksql/issues/4749\n\n##### Background\n\nThis change fixes an issue with our repartition semantics.\n\nOld style query semantics for partition by are broken:\n\nS1: ROWKEY => B, C  (Meaning S1 has a schema with ROWKEY as the key column, and B and C as value columns - types aren't important).\n\n```sql\nCREATE STREAM S2 AS SELECT * FROM S1 PARTITION BY B;\n```\n\nS2: ROWKEY => B, C\n\nAs you can see the schema of S2 is still the same.  However, the old data in the key has been lost as its been overridden with the data from B, and the key now duplicates the data stored in B.\n\nThis loss of data on a `SELECT * .. PARTITION BY` needed fixing.\n\nSecondly, with new primitive key [work to remove the restriction on key column naming](https://github.com/confluentinc/ksql/issues/3536), the same query semantics do not work. e.g.\n\nS1: A => B, C\n\n```sql\nCREATE STREAM S2 AS SELECT * FROM S1 PARTITION BY B;\n```\n\nS2: B => B, C\n\nThis fails as the `B` value column clashes with the `B` key column!\n\n##### The fix\n\nThis commit fixes the PARTITION BY semantics so that any PARTITION BY on a specific column sees the old key column being moved to the value and the new key column being moved from the value to the key. For example,\n\nS1: A => B, C\n\n```sql\nCREATE STREAM S2 AS SELECT * FROM S1 PARTITION BY B;\n```\n\nResults in the schema: S2: B => C, A.\n\nIf a PARTITION BY is an expression other than a column reference, then ksql will synthesis a new column name. For example,\n\nS1: A => B, C\n\n```sql\nCREATE STREAM S2 AS SELECT * FROM S1 PARTITION BY CAST(B AS INT);\n```\n\nResults in the schema: S2: KSQL_COL_0 => B, C, A.\n\n[This github issue](https://github.com/confluentinc/ksql/issues/4813) will add the ability to use aliases in PARTITION BY expressions, allowing a custom name to be assigned.", "committedDate": "2020-03-18T18:42:15Z", "type": "commit"}, {"oid": "ad27020e6fd599c4e8e3b037cb576a60a8f830b8", "url": "https://github.com/confluentinc/ksql/commit/ad27020e6fd599c4e8e3b037cb576a60a8f830b8", "message": "fix: do not filter out rows where PARTITION BY resolves to null\n\nFixes: https://github.com/confluentinc/ksql/issues/4747\n\nThis commit removes the filter that was excluding any rows where the `PARTITION BY` clause resolved to a `null` value, i.e. either because the result was `null` or because an error occurred evaluating the expression.\n\nThis change will only affect new queries started. Pre-existing queries will continue to run as before.", "committedDate": "2020-03-19T14:18:23Z", "type": "commit"}, {"oid": "2b1750be9de83d3ee3fa1ad6edec97998da9128e", "url": "https://github.com/confluentinc/ksql/commit/2b1750be9de83d3ee3fa1ad6edec97998da9128e", "message": "docs: call out limitation of partiiton by NULL", "committedDate": "2020-03-19T17:19:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwNTc5Nw==", "url": "https://github.com/confluentinc/ksql/pull/4823#discussion_r395205797", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  If the PARTITION BY expression evaluates to NULL the resulting row will be produced to a\n          \n          \n            \n                  If the PARTITION BY expression evaluates to NULL, the resulting row is produced to a", "author": "JimGalasyn", "createdAt": "2020-03-19T17:39:29Z", "path": "docs-md/developer-guide/joins/partition-data.md", "diffHunk": "@@ -153,6 +153,12 @@ only if they are also both in the same partition after the repartition.\n Otherwise, Kafka is likely to interleave messages. The use case will determine\n if these ordering guarantees are acceptable.\n \n+!!! important\n+      If the PARTITION BY expression evaluates to NULL the resulting row will be produced to a", "originalCommit": "2b1750be9de83d3ee3fa1ad6edec97998da9128e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwNjEwNA==", "url": "https://github.com/confluentinc/ksql/pull/4823#discussion_r395206104", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  the expression convert any NULL values to a default value, e.g.\n          \n          \n            \n                  the expression and convert any NULL values to a default value, for example,", "author": "JimGalasyn", "createdAt": "2020-03-19T17:40:01Z", "path": "docs-md/developer-guide/joins/partition-data.md", "diffHunk": "@@ -153,6 +153,12 @@ only if they are also both in the same partition after the repartition.\n Otherwise, Kafka is likely to interleave messages. The use case will determine\n if these ordering guarantees are acceptable.\n \n+!!! important\n+      If the PARTITION BY expression evaluates to NULL the resulting row will be produced to a\n+      random partition. You many want to use [COALESCE](../syntax-reference#coalesce) to wrap\n+      the expression convert any NULL values to a default value, e.g.", "originalCommit": "2b1750be9de83d3ee3fa1ad6edec97998da9128e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8eafb3e29a2b2cd02a8a967e734e06179ef009fc", "url": "https://github.com/confluentinc/ksql/commit/8eafb3e29a2b2cd02a8a967e734e06179ef009fc", "message": "Update docs-md/developer-guide/joins/partition-data.md\n\nCo-Authored-By: Jim Galasyn <jim.galasyn@confluent.io>", "committedDate": "2020-03-20T10:44:11Z", "type": "commit"}, {"oid": "f077bf4b42c4a2c3d6197477276dc2fdf95bc979", "url": "https://github.com/confluentinc/ksql/commit/f077bf4b42c4a2c3d6197477276dc2fdf95bc979", "message": "Update docs-md/developer-guide/joins/partition-data.md\n\nCo-Authored-By: Jim Galasyn <jim.galasyn@confluent.io>", "committedDate": "2020-03-20T10:44:17Z", "type": "commit"}, {"oid": "243af69ff2c03d7c76c0a52969d9056ff0e7aee4", "url": "https://github.com/confluentinc/ksql/commit/243af69ff2c03d7c76c0a52969d9056ff0e7aee4", "message": "test: fix tsts", "committedDate": "2020-03-20T15:50:54Z", "type": "commit"}, {"oid": "987b61412cef50284a04a25a02433dee28f14e5b", "url": "https://github.com/confluentinc/ksql/commit/987b61412cef50284a04a25a02433dee28f14e5b", "message": "chore: merge from master\n\nConflicting files\nksqldb-functional-tests/src/test/resources/query-validation-tests/partition-by.json\nksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/PartitionByParams.java\nksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/PartitionByParamsFactory.java\nksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/StreamSelectKeyBuilder.java\nksqldb-streams/src/test/java/io/confluent/ksql/execution/streams/PartitionByParamsFactoryTest.java\nksqldb-streams/src/test/java/io/confluent/ksql/execution/streams/StreamSelectKeyBuilderTest.java", "committedDate": "2020-03-20T17:40:31Z", "type": "commit"}, {"oid": "64a11182aefe01ae5cf5c50132bf5e191492d562", "url": "https://github.com/confluentinc/ksql/commit/64a11182aefe01ae5cf5c50132bf5e191492d562", "message": "Merge branch 'master' into partition_by_null", "committedDate": "2020-03-20T17:44:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5NjM4OQ==", "url": "https://github.com/confluentinc/ksql/pull/4823#discussion_r395796389", "bodyText": "Note: it's safe to change these as they are from an unreleased feature...", "author": "big-andy-coates", "createdAt": "2020-03-20T17:45:20Z", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/joins.json", "diffHunk": "@@ -257,14 +257,14 @@\n         {\"topic\": \"_confluent-ksql-some.ksql.service.idquery_CSAS_LEFT_OUTER_JOIN_0-Join-right-repartition\", \"key\": 100, \"value\": {\"TT_ROWTIME\": 16000, \"TT_K\": \"\", \"TT_ID\": 100, \"TT_F1\": \"newblah\", \"TT_F2\": 150}, \"timestamp\": 16000},\n         {\"topic\": \"_confluent-ksql-some.ksql.service.idquery_CSAS_LEFT_OUTER_JOIN_0-Join-left-repartition\", \"key\": 90, \"value\": {\"T_ROWTIME\": 17000, \"T_K\": \"\", \"T_ID\": 90, \"T_NAME\": \"ninety\", \"T_VALUE\": 90}, \"timestamp\": 17000},\n         {\"topic\": \"_confluent-ksql-some.ksql.service.idquery_CSAS_LEFT_OUTER_JOIN_0-Join-left-repartition\", \"key\": 0, \"value\": {\"T_ROWTIME\": 30000, \"T_K\": \"\", \"T_ID\": 0, \"T_NAME\": \"bar\", \"T_VALUE\": 99}, \"timestamp\": 30000},\n-        {\"topic\": \"_confluent-ksql-some.ksql.service.idquery_CSAS_LEFT_OUTER_JOIN_0-KSTREAM-JOINTHIS-0000000018-store-changelog\", \"window\": {\"start\": 0, \"end\": 11000, \"type\": \"time\"}, \"key\": 0, \"value\": {\"T_ROWTIME\": 0, \"T_K\": \"\", \"T_ID\": 0, \"T_NAME\": \"zero\", \"T_VALUE\": 0}, \"timestamp\": 0},\n-        {\"topic\": \"_confluent-ksql-some.ksql.service.idquery_CSAS_LEFT_OUTER_JOIN_0-KSTREAM-OUTEROTHER-0000000019-store-changelog\", \"window\": {\"start\": 10000, \"end\": 21000, \"type\": \"time\"}, \"key\": 0, \"value\": {\"TT_ROWTIME\": 10000, \"TT_K\": \"\", \"TT_ID\": 0, \"TT_F1\": \"blah\", \"TT_F2\": 50}, \"timestamp\": 10000},\n-        {\"topic\": \"_confluent-ksql-some.ksql.service.idquery_CSAS_LEFT_OUTER_JOIN_0-KSTREAM-JOINTHIS-0000000018-store-changelog\", \"window\": {\"start\": 11000, \"end\": 22000, \"type\": \"time\"}, \"key\": 10, \"value\": {\"T_ROWTIME\": 11000, \"T_K\": \"\", \"T_ID\": 10, \"T_NAME\": \"100\", \"T_VALUE\": 5}, \"timestamp\": 11000},\n-        {\"topic\": \"_confluent-ksql-some.ksql.service.idquery_CSAS_LEFT_OUTER_JOIN_0-KSTREAM-JOINTHIS-0000000018-store-changelog\", \"window\": {\"start\": 13000, \"end\": 24000, \"type\": \"time\"}, \"key\": 0, \"value\": {\"T_ROWTIME\": 13000, \"T_K\": \"\", \"T_ID\": 0, \"T_NAME\": \"foo\", \"T_VALUE\": 100}, \"timestamp\": 13000},\n-        {\"topic\": \"_confluent-ksql-some.ksql.service.idquery_CSAS_LEFT_OUTER_JOIN_0-KSTREAM-OUTEROTHER-0000000019-store-changelog\", \"window\": {\"start\": 15000, \"end\": 26000, \"type\": \"time\"}, \"key\": 0, \"value\": {\"TT_ROWTIME\": 15000, \"TT_K\": \"\", \"TT_ID\": 0, \"TT_F1\": \"a\", \"TT_F2\": 10}, \"timestamp\": 15000},\n-        {\"topic\": \"_confluent-ksql-some.ksql.service.idquery_CSAS_LEFT_OUTER_JOIN_0-KSTREAM-OUTEROTHER-0000000019-store-changelog\", \"window\": {\"start\": 16000, \"end\": 27000, \"type\": \"time\"}, \"key\": 100, \"value\": {\"TT_ROWTIME\": 16000, \"TT_K\": \"\", \"TT_ID\": 100, \"TT_F1\": \"newblah\", \"TT_F2\": 150}, \"timestamp\": 16000},\n-        {\"topic\": \"_confluent-ksql-some.ksql.service.idquery_CSAS_LEFT_OUTER_JOIN_0-KSTREAM-JOINTHIS-0000000018-store-changelog\", \"window\": {\"start\": 17000, \"end\": 28000, \"type\": \"time\"}, \"key\": 90, \"value\": {\"T_ROWTIME\": 17000, \"T_K\": \"\", \"T_ID\": 90, \"T_NAME\": \"ninety\", \"T_VALUE\": 90}, \"timestamp\": 17000},\n-        {\"topic\": \"_confluent-ksql-some.ksql.service.idquery_CSAS_LEFT_OUTER_JOIN_0-KSTREAM-JOINTHIS-0000000018-store-changelog\", \"window\": {\"start\": 30000, \"end\": 41000, \"type\": \"time\"}, \"key\": 0, \"value\": {\"T_ROWTIME\": 30000, \"T_K\": \"\", \"T_ID\": 0, \"T_NAME\": \"bar\", \"T_VALUE\": 99}, \"timestamp\": 30000},\n+        {\"topic\": \"_confluent-ksql-some.ksql.service.idquery_CSAS_LEFT_OUTER_JOIN_0-KSTREAM-JOINTHIS-0000000016-store-changelog\", \"window\": {\"start\": 0, \"end\": 11000, \"type\": \"time\"}, \"key\": 0, \"value\": {\"T_ROWTIME\": 0, \"T_K\": \"\", \"T_ID\": 0, \"T_NAME\": \"zero\", \"T_VALUE\": 0}, \"timestamp\": 0},", "originalCommit": "64a11182aefe01ae5cf5c50132bf5e191492d562", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}