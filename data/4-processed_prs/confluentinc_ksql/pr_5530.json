{"pr_number": 5530, "pr_title": "Klip 29 explicit keys", "pr_createdAt": "2020-06-02T21:06:02Z", "pr_url": "https://github.com/confluentinc/ksql/pull/5530", "timeline": [{"oid": "8dcbb251b2b405c06a64fe9fe91048c8a7c764a0", "url": "https://github.com/confluentinc/ksql/commit/8dcbb251b2b405c06a64fe9fe91048c8a7c764a0", "message": "chore: reserve KLIP-29", "committedDate": "2020-06-02T20:22:18Z", "type": "commit"}, {"oid": "3f87f40e0313a9f10b35d0d0a810061e50c444fb", "url": "https://github.com/confluentinc/ksql/commit/3f87f40e0313a9f10b35d0d0a810061e50c444fb", "message": "docs: raise KLIP-29", "committedDate": "2020-06-02T21:04:32Z", "type": "commit"}, {"oid": "4b00858426851e2a819f7b06ff66775db41fc0e5", "url": "https://github.com/confluentinc/ksql/commit/4b00858426851e2a819f7b06ff66775db41fc0e5", "message": "docs: add discussion links", "committedDate": "2020-06-02T21:07:15Z", "type": "commit"}, {"oid": "9e26b0ce8449e8e8ba30d1e4b80136e9c0152149", "url": "https://github.com/confluentinc/ksql/commit/9e26b0ce8449e8e8ba30d1e4b80136e9c0152149", "message": "chore: add example of confusion", "committedDate": "2020-06-02T21:16:12Z", "type": "commit"}, {"oid": "5e74f9a621e5d1fcad0f44a7d6635fa9ef56e94c", "url": "https://github.com/confluentinc/ksql/commit/5e74f9a621e5d1fcad0f44a7d6635fa9ef56e94c", "message": "chore: correct file name", "committedDate": "2020-06-02T21:17:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxMDU4Mg==", "url": "https://github.com/confluentinc/ksql/pull/5530#discussion_r434210582", "bodyText": "typo? not -> none", "author": "mjsax", "createdAt": "2020-06-02T22:30:41Z", "path": "design-proposals/kliup-29-explicit-keys.md", "diffHunk": "@@ -0,0 +1,154 @@\n+# KLIP-29: Explicit Keys\n+\n+**Author**: @big-andy-coates | \n+**Release Target**: 0.10.0 | \n+**Status**: In Discussion | \n+**Discussion**: [Github PR](https://github.com/confluentinc/ksql/pull/5530)\n+\n+**tl;dr:** Up until now ksqlDB has added an implicit `ROWKEY STRING (PRIMARY) KEY` to a `CREATE TABLE`\n+or `CREATE STREAM` statement that does not itself explicitly define a key column. This KLIP proposes\n+removing this implicit column creation and instead requiring tables to define their PRIMARY KEY, and\n+changing `CREATE STREAM` to create a stream without a KEY column, should not be defined.", "originalCommit": "9e26b0ce8449e8e8ba30d1e4b80136e9c0152149", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxMTU2MA==", "url": "https://github.com/confluentinc/ksql/pull/5530#discussion_r434211560", "bodyText": "nit: sql (seems some code snippets above don't define sql as language? -- not sure if you want to add it?)", "author": "mjsax", "createdAt": "2020-06-02T22:33:35Z", "path": "design-proposals/kliup-29-explicit-keys.md", "diffHunk": "@@ -0,0 +1,154 @@\n+# KLIP-29: Explicit Keys\n+\n+**Author**: @big-andy-coates | \n+**Release Target**: 0.10.0 | \n+**Status**: In Discussion | \n+**Discussion**: [Github PR](https://github.com/confluentinc/ksql/pull/5530)\n+\n+**tl;dr:** Up until now ksqlDB has added an implicit `ROWKEY STRING (PRIMARY) KEY` to a `CREATE TABLE`\n+or `CREATE STREAM` statement that does not itself explicitly define a key column. This KLIP proposes\n+removing this implicit column creation and instead requiring tables to define their PRIMARY KEY, and\n+changing `CREATE STREAM` to create a stream without a KEY column, should not be defined.\n+\n+## Motivation and background\n+\n+Implicitly adding columns is confusing for users. They are left wondering where did this column come from? \n+For example:\n+\n+```\n+ksal> CREATE STREAM S (ID INT, NAME STRING) WITH (...);\n+Stream S Created.\n+ksal> CREATE STREAM S2 AS SELECT ID, NAME FROM S;\n+Key missing from projection. See https://cnfl.io/2LV7ouS.\n+The query used to build `S2` must include the key column ROWKEY in its projection.\n+```\n+\n+Understandably, the user may be left wondering where this `ROWKEY` column came from and why they need to\n+add it to the projection.\n+\n+Now that ksqlDB supports more than just `STRING` key columns, it no longer makes sense to add an\n+implicit `STRING` key column by default.  Better to let the user define _if_ there is a key column, and if\n+so, what it's name and type are.\n+\n+There is no semantic need for a STREAM to have data in the key, and hence there should be no need for \n+there to be a KEY column defined.  This can also be useful when the data in the key is not in a format \n+ksqlDB can work with, e.g. an Avro, JSON or Protobuf key, or any other format.  It seems unwieldy and \n+confusing to add an implicit `STRING` key column if the actual key is empty or is not something ksqlDB \n+can read.\n+\n+Unlike STREAMs, TABLEs require a PRIMARY KEY column. Therefore, we should require the user to provide one.  \n+\n+## What is in scope\n+\n+* `CREATE TABLE` statements will require a `PRIMARY KEY` column to be defined.\n+* `CREATE STREAM` statements without a `KEY` column defined will define a stream without a key column. \n+\n+## What is not in scope\n+\n+* Everything else.\n+\n+## Value/Return\n+\n+Removal of implicitly added columns makes statements more declarative. They make it possible to describe \n+a stream with no data, or incompatible data, in the key. They make users _think_ about the name and type\n+of the PRIMARY KEY column of their tables.\n+\n+Combined, these changes make the language easier to use and richer.\n+\n+## Public APIS\n+\n+### CREATE TABLE changes\n+\n+A `CREATE TABLE` statement that does not define a `PRIMARY KEY` column will now result in an error:\n+\n+```\n+ksql> CREATE TABLE INPUT (A INT, B STRING) WITH (...);\n+Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\n+```\n+\n+Statements with a `PRIMARY KEY` column will continue to work as before.\n+\n+Where schema inference is used, the error message will include an example of how to define a partial\n+schema to add the primary key:\n+\n+```ql", "originalCommit": "9e26b0ce8449e8e8ba30d1e4b80136e9c0152149", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzODQ1Mg==", "url": "https://github.com/confluentinc/ksql/pull/5530#discussion_r434238452", "bodyText": "Some have console style output, not pure SQL.", "author": "big-andy-coates", "createdAt": "2020-06-03T00:02:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxMTU2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxMjUzNA==", "url": "https://github.com/confluentinc/ksql/pull/5530#discussion_r434212534", "bodyText": "typo? with out -> without", "author": "mjsax", "createdAt": "2020-06-02T22:36:21Z", "path": "design-proposals/kliup-29-explicit-keys.md", "diffHunk": "@@ -0,0 +1,154 @@\n+# KLIP-29: Explicit Keys\n+\n+**Author**: @big-andy-coates | \n+**Release Target**: 0.10.0 | \n+**Status**: In Discussion | \n+**Discussion**: [Github PR](https://github.com/confluentinc/ksql/pull/5530)\n+\n+**tl;dr:** Up until now ksqlDB has added an implicit `ROWKEY STRING (PRIMARY) KEY` to a `CREATE TABLE`\n+or `CREATE STREAM` statement that does not itself explicitly define a key column. This KLIP proposes\n+removing this implicit column creation and instead requiring tables to define their PRIMARY KEY, and\n+changing `CREATE STREAM` to create a stream without a KEY column, should not be defined.\n+\n+## Motivation and background\n+\n+Implicitly adding columns is confusing for users. They are left wondering where did this column come from? \n+For example:\n+\n+```\n+ksal> CREATE STREAM S (ID INT, NAME STRING) WITH (...);\n+Stream S Created.\n+ksal> CREATE STREAM S2 AS SELECT ID, NAME FROM S;\n+Key missing from projection. See https://cnfl.io/2LV7ouS.\n+The query used to build `S2` must include the key column ROWKEY in its projection.\n+```\n+\n+Understandably, the user may be left wondering where this `ROWKEY` column came from and why they need to\n+add it to the projection.\n+\n+Now that ksqlDB supports more than just `STRING` key columns, it no longer makes sense to add an\n+implicit `STRING` key column by default.  Better to let the user define _if_ there is a key column, and if\n+so, what it's name and type are.\n+\n+There is no semantic need for a STREAM to have data in the key, and hence there should be no need for \n+there to be a KEY column defined.  This can also be useful when the data in the key is not in a format \n+ksqlDB can work with, e.g. an Avro, JSON or Protobuf key, or any other format.  It seems unwieldy and \n+confusing to add an implicit `STRING` key column if the actual key is empty or is not something ksqlDB \n+can read.\n+\n+Unlike STREAMs, TABLEs require a PRIMARY KEY column. Therefore, we should require the user to provide one.  \n+\n+## What is in scope\n+\n+* `CREATE TABLE` statements will require a `PRIMARY KEY` column to be defined.\n+* `CREATE STREAM` statements without a `KEY` column defined will define a stream without a key column. \n+\n+## What is not in scope\n+\n+* Everything else.\n+\n+## Value/Return\n+\n+Removal of implicitly added columns makes statements more declarative. They make it possible to describe \n+a stream with no data, or incompatible data, in the key. They make users _think_ about the name and type\n+of the PRIMARY KEY column of their tables.\n+\n+Combined, these changes make the language easier to use and richer.\n+\n+## Public APIS\n+\n+### CREATE TABLE changes\n+\n+A `CREATE TABLE` statement that does not define a `PRIMARY KEY` column will now result in an error:\n+\n+```\n+ksql> CREATE TABLE INPUT (A INT, B STRING) WITH (...);\n+Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\n+```\n+\n+Statements with a `PRIMARY KEY` column will continue to work as before.\n+\n+Where schema inference is used, the error message will include an example of how to define a partial\n+schema to add the primary key:\n+\n+```ql\n+ksql> CREATE TABLE INPUT WITH (value_foramt='Avro', ...);\n+Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\n+You can define just the primary key and still load the value columns from the Schema registry, for example:\n+  CREATE TABLE INPUT (ID INT PRIMARY KEY) WITH (value_foramt='Avro', ...);\n+```\n+\n+### CREATE STREAM changes\n+\n+A `CREATE STREAM` statement that does not define a `KEY` column will now result in a stream with no\n+data being read from the Kafka message's key.\n+\n+```sql\n+CREATE STREAM INPUT (A INT, B STRING) WITH (...);\n+-- Results in INPUT with schema: A INT, B STRING, i.e. no key column.\n+```\n+\n+Statements with a `KEY` column will continue to work as before.\n+\n+## Design\n+\n+This is mainly a syntax only change, as detailed about. \n+\n+Streams with out a key column will work just like any other stream. However, `GROUP BY`, `PARTITION BY`", "originalCommit": "9e26b0ce8449e8e8ba30d1e4b80136e9c0152149", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxMjkxMA==", "url": "https://github.com/confluentinc/ksql/pull/5530#discussion_r434212910", "bodyText": "typo? [s]tatements", "author": "mjsax", "createdAt": "2020-06-02T22:37:28Z", "path": "design-proposals/kliup-29-explicit-keys.md", "diffHunk": "@@ -0,0 +1,154 @@\n+# KLIP-29: Explicit Keys\n+\n+**Author**: @big-andy-coates | \n+**Release Target**: 0.10.0 | \n+**Status**: In Discussion | \n+**Discussion**: [Github PR](https://github.com/confluentinc/ksql/pull/5530)\n+\n+**tl;dr:** Up until now ksqlDB has added an implicit `ROWKEY STRING (PRIMARY) KEY` to a `CREATE TABLE`\n+or `CREATE STREAM` statement that does not itself explicitly define a key column. This KLIP proposes\n+removing this implicit column creation and instead requiring tables to define their PRIMARY KEY, and\n+changing `CREATE STREAM` to create a stream without a KEY column, should not be defined.\n+\n+## Motivation and background\n+\n+Implicitly adding columns is confusing for users. They are left wondering where did this column come from? \n+For example:\n+\n+```\n+ksal> CREATE STREAM S (ID INT, NAME STRING) WITH (...);\n+Stream S Created.\n+ksal> CREATE STREAM S2 AS SELECT ID, NAME FROM S;\n+Key missing from projection. See https://cnfl.io/2LV7ouS.\n+The query used to build `S2` must include the key column ROWKEY in its projection.\n+```\n+\n+Understandably, the user may be left wondering where this `ROWKEY` column came from and why they need to\n+add it to the projection.\n+\n+Now that ksqlDB supports more than just `STRING` key columns, it no longer makes sense to add an\n+implicit `STRING` key column by default.  Better to let the user define _if_ there is a key column, and if\n+so, what it's name and type are.\n+\n+There is no semantic need for a STREAM to have data in the key, and hence there should be no need for \n+there to be a KEY column defined.  This can also be useful when the data in the key is not in a format \n+ksqlDB can work with, e.g. an Avro, JSON or Protobuf key, or any other format.  It seems unwieldy and \n+confusing to add an implicit `STRING` key column if the actual key is empty or is not something ksqlDB \n+can read.\n+\n+Unlike STREAMs, TABLEs require a PRIMARY KEY column. Therefore, we should require the user to provide one.  \n+\n+## What is in scope\n+\n+* `CREATE TABLE` statements will require a `PRIMARY KEY` column to be defined.\n+* `CREATE STREAM` statements without a `KEY` column defined will define a stream without a key column. \n+\n+## What is not in scope\n+\n+* Everything else.\n+\n+## Value/Return\n+\n+Removal of implicitly added columns makes statements more declarative. They make it possible to describe \n+a stream with no data, or incompatible data, in the key. They make users _think_ about the name and type\n+of the PRIMARY KEY column of their tables.\n+\n+Combined, these changes make the language easier to use and richer.\n+\n+## Public APIS\n+\n+### CREATE TABLE changes\n+\n+A `CREATE TABLE` statement that does not define a `PRIMARY KEY` column will now result in an error:\n+\n+```\n+ksql> CREATE TABLE INPUT (A INT, B STRING) WITH (...);\n+Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\n+```\n+\n+Statements with a `PRIMARY KEY` column will continue to work as before.\n+\n+Where schema inference is used, the error message will include an example of how to define a partial\n+schema to add the primary key:\n+\n+```ql\n+ksql> CREATE TABLE INPUT WITH (value_foramt='Avro', ...);\n+Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\n+You can define just the primary key and still load the value columns from the Schema registry, for example:\n+  CREATE TABLE INPUT (ID INT PRIMARY KEY) WITH (value_foramt='Avro', ...);\n+```\n+\n+### CREATE STREAM changes\n+\n+A `CREATE STREAM` statement that does not define a `KEY` column will now result in a stream with no\n+data being read from the Kafka message's key.\n+\n+```sql\n+CREATE STREAM INPUT (A INT, B STRING) WITH (...);\n+-- Results in INPUT with schema: A INT, B STRING, i.e. no key column.\n+```\n+\n+Statements with a `KEY` column will continue to work as before.\n+\n+## Design\n+\n+This is mainly a syntax only change, as detailed about. \n+\n+Streams with out a key column will work just like any other stream. However, `GROUP BY`, `PARTITION BY`\n+and `JOIN`s will _always_ result in a repartition, as the grouping, partitioning or joining expression\n+can never be the key column.\n+\n+## Test plan\n+\n+Ensure coverage of key-less streams in QTT tests, especially for `GROUP BY`, `PARTITION BY`, and `JOIN`s.\n+\n+## LOEs and Delivery Milestones\n+\n+Single deliverable, with low loe (prototype already working).\n+\n+## Documentation Updates\n+\n+Suitable doc updates for the `CREATE TABLE` and `CREATE STREAM` statements will be done as part of the KLIP.\n+\n+Plus updates to the rests of the ksqlDB docs, Kafka tutorials microsite and the Examples repo will be done\n+in tandem with other syntax changes.\n+\n+Release notes to call out this change in behaviour.\n+\n+## Compatibility Implications\n+\n+CREATE Statements submitted on previous versions of ksqlDB will continue to work as expected.", "originalCommit": "9e26b0ce8449e8e8ba30d1e4b80136e9c0152149", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxMzA2Ng==", "url": "https://github.com/confluentinc/ksql/pull/5530#discussion_r434213066", "bodyText": "typo: RO[W]KEY", "author": "mjsax", "createdAt": "2020-06-02T22:37:56Z", "path": "design-proposals/kliup-29-explicit-keys.md", "diffHunk": "@@ -0,0 +1,154 @@\n+# KLIP-29: Explicit Keys\n+\n+**Author**: @big-andy-coates | \n+**Release Target**: 0.10.0 | \n+**Status**: In Discussion | \n+**Discussion**: [Github PR](https://github.com/confluentinc/ksql/pull/5530)\n+\n+**tl;dr:** Up until now ksqlDB has added an implicit `ROWKEY STRING (PRIMARY) KEY` to a `CREATE TABLE`\n+or `CREATE STREAM` statement that does not itself explicitly define a key column. This KLIP proposes\n+removing this implicit column creation and instead requiring tables to define their PRIMARY KEY, and\n+changing `CREATE STREAM` to create a stream without a KEY column, should not be defined.\n+\n+## Motivation and background\n+\n+Implicitly adding columns is confusing for users. They are left wondering where did this column come from? \n+For example:\n+\n+```\n+ksal> CREATE STREAM S (ID INT, NAME STRING) WITH (...);\n+Stream S Created.\n+ksal> CREATE STREAM S2 AS SELECT ID, NAME FROM S;\n+Key missing from projection. See https://cnfl.io/2LV7ouS.\n+The query used to build `S2` must include the key column ROWKEY in its projection.\n+```\n+\n+Understandably, the user may be left wondering where this `ROWKEY` column came from and why they need to\n+add it to the projection.\n+\n+Now that ksqlDB supports more than just `STRING` key columns, it no longer makes sense to add an\n+implicit `STRING` key column by default.  Better to let the user define _if_ there is a key column, and if\n+so, what it's name and type are.\n+\n+There is no semantic need for a STREAM to have data in the key, and hence there should be no need for \n+there to be a KEY column defined.  This can also be useful when the data in the key is not in a format \n+ksqlDB can work with, e.g. an Avro, JSON or Protobuf key, or any other format.  It seems unwieldy and \n+confusing to add an implicit `STRING` key column if the actual key is empty or is not something ksqlDB \n+can read.\n+\n+Unlike STREAMs, TABLEs require a PRIMARY KEY column. Therefore, we should require the user to provide one.  \n+\n+## What is in scope\n+\n+* `CREATE TABLE` statements will require a `PRIMARY KEY` column to be defined.\n+* `CREATE STREAM` statements without a `KEY` column defined will define a stream without a key column. \n+\n+## What is not in scope\n+\n+* Everything else.\n+\n+## Value/Return\n+\n+Removal of implicitly added columns makes statements more declarative. They make it possible to describe \n+a stream with no data, or incompatible data, in the key. They make users _think_ about the name and type\n+of the PRIMARY KEY column of their tables.\n+\n+Combined, these changes make the language easier to use and richer.\n+\n+## Public APIS\n+\n+### CREATE TABLE changes\n+\n+A `CREATE TABLE` statement that does not define a `PRIMARY KEY` column will now result in an error:\n+\n+```\n+ksql> CREATE TABLE INPUT (A INT, B STRING) WITH (...);\n+Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\n+```\n+\n+Statements with a `PRIMARY KEY` column will continue to work as before.\n+\n+Where schema inference is used, the error message will include an example of how to define a partial\n+schema to add the primary key:\n+\n+```ql\n+ksql> CREATE TABLE INPUT WITH (value_foramt='Avro', ...);\n+Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\n+You can define just the primary key and still load the value columns from the Schema registry, for example:\n+  CREATE TABLE INPUT (ID INT PRIMARY KEY) WITH (value_foramt='Avro', ...);\n+```\n+\n+### CREATE STREAM changes\n+\n+A `CREATE STREAM` statement that does not define a `KEY` column will now result in a stream with no\n+data being read from the Kafka message's key.\n+\n+```sql\n+CREATE STREAM INPUT (A INT, B STRING) WITH (...);\n+-- Results in INPUT with schema: A INT, B STRING, i.e. no key column.\n+```\n+\n+Statements with a `KEY` column will continue to work as before.\n+\n+## Design\n+\n+This is mainly a syntax only change, as detailed about. \n+\n+Streams with out a key column will work just like any other stream. However, `GROUP BY`, `PARTITION BY`\n+and `JOIN`s will _always_ result in a repartition, as the grouping, partitioning or joining expression\n+can never be the key column.\n+\n+## Test plan\n+\n+Ensure coverage of key-less streams in QTT tests, especially for `GROUP BY`, `PARTITION BY`, and `JOIN`s.\n+\n+## LOEs and Delivery Milestones\n+\n+Single deliverable, with low loe (prototype already working).\n+\n+## Documentation Updates\n+\n+Suitable doc updates for the `CREATE TABLE` and `CREATE STREAM` statements will be done as part of the KLIP.\n+\n+Plus updates to the rests of the ksqlDB docs, Kafka tutorials microsite and the Examples repo will be done\n+in tandem with other syntax changes.\n+\n+Release notes to call out this change in behaviour.\n+\n+## Compatibility Implications\n+\n+CREATE Statements submitted on previous versions of ksqlDB will continue to work as expected.\n+\n+Users submitting previously written statements may see `CREATE TABLE` statements that previously ran,\n+now fail, and see `CREATE STREAM` statements create streams without a `ROwKEY STRING KEY` column. ", "originalCommit": "9e26b0ce8449e8e8ba30d1e4b80136e9c0152149", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxNDAyOA==", "url": "https://github.com/confluentinc/ksql/pull/5530#discussion_r434214028", "bodyText": "Just to clarify: After key schemas are integrated with SR (and after we fully support structured keys), a user will be able to do\nCREATE TABLE myTable WITH (key_format='Avro', value_format='Avro', kafka_topic='input');\n\nAnd the all columns from the key-avro-schema will be the PK automatically?", "author": "mjsax", "createdAt": "2020-06-02T22:40:45Z", "path": "design-proposals/kliup-29-explicit-keys.md", "diffHunk": "@@ -0,0 +1,154 @@\n+# KLIP-29: Explicit Keys\n+\n+**Author**: @big-andy-coates | \n+**Release Target**: 0.10.0 | \n+**Status**: In Discussion | \n+**Discussion**: [Github PR](https://github.com/confluentinc/ksql/pull/5530)\n+\n+**tl;dr:** Up until now ksqlDB has added an implicit `ROWKEY STRING (PRIMARY) KEY` to a `CREATE TABLE`\n+or `CREATE STREAM` statement that does not itself explicitly define a key column. This KLIP proposes\n+removing this implicit column creation and instead requiring tables to define their PRIMARY KEY, and\n+changing `CREATE STREAM` to create a stream without a KEY column, should not be defined.\n+\n+## Motivation and background\n+\n+Implicitly adding columns is confusing for users. They are left wondering where did this column come from? \n+For example:\n+\n+```\n+ksal> CREATE STREAM S (ID INT, NAME STRING) WITH (...);\n+Stream S Created.\n+ksal> CREATE STREAM S2 AS SELECT ID, NAME FROM S;\n+Key missing from projection. See https://cnfl.io/2LV7ouS.\n+The query used to build `S2` must include the key column ROWKEY in its projection.\n+```\n+\n+Understandably, the user may be left wondering where this `ROWKEY` column came from and why they need to\n+add it to the projection.\n+\n+Now that ksqlDB supports more than just `STRING` key columns, it no longer makes sense to add an\n+implicit `STRING` key column by default.  Better to let the user define _if_ there is a key column, and if\n+so, what it's name and type are.\n+\n+There is no semantic need for a STREAM to have data in the key, and hence there should be no need for \n+there to be a KEY column defined.  This can also be useful when the data in the key is not in a format \n+ksqlDB can work with, e.g. an Avro, JSON or Protobuf key, or any other format.  It seems unwieldy and \n+confusing to add an implicit `STRING` key column if the actual key is empty or is not something ksqlDB \n+can read.\n+\n+Unlike STREAMs, TABLEs require a PRIMARY KEY column. Therefore, we should require the user to provide one.  \n+\n+## What is in scope\n+\n+* `CREATE TABLE` statements will require a `PRIMARY KEY` column to be defined.\n+* `CREATE STREAM` statements without a `KEY` column defined will define a stream without a key column. \n+\n+## What is not in scope\n+\n+* Everything else.\n+\n+## Value/Return\n+\n+Removal of implicitly added columns makes statements more declarative. They make it possible to describe \n+a stream with no data, or incompatible data, in the key. They make users _think_ about the name and type\n+of the PRIMARY KEY column of their tables.\n+\n+Combined, these changes make the language easier to use and richer.\n+\n+## Public APIS\n+\n+### CREATE TABLE changes\n+\n+A `CREATE TABLE` statement that does not define a `PRIMARY KEY` column will now result in an error:\n+\n+```\n+ksql> CREATE TABLE INPUT (A INT, B STRING) WITH (...);\n+Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\n+```\n+\n+Statements with a `PRIMARY KEY` column will continue to work as before.\n+\n+Where schema inference is used, the error message will include an example of how to define a partial\n+schema to add the primary key:\n+\n+```ql\n+ksql> CREATE TABLE INPUT WITH (value_foramt='Avro', ...);\n+Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\n+You can define just the primary key and still load the value columns from the Schema registry, for example:\n+  CREATE TABLE INPUT (ID INT PRIMARY KEY) WITH (value_foramt='Avro', ...);\n+```\n+\n+### CREATE STREAM changes\n+\n+A `CREATE STREAM` statement that does not define a `KEY` column will now result in a stream with no\n+data being read from the Kafka message's key.\n+\n+```sql\n+CREATE STREAM INPUT (A INT, B STRING) WITH (...);\n+-- Results in INPUT with schema: A INT, B STRING, i.e. no key column.\n+```\n+\n+Statements with a `KEY` column will continue to work as before.\n+\n+## Design\n+\n+This is mainly a syntax only change, as detailed about. \n+\n+Streams with out a key column will work just like any other stream. However, `GROUP BY`, `PARTITION BY`\n+and `JOIN`s will _always_ result in a repartition, as the grouping, partitioning or joining expression\n+can never be the key column.\n+\n+## Test plan\n+\n+Ensure coverage of key-less streams in QTT tests, especially for `GROUP BY`, `PARTITION BY`, and `JOIN`s.\n+\n+## LOEs and Delivery Milestones\n+\n+Single deliverable, with low loe (prototype already working).\n+\n+## Documentation Updates\n+\n+Suitable doc updates for the `CREATE TABLE` and `CREATE STREAM` statements will be done as part of the KLIP.\n+\n+Plus updates to the rests of the ksqlDB docs, Kafka tutorials microsite and the Examples repo will be done\n+in tandem with other syntax changes.\n+\n+Release notes to call out this change in behaviour.\n+\n+## Compatibility Implications\n+\n+CREATE Statements submitted on previous versions of ksqlDB will continue to work as expected.\n+\n+Users submitting previously written statements may see `CREATE TABLE` statements that previously ran,\n+now fail, and see `CREATE STREAM` statements create streams without a `ROwKEY STRING KEY` column. \n+\n+Users receiving an error when their `CREATE TABLE` statements fail will need to update their statements\n+to include a suitable `PRIMARY KEY` column.  Where the statement already contains the column set, the \n+addition of the `PRIMARY KEY` column should be simple.  However, users may be more confused when the \n+statement is making use of schema inference, i.e. loading the value columns from the Schema Registry,\n+for example:\n+\n+```sql\n+-- existing create statement that loads the value columns from the Schema Registry: \n+CREATE TABLE OUTPUT WITH (value_format='Avro', kafka_topic='input');\n+```\n+\n+As ksqlDB does not _yet_ support loading the key schema from the Schema Registry the user must now\n+supply the `PRIMARY KEY` in a _partial schema_. (_Partial schema_ support was added in v0.9):", "originalCommit": "9e26b0ce8449e8e8ba30d1e4b80136e9c0152149", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzNzQ1Ng==", "url": "https://github.com/confluentinc/ksql/pull/5530#discussion_r434237456", "bodyText": "Yup. or just\nCREATE TABLE myTable WITH (format='Avro', kafka_topic='input');", "author": "big-andy-coates", "createdAt": "2020-06-02T23:58:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxNDAyOA=="}], "type": "inlineReview"}, {"oid": "78f818aff5e8819d28a2a74b427232ceaa3bab04", "url": "https://github.com/confluentinc/ksql/commit/78f818aff5e8819d28a2a74b427232ceaa3bab04", "message": "chore: requested changes", "committedDate": "2020-06-03T00:03:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzOTI2NQ==", "url": "https://github.com/confluentinc/ksql/pull/5530#discussion_r434239265", "bodyText": "nice!", "author": "agavra", "createdAt": "2020-06-03T00:05:02Z", "path": "design-proposals/kliup-29-explicit-keys.md", "diffHunk": "@@ -0,0 +1,154 @@\n+# KLIP-29: Explicit Keys\n+\n+**Author**: @big-andy-coates | \n+**Release Target**: 0.10.0 | \n+**Status**: In Discussion | \n+**Discussion**: [Github PR](https://github.com/confluentinc/ksql/pull/5530)\n+\n+**tl;dr:** Up until now ksqlDB has added an implicit `ROWKEY STRING (PRIMARY) KEY` to a `CREATE TABLE`\n+or `CREATE STREAM` statement that does not itself explicitly define a key column. This KLIP proposes\n+removing this implicit column creation and instead requiring tables to define their PRIMARY KEY, and\n+changing `CREATE STREAM` to create a stream without a KEY column, should not be defined.\n+\n+## Motivation and background\n+\n+Implicitly adding columns is confusing for users. They are left wondering where did this column come from? \n+For example:\n+\n+```\n+ksal> CREATE STREAM S (ID INT, NAME STRING) WITH (...);\n+Stream S Created.\n+ksal> CREATE STREAM S2 AS SELECT ID, NAME FROM S;\n+Key missing from projection. See https://cnfl.io/2LV7ouS.\n+The query used to build `S2` must include the key column ROWKEY in its projection.\n+```\n+\n+Understandably, the user may be left wondering where this `ROWKEY` column came from and why they need to\n+add it to the projection.\n+\n+Now that ksqlDB supports more than just `STRING` key columns, it no longer makes sense to add an\n+implicit `STRING` key column by default.  Better to let the user define _if_ there is a key column, and if\n+so, what it's name and type are.\n+\n+There is no semantic need for a STREAM to have data in the key, and hence there should be no need for \n+there to be a KEY column defined.  This can also be useful when the data in the key is not in a format \n+ksqlDB can work with, e.g. an Avro, JSON or Protobuf key, or any other format.  It seems unwieldy and \n+confusing to add an implicit `STRING` key column if the actual key is empty or is not something ksqlDB \n+can read.\n+\n+Unlike STREAMs, TABLEs require a PRIMARY KEY column. Therefore, we should require the user to provide one.  \n+\n+## What is in scope\n+\n+* `CREATE TABLE` statements will require a `PRIMARY KEY` column to be defined.\n+* `CREATE STREAM` statements without a `KEY` column defined will define a stream without a key column. \n+\n+## What is not in scope\n+\n+* Everything else.\n+\n+## Value/Return\n+\n+Removal of implicitly added columns makes statements more declarative. They make it possible to describe \n+a stream with no data, or incompatible data, in the key. They make users _think_ about the name and type\n+of the PRIMARY KEY column of their tables.\n+\n+Combined, these changes make the language easier to use and richer.\n+\n+## Public APIS\n+\n+### CREATE TABLE changes\n+\n+A `CREATE TABLE` statement that does not define a `PRIMARY KEY` column will now result in an error:\n+\n+```\n+ksql> CREATE TABLE INPUT (A INT, B STRING) WITH (...);\n+Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\n+```\n+\n+Statements with a `PRIMARY KEY` column will continue to work as before.\n+\n+Where schema inference is used, the error message will include an example of how to define a partial\n+schema to add the primary key:\n+\n+```ql\n+ksql> CREATE TABLE INPUT WITH (value_foramt='Avro', ...);\n+Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\n+You can define just the primary key and still load the value columns from the Schema registry, for example:\n+  CREATE TABLE INPUT (ID INT PRIMARY KEY) WITH (value_foramt='Avro', ...);\n+```\n+\n+### CREATE STREAM changes\n+\n+A `CREATE STREAM` statement that does not define a `KEY` column will now result in a stream with no\n+data being read from the Kafka message's key.\n+\n+```sql\n+CREATE STREAM INPUT (A INT, B STRING) WITH (...);\n+-- Results in INPUT with schema: A INT, B STRING, i.e. no key column.\n+```\n+\n+Statements with a `KEY` column will continue to work as before.\n+\n+## Design\n+\n+This is mainly a syntax only change, as detailed about. \n+\n+Streams with out a key column will work just like any other stream. However, `GROUP BY`, `PARTITION BY`\n+and `JOIN`s will _always_ result in a repartition, as the grouping, partitioning or joining expression\n+can never be the key column.\n+\n+## Test plan\n+\n+Ensure coverage of key-less streams in QTT tests, especially for `GROUP BY`, `PARTITION BY`, and `JOIN`s.\n+\n+## LOEs and Delivery Milestones\n+\n+Single deliverable, with low loe (prototype already working).", "originalCommit": "9e26b0ce8449e8e8ba30d1e4b80136e9c0152149", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzOTY5MQ==", "url": "https://github.com/confluentinc/ksql/pull/5530#discussion_r434239691", "bodyText": "would be nice to explicitly state in this KLIP what the binary value of the key will be in subsequent queries. e.g.\nCREATE STREAM foo (col VARCHAR) WITH (...); --- there is no declared key, but there is a key in the kafka message\nCREATE STREAM bar AS SELECT * FROM foo; --- what is in the binary key of the kafka message?\nIf I understand correctly, the key will still be the same as the key from foo, not null", "author": "agavra", "createdAt": "2020-06-03T00:06:43Z", "path": "design-proposals/kliup-29-explicit-keys.md", "diffHunk": "@@ -0,0 +1,154 @@\n+# KLIP-29: Explicit Keys\n+\n+**Author**: @big-andy-coates | \n+**Release Target**: 0.10.0 | \n+**Status**: In Discussion | \n+**Discussion**: [Github PR](https://github.com/confluentinc/ksql/pull/5530)\n+\n+**tl;dr:** Up until now ksqlDB has added an implicit `ROWKEY STRING (PRIMARY) KEY` to a `CREATE TABLE`\n+or `CREATE STREAM` statement that does not itself explicitly define a key column. This KLIP proposes\n+removing this implicit column creation and instead requiring tables to define their PRIMARY KEY, and\n+changing `CREATE STREAM` to create a stream without a KEY column, should not be defined.\n+\n+## Motivation and background\n+\n+Implicitly adding columns is confusing for users. They are left wondering where did this column come from? \n+For example:\n+\n+```\n+ksal> CREATE STREAM S (ID INT, NAME STRING) WITH (...);\n+Stream S Created.\n+ksal> CREATE STREAM S2 AS SELECT ID, NAME FROM S;\n+Key missing from projection. See https://cnfl.io/2LV7ouS.\n+The query used to build `S2` must include the key column ROWKEY in its projection.\n+```\n+\n+Understandably, the user may be left wondering where this `ROWKEY` column came from and why they need to\n+add it to the projection.\n+\n+Now that ksqlDB supports more than just `STRING` key columns, it no longer makes sense to add an\n+implicit `STRING` key column by default.  Better to let the user define _if_ there is a key column, and if\n+so, what it's name and type are.\n+\n+There is no semantic need for a STREAM to have data in the key, and hence there should be no need for \n+there to be a KEY column defined.  This can also be useful when the data in the key is not in a format \n+ksqlDB can work with, e.g. an Avro, JSON or Protobuf key, or any other format.  It seems unwieldy and \n+confusing to add an implicit `STRING` key column if the actual key is empty or is not something ksqlDB \n+can read.\n+\n+Unlike STREAMs, TABLEs require a PRIMARY KEY column. Therefore, we should require the user to provide one.  \n+\n+## What is in scope\n+\n+* `CREATE TABLE` statements will require a `PRIMARY KEY` column to be defined.\n+* `CREATE STREAM` statements without a `KEY` column defined will define a stream without a key column. \n+\n+## What is not in scope\n+\n+* Everything else.\n+\n+## Value/Return\n+\n+Removal of implicitly added columns makes statements more declarative. They make it possible to describe \n+a stream with no data, or incompatible data, in the key. They make users _think_ about the name and type\n+of the PRIMARY KEY column of their tables.\n+\n+Combined, these changes make the language easier to use and richer.\n+\n+## Public APIS\n+\n+### CREATE TABLE changes\n+\n+A `CREATE TABLE` statement that does not define a `PRIMARY KEY` column will now result in an error:\n+\n+```\n+ksql> CREATE TABLE INPUT (A INT, B STRING) WITH (...);\n+Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\n+```\n+\n+Statements with a `PRIMARY KEY` column will continue to work as before.\n+\n+Where schema inference is used, the error message will include an example of how to define a partial\n+schema to add the primary key:\n+\n+```ql\n+ksql> CREATE TABLE INPUT WITH (value_foramt='Avro', ...);\n+Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\n+You can define just the primary key and still load the value columns from the Schema registry, for example:\n+  CREATE TABLE INPUT (ID INT PRIMARY KEY) WITH (value_foramt='Avro', ...);\n+```\n+\n+### CREATE STREAM changes\n+\n+A `CREATE STREAM` statement that does not define a `KEY` column will now result in a stream with no\n+data being read from the Kafka message's key.\n+\n+```sql\n+CREATE STREAM INPUT (A INT, B STRING) WITH (...);\n+-- Results in INPUT with schema: A INT, B STRING, i.e. no key column.\n+```\n+\n+Statements with a `KEY` column will continue to work as before.\n+\n+## Design", "originalCommit": "9e26b0ce8449e8e8ba30d1e4b80136e9c0152149", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NDI0OA==", "url": "https://github.com/confluentinc/ksql/pull/5530#discussion_r434244248", "bodyText": "Good call.", "author": "big-andy-coates", "createdAt": "2020-06-03T00:24:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzOTY5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwMzgxNw==", "url": "https://github.com/confluentinc/ksql/pull/5530#discussion_r434303817", "bodyText": "From my understanding, the key would be null... Because in the first CS the key is ignored, it should be \"projected away\"?\nSeems that this aligns with the update to the KLIP @big-andy-coates pushed.", "author": "mjsax", "createdAt": "2020-06-03T04:41:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzOTY5MQ=="}], "type": "inlineReview"}, {"oid": "d5262df5bfc5be0758a8ea126cf45fefbca7c09a", "url": "https://github.com/confluentinc/ksql/commit/d5262df5bfc5be0758a8ea126cf45fefbca7c09a", "message": "chore: requested changes", "committedDate": "2020-06-03T00:24:02Z", "type": "commit"}]}