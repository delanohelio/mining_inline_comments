{"pr_number": 6523, "pr_title": "docs: update KLIP-38 and add Docs for Variables in ksqlDB", "pr_createdAt": "2020-10-26T20:40:50Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6523", "timeline": [{"oid": "089f93f8e27f6308f5aa662185ae32e946981436", "url": "https://github.com/confluentinc/ksql/commit/089f93f8e27f6308f5aa662185ae32e946981436", "message": "docs: Update KLIP-38 with new variable substitution changes", "committedDate": "2020-10-26T20:25:22Z", "type": "commit"}, {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "url": "https://github.com/confluentinc/ksql/commit/7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "message": "docs: Add documentation for how to use variables in SQL", "committedDate": "2020-10-26T20:38:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MjMwMg==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512262302", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ---------------------------------------------------------\n          \n          \n            \n            ---", "author": "JimGalasyn", "createdAt": "2020-10-26T20:55:28Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2Mjk3Mg==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512262972", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n          \n          \n            \n            Valid variable names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).", "author": "JimGalasyn", "createdAt": "2020-10-26T20:56:37Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MzM3MQ==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512263371", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            There are no type definition for values.  All variables values must be wrapped into single-quotes.\n          \n          \n            \n            There is no type declaration for a value.  All variable values must be enclosed into single-quotes.", "author": "JimGalasyn", "createdAt": "2020-10-26T20:57:23Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NDIxMQ==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512264211", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Example:\n          \n          \n            \n            The following DEFINE statements show example assignments to variable values.", "author": "JimGalasyn", "createdAt": "2020-10-26T20:59:02Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NDU4NA==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512264584", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n          \n          \n            \n            Single-quotes are removed during variable substitution. To escape single-quotes, enclose the value with triple-quotes.", "author": "JimGalasyn", "createdAt": "2020-10-26T20:59:43Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NjkzMw==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512266933", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Example:\n          \n          \n            \n            The following DEFINE statement shows an example variable assignment that embeds single quotes in the value.", "author": "JimGalasyn", "createdAt": "2020-10-26T21:04:01Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NzA2Mw==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512267063", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Deleting variables\n          \n          \n            \n            Delete variables", "author": "JimGalasyn", "createdAt": "2020-10-26T21:04:14Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NzI2OA==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512267268", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ------------------\n          \n          \n            \n            ----------------", "author": "JimGalasyn", "createdAt": "2020-10-26T21:04:37Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NzYzNg==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512267636", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can delete defined variables with the `UNDEFINE` syntax.\n          \n          \n            \n            Delete defined variables by using the `UNDEFINE` statement.", "author": "JimGalasyn", "createdAt": "2020-10-26T21:05:16Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NzcyOQ==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512267729", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Printing variables\n          \n          \n            \n            Print variables", "author": "JimGalasyn", "createdAt": "2020-10-26T21:05:29Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NzgxOQ==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512267819", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ------------------\n          \n          \n            \n            ---------------", "author": "JimGalasyn", "createdAt": "2020-10-26T21:05:40Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2ODUwOA==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512268508", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Example:\n          \n          \n            \n            The following example shows how to assign and print variable values.", "author": "JimGalasyn", "createdAt": "2020-10-26T21:06:56Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2ODY3OA==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512268678", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Referencing substitution variables\n          \n          \n            \n            Reference substitution variables", "author": "JimGalasyn", "createdAt": "2020-10-26T21:07:13Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2ODc3MA==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512268770", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ----------------------------------\n          \n          \n            \n            --------------------------------", "author": "JimGalasyn", "createdAt": "2020-10-26T21:07:24Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2OTE3Mw==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512269173", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n          \n          \n            \n            Reference a variable by enclosing the variable name between `${}` characters, for example, `${replicas}`.", "author": "JimGalasyn", "createdAt": "2020-10-26T21:08:16Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2OTU4Mg==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512269582", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Example:\n          \n          \n            \n            The following example shows how to assign and reference variable values.", "author": "JimGalasyn", "createdAt": "2020-10-26T21:09:02Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3MDUyMQ==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512270521", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n          \n          \n            \n            ksqlDB doesn't add single-quotes to values during variable substitution. Also, you must know the data type of a variable to use it.", "author": "JimGalasyn", "createdAt": "2020-10-26T21:10:41Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3MDg1Ng==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512270856", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n          \n          \n            \n            !!! note\n          \n          \n            \n                Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.", "author": "JimGalasyn", "createdAt": "2020-10-26T21:11:11Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3MTI2Nw==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512271267", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n          \n          \n            \n            Variable substitution is allowed in specific SQL statements. You can replace text and non-text literals, and identifiers like", "author": "JimGalasyn", "createdAt": "2020-10-26T21:11:57Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3MTQ3OA==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512271478", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            column names and stream/table names. Variables cannot be used as reserved keywords.\n          \n          \n            \n            column names and stream/table names. You can't use variables as reserved keywords.", "author": "JimGalasyn", "createdAt": "2020-10-26T21:12:21Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n+column names and stream/table names. Variables cannot be used as reserved keywords.", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "987509e6e706272642f483c1338488a2ea1d7df3", "url": "https://github.com/confluentinc/ksql/commit/987509e6e706272642f483c1338488a2ea1d7df3", "message": "docs: Apply Jim's suggestions\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>", "committedDate": "2020-10-26T21:14:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3NTQ1NA==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512275454", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For instance:\n          \n          \n            \n            The following statements show examples of using variables for stream and column names, and in other places.", "author": "JimGalasyn", "createdAt": "2020-10-26T21:20:08Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n+column names and stream/table names. Variables cannot be used as reserved keywords.\n+\n+For instance:", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3NjIyNA==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512276224", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Any attempt of using variables on non-permitted places will fail with the current SQL parsing error found when parsing the variable string.\n          \n          \n            \n            Using a variable in a statement that doesn't support variables causes a SQL parsing error.", "author": "JimGalasyn", "createdAt": "2020-10-26T21:21:39Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n+column names and stream/table names. Variables cannot be used as reserved keywords.\n+\n+For instance:\n+\n+```\n+ksql> CREATE STREAM ${streamName} (${colName1} INT, ${colName2} STRING) \\\n+      WITH (kafka_topic='${topicName}', format='${format}', replicas=${replicas}, ...);\n+      \n+ksql> INSERT INTO ${streamName} (${colName1}, ${colName2}) \\\n+      VALUES (${val1}, '${val2}');\n+\n+ksql> SELECT * FROM ${streamName} \\\n+      WHERE ${colName1} == ${val1} and ${colName2} == '${val2}' EMIT CHANGES; \n+```\n+\n+Any attempt of using variables on non-permitted places will fail with the current SQL parsing error found when parsing the variable string.", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3NjgwNA==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512276804", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Enable/disable substitution variables\n          \n          \n            \n            Enable or disable substitution variables", "author": "JimGalasyn", "createdAt": "2020-10-26T21:22:46Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n+column names and stream/table names. Variables cannot be used as reserved keywords.\n+\n+For instance:\n+\n+```\n+ksql> CREATE STREAM ${streamName} (${colName1} INT, ${colName2} STRING) \\\n+      WITH (kafka_topic='${topicName}', format='${format}', replicas=${replicas}, ...);\n+      \n+ksql> INSERT INTO ${streamName} (${colName1}, ${colName2}) \\\n+      VALUES (${val1}, '${val2}');\n+\n+ksql> SELECT * FROM ${streamName} \\\n+      WHERE ${colName1} == ${val1} and ${colName2} == '${val2}' EMIT CHANGES; \n+```\n+\n+Any attempt of using variables on non-permitted places will fail with the current SQL parsing error found when parsing the variable string.\n+\n+Enable/disable substitution variables", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3NjkxMg==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512276912", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            -------------------------------------\n          \n          \n            \n            ----------------------------------------", "author": "JimGalasyn", "createdAt": "2020-10-26T21:22:58Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n+column names and stream/table names. Variables cannot be used as reserved keywords.\n+\n+For instance:\n+\n+```\n+ksql> CREATE STREAM ${streamName} (${colName1} INT, ${colName2} STRING) \\\n+      WITH (kafka_topic='${topicName}', format='${format}', replicas=${replicas}, ...);\n+      \n+ksql> INSERT INTO ${streamName} (${colName1}, ${colName2}) \\\n+      VALUES (${val1}, '${val2}');\n+\n+ksql> SELECT * FROM ${streamName} \\\n+      WHERE ${colName1} == ${val1} and ${colName2} == '${val2}' EMIT CHANGES; \n+```\n+\n+Any attempt of using variables on non-permitted places will fail with the current SQL parsing error found when parsing the variable string.\n+\n+Enable/disable substitution variables\n+-------------------------------------", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3Nzc2OQ==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512277769", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `ksql.variable.substitution.enable` config will be used to enable/disable this feature. The config can be enabled from\n          \n          \n            \n            Enable or disable variable substitution by setting the `ksql.variable.substitution.enable` config. You can set this config in", "author": "JimGalasyn", "createdAt": "2020-10-26T21:24:37Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n+column names and stream/table names. Variables cannot be used as reserved keywords.\n+\n+For instance:\n+\n+```\n+ksql> CREATE STREAM ${streamName} (${colName1} INT, ${colName2} STRING) \\\n+      WITH (kafka_topic='${topicName}', format='${format}', replicas=${replicas}, ...);\n+      \n+ksql> INSERT INTO ${streamName} (${colName1}, ${colName2}) \\\n+      VALUES (${val1}, '${val2}');\n+\n+ksql> SELECT * FROM ${streamName} \\\n+      WHERE ${colName1} == ${val1} and ${colName2} == '${val2}' EMIT CHANGES; \n+```\n+\n+Any attempt of using variables on non-permitted places will fail with the current SQL parsing error found when parsing the variable string.\n+\n+Enable/disable substitution variables\n+-------------------------------------\n+\n+The `ksql.variable.substitution.enable` config will be used to enable/disable this feature. The config can be enabled from", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3ODM5Mg==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512278392", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            the server-side configuration (ksql-server.properties), or it can be overriden by the users in the CLI or HTTP requests.\n          \n          \n            \n            the server-side configuration file (`ksql-server.properties`), or you can set it in CLI and HTTP requests.", "author": "JimGalasyn", "createdAt": "2020-10-26T21:25:50Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n+column names and stream/table names. Variables cannot be used as reserved keywords.\n+\n+For instance:\n+\n+```\n+ksql> CREATE STREAM ${streamName} (${colName1} INT, ${colName2} STRING) \\\n+      WITH (kafka_topic='${topicName}', format='${format}', replicas=${replicas}, ...);\n+      \n+ksql> INSERT INTO ${streamName} (${colName1}, ${colName2}) \\\n+      VALUES (${val1}, '${val2}');\n+\n+ksql> SELECT * FROM ${streamName} \\\n+      WHERE ${colName1} == ${val1} and ${colName2} == '${val2}' EMIT CHANGES; \n+```\n+\n+Any attempt of using variables on non-permitted places will fail with the current SQL parsing error found when parsing the variable string.\n+\n+Enable/disable substitution variables\n+-------------------------------------\n+\n+The `ksql.variable.substitution.enable` config will be used to enable/disable this feature. The config can be enabled from\n+the server-side configuration (ksql-server.properties), or it can be overriden by the users in the CLI or HTTP requests.", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3ODc1MA==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512278750", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ksql> CREATE STREAM ${streamName} (${colName1} INT, ${colName2} STRING) \\\n          \n          \n            \n            CREATE STREAM ${streamName} (${colName1} INT, ${colName2} STRING) \\", "author": "JimGalasyn", "createdAt": "2020-10-26T21:26:33Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n+column names and stream/table names. Variables cannot be used as reserved keywords.\n+\n+For instance:\n+\n+```\n+ksql> CREATE STREAM ${streamName} (${colName1} INT, ${colName2} STRING) \\", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3ODkzMA==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512278930", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  WITH (kafka_topic='${topicName}', format='${format}', replicas=${replicas}, ...);\n          \n          \n            \n            WITH (kafka_topic='${topicName}', format='${format}', replicas=${replicas}, ...);", "author": "JimGalasyn", "createdAt": "2020-10-26T21:26:53Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n+column names and stream/table names. Variables cannot be used as reserved keywords.\n+\n+For instance:\n+\n+```\n+ksql> CREATE STREAM ${streamName} (${colName1} INT, ${colName2} STRING) \\\n+      WITH (kafka_topic='${topicName}', format='${format}', replicas=${replicas}, ...);", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3OTA0Mw==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512279043", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ksql> INSERT INTO ${streamName} (${colName1}, ${colName2}) \\\n          \n          \n            \n            INSERT INTO ${streamName} (${colName1}, ${colName2}) \\", "author": "JimGalasyn", "createdAt": "2020-10-26T21:27:06Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n+column names and stream/table names. Variables cannot be used as reserved keywords.\n+\n+For instance:\n+\n+```\n+ksql> CREATE STREAM ${streamName} (${colName1} INT, ${colName2} STRING) \\\n+      WITH (kafka_topic='${topicName}', format='${format}', replicas=${replicas}, ...);\n+      \n+ksql> INSERT INTO ${streamName} (${colName1}, ${colName2}) \\", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3OTE0Nw==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512279147", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  VALUES (${val1}, '${val2}');\n          \n          \n            \n            VALUES (${val1}, '${val2}');", "author": "JimGalasyn", "createdAt": "2020-10-26T21:27:20Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n+column names and stream/table names. Variables cannot be used as reserved keywords.\n+\n+For instance:\n+\n+```\n+ksql> CREATE STREAM ${streamName} (${colName1} INT, ${colName2} STRING) \\\n+      WITH (kafka_topic='${topicName}', format='${format}', replicas=${replicas}, ...);\n+      \n+ksql> INSERT INTO ${streamName} (${colName1}, ${colName2}) \\\n+      VALUES (${val1}, '${val2}');", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3OTI0NQ==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512279245", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ksql> SELECT * FROM ${streamName} \\\n          \n          \n            \n            SELECT * FROM ${streamName} \\", "author": "JimGalasyn", "createdAt": "2020-10-26T21:27:33Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n+column names and stream/table names. Variables cannot be used as reserved keywords.\n+\n+For instance:\n+\n+```\n+ksql> CREATE STREAM ${streamName} (${colName1} INT, ${colName2} STRING) \\\n+      WITH (kafka_topic='${topicName}', format='${format}', replicas=${replicas}, ...);\n+      \n+ksql> INSERT INTO ${streamName} (${colName1}, ${colName2}) \\\n+      VALUES (${val1}, '${val2}');\n+\n+ksql> SELECT * FROM ${streamName} \\", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3OTM0MA==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512279340", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  WHERE ${colName1} == ${val1} and ${colName2} == '${val2}' EMIT CHANGES; \n          \n          \n            \n            WHERE ${colName1} == ${val1} and ${colName2} == '${val2}' EMIT CHANGES;", "author": "JimGalasyn", "createdAt": "2020-10-26T21:27:47Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n+column names and stream/table names. Variables cannot be used as reserved keywords.\n+\n+For instance:\n+\n+```\n+ksql> CREATE STREAM ${streamName} (${colName1} INT, ${colName2} STRING) \\\n+      WITH (kafka_topic='${topicName}', format='${format}', replicas=${replicas}, ...);\n+      \n+ksql> INSERT INTO ${streamName} (${colName1}, ${colName2}) \\\n+      VALUES (${val1}, '${val2}');\n+\n+ksql> SELECT * FROM ${streamName} \\\n+      WHERE ${colName1} == ${val1} and ${colName2} == '${val2}' EMIT CHANGES; ", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3OTYxNg==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512279616", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ksql> DEFINE format = 'AVRO';\n          \n          \n            \n            DEFINE format = 'AVRO';", "author": "JimGalasyn", "createdAt": "2020-10-26T21:28:22Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI4MTE1OA==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512281158", "bodyText": "Usually, we don't include command prompts in example commands, to enable easy copy-paste from the page. But if there's example output, like you have in the previous example, we'll include the command prompts, for clarity.", "author": "JimGalasyn", "createdAt": "2020-10-26T21:31:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3OTYxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3OTcyMQ==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512279721", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ksql> DEFINE replicas = '3';\n          \n          \n            \n            DEFINE replicas = '3';", "author": "JimGalasyn", "createdAt": "2020-10-26T21:28:34Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3OTg1Mg==", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512279852", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n          \n          \n            \n            CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});", "author": "JimGalasyn", "createdAt": "2020-10-26T21:28:48Z", "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});", "originalCommit": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6a0d0c2bf8902635ca4e3e9a54ee20d258f20e2e", "url": "https://github.com/confluentinc/ksql/commit/6a0d0c2bf8902635ca4e3e9a54ee20d258f20e2e", "message": "Apply suggestions from code review\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>", "committedDate": "2020-10-27T14:23:07Z", "type": "commit"}]}