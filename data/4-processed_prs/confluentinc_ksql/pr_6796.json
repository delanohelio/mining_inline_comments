{"pr_number": 6796, "pr_title": "chore: support multi-col pull queries", "pr_createdAt": "2020-12-17T05:11:38Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6796", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5Njg4Nw==", "url": "https://github.com/confluentinc/ksql/pull/6796#discussion_r545296887", "bodyText": "Add negative tests to check that sane errors are thrown if not all primary keys are selected, or if a multi-column key schema is used with IN rather than equality? Might also be good to add a test for a windowed aggregate with multiple keys.", "author": "vcrfxia", "createdAt": "2020-12-17T18:09:19Z", "path": "ksqldb-functional-tests/src/test/resources/rest-query-validation-tests/pull-queries-against-materialized-aggregates.json", "diffHunk": "@@ -2002,6 +2002,28 @@\n           {\"row\":{\"columns\":[10, 1]}}\n         ]}\n       ]\n+    },\n+    {\n+      \"name\": \"multi-column aggregation\",\n+      \"properties\": {\n+        \"ksql.multicol.key.format.enabled\" : true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID1 STRING KEY, ID2 INT) WITH (kafka_topic='test_topic', format='JSON');\",\n+        \"CREATE TABLE AGGREGATE AS SELECT ID1, ID2, COUNT(1) AS COUNT FROM INPUT GROUP BY ID1, ID2;\",\n+        \"SELECT * FROM AGGREGATE WHERE ID1='11' AND ID2=10;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"test_topic\", \"timestamp\": 12345, \"key\": \"11\", \"value\": {\"id2\": 10}}\n+      ],\n+      \"responses\": [\n+        {\"admin\": {\"@type\": \"currentStatus\"}},\n+        {\"admin\": {\"@type\": \"currentStatus\"}},\n+        {\"query\": [\n+          {\"header\":{\"schema\":\"`ID1` STRING KEY, `ID2` INTEGER KEY, `COUNT` BIGINT\"}},\n+          {\"row\":{\"columns\":[\"11\", 10, 1]}}\n+        ]}\n+      ]", "originalCommit": "d3c348e226e2d65daa0f2c6468b4521ef8192adb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwMzc1MA==", "url": "https://github.com/confluentinc/ksql/pull/6796#discussion_r545303750", "bodyText": "the former test is in the unit testing of WhereInfo. I feel that each RQTT test adds somewhat large time overhead, so I'm a bit judicious about what to add here. If you feel that it's important I can add it in.\n\nMight also be good to add a test for a windowed aggregate with multiple keys.\n\nI can do that", "author": "agavra", "createdAt": "2020-12-17T18:20:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5Njg4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5Njk2Mw==", "url": "https://github.com/confluentinc/ksql/pull/6796#discussion_r545296963", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldSupportMultiKeyExpressionsThatDontCoverAllKeys() {\n          \n          \n            \n              public void shouldNotSupportMultiKeyExpressionsThatDontCoverAllKeys() {", "author": "vcrfxia", "createdAt": "2020-12-17T18:09:28Z", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/physical/pull/operators/WhereInfoTest.java", "diffHunk": "@@ -700,13 +684,32 @@ public void shouldThrowOnMultiKeyExpressions() {\n         expression2\n     );\n \n+    // When:\n+    final WhereInfo where = WhereInfo.extractWhereInfo(expression, MULTI_KEY_SCHEMA, true, METASTORE, CONFIG);\n+\n+    // Then:\n+    assertThat(where.getKeysBound(), is(ImmutableList.of(GenericKey.genericKey(1, 2))));\n+  }\n+\n+\n+  @Test\n+  public void shouldSupportMultiKeyExpressionsThatDontCoverAllKeys() {", "originalCommit": "d3c348e226e2d65daa0f2c6468b4521ef8192adb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5NzUxNQ==", "url": "https://github.com/confluentinc/ksql/pull/6796#discussion_r545297515", "bodyText": "Do we have plans to support this before 0.15? If not it might be good to slip a line calling out the limitation into the docs.", "author": "vcrfxia", "createdAt": "2020-12-17T18:10:22Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/physical/pull/operators/WhereInfo.java", "diffHunk": "@@ -185,38 +187,67 @@ public boolean isWindowed() {\n     return getWindowBounds().isPresent();\n   }\n \n-  private static List<Object> extractKeysFromInPredicate(\n+  private static List<GenericKey> extractKeysFromInPredicate(\n       final List<InPredicate> inPredicates,\n       final LogicalSchema schema,\n       final MetaStore metaStore,\n       final KsqlConfig config\n   ) {\n+    if (schema.key().size() > 1) {\n+      throw invalidWhereClauseException(\"Schemas with multiple \"\n+          + \"KEY columns are not supported\", false);", "originalCommit": "d3c348e226e2d65daa0f2c6468b4521ef8192adb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwNDU5OQ==", "url": "https://github.com/confluentinc/ksql/pull/6796#discussion_r545304599", "bodyText": "I don't have plans at the moment, it would be relatively straightforward to add once we decide on a syntax/spec but it's not super clear to me what that spec should be. I'll document it.", "author": "agavra", "createdAt": "2020-12-17T18:21:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5NzUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM5NzE1OA==", "url": "https://github.com/confluentinc/ksql/pull/6796#discussion_r545397158", "bodyText": "You mean schemas with multiple key columns are not supported for use with in predicates, right? (After all this PR is meant to support exactly that using other expressions).  Maybe have the message mention in predicates?", "author": "AlanConfluent", "createdAt": "2020-12-17T20:54:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5NzUxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5ODEyOA==", "url": "https://github.com/confluentinc/ksql/pull/6796#discussion_r545298128", "bodyText": "This notation is confusing to me since the additional key_column=key clauses need to be separated by the AND keyword, not commas as this notation suggests. I'm not sure what the canonical way to denote this is. Maybe\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              WHERE key_column=key [, ...]\n          \n          \n            \n              WHERE key_column=key [AND ...]\n          \n      \n    \n    \n  \n\n?", "author": "vcrfxia", "createdAt": "2020-12-17T18:11:25Z", "path": "docs/developer-guide/ksqldb-reference/select-pull-query.md", "diffHunk": "@@ -15,7 +15,7 @@ Synopsis\n ```sql\r\n SELECT select_expr [, ...]\r\n   FROM aggregate_table\r\n-  WHERE key_column=key\r\n+  WHERE key_column=key [, ...]\r", "originalCommit": "d3c348e226e2d65daa0f2c6468b4521ef8192adb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMwNDg1Mg==", "url": "https://github.com/confluentinc/ksql/pull/6796#discussion_r545304852", "bodyText": "Ah good call! That's definitely better", "author": "agavra", "createdAt": "2020-12-17T18:21:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5ODEyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5ODg0OQ==", "url": "https://github.com/confluentinc/ksql/pull/6796#discussion_r545298849", "bodyText": "Maybe add a line saying that all key columns must be present in the constraints? Unless we think that creates more confusion than it clears up.", "author": "vcrfxia", "createdAt": "2020-12-17T18:12:26Z", "path": "docs/concepts/queries/pull.md", "diffHunk": "@@ -36,7 +36,7 @@ Pull query features and limitations\n   with a GROUP BY clause.\r\n - For non-windowed aggregations, pull queries only support looking up events\r\n   by key.\r\n-- WHERE clauses can only have constraints on the key column for non-windowed tables.\r\n+- WHERE clauses can only have constraints on the key column(s) for non-windowed tables.\r", "originalCommit": "d3c348e226e2d65daa0f2c6468b4521ef8192adb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMjgxMw==", "url": "https://github.com/confluentinc/ksql/pull/6796#discussion_r545312813", "bodyText": "Seems like a good idea, esp. if we can show an example. Oh wait, I see you provide this below. Nevermind...", "author": "JimGalasyn", "createdAt": "2020-12-17T18:34:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5ODg0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxNDMzOA==", "url": "https://github.com/confluentinc/ksql/pull/6796#discussion_r545314338", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the `pageviews_by_region` was created as an aggregation of multiple columns (e.g. `countryId`\n          \n          \n            \n            If the `pageviews_by_region` table was created as an aggregation of multiple columns,", "author": "JimGalasyn", "createdAt": "2020-12-17T18:36:54Z", "path": "docs/developer-guide/ksqldb-reference/select-pull-query.md", "diffHunk": "@@ -49,6 +49,15 @@ SELECT * FROM pageviews_by_region\n     AND 1570051876000 <= WINDOWSTART AND WINDOWEND <= 1570138276000;\r\n ```\r\n \r\n+If the `pageviews_by_region` was created as an aggregation of multiple columns (e.g. `countryId`\r", "originalCommit": "d3c348e226e2d65daa0f2c6468b4521ef8192adb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxNTU2OQ==", "url": "https://github.com/confluentinc/ksql/pull/6796#discussion_r545315569", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            and `regionId`) then each key column must be present in the WHERE clause:\n          \n          \n            \n            then each key column must be present in the WHERE clause. The following example shows how to query the table by the `countryId` and `regionId` columns.", "author": "JimGalasyn", "createdAt": "2020-12-17T18:38:48Z", "path": "docs/developer-guide/ksqldb-reference/select-pull-query.md", "diffHunk": "@@ -49,6 +49,15 @@ SELECT * FROM pageviews_by_region\n     AND 1570051876000 <= WINDOWSTART AND WINDOWEND <= 1570138276000;\r\n ```\r\n \r\n+If the `pageviews_by_region` was created as an aggregation of multiple columns (e.g. `countryId`\r\n+and `regionId`) then each key column must be present in the WHERE clause:\r", "originalCommit": "d3c348e226e2d65daa0f2c6468b4521ef8192adb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxNjI2Mg==", "url": "https://github.com/confluentinc/ksql/pull/6796#discussion_r545316262", "bodyText": "\"The following example shows...\" or something similar.", "author": "JimGalasyn", "createdAt": "2020-12-17T18:39:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxNTU2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNDM2MA==", "url": "https://github.com/confluentinc/ksql/pull/6796#discussion_r545404360", "bodyText": "I'm not super familiar with BitSet, but is this the number of unique bits or the highest bit value you have to account for?\nAnd are key column indexes guaranteed to be the first 0...N indexes or can they skip around?\nI'm just asking to to be sure this has the capacity and because I'm curious to learn the answers.  :-)", "author": "AlanConfluent", "createdAt": "2020-12-17T21:07:44Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/physical/pull/operators/WhereInfo.java", "diffHunk": "@@ -185,38 +187,67 @@ public boolean isWindowed() {\n     return getWindowBounds().isPresent();\n   }\n \n-  private static List<Object> extractKeysFromInPredicate(\n+  private static List<GenericKey> extractKeysFromInPredicate(\n       final List<InPredicate> inPredicates,\n       final LogicalSchema schema,\n       final MetaStore metaStore,\n       final KsqlConfig config\n   ) {\n+    if (schema.key().size() > 1) {\n+      throw invalidWhereClauseException(\"Schemas with multiple \"\n+          + \"KEY columns are not supported\", false);\n+    }\n+\n     final InPredicate inPredicate = Iterables.getLast(inPredicates);\n     final Column keyColumn = Iterables.getOnlyElement(schema.key());\n     return inPredicate.getValueList()\n         .getValues()\n         .stream()\n         .map(expression -> resolveKey(expression, keyColumn, metaStore, config, inPredicate))\n+        .map(GenericKey::genericKey)\n         .collect(Collectors.toList());\n   }\n \n-  private static Object extractKeyWhereClause(\n+  private static GenericKey extractKeyWhereClause(\n       final List<ComparisonExpression> comparisons,\n       final boolean windowed,\n       final LogicalSchema schema,\n       final MetaStore metaStore,\n       final KsqlConfig config\n   ) {\n-    final ComparisonExpression comparison = Iterables.getLast(comparisons);\n-    if (comparison.getType() != Type.EQUAL) {\n-      final ColumnName keyColumn = Iterables.getOnlyElement(schema.key()).name();\n-      throw invalidWhereClauseException(\"Bound on '\" + keyColumn.text()\n-          + \"' must currently be '='\", windowed);\n+    final Object[] keyContents = new Object[schema.key().size()];\n+    final BitSet seenKeys = new BitSet(schema.key().size());", "originalCommit": "d3c348e226e2d65daa0f2c6468b4521ef8192adb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQxNDQzOQ==", "url": "https://github.com/confluentinc/ksql/pull/6796#discussion_r545414439", "bodyText": "/**\n     * Creates a bit set whose initial size is large enough to explicitly\n     * represent bits with indices in the range {@code 0} through\n     * {@code nbits-1}. All bits are initially {@code false}.\n     *\n     * @param  nbits the initial size of the bit set\n     * @throws NegativeArraySizeException if the specified initial size\n     *         is negative\n     */\n    public BitSet(int nbits) {\nA bitset is essentially boolean[] but with one bit per boolean - I'm not entirely sure what the difference is between \"number of unique bits or the highest bit value you have to account for\".\n\nAnd are key column indexes guaranteed to be the first 0...N indexes or can they skip around?\n\nWhen you take it from schema.key() they are indexed as a sepearate namespace from the values. So there is a 0-indexed key and a 0-indexed value.", "author": "agavra", "createdAt": "2020-12-17T21:27:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNDM2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQyMzYxNA==", "url": "https://github.com/confluentinc/ksql/pull/6796#discussion_r545423614", "bodyText": "Ah, ok.  that makes sense.  I didn't realize that.  If they weren't compacted like that, the index could be greater than the number of keys (and hence my mentioning unique keys vs highest index), but that's not the case here.", "author": "AlanConfluent", "createdAt": "2020-12-17T21:45:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNDM2MA=="}], "type": "inlineReview"}, {"oid": "81c8e710d3202b9fcfa7edf6f8b85247e45230b5", "url": "https://github.com/confluentinc/ksql/commit/81c8e710d3202b9fcfa7edf6f8b85247e45230b5", "message": "chore: support multi-col pull queries", "committedDate": "2020-12-17T22:55:23Z", "type": "commit"}, {"oid": "106f49ff2447b931d5d29ca9908e314800cd046f", "url": "https://github.com/confluentinc/ksql/commit/106f49ff2447b931d5d29ca9908e314800cd046f", "message": "docs: add docs", "committedDate": "2020-12-17T22:55:24Z", "type": "commit"}, {"oid": "424065ce84457414198fea17d25aa4770da0fc52", "url": "https://github.com/confluentinc/ksql/commit/424065ce84457414198fea17d25aa4770da0fc52", "message": "chore: rebase", "committedDate": "2020-12-17T22:55:37Z", "type": "forcePushed"}, {"oid": "e6025c74489315e5c44ac5925a91035f444bc5b5", "url": "https://github.com/confluentinc/ksql/commit/e6025c74489315e5c44ac5925a91035f444bc5b5", "message": "chore: rebase", "committedDate": "2020-12-17T22:56:34Z", "type": "forcePushed"}, {"oid": "85a5b3aff1f83e1f5098f7d83111905894317de5", "url": "https://github.com/confluentinc/ksql/commit/85a5b3aff1f83e1f5098f7d83111905894317de5", "message": "chore: review comments", "committedDate": "2020-12-17T23:01:37Z", "type": "commit"}, {"oid": "85a5b3aff1f83e1f5098f7d83111905894317de5", "url": "https://github.com/confluentinc/ksql/commit/85a5b3aff1f83e1f5098f7d83111905894317de5", "message": "chore: review comments", "committedDate": "2020-12-17T23:01:37Z", "type": "forcePushed"}]}