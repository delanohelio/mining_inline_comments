{"pr_number": 5273, "pr_title": "feat: implement earliest_by_offset() UDAF", "pr_createdAt": "2020-05-05T18:10:50Z", "pr_url": "https://github.com/confluentinc/ksql/pull/5273", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNTc2MQ==", "url": "https://github.com/confluentinc/ksql/pull/5273#discussion_r420315761", "bodyText": "Please add a link to the TOC at the top of the page. Thanks!", "author": "JimGalasyn", "createdAt": "2020-05-05T18:22:40Z", "path": "docs/developer-guide/ksqldb-reference/aggregate-functions.md", "diffHunk": "@@ -100,6 +100,16 @@ Returns the _approximate_ number of unique values of `col1` in a group.\n The function implementation uses [HyperLogLog](https://en.wikipedia.org/wiki/HyperLogLog)\r\n to estimate cardinalities of 10^9 with a typical standard error of 2%.\r\n \r\n+EARLIEST_BY_OFFSET\r", "originalCommit": "6fe5b470e91567bf3a4cfb5d57d825589a152352", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE3MjE0Nw==", "url": "https://github.com/confluentinc/ksql/pull/5273#discussion_r422172147", "bodyText": "Done", "author": "spena", "createdAt": "2020-05-08T14:22:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNTc2MQ=="}], "type": "inlineReview"}, {"oid": "07cecf73948423c8fe4a684c75157a96995ae639", "url": "https://github.com/confluentinc/ksql/commit/07cecf73948423c8fe4a684c75157a96995ae639", "message": "docs: add link at top of aggregate-functions.md", "committedDate": "2020-05-08T14:22:30Z", "type": "forcePushed"}, {"oid": "cf2d84672c2d1d291b4b7b8a2e3ba00588acb33e", "url": "https://github.com/confluentinc/ksql/commit/cf2d84672c2d1d291b4b7b8a2e3ba00588acb33e", "message": "docs: add link at top of aggregate-functions.md", "committedDate": "2020-05-11T14:53:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5MTUyNA==", "url": "https://github.com/confluentinc/ksql/pull/5273#discussion_r423791524", "bodyText": "All these constants look the same as the ones in LatestbyOffset. It would be nice to move them to another shared file instead of duplicating them.", "author": "purplefox", "createdAt": "2020-05-12T14:44:01Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udaf/earliest/EarliestByOffset.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udaf.earliest;\n+\n+import io.confluent.ksql.function.udaf.Udaf;\n+import io.confluent.ksql.function.udaf.UdafDescription;\n+import io.confluent.ksql.function.udaf.UdafFactory;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.SchemaBuilder;\n+import org.apache.kafka.connect.data.Struct;\n+\n+@UdafDescription(\n+    name = \"EARLIEST_BY_OFFSET\",\n+    description = EarliestByOffset.DESCRIPTION\n+)\n+public final class EarliestByOffset {\n+  static final String DESCRIPTION =\n+      \"This function returns the oldest value for the column, computed by offset.\";\n+\n+  private EarliestByOffset() {\n+  }\n+\n+  static final String SEQ_FIELD = \"SEQ\";\n+  static final String VAL_FIELD = \"VAL\";\n+\n+  public static final Schema STRUCT_INTEGER = SchemaBuilder.struct().optional()", "originalCommit": "cf2d84672c2d1d291b4b7b8a2e3ba00588acb33e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5MjI0MA==", "url": "https://github.com/confluentinc/ksql/pull/5273#discussion_r423792240", "bodyText": "This could go in a common base class instead of duplicating (or a utils class)", "author": "purplefox", "createdAt": "2020-05-12T14:44:56Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udaf/earliest/EarliestByOffset.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udaf.earliest;\n+\n+import io.confluent.ksql.function.udaf.Udaf;\n+import io.confluent.ksql.function.udaf.UdafDescription;\n+import io.confluent.ksql.function.udaf.UdafFactory;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.SchemaBuilder;\n+import org.apache.kafka.connect.data.Struct;\n+\n+@UdafDescription(\n+    name = \"EARLIEST_BY_OFFSET\",\n+    description = EarliestByOffset.DESCRIPTION\n+)\n+public final class EarliestByOffset {\n+  static final String DESCRIPTION =\n+      \"This function returns the oldest value for the column, computed by offset.\";\n+\n+  private EarliestByOffset() {\n+  }\n+\n+  static final String SEQ_FIELD = \"SEQ\";\n+  static final String VAL_FIELD = \"VAL\";\n+\n+  public static final Schema STRUCT_INTEGER = SchemaBuilder.struct().optional()\n+      .field(SEQ_FIELD, Schema.OPTIONAL_INT64_SCHEMA)\n+      .field(VAL_FIELD, Schema.OPTIONAL_INT32_SCHEMA)\n+      .build();\n+\n+  public static final Schema STRUCT_LONG = SchemaBuilder.struct().optional()\n+      .field(SEQ_FIELD, Schema.OPTIONAL_INT64_SCHEMA)\n+      .field(VAL_FIELD, Schema.OPTIONAL_INT64_SCHEMA)\n+      .build();\n+\n+  public static final Schema STRUCT_DOUBLE = SchemaBuilder.struct().optional()\n+      .field(SEQ_FIELD, Schema.OPTIONAL_INT64_SCHEMA)\n+      .field(VAL_FIELD, Schema.OPTIONAL_FLOAT64_SCHEMA)\n+      .build();\n+\n+  public static final Schema STRUCT_BOOLEAN = SchemaBuilder.struct().optional()\n+      .field(SEQ_FIELD, Schema.OPTIONAL_INT64_SCHEMA)\n+      .field(VAL_FIELD, Schema.OPTIONAL_BOOLEAN_SCHEMA)\n+      .build();\n+\n+  public static final Schema STRUCT_STRING = SchemaBuilder.struct().optional()\n+      .field(SEQ_FIELD, Schema.OPTIONAL_INT64_SCHEMA)\n+      .field(VAL_FIELD, Schema.OPTIONAL_STRING_SCHEMA)\n+      .build();\n+\n+  static AtomicLong sequence = new AtomicLong();\n+\n+  @UdafFactory(description = \"return the earliest value of an integer column\",\n+      aggregateSchema = \"STRUCT<SEQ BIGINT, VAL INT>\")\n+  public static Udaf<Integer, Struct, Integer> earliestInteger() {\n+    return earliest(STRUCT_INTEGER);\n+  }\n+\n+  @UdafFactory(description = \"return the earliest value of an big integer column\",\n+      aggregateSchema = \"STRUCT<SEQ BIGINT, VAL BIGINT>\")\n+  public static Udaf<Long, Struct, Long> earliestLong() {\n+    return earliest(STRUCT_LONG);\n+  }\n+\n+  @UdafFactory(description = \"return the earliest value of a double column\",\n+      aggregateSchema = \"STRUCT<SEQ BIGINT, VAL DOUBLE>\")\n+  public static Udaf<Double, Struct, Double> earliestDouble() {\n+    return earliest(STRUCT_DOUBLE);\n+  }\n+\n+  @UdafFactory(description = \"return the earliest value of a boolean column\",\n+      aggregateSchema = \"STRUCT<SEQ BIGINT, VAL BOOLEAN>\")\n+  public static Udaf<Boolean, Struct, Boolean> earliestBoolean() {\n+    return earliest(STRUCT_BOOLEAN);\n+  }\n+\n+  @UdafFactory(description = \"return the earliest value of a string column\",\n+      aggregateSchema = \"STRUCT<SEQ BIGINT, VAL STRING>\")\n+  public static Udaf<String, Struct, String> earliestString() {\n+    return earliest(STRUCT_STRING);\n+  }\n+\n+  static <T> Struct createStruct(final Schema schema, final T val) {", "originalCommit": "cf2d84672c2d1d291b4b7b8a2e3ba00588acb33e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5MzMyMA==", "url": "https://github.com/confluentinc/ksql/pull/5273#discussion_r423793320", "bodyText": "This could go in common class too.", "author": "purplefox", "createdAt": "2020-05-12T14:46:11Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udaf/earliest/EarliestByOffset.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udaf.earliest;\n+\n+import io.confluent.ksql.function.udaf.Udaf;\n+import io.confluent.ksql.function.udaf.UdafDescription;\n+import io.confluent.ksql.function.udaf.UdafFactory;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.SchemaBuilder;\n+import org.apache.kafka.connect.data.Struct;\n+\n+@UdafDescription(\n+    name = \"EARLIEST_BY_OFFSET\",\n+    description = EarliestByOffset.DESCRIPTION\n+)\n+public final class EarliestByOffset {\n+  static final String DESCRIPTION =\n+      \"This function returns the oldest value for the column, computed by offset.\";\n+\n+  private EarliestByOffset() {\n+  }\n+\n+  static final String SEQ_FIELD = \"SEQ\";\n+  static final String VAL_FIELD = \"VAL\";\n+\n+  public static final Schema STRUCT_INTEGER = SchemaBuilder.struct().optional()\n+      .field(SEQ_FIELD, Schema.OPTIONAL_INT64_SCHEMA)\n+      .field(VAL_FIELD, Schema.OPTIONAL_INT32_SCHEMA)\n+      .build();\n+\n+  public static final Schema STRUCT_LONG = SchemaBuilder.struct().optional()\n+      .field(SEQ_FIELD, Schema.OPTIONAL_INT64_SCHEMA)\n+      .field(VAL_FIELD, Schema.OPTIONAL_INT64_SCHEMA)\n+      .build();\n+\n+  public static final Schema STRUCT_DOUBLE = SchemaBuilder.struct().optional()\n+      .field(SEQ_FIELD, Schema.OPTIONAL_INT64_SCHEMA)\n+      .field(VAL_FIELD, Schema.OPTIONAL_FLOAT64_SCHEMA)\n+      .build();\n+\n+  public static final Schema STRUCT_BOOLEAN = SchemaBuilder.struct().optional()\n+      .field(SEQ_FIELD, Schema.OPTIONAL_INT64_SCHEMA)\n+      .field(VAL_FIELD, Schema.OPTIONAL_BOOLEAN_SCHEMA)\n+      .build();\n+\n+  public static final Schema STRUCT_STRING = SchemaBuilder.struct().optional()\n+      .field(SEQ_FIELD, Schema.OPTIONAL_INT64_SCHEMA)\n+      .field(VAL_FIELD, Schema.OPTIONAL_STRING_SCHEMA)\n+      .build();\n+\n+  static AtomicLong sequence = new AtomicLong();\n+\n+  @UdafFactory(description = \"return the earliest value of an integer column\",\n+      aggregateSchema = \"STRUCT<SEQ BIGINT, VAL INT>\")\n+  public static Udaf<Integer, Struct, Integer> earliestInteger() {\n+    return earliest(STRUCT_INTEGER);\n+  }\n+\n+  @UdafFactory(description = \"return the earliest value of an big integer column\",\n+      aggregateSchema = \"STRUCT<SEQ BIGINT, VAL BIGINT>\")\n+  public static Udaf<Long, Struct, Long> earliestLong() {\n+    return earliest(STRUCT_LONG);\n+  }\n+\n+  @UdafFactory(description = \"return the earliest value of a double column\",\n+      aggregateSchema = \"STRUCT<SEQ BIGINT, VAL DOUBLE>\")\n+  public static Udaf<Double, Struct, Double> earliestDouble() {\n+    return earliest(STRUCT_DOUBLE);\n+  }\n+\n+  @UdafFactory(description = \"return the earliest value of a boolean column\",\n+      aggregateSchema = \"STRUCT<SEQ BIGINT, VAL BOOLEAN>\")\n+  public static Udaf<Boolean, Struct, Boolean> earliestBoolean() {\n+    return earliest(STRUCT_BOOLEAN);\n+  }\n+\n+  @UdafFactory(description = \"return the earliest value of a string column\",\n+      aggregateSchema = \"STRUCT<SEQ BIGINT, VAL STRING>\")\n+  public static Udaf<String, Struct, String> earliestString() {\n+    return earliest(STRUCT_STRING);\n+  }\n+\n+  static <T> Struct createStruct(final Schema schema, final T val) {\n+    final Struct struct = new Struct(schema);\n+    struct.put(SEQ_FIELD, generateSequence());\n+    struct.put(VAL_FIELD, val);\n+    return struct;\n+  }\n+\n+  private static long generateSequence() {\n+    return sequence.getAndIncrement();\n+  }\n+\n+  private static int compareStructs(final Struct struct1, final Struct struct2) {", "originalCommit": "cf2d84672c2d1d291b4b7b8a2e3ba00588acb33e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4a7a99bf69a5a05539372a95ed9d4d80c23ed980", "url": "https://github.com/confluentinc/ksql/commit/4a7a99bf69a5a05539372a95ed9d4d80c23ed980", "message": "chore: update tests with latest rebase", "committedDate": "2020-05-12T17:09:31Z", "type": "forcePushed"}, {"oid": "9a9b4417eabda686eaedee287d23b74a87541971", "url": "https://github.com/confluentinc/ksql/commit/9a9b4417eabda686eaedee287d23b74a87541971", "message": "feat: implement earliest_by_offset() UDAF", "committedDate": "2020-05-13T21:46:26Z", "type": "commit"}, {"oid": "a40127856591a27916cdd7f41e4a8e857ea3516d", "url": "https://github.com/confluentinc/ksql/commit/a40127856591a27916cdd7f41e4a8e857ea3516d", "message": "docs: add link at top of aggregate-functions.md", "committedDate": "2020-05-13T21:46:26Z", "type": "commit"}, {"oid": "c7676b428e66362a798eede8014583e09b868b5d", "url": "https://github.com/confluentinc/ksql/commit/c7676b428e66362a798eede8014583e09b868b5d", "message": "chore: update tests with latest rebase", "committedDate": "2020-05-13T21:46:26Z", "type": "commit"}, {"oid": "1517c0623de35a3c564391ee81655496a1a2a727", "url": "https://github.com/confluentinc/ksql/commit/1517c0623de35a3c564391ee81655496a1a2a727", "message": "chore: move common variables to a utils class", "committedDate": "2020-05-13T22:14:06Z", "type": "commit"}, {"oid": "1517c0623de35a3c564391ee81655496a1a2a727", "url": "https://github.com/confluentinc/ksql/commit/1517c0623de35a3c564391ee81655496a1a2a727", "message": "chore: move common variables to a utils class", "committedDate": "2020-05-13T22:14:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEzMjk2MA==", "url": "https://github.com/confluentinc/ksql/pull/5273#discussion_r426132960", "bodyText": "Imho we should create a directory and put both udafs and this file in the same package. That way it can be package protected.", "author": "purplefox", "createdAt": "2020-05-16T08:34:36Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udaf/KudafByOffsetUtils.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udaf;", "originalCommit": "1517c0623de35a3c564391ee81655496a1a2a727", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}