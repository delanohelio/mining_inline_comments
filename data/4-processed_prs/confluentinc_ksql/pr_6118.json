{"pr_number": 6118, "pr_title": "feat: Adds support for 0x, X'...', x'...' type hex strings in udf:encode", "pr_createdAt": "2020-08-27T20:24:24Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6118", "timeline": [{"oid": "2ee4f8db76ad5820d8b9a54175392f4a870c307c", "url": "https://github.com/confluentinc/ksql/commit/2ee4f8db76ad5820d8b9a54175392f4a870c307c", "message": "adds support for 0x, X'', x'' type hex in udf:encode", "committedDate": "2020-08-27T19:46:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc3MzA3Ng==", "url": "https://github.com/confluentinc/ksql/pull/6118#discussion_r478773076", "bodyText": "I think this is an accidental change", "author": "vpapavas", "createdAt": "2020-08-28T00:57:13Z", "path": "ksqldb-functional-tests/src/test/resources/test-runner/correct/from_docs/input.json", "diffHunk": "@@ -1,3 +1,4 @@\n+", "originalCommit": "2ee4f8db76ad5820d8b9a54175392f4a870c307c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4Njg0OA==", "url": "https://github.com/confluentinc/ksql/pull/6118#discussion_r480286848", "bodyText": "Can you remove this change from the PR please?", "author": "vpapavas", "createdAt": "2020-08-31T17:45:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc3MzA3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwMzY4NQ==", "url": "https://github.com/confluentinc/ksql/pull/6118#discussion_r480303685", "bodyText": "done", "author": "cprasad1", "createdAt": "2020-08-31T18:16:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc3MzA3Ng=="}], "type": "inlineReview"}, {"oid": "a404b0b11b1de09717f0a7c7e6eb87c221c61791", "url": "https://github.com/confluentinc/ksql/commit/a404b0b11b1de09717f0a7c7e6eb87c221c61791", "message": "added one line of comment", "committedDate": "2020-08-28T17:37:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1MDkwMg==", "url": "https://github.com/confluentinc/ksql/pull/6118#discussion_r479450902", "bodyText": "What happens if the string is 0x0x? Or 0X? Or X' without a closing quote? Are there any characters that are not allowed with these formats?", "author": "vpapavas", "createdAt": "2020-08-28T17:48:31Z", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/function/udf/string/EncodeTest.java", "diffHunk": "@@ -41,6 +41,15 @@ public void shouldEncodeHexToAscii() {\n     assertThat(udf.encode(\"31202b2031203d2031\", \"hex\", \"ascii\"), is(\"1 + 1 = 1\"));\n     assertThat(udf.encode(\"ce95cebbcebbceacceb4ceb1\", \"hex\", \"ascii\"), is(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\"));\n     assertThat(udf.encode(\"c39c6265726d656e736368\", \"hex\", \"ascii\"), is(\"\ufffd\ufffdbermensch\"));\n+", "originalCommit": "a404b0b11b1de09717f0a7c7e6eb87c221c61791", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1ODQ1MA==", "url": "https://github.com/confluentinc/ksql/pull/6118#discussion_r479458450", "bodyText": "I am assuming that you are worried about illegal hex literals (eg: 'p', 'x', '*' etc) in these formats. The function would throw an exception and we would get nulls in the end which was the default behavior before this was implemented. That is because this feature piggybacks on the pre-existing hex decoders that existed before these changes. I am adding a few more tests to demonstrate these corrupted formats.", "author": "cprasad1", "createdAt": "2020-08-28T18:04:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1MDkwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ2MTI1NQ==", "url": "https://github.com/confluentinc/ksql/pull/6118#discussion_r479461255", "bodyText": "Also, I noticed that the pre-existing encode udf couldn't deal with Hex of odd lengths (It would throw an exception). Now, it supports odd lengths by padding a \"0\" to the left in the 0x... format but would throw an exception with X'...' and x'...' formats which is consistent with https://dev.mysql.com/doc/refman/8.0/en/hexadecimal-literals.html. But I am not sure if we should support hex of odd lengths before without any of these special characters around them. It would just throw an exception like it used to", "author": "cprasad1", "createdAt": "2020-08-28T18:10:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1MDkwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3NTM2OA==", "url": "https://github.com/confluentinc/ksql/pull/6118#discussion_r479475368", "bodyText": "added more tests to demonstrate that behavior", "author": "cprasad1", "createdAt": "2020-08-28T18:42:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1MDkwMg=="}], "type": "inlineReview"}, {"oid": "d61f269371b4edb316cb55482d925f37eb3f3211", "url": "https://github.com/confluentinc/ksql/commit/d61f269371b4edb316cb55482d925f37eb3f3211", "message": "added some more tests for odd length hex and corrupted hex", "committedDate": "2020-08-28T18:39:52Z", "type": "commit"}, {"oid": "d56a975bd6d18318f4001fd2c0e5353433c21f9e", "url": "https://github.com/confluentinc/ksql/commit/d56a975bd6d18318f4001fd2c0e5353433c21f9e", "message": "remove input.json from pr", "committedDate": "2020-08-31T18:15:54Z", "type": "commit"}]}