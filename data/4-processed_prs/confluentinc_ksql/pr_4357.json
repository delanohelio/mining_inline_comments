{"pr_number": 4357, "pr_title": "feat: Use AbstractConfig for API server config", "pr_createdAt": "2020-01-21T11:42:46Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4357", "timeline": [{"oid": "6525176eb2929af3428fda87a9cbeff126d7ccbc", "url": "https://github.com/confluentinc/ksql/commit/6525176eb2929af3428fda87a9cbeff126d7ccbc", "message": "checkstyle", "committedDate": "2020-01-23T09:13:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE3MTI5OA==", "url": "https://github.com/confluentinc/ksql/pull/4357#discussion_r370171298", "bodyText": "Can we add  a ksql. prefix to this please?", "author": "big-andy-coates", "createdAt": "2020-01-23T15:04:48Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import io.confluent.common.config.AbstractConfig;\n+import io.confluent.common.config.ConfigDef;\n+import io.confluent.common.config.ConfigDef.Importance;\n+import io.confluent.common.config.ConfigDef.Type;\n+import io.confluent.ksql.util.KsqlConfig;\n+import io.vertx.core.json.JsonObject;\n+import java.util.Map;\n+\n+/**\n+ * Config for the API server\n+ */\n+public class ApiServerConfig extends AbstractConfig {\n+\n+  private static final String PROPERTY_PREFIX = \"apiserver.\";", "originalCommit": "6525176eb2929af3428fda87a9cbeff126d7ccbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwNjg5Mw==", "url": "https://github.com/confluentinc/ksql/pull/4357#discussion_r370806893", "bodyText": "It's a little bit further down in the file :)", "author": "purplefox", "createdAt": "2020-01-24T19:34:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE3MTI5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE3MTg5Mg==", "url": "https://github.com/confluentinc/ksql/pull/4357#discussion_r370171892", "bodyText": "I think using originalsWithPrefix will mean the returned JsonObject won't pick up any defaults defined in the config.   A unit test would check this.", "author": "big-andy-coates", "createdAt": "2020-01-23T15:05:44Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import io.confluent.common.config.AbstractConfig;\n+import io.confluent.common.config.ConfigDef;\n+import io.confluent.common.config.ConfigDef.Importance;\n+import io.confluent.common.config.ConfigDef.Type;\n+import io.confluent.ksql.util.KsqlConfig;\n+import io.vertx.core.json.JsonObject;\n+import java.util.Map;\n+\n+/**\n+ * Config for the API server\n+ */\n+public class ApiServerConfig extends AbstractConfig {\n+\n+  private static final String PROPERTY_PREFIX = \"apiserver.\";\n+\n+  public static final String VERTICLE_INSTANCES = propertyName(\"verticle-instances\");\n+  public static final int DEFAULT_VERTICLE_INSTANCES =\n+      2 * Runtime.getRuntime().availableProcessors();\n+  public static final String VERTICLE_INSTANCES_DOC =\n+      \"The number of server verticle instances to start. Usually you want at least many instances\"\n+          + \" as there are cores you want to use, as each instance is single threaded.\";\n+\n+  public static final String LISTEN_HOST = propertyName(\"listen-host\");\n+  public static final String DEFAULT_LISTEN_HOST = \"0.0.0.0\";\n+  public static final String LISTEN_HOST_DOC =\n+      \"The hostname to listen on\";\n+\n+  public static final String LISTEN_PORT = propertyName(\"listen-port\");\n+  public static final int DEFAULT_LISTEN_PORT = 8089;\n+  public static final String LISTEN_PORT_DOC =\n+      \"The port to listen on\";\n+\n+  public static final String KEY_PATH = propertyName(\"key-path\");\n+  public static final String KEY_PATH_DOC =\n+      \"Path to key file\";\n+\n+  public static final String CERT_PATH = propertyName(\"cert-path\");\n+  public static final String CERT_PATH_DOC =\n+      \"Path to cert file\";\n+\n+  private static String propertyName(final String name) {\n+    return KsqlConfig.KSQL_CONFIG_PROPERTY_PREFIX + PROPERTY_PREFIX + name;\n+  }\n+\n+  private static final ConfigDef CONFIG_DEF = new ConfigDef()\n+      .define(\n+          VERTICLE_INSTANCES,\n+          Type.INT,\n+          DEFAULT_VERTICLE_INSTANCES,\n+          Importance.LOW,\n+          VERTICLE_INSTANCES_DOC)\n+      .define(\n+          LISTEN_HOST,\n+          Type.STRING,\n+          DEFAULT_LISTEN_HOST,\n+          Importance.MEDIUM,\n+          LISTEN_HOST_DOC)\n+      .define(\n+          LISTEN_PORT,\n+          Type.INT,\n+          DEFAULT_LISTEN_PORT,\n+          Importance.MEDIUM,\n+          LISTEN_PORT_DOC)\n+      .define(\n+          KEY_PATH,\n+          Type.STRING,\n+          null,\n+          Importance.MEDIUM,\n+          KEY_PATH_DOC)\n+      .define(\n+          CERT_PATH,\n+          Type.STRING,\n+          null,\n+          Importance.MEDIUM,\n+          CERT_PATH_DOC);\n+\n+  public ApiServerConfig(final Map<?, ?> map) {\n+    super(CONFIG_DEF, map);\n+  }\n+\n+  public ApiServerConfig(final JsonObject jsonObject) {\n+    super(CONFIG_DEF, jsonObject.getMap());\n+  }\n+\n+  public JsonObject toJsonObject() {\n+    return new JsonObject(originalsWithPrefix(\"\"));", "originalCommit": "6525176eb2929af3428fda87a9cbeff126d7ccbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgxMjMzMA==", "url": "https://github.com/confluentinc/ksql/pull/4357#discussion_r370812330", "bodyText": "It's ok. Checked with unit test.", "author": "purplefox", "createdAt": "2020-01-24T19:48:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE3MTg5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE3Mjc0OQ==", "url": "https://github.com/confluentinc/ksql/pull/4357#discussion_r370172749", "bodyText": "I would of thought we'd want ssl to be optional... could drive it off the presence or absence of ApiServerConfig.KEY_PATH?", "author": "big-andy-coates", "createdAt": "2020-01-23T15:07:07Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -36,48 +36,56 @@\n  * This class represents the API server. On start-up it deploys multiple server verticles to spread\n  * the load across available cores.\n  */\n+// CHECKSTYLE_RULES.OFF: ClassDataAbstractionCoupling\n public class Server {\n+  // CHECKSTYLE_RULES.ON: ClassDataAbstractionCoupling\n \n   private static final Logger log = LoggerFactory.getLogger(Server.class);\n \n   private final Vertx vertx;\n-  private final JsonObject config;\n+  private final ApiServerConfig config;\n   private final Endpoints endpoints;\n-  private final HttpServerOptions httpServerOptions;\n   private final Map<ApiQueryID, QuerySubscriber> queries = new ConcurrentHashMap<>();\n   private final Set<HttpConnection> connections = new ConcurrentHashSet<>();\n   private String deploymentID;\n \n-  public Server(final Vertx vertx, final JsonObject config, final Endpoints endpoints,\n-      final HttpServerOptions httpServerOptions) {\n+  public Server(final Vertx vertx, final ApiServerConfig config, final Endpoints endpoints) {\n     this.vertx = Objects.requireNonNull(vertx);\n     this.config = Objects.requireNonNull(config);\n     this.endpoints = Objects.requireNonNull(endpoints);\n-    this.httpServerOptions = Objects.requireNonNull(httpServerOptions);\n+  }\n+\n+  private HttpServerOptions createHttpServerOptions(final ApiServerConfig apiServerConfig) {\n+    return\n+        new HttpServerOptions().setHost(apiServerConfig.getString(ApiServerConfig.LISTEN_HOST))\n+            .setPort(apiServerConfig.getInt(ApiServerConfig.LISTEN_PORT))\n+            .setUseAlpn(true)\n+            .setSsl(true)", "originalCommit": "6525176eb2929af3428fda87a9cbeff126d7ccbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzMzExMA==", "url": "https://github.com/confluentinc/ksql/pull/4357#discussion_r370233110", "bodyText": "Yes, we could. But HTTP2 is usually always used with TLS - all major browsers require TLS with HTTP2. I know we're not aiming at the browser case but perhaps we should follow suit?", "author": "purplefox", "createdAt": "2020-01-23T16:46:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE3Mjc0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE3Mzk3NQ==", "url": "https://github.com/confluentinc/ksql/pull/4357#discussion_r370173975", "bodyText": "FYI, you can set Validators on these, e.g. to fail early if the port is negative etc.\nWhile on the subject of ports - Jetty supports auto-port assignment if port is zero. Does vert.x have something similar?  I've run into bind exceptions locally when doing multiple things - build servers could run into the same issue...", "author": "big-andy-coates", "createdAt": "2020-01-23T15:09:07Z", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import io.confluent.common.config.AbstractConfig;\n+import io.confluent.common.config.ConfigDef;\n+import io.confluent.common.config.ConfigDef.Importance;\n+import io.confluent.common.config.ConfigDef.Type;\n+import io.confluent.ksql.util.KsqlConfig;\n+import io.vertx.core.json.JsonObject;\n+import java.util.Map;\n+\n+/**\n+ * Config for the API server\n+ */\n+public class ApiServerConfig extends AbstractConfig {\n+\n+  private static final String PROPERTY_PREFIX = \"apiserver.\";\n+\n+  public static final String VERTICLE_INSTANCES = propertyName(\"verticle-instances\");\n+  public static final int DEFAULT_VERTICLE_INSTANCES =\n+      2 * Runtime.getRuntime().availableProcessors();\n+  public static final String VERTICLE_INSTANCES_DOC =\n+      \"The number of server verticle instances to start. Usually you want at least many instances\"\n+          + \" as there are cores you want to use, as each instance is single threaded.\";\n+\n+  public static final String LISTEN_HOST = propertyName(\"listen-host\");\n+  public static final String DEFAULT_LISTEN_HOST = \"0.0.0.0\";\n+  public static final String LISTEN_HOST_DOC =\n+      \"The hostname to listen on\";\n+\n+  public static final String LISTEN_PORT = propertyName(\"listen-port\");\n+  public static final int DEFAULT_LISTEN_PORT = 8089;\n+  public static final String LISTEN_PORT_DOC =\n+      \"The port to listen on\";\n+\n+  public static final String KEY_PATH = propertyName(\"key-path\");\n+  public static final String KEY_PATH_DOC =\n+      \"Path to key file\";\n+\n+  public static final String CERT_PATH = propertyName(\"cert-path\");\n+  public static final String CERT_PATH_DOC =\n+      \"Path to cert file\";\n+\n+  private static String propertyName(final String name) {\n+    return KsqlConfig.KSQL_CONFIG_PROPERTY_PREFIX + PROPERTY_PREFIX + name;\n+  }\n+\n+  private static final ConfigDef CONFIG_DEF = new ConfigDef()\n+      .define(\n+          VERTICLE_INSTANCES,\n+          Type.INT,\n+          DEFAULT_VERTICLE_INSTANCES,\n+          Importance.LOW,\n+          VERTICLE_INSTANCES_DOC)\n+      .define(\n+          LISTEN_HOST,\n+          Type.STRING,\n+          DEFAULT_LISTEN_HOST,\n+          Importance.MEDIUM,\n+          LISTEN_HOST_DOC)\n+      .define(\n+          LISTEN_PORT,\n+          Type.INT,\n+          DEFAULT_LISTEN_PORT,\n+          Importance.MEDIUM,\n+          LISTEN_PORT_DOC)\n+      .define(\n+          KEY_PATH,\n+          Type.STRING,\n+          null,\n+          Importance.MEDIUM,\n+          KEY_PATH_DOC)\n+      .define(\n+          CERT_PATH,\n+          Type.STRING,\n+          null,\n+          Importance.MEDIUM,\n+          CERT_PATH_DOC);", "originalCommit": "6525176eb2929af3428fda87a9cbeff126d7ccbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzMzU1MA==", "url": "https://github.com/confluentinc/ksql/pull/4357#discussion_r370233550", "bodyText": "Yes, this is supported by Vert.x https://vertx.io/docs/apidocs/io/vertx/core/http/HttpServer.html#actualPort--", "author": "purplefox", "createdAt": "2020-01-23T16:47:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE3Mzk3NQ=="}], "type": "inlineReview"}, {"oid": "63656728932b986b302173edf6cec2446ffca195", "url": "https://github.com/confluentinc/ksql/commit/63656728932b986b302173edf6cec2446ffca195", "message": "checkstyle", "committedDate": "2020-01-24T18:15:06Z", "type": "forcePushed"}, {"oid": "e0cd7580326a37a087692c2817f15c104478f03f", "url": "https://github.com/confluentinc/ksql/commit/e0cd7580326a37a087692c2817f15c104478f03f", "message": "review changes", "committedDate": "2020-01-24T19:49:05Z", "type": "commit"}, {"oid": "ce23e591d5fe31963d9f19cc8a4148f4d0482137", "url": "https://github.com/confluentinc/ksql/commit/ce23e591d5fe31963d9f19cc8a4148f4d0482137", "message": "checkstyle", "committedDate": "2020-01-24T19:51:04Z", "type": "commit"}, {"oid": "ce23e591d5fe31963d9f19cc8a4148f4d0482137", "url": "https://github.com/confluentinc/ksql/commit/ce23e591d5fe31963d9f19cc8a4148f4d0482137", "message": "checkstyle", "committedDate": "2020-01-24T19:51:04Z", "type": "forcePushed"}]}