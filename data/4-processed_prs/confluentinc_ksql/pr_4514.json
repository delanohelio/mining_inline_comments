{"pr_number": 4514, "pr_title": "docs: update docs for klip-12 configs", "pr_createdAt": "2020-02-11T19:58:20Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4514", "timeline": [{"oid": "ccad68d2e4047d993988324791a2bad16345349d", "url": "https://github.com/confluentinc/ksql/commit/ccad68d2e4047d993988324791a2bad16345349d", "message": "docs: update docs for klip-12 configs", "committedDate": "2020-02-11T19:55:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwMDY1OQ==", "url": "https://github.com/confluentinc/ksql/pull/4514#discussion_r378000659", "bodyText": "By default, when we set this to true, with nothing else (no heartbeats, no lag), it will try active first, and fall back to standby, right?", "author": "AlanConfluent", "createdAt": "2020-02-12T01:48:42Z", "path": "docs-md/operate-and-deploy/installation/server-config/config-reference.md", "diffHunk": "@@ -314,6 +314,29 @@ statements.\n     `ksql.persistence.ensure.value.is.struct` setting, because it has no\n     concept of an outer record or structure.\n \n+### ksql.query.pull.enable.standby.reads\n+\n+Config to enable/disable forwarding pull queries to standby hosts when the active is dead. This means that stale values may be returned \n+for these queries since standby hosts receive updates from the changelog topic (to which the active writes to) asynchronously.\n+Turning on this configuration, effectively sacrifices consistency for higher availability. \n+\n+Setting to `true` guarantees high availability for pull queries. If set to `false`, pull queries will fail when the active is dead and ", "originalCommit": "ccad68d2e4047d993988324791a2bad16345349d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwMTExMg==", "url": "https://github.com/confluentinc/ksql/pull/4514#discussion_r378001112", "bodyText": "\"In order to use this functionality\"", "author": "AlanConfluent", "createdAt": "2020-02-12T01:50:30Z", "path": "docs-md/operate-and-deploy/installation/server-config/config-reference.md", "diffHunk": "@@ -314,6 +314,29 @@ statements.\n     `ksql.persistence.ensure.value.is.struct` setting, because it has no\n     concept of an outer record or structure.\n \n+### ksql.query.pull.enable.standby.reads\n+\n+Config to enable/disable forwarding pull queries to standby hosts when the active is dead. This means that stale values may be returned \n+for these queries since standby hosts receive updates from the changelog topic (to which the active writes to) asynchronously.\n+Turning on this configuration, effectively sacrifices consistency for higher availability. \n+\n+Setting to `true` guarantees high availability for pull queries. If set to `false`, pull queries will fail when the active is dead and \n+until a new active is elected. Default value is `false`. \n+\n+For using this functionality, the server must be configured with `ksql.streams.num.standby.replicas` >= `1`, so standbys are actually enabled for the \n+underlying Kafka Streams topologies. We also recommend `ksql.heartbeat.enable=true`, to ensure pull queries quickly route around dead/failed servers, \n+without wastefully attempting to open connections to it (which can be slow & resource in-efficient). \n+\n+### ksql.query.pull.max.allowed.offset.lag\n+\n+Config to control the maximum lag tolerated by a pull query against a table, expressed as the number of messages a given table-partition is behind, compared to the \n+changelog topic. This is applied to all servers, both active and standbys included. This can be overridden per query, from the CLI (using `SET` command) or \n+the pull query REST endpoint (by including it in the request e.g: `\"streamsProperties\": {\"ksql.query.pull.max.allowed.offset.lag\": \"100\"}`). \n+\n+By default, any amount of lag is allowed. For using this functionality, the server must be configured with `ksql.heartbeat.enable=true` and ", "originalCommit": "ccad68d2e4047d993988324791a2bad16345349d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}