{"pr_number": 6055, "pr_title": "test: add filters.sql and assert tombstone", "pr_createdAt": "2020-08-19T23:45:04Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6055", "timeline": [{"oid": "c7deab80eb5010681d4c1c76a82e87eb35a28ab6", "url": "https://github.com/confluentinc/ksql/commit/c7deab80eb5010681d4c1c76a82e87eb35a28ab6", "message": "test: add filters.sql and assert tombstone", "committedDate": "2020-08-19T23:42:52Z", "type": "commit"}, {"oid": "e3f936621b8adc6abba0bbf8d1a071df250f4372", "url": "https://github.com/confluentinc/ksql/commit/e3f936621b8adc6abba0bbf8d1a071df250f4372", "message": "chore: remove unused import", "committedDate": "2020-08-20T00:34:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzODg5NQ==", "url": "https://github.com/confluentinc/ksql/pull/6055#discussion_r474238895", "bodyText": "Should you assert the value inserted is not available because it does not match the filter? Or, is the insert needed?", "author": "spena", "createdAt": "2020-08-20T19:58:21Z", "path": "ksqldb-functional-tests/src/test/resources/sql-tests/query-upgrades/filters.sql", "diffHunk": "@@ -0,0 +1,191 @@\n+-- this file tests adding/removing/changing filters\n+\n+----------------------------------------------------------------------------------------------------\n+--@test: add filter to basic STREAM without filter\n+----------------------------------------------------------------------------------------------------\n+SET 'ksql.create.or.replace.enabled' = 'true';\n+\n+CREATE STREAM a (id INT KEY, col1 INT) WITH (kafka_topic='a', value_format='JSON');\n+CREATE STREAM b AS SELECT * FROM a;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+ASSERT VALUES b (id, col1) VALUES (1, 0);\n+\n+CREATE OR REPLACE STREAM b AS SELECT * FROM a WHERE col1 > 0;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+INSERT INTO a (id, col1) VALUES (1, 1);\n+\n+ASSERT VALUES b (id, col1) VALUES (1, 1);\n+\n+----------------------------------------------------------------------------------------------------\n+--@test: remove filter from basic STREAM with filter\n+----------------------------------------------------------------------------------------------------\n+SET 'ksql.create.or.replace.enabled' = 'true';\n+\n+CREATE STREAM a (id INT KEY, col1 INT) WITH (kafka_topic='a', value_format='JSON');\n+CREATE STREAM b AS SELECT * FROM a WHERE col1 > 0;\n+\n+INSERT INTO a (id, col1) VALUES (2, 0);\n+\n+CREATE OR REPLACE STREAM b AS SELECT * FROM a;", "originalCommit": "e3f936621b8adc6abba0bbf8d1a071df250f4372", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzOTU4NA==", "url": "https://github.com/confluentinc/ksql/pull/6055#discussion_r474239584", "bodyText": "the next assert does that - if (2, 0) was inserted, then the next assert would have read it and the test would have failed", "author": "agavra", "createdAt": "2020-08-20T19:59:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzODg5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzOTYwNA==", "url": "https://github.com/confluentinc/ksql/pull/6055#discussion_r474239604", "bodyText": "Are these really needed if there're no assertions to verify they're not from b?", "author": "spena", "createdAt": "2020-08-20T19:59:44Z", "path": "ksqldb-functional-tests/src/test/resources/sql-tests/query-upgrades/filters.sql", "diffHunk": "@@ -0,0 +1,191 @@\n+-- this file tests adding/removing/changing filters\n+\n+----------------------------------------------------------------------------------------------------\n+--@test: add filter to basic STREAM without filter\n+----------------------------------------------------------------------------------------------------\n+SET 'ksql.create.or.replace.enabled' = 'true';\n+\n+CREATE STREAM a (id INT KEY, col1 INT) WITH (kafka_topic='a', value_format='JSON');\n+CREATE STREAM b AS SELECT * FROM a;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+ASSERT VALUES b (id, col1) VALUES (1, 0);\n+\n+CREATE OR REPLACE STREAM b AS SELECT * FROM a WHERE col1 > 0;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+INSERT INTO a (id, col1) VALUES (1, 1);\n+\n+ASSERT VALUES b (id, col1) VALUES (1, 1);\n+\n+----------------------------------------------------------------------------------------------------\n+--@test: remove filter from basic STREAM with filter\n+----------------------------------------------------------------------------------------------------\n+SET 'ksql.create.or.replace.enabled' = 'true';\n+\n+CREATE STREAM a (id INT KEY, col1 INT) WITH (kafka_topic='a', value_format='JSON');\n+CREATE STREAM b AS SELECT * FROM a WHERE col1 > 0;\n+\n+INSERT INTO a (id, col1) VALUES (2, 0);\n+\n+CREATE OR REPLACE STREAM b AS SELECT * FROM a;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+\n+ASSERT VALUES b (id, col1) VALUES (1, 0);\n+\n+----------------------------------------------------------------------------------------------------\n+--@test: modify filter from basic STREAM with filter\n+----------------------------------------------------------------------------------------------------\n+SET 'ksql.create.or.replace.enabled' = 'true';\n+\n+CREATE STREAM a (id INT KEY, col1 INT) WITH (kafka_topic='a', value_format='JSON');\n+CREATE STREAM b AS SELECT * FROM a WHERE col1 > 0;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+INSERT INTO a (id, col1) VALUES (1, 1);", "originalCommit": "e3f936621b8adc6abba0bbf8d1a071df250f4372", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI0MDMyOA==", "url": "https://github.com/confluentinc/ksql/pull/6055#discussion_r474240328", "bodyText": "see above, ASSERT reads from the output topic one at a time (polls) - so they implicitly verify it didn't make it into b", "author": "agavra", "createdAt": "2020-08-20T20:01:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzOTYwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI0MDY4NQ==", "url": "https://github.com/confluentinc/ksql/pull/6055#discussion_r474240685", "bodyText": "is this how it works internally in streams? I didn't know that filtered out values are written as tombstones.", "author": "spena", "createdAt": "2020-08-20T20:01:48Z", "path": "ksqldb-functional-tests/src/test/resources/sql-tests/query-upgrades/filters.sql", "diffHunk": "@@ -0,0 +1,191 @@\n+-- this file tests adding/removing/changing filters\n+\n+----------------------------------------------------------------------------------------------------\n+--@test: add filter to basic STREAM without filter\n+----------------------------------------------------------------------------------------------------\n+SET 'ksql.create.or.replace.enabled' = 'true';\n+\n+CREATE STREAM a (id INT KEY, col1 INT) WITH (kafka_topic='a', value_format='JSON');\n+CREATE STREAM b AS SELECT * FROM a;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+ASSERT VALUES b (id, col1) VALUES (1, 0);\n+\n+CREATE OR REPLACE STREAM b AS SELECT * FROM a WHERE col1 > 0;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+INSERT INTO a (id, col1) VALUES (1, 1);\n+\n+ASSERT VALUES b (id, col1) VALUES (1, 1);\n+\n+----------------------------------------------------------------------------------------------------\n+--@test: remove filter from basic STREAM with filter\n+----------------------------------------------------------------------------------------------------\n+SET 'ksql.create.or.replace.enabled' = 'true';\n+\n+CREATE STREAM a (id INT KEY, col1 INT) WITH (kafka_topic='a', value_format='JSON');\n+CREATE STREAM b AS SELECT * FROM a WHERE col1 > 0;\n+\n+INSERT INTO a (id, col1) VALUES (2, 0);\n+\n+CREATE OR REPLACE STREAM b AS SELECT * FROM a;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+\n+ASSERT VALUES b (id, col1) VALUES (1, 0);\n+\n+----------------------------------------------------------------------------------------------------\n+--@test: modify filter from basic STREAM with filter\n+----------------------------------------------------------------------------------------------------\n+SET 'ksql.create.or.replace.enabled' = 'true';\n+\n+CREATE STREAM a (id INT KEY, col1 INT) WITH (kafka_topic='a', value_format='JSON');\n+CREATE STREAM b AS SELECT * FROM a WHERE col1 > 0;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+INSERT INTO a (id, col1) VALUES (1, 1);\n+\n+CREATE OR REPLACE STREAM b AS SELECT * FROM a WHERE col1 < 0;\n+\n+INSERT INTO a (id, col1) VALUES (1, 0);\n+INSERT INTO a (id, col1) VALUES (1, -1);\n+\n+ASSERT VALUES b (id, col1) VALUES (1, 1);\n+ASSERT VALUES b (id, col1) VALUES (1, -1);\n+\n+----------------------------------------------------------------------------------------------------\n+-- note that each insert that is filtered out corresponds with a tombstone emitted into\n+-- the topic", "originalCommit": "e3f936621b8adc6abba0bbf8d1a071df250f4372", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI0MDk3OQ==", "url": "https://github.com/confluentinc/ksql/pull/6055#discussion_r474240979", "bodyText": "yes - this is because streams doesn't know whether or not the value exists when it hits a filter, so to be safe it always emits a tombstone", "author": "agavra", "createdAt": "2020-08-20T20:02:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI0MDY4NQ=="}], "type": "inlineReview"}]}