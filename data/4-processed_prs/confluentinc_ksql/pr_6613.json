{"pr_number": 6613, "pr_title": "docs: klip-41: ksqlDB .Net Client", "pr_createdAt": "2020-11-13T23:49:02Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6613", "timeline": [{"oid": "0b6e7884aadfa873caed8cb11a750c200d5072ad", "url": "https://github.com/confluentinc/ksql/commit/0b6e7884aadfa873caed8cb11a750c200d5072ad", "message": "KLIP-41 design proposal", "committedDate": "2020-11-13T23:25:58Z", "type": "commit"}, {"oid": "211ef4ada25d8a074e4df08ebe11a97fba081de1", "url": "https://github.com/confluentinc/ksql/commit/211ef4ada25d8a074e4df08ebe11a97fba081de1", "message": "Merge branch 'master' into klip-41-proposal", "committedDate": "2020-11-16T21:29:51Z", "type": "commit"}, {"oid": "3d2a59f997693cf7e4108d8927f0bee32782ec22", "url": "https://github.com/confluentinc/ksql/commit/3d2a59f997693cf7e4108d8927f0bee32782ec22", "message": "Adding links to the design-proposals/README.md", "committedDate": "2020-11-16T21:36:26Z", "type": "commit"}, {"oid": "7bb25f481a63b579c97ec6f79b83f225517555a1", "url": "https://github.com/confluentinc/ksql/commit/7bb25f481a63b579c97ec6f79b83f225517555a1", "message": "Merge branch 'master' into klip-41-proposal", "committedDate": "2020-11-19T14:04:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwODIwNg==", "url": "https://github.com/confluentinc/ksql/pull/6613#discussion_r529808206", "bodyText": "I'm not versed in .NET, but one thing I'm wondering is how support for multiple versions will look over time. Any ideas about how to manage that workflow?", "author": "MichaelDrogalis", "createdAt": "2020-11-24T18:57:32Z", "path": "design-proposals/klip-41-ksqldb-.net-client.md", "diffHunk": "@@ -0,0 +1,72 @@\n+# KLIP 41 - ksqlDB .NET Client\n+\n+**Author**: Alex Basiuk (@alex-basiuk) | \n+**Release Target**: TBD | \n+**Status**: _In Discussion_ | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Create a ksqlDB client for .NET which is on par with the existing Java client.\n+The .NET community will benefit from the this project. The goal is to provide first class developer experience and \n+simplify writing event streaming applications in .NET._\n+\n+## Motivation and background\n+\n+Basically, it's similar to [KLIP 15](./klip-15-new-api-and-client.md).\n+It should lower the barrier for .NET developers and increase adoption of ksqlDB by the community.\n+The library should offer the same feature set as the Java library and should follow common .NET conventions and patterns.  \n+\n+## What is in scope\n+\n+* A new client implemented in C#.\n+* Initially, the client will be targeted at .NET Core 3 and .NET Framework 5. Support of older versions will be added later.", "originalCommit": "7bb25f481a63b579c97ec6f79b83f225517555a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3NDg2Nw==", "url": "https://github.com/confluentinc/ksql/pull/6613#discussion_r529974867", "bodyText": "@MichaelDrogalis .NET 5 and .NET Core 3 are very close in terms of APIs. I don't think .NET 5 has any breaking changes in the libraries required by this project. It won't be hard to support both until end of support of .NET Core 3.1. Basically, you can have one project which targets multiple framework versions.\nSupport of older versions is probably more involved.", "author": "alex-basiuk", "createdAt": "2020-11-24T22:59:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwODIwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk5NDE3NQ==", "url": "https://github.com/confluentinc/ksql/pull/6613#discussion_r529994175", "bodyText": "Cool, that makes sense. Mostly just asking since Im unfamiliar with the .NET stack.", "author": "MichaelDrogalis", "createdAt": "2020-11-24T23:19:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwODIwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwODU1OQ==", "url": "https://github.com/confluentinc/ksql/pull/6613#discussion_r529808559", "bodyText": "Super. :) If this is going to live inside of a repo owned by you for a while, we can put the documentation in a README there so it is self-contained.", "author": "MichaelDrogalis", "createdAt": "2020-11-24T18:58:08Z", "path": "design-proposals/klip-41-ksqldb-.net-client.md", "diffHunk": "@@ -0,0 +1,72 @@\n+# KLIP 41 - ksqlDB .NET Client\n+\n+**Author**: Alex Basiuk (@alex-basiuk) | \n+**Release Target**: TBD | \n+**Status**: _In Discussion_ | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Create a ksqlDB client for .NET which is on par with the existing Java client.\n+The .NET community will benefit from the this project. The goal is to provide first class developer experience and \n+simplify writing event streaming applications in .NET._\n+\n+## Motivation and background\n+\n+Basically, it's similar to [KLIP 15](./klip-15-new-api-and-client.md).\n+It should lower the barrier for .NET developers and increase adoption of ksqlDB by the community.\n+The library should offer the same feature set as the Java library and should follow common .NET conventions and patterns.  \n+\n+## What is in scope\n+\n+* A new client implemented in C#.\n+* Initially, the client will be targeted at .NET Core 3 and .NET Framework 5. Support of older versions will be added later.\n+* The client will support execution and streaming of queries (both push and pull), inserting of rows into streams, DDL operations and admin operations\n+such as list and describe.\n+* The client will utilise C# [async streams](https://docs.microsoft.com/en-us/dotnet/csharp/tutorials/generate-consume-asynchronous-stream) feature.\n+* The client will also support a direct / synchronous interaction style.\n+* High-quality documentation and examples.", "originalCommit": "7bb25f481a63b579c97ec6f79b83f225517555a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwODk3MA==", "url": "https://github.com/confluentinc/ksql/pull/6613#discussion_r529808970", "bodyText": "Do any CI providers make dual Windows tests easy? Been a while since I've tested much on Windows.", "author": "MichaelDrogalis", "createdAt": "2020-11-24T18:58:48Z", "path": "design-proposals/klip-41-ksqldb-.net-client.md", "diffHunk": "@@ -0,0 +1,72 @@\n+# KLIP 41 - ksqlDB .NET Client\n+\n+**Author**: Alex Basiuk (@alex-basiuk) | \n+**Release Target**: TBD | \n+**Status**: _In Discussion_ | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Create a ksqlDB client for .NET which is on par with the existing Java client.\n+The .NET community will benefit from the this project. The goal is to provide first class developer experience and \n+simplify writing event streaming applications in .NET._\n+\n+## Motivation and background\n+\n+Basically, it's similar to [KLIP 15](./klip-15-new-api-and-client.md).\n+It should lower the barrier for .NET developers and increase adoption of ksqlDB by the community.\n+The library should offer the same feature set as the Java library and should follow common .NET conventions and patterns.  \n+\n+## What is in scope\n+\n+* A new client implemented in C#.\n+* Initially, the client will be targeted at .NET Core 3 and .NET Framework 5. Support of older versions will be added later.\n+* The client will support execution and streaming of queries (both push and pull), inserting of rows into streams, DDL operations and admin operations\n+such as list and describe.\n+* The client will utilise C# [async streams](https://docs.microsoft.com/en-us/dotnet/csharp/tutorials/generate-consume-asynchronous-stream) feature.\n+* The client will also support a direct / synchronous interaction style.\n+* High-quality documentation and examples.\n+\n+## What is not in scope\n+\n+No plans to provide more functional API for F#. However, it will be possible to use the client in F#.\n+\n+## Value/Return\n+\n+Ideas of event sourcing / CQRS / DDD style apps are popular in the .NET community but ksqlDB is often perceived as a Java-specific technology.\n+A native client will make it easier to try and hopefully adopt ksqlDB by .NET developers.\n+\n+## Public APIS\n+\n+N/A\n+\n+## Design\n+\n+* The client will target multiple [target frameworks](https://docs.microsoft.com/en-us/dotnet/standard/frameworks).\n+Initially it will be netcoreapp3.0 and net5.0. Support of older versions e.g. netstandard2.0 will be added at later stage.\n+* The client will provide an API based on async streams for streaming and async methods for the rest.\n+* The client will support injectable [Polly policies](https://github.com/App-vNext/Polly) to enable users to use custom resilience policies. However, out of the box, it should use sensible default retry policies.\n+* The client will expose convenience builder extension methods for ASP.NET Core. It should be easy to add and configure the client in ASP.NET Core idiomatic way. \n+  But the mechanism will be optional. Users won't be required to use it or another DI. \n+* The client will have minimal dependencies on third party libraries.\n+* The client will follow performance best practices.\n+* The client will be thread-safe.\n+\n+## Test plan\n+\n+Unit and integration test will be mandatory. Performance benchmarks are desirable but unlikely be the first priority.\n+Ideally, tests should be executed on both Windows and Linux platforms.", "originalCommit": "7bb25f481a63b579c97ec6f79b83f225517555a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk5MDk0Nw==", "url": "https://github.com/confluentinc/ksql/pull/6613#discussion_r529990947", "bodyText": "@MichaelDrogalis  Travis, CircleCI, Azure CI. Folks from confluent-kafka-dotnet use Travis.", "author": "alex-basiuk", "createdAt": "2020-11-24T23:16:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwODk3MA=="}], "type": "inlineReview"}]}