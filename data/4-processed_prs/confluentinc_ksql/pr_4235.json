{"pr_number": 4235, "pr_title": "docs: refactor installation docs around Docker (DOCS-3009)", "pr_createdAt": "2020-01-07T02:09:11Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4235", "timeline": [{"oid": "db90e20d67308edf874bee34625847c29191e1d6", "url": "https://github.com/confluentinc/ksql/commit/db90e20d67308edf874bee34625847c29191e1d6", "message": "docs: start refactoring installation docs (DOCS-3009)", "committedDate": "2020-01-13T23:20:07Z", "type": "commit"}, {"oid": "3d6cb06bccf3b0b5138a72571afb05119a871571", "url": "https://github.com/confluentinc/ksql/commit/3d6cb06bccf3b0b5138a72571afb05119a871571", "message": "docs: add docker command lines for starting ksqldb-cli", "committedDate": "2020-01-13T23:20:08Z", "type": "commit"}, {"oid": "d9dd891c4c4e3a419600f3a3892f087f8bc469fc", "url": "https://github.com/confluentinc/ksql/commit/d9dd891c4c4e3a419600f3a3892f087f8bc469fc", "message": "docs: fully dockerize the main installation topic", "committedDate": "2020-01-13T23:20:09Z", "type": "commit"}, {"oid": "20ca23ae68963a3f29ca48bb2b350f3d60f61708", "url": "https://github.com/confluentinc/ksql/commit/20ca23ae68963a3f29ca48bb2b350f3d60f61708", "message": "docs: refactor around Docker stacks", "committedDate": "2020-01-13T23:20:11Z", "type": "commit"}, {"oid": "af8e54f90ab46995d48f14becc69f0058a3d025a", "url": "https://github.com/confluentinc/ksql/commit/af8e54f90ab46995d48f14becc69f0058a3d025a", "message": "docs: rework installation topic around one stack file", "committedDate": "2020-01-13T23:20:12Z", "type": "commit"}, {"oid": "d5b8885fbc132d3498a56dae9f3b3a4d8d051847", "url": "https://github.com/confluentinc/ksql/commit/d5b8885fbc132d3498a56dae9f3b3a4d8d051847", "message": "docs: add section for PostgreSQL stack", "committedDate": "2020-01-13T23:51:40Z", "type": "commit"}, {"oid": "d5b8885fbc132d3498a56dae9f3b3a4d8d051847", "url": "https://github.com/confluentinc/ksql/commit/d5b8885fbc132d3498a56dae9f3b3a4d8d051847", "message": "docs: add section for PostgreSQL stack", "committedDate": "2020-01-13T23:51:40Z", "type": "forcePushed"}, {"oid": "20da709ef36637838538dc048532d01be69df6f7", "url": "https://github.com/confluentinc/ksql/commit/20da709ef36637838538dc048532d01be69df6f7", "message": "docs: add Compose output", "committedDate": "2020-01-14T03:08:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyMzY1Nw==", "url": "https://github.com/confluentinc/ksql/pull/4235#discussion_r366423657", "bodyText": "I wouldn't capitalize \"Like\" here, but up to you.", "author": "JoyceFee1", "createdAt": "2020-01-14T16:00:34Z", "path": "docs-md/operate-and-deploy/installation/install-ksqldb-with-docker.md", "diffHunk": "@@ -142,13 +121,13 @@ docker run -d \\\n In interactive mode, a ksqlDB CLI instance running outside of Docker can\n connect to the ksqlDB server running in Docker.\n \n-Connect ksqlDB Server to a Secure Kafka Cluster, Like Confluent Cloud\n-===================================================================\n+### Connect ksqlDB Server to a Secure Kafka Cluster, Like Confluent Cloud", "originalCommit": "20da709ef36637838538dc048532d01be69df6f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ2MDQ3NQ==", "url": "https://github.com/confluentinc/ksql/pull/4235#discussion_r366460475", "bodyText": "I cannot find a way to view the rendered output (no link in console output), so cannot view how this !!! note renders. Hoping it looks like a normal note and not three exclamation marks with the text.", "author": "JoyceFee1", "createdAt": "2020-01-14T17:03:08Z", "path": "docs-md/operate-and-deploy/installation/installing.md", "diffHunk": "@@ -3,144 +3,222 @@ layout: page\n title: Install ksqlDB\n tagline: Install ksqlDB on-premises\n description: Learn how to install ksqlDB on-premises\n-keywords: ksql, install, on-prem\n+keywords: ksql, install, docker, docker-compose, container, docker image, on-prem\n ---\n \n-ksqlDB is a component of {{ site.cp }} and the ksqlDB binaries are located\n-at [Confluent Downloads](https://www.confluent.io/download/)\n-as a part of the {{ site.cp }} bundle.\n+ksqlDB and Docker containers\n+----------------------------\n \n-ksqlDB must have access to a running {{ site.aktm }} cluster, which can\n-be in your data center, in a public cloud, {{ site.ccloud }}, etc.\n+You can run ksqlDB locally by using Docker containers, and you can define a\n+ksqlDB application by creating a *stack* of containers. A stack is a group of\n+containers that run interrelated services. For more information on stacks, see\n+[Describing Apps Using Stack Files](https://docs.docker.com/get-started/part4/#describing-apps-using-stack-files).\n \n-Docker support\n---------------\n-\n-You can deploy ksqlDB by using\n-[Docker containers](install-ksqldb-with-docker.md).\n-Starting with {{ site.cp }} 4.1.2, Confluent maintains images at\n-[Docker Hub](https://hub.docker.com/r/confluentinc/ksqldb-server/).\n-To start ksqlDB containers in configurations like \"ksqlDB Headless\n-Server\" and \"Interactive Server with Interceptors\", see\n-[Docker Configuration Parameters](https://docs.confluent.io/current/installation/docker/config-reference.html).\n-\n-Watch the\n-[screencast of Installing and Running KSQL](https://www.youtube.com/embed/icwHpPm-TCA).\n-\n-Supported Versions and Interoperability\n----------------------------------------\n-\n-You can use ksqlDB with compatible {{ site.cp }} and {{ site.aktm }}\n-versions.\n+The minimal ksqlDB stack has containers for {{ site.aktm }}, {{ site.zk }}, and\n+ksqlDB Server. More sophisticated ksqlDB stacks can have {{ site.sr }},\n+{{ site.kconnect }}, and other third-party services, like Elasticsearch.\n \n-|    ksqlDB version     | {{ site.version }} |\n-| --------------------- | ------------------ |\n-| Apache Kafka version  | 0.11.0 and later   |\n-| {{ site.cp }} version | > 3.3.0 and later  |\n+Stacks that have {{ site.sr }} can use Avro-encoded events in ksqlDB\n+applications. Without {{ site.sr }}, your ksqlDB applications can use only JSON\n+or delimited formats.  \n \n-Installation Instructions\n--------------------------\n+!!! note", "originalCommit": "20da709ef36637838538dc048532d01be69df6f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3Njk5OQ==", "url": "https://github.com/confluentinc/ksql/pull/4235#discussion_r366576999", "bodyText": "Yes, it'll only render with mkdocs, but I doubt it's worth the effort for you to install it. :)", "author": "JimGalasyn", "createdAt": "2020-01-14T21:18:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ2MDQ3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ2MTYwNw==", "url": "https://github.com/confluentinc/ksql/pull/4235#discussion_r366461607", "bodyText": "\"To start the ksqlDB application, use the...\"", "author": "JoyceFee1", "createdAt": "2020-01-14T17:05:21Z", "path": "docs-md/operate-and-deploy/installation/installing.md", "diffHunk": "@@ -3,144 +3,222 @@ layout: page\n title: Install ksqlDB\n tagline: Install ksqlDB on-premises\n description: Learn how to install ksqlDB on-premises\n-keywords: ksql, install, on-prem\n+keywords: ksql, install, docker, docker-compose, container, docker image, on-prem\n ---\n \n-ksqlDB is a component of {{ site.cp }} and the ksqlDB binaries are located\n-at [Confluent Downloads](https://www.confluent.io/download/)\n-as a part of the {{ site.cp }} bundle.\n+ksqlDB and Docker containers\n+----------------------------\n \n-ksqlDB must have access to a running {{ site.aktm }} cluster, which can\n-be in your data center, in a public cloud, {{ site.ccloud }}, etc.\n+You can run ksqlDB locally by using Docker containers, and you can define a\n+ksqlDB application by creating a *stack* of containers. A stack is a group of\n+containers that run interrelated services. For more information on stacks, see\n+[Describing Apps Using Stack Files](https://docs.docker.com/get-started/part4/#describing-apps-using-stack-files).\n \n-Docker support\n---------------\n-\n-You can deploy ksqlDB by using\n-[Docker containers](install-ksqldb-with-docker.md).\n-Starting with {{ site.cp }} 4.1.2, Confluent maintains images at\n-[Docker Hub](https://hub.docker.com/r/confluentinc/ksqldb-server/).\n-To start ksqlDB containers in configurations like \"ksqlDB Headless\n-Server\" and \"Interactive Server with Interceptors\", see\n-[Docker Configuration Parameters](https://docs.confluent.io/current/installation/docker/config-reference.html).\n-\n-Watch the\n-[screencast of Installing and Running KSQL](https://www.youtube.com/embed/icwHpPm-TCA).\n-\n-Supported Versions and Interoperability\n----------------------------------------\n-\n-You can use ksqlDB with compatible {{ site.cp }} and {{ site.aktm }}\n-versions.\n+The minimal ksqlDB stack has containers for {{ site.aktm }}, {{ site.zk }}, and\n+ksqlDB Server. More sophisticated ksqlDB stacks can have {{ site.sr }},\n+{{ site.kconnect }}, and other third-party services, like Elasticsearch.\n \n-|    ksqlDB version     | {{ site.version }} |\n-| --------------------- | ------------------ |\n-| Apache Kafka version  | 0.11.0 and later   |\n-| {{ site.cp }} version | > 3.3.0 and later  |\n+Stacks that have {{ site.sr }} can use Avro-encoded events in ksqlDB\n+applications. Without {{ site.sr }}, your ksqlDB applications can use only JSON\n+or delimited formats.  \n \n-Installation Instructions\n--------------------------\n+!!! note\n+    ksqlDB Server can connect to a remote {{ site.ak }} cluster that isn't\n+    defined in a local stack. In this case, you can run ksqlDB in a standalone\n+    container and pass in the connection parameters on the command line.\n \n-Follow the instructions at\n-[Confluent Platform Quick Start (Local)](https://docs.confluent.io/current/quickstart/ce-quickstart.html).\n+Docker images for ksqlDB\n+------------------------\n \n-Also, you can install ksqlDB individually by using the\n-[confluent-ksql package](https://docs.confluent.io/current/installation/available_packages.html#confluent-ksql).\n-For more information, see\n-[Confluent Platform Packages](https://docs.confluent.io/current/installation/available_packages.html).\n+ksqlDB has a server component and a separate command-line interface (CLI)\n+component. Both components have their own Docker images.\n \n-Scale Your ksqlDB Server Deployment\n----------------------------------\n+Confluent maintains images on [Docker Hub](https://hub.docker.com/u/confluentinc)\n+for ksqlDB components.\n \n-You can scale ksqlDB by adding more capacity per server (vertically) or by\n-adding more servers (horizontally). Also, you can scale ksqlDB clusters\n-during live operations without loss of data. For more information, see\n-[Scaling ksqlDB](../capacity-planning.md#scaling-ksqldb).\n+- [ksqldb-server](https://hub.docker.com/r/confluentinc/ksqldb-server/):\n+  ksqlDB Server image\n+- [ksqldb-cli](https://hub.docker.com/r/confluentinc/ksqldb-cli/):\n+  ksqlDB command-line interface (CLI) image\n+- [cp-zookeeper](https://hub.docker.com/r/confluentinc/cp-zookeeper):\n+  {{ site.zk }} image (Community Version)\n+- [cp-schema-registry](https://hub.docker.com/r/confluentinc/cp-schema-registry):\n+  {{ site.sr }} image (Community Version)\n+- [cp-kafka](https://hub.docker.com/r/confluentinc/cp-kafka):\n+  {{ site.aktm }} image (Community Version)\n \n-Start the ksqlDB Server\n------------------------\n+Install ksqlDB and {{ site.aktm }} by starting a\n+[Docker Compose](https://docs.docker.com/compose/) stack that runs containers\n+based on these images.\n \n-The ksqlDB servers are run separately from the ksqlDB CLI client and {{ site.ak }}\n-brokers. You can deploy servers on remote machines, VMs, or containers,\n-and the CLI connects to these remote servers.\n+The following sections show how to install Docker and use the docker-compose\n+tool to download and run the ksqlDB and related images.\n \n-You can add or remove servers from the same resource pool during live\n-operations, to scale query processing. You can use different resource pools\n-to support workload isolation. For example, you could deploy separate pools\n-for production and for testing.\n+Install Docker\n+--------------\n \n-You can only connect to one ksqlDB server at a time. The ksqlDB CLI does not\n-support automatic failover to another ksqlDB Server.\n+Install the Docker distribution that's compatible with your operating system.\n \n-![image](../../img/client-server.png)\n+!!! important\n+    For macOS and Windows, Docker runs in a virtual machine, and you must\n+    allocate at least 8 GB of RAM for the Docker VM to run the {{ site.ak }}\n+    stack. The default is 2 GB.\n+\n+- For macOS, use\n+  [Docker Desktop for Mac](https://docs.docker.com/docker-for-mac/install/).\n+  Change the **Memory** setting on the\n+  [Resources](https://docs.docker.com/docker-for-mac/#resources) page to 8 GB.\n+- For Windows, use\n+  [Docker Desktop for Windows](https://docs.docker.com/docker-for-windows/install/).\n+  Change the **Memory** setting on the\n+  [Advanced](https://docs.docker.com/docker-for-windows/#advanced) settings\n+  page to 8 GB.\n+- For Linux, follow the [instructions](https://docs.docker.com/install/)\n+  for your Linux distribution. No memory change is necessary, because Docker\n+  runs natively and not in a VM.\n+\n+Create a stack file to define your ksqlDB application \n+-----------------------------------------------------\n+\n+When you've decided on the services that you want in the stack, you define a\n+[Compose file, or \"stack\" file](https://docs.docker.com/compose/compose-file/),\n+which is a YAML file, to configure your ksqlDB application's services. The \n+stack file is frequently named `docker-compose.yml`. \n+\n+To start your ksqlDB application, you use the", "originalCommit": "20da709ef36637838538dc048532d01be69df6f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ2MjIyMw==", "url": "https://github.com/confluentinc/ksql/pull/4235#discussion_r366462223", "bodyText": "...run the stack for the application. Run docker-compose up to start the\napplication and...", "author": "JoyceFee1", "createdAt": "2020-01-14T17:06:32Z", "path": "docs-md/operate-and-deploy/installation/installing.md", "diffHunk": "@@ -3,144 +3,222 @@ layout: page\n title: Install ksqlDB\n tagline: Install ksqlDB on-premises\n description: Learn how to install ksqlDB on-premises\n-keywords: ksql, install, on-prem\n+keywords: ksql, install, docker, docker-compose, container, docker image, on-prem\n ---\n \n-ksqlDB is a component of {{ site.cp }} and the ksqlDB binaries are located\n-at [Confluent Downloads](https://www.confluent.io/download/)\n-as a part of the {{ site.cp }} bundle.\n+ksqlDB and Docker containers\n+----------------------------\n \n-ksqlDB must have access to a running {{ site.aktm }} cluster, which can\n-be in your data center, in a public cloud, {{ site.ccloud }}, etc.\n+You can run ksqlDB locally by using Docker containers, and you can define a\n+ksqlDB application by creating a *stack* of containers. A stack is a group of\n+containers that run interrelated services. For more information on stacks, see\n+[Describing Apps Using Stack Files](https://docs.docker.com/get-started/part4/#describing-apps-using-stack-files).\n \n-Docker support\n---------------\n-\n-You can deploy ksqlDB by using\n-[Docker containers](install-ksqldb-with-docker.md).\n-Starting with {{ site.cp }} 4.1.2, Confluent maintains images at\n-[Docker Hub](https://hub.docker.com/r/confluentinc/ksqldb-server/).\n-To start ksqlDB containers in configurations like \"ksqlDB Headless\n-Server\" and \"Interactive Server with Interceptors\", see\n-[Docker Configuration Parameters](https://docs.confluent.io/current/installation/docker/config-reference.html).\n-\n-Watch the\n-[screencast of Installing and Running KSQL](https://www.youtube.com/embed/icwHpPm-TCA).\n-\n-Supported Versions and Interoperability\n----------------------------------------\n-\n-You can use ksqlDB with compatible {{ site.cp }} and {{ site.aktm }}\n-versions.\n+The minimal ksqlDB stack has containers for {{ site.aktm }}, {{ site.zk }}, and\n+ksqlDB Server. More sophisticated ksqlDB stacks can have {{ site.sr }},\n+{{ site.kconnect }}, and other third-party services, like Elasticsearch.\n \n-|    ksqlDB version     | {{ site.version }} |\n-| --------------------- | ------------------ |\n-| Apache Kafka version  | 0.11.0 and later   |\n-| {{ site.cp }} version | > 3.3.0 and later  |\n+Stacks that have {{ site.sr }} can use Avro-encoded events in ksqlDB\n+applications. Without {{ site.sr }}, your ksqlDB applications can use only JSON\n+or delimited formats.  \n \n-Installation Instructions\n--------------------------\n+!!! note\n+    ksqlDB Server can connect to a remote {{ site.ak }} cluster that isn't\n+    defined in a local stack. In this case, you can run ksqlDB in a standalone\n+    container and pass in the connection parameters on the command line.\n \n-Follow the instructions at\n-[Confluent Platform Quick Start (Local)](https://docs.confluent.io/current/quickstart/ce-quickstart.html).\n+Docker images for ksqlDB\n+------------------------\n \n-Also, you can install ksqlDB individually by using the\n-[confluent-ksql package](https://docs.confluent.io/current/installation/available_packages.html#confluent-ksql).\n-For more information, see\n-[Confluent Platform Packages](https://docs.confluent.io/current/installation/available_packages.html).\n+ksqlDB has a server component and a separate command-line interface (CLI)\n+component. Both components have their own Docker images.\n \n-Scale Your ksqlDB Server Deployment\n----------------------------------\n+Confluent maintains images on [Docker Hub](https://hub.docker.com/u/confluentinc)\n+for ksqlDB components.\n \n-You can scale ksqlDB by adding more capacity per server (vertically) or by\n-adding more servers (horizontally). Also, you can scale ksqlDB clusters\n-during live operations without loss of data. For more information, see\n-[Scaling ksqlDB](../capacity-planning.md#scaling-ksqldb).\n+- [ksqldb-server](https://hub.docker.com/r/confluentinc/ksqldb-server/):\n+  ksqlDB Server image\n+- [ksqldb-cli](https://hub.docker.com/r/confluentinc/ksqldb-cli/):\n+  ksqlDB command-line interface (CLI) image\n+- [cp-zookeeper](https://hub.docker.com/r/confluentinc/cp-zookeeper):\n+  {{ site.zk }} image (Community Version)\n+- [cp-schema-registry](https://hub.docker.com/r/confluentinc/cp-schema-registry):\n+  {{ site.sr }} image (Community Version)\n+- [cp-kafka](https://hub.docker.com/r/confluentinc/cp-kafka):\n+  {{ site.aktm }} image (Community Version)\n \n-Start the ksqlDB Server\n------------------------\n+Install ksqlDB and {{ site.aktm }} by starting a\n+[Docker Compose](https://docs.docker.com/compose/) stack that runs containers\n+based on these images.\n \n-The ksqlDB servers are run separately from the ksqlDB CLI client and {{ site.ak }}\n-brokers. You can deploy servers on remote machines, VMs, or containers,\n-and the CLI connects to these remote servers.\n+The following sections show how to install Docker and use the docker-compose\n+tool to download and run the ksqlDB and related images.\n \n-You can add or remove servers from the same resource pool during live\n-operations, to scale query processing. You can use different resource pools\n-to support workload isolation. For example, you could deploy separate pools\n-for production and for testing.\n+Install Docker\n+--------------\n \n-You can only connect to one ksqlDB server at a time. The ksqlDB CLI does not\n-support automatic failover to another ksqlDB Server.\n+Install the Docker distribution that's compatible with your operating system.\n \n-![image](../../img/client-server.png)\n+!!! important\n+    For macOS and Windows, Docker runs in a virtual machine, and you must\n+    allocate at least 8 GB of RAM for the Docker VM to run the {{ site.ak }}\n+    stack. The default is 2 GB.\n+\n+- For macOS, use\n+  [Docker Desktop for Mac](https://docs.docker.com/docker-for-mac/install/).\n+  Change the **Memory** setting on the\n+  [Resources](https://docs.docker.com/docker-for-mac/#resources) page to 8 GB.\n+- For Windows, use\n+  [Docker Desktop for Windows](https://docs.docker.com/docker-for-windows/install/).\n+  Change the **Memory** setting on the\n+  [Advanced](https://docs.docker.com/docker-for-windows/#advanced) settings\n+  page to 8 GB.\n+- For Linux, follow the [instructions](https://docs.docker.com/install/)\n+  for your Linux distribution. No memory change is necessary, because Docker\n+  runs natively and not in a VM.\n+\n+Create a stack file to define your ksqlDB application \n+-----------------------------------------------------\n+\n+When you've decided on the services that you want in the stack, you define a\n+[Compose file, or \"stack\" file](https://docs.docker.com/compose/compose-file/),\n+which is a YAML file, to configure your ksqlDB application's services. The \n+stack file is frequently named `docker-compose.yml`. \n+\n+To start your ksqlDB application, you use the\n+[docker-compose CLI](https://docs.docker.com/compose/) to", "originalCommit": "20da709ef36637838538dc048532d01be69df6f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ2MjgxNQ==", "url": "https://github.com/confluentinc/ksql/pull/4235#discussion_r366462815", "bodyText": "As you can tell from previous comments, use of \"your/your\"  can be replaced by \"the\"--just a preference/writer's choice.", "author": "JoyceFee1", "createdAt": "2020-01-14T17:07:42Z", "path": "docs-md/operate-and-deploy/installation/installing.md", "diffHunk": "@@ -3,144 +3,222 @@ layout: page\n title: Install ksqlDB\n tagline: Install ksqlDB on-premises\n description: Learn how to install ksqlDB on-premises\n-keywords: ksql, install, on-prem\n+keywords: ksql, install, docker, docker-compose, container, docker image, on-prem\n ---\n \n-ksqlDB is a component of {{ site.cp }} and the ksqlDB binaries are located\n-at [Confluent Downloads](https://www.confluent.io/download/)\n-as a part of the {{ site.cp }} bundle.\n+ksqlDB and Docker containers\n+----------------------------\n \n-ksqlDB must have access to a running {{ site.aktm }} cluster, which can\n-be in your data center, in a public cloud, {{ site.ccloud }}, etc.\n+You can run ksqlDB locally by using Docker containers, and you can define a\n+ksqlDB application by creating a *stack* of containers. A stack is a group of\n+containers that run interrelated services. For more information on stacks, see\n+[Describing Apps Using Stack Files](https://docs.docker.com/get-started/part4/#describing-apps-using-stack-files).\n \n-Docker support\n---------------\n-\n-You can deploy ksqlDB by using\n-[Docker containers](install-ksqldb-with-docker.md).\n-Starting with {{ site.cp }} 4.1.2, Confluent maintains images at\n-[Docker Hub](https://hub.docker.com/r/confluentinc/ksqldb-server/).\n-To start ksqlDB containers in configurations like \"ksqlDB Headless\n-Server\" and \"Interactive Server with Interceptors\", see\n-[Docker Configuration Parameters](https://docs.confluent.io/current/installation/docker/config-reference.html).\n-\n-Watch the\n-[screencast of Installing and Running KSQL](https://www.youtube.com/embed/icwHpPm-TCA).\n-\n-Supported Versions and Interoperability\n----------------------------------------\n-\n-You can use ksqlDB with compatible {{ site.cp }} and {{ site.aktm }}\n-versions.\n+The minimal ksqlDB stack has containers for {{ site.aktm }}, {{ site.zk }}, and\n+ksqlDB Server. More sophisticated ksqlDB stacks can have {{ site.sr }},\n+{{ site.kconnect }}, and other third-party services, like Elasticsearch.\n \n-|    ksqlDB version     | {{ site.version }} |\n-| --------------------- | ------------------ |\n-| Apache Kafka version  | 0.11.0 and later   |\n-| {{ site.cp }} version | > 3.3.0 and later  |\n+Stacks that have {{ site.sr }} can use Avro-encoded events in ksqlDB\n+applications. Without {{ site.sr }}, your ksqlDB applications can use only JSON\n+or delimited formats.  \n \n-Installation Instructions\n--------------------------\n+!!! note\n+    ksqlDB Server can connect to a remote {{ site.ak }} cluster that isn't\n+    defined in a local stack. In this case, you can run ksqlDB in a standalone\n+    container and pass in the connection parameters on the command line.\n \n-Follow the instructions at\n-[Confluent Platform Quick Start (Local)](https://docs.confluent.io/current/quickstart/ce-quickstart.html).\n+Docker images for ksqlDB\n+------------------------\n \n-Also, you can install ksqlDB individually by using the\n-[confluent-ksql package](https://docs.confluent.io/current/installation/available_packages.html#confluent-ksql).\n-For more information, see\n-[Confluent Platform Packages](https://docs.confluent.io/current/installation/available_packages.html).\n+ksqlDB has a server component and a separate command-line interface (CLI)\n+component. Both components have their own Docker images.\n \n-Scale Your ksqlDB Server Deployment\n----------------------------------\n+Confluent maintains images on [Docker Hub](https://hub.docker.com/u/confluentinc)\n+for ksqlDB components.\n \n-You can scale ksqlDB by adding more capacity per server (vertically) or by\n-adding more servers (horizontally). Also, you can scale ksqlDB clusters\n-during live operations without loss of data. For more information, see\n-[Scaling ksqlDB](../capacity-planning.md#scaling-ksqldb).\n+- [ksqldb-server](https://hub.docker.com/r/confluentinc/ksqldb-server/):\n+  ksqlDB Server image\n+- [ksqldb-cli](https://hub.docker.com/r/confluentinc/ksqldb-cli/):\n+  ksqlDB command-line interface (CLI) image\n+- [cp-zookeeper](https://hub.docker.com/r/confluentinc/cp-zookeeper):\n+  {{ site.zk }} image (Community Version)\n+- [cp-schema-registry](https://hub.docker.com/r/confluentinc/cp-schema-registry):\n+  {{ site.sr }} image (Community Version)\n+- [cp-kafka](https://hub.docker.com/r/confluentinc/cp-kafka):\n+  {{ site.aktm }} image (Community Version)\n \n-Start the ksqlDB Server\n------------------------\n+Install ksqlDB and {{ site.aktm }} by starting a\n+[Docker Compose](https://docs.docker.com/compose/) stack that runs containers\n+based on these images.\n \n-The ksqlDB servers are run separately from the ksqlDB CLI client and {{ site.ak }}\n-brokers. You can deploy servers on remote machines, VMs, or containers,\n-and the CLI connects to these remote servers.\n+The following sections show how to install Docker and use the docker-compose\n+tool to download and run the ksqlDB and related images.\n \n-You can add or remove servers from the same resource pool during live\n-operations, to scale query processing. You can use different resource pools\n-to support workload isolation. For example, you could deploy separate pools\n-for production and for testing.\n+Install Docker\n+--------------\n \n-You can only connect to one ksqlDB server at a time. The ksqlDB CLI does not\n-support automatic failover to another ksqlDB Server.\n+Install the Docker distribution that's compatible with your operating system.\n \n-![image](../../img/client-server.png)\n+!!! important\n+    For macOS and Windows, Docker runs in a virtual machine, and you must\n+    allocate at least 8 GB of RAM for the Docker VM to run the {{ site.ak }}\n+    stack. The default is 2 GB.\n+\n+- For macOS, use\n+  [Docker Desktop for Mac](https://docs.docker.com/docker-for-mac/install/).\n+  Change the **Memory** setting on the\n+  [Resources](https://docs.docker.com/docker-for-mac/#resources) page to 8 GB.\n+- For Windows, use\n+  [Docker Desktop for Windows](https://docs.docker.com/docker-for-windows/install/).\n+  Change the **Memory** setting on the\n+  [Advanced](https://docs.docker.com/docker-for-windows/#advanced) settings\n+  page to 8 GB.\n+- For Linux, follow the [instructions](https://docs.docker.com/install/)\n+  for your Linux distribution. No memory change is necessary, because Docker\n+  runs natively and not in a VM.\n+\n+Create a stack file to define your ksqlDB application \n+-----------------------------------------------------\n+\n+When you've decided on the services that you want in the stack, you define a\n+[Compose file, or \"stack\" file](https://docs.docker.com/compose/compose-file/),\n+which is a YAML file, to configure your ksqlDB application's services. The \n+stack file is frequently named `docker-compose.yml`. \n+\n+To start your ksqlDB application, you use the\n+[docker-compose CLI](https://docs.docker.com/compose/) to\n+run the stack for your application. Run `docker-compose up` to start your\n+application and `docker-compose down` to stop it.\n+\n+!!! note\n+    If your stack file is compatible with version 3 or higher,", "originalCommit": "20da709ef36637838538dc048532d01be69df6f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ2NDExOA==", "url": "https://github.com/confluentinc/ksql/pull/4235#discussion_r366464118", "bodyText": "curious why cap used in \"Tutorial\" here...notice you are using sentence style cap.", "author": "JoyceFee1", "createdAt": "2020-01-14T17:10:12Z", "path": "docs-md/operate-and-deploy/installation/installing.md", "diffHunk": "@@ -3,144 +3,222 @@ layout: page\n title: Install ksqlDB\n tagline: Install ksqlDB on-premises\n description: Learn how to install ksqlDB on-premises\n-keywords: ksql, install, on-prem\n+keywords: ksql, install, docker, docker-compose, container, docker image, on-prem\n ---\n \n-ksqlDB is a component of {{ site.cp }} and the ksqlDB binaries are located\n-at [Confluent Downloads](https://www.confluent.io/download/)\n-as a part of the {{ site.cp }} bundle.\n+ksqlDB and Docker containers\n+----------------------------\n \n-ksqlDB must have access to a running {{ site.aktm }} cluster, which can\n-be in your data center, in a public cloud, {{ site.ccloud }}, etc.\n+You can run ksqlDB locally by using Docker containers, and you can define a\n+ksqlDB application by creating a *stack* of containers. A stack is a group of\n+containers that run interrelated services. For more information on stacks, see\n+[Describing Apps Using Stack Files](https://docs.docker.com/get-started/part4/#describing-apps-using-stack-files).\n \n-Docker support\n---------------\n-\n-You can deploy ksqlDB by using\n-[Docker containers](install-ksqldb-with-docker.md).\n-Starting with {{ site.cp }} 4.1.2, Confluent maintains images at\n-[Docker Hub](https://hub.docker.com/r/confluentinc/ksqldb-server/).\n-To start ksqlDB containers in configurations like \"ksqlDB Headless\n-Server\" and \"Interactive Server with Interceptors\", see\n-[Docker Configuration Parameters](https://docs.confluent.io/current/installation/docker/config-reference.html).\n-\n-Watch the\n-[screencast of Installing and Running KSQL](https://www.youtube.com/embed/icwHpPm-TCA).\n-\n-Supported Versions and Interoperability\n----------------------------------------\n-\n-You can use ksqlDB with compatible {{ site.cp }} and {{ site.aktm }}\n-versions.\n+The minimal ksqlDB stack has containers for {{ site.aktm }}, {{ site.zk }}, and\n+ksqlDB Server. More sophisticated ksqlDB stacks can have {{ site.sr }},\n+{{ site.kconnect }}, and other third-party services, like Elasticsearch.\n \n-|    ksqlDB version     | {{ site.version }} |\n-| --------------------- | ------------------ |\n-| Apache Kafka version  | 0.11.0 and later   |\n-| {{ site.cp }} version | > 3.3.0 and later  |\n+Stacks that have {{ site.sr }} can use Avro-encoded events in ksqlDB\n+applications. Without {{ site.sr }}, your ksqlDB applications can use only JSON\n+or delimited formats.  \n \n-Installation Instructions\n--------------------------\n+!!! note\n+    ksqlDB Server can connect to a remote {{ site.ak }} cluster that isn't\n+    defined in a local stack. In this case, you can run ksqlDB in a standalone\n+    container and pass in the connection parameters on the command line.\n \n-Follow the instructions at\n-[Confluent Platform Quick Start (Local)](https://docs.confluent.io/current/quickstart/ce-quickstart.html).\n+Docker images for ksqlDB\n+------------------------\n \n-Also, you can install ksqlDB individually by using the\n-[confluent-ksql package](https://docs.confluent.io/current/installation/available_packages.html#confluent-ksql).\n-For more information, see\n-[Confluent Platform Packages](https://docs.confluent.io/current/installation/available_packages.html).\n+ksqlDB has a server component and a separate command-line interface (CLI)\n+component. Both components have their own Docker images.\n \n-Scale Your ksqlDB Server Deployment\n----------------------------------\n+Confluent maintains images on [Docker Hub](https://hub.docker.com/u/confluentinc)\n+for ksqlDB components.\n \n-You can scale ksqlDB by adding more capacity per server (vertically) or by\n-adding more servers (horizontally). Also, you can scale ksqlDB clusters\n-during live operations without loss of data. For more information, see\n-[Scaling ksqlDB](../capacity-planning.md#scaling-ksqldb).\n+- [ksqldb-server](https://hub.docker.com/r/confluentinc/ksqldb-server/):\n+  ksqlDB Server image\n+- [ksqldb-cli](https://hub.docker.com/r/confluentinc/ksqldb-cli/):\n+  ksqlDB command-line interface (CLI) image\n+- [cp-zookeeper](https://hub.docker.com/r/confluentinc/cp-zookeeper):\n+  {{ site.zk }} image (Community Version)\n+- [cp-schema-registry](https://hub.docker.com/r/confluentinc/cp-schema-registry):\n+  {{ site.sr }} image (Community Version)\n+- [cp-kafka](https://hub.docker.com/r/confluentinc/cp-kafka):\n+  {{ site.aktm }} image (Community Version)\n \n-Start the ksqlDB Server\n------------------------\n+Install ksqlDB and {{ site.aktm }} by starting a\n+[Docker Compose](https://docs.docker.com/compose/) stack that runs containers\n+based on these images.\n \n-The ksqlDB servers are run separately from the ksqlDB CLI client and {{ site.ak }}\n-brokers. You can deploy servers on remote machines, VMs, or containers,\n-and the CLI connects to these remote servers.\n+The following sections show how to install Docker and use the docker-compose\n+tool to download and run the ksqlDB and related images.\n \n-You can add or remove servers from the same resource pool during live\n-operations, to scale query processing. You can use different resource pools\n-to support workload isolation. For example, you could deploy separate pools\n-for production and for testing.\n+Install Docker\n+--------------\n \n-You can only connect to one ksqlDB server at a time. The ksqlDB CLI does not\n-support automatic failover to another ksqlDB Server.\n+Install the Docker distribution that's compatible with your operating system.\n \n-![image](../../img/client-server.png)\n+!!! important\n+    For macOS and Windows, Docker runs in a virtual machine, and you must\n+    allocate at least 8 GB of RAM for the Docker VM to run the {{ site.ak }}\n+    stack. The default is 2 GB.\n+\n+- For macOS, use\n+  [Docker Desktop for Mac](https://docs.docker.com/docker-for-mac/install/).\n+  Change the **Memory** setting on the\n+  [Resources](https://docs.docker.com/docker-for-mac/#resources) page to 8 GB.\n+- For Windows, use\n+  [Docker Desktop for Windows](https://docs.docker.com/docker-for-windows/install/).\n+  Change the **Memory** setting on the\n+  [Advanced](https://docs.docker.com/docker-for-windows/#advanced) settings\n+  page to 8 GB.\n+- For Linux, follow the [instructions](https://docs.docker.com/install/)\n+  for your Linux distribution. No memory change is necessary, because Docker\n+  runs natively and not in a VM.\n+\n+Create a stack file to define your ksqlDB application \n+-----------------------------------------------------\n+\n+When you've decided on the services that you want in the stack, you define a\n+[Compose file, or \"stack\" file](https://docs.docker.com/compose/compose-file/),\n+which is a YAML file, to configure your ksqlDB application's services. The \n+stack file is frequently named `docker-compose.yml`. \n+\n+To start your ksqlDB application, you use the\n+[docker-compose CLI](https://docs.docker.com/compose/) to\n+run the stack for your application. Run `docker-compose up` to start your\n+application and `docker-compose down` to stop it.\n+\n+!!! note\n+    If your stack file is compatible with version 3 or higher,\n+    you can use the `docker stack deploy` command:\n+    `docker stack deploy -c docker-compose.yml your-ksqldb-app`.\n+    For more information, see\n+    [docker stack deploy](https://docs.docker.com/engine/reference/commandline/stack_deploy/).\n+\n+Build a ksqlDB application\n+--------------------------\n+\n+The following steps describe how to define and deploy a stack for a ksqlDB\n+application.\n+\n+### 1.  Define the services for your ksqlDB application\n+\n+Decide which services you need for your ksqlDB application. \n+\n+For a local installation, include one or more {{ site.ak }} brokers in the\n+stack and one or more ksqlDB Server instances. \n+\n+- {{ site.zk }} -- one, for cluster metadata\n+- {{ site.ak }} -- one or more\n+- {{ site.sr }} -- optional, but required for Avro\n+- ksqlDB Server  -- one or more\n+- ksqlDB CLI -- optional\n+- Other services -- like Elasticsearch, optional\n+\n+!!! note\n+    A stack that runs {{ site.sr }} can handle Avro-encoded events. Without\n+    {{ site.sr }}, ksqlDB handles only JSON or delimited schemas for events. \n+\n+You can declare a container for the ksqlDB CLI in the stack, or you can attach\n+the CLI to a ksqlDB Server instance later, from a separate container.\n+\n+### 2.  Build the stack\n+\n+Build a stack of services and deploy them by using\n+[Docker Compose](https://docs.docker.com/compose/).\n+\n+Define the configuration of your local ksqlDB installation by creating a\n+[Compose file](https://docs.docker.com/compose/compose-file/), which by\n+convention is named `docker-compose.yml`.\n+\n+### 3. Bring up the stack and run ksqlDB\n+   \n+To bring up the stack and run ksqlDB, use the\n+[docker-compose](https://docs.docker.com/compose/reference/overview/) tool,\n+which reads your `docker-compose.yml` file and runs containers for your\n+{{ site.ak }} and ksqlDB services. \n+\n+ksqlDB Tutorial stack", "originalCommit": "20da709ef36637838538dc048532d01be69df6f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ2NTU5Ng==", "url": "https://github.com/confluentinc/ksql/pull/4235#discussion_r366465596", "bodyText": "ah--so are ksqlDB Server and ksqlDB Tutorial actual product names?", "author": "JoyceFee1", "createdAt": "2020-01-14T17:13:05Z", "path": "docs-md/operate-and-deploy/installation/installing.md", "diffHunk": "@@ -163,15 +241,229 @@ Having trouble? Type 'help' (case-insensitive) for a rundown of how things work!\n ksql>\n ```\n \n-!!! tip\n-        You can view the ksqlDB CLI help text by running\n-        `<path-to-confluent>/bin/ksql --help`.\n+With the ksqlDB CLI running, you can issue SQL statements and queries on the\n+`ksql>` command line.\n+\n+!!! note\n+    The ksqlDB CLI connects to one ksqlDB Server at a time. The ksqlDB CLI\n+    doesn't support automatic failover to another ksqlDB Server.\n+\n+### Stacks with ksqlDB CLI containers\n+\n+Some stacks declare a container for the ksqlDB CLI but don't specify the\n+process that runs in the container. This kind of stack declares a generic\n+shell entry point: \n+\n+```yaml\n+entrypoint: /bin/sh\n+```\n+\n+To interact with a CLI container that's defined this way, use the\n+`docker exec` command to start the `ksql` process within the container.\n+\n+```bash\n+docker exec ksqldb-cli ksql http://<ksqldb-server-host>:<ksqldb-port>\n+```\n+\n+Stop your ksqlDB application\n+----------------------------\n+\n+Run the following command to stop the containers in your stack.\n+\n+```bash\n+docker-compose down\n+```\n+\n+Your output should resemble:\n+\n+```\n+Stopping tutorials_ksql-server_1     ... done\n+Stopping tutorials_schema-registry_1 ... done\n+Stopping tutorials_kafka_1           ... done\n+Stopping tutorials_zookeeper_1       ... done\n+Removing tutorials_ksql-server_1     ... done\n+Removing tutorials_schema-registry_1 ... done\n+Removing tutorials_kafka_1           ... done\n+Removing tutorials_zookeeper_1       ... done\n+Removing network tutorials_default\n+```\n+\n+Specify ksqlDB Server configuration parameters", "originalCommit": "20da709ef36637838538dc048532d01be69df6f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ2NjUxOQ==", "url": "https://github.com/confluentinc/ksql/pull/4235#discussion_r366466519", "bodyText": "Supported versions and interoperability?", "author": "JoyceFee1", "createdAt": "2020-01-14T17:15:02Z", "path": "docs-md/operate-and-deploy/installation/installing.md", "diffHunk": "@@ -163,15 +241,229 @@ Having trouble? Type 'help' (case-insensitive) for a rundown of how things work!\n ksql>\n ```\n \n-!!! tip\n-        You can view the ksqlDB CLI help text by running\n-        `<path-to-confluent>/bin/ksql --help`.\n+With the ksqlDB CLI running, you can issue SQL statements and queries on the\n+`ksql>` command line.\n+\n+!!! note\n+    The ksqlDB CLI connects to one ksqlDB Server at a time. The ksqlDB CLI\n+    doesn't support automatic failover to another ksqlDB Server.\n+\n+### Stacks with ksqlDB CLI containers\n+\n+Some stacks declare a container for the ksqlDB CLI but don't specify the\n+process that runs in the container. This kind of stack declares a generic\n+shell entry point: \n+\n+```yaml\n+entrypoint: /bin/sh\n+```\n+\n+To interact with a CLI container that's defined this way, use the\n+`docker exec` command to start the `ksql` process within the container.\n+\n+```bash\n+docker exec ksqldb-cli ksql http://<ksqldb-server-host>:<ksqldb-port>\n+```\n+\n+Stop your ksqlDB application\n+----------------------------\n+\n+Run the following command to stop the containers in your stack.\n+\n+```bash\n+docker-compose down\n+```\n+\n+Your output should resemble:\n+\n+```\n+Stopping tutorials_ksql-server_1     ... done\n+Stopping tutorials_schema-registry_1 ... done\n+Stopping tutorials_kafka_1           ... done\n+Stopping tutorials_zookeeper_1       ... done\n+Removing tutorials_ksql-server_1     ... done\n+Removing tutorials_schema-registry_1 ... done\n+Removing tutorials_kafka_1           ... done\n+Removing tutorials_zookeeper_1       ... done\n+Removing network tutorials_default\n+```\n+\n+Specify ksqlDB Server configuration parameters\n+----------------------------------------------\n+\n+You can specify the configuration for your ksqlDB Server instances by using\n+these approaches:\n+\n+- **The `environment` key:** In the stack file, populate the `environment` key with\n+  your settings. By convention, the ksqlDB setting names are prepended with\n+  `KSQL_`.\n+- **`--env` option:** On the\n+  [docker run](https://docs.docker.com/engine/reference/commandline/run/)\n+  command line, specify your settings by using the `--env` option once for each\n+  parameter. For more information, see\n+  [Configure ksqlDB with Docker](install-ksqldb-with-docker.md).\n+- **ksqlDB Server config file:** Add settings to the `ksql-server.properties`\n+  file. This requires building your own Docker image for ksqlDB Server. For\n+  more information, see [Configuring ksqlDB Server](server-config/index.md).\n+ \n+For a complete list of ksqlDB parameters, see the\n+[Configuration Parameter Reference](server-config/config-reference.md).\n+\n+You can also set any property for the {{ site.kstreams }} API, the\n+{{ site.ak }} producer, or the {{ site.ak }} consumer.\n+\n+A recommended approach is to configure a common set of properties\n+using the ksqlDB Server configuration file and override specific properties\n+as needed, using the environment variables.\n+\n+ksqlDB must have access to a running {{ site.ak }} cluster, which can be on\n+your local machine, in a data center, a public cloud, or {{ site.ccloud }}.\n+For ksqlDB Server to connect to a {{ site.ak }} cluster, the required\n+parameters are `KSQL_LISTENERS` and `KSQL_BOOTSTRAP_SERVERS`, which have the\n+following default values:\n+\n+```yaml\n+environment:\n+    KSQL_LISTENERS: http://0.0.0.0:8088\n+    KSQL_BOOTSTRAP_SERVERS: localhost:9092\n+```\n \n-Configure ksqlDB for Confluent Cloud\n-------------------------------------\n+ksqlDB runs separately from your {{ site.ak }} cluster, so you specify\n+the IP addresses of the cluster's bootstrap servers when you start a\n+container for ksqlDB Server. For more information, see\n+[Configuring ksqlDB Server](server-config/index.md).\n \n-You can use ksqlDB with a {{ site.ak }} cluster in {{ site.ccloud }}. For more\n-information, see\n+To start ksqlDB containers in configurations like \"ksqlDB Headless Server\"\n+and \"ksqlDB Interactive Server (Development)\", see\n+[Configure ksqlDB with Docker](install-ksqldb-with-docker.md).\n+\n+Supported Versions and Interoperability", "originalCommit": "20da709ef36637838538dc048532d01be69df6f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ2Njg2Mw==", "url": "https://github.com/confluentinc/ksql/pull/4235#discussion_r366466863", "bodyText": "Scale ksqlDB Server deployment?", "author": "JoyceFee1", "createdAt": "2020-01-14T17:15:42Z", "path": "docs-md/operate-and-deploy/installation/installing.md", "diffHunk": "@@ -163,15 +241,229 @@ Having trouble? Type 'help' (case-insensitive) for a rundown of how things work!\n ksql>\n ```\n \n-!!! tip\n-        You can view the ksqlDB CLI help text by running\n-        `<path-to-confluent>/bin/ksql --help`.\n+With the ksqlDB CLI running, you can issue SQL statements and queries on the\n+`ksql>` command line.\n+\n+!!! note\n+    The ksqlDB CLI connects to one ksqlDB Server at a time. The ksqlDB CLI\n+    doesn't support automatic failover to another ksqlDB Server.\n+\n+### Stacks with ksqlDB CLI containers\n+\n+Some stacks declare a container for the ksqlDB CLI but don't specify the\n+process that runs in the container. This kind of stack declares a generic\n+shell entry point: \n+\n+```yaml\n+entrypoint: /bin/sh\n+```\n+\n+To interact with a CLI container that's defined this way, use the\n+`docker exec` command to start the `ksql` process within the container.\n+\n+```bash\n+docker exec ksqldb-cli ksql http://<ksqldb-server-host>:<ksqldb-port>\n+```\n+\n+Stop your ksqlDB application\n+----------------------------\n+\n+Run the following command to stop the containers in your stack.\n+\n+```bash\n+docker-compose down\n+```\n+\n+Your output should resemble:\n+\n+```\n+Stopping tutorials_ksql-server_1     ... done\n+Stopping tutorials_schema-registry_1 ... done\n+Stopping tutorials_kafka_1           ... done\n+Stopping tutorials_zookeeper_1       ... done\n+Removing tutorials_ksql-server_1     ... done\n+Removing tutorials_schema-registry_1 ... done\n+Removing tutorials_kafka_1           ... done\n+Removing tutorials_zookeeper_1       ... done\n+Removing network tutorials_default\n+```\n+\n+Specify ksqlDB Server configuration parameters\n+----------------------------------------------\n+\n+You can specify the configuration for your ksqlDB Server instances by using\n+these approaches:\n+\n+- **The `environment` key:** In the stack file, populate the `environment` key with\n+  your settings. By convention, the ksqlDB setting names are prepended with\n+  `KSQL_`.\n+- **`--env` option:** On the\n+  [docker run](https://docs.docker.com/engine/reference/commandline/run/)\n+  command line, specify your settings by using the `--env` option once for each\n+  parameter. For more information, see\n+  [Configure ksqlDB with Docker](install-ksqldb-with-docker.md).\n+- **ksqlDB Server config file:** Add settings to the `ksql-server.properties`\n+  file. This requires building your own Docker image for ksqlDB Server. For\n+  more information, see [Configuring ksqlDB Server](server-config/index.md).\n+ \n+For a complete list of ksqlDB parameters, see the\n+[Configuration Parameter Reference](server-config/config-reference.md).\n+\n+You can also set any property for the {{ site.kstreams }} API, the\n+{{ site.ak }} producer, or the {{ site.ak }} consumer.\n+\n+A recommended approach is to configure a common set of properties\n+using the ksqlDB Server configuration file and override specific properties\n+as needed, using the environment variables.\n+\n+ksqlDB must have access to a running {{ site.ak }} cluster, which can be on\n+your local machine, in a data center, a public cloud, or {{ site.ccloud }}.\n+For ksqlDB Server to connect to a {{ site.ak }} cluster, the required\n+parameters are `KSQL_LISTENERS` and `KSQL_BOOTSTRAP_SERVERS`, which have the\n+following default values:\n+\n+```yaml\n+environment:\n+    KSQL_LISTENERS: http://0.0.0.0:8088\n+    KSQL_BOOTSTRAP_SERVERS: localhost:9092\n+```\n \n-Configure ksqlDB for Confluent Cloud\n-------------------------------------\n+ksqlDB runs separately from your {{ site.ak }} cluster, so you specify\n+the IP addresses of the cluster's bootstrap servers when you start a\n+container for ksqlDB Server. For more information, see\n+[Configuring ksqlDB Server](server-config/index.md).\n \n-You can use ksqlDB with a {{ site.ak }} cluster in {{ site.ccloud }}. For more\n-information, see\n+To start ksqlDB containers in configurations like \"ksqlDB Headless Server\"\n+and \"ksqlDB Interactive Server (Development)\", see\n+[Configure ksqlDB with Docker](install-ksqldb-with-docker.md).\n+\n+Supported Versions and Interoperability\n+---------------------------------------\n+\n+You can use ksqlDB with compatible {{ site.aktm }} and {{ site.cp }}\n+versions.\n+\n+|    ksqlDB version     | {{ site.release }} |\n+| --------------------- | ------------------ |\n+| Apache Kafka version  | 0.11.0 and later   |\n+| {{ site.cp }} version | > 3.3.0 and later  |\n+\n+Scale Your ksqlDB Server Deployment", "originalCommit": "20da709ef36637838538dc048532d01be69df6f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ2NzQwNg==", "url": "https://github.com/confluentinc/ksql/pull/4235#discussion_r366467406", "bodyText": "Next steps?", "author": "JoyceFee1", "createdAt": "2020-01-14T17:16:47Z", "path": "docs-md/operate-and-deploy/installation/installing.md", "diffHunk": "@@ -163,15 +241,229 @@ Having trouble? Type 'help' (case-insensitive) for a rundown of how things work!\n ksql>\n ```\n \n-!!! tip\n-        You can view the ksqlDB CLI help text by running\n-        `<path-to-confluent>/bin/ksql --help`.\n+With the ksqlDB CLI running, you can issue SQL statements and queries on the\n+`ksql>` command line.\n+\n+!!! note\n+    The ksqlDB CLI connects to one ksqlDB Server at a time. The ksqlDB CLI\n+    doesn't support automatic failover to another ksqlDB Server.\n+\n+### Stacks with ksqlDB CLI containers\n+\n+Some stacks declare a container for the ksqlDB CLI but don't specify the\n+process that runs in the container. This kind of stack declares a generic\n+shell entry point: \n+\n+```yaml\n+entrypoint: /bin/sh\n+```\n+\n+To interact with a CLI container that's defined this way, use the\n+`docker exec` command to start the `ksql` process within the container.\n+\n+```bash\n+docker exec ksqldb-cli ksql http://<ksqldb-server-host>:<ksqldb-port>\n+```\n+\n+Stop your ksqlDB application\n+----------------------------\n+\n+Run the following command to stop the containers in your stack.\n+\n+```bash\n+docker-compose down\n+```\n+\n+Your output should resemble:\n+\n+```\n+Stopping tutorials_ksql-server_1     ... done\n+Stopping tutorials_schema-registry_1 ... done\n+Stopping tutorials_kafka_1           ... done\n+Stopping tutorials_zookeeper_1       ... done\n+Removing tutorials_ksql-server_1     ... done\n+Removing tutorials_schema-registry_1 ... done\n+Removing tutorials_kafka_1           ... done\n+Removing tutorials_zookeeper_1       ... done\n+Removing network tutorials_default\n+```\n+\n+Specify ksqlDB Server configuration parameters\n+----------------------------------------------\n+\n+You can specify the configuration for your ksqlDB Server instances by using\n+these approaches:\n+\n+- **The `environment` key:** In the stack file, populate the `environment` key with\n+  your settings. By convention, the ksqlDB setting names are prepended with\n+  `KSQL_`.\n+- **`--env` option:** On the\n+  [docker run](https://docs.docker.com/engine/reference/commandline/run/)\n+  command line, specify your settings by using the `--env` option once for each\n+  parameter. For more information, see\n+  [Configure ksqlDB with Docker](install-ksqldb-with-docker.md).\n+- **ksqlDB Server config file:** Add settings to the `ksql-server.properties`\n+  file. This requires building your own Docker image for ksqlDB Server. For\n+  more information, see [Configuring ksqlDB Server](server-config/index.md).\n+ \n+For a complete list of ksqlDB parameters, see the\n+[Configuration Parameter Reference](server-config/config-reference.md).\n+\n+You can also set any property for the {{ site.kstreams }} API, the\n+{{ site.ak }} producer, or the {{ site.ak }} consumer.\n+\n+A recommended approach is to configure a common set of properties\n+using the ksqlDB Server configuration file and override specific properties\n+as needed, using the environment variables.\n+\n+ksqlDB must have access to a running {{ site.ak }} cluster, which can be on\n+your local machine, in a data center, a public cloud, or {{ site.ccloud }}.\n+For ksqlDB Server to connect to a {{ site.ak }} cluster, the required\n+parameters are `KSQL_LISTENERS` and `KSQL_BOOTSTRAP_SERVERS`, which have the\n+following default values:\n+\n+```yaml\n+environment:\n+    KSQL_LISTENERS: http://0.0.0.0:8088\n+    KSQL_BOOTSTRAP_SERVERS: localhost:9092\n+```\n \n-Configure ksqlDB for Confluent Cloud\n-------------------------------------\n+ksqlDB runs separately from your {{ site.ak }} cluster, so you specify\n+the IP addresses of the cluster's bootstrap servers when you start a\n+container for ksqlDB Server. For more information, see\n+[Configuring ksqlDB Server](server-config/index.md).\n \n-You can use ksqlDB with a {{ site.ak }} cluster in {{ site.ccloud }}. For more\n-information, see\n+To start ksqlDB containers in configurations like \"ksqlDB Headless Server\"\n+and \"ksqlDB Interactive Server (Development)\", see\n+[Configure ksqlDB with Docker](install-ksqldb-with-docker.md).\n+\n+Supported Versions and Interoperability\n+---------------------------------------\n+\n+You can use ksqlDB with compatible {{ site.aktm }} and {{ site.cp }}\n+versions.\n+\n+|    ksqlDB version     | {{ site.release }} |\n+| --------------------- | ------------------ |\n+| Apache Kafka version  | 0.11.0 and later   |\n+| {{ site.cp }} version | > 3.3.0 and later  |\n+\n+Scale Your ksqlDB Server Deployment\n+-----------------------------------\n+\n+You can scale ksqlDB by adding more capacity per server (vertically) or by\n+adding more servers (horizontally). Also, you can scale ksqlDB clusters\n+during live operations without loss of data. For more information, see\n+[Scaling ksqlDB](../capacity-planning.md#scaling-ksqldb).\n+\n+The ksqlDB servers are run separately from the ksqlDB CLI client and {{ site.ak }}\n+brokers. You can deploy servers on remote machines, VMs, or containers,\n+and the CLI connects to these remote servers.\n+\n+![image](../../img/client-server.png)\n+\n+You can add or remove servers from the same resource pool during live\n+operations, to scale query processing. You can use different resource pools\n+to support workload isolation. For example, you could deploy separate pools\n+for production and for testing.\n+\n+Next Steps", "originalCommit": "20da709ef36637838538dc048532d01be69df6f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ2ODA1NQ==", "url": "https://github.com/confluentinc/ksql/pull/4235#discussion_r366468055", "bodyText": "You must?", "author": "JoyceFee1", "createdAt": "2020-01-14T17:18:13Z", "path": "docs-md/operate-and-deploy/installation/installing.md", "diffHunk": "@@ -163,15 +241,229 @@ Having trouble? Type 'help' (case-insensitive) for a rundown of how things work!\n ksql>\n ```\n \n-!!! tip\n-        You can view the ksqlDB CLI help text by running\n-        `<path-to-confluent>/bin/ksql --help`.\n+With the ksqlDB CLI running, you can issue SQL statements and queries on the\n+`ksql>` command line.\n+\n+!!! note\n+    The ksqlDB CLI connects to one ksqlDB Server at a time. The ksqlDB CLI\n+    doesn't support automatic failover to another ksqlDB Server.\n+\n+### Stacks with ksqlDB CLI containers\n+\n+Some stacks declare a container for the ksqlDB CLI but don't specify the\n+process that runs in the container. This kind of stack declares a generic\n+shell entry point: \n+\n+```yaml\n+entrypoint: /bin/sh\n+```\n+\n+To interact with a CLI container that's defined this way, use the\n+`docker exec` command to start the `ksql` process within the container.\n+\n+```bash\n+docker exec ksqldb-cli ksql http://<ksqldb-server-host>:<ksqldb-port>\n+```\n+\n+Stop your ksqlDB application\n+----------------------------\n+\n+Run the following command to stop the containers in your stack.\n+\n+```bash\n+docker-compose down\n+```\n+\n+Your output should resemble:\n+\n+```\n+Stopping tutorials_ksql-server_1     ... done\n+Stopping tutorials_schema-registry_1 ... done\n+Stopping tutorials_kafka_1           ... done\n+Stopping tutorials_zookeeper_1       ... done\n+Removing tutorials_ksql-server_1     ... done\n+Removing tutorials_schema-registry_1 ... done\n+Removing tutorials_kafka_1           ... done\n+Removing tutorials_zookeeper_1       ... done\n+Removing network tutorials_default\n+```\n+\n+Specify ksqlDB Server configuration parameters\n+----------------------------------------------\n+\n+You can specify the configuration for your ksqlDB Server instances by using\n+these approaches:\n+\n+- **The `environment` key:** In the stack file, populate the `environment` key with\n+  your settings. By convention, the ksqlDB setting names are prepended with\n+  `KSQL_`.\n+- **`--env` option:** On the\n+  [docker run](https://docs.docker.com/engine/reference/commandline/run/)\n+  command line, specify your settings by using the `--env` option once for each\n+  parameter. For more information, see\n+  [Configure ksqlDB with Docker](install-ksqldb-with-docker.md).\n+- **ksqlDB Server config file:** Add settings to the `ksql-server.properties`\n+  file. This requires building your own Docker image for ksqlDB Server. For\n+  more information, see [Configuring ksqlDB Server](server-config/index.md).\n+ \n+For a complete list of ksqlDB parameters, see the\n+[Configuration Parameter Reference](server-config/config-reference.md).\n+\n+You can also set any property for the {{ site.kstreams }} API, the\n+{{ site.ak }} producer, or the {{ site.ak }} consumer.\n+\n+A recommended approach is to configure a common set of properties\n+using the ksqlDB Server configuration file and override specific properties\n+as needed, using the environment variables.\n+\n+ksqlDB must have access to a running {{ site.ak }} cluster, which can be on\n+your local machine, in a data center, a public cloud, or {{ site.ccloud }}.\n+For ksqlDB Server to connect to a {{ site.ak }} cluster, the required\n+parameters are `KSQL_LISTENERS` and `KSQL_BOOTSTRAP_SERVERS`, which have the\n+following default values:\n+\n+```yaml\n+environment:\n+    KSQL_LISTENERS: http://0.0.0.0:8088\n+    KSQL_BOOTSTRAP_SERVERS: localhost:9092\n+```\n \n-Configure ksqlDB for Confluent Cloud\n-------------------------------------\n+ksqlDB runs separately from your {{ site.ak }} cluster, so you specify\n+the IP addresses of the cluster's bootstrap servers when you start a\n+container for ksqlDB Server. For more information, see\n+[Configuring ksqlDB Server](server-config/index.md).\n \n-You can use ksqlDB with a {{ site.ak }} cluster in {{ site.ccloud }}. For more\n-information, see\n+To start ksqlDB containers in configurations like \"ksqlDB Headless Server\"\n+and \"ksqlDB Interactive Server (Development)\", see\n+[Configure ksqlDB with Docker](install-ksqldb-with-docker.md).\n+\n+Supported Versions and Interoperability\n+---------------------------------------\n+\n+You can use ksqlDB with compatible {{ site.aktm }} and {{ site.cp }}\n+versions.\n+\n+|    ksqlDB version     | {{ site.release }} |\n+| --------------------- | ------------------ |\n+| Apache Kafka version  | 0.11.0 and later   |\n+| {{ site.cp }} version | > 3.3.0 and later  |\n+\n+Scale Your ksqlDB Server Deployment\n+-----------------------------------\n+\n+You can scale ksqlDB by adding more capacity per server (vertically) or by\n+adding more servers (horizontally). Also, you can scale ksqlDB clusters\n+during live operations without loss of data. For more information, see\n+[Scaling ksqlDB](../capacity-planning.md#scaling-ksqldb).\n+\n+The ksqlDB servers are run separately from the ksqlDB CLI client and {{ site.ak }}\n+brokers. You can deploy servers on remote machines, VMs, or containers,\n+and the CLI connects to these remote servers.\n+\n+![image](../../img/client-server.png)\n+\n+You can add or remove servers from the same resource pool during live\n+operations, to scale query processing. You can use different resource pools\n+to support workload isolation. For example, you could deploy separate pools\n+for production and for testing.\n+\n+Next Steps\n+----------\n+\n+### Configure ksqlDB for Confluent Cloud\n+\n+You can use ksqlDB with a {{ site.ak }} cluster hosted in {{ site.ccloud }}.\n+For more information, see\n [Connect ksqlDB to Confluent Cloud](https://docs.confluent.io/current/cloud/connect/ksql-cloud-config.html).\n \n+### Experiment with other stacks\n+\n+You can try out other stacks that have different configurations, like the\n+\"Quickstart\" and \"reference\" stacks.\n+\n+#### ksqlDB Quickstart stack\n+\n+Download the `docker-compose.yml` file from the **Include Kafka** tab of the\n+[ksqlDB Quickstart](https://ksqldb.io/quickstart.html).\n+\n+This `docker-compose.yml` file defines a stack with these features:\n+\n+- Start one ksqlDB Server instance.\n+- Does not start {{ site.sr }}, so Avro schemas aren't available.\n+- Start the ksqlDB CLI container automatically.\n+\n+Use the following command to start the ksqlDB CLI in the running `ksqldb-cli`\n+container.\n+\n+```bash\n+docker exec -it ksqldb-cli ksql http://ksqldb-server:8088\n+```\n+\n+#### ksqlDB reference stack\n+\n+Download the [docker-compose.yml file](https://github.com/confluentinc/ksql/blob/master/docker-compose.yml)\n+for the reference stack in the ksqlDB repo.\n+\n+This `docker-compose.yml` file defines a stack with these features:\n+\n+- Start two or more ksqlDB Server instances.\n+- Start {{ site.sr }}.\n+- Start the ksqlDB CLI container automatically. \n+  \n+Use the following command to start the ksqlDB CLI in the running `ksqldb-cli`\n+container.\n+\n+```bash\n+docker exec ksqldb-cli ksql http://primary-ksqldb-server:8088\n+```\n+\n+#### PostgreSQL stack\n+\n+The [ksqlDB with Embedded Connect](../../tutorials/embedded-connect.md) tutorial\n+shows how to integrate ksqlDB with an external PostgreSQL database to power a\n+simple ride sharing app. The `docker-compose.yml` file defines a stack with\n+these features:\n+\n+- Start one ksqlDB Server instance.\n+- Start PostgreSQL on port 5432.\n+- Start the ksqlDB CLI container automatically.\n+\n+Use the following command to start the ksqlDB CLI in the running `ksqldb-cli`\n+container.\n+\n+```bash\n+docker exec ksqldb-cli ksql http://ksqldb-server:8088\n+```\n+\n+#### Full ksqlDB event processing application\n+\n+[The Confluent Platform Demo](https://github.com/confluentinc/cp-demo/)\n+shows how to build an event streaming application that processes live edits to\n+real Wikipedia pages. The\n+[docker-compose.yml](https://github.com/confluentinc/cp-demo/blob/master/docker-compose.yml)\n+file shows how to configure a stack with these features:\n+\n+- Start a {{ site.ak }} cluster with two brokers.\n+- Start a {{ site.kconnect }} instance.\n+- Start {{ site.sr }}. \n+- Start containers running Elasticsearch and Kibana.\n+- Start ksqlDB Server and ksqlDB CLI containers.\n+\n+!!! note\n+    You need to install", "originalCommit": "20da709ef36637838538dc048532d01be69df6f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0f3b8b6bb1df5a4ed6de1ac70ee44643e2830f60", "url": "https://github.com/confluentinc/ksql/commit/0f3b8b6bb1df5a4ed6de1ac70ee44643e2830f60", "message": "docs: incorporate copy edits", "committedDate": "2020-01-14T21:18:57Z", "type": "commit"}]}