{"pr_number": 4535, "pr_title": "chore: update upgrade notes for 0.7", "pr_createdAt": "2020-02-12T20:46:33Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4535", "timeline": [{"oid": "827cf5f7629ce63cc991a3eed581bbc1cc378fa2", "url": "https://github.com/confluentinc/ksql/commit/827cf5f7629ce63cc991a3eed581bbc1cc378fa2", "message": "chore: update upgrade notes for 0.7", "committedDate": "2020-02-12T20:45:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxMTQ2OA==", "url": "https://github.com/confluentinc/ksql/pull/4535#discussion_r378511468", "bodyText": "typo: released -> releases", "author": "vpapavas", "createdAt": "2020-02-12T21:04:50Z", "path": "docs-md/operate-and-deploy/installation/upgrading.md", "diffHunk": "@@ -6,17 +6,307 @@ description: Learn how to upgrade your on-premises ksqlDB deployments.\n keywords: ksqldb, install, upgrade\n ---\n \n-Upgrade your cluster one ksqlDB Server at a time, in a \"rolling restart\".\n-The remaining ksqlDB servers must have sufficient spare capacity to take over\n-temporarily for unavailable, restarting servers.\n+**IMPORTANT**: Do not upgrade existing ksqlDB installations in-place\n \n-Upgrading to ksqlDB 0.6.0\n--------------------------\n+## Why does ksqlDB not currently support in-place upgrades?\n \n-Notable changes in 0.6.0:\n+Past releases of KSQL were backwards compatible. However, there was a cost to this backwards compatibility:\n+progress was slower and the code base incurred increased complexity.  ksqlDB is a young product and\n+we're wanting to move fast, so have decided to choose speed of development over strong backwards\n+compatibility guarantees for a few released.", "originalCommit": "827cf5f7629ce63cc991a3eed581bbc1cc378fa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxMzczNQ==", "url": "https://github.com/confluentinc/ksql/pull/4535#discussion_r378513735", "bodyText": "typo: it -> is", "author": "vpapavas", "createdAt": "2020-02-12T21:09:47Z", "path": "docs-md/operate-and-deploy/installation/upgrading.md", "diffHunk": "@@ -6,17 +6,307 @@ description: Learn how to upgrade your on-premises ksqlDB deployments.\n keywords: ksqldb, install, upgrade\n ---\n \n-Upgrade your cluster one ksqlDB Server at a time, in a \"rolling restart\".\n-The remaining ksqlDB servers must have sufficient spare capacity to take over\n-temporarily for unavailable, restarting servers.\n+**IMPORTANT**: Do not upgrade existing ksqlDB installations in-place\n \n-Upgrading to ksqlDB 0.6.0\n--------------------------\n+## Why does ksqlDB not currently support in-place upgrades?\n \n-Notable changes in 0.6.0:\n+Past releases of KSQL were backwards compatible. However, there was a cost to this backwards compatibility:\n+progress was slower and the code base incurred increased complexity.  ksqlDB is a young product and\n+we're wanting to move fast, so have decided to choose speed of development over strong backwards\n+compatibility guarantees for a few released.\n \n-- ksqlDB Server\n-    - New feature\n-        - DEscription with link to PR.\n+Until version 1.0 of ksqlDB, each minor release will potentially have breaking changes in it that\n+mean you can not simply update the ksqlDB binaries and restart the server(s).\n+\n+The data models and binary formats used within ksqlDB are in flux. This means data local to each\n+ksqlDB node and stored centrally within internal Kafka topics may not be compatible with the new\n+version you are trying to deploy.\n+\n+### Should I upgrade?\n+\n+It's great that you're interested in trying out the new features and fixes that new versions of\n+ksqlDB bring. However, before rushing off to upgrade all your ksqlDB clusters ask yourself the\n+question \"do I need to upgrade _this_ cluster\"?\n+\n+If you're running ksqlDB in production and you don't yet need the features or fixes the new version\n+brings, then consider delaying any upgrade until either another release has features or fixes you\n+need, or until ksqlDB reaches version 1.0 and therefore promises backwards compatibility.\n+\n+## How to upgrade\n+\n+Upgrading a cluster involves leaving the old cluster running on the old version, bringing up a new\n+cluster on the new version, porting across your database schema and finally thinking about your data.\n+\n+### Porting the database schema\n+\n+To port your database schema from one cluster to another you need to recreate all the streams,\n+tables and types in the source cluster.  This is currently a manual process, until support is added\n+to [dump the schema](https://github.com/confluentinc/ksql/issues/4529).\n+\n+The recommended process it to:", "originalCommit": "827cf5f7629ce63cc991a3eed581bbc1cc378fa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUyMjE1Mg==", "url": "https://github.com/confluentinc/ksql/pull/4535#discussion_r378522152", "bodyText": "typo: come -> comes", "author": "vpapavas", "createdAt": "2020-02-12T21:27:36Z", "path": "docs-md/operate-and-deploy/installation/upgrading.md", "diffHunk": "@@ -6,17 +6,307 @@ description: Learn how to upgrade your on-premises ksqlDB deployments.\n keywords: ksqldb, install, upgrade\n ---\n \n-Upgrade your cluster one ksqlDB Server at a time, in a \"rolling restart\".\n-The remaining ksqlDB servers must have sufficient spare capacity to take over\n-temporarily for unavailable, restarting servers.\n+**IMPORTANT**: Do not upgrade existing ksqlDB installations in-place\n \n-Upgrading to ksqlDB 0.6.0\n--------------------------\n+## Why does ksqlDB not currently support in-place upgrades?\n \n-Notable changes in 0.6.0:\n+Past releases of KSQL were backwards compatible. However, there was a cost to this backwards compatibility:\n+progress was slower and the code base incurred increased complexity.  ksqlDB is a young product and\n+we're wanting to move fast, so have decided to choose speed of development over strong backwards\n+compatibility guarantees for a few released.\n \n-- ksqlDB Server\n-    - New feature\n-        - DEscription with link to PR.\n+Until version 1.0 of ksqlDB, each minor release will potentially have breaking changes in it that\n+mean you can not simply update the ksqlDB binaries and restart the server(s).\n+\n+The data models and binary formats used within ksqlDB are in flux. This means data local to each\n+ksqlDB node and stored centrally within internal Kafka topics may not be compatible with the new\n+version you are trying to deploy.\n+\n+### Should I upgrade?\n+\n+It's great that you're interested in trying out the new features and fixes that new versions of\n+ksqlDB bring. However, before rushing off to upgrade all your ksqlDB clusters ask yourself the\n+question \"do I need to upgrade _this_ cluster\"?\n+\n+If you're running ksqlDB in production and you don't yet need the features or fixes the new version\n+brings, then consider delaying any upgrade until either another release has features or fixes you\n+need, or until ksqlDB reaches version 1.0 and therefore promises backwards compatibility.\n+\n+## How to upgrade\n+\n+Upgrading a cluster involves leaving the old cluster running on the old version, bringing up a new\n+cluster on the new version, porting across your database schema and finally thinking about your data.\n+\n+### Porting the database schema\n+\n+To port your database schema from one cluster to another you need to recreate all the streams,\n+tables and types in the source cluster.  This is currently a manual process, until support is added\n+to [dump the schema](https://github.com/confluentinc/ksql/issues/4529).\n+\n+The recommended process it to:\n+\n+**Note: you can use the [`SPOOL`]\n+(https://github.com/confluentinc/ksql/blob/master/docs-md/developer-guide/ksqldb-reference/spool.md)\n+command to capture the output of the commands you run in the CLI to a file.**\n+\n+1. Capture streams SQL:\n+  1. Run `list streams extended;` to list all of the streams.\n+  1. Grab the SQL statement that created each stream from the output, ignoring `KSQL_PROCESSING_LOG`.\n+1. Capture tables SQL:\n+  1. Run `list tables extended;` to list all of the tables.\n+  1. Grab the SQL statement that created each table from the output.\n+1. Capture custom types SQL:\n+  1. Run `list types;` to list all of the custom types.\n+  1. Convert the output into `CREATE TYPE <name> AS <schema>` syntax by grabbing the name from the\n+     first column and the schema from the second column of the output.\n+1. Order by dependency:  you'll now have the list of SQL statements to rebuild the schema, but they\n+   are not yet ordered in terms of dependencies. You will need to reorder the statements to ensure\n+   each statement come after any other statements it depends on.", "originalCommit": "827cf5f7629ce63cc991a3eed581bbc1cc378fa2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}