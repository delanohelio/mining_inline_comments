{"pr_number": 5883, "pr_title": "fix: close query on invalid use of HTTP/2 with /query endpoint", "pr_createdAt": "2020-07-27T18:51:54Z", "pr_url": "https://github.com/confluentinc/ksql/pull/5883", "timeline": [{"oid": "f0e10ba8e9709ca2d9d97b6b82200ce79bfeb215", "url": "https://github.com/confluentinc/ksql/commit/f0e10ba8e9709ca2d9d97b6b82200ce79bfeb215", "message": "fix: close query on invalid use of HTTP/2", "committedDate": "2020-07-27T18:33:20Z", "type": "commit"}, {"oid": "4ed8ba06245de450341bceb817b9ec431b97aaf3", "url": "https://github.com/confluentinc/ksql/commit/4ed8ba06245de450341bceb817b9ec431b97aaf3", "message": "chore: call close from write", "committedDate": "2020-07-27T19:25:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEyODM5NQ==", "url": "https://github.com/confluentinc/ksql/pull/5883#discussion_r461128395", "bodyText": "did you mean to change this to close?", "author": "agavra", "createdAt": "2020-07-27T19:47:27Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java", "diffHunk": "@@ -89,15 +89,16 @@ static void handleOldApiResponse(final Server server, final RoutingContext routi\n     // a plain String, other times it's an object that needs to be JSON encoded, other times\n     // it represents a stream.\n     if (endpointResponse.getEntity() instanceof StreamingOutput) {\n+      final StreamingOutput streamingOutput = (StreamingOutput) endpointResponse.getEntity();\n       if (routingContext.request().version() == HttpVersion.HTTP_2) {\n         // The old /query endpoint uses chunked encoding which is not supported in HTTP2\n         routingContext.response().setStatusCode(METHOD_NOT_ALLOWED.code())\n             .setStatusMessage(\"The /query endpoint is not available using HTTP2\").end();\n+        streamingOutput.closeWithoutWrite();", "originalCommit": "4ed8ba06245de450341bceb817b9ec431b97aaf3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEzNDQzMw==", "url": "https://github.com/confluentinc/ksql/pull/5883#discussion_r461134433", "bodyText": "\ud83d\ude05", "author": "vcrfxia", "createdAt": "2020-07-27T19:58:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEyODM5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEyODY4OA==", "url": "https://github.com/confluentinc/ksql/pull/5883#discussion_r461128688", "bodyText": "nit, we should instead have this implement AutoCloseable", "author": "agavra", "createdAt": "2020-07-27T19:48:03Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/StreamingOutput.java", "diffHunk": "@@ -21,4 +21,7 @@\n public interface StreamingOutput {\n \n   void write(OutputStream output) throws IOException;\n+\n+  void close();", "originalCommit": "4ed8ba06245de450341bceb817b9ec431b97aaf3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEzNTUyMw==", "url": "https://github.com/confluentinc/ksql/pull/5883#discussion_r461135523", "bodyText": "Are you suggesting the classes implement AutoCloseable, or that the interface extends AutoCloseable? The latter makes sense to me but I got a compiler warning:\nWarning:(21, 8) java: auto-closeable resource io.confluent.ksql.api.server.StreamingOutput has a member method close() that could throw InterruptedException\n\nI worked around it with the same workaround we use in ServiceContext.java. LMK if this isn't what you had in mind.", "author": "vcrfxia", "createdAt": "2020-07-27T20:00:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEyODY4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2MDI4Mw==", "url": "https://github.com/confluentinc/ksql/pull/5883#discussion_r461160283", "bodyText": "eh I was suggesting the latter but I'm not entirely sure I understand the warning.", "author": "agavra", "createdAt": "2020-07-27T20:47:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEyODY4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2NTQ2OQ==", "url": "https://github.com/confluentinc/ksql/pull/5883#discussion_r461165469", "bodyText": "I don't fully understand it either but it seems general consensus is that the warning is bogus and the workaround we've used is fine:\nhttps://bugs.openjdk.java.net/browse/JDK-8155591\nhttps://bugs.openjdk.java.net/browse/JDK-7027157\nhttps://issues.apache.org/jira/browse/CXF-7465\njoyent/java-manta#322\nGoing to leave this as is.", "author": "vcrfxia", "createdAt": "2020-07-27T20:57:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEyODY4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEyODg3NA==", "url": "https://github.com/confluentinc/ksql/pull/5883#discussion_r461128874", "bodyText": "synchronized?", "author": "agavra", "createdAt": "2020-07-27T19:48:24Z", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/TopicStreamWriter.java", "diffHunk": "@@ -137,7 +138,15 @@ public void write(final OutputStream out) {\n       log.error(\"Exception encountered while writing to output stream\", exception);\n       outputException(out, exception);\n     } finally {\n+      close();\n+    }\n+  }\n+\n+  @Override\n+  public void close() {", "originalCommit": "4ed8ba06245de450341bceb817b9ec431b97aaf3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEzNDMwNg==", "url": "https://github.com/confluentinc/ksql/pull/5883#discussion_r461134306", "bodyText": "Argh, yes. Thanks for the catch!", "author": "vcrfxia", "createdAt": "2020-07-27T19:58:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEyODg3NA=="}], "type": "inlineReview"}, {"oid": "b6555aabb7fb238e8ac783bf8e7f71535709a232", "url": "https://github.com/confluentinc/ksql/commit/b6555aabb7fb238e8ac783bf8e7f71535709a232", "message": "chore: fix derps", "committedDate": "2020-07-27T19:58:12Z", "type": "commit"}]}