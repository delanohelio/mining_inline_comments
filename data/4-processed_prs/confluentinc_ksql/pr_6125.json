{"pr_number": 6125, "pr_title": "chore: support RUN SCRIPT in KsqlTester", "pr_createdAt": "2020-08-31T21:07:48Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6125", "timeline": [{"oid": "ab9f39c763caa342c0eaa3b62679049176113a49", "url": "https://github.com/confluentinc/ksql/commit/ab9f39c763caa342c0eaa3b62679049176113a49", "message": "chore: support RUN SCRIPT in KsqlTester", "committedDate": "2020-08-31T23:44:43Z", "type": "commit"}, {"oid": "ab9f39c763caa342c0eaa3b62679049176113a49", "url": "https://github.com/confluentinc/ksql/commit/ab9f39c763caa342c0eaa3b62679049176113a49", "message": "chore: support RUN SCRIPT in KsqlTester", "committedDate": "2020-08-31T23:44:43Z", "type": "forcePushed"}, {"oid": "b309a31fb5c42eca8addb4cf2039eb5408a05d99", "url": "https://github.com/confluentinc/ksql/commit/b309a31fb5c42eca8addb4cf2039eb5408a05d99", "message": "chore: minor fixes", "committedDate": "2020-09-01T03:39:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExMDM3Ng==", "url": "https://github.com/confluentinc/ksql/pull/6125#discussion_r481110376", "bodyText": "Intent may be clearer with:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    s -> assertThat(\"unexpected statement \" + s, false),\n          \n          \n            \n                    s -> fail(\"unexpected statement \" + s),", "author": "big-andy-coates", "createdAt": "2020-09-01T12:47:01Z", "path": "ksqldb-functional-tests/src/test/java/io/confluent/ksql/test/parser/SqlTestReaderTest.java", "diffHunk": "@@ -172,4 +181,38 @@ public void shouldThrowOnInvalidStatement() {\n     // Then:\n     assertThat(parsingException.getMessage(), is(\"line 1:8: no viable alternative at input 'CREATE foo'\"));\n   }\n+\n+  @Test\n+  public void shouldReadRunScript() throws IOException {\n+    final String fileContents =\n+        \"CREATE STREAM foo (id INT KEY, col1 INT) WITH (kafka_topic='a', value_format='json');\\n\"\n+        + \"CREATE STREAM bar (id INT KEY, col1 INT) WITH (kafka_topic='b', value_format='json');\";\n+    final Path runScript = Files.write(temporaryFolder.newFile().toPath(), fileContents.getBytes());\n+    final String contents = \"\"\n+        + \"--@test: test1\\n\"\n+        + \"RUN SCRIPT '\" + runScript.toString() + \"';\";\n+\n+    // When:\n+    final SqlTestReader reader = SqlTestReader.of(contents);\n+\n+    // Then:\n+    assertThat(reader.hasNext(), is(true));\n+    assertThat(reader.next(), is(TestStatement.of(new TestDirective(Type.TEST, \"test1\", LOC))));\n+\n+    assertThat(reader.hasNext(), is(true));\n+    reader.next().consume(\n+        s -> assertThat(s.getStatementText(), containsString(\"CREATE STREAM foo\")),\n+        s -> assertThat(\"unexpected statement \" + s, false),", "originalCommit": "b309a31fb5c42eca8addb4cf2039eb5408a05d99", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExMTcyMw==", "url": "https://github.com/confluentinc/ksql/pull/6125#discussion_r481111723", "bodyText": "What does the server do when it receives a RUN SCRIPT?  Can we add a suitable test to the server to ensure it returns a suitable error message, please?  e.g.\nRUN SCRIPT is not supported by the server. \nLoad the content of the script file you are trying to run and send that as the body of the request.", "author": "big-andy-coates", "createdAt": "2020-09-01T12:49:16Z", "path": "ksqldb-parser/src/main/antlr4/io/confluent/ksql/parser/SqlBase.g4", "diffHunk": "@@ -90,6 +90,10 @@ assertStatement\n     | ASSERT TABLE sourceName (tableElements)? (WITH tableProperties)?      #assertTable\n     ;\n \n+runScript\n+    : RUN SCRIPT STRING\n+    ;", "originalCommit": "b309a31fb5c42eca8addb4cf2039eb5408a05d99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExMjE1OA==", "url": "https://github.com/confluentinc/ksql/pull/6125#discussion_r481112158", "bodyText": "Do we have similar negative tests added already for the new assertStatement?", "author": "big-andy-coates", "createdAt": "2020-09-01T12:49:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExMTcyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQyMDc4OA==", "url": "https://github.com/confluentinc/ksql/pull/6125#discussion_r481420788", "bodyText": "We do, all of these are not in the grammar used by the main parser:\n    {\n      \"name\": \"should not parse ASSERT\",\n      \"statements\": [\n        \"ASSERT VALUES foo (id INT) VALUES (123);\"\n      ],\n      \"expectedException\": {\n        \"type\": \"io.confluent.ksql.parser.exception.ParseFailedException\",\n        \"message\": \"mismatched input 'ASSERT'\"\n      }\n    }\n\nIf you submit a query with RUN SCRIPT the same will happen", "author": "agavra", "createdAt": "2020-09-01T20:46:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExMTcyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExMzQ0OA==", "url": "https://github.com/confluentinc/ksql/pull/6125#discussion_r481113448", "bodyText": "You may run into issues with such a path as IntelliJ and MVN tend to use different current directories.  You can probably work around this by having the test case that runs this explicitly set the current directory to the model directory.", "author": "big-andy-coates", "createdAt": "2020-09-01T12:51:58Z", "path": "ksqldb-functional-tests/src/test/resources/sql-tests/test.sql", "diffHunk": "@@ -85,6 +85,19 @@ CREATE OR REPLACE STREAM bar AS SELECT id, col1 + 1 as col1 FROM foo;\n INSERT INTO foo (rowtime, id, col1) VALUES (1, 1, 1);\n ASSERT VALUES bar (rowtime, id, col1) VALUES (1, 1, 2);\n \n+----------------------------------------------------------------------------------------------------\n+--@test: basic test with run script\n+----------------------------------------------------------------------------------------------------\n+-- contents of script:\n+-- CREATE STREAM foo (id INT KEY, col1 INT) WITH (kafka_topic='foo', value_format='JSON');\n+-- CREATE STREAM bar AS SELECT * FROM foo;\n+RUN SCRIPT './src/test/resources/test-script.sql';", "originalCommit": "b309a31fb5c42eca8addb4cf2039eb5408a05d99", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExNDQ1MA==", "url": "https://github.com/confluentinc/ksql/pull/6125#discussion_r481114450", "bodyText": "KsqlException is a questionable exception type here.  There is a TestFrameworkException...", "author": "big-andy-coates", "createdAt": "2020-09-01T12:53:36Z", "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/parser/SqlTestReader.java", "diffHunk": "@@ -155,4 +171,21 @@ public TestStatement next() {\n     throw new IllegalStateException(\"Unexpected parse tree for statement \" + testStatement);\n   }\n \n+  private TestStatement handleRunScript() {\n+    final String script = ParserUtil.unquote(testStatement.runScript().STRING().getText(), \"'\");\n+    try {\n+      final List<String> lines = Files.readAllLines(\n+          Paths.get(ParserUtil.getIdentifierText(script)));\n+      cachedRunScript.addAll(new DefaultKsqlParser().parse(String.join(\"\", lines)));\n+    } catch (IOException e) {\n+      throw new KsqlException(e);", "originalCommit": "b309a31fb5c42eca8addb4cf2039eb5408a05d99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQyNTYyNw==", "url": "https://github.com/confluentinc/ksql/pull/6125#discussion_r481425627", "bodyText": "", "author": "agavra", "createdAt": "2020-09-01T20:55:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExNDQ1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQyOTE1OQ==", "url": "https://github.com/confluentinc/ksql/pull/6125#discussion_r481429159", "bodyText": "The top level exception will always be a KsqlTestException so it doesn't really matter. But I'll change it :)", "author": "agavra", "createdAt": "2020-09-01T21:01:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExNDQ1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExNzk1OQ==", "url": "https://github.com/confluentinc/ksql/pull/6125#discussion_r481117959", "bodyText": "Probably want to catch a parsing error here and wrap it in something that makes it clear the parsing error is in the script and include the path of the script.", "author": "big-andy-coates", "createdAt": "2020-09-01T12:59:06Z", "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/parser/SqlTestReader.java", "diffHunk": "@@ -155,4 +171,21 @@ public TestStatement next() {\n     throw new IllegalStateException(\"Unexpected parse tree for statement \" + testStatement);\n   }\n \n+  private TestStatement handleRunScript() {\n+    final String script = ParserUtil.unquote(testStatement.runScript().STRING().getText(), \"'\");\n+    try {\n+      final List<String> lines = Files.readAllLines(\n+          Paths.get(ParserUtil.getIdentifierText(script)));\n+      cachedRunScript.addAll(new DefaultKsqlParser().parse(String.join(\"\", lines)));\n+    } catch (IOException e) {", "originalCommit": "b309a31fb5c42eca8addb4cf2039eb5408a05d99", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e7063fed46e92543d4d7dcbbb76a05c764a51ca9", "url": "https://github.com/confluentinc/ksql/commit/e7063fed46e92543d4d7dcbbb76a05c764a51ca9", "message": "chore: address andys comments", "committedDate": "2020-09-01T22:13:42Z", "type": "commit"}, {"oid": "743be22b5bc63cfef9ac162e035f03980469065a", "url": "https://github.com/confluentinc/ksql/commit/743be22b5bc63cfef9ac162e035f03980469065a", "message": "fix: findbugs", "committedDate": "2020-09-01T23:33:25Z", "type": "commit"}]}