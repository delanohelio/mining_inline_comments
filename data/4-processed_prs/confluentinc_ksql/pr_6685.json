{"pr_number": 6685, "pr_title": "feat: added NULLIF function (#6567)", "pr_createdAt": "2020-11-27T09:09:43Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6685", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxMjY1OQ==", "url": "https://github.com/confluentinc/ksql/pull/6685#discussion_r532712659", "bodyText": "Could you add tests for the  NULLIF(COL0, 10) AS A, NULLIF(COL1, 'x') AS B cases?", "author": "spena", "createdAt": "2020-11-30T16:08:42Z", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/null.json", "diffHunk": "@@ -259,6 +259,29 @@\n         \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n         \"message\": \"Invalid comparison expression 'null' in join '(L.A = null)'. Each side of the join comparision must contain references from exactly one source.\"\n       }\n+    },\n+    {\n+      \"name\": \"null if\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (COL0 INT KEY, COL1 STRING, COL2 ARRAY<INT>) WITH (kafka_topic='test_topic', value_format='JSON');\",\n+        \"CREATE STREAM OUTPUT AS SELECT COL0, NULLIF(COL0, 10) AS A, NULLIF(COL1, 'x') AS B, NULLIF(COL2, ARRAY[1, 2, 3]) AS C FROM INPUT;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"test_topic\", \"key\": 1, \"value\": {\"COL1\": \"not null\", \"COL2\": [1, 2, 3]}},\n+        {\"topic\": \"test_topic\", \"key\": null, \"value\": {}},\n+        {\"topic\": \"test_topic\", \"key\": null, \"value\": null},\n+        {\"topic\": \"test_topic\", \"key\": 2, \"value\": {\"COL1\": \"not null\", \"COL2\": [4, 5, 6]}},\n+        {\"topic\": \"test_topic\", \"key\": 3, \"value\": {\"COL1\": \"not null\", \"COL2\": []}},\n+        {\"topic\": \"test_topic\", \"key\": 4, \"value\": {\"COL1\": null, \"COL2\": [7,8]}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 1, \"value\": {\"A\": 1, \"B\": \"not null\", \"C\": null}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"A\": null, \"B\": null, \"C\": null}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": null},\n+        {\"topic\": \"OUTPUT\", \"key\": 2, \"value\": {\"A\": 2, \"B\": \"not null\", \"C\": [4, 5, 6]}},\n+        {\"topic\": \"OUTPUT\", \"key\": 3, \"value\": {\"A\": 3, \"B\": \"not null\", \"C\": []}},\n+        {\"topic\": \"OUTPUT\", \"key\": 4, \"value\": {\"A\": 4, \"B\": null, \"C\": [7,8]}}", "originalCommit": "8429d40f3f68e3b14d7692547cd7f4215541440a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEzNTgxOQ==", "url": "https://github.com/confluentinc/ksql/pull/6685#discussion_r533135819", "bodyText": "ok. will do it.", "author": "fjbecerra", "createdAt": "2020-12-01T07:58:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxMjY1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA3NTM2Mw==", "url": "https://github.com/confluentinc/ksql/pull/6685#discussion_r538075363", "bodyText": "@spena, added more tests", "author": "fjbecerra", "createdAt": "2020-12-08T06:46:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxMjY1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxNDc2MA==", "url": "https://github.com/confluentinc/ksql/pull/6685#discussion_r532714760", "bodyText": "Do these parameters support any expression like IFNULL? If so, is it better to use NULLIF(expr1, expr2) instead?", "author": "spena", "createdAt": "2020-11-30T16:11:19Z", "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "diffHunk": "@@ -1003,6 +1003,19 @@ If the provided `expression` is NULL, returns `altValue`, otherwise, returns `ex\n Where the parameter type is a complex type, for example `ARRAY` or `STRUCT`, the contents of the\n complex type are not inspected.\n \n+### `NULLIF`\n+\n+Since: -\n+\n+```sql\n+NULLIF(parameter1, parameter2)", "originalCommit": "8429d40f3f68e3b14d7692547cd7f4215541440a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExODUyNg==", "url": "https://github.com/confluentinc/ksql/pull/6685#discussion_r533118526", "bodyText": "Yes it does, will do it.", "author": "fjbecerra", "createdAt": "2020-12-01T07:19:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxNDc2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA3NTg0NA==", "url": "https://github.com/confluentinc/ksql/pull/6685#discussion_r538075844", "bodyText": "Changed arguments name as suggested", "author": "fjbecerra", "createdAt": "2020-12-08T06:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxNDc2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcyMDkxNQ==", "url": "https://github.com/confluentinc/ksql/pull/6685#discussion_r532720915", "bodyText": "Could you add a test when value2 is null and value1 is not null?\nCould you add a test to verify case-sensitive comparison? nullif(\"a\", \"A\")", "author": "spena", "createdAt": "2020-11-30T16:19:26Z", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/function/udf/nulls/NullIfTest.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package io.confluent.ksql.function.udf.nulls;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+public class NullIfTest {\n+\n+  private NullIf udf;\n+\n+  @Before\n+  public void setUp() {\n+    udf = new NullIf();\n+  }\n+\n+  @Test\n+  public void shouldReturnNullIfBothValuesAreNulls() {\n+    assertThat(udf.nullIf(null, null), is(nullValue()));\n+  }\n+\n+  @Test\n+  public void shouldReturnNullIfValue1IsNull() {\n+    assertThat(udf.nullIf(null, \"a\"), is(nullValue()));\n+  }\n+\n+  @Test\n+  public void shouldReturnNullIfBothValuesAreEqual() {\n+    assertThat(udf.nullIf(\"a\", \"a\"), is(nullValue()));\n+  }\n+\n+  @Test\n+  public void shouldReturnValue1IfBothValuesAreNonEqual() {\n+    assertThat(udf.nullIf(\"a\", \"b\"), is(\"a\"));\n+  }", "originalCommit": "8429d40f3f68e3b14d7692547cd7f4215541440a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA3NjEzMQ==", "url": "https://github.com/confluentinc/ksql/pull/6685#discussion_r538076131", "bodyText": "Added more tests", "author": "fjbecerra", "createdAt": "2020-12-08T06:48:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcyMDkxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3NTIwOQ==", "url": "https://github.com/confluentinc/ksql/pull/6685#discussion_r532775209", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the provided `parameter1` is equal to `parameter2`, returns NULL, otherwise, returns `parameter1`.\n          \n          \n            \n            Returns NULL if `parameter1` is equal to `parameter2`; otherwise, returns `parameter1`.", "author": "JimGalasyn", "createdAt": "2020-11-30T17:34:16Z", "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "diffHunk": "@@ -1003,6 +1003,19 @@ If the provided `expression` is NULL, returns `altValue`, otherwise, returns `ex\n Where the parameter type is a complex type, for example `ARRAY` or `STRUCT`, the contents of the\n complex type are not inspected.\n \n+### `NULLIF`\n+\n+Since: -\n+\n+```sql\n+NULLIF(parameter1, parameter2)\n+```\n+\n+If the provided `parameter1` is equal to `parameter2`, returns NULL, otherwise, returns `parameter1`.", "originalCommit": "8429d40f3f68e3b14d7692547cd7f4215541440a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3NTY2Mg==", "url": "https://github.com/confluentinc/ksql/pull/6685#discussion_r532775662", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Where the parameter type is a complex type, for example `ARRAY` or `STRUCT`, the contents of the\n          \n          \n            \n            If the parameter type is a complex type, for example, `ARRAY` or `STRUCT`, the contents of the", "author": "JimGalasyn", "createdAt": "2020-11-30T17:34:53Z", "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "diffHunk": "@@ -1003,6 +1003,19 @@ If the provided `expression` is NULL, returns `altValue`, otherwise, returns `ex\n Where the parameter type is a complex type, for example `ARRAY` or `STRUCT`, the contents of the\n complex type are not inspected.\n \n+### `NULLIF`\n+\n+Since: -\n+\n+```sql\n+NULLIF(parameter1, parameter2)\n+```\n+\n+If the provided `parameter1` is equal to `parameter2`, returns NULL, otherwise, returns `parameter1`.\n+\n+Where the parameter type is a complex type, for example `ARRAY` or `STRUCT`, the contents of the", "originalCommit": "8429d40f3f68e3b14d7692547cd7f4215541440a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "97d48f5e8cf37f40c4d3f97c6b9e5bc0ed00ce21", "url": "https://github.com/confluentinc/ksql/commit/97d48f5e8cf37f40c4d3f97c6b9e5bc0ed00ce21", "message": "feat: added NULLIF function (#6567)", "committedDate": "2020-12-02T08:00:44Z", "type": "forcePushed"}, {"oid": "d5e35c154336c5d66e90a8f0bf5ddd607c51a8ed", "url": "https://github.com/confluentinc/ksql/commit/d5e35c154336c5d66e90a8f0bf5ddd607c51a8ed", "message": "feat: added NULLIF function (#6567)", "committedDate": "2021-05-06T06:06:26Z", "type": "commit"}, {"oid": "d5e35c154336c5d66e90a8f0bf5ddd607c51a8ed", "url": "https://github.com/confluentinc/ksql/commit/d5e35c154336c5d66e90a8f0bf5ddd607c51a8ed", "message": "feat: added NULLIF function (#6567)", "committedDate": "2021-05-06T06:06:26Z", "type": "forcePushed"}]}