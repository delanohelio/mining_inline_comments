{"pr_number": 6432, "pr_title": "chore: qtt coverage for avro primitive keys", "pr_createdAt": "2020-10-13T23:19:31Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6432", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTI3Ng==", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505159276", "bodyText": "Is there a purpose to including this value schema here, given that the test does not use value inference? If we want to test that this value schema is ignored in favor of the schema that's explicitly supplied in the statement, we should update this schema to be different. If not, can we remove this in order to clean up the tests?\nOr does the QTT framework require that it's present for Avro types, even if the schema inference isn't used...?", "author": "vcrfxia", "createdAt": "2020-10-15T04:38:47Z", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/avro.json", "diffHunk": "@@ -667,6 +667,33 @@\n         {\"topic\": \"OUTPUT\", \"value\": null}\n       ]\n     },\n+    {\n+      \"name\": \"BOOLEAN - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"boolean\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},", "originalCommit": "c045e7d5617311a8a400ae3af94f2e8b1dfd55d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYyMDMzMg==", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505620332", "bodyText": "I don't think it's necessary - I can add separate tests to make sure that it's respected if the schema differs.", "author": "agavra", "createdAt": "2020-10-15T15:07:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY0NzI3NQ==", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505647275", "bodyText": "OK - I figured out what's going on and I'll fix it in a follow-up PR. We generate the topic information from the CT/CS statement if there is no topic node in the QTT. The problem is that if we have either the key or the value schema we need both because otherwise it won't generate the topic from the CT statement and use the one supplied (and we get a 404 when looking up the schema in SR). The fix isn't necessarily straightforward, so for now whenever we are using inference I'll just supply the key and value schema.", "author": "agavra", "createdAt": "2020-10-15T15:43:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1NDI1OA==", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505654258", "bodyText": "#6441 (comment)", "author": "agavra", "createdAt": "2020-10-15T15:52:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY4NDAyOQ==", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505684029", "bodyText": "Thanks for investigating! Agreed we shouldn't block this PR.", "author": "vcrfxia", "createdAt": "2020-10-15T16:36:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTI3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTM4Ng==", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505159386", "bodyText": "Same question about whether this key schema needs to be provided, given that there is no key inference in this test.", "author": "vcrfxia", "createdAt": "2020-10-15T04:39:14Z", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/avro.json", "diffHunk": "@@ -696,6 +723,340 @@\n         {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n       ]\n     },\n+    {\n+      \"name\": \"INT - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"int\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 10, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": 12, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 10, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": 12, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"BIGINT - key - no inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K BIGINT KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"long\"},", "originalCommit": "c045e7d5617311a8a400ae3af94f2e8b1dfd55d2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTQ1Mg==", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505159452", "bodyText": "nit: unused import.", "author": "vcrfxia", "createdAt": "2020-10-15T04:39:28Z", "path": "ksqldb-functional-tests/src/test/java/io/confluent/ksql/test/tools/RecordTest.java", "diffHunk": "@@ -19,6 +19,7 @@\n import static org.hamcrest.CoreMatchers.instanceOf;\n import static org.hamcrest.MatcherAssert.assertThat;\n \n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;", "originalCommit": "c045e7d5617311a8a400ae3af94f2e8b1dfd55d2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTQ2NQ==", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505159465", "bodyText": "Is this different from TextNode.valueOf(\"k1\")? Curious about the inconsistency between the key and value nodes.", "author": "vcrfxia", "createdAt": "2020-10-15T04:39:31Z", "path": "ksqldb-functional-tests/src/test/java/io/confluent/ksql/test/tools/TestExecutorTest.java", "diffHunk": "@@ -414,9 +415,9 @@ public void shouldPassOnExpectedOutput() {\n     final ProducerRecord<byte[], byte[]> rec1 = producerRecord(sinkTopic, 123456789L, \"k2\", \"v2\");\n     when(kafkaService.readRecords(SINK_TOPIC_NAME)).thenReturn(ImmutableList.of(rec0, rec1));\n \n-    final Record expected_0 = new Record(SINK_TOPIC_NAME, \"k1\", \"v1\", TextNode.valueOf(\"v1\"),\n+    final Record expected_0 = new Record(SINK_TOPIC_NAME, \"k1\", JsonNodeFactory.instance.textNode(\"k1\"), \"v1\", TextNode.valueOf(\"v1\"),", "originalCommit": "c045e7d5617311a8a400ae3af94f2e8b1dfd55d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYxOTEwMg==", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505619102", "bodyText": "\ud83d\ude44 to be honest, I've just always used JsonNodeFactory to create the nodes (I didn't even notice that they were using TextNode here). I don't think there's a difference:\n    // From JsonNodeFactory\n    public TextNode textNode(String text) { return TextNode.valueOf(text); }", "author": "agavra", "createdAt": "2020-10-15T15:05:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTQ2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTY3OQ==", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505159679", "bodyText": "Whoops, this should be renamed to ROWKEY with the change in #6436. You should merge first and I'll update the test in my PR accordingly :)", "author": "vcrfxia", "createdAt": "2020-10-15T04:40:25Z", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/avro.json", "diffHunk": "@@ -696,6 +723,340 @@\n         {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n       ]\n     },\n+    {\n+      \"name\": \"INT - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"int\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 10, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": 12, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 10, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": 12, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"BIGINT - key - no inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K BIGINT KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"long\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 998877665544332211, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 998877665544332211, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"BIGINT - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"long\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 998877665544332211, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 998877665544332211, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"DOUBLE - key - no inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K DOUBLE KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"double\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 654.321, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 654.321, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"DOUBLE - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"double\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 654.321, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 654.321, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"STRING - key - no inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K VARCHAR KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"string\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"foo\", \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"foo\", \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"STRING - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"string\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"foo\", \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"foo\", \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"DECIMAL - key - no inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K DECIMAL(4,2) KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\n+            \"type\": \"bytes\",\n+            \"logicalType\": \"decimal\",\n+            \"precision\": 4,\n+            \"scale\": 2\n+          },\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 65.21, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 65.21, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"DECIMAL - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\n+            \"type\": \"bytes\",\n+            \"logicalType\": \"decimal\",\n+            \"precision\": 4,\n+            \"scale\": 2\n+          },\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 65.21, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 65.21, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"ARRAY - key - no inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K ARRAY<VARCHAR> KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\n+            \"type\": \"array\",\n+            \"items\": \"string\"\n+          },\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n+        \"message\": \"Unsupported key schema: [`K` ARRAY<STRING> KEY]\"\n+      }\n+    },\n+    {\n+      \"name\": \"ARRAY - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\n+            \"type\": \"array\",\n+            \"items\": \"string\"\n+          },\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n+        \"message\": \"Unsupported key schema: [`ROWVAL` ARRAY<STRING> KEY]\"", "originalCommit": "c045e7d5617311a8a400ae3af94f2e8b1dfd55d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYxNzc2Nw==", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505617767", "bodyText": "\ud83d\udcaf that's good haha", "author": "agavra", "createdAt": "2020-10-15T15:04:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTY3OQ=="}], "type": "inlineReview"}, {"oid": "0b82a62d65400c9fc3f2c57ac8e0052d2d3d438c", "url": "https://github.com/confluentinc/ksql/commit/0b82a62d65400c9fc3f2c57ac8e0052d2d3d438c", "message": "chore: qtt coverage for avro primitive keys", "committedDate": "2020-10-15T15:44:55Z", "type": "commit"}, {"oid": "3f0b10acd678fa017d1c86f974ca94852161b151", "url": "https://github.com/confluentinc/ksql/commit/3f0b10acd678fa017d1c86f974ca94852161b151", "message": "chore: fix checkstyle", "committedDate": "2020-10-15T15:44:55Z", "type": "commit"}, {"oid": "f70f6b70fbc64d64af59cc0f2aa4504a7558f381", "url": "https://github.com/confluentinc/ksql/commit/f70f6b70fbc64d64af59cc0f2aa4504a7558f381", "message": "test: fix tests", "committedDate": "2020-10-15T15:44:55Z", "type": "commit"}, {"oid": "eca777c1544c2a2fbb254d58b2e742f154236202", "url": "https://github.com/confluentinc/ksql/commit/eca777c1544c2a2fbb254d58b2e742f154236202", "message": "chore: address pr comments", "committedDate": "2020-10-15T15:48:55Z", "type": "commit"}, {"oid": "eca777c1544c2a2fbb254d58b2e742f154236202", "url": "https://github.com/confluentinc/ksql/commit/eca777c1544c2a2fbb254d58b2e742f154236202", "message": "chore: address pr comments", "committedDate": "2020-10-15T15:48:55Z", "type": "forcePushed"}]}