{"pr_number": 4782, "pr_title": "feat: Implement latest_by_offset() UDAF", "pr_createdAt": "2020-03-16T17:56:26Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4782", "timeline": [{"oid": "e2ce900fb492443919326bb766ba90e00c347397", "url": "https://github.com/confluentinc/ksql/commit/e2ce900fb492443919326bb766ba90e00c347397", "message": "create latest_by_offset() udaf", "committedDate": "2020-03-16T17:58:21Z", "type": "commit"}, {"oid": "e2ce900fb492443919326bb766ba90e00c347397", "url": "https://github.com/confluentinc/ksql/commit/e2ce900fb492443919326bb766ba90e00c347397", "message": "create latest_by_offset() udaf", "committedDate": "2020-03-16T17:58:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIzNTA0MQ==", "url": "https://github.com/confluentinc/ksql/pull/4782#discussion_r393235041", "bodyText": "Can we use different input values for the two different keys please?  One could imagine this test passing even if the code didn't do things per-key...", "author": "big-andy-coates", "createdAt": "2020-03-16T18:36:54Z", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/latest-offset-udaf.json", "diffHunk": "@@ -0,0 +1,41 @@\n+{\n+  \"comments\": [\n+    \"Tests covering the use of the LATEST_BY_OFFSET aggregate function\"\n+  ],\n+  \"tests\": [\n+    {\n+      \"name\": \"latest by offset\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ROWKEY BIGINT KEY, ID BIGINT, F0 INT, F1 BIGINT, F2 DOUBLE, F3 BOOLEAN, F4 STRING) WITH (kafka_topic='test_topic', value_format='JSON', key='ID');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, LATEST_BY_OFFSET(F0) AS L0, LATEST_BY_OFFSET(F1) AS L1, LATEST_BY_OFFSET(F2) AS L2, LATEST_BY_OFFSET(F3) AS L3, LATEST_BY_OFFSET(F4) AS L4 FROM INPUT GROUP BY ID;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"test_topic\", \"key\": 0, \"value\": {\"ID\": 0, \"F0\": 12, \"F1\": 1000, \"F2\": 1.23, \"F3\": true, \"F4\": \"foo\"}},\n+        {\"topic\": \"test_topic\", \"key\": 1, \"value\": {\"ID\": 1, \"F0\": 12, \"F1\": 1000, \"F2\": 1.23, \"F3\": true, \"F4\": \"foo\"}},\n+        {\"topic\": \"test_topic\", \"key\": 0, \"value\": {\"ID\": 0, \"F0\": 21, \"F1\": 2000, \"F2\": 2.23, \"F3\": false, \"F4\": \"bar\"}},\n+        {\"topic\": \"test_topic\", \"key\": 1, \"value\": {\"ID\": 1, \"F0\": 21, \"F1\": 2000, \"F2\": 2.23, \"F3\": false, \"F4\": \"bar\"}}\n+      ],", "originalCommit": "e2ce900fb492443919326bb766ba90e00c347397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ4MDc2OQ==", "url": "https://github.com/confluentinc/ksql/pull/4782#discussion_r393480769", "bodyText": "Ack", "author": "purplefox", "createdAt": "2020-03-17T07:13:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIzNTA0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIzNjE0Ng==", "url": "https://github.com/confluentinc/ksql/pull/4782#discussion_r393236146", "bodyText": "why have all these lines changed?", "author": "big-andy-coates", "createdAt": "2020-03-16T18:38:54Z", "path": "docs/developer-guide/syntax-reference.rst", "diffHunk": "@@ -2093,70 +2093,74 @@ convention is followed.\n Aggregate functions\n ===================\n \n-+------------------------+---------------------------+------------+---------------------------------------------------------------------+\n-| Function               | Example                   | Input Type | Description                                                         |\n-+========================+===========================+============+=====================================================================+\n-| COLLECT_LIST           | ``COLLECT_LIST(col1)``    | Stream,    | Return an array containing all the values of ``col1`` from each     |\n-|                        |                           | Table      | input row (for the specified grouping and time window, if any).     |\n-|                        |                           |            | Currently only works for simple types (not Map, Array, or Struct).  |\n-|                        |                           |            | This version limits the size of the result Array to a maximum of    |\n-|                        |                           |            | 1000 entries and any values beyond this limit are silently ignored. |\n-|                        |                           |            | When using with a window type of ``session``, it can sometimes      |\n-|                        |                           |            | happen that two session windows get merged together into one when a |\n-|                        |                           |            | late-arriving record with a timestamp between the two windows is    |\n-|                        |                           |            | processed. In this case the 1000 record limit is calculated by      |\n-|                        |                           |            | first considering all the records from the first window, then the   |\n-|                        |                           |            | late-arriving record, then the records from the second window in    |\n-|                        |                           |            | the order they were originally processed.                           |\n-+------------------------+---------------------------+------------+---------------------------------------------------------------------+\n-| COLLECT_SET            | ``COLLECT_SET(col1)``     | Stream     | Return an array containing the distinct values of ``col1`` from     |\n-|                        |                           |            | each input row (for the specified grouping and time window, if any).|\n-|                        |                           |            | Currently only works for simple types (not Map, Array, or Struct).  |\n-|                        |                           |            | This version limits the size of the result Array to a maximum of    |\n-|                        |                           |            | 1000 entries and any values beyond this limit are silently ignored. |\n-|                        |                           |            | When using with a window type of ``session``, it can sometimes      |\n-|                        |                           |            | happen that two session windows get merged together into one when a |\n-|                        |                           |            | late-arriving record with a timestamp between the two windows is    |\n-|                        |                           |            | processed. In this case the 1000 record limit is calculated by      |\n-|                        |                           |            | first considering all the records from the first window, then the   |\n-|                        |                           |            | late-arriving record, then the records from the second window in    |\n-|                        |                           |            | the order they were originally processed.                           |\n-+------------------------+---------------------------+------------+---------------------------------------------------------------------+\n-| COUNT                  | ``COUNT(col1)``,          | Stream,    | Count the number of rows. When ``col1`` is specified, the count     |\n-|                        | ``COUNT(*)``              | Table      | returned will be the number of rows where ``col1`` is non-null.     |\n-|                        |                           |            | When ``*`` is specified, the count returned will be the total       |\n-|                        |                           |            | number of rows.                                                     |\n-+------------------------+---------------------------+------------+---------------------------------------------------------------------+\n-| HISTOGRAM              | ``HISTOGRAM(col1)``       | Stream,    | Return a map containing the distinct String values of ``col1``      |\n-|                        |                           | Table      | mapped to the number of times each one occurs for the given window. |\n-|                        |                           |            | This version limits the number of distinct values which can be      |\n-|                        |                           |            | counted to 1000, beyond which any additional entries are ignored.   |\n-|                        |                           |            | When using with a window type of ``session``, it can sometimes      |\n-|                        |                           |            | happen that two session windows get merged together into one when a |\n-|                        |                           |            | late-arriving record with a timestamp between the two windows is    |\n-|                        |                           |            | processed. In this case the 1000 record limit is calculated by      |\n-|                        |                           |            | first considering all the records from the first window, then the   |\n-|                        |                           |            | late-arriving record, then the records from the second window in    |\n-|                        |                           |            | the order they were originally processed.                           |\n-+------------------------+---------------------------+------------+---------------------------------------------------------------------+\n-| AVERAGE                | ``AVG(col1)``             | Stream,    | Return the average value for a given column.                        |\n-|                        |                           | Table      | Note: rows where ``col1`` is null are ignored.                      |\n-+------------------------+---------------------------+------------+---------------------------------------------------------------------+\n-| MAX                    | ``MAX(col1)``             | Stream     | Return the maximum value for a given column and window.             |\n-|                        |                           |            | Note: rows where ``col1`` is null will be ignored.                  |\n-+------------------------+---------------------------+------------+---------------------------------------------------------------------+\n-| MIN                    | ``MIN(col1)``             | Stream     | Return the minimum value for a given column and window.             |\n-|                        |                           |            | Note: rows where ``col1`` is null will be ignored.                  |\n-+------------------------+---------------------------+------------+---------------------------------------------------------------------+\n-| SUM                    | ``SUM(col1)``             | Stream,    | Sums the column values                                              |\n-|                        |                           | Table      | Note: rows where ``col1`` is null will be ignored.                  |\n-+------------------------+---------------------------+------------+---------------------------------------------------------------------+\n-| TOPK                   | ``TOPK(col1, k)``         | Stream     | Return the Top *K* values for the given column and window           |\n-|                        |                           |            | Note: rows where ``col1`` is null will be ignored.                  |\n-+------------------------+---------------------------+------------+---------------------------------------------------------------------+\n-| TOPKDISTINCT           | ``TOPKDISTINCT(col1, k)`` | Stream     | Return the distinct Top *K* values for the given column and window  |\n-|                        |                           |            | Note: rows where ``col1`` is null will be ignored.                  |\n-+------------------------+---------------------------+------------+---------------------------------------------------------------------+\n++------------------------+----------------------------+------------+---------------------------------------------------------------------+\n+| Function               | Example                    | Input Type | Description                                                         |\n++========================+============================+============+=====================================================================+\n+| COLLECT_LIST           | ``COLLECT_LIST(col1)``     | Stream,    | Return an array containing all the values of ``col1`` from each     |\n+|                        |                            | Table      | input row (for the specified grouping and time window, if any).     |\n+|                        |                            |            | Currently only works for simple types (not Map, Array, or Struct).  |\n+|                        |                            |            | This version limits the size of the result Array to a maximum of    |\n+|                        |                            |            | 1000 entries and any values beyond this limit are silently ignored. |\n+|                        |                            |            | When using with a window type of ``session``, it can sometimes      |\n+|                        |                            |            | happen that two session windows get merged together into one when a |\n+|                        |                            |            | late-arriving record with a timestamp between the two windows is    |\n+|                        |                            |            | processed. In this case the 1000 record limit is calculated by      |\n+|                        |                            |            | first considering all the records from the first window, then the   |\n+|                        |                            |            | late-arriving record, then the records from the second window in    |\n+|                        |                            |            | the order they were originally processed.                           |\n++------------------------+----------------------------+------------+---------------------------------------------------------------------+\n+| COLLECT_SET            | ``COLLECT_SET(col1)``      | Stream     | Return an array containing the distinct values of ``col1`` from     |", "originalCommit": "e2ce900fb492443919326bb766ba90e00c347397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ1ODE0MA==", "url": "https://github.com/confluentinc/ksql/pull/4782#discussion_r393458140", "bodyText": "I needed to push everything to the right to fit the words in on the new entry", "author": "purplefox", "createdAt": "2020-03-17T05:54:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIzNjE0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ4MDk2MQ==", "url": "https://github.com/confluentinc/ksql/pull/4782#discussion_r393480961", "bodyText": "This is moot as I've reverted it as old docs are deprecated", "author": "purplefox", "createdAt": "2020-03-17T07:13:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIzNjE0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxMjEzMg==", "url": "https://github.com/confluentinc/ksql/pull/4782#discussion_r393312132", "bodyText": "I know it's confusing, but the .rst docs are deprecated for new content, so if you could add this change to the Aggregate Functions topic in the markdown docs, that would be great.", "author": "JimGalasyn", "createdAt": "2020-03-16T21:10:07Z", "path": "docs/developer-guide/syntax-reference.rst", "diffHunk": "@@ -2093,70 +2093,74 @@ convention is followed.\n Aggregate functions\n ===================\n \n-+------------------------+---------------------------+------------+---------------------------------------------------------------------+\n-| Function               | Example                   | Input Type | Description                                                         |\n-+========================+===========================+============+=====================================================================+\n-| COLLECT_LIST           | ``COLLECT_LIST(col1)``    | Stream,    | Return an array containing all the values of ``col1`` from each     |\n-|                        |                           | Table      | input row (for the specified grouping and time window, if any).     |\n-|                        |                           |            | Currently only works for simple types (not Map, Array, or Struct).  |\n-|                        |                           |            | This version limits the size of the result Array to a maximum of    |\n-|                        |                           |            | 1000 entries and any values beyond this limit are silently ignored. |\n-|                        |                           |            | When using with a window type of ``session``, it can sometimes      |\n-|                        |                           |            | happen that two session windows get merged together into one when a |\n-|                        |                           |            | late-arriving record with a timestamp between the two windows is    |\n-|                        |                           |            | processed. In this case the 1000 record limit is calculated by      |\n-|                        |                           |            | first considering all the records from the first window, then the   |\n-|                        |                           |            | late-arriving record, then the records from the second window in    |\n-|                        |                           |            | the order they were originally processed.                           |\n-+------------------------+---------------------------+------------+---------------------------------------------------------------------+\n-| COLLECT_SET            | ``COLLECT_SET(col1)``     | Stream     | Return an array containing the distinct values of ``col1`` from     |\n-|                        |                           |            | each input row (for the specified grouping and time window, if any).|\n-|                        |                           |            | Currently only works for simple types (not Map, Array, or Struct).  |\n-|                        |                           |            | This version limits the size of the result Array to a maximum of    |\n-|                        |                           |            | 1000 entries and any values beyond this limit are silently ignored. |\n-|                        |                           |            | When using with a window type of ``session``, it can sometimes      |\n-|                        |                           |            | happen that two session windows get merged together into one when a |\n-|                        |                           |            | late-arriving record with a timestamp between the two windows is    |\n-|                        |                           |            | processed. In this case the 1000 record limit is calculated by      |\n-|                        |                           |            | first considering all the records from the first window, then the   |\n-|                        |                           |            | late-arriving record, then the records from the second window in    |\n-|                        |                           |            | the order they were originally processed.                           |\n-+------------------------+---------------------------+------------+---------------------------------------------------------------------+\n-| COUNT                  | ``COUNT(col1)``,          | Stream,    | Count the number of rows. When ``col1`` is specified, the count     |\n-|                        | ``COUNT(*)``              | Table      | returned will be the number of rows where ``col1`` is non-null.     |\n-|                        |                           |            | When ``*`` is specified, the count returned will be the total       |\n-|                        |                           |            | number of rows.                                                     |\n-+------------------------+---------------------------+------------+---------------------------------------------------------------------+\n-| HISTOGRAM              | ``HISTOGRAM(col1)``       | Stream,    | Return a map containing the distinct String values of ``col1``      |\n-|                        |                           | Table      | mapped to the number of times each one occurs for the given window. |\n-|                        |                           |            | This version limits the number of distinct values which can be      |\n-|                        |                           |            | counted to 1000, beyond which any additional entries are ignored.   |\n-|                        |                           |            | When using with a window type of ``session``, it can sometimes      |\n-|                        |                           |            | happen that two session windows get merged together into one when a |\n-|                        |                           |            | late-arriving record with a timestamp between the two windows is    |\n-|                        |                           |            | processed. In this case the 1000 record limit is calculated by      |\n-|                        |                           |            | first considering all the records from the first window, then the   |\n-|                        |                           |            | late-arriving record, then the records from the second window in    |\n-|                        |                           |            | the order they were originally processed.                           |\n-+------------------------+---------------------------+------------+---------------------------------------------------------------------+\n-| AVERAGE                | ``AVG(col1)``             | Stream,    | Return the average value for a given column.                        |\n-|                        |                           | Table      | Note: rows where ``col1`` is null are ignored.                      |\n-+------------------------+---------------------------+------------+---------------------------------------------------------------------+\n-| MAX                    | ``MAX(col1)``             | Stream     | Return the maximum value for a given column and window.             |\n-|                        |                           |            | Note: rows where ``col1`` is null will be ignored.                  |\n-+------------------------+---------------------------+------------+---------------------------------------------------------------------+\n-| MIN                    | ``MIN(col1)``             | Stream     | Return the minimum value for a given column and window.             |\n-|                        |                           |            | Note: rows where ``col1`` is null will be ignored.                  |\n-+------------------------+---------------------------+------------+---------------------------------------------------------------------+\n-| SUM                    | ``SUM(col1)``             | Stream,    | Sums the column values                                              |\n-|                        |                           | Table      | Note: rows where ``col1`` is null will be ignored.                  |\n-+------------------------+---------------------------+------------+---------------------------------------------------------------------+\n-| TOPK                   | ``TOPK(col1, k)``         | Stream     | Return the Top *K* values for the given column and window           |\n-|                        |                           |            | Note: rows where ``col1`` is null will be ignored.                  |\n-+------------------------+---------------------------+------------+---------------------------------------------------------------------+\n-| TOPKDISTINCT           | ``TOPKDISTINCT(col1, k)`` | Stream     | Return the distinct Top *K* values for the given column and window  |\n-|                        |                           |            | Note: rows where ``col1`` is null will be ignored.                  |\n-+------------------------+---------------------------+------------+---------------------------------------------------------------------+\n++------------------------+----------------------------+------------+---------------------------------------------------------------------+", "originalCommit": "e2ce900fb492443919326bb766ba90e00c347397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ2NjYxMg==", "url": "https://github.com/confluentinc/ksql/pull/4782#discussion_r393466612", "bodyText": "Ack, I've reverted changes to the old docs and added an entry in the new one", "author": "purplefox", "createdAt": "2020-03-17T06:26:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxMjEzMg=="}], "type": "inlineReview"}, {"oid": "a7d6ac4e82f4fa0bd7da509dfc3e929f3294e649", "url": "https://github.com/confluentinc/ksql/commit/a7d6ac4e82f4fa0bd7da509dfc3e929f3294e649", "message": "revert to old version of docs rst", "committedDate": "2020-03-17T06:19:38Z", "type": "commit"}, {"oid": "721e043f16bffdc617694c2896248ffaee388729", "url": "https://github.com/confluentinc/ksql/commit/721e043f16bffdc617694c2896248ffaee388729", "message": "Added new docs", "committedDate": "2020-03-17T06:20:11Z", "type": "commit"}, {"oid": "244dc6918bbb2b645a9b54ba6ac33702385a1622", "url": "https://github.com/confluentinc/ksql/commit/244dc6918bbb2b645a9b54ba6ac33702385a1622", "message": "Added test plan thingies", "committedDate": "2020-03-17T15:26:31Z", "type": "commit"}]}