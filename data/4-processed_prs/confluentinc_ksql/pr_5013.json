{"pr_number": 5013, "pr_title": "feat: support more advanced suite of LIKE expressions", "pr_createdAt": "2020-04-06T22:46:04Z", "pr_url": "https://github.com/confluentinc/ksql/pull/5013", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNTA2MQ==", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r405025061", "bodyText": "missing issue link?", "author": "big-andy-coates", "createdAt": "2020-04-07T18:31:15Z", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/helpers/LikeEvaluator.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.codegen.helpers;\n+\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.util.KsqlException;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Used in the code generation to evaluate SQL 'LIKE' expressions.\n+ *\n+ * @see io.confluent.ksql.execution.expression.tree.LikePredicate\n+ */\n+public final class LikeEvaluator {\n+\n+  // characters that need to be escaped within regex [] - all other\n+  // characters are escaped using \\Q \\E (see Pattern#quote)\n+  private static final Set<Character> ESCAPED_CHARS = ImmutableSet.of(\n+      '[', ']', '^', '\\\\'\n+  );\n+\n+  private LikeEvaluator() {\n+  }\n+\n+  /**\n+   * @param val       the value to match\n+   * @param pattern   the pattern to match against\n+   *\n+   * @return  whether or not {@code val} matches {@code pattern} given the SQL\n+   *          LIKE definition of matching\n+   */\n+  public static boolean matches(final String val, final String pattern) {\n+    // note that we do not yet support escape characters in the pattern\n+    // see issue", "originalCommit": "f8754fe5ed05dd3d0860adc40210d17c8bdbfd25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0MDc4NQ==", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r405040785", "bodyText": "#5021 will add it", "author": "agavra", "createdAt": "2020-04-07T18:57:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNTA2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNjcwMA==", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r405026700", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    {\"percents one side [X]\",         \"barbarbar\", \"%foo\"},\n          \n          \n            \n                    {\"percents one side [X]\",         \"barfoobar\", \"%foo\"},", "author": "big-andy-coates", "createdAt": "2020-04-07T18:34:02Z", "path": "ksqldb-execution/src/test/java/io/confluent/ksql/execution/codegen/helpers/LikeEvaluatorTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.codegen.helpers;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.*;\n+\n+import java.util.Objects;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+@RunWith(Parameterized.class)\n+public class LikeEvaluatorTest {\n+\n+  private final String name;\n+  private final String val;\n+  private final String pattern;\n+\n+  @Parameters(name = \"{0}\")\n+  public static Object[][] data() {\n+    // name | val | pattern\n+    return new Object[][]{\n+        {\"nothing special\",               \"foo\", \"foo\"},\n+        {\"nothing special [X]\",           \"bar\", \"foo\"},\n+        {\"empty percents\",                \"foo\", \"%foo%\"},\n+        {\"empty percents [X]\",            \"bar\", \"%foo%\"},\n+        {\"percents\",                      \"barfoobaz\", \"%foo%\"},\n+        {\"percents [X]\",                  \"barbarbar\", \"%foo%\"},\n+        {\"percents one side\",             \"barfoo\", \"%foo\"},\n+        {\"percents one side [X]\",         \"barbarbar\", \"%foo\"},", "originalCommit": "f8754fe5ed05dd3d0860adc40210d17c8bdbfd25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNzQ0Mw==", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r405027443", "bodyText": "also, worth adding case for:\n\n% other side and\n% in middle and\nmultiple %s\nescaped %s???? Or do we not support them yet.. (hard to add?)", "author": "big-andy-coates", "createdAt": "2020-04-07T18:35:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNjcwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAzOTg5Ng==", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r405039896", "bodyText": "the middle two are covered by c[a-c]t%[a-e][^abc]%m__w - i'll add tests for the first and last (escaping is done by [%] in MSFT-sql at least and should be supported here as well)", "author": "agavra", "createdAt": "2020-04-07T18:55:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNjcwMA=="}], "type": "inlineReview"}, {"oid": "ac9ad7a5819250f5bf6ec624568e85db4a3d752a", "url": "https://github.com/confluentinc/ksql/commit/ac9ad7a5819250f5bf6ec624568e85db4a3d752a", "message": "chore: add historical test plans", "committedDate": "2020-04-08T18:47:20Z", "type": "forcePushed"}, {"oid": "923c37c7277f136a7dc17f4290d1f98c76092307", "url": "https://github.com/confluentinc/ksql/commit/923c37c7277f136a7dc17f4290d1f98c76092307", "message": "feat: support more complex LIKE expressions", "committedDate": "2020-04-08T18:53:56Z", "type": "forcePushed"}, {"oid": "2a89d7b59f04da82db781241ca870aff5a7915e6", "url": "https://github.com/confluentinc/ksql/commit/2a89d7b59f04da82db781241ca870aff5a7915e6", "message": "feat: support more complex LIKE expressions", "committedDate": "2020-04-08T18:57:20Z", "type": "forcePushed"}, {"oid": "72e60e3c2f78f540016d961a55e36bb0dd545a4a", "url": "https://github.com/confluentinc/ksql/commit/72e60e3c2f78f540016d961a55e36bb0dd545a4a", "message": "chore: functional-tests", "committedDate": "2020-04-08T20:10:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2MzcwNA==", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r406263704", "bodyText": "nit: test should really ensure escape char is not lost...", "author": "big-andy-coates", "createdAt": "2020-04-09T14:53:17Z", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/rewrite/ExpressionTreeRewriterTest.java", "diffHunk": "@@ -467,7 +467,7 @@ public void shouldRewriteLikePredicate() {\n     final Expression rewritten = expressionRewriter.rewrite(parsed, context);\n \n     // Then:\n-    assertThat(rewritten, equalTo(new LikePredicate(parsed.getLocation(), expr1, expr2)));\n+    assertThat(rewritten, equalTo(new LikePredicate(parsed.getLocation(), expr1, expr2, Optional.empty())));", "originalCommit": "72e60e3c2f78f540016d961a55e36bb0dd545a4a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2NTA1Ng==", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r406265056", "bodyText": "nit: can we not remove this if/else by having LikeEval.matches() take Optional<Char> for last param?", "author": "big-andy-coates", "createdAt": "2020-04-09T14:54:51Z", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/SqlToJavaVisitor.java", "diffHunk": "@@ -724,46 +726,23 @@ private String buildSupplierCode(final String typeString, final String code) {\n     @Override\n     public Pair<String, SqlType> visitLikePredicate(final LikePredicate node, final Void context) {\n \n-      // For now we just support simple prefix/suffix cases only.\n-      final String patternString = trimQuotes(process(node.getPattern(), context).getLeft());\n+      final String patternString = process(node.getPattern(), context).getLeft();\n       final String valueString = process(node.getValue(), context).getLeft();\n-      if (patternString.startsWith(\"%\")) {\n-        if (patternString.endsWith(\"%\")) {\n-          return new Pair<>(\n-              \"(\" + valueString + \").contains(\\\"\"\n-                  + patternString.substring(1, patternString.length() - 1)\n-                  + \"\\\")\",\n-              SqlTypes.STRING\n-          );\n-        } else {\n-          return new Pair<>(\n-              \"(\" + valueString + \").endsWith(\\\"\" + patternString.substring(1) + \"\\\")\",\n-              SqlTypes.STRING\n-          );\n-        }\n-      }\n \n-      if (patternString.endsWith(\"%\")) {\n+      if (node.getEscape().isPresent()) {", "originalCommit": "72e60e3c2f78f540016d961a55e36bb0dd545a4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMwMjYwMA==", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r406302600", "bodyText": "somewhat - I'd still need to do:\nLikeEvaluator.matches(... + \"Optional.ofNullable(\" + escape.map(escape -> \"'\" + escape + \"'\").getOrElse(null))\nAnd to be honest I don't think that's any cleaner.\n(this needs to be generated code, I can't pass the optional itself as a string)", "author": "agavra", "createdAt": "2020-04-09T15:49:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2NTA1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI3MDU2MQ==", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r406270561", "bodyText": "IllegalStateException?\nThe syntax allows the escape to be a multi-char string, so this is the error the users going to see if they enter one, right?\nI'd of thought this should be :\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      throw new IllegalStateException(\"Expected single character escape but got: \" + s);\n          \n          \n            \n                      throw new KsqlException(loc.asPrefix() + \"Expected single character escape but got: \" + s);\n          \n      \n    \n    \n  \n\nWhere loc is the NodeLocation.", "author": "big-andy-coates", "createdAt": "2020-04-09T15:02:34Z", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/AstBuilder.java", "diffHunk": "@@ -889,10 +889,21 @@ public Node visitNullPredicate(final SqlBaseParser.NullPredicateContext context)\n \n     @Override\n     public Node visitLike(final SqlBaseParser.LikeContext context) {\n+\n+      final Optional<String> escape = Optional.ofNullable(context.escape)\n+          .map(Token::getText)\n+          .map(s -> ParserUtil.unquote(s, \"'\"));\n+      escape.ifPresent(s -> {\n+        if (s.length() != 1) {\n+          throw new IllegalStateException(\"Expected single character escape but got: \" + s);", "originalCommit": "72e60e3c2f78f540016d961a55e36bb0dd545a4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4MDk3OA==", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r406280978", "bodyText": "ah good catch, originally I had it in the syntax as just a single char (.) but then i changed it to STRING to include the quotes and forgot to change this!", "author": "agavra", "createdAt": "2020-04-09T15:17:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI3MDU2MQ=="}], "type": "inlineReview"}, {"oid": "cf4fc7f5f855b4d9f7d95a243fa153c82c419221", "url": "https://github.com/confluentinc/ksql/commit/cf4fc7f5f855b4d9f7d95a243fa153c82c419221", "message": "feat: support more advanced LIKE expressions", "committedDate": "2020-04-09T15:54:31Z", "type": "commit"}, {"oid": "b2185b27e6518a49fe83e745fd4921c34a165e69", "url": "https://github.com/confluentinc/ksql/commit/b2185b27e6518a49fe83e745fd4921c34a165e69", "message": "chore: functional-tests", "committedDate": "2020-04-09T15:54:31Z", "type": "commit"}, {"oid": "5334289ab6169ce58c045bcadbd95c9e3f36e3f2", "url": "https://github.com/confluentinc/ksql/commit/5334289ab6169ce58c045bcadbd95c9e3f36e3f2", "message": "chore: andys comments", "committedDate": "2020-04-09T15:55:19Z", "type": "commit"}, {"oid": "5334289ab6169ce58c045bcadbd95c9e3f36e3f2", "url": "https://github.com/confluentinc/ksql/commit/5334289ab6169ce58c045bcadbd95c9e3f36e3f2", "message": "chore: andys comments", "committedDate": "2020-04-09T15:55:19Z", "type": "forcePushed"}]}