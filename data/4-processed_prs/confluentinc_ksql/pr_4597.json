{"pr_number": 4597, "pr_title": "fix: added special handling for forwarded pull query request ", "pr_createdAt": "2020-02-20T01:52:42Z", "pr_url": "https://github.com/confluentinc/ksql/pull/4597", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ1Njk2OQ==", "url": "https://github.com/confluentinc/ksql/pull/4597#discussion_r383456969", "bodyText": "should we rework this block.. Seems like we just want to match a propertyName to three prefixes and call three different methods?", "author": "vinothchandar", "createdAt": "2020-02-24T19:08:15Z", "path": "ksql-common/src/main/java/io/confluent/ksql/config/KsqlConfigResolver.java", "diffHunk": "@@ -51,8 +54,12 @@\n   @Override\n   public  Optional<ConfigItem> resolve(final String propertyName, final boolean strict) {\n     if (propertyName.startsWith(KSQL_CONFIG_PROPERTY_PREFIX)\n-        && !propertyName.startsWith(KSQL_STREAMS_PREFIX)) {\n+        && !propertyName.startsWith(KSQL_STREAMS_PREFIX)", "originalCommit": "b5ca4a22c9f854c938ba9607923afcbedd9b770e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg3NTc5NA==", "url": "https://github.com/confluentinc/ksql/pull/4597#discussion_r384875794", "bodyText": "Yeah but KsqlConfig prefix and and streams prefix both start with ksql. But I simplified the other part", "author": "vpapavas", "createdAt": "2020-02-27T02:06:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ1Njk2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU1MTk0NQ==", "url": "https://github.com/confluentinc/ksql/pull/4597#discussion_r383551945", "bodyText": "rename to SKIP_ROUTING to stay consistent with terminologies?", "author": "vinothchandar", "createdAt": "2020-02-24T22:26:34Z", "path": "ksql-common/src/main/java/io/confluent/ksql/util/KsqlRequestConfig.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.util;\n+\n+import java.util.Map;\n+import org.apache.kafka.common.config.AbstractConfig;\n+import org.apache.kafka.common.config.ConfigDef;\n+import org.apache.kafka.common.config.ConfigDef.Type;\n+\n+public class KsqlRequestConfig extends AbstractConfig {\n+\n+  public static final String KSQL_REQUEST_CONFIG_PROPERTY_PREFIX = \"request.ksql.\";\n+\n+  public static final ConfigDef CURRENT_DEF = buildConfigDef();\n+\n+  public static final String KSQL_REQUEST_QUERY_PULL_SKIP_FORWARD =", "originalCommit": "b5ca4a22c9f854c938ba9607923afcbedd9b770e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg3NTg0Nw==", "url": "https://github.com/confluentinc/ksql/pull/4597#discussion_r384875847", "bodyText": "Done", "author": "vpapavas", "createdAt": "2020-02-27T02:07:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU1MTk0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg3NzQwMA==", "url": "https://github.com/confluentinc/ksql/pull/4597#discussion_r384877400", "bodyText": "Actually forwarding is consistent with what we use in PullQueryExecutor no?", "author": "vpapavas", "createdAt": "2020-02-27T02:13:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU1MTk0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU1MjI1NQ==", "url": "https://github.com/confluentinc/ksql/pull/4597#discussion_r383552255", "bodyText": "should these be on their own lines?", "author": "vinothchandar", "createdAt": "2020-02-24T22:27:17Z", "path": "ksql-engine/src/main/java/io/confluent/ksql/engine/KsqlEngine.java", "diffHunk": "@@ -230,7 +235,8 @@ public QueryMetadata executeQuery(\n       final Consumer<GenericRow> rowConsumer\n   ) {\n     final QueryMetadata query = EngineExecutor\n-        .create(primaryContext, serviceContext, statement.getConfig(), statement.getOverrides())\n+        .create(\n+            primaryContext, serviceContext, statement.getConfig(), statement.getClientProperties())", "originalCommit": "b5ca4a22c9f854c938ba9607923afcbedd9b770e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg3NjA5Nw==", "url": "https://github.com/confluentinc/ksql/pull/4597#discussion_r384876097", "bodyText": "Done", "author": "vpapavas", "createdAt": "2020-02-27T02:08:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU1MjI1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYyNDY0Mw==", "url": "https://github.com/confluentinc/ksql/pull/4597#discussion_r383624643", "bodyText": "by clientProperties, do you actually mean requestProperties?  may be we can stick to that?", "author": "vinothchandar", "createdAt": "2020-02-25T02:21:38Z", "path": "ksql-engine/src/main/java/io/confluent/ksql/statement/ConfiguredStatement.java", "diffHunk": "@@ -35,7 +35,9 @@\n \n   private final PreparedStatement<T> statement;\n   @EffectivelyImmutable\n-  private final ImmutableMap<String, Object> overrides;\n+  private final ImmutableMap<String, Object> clientProperties;", "originalCommit": "b5ca4a22c9f854c938ba9607923afcbedd9b770e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg3NjIyNw==", "url": "https://github.com/confluentinc/ksql/pull/4597#discussion_r384876227", "bodyText": "renamed to RequestProperties", "author": "vpapavas", "createdAt": "2020-02-27T02:08:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYyNDY0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYyNDkzMw==", "url": "https://github.com/confluentinc/ksql/pull/4597#discussion_r383624933", "bodyText": "I guess this is what we originally meant by overrides which have to be from KsqlConfig.. If so, then call this configOverrides ... trying to move away from client and server terminology, since it feels a bit broad", "author": "vinothchandar", "createdAt": "2020-02-25T02:22:53Z", "path": "ksql-engine/src/main/java/io/confluent/ksql/statement/ConfiguredStatement.java", "diffHunk": "@@ -35,7 +35,9 @@\n \n   private final PreparedStatement<T> statement;\n   @EffectivelyImmutable\n-  private final ImmutableMap<String, Object> overrides;\n+  private final ImmutableMap<String, Object> clientProperties;\n+  @EffectivelyImmutable\n+  private final ImmutableMap<String, Object> serverProperties;", "originalCommit": "b5ca4a22c9f854c938ba9607923afcbedd9b770e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg3NjI3OA==", "url": "https://github.com/confluentinc/ksql/pull/4597#discussion_r384876278", "bodyText": "Renamed to configOverrides", "author": "vpapavas", "createdAt": "2020-02-27T02:08:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYyNDkzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYyNjA1OA==", "url": "https://github.com/confluentinc/ksql/pull/4597#discussion_r383626058", "bodyText": "why fold the line?", "author": "vinothchandar", "createdAt": "2020-02-25T02:27:27Z", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -783,18 +783,27 @@ static KsqlRestApplication buildApplication(\n   }\n \n   private static RoutingFilterFactory initializeRoutingFilterFactory(\n-      final KsqlConfig ksqlConfig,\n+      final KsqlConfig configWithApplicationServer,\n       final Optional<HeartbeatAgent> heartbeatAgent,\n       final Optional<LagReportingAgent> lagReportingAgent) {\n     return (routingOptions, hosts, active, applicationQueryId, storeName, partition) -> {\n       final ImmutableList.Builder<RoutingFilter> filterBuilder = ImmutableList.builder();\n-      if (!ksqlConfig.getBoolean(KsqlConfig.KSQL_QUERY_PULL_ENABLE_STANDBY_READS)) {\n-        filterBuilder.add(new ActiveHostFilter(active));\n+\n+      // If the lookup is for a forwarded request, apply only MaxLagFilter for localhost\n+      if (routingOptions.skipForwardRequest()) {\n+        MaximumLagFilter.create(\n+            lagReportingAgent, routingOptions, hosts, applicationQueryId, storeName, partition)\n+            .map(filterBuilder::add);\n+      } else {\n+        if (!configWithApplicationServer.getBoolean(\n+            KsqlConfig.KSQL_QUERY_PULL_ENABLE_STANDBY_READS)) {", "originalCommit": "b5ca4a22c9f854c938ba9607923afcbedd9b770e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYyNzAxMQ==", "url": "https://github.com/confluentinc/ksql/pull/4597#discussion_r383627011", "bodyText": "Forwarding attempt failed?", "author": "vinothchandar", "createdAt": "2020-02-25T02:30:34Z", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -317,6 +317,63 @@ TableRowsEntity queryRowsLocally(\n     );\n   }\n \n+  @VisibleForTesting\n+  TableRowsEntity forwardTo(\n+      final KsqlNode owner,\n+      final ConfiguredStatement<Query> statement,\n+      final ServiceContext serviceContext\n+  ) {\n+    // Add skip forward flag to properties\n+    final Map<String, Object> serverProperties = ImmutableMap.of(\n+        KsqlRequestConfig.KSQL_REQUEST_QUERY_PULL_SKIP_FORWARD, true);\n+    final RestResponse<List<StreamedRow>> response = serviceContext\n+        .getKsqlClient()\n+        .makeQueryRequest(\n+            owner.location(),\n+            statement.getStatementText(),\n+            statement.getClientProperties(),\n+            serverProperties\n+        );\n+\n+    if (response.isErroneous()) {\n+      throw new KsqlServerException(\"Proxy attempt failed: \" + response.getErrorMessage());", "originalCommit": "b5ca4a22c9f854c938ba9607923afcbedd9b770e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYyNzA5Mw==", "url": "https://github.com/confluentinc/ksql/pull/4597#discussion_r383627093", "bodyText": "forward call?  lets stick to one term? :)", "author": "vinothchandar", "createdAt": "2020-02-25T02:30:51Z", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -317,6 +317,63 @@ TableRowsEntity queryRowsLocally(\n     );\n   }\n \n+  @VisibleForTesting\n+  TableRowsEntity forwardTo(\n+      final KsqlNode owner,\n+      final ConfiguredStatement<Query> statement,\n+      final ServiceContext serviceContext\n+  ) {\n+    // Add skip forward flag to properties\n+    final Map<String, Object> serverProperties = ImmutableMap.of(\n+        KsqlRequestConfig.KSQL_REQUEST_QUERY_PULL_SKIP_FORWARD, true);\n+    final RestResponse<List<StreamedRow>> response = serviceContext\n+        .getKsqlClient()\n+        .makeQueryRequest(\n+            owner.location(),\n+            statement.getStatementText(),\n+            statement.getClientProperties(),\n+            serverProperties\n+        );\n+\n+    if (response.isErroneous()) {\n+      throw new KsqlServerException(\"Proxy attempt failed: \" + response.getErrorMessage());\n+    }\n+\n+    final List<StreamedRow> streamedRows = response.getResponse();\n+    if (streamedRows.isEmpty()) {\n+      throw new KsqlServerException(\"Invalid empty response from proxy call\");", "originalCommit": "b5ca4a22c9f854c938ba9607923afcbedd9b770e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYyNzI4OA==", "url": "https://github.com/confluentinc/ksql/pull/4597#discussion_r383627288", "bodyText": "since this got moved, it was hard to see what changed. but seems like you are just adding the flag.", "author": "vinothchandar", "createdAt": "2020-02-25T02:31:42Z", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -317,6 +317,63 @@ TableRowsEntity queryRowsLocally(\n     );\n   }\n \n+  @VisibleForTesting\n+  TableRowsEntity forwardTo(", "originalCommit": "b5ca4a22c9f854c938ba9607923afcbedd9b770e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg3ODcxMQ==", "url": "https://github.com/confluentinc/ksql/pull/4597#discussion_r384878711", "bodyText": "Yes, just added the flag", "author": "vpapavas", "createdAt": "2020-02-27T02:18:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYyNzI4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYyODY3Nw==", "url": "https://github.com/confluentinc/ksql/pull/4597#discussion_r383628677", "bodyText": "just 1 debug statement after the if block, that print the flag value, and allHosts?", "author": "vinothchandar", "createdAt": "2020-02-25T02:37:46Z", "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/materialization/ks/KsLocator.java", "diffHunk": "@@ -85,17 +86,26 @@\n \n     final HostInfo activeHost = metadata.getActiveHost();\n     final Set<HostInfo> standByHosts = metadata.getStandbyHosts();\n-    LOG.debug(\"Before filtering: Active host {} , standby hosts {}\", activeHost, standByHosts);\n \n-    final List<KsqlHostInfo> allHosts = Stream.concat(Stream.of(activeHost), standByHosts.stream())\n-        .map(this::asKsqlHost)\n-        .collect(Collectors.toList());\n+    // If the lookup is for a forwarded request, only filter localhost\n+    List<KsqlHostInfo> allHosts = null;\n+    if (routingOptions.skipForwardRequest()) {\n+      LOG.debug(\"Before filtering: Local host {} \", localHost);", "originalCommit": "b5ca4a22c9f854c938ba9607923afcbedd9b770e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg3OTE2OA==", "url": "https://github.com/confluentinc/ksql/pull/4597#discussion_r384879168", "bodyText": "If I do that, I will loose the information of who is active and who is standby", "author": "vpapavas", "createdAt": "2020-02-27T02:19:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYyODY3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYyOTI5Mw==", "url": "https://github.com/confluentinc/ksql/pull/4597#discussion_r383629293", "bodyText": "I assume this will make node.isLocal() return true always", "author": "vinothchandar", "createdAt": "2020-02-25T02:40:23Z", "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/materialization/ks/KsLocator.java", "diffHunk": "@@ -85,17 +86,26 @@\n \n     final HostInfo activeHost = metadata.getActiveHost();\n     final Set<HostInfo> standByHosts = metadata.getStandbyHosts();\n-    LOG.debug(\"Before filtering: Active host {} , standby hosts {}\", activeHost, standByHosts);\n \n-    final List<KsqlHostInfo> allHosts = Stream.concat(Stream.of(activeHost), standByHosts.stream())\n-        .map(this::asKsqlHost)\n-        .collect(Collectors.toList());\n+    // If the lookup is for a forwarded request, only filter localhost\n+    List<KsqlHostInfo> allHosts = null;\n+    if (routingOptions.skipForwardRequest()) {\n+      LOG.debug(\"Before filtering: Local host {} \", localHost);\n+      allHosts = ImmutableList.of(new KsqlHostInfo(localHost.getHost(), localHost.getPort()));", "originalCommit": "b5ca4a22c9f854c938ba9607923afcbedd9b770e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8af5fac42d7bc91a0ec3b6b0f1ce12c4f6bad623", "url": "https://github.com/confluentinc/ksql/commit/8af5fac42d7bc91a0ec3b6b0f1ce12c4f6bad623", "message": "applied vinoth's comments", "committedDate": "2020-02-27T17:16:44Z", "type": "forcePushed"}, {"oid": "736619fb4e2d73078b929bbbe9118984d36796ef", "url": "https://github.com/confluentinc/ksql/commit/736619fb4e2d73078b929bbbe9118984d36796ef", "message": "added request properties to ksql request\n\nfixed tests\n\nminor change\n\napplied vinoth's comments", "committedDate": "2020-02-27T18:21:15Z", "type": "commit"}, {"oid": "9cb97921a1f66ebf8ea8b741fb8d3b549a81c517", "url": "https://github.com/confluentinc/ksql/commit/9cb97921a1f66ebf8ea8b741fb8d3b549a81c517", "message": "rebase", "committedDate": "2020-02-27T19:55:50Z", "type": "commit"}, {"oid": "9cb97921a1f66ebf8ea8b741fb8d3b549a81c517", "url": "https://github.com/confluentinc/ksql/commit/9cb97921a1f66ebf8ea8b741fb8d3b549a81c517", "message": "rebase", "committedDate": "2020-02-27T19:55:50Z", "type": "forcePushed"}]}