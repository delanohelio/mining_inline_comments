{"pr_number": 6601, "pr_title": "chore: refuse INSERT VALUES that would modify key schema", "pr_createdAt": "2020-11-12T18:08:50Z", "pr_url": "https://github.com/confluentinc/ksql/pull/6601", "timeline": [{"oid": "bf51ea2f6c608a91e5b35081154ce32bc7b8cad7", "url": "https://github.com/confluentinc/ksql/commit/bf51ea2f6c608a91e5b35081154ce32bc7b8cad7", "message": "chore: refuse INSERT VALUES that would modify key schema", "committedDate": "2020-11-12T17:44:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg3ODAxMw==", "url": "https://github.com/confluentinc/ksql/pull/6601#discussion_r524878013", "bodyText": "How come we're not using SchemaRegistryUtil#getLatestSchema() here?", "author": "vcrfxia", "createdAt": "2020-11-17T04:31:58Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/InsertValuesExecutor.java", "diffHunk": "@@ -266,12 +274,52 @@ private void throwIfDisabled(final KsqlConfig config) {\n           FormatFactory.fromName(dataSource.getKsqlTopic().getKeyFormat().getFormat()),\n           topicName,\n           true,\n+          \"write\",\n           e);\n       LOG.error(\"Could not serialize key.\", e);\n       throw new KsqlException(\"Could not serialize key: \" + keyValue, e);\n     }\n   }\n \n+  /**\n+   * Ensures that the key schema that we generate will be identical\n+   * to the schema that is registered in schema registry, if it exists.\n+   * Otherwise, it is possible that we will publish messages with a new\n+   * schemaID, meaning that logically identical keys might be routed to\n+   * different partitions.\n+   */\n+  private void ensureKeySchemasMatch(\n+      final PersistenceSchema keySchema,\n+      final DataSource dataSource,\n+      final ServiceContext serviceContext\n+  ) {\n+    final KeyFormat keyFormat = dataSource.getKsqlTopic().getKeyFormat();\n+    final Format format = FormatFactory.fromName(keyFormat.getFormat());\n+    if (!format.supportsFeature(SerdeFeature.SCHEMA_INFERENCE)) {\n+      return;\n+    }\n+\n+    final ParsedSchema schema = format\n+        .getSchemaTranslator(keyFormat.getFormatInfo().getProperties())\n+        .toParsedSchema(keySchema);\n+\n+    try {\n+      final SchemaMetadata latest = serviceContext.getSchemaRegistryClient()\n+          .getLatestSchemaMetadata(", "originalCommit": "bf51ea2f6c608a91e5b35081154ce32bc7b8cad7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMxODUyNw==", "url": "https://github.com/confluentinc/ksql/pull/6601#discussion_r525318527", "bodyText": "umm, I wasn't aware that existed!", "author": "agavra", "createdAt": "2020-11-17T16:50:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg3ODAxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM0MTg1NQ==", "url": "https://github.com/confluentinc/ksql/pull/6601#discussion_r525341855", "bodyText": "also \ud83e\udd26 seems like I created it...", "author": "agavra", "createdAt": "2020-11-17T17:18:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg3ODAxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4NzQ2Nw==", "url": "https://github.com/confluentinc/ksql/pull/6601#discussion_r525387467", "bodyText": "#6632", "author": "agavra", "createdAt": "2020-11-17T18:23:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg3ODAxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg3ODg0Ng==", "url": "https://github.com/confluentinc/ksql/pull/6601#discussion_r524878846", "bodyText": "Are we handling the case where no schema is present in Schema Registry? I know this doesn't happen under normal circumstances since ksqlDB registers schemas at source creation time, but we should handle potential subsequent deletion by the user gracefully rather than throwing an NPE.", "author": "vcrfxia", "createdAt": "2020-11-17T04:35:14Z", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/InsertValuesExecutor.java", "diffHunk": "@@ -266,12 +274,52 @@ private void throwIfDisabled(final KsqlConfig config) {\n           FormatFactory.fromName(dataSource.getKsqlTopic().getKeyFormat().getFormat()),\n           topicName,\n           true,\n+          \"write\",\n           e);\n       LOG.error(\"Could not serialize key.\", e);\n       throw new KsqlException(\"Could not serialize key: \" + keyValue, e);\n     }\n   }\n \n+  /**\n+   * Ensures that the key schema that we generate will be identical\n+   * to the schema that is registered in schema registry, if it exists.\n+   * Otherwise, it is possible that we will publish messages with a new\n+   * schemaID, meaning that logically identical keys might be routed to\n+   * different partitions.\n+   */\n+  private void ensureKeySchemasMatch(\n+      final PersistenceSchema keySchema,\n+      final DataSource dataSource,\n+      final ServiceContext serviceContext\n+  ) {\n+    final KeyFormat keyFormat = dataSource.getKsqlTopic().getKeyFormat();\n+    final Format format = FormatFactory.fromName(keyFormat.getFormat());\n+    if (!format.supportsFeature(SerdeFeature.SCHEMA_INFERENCE)) {\n+      return;\n+    }\n+\n+    final ParsedSchema schema = format\n+        .getSchemaTranslator(keyFormat.getFormatInfo().getProperties())\n+        .toParsedSchema(keySchema);\n+\n+    try {\n+      final SchemaMetadata latest = serviceContext.getSchemaRegistryClient()\n+          .getLatestSchemaMetadata(\n+              KsqlConstants.getSRSubject(dataSource.getKafkaTopicName(), true));\n+      if (!latest.getSchema().equals(schema.canonicalString())) {", "originalCommit": "bf51ea2f6c608a91e5b35081154ce32bc7b8cad7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMxODM4Mw==", "url": "https://github.com/confluentinc/ksql/pull/6601#discussion_r525318383", "bodyText": "I thought it throws an exception if the schema does not exist with a 404 but I will double check that (so it would be handled in the catch block below)", "author": "agavra", "createdAt": "2020-11-17T16:50:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg3ODg0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMyODIwMw==", "url": "https://github.com/confluentinc/ksql/pull/6601#discussion_r525328203", "bodyText": "It appears that your comment above handles this case \ud83d\ude02", "author": "agavra", "createdAt": "2020-11-17T17:02:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg3ODg0Ng=="}], "type": "inlineReview"}]}