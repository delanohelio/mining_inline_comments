{"pr_number": 1681, "pr_title": "JBTM-3361 include a unit test for unique XIDs", "pr_createdAt": "2020-10-02T15:30:12Z", "pr_url": "https://github.com/jbosstm/narayana/pull/1681", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwNjEyNw==", "url": "https://github.com/jbosstm/narayana/pull/1681#discussion_r498906127", "bodyText": "Maybe use FormatConstants instead of the magic number, and/or comment to make clear the intent here is to force something other than JTA_FORMAT_ID so that createXid takes the right path.", "author": "jhalliday", "createdAt": "2020-10-02T15:51:40Z", "path": "ArjunaJTA/jta/tests/classes/com/hp/mwtests/ts/jta/recovery/nonuniquexids/ImportNonUniqueBranchTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package com.hp.mwtests.ts.jta.recovery.nonuniquexids;\n+\n+import com.arjuna.ats.arjuna.common.RecoveryEnvironmentBean;\n+import com.arjuna.ats.arjuna.common.Uid;\n+import com.arjuna.ats.arjuna.recovery.RecoveryModule;\n+import com.arjuna.ats.internal.arjuna.recovery.PeriodicRecovery;\n+import com.arjuna.ats.internal.jta.recovery.arjunacore.XARecoveryModule;\n+import com.arjuna.ats.internal.jta.transaction.arjunacore.jca.SubordinationManager;\n+import com.arjuna.ats.jta.common.JTAEnvironmentBean;\n+import com.arjuna.ats.jta.xa.XATxConverter;\n+import com.arjuna.common.internal.util.propertyservice.BeanPopulator;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.resource.spi.XATerminator;\n+import javax.transaction.Transaction;\n+import javax.transaction.xa.XAResource;\n+import javax.transaction.xa.Xid;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+// unit test based on a Jonathan Haliday's code\n+public class ImportNonUniqueBranchTest {\n+    private static XARecoveryModule xaRecoveryModule;\n+    private static PeriodicRecovery periodicRecovery;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        RecoveryEnvironmentBean environmentBean = BeanPopulator.getDefaultInstance(RecoveryEnvironmentBean.class);\n+        List<String> moduleNames = new ArrayList<>();\n+        moduleNames.add(\"com.arjuna.ats.internal.jta.recovery.arjunacore.SubordinateAtomicActionRecoveryModule\");\n+        moduleNames.add(\"com.arjuna.ats.internal.jta.recovery.arjunacore.XARecoveryModule\");\n+        environmentBean.setRecoveryModuleClassNames(moduleNames);\n+        environmentBean.setRecoveryBackoffPeriod(1);\n+\n+        BeanPopulator.getDefaultInstance(JTAEnvironmentBean.class).setXAResourceRecordWrappingPlugin(new XAResourceRecordWrappingPluginImpl());\n+\n+        periodicRecovery = new PeriodicRecovery(false, false);\n+\n+        for (RecoveryModule recoveryModule : periodicRecovery.getModules()) {\n+            if (recoveryModule instanceof XARecoveryModule) {\n+                xaRecoveryModule = (XARecoveryModule)recoveryModule;\n+                break;\n+            }\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void afterClass() {\n+        periodicRecovery.shutdown(false);\n+    }\n+\n+    @Test\n+    public void testWrapped() throws Exception {\n+        test(true);\n+        Assert.assertEquals(\"resource commit error\", 0, XAResourceImpl.getErrorCount());\n+    }\n+\n+    @Test\n+    public void testNotWrapped() throws Exception {\n+        test(false);\n+        Assert.assertNotEquals(\"resource commit should have failed\", 0, XAResourceImpl.getErrorCount());\n+    }\n+\n+    public void test(boolean wrap) throws Exception {\n+        XAResourceImpl.clearErrorCount();\n+        ResourceManager resourceManagerA = new ResourceManager(\"jndi:/A\", wrap);\n+        ResourceManager resourceManagerB = new ResourceManager(\"jndi:/B\", wrap);\n+\n+        xaRecoveryModule.addXAResourceRecoveryHelper(resourceManagerA);\n+        xaRecoveryModule.addXAResourceRecoveryHelper(resourceManagerB);\n+\n+        Xid xid = XATxConverter.getXid(new Uid(), false, 131080);", "originalCommit": "1a368e15a055a5e3b7b330261a23324f3b4c1782", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwNzM2MA==", "url": "https://github.com/jbosstm/narayana/pull/1681#discussion_r498907360", "bodyText": "The two getImportedTransaction calls here serve no useful purpose. They were handy to validate my reasoning when running under the debugger, but unless you're inclined to explicitly assertNotEquals(txA, txB) they may well be removed to avoid confusion.", "author": "jhalliday", "createdAt": "2020-10-02T15:53:49Z", "path": "ArjunaJTA/jta/tests/classes/com/hp/mwtests/ts/jta/recovery/nonuniquexids/ImportNonUniqueBranchTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package com.hp.mwtests.ts.jta.recovery.nonuniquexids;\n+\n+import com.arjuna.ats.arjuna.common.RecoveryEnvironmentBean;\n+import com.arjuna.ats.arjuna.common.Uid;\n+import com.arjuna.ats.arjuna.recovery.RecoveryModule;\n+import com.arjuna.ats.internal.arjuna.recovery.PeriodicRecovery;\n+import com.arjuna.ats.internal.jta.recovery.arjunacore.XARecoveryModule;\n+import com.arjuna.ats.internal.jta.transaction.arjunacore.jca.SubordinationManager;\n+import com.arjuna.ats.jta.common.JTAEnvironmentBean;\n+import com.arjuna.ats.jta.xa.XATxConverter;\n+import com.arjuna.common.internal.util.propertyservice.BeanPopulator;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.resource.spi.XATerminator;\n+import javax.transaction.Transaction;\n+import javax.transaction.xa.XAResource;\n+import javax.transaction.xa.Xid;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+// unit test based on a Jonathan Haliday's code\n+public class ImportNonUniqueBranchTest {\n+    private static XARecoveryModule xaRecoveryModule;\n+    private static PeriodicRecovery periodicRecovery;\n+\n+    @BeforeClass\n+    public static void beforeClass() {\n+        RecoveryEnvironmentBean environmentBean = BeanPopulator.getDefaultInstance(RecoveryEnvironmentBean.class);\n+        List<String> moduleNames = new ArrayList<>();\n+        moduleNames.add(\"com.arjuna.ats.internal.jta.recovery.arjunacore.SubordinateAtomicActionRecoveryModule\");\n+        moduleNames.add(\"com.arjuna.ats.internal.jta.recovery.arjunacore.XARecoveryModule\");\n+        environmentBean.setRecoveryModuleClassNames(moduleNames);\n+        environmentBean.setRecoveryBackoffPeriod(1);\n+\n+        BeanPopulator.getDefaultInstance(JTAEnvironmentBean.class).setXAResourceRecordWrappingPlugin(new XAResourceRecordWrappingPluginImpl());\n+\n+        periodicRecovery = new PeriodicRecovery(false, false);\n+\n+        for (RecoveryModule recoveryModule : periodicRecovery.getModules()) {\n+            if (recoveryModule instanceof XARecoveryModule) {\n+                xaRecoveryModule = (XARecoveryModule)recoveryModule;\n+                break;\n+            }\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void afterClass() {\n+        periodicRecovery.shutdown(false);\n+    }\n+\n+    @Test\n+    public void testWrapped() throws Exception {\n+        test(true);\n+        Assert.assertEquals(\"resource commit error\", 0, XAResourceImpl.getErrorCount());\n+    }\n+\n+    @Test\n+    public void testNotWrapped() throws Exception {\n+        test(false);\n+        Assert.assertNotEquals(\"resource commit should have failed\", 0, XAResourceImpl.getErrorCount());\n+    }\n+\n+    public void test(boolean wrap) throws Exception {\n+        XAResourceImpl.clearErrorCount();\n+        ResourceManager resourceManagerA = new ResourceManager(\"jndi:/A\", wrap);\n+        ResourceManager resourceManagerB = new ResourceManager(\"jndi:/B\", wrap);\n+\n+        xaRecoveryModule.addXAResourceRecoveryHelper(resourceManagerA);\n+        xaRecoveryModule.addXAResourceRecoveryHelper(resourceManagerB);\n+\n+        Xid xid = XATxConverter.getXid(new Uid(), false, 131080);\n+        Transaction tx = SubordinationManager.getTransactionImporter().importTransaction(xid, 10000);\n+        XATerminator xaTerminator = SubordinationManager.getXATerminator();\n+\n+        XAResource resource1 = resourceManagerA.getResource(\"a1\");\n+        XAResource resource2 = resourceManagerB.getResource(\"b1\");\n+\n+        tx.enlistResource(resource1);\n+        tx.enlistResource(resource2);\n+\n+        xaTerminator.prepare(xid);\n+        // ./ObjectStore/ShadowNoFileLockStore/defaultStore/StateManager/BasicAction/TwoPhaseCoordinator/AtomicAction/SubordinateAtomicAction/JCA/_\n+\n+        Transaction txA = SubordinationManager.getTransactionImporter().getImportedTransaction(xid);\n+        periodicRecovery.doWork(); // will take recoveryBackoffPeriod seconds, be patient\n+        Transaction txB = SubordinationManager.getTransactionImporter().getImportedTransaction(xid);", "originalCommit": "1a368e15a055a5e3b7b330261a23324f3b4c1782", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e888f1d4d586a5fa5f22bf5e669ea028d56d4c80", "url": "https://github.com/jbosstm/narayana/commit/e888f1d4d586a5fa5f22bf5e669ea028d56d4c80", "message": "JBTM-3361 include a unit test for unique XIDs", "committedDate": "2020-10-02T16:37:32Z", "type": "commit"}, {"oid": "e888f1d4d586a5fa5f22bf5e669ea028d56d4c80", "url": "https://github.com/jbosstm/narayana/commit/e888f1d4d586a5fa5f22bf5e669ea028d56d4c80", "message": "JBTM-3361 include a unit test for unique XIDs", "committedDate": "2020-10-02T16:37:32Z", "type": "forcePushed"}]}