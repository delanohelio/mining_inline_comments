{"pr_number": 1658, "pr_title": "[JBTM-3355] harmonize the LRA DTO usage to use only LRAData", "pr_createdAt": "2020-08-19T15:03:26Z", "pr_url": "https://github.com/jbosstm/narayana/pull/1658", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyMTg3Nw==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r473621877", "bodyText": "What is this information (HTTP status and response data) with regards to a particular LRA?", "author": "xstefank", "createdAt": "2020-08-20T05:53:16Z", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRAData.java", "diffHunk": "@@ -72,12 +58,12 @@ public long getFinishTime() {\n         return finishTime;\n     }\n \n-    public long getTimeNow() {\n-        return LocalDateTime.now().atZone(ZoneOffset.UTC).toInstant().toEpochMilli();\n+    public int getHttpStatus() {\n+        return this.httpStatus;\n     }\n \n-    public ZoneOffset getZoneOffset() {\n-        return ZoneOffset.UTC;\n+    public String getResponseData() {\n+        return this.responseData;", "originalCommit": "efd4e9bf598284dccd5c54e26ee18457283a4add", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYzMjE3Ng==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r476632176", "bodyText": "Good spot:\nI believe response data is the same as status so it can safely be deleted (my guess is that it was used in a previous version of the spec that is no longer required).\nAnd I don't know what httpStatus would be used for, I would delete that too (unless you know where it could be used).", "author": "mmusgrov", "createdAt": "2020-08-25T17:50:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyMTg3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY2MzA0MA==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r483663040", "bodyText": "+1", "author": "ochaloup", "createdAt": "2020-09-04T14:48:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyMTg3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI3MzUwMw==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r484273503", "bodyText": "I removed the responseData from LRAData while I left them in LRARecord where it seems they are used.", "author": "ochaloup", "createdAt": "2020-09-07T08:27:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyMTg3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyMjg5NA==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r473622894", "bodyText": "this name is misleading, maybe \"newInstance\" or \"create\" or similar would be better.", "author": "xstefank", "createdAt": "2020-08-20T05:54:45Z", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRAData.java", "diffHunk": "@@ -97,18 +83,102 @@ public int hashCode() {\n \n     @Override\n     public String toString() {\n-        return this.getClass().getSimpleName() + \"{\" +\n-                \"lraId='\" + lraId + '\\'' +\n-                \", clientId='\" + clientId + '\\'' +\n-                \", status='\" + status + '\\'' +\n-                \", isClosed=\" + isClosed +\n-                \", isCancelled=\" + isCancelled +\n-                \", isRecovering=\" + isRecovering +\n-                \", isActive=\" + isActive +\n-                \", isTopLevel=\" + isTopLevel +\n-                \", startTime=\" + startTime +\n-                \", finishTime=\" + finishTime +\n-                '}';\n+        return String.format(\n+            \"%s {lraId='%s', clientId='%s', status='%s', isTopLevel=%b, isRecovering=%b, startTime=%d, finishTime=%d, httpStatus=%d, responseData='%s'}\",\n+                this.getClass().getSimpleName(), lraId, clientId, status,\n+                isTopLevel, isRecovering, startTime, finishTime, httpStatus, responseData);\n+    }\n+\n+    public static class Builder implements BuilderWithLraId, BuilderWithClientId, BuilderWithStatus, BuilderWithTopLevel,\n+            BuilderWithRecovering, BuilderWithStartTime, BuilderWithFinishTime, BuilderWithHttpStatus,\n+            BuilderWithResponseData, BuilderFinal {\n+        private String lraId;\n+        private String clientId;\n+        private LRAStatus status;\n+        private boolean isTopLevel;\n+        private boolean isRecovering;\n+        private long startTime;\n+        private long finishTime;\n+        private int httpStatus;\n+        private String responseData;\n+\n+        private Builder() {\n+            // no public instance\n+        }\n+\n+        public static BuilderWithLraId instanceOf() {", "originalCommit": "efd4e9bf598284dccd5c54e26ee18457283a4add", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY2MjkwNA==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r483662904", "bodyText": "+1", "author": "ochaloup", "createdAt": "2020-09-04T14:48:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyMjg5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyNDEwNQ==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r473624105", "bodyText": "also I don't understand why there is just Builder returned here, and also there is no passed LraId but BuilderWithLraId is returned.", "author": "xstefank", "createdAt": "2020-08-20T05:56:37Z", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRAData.java", "diffHunk": "@@ -97,18 +83,102 @@ public int hashCode() {\n \n     @Override\n     public String toString() {\n-        return this.getClass().getSimpleName() + \"{\" +\n-                \"lraId='\" + lraId + '\\'' +\n-                \", clientId='\" + clientId + '\\'' +\n-                \", status='\" + status + '\\'' +\n-                \", isClosed=\" + isClosed +\n-                \", isCancelled=\" + isCancelled +\n-                \", isRecovering=\" + isRecovering +\n-                \", isActive=\" + isActive +\n-                \", isTopLevel=\" + isTopLevel +\n-                \", startTime=\" + startTime +\n-                \", finishTime=\" + finishTime +\n-                '}';\n+        return String.format(\n+            \"%s {lraId='%s', clientId='%s', status='%s', isTopLevel=%b, isRecovering=%b, startTime=%d, finishTime=%d, httpStatus=%d, responseData='%s'}\",\n+                this.getClass().getSimpleName(), lraId, clientId, status,\n+                isTopLevel, isRecovering, startTime, finishTime, httpStatus, responseData);\n+    }\n+\n+    public static class Builder implements BuilderWithLraId, BuilderWithClientId, BuilderWithStatus, BuilderWithTopLevel,\n+            BuilderWithRecovering, BuilderWithStartTime, BuilderWithFinishTime, BuilderWithHttpStatus,\n+            BuilderWithResponseData, BuilderFinal {\n+        private String lraId;\n+        private String clientId;\n+        private LRAStatus status;\n+        private boolean isTopLevel;\n+        private boolean isRecovering;\n+        private long startTime;\n+        private long finishTime;\n+        private int httpStatus;\n+        private String responseData;\n+\n+        private Builder() {\n+            // no public instance\n+        }\n+\n+        public static BuilderWithLraId instanceOf() {\n+            return new Builder();", "originalCommit": "efd4e9bf598284dccd5c54e26ee18457283a4add", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyNDU3MQ==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r473624571", "bodyText": "ah, so you want to require order in builder methods. Why is that useful?", "author": "xstefank", "createdAt": "2020-08-20T05:57:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyNDEwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0NjAxMQ==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r483646011", "bodyText": "I want not to require the order of the methods particularly but it's a secondary effect.\nWhat I want is to require that the all the arguments are defined. For the build() method could be called and the object is created the developer has to load all data through the builder.", "author": "ochaloup", "createdAt": "2020-09-04T14:20:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyNDEwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI3NTMyOA==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r484275328", "bodyText": "This is still complicated and difficult for me to understand, I would not like to have to maintain this code.\nThis is internal class and is for our use only - only the JSON representation is ever exposed (ie it isn't part of any external API).", "author": "mmusgrov", "createdAt": "2020-09-07T08:30:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyNDEwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyODI0OQ==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r473628249", "bodyText": "Sorry, but I think that the Builder here is overcomplicated. What would be the reason to keep the order of methods in the builder? Also since all BuilderWith* interfaces have only one method which represents next step in the building process then all parameters are required, and so this is just a really complicated way of writing an all args constructor :)", "author": "xstefank", "createdAt": "2020-08-20T06:02:53Z", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRAData.java", "diffHunk": "@@ -97,18 +83,102 @@ public int hashCode() {\n \n     @Override\n     public String toString() {\n-        return this.getClass().getSimpleName() + \"{\" +\n-                \"lraId='\" + lraId + '\\'' +\n-                \", clientId='\" + clientId + '\\'' +\n-                \", status='\" + status + '\\'' +\n-                \", isClosed=\" + isClosed +\n-                \", isCancelled=\" + isCancelled +\n-                \", isRecovering=\" + isRecovering +\n-                \", isActive=\" + isActive +\n-                \", isTopLevel=\" + isTopLevel +\n-                \", startTime=\" + startTime +\n-                \", finishTime=\" + finishTime +\n-                '}';\n+        return String.format(\n+            \"%s {lraId='%s', clientId='%s', status='%s', isTopLevel=%b, isRecovering=%b, startTime=%d, finishTime=%d, httpStatus=%d, responseData='%s'}\",\n+                this.getClass().getSimpleName(), lraId, clientId, status,\n+                isTopLevel, isRecovering, startTime, finishTime, httpStatus, responseData);\n+    }\n+\n+    public static class Builder implements BuilderWithLraId, BuilderWithClientId, BuilderWithStatus, BuilderWithTopLevel,\n+            BuilderWithRecovering, BuilderWithStartTime, BuilderWithFinishTime, BuilderWithHttpStatus,\n+            BuilderWithResponseData, BuilderFinal {\n+        private String lraId;\n+        private String clientId;\n+        private LRAStatus status;\n+        private boolean isTopLevel;\n+        private boolean isRecovering;\n+        private long startTime;\n+        private long finishTime;\n+        private int httpStatus;\n+        private String responseData;\n+\n+        private Builder() {\n+            // no public instance\n+        }\n+\n+        public static BuilderWithLraId instanceOf() {\n+            return new Builder();\n+        }\n+\n+        public BuilderWithClientId lraId(String lraId) {\n+            this.lraId = lraId;\n+            return this;\n+        }\n+        public BuilderWithStatus clientId(String clientId) {\n+            this.clientId = clientId;\n+            return this;\n+        }\n+        public BuilderWithTopLevel status(LRAStatus lraStatus) {\n+            this.status = lraStatus;\n+            return this;\n+        }\n+        public BuilderWithRecovering topLevel(boolean isTopLevel) {\n+            this.isTopLevel = isTopLevel;\n+            return this;\n+        }\n+        public BuilderWithStartTime recovering(boolean isRecovering) {\n+            this.isRecovering = isRecovering;\n+            return this;\n+        }\n+        public BuilderWithFinishTime startTime(long startTime) {\n+            this.startTime = startTime;\n+            return this;\n+        }\n+        public BuilderWithHttpStatus finishTime(long finishTime) {\n+            this.finishTime = finishTime;\n+            return this;\n+        }\n+        public BuilderWithResponseData httpStatus(int httpStatus) {\n+            this.httpStatus = httpStatus;\n+            return this;\n+        }\n+        public BuilderFinal responseData(String responseData) {\n+            this.responseData = responseData;\n+            return this;\n+        }\n+        public LRAData build() {\n+            return new LRAData(this);\n+        }\n     }\n \n+    public static interface BuilderWithLraId {\n+        BuilderWithClientId lraId(String lraId);\n+    }\n+    public static interface BuilderWithClientId {\n+        BuilderWithStatus clientId(String clientId);\n+    }\n+    public static interface BuilderWithStatus {\n+        BuilderWithTopLevel status(LRAStatus lraStatus);\n+    }\n+    public static interface BuilderWithTopLevel {\n+        BuilderWithRecovering topLevel(boolean isTopLevel);\n+    }\n+    public static interface BuilderWithRecovering {\n+        BuilderWithStartTime recovering(boolean isRecovering);\n+    }\n+    public static interface BuilderWithStartTime {\n+        BuilderWithFinishTime startTime(long startTime);\n+    }\n+    public static interface BuilderWithFinishTime {\n+        BuilderWithHttpStatus finishTime(long finishTime);\n+    }\n+    public static interface BuilderWithHttpStatus {\n+        BuilderWithResponseData httpStatus(int httpStatus);\n+    }\n+    public static interface BuilderWithResponseData {\n+        BuilderFinal responseData(String responseData);\n+    }\n+    public static interface BuilderFinal {\n+        LRAData build();\n+    }", "originalCommit": "efd4e9bf598284dccd5c54e26ee18457283a4add", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYzNTkwMw==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r476635903", "bodyText": "+1", "author": "mmusgrov", "createdAt": "2020-08-25T17:56:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyODI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0NzM5NA==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r483647394", "bodyText": "I can remove the Builder if you both think it's over-complicated. My position is that the creation of an object with constructor of 8 arguments are pretty messy and builder helps here to put all the values at the right place.", "author": "ochaloup", "createdAt": "2020-09-04T14:23:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyODI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI3NjI4OA==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r484276288", "bodyText": "I don't understand the builder code but I do understand the constructor. Constructing instances of LRAData is private to the narayana code so we don't need to worry about external usages of this class.", "author": "mmusgrov", "createdAt": "2020-09-07T08:32:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyODI0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyOTE2MQ==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r473629161", "bodyText": "is boolean before status required?", "author": "xstefank", "createdAt": "2020-08-20T06:04:20Z", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -145,12 +157,8 @@ public boolean save_state(OutputObjectState os, int ot) {\n                 os.packLong(finishTime.toInstant(ZoneOffset.UTC).toEpochMilli());\n             }\n \n-            if (status == null) {\n-                os.packBoolean(false);\n-            } else {\n-                os.packBoolean(true);\n-                os.packString(status.name());\n-            }\n+            os.packBoolean(true);", "originalCommit": "efd4e9bf598284dccd5c54e26ee18457283a4add", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0MDYzNA==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r476640634", "bodyText": "Agreed, status can never be null.", "author": "mmusgrov", "createdAt": "2020-08-25T18:05:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyOTE2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY2MjY4Nw==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r483662687", "bodyText": "+1", "author": "ochaloup", "createdAt": "2020-09-04T14:48:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyOTE2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyOTg3OA==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r473629878", "bodyText": "os.unpackBoolean() will be always true", "author": "xstefank", "createdAt": "2020-08-20T06:05:19Z", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -269,7 +277,7 @@ public boolean restore_state(InputObjectState os, int ot) {\n             clientId = os.unpackString();\n             startTime = os.unpackBoolean() ? LocalDateTime.ofInstant(Instant.ofEpochMilli(os.unpackLong()), ZoneOffset.UTC) : null;\n             finishTime = os.unpackBoolean() ? LocalDateTime.ofInstant(Instant.ofEpochMilli(os.unpackLong()), ZoneOffset.UTC) : null;\n-            status = os.unpackBoolean() ? LRAStatus.valueOf(os.unpackString()) : null;\n+            status = os.unpackBoolean() ? LRAStatus.valueOf(os.unpackString()) : LRAStatus.Active;", "originalCommit": "efd4e9bf598284dccd5c54e26ee18457283a4add", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY2MjU5MQ==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r483662591", "bodyText": "+1", "author": "ochaloup", "createdAt": "2020-09-04T14:48:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyOTg3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYzMDg0NQ==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r473630845", "bodyText": "you gave me an idea earlier in the PR :) maybe we can rewrite these comparisons to use == as they are enums. We can save some processing.", "author": "xstefank", "createdAt": "2020-08-20T06:06:48Z", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -362,24 +371,27 @@ protected void setLRAStatus(int actionStatus) {\n     }\n \n     boolean isClosed() {\n-        return status != null && status.equals(LRAStatus.Closed);\n+        assert status != null;\n+        return status.equals(LRAStatus.Closed);", "originalCommit": "efd4e9bf598284dccd5c54e26ee18457283a4add", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0MzA2OA==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r476643068", "bodyText": "+1\nAlso isClosed, isCancelled, isActive etc are not required since any caller just needs to call getStatus() and then do the test (in fact I think they are unused). Also note that class Transaction is internal to the implementation so we have full control over the users of this class.\nThe other methods such as isFinished and isRecovering are useful since the check multiple states.", "author": "mmusgrov", "createdAt": "2020-08-25T18:09:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYzMDg0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY2MjQyMw==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r483662423", "bodyText": "+1", "author": "ochaloup", "createdAt": "2020-09-04T14:48:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYzMDg0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYzMzk5Ng==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r473633996", "bodyText": "we should use unified either Collection or List but I don't see the reason to mix.", "author": "xstefank", "createdAt": "2020-08-20T06:11:32Z", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java", "diffHunk": "@@ -124,45 +123,41 @@ public synchronized ReentrantLock tryLockTransaction(URI lraId) {\n         return lock.tryLock() ? lock : null;\n     }\n \n-    public List<LRAStatusHolder> getAll(String state) {\n-        if (state == null || state.isEmpty()) {\n-            Set<LRAStatusHolder> all = getAllActive();\n+    public Collection<LRAData> getAll() {\n+        return getAll(null);\n+    }\n \n+    public Collection<LRAData> getAll(LRAStatus lraStatus) {\n+        if (lraStatus == null) {\n+            Collection<LRAData> all = lras.values().stream()\n+                    .map(t -> t.getLRAData()).collect(Collectors.toCollection(HashSet::new));\n             all.addAll(getAllRecovering());\n-\n-            return new ArrayList<>(all);\n-        }\n-\n-        if (LRAStatus.Cancelling.name().equals(state)) {\n-            return recoveringLRAs.values().stream().map(LRAStatusHolder::new).filter(LRAStatusHolder::isCancelling).collect(toList());\n-        } else if (LRAStatus.Cancelled.name().equals(state)) {\n-            return recoveringLRAs.values().stream().map(LRAStatusHolder::new).filter(LRAStatusHolder::isCancelled).collect(toList());\n-        } else if (LRAStatus.FailedToCancel.name().equals(state)) {\n-            return recoveringLRAs.values().stream().map(LRAStatusHolder::new).filter(LRAStatusHolder::isFailedToCancel).collect(toList());\n-        } else if (LRAStatus.Closing.name().equals(state)) {\n-            return recoveringLRAs.values().stream().map(LRAStatusHolder::new).filter(LRAStatusHolder::isClosing).collect(toList());\n-        } else if (LRAStatus.Closed.name().equals(state)) {\n-            return recoveringLRAs.values().stream().map(LRAStatusHolder::new).filter(LRAStatusHolder::isClosed).collect(toList());\n-        } else if (LRAStatus.FailedToClose.name().equals(state)) {\n-            return recoveringLRAs.values().stream().map(LRAStatusHolder::new).filter(LRAStatusHolder::isFailedToClose).collect(toList());\n+            return all;\n         }\n \n-        return null;\n+        Collection<LRAData> allByStatus = getLraDataByStatus(lras, lraStatus);\n+        allByStatus.addAll(getLraDataByStatus(recoveringLRAs, lraStatus));\n+        return allByStatus;\n     }\n \n-    private Set<LRAStatusHolder> getAllActive() {\n-        return lras.values().stream().map(LRAStatusHolder::new).collect(toSet());\n-    }\n-\n-    public List<LRAStatusHolder> getAllRecovering(boolean scan) {\n+    /**\n+     * Getting all the LRA managed by recovery manager. This means all LRAs which are not mapped\n+     * only in memory but that were already saved in object store.\n+     *\n+     * @param scan  defines if there is run recovery manager scanning before returning the collection,\n+     *              when the recovery is run then the object store is touched and the returned\n+     *              list may be updated with the new loaded objects\n+     * @return list of the {@link LRAData} which define the recovering LRAs\n+     */\n+    public List<LRAData> getAllRecovering(boolean scan) {\n         if (scan) {\n             RecoveryManager.manager().scan();\n         }\n \n-        return recoveringLRAs.values().stream().map(LRAStatusHolder::new).collect(toList());\n+        return recoveringLRAs.values().stream().map(t -> t.getLRAData()).collect(toList());\n     }\n \n-    public List<LRAStatusHolder> getAllRecovering() {\n+    public List<LRAData> getAllRecovering() {", "originalCommit": "efd4e9bf598284dccd5c54e26ee18457283a4add", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0NzA2OA==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r476647068", "bodyText": "+1\nI would choose List since there is a natural ordering for LRAs.", "author": "mmusgrov", "createdAt": "2020-08-25T18:17:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYzMzk5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3Mjc3Mg==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r483672772", "bodyText": "+1, good point, I was thinking to use the Collection on getAll method for I can use the Set to prevent duplication of the records in the result collection. Then it happens I introduced this ambiguity. But I can switch back to List.", "author": "ochaloup", "createdAt": "2020-09-04T14:58:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYzMzk5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyNDA3NA==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r476624074", "bodyText": "state cannot be null because a default is specified:\n@QueryParam(STATUS_PARAM_NAME) @DefaultValue(\"\") String state\nso the test is superfluous.", "author": "mmusgrov", "createdAt": "2020-08-25T17:36:42Z", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/api/Coordinator.java", "diffHunk": "@@ -112,25 +110,23 @@\n     @APIResponse(description = \"The LRA\",\n         content = @Content(schema = @Schema(type = SchemaType.ARRAY, implementation = LRAData.class))\n     )\n-    public List<LRAData> getAllLRAs(\n+    public Collection<LRAData> getAllLRAs(\n             @Parameter(name = STATUS_PARAM_NAME, description = \"Filter the returned LRAs to only those in the give state (see CompensatorStatus)\")\n             @QueryParam(STATUS_PARAM_NAME) @DefaultValue(\"\") String state) {\n-        List<LRAStatusHolder> lras = lraService.getAll(state);\n+        LRAStatus requestedLRAStatus = null;\n+        if(state != null && !state.isEmpty()) {", "originalCommit": "efd4e9bf598284dccd5c54e26ee18457283a4add", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3Mzk5MA==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r483673990", "bodyText": "+1", "author": "ochaloup", "createdAt": "2020-09-04T15:00:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyNDA3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyOTYyMQ==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r476629621", "bodyText": "It is very complicated, I don't really understand how this code works.\nIs there any particular reason why it has to be this complex?", "author": "mmusgrov", "createdAt": "2020-08-25T17:46:25Z", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/LRAData.java", "diffHunk": "@@ -97,18 +83,102 @@ public int hashCode() {\n \n     @Override\n     public String toString() {\n-        return this.getClass().getSimpleName() + \"{\" +\n-                \"lraId='\" + lraId + '\\'' +\n-                \", clientId='\" + clientId + '\\'' +\n-                \", status='\" + status + '\\'' +\n-                \", isClosed=\" + isClosed +\n-                \", isCancelled=\" + isCancelled +\n-                \", isRecovering=\" + isRecovering +\n-                \", isActive=\" + isActive +\n-                \", isTopLevel=\" + isTopLevel +\n-                \", startTime=\" + startTime +\n-                \", finishTime=\" + finishTime +\n-                '}';\n+        return String.format(\n+            \"%s {lraId='%s', clientId='%s', status='%s', isTopLevel=%b, isRecovering=%b, startTime=%d, finishTime=%d, httpStatus=%d, responseData='%s'}\",\n+                this.getClass().getSimpleName(), lraId, clientId, status,\n+                isTopLevel, isRecovering, startTime, finishTime, httpStatus, responseData);\n+    }\n+\n+    public static class Builder implements BuilderWithLraId, BuilderWithClientId, BuilderWithStatus, BuilderWithTopLevel,", "originalCommit": "efd4e9bf598284dccd5c54e26ee18457283a4add", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3NDQyNQ==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r483674425", "bodyText": "I commented that above. I think it's easier to use a builder than a constructor with 8 parameters. This makes all the parameters required.", "author": "ochaloup", "createdAt": "2020-09-04T15:00:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyOTYyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI4MjgyNA==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r484282824", "bodyText": "See my other comment on the complexity of the builder code.\nI have a reasonable degree of experience with Java but I still don't really understand this code.\nConstructors for DTOs are similar to copy constructors which conventionally take values for all those fields that cannot be calculated.", "author": "mmusgrov", "createdAt": "2020-09-07T08:43:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyOTYyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxNTE3Mw==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r484315173", "bodyText": "I don't consider the builder code complex. It's just a Java code. It's a way how Java permits to build the API when it does not permit optional parameters or named ones.\nI agree on the point that this is a private class and thus strictly with not a direct benefit.\nI will change it for constructor.", "author": "ochaloup", "createdAt": "2020-09-07T09:37:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyOTYyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0MDcwMw==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r476640703", "bodyText": "status can never be null.", "author": "mmusgrov", "createdAt": "2020-08-25T18:05:20Z", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -145,12 +157,8 @@ public boolean save_state(OutputObjectState os, int ot) {\n                 os.packLong(finishTime.toInstant(ZoneOffset.UTC).toEpochMilli());\n             }\n \n-            if (status == null) {\n-                os.packBoolean(false);\n-            } else {\n-                os.packBoolean(true);\n-                os.packString(status.name());\n-            }\n+            os.packBoolean(true);\n+            os.packString(status == null ? LRAStatus.Active.name() : status.name());", "originalCommit": "efd4e9bf598284dccd5c54e26ee18457283a4add", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI3NzY5Nw==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r484277697", "bodyText": "the null check is superfluous", "author": "mmusgrov", "createdAt": "2020-09-07T08:34:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0MDcwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxNTkxMw==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r484315913", "bodyText": "+1", "author": "ochaloup", "createdAt": "2020-09-07T09:38:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0MDcwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0MTYyMA==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r476641620", "bodyText": "The text after the comma is not need (and therefore confusing).\nstatus can never be null.", "author": "mmusgrov", "createdAt": "2020-08-25T18:07:02Z", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -351,9 +359,10 @@ protected LRAService getLraService() {\n     /**\n      * return the current status of the LRA\n      *\n-     * @return null if the LRA is still active (not closing, cancelling, closed or cancelled\n+     * @return current LRA status, will not return <code>null</code>", "originalCommit": "efd4e9bf598284dccd5c54e26ee18457283a4add", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3NDg1MA==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r483674850", "bodyText": "+1", "author": "ochaloup", "createdAt": "2020-09-04T15:01:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0MTYyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0MTgzNg==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r476641836", "bodyText": "Agreed, status can never be null. But why do we need to be asserting that.", "author": "mmusgrov", "createdAt": "2020-08-25T18:07:30Z", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/model/Transaction.java", "diffHunk": "@@ -351,9 +359,10 @@ protected LRAService getLraService() {\n     /**\n      * return the current status of the LRA\n      *\n-     * @return null if the LRA is still active (not closing, cancelling, closed or cancelled\n+     * @return current LRA status, will not return <code>null</code>\n      */\n     public LRAStatus getLRAStatus() {\n+        assert status != null;", "originalCommit": "efd4e9bf598284dccd5c54e26ee18457283a4add", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3NTgxMw==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r483675813", "bodyText": "assertion is good to demonstrate that the code is designed in way where the status won't be null. The developer says that he is aware of that fact and announce it to anybody reading the code later.", "author": "ochaloup", "createdAt": "2020-09-04T15:03:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0MTgzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI3OTQ0Mw==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r484279443", "bodyText": "If we assert program invariant's everywhere they exist then the code would be littered with assertions making the program difficult to read.\nAdd a comment to the field if you really want to stress that the status can only take values according to a well defined state model", "author": "mmusgrov", "createdAt": "2020-09-07T08:37:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0MTgzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxMjU0Mw==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r484312543", "bodyText": "agree, I think these are superfluous. I will change this.", "author": "ochaloup", "createdAt": "2020-09-07T09:32:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0MTgzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY1MzgzNQ==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r476653835", "bodyText": "Do we need to include Lra in the method names, it is clear that these methods are collecting LRAs.\nBut using it in lrasToFilter is good since it explains that the map contains LRAs.", "author": "mmusgrov", "createdAt": "2020-08-25T18:29:33Z", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java", "diffHunk": "@@ -474,4 +463,9 @@ void disableRecovery() {\n             }\n         }\n     }\n+\n+    private Collection<LRAData> getLraDataByStatus(Map<URI, Transaction> lrasToFilter, LRAStatus status) {", "originalCommit": "efd4e9bf598284dccd5c54e26ee18457283a4add", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3NjQ3Mw==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r483676473", "bodyText": "+1,  getDataByStatus is fine", "author": "ochaloup", "createdAt": "2020-09-04T15:04:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY1MzgzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY1NTc4MA==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r476655780", "bodyText": "LRA is an acronym so it should be capitalised (ie lra -> LRA) but obviously this comment does not apply to java variable names.", "author": "mmusgrov", "createdAt": "2020-08-25T18:33:05Z", "path": "rts/lra/lra-coordinator-jar/src/main/java/io/narayana/lra/coordinator/internal/LRARecoveryModule.java", "diffHunk": "@@ -195,7 +195,8 @@ public void getRecoveringLRAs(Map<URI, Transaction> lras) {\n \n     /**\n      * remove an LRA log record\n-     * @param lraUid\n+     *\n+     * @param lraUid lra id that will be removed from the log record", "originalCommit": "efd4e9bf598284dccd5c54e26ee18457283a4add", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3Njg5Ng==", "url": "https://github.com/jbosstm/narayana/pull/1658#discussion_r483676896", "bodyText": "+1", "author": "ochaloup", "createdAt": "2020-09-04T15:05:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY1NTc4MA=="}], "type": "inlineReview"}, {"oid": "0a6063aa7a8ad2b32c56a3af826d3c4d069d19b7", "url": "https://github.com/jbosstm/narayana/commit/0a6063aa7a8ad2b32c56a3af826d3c4d069d19b7", "message": "[JBTM-3355] harmonize the LRA DTO usage to use only LRAData", "committedDate": "2020-09-07T08:20:41Z", "type": "forcePushed"}, {"oid": "ff15d9949c7d24bfaa8310de343bb3d926170372", "url": "https://github.com/jbosstm/narayana/commit/ff15d9949c7d24bfaa8310de343bb3d926170372", "message": "[JBTM-3355] harmonize the LRA DTO usage to use only LRAData", "committedDate": "2020-09-07T09:31:24Z", "type": "commit"}, {"oid": "ff15d9949c7d24bfaa8310de343bb3d926170372", "url": "https://github.com/jbosstm/narayana/commit/ff15d9949c7d24bfaa8310de343bb3d926170372", "message": "[JBTM-3355] harmonize the LRA DTO usage to use only LRAData", "committedDate": "2020-09-07T09:31:24Z", "type": "forcePushed"}]}