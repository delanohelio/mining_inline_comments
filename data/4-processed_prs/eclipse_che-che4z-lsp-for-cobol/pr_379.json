{"pr_number": 379, "pr_title": "test: Add ZoweApi unit tests for client", "pr_createdAt": "2020-06-05T14:16:21Z", "pr_url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/379", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU5MjgzNA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/379#discussion_r436592834", "bodyText": "Optional: did you consider to have a setup() and tearDown() to initialize and rollback the env variable?\nSince seems important to restore the env var at the end of the test I prefer to have it in a method to avoid any problem if in the future we'll refactor this test and accidentally remove the finally clause.", "author": "zacanbrcom", "createdAt": "2020-06-08T10:15:41Z", "path": "clients/cobol-lsp-vscode-extension/src/__tests__/ZoweApiTest.ts", "diffHunk": "@@ -12,25 +12,131 @@\n  *   Broadcom, Inc. - initial API and implementation\n  */\n \n-import { BasicProfileManager, Session } from \"@zowe/imperative\";\n+import { RestClient } from \"@zowe/imperative\";\n+import { Session } from \"inspector\";\n+import { homedir } from \"os\";\n+import * as path from \"path\";\n import { ZoweApi } from \"../services/ZoweApi\";\n import { Type, ZoweError } from \"../services/ZoweError\";\n-jest.mock(\"@zowe/imperative\");\n+\n+const loadMock = jest.fn();\n+const loadAllMock = jest.fn();\n+jest.mock(\"@zowe/imperative/lib/profiles/src/BasicProfileManager\", () => {\n+    return {\n+        BasicProfileManager: jest.fn().mockImplementation(() => {\n+            return {\n+                load: loadMock,\n+                loadAll: loadAllMock,\n+                getDefaultProfileName: () => \"defaultName\",\n+            };\n+        }),\n+    };\n+});\n \n beforeEach(() => {\n-    (BasicProfileManager as any).mockClear();\n+    loadMock.mockClear();\n+    loadAllMock.mockClear();\n });\n \n describe(\"ZoweApi\", () => {\n+    it(\"listZOSMFProfiles returns map of founded profiles\", async () => {\n+        const profile = {\n+            name: \"foo\",\n+            password: \"bar\",\n+        };\n+        const profileFound = {\n+            name: \"profileName\",\n+            failNotFound: true,\n+            profile: profile,\n+        };\n+        const profileNotFound = {\n+            name: \"wrongName\",\n+            failNotFound: false,\n+        };\n+        loadAllMock.mockResolvedValue([profileFound, profileNotFound]);\n+        const zoweApi = new ZoweApi();\n+        const expectedMap = {\n+            profileName: profile,\n+        };\n+        await expect(zoweApi.listZOSMFProfiles()).resolves.toEqual(expectedMap);\n+        expect(loadAllMock).toBeCalledTimes(1);\n+    });\n+    it(\"getDefaultProfileName works as expected\", () => {\n+        const zoweApi = new ZoweApi();\n+        expect(zoweApi.getDefaultProfileName()).toBe(\"defaultName\");\n+    });\n+    it(\"fetchMember call RestClient with right path\", async () => {\n+        const getExpectStringMock = jest.fn().mockResolvedValue(\"content\");\n+        RestClient.getExpectString = getExpectStringMock;\n+        const zoweApi = new ZoweApi();\n+        const createSessionMock = jest.fn().mockResolvedValue(new Session());\n+        zoweApi.createSession = createSessionMock;\n+        await expect(zoweApi.fetchMember(\"dataSet\", \"theMember\", \"profile\")).resolves.toEqual(\"content\");\n+        expect(getExpectStringMock).toBeCalledTimes(1);\n+        expect(getExpectStringMock.mock.calls[0][1]).toBe(\"/zosmf/restfiles/ds/dataSet(theMember)\");\n+        expect(createSessionMock).toBeCalledWith(\"profile\");\n+    });\n+    it(\"listMember call RestClient with right path\", async () => {\n+        const getExpectJsonMock = jest.fn().mockResolvedValue({\n+            items: [\n+                {member: \"member1\"},\n+                {member: \"member2\"},\n+            ],\n+        });\n+        RestClient.getExpectJSON = getExpectJsonMock;\n+        const zoweApi = new ZoweApi();\n+        const createSessionMock = jest.fn().mockResolvedValue(new Session());\n+        zoweApi.createSession = createSessionMock;\n+        await expect(zoweApi.listMembers(\"dataSet\", \"profile\")).resolves.toStrictEqual([\"member1\", \"member2\"]);\n+        expect(createSessionMock).toBeCalledWith(\"profile\");\n+        expect(getExpectJsonMock).toBeCalledTimes(1);\n+        expect(getExpectJsonMock.mock.calls[0][1]).toBe(\"/zosmf/restfiles/ds/dataSet/member\")\n+    });\n     it(\"throw No Password error if profile don't have a password\", async () => {\n-        (BasicProfileManager as any).load = jest.fn().mockResolvedValue({profile: {password: \"\"}});\n+        loadMock.mockResolvedValue({profile: {password: \"\"}});\n         const zoweApi = new ZoweApi();\n         const expectedError = new ZoweError(\"No password\", Type.NoPassword);\n-        expect(zoweApi.createSession(\"zoweProfile\")).rejects.toEqual(expectedError);\n+        await expect(zoweApi.createSession(\"zoweProfile\")).rejects.toEqual(expectedError);\n+        expect(loadMock).toBeCalledWith({name: \"zoweProfile\"});\n     });\n     it(\"createSession works fine if password is set\", async () => {\n-        (BasicProfileManager as any).load = jest.fn().mockResolvedValue({profile: {password: \"secret\"}});\n+        loadMock.mockResolvedValue({profile: {password: \"secret\", host: \"theHost\"}});\n+        const zoweApi = new ZoweApi();\n+        const expectedSession = {\n+            hostname: \"theHost\",\n+            password: \"secret\",\n+            type: \"basic\",\n+        };\n+        expect(zoweApi.createSession(\"zoweProfile\")).resolves.toEqual({ISession: expectedSession});\n+        expect(loadMock).toBeCalledWith({name: \"zoweProfile\"});\n+    });\n+    it(\"Creates profile params with ZOWE_CLI_HOME env variable\", () => {\n+        const OLD_ZOWE_CLI_HOME = process.env.ZOWE_CLI_HOME;\n+        process.env.ZOWE_CLI_HOME = \"zoweHome\";\n+        const zoweApi = new ZoweApi();\n+        const expectedParams = {\n+            profileRootDirectory: path.join(\"zoweHome\", \"profiles\"),\n+            type: \"zosmf\",\n+        };\n+        try {\n+            expect((zoweApi as any).createProfileParams()).toEqual(expectedParams)\n+        } finally {\n+            process.env.ZOWE_CLI_HOME = OLD_ZOWE_CLI_HOME;\n+        }", "originalCommit": "7eebffe9d4252e9a8cc27977eccefbecdffaafaa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU5ODUxNA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/379#discussion_r436598514", "bodyText": "Good point. I'll try to rewrite it.", "author": "grianbrcom", "createdAt": "2020-06-08T10:26:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU5MjgzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3OTg0NQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/379#discussion_r436679845", "bodyText": "jest.clearAllMocks()   can be used instead of all", "author": "asatklichov", "createdAt": "2020-06-08T13:05:42Z", "path": "clients/cobol-lsp-vscode-extension/src/__tests__/ZoweApiTest.ts", "diffHunk": "@@ -12,25 +12,131 @@\n  *   Broadcom, Inc. - initial API and implementation\n  */\n \n-import { BasicProfileManager, Session } from \"@zowe/imperative\";\n+import { RestClient } from \"@zowe/imperative\";\n+import { Session } from \"inspector\";\n+import { homedir } from \"os\";\n+import * as path from \"path\";\n import { ZoweApi } from \"../services/ZoweApi\";\n import { Type, ZoweError } from \"../services/ZoweError\";\n-jest.mock(\"@zowe/imperative\");\n+\n+const loadMock = jest.fn();\n+const loadAllMock = jest.fn();\n+jest.mock(\"@zowe/imperative/lib/profiles/src/BasicProfileManager\", () => {\n+    return {\n+        BasicProfileManager: jest.fn().mockImplementation(() => {\n+            return {\n+                load: loadMock,\n+                loadAll: loadAllMock,\n+                getDefaultProfileName: () => \"defaultName\",\n+            };\n+        }),\n+    };\n+});\n \n beforeEach(() => {\n-    (BasicProfileManager as any).mockClear();\n+    loadMock.mockClear();", "originalCommit": "7eebffe9d4252e9a8cc27977eccefbecdffaafaa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc2MDEwNA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/379#discussion_r436760104", "bodyText": "Oh, you are right. I'll fix it.", "author": "grianbrcom", "createdAt": "2020-06-08T14:39:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3OTg0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY4MTQyNg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/379#discussion_r436681426", "bodyText": "const zoweApi can reused to get out the duplication, via initializing it in beforeEach", "author": "asatklichov", "createdAt": "2020-06-08T13:07:26Z", "path": "clients/cobol-lsp-vscode-extension/src/__tests__/ZoweApiTest.ts", "diffHunk": "@@ -12,25 +12,131 @@\n  *   Broadcom, Inc. - initial API and implementation\n  */\n \n-import { BasicProfileManager, Session } from \"@zowe/imperative\";\n+import { RestClient } from \"@zowe/imperative\";\n+import { Session } from \"inspector\";\n+import { homedir } from \"os\";\n+import * as path from \"path\";\n import { ZoweApi } from \"../services/ZoweApi\";\n import { Type, ZoweError } from \"../services/ZoweError\";\n-jest.mock(\"@zowe/imperative\");\n+\n+const loadMock = jest.fn();\n+const loadAllMock = jest.fn();\n+jest.mock(\"@zowe/imperative/lib/profiles/src/BasicProfileManager\", () => {\n+    return {\n+        BasicProfileManager: jest.fn().mockImplementation(() => {\n+            return {\n+                load: loadMock,\n+                loadAll: loadAllMock,\n+                getDefaultProfileName: () => \"defaultName\",\n+            };\n+        }),\n+    };\n+});\n \n beforeEach(() => {\n-    (BasicProfileManager as any).mockClear();\n+    loadMock.mockClear();\n+    loadAllMock.mockClear();\n });\n \n describe(\"ZoweApi\", () => {\n+    it(\"listZOSMFProfiles returns map of founded profiles\", async () => {\n+        const profile = {\n+            name: \"foo\",\n+            password: \"bar\",\n+        };\n+        const profileFound = {\n+            name: \"profileName\",\n+            failNotFound: true,\n+            profile: profile,\n+        };\n+        const profileNotFound = {\n+            name: \"wrongName\",\n+            failNotFound: false,\n+        };\n+        loadAllMock.mockResolvedValue([profileFound, profileNotFound]);\n+        const zoweApi = new ZoweApi();", "originalCommit": "7eebffe9d4252e9a8cc27977eccefbecdffaafaa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc2MDQwNQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/379#discussion_r436760405", "bodyText": "Make sense. Thanks.", "author": "grianbrcom", "createdAt": "2020-06-08T14:39:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY4MTQyNg=="}], "type": "inlineReview"}, {"oid": "a9a49a492109c0330cbe590164ec02acb86238da", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/a9a49a492109c0330cbe590164ec02acb86238da", "message": "test: Add ZoweApi unit tests for client\n\nSigned-off-by: Anton Grigorev <anton.grigorev@broadcom.com>", "committedDate": "2020-06-08T14:55:15Z", "type": "commit"}, {"oid": "a9a49a492109c0330cbe590164ec02acb86238da", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/a9a49a492109c0330cbe590164ec02acb86238da", "message": "test: Add ZoweApi unit tests for client\n\nSigned-off-by: Anton Grigorev <anton.grigorev@broadcom.com>", "committedDate": "2020-06-08T14:55:15Z", "type": "forcePushed"}]}