{"pr_number": 684, "pr_title": "Improve variable definition", "pr_createdAt": "2020-11-30T16:07:49Z", "pr_url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/684", "timeline": [{"oid": "f21d22039df962869d9d623019c224246db5763a", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/f21d22039df962869d9d623019c224246db5763a", "message": "refactor: Decompose variable definition rules\n\nExtract subrules that require special processing", "committedDate": "2020-11-30T11:01:56Z", "type": "commit"}, {"oid": "5a35b08ca93878e9d253d5d330050b1587f3ed52", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/5a35b08ca93878e9d253d5d330050b1587f3ed52", "message": "refactor: Extend the variable type model\n\nSupport all the basic types", "committedDate": "2020-11-30T13:27:51Z", "type": "commit"}, {"oid": "5c4ae800e65f9db1eece998dc681a0b54524ab28", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/5c4ae800e65f9db1eece998dc681a0b54524ab28", "message": "refactor: Provide variable defintion delegate #585\n\nCreate a framework to validate and collect variable defintions as a\ndelegate for the CobolVisitor.", "committedDate": "2020-12-01T13:24:01Z", "type": "commit"}, {"oid": "5c4ae800e65f9db1eece998dc681a0b54524ab28", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/5c4ae800e65f9db1eece998dc681a0b54524ab28", "message": "refactor: Provide variable defintion delegate #585\n\nCreate a framework to validate and collect variable defintions as a\ndelegate for the CobolVisitor.", "committedDate": "2020-12-01T13:24:01Z", "type": "forcePushed"}, {"oid": "c45b12f4169ee3054260b9389d9ac05fb0921f23", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/c45b12f4169ee3054260b9389d9ac05fb0921f23", "message": "refactor: Make usages a property of variable #585\n\nDue to the variables are made unique by qualifier, the \"usages\"\nfunctionality may be merged inside the variable type model.", "committedDate": "2020-12-02T14:04:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIyOTYwOA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/684#discussion_r534229608", "bodyText": "What if the variable has two definitions?", "author": "grianbrcom", "createdAt": "2020-12-02T14:54:35Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/model/variables/AbstractVariable.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.broadcom.lsp.cobol.core.model.variables;\n+\n+import com.broadcom.lsp.cobol.core.model.Locality;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.NonNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/** This abstract class implements the functionality that is common for all the variables. */\n+@AllArgsConstructor\n+public abstract class AbstractVariable implements Variable {\n+  @Getter protected final String name;\n+  @Getter protected final String qualifier;\n+  @Getter protected final Locality definition;", "originalCommit": "c45b12f4169ee3054260b9389d9ac05fb0921f23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEwNjcwMg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/684#discussion_r535106702", "bodyText": "The uniquity check is applied on usage, so this case is valid", "author": "temanbrcom", "createdAt": "2020-12-03T11:04:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIyOTYwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIzMzk3OQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/684#discussion_r534233979", "bodyText": "levelNumber I guess", "author": "grianbrcom", "createdAt": "2020-12-02T14:59:26Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/model/variables/GroupItem.java", "diffHunk": "@@ -16,46 +16,26 @@\n package com.broadcom.lsp.cobol.core.model.variables;\n \n import com.broadcom.lsp.cobol.core.model.Locality;\n+import com.broadcom.lsp.cobol.core.preprocessor.delegates.util.VariableUtils;\n+import lombok.EqualsAndHashCode;\n import lombok.Value;\n \n-import lombok.NonNull;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import static java.util.Collections.unmodifiableList;\n-\n /**\n  * This value class represents a group item COBOL variable. Group elements can have nested\n  * variables. They cannot have neither PIC nor VALUE clauses. Can be the top element of the\n  * structure with level 01, as well as nested ones with higher level numbers.\n  */\n @Value\n-public class GroupItem implements StructuredVariable {\n-  private String name;\n-  private Locality definition;\n-  private List<Variable> children = new ArrayList<>();\n-\n-  public GroupItem(@NonNull String name, @NonNull Locality definition) {\n-    this.name = name;\n-    this.definition = definition;\n-  }\n+@EqualsAndHashCode(callSuper = true)\n+public class GroupItem extends StructuredVariable {\n \n-  /**\n-   * Add a new nested variable to this structure\n-   *\n-   * @param child - a nested variable. Can be a group or element, or all the other allowed type\n-   *     item.\n-   */\n-  public void addChild(Variable child) {\n-    children.add(child);\n+  public GroupItem(int number, String name, String qualifier, Locality definition) {", "originalCommit": "c45b12f4169ee3054260b9389d9ac05fb0921f23", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIzNTk0MQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/684#discussion_r534235941", "bodyText": "Do we need to check if it is renamable before rename it?", "author": "grianbrcom", "createdAt": "2020-12-02T15:01:53Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/model/variables/GroupItem.java", "diffHunk": "@@ -16,46 +16,26 @@\n package com.broadcom.lsp.cobol.core.model.variables;\n \n import com.broadcom.lsp.cobol.core.model.Locality;\n+import com.broadcom.lsp.cobol.core.preprocessor.delegates.util.VariableUtils;\n+import lombok.EqualsAndHashCode;\n import lombok.Value;\n \n-import lombok.NonNull;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import static java.util.Collections.unmodifiableList;\n-\n /**\n  * This value class represents a group item COBOL variable. Group elements can have nested\n  * variables. They cannot have neither PIC nor VALUE clauses. Can be the top element of the\n  * structure with level 01, as well as nested ones with higher level numbers.\n  */\n @Value\n-public class GroupItem implements StructuredVariable {\n-  private String name;\n-  private Locality definition;\n-  private List<Variable> children = new ArrayList<>();\n-\n-  public GroupItem(@NonNull String name, @NonNull Locality definition) {\n-    this.name = name;\n-    this.definition = definition;\n-  }\n+@EqualsAndHashCode(callSuper = true)\n+public class GroupItem extends StructuredVariable {\n \n-  /**\n-   * Add a new nested variable to this structure\n-   *\n-   * @param child - a nested variable. Can be a group or element, or all the other allowed type\n-   *     item.\n-   */\n-  public void addChild(Variable child) {\n-    children.add(child);\n+  public GroupItem(int number, String name, String qualifier, Locality definition) {\n+    super(name, qualifier, definition, number);\n   }\n \n-  /**\n-   * Return a list of already defined nested variables\n-   *\n-   * @return defined nested variables.\n-   */\n-  public List<Variable> getChildren() {\n-    return unmodifiableList(children);\n+  @Override\n+  public Variable rename(String renameItemName) {", "originalCommit": "c45b12f4169ee3054260b9389d9ac05fb0921f23", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIzNzgwNQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/684#discussion_r534237805", "bodyText": "If it is not renamable, then why rename didn't throw an error?", "author": "grianbrcom", "createdAt": "2020-12-02T15:04:19Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/model/variables/IndependentDataItem.java", "diffHunk": "@@ -25,10 +26,30 @@\n  * explicitly defined value; both as Strings. They cannot produce a structure in any way.\n  */\n @Value\n-@AllArgsConstructor\n-public class IndependentDataItem implements Variable {\n-  private String name;\n+@EqualsAndHashCode(callSuper = true)\n+public class IndependentDataItem extends AbstractVariable {\n   private String picClause;\n   private String value;\n-  private Locality definition;\n+\n+  public IndependentDataItem(\n+      String name, String qualifier, Locality definition, String picClause, String value) {\n+    super(name, qualifier, definition);\n+    this.picClause = picClause;\n+    this.value = value;\n+  }\n+\n+  @Override\n+  public Variable rename(String renameItemName) {\n+    return new IndependentDataItem(\n+        name,\n+        VariableUtils.renameQualifier(qualifier, renameItemName),\n+        definition,\n+        picClause,\n+        value);\n+  }\n+\n+  @Override\n+  public boolean isRenameable() {\n+    return false;", "originalCommit": "c45b12f4169ee3054260b9389d9ac05fb0921f23", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0OTE4Ng==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/684#discussion_r534249186", "bodyText": "This is odd.", "author": "grianbrcom", "createdAt": "2020-12-02T15:19:01Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/model/variables/Renameable.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.broadcom.lsp.cobol.core.model.variables;\n+\n+/**\n+ * This interface contains methods to apply the RENAME function (e.g. add the given variable to the\n+ * structure of the caller). Not all the variable types allow this function, so each implementation\n+ * should apply own check. For the variable renaming means creating a new one with the qualifier\n+ * which top point to the caller.\n+ *\n+ * <p>NOTICE: This interface does not have anything to do with the renaming from LSP point of view.\n+ */\n+public interface Renameable {\n+\n+  /**\n+   * Check if this variable allows renaming depending on its type.\n+   *\n+   * @return true if a variable of that type allows renaming\n+   */\n+  boolean isRenameable();\n+\n+  /**\n+   * Create a new variable which qualifier points to a different structure. Effectively, copy the\n+   * variable to add it as a child to the variable with the given name. Used in RENAME clause.\n+   * Should be implemented even if the variable doesn't allow renaming.", "originalCommit": "c45b12f4169ee3054260b9389d9ac05fb0921f23", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "67631bc92f99bc9dc22f3b0467cb86f5f47b9e7d", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/67631bc92f99bc9dc22f3b0467cb86f5f47b9e7d", "message": "refactor: Make renaming return null if not applicable", "committedDate": "2020-12-03T11:03:19Z", "type": "commit"}]}