{"pr_number": 649, "pr_title": "test : Get rid of DI in the unit test #261", "pr_createdAt": "2020-11-13T10:53:22Z", "pr_url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg3NTQ1NQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r522875455", "bodyText": "Have kept this one test file with DI for the integration test.", "author": "ap891843", "createdAt": "2020-11-13T10:54:24Z", "path": "server/src/test/java/com/broadcom/lsp/cobol/service/ClientServerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.broadcom.lsp.cobol.service;\n+\n+import com.broadcom.lsp.cobol.ConfigurableTest;\n+import com.broadcom.lsp.cobol.positive.CobolText;\n+import com.broadcom.lsp.cobol.service.delegates.validations.UseCaseUtils;\n+import com.broadcom.lsp.cobol.service.mocks.TestLanguageClient;\n+import com.broadcom.lsp.cobol.service.mocks.TestLanguageServer;\n+import com.google.inject.Inject;\n+import org.eclipse.lsp4j.*;\n+import org.eclipse.lsp4j.services.LanguageServer;\n+import org.eclipse.lsp4j.services.TextDocumentService;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test the LSP specification for shutdown request\n+ *\n+ * <p>Doc ref: https://microsoft.github.io/language-server-protocol/specification#shutdown\n+ */\n+public class ClientServerIntegrationTest extends ConfigurableTest {", "originalCommit": "006d3fc30e279232ac19a57284b3b10da5f27336", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg3NTk3OQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r522875979", "bodyText": "Made changes in ConfigurableTest. No need to manually inject the object.", "author": "ap891843", "createdAt": "2020-11-13T10:55:21Z", "path": "server/src/test/java/com/broadcom/lsp/cobol/service/ClientServerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.broadcom.lsp.cobol.service;\n+\n+import com.broadcom.lsp.cobol.ConfigurableTest;\n+import com.broadcom.lsp.cobol.positive.CobolText;\n+import com.broadcom.lsp.cobol.service.delegates.validations.UseCaseUtils;\n+import com.broadcom.lsp.cobol.service.mocks.TestLanguageClient;\n+import com.broadcom.lsp.cobol.service.mocks.TestLanguageServer;\n+import com.google.inject.Inject;\n+import org.eclipse.lsp4j.*;\n+import org.eclipse.lsp4j.services.LanguageServer;\n+import org.eclipse.lsp4j.services.TextDocumentService;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test the LSP specification for shutdown request\n+ *\n+ * <p>Doc ref: https://microsoft.github.io/language-server-protocol/specification#shutdown\n+ */\n+public class ClientServerIntegrationTest extends ConfigurableTest {\n+\n+  private static final String SHUTDOWN_RESPONSE = \"InvalidRequest\";\n+  private static final String INCORRECT_TEXT_EXAMPLE = \"       IDENTIFICATION DIVISIONs.\";\n+  private static final String TEXT_EXAMPLE = \"       IDENTIFICATION DIVISION.\";\n+  private static final String CPY_DOCUMENT_URI = \"file:///.copybooks/CPYTEST.cpy\";\n+  private static final String LANGUAGE = \"COBOL\";\n+  private static final String CPY_EXTENSION = \"cpy\";\n+  private static final Position TEST_COPYBOOK1 = new Position(20, 14);\n+  private static final Position TEST_COPYBOOK2 = new Position(21, 14);\n+  private static final int COPY_LENGTH = \"CPYBK1\".length();\n+  private static final String COPYBOOK1 = \"       COPY CPYBK1.\";\n+  private static final String COPYBOOK2 = \"       COPY CPYBK2.\";\n+  private static final String TEXT =\n+      \"       Identification Division. \\n\"\n+          + \"       Program-id.    ProgramId.\\n\"\n+          + \"       Data Division.\\n\"\n+          + \"       Working-Storage Section.\\n\"\n+          + \"       01   outer1. \\n\"\n+          + \"        02   inner1      PIC 9(4) Binary. \\n\"\n+          + \"        02   inner2      PIC X(10).\\n\"\n+          + \"       01   outer2.\\n\"\n+          + \"        02   inner1      PIC 9(4) Binary. \\n\"\n+          + \"        02   inner2      PIC X(10).\\n\"\n+          + \"       02   Str          PIC 9(4) Binary. \\n\"\n+          + \"       Procedure Division.\\n\"\n+          + \"       000-Main-Logic.\\n\"\n+          + \"           Perform 100-Test.\\n\"\n+          + \"           Stop Run.\\n\"\n+          + \"       100-Test.\\n\"\n+          + \"           Move inner1 of outer1 to Str.\\n\"\n+          + \"           Move inner2 of outer1 to Str.\\n\"\n+          + \"           Move inner1 of outer2 to Str.\\n\"\n+          + \"           Move inner2 of outer2 to Str.\\n\"\n+          + \"       COPY CPYBK1.\\n\"\n+          + \"       COPY CPYBK2.\\n\"\n+          + \"       COPY CPYBK1.\\n\"\n+          + \"       End program ProgramId.\";\n+  @Inject TextDocumentService service;", "originalCommit": "006d3fc30e279232ac19a57284b3b10da5f27336", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkxNjI3NA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r522916274", "bodyText": "This test should check the actual TrimFormation behavior.\nIt was done incorrectly from the beginning, and it would be better to split it into unit tests for TrimFormation, Formation, and one more test method in CobolTextDocumentServiceTest that checks that the formatting calls the Formations delegate", "author": "temanbrcom", "createdAt": "2020-11-13T12:21:11Z", "path": "server/src/test/java/com/broadcom/lsp/cobol/usecases/TestFormatTrim.java", "diffHunk": "@@ -34,33 +35,51 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.fail;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.when;\n \n-class TestFormatTrim extends ConfigurableTest {\n+class TestFormatTrim extends MockTextDocumentService {\n   private static final String ID = \"id\";\n-\n-  private TextDocumentService service;\n-  private TestLanguageClient client;\n-\n   private static final Pattern RTRIM = Pattern.compile(\"\\\\s+$\");\n-\n   private static final String TEXT =\n       \"000000 Identification DIVISION.                                         23323232\\r\\n\"\n           + \"002800 Program-ID.                                                      23323232  \\r\\n\"\n           + \"002800  HELLOWORLD.                                                     233232322@\\t                                          \\r\\n\"\n           + \"223d3& AUTHOR.\\r\\n\"\n           + \"002800 INPUT-OUTPUT SECTION.                                            23323232  \";\n+  private TextDocumentService service;\n+\n+  private static String rtrim(String s) {\n+    return RTRIM.matcher(s).replaceAll(\"\");\n+  }\n \n   @BeforeEach\n   void createService() {\n-    service = injector.getInstance(TextDocumentService.class);\n-    client = injector.getInstance(TestLanguageClient.class);\n-    client.clean();\n+    service = getMockedTextDocumentService();\n+    when(engine.analyze(anyString(), anyString(), any(CopybookProcessingMode.class)))\n+        .thenReturn(AnalysisResult.empty());\n     service.didOpen(new DidOpenTextDocumentParams(new TextDocumentItem(ID, \"COBOL\", 1, TEXT)));\n   }\n \n   @Test\n   void testTrimming() {\n-    UseCaseUtils.waitForDiagnostics(client);\n+    when(formations.format(any(CobolDocumentModel.class)))", "originalCommit": "006d3fc30e279232ac19a57284b3b10da5f27336", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkxODQxOA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r522918418", "bodyText": "This test should be converted to a proper unit test for the Occurrences delegate framework and check the actual behavior of the classes.", "author": "temanbrcom", "createdAt": "2020-11-13T12:26:01Z", "path": "server/src/test/java/com/broadcom/lsp/cobol/service/delegates/references/DocumentOccurrencesTest.java", "diffHunk": "@@ -32,68 +32,47 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.when;\n \n /** This class checks the expected behavior of Go to Definition request resolving. */\n-class DocumentOccurrencesTest extends ConfigurableTest {\n-  private static final String TEXT =\n-      \"       Identification Division. \\n\"\n-          + \"       Program-id.    ProgramId.\\n\"\n-          + \"       Data Division.\\n\"\n-          + \"       Working-Storage Section.\\n\"\n-          + \"       01   outer1. \\n\"\n-          + \"        02   inner1      PIC 9(4) Binary. \\n\"\n-          + \"        02   inner2      PIC X(10).\\n\"\n-          + \"       01   outer2.\\n\"\n-          + \"        02   inner1      PIC 9(4) Binary. \\n\"\n-          + \"        02   inner2      PIC X(10).\\n\"\n-          + \"       02   Str          PIC 9(4) Binary. \\n\"\n-          + \"       Procedure Division.\\n\"\n-          + \"       000-Main-Logic.\\n\"\n-          + \"           Perform 100-Test.\\n\"\n-          + \"           Stop Run.\\n\"\n-          + \"       100-Test.\\n\"\n-          + \"           Move inner1 of outer1 to Str.\\n\"\n-          + \"           Move inner2 of outer1 to Str.\\n\"\n-          + \"           Move inner1 of outer2 to Str.\\n\"\n-          + \"           Move inner2 of outer2 to Str.\\n\"\n-          + \"       COPY CPYBK1.\\n\"\n-          + \"       COPY CPYBK2.\\n\"\n-          + \"       COPY CPYBK1.\\n\"\n-          + \"       End program ProgramId.\";\n+class DocumentOccurrencesTest extends MockTextDocumentService {", "originalCommit": "006d3fc30e279232ac19a57284b3b10da5f27336", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkyMjgzNg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r522922836", "bodyText": "This test should work directly with the Completions class, providing a predefined model to retrieve completion suggestions.", "author": "temanbrcom", "createdAt": "2020-11-13T12:35:29Z", "path": "server/src/test/java/com/broadcom/lsp/cobol/service/delegates/completions/CompletionsChainTest.java", "diffHunk": "@@ -65,11 +65,11 @@\n           + \"       200-Get-Date. A\\n\"\n           + \"       300-Say-Goodbye.\\n\"\n           + \"       End program ProgramId.\";\n+  @Inject private TextDocumentService service;\n+  @Inject private TestLanguageClient client;\n \n   @BeforeEach\n   void createService() {\n-    service = injector.getInstance(TextDocumentService.class);\n-    TestLanguageClient client = injector.getInstance(TestLanguageClient.class);\n     client.clean();\n     runTextValidation(service, TEXT);\n     waitForDiagnostics(client);", "originalCommit": "006d3fc30e279232ac19a57284b3b10da5f27336", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkyNTIwMg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r522925202", "bodyText": "May be replaced with Communications mock to avoid awaiting.", "author": "temanbrcom", "createdAt": "2020-11-13T12:40:18Z", "path": "server/src/test/java/com/broadcom/lsp/cobol/service/ClientServerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.broadcom.lsp.cobol.service;\n+\n+import com.broadcom.lsp.cobol.ConfigurableTest;\n+import com.broadcom.lsp.cobol.positive.CobolText;\n+import com.broadcom.lsp.cobol.service.delegates.validations.UseCaseUtils;\n+import com.broadcom.lsp.cobol.service.mocks.TestLanguageClient;\n+import com.broadcom.lsp.cobol.service.mocks.TestLanguageServer;\n+import com.google.inject.Inject;\n+import org.eclipse.lsp4j.*;\n+import org.eclipse.lsp4j.services.LanguageServer;\n+import org.eclipse.lsp4j.services.TextDocumentService;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test the LSP specification for shutdown request\n+ *\n+ * <p>Doc ref: https://microsoft.github.io/language-server-protocol/specification#shutdown\n+ */\n+public class ClientServerIntegrationTest extends ConfigurableTest {\n+\n+  private static final String SHUTDOWN_RESPONSE = \"InvalidRequest\";\n+  private static final String INCORRECT_TEXT_EXAMPLE = \"       IDENTIFICATION DIVISIONs.\";\n+  private static final String TEXT_EXAMPLE = \"       IDENTIFICATION DIVISION.\";\n+  private static final String CPY_DOCUMENT_URI = \"file:///.copybooks/CPYTEST.cpy\";\n+  private static final String LANGUAGE = \"COBOL\";\n+  private static final String CPY_EXTENSION = \"cpy\";\n+  private static final Position TEST_COPYBOOK1 = new Position(20, 14);\n+  private static final Position TEST_COPYBOOK2 = new Position(21, 14);\n+  private static final int COPY_LENGTH = \"CPYBK1\".length();\n+  private static final String COPYBOOK1 = \"       COPY CPYBK1.\";\n+  private static final String COPYBOOK2 = \"       COPY CPYBK2.\";\n+  private static final String TEXT =\n+      \"       Identification Division. \\n\"\n+          + \"       Program-id.    ProgramId.\\n\"\n+          + \"       Data Division.\\n\"\n+          + \"       Working-Storage Section.\\n\"\n+          + \"       01   outer1. \\n\"\n+          + \"        02   inner1      PIC 9(4) Binary. \\n\"\n+          + \"        02   inner2      PIC X(10).\\n\"\n+          + \"       01   outer2.\\n\"\n+          + \"        02   inner1      PIC 9(4) Binary. \\n\"\n+          + \"        02   inner2      PIC X(10).\\n\"\n+          + \"       02   Str          PIC 9(4) Binary. \\n\"\n+          + \"       Procedure Division.\\n\"\n+          + \"       000-Main-Logic.\\n\"\n+          + \"           Perform 100-Test.\\n\"\n+          + \"           Stop Run.\\n\"\n+          + \"       100-Test.\\n\"\n+          + \"           Move inner1 of outer1 to Str.\\n\"\n+          + \"           Move inner2 of outer1 to Str.\\n\"\n+          + \"           Move inner1 of outer2 to Str.\\n\"\n+          + \"           Move inner2 of outer2 to Str.\\n\"\n+          + \"       COPY CPYBK1.\\n\"\n+          + \"       COPY CPYBK2.\\n\"\n+          + \"       COPY CPYBK1.\\n\"\n+          + \"       End program ProgramId.\";\n+  @Inject TextDocumentService service;\n+  @Inject LanguageServer server;\n+  @Inject TestLanguageClient client;\n+  @Inject CopybookService copybookService;\n+\n+  /**\n+   * This method tests that after a shutdown request, {@link TextDocumentService} always return\n+   * SHUTDOWN_RESPONSE\n+   *\n+   * @throws ExecutionException\n+   * @throws InterruptedException\n+   */\n+  @Test\n+  void whenShutdownIsFired_ThenNewRequestReturnInvalidResponse()\n+      throws ExecutionException, InterruptedException {\n+\n+    server.shutdown();\n+    assertEquals(0, ((DisposableLanguageServer) server).getExitCode());\n+\n+    CodeActionParams params =\n+        new CodeActionParams(new TextDocumentIdentifier(UseCaseUtils.DOCUMENT_URI), null, null);\n+    CompletionParams completionParams =\n+        new CompletionParams(\n+            new TextDocumentIdentifier(UseCaseUtils.DOCUMENT_URI), new Position(0, 8));\n+\n+    Position position = new Position(0, 2);\n+    TextDocumentIdentifier testTextDocumentIdentifier =\n+        new TextDocumentIdentifier(UseCaseUtils.DOCUMENT_URI);\n+    TextDocumentPositionParams positionParams =\n+        new TextDocumentPositionParams(testTextDocumentIdentifier, position);\n+    ReferenceParams referenceParams = new ReferenceParams();\n+\n+    assertEquals(SHUTDOWN_RESPONSE, service.codeAction(params).get()); // NOSONAR\n+    assertEquals(SHUTDOWN_RESPONSE, service.definition(positionParams).get()); // NOSONAR\n+    assertEquals(SHUTDOWN_RESPONSE, service.completion(completionParams).get()); // NOSONAR\n+    assertEquals(SHUTDOWN_RESPONSE, service.references(referenceParams).get()); // NOSONAR\n+    assertEquals(SHUTDOWN_RESPONSE, service.documentHighlight(positionParams).get()); // NOSONAR\n+    assertEquals(\n+        SHUTDOWN_RESPONSE, service.formatting(new DocumentFormattingParams()).get()); // NOSONAR\n+\n+    List<TextDocumentContentChangeEvent> textEdits = new ArrayList<>();\n+    textEdits.add(new TextDocumentContentChangeEvent(INCORRECT_TEXT_EXAMPLE));\n+    service.didChange(\n+        new DidChangeTextDocumentParams(\n+            new VersionedTextDocumentIdentifier(UseCaseUtils.DOCUMENT_URI, 0), textEdits));\n+\n+    service.didClose(\n+        new DidCloseTextDocumentParams(new TextDocumentIdentifier(UseCaseUtils.DOCUMENT_URI)));\n+\n+    ((TestLanguageServer) server).revokeShutdown();\n+    assertEquals(1, ((DisposableLanguageServer) server).getExitCode());\n+  }\n+\n+  @Test\n+  void testIncorrectLanguageId() {\n+\n+    service.didOpen(\n+        new DidOpenTextDocumentParams(\n+            new TextDocumentItem(UseCaseUtils.DOCUMENT_URI, \"incorrectId\", 1, TEXT_EXAMPLE)));\n+    UseCaseUtils.await(() -> !client.getMessagesToShow().isEmpty());\n+    assertTrue(\n+        client.getMessagesToShow().stream()\n+            .map((Function<MessageParams, Object>) MessageParams::getMessage)\n+            .anyMatch(\n+                it ->\n+                    it.toString()\n+                        .equals(\n+                            \"Cannot find a language engine for the given language ID: incorrectId\")));\n+  }\n+\n+  @Test\n+  void testNotAllowedFileExtensionAnalysis() {\n+    service.didOpen(\n+        new DidOpenTextDocumentParams(\n+            new TextDocumentItem(CPY_DOCUMENT_URI, LANGUAGE, 1, TEXT_EXAMPLE)));\n+    UseCaseUtils.await(() -> !client.getMessagesToLog().isEmpty());\n+    assertTrue(\n+        client.getMessagesToLog().stream()\n+            .map((Function<MessageParams, Object>) MessageParams::getMessage)\n+            .anyMatch(\n+                it ->\n+                    it.toString()\n+                        .equals(\"The given document extension is unsupported: \" + CPY_EXTENSION)));", "originalCommit": "006d3fc30e279232ac19a57284b3b10da5f27336", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEyNjk2OQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r524126969", "bodyText": "This test is covered in CobolTextDocumentServiceTest , where we check that it delegates to communication. And ServerCommunicationsTest has its own unit test cases. Removing these tests as I don't think we need these.", "author": "ap891843", "createdAt": "2020-11-16T11:03:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkyNTIwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkyNTg1MQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r522925851", "bodyText": "Those methods are deprecated and may be replaced by mocking the LanguageEngineFacade", "author": "temanbrcom", "createdAt": "2020-11-13T12:41:49Z", "path": "server/src/test/java/com/broadcom/lsp/cobol/service/ClientServerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.broadcom.lsp.cobol.service;\n+\n+import com.broadcom.lsp.cobol.ConfigurableTest;\n+import com.broadcom.lsp.cobol.positive.CobolText;\n+import com.broadcom.lsp.cobol.service.delegates.validations.UseCaseUtils;\n+import com.broadcom.lsp.cobol.service.mocks.TestLanguageClient;\n+import com.broadcom.lsp.cobol.service.mocks.TestLanguageServer;\n+import com.google.inject.Inject;\n+import org.eclipse.lsp4j.*;\n+import org.eclipse.lsp4j.services.LanguageServer;\n+import org.eclipse.lsp4j.services.TextDocumentService;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test the LSP specification for shutdown request\n+ *\n+ * <p>Doc ref: https://microsoft.github.io/language-server-protocol/specification#shutdown\n+ */\n+public class ClientServerIntegrationTest extends ConfigurableTest {\n+\n+  private static final String SHUTDOWN_RESPONSE = \"InvalidRequest\";\n+  private static final String INCORRECT_TEXT_EXAMPLE = \"       IDENTIFICATION DIVISIONs.\";\n+  private static final String TEXT_EXAMPLE = \"       IDENTIFICATION DIVISION.\";\n+  private static final String CPY_DOCUMENT_URI = \"file:///.copybooks/CPYTEST.cpy\";\n+  private static final String LANGUAGE = \"COBOL\";\n+  private static final String CPY_EXTENSION = \"cpy\";\n+  private static final Position TEST_COPYBOOK1 = new Position(20, 14);\n+  private static final Position TEST_COPYBOOK2 = new Position(21, 14);\n+  private static final int COPY_LENGTH = \"CPYBK1\".length();\n+  private static final String COPYBOOK1 = \"       COPY CPYBK1.\";\n+  private static final String COPYBOOK2 = \"       COPY CPYBK2.\";\n+  private static final String TEXT =\n+      \"       Identification Division. \\n\"\n+          + \"       Program-id.    ProgramId.\\n\"\n+          + \"       Data Division.\\n\"\n+          + \"       Working-Storage Section.\\n\"\n+          + \"       01   outer1. \\n\"\n+          + \"        02   inner1      PIC 9(4) Binary. \\n\"\n+          + \"        02   inner2      PIC X(10).\\n\"\n+          + \"       01   outer2.\\n\"\n+          + \"        02   inner1      PIC 9(4) Binary. \\n\"\n+          + \"        02   inner2      PIC X(10).\\n\"\n+          + \"       02   Str          PIC 9(4) Binary. \\n\"\n+          + \"       Procedure Division.\\n\"\n+          + \"       000-Main-Logic.\\n\"\n+          + \"           Perform 100-Test.\\n\"\n+          + \"           Stop Run.\\n\"\n+          + \"       100-Test.\\n\"\n+          + \"           Move inner1 of outer1 to Str.\\n\"\n+          + \"           Move inner2 of outer1 to Str.\\n\"\n+          + \"           Move inner1 of outer2 to Str.\\n\"\n+          + \"           Move inner2 of outer2 to Str.\\n\"\n+          + \"       COPY CPYBK1.\\n\"\n+          + \"       COPY CPYBK2.\\n\"\n+          + \"       COPY CPYBK1.\\n\"\n+          + \"       End program ProgramId.\";\n+  @Inject TextDocumentService service;\n+  @Inject LanguageServer server;\n+  @Inject TestLanguageClient client;\n+  @Inject CopybookService copybookService;\n+\n+  /**\n+   * This method tests that after a shutdown request, {@link TextDocumentService} always return\n+   * SHUTDOWN_RESPONSE\n+   *\n+   * @throws ExecutionException\n+   * @throws InterruptedException\n+   */\n+  @Test\n+  void whenShutdownIsFired_ThenNewRequestReturnInvalidResponse()\n+      throws ExecutionException, InterruptedException {\n+\n+    server.shutdown();\n+    assertEquals(0, ((DisposableLanguageServer) server).getExitCode());\n+\n+    CodeActionParams params =\n+        new CodeActionParams(new TextDocumentIdentifier(UseCaseUtils.DOCUMENT_URI), null, null);\n+    CompletionParams completionParams =\n+        new CompletionParams(\n+            new TextDocumentIdentifier(UseCaseUtils.DOCUMENT_URI), new Position(0, 8));\n+\n+    Position position = new Position(0, 2);\n+    TextDocumentIdentifier testTextDocumentIdentifier =\n+        new TextDocumentIdentifier(UseCaseUtils.DOCUMENT_URI);\n+    TextDocumentPositionParams positionParams =\n+        new TextDocumentPositionParams(testTextDocumentIdentifier, position);\n+    ReferenceParams referenceParams = new ReferenceParams();\n+\n+    assertEquals(SHUTDOWN_RESPONSE, service.codeAction(params).get()); // NOSONAR\n+    assertEquals(SHUTDOWN_RESPONSE, service.definition(positionParams).get()); // NOSONAR\n+    assertEquals(SHUTDOWN_RESPONSE, service.completion(completionParams).get()); // NOSONAR\n+    assertEquals(SHUTDOWN_RESPONSE, service.references(referenceParams).get()); // NOSONAR\n+    assertEquals(SHUTDOWN_RESPONSE, service.documentHighlight(positionParams).get()); // NOSONAR\n+    assertEquals(\n+        SHUTDOWN_RESPONSE, service.formatting(new DocumentFormattingParams()).get()); // NOSONAR\n+\n+    List<TextDocumentContentChangeEvent> textEdits = new ArrayList<>();\n+    textEdits.add(new TextDocumentContentChangeEvent(INCORRECT_TEXT_EXAMPLE));\n+    service.didChange(\n+        new DidChangeTextDocumentParams(\n+            new VersionedTextDocumentIdentifier(UseCaseUtils.DOCUMENT_URI, 0), textEdits));\n+\n+    service.didClose(\n+        new DidCloseTextDocumentParams(new TextDocumentIdentifier(UseCaseUtils.DOCUMENT_URI)));\n+\n+    ((TestLanguageServer) server).revokeShutdown();\n+    assertEquals(1, ((DisposableLanguageServer) server).getExitCode());\n+  }\n+\n+  @Test\n+  void testIncorrectLanguageId() {\n+\n+    service.didOpen(\n+        new DidOpenTextDocumentParams(\n+            new TextDocumentItem(UseCaseUtils.DOCUMENT_URI, \"incorrectId\", 1, TEXT_EXAMPLE)));\n+    UseCaseUtils.await(() -> !client.getMessagesToShow().isEmpty());\n+    assertTrue(\n+        client.getMessagesToShow().stream()\n+            .map((Function<MessageParams, Object>) MessageParams::getMessage)\n+            .anyMatch(\n+                it ->\n+                    it.toString()\n+                        .equals(\n+                            \"Cannot find a language engine for the given language ID: incorrectId\")));\n+  }\n+\n+  @Test\n+  void testNotAllowedFileExtensionAnalysis() {\n+    service.didOpen(\n+        new DidOpenTextDocumentParams(\n+            new TextDocumentItem(CPY_DOCUMENT_URI, LANGUAGE, 1, TEXT_EXAMPLE)));\n+    UseCaseUtils.await(() -> !client.getMessagesToLog().isEmpty());\n+    assertTrue(\n+        client.getMessagesToLog().stream()\n+            .map((Function<MessageParams, Object>) MessageParams::getMessage)\n+            .anyMatch(\n+                it ->\n+                    it.toString()\n+                        .equals(\"The given document extension is unsupported: \" + CPY_EXTENSION)));\n+  }\n+\n+  @Test\n+  void testFindMultipleCopybookReferences() throws ExecutionException, InterruptedException {\n+    setUpCopybook();\n+    List<? extends Location> locations = invokeReferencesRequest(TEST_COPYBOOK1, true);\n+    assertEquals(4, locations.size());\n+\n+    assertContainsRange(locations, range(20, 12, COPY_LENGTH));\n+    assertContainsRange(locations, range(22, 12, COPY_LENGTH));\n+  }\n+\n+  @Test\n+  void testFindSingleCopybookReference() throws ExecutionException, InterruptedException {\n+    setUpCopybook();\n+    List<? extends Location> locations = invokeReferencesRequest(TEST_COPYBOOK2, true);\n+    assertEquals(3, locations.size());\n+\n+    assertContainsRange(locations, range(21, 12, COPY_LENGTH));\n+  }\n+\n+  private void setUpCopybook() {\n+    client.clean();\n+    List.of(new CobolText(\"CPYBK1\", COPYBOOK1), new CobolText(\"CPYBK2\", COPYBOOK2)).stream()\n+        .map(UseCaseUtils::toCopybookModel)\n+        .forEach(copybookService::store);\n+    UseCaseUtils.runTextValidation(service, TEXT);\n+    UseCaseUtils.waitForDiagnostics(client);", "originalCommit": "006d3fc30e279232ac19a57284b3b10da5f27336", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEyOTA4MA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r524129080", "bodyText": "Have waited on the future. Not mocked as the className says integration test. But I am doubtful if we need these.", "author": "ap891843", "createdAt": "2020-11-16T11:05:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkyNTg1MQ=="}], "type": "inlineReview"}, {"oid": "6b998ad0b9f4012353ae1ce2964aa7464745cd28", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/6b998ad0b9f4012353ae1ce2964aa7464745cd28", "message": "test : Get rid of DI in the unit test #261\n\nSigned-off-by: ap891843 <aman.prashant@broadcom.com>", "committedDate": "2020-11-16T10:30:55Z", "type": "forcePushed"}, {"oid": "f66cae88bb1438be72cfd67923bc72d3a21da399", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/f66cae88bb1438be72cfd67923bc72d3a21da399", "message": "test : Get rid of DI in the unit test #261\n\nSigned-off-by: ap891843 <aman.prashant@broadcom.com>", "committedDate": "2020-11-16T11:01:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE1MDA2Ng==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r524150066", "bodyText": "This test fails intermittently. I see no reason why? Advice, please. \u2753", "author": "ap891843", "createdAt": "2020-11-16T11:24:27Z", "path": "server/src/test/java/com/broadcom/lsp/cobol/service/delegates/completions/CompletionsChainTest.java", "diffHunk": "@@ -14,84 +14,61 @@\n  */\n package com.broadcom.lsp.cobol.service.delegates.completions;\n \n-import com.broadcom.lsp.cobol.ConfigurableTest;\n-import com.broadcom.lsp.cobol.service.mocks.TestLanguageClient;\n+import com.broadcom.lsp.cobol.service.CobolDocumentModel;\n+import com.broadcom.lsp.cobol.service.delegates.validations.AnalysisResult;\n import org.eclipse.lsp4j.*;\n-import org.eclipse.lsp4j.jsonrpc.messages.Either;\n-import org.eclipse.lsp4j.services.TextDocumentService;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.mockito.stubbing.Answer;\n \n import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.ExecutionException;\n+import java.util.Map;\n+import java.util.Set;\n \n-import static com.broadcom.lsp.cobol.service.delegates.validations.UseCaseUtils.*;\n+import static com.broadcom.lsp.cobol.service.delegates.validations.UseCaseUtils.DOCUMENT_URI;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n /** This tests checks the order of completion elements: 1. Variables 2. Keywords */\n-class CompletionsChainTest extends ConfigurableTest {\n-  private TextDocumentService service;\n-  private static final String TEXT =\n-      \"       Identification Division. \\n\"\n-          + \"       Program-id.    ProgramId.\\n\"\n-          + \"       Data Division.\\n\"\n-          + \"       Working-Storage Section.\\n\"\n-          + \"       01   Feedback. \\n\"\n-          + \"        02   Fb-severity      PIC 9(4) Binary. \\n\"\n-          + \"        02   Ab-detail        PIC X(10).\\n\"\n-          + \"       77   Dest-output       PIC S9(9) Binary.\\n\"\n-          + \"       77   Lildate           PIC S9(9) Binary.\\n\"\n-          + \"       77   Lilsecs           COMP-2.\\n\"\n-          + \"       77   Greg              PIC X(17).\\n\"\n-          + \"       01   Pattern.\\n\"\n-          + \"        02                    PIC 9(4) Binary Value 45.\\n\"\n-          + \"        02                    PIC X(45) Value \\\"\\\".\\n\"\n-          + \"       77   Start-Msg         PIC X(80) Value \\\"\\\".\\n\"\n-          + \"       77   Ending-Msg        PIC X(80) Value \\\"\\\".\\n\"\n-          + \"       01 Msg.\\n\"\n-          + \"         02 Stringlen         PIC S9(4) Binary.\\n\"\n-          + \"         02 Str               .\\n\"\n-          + \"          03                  PIC X Occurs 1 to 80 times\\n\"\n-          + \"                                     Depending on Stringlen.\\n\"\n-          + \"       Procedure Division.\\n\"\n-          + \"       000-Main-Logic.\\n\"\n-          + \"           Perform 100-Say-Hello.\\n\"\n-          + \"           Perform 200-Get-Date.\\n\"\n-          + \"           Perform 300-Say-Goodbye.\\n\"\n-          + \"           Stop Run.\\n\"\n-          + \"       100-Say-Hello. f\\n\"\n-          + \"       200-Get-Date. A\\n\"\n-          + \"       300-Say-Goodbye.\\n\"\n-          + \"       End program ProgramId.\";\n+class CompletionsChainTest {", "originalCommit": "f66cae88bb1438be72cfd67923bc72d3a21da399", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIxOTM3OQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r524219379", "bodyText": "Thanks, @temanbrcom !", "author": "ap891843", "createdAt": "2020-11-16T12:29:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE1MDA2Ng=="}], "type": "inlineReview"}, {"oid": "61d4a8ba33619c83a8ec8c1600f256e803396317", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/61d4a8ba33619c83a8ec8c1600f256e803396317", "message": "test : Get rid of DI in the unit test #261\n\nSigned-off-by: ap891843 <aman.prashant@broadcom.com>", "committedDate": "2020-11-16T12:27:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE2MzQ1Nw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r524163457", "bodyText": "Nice idea, getDocs should be also marked this way", "author": "temanbrcom", "createdAt": "2020-11-16T11:36:40Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -110,6 +111,7 @@\n     return new HashMap<>(docs);\n   }\n \n+  @VisibleForTesting", "originalCommit": "f66cae88bb1438be72cfd67923bc72d3a21da399", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4NjA5Mg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r524286092", "bodyText": "done", "author": "ap891843", "createdAt": "2020-11-16T13:58:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE2MzQ1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzNTUyOA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r524235528", "bodyText": "Might be private", "author": "temanbrcom", "createdAt": "2020-11-16T12:44:24Z", "path": "server/src/test/java/com/broadcom/lsp/cobol/service/delegates/completions/CompletionsChainTest.java", "diffHunk": "@@ -14,84 +14,62 @@\n  */\n package com.broadcom.lsp.cobol.service.delegates.completions;\n \n-import com.broadcom.lsp.cobol.ConfigurableTest;\n-import com.broadcom.lsp.cobol.service.mocks.TestLanguageClient;\n+import com.broadcom.lsp.cobol.service.CobolDocumentModel;\n+import com.broadcom.lsp.cobol.service.delegates.validations.AnalysisResult;\n import org.eclipse.lsp4j.*;\n-import org.eclipse.lsp4j.jsonrpc.messages.Either;\n-import org.eclipse.lsp4j.services.TextDocumentService;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.mockito.stubbing.Answer;\n \n+import java.util.Comparator;\n import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.ExecutionException;\n+import java.util.Map;\n+import java.util.Set;\n \n-import static com.broadcom.lsp.cobol.service.delegates.validations.UseCaseUtils.*;\n+import static com.broadcom.lsp.cobol.service.delegates.validations.UseCaseUtils.DOCUMENT_URI;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n /** This tests checks the order of completion elements: 1. Variables 2. Keywords */\n-class CompletionsChainTest extends ConfigurableTest {\n-  private TextDocumentService service;\n-  private static final String TEXT =\n-      \"       Identification Division. \\n\"\n-          + \"       Program-id.    ProgramId.\\n\"\n-          + \"       Data Division.\\n\"\n-          + \"       Working-Storage Section.\\n\"\n-          + \"       01   Feedback. \\n\"\n-          + \"        02   Fb-severity      PIC 9(4) Binary. \\n\"\n-          + \"        02   Ab-detail        PIC X(10).\\n\"\n-          + \"       77   Dest-output       PIC S9(9) Binary.\\n\"\n-          + \"       77   Lildate           PIC S9(9) Binary.\\n\"\n-          + \"       77   Lilsecs           COMP-2.\\n\"\n-          + \"       77   Greg              PIC X(17).\\n\"\n-          + \"       01   Pattern.\\n\"\n-          + \"        02                    PIC 9(4) Binary Value 45.\\n\"\n-          + \"        02                    PIC X(45) Value \\\"\\\".\\n\"\n-          + \"       77   Start-Msg         PIC X(80) Value \\\"\\\".\\n\"\n-          + \"       77   Ending-Msg        PIC X(80) Value \\\"\\\".\\n\"\n-          + \"       01 Msg.\\n\"\n-          + \"         02 Stringlen         PIC S9(4) Binary.\\n\"\n-          + \"         02 Str               .\\n\"\n-          + \"          03                  PIC X Occurs 1 to 80 times\\n\"\n-          + \"                                     Depending on Stringlen.\\n\"\n-          + \"       Procedure Division.\\n\"\n-          + \"       000-Main-Logic.\\n\"\n-          + \"           Perform 100-Say-Hello.\\n\"\n-          + \"           Perform 200-Get-Date.\\n\"\n-          + \"           Perform 300-Say-Goodbye.\\n\"\n-          + \"           Stop Run.\\n\"\n-          + \"       100-Say-Hello. f\\n\"\n-          + \"       200-Get-Date. A\\n\"\n-          + \"       300-Say-Goodbye.\\n\"\n-          + \"       End program ProgramId.\";\n+class CompletionsChainTest {\n+\n+  final CobolDocumentModel MODEL =", "originalCommit": "61d4a8ba33619c83a8ec8c1600f256e803396317", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4NTk4OA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r524285988", "bodyText": "done", "author": "ap891843", "createdAt": "2020-11-16T13:58:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzNTUyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI0ODQwOA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r524248408", "bodyText": "Access can be private", "author": "temanbrcom", "createdAt": "2020-11-16T12:57:17Z", "path": "server/src/test/java/com/broadcom/lsp/cobol/service/delegates/references/AbstractReferenceTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.broadcom.lsp.cobol.service.delegates.references;\n+\n+import com.broadcom.lsp.cobol.service.CobolDocumentModel;\n+import com.broadcom.lsp.cobol.service.delegates.validations.AnalysisResult;\n+import org.eclipse.lsp4j.Location;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/** Give common testing functionality for {@link SemanticLocations} test. */\n+@Disabled\n+class AbstractReferenceTest {\n+  final Map<String, List<Location>> EXPECTED_LOCATIONS =", "originalCommit": "61d4a8ba33619c83a8ec8c1600f256e803396317", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4NTkwMw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r524285903", "bodyText": "done", "author": "ap891843", "createdAt": "2020-11-16T13:58:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI0ODQwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI1MDI0OA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r524250248", "bodyText": "Why not extract also this as a const?", "author": "temanbrcom", "createdAt": "2020-11-16T13:00:32Z", "path": "server/src/test/java/com/broadcom/lsp/cobol/service/delegates/references/AbstractReferenceTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.broadcom.lsp.cobol.service.delegates.references;\n+\n+import com.broadcom.lsp.cobol.service.CobolDocumentModel;\n+import com.broadcom.lsp.cobol.service.delegates.validations.AnalysisResult;\n+import org.eclipse.lsp4j.Location;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/** Give common testing functionality for {@link SemanticLocations} test. */\n+@Disabled\n+class AbstractReferenceTest {\n+  final Map<String, List<Location>> EXPECTED_LOCATIONS =\n+      Map.of(\n+          \"expected1\",\n+          List.of(new Location(\"uri\", new Range(new Position(0, 1), new Position(2, 3)))),\n+          \"expected2\",\n+          List.of(new Location(\"uri\", new Range(new Position(4, 5), new Position(6, 7)))));\n+  final CobolDocumentModel MODEL =\n+      new CobolDocumentModel(\n+          \"\",\n+          AnalysisResult.builder()\n+              .constantUsages(EXPECTED_LOCATIONS)\n+              .constantDefinitions(Map.of(\"non-expected\", List.of(new Location())))", "originalCommit": "61d4a8ba33619c83a8ec8c1600f256e803396317", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4NTgzNw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r524285837", "bodyText": "DOne", "author": "ap891843", "createdAt": "2020-11-16T13:58:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI1MDI0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI1MzQ1NQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r524253455", "bodyText": "Good catch! It should return false.\nI would kindly ask you to fix also it in a separate commit", "author": "temanbrcom", "createdAt": "2020-11-16T13:06:23Z", "path": "server/src/test/java/com/broadcom/lsp/cobol/service/delegates/references/AbstractReferenceTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.broadcom.lsp.cobol.service.delegates.references;\n+\n+import com.broadcom.lsp.cobol.service.CobolDocumentModel;\n+import com.broadcom.lsp.cobol.service.delegates.validations.AnalysisResult;\n+import org.eclipse.lsp4j.Location;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/** Give common testing functionality for {@link SemanticLocations} test. */\n+@Disabled\n+class AbstractReferenceTest {\n+  final Map<String, List<Location>> EXPECTED_LOCATIONS =\n+      Map.of(\n+          \"expected1\",\n+          List.of(new Location(\"uri\", new Range(new Position(0, 1), new Position(2, 3)))),\n+          \"expected2\",\n+          List.of(new Location(\"uri\", new Range(new Position(4, 5), new Position(6, 7)))));\n+  final CobolDocumentModel MODEL =\n+      new CobolDocumentModel(\n+          \"\",\n+          AnalysisResult.builder()\n+              .constantUsages(EXPECTED_LOCATIONS)\n+              .constantDefinitions(Map.of(\"non-expected\", List.of(new Location())))\n+              .sectionUsages(EXPECTED_LOCATIONS)\n+              .sectionDefinitions(Map.of(\"non-expected\", List.of(new Location())))\n+              .copybookUsages(EXPECTED_LOCATIONS)\n+              .copybookDefinitions(Map.of(\"non-expected\", List.of(new Location())))\n+              .paragraphUsages(EXPECTED_LOCATIONS)\n+              .paragraphDefinitions(Map.of(\"non-expected\", List.of(new Location())))\n+              .variableUsages(EXPECTED_LOCATIONS)\n+              .variableDefinitions(Map.of(\"non-expected\", List.of(new Location())))\n+              .build());\n+  SemanticLocations provider;\n+\n+  @Test\n+  void references() {\n+    Map<String, List<Location>> references = provider.references(MODEL);\n+    assertEquals(EXPECTED_LOCATIONS, references);\n+  }\n+\n+  @Test\n+  void definitions() {\n+    Map<String, List<Location>> definitions = provider.definitions(MODEL);\n+    assertEquals(1, definitions.size());\n+  }\n+\n+  @Test\n+  void containsToken() {\n+    assertTrue(provider.containsToken(MODEL, \"non-expected\"));\n+  }\n+\n+  @Test\n+  void notContainsToken() {\n+    assertFalse(provider.containsToken(MODEL, \"abc\"));\n+  }\n+\n+  // Check: Is this correct behaviour. Or is it better to throw Custom Exception?", "originalCommit": "61d4a8ba33619c83a8ec8c1600f256e803396317", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4NTc0Ng==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r524285746", "bodyText": "Next PR on way", "author": "ap891843", "createdAt": "2020-11-16T13:58:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI1MzQ1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI2ODU4NA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r524268584", "bodyText": "Will show a code smell about an unchecked assignment. Map.of() should work fine", "author": "temanbrcom", "createdAt": "2020-11-16T13:31:24Z", "path": "server/src/test/java/com/broadcom/lsp/cobol/service/delegates/references/SemanticElementOccurrencesTest.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.broadcom.lsp.cobol.service.delegates.references;\n+\n+import com.broadcom.lsp.cobol.service.CobolDocumentModel;\n+import org.eclipse.lsp4j.*;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static edu.emory.mathcs.backport.java.util.Collections.emptyMap;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.*;\n+\n+/** Test {@link SemanticElementOccurrences} */\n+class SemanticElementOccurrencesTest {\n+\n+  private static final String TOKEN = \"ANALYSIS\";\n+  private static final String TEXT = \"ANALYSIS SAMPLE TEXT\";\n+  private static final String URI = \"uri\";\n+  private static final CobolDocumentModel DOCUMENT = new CobolDocumentModel(TEXT);\n+  private SemanticLocations semanticLocations_1;\n+  private SemanticLocations SemanticLocations_2;\n+  private SemanticElementOccurrences occurrences;\n+\n+  @BeforeEach\n+  void getSemanticElementOccurrences() {\n+    semanticLocations_1 = mock(ParagraphLocations.class);\n+    SemanticLocations_2 = mock(ConstantLocations.class);\n+    occurrences = new SemanticElementOccurrences(Set.of(semanticLocations_1, SemanticLocations_2));\n+  }\n+\n+  @Test\n+  void whenFindDefinitionsCalledWithNullParam_thenThrowException() {\n+    assertThrows(IllegalArgumentException.class, () -> occurrences.findDefinitions(null, null));\n+  }\n+\n+  @Test\n+  void whenFindDefinitionsCalledWithNullModel_thenThrowException() {\n+    List<Location> definitions =\n+        occurrences.findDefinitions(null, new TextDocumentPositionParams());\n+    Assertions.assertEquals(0, definitions.size());\n+  }\n+\n+  @Test\n+  void whenFindDefinitionsCalledWithEmptyPosition_thenThrowException() {\n+    assertThrows(\n+        IllegalArgumentException.class,\n+        () ->\n+            occurrences.findDefinitions(\n+                new CobolDocumentModel(\"TEST\"), new TextDocumentPositionParams()));\n+  }\n+\n+  @Test\n+  void whenFindDefinitionsBeforeAnalysis_thenReturnEmptyList() {\n+    TextDocumentPositionParams position = getTextDocumentPositionParams();\n+    getMocksForBeforeAnalysis();\n+    List<Location> definitions = occurrences.findDefinitions(DOCUMENT, position);\n+    assertEquals(0, definitions.size());\n+    verify(semanticLocations_1).containsToken(DOCUMENT, TOKEN);\n+    verify(SemanticLocations_2).containsToken(DOCUMENT, TOKEN);\n+  }\n+\n+  @Test\n+  void whenFindDefinitionsAfterAnalysis_thenReturnDefnList() {\n+    TextDocumentPositionParams position = getTextDocumentPositionParams();\n+    getAfterAnalysisMocks();\n+    List<Location> definitions = occurrences.findDefinitions(DOCUMENT, position);\n+    assertEquals(1, definitions.size());\n+    verify(semanticLocations_1).containsToken(DOCUMENT, TOKEN);\n+    verify(SemanticLocations_2).containsToken(DOCUMENT, TOKEN);\n+  }\n+\n+  @Test\n+  void whenFindReferenceBeforeAnalysis_thenReturnEmptyList() {\n+    TextDocumentPositionParams position = getTextDocumentPositionParams();\n+    getMocksForBeforeAnalysis();\n+    List<Location> references =\n+        occurrences.findReferences(DOCUMENT, position, new ReferenceContext());\n+    assertEquals(0, references.size());\n+    verify(semanticLocations_1).containsToken(DOCUMENT, TOKEN);\n+    verify(SemanticLocations_2).containsToken(DOCUMENT, TOKEN);\n+  }\n+\n+  @Test\n+  void whenFindReferenceAfterAnalysis_thenReturnReferenceList() {\n+    TextDocumentPositionParams position = getTextDocumentPositionParams();\n+    getAfterAnalysisMocks();\n+    List<Location> references =\n+        occurrences.findReferences(DOCUMENT, position, new ReferenceContext());\n+    assertEquals(1, references.size());\n+    verify(semanticLocations_1).containsToken(DOCUMENT, TOKEN);\n+    verify(SemanticLocations_2).containsToken(DOCUMENT, TOKEN);\n+  }\n+\n+  @Test\n+  void whenFindReferenceAfterAnalysisWithReferenceContext_thenReturnReferenceList() {\n+    TextDocumentPositionParams position = getTextDocumentPositionParams();\n+    getAfterAnalysisMocks();\n+    List<Location> references =\n+        occurrences.findReferences(DOCUMENT, position, new ReferenceContext(true));\n+    assertEquals(2, references.size());\n+    verify(semanticLocations_1, times(2)).containsToken(DOCUMENT, TOKEN);\n+    verify(SemanticLocations_2, times(2)).containsToken(DOCUMENT, TOKEN);\n+  }\n+\n+  @Test\n+  void whenFindHighlightsBeforeAnalysis_thenReturnEmptyList() {\n+    TextDocumentPositionParams position = getTextDocumentPositionParams();\n+    getMocksForBeforeAnalysis();\n+    List<DocumentHighlight> highlights = occurrences.findHighlights(DOCUMENT, position);\n+    assertEquals(0, highlights.size());\n+    verify(semanticLocations_1, times(2)).containsToken(DOCUMENT, TOKEN);\n+    verify(SemanticLocations_2, times(2)).containsToken(DOCUMENT, TOKEN);\n+  }\n+\n+  @Test\n+  void whenFindHighlightsAfterAnalysis_thenReturnList() {\n+    TextDocumentPositionParams position = getTextDocumentPositionParams();\n+    getAfterAnalysisMocks();\n+    List<DocumentHighlight> highlights = occurrences.findHighlights(DOCUMENT, position);\n+    assertEquals(2, highlights.size());\n+    verify(semanticLocations_1, times(2)).containsToken(DOCUMENT, TOKEN);\n+    verify(SemanticLocations_2, times(2)).containsToken(DOCUMENT, TOKEN);\n+  }\n+\n+  private TextDocumentPositionParams getTextDocumentPositionParams() {\n+    TextDocumentPositionParams position = new TextDocumentPositionParams();\n+    TextDocumentIdentifier textDocument = new TextDocumentIdentifier(URI);\n+    position.setTextDocument(textDocument);\n+    position.setPosition(new Position(0, 0));\n+    return position;\n+  }\n+\n+  private void getMocksForBeforeAnalysis() {\n+    when(semanticLocations_1.containsToken(any(CobolDocumentModel.class), anyString()))\n+        .thenReturn(false);\n+    when(SemanticLocations_2.containsToken(any(CobolDocumentModel.class), anyString()))\n+        .thenReturn(false);\n+  }\n+\n+  private void getAfterAnalysisMocks() {\n+    when(semanticLocations_1.containsToken(any(CobolDocumentModel.class), anyString()))\n+        .thenReturn(false);\n+    when(SemanticLocations_2.containsToken(any(CobolDocumentModel.class), anyString()))\n+        .thenReturn(true);\n+    when(semanticLocations_1.definitions(DOCUMENT)).thenReturn(emptyMap());", "originalCommit": "61d4a8ba33619c83a8ec8c1600f256e803396317", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4NTY0Mw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r524285643", "bodyText": "Done", "author": "ap891843", "createdAt": "2020-11-16T13:57:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI2ODU4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI3MjU5NA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r524272594", "bodyText": "Not used", "author": "temanbrcom", "createdAt": "2020-11-16T13:38:08Z", "path": "server/src/test/java/com/broadcom/lsp/cobol/service/ClientServerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.broadcom.lsp.cobol.service;\n+\n+import com.broadcom.lsp.cobol.ConfigurableTest;\n+import com.broadcom.lsp.cobol.positive.CobolText;\n+import com.broadcom.lsp.cobol.service.delegates.validations.UseCaseUtils;\n+import com.broadcom.lsp.cobol.service.mocks.TestLanguageClient;\n+import com.broadcom.lsp.cobol.service.mocks.TestLanguageServer;\n+import com.google.inject.Inject;\n+import org.eclipse.lsp4j.*;\n+import org.eclipse.lsp4j.services.LanguageServer;\n+import org.eclipse.lsp4j.services.TextDocumentService;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Predicate;\n+\n+import static com.broadcom.lsp.cobol.service.delegates.validations.UseCaseUtils.DOCUMENT_URI;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test the LSP specification for shutdown request\n+ *\n+ * <p>Doc ref: https://microsoft.github.io/language-server-protocol/specification#shutdown\n+ */\n+public class ClientServerIntegrationTest extends ConfigurableTest {\n+\n+  private static final String SHUTDOWN_RESPONSE = \"InvalidRequest\";\n+  private static final String INCORRECT_TEXT_EXAMPLE = \"       IDENTIFICATION DIVISIONs.\";\n+  private static final String TEXT_EXAMPLE = \"       IDENTIFICATION DIVISION.\";\n+  private static final String CPY_DOCUMENT_URI = \"file:///.copybooks/CPYTEST.cpy\";", "originalCommit": "61d4a8ba33619c83a8ec8c1600f256e803396317", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4NTUyNA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r524285524", "bodyText": "done.", "author": "ap891843", "createdAt": "2020-11-16T13:57:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI3MjU5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI3MzgxMQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r524273811", "bodyText": "Assertion between inconvertible types", "author": "temanbrcom", "createdAt": "2020-11-16T13:40:05Z", "path": "server/src/test/java/com/broadcom/lsp/cobol/service/ClientServerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.broadcom.lsp.cobol.service;\n+\n+import com.broadcom.lsp.cobol.ConfigurableTest;\n+import com.broadcom.lsp.cobol.positive.CobolText;\n+import com.broadcom.lsp.cobol.service.delegates.validations.UseCaseUtils;\n+import com.broadcom.lsp.cobol.service.mocks.TestLanguageClient;\n+import com.broadcom.lsp.cobol.service.mocks.TestLanguageServer;\n+import com.google.inject.Inject;\n+import org.eclipse.lsp4j.*;\n+import org.eclipse.lsp4j.services.LanguageServer;\n+import org.eclipse.lsp4j.services.TextDocumentService;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Predicate;\n+\n+import static com.broadcom.lsp.cobol.service.delegates.validations.UseCaseUtils.DOCUMENT_URI;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Test the LSP specification for shutdown request\n+ *\n+ * <p>Doc ref: https://microsoft.github.io/language-server-protocol/specification#shutdown\n+ */\n+public class ClientServerIntegrationTest extends ConfigurableTest {\n+\n+  private static final String SHUTDOWN_RESPONSE = \"InvalidRequest\";\n+  private static final String INCORRECT_TEXT_EXAMPLE = \"       IDENTIFICATION DIVISIONs.\";\n+  private static final String TEXT_EXAMPLE = \"       IDENTIFICATION DIVISION.\";\n+  private static final String CPY_DOCUMENT_URI = \"file:///.copybooks/CPYTEST.cpy\";\n+  private static final String LANGUAGE = \"COBOL\";\n+  private static final String CPY_EXTENSION = \"cpy\";\n+  private static final Position TEST_COPYBOOK1 = new Position(20, 14);\n+  private static final Position TEST_COPYBOOK2 = new Position(21, 14);\n+  private static final int COPY_LENGTH = \"CPYBK1\".length();\n+  private static final String COPYBOOK1 = \"       COPY CPYBK1.\";\n+  private static final String COPYBOOK2 = \"       COPY CPYBK2.\";\n+  private static final String TEXT =\n+      \"       Identification Division. \\n\"\n+          + \"       Program-id.    ProgramId.\\n\"\n+          + \"       Data Division.\\n\"\n+          + \"       Working-Storage Section.\\n\"\n+          + \"       01   outer1. \\n\"\n+          + \"        02   inner1      PIC 9(4) Binary. \\n\"\n+          + \"        02   inner2      PIC X(10).\\n\"\n+          + \"       01   outer2.\\n\"\n+          + \"        02   inner1      PIC 9(4) Binary. \\n\"\n+          + \"        02   inner2      PIC X(10).\\n\"\n+          + \"       02   Str          PIC 9(4) Binary. \\n\"\n+          + \"       Procedure Division.\\n\"\n+          + \"       000-Main-Logic.\\n\"\n+          + \"           Perform 100-Test.\\n\"\n+          + \"           Stop Run.\\n\"\n+          + \"       100-Test.\\n\"\n+          + \"           Move inner1 of outer1 to Str.\\n\"\n+          + \"           Move inner2 of outer1 to Str.\\n\"\n+          + \"           Move inner1 of outer2 to Str.\\n\"\n+          + \"           Move inner2 of outer2 to Str.\\n\"\n+          + \"       COPY CPYBK1.\\n\"\n+          + \"       COPY CPYBK2.\\n\"\n+          + \"       COPY CPYBK1.\\n\"\n+          + \"       End program ProgramId.\";\n+  @Inject TextDocumentService service;\n+  @Inject LanguageServer server;\n+  @Inject TestLanguageClient client;\n+  @Inject CopybookService copybookService;\n+\n+  /**\n+   * This method tests that after a shutdown request, {@link TextDocumentService} always return\n+   * SHUTDOWN_RESPONSE\n+   *\n+   * @throws ExecutionException\n+   * @throws InterruptedException\n+   */\n+  @Test\n+  void whenShutdownIsFired_ThenNewRequestReturnInvalidResponse()\n+      throws ExecutionException, InterruptedException {\n+\n+    server.shutdown();\n+    assertEquals(0, ((DisposableLanguageServer) server).getExitCode());\n+\n+    CodeActionParams params =\n+        new CodeActionParams(new TextDocumentIdentifier(DOCUMENT_URI), null, null);\n+    CompletionParams completionParams =\n+        new CompletionParams(new TextDocumentIdentifier(DOCUMENT_URI), new Position(0, 8));\n+\n+    Position position = new Position(0, 2);\n+    TextDocumentIdentifier testTextDocumentIdentifier = new TextDocumentIdentifier(DOCUMENT_URI);\n+    TextDocumentPositionParams positionParams =\n+        new TextDocumentPositionParams(testTextDocumentIdentifier, position);\n+    ReferenceParams referenceParams = new ReferenceParams();\n+\n+    assertEquals(SHUTDOWN_RESPONSE, service.codeAction(params).get()); // NOSONAR\n+    assertEquals(SHUTDOWN_RESPONSE, service.definition(positionParams).get()); // NOSONAR\n+    assertEquals(SHUTDOWN_RESPONSE, service.completion(completionParams).get()); // NOSONAR\n+    assertEquals(SHUTDOWN_RESPONSE, service.references(referenceParams).get()); // NOSONAR\n+    assertEquals(SHUTDOWN_RESPONSE, service.documentHighlight(positionParams).get()); // NOSONAR\n+    assertEquals(", "originalCommit": "61d4a8ba33619c83a8ec8c1600f256e803396317", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4NTE1MA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r524285150", "bodyText": "These are the shutdown case where irrespective of what the request is, after shutdown, we respond with a fixed response(invalid request). i.e. response changes to a fixed string for all requests.", "author": "ap891843", "createdAt": "2020-11-16T13:57:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI3MzgxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI3NTIzNw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r524275237", "bodyText": "Some problem with a comment", "author": "temanbrcom", "createdAt": "2020-11-16T13:42:19Z", "path": "server/src/test/java/com/broadcom/lsp/cobol/service/CobolTextDocumentServiceTest.java", "diffHunk": "@@ -39,87 +35,105 @@\n import java.util.*;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.ExecutionException;\n-import java.util.function.Function;\n \n import static java.util.Arrays.asList;\n import static java.util.Collections.*;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.hasSize;\n import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.ArgumentMatchers.anyMap;\n import static org.mockito.Mockito.*;\n \n /** This test checks the entry points of the {@link TextDocumentService} implementation. */\n @SuppressWarnings(\"unchecked\")\n-class CobolTextDocumentServiceTest extends ConfigurableTest {\n+class CobolTextDocumentServiceTest extends MockTextDocumentService {\n \n   private static final String LANGUAGE = \"COBOL\";\n   private static final String EXT_SRC_DOC_URI = \"file://workspace/.c4z/.extsrcs/EXTSRC.cbl\";\n   private static final String CPY_DOCUMENT_URI = \"file:///.copybooks/CPYTEST.cpy\";\n   private static final String PARENT_CPY_URI = \"file:///.copybooks/PARENT.cpy\";\n   private static final String NESTED_CPY_URI = \"file:///.copybooks/NESTED.cpy\";\n-  private static final String CPY_EXTENSION = \"cpy\";\n   private static final String TEXT_EXAMPLE = \"       IDENTIFICATION DIVISION.\";\n   private static final String INCORRECT_TEXT_EXAMPLE = \"       IDENTIFICATION DIVISIONs.\";\n   private static final String DOCUMENT_WITH_ERRORS_URI =\n       \"file:///c%3A/workspace/incorrect_document.cbl\";\n-  private static final String SHUTDOWN_RESPONSE = \"InvalidRequest\";\n \n-  private TextDocumentService service;\n-  private TestLanguageClient client;\n-  private LanguageServer server;\n+  private CobolTextDocumentService service;\n \n   @BeforeEach\n-  void createService() {\n-    service = injector.getInstance(TextDocumentService.class);\n-    client = injector.getInstance(TestLanguageClient.class);\n-    server = injector.getInstance(LanguageServer.class);\n-    client.clean();\n+  void setupService() {\n+    service = getMockedTextDocumentService();\n   }\n \n   @Test\n   void testCompletion() {\n-    openAndAwait();\n+    doNothing().when(communications).notifyThatDocumentAnalysed(anyString());\n+    when(engine.analyze(anyString(), anyString(), any(CopybookProcessingMode.class)))\n+        .thenReturn(AnalysisResult.empty());\n+\n+    CompletionItem completionItem = new CompletionItem();\n+    completionItem.setLabel(\"test\");\n+    when(completions.collectFor(any(CobolDocumentModel.class), any(CompletionParams.class)))\n+        .thenReturn(new CompletionList(true, List.of(completionItem)));\n+\n+    openDocument(service);\n+\n     CompletableFuture<Either<List<CompletionItem>, CompletionList>> completion =\n         service.completion(\n             new CompletionParams(\n-                new TextDocumentIdentifier(UseCaseUtils.DOCUMENT_URI), new Position(0, 8))); // The\n+                new TextDocumentIdentifier(UseCaseUtils.DOCUMENT_URI), new Position(0, 8))); //\n     // position of \"Identification division\"", "originalCommit": "61d4a8ba33619c83a8ec8c1600f256e803396317", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI4NTQwNw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/649#discussion_r524285407", "bodyText": "Done.", "author": "ap891843", "createdAt": "2020-11-16T13:57:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI3NTIzNw=="}], "type": "inlineReview"}, {"oid": "7761dd25fcec4d50be18f3d591b7c0ee1241fb43", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/7761dd25fcec4d50be18f3d591b7c0ee1241fb43", "message": "test : Get rid of DI in the unit test #261\n\nSigned-off-by: ap891843 <aman.prashant@broadcom.com>", "committedDate": "2020-11-16T13:56:20Z", "type": "commit"}, {"oid": "7761dd25fcec4d50be18f3d591b7c0ee1241fb43", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/7761dd25fcec4d50be18f3d591b7c0ee1241fb43", "message": "test : Get rid of DI in the unit test #261\n\nSigned-off-by: ap891843 <aman.prashant@broadcom.com>", "committedDate": "2020-11-16T13:56:20Z", "type": "forcePushed"}]}