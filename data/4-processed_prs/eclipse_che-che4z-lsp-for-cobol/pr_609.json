{"pr_number": 609, "pr_title": "Interrupt Analysis on Closing Request", "pr_createdAt": "2020-11-04T10:15:25Z", "pr_url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609", "timeline": [{"oid": "7d7e34620210885858badedfdf0655eea00940c7", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/7d7e34620210885858badedfdf0655eea00940c7", "message": "Merge pull request #9 from eclipse/development\n\nGet latest from remote", "committedDate": "2020-11-04T09:58:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzNzY2Mw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517237663", "bodyText": "Guice dynamically creates a subclass that applies interceptors by overriding methods. So can't have private method.\nOr else we will have to adopt another lib like CGI etc.", "author": "ap891843", "createdAt": "2020-11-04T10:19:18Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/engine/CobolLanguageEngine.java", "diffHunk": "@@ -113,6 +119,18 @@ public CobolLanguageEngine(TextPreprocessor preprocessor, DefaultErrorStrategy d\n     return new ResultWithErrors<>(visitor.getSemanticContext(), accumulatedErrors);\n   }\n \n+  @CheckThreadInterruption\n+  protected CobolParser getCobolParser(CommonTokenStream tokens) {", "originalCommit": "f4b006e6443889633e8af49fa6fc7392a5fc3be2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI3NTIyOQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517275229", "bodyText": "I think here it may be package-private", "author": "temanbrcom", "createdAt": "2020-11-04T11:23:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzNzY2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM0MDc1OA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517340758", "bodyText": "Please, mark the affected classes with @SuppressWarnings(\"WeakerAccess\") not to show the warnings", "author": "temanbrcom", "createdAt": "2020-11-04T13:27:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzNzY2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0NjUzNw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517246537", "bodyText": "Default impl has a max pool size of Integer.MAX_VALUE. Can that be a problem?\nsuggestion?", "author": "ap891843", "createdAt": "2020-11-04T10:33:18Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -71,6 +70,8 @@\n   private final Map<String, CobolDocumentModel> docs = new ConcurrentHashMap<>();\n   private final Map<String, CompletableFuture<List<DocumentSymbol>>> outlineMap =\n       new ConcurrentHashMap<>();\n+  private final Map<String, Future<Void>> futureMap = new ConcurrentHashMap<>();\n+  private final ExecutorService threadPool = Executors.newCachedThreadPool();", "originalCommit": "f4b006e6443889633e8af49fa6fc7392a5fc3be2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI1MTYzNA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517251634", "bodyText": "It won't be problem, because by default in one sec idle-thread will be killed.\nBUT, we are introducing another thread-pool here, so in LSP we have 3 more. We need to discuss it internally.", "author": "asatklichov", "createdAt": "2020-11-04T10:41:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0NjUzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0NzQ4OA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517247488", "bodyText": "This might give an indication to user that the processing is stopped, while its not. Do we want to handle this in method interceptor?", "author": "ap891843", "createdAt": "2020-11-04T10:34:51Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -197,8 +198,15 @@ public void didChange(DidChangeTextDocumentParams params) {\n   public void didClose(DidCloseTextDocumentParams params) {\n     String uri = params.getTextDocument().getUri();\n     LOG.info(format(\"Document closing invoked on URI %s\", uri));\n+    interruptAnalysis(uri);\n+    communications.cancelProgressNotification(uri);", "originalCommit": "f4b006e6443889633e8af49fa6fc7392a5fc3be2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI1MjA3Ng==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517252076", "bodyText": "Yes, it should be part of aspect", "author": "asatklichov", "createdAt": "2020-11-04T10:42:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0NzQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM1NjI1Mg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517356252", "bodyText": "I should not be a part of the aspect, it will lead only to the spreading of logic. Please, encapsulate all the Communications usages in the service.", "author": "temanbrcom", "createdAt": "2020-11-04T13:51:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0NzQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2MTE3NQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517361175", "bodyText": "Yes, it does make the code less clean. Adding it in aspect has brought some extra complexity and spread the responsibility.\nShould have discussed before implementing :(", "author": "ap891843", "createdAt": "2020-11-04T13:58:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0NzQ4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0ODUzMA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517248530", "bodyText": "Rename with ThreadInterruptAspect", "author": "asatklichov", "createdAt": "2020-11-04T10:36:36Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/annotation/AOPThreadInterrupt.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.broadcom.lsp.cobol.core.annotation;\n+\n+/**\n+ * This is a marker interface. Implementing this class would enable the {@link\n+ * CheckThreadInterruption} annotation to be used for member methods of the class.\n+ */\n+public interface AOPThreadInterrupt {}", "originalCommit": "f4b006e6443889633e8af49fa6fc7392a5fc3be2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI1NjMxMQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517256311", "bodyText": "Or  InterruptableThreadAspect", "author": "asatklichov", "createdAt": "2020-11-04T10:49:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0ODUzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI1Mzc3OA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517253778", "bodyText": "Isn't it better complete with some meaning meaning message, complete(\"Analyze-completed\") ?    CompletableFuture", "author": "asatklichov", "createdAt": "2020-11-04T10:45:30Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -248,8 +262,13 @@ private void analyzeDocumentFirstTime(String uri, String text, boolean userReque\n               ofNullable(docs.get(uri)).ifPresent(doc -> doc.setAnalysisResult(result));\n               publishResult(uri, result, copybookProcessingMode);\n               outlineMap.get(uri).complete(result.getOutlineTree());\n-            })\n-        .whenComplete(reportExceptionIfThrown(createDescriptiveErrorMessage(\"analysis\", uri)));\n+              completableFuture.complete(null);", "originalCommit": "f4b006e6443889633e8af49fa6fc7392a5fc3be2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM1MTE5Mg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517351192", "bodyText": "CompletableFuture , so returning null. Anyways we need it only for chaining. I will hold this PR as suggested for tomorrow's session.", "author": "ap891843", "createdAt": "2020-11-04T13:43:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI1Mzc3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI3NjczMg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517276732", "bodyText": "Missing Javadoc", "author": "temanbrcom", "createdAt": "2020-11-04T11:26:43Z", "path": "server/src/test/java/com/broadcom/lsp/cobol/core/annotation/HandleThreadInterruptionTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+package com.broadcom.lsp.cobol.core.annotation;\n+\n+import org.antlr.v4.runtime.misc.ParseCancellationException;\n+import org.aopalliance.intercept.MethodInvocation;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.reflect.Method;\n+\n+import static org.mockito.Mockito.*;\n+\n+class HandleThreadInterruptionTest {", "originalCommit": "f4b006e6443889633e8af49fa6fc7392a5fc3be2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI4MDcwMg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517280702", "bodyText": "Please, move this method up to follow getDocs() for consistency", "author": "temanbrcom", "createdAt": "2020-11-04T11:34:12Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -319,4 +338,8 @@ private String createDescriptiveErrorMessage(String action, String uri) {\n   private BiConsumer<Object, Throwable> reportExceptionIfThrown(String message) {\n     return (res, ex) -> ofNullable(ex).ifPresent(it -> LOG.error(message, it));\n   }\n+\n+  Map<String, Future<Void>> getFutureMap() {\n+    return new HashMap<>(futureMap);\n+  }", "originalCommit": "f4b006e6443889633e8af49fa6fc7392a5fc3be2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMwOTc2OQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517309769", "bodyText": "May be package-private", "author": "temanbrcom", "createdAt": "2020-11-04T12:31:12Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CopybookServiceImpl.java", "diffHunk": "@@ -108,7 +111,8 @@ public void store(CopybookModel copybookModel) {\n     copybookCache.put(copybookModel.getName(), copybookModel);\n   }\n \n-  private CopybookModel resolveSync(\n+  @CheckThreadInterruption\n+  protected CopybookModel resolveSync(", "originalCommit": "f4b006e6443889633e8af49fa6fc7392a5fc3be2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI2MDAzMw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517260033", "bodyText": "Optional: These size tests can be replaced with more readable  hamcrest-tests, see CobolLineReaderImplTest", "author": "asatklichov", "createdAt": "2020-11-04T10:56:01Z", "path": "server/src/test/java/com/broadcom/lsp/cobol/service/CobolTextDocumentServiceTest.java", "diffHunk": "@@ -424,10 +424,13 @@ void testImmediateClosingOfDocumentDoNotCauseNPE() {\n             new TextDocumentItem(UseCaseUtils.DOCUMENT_URI, LANGUAGE, 0, TEXT_EXAMPLE)));\n \n     assertEquals(1, service.getDocs().size());\n+    assertEquals(1, service.getFutureMap().size());", "originalCommit": "f4b006e6443889633e8af49fa6fc7392a5fc3be2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "356e6fcd64e0545b67f64a8e9fd06ce21bb59977", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/356e6fcd64e0545b67f64a8e9fd06ce21bb59977", "message": "feat: Update as per PR comments\n1. Handle cancelProgress inside aspect.\n2. Rename Annotation.\n3. Use Hamcrest for assert.\n\nSigned-off-by: ap891843 <aman.prashant@broadcom.com>\n\nfeat: Interrupt doc analysis on Closing Req.\ninitial commit contains following:\n1. Add annotation to handle thread interrupt.\n2. Store future object for cancelling task.\n\nSigned-off-by: ap891843 <aman.prashant@broadcom.com>", "committedDate": "2020-11-04T13:40:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM1MzAwNg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517353006", "bodyText": "removed communications.cancelProgressNotification and handled inside aspect. But from user perspective, we still see message on UI (analysis in progress) as we usually take more time than 3 sec to stop processing.", "author": "ap891843", "createdAt": "2020-11-04T13:46:11Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -197,8 +202,14 @@ public void didChange(DidChangeTextDocumentParams params) {\n   public void didClose(DidCloseTextDocumentParams params) {\n     String uri = params.getTextDocument().getUri();\n     LOG.info(format(\"Document closing invoked on URI %s\", uri));\n+    interruptAnalysis(uri);\n     communications.publishDiagnostics(Map.of(uri, List.of()));\n     docs.remove(uri);\n+    clearAnalysedFutureObject(uri);", "originalCommit": "356e6fcd64e0545b67f64a8e9fd06ce21bb59977", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM1NTQ0MQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517355441", "bodyText": "We cannot control this message when it is already sent. It is expected behavior.", "author": "temanbrcom", "createdAt": "2020-11-04T13:49:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM1MzAwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2MTIwNA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517361204", "bodyText": "This should be encapsulated inside CobolTextDocumentService", "author": "temanbrcom", "createdAt": "2020-11-04T13:58:35Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/annotation/HandleThreadInterruption.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.broadcom.lsp.cobol.core.annotation;\n+\n+import com.broadcom.lsp.cobol.domain.modules.LangServerCtx;\n+import com.broadcom.lsp.cobol.service.CobolTextDocumentService;\n+import com.broadcom.lsp.cobol.service.delegates.communications.Communications;\n+import lombok.extern.slf4j.Slf4j;\n+import org.antlr.v4.runtime.misc.ParseCancellationException;\n+import org.aopalliance.intercept.Joinpoint;\n+import org.aopalliance.intercept.MethodInterceptor;\n+import org.aopalliance.intercept.MethodInvocation;\n+\n+/**\n+ * Intercepts calls on an {@link ThreadInterruptAspect} on its way to the target.\n+ *\n+ * <p>NOTE: Guice dynamically creates a subclass that applies interceptors by overriding methods.\n+ */\n+@Slf4j\n+public class HandleThreadInterruption implements MethodInterceptor {\n+\n+  /**\n+   * Implement this method to perform extra treatments before and after the invocation. Polite\n+   * implementations would certainly like to invoke {@link Joinpoint#proceed()}.\n+   *\n+   * @param invocation the method invocation joinpoint\n+   * @return the result of the call to {@link Joinpoint#proceed()}, might be intercepted by the\n+   *     interceptor.\n+   * @throws Throwable if the interceptors or the target-object throws an exception.\n+   */\n+  @Override\n+  public Object invoke(MethodInvocation invocation) throws Throwable {\n+    if (Thread.interrupted()) {\n+      String uri = CobolTextDocumentService.threadContextUri.get();\n+      LOG.debug(invocation.getMethod().getName() + \" is interrupted by user for uri: \" + uri);\n+      LangServerCtx.getInjector().getInstance(Communications.class).cancelProgressNotification(uri);\n+      CobolTextDocumentService.threadContextUri.remove();", "originalCommit": "356e6fcd64e0545b67f64a8e9fd06ce21bb59977", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM3OTk5OA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517379998", "bodyText": "done", "author": "ap891843", "createdAt": "2020-11-04T14:24:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2MTIwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2MTgyOA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517361828", "bodyText": "Same here", "author": "temanbrcom", "createdAt": "2020-11-04T13:59:27Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/visitor/CobolVisitor.java", "diffHunk": "@@ -679,4 +683,17 @@ private void checkProgramNameIdentical(Token token) {\n         .collect(Collectors.toList());\n   }\n \n+  // NOTE: CobolVisitor is not managed by Guice DI, so can't use annotation here.\n+  @Override\n+  public Class visitChildren(RuleNode node) {\n+    if(Thread.interrupted()) { // todo: replace with a custom thread\n+      String uri = CobolTextDocumentService.threadContextUri.get();\n+      LOG.debug(\"visitChildren method interrupted by user for uri: \"+uri);\n+      Communications communications = LangServerCtx.getInjector().getInstance(Communications.class);\n+      communications.cancelProgressNotification(CobolTextDocumentService.threadContextUri.get());\n+      CobolTextDocumentService.threadContextUri.remove();", "originalCommit": "356e6fcd64e0545b67f64a8e9fd06ce21bb59977", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM4MDE4NQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517380185", "bodyText": "Done", "author": "ap891843", "createdAt": "2020-11-04T14:24:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2MTgyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2Mzg2NQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517363865", "bodyText": "Please, add @SuppressWarnings(\"WeakerAccess\") here", "author": "temanbrcom", "createdAt": "2020-11-04T14:02:15Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CopybookServiceImpl.java", "diffHunk": "@@ -45,7 +47,7 @@\n  */\n @Slf4j\n @Singleton\n-public class CopybookServiceImpl implements CopybookService {\n+public class CopybookServiceImpl implements CopybookService, ThreadInterruptAspect {", "originalCommit": "356e6fcd64e0545b67f64a8e9fd06ce21bb59977", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NDEwNg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517364106", "bodyText": "Please, add @SuppressWarnings(\"WeakerAccess\")", "author": "temanbrcom", "createdAt": "2020-11-04T14:02:35Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/engine/CobolLanguageEngine.java", "diffHunk": "@@ -51,14 +53,17 @@\n  */\n @Slf4j\n @Singleton", "originalCommit": "356e6fcd64e0545b67f64a8e9fd06ce21bb59977", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d5563b3b231ea45d2f67d16c0a4624220bbdee91", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/d5563b3b231ea45d2f67d16c0a4624220bbdee91", "message": "feat: Update as per PR comments(2)\nRemove logic from aspect to communicate and place it in service.\n\nSigned-off-by: ap891843 <aman.prashant@broadcom.com>\n\nfeat: Update as per PR comments\n1. Handle cancelProgress inside aspect.\n2. Rename Annotation.\n3. Use Hamcrest for assert.\n\nSigned-off-by: ap891843 <aman.prashant@broadcom.com>\n\nfeat: Interrupt doc analysis on Closing Req.\ninitial commit contains following:\n1. Add annotation to handle thread interrupt.\n2. Store future object for cancelling task.\n\nSigned-off-by: ap891843 <aman.prashant@broadcom.com>", "committedDate": "2020-11-04T14:20:04Z", "type": "forcePushed"}, {"oid": "b6180275b6bc74e02f6b46b954e8bae05151442d", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/b6180275b6bc74e02f6b46b954e8bae05151442d", "message": "feat: Interrupt doc analysis on Closing Request #546\n\nSigned-off-by: ap891843 <aman.prashant@broadcom.com>", "committedDate": "2020-11-04T15:06:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0Mzg2OQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517843869", "bodyText": "In the general handler, a general exception is expected. So, you can rename the whole handler or change exception.", "author": "grianbrcom", "createdAt": "2020-11-05T07:38:28Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/core/annotation/HandleThreadInterruption.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2020 Broadcom.\n+ * The term \"Broadcom\" refers to Broadcom Inc. and/or its subsidiaries.\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *    Broadcom, Inc. - initial API and implementation\n+ *\n+ */\n+\n+package com.broadcom.lsp.cobol.core.annotation;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.antlr.v4.runtime.misc.ParseCancellationException;\n+import org.aopalliance.intercept.Joinpoint;\n+import org.aopalliance.intercept.MethodInterceptor;\n+import org.aopalliance.intercept.MethodInvocation;\n+\n+/**\n+ * Intercepts calls on an {@link ThreadInterruptAspect} on its way to the target.\n+ *\n+ * <p>NOTE: Guice dynamically creates a subclass that applies interceptors by overriding methods.\n+ */\n+@Slf4j\n+public class HandleThreadInterruption implements MethodInterceptor {\n+\n+  /**\n+   * Implement this method to perform extra treatments before and after the invocation. Polite\n+   * implementations would certainly like to invoke {@link Joinpoint#proceed()}.\n+   *\n+   * @param invocation the method invocation joinpoint\n+   * @return the result of the call to {@link Joinpoint#proceed()}, might be intercepted by the\n+   *     interceptor.\n+   * @throws Throwable if the interceptors or the target-object throws an exception.\n+   */\n+  @Override\n+  public Object invoke(MethodInvocation invocation) throws Throwable {\n+    if (Thread.interrupted()) {\n+      LOG.debug(invocation.getMethod().getName() + \" is interrupted by user\");\n+      throw new ParseCancellationException(\"Parsing interrupted by user.\");", "originalCommit": "b6180275b6bc74e02f6b46b954e8bae05151442d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0ODQwNg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517848406", "bodyText": "There is no need for CompletableFuture at all. You can add these two calls at the end of the submitted function, instead of completableFuture.complete(null);.", "author": "grianbrcom", "createdAt": "2020-11-05T07:48:37Z", "path": "server/src/main/java/com/broadcom/lsp/cobol/service/CobolTextDocumentService.java", "diffHunk": "@@ -248,8 +265,13 @@ private void analyzeDocumentFirstTime(String uri, String text, boolean userReque\n               ofNullable(docs.get(uri)).ifPresent(doc -> doc.setAnalysisResult(result));\n               publishResult(uri, result, copybookProcessingMode);\n               outlineMap.get(uri).complete(result.getOutlineTree());\n-            })\n-        .whenComplete(reportExceptionIfThrown(createDescriptiveErrorMessage(\"analysis\", uri)));\n+              completableFuture.complete(null);\n+              return null;\n+            });\n+    futureMap.put(uri, docAnalysisFuture);\n+    completableFuture\n+        .whenComplete(reportExceptionIfThrown(createDescriptiveErrorMessage(\"analysis\", uri)))\n+        .whenComplete((val1, val2) -> clearAnalysedFutureObject(uri));", "originalCommit": "b6180275b6bc74e02f6b46b954e8bae05151442d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg4NjA0Mg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/609#discussion_r517886042", "bodyText": "why didn't I think of this? \ud83e\udd26", "author": "ap891843", "createdAt": "2020-11-05T08:55:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0ODQwNg=="}], "type": "inlineReview"}, {"oid": "afae8f9cb577dad619afd7d47f98a94ad40e0e50", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/afae8f9cb577dad619afd7d47f98a94ad40e0e50", "message": "Merge pull request #10 from eclipse/development\n\npull from origin", "committedDate": "2020-11-05T10:20:41Z", "type": "commit"}, {"oid": "f5cc0e2e5001d788ef19efc2e94de08af02f659b", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/f5cc0e2e5001d788ef19efc2e94de08af02f659b", "message": "feat: Interrupt doc analysis on Closing Request #546\n\nSigned-off-by: ap891843 <aman.prashant@broadcom.com>", "committedDate": "2020-11-05T10:18:35Z", "type": "forcePushed"}, {"oid": "4b1d1172da48a9293c56105ffea07ae7d13dc567", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/4b1d1172da48a9293c56105ffea07ae7d13dc567", "message": "feat: Interrupt doc analysis on Closing Request #546\n\nSigned-off-by: ap891843 <aman.prashant@broadcom.com>", "committedDate": "2020-11-05T10:28:51Z", "type": "commit"}, {"oid": "4b1d1172da48a9293c56105ffea07ae7d13dc567", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/4b1d1172da48a9293c56105ffea07ae7d13dc567", "message": "feat: Interrupt doc analysis on Closing Request #546\n\nSigned-off-by: ap891843 <aman.prashant@broadcom.com>", "committedDate": "2020-11-05T10:28:51Z", "type": "forcePushed"}]}