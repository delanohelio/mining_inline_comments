{"pr_number": 381, "pr_title": "test: Improve code coverage for JavaCheck", "pr_createdAt": "2020-06-08T07:31:32Z", "pr_url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381", "timeline": [{"oid": "8959103e8e5ae2cb5b94dd73340d8613dc693aa4", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/8959103e8e5ae2cb5b94dd73340d8613dc693aa4", "message": "test: Improve code coverage for JavaCheck\n\nSigned-off-by: Azat Satklichov <azat.satklichov@broadcom.com>", "committedDate": "2020-06-08T07:29:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxNTQ2NQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381#discussion_r436515465", "bodyText": "Just a tiny suggestion: this try/catch for negative cases could be probably extracted as separate function", "author": "zacanbrcom", "createdAt": "2020-06-08T07:54:26Z", "path": "clients/cobol-lsp-vscode-extension/src/__tests__/JavaCheckTest.ts", "diffHunk": "@@ -27,8 +28,93 @@ describe(\"Check Java version\", () => {\n         expect(JavaCheck.isJavaVersionSupported('openjdk version \"12.0.1\" 2018-10-16')).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 11 2018-09-25\")).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 12 2019-03-19\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 13 2019-09-17\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 14 2020-03-17\")).toBeTruthy();\n     });\n-    it(\"checks if Java version is not supported\", async () => {\n+\n+    it(\"when version is not supported\", async () => {\n         expect(JavaCheck.isJavaVersionSupported('java version \"1.7.0_131\"')).toBeFalsy();\n+        expect(JavaCheck.isJavaVersionSupported('java version \"1.5.0_22\"')).toBeFalsy();\n+    });\n+});\n+\n+describe(\"Checks Java installation\", () => {\n+\n+    let javaCheck: JavaCheck;\n+    let map: any;\n+    let checkFn: any;\n+    let stderrFn: any;\n+    const expectedErrMsgJavaVersionFound = \"Java version 8 expected\";\n+    const expectedErrMsgJavaVersionNotFound = \"Java 8 is not found\";\n+\n+    beforeEach(() => {\n+        javaCheck = new JavaCheck();\n+        checkFn = (event, callbackFn) => {\n+            map[event] = callbackFn;\n+        };\n+        stderrFn = (event, callbackFn) => {\n+            map[event] = callbackFn;\n+        };\n+        map = {};\n+    });\n+\n+    it(\"when required version is supported\", async () => {\n+        (cp as any).spawn = jest.fn().mockReturnValue({stderr: {on: stderrFn}, on: jest.fn()});\n+        const promise = javaCheck.isJavaInstalled();\n+        map.data(\"java 11 2018-09-25\");\n+\n+        try {\n+            expect(await promise).toEqual(undefined);\n+        } catch (e) {\n+            expect(e.toString()).toEqual(expectedErrMsgJavaVersionFound);\n+        }\n+    });\n+\n+    it(\"when required version is not supported\", async () => {\n+        (cp as any).spawn = jest.fn().mockReturnValue({stderr: {on: stderrFn}, on: jest.fn()});\n+        const promise = javaCheck.isJavaInstalled();\n+        map.data('java version \"1.5.0_22\"');\n+\n+        try {\n+            await promise;\n+        } catch (e) {\n+            expect(e.toString()).toEqual(expectedErrMsgJavaVersionFound);\n+        }\n+    });\n+\n+    it(\"when 'error' event is emitted  - spawned\", async () => {\n+        (cp as any).spawn = jest.fn().mockReturnValue({stderr: {on: jest.fn()}, on: checkFn});\n+        const promise = javaCheck.isJavaInstalled();\n+        map.error(\"Error: spawn java ENOENT\");\n+\n+        try {\n+            await promise;\n+        } catch (e) {\n+            expect(e.toString()).toEqual(expectedErrMsgJavaVersionNotFound);\n+        }\n+    });", "originalCommit": "8959103e8e5ae2cb5b94dd73340d8613dc693aa4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU0MDgxMQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381#discussion_r436540811", "bodyText": "Instead of try/catch block, you could use this:\nawait expect(promise).rejects.toEqual(expectedErrMsgJavaVersionNotFound);", "author": "grianbrcom", "createdAt": "2020-06-08T08:42:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxNTQ2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU0MzI1Mg==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381#discussion_r436543252", "bodyText": "Just a tiny suggestion: this try/catch for negative cases could be probably extracted as separate function\n\n@zacanbrcom Thanks done", "author": "asatklichov", "createdAt": "2020-06-08T08:47:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxNTQ2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU0ODI0OQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381#discussion_r436548249", "bodyText": "Instead of try/catch block, you could use this:\nawait expect(promise).rejects.toEqual(expectedErrMsgJavaVersionNotFound);\n\n@grianbrcom Thanks, altered", "author": "asatklichov", "createdAt": "2020-06-08T08:55:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxNTQ2NQ=="}], "type": "inlineReview"}, {"oid": "4ee75800266edc716e260f97f8a45dae941a3f98", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/4ee75800266edc716e260f97f8a45dae941a3f98", "message": "refactor: negative cases extracted to a function\n\nSigned-off-by: Azat Satklichov <azat.satklichov@broadcom.com>", "committedDate": "2020-06-08T08:44:34Z", "type": "commit"}, {"oid": "2c896c58f0d4538cc3168426576d1163eac44521", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/2c896c58f0d4538cc3168426576d1163eac44521", "message": "refactor: try catch replaced with inline alternative\n\nSigned-off-by: Azat Satklichov <azat.satklichov@broadcom.com>", "committedDate": "2020-06-08T08:55:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1MjE0OQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381#discussion_r436552149", "bodyText": "it when version is supported - not really readable )", "author": "ishche", "createdAt": "2020-06-08T09:02:04Z", "path": "clients/cobol-lsp-vscode-extension/src/__tests__/JavaCheckTest.ts", "diffHunk": "@@ -12,10 +12,11 @@\n  *   Broadcom, Inc. - initial API and implementation\n  */\n \n-import { JavaCheck } from \"../services/JavaCheck\";\n+import * as cp from \"child_process\";\n+import {JavaCheck} from \"../services/JavaCheck\";\n \n-describe(\"Check Java version\", () => {\n-    it(\"checks if Java version is supported\", async () => {\n+describe(\"Checks Java version\", () => {\n+    it(\"when version is supported\", async () => {", "originalCommit": "2c896c58f0d4538cc3168426576d1163eac44521", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYwMDkwNw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381#discussion_r436600907", "bodyText": "changed, thanks", "author": "asatklichov", "createdAt": "2020-06-08T10:31:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1MjE0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1NTMwNw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381#discussion_r436555307", "bodyText": "It can be const", "author": "ishche", "createdAt": "2020-06-08T09:07:32Z", "path": "clients/cobol-lsp-vscode-extension/src/__tests__/JavaCheckTest.ts", "diffHunk": "@@ -27,8 +28,73 @@ describe(\"Check Java version\", () => {\n         expect(JavaCheck.isJavaVersionSupported('openjdk version \"12.0.1\" 2018-10-16')).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 11 2018-09-25\")).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 12 2019-03-19\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 13 2019-09-17\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 14 2020-03-17\")).toBeTruthy();\n     });\n-    it(\"checks if Java version is not supported\", async () => {\n+\n+    it(\"when version is not supported\", async () => {\n         expect(JavaCheck.isJavaVersionSupported('java version \"1.7.0_131\"')).toBeFalsy();\n+        expect(JavaCheck.isJavaVersionSupported('java version \"1.5.0_22\"')).toBeFalsy();\n+    });\n+});\n+\n+describe(\"Checks Java installation\", () => {\n+\n+    let javaCheck: JavaCheck;\n+    let map: any;", "originalCommit": "2c896c58f0d4538cc3168426576d1163eac44521", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU4NzI2NA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381#discussion_r436587264", "bodyText": "We change it according to test-case, so can't be const", "author": "asatklichov", "createdAt": "2020-06-08T10:04:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1NTMwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYxOTcwMA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381#discussion_r436619700", "bodyText": "I don't see where you change the reference to the map object in code.", "author": "ishche", "createdAt": "2020-06-08T11:11:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1NTMwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYyMjk5NA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381#discussion_r436622994", "bodyText": "in each test map needs to be clean-up", "author": "asatklichov", "createdAt": "2020-06-08T11:18:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1NTMwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1NTc4MA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381#discussion_r436555780", "bodyText": "Are we supporting java 8 still?", "author": "ishche", "createdAt": "2020-06-08T09:08:23Z", "path": "clients/cobol-lsp-vscode-extension/src/__tests__/JavaCheckTest.ts", "diffHunk": "@@ -27,8 +28,73 @@ describe(\"Check Java version\", () => {\n         expect(JavaCheck.isJavaVersionSupported('openjdk version \"12.0.1\" 2018-10-16')).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 11 2018-09-25\")).toBeTruthy();\n         expect(JavaCheck.isJavaVersionSupported(\"java 12 2019-03-19\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 13 2019-09-17\")).toBeTruthy();\n+        expect(JavaCheck.isJavaVersionSupported(\"java 14 2020-03-17\")).toBeTruthy();\n     });\n-    it(\"checks if Java version is not supported\", async () => {\n+\n+    it(\"when version is not supported\", async () => {\n         expect(JavaCheck.isJavaVersionSupported('java version \"1.7.0_131\"')).toBeFalsy();\n+        expect(JavaCheck.isJavaVersionSupported('java version \"1.5.0_22\"')).toBeFalsy();\n+    });\n+});\n+\n+describe(\"Checks Java installation\", () => {\n+\n+    let javaCheck: JavaCheck;\n+    let map: any;\n+    let checkFn: any;\n+    let stderrFn: any;\n+    const expectedErrMsgSupportedJavaVersion = \"Java version 8 expected\";\n+    const expectedErrMsgJavaVersionNotFound = \"Java 8 is not found\";", "originalCommit": "2c896c58f0d4538cc3168426576d1163eac44521", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU5MzM4MA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381#discussion_r436593380", "bodyText": "We will update that outdated message with \"Minimum expected Java version is 8\" in service class.", "author": "asatklichov", "createdAt": "2020-06-08T10:16:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1NTc4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYyNDQxNQ==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/381#discussion_r436624415", "bodyText": "Oh, sorry, I miss that one map = {};", "author": "ishche", "createdAt": "2020-06-08T11:21:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1NTc4MA=="}], "type": "inlineReview"}, {"oid": "80fc1ca6f08be76a52c060dd2b6fbbeaccec6715", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/80fc1ca6f08be76a52c060dd2b6fbbeaccec6715", "message": "refactor: change outdated Java version message\n\nSigned-off-by: Azat Satklichov <azat.satklichov@broadcom.com>", "committedDate": "2020-06-08T10:30:22Z", "type": "commit"}]}