{"pr_number": 353, "pr_title": "Inform user about wrong credentials and stop sending other MF requests", "pr_createdAt": "2020-05-13T16:14:51Z", "pr_url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/353", "timeline": [{"oid": "0dc05486a4b7443a77b0c073203361d9ec41dcce", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/commit/0dc05486a4b7443a77b0c073203361d9ec41dcce", "message": "feat: Inform user about wrong credentials and stop sending other MF requests\n\nUser was correctly notified if:\n* Zowe profile have empty password\n* MF API not accessible\n* Zowe profile have wrong credentials\n* dataset not found\n\nCloses #237\n\nSigned-off-by: Anton Grigorev <anton.grigorev@broadcom.com>", "committedDate": "2020-05-13T16:12:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk3MDY4Ng==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/353#discussion_r424970686", "bodyText": "Can profile be undefined here?", "author": "ishche", "createdAt": "2020-05-14T08:45:36Z", "path": "clients/cobol-lsp-vscode-extension/src/services/ZoweApi.ts", "diffHunk": "@@ -41,28 +42,39 @@ export class ZoweApi {\n     }\n \n     public async fetchMember(dataset: string, member: string, profileName: string): Promise<string> {\n-        const session: Session = await this.createSession(profileName);\n+        try {\n+            const session: Session = await this.createSession(profileName);\n \n-        // default should be https\n-        const rpath = `${ZOSMF_PREFIX}${dataset}(${member})`;\n-        return await RestClient.getExpectString(session, rpath, [{\n-            \"Content-Type\": \"application/json\", \"X-CSRF-ZOSMF-HEADER\": \"\",\n-        }]);\n+            // default should be https\n+            const rpath = `${ZOSMF_PREFIX}${dataset}(${member})`;\n+            return await RestClient.getExpectString(session, rpath, [{\n+                \"Content-Type\": \"application/json\", \"X-CSRF-ZOSMF-HEADER\": \"\",\n+            }]);\n+        } catch (error) {\n+            throw convertError(error);\n+        }\n     }\n \n     public async listMembers(dataset: string, profileName: string): Promise<string[]> {\n-        // default should be https\n-        const session: Session = await this.createSession(profileName);\n-        const rpath = `${ZOSMF_PREFIX}${dataset}/member`;\n-        const result = await RestClient.getExpectJSON(session, rpath, [{\n-            \"Content-Type\": \"application/json\", \"X-CSRF-ZOSMF-HEADER\": \"\",\n-        }]);\n-        // tslint:disable-next-line: no-string-literal\n-        return result[\"items\"].map((i: any) => i.member);\n+        try {\n+            // default should be https\n+            const session: Session = await this.createSession(profileName);\n+            const rpath = `${ZOSMF_PREFIX}${dataset}/member`;\n+            const result = await RestClient.getExpectJSON(session, rpath, [{\n+                \"Content-Type\": \"application/json\", \"X-CSRF-ZOSMF-HEADER\": \"\",\n+            }]);\n+            // tslint:disable-next-line: no-string-literal\n+            return result[\"items\"].map((i: any) => i.member);\n+        } catch (error) {\n+            throw convertError(error);\n+        }\n     }\n \n     public async createSession(profileName: string) {\n         const profile = (await new BasicProfileManager(this.createProfileParams()).load({ name: profileName })).profile;\n+        if (profile.password === \"\") {", "originalCommit": "0dc05486a4b7443a77b0c073203361d9ec41dcce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4NjAwOA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/353#discussion_r424986008", "bodyText": "Good point! I think that it is possible in case when the user deletes the profile on filesystem right before downloading copybooks.\nWe need another Error type and Error message for this case. I'll add them.", "author": "grianbrcom", "createdAt": "2020-05-14T09:08:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk3MDY4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA0NTEwOA==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/353#discussion_r425045108", "bodyText": "Ha! I can't reproduce it.\nWhen I choose the profile, then delete the file and try to download copybook via \"quick fix\", the IDE asks me to choose the other profile.\nWhen I delete all profiles, IDE shows an error \"Zowe profile is missing\".\nThis case already covered.", "author": "grianbrcom", "createdAt": "2020-05-14T10:48:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk3MDY4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk3MTY4Nw==", "url": "https://github.com/eclipse/che-che4z-lsp-for-cobol/pull/353#discussion_r424971687", "bodyText": "Nice, it looks simpler than a hierarchy of classes. Like, subscribe.", "author": "ishche", "createdAt": "2020-05-14T08:47:07Z", "path": "clients/cobol-lsp-vscode-extension/src/services/ZoweError.ts", "diffHunk": "@@ -0,0 +1,33 @@\n+import { RestClientError } from \"@zowe/imperative\";\n+\n+export function convertError(error: any): Error {\n+    if (error instanceof RestClientError) {\n+        switch (+error.mDetails.errorCode) {\n+            case 401:\n+                return new ZoweError(\"Invalid credentials\", Type.InvalidCredentials);\n+            case 404:\n+                return new ZoweError(\"Not found\", Type.NotFound);\n+        }\n+        if (error.mDetails.causeErrors != null &&\n+            (error.mDetails.causeErrors.code === \"ECONNREFUSED\" ||\n+             error.mDetails.causeErrors.code === \"ENOTFOUND\")) {\n+            return new ZoweError(`Connection refused to ${error.mDetails.host}:${error.mDetails.port}`,\n+                Type.ConnRefused);\n+        }\n+    }\n+    return error;\n+}\n+\n+export class ZoweError extends Error {\n+    constructor(message: string, public type: Type = Type.General) {\n+        super(message);\n+    }\n+}\n+\n+export enum Type {", "originalCommit": "0dc05486a4b7443a77b0c073203361d9ec41dcce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}