{"pr_number": 937, "pr_title": "Add arg builder to listIncompleteUpload API", "pr_createdAt": "2020-05-15T08:04:48Z", "pr_url": "https://github.com/minio/minio-java/pull/937", "timeline": [{"oid": "9242386f8cabd23d412d53c7729fb8f45e896abe", "url": "https://github.com/minio/minio-java/commit/9242386f8cabd23d412d53c7729fb8f45e896abe", "message": "ListIncompleteUpload using builder", "committedDate": "2020-05-15T08:10:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY2MzU3Mw==", "url": "https://github.com/minio/minio-java/pull/937#discussion_r425663573", "bodyText": "We would need to sync name with API i.e. ListIncompleteUploadsArgs is more appropriate.", "author": "balamurugana", "createdAt": "2020-05-15T08:59:29Z", "path": "api/src/main/java/io/minio/ListIncompleteUploadsBucketArgs.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.minio;\n+\n+/** Argument class of @see #listIncompleteUploads(ListIncompleteUploadsBucketArgs args). */\n+public class ListIncompleteUploadsBucketArgs extends BucketArgs {", "originalCommit": "9242386f8cabd23d412d53c7729fb8f45e896abe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5d270bc6e261d6a8e3ba157133df90f2fc10da49", "url": "https://github.com/minio/minio-java/commit/5d270bc6e261d6a8e3ba157133df90f2fc10da49", "message": "add arg builder to listIncompleteUpload API", "committedDate": "2020-05-18T09:31:24Z", "type": "forcePushed"}, {"oid": "076523b8ff37ed08d10b600fd5c463f1c43c7014", "url": "https://github.com/minio/minio-java/commit/076523b8ff37ed08d10b600fd5c463f1c43c7014", "message": "add arg builder to listIncompleteUpload API", "committedDate": "2020-05-18T14:46:49Z", "type": "forcePushed"}, {"oid": "54542e6651de8abbbb270802a2c0871498e30954", "url": "https://github.com/minio/minio-java/commit/54542e6651de8abbbb270802a2c0871498e30954", "message": "add arg builder to listIncompleteUpload API", "committedDate": "2020-05-19T02:53:38Z", "type": "forcePushed"}, {"oid": "a31ecc9ebcda8770500f06ef83d7eeb7171c7aef", "url": "https://github.com/minio/minio-java/commit/a31ecc9ebcda8770500f06ef83d7eeb7171c7aef", "message": "add arg builder to listIncompleteUpload API", "committedDate": "2020-05-19T02:59:45Z", "type": "forcePushed"}, {"oid": "d11cebe09c554c529920752d8d90b1c587e2c361", "url": "https://github.com/minio/minio-java/commit/d11cebe09c554c529920752d8d90b1c587e2c361", "message": "Add arg builder to listIncompleteUpload API", "committedDate": "2020-05-19T18:16:04Z", "type": "forcePushed"}, {"oid": "dc4684ec995f0541be49fbea5850a806ae06c308", "url": "https://github.com/minio/minio-java/commit/dc4684ec995f0541be49fbea5850a806ae06c308", "message": "Add arg builder to listIncompleteUpload API", "committedDate": "2020-05-19T18:20:05Z", "type": "forcePushed"}, {"oid": "6808bb84aa4fbba9eac9a3f56f0c45549a5aa9a8", "url": "https://github.com/minio/minio-java/commit/6808bb84aa4fbba9eac9a3f56f0c45549a5aa9a8", "message": "Add arg builder to listIncompleteUpload API", "committedDate": "2020-05-20T05:27:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg0MjU5NA==", "url": "https://github.com/minio/minio-java/pull/937#discussion_r427842594", "bodyText": "License header to be added.", "author": "anjalshireesh", "createdAt": "2020-05-20T08:45:53Z", "path": "api/src/main/java/io/minio/ListIncompleteUploadsBucketArgs.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.minio;", "originalCommit": "562c157fffa506214c7484e373a1cc49b7dfb398", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg1MzE4Nw==", "url": "https://github.com/minio/minio-java/pull/937#discussion_r427853187", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return Iterable&ltResult&ltUpload&gt&gt - Lazy iterator contains object upload information.\n          \n          \n            \n               * @return Iterable&lt;Result&lt;Upload&gt;&gt; - Lazy iterator contains object upload information.", "author": "anjalshireesh", "createdAt": "2020-05-20T09:01:48Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -4450,12 +4458,36 @@ public void removeAllBucketNotification(String bucketName)\n    * @param prefix Object name starts with prefix.\n    * @param recursive List recursively than directory structure emulation.\n    * @return Iterable&ltResult&ltUpload&gt&gt - Lazy iterator contains object upload information.\n-   * @see #listIncompleteUploads(String bucketName)\n-   * @see #listIncompleteUploads(String bucketName, String prefix)\n+   * @see #listIncompleteUploads(ListIncompleteUploadsBucketArgs args)\n    */\n+  @Deprecated\n   public Iterable<Result<Upload>> listIncompleteUploads(\n       String bucketName, String prefix, boolean recursive) {\n-    return listIncompleteUploads(bucketName, prefix, recursive, true);\n+    return listIncompleteUploads(\n+        ListIncompleteUploadsBucketArgs.builder()\n+            .bucket(bucketName)\n+            .prefix(prefix)\n+            .recursive(recursive)\n+            .build());\n+  }\n+\n+  /**\n+   * Lists incomplete object upload information of a bucket for prefix recursively.\n+   *\n+   * <pre>Example:{@code\n+   * Iterable<Result<Upload>> results =\n+   *     minioClient.listIncompleteUploads(ListIncompleteUploadsBucketArgs args);\n+   * for (Result<Upload> result : results) {\n+   *   Upload upload = result.get();\n+   *   System.out.println(upload.uploadId() + \", \" + upload.objectName());\n+   * }\n+   * }</pre>\n+   *\n+   * @param args Arguments for listing incomplete uploads.\n+   * @return Iterable&ltResult&ltUpload&gt&gt - Lazy iterator contains object upload information.", "originalCommit": "562c157fffa506214c7484e373a1cc49b7dfb398", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7363336e7068ee87fdafd61bb974e7726758a586", "url": "https://github.com/minio/minio-java/commit/7363336e7068ee87fdafd61bb974e7726758a586", "message": "Address review comments", "committedDate": "2020-05-20T09:30:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ1ODA0OA==", "url": "https://github.com/minio/minio-java/pull/937#discussion_r428458048", "bodyText": "Could you add all parameters like listObjects()? Similarly you could check reusing/modifying existing objectIterator class to accommodate this listing as well.", "author": "balamurugana", "createdAt": "2020-05-21T05:50:25Z", "path": "api/src/main/java/io/minio/ListIncompleteUploadsArgs.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+/** Argument class of @see #listIncompleteUploads(ListIncompleteUploadsArgs args). */\n+public class ListIncompleteUploadsArgs extends BucketArgs {", "originalCommit": "7363336e7068ee87fdafd61bb974e7726758a586", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2Mjc5Nw==", "url": "https://github.com/minio/minio-java/pull/937#discussion_r436462797", "bodyText": "IMO this not feasible as there are two different API's expecting different  query parameters.\nList Incomplete upload : https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html\nGET /?uploads&Delimiter=Delimiter&EncodingType=EncodingType&KeyMarker=KeyMarker&MaxUploads=MaxUploads&Prefix=Prefix&UploadIdMarker=UploadIdMarker HTTP/1.1\nHost: Bucket.s3.amazonaws.com\n\nList Objects : https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjectsV2.html\nGET /?list-type=2&ContinuationToken=ContinuationToken&Delimiter=Delimiter&EncodingType=EncodingType&FetchOwner=FetchOwner&MaxKeys=MaxKeys&Prefix=Prefix&StartAfter=StartAfter HTTP/1.1\nHost: Bucket.s3.amazonaws.com\nx-amz-request-payer: RequestPayer\n\nAs far as using object Iterator is concerned it implements Iterator of Item type, (ObjectIterator implements Iterator<Result<Item>> ) while list incompleteUpload needs Iterator of type Upload Iterator<Result<Upload>> . Item and Upload the the different response classes for these api.\nIMO  listObjects and listIncompleteObjects being separate is correct.", "author": "sinhaashish", "createdAt": "2020-06-08T05:24:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ1ODA0OA=="}], "type": "inlineReview"}, {"oid": "5ba32ac95d84f888110dd189434edc7e37f73b36", "url": "https://github.com/minio/minio-java/commit/5ba32ac95d84f888110dd189434edc7e37f73b36", "message": "Address review comments", "committedDate": "2020-06-05T10:59:27Z", "type": "forcePushed"}, {"oid": "dc0206950fb9bcbbede267a6176c9ebd12bfd40a", "url": "https://github.com/minio/minio-java/commit/dc0206950fb9bcbbede267a6176c9ebd12bfd40a", "message": "Address review comments", "committedDate": "2020-06-08T05:07:45Z", "type": "forcePushed"}, {"oid": "517aa4829edcb8b298b72068fc1ab37958475a47", "url": "https://github.com/minio/minio-java/commit/517aa4829edcb8b298b72068fc1ab37958475a47", "message": "Address review comments", "committedDate": "2020-06-09T03:57:00Z", "type": "forcePushed"}, {"oid": "dc10893992db8b9f28f4ccd1a5ac6df1eb017d3e", "url": "https://github.com/minio/minio-java/commit/dc10893992db8b9f28f4ccd1a5ac6df1eb017d3e", "message": "ListIncompleteUpload using builder", "committedDate": "2020-06-10T09:44:25Z", "type": "commit"}, {"oid": "4a85492ec8b75713df3377815f7b3531b9ac1ad5", "url": "https://github.com/minio/minio-java/commit/4a85492ec8b75713df3377815f7b3531b9ac1ad5", "message": "Renamed ListIncompleteUploadsBucketArgs to ListIncompleteUploadsArgs", "committedDate": "2020-06-10T09:44:25Z", "type": "commit"}, {"oid": "f54db6625dde6c402cfdcd002d17d796a8e9ae12", "url": "https://github.com/minio/minio-java/commit/f54db6625dde6c402cfdcd002d17d796a8e9ae12", "message": "Add arg builder to listIncompleteUpload API", "committedDate": "2020-06-10T09:45:01Z", "type": "commit"}, {"oid": "c47588f4a99bf00d11c81e5086559953ed9b8d44", "url": "https://github.com/minio/minio-java/commit/c47588f4a99bf00d11c81e5086559953ed9b8d44", "message": "Address review comments", "committedDate": "2020-06-10T09:45:01Z", "type": "commit"}, {"oid": "1f7ea5b1823580bd482358b09dcacaf9bd3c6169", "url": "https://github.com/minio/minio-java/commit/1f7ea5b1823580bd482358b09dcacaf9bd3c6169", "message": "Address review comments", "committedDate": "2020-06-10T09:45:01Z", "type": "commit"}, {"oid": "32d7d657347279d2f3cac269a1ac6c9ed748cc04", "url": "https://github.com/minio/minio-java/commit/32d7d657347279d2f3cac269a1ac6c9ed748cc04", "message": "Add extra params", "committedDate": "2020-06-10T09:47:10Z", "type": "forcePushed"}, {"oid": "9862e92bff8ba9160604109146df509673bbfb83", "url": "https://github.com/minio/minio-java/commit/9862e92bff8ba9160604109146df509673bbfb83", "message": "Add extra params", "committedDate": "2020-06-10T10:01:17Z", "type": "commit"}, {"oid": "9862e92bff8ba9160604109146df509673bbfb83", "url": "https://github.com/minio/minio-java/commit/9862e92bff8ba9160604109146df509673bbfb83", "message": "Add extra params", "committedDate": "2020-06-10T10:01:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4NDM5OQ==", "url": "https://github.com/minio/minio-java/pull/937#discussion_r438084399", "bodyText": "encoding-type can be set with only one option i.e. it looks boolean. We could have urlEncoding(boolean flag) would be more appropriate\nAs encoding-type=url is helpful to get properly encoded string of unicode/control characters in names, we could set it as default.", "author": "balamurugana", "createdAt": "2020-06-10T12:31:29Z", "path": "api/src/main/java/io/minio/ListIncompleteUploadsArgs.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+/** Argument class of @see #listIncompleteUploads(ListIncompleteUploadsArgs args). */\n+public class ListIncompleteUploadsArgs extends BucketArgs {\n+  private String prefix;\n+  private String delimiter;\n+  private String encodingType;\n+  private String keyMarker;\n+  private Integer maxUploads;\n+  private String uploadIdMarker;\n+  private boolean recursive;\n+\n+  public String prefix() {\n+    return prefix;\n+  }\n+\n+  public String delimiter() {\n+    return delimiter;\n+  }\n+\n+  public String encodingType() {\n+    return encodingType;\n+  }\n+\n+  public String keyMarker() {\n+    return keyMarker;\n+  }\n+\n+  public Integer maxUploads() {\n+    return maxUploads;\n+  }\n+\n+  public String uploadIdMarker() {\n+    return uploadIdMarker;\n+  }\n+\n+  public boolean recursive() {\n+    return recursive;\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /** Argument builder of @see #listIncompleteUploads(ListIncompleteUploadsArgs args). */\n+  public static final class Builder extends BucketArgs.Builder<Builder, ListIncompleteUploadsArgs> {\n+    public Builder prefix(String prefix) {\n+      operations.add(args -> args.prefix = prefix);\n+      return this;\n+    }\n+\n+    public Builder delimitter(String delimiter) {\n+      operations.add(args -> args.delimiter = delimiter);\n+      return this;\n+    }\n+\n+    public Builder encodingType(String encodingType) {", "originalCommit": "9862e92bff8ba9160604109146df509673bbfb83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1OTc2MA==", "url": "https://github.com/minio/minio-java/pull/937#discussion_r438159760", "bodyText": "keyMarker cannot be \"\"; but can be null. You could use validateNullOrNotEmpty()", "author": "balamurugana", "createdAt": "2020-06-10T14:20:11Z", "path": "api/src/main/java/io/minio/ListIncompleteUploadsArgs.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+/** Argument class of @see #listIncompleteUploads(ListIncompleteUploadsArgs args). */\n+public class ListIncompleteUploadsArgs extends BucketArgs {\n+  private String prefix;\n+  private String delimiter;\n+  private String encodingType;\n+  private String keyMarker;\n+  private Integer maxUploads;\n+  private String uploadIdMarker;\n+  private boolean recursive;\n+\n+  public String prefix() {\n+    return prefix;\n+  }\n+\n+  public String delimiter() {\n+    return delimiter;\n+  }\n+\n+  public String encodingType() {\n+    return encodingType;\n+  }\n+\n+  public String keyMarker() {\n+    return keyMarker;\n+  }\n+\n+  public Integer maxUploads() {\n+    return maxUploads;\n+  }\n+\n+  public String uploadIdMarker() {\n+    return uploadIdMarker;\n+  }\n+\n+  public boolean recursive() {\n+    return recursive;\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /** Argument builder of @see #listIncompleteUploads(ListIncompleteUploadsArgs args). */\n+  public static final class Builder extends BucketArgs.Builder<Builder, ListIncompleteUploadsArgs> {\n+    public Builder prefix(String prefix) {\n+      operations.add(args -> args.prefix = prefix);\n+      return this;\n+    }\n+\n+    public Builder delimitter(String delimiter) {\n+      operations.add(args -> args.delimiter = delimiter);\n+      return this;\n+    }\n+\n+    public Builder encodingType(String encodingType) {\n+      if (!encodingType.equals(\"url\")) {\n+        throw new IllegalArgumentException(\" valid value for encodingType is url \");\n+      }\n+      operations.add(args -> args.encodingType = encodingType);\n+      return this;\n+    }\n+\n+    public Builder keyMarker(String keyMarker) {", "originalCommit": "9862e92bff8ba9160604109146df509673bbfb83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2MDY5Mw==", "url": "https://github.com/minio/minio-java/pull/937#discussion_r438160693", "bodyText": "you could remove trailing/leading extra spaces at 1 and 1000", "author": "balamurugana", "createdAt": "2020-06-10T14:21:20Z", "path": "api/src/main/java/io/minio/ListIncompleteUploadsArgs.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+/** Argument class of @see #listIncompleteUploads(ListIncompleteUploadsArgs args). */\n+public class ListIncompleteUploadsArgs extends BucketArgs {\n+  private String prefix;\n+  private String delimiter;\n+  private String encodingType;\n+  private String keyMarker;\n+  private Integer maxUploads;\n+  private String uploadIdMarker;\n+  private boolean recursive;\n+\n+  public String prefix() {\n+    return prefix;\n+  }\n+\n+  public String delimiter() {\n+    return delimiter;\n+  }\n+\n+  public String encodingType() {\n+    return encodingType;\n+  }\n+\n+  public String keyMarker() {\n+    return keyMarker;\n+  }\n+\n+  public Integer maxUploads() {\n+    return maxUploads;\n+  }\n+\n+  public String uploadIdMarker() {\n+    return uploadIdMarker;\n+  }\n+\n+  public boolean recursive() {\n+    return recursive;\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /** Argument builder of @see #listIncompleteUploads(ListIncompleteUploadsArgs args). */\n+  public static final class Builder extends BucketArgs.Builder<Builder, ListIncompleteUploadsArgs> {\n+    public Builder prefix(String prefix) {\n+      operations.add(args -> args.prefix = prefix);\n+      return this;\n+    }\n+\n+    public Builder delimitter(String delimiter) {\n+      operations.add(args -> args.delimiter = delimiter);\n+      return this;\n+    }\n+\n+    public Builder encodingType(String encodingType) {\n+      if (!encodingType.equals(\"url\")) {\n+        throw new IllegalArgumentException(\" valid value for encodingType is url \");\n+      }\n+      operations.add(args -> args.encodingType = encodingType);\n+      return this;\n+    }\n+\n+    public Builder keyMarker(String keyMarker) {\n+      operations.add(args -> args.keyMarker = keyMarker);\n+      return this;\n+    }\n+\n+    public Builder maxUploads(int maxUploads) {\n+      if (maxUploads < 1 || maxUploads > 1000) {\n+        throw new IllegalArgumentException(\"maxUploads must be minimum 1  to maximum  1000\");", "originalCommit": "9862e92bff8ba9160604109146df509673bbfb83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2MTMyNA==", "url": "https://github.com/minio/minio-java/pull/937#discussion_r438161324", "bodyText": "uploadIdMarker cannot be \"\"; but can be null. You could use validateNullOrNotEmpty()", "author": "balamurugana", "createdAt": "2020-06-10T14:22:10Z", "path": "api/src/main/java/io/minio/ListIncompleteUploadsArgs.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+/** Argument class of @see #listIncompleteUploads(ListIncompleteUploadsArgs args). */\n+public class ListIncompleteUploadsArgs extends BucketArgs {\n+  private String prefix;\n+  private String delimiter;\n+  private String encodingType;\n+  private String keyMarker;\n+  private Integer maxUploads;\n+  private String uploadIdMarker;\n+  private boolean recursive;\n+\n+  public String prefix() {\n+    return prefix;\n+  }\n+\n+  public String delimiter() {\n+    return delimiter;\n+  }\n+\n+  public String encodingType() {\n+    return encodingType;\n+  }\n+\n+  public String keyMarker() {\n+    return keyMarker;\n+  }\n+\n+  public Integer maxUploads() {\n+    return maxUploads;\n+  }\n+\n+  public String uploadIdMarker() {\n+    return uploadIdMarker;\n+  }\n+\n+  public boolean recursive() {\n+    return recursive;\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /** Argument builder of @see #listIncompleteUploads(ListIncompleteUploadsArgs args). */\n+  public static final class Builder extends BucketArgs.Builder<Builder, ListIncompleteUploadsArgs> {\n+    public Builder prefix(String prefix) {\n+      operations.add(args -> args.prefix = prefix);\n+      return this;\n+    }\n+\n+    public Builder delimitter(String delimiter) {\n+      operations.add(args -> args.delimiter = delimiter);\n+      return this;\n+    }\n+\n+    public Builder encodingType(String encodingType) {\n+      if (!encodingType.equals(\"url\")) {\n+        throw new IllegalArgumentException(\" valid value for encodingType is url \");\n+      }\n+      operations.add(args -> args.encodingType = encodingType);\n+      return this;\n+    }\n+\n+    public Builder keyMarker(String keyMarker) {\n+      operations.add(args -> args.keyMarker = keyMarker);\n+      return this;\n+    }\n+\n+    public Builder maxUploads(int maxUploads) {\n+      if (maxUploads < 1 || maxUploads > 1000) {\n+        throw new IllegalArgumentException(\"maxUploads must be minimum 1  to maximum  1000\");\n+      }\n+      operations.add(args -> args.maxUploads = maxUploads);\n+      return this;\n+    }\n+\n+    public Builder uploadIdMarker(String uploadIdMarker) {\n+      operations.add(args -> args.uploadIdMarker = uploadIdMarker);", "originalCommit": "9862e92bff8ba9160604109146df509673bbfb83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIxOTUyNg==", "url": "https://github.com/minio/minio-java/pull/937#discussion_r438219526", "bodyText": "Please remove redundant comments", "author": "anjalshireesh", "createdAt": "2020-06-10T15:36:49Z", "path": "functional/FunctionalTest.java", "diffHunk": "@@ -1859,8 +1859,8 @@ public static void listIncompleteUploads_test1() throws Exception {\n         }\n       }\n \n-      client.removeIncompleteUpload(\n-          RemoveIncompleteUploadArgs.builder().bucket(bucketName).object(objectName).build());\n+      // client.removeIncompleteUpload(\n+      //     RemoveIncompleteUploadArgs.builder().bucket(bucketName).object(objectName).build());", "originalCommit": "9862e92bff8ba9160604109146df509673bbfb83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIyMTQyNQ==", "url": "https://github.com/minio/minio-java/pull/937#discussion_r438221425", "bodyText": "Please fix the comment formatting.", "author": "anjalshireesh", "createdAt": "2020-06-10T15:39:32Z", "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -5985,32 +6003,29 @@ public void deleteBucketNotification(DeleteBucketNotificationArgs args)\n    */\n   public Iterable<Result<Upload>> listIncompleteUploads(ListIncompleteUploadsArgs args) {\n     checkArgs(args);\n-    return listIncompleteUploads(args.bucket(), args.prefix(), args.recursive(), true);\n+    return this.listIncompleteUploads(args, true);\n   }\n \n-  /**\n-   * Returns Iterable<Result<Upload>> of given bucket name, prefix and recursive flag. All parts\n-   * size are aggregated when aggregatePartSize is true.\n-   */\n+  // /**\n+  //  * Returns Iterable<Result<Upload>> of given ListIncompleteUploadsArgs argumentsr. All parts\n+  //  * size are aggregated when aggregatePartSize is true.\n+  //  */", "originalCommit": "9862e92bff8ba9160604109146df509673bbfb83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7bb236167098da7c4ef57400c6375e1ce1a863b8", "url": "https://github.com/minio/minio-java/commit/7bb236167098da7c4ef57400c6375e1ce1a863b8", "message": "Set endodeType as default", "committedDate": "2020-06-10T16:41:44Z", "type": "commit"}, {"oid": "7bb236167098da7c4ef57400c6375e1ce1a863b8", "url": "https://github.com/minio/minio-java/commit/7bb236167098da7c4ef57400c6375e1ce1a863b8", "message": "Set endodeType as default", "committedDate": "2020-06-10T16:41:44Z", "type": "forcePushed"}]}