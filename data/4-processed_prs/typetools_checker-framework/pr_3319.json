{"pr_number": 3319, "pr_title": "Improve AnnotatedTypeScanner and SimpleAnnotatedTypeScanner", "pr_createdAt": "2020-05-21T20:46:18Z", "pr_url": "https://github.com/typetools/checker-framework/pull/3319", "timeline": [{"oid": "7103f31564c910c8a20ffc3616a4d23cd1d66bf2", "url": "https://github.com/typetools/checker-framework/commit/7103f31564c910c8a20ffc3616a4d23cd1d66bf2", "message": "Move a file and explain the `visitor` directory", "committedDate": "2020-04-14T03:31:11Z", "type": "commit"}, {"oid": "3740dd645b4b0f1c8f368e4922baadea72e6cf22", "url": "https://github.com/typetools/checker-framework/commit/3740dd645b4b0f1c8f368e4922baadea72e6cf22", "message": "Move text to a different file.", "committedDate": "2020-04-19T21:57:13Z", "type": "commit"}, {"oid": "ee7dfaa9df28eb509ba16d5f4bda4d7de6b768ee", "url": "https://github.com/typetools/checker-framework/commit/ee7dfaa9df28eb509ba16d5f4bda4d7de6b768ee", "message": "Make classes abstract", "committedDate": "2020-04-19T22:00:41Z", "type": "commit"}, {"oid": "565bbf06c221eeabcff84c2a7f8294b84d5552c8", "url": "https://github.com/typetools/checker-framework/commit/565bbf06c221eeabcff84c2a7f8294b84d5552c8", "message": "Merge ../checker-framework-branch-master into framework-visitor-2", "committedDate": "2020-04-19T22:27:55Z", "type": "commit"}, {"oid": "ed6cda52a5a0e65539177dbe4f65020922ff71d0", "url": "https://github.com/typetools/checker-framework/commit/ed6cda52a5a0e65539177dbe4f65020922ff71d0", "message": "Fix compilation errors", "committedDate": "2020-04-19T23:04:38Z", "type": "commit"}, {"oid": "35a3014ad19c20bf270dc22db08579ba6c6aaa85", "url": "https://github.com/typetools/checker-framework/commit/35a3014ad19c20bf270dc22db08579ba6c6aaa85", "message": "Add (vague) Javadoc", "committedDate": "2020-04-20T14:55:18Z", "type": "commit"}, {"oid": "22fb38f515d864cf9ba9aaf45c923adec2dc6cf3", "url": "https://github.com/typetools/checker-framework/commit/22fb38f515d864cf9ba9aaf45c923adec2dc6cf3", "message": "Merge ../checker-framework-branch-master into framework-visitor-2", "committedDate": "2020-04-20T21:24:09Z", "type": "commit"}, {"oid": "2e58efe0ce6115d200bee89d8140f845a47ec64d", "url": "https://github.com/typetools/checker-framework/commit/2e58efe0ce6115d200bee89d8140f845a47ec64d", "message": "Merge branch 'master' into framework-visitor-2", "committedDate": "2020-05-18T20:10:44Z", "type": "commit"}, {"oid": "3b4892e7b99cbea9b7030ad5c31ad3b9483681a4", "url": "https://github.com/typetools/checker-framework/commit/3b4892e7b99cbea9b7030ad5c31ad3b9483681a4", "message": "Add functional constructors.", "committedDate": "2020-05-19T16:50:41Z", "type": "commit"}, {"oid": "8898b99c7ab41faa83766257cdeb387ae16ca86c", "url": "https://github.com/typetools/checker-framework/commit/8898b99c7ab41faa83766257cdeb387ae16ca86c", "message": "Convert to functional.", "committedDate": "2020-05-19T17:47:12Z", "type": "commit"}, {"oid": "f80a5b2793c44660feb2b94f069abe1c47115f3b", "url": "https://github.com/typetools/checker-framework/commit/f80a5b2793c44660feb2b94f069abe1c47115f3b", "message": "Fix bug.", "committedDate": "2020-05-19T20:18:51Z", "type": "commit"}, {"oid": "b41c86c37cb8eddba85cef6a5e38efc348e3459e", "url": "https://github.com/typetools/checker-framework/commit/b41c86c37cb8eddba85cef6a5e38efc348e3459e", "message": "Add default value, add Javadoc, fix few bugs.", "committedDate": "2020-05-20T16:09:52Z", "type": "commit"}, {"oid": "0ee72e9ea85d63d473cce7295a101d70f4c97c5d", "url": "https://github.com/typetools/checker-framework/commit/0ee72e9ea85d63d473cce7295a101d70f4c97c5d", "message": "Use SimpleATS.", "committedDate": "2020-05-20T16:41:04Z", "type": "commit"}, {"oid": "28c281da948096eaddbf9dcfc7be94be7ad5a0a6", "url": "https://github.com/typetools/checker-framework/commit/28c281da948096eaddbf9dcfc7be94be7ad5a0a6", "message": "Add default result and javadoc.", "committedDate": "2020-05-20T16:43:26Z", "type": "commit"}, {"oid": "c192b0512056c34adc6aae615b86652b3a3e0422", "url": "https://github.com/typetools/checker-framework/commit/c192b0512056c34adc6aae615b86652b3a3e0422", "message": "Correct Javadoc.", "committedDate": "2020-05-20T16:46:06Z", "type": "commit"}, {"oid": "e97dd0114ccc166446d03a033040912a770cfccd", "url": "https://github.com/typetools/checker-framework/commit/e97dd0114ccc166446d03a033040912a770cfccd", "message": "Correct bug.", "committedDate": "2020-05-20T16:49:24Z", "type": "commit"}, {"oid": "70e676bc132e67233219cf9c6807acb2a3c8c1f7", "url": "https://github.com/typetools/checker-framework/commit/70e676bc132e67233219cf9c6807acb2a3c8c1f7", "message": "Merge branch 'tmp' into type-scanner-function\n\n# Conflicts:\n#\tframework/src/main/java/org/checkerframework/framework/type/visitor/AnnotatedTypeScanner.java", "committedDate": "2020-05-20T16:58:15Z", "type": "commit"}, {"oid": "bad9816fbd07f3035bc8ec30069486620f0e0b4f", "url": "https://github.com/typetools/checker-framework/commit/bad9816fbd07f3035bc8ec30069486620f0e0b4f", "message": "Clean up hashcode visitor.", "committedDate": "2020-05-20T17:14:13Z", "type": "commit"}, {"oid": "f1dcfd96d3fe3b150d59eb608bcb1193f52e4621", "url": "https://github.com/typetools/checker-framework/commit/f1dcfd96d3fe3b150d59eb608bcb1193f52e4621", "message": "ExpressionErrorChecker and TCConvert", "committedDate": "2020-05-20T17:26:38Z", "type": "commit"}, {"oid": "07610753024f13a0ddc0b478037495d194e070b1", "url": "https://github.com/typetools/checker-framework/commit/07610753024f13a0ddc0b478037495d194e070b1", "message": "Add comment.", "committedDate": "2020-05-20T17:37:53Z", "type": "commit"}, {"oid": "b992c77d3df48b6a3b726e8a8a6cadc36f54de12", "url": "https://github.com/typetools/checker-framework/commit/b992c77d3df48b6a3b726e8a8a6cadc36f54de12", "message": "Correct.", "committedDate": "2020-05-20T17:40:41Z", "type": "commit"}, {"oid": "59103e378c782fe54f8158769b0ac74e3a7d3af8", "url": "https://github.com/typetools/checker-framework/commit/59103e378c782fe54f8158769b0ac74e3a7d3af8", "message": "Javadoc.", "committedDate": "2020-05-20T19:17:50Z", "type": "commit"}, {"oid": "2636e540146622be03f40c27fb1225e4cf1b962c", "url": "https://github.com/typetools/checker-framework/commit/2636e540146622be03f40c27fb1225e4cf1b962c", "message": "Javadoc.", "committedDate": "2020-05-20T19:39:00Z", "type": "commit"}, {"oid": "c01e604c0ad74166dfe323fe84fe27c456c8a806", "url": "https://github.com/typetools/checker-framework/commit/c01e604c0ad74166dfe323fe84fe27c456c8a806", "message": "Javadoc.", "committedDate": "2020-05-20T19:51:08Z", "type": "commit"}, {"oid": "e8347e3ba6c46741936d664059faa8ce76d37d32", "url": "https://github.com/typetools/checker-framework/commit/e8347e3ba6c46741936d664059faa8ce76d37d32", "message": "Fix Javdoc.", "committedDate": "2020-05-20T20:08:55Z", "type": "commit"}, {"oid": "dfceaa0a720d64de442c21c10f91b643c346a0dc", "url": "https://github.com/typetools/checker-framework/commit/dfceaa0a720d64de442c21c10f91b643c346a0dc", "message": "Fix typo.", "committedDate": "2020-05-20T20:28:10Z", "type": "commit"}, {"oid": "f38d40f2fa15b8550cae149c87e4611e7c868bff", "url": "https://github.com/typetools/checker-framework/commit/f38d40f2fa15b8550cae149c87e4611e7c868bff", "message": "Checkpoint.", "committedDate": "2020-05-20T21:02:01Z", "type": "commit"}, {"oid": "8eb1004a223e016120840b4a411901908a754648", "url": "https://github.com/typetools/checker-framework/commit/8eb1004a223e016120840b4a411901908a754648", "message": "Checkpoint.", "committedDate": "2020-05-20T21:18:15Z", "type": "commit"}, {"oid": "c8c5b0e128335c5a57c4b17f38cf454fbb3bd702", "url": "https://github.com/typetools/checker-framework/commit/c8c5b0e128335c5a57c4b17f38cf454fbb3bd702", "message": "Checkpoint.", "committedDate": "2020-05-20T21:30:35Z", "type": "commit"}, {"oid": "75d67dfef6a288d082df3a6b6e92bcad980de8d8", "url": "https://github.com/typetools/checker-framework/commit/75d67dfef6a288d082df3a6b6e92bcad980de8d8", "message": "Correct HashCodeVisitor.", "committedDate": "2020-05-20T21:48:29Z", "type": "commit"}, {"oid": "c09b8089e7041dbe85f7602dc97df2e0972e1f09", "url": "https://github.com/typetools/checker-framework/commit/c09b8089e7041dbe85f7602dc97df2e0972e1f09", "message": "Tweaks and more Javadoc.", "committedDate": "2020-05-21T16:29:08Z", "type": "commit"}, {"oid": "0b00e050d41f6f2d2e6bd17ca441c726c3d922a2", "url": "https://github.com/typetools/checker-framework/commit/0b00e050d41f6f2d2e6bd17ca441c726c3d922a2", "message": "Tweaks and more Javadoc.", "committedDate": "2020-05-21T16:30:10Z", "type": "commit"}, {"oid": "dffc1a07134b6eefc853d44009b47dbb6e289120", "url": "https://github.com/typetools/checker-framework/commit/dffc1a07134b6eefc853d44009b47dbb6e289120", "message": "Correction.", "committedDate": "2020-05-21T16:31:35Z", "type": "commit"}, {"oid": "bbd9774dd7bc614620ba09af5d456bca388a53c9", "url": "https://github.com/typetools/checker-framework/commit/bbd9774dd7bc614620ba09af5d456bca388a53c9", "message": "Reduce code.", "committedDate": "2020-05-21T17:08:11Z", "type": "commit"}, {"oid": "c0f0bdbf974c2a6cc957dd822700b8fb40436201", "url": "https://github.com/typetools/checker-framework/commit/c0f0bdbf974c2a6cc957dd822700b8fb40436201", "message": "Corrections.", "committedDate": "2020-05-21T17:36:39Z", "type": "commit"}, {"oid": "f04357c88e82fc2df5b9838a51b0c99e6b2b7ce6", "url": "https://github.com/typetools/checker-framework/commit/f04357c88e82fc2df5b9838a51b0c99e6b2b7ce6", "message": "Add Javadoc.", "committedDate": "2020-05-21T18:37:14Z", "type": "commit"}, {"oid": "7b4bd7e7bb1135871bb86e9f93c4bf01e991716a", "url": "https://github.com/typetools/checker-framework/commit/7b4bd7e7bb1135871bb86e9f93c4bf01e991716a", "message": "Add Javadoc.", "committedDate": "2020-05-21T18:56:11Z", "type": "commit"}, {"oid": "e4b17b6712f68b47617081c80b11cc05f102006f", "url": "https://github.com/typetools/checker-framework/commit/e4b17b6712f68b47617081c80b11cc05f102006f", "message": "Merge remote-tracking branch 'remotes/origin/master' into type-scanner-function", "committedDate": "2020-06-02T19:26:30Z", "type": "commit"}, {"oid": "abb998e995b1f6d7c39f62704509ecbf25735fca", "url": "https://github.com/typetools/checker-framework/commit/abb998e995b1f6d7c39f62704509ecbf25735fca", "message": "Merge ../checker-framework-branch-master into type-scanner-function", "committedDate": "2020-06-03T16:53:28Z", "type": "commit"}, {"oid": "0120a6ebe6437728b7b47e1621eabe59eed0cd3e", "url": "https://github.com/typetools/checker-framework/commit/0120a6ebe6437728b7b47e1621eabe59eed0cd3e", "message": "Fix ErrorProne warnings.", "committedDate": "2020-06-03T18:43:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI3MzQ1OA==", "url": "https://github.com/typetools/checker-framework/pull/3319#discussion_r440273458", "bodyText": "At least for the completer I think I would keep the separate non-anonymous class. The lambda contains a nested lambda and it get's quite hard to read.", "author": "wmdietl", "createdAt": "2020-06-15T15:48:12Z", "path": "framework/src/main/java/org/checkerframework/framework/type/poly/AbstractQualifierPolymorphism.java", "diffHunk": "@@ -98,6 +98,33 @@ protected AbstractQualifierPolymorphism(\n         this.atypeFactory = factory;\n         this.qualHierarchy = factory.getQualifierHierarchy();\n         this.topQuals = new AnnotationMirrorSet(qualHierarchy.getTopAnnotations());\n+\n+        this.completer =", "originalCommit": "0120a6ebe6437728b7b47e1621eabe59eed0cd3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI3NDkwMQ==", "url": "https://github.com/typetools/checker-framework/pull/3319#discussion_r440274901", "bodyText": "Should the overriden be overriding?", "author": "wmdietl", "createdAt": "2020-06-15T15:50:17Z", "path": "framework/src/main/java/org/checkerframework/framework/type/visitor/AnnotatedTypeScanner.java", "diffHunk": "@@ -15,46 +16,140 @@\n import org.checkerframework.framework.type.AnnotatedTypeMirror.AnnotatedWildcardType;\n \n /**\n- * A TypeVisitor that visits all the child tree nodes. To visit types of a particular type, just\n- * override the corresponding visitXYZ method. Inside your method, call super.visitXYZ to visit\n- * descendant nodes.\n+ * An {@code AnnotatedTypeScanner} visits an {@link AnnotatedTypeMirror} and all of its child {@link\n+ * AnnotatedTypeMirror} and preforms some function depending on the kind of type. A {@link\n+ * SimpleAnnotatedTypeScanner} scans an {@link AnnotatedTypeMirror} and preforms the same function\n+ * regardless of the kind of type. The function returns some value with type {@link R} and takes an\n+ * argument of type {@link P}. If the function does not return any value, then {@code R} should be\n+ * {@link Void}. If the function takes not arguments, then {@code P} should be {@link Void}.\n  *\n- * <p>The default implementation of the visitXYZ methods will determine a result as follows:\n+ * <p>The default implementation of the visitAnnotatedTypeMirror methods will determine a result as\n+ * follows:\n  *\n  * <ul>\n- *   <li>If the node being visited has no children, the result will be null.\n- *   <li>If the node being visited has one child, the result will be the result of calling scan on\n- *       that child. The child may be a simple node or itself a list of nodes.\n- *   <li>If the node being visited has more than one child, the result will be determined by calling\n- *       scan each child in turn, and then combining the result of each scan after the first with\n- *       the cumulative result so far, as determined by the reduce(R, R) method. Each child may be\n- *       either a simple node or a list of nodes. The default behavior of the reduce method is such\n- *       that the result of the visitXYZ method will be the result of the last child scanned.\n+ *   <li>If the type being visited has no children, the {@link #defaultResult} is returned.\n+ *   <li>If the type being visited has one child, the result of visiting the child type is returned.\n+ *   <li>If the type being visited has more than one child, the result is determined by visiting\n+ *       each child in turn, and then combining the result of each with the cumulative result so\n+ *       far, as determined by the {@link #reduce} method.\n  * </ul>\n  *\n- * Here is an example to count the parameter types number of nodes in a tree:\n+ * The {@link #reduce} method combines the results of visiting child types. It can be specified by\n+ * passing an {@link Reduce} object to one of the constructors or by overriden the method directly.", "originalCommit": "0120a6ebe6437728b7b47e1621eabe59eed0cd3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI3NTQwMg==", "url": "https://github.com/typetools/checker-framework/pull/3319#discussion_r440275402", "bodyText": "Should overridden be overriding?", "author": "wmdietl", "createdAt": "2020-06-15T15:51:00Z", "path": "framework/src/main/java/org/checkerframework/framework/type/visitor/AnnotatedTypeScanner.java", "diffHunk": "@@ -15,46 +16,140 @@\n import org.checkerframework.framework.type.AnnotatedTypeMirror.AnnotatedWildcardType;\n \n /**\n- * A TypeVisitor that visits all the child tree nodes. To visit types of a particular type, just\n- * override the corresponding visitXYZ method. Inside your method, call super.visitXYZ to visit\n- * descendant nodes.\n+ * An {@code AnnotatedTypeScanner} visits an {@link AnnotatedTypeMirror} and all of its child {@link\n+ * AnnotatedTypeMirror} and preforms some function depending on the kind of type. A {@link\n+ * SimpleAnnotatedTypeScanner} scans an {@link AnnotatedTypeMirror} and preforms the same function\n+ * regardless of the kind of type. The function returns some value with type {@link R} and takes an\n+ * argument of type {@link P}. If the function does not return any value, then {@code R} should be\n+ * {@link Void}. If the function takes not arguments, then {@code P} should be {@link Void}.\n  *\n- * <p>The default implementation of the visitXYZ methods will determine a result as follows:\n+ * <p>The default implementation of the visitAnnotatedTypeMirror methods will determine a result as\n+ * follows:\n  *\n  * <ul>\n- *   <li>If the node being visited has no children, the result will be null.\n- *   <li>If the node being visited has one child, the result will be the result of calling scan on\n- *       that child. The child may be a simple node or itself a list of nodes.\n- *   <li>If the node being visited has more than one child, the result will be determined by calling\n- *       scan each child in turn, and then combining the result of each scan after the first with\n- *       the cumulative result so far, as determined by the reduce(R, R) method. Each child may be\n- *       either a simple node or a list of nodes. The default behavior of the reduce method is such\n- *       that the result of the visitXYZ method will be the result of the last child scanned.\n+ *   <li>If the type being visited has no children, the {@link #defaultResult} is returned.\n+ *   <li>If the type being visited has one child, the result of visiting the child type is returned.\n+ *   <li>If the type being visited has more than one child, the result is determined by visiting\n+ *       each child in turn, and then combining the result of each with the cumulative result so\n+ *       far, as determined by the {@link #reduce} method.\n  * </ul>\n  *\n- * Here is an example to count the parameter types number of nodes in a tree:\n+ * The {@link #reduce} method combines the results of visiting child types. It can be specified by\n+ * passing an {@link Reduce} object to one of the constructors or by overriden the method directly.\n+ * If it is not otherwise specified, the reduce returns the first result if it is not null;\n+ * otherwise, the second result is returned. If the default result is nonnull and reduce never\n+ * returns null, then both parameters passed to reduce will be nonnull.\n  *\n- * <pre><code>\n- * class CountTypeVariable extends TreeScanner {\n+ * <p>When overridden a visitAnnotatedTypeMirror method, the returned expression should be {@code", "originalCommit": "0120a6ebe6437728b7b47e1621eabe59eed0cd3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI3OTUzMg==", "url": "https://github.com/typetools/checker-framework/pull/3319#discussion_r440279532", "bodyText": "Should the an be and? Or something else should be reformulated here.", "author": "wmdietl", "createdAt": "2020-06-15T15:56:51Z", "path": "framework/src/main/java/org/checkerframework/framework/type/visitor/SimpleAnnotatedTypeScanner.java", "diffHunk": "@@ -9,9 +9,92 @@\n import org.checkerframework.framework.type.AnnotatedTypeMirror.AnnotatedPrimitiveType;\n import org.checkerframework.framework.type.AnnotatedTypeMirror.AnnotatedTypeVariable;\n import org.checkerframework.framework.type.AnnotatedTypeMirror.AnnotatedWildcardType;\n+import org.checkerframework.javacutil.BugInCF;\n \n+/**\n+ * An {@link AnnotatedTypeScanner} that scans an {@link AnnotatedTypeMirror} and performs some\n+ * {@link #defaultAction} on each type. The defaultAction can be passed to the constructor {@link\n+ * #SimpleAnnotatedTypeScanner(DefaultAction)} or this class can be extended an {@link", "originalCommit": "0120a6ebe6437728b7b47e1621eabe59eed0cd3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI4MjYzOQ==", "url": "https://github.com/typetools/checker-framework/pull/3319#discussion_r440282639", "bodyText": "Couldn't you also pass the default action in the super call above?", "author": "wmdietl", "createdAt": "2020-06-15T16:01:35Z", "path": "framework/src/main/java/org/checkerframework/framework/util/dependenttypes/DependentTypesHelper.java", "diffHunk": "@@ -829,37 +830,29 @@ private boolean isExpressionAnno(AnnotationMirror am) {\n      * returned.\n      */\n     private class ExpressionErrorChecker\n-            extends AnnotatedTypeScanner<List<DependentTypesError>, Void> {\n+            extends SimpleAnnotatedTypeScanner<List<DependentTypesError>, Void> {\n+\n+        /** Create ExpressionErrorChecker. */\n+        private ExpressionErrorChecker() {\n+            super(\n+                    (r1, r2) -> {\n+                        List<DependentTypesError> newList = new ArrayList<>(r1);\n+                        newList.addAll(r2);\n+                        return newList;\n+                    },\n+                    Collections.emptyList());\n+        }\n \n         @Override\n-        protected List<DependentTypesError> scan(AnnotatedTypeMirror type, Void aVoid) {\n+        protected List<DependentTypesError> defaultAction(AnnotatedTypeMirror type, Void aVoid) {", "originalCommit": "0120a6ebe6437728b7b47e1621eabe59eed0cd3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI4NTg1NA==", "url": "https://github.com/typetools/checker-framework/pull/3319#discussion_r440285854", "bodyText": "Could this be rewritten something like type.getAnnotations().stream().anyMatch(am -> isExpressionAnno(am))?", "author": "wmdietl", "createdAt": "2020-06-15T16:06:38Z", "path": "framework/src/main/java/org/checkerframework/framework/util/dependenttypes/DependentTypesHelper.java", "diffHunk": "@@ -918,40 +911,22 @@ private boolean hasDependentType(AnnotatedTypeMirror atm) {\n         if (atm == null) {\n             return false;\n         }\n-        Boolean b = new ContainsDependentType().visit(atm);\n-        if (b == null) {\n-            return false;\n-        }\n+        boolean b =\n+                new SimpleAnnotatedTypeScanner<>(\n+                                (type, p) -> {\n+                                    for (AnnotationMirror am : type.getAnnotations()) {", "originalCommit": "0120a6ebe6437728b7b47e1621eabe59eed0cd3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6aff8870268e3e1cbd6e4445dc1bb70a160d56dc", "url": "https://github.com/typetools/checker-framework/commit/6aff8870268e3e1cbd6e4445dc1bb70a160d56dc", "message": "Address review comments.", "committedDate": "2020-06-15T16:51:19Z", "type": "commit"}, {"oid": "bb54febe1a04efa57236d034ef6fa92993679496", "url": "https://github.com/typetools/checker-framework/commit/bb54febe1a04efa57236d034ef6fa92993679496", "message": "Merge remote-tracking branch 'origin/master' into type-scanner-function", "committedDate": "2020-06-15T16:52:17Z", "type": "commit"}, {"oid": "dad69084eecae8d791eba4be0a158a5b26ec9c3a", "url": "https://github.com/typetools/checker-framework/commit/dad69084eecae8d791eba4be0a158a5b26ec9c3a", "message": "Map.Entry.", "committedDate": "2020-06-15T18:23:05Z", "type": "commit"}]}