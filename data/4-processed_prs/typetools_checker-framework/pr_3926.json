{"pr_number": 3926, "pr_title": "Clarify VisitHistory classes.", "pr_createdAt": "2020-11-23T21:52:42Z", "pr_url": "https://github.com/typetools/checker-framework/pull/3926", "timeline": [{"oid": "0a47e6e97d38bf8f015c8b0b712e6394dbf4a46f", "url": "https://github.com/typetools/checker-framework/commit/0a47e6e97d38bf8f015c8b0b712e6394dbf4a46f", "message": "Clarify VisitHistory classes.", "committedDate": "2020-11-23T21:37:53Z", "type": "commit"}, {"oid": "e07c3b37856d3d15ddc8661a90ac24556215e289", "url": "https://github.com/typetools/checker-framework/commit/e07c3b37856d3d15ddc8661a90ac24556215e289", "message": "Revert changes.", "committedDate": "2020-11-23T21:40:04Z", "type": "commit"}, {"oid": "23177c275708cc2b448d59e657210bae2215a7bb", "url": "https://github.com/typetools/checker-framework/commit/23177c275708cc2b448d59e657210bae2215a7bb", "message": "Fix Javadoc.", "committedDate": "2020-11-23T21:48:34Z", "type": "commit"}, {"oid": "58365c9ddc807a92eeb48db6ee2f90e6e0cb8d84", "url": "https://github.com/typetools/checker-framework/commit/58365c9ddc807a92eeb48db6ee2f90e6e0cb8d84", "message": "Merge branch 'javadoc' into visitHistory", "committedDate": "2020-11-23T21:49:43Z", "type": "commit"}, {"oid": "26b80bd4224de666ae00e0d080ae1e5ded6515d0", "url": "https://github.com/typetools/checker-framework/commit/26b80bd4224de666ae00e0d080ae1e5ded6515d0", "message": "Add Javadoc.", "committedDate": "2020-11-23T22:58:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA1MzE2OA==", "url": "https://github.com/typetools/checker-framework/pull/3926#discussion_r529053168", "bodyText": "I'm having trouble parsing this English.", "author": "mernst", "createdAt": "2020-11-23T23:04:46Z", "path": "framework/src/main/java/org/checkerframework/framework/type/DefaultTypeHierarchy.java", "diffHunk": "@@ -907,10 +912,17 @@ public Boolean visitWildcard_Wildcard(\n     // interface but that handle cases that more than one visit method shares\n     // in common\n \n-    /** An intersection is a supertype if all of its bounds are a supertype of subtype. */\n+    /**\n+     * An intersection is a supertype if all of its bounds are a supertype of subtype.\n+     *\n+     * @param subtype the possible subtype\n+     * @param supertype the possible supertype\n+     * @return true if an intersection is a supertype if all of its bounds are a supertype of", "originalCommit": "26b80bd4224de666ae00e0d080ae1e5ded6515d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA1MzUzNw==", "url": "https://github.com/typetools/checker-framework/pull/3926#discussion_r529053537", "bodyText": "Nit: end sentence with period.", "author": "mernst", "createdAt": "2020-11-23T23:05:40Z", "path": "framework/src/main/java/org/checkerframework/framework/type/StructuralEqualityComparer.java", "diffHunk": "@@ -168,17 +168,21 @@ protected boolean areAllEqual(\n \n     /**\n      * First check visitHistory to see if type1 and type2 have been compared once already. If so\n-     * return true; otherwise compare them and add them to visitHistory\n+     * return true; otherwise compare them and put them in visitHistory", "originalCommit": "26b80bd4224de666ae00e0d080ae1e5ded6515d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA1MzkxNw==", "url": "https://github.com/typetools/checker-framework/pull/3926#discussion_r529053917", "bodyText": "Not related to this pull request, but this method name is rather inelegant.", "author": "mernst", "createdAt": "2020-11-23T23:06:34Z", "path": "framework/src/main/java/org/checkerframework/framework/type/StructuralEqualityComparer.java", "diffHunk": "@@ -168,17 +168,21 @@ protected boolean areAllEqual(\n \n     /**\n      * First check visitHistory to see if type1 and type2 have been compared once already. If so\n-     * return true; otherwise compare them and add them to visitHistory\n+     * return true; otherwise compare them and put them in visitHistory\n+     *\n+     * @param type1 the first type\n+     * @param type2 the second type\n+     * @return whether the two types are equal\n      */\n     protected boolean checkOrAreEqual(", "originalCommit": "26b80bd4224de666ae00e0d080ae1e5ded6515d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "21dbcd15c77fb64e7e30d8dd88a42c5fd9ab39b8", "url": "https://github.com/typetools/checker-framework/commit/21dbcd15c77fb64e7e30d8dd88a42c5fd9ab39b8", "message": "Code review.", "committedDate": "2020-11-23T23:55:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE0ODQ2Nw==", "url": "https://github.com/typetools/checker-framework/pull/3926#discussion_r529148467", "bodyText": "Like in SubtypeVisitHistory, change the Add to Put to be consistent with the new method name?", "author": "wmdietl", "createdAt": "2020-11-24T02:22:10Z", "path": "framework/src/main/java/org/checkerframework/framework/type/StructuralEqualityVisitHistory.java", "diffHunk": "@@ -32,19 +32,25 @@ public StructuralEqualityVisitHistory() {\n     /**\n      * Add result of comparing {@code type1} and {@code type2} for structural equality for the given", "originalCommit": "21dbcd15c77fb64e7e30d8dd88a42c5fd9ab39b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a31557004b6ca437e027b933004fa8b3700fc279", "url": "https://github.com/typetools/checker-framework/commit/a31557004b6ca437e027b933004fa8b3700fc279", "message": "code review.", "committedDate": "2020-11-24T02:42:02Z", "type": "commit"}, {"oid": "8104b39102579c9b43e9ce9e0cc1ef71c3bfd55f", "url": "https://github.com/typetools/checker-framework/commit/8104b39102579c9b43e9ce9e0cc1ef71c3bfd55f", "message": "Merge remote-tracking branch 'origin/master' into visitHistory", "committedDate": "2020-11-24T02:42:16Z", "type": "commit"}]}