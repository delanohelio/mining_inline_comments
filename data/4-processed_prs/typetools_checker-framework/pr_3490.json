{"pr_number": 3490, "pr_title": "Fix issue 3482: Add method and class tree to CFGLambda, handle lambda case in DOTCFGVisualizer to avoid crash.", "pr_createdAt": "2020-07-22T04:43:43Z", "pr_url": "https://github.com/typetools/checker-framework/pull/3490", "timeline": [{"oid": "71cc630682a7733b0d76bb554b5d90062a5944ef", "url": "https://github.com/typetools/checker-framework/commit/71cc630682a7733b0d76bb554b5d90062a5944ef", "message": "Resolves #3482.", "committedDate": "2020-07-22T04:06:48Z", "type": "commit"}, {"oid": "15726e2f635ba9f99e6cf9f375fa6e8032b862c8", "url": "https://github.com/typetools/checker-framework/commit/15726e2f635ba9f99e6cf9f375fa6e8032b862c8", "message": "Merge remote-tracking branch 'typetools/master' into typetools-issue3482", "committedDate": "2020-07-22T04:07:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzMzIyOA==", "url": "https://github.com/typetools/checker-framework/pull/3490#discussion_r458533228", "bodyText": "Nit: I prefer giving the variables the more specific type rather than casting at the use -- that is, move these casts to lines 1175-1178.", "author": "mernst", "createdAt": "2020-07-22T04:53:22Z", "path": "framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java", "diffHunk": "@@ -1172,10 +1172,17 @@ protected void performFlowAnalysis(ClassTree classTree) {\n \n                 while (!lambdaQueue.isEmpty()) {\n                     Pair<LambdaExpressionTree, Store> lambdaPair = lambdaQueue.poll();\n+                    Tree enclosingMethod =\n+                            TreeUtils.enclosingOfKind(getPath(lambdaPair.first), Kind.METHOD);\n+                    Tree enclosingClass =\n+                            TreeUtils.enclosingOfKind(getPath(enclosingMethod), Kind.CLASS);\n                     analyze(\n                             queue,\n                             lambdaQueue,\n-                            new CFGLambda(lambdaPair.first),\n+                            new CFGLambda(\n+                                    lambdaPair.first,\n+                                    (ClassTree) enclosingClass,", "originalCommit": "15726e2f635ba9f99e6cf9f375fa6e8032b862c8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c71aa6b21b8d40a8323755aa8d8bd1bcb302ea14", "url": "https://github.com/typetools/checker-framework/commit/c71aa6b21b8d40a8323755aa8d8bd1bcb302ea14", "message": "Resolves comment.", "committedDate": "2020-07-22T05:41:19Z", "type": "commit"}, {"oid": "a69bd2d358b3275989bccea01fa773a7baff2f24", "url": "https://github.com/typetools/checker-framework/commit/a69bd2d358b3275989bccea01fa773a7baff2f24", "message": "Merge remote-tracking branch 'typetools/master' into typetools-issue3482", "committedDate": "2020-07-22T05:41:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3MjUwMA==", "url": "https://github.com/typetools/checker-framework/pull/3490#discussion_r459772500", "bodyText": "For consistency, I would use the same variable names as in the other two cases, that is clsName and methodName.", "author": "wmdietl", "createdAt": "2020-07-23T22:56:15Z", "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/DOTCFGVisualizer.java", "diffHunk": "@@ -193,6 +194,28 @@ protected String dotOutputFileName(UnderlyingAST ast) {\n             srcLoc.append(\")::\");\n             srcLoc.append(((JCTree) cfgMethod.getMethod()).pos);\n             srcLoc.append(\">\");\n+        } else if (ast.getKind() == UnderlyingAST.Kind.LAMBDA) {\n+            CFGLambda cfgLambda = (CFGLambda) ast;\n+            String enclosingClassName = cfgLambda.getEnclosingClass().getSimpleName().toString();", "originalCommit": "a69bd2d358b3275989bccea01fa773a7baff2f24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3MzUzNw==", "url": "https://github.com/typetools/checker-framework/pull/3490#discussion_r459773537", "bodyText": "Possibly for a separate PR: what happens for an overloaded method name? The computation of outFile doesn't seem to include parameters in the METHOD case.", "author": "wmdietl", "createdAt": "2020-07-23T22:59:21Z", "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/DOTCFGVisualizer.java", "diffHunk": "@@ -193,6 +194,28 @@ protected String dotOutputFileName(UnderlyingAST ast) {\n             srcLoc.append(\")::\");\n             srcLoc.append(((JCTree) cfgMethod.getMethod()).pos);", "originalCommit": "a69bd2d358b3275989bccea01fa773a7baff2f24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5NDMxOA==", "url": "https://github.com/typetools/checker-framework/pull/3490#discussion_r460294318", "bodyText": "Get it. I will have another look.", "author": "xingweitian", "createdAt": "2020-07-24T21:23:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3MzUzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg3NTQ4Nw==", "url": "https://github.com/typetools/checker-framework/pull/3490#discussion_r461875487", "bodyText": "I have opened a new PR to solve this: #3521", "author": "xingweitian", "createdAt": "2020-07-28T20:59:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3MzUzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3NDA1OQ==", "url": "https://github.com/typetools/checker-framework/pull/3490#discussion_r459774059", "bodyText": "Maybe the hashCode isn't necessary here - in ARBITRARY_CODE it's also not included.", "author": "wmdietl", "createdAt": "2020-07-23T23:00:57Z", "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/DOTCFGVisualizer.java", "diffHunk": "@@ -193,6 +194,28 @@ protected String dotOutputFileName(UnderlyingAST ast) {\n             srcLoc.append(\")::\");\n             srcLoc.append(((JCTree) cfgMethod.getMethod()).pos);\n             srcLoc.append(\">\");\n+        } else if (ast.getKind() == UnderlyingAST.Kind.LAMBDA) {\n+            CFGLambda cfgLambda = (CFGLambda) ast;\n+            String enclosingClassName = cfgLambda.getEnclosingClass().getSimpleName().toString();\n+            String enclosingMethodName = cfgLambda.getEnclosingMethod().getName().toString();\n+            int hashCode = cfgLambda.getCode().hashCode();\n+            outFile.append(enclosingClassName);\n+            outFile.append(\"-\");\n+            outFile.append(enclosingMethodName);\n+            outFile.append(\"-\");\n+            outFile.append(hashCode);\n+\n+            srcLoc.append(\"<\");\n+            srcLoc.append(enclosingClassName);\n+            srcLoc.append(\"::\");\n+            srcLoc.append(enclosingMethodName);\n+            srcLoc.append(\"(\");\n+            srcLoc.append(cfgLambda.getEnclosingMethod().getParameters());\n+            srcLoc.append(\")::\");\n+            srcLoc.append(hashCode);", "originalCommit": "a69bd2d358b3275989bccea01fa773a7baff2f24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3NDI2OQ==", "url": "https://github.com/typetools/checker-framework/pull/3490#discussion_r459774269", "bodyText": "I would use the same field and method names as in CFGMethod.", "author": "wmdietl", "createdAt": "2020-07-23T23:01:39Z", "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/UnderlyingAST.java", "diffHunk": "@@ -75,22 +75,62 @@ public String toString() {\n     /** If the underlying AST is a lambda. */\n     public static class CFGLambda extends UnderlyingAST {\n \n+        /** The lambda expression. */\n         private final LambdaExpressionTree lambda;\n \n-        public CFGLambda(LambdaExpressionTree lambda) {\n+        /** The enclosing class of the lambda. */\n+        private final ClassTree enclosingClass;", "originalCommit": "a69bd2d358b3275989bccea01fa773a7baff2f24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3NTQ5OQ==", "url": "https://github.com/typetools/checker-framework/pull/3490#discussion_r459775499", "bodyText": "I'm wondering whether this could just be classTree.\n(I'm also wondering what the difference between ct and classTree is and whether this code should use ct instead...)", "author": "wmdietl", "createdAt": "2020-07-23T23:05:33Z", "path": "framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java", "diffHunk": "@@ -1172,10 +1172,17 @@ protected void performFlowAnalysis(ClassTree classTree) {\n \n                 while (!lambdaQueue.isEmpty()) {\n                     Pair<LambdaExpressionTree, Store> lambdaPair = lambdaQueue.poll();\n+                    MethodTree enclosingMethod =\n+                            (MethodTree)\n+                                    TreeUtils.enclosingOfKind(\n+                                            getPath(lambdaPair.first), Kind.METHOD);\n+                    ClassTree enclosingClass =", "originalCommit": "a69bd2d358b3275989bccea01fa773a7baff2f24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3NjAzNA==", "url": "https://github.com/typetools/checker-framework/pull/3490#discussion_r459776034", "bodyText": "Possible alternative to think about: change Queue<Pair<LambdaExpressionTree, Store>> lambdaQueue to also contain the MethodTree within which the lambda occurred.", "author": "wmdietl", "createdAt": "2020-07-23T23:07:00Z", "path": "framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java", "diffHunk": "@@ -1172,10 +1172,17 @@ protected void performFlowAnalysis(ClassTree classTree) {\n \n                 while (!lambdaQueue.isEmpty()) {\n                     Pair<LambdaExpressionTree, Store> lambdaPair = lambdaQueue.poll();\n+                    MethodTree enclosingMethod =", "originalCommit": "a69bd2d358b3275989bccea01fa773a7baff2f24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5ODg3NA==", "url": "https://github.com/typetools/checker-framework/pull/3490#discussion_r460298874", "bodyText": "I am not quite sure which one is better... It seems that we still need to compute the enclosing method if we change lambdaQueue. Does the current solution good enough?", "author": "xingweitian", "createdAt": "2020-07-24T21:36:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3NjAzNA=="}], "type": "inlineReview"}, {"oid": "a54394b54b4a2c823a22ef20a2fbe14a39d344cb", "url": "https://github.com/typetools/checker-framework/commit/a54394b54b4a2c823a22ef20a2fbe14a39d344cb", "message": "Merge remote-tracking branch 'typetools/master' into typetools-issue3482", "committedDate": "2020-07-24T19:02:52Z", "type": "commit"}, {"oid": "419388b2d820bb48761dba1eb12206fd94fba51b", "url": "https://github.com/typetools/checker-framework/commit/419388b2d820bb48761dba1eb12206fd94fba51b", "message": "Resolves comment.", "committedDate": "2020-07-24T19:33:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwMzA0Mw==", "url": "https://github.com/typetools/checker-framework/pull/3490#discussion_r462303043", "bodyText": "Can you use classTree instead of ct? And open an issue that we should look into which one of the two we should be using here. It is definitely a bit odd to use both within the same expression.", "author": "wmdietl", "createdAt": "2020-07-29T13:36:02Z", "path": "framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java", "diffHunk": "@@ -1172,10 +1172,14 @@ protected void performFlowAnalysis(ClassTree classTree) {\n \n                 while (!lambdaQueue.isEmpty()) {\n                     Pair<LambdaExpressionTree, Store> lambdaPair = lambdaQueue.poll();\n+                    MethodTree mt =\n+                            (MethodTree)\n+                                    TreeUtils.enclosingOfKind(\n+                                            getPath(lambdaPair.first), Kind.METHOD);\n                     analyze(\n                             queue,\n                             lambdaQueue,\n-                            new CFGLambda(lambdaPair.first),\n+                            new CFGLambda(lambdaPair.first, ct, mt),", "originalCommit": "419388b2d820bb48761dba1eb12206fd94fba51b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b4646bcfa2f5ef9806f6d2de3583d75adccda8f4", "url": "https://github.com/typetools/checker-framework/commit/b4646bcfa2f5ef9806f6d2de3583d75adccda8f4", "message": "Merge remote-tracking branch 'typetools/master' into typetools-issue3482", "committedDate": "2020-07-29T14:55:47Z", "type": "commit"}, {"oid": "d7fab04a8625142c35db918681192e6502c2a87b", "url": "https://github.com/typetools/checker-framework/commit/d7fab04a8625142c35db918681192e6502c2a87b", "message": "Resolve comment.", "committedDate": "2020-07-29T14:56:49Z", "type": "commit"}]}