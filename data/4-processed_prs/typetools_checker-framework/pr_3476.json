{"pr_number": 3476, "pr_title": "Add predicate support to accumulation checker", "pr_createdAt": "2020-07-14T17:06:47Z", "pr_url": "https://github.com/typetools/checker-framework/pull/3476", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyNTYyNQ==", "url": "https://github.com/typetools/checker-framework/pull/3476#discussion_r454725625", "bodyText": "BugInCF is only for bugs in the Checker Framework itself.  This looks more like it should be a UserError.  Or, pass the exception up to the caller.\nPlease check all the uses of BugInCF.", "author": "mernst", "createdAt": "2020-07-15T00:48:59Z", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -324,9 +439,184 @@ public boolean isSubtype(final AnnotationMirror subAnno, final AnnotationMirror\n                 return false;\n             }\n \n+            if (isPredicate(subAnno)) {\n+                return isPredicateSubtype(\n+                        convertToPredicate(subAnno), convertToPredicate(superAnno));\n+            } else if (isPredicate(superAnno)) {\n+                return evaluatePredicate(subAnno, convertToPredicate(superAnno));\n+            }\n+\n             List<String> subVal = getAccumulatedValues(subAnno);\n             List<String> superVal = getAccumulatedValues(superAnno);\n             return subVal.containsAll(superVal);\n         }\n     }\n+\n+    /**\n+     * Extension point for complex subtyping behavior between predicates. The standard\n+     * implementation conservatively returns true only if the predicates are equal, or if the\n+     * prospective supertype (q) is equivalent to top (that is, the empty string).\n+     *\n+     * @param p a predicate\n+     * @param q another predicate\n+     * @return true if p is a subtype of q\n+     */\n+    protected boolean isPredicateSubtype(String p, String q) {\n+        return \"\".equals(q) || p.equals(q);\n+    }\n+\n+    /**\n+     * Evaluates whether the accumulator annotation {@code subAnno} makes the predicate {@code pred}\n+     * true.\n+     *\n+     * @param subAnno an accumulator annotation\n+     * @param pred a predicate\n+     * @return whether the accumulator annotation satisfies the predicate\n+     */\n+    protected boolean evaluatePredicate(AnnotationMirror subAnno, String pred) {\n+        if (!isAccumulatorAnnotation(subAnno)) {\n+            throw new BugInCF(\n+                    \"tried to evaluate a predicate using an annotation that wasn't an accumulator: \"\n+                            + subAnno);\n+        }\n+        List<String> trueVariables = getAccumulatedValues(subAnno);\n+        return evaluatePredicate(trueVariables, pred);\n+    }\n+\n+    /**\n+     * Checks that the given annotation either:\n+     *\n+     * <ul>\n+     *   <li>does not contain a predicate, or\n+     *   <li>contains a parse-able predicate\n+     * </ul>\n+     *\n+     * Used by the visitor to throw \"predicate.invalid\" errors; thus must be package-private.\n+     *\n+     * @param anm any annotation supported by this checker\n+     * @return null if there is nothing wrong with the predicate, or an error message indicating the\n+     *     problem if the predicate is invalid\n+     */\n+    /* package-private */\n+    @Nullable String isValidPredicate(AnnotationMirror anm) {\n+        String pred = convertToPredicate(anm);\n+        try {\n+            evaluatePredicate(Collections.emptyList(), pred);\n+        } catch (BugInCF bugInCF) {\n+            return bugInCF.getLocalizedMessage();\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Evaluates whether treating the variables in {@code trueVariables} as {@code true} literals\n+     * (and all other names as {@code false} literals) makes the predicate {@code pred} evaluate to\n+     * true.\n+     *\n+     * @param trueVariables a list of names that should be replaced with {@code true}\n+     * @param pred a predicate\n+     * @return whether the true variables satisfy the predicate\n+     */\n+    protected boolean evaluatePredicate(List<String> trueVariables, String pred) {\n+        /*for (String cmMethod : trueVariables) {\n+            pred = pred.replaceAll(\"\\\\b\" + cmMethod + \"\\\\b\", \"true\");\n+        }\n+        pred = pred.replaceAll(\"(?!true)\\\\b[_a-zA-Z][_a-zA-Z0-9]*\\\\b\", \"false\");*/\n+        Expression expression;\n+        try {\n+            expression = StaticJavaParser.parseExpression(pred);\n+        } catch (ParseProblemException p) {\n+            throw new BugInCF(\"unparseable predicate: \" + pred + \". Parse exception: \" + p);", "originalCommit": "95c0c821b709605345aa6ca50bce28b33ecf9618", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDczMzY3Mw==", "url": "https://github.com/typetools/checker-framework/pull/3476#discussion_r454733673", "bodyText": "Use reportError rather than report.", "author": "mernst", "createdAt": "2020-07-15T01:17:56Z", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationVisitor.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.AnnotationTree;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.tools.Diagnostic;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.basetype.BaseTypeVisitor;\n+import org.checkerframework.framework.source.DiagMessage;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * The visitor for an accumulation checker. Issues predicate.invalid errors if the user writes an\n+ * invalid predicate.\n+ */\n+public class AccumulationVisitor extends BaseTypeVisitor<AccumulationAnnotatedTypeFactory> {\n+\n+    /**\n+     * Constructor matching super.\n+     *\n+     * @param checker the checker\n+     */\n+    public AccumulationVisitor(BaseTypeChecker checker) {\n+        super(checker);\n+    }\n+\n+    /** Checks each predicate annotation to make sure the predicate is well-formed. */\n+    @Override\n+    public Void visitAnnotation(final AnnotationTree node, final Void p) {\n+        AnnotationMirror anno = TreeUtils.annotationFromAnnotationTree(node);\n+        if (atypeFactory.isPredicate(anno)) {\n+            String errorMessage = atypeFactory.isValidPredicate(anno);\n+            if (errorMessage != null) {\n+                checker.report(", "originalCommit": "95c0c821b709605345aa6ca50bce28b33ecf9618", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDczMzg3Ng==", "url": "https://github.com/typetools/checker-framework/pull/3476#discussion_r454733876", "bodyText": "Why not give the superclass the opportunity to issue more errors, if there are others?", "author": "mernst", "createdAt": "2020-07-15T01:18:41Z", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationVisitor.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.AnnotationTree;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.tools.Diagnostic;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.basetype.BaseTypeVisitor;\n+import org.checkerframework.framework.source.DiagMessage;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * The visitor for an accumulation checker. Issues predicate.invalid errors if the user writes an\n+ * invalid predicate.\n+ */\n+public class AccumulationVisitor extends BaseTypeVisitor<AccumulationAnnotatedTypeFactory> {\n+\n+    /**\n+     * Constructor matching super.\n+     *\n+     * @param checker the checker\n+     */\n+    public AccumulationVisitor(BaseTypeChecker checker) {\n+        super(checker);\n+    }\n+\n+    /** Checks each predicate annotation to make sure the predicate is well-formed. */\n+    @Override\n+    public Void visitAnnotation(final AnnotationTree node, final Void p) {\n+        AnnotationMirror anno = TreeUtils.annotationFromAnnotationTree(node);\n+        if (atypeFactory.isPredicate(anno)) {\n+            String errorMessage = atypeFactory.isValidPredicate(anno);\n+            if (errorMessage != null) {\n+                checker.report(\n+                        node,\n+                        new DiagMessage(Diagnostic.Kind.ERROR, \"predicate.invalid\", errorMessage));\n+                return null;", "originalCommit": "95c0c821b709605345aa6ca50bce28b33ecf9618", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1bb7cbfe5313821c632e0792bc692941e3c882c0", "url": "https://github.com/typetools/checker-framework/commit/1bb7cbfe5313821c632e0792bc692941e3c882c0", "message": "interning checker fixes", "committedDate": "2020-07-15T16:54:24Z", "type": "commit"}, {"oid": "e85910a91ed49c3ba25f50c4087654b7fec0a6c9", "url": "https://github.com/typetools/checker-framework/commit/e85910a91ed49c3ba25f50c4087654b7fec0a6c9", "message": "changes from code review", "committedDate": "2020-07-16T20:25:35Z", "type": "commit"}, {"oid": "05018370c5c23ef8878f1966be340e58fc171a91", "url": "https://github.com/typetools/checker-framework/commit/05018370c5c23ef8878f1966be340e58fc171a91", "message": "fixup some latex", "committedDate": "2020-07-16T21:04:30Z", "type": "commit"}, {"oid": "60ec4a15f35dfa707c81f54925d97ebdb0e15411", "url": "https://github.com/typetools/checker-framework/commit/60ec4a15f35dfa707c81f54925d97ebdb0e15411", "message": "fix latex for real", "committedDate": "2020-07-16T22:00:08Z", "type": "commit"}, {"oid": "463d4ce43a852968e8222decd544a33c6c6abcca", "url": "https://github.com/typetools/checker-framework/commit/463d4ce43a852968e8222decd544a33c6c6abcca", "message": "Documentation improvements", "committedDate": "2020-07-17T14:29:44Z", "type": "commit"}, {"oid": "48f9403175119d22a557433dc8194d82ce82a12c", "url": "https://github.com/typetools/checker-framework/commit/48f9403175119d22a557433dc8194d82ce82a12c", "message": "Merge branch 'accumulation-predicate' of github.com:kelloggm/checker-framework into accumulation-predicate", "committedDate": "2020-07-17T14:29:57Z", "type": "commit"}, {"oid": "af0aeebad4a8bcdc8cde53bc41e6f446714ceb22", "url": "https://github.com/typetools/checker-framework/commit/af0aeebad4a8bcdc8cde53bc41e6f446714ceb22", "message": "Merge ../checker-framework-branch-master into accumulation-predicate", "committedDate": "2020-07-17T14:30:25Z", "type": "commit"}, {"oid": "bcc60473548733302c041308687e5ab4bb063c8a", "url": "https://github.com/typetools/checker-framework/commit/bcc60473548733302c041308687e5ab4bb063c8a", "message": "Code review improvements", "committedDate": "2020-07-17T15:46:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc0MTE3OA==", "url": "https://github.com/typetools/checker-framework/pull/3476#discussion_r457741178", "bodyText": "Was calling postInit() here before a bug?", "author": "msridhar", "createdAt": "2020-07-20T23:07:05Z", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -58,38 +73,70 @@\n      *     argument named \"value\" whose type is a String array.\n      * @param bottom the bottom type in the hierarchy, which must be a subtype of {@code\n      *     accumulator}. The bottom type should be an annotation with no arguments.\n+     * @param predicate the predicate annotation. Either null (if predicates are not supported), or\n+     *     an annotation with a single element named \"value\" whose type is a String.\n      */\n     protected AccumulationAnnotatedTypeFactory(\n             BaseTypeChecker checker,\n             Class<? extends Annotation> accumulator,\n-            Class<? extends Annotation> bottom) {\n+            Class<? extends Annotation> bottom,\n+            @Nullable Class<? extends Annotation> predicate) {\n         super(checker);\n \n         this.accumulator = accumulator;\n-\n         // Check that the requirements of the accumulator are met.\n         Method[] accDeclaredMethods = accumulator.getDeclaredMethods();\n         if (accDeclaredMethods.length != 1) {\n             rejectMalformedAccumulator(\"have exactly one element\");\n         }\n-        Method value = accDeclaredMethods[0];\n-        if (value.getName() != \"value\") { // interned\n+\n+        Method accValue = accDeclaredMethods[0];\n+        if (accValue.getName() != \"value\") { // interned\n             rejectMalformedAccumulator(\"name its element \\\"value\\\"\");\n         }\n-        if (!value.getReturnType().isInstance(new String[0])) {\n+        if (!accValue.getReturnType().isInstance(new String[0])) {\n             rejectMalformedAccumulator(\"have an element of type String[]\");\n         }\n-        if (((String[]) value.getDefaultValue()).length != 0) {\n+        if (((String[]) accValue.getDefaultValue()).length != 0) {\n             rejectMalformedAccumulator(\"have the empty String array {} as its default value\");\n         }\n \n+        this.predicate = predicate;\n+        // If there is a predicate annotation, check that its requirements are met.\n+        if (predicate != null) {\n+            Method[] predDeclaredMethods = predicate.getDeclaredMethods();\n+            if (predDeclaredMethods.length != 1) {\n+                rejectMalformedPredicate(\"have exactly one element\");\n+            }\n+            Method predValue = predDeclaredMethods[0];\n+            if (predValue.getName() != \"value\") { // interned\n+                rejectMalformedPredicate(\"name its element \\\"value\\\"\");\n+            }\n+            if (!predValue.getReturnType().isInstance(\"\")) {\n+                rejectMalformedPredicate(\"have an element of type String\");\n+            }\n+        }\n+\n         this.bottom = AnnotationBuilder.fromClass(elements, bottom);\n         this.top = createAccumulatorAnnotation(Collections.emptyList());\n \n-        // Every subclass must call postInit!  This does not do so for subclasses.\n-        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n-            this.postInit();", "originalCommit": "bcc60473548733302c041308687e5ab4bb063c8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1NTE1Mg==", "url": "https://github.com/typetools/checker-framework/pull/3476#discussion_r457755152", "bodyText": "The condition was always false, because this is an abstract class. All subclasses have to call postInit.", "author": "kelloggm", "createdAt": "2020-07-20T23:52:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc0MTE3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc0MTc1Mg==", "url": "https://github.com/typetools/checker-framework/pull/3476#discussion_r457741752", "bodyText": "Does this mean that after converting the accumulator to a predicate, P must equal that predicate (i.e., it falls into the next case of predicate subtyping)?", "author": "msridhar", "createdAt": "2020-07-20T23:08:59Z", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -248,6 +320,21 @@ public QualifierHierarchy createQualifierHierarchy(MultiGraphFactory factory) {\n      *        |\n      *      bottom\n      * </pre>\n+     *\n+     * Predicate subtyping is defined as follows:\n+     *\n+     * <ul>\n+     *   <li>An accumulator is a subtype of a predicate if substitution from the accumulator to the\n+     *       predicate makes the predicate true. For example, {@code Acc(A)} is a subtype of {@code\n+     *       AccPred(\"A || B\")}, because when A is replaced with {@code true} and B is replaced with\n+     *       {@code false}, the resulting boolean formula evaluates to true.\n+     *   <li>A predicate P is a subtype of an accumulator iff after converting the accumulator into\n+     *       a predicate representing the conjunction of its elements, P is a subtype of that", "originalCommit": "bcc60473548733302c041308687e5ab4bb063c8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1NTQ1NA==", "url": "https://github.com/typetools/checker-framework/pull/3476#discussion_r457755454", "bodyText": "In the default implementation, yes, but if the accumulation checker writer has implemented a more complex predicate subtyping rule that would also be taken into account.", "author": "kelloggm", "createdAt": "2020-07-20T23:53:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc0MTc1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc0MjYxMA==", "url": "https://github.com/typetools/checker-framework/pull/3476#discussion_r457742610", "bodyText": "It might be good to document what the \"right thing\" to do would be, and why we deviate from that.  I think the \"right thing\" here is logical implication, i.e., P is a subtype of Q iff P implies Q.  But we don't bake in the implication check to keep things simple and minimize dependencies.", "author": "msridhar", "createdAt": "2020-07-20T23:11:40Z", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -248,6 +320,21 @@ public QualifierHierarchy createQualifierHierarchy(MultiGraphFactory factory) {\n      *        |\n      *      bottom\n      * </pre>\n+     *\n+     * Predicate subtyping is defined as follows:", "originalCommit": "bcc60473548733302c041308687e5ab4bb063c8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1NjI2NQ==", "url": "https://github.com/typetools/checker-framework/pull/3476#discussion_r457756265", "bodyText": "I'll add a comment.", "author": "kelloggm", "createdAt": "2020-07-20T23:56:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc0MjYxMA=="}], "type": "inlineReview"}, {"oid": "e28fed043ffe6141fe4fa406589c36b7c98951c8", "url": "https://github.com/typetools/checker-framework/commit/e28fed043ffe6141fe4fa406589c36b7c98951c8", "message": "minor doc improvements suggested by Manu", "committedDate": "2020-07-21T00:00:41Z", "type": "commit"}, {"oid": "beffa549428ba139408bb29bcdb899941b33294b", "url": "https://github.com/typetools/checker-framework/commit/beffa549428ba139408bb29bcdb899941b33294b", "message": "Initialization", "committedDate": "2020-03-25T18:16:00Z", "type": "commit"}, {"oid": "9b63699b1dcb6aa74e0913a770a3b4012f774428", "url": "https://github.com/typetools/checker-framework/commit/9b63699b1dcb6aa74e0913a770a3b4012f774428", "message": "resolved comments", "committedDate": "2020-03-26T19:35:59Z", "type": "commit"}, {"oid": "bc4298b92e91330a1c62f162bb32956c2018c756", "url": "https://github.com/typetools/checker-framework/commit/bc4298b92e91330a1c62f162bb32956c2018c756", "message": "resolved comments", "committedDate": "2020-03-26T19:41:34Z", "type": "commit"}, {"oid": "a77dd34f6a7a54defb7a186be322f7d276ece232", "url": "https://github.com/typetools/checker-framework/commit/a77dd34f6a7a54defb7a186be322f7d276ece232", "message": "resolved comments", "committedDate": "2020-03-26T20:01:21Z", "type": "commit"}, {"oid": "71f08dc67b501f0072ec03a27fa3892c4801d3e1", "url": "https://github.com/typetools/checker-framework/commit/71f08dc67b501f0072ec03a27fa3892c4801d3e1", "message": "test git", "committedDate": "2020-03-27T17:17:25Z", "type": "commit"}, {"oid": "f9f9e3fd725fcca36f0a09656fcb771229d4200d", "url": "https://github.com/typetools/checker-framework/commit/f9f9e3fd725fcca36f0a09656fcb771229d4200d", "message": "test git", "committedDate": "2020-03-27T17:20:38Z", "type": "commit"}, {"oid": "4d347ef8e293aa126c4cdf05d8f91e65d50b860e", "url": "https://github.com/typetools/checker-framework/commit/4d347ef8e293aa126c4cdf05d8f91e65d50b860e", "message": "resolved issues and passed git pre-commit hooks", "committedDate": "2020-03-28T02:05:04Z", "type": "commit"}, {"oid": "aa5e28fdd814f8ca415872b2cb13d3282455c2ed", "url": "https://github.com/typetools/checker-framework/commit/aa5e28fdd814f8ca415872b2cb13d3282455c2ed", "message": "fixed issue with checkBasicStyle task", "committedDate": "2020-03-28T05:21:31Z", "type": "commit"}, {"oid": "415adda9cee3ff9ad56a0e6d1f2cd9ce9734366e", "url": "https://github.com/typetools/checker-framework/commit/415adda9cee3ff9ad56a0e6d1f2cd9ce9734366e", "message": "fixed all-test-jdk8 and all-test-jdk11 jobs in pipeline", "committedDate": "2020-03-28T06:36:20Z", "type": "commit"}, {"oid": "91d0d101663a5731c4d4751c9275fef4a6c7f3ea", "url": "https://github.com/typetools/checker-framework/commit/91d0d101663a5731c4d4751c9275fef4a6c7f3ea", "message": "git test", "committedDate": "2020-03-28T06:50:42Z", "type": "commit"}, {"oid": "e005df3b5c841dbe272b502dc07bab3d2a41af98", "url": "https://github.com/typetools/checker-framework/commit/e005df3b5c841dbe272b502dc07bab3d2a41af98", "message": "fixed checkInterning task", "committedDate": "2020-03-28T07:37:32Z", "type": "commit"}, {"oid": "7690604d845c8331ce3e03232f192a5525f601b6", "url": "https://github.com/typetools/checker-framework/commit/7690604d845c8331ce3e03232f192a5525f601b6", "message": "misc_jdk8", "committedDate": "2020-03-28T08:27:05Z", "type": "commit"}, {"oid": "b98126aa8349b0b61f00841a2bc6f7f6e4d56dc0", "url": "https://github.com/typetools/checker-framework/commit/b98126aa8349b0b61f00841a2bc6f7f6e4d56dc0", "message": "misc_jdk8", "committedDate": "2020-03-28T08:39:37Z", "type": "commit"}, {"oid": "27843ff602ba06a52db49498675e3be561fa1828", "url": "https://github.com/typetools/checker-framework/commit/27843ff602ba06a52db49498675e3be561fa1828", "message": "Merge branch 'master' into returnsrcvr-checker", "committedDate": "2020-03-28T19:08:15Z", "type": "commit"}, {"oid": "5b27d78bfe2a9a74d570a2eac2865b19a5724fad", "url": "https://github.com/typetools/checker-framework/commit/5b27d78bfe2a9a74d570a2eac2865b19a5724fad", "message": "fix javadoc", "committedDate": "2020-03-28T19:17:38Z", "type": "commit"}, {"oid": "8b9f5f03bc186fb0cf0629eb44745ffb90f21346", "url": "https://github.com/typetools/checker-framework/commit/8b9f5f03bc186fb0cf0629eb44745ffb90f21346", "message": "returns receiver manual", "committedDate": "2020-03-28T21:33:17Z", "type": "commit"}, {"oid": "ed02ca65fd427780a729589976818098433543f1", "url": "https://github.com/typetools/checker-framework/commit/ed02ca65fd427780a729589976818098433543f1", "message": "trailing whitespace", "committedDate": "2020-03-28T21:34:03Z", "type": "commit"}, {"oid": "9b5171fe0730113b1248680c19a97e5c3c75c953", "url": "https://github.com/typetools/checker-framework/commit/9b5171fe0730113b1248680c19a97e5c3c75c953", "message": "Add final newline", "committedDate": "2020-03-29T00:28:07Z", "type": "commit"}, {"oid": "5c101f170c8891eaa9f1b58d492d3a4be0eb6236", "url": "https://github.com/typetools/checker-framework/commit/5c101f170c8891eaa9f1b58d492d3a4be0eb6236", "message": "Capitalization fixes", "committedDate": "2020-03-29T00:37:00Z", "type": "commit"}, {"oid": "f4532df793fc199e7a440efa35c3051b0abc2e6b", "url": "https://github.com/typetools/checker-framework/commit/f4532df793fc199e7a440efa35c3051b0abc2e6b", "message": "Improve naming.  Make switch statements report errors.", "committedDate": "2020-03-29T15:24:30Z", "type": "commit"}, {"oid": "ce4f098f11080d20257088603aae6c1b4a23bc51", "url": "https://github.com/typetools/checker-framework/commit/ce4f098f11080d20257088603aae6c1b4a23bc51", "message": "Remove unnecessary text", "committedDate": "2020-03-29T15:41:40Z", "type": "commit"}, {"oid": "eff17315021c4d2899189b30c6a25149548d5fe5", "url": "https://github.com/typetools/checker-framework/commit/eff17315021c4d2899189b30c6a25149548d5fe5", "message": "Improve naming", "committedDate": "2020-03-29T15:41:54Z", "type": "commit"}, {"oid": "d13fe35aeee5b038c375da84e9377835b2dd5a84", "url": "https://github.com/typetools/checker-framework/commit/d13fe35aeee5b038c375da84e9377835b2dd5a84", "message": "Fixed contructor throw RuntimeException and javadoc", "committedDate": "2020-03-30T16:24:48Z", "type": "commit"}, {"oid": "fd8c8609a4541267ce05fe26dd3ec335a2823ea4", "url": "https://github.com/typetools/checker-framework/commit/fd8c8609a4541267ce05fe26dd3ec335a2823ea4", "message": "fix misc-jdk8 and misc-jdk11", "committedDate": "2020-03-30T19:33:55Z", "type": "commit"}, {"oid": "85682f77cf4b561fb948799f672369f9238d2fd3", "url": "https://github.com/typetools/checker-framework/commit/85682f77cf4b561fb948799f672369f9238d2fd3", "message": "working on manual", "committedDate": "2020-04-01T17:28:07Z", "type": "commit"}, {"oid": "f897ece84d1d0742df8a5d44218f975ff0a800c0", "url": "https://github.com/typetools/checker-framework/commit/f897ece84d1d0742df8a5d44218f975ff0a800c0", "message": "pass on manual", "committedDate": "2020-04-01T17:38:52Z", "type": "commit"}, {"oid": "2c326d568f2b94e6e3417c27fefac8ad955dab9b", "url": "https://github.com/typetools/checker-framework/commit/2c326d568f2b94e6e3417c27fefac8ad955dab9b", "message": "changed framework support to enums", "committedDate": "2020-04-01T17:41:45Z", "type": "commit"}, {"oid": "65e4454b2d36b6e9a6809ba9b1b2cbadb83aabfd", "url": "https://github.com/typetools/checker-framework/commit/65e4454b2d36b6e9a6809ba9b1b2cbadb83aabfd", "message": "Merge branch 'returnsrcvr-checker' of github.com:nimakarimipour/checker-framework into returnsrcvr-checker", "committedDate": "2020-04-01T17:42:00Z", "type": "commit"}, {"oid": "748a84c18498ee263accd07d5107af4927db474d", "url": "https://github.com/typetools/checker-framework/commit/748a84c18498ee263accd07d5107af4927db474d", "message": "remove paragraph on disabling framework support", "committedDate": "2020-04-01T17:50:09Z", "type": "commit"}, {"oid": "30c2d5eb1b0ae317c00bdd89d8fb5c96299d4d34", "url": "https://github.com/typetools/checker-framework/commit/30c2d5eb1b0ae317c00bdd89d8fb5c96299d4d34", "message": "Merge branch 'master' into returnsrcvr-checker", "committedDate": "2020-04-01T21:10:47Z", "type": "commit"}, {"oid": "d1c028fade3062f9cba9fbb3019984ca38b30171", "url": "https://github.com/typetools/checker-framework/commit/d1c028fade3062f9cba9fbb3019984ca38b30171", "message": "Merge ../checker-framework-branch-master into returnsrcvr-checker", "committedDate": "2020-04-02T01:13:35Z", "type": "commit"}, {"oid": "482809a6694b522ffd7c97ca7676a5db936c4866", "url": "https://github.com/typetools/checker-framework/commit/482809a6694b522ffd7c97ca7676a5db936c4866", "message": "Rename MaybeThis to UnknownThis.\n\nThe name MaybeThis isn't bad, but the rest of the Checker Framework uses\nthe naming convention \"Unknown\" for the top type.", "committedDate": "2020-04-02T01:28:44Z", "type": "commit"}, {"oid": "cc7a321c3c288e4e3a377edf683fe8f0559b6026", "url": "https://github.com/typetools/checker-framework/commit/cc7a321c3c288e4e3a377edf683fe8f0559b6026", "message": "Improve Javadoc: add explanations, examples, links", "committedDate": "2020-04-02T01:51:44Z", "type": "commit"}, {"oid": "cf31b932ea22fb758a113f144732cb39bdab46fa", "url": "https://github.com/typetools/checker-framework/commit/cf31b932ea22fb758a113f144732cb39bdab46fa", "message": "Edits to manual section", "committedDate": "2020-04-02T02:17:57Z", "type": "commit"}, {"oid": "b8e6b7290aad40d59affcf1e0e2113be79188368", "url": "https://github.com/typetools/checker-framework/commit/b8e6b7290aad40d59affcf1e0e2113be79188368", "message": "Mention terminology \"fluent API\"", "committedDate": "2020-04-02T02:19:05Z", "type": "commit"}, {"oid": "941d35b64856461dca9c5ae04b253f3f9ec66b4e", "url": "https://github.com/typetools/checker-framework/commit/941d35b64856461dca9c5ae04b253f3f9ec66b4e", "message": "Tweak message", "committedDate": "2020-04-02T03:56:38Z", "type": "commit"}, {"oid": "daafb8f1937dcf9ba1c78f58a69a675465cc62be", "url": "https://github.com/typetools/checker-framework/commit/daafb8f1937dcf9ba1c78f58a69a675465cc62be", "message": "Edits from code review", "committedDate": "2020-04-02T05:19:49Z", "type": "commit"}, {"oid": "fa3c48b363b6f243f9a98ccf356324f8f9d1cdae", "url": "https://github.com/typetools/checker-framework/commit/fa3c48b363b6f243f9a98ccf356324f8f9d1cdae", "message": "Update changelog", "committedDate": "2020-04-02T19:28:31Z", "type": "commit"}, {"oid": "84a3798e6d70ac1c553f88bf95d5929b93e8ad12", "url": "https://github.com/typetools/checker-framework/commit/84a3798e6d70ac1c553f88bf95d5929b93e8ad12", "message": "removed frameworkSupport Interface and resolved comments", "committedDate": "2020-04-03T07:28:13Z", "type": "commit"}, {"oid": "acfb71a082e2aa5ed579bcad04447d36be7ef724", "url": "https://github.com/typetools/checker-framework/commit/acfb71a082e2aa5ed579bcad04447d36be7ef724", "message": "Don't replace existing annotations.", "committedDate": "2020-04-05T18:20:05Z", "type": "commit"}, {"oid": "d7baf84d2ae3a3ffa40f1df39ff5215f7206ccf0", "url": "https://github.com/typetools/checker-framework/commit/d7baf84d2ae3a3ffa40f1df39ff5215f7206ccf0", "message": "fix misc_jdk8", "committedDate": "2020-04-06T02:20:13Z", "type": "commit"}, {"oid": "b51b9199f33112538d3ecad583c7934248b13495", "url": "https://github.com/typetools/checker-framework/commit/b51b9199f33112538d3ecad583c7934248b13495", "message": "removed FrameworkSupportUtils", "committedDate": "2020-04-06T23:24:54Z", "type": "commit"}, {"oid": "71b5578d5cff91a4a1553eb2ed5a14dc671c9795", "url": "https://github.com/typetools/checker-framework/commit/71b5578d5cff91a4a1553eb2ed5a14dc671c9795", "message": "removed dependecies to AutoValue", "committedDate": "2020-04-07T01:36:46Z", "type": "commit"}, {"oid": "606a7a14aee1fe93c4c80fee489df5a8f7d290e7", "url": "https://github.com/typetools/checker-framework/commit/606a7a14aee1fe93c4c80fee489df5a8f7d290e7", "message": "clean up some logic in type factory", "committedDate": "2020-04-07T03:46:33Z", "type": "commit"}, {"oid": "1d1edad52a2a714e186296fa82a25dac118d6cd1", "url": "https://github.com/typetools/checker-framework/commit/1d1edad52a2a714e186296fa82a25dac118d6cd1", "message": "partial work", "committedDate": "2020-04-09T22:52:48Z", "type": "commit"}, {"oid": "231bf447bc4d9ffd81a0aef529e1c7b6d1888d13", "url": "https://github.com/typetools/checker-framework/commit/231bf447bc4d9ffd81a0aef529e1c7b6d1888d13", "message": "use the merged version of the RR checker", "committedDate": "2020-05-01T00:15:06Z", "type": "commit"}, {"oid": "6bc521df9a9666ecbc866d17b680910b282f41d3", "url": "https://github.com/typetools/checker-framework/commit/6bc521df9a9666ecbc866d17b680910b282f41d3", "message": "basic testing infrastructure", "committedDate": "2020-05-01T00:50:50Z", "type": "commit"}, {"oid": "943996c9d0efb55aaeb35b1a86adb96b64ae1232", "url": "https://github.com/typetools/checker-framework/commit/943996c9d0efb55aaeb35b1a86adb96b64ae1232", "message": "add another test case that checks that RR support works as intended", "committedDate": "2020-05-12T00:02:53Z", "type": "commit"}, {"oid": "0840bf3f8e7b1008f192a44050528534e2ba7579", "url": "https://github.com/typetools/checker-framework/commit/0840bf3f8e7b1008f192a44050528534e2ba7579", "message": "add all remaining basic OCC tests that are relevant to a general accumulation analysis", "committedDate": "2020-05-12T20:41:34Z", "type": "commit"}, {"oid": "946d6d6442adb8e41b4780fb399f69c181c21dde", "url": "https://github.com/typetools/checker-framework/commit/946d6d6442adb8e41b4780fb399f69c181c21dde", "message": "add docs and remove debugging code", "committedDate": "2020-05-12T21:33:10Z", "type": "commit"}, {"oid": "d03694e66f8863db5bd150ebfebd2436c8cb3db8", "url": "https://github.com/typetools/checker-framework/commit/d03694e66f8863db5bd150ebfebd2436c8cb3db8", "message": "actually test the accumulate method, too, by making the test checker a very simple CM checker", "committedDate": "2020-05-12T21:51:13Z", "type": "commit"}, {"oid": "47920cd0e14c09689718a15200c218b570b41772", "url": "https://github.com/typetools/checker-framework/commit/47920cd0e14c09689718a15200c218b570b41772", "message": "remove code that should have been deleted", "committedDate": "2020-05-12T21:57:07Z", "type": "commit"}, {"oid": "ca07011fcb0544d27a221921381fc9e870e8767f", "url": "https://github.com/typetools/checker-framework/commit/ca07011fcb0544d27a221921381fc9e870e8767f", "message": "more docs, make Accumulation ATF constructor protected", "committedDate": "2020-05-12T22:00:57Z", "type": "commit"}, {"oid": "8f723f6a609bf94a472189b3a9062c82686564f0", "url": "https://github.com/typetools/checker-framework/commit/8f723f6a609bf94a472189b3a9062c82686564f0", "message": "add all-systems tests", "committedDate": "2020-05-12T22:02:20Z", "type": "commit"}, {"oid": "aa7dc292d3d8f72e0158d3394d24f0467afd81e8", "url": "https://github.com/typetools/checker-framework/commit/aa7dc292d3d8f72e0158d3394d24f0467afd81e8", "message": "Merge ../checker-framework-branch-master into accumulation-analysis", "committedDate": "2020-05-12T22:59:12Z", "type": "commit"}, {"oid": "cabfb0dfd9d462bd9f13c00615e6bc9ab22e9e9a", "url": "https://github.com/typetools/checker-framework/commit/cabfb0dfd9d462bd9f13c00615e6bc9ab22e9e9a", "message": "use Java 8 syntax", "committedDate": "2020-05-13T17:26:10Z", "type": "commit"}, {"oid": "eb4c0fbd7f797d4dcbca64f78c51f24e1495407d", "url": "https://github.com/typetools/checker-framework/commit/eb4c0fbd7f797d4dcbca64f78c51f24e1495407d", "message": "Merge branch 'accumulation-analysis' of github.com:kelloggm/checker-framework into accumulation-analysis", "committedDate": "2020-05-13T17:26:36Z", "type": "commit"}, {"oid": "da1ab9cbc6fb159908c68a87acfd79caa4ff3835", "url": "https://github.com/typetools/checker-framework/commit/da1ab9cbc6fb159908c68a87acfd79caa4ff3835", "message": "add draft of manual section for building an accumulation checker", "committedDate": "2020-05-13T18:17:05Z", "type": "commit"}, {"oid": "16d5df6a2d08fb499909ea642a8c77d0f4ccf114", "url": "https://github.com/typetools/checker-framework/commit/16d5df6a2d08fb499909ea642a8c77d0f4ccf114", "message": "fix EP warning", "committedDate": "2020-05-13T18:55:03Z", "type": "commit"}, {"oid": "354ac0da65ffa956127454bd0e3308aee249838b", "url": "https://github.com/typetools/checker-framework/commit/354ac0da65ffa956127454bd0e3308aee249838b", "message": "some javadoc that I missed before", "committedDate": "2020-05-13T19:55:45Z", "type": "commit"}, {"oid": "2f81727d201bb9335f6992609dc89777f8c783c2", "url": "https://github.com/typetools/checker-framework/commit/2f81727d201bb9335f6992609dc89777f8c783c2", "message": "address some code review comments", "committedDate": "2020-05-13T20:54:00Z", "type": "commit"}, {"oid": "02bba698cb153df0a4a4d47d30862e7445edad44", "url": "https://github.com/typetools/checker-framework/commit/02bba698cb153df0a4a4d47d30862e7445edad44", "message": "improve docs on the tree annotator", "committedDate": "2020-05-14T16:19:44Z", "type": "commit"}, {"oid": "01cde05dbdf07f3202cb535b83de44e590435939", "url": "https://github.com/typetools/checker-framework/commit/01cde05dbdf07f3202cb535b83de44e590435939", "message": "Merge ../checker-framework-branch-master into accumulation-analysis", "committedDate": "2020-05-15T16:59:19Z", "type": "commit"}, {"oid": "48b0bc06b3447299ccf73bd01605d00b28807341", "url": "https://github.com/typetools/checker-framework/commit/48b0bc06b3447299ccf73bd01605d00b28807341", "message": "Edits to manual", "committedDate": "2020-05-15T17:36:12Z", "type": "commit"}, {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13", "url": "https://github.com/typetools/checker-framework/commit/1db3bcf35ce34724fbb2f868601ab10f198ead13", "message": "Changes from code review", "committedDate": "2020-05-15T19:26:27Z", "type": "commit"}, {"oid": "bb5efe95df0d097be0721dc3b93c8aba41ca475e", "url": "https://github.com/typetools/checker-framework/commit/bb5efe95df0d097be0721dc3b93c8aba41ca475e", "message": "correct capitalization of almost-constants :)", "committedDate": "2020-05-15T21:31:49Z", "type": "commit"}, {"oid": "ecaa1e0c5a7203ea779504339f7390d15d9524c7", "url": "https://github.com/typetools/checker-framework/commit/ecaa1e0c5a7203ea779504339f7390d15d9524c7", "message": "make explicit the requirements on the top and bottom types", "committedDate": "2020-05-15T21:50:41Z", "type": "commit"}, {"oid": "018bd1412720667387d8921a87a1b11b70bdd7a4", "url": "https://github.com/typetools/checker-framework/commit/018bd1412720667387d8921a87a1b11b70bdd7a4", "message": "address todos in manual section", "committedDate": "2020-05-15T21:56:50Z", "type": "commit"}, {"oid": "e99b0557eafb3bb6a2ef1b292cdb02cc08902323", "url": "https://github.com/typetools/checker-framework/commit/e99b0557eafb3bb6a2ef1b292cdb02cc08902323", "message": "address remaining code review comments", "committedDate": "2020-05-16T00:00:39Z", "type": "commit"}, {"oid": "92430a9ef17881cea00737a17bed1c5db843c50a", "url": "https://github.com/typetools/checker-framework/commit/92430a9ef17881cea00737a17bed1c5db843c50a", "message": "Merge branch 'master' of github.com:typetools/checker-framework into accumulation-analysis", "committedDate": "2020-05-18T16:18:49Z", "type": "commit"}, {"oid": "ac7e9dd3a9832dee698dd4daa8859bc848d98ad0", "url": "https://github.com/typetools/checker-framework/commit/ac7e9dd3a9832dee698dd4daa8859bc848d98ad0", "message": "fix docS", "committedDate": "2020-05-18T16:30:55Z", "type": "commit"}, {"oid": "5a31f3904b80bd78307d891af77e700c42a45534", "url": "https://github.com/typetools/checker-framework/commit/5a31f3904b80bd78307d891af77e700c42a45534", "message": "Add comment", "committedDate": "2020-05-18T18:11:16Z", "type": "commit"}, {"oid": "33f5bc1f6c43935251779356cf29c40ae141c170", "url": "https://github.com/typetools/checker-framework/commit/33f5bc1f6c43935251779356cf29c40ae141c170", "message": "Split a paragraph", "committedDate": "2020-05-18T18:12:41Z", "type": "commit"}, {"oid": "8401eb53c2eb37f39e5bd68b4b6ac9365f3113cd", "url": "https://github.com/typetools/checker-framework/commit/8401eb53c2eb37f39e5bd68b4b6ac9365f3113cd", "message": "Comment tweaks and a few logic simplifications", "committedDate": "2020-05-18T19:49:55Z", "type": "commit"}, {"oid": "6047e3987fbc00fbbf23b6b115a40086d86eea57", "url": "https://github.com/typetools/checker-framework/commit/6047e3987fbc00fbbf23b6b115a40086d86eea57", "message": "Merge branch 'accumulation-analysis' of github.com:kelloggm/checker-framework into accumulation-analysis", "committedDate": "2020-05-18T19:50:15Z", "type": "commit"}, {"oid": "01cbbe4d2783e65c2506d32b0cc2740a4eedcf00", "url": "https://github.com/typetools/checker-framework/commit/01cbbe4d2783e65c2506d32b0cc2740a4eedcf00", "message": "Merge branch 'master' of github.com:typetools/checker-framework into accumulation-analysis", "committedDate": "2020-05-28T16:00:07Z", "type": "commit"}, {"oid": "6550096079dd147767ab37d95025cbb5250f5a09", "url": "https://github.com/typetools/checker-framework/commit/6550096079dd147767ab37d95025cbb5250f5a09", "message": "remove the need for a separate top type, and other miscellaneous improvements that go along with that", "committedDate": "2020-05-28T23:00:24Z", "type": "commit"}, {"oid": "b6aa5275b5ef1f91dd8ba11bdcef87f0d5661500", "url": "https://github.com/typetools/checker-framework/commit/b6aa5275b5ef1f91dd8ba11bdcef87f0d5661500", "message": "remove unnecessary null check", "committedDate": "2020-05-29T20:05:06Z", "type": "commit"}, {"oid": "5160f6978690c19dd51336995f76f7c1ba17ba34", "url": "https://github.com/typetools/checker-framework/commit/5160f6978690c19dd51336995f76f7c1ba17ba34", "message": "add defensive logic to AccATF constructor to check that the accumulator annotation matches the requirements", "committedDate": "2020-05-29T20:32:44Z", "type": "commit"}, {"oid": "ba0c2ea62a7fcc2795b8825f65144839f8b1bd03", "url": "https://github.com/typetools/checker-framework/commit/ba0c2ea62a7fcc2795b8825f65144839f8b1bd03", "message": "address remaining CR comments", "committedDate": "2020-05-29T20:58:42Z", "type": "commit"}, {"oid": "a62ac9d69c8ba43aa8cea1ef1b530c1ececdc6ed", "url": "https://github.com/typetools/checker-framework/commit/a62ac9d69c8ba43aa8cea1ef1b530c1ececdc6ed", "message": "thanks interning checkeR", "committedDate": "2020-05-29T23:09:08Z", "type": "commit"}, {"oid": "bd7e2283ffbdca30d18559ecb330c9428575ce8d", "url": "https://github.com/typetools/checker-framework/commit/bd7e2283ffbdca30d18559ecb330c9428575ce8d", "message": "Merge ../checker-framework-branch-master into accumulation-analysis", "committedDate": "2020-05-31T23:53:15Z", "type": "commit"}, {"oid": "8f94fd08d98c987fe5929fe940f486fb5fd4e7ab", "url": "https://github.com/typetools/checker-framework/commit/8f94fd08d98c987fe5929fe940f486fb5fd4e7ab", "message": "Documentation tweaks from code review", "committedDate": "2020-06-02T00:27:18Z", "type": "commit"}, {"oid": "a2652f871316a3dfc9f90b6bf77898942e2347a6", "url": "https://github.com/typetools/checker-framework/commit/a2652f871316a3dfc9f90b6bf77898942e2347a6", "message": "Code review changes, mostly to documentation", "committedDate": "2020-06-02T04:23:11Z", "type": "commit"}, {"oid": "0c117619af274d50d2ec3681a5b2560d3a1faed3", "url": "https://github.com/typetools/checker-framework/commit/0c117619af274d50d2ec3681a5b2560d3a1faed3", "message": "Merge ../checker-framework-branch-master into accumulation-analysis", "committedDate": "2020-06-02T05:20:54Z", "type": "commit"}, {"oid": "b0411993d94b694592dd4789b9a8bd7d1072de05", "url": "https://github.com/typetools/checker-framework/commit/b0411993d94b694592dd4789b9a8bd7d1072de05", "message": "Tweak a test", "committedDate": "2020-06-02T05:29:58Z", "type": "commit"}, {"oid": "d2abe73a6512ca901f516d94d08bbefcdd8fea55", "url": "https://github.com/typetools/checker-framework/commit/d2abe73a6512ca901f516d94d08bbefcdd8fea55", "message": "Merge ../checker-framework-branch-master into accumulation-analysis", "committedDate": "2020-06-03T16:54:23Z", "type": "commit"}, {"oid": "f71ee15c7552e35817990281d5943613989185f8", "url": "https://github.com/typetools/checker-framework/commit/f71ee15c7552e35817990281d5943613989185f8", "message": "efficiency improvements Mike asked for, as best as I can tell", "committedDate": "2020-06-03T19:05:24Z", "type": "commit"}, {"oid": "20ef5525fcb14218821b3b6cc4ede71ee14bfaaa", "url": "https://github.com/typetools/checker-framework/commit/20ef5525fcb14218821b3b6cc4ede71ee14bfaaa", "message": "address most code review comments", "committedDate": "2020-06-03T19:21:28Z", "type": "commit"}, {"oid": "d6840005eb094e926f9cb69bde8304eafbdade16", "url": "https://github.com/typetools/checker-framework/commit/d6840005eb094e926f9cb69bde8304eafbdade16", "message": "update some comments, add failing test", "committedDate": "2020-06-04T19:45:42Z", "type": "commit"}, {"oid": "8f2de7e8fd0bed28e9e8062ebccdb1dd782b5806", "url": "https://github.com/typetools/checker-framework/commit/8f2de7e8fd0bed28e9e8062ebccdb1dd782b5806", "message": "handle failing test", "committedDate": "2020-06-05T18:41:00Z", "type": "commit"}, {"oid": "d13111da146e97cc91dd0bd290d00e1e2d36ef0c", "url": "https://github.com/typetools/checker-framework/commit/d13111da146e97cc91dd0bd290d00e1e2d36ef0c", "message": "fix javadoc", "committedDate": "2020-06-05T19:57:08Z", "type": "commit"}, {"oid": "03e87ece7e1fa945da00cd94009e4fb6ef279ec6", "url": "https://github.com/typetools/checker-framework/commit/03e87ece7e1fa945da00cd94009e4fb6ef279ec6", "message": "don't include literal @", "committedDate": "2020-06-05T21:00:20Z", "type": "commit"}, {"oid": "c2c9b240b13a7f628a2935348311e27602078d81", "url": "https://github.com/typetools/checker-framework/commit/c2c9b240b13a7f628a2935348311e27602078d81", "message": "Merge branch 'master' of github.com:typetools/checker-framework into accumulation-predicate", "committedDate": "2020-06-08T16:32:28Z", "type": "commit"}, {"oid": "62f9fdeecfd770dccda58e26b488bc79809952bb", "url": "https://github.com/typetools/checker-framework/commit/62f9fdeecfd770dccda58e26b488bc79809952bb", "message": "initial work", "committedDate": "2020-06-09T16:40:52Z", "type": "commit"}, {"oid": "f06c67617cb2e74d502125d87e91f74174bacb59", "url": "https://github.com/typetools/checker-framework/commit/f06c67617cb2e74d502125d87e91f74174bacb59", "message": "merge from upstream and resolve conflicts", "committedDate": "2020-07-13T16:41:09Z", "type": "commit"}, {"oid": "dbafc29ad765d13961fc73edbe841358bba9bb38", "url": "https://github.com/typetools/checker-framework/commit/dbafc29ad765d13961fc73edbe841358bba9bb38", "message": "Merge branch 'master' of github.com:typetools/checker-framework into accumulation-predicate", "committedDate": "2020-07-14T16:03:39Z", "type": "commit"}, {"oid": "110b49d5e3ee075fa324f03f5fb85d34cc0d1d73", "url": "https://github.com/typetools/checker-framework/commit/110b49d5e3ee075fa324f03f5fb85d34cc0d1d73", "message": "full support for predicateS", "committedDate": "2020-07-14T17:01:58Z", "type": "commit"}, {"oid": "95c0c821b709605345aa6ca50bce28b33ecf9618", "url": "https://github.com/typetools/checker-framework/commit/95c0c821b709605345aa6ca50bce28b33ecf9618", "message": "try to force UTF-8 encoding in my tests", "committedDate": "2020-07-14T19:06:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5NzIxNg==", "url": "https://github.com/typetools/checker-framework/pull/3476#discussion_r454697216", "bodyText": "This test case is unrelated to predicates, right?", "author": "msridhar", "createdAt": "2020-07-14T23:12:37Z", "path": "framework/tests/accumulation/SimpleInferenceMerge.java", "diffHunk": "@@ -0,0 +1,37 @@\n+import testaccumulation.qual.*;\n+\n+class SimpleInferenceMerge {", "originalCommit": "95c0c821b709605345aa6ca50bce28b33ecf9618", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4MTUzNw==", "url": "https://github.com/typetools/checker-framework/pull/3476#discussion_r455981537", "bodyText": "Yeah. It probably should have been included in the original AccumulationChecker PR, but was left off somehow. I included it here since it passes and I moved over a bunch of the other tests, so it didn't seem like it needed its own.", "author": "kelloggm", "createdAt": "2020-07-16T18:16:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5NzIxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5Nzc2OQ==", "url": "https://github.com/typetools/checker-framework/pull/3476#discussion_r454697769", "bodyText": "We probably want some documentation of the unsound handling of negation", "author": "msridhar", "createdAt": "2020-07-14T23:14:04Z", "path": "docs/manual/accumulation-checker.tex", "diffHunk": "@@ -55,15 +55,21 @@\n \\href{https://github.com/typetools/checker-framework/blob/master/framework/src/test/java/testaccumulation/qual/TestAccumulationBottom.java}{TestAccumulationBottom.java}.\n It should take no arguments, and should be a subtype of the accumulator type you defined earlier.\n \n+You may also choose to define a predicate annotation, analogous to\n+\\href{https://github.com/typetools/checker-framework/blob/master/framework/src/test/java/testaccumulation/qual/TestAccumulationPredicate.java}{TestAccumulationPredicate.java}.\n+A predicate annotation allows you to write specifications with disjunctions (the accumulation annotation implicitly already permits", "originalCommit": "95c0c821b709605345aa6ca50bce28b33ecf9618", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}