{"pr_number": 3518, "pr_title": "Clarify `@Covariant` documentation in terms of clients", "pr_createdAt": "2020-07-27T17:59:47Z", "pr_url": "https://github.com/typetools/checker-framework/pull/3518", "timeline": [{"oid": "0fc283d6b704371409b08f0723a98489d9d32df9", "url": "https://github.com/typetools/checker-framework/commit/0fc283d6b704371409b08f0723a98489d9d32df9", "message": "Clarify Covariant documentation in terms of clients", "committedDate": "2020-07-27T17:57:54Z", "type": "commit"}, {"oid": "27f2891ea503fce6cd485efb8109b7b62b568b65", "url": "https://github.com/typetools/checker-framework/commit/27f2891ea503fce6cd485efb8109b7b62b568b65", "message": "Merge ../checker-framework-branch-master into covariant-documentation", "committedDate": "2020-07-27T18:23:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1NTQyMg==", "url": "https://github.com/typetools/checker-framework/pull/3518#discussion_r461155422", "bodyText": "I can't parse this. \"from the class are never pass values of that type\"", "author": "smillst", "createdAt": "2020-07-27T20:38:49Z", "path": "docs/manual/generics.tex", "diffHunk": "@@ -445,16 +445,17 @@\n invariantly.  For example, \\code{List<@Nullable String>} is not a subtype\n of \\code{List<String>}.\n \n-When a type parameter is used in a read-only way --- that is, when values\n-of that type are read but are never assigned --- then it is safe for the\n+When a type parameter is used in a read-only way --- that is, when clients\n+read values of that type from the class are never pass values of that type", "originalCommit": "27f2891ea503fce6cd485efb8109b7b62b568b65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "df1c859c0994423d75757bc57f4c377e1d0e52d0", "url": "https://github.com/typetools/checker-framework/commit/df1c859c0994423d75757bc57f4c377e1d0e52d0", "message": "Fix typo: \"are\" => \"but\"", "committedDate": "2020-07-27T23:45:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc5NTYzNA==", "url": "https://github.com/typetools/checker-framework/pull/3518#discussion_r461795634", "bodyText": "@mernst This problem already existed before, but I just notice it when reading through this: isn't this the wrong way around? A @Nullable String is a supertype of @NonNull String, so it is safe for Iterator<@Nullable String> to be a supertype of List<String>.\nAs described, it sounds like one can assign an Iterator<@Nullable String> to a Iterator<String>, which would then allow to read a value as non-null, even though the iterator can contain nulls.\nAm I misreading the example?", "author": "wmdietl", "createdAt": "2020-07-28T18:45:17Z", "path": "docs/manual/generics.tex", "diffHunk": "@@ -445,16 +445,17 @@\n invariantly.  For example, \\code{List<@Nullable String>} is not a subtype\n of \\code{List<String>}.\n \n-When a type parameter is used in a read-only way --- that is, when values\n-of that type are read but are never assigned --- then it is safe for the\n+When a type parameter is used in a read-only way --- that is, when clients\n+read values of that type from the class but never pass values of that type\n+to the class --- then it is safe for the\n type to be \\emph{covariant} in the type parameter.  Use the\n \\refqualclass{framework/qual}{Covariant} annotation to indicate this.\n When a type parameter is covariant, two instantiations of the class with\n different type arguments have the same subtyping relationship as the type\n arguments do.\n \n-For example, consider \\<Iterator>.  Its elements can be read but not\n-written, so \\code{Iterator<@Nullable String>} can be a subtype of\n+For example, consider \\<Iterator>.  A client can read elements but not\n+write them, so \\code{Iterator<@Nullable String>} can be a subtype of", "originalCommit": "df1c859c0994423d75757bc57f4c377e1d0e52d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}