{"pr_number": 3508, "pr_title": "Make @DefaultFor and @DefaultQualifierForUse consistent.", "pr_createdAt": "2020-07-24T19:52:09Z", "pr_url": "https://github.com/typetools/checker-framework/pull/3508", "timeline": [{"oid": "92725e14b1bf1822a28b6a3676cf7ca90ac91ca2", "url": "https://github.com/typetools/checker-framework/commit/92725e14b1bf1822a28b6a3676cf7ca90ac91ca2", "message": "Add @UpperBoundFor annotations for char, double, float, & boxed variants", "committedDate": "2020-07-15T21:43:17Z", "type": "commit"}, {"oid": "5ae66eea1cf827ce014041e564a051355fa5d9bb", "url": "https://github.com/typetools/checker-framework/commit/5ae66eea1cf827ce014041e564a051355fa5d9bb", "message": "Tweak manual", "committedDate": "2020-07-15T21:50:02Z", "type": "commit"}, {"oid": "64c580da86f6d48f9ec64c2726890c1fab293f1b", "url": "https://github.com/typetools/checker-framework/commit/64c580da86f6d48f9ec64c2726890c1fab293f1b", "message": "More documentation improvements", "committedDate": "2020-07-15T21:55:22Z", "type": "commit"}, {"oid": "c5af5620e168450f2b3349a7fd7ee8ce484bb2ce", "url": "https://github.com/typetools/checker-framework/commit/c5af5620e168450f2b3349a7fd7ee8ce484bb2ce", "message": "Merge ../checker-framework-branch-master into signedness-upperboundfor", "committedDate": "2020-07-16T22:23:41Z", "type": "commit"}, {"oid": "d777b7cc971f2f7c06b3bc715f2d8b08f4da5d58", "url": "https://github.com/typetools/checker-framework/commit/d777b7cc971f2f7c06b3bc715f2d8b08f4da5d58", "message": "Merge ../checker-framework-branch-master into signedness-upperboundfor", "committedDate": "2020-07-16T22:24:48Z", "type": "commit"}, {"oid": "0b3de28feb14bc504955cefecd271ddeb51ee24a", "url": "https://github.com/typetools/checker-framework/commit/0b3de28feb14bc504955cefecd271ddeb51ee24a", "message": "Merge ../checker-framework-branch-master into signedness-upperboundfor", "committedDate": "2020-07-16T22:36:06Z", "type": "commit"}, {"oid": "d4edb3447d6a1bca8f015c3f1fb1dee08fa995aa", "url": "https://github.com/typetools/checker-framework/commit/d4edb3447d6a1bca8f015c3f1fb1dee08fa995aa", "message": "Merge ../checker-framework-branch-master into signedness-upperboundfor", "committedDate": "2020-07-20T14:07:24Z", "type": "commit"}, {"oid": "0334ed821175ef2409d8c26c5dfb920faaf3b87f", "url": "https://github.com/typetools/checker-framework/commit/0334ed821175ef2409d8c26c5dfb920faaf3b87f", "message": "Remove incorrect documentation about defaulting\n\n@UpperBound does not affect defaulting.", "committedDate": "2020-07-20T14:12:18Z", "type": "commit"}, {"oid": "c9966b92b93faff0203392527f39355d972cb9f7", "url": "https://github.com/typetools/checker-framework/commit/c9966b92b93faff0203392527f39355d972cb9f7", "message": "Checkpoint.", "committedDate": "2020-07-20T19:28:56Z", "type": "commit"}, {"oid": "466ef6b59c66d7e4fa2c2b4fc01697ffc7eed33f", "url": "https://github.com/typetools/checker-framework/commit/466ef6b59c66d7e4fa2c2b4fc01697ffc7eed33f", "message": "hold.", "committedDate": "2020-07-22T17:38:16Z", "type": "commit"}, {"oid": "67e1cc874ace6a8d96d7c08717dca332cfc72ee1", "url": "https://github.com/typetools/checker-framework/commit/67e1cc874ace6a8d96d7c08717dca332cfc72ee1", "message": "Merge remote-tracking branch 'origin/master' into defaultFor", "committedDate": "2020-07-22T20:15:42Z", "type": "commit"}, {"oid": "aa0099af309bc3225e06200e2a55cc2d895d69ec", "url": "https://github.com/typetools/checker-framework/commit/aa0099af309bc3225e06200e2a55cc2d895d69ec", "message": "hold.", "committedDate": "2020-07-23T16:14:55Z", "type": "commit"}, {"oid": "b899d05a366b632301eed4aa17c47981aca2650d", "url": "https://github.com/typetools/checker-framework/commit/b899d05a366b632301eed4aa17c47981aca2650d", "message": "Hold.", "committedDate": "2020-07-23T16:35:57Z", "type": "commit"}, {"oid": "38d6b23036a3b0d53f857d0ad73aa7906be2086f", "url": "https://github.com/typetools/checker-framework/commit/38d6b23036a3b0d53f857d0ad73aa7906be2086f", "message": "hold.", "committedDate": "2020-07-23T16:51:07Z", "type": "commit"}, {"oid": "7e83e073c5b89df62d19df3aeee7afe797420a41", "url": "https://github.com/typetools/checker-framework/commit/7e83e073c5b89df62d19df3aeee7afe797420a41", "message": "hold.", "committedDate": "2020-07-23T17:28:14Z", "type": "commit"}, {"oid": "77a18a13ea5803bed7dd3f7984a50ce91cde1eb9", "url": "https://github.com/typetools/checker-framework/commit/77a18a13ea5803bed7dd3f7984a50ce91cde1eb9", "message": "Fix Lock Checker.", "committedDate": "2020-07-23T17:44:41Z", "type": "commit"}, {"oid": "6b137ac8591e568d92264fa5bff14fc5866a43d5", "url": "https://github.com/typetools/checker-framework/commit/6b137ac8591e568d92264fa5bff14fc5866a43d5", "message": "Add comments.", "committedDate": "2020-07-23T19:18:57Z", "type": "commit"}, {"oid": "baf4c07248ad3f3e846043454aa05b8b4075da44", "url": "https://github.com/typetools/checker-framework/commit/baf4c07248ad3f3e846043454aa05b8b4075da44", "message": "Merge remote-tracking branch 'origin/master' into defaultFor", "committedDate": "2020-07-23T19:19:14Z", "type": "commit"}, {"oid": "378ec3a49266ea010ac0fb3f64b9388b84f0fd61", "url": "https://github.com/typetools/checker-framework/commit/378ec3a49266ea010ac0fb3f64b9388b84f0fd61", "message": "Add Javadoc.", "committedDate": "2020-07-23T20:03:42Z", "type": "commit"}, {"oid": "dea1636db818f3f5dc8d5cef7ffa29032321d471", "url": "https://github.com/typetools/checker-framework/commit/dea1636db818f3f5dc8d5cef7ffa29032321d471", "message": "Tweaks.", "committedDate": "2020-07-24T15:59:47Z", "type": "commit"}, {"oid": "a231ea01330608add9ad8663e52e50a4552d223b", "url": "https://github.com/typetools/checker-framework/commit/a231ea01330608add9ad8663e52e50a4552d223b", "message": "Merge remote-tracking branch 'origin/master' into defaultFor", "committedDate": "2020-07-24T16:01:14Z", "type": "commit"}, {"oid": "be4a6f2e050ff5f376ffdb49796f5ff9b989e4e3", "url": "https://github.com/typetools/checker-framework/commit/be4a6f2e050ff5f376ffdb49796f5ff9b989e4e3", "message": "Fix Arrays.", "committedDate": "2020-07-24T16:37:40Z", "type": "commit"}, {"oid": "b6f796b3335dce206a9c768851e799e96c630f37", "url": "https://github.com/typetools/checker-framework/commit/b6f796b3335dce206a9c768851e799e96c630f37", "message": ".", "committedDate": "2020-07-24T16:38:06Z", "type": "commit"}, {"oid": "b57c7a9c37bc7ae47f7f4f6827b416c2c54f3cc8", "url": "https://github.com/typetools/checker-framework/commit/b57c7a9c37bc7ae47f7f4f6827b416c2c54f3cc8", "message": "Uncomment.", "committedDate": "2020-07-24T16:40:50Z", "type": "commit"}, {"oid": "b7005bca7d538b739304dba5d8bd469f8f21ad11", "url": "https://github.com/typetools/checker-framework/commit/b7005bca7d538b739304dba5d8bd469f8f21ad11", "message": "Reformat.", "committedDate": "2020-07-24T17:48:00Z", "type": "commit"}, {"oid": "c2b274440f31f266be7eff03326c722719a2f495", "url": "https://github.com/typetools/checker-framework/commit/c2b274440f31f266be7eff03326c722719a2f495", "message": "Tweaks.", "committedDate": "2020-07-24T17:52:49Z", "type": "commit"}, {"oid": "caa542744beabeb7ef10fd984b48371b474fa026", "url": "https://github.com/typetools/checker-framework/commit/caa542744beabeb7ef10fd984b48371b474fa026", "message": "Merge remote-tracking branch 'origin/master' into defaultFor", "committedDate": "2020-07-24T18:37:50Z", "type": "commit"}, {"oid": "c1dccde29340f451be820205923d019f5104128e", "url": "https://github.com/typetools/checker-framework/commit/c1dccde29340f451be820205923d019f5104128e", "message": "Tweak.", "committedDate": "2020-07-24T19:22:19Z", "type": "commit"}, {"oid": "83e28901b9c8121a6fe4761528135bc619047086", "url": "https://github.com/typetools/checker-framework/commit/83e28901b9c8121a6fe4761528135bc619047086", "message": "Fix Javadoc style", "committedDate": "2020-07-24T21:47:13Z", "type": "commit"}, {"oid": "3f3b7aeb8399aac958a86050cf2f3130cf7a681c", "url": "https://github.com/typetools/checker-framework/commit/3f3b7aeb8399aac958a86050cf2f3130cf7a681c", "message": "Merge ../checker-framework-branch-master into defaultFor", "committedDate": "2020-07-25T00:53:43Z", "type": "commit"}, {"oid": "632d72e67be7dc38e1359b847e715ae6e9806c6b", "url": "https://github.com/typetools/checker-framework/commit/632d72e67be7dc38e1359b847e715ae6e9806c6b", "message": "Add more tests", "committedDate": "2020-07-25T14:34:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzNzMwOA==", "url": "https://github.com/typetools/checker-framework/pull/3508#discussion_r462637308", "bodyText": "I guess the @Unsigned is the invalid one. Could you split it up in two methods to make clearer?", "author": "wmdietl", "createdAt": "2020-07-29T22:58:20Z", "path": "checker/tests/signedness/LocalVarDefaults.java", "diffHunk": "@@ -0,0 +1,29 @@\n+import org.checkerframework.checker.signedness.qual.Signed;\n+import org.checkerframework.checker.signedness.qual.Unsigned;\n+\n+public class LocalVarDefaults {\n+\n+    void methodInt(@Unsigned int unsignedInt, @Signed int signedInt) {\n+        int local = unsignedInt;\n+        int local2 = signedInt;\n+    }\n+\n+    // :: error: (type.invalid.annotations.on.use)", "originalCommit": "632d72e67be7dc38e1359b847e715ae6e9806c6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEwMzQzOA==", "url": "https://github.com/typetools/checker-framework/pull/3508#discussion_r463103438", "bodyText": "The purpose of this test is to check local variable defaults, not type.invalid.annotations.on.use, so it makes sense to keep the similar tests together.", "author": "smillst", "createdAt": "2020-07-30T16:00:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzNzMwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzODIwNg==", "url": "https://github.com/typetools/checker-framework/pull/3508#discussion_r462638206", "bodyText": "Could you clarify the javadoc? It's confusing given the method name that this applies to anything other than declared types.\nCan you call out explicitly what happens with ARRAY (and what else? intersection?)", "author": "wmdietl", "createdAt": "2020-07-29T23:00:55Z", "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeValidator.java", "diffHunk": "@@ -95,7 +95,7 @@ public boolean isValid(AnnotatedTypeMirror type, Tree tree) {\n      * @return whether or not the top-level type should be checked\n      */\n     protected boolean shouldCheckTopLevelDeclaredType(AnnotatedTypeMirror type, Tree tree) {\n-        if (type.getKind() != TypeKind.DECLARED) {\n+        if (type.getKind() != TypeKind.DECLARED && !type.getKind().isPrimitive()) {", "originalCommit": "632d72e67be7dc38e1359b847e715ae6e9806c6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzOTMwNw==", "url": "https://github.com/typetools/checker-framework/pull/3508#discussion_r462639307", "bodyText": "Can you add a comment why the order is different for expressions?", "author": "wmdietl", "createdAt": "2020-07-29T23:04:06Z", "path": "framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java", "diffHunk": "@@ -1513,9 +1527,15 @@ protected void addComputedTypeAnnotations(\n                 : \"GenericAnnotatedTypeFactory.addComputedTypeAnnotations: \"\n                         + \" root needs to be set when used on trees; factory: \"\n                         + this.getClass();\n-        addAnnotationsFromDefaultQualifierForUse(TreeUtils.elementFromTree(tree), type);\n+\n+        if (!TreeUtils.isExpressionTree(tree)) {\n+            addAnnotationsFromDefaultQualifierForUse(TreeUtils.elementFromTree(tree), type);", "originalCommit": "632d72e67be7dc38e1359b847e715ae6e9806c6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0MDMzMg==", "url": "https://github.com/typetools/checker-framework/pull/3508#discussion_r462640332", "bodyText": "Could you update the javadoc?\nThis now also applies the defaultForTypeAnnotator, which is surprising given the method name.\nIt looks like null is passed as element to change what would happen by default, so calling that out would be good.\nI was also surprised by the special case for primitives, so giving a reason for that would be good.", "author": "wmdietl", "createdAt": "2020-07-29T23:07:28Z", "path": "framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java", "diffHunk": "@@ -1839,20 +1859,28 @@ public void postAsMemberOf(\n      */", "originalCommit": "632d72e67be7dc38e1359b847e715ae6e9806c6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0MzEyMQ==", "url": "https://github.com/typetools/checker-framework/pull/3508#discussion_r462643121", "bodyText": "I would prefer something more descriptive than the type, although \"type to test\" is also not much better.", "author": "wmdietl", "createdAt": "2020-07-29T23:16:24Z", "path": "javacutil/src/main/java/org/checkerframework/javacutil/TypesUtils.java", "diffHunk": "@@ -248,9 +248,25 @@ public static boolean isIntegral(TypeMirror type) {\n         }\n     }\n \n+    /**\n+     * Returns true iff the argument is a boxed floating point type.\n+     *\n+     * @param type type mirror", "originalCommit": "632d72e67be7dc38e1359b847e715ae6e9806c6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0MzUwNg==", "url": "https://github.com/typetools/checker-framework/pull/3508#discussion_r462643506", "bodyText": "At some point we should figure out and document what the proper way is. Name defines a contentEquals, which might be more direct than calling toString. However, for multiple comparisons one approach might be more efficient.", "author": "wmdietl", "createdAt": "2020-07-29T23:17:44Z", "path": "javacutil/src/main/java/org/checkerframework/javacutil/TypesUtils.java", "diffHunk": "@@ -248,9 +248,25 @@ public static boolean isIntegral(TypeMirror type) {\n         }\n     }\n \n+    /**\n+     * Returns true iff the argument is a boxed floating point type.\n+     *\n+     * @param type type mirror\n+     * @return whether the argument is a boxed floating point type\n+     */\n+    public static boolean isBoxedFloating(TypeMirror type) {\n+        if (type.getKind() != TypeKind.DECLARED) {\n+            return false;\n+        }\n+\n+        String qualifiedName = getQualifiedName((DeclaredType) type).toString();", "originalCommit": "632d72e67be7dc38e1359b847e715ae6e9806c6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEwODQzNQ==", "url": "https://github.com/typetools/checker-framework/pull/3508#discussion_r463108435", "bodyText": "That does sound like a good future improvement.", "author": "smillst", "createdAt": "2020-07-30T16:07:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0MzUwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0NDA0MQ==", "url": "https://github.com/typetools/checker-framework/pull/3508#discussion_r462644041", "bodyText": "Nit. Make the validator capitalization consistent with the use in the class javadoc.", "author": "wmdietl", "createdAt": "2020-07-29T23:19:30Z", "path": "checker/src/main/java/org/checkerframework/checker/nullness/NullnessVisitor.java", "diffHunk": "@@ -648,4 +652,38 @@ public Void visitAnnotation(AnnotationTree node, Void p) {\n         // All annotation arguments are non-null and initialized, so no need to check them.\n         return null;\n     }\n+\n+    @Override\n+    protected TypeValidator createTypeValidator() {\n+        return new NullnessValidator(checker, this, atypeFactory);\n+    }\n+\n+    /**\n+     * Nullness Validator. Check that primitive types are annotated with {@code @NonNull} even if\n+     * they are the type of a local variable.\n+     */\n+    private static class NullnessValidator extends BaseTypeValidator {\n+\n+        /**\n+         * Create Nullness validator.", "originalCommit": "632d72e67be7dc38e1359b847e715ae6e9806c6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1MTgzMw==", "url": "https://github.com/typetools/checker-framework/pull/3508#discussion_r462651833", "bodyText": "I think it's OK to write \"NullnessValidator\" or \"Nullness validator\".  I wouldn't write \"Nullness Validator\", though \"Nullness BaseTypeValidator\" would also be OK.", "author": "mernst", "createdAt": "2020-07-29T23:44:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0NDA0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0NDg2MA==", "url": "https://github.com/typetools/checker-framework/pull/3508#discussion_r462644860", "bodyText": "It looks like all the signed char casts are removed from this test. Should at least one remain and expect an error? Or what is supposed to happen if somebody writes that?", "author": "wmdietl", "createdAt": "2020-07-29T23:21:55Z", "path": "checker/tests/signedness/CastedShifts.java", "diffHunk": "@@ -36,35 +36,25 @@ public void CastedIntShifts(@Unsigned int unsigned, @Signed int signed) {\n         byteRes = (@Signed byte) (signed >> 0);\n \n         // Cast to char.\n-        @UnknownSignedness char charRes;\n+        char charRes;\n \n         // Shifting right by 23, the introduced bits are cast away\n         charRes = (@Unsigned char) (unsigned >>> 23);\n         charRes = (@Unsigned char) (unsigned >> 23);\n-        charRes = (@Signed char) (signed >>> 23);\n-        charRes = (@Signed char) (signed >> 23);", "originalCommit": "632d72e67be7dc38e1359b847e715ae6e9806c6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1MTUwMg==", "url": "https://github.com/typetools/checker-framework/pull/3508#discussion_r462651502", "bodyText": "It is an error to write @Signed char.  We'll add a test later, in pull requests after this one.", "author": "mernst", "createdAt": "2020-07-29T23:43:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0NDg2MA=="}], "type": "inlineReview"}, {"oid": "4ec0ad69a595f2a5cc946d58e2e3e91087a779d3", "url": "https://github.com/typetools/checker-framework/commit/4ec0ad69a595f2a5cc946d58e2e3e91087a779d3", "message": "Merge remote-tracking branch 'origin/master' into defaultFor", "committedDate": "2020-07-30T15:57:39Z", "type": "commit"}, {"oid": "15408fe27004c2d185e106b9eacf4a860d161689", "url": "https://github.com/typetools/checker-framework/commit/15408fe27004c2d185e106b9eacf4a860d161689", "message": "Merge branch 'defaultFor' of github.com:smillst/checker-framework into defaultFor", "committedDate": "2020-07-30T15:57:45Z", "type": "commit"}, {"oid": "6f96528779eb9b7f58e042a26eb6b163730f015a", "url": "https://github.com/typetools/checker-framework/commit/6f96528779eb9b7f58e042a26eb6b163730f015a", "message": "Code Review.", "committedDate": "2020-07-30T16:08:51Z", "type": "commit"}, {"oid": "d1bad929cb2df4e605a888a49dfc3b472b349c2d", "url": "https://github.com/typetools/checker-framework/commit/d1bad929cb2df4e605a888a49dfc3b472b349c2d", "message": "Add Javadoc", "committedDate": "2020-07-30T18:51:10Z", "type": "commit"}, {"oid": "2cda8fb777f0c07e21211ed9d7c032267ee8996b", "url": "https://github.com/typetools/checker-framework/commit/2cda8fb777f0c07e21211ed9d7c032267ee8996b", "message": "Merge branch 'defaultFor' of github.com:smillst/checker-framework into defaultFor", "committedDate": "2020-07-30T18:52:00Z", "type": "commit"}, {"oid": "fed35423131bcf6284fef3386edffb46797d9095", "url": "https://github.com/typetools/checker-framework/commit/fed35423131bcf6284fef3386edffb46797d9095", "message": "Merge ../checker-framework-branch-master into defaultFor", "committedDate": "2020-07-30T18:52:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MDI1Mg==", "url": "https://github.com/typetools/checker-framework/pull/3508#discussion_r463340252", "bodyText": "Could you deprecate this method and introduce a better name?\nIt makes no sense to use DeclaredType in the method name if it actually is also for primitive types.", "author": "wmdietl", "createdAt": "2020-07-31T00:19:04Z", "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeValidator.java", "diffHunk": "@@ -86,16 +86,19 @@ public boolean isValid(AnnotatedTypeMirror type, Tree tree) {\n     }\n \n     /**\n-     * Should the top-level declared type be checked?\n+     * Should the top-level declared or primitive type be checked?\n+     *\n+     * <p>If {@code type} is not a declared or primitive type, then this method returns true.\n      *\n      * <p>Top-level type is not checked if tree is a local variable or an expression tree.\n      *\n      * @param type AnnotatedTypeMirror being validated\n      * @param tree a Tree whose type is {@code type}\n-     * @return whether or not the top-level type should be checked\n+     * @return whether or not the top-level type should be checked, if {@code type} is a declared or\n+     *     primitive type.\n      */\n     protected boolean shouldCheckTopLevelDeclaredType(AnnotatedTypeMirror type, Tree tree) {", "originalCommit": "fed35423131bcf6284fef3386edffb46797d9095", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MzY0NQ==", "url": "https://github.com/typetools/checker-framework/pull/3508#discussion_r463343645", "bodyText": "We can't deprecate methods the might be overridden by subclass.  I can rename it and mention it in the change log.", "author": "smillst", "createdAt": "2020-07-31T00:31:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MDI1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0NTA1Nw==", "url": "https://github.com/typetools/checker-framework/pull/3508#discussion_r463345057", "bodyText": "You can deprecate it and have the new method call the deprecated method (suppressing the warning).\nAll CF overrides can change to override the new method and external overrides would still be considered by the new method in this class.\nBut as this will be a minor release anyways, directly renaming sounds good to me.", "author": "wmdietl", "createdAt": "2020-07-31T00:37:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MDI1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MDc1Mg==", "url": "https://github.com/typetools/checker-framework/pull/3508#discussion_r463340752", "bodyText": "The August release will be the next minor release. So isn't now the right time to make this change?", "author": "wmdietl", "createdAt": "2020-07-31T00:20:46Z", "path": "framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java", "diffHunk": "@@ -1841,25 +1868,37 @@ public void postAsMemberOf(\n      * Adds default qualifiers bases on the underlying type of {@code type} to {@code type}. If\n      * {@code element} is a local variable, then the defaults are not added.\n      *\n+     * <p>(This uses both the {@link DefaultQualifierForUseTypeAnnotator} and {@link\n+     * DefaultForTypeAnnotator}.)\n+     *\n      * @param element possibly null element whose type is {@code type}\n      * @param type the type to which defaults are added\n      */\n+    // TODO: rename in the next minor release.", "originalCommit": "fed35423131bcf6284fef3386edffb46797d9095", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0NDY5MQ==", "url": "https://github.com/typetools/checker-framework/pull/3508#discussion_r463344691", "bodyText": "Yes, I didn't realize breaking changes were merged.  I'll fix it.", "author": "smillst", "createdAt": "2020-07-31T00:35:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MDc1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MTQ1Mw==", "url": "https://github.com/typetools/checker-framework/pull/3508#discussion_r463341453", "bodyText": "In other recent pull requests you used quals as the name for such qualifier sets.\nMaybe addQualOrBound would also be a better method name?", "author": "wmdietl", "createdAt": "2020-07-31T00:23:36Z", "path": "framework/src/main/java/org/checkerframework/framework/type/treeannotator/PropagationTreeAnnotator.java", "diffHunk": "@@ -204,4 +209,27 @@ private boolean hasPrimaryAnnotationInAllHierarchies(AnnotatedTypeMirror type) {\n         }\n         return annotated;\n     }\n+\n+    /**\n+     * Adds the qualifiers in {@code annos} to {@code type} that are below the qualifier upper bound\n+     * of type and for which type does not already have annotation in the same hierarchy. If a\n+     * qualifier in {@code annos} is above the bound, then the bound is added to {@code type}\n+     * instead.\n+     *\n+     * @param type annotations are added to this type\n+     * @param annos annotations to add to type\n+     */\n+    private void addAnnoOrBound(AnnotatedTypeMirror type, Set<? extends AnnotationMirror> annos) {", "originalCommit": "fed35423131bcf6284fef3386edffb46797d9095", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0NDYyNw==", "url": "https://github.com/typetools/checker-framework/pull/3508#discussion_r463344627", "bodyText": "This file uses \"annotation\" rather \"qualifier\".  So Anno is more consistent.", "author": "smillst", "createdAt": "2020-07-31T00:35:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MTQ1Mw=="}], "type": "inlineReview"}, {"oid": "9bfadf3dd5099d31bda17964343e93e5dba9e470", "url": "https://github.com/typetools/checker-framework/commit/9bfadf3dd5099d31bda17964343e93e5dba9e470", "message": "Code review.", "committedDate": "2020-07-31T00:39:19Z", "type": "commit"}, {"oid": "6a54cc79718e741901d6d2a112a55f21175b8f30", "url": "https://github.com/typetools/checker-framework/commit/6a54cc79718e741901d6d2a112a55f21175b8f30", "message": "Merge remote-tracking branch 'origin/master' into defaultFor", "committedDate": "2020-07-31T00:39:42Z", "type": "commit"}, {"oid": "2fd332b4f9bf0a1c1f8f6cd9dd1be445527cb6db", "url": "https://github.com/typetools/checker-framework/commit/2fd332b4f9bf0a1c1f8f6cd9dd1be445527cb6db", "message": "Tweaks.", "committedDate": "2020-07-31T00:50:27Z", "type": "commit"}, {"oid": "28d8b7715b7b901a298035f14ae496411e988557", "url": "https://github.com/typetools/checker-framework/commit/28d8b7715b7b901a298035f14ae496411e988557", "message": "Fix method name", "committedDate": "2020-07-31T17:12:40Z", "type": "commit"}, {"oid": "48e691a72552e6e2c020c42b3febf9f6c107e027", "url": "https://github.com/typetools/checker-framework/commit/48e691a72552e6e2c020c42b3febf9f6c107e027", "message": "Add Javadoc", "committedDate": "2020-07-31T17:37:40Z", "type": "commit"}, {"oid": "7488450f141da6e0c013b3858148a61299880636", "url": "https://github.com/typetools/checker-framework/commit/7488450f141da6e0c013b3858148a61299880636", "message": "Merge ../checker-framework-branch-master into defaultFor", "committedDate": "2020-07-31T17:38:18Z", "type": "commit"}, {"oid": "12b089d8fe43a905b2e4f612ee3e055b0527bda1", "url": "https://github.com/typetools/checker-framework/commit/12b089d8fe43a905b2e4f612ee3e055b0527bda1", "message": "Merge ../checker-framework-branch-master into defaultFor", "committedDate": "2020-07-31T17:38:52Z", "type": "commit"}, {"oid": "b312cbbcdb545f769a3b74f8ba6df0b96cb9f809", "url": "https://github.com/typetools/checker-framework/commit/b312cbbcdb545f769a3b74f8ba6df0b96cb9f809", "message": "Merge remote-tracking branch 'origin/master' into defaultFor", "committedDate": "2020-07-31T18:06:42Z", "type": "commit"}, {"oid": "8886da9a04433cdbadc3033ae37674a81ea553ef", "url": "https://github.com/typetools/checker-framework/commit/8886da9a04433cdbadc3033ae37674a81ea553ef", "message": "Expand Javadoc", "committedDate": "2020-07-31T18:06:44Z", "type": "commit"}, {"oid": "ba1053f5444115980d7cb59b5395855aa3c0ef9f", "url": "https://github.com/typetools/checker-framework/commit/ba1053f5444115980d7cb59b5395855aa3c0ef9f", "message": "Merge branch 'defaultFor' of github.com:smillst/checker-framework into defaultFor", "committedDate": "2020-07-31T18:07:14Z", "type": "commit"}, {"oid": "e8dc57174188ffdd10889da4112ba7c583ac0aac", "url": "https://github.com/typetools/checker-framework/commit/e8dc57174188ffdd10889da4112ba7c583ac0aac", "message": "Trivial change to trigger CI", "committedDate": "2020-07-31T18:11:50Z", "type": "commit"}]}