{"pr_number": 739, "pr_title": "Fix #629, add pattern-regex functionality", "pr_createdAt": "2020-05-12T20:48:03Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/739", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyNjkxNw==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r424026917", "bodyText": "pattern-regex operates on the entire file buffer, not line-by-line. This was intentionally done so that it can find code like:\nsome_func_call(\n    \"INSECURE_STRING\"\n)\nOperating line-by-line wouldn't allow for an expression to consider the argument above. The downside is that we don't have an easy way to access line and column information (it's all just one big file contents string). This means we couldn't leverage existing [\"extra\"][\"lines\"] functionality. We instead store the regex match contents directly in the finding and reference it here as contents.", "author": "mschwager", "createdAt": "2020-05-12T20:53:45Z", "path": "semgrep/semgrep/output.py", "diffHunk": "@@ -92,6 +92,9 @@ def build_normal_output(\n                     severity_prepend = f\"{severity} \"\n             yield f\"{severity_prepend}{YELLOW_COLOR}rule:{check_id}: {message}{RESET_COLOR}\"\n \n+        if extra.get(\"contents\"):", "originalCommit": "40e1e8b5c3208879c099dc58388321cc50c7f033", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc0NzMwMw==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r424747303", "bodyText": "re: decision to do whole buffer instead of line by line -> makes sense. Having a separate result format adds a fair bit of complexity. Let me think about this for a bit.", "author": "brendongo", "createdAt": "2020-05-13T21:40:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyNjkxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2MTk0MQ==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r424761941", "bodyText": "Probably fine for now. We can iterate iterate :D", "author": "brendongo", "createdAt": "2020-05-13T22:15:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyNjkxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyNzEwNw==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r424027107", "bodyText": "See above.", "author": "mschwager", "createdAt": "2020-05-12T20:54:04Z", "path": "semgrep/semgrep/rule_match.py", "diffHunk": "@@ -97,11 +97,15 @@ def to_json(self) -> Dict[str, Any]:\n         json_obj[\"extra\"][\"message\"] = self._message\n         json_obj[\"extra\"][\"metadata\"] = self._metadata\n         json_obj[\"extra\"][\"severity\"] = self._severity\n+\n         if self._fix:\n             json_obj[\"extra\"][\"fix\"] = self._fix\n+\n         json_obj[\"start\"] = self._start\n         json_obj[\"end\"] = self._end\n-        json_obj[\"extra\"][\"lines\"] = \"\\n\".join(self.lines).rstrip()\n+\n+        if \"line\" in self.start and \"line\" in self.end:", "originalCommit": "40e1e8b5c3208879c099dc58388321cc50c7f033", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1Njg1Ng==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r424756856", "bodyText": "Function level comment would be helpful. Not immediately clear what this function does", "author": "brendongo", "createdAt": "2020-05-13T22:02:43Z", "path": "semgrep/semgrep/util.py", "diffHunk": "@@ -64,3 +68,8 @@ def set_flags(debug: bool, quiet: bool) -> None:\n     if quiet:\n         QUIET = True\n         debug_print(\"QUIET is on\")\n+\n+\n+def partition(pred: Callable, iterable: Iterable) -> Tuple[List, List]:", "originalCommit": "7ec56abd3dfd1cc04a53a10b867c43feeb3a73fc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1NzU2NQ==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r424757565", "bodyText": "Should we put the regex match in \"content\" here? So it becomes one stop shop of the offending match?", "author": "brendongo", "createdAt": "2020-05-13T22:04:30Z", "path": "semgrep/semgrep/rule_match.py", "diffHunk": "@@ -97,11 +97,15 @@ def to_json(self) -> Dict[str, Any]:\n         json_obj[\"extra\"][\"message\"] = self._message\n         json_obj[\"extra\"][\"metadata\"] = self._metadata\n         json_obj[\"extra\"][\"severity\"] = self._severity\n+\n         if self._fix:\n             json_obj[\"extra\"][\"fix\"] = self._fix\n+\n         json_obj[\"start\"] = self._start\n         json_obj[\"end\"] = self._end\n-        json_obj[\"extra\"][\"lines\"] = \"\\n\".join(self.lines).rstrip()\n+\n+        if \"line\" in self.start and \"line\" in self.end:\n+            json_obj[\"extra\"][\"lines\"] = \"\\n\".join(self.lines).rstrip()", "originalCommit": "7ec56abd3dfd1cc04a53a10b867c43feeb3a73fc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1ODUyOA==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r424758528", "bodyText": "Is there a reason we go through BooleanRuleExpression when we don't get any of the boolean composition anyway?", "author": "brendongo", "createdAt": "2020-05-13T22:07:00Z", "path": "semgrep/semgrep/rule.py", "diffHunk": "@@ -72,6 +72,13 @@ def _build_boolean_expression(\n                     OPERATORS.AND, rule_raw[\"id\"], None, rule_raw[pattern_name]\n                 )\n \n+        for pattern_name in pattern_names_for_operator(OPERATORS.REGEX):\n+            pattern = rule_raw.get(pattern_name)\n+            if pattern:\n+                return BooleanRuleExpression(", "originalCommit": "7ec56abd3dfd1cc04a53a10b867c43feeb3a73fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4NDgyNQ==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r424784825", "bodyText": "@brendongo to keep the same object representation I suppose", "author": "ievans", "createdAt": "2020-05-13T23:19:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1ODUyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4NTI2OA==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r424785268", "bodyText": "We should not merge this PR without the boolean combination imo", "author": "DrewDennison", "createdAt": "2020-05-13T23:20:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1ODUyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgwMTEyNg==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r424801126", "bodyText": "We could potentiall do a reverse lookup on the match to find what line it is in the buffer and have regex expose a similar output as semgrep-core. FWIW I think similar tools like zulint do line by line regex matching.", "author": "brendongo", "createdAt": "2020-05-14T00:13:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1ODUyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgyOTcyOA==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r425829728", "bodyText": "I updated it to include composition \ud83d\udc4d", "author": "mschwager", "createdAt": "2020-05-15T14:12:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1ODUyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2MDg5Mw==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r424760893", "bodyText": "Probably better for readability to have this in a function?", "author": "brendongo", "createdAt": "2020-05-13T22:12:30Z", "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -159,12 +188,65 @@ def _run_rules(\n             for language, all_patterns_for_language in self._group_patterns_by_language(\n                 rules\n             ).items():\n-                with tempfile.NamedTemporaryFile(\"w\") as fout:\n-                    # very important not to sort keys here\n-                    patterns_json = [p.to_json() for p in all_patterns_for_language]\n-                    yaml_as_str = yaml.safe_dump(\n-                        {\"rules\": patterns_json}, sort_keys=False\n+                # semgrep-core doesn't know about OPERATORS.REGEX - this is\n+                # strictly a semgrep Python feature. Regex filtering is\n+                # performed purely in Python code.\n+                patterns_regex, patterns = partition(\n+                    lambda p: p.expression.operator == OPERATORS.REGEX,\n+                    all_patterns_for_language,\n+                )\n+                if patterns_regex:\n+                    file_extensions = LANGUAGE_EXTENSIONS[language]\n+                    filepaths = [\n+                        str(target)\n+                        for target in targets\n+                        if target.is_file()\n+                        and self._pattern_regex_all\n+                        or any(\n+                            str(target).endswith(extension)\n+                            for extension in file_extensions\n+                        )\n+                    ]\n+                    filepaths.extend(\n+                        os.path.join(dirpath, filename)\n+                        for target in targets\n+                        if target.is_dir()\n+                        for dirpath, _, filenames in os.walk(str(target))\n+                        for filename in filenames\n+                        if self._pattern_regex_all\n+                        or any(\n+                            os.path.join(dirpath, filename).endswith(extension)\n+                            for extension in file_extensions\n+                        )\n+                    )\n+                    re_fn = functools.partial(\n+                        get_re_matches,\n+                        [pattern.to_json() for pattern in patterns_regex],\n                     )\n+                    with multiprocessing.Pool(self._jobs) as pool:\n+                        matches = pool.map(re_fn, filepaths)\n+\n+                    outputs.extend(\n+                        PatternMatch(\n+                            {\n+                                \"check_id\": match.pattern[\"id\"],\n+                                \"path\": match.path,\n+                                \"start\": {\"offset\": match.match[\"span\"][0]},\n+                                \"end\": {\"offset\": match.match[\"span\"][1]},\n+                                \"extra\": {\"contents\": match.match[\"contents\"]},\n+                            }\n+                        )\n+                        for file_matches in matches\n+                        for match in file_matches\n+                    )\n+\n+                    # Only consider OPERATORS.REGEX xor OPERATORS.AND for now\n+                    continue", "originalCommit": "7ec56abd3dfd1cc04a53a10b867c43feeb3a73fc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2OTI2MA==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r424769260", "bodyText": "Also need to move this to a diff version since 0.7.0 was cut", "author": "brendongo", "createdAt": "2020-05-13T22:34:40Z", "path": "CHANGELOG.md", "diffHunk": "@@ -8,7 +8,10 @@ This project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html\n - `--exclude`, `--include`, `--exclude-dir`, and `--include-dir` flags\n   for targeting specific paths with command line options.\n   The behavior of these flags mimics `grep`'s behavior.\n-- A `--sarif` flag to receive output formatted according to the\n+- `pattern-regex` functionality - see docs for more information.", "originalCommit": "7ec56abd3dfd1cc04a53a10b867c43feeb3a73fc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4MDg1NA==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r424780854", "bodyText": "I don't think we should add this", "author": "DrewDennison", "createdAt": "2020-05-13T23:07:15Z", "path": "semgrep/semgrep/cli.py", "diffHunk": "@@ -136,6 +136,14 @@ def cli() -> None:\n             \"to the number of CPUs on the system.\"\n         ),\n     )\n+    config.add_argument(\n+        \"--pattern-regex-all\",", "originalCommit": "7ec56abd3dfd1cc04a53a10b867c43feeb3a73fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4NDI0MQ==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r424784241", "bodyText": "Yeah, I'm also confused about this I guess. What's the use-case?", "author": "ievans", "createdAt": "2020-05-13T23:17:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4MDg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE4ODA2NA==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r425188064", "bodyText": "This was a request from @clintgibler. His use case is running the regex over all files, or at least not just the file extensions associated with the language. E.g. he wants to search a Gemfile or package.json via a semgrep rule for things like brakeman or express.\nI'm not convinced that semgrep is the best avenue for this vs. a simple grep or parsing a JSON file directly. The argument being that we could now use semgrep more heavily for code inventory type things, or as a stop-gap solution transitioning from other tools using regex's.", "author": "mschwager", "createdAt": "2020-05-14T14:37:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4MDg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0OTQyMw==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r425849423", "bodyText": "Removed!", "author": "mschwager", "createdAt": "2020-05-15T14:42:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4MDg1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4NDQzMQ==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r424784431", "bodyText": "@aryx note the semi-coupling. @ulziibay could we automatically generate this mapping from the work you did in semgrep-core?", "author": "ievans", "createdAt": "2020-05-13T23:18:24Z", "path": "semgrep/semgrep/constants.py", "diffHunk": "@@ -13,6 +13,13 @@\n DEFAULT_CONFIG_FOLDER = f\".{DEFAULT_SEMGREP_CONFIG_NAME}\"\n \n YML_EXTENSIONS = {\".yml\", \".yaml\"}\n+LANGUAGE_EXTENSIONS = {", "originalCommit": "7ec56abd3dfd1cc04a53a10b867c43feeb3a73fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4NjkxMA==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r424786910", "bodyText": "@ievans were we talking about making language field optional? Would be nice to remove from the list of required fields and remove the extension hard-coding in semgrep-core", "author": "DrewDennison", "createdAt": "2020-05-13T23:26:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4NDQzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0ODcwMA==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r425848700", "bodyText": "pattern-regex is now operating on all target files and makes use of include/exclude. It's now also being composed with other patterns, so no need for language extension checks \ud83d\udc4d", "author": "mschwager", "createdAt": "2020-05-15T14:41:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4NDQzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2MjgwOA==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r425462808", "bodyText": "Update this, this is now possible.", "author": "mschwager", "createdAt": "2020-05-14T22:19:39Z", "path": "docs/configuration-files.md", "diffHunk": "@@ -82,12 +83,14 @@ All required fields must be present at the top-level of a rule. I.e. immediately\n | `id` | `string` | Unique, descriptive identifier . e.g. `no-unused-variable`. |\n | `message` | `string` | Message highlighting why this rule fired and how to remediate the issue. |\n | `severity` | `string` | One of: `WARNING`, `ERROR`. |\n-| `languages` | `array` | Any of: `python`, `javascript`, or `go`. |\n+| `languages` | `array` | Any of: `c`, `go`, `java`, `javascript`, or `python`. |\n | [`pattern`](configuration-files.md#pattern)_\\*_ | `string` | Find code matching this expression. |\n | [`patterns`](configuration-files.md#patterns)_\\*_ | `array` | Logical AND of multiple patterns. |\n | [`pattern-either`](configuration-files.md#pattern-either)_\\*_ | `array` | Logical OR of multiple patterns. |\n+| [`pattern-regex`](configuration-files.md#pattern-regex)_\\*\u2020_ | `string` | Search files for [Python `re`](https://docs.python.org/3/library/re.html) compatible expressions. |\n \n-_\\* Only one of `pattern`, `patterns`, or `pattern-either` is required._\n+* _\\* Only one of `pattern`, `patterns`, `pattern-either`, or `pattern-regex` is required._\n+* _\u2020 The `pattern-regex` field may not be combined with other patterns._", "originalCommit": "021cf02165323c35076f69f739ae74043c9a48a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2MzcxMQ==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r425463711", "bodyText": "Remove this check, contents is no longer used.", "author": "mschwager", "createdAt": "2020-05-14T22:21:59Z", "path": "semgrep/semgrep/output.py", "diffHunk": "@@ -92,6 +98,9 @@ def build_normal_output(\n                     severity_prepend = f\"{severity} \"\n             yield f\"{severity_prepend}{YELLOW_COLOR}rule:{check_id}: {message}{RESET_COLOR}\"\n \n+        if extra.get(\"contents\"):", "originalCommit": "021cf02165323c35076f69f739ae74043c9a48a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0246bb31f709ba6605a58d410ed85f165933a2d8", "url": "https://github.com/returntocorp/semgrep/commit/0246bb31f709ba6605a58d410ed85f165933a2d8", "message": "Fix #629, add pattern-regex functionality", "committedDate": "2020-05-15T14:04:44Z", "type": "commit"}, {"oid": "1fc2c47943c9f96f3661fa53dfd9a88916a4dcbd", "url": "https://github.com/returntocorp/semgrep/commit/1fc2c47943c9f96f3661fa53dfd9a88916a4dcbd", "message": "Add --pattern-regex-all flag to consider all files during regex search", "committedDate": "2020-05-15T14:05:14Z", "type": "commit"}, {"oid": "e19cac70b0e253fdb76e041e3fbd6c6051ec2d6e", "url": "https://github.com/returntocorp/semgrep/commit/e19cac70b0e253fdb76e041e3fbd6c6051ec2d6e", "message": "Appease tests", "committedDate": "2020-05-15T14:06:59Z", "type": "commit"}, {"oid": "aaa722d98357886ef392fdc1de143600bd548145", "url": "https://github.com/returntocorp/semgrep/commit/aaa722d98357886ef392fdc1de143600bd548145", "message": "Utilize include/exclude functionality to avoid using file extensions", "committedDate": "2020-05-15T14:06:59Z", "type": "commit"}, {"oid": "7f9856b80b09fe1ba3d00b6756f8423926036050", "url": "https://github.com/returntocorp/semgrep/commit/7f9856b80b09fe1ba3d00b6756f8423926036050", "message": "Address last pieces of feedback", "committedDate": "2020-05-15T14:22:34Z", "type": "commit"}, {"oid": "7f9856b80b09fe1ba3d00b6756f8423926036050", "url": "https://github.com/returntocorp/semgrep/commit/7f9856b80b09fe1ba3d00b6756f8423926036050", "message": "Address last pieces of feedback", "committedDate": "2020-05-15T14:22:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgzODMzMw==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r425838333", "bodyText": "Mypy was complaining about this: semgrep/semgrep/constants.py:21: error: unused 'type: ignore' comment. Not sure what the issue is.", "author": "mschwager", "createdAt": "2020-05-15T14:25:14Z", "path": "semgrep/semgrep/constants.py", "diffHunk": "@@ -18,7 +18,7 @@\n YML_EXTENSIONS = {\".yml\", \".yaml\"}\n \n try:\n-    from semgrep.version import version  # type: ignore\n+    from semgrep.version import version", "originalCommit": "7f9856b80b09fe1ba3d00b6756f8423926036050", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0OTA0Ng==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r425849046", "bodyText": "Added this back in to fix CI, but it appears there's a mypy discrepancy between CI and local dev.", "author": "mschwager", "createdAt": "2020-05-15T14:41:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgzODMzMw=="}], "type": "inlineReview"}, {"oid": "faac26b8cca5ad9c9627bb5cb21584a4e8dc151f", "url": "https://github.com/returntocorp/semgrep/commit/faac26b8cca5ad9c9627bb5cb21584a4e8dc151f", "message": "Fixup CHANGELOG", "committedDate": "2020-05-15T14:25:50Z", "type": "commit"}, {"oid": "e4e89dcbe40830bfb8d5a8e5341e5587824e1770", "url": "https://github.com/returntocorp/semgrep/commit/e4e89dcbe40830bfb8d5a8e5341e5587824e1770", "message": "Add type ignore back in", "committedDate": "2020-05-15T14:33:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4MTM0MQ==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r425881341", "bodyText": "Just FYI re. fnmatch if you haven't seen it before (not sure if it uses the same syntax as our include / exclude).", "author": "nbrahms", "createdAt": "2020-05-15T15:31:35Z", "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -26,10 +29,55 @@\n from semgrep.semgrep_types import OPERATORS\n from semgrep.util import debug_print\n from semgrep.util import INVALID_PATTERN_EXIT_CODE\n+from semgrep.util import partition\n from semgrep.util import print_error\n from semgrep.util import print_error_exit\n \n \n+def get_re_matches(patterns: Dict, path: Path) -> List[PatternMatch]:\n+    contents = path.read_text()\n+\n+    return [\n+        PatternMatch(\n+            {\n+                \"check_id\": pattern[\"id\"],\n+                \"path\": str(path),\n+                \"start\": {\"offset\": match.start()},\n+                \"end\": {\"offset\": match.end()},\n+                \"extra\": {\"lines\": [contents[match.start() : match.end()]]},\n+            }\n+        )\n+        for pattern in patterns\n+        for match in re.finditer(pattern[\"pattern\"], contents)\n+    ]\n+\n+\n+def get_target_files(\n+    targets: List[Path], exclude: List[str], include: List[str]\n+) -> List[Path]:\n+    if not include:\n+        # Default to all files\n+        include = [\"*\"]\n+\n+    filepaths = [\n+        target\n+        for target in targets\n+        if target.is_file()\n+        and any(target.match(i) for i in include)", "originalCommit": "e4e89dcbe40830bfb8d5a8e5341e5587824e1770", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg5NjY1MA==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r425896650", "bodyText": "Looks like they are similar, but not the same:\n\nsemgrep-core include/exclude: https://dune.readthedocs.io/en/stable/concepts.html#glob\nsemgrep include/exclude: https://docs.python.org/3/library/fnmatch.html\n\nFrom what I can tell, semgrep-core globbing looks like a superset of fnmatch's functionality. The Python glob module seems closer to the OCaml version, although still not exactly the same. The rglob call uses glob under the hood, so our targets are generated similarly to the OCaml version, but include/exclude currently operates via fnmatch as you mentioned, so there's some divergence from the OCaml version.\nProbably not worth our time to completely unify the behaviors because 1.) I imagine 95% of include/exclude will be something like *.py or *.js, which OCaml glob handles the same as fnmatch, and 2.) we'd likely have to re-implement the OCaml glob code to completely replicate it's behavior - I can't find any standard lib modules that do so.\nThoughts?", "author": "mschwager", "createdAt": "2020-05-15T15:57:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4MTM0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0MjM1Mg==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r425942352", "bodyText": "Probably not worth our time to completely unify the behaviors because 1.) I imagine 95% of include/exclude will be something like *.py or *.js\n\nYeah we can fix once we have some idea of what people's use cases are and adjust from there", "author": "brendongo", "createdAt": "2020-05-15T17:20:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4MTM0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4MTc2OQ==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r425881769", "bodyText": "@brendongo At some point we should break this block up into subfunctions", "author": "nbrahms", "createdAt": "2020-05-15T15:32:21Z", "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -159,12 +207,33 @@ def _run_rules(\n             for language, all_patterns_for_language in self._group_patterns_by_language(\n                 rules\n             ).items():\n-                with tempfile.NamedTemporaryFile(\"w\") as fout:\n-                    # very important not to sort keys here\n-                    patterns_json = [p.to_json() for p in all_patterns_for_language]\n-                    yaml_as_str = yaml.safe_dump(\n-                        {\"rules\": patterns_json}, sort_keys=False\n+                # semgrep-core doesn't know about OPERATORS.REGEX - this is", "originalCommit": "e4e89dcbe40830bfb8d5a8e5341e5587824e1770", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4MzA5MQ==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r425883091", "bodyText": "Yet another reason I need to build that iterables library...", "author": "nbrahms", "createdAt": "2020-05-15T15:34:33Z", "path": "semgrep/semgrep/util.py", "diffHunk": "@@ -64,3 +68,9 @@ def set_flags(debug: bool, quiet: bool) -> None:\n     if quiet:\n         QUIET = True\n         debug_print(\"QUIET is on\")\n+\n+\n+def partition(pred: Callable, iterable: Iterable) -> Tuple[List, List]:", "originalCommit": "e4e89dcbe40830bfb8d5a8e5341e5587824e1770", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg5NzQ5Mw==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r425897493", "bodyText": "I have a good starting point! https://docs.python.org/3.7/library/itertools.html#itertools-recipes ;)", "author": "mschwager", "createdAt": "2020-05-15T15:58:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4MzA5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkwMzc4OQ==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r425903789", "bodyText": "IMO there should be a library with roughly this API:\nhttps://www.scala-lang.org/api/current/scala/collection/Iterable.html", "author": "nbrahms", "createdAt": "2020-05-15T16:09:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4MzA5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkxMTQ4Mg==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r425911482", "bodyText": "The closest thing I've seen to this in the Python community is one of these:\n\nfuncy: https://funcy.readthedocs.io/en/stable/\nmore-itertools: https://more-itertools.readthedocs.io/en/stable/\n\nIt'd be nice to just adopt one of these into the standard lib though, especially since they officially document all these itertools recipes. :yuno: just include the functions in the module?", "author": "mschwager", "createdAt": "2020-05-15T16:23:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4MzA5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkzOTM2Mw==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r425939363", "bodyText": "oooh funcy looks nice; basically lodash in python", "author": "nbrahms", "createdAt": "2020-05-15T17:14:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4MzA5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0NTY3Mg==", "url": "https://github.com/returntocorp/semgrep/pull/739#discussion_r425945672", "bodyText": "let me put my vote in for https://boltons.readthedocs.io/en/latest/\n(I use it in semgrep-agent)", "author": "underyx", "createdAt": "2020-05-15T17:27:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4MzA5MQ=="}], "type": "inlineReview"}]}