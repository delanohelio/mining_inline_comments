{"pr_number": 1115, "pr_title": "Initial draft of rule writing methodology, reference rule docs from README and docs/README", "pr_createdAt": "2020-06-23T22:40:14Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/1115", "timeline": [{"oid": "dd542483181d874e76167b7060c0be40aa4a0c13", "url": "https://github.com/returntocorp/semgrep/commit/dd542483181d874e76167b7060c0be40aa4a0c13", "message": "Initial draft of methodology, reference rule docs from README and docs/README", "committedDate": "2020-06-23T22:36:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyNTMxNw==", "url": "https://github.com/returntocorp/semgrep/pull/1115#discussion_r445225317", "bodyText": "I haven't seen these methods of invocation side-by-side before. My first thought was \"why do they need to be run together?\" Could we choose one? It's probably more beneficial to be explicit (a named YAML file) vs. implicit (the default .semgrep.yml)", "author": "minusworld", "createdAt": "2020-06-24T23:26:05Z", "path": "docs/writing_rules/README.md", "diffHunk": "@@ -0,0 +1,272 @@\n+# Writing Semgrep Rules\n+\n+This page describes the thought process behind writing a new Semgrep rule and\n+gives a methodology for doing so effectively.\n+\n+These docs focus on the process and solving example problems. For the\n+authoritative, detailed docs on:\n+* The power of Semgrep patterns, [see here](../pattern-features.md).\n+* YAML configuration options like `pattern-either`, `pattern-inside`, and more,\n+  [see here](../configuration-files.md).\n+\n+> **For walkthrough examples of writing rules, see [these docs](examples.md), or an interactive, example-based tutorial here: https://semgrep.live/learn.**\n+\n+## A Rule Writing Methodology\n+\n+There's no one right way or process for writing a Semgrep rule, do what works for you.\n+\n+The following outlines a process we've found effective. At a high level, it's:\n+1. Brainstorm what you want to find\n+1. Determine how what you want to find concretely looks like in code\n+1. Create a sample source file with example code snippets you'd like to find,\n+   and write an initial Semgrep rule that matches it\n+1. Test your Semgrep rule and refine it by first running it on one real code\n+   repository, then across many\n+1. After you're happy with your rule's performance, integrate it into your\n+   continuous integration (CI) sytems so that it's run on every pull request to\n+   ensure your code maintains a high quality bar.\n+\n+### 1. Brainstorm What You Want to Find\n+\n+First, determine what to look for.\n+\n+It could be something very concrete and demand-driven, like:\n+\n+#### a. Finding other instances of known vulnerable code patterns (\"variant analysis\"):\n+> Our pen test report / bug bounty program just reported an issue `<like this>`. I\n+> want to find all other similar code across all\n+> of my repos, because it might be vulnerable too.\n+\n+#### b. Finding business logic bugs\n+\n+> In my company, I know that our internal API method `foo()` must always be\n+> called a certain way. For example, one of the arguments *must* or *must not*\n+> be a hardcoded string, a certain flag or option should be set, etc. I want to\n+> find all the code locations where this implicit calling pattern is *not* being\n+> followed.\n+\n+> In my applications, I know that one particular API call, `bar()` must *always*\n+> be called before another, `baz()`, or else it's a bug. I want to find all the\n+> places this calling convention isn't followed.\n+\n+Or, your search could start a bit more abstract and exploratory, where you don't know exactly what you're looking for, like:\n+\n+#### c. Auditing dangerous function use\n+> I know `eval()` is a potentially dangerous function, I want to see where it's\n+> used, and if so, how.\n+\n+#### d. Auditing API or technology uses\n+> My company has a history of security issues with JWTs (or `<technology>`),\n+> let's find all of the code that touches JWT logic so we can audit it.\n+\n+#### e. Reviewing authentication or authorization logic\n+> My company uses the `acme_corp_auth` library for all authentication or\n+> authorization logic. I want to review everywhere it's called to see if how the\n+> library is used makes sense, ensure that trust boundaries are enforced,\n+> confirm that enforcement is done consistently, and locate any places that are\n+> *missing* authn/authz.\n+\n+These are a few examples, but in summary, the first step in writing a new rule\n+is determining:\n+\n+> What is an interesting aspect of my code that I want to find?\n+\n+### 2. Determine What That Concretely Looks like in Code\n+\n+After you have a rough idea of what you want to find, the next step is to\n+identify what that concretely looks like in code. The more specific the better.\n+\n+What does \"*good*\" or \"*safe*\" code look like?\n+\n+For example, after reading some internal code and reading API docs, you find that for the Python `subprocess` module, `call()` and other methods are more dangerous when passed the argument `shell=True`, so you decide:\n+\n+> I want to find all calls to `subprocess.call()` in which one of the keyword arguments is `shell=True`.\n+\n+Or perhaps you're auditing Java Spring applications and you want to find all routes that do not perform authorization checks. You review some example routes in your internal repos and see code like this:\n+\n+```java\n+@Controller\n+@RequestMapping(\"/api/\")\n+public class AcmeController {\n+\n+    @RequestMapping(method = RequestMethod.POST)\n+    @Authorize(Permissions.ADMIN)\n+    @ResponseBody\n+    public ResponseEntity<Map<String, Object>> createProfile() {\n+        return new ResponseEntity<>(result, HttpStatus.OK);\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET)\n+    @ResponseBody\n+    public ResponseEntity<Map<String, Object>> showResults() {\n+        return new ResponseEntity<>(result, HttpStatus.OK);\n+    }\n+}\n+```\n+\n+So you determine:\n+\n+> I want to find all routes, which are methods with the the `@RequestMapping` annotation, that **do not** also have an `@Authorize` annotation.\n+\n+The key at this stage is to go from an *idea* to one or more *concrete example code snippets* that demonstrate secure and/or insecure examples of what you're looking for.\n+\n+### 3. Create a Test File, Write an Initial Rule\n+\n+Now the fun part begins!\n+\n+Create a YAML file in your current working directory, for example, the project root of a repo you intend to scan. You can name the YAML file whatever you want, but Semgrep will look for rules defined in a file named `.semgrep.yml` by default.\n+\n+```yaml\n+rules:\n+  - id: my-pattern-name\n+    pattern: |\n+      TODO\n+    message: \"Some message to display to the user\"\n+    languages: [python]\n+    severity: ERROR\n+```\n+\n+Create an example test file, containing snippets of code that **should** and **should not** match.\n+\n+Fill out the `TODO` in the above YAML file with a Semgrep pattern, using various [pattern features](../pattern-features.md) and [additional pattern clauses](../configuration-files.md) as needed.\n+\n+For additional help, see [these docs](examples.md) for walkthrough rule writing examples, or an interactive, example-based tutorial here: https://semgrep.live/learn.\n+\n+Check that the rule you're writing matches the example file by running:\n+\n+```bash\n+$ semgrep example_file.py", "originalCommit": "dd542483181d874e76167b7060c0be40aa4a0c13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc3MzY4Mg==", "url": "https://github.com/returntocorp/semgrep/pull/1115#discussion_r445773682", "bodyText": "Hm this is a good point, an explicit named YAML file is probably better. Depends what we want to the standard AppSec rule authorship flow to be - is it a per repo directory of rules? Is it a company-specific semgrep-rules repo? Worth discussing, but I'd maybe lean towards the latter?", "author": "clintgibler", "createdAt": "2020-06-25T18:57:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyNTMxNw=="}], "type": "inlineReview"}, {"oid": "fa736552f5d299d403b8c19811301ecca04a5be0", "url": "https://github.com/returntocorp/semgrep/commit/fa736552f5d299d403b8c19811301ecca04a5be0", "message": "merge", "committedDate": "2020-06-25T19:52:38Z", "type": "commit"}]}