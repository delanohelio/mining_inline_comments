{"pr_number": 951, "pr_title": "On the way to beautiful errors", "pr_createdAt": "2020-06-09T20:07:07Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/951", "timeline": [{"oid": "3ba60c1fc6b269c1a15a6622426d513b709e1deb", "url": "https://github.com/returntocorp/semgrep/commit/3ba60c1fc6b269c1a15a6622426d513b709e1deb", "message": "On the way to beautiful errors", "committedDate": "2020-06-09T20:10:41Z", "type": "forcePushed"}, {"oid": "32ccaec61365a89442d96e6651180118c5f0b87b", "url": "https://github.com/returntocorp/semgrep/commit/32ccaec61365a89442d96e6651180118c5f0b87b", "message": "On the way to beautiful errors", "committedDate": "2020-06-09T21:58:25Z", "type": "forcePushed"}, {"oid": "57c10d5c483c01d81ed2135081952867cc5ec79d", "url": "https://github.com/returntocorp/semgrep/commit/57c10d5c483c01d81ed2135081952867cc5ec79d", "message": "On the way to beautiful errors", "committedDate": "2020-06-10T00:45:27Z", "type": "commit"}, {"oid": "57c10d5c483c01d81ed2135081952867cc5ec79d", "url": "https://github.com/returntocorp/semgrep/commit/57c10d5c483c01d81ed2135081952867cc5ec79d", "message": "On the way to beautiful errors", "committedDate": "2020-06-10T00:45:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxNTQ1Mg==", "url": "https://github.com/returntocorp/semgrep/pull/951#discussion_r438315452", "bodyText": "Will the color codes exist if a user is piping output to a file?", "author": "brendongo", "createdAt": "2020-06-10T18:07:41Z", "path": "semgrep/tests/e2e/snapshots/test_rule_parser/test_rule_parser__failure__error_messages/bad2/error.txt", "diffHunk": "@@ -1,2 +1,12 @@\n-rules/syntax/bad2.yaml has an invalid top-level rule key {'pattern-inside'} at rule id eqeq-is-bad, can only have: ['equivalences', 'fix', 'id', 'languages', 'message', 'metadata', 'paths', 'pattern', 'pattern-either', 'pattern-regex', 'patterns', 'severity']\n+\u001b[31merror\u001b[39m: extra top-level key\n+  --> rules/syntax/bad2.yaml:3\n+\u001b[94m1 | \u001b[39mrules:", "originalCommit": "57c10d5c483c01d81ed2135081952867cc5ec79d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyMjA0Mw==", "url": "https://github.com/returntocorp/semgrep/pull/951#discussion_r438322043", "bodyText": "yeah, although this isn't a change how things currently behave se -- In the original version of this diff I stripped all the colors out if it the input was a tty. I can re-add it if you want.", "author": "rcoh", "createdAt": "2020-06-10T18:19:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxNTQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0Njk3NA==", "url": "https://github.com/returntocorp/semgrep/pull/951#discussion_r438346974", "bodyText": "I think we should be consistent. I remember a previous PR stripping out color codes when outputing to a file or was that just an early version of this PR?", "author": "brendongo", "createdAt": "2020-06-10T19:05:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxNTQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5ODI0Ng==", "url": "https://github.com/returntocorp/semgrep/pull/951#discussion_r438398246", "bodyText": "I've readded output stripping & test with and without color.", "author": "rcoh", "createdAt": "2020-06-10T20:46:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxNTQ1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxNjA5OQ==", "url": "https://github.com/returntocorp/semgrep/pull/951#discussion_r438316099", "bodyText": "Can you add a comment/modify the message to mention what top level key is missing", "author": "brendongo", "createdAt": "2020-06-10T18:08:49Z", "path": "semgrep/tests/e2e/rules/syntax/missing-toplevel.yaml", "diffHunk": "@@ -0,0 +1,14 @@\n+rule:", "originalCommit": "57c10d5c483c01d81ed2135081952867cc5ec79d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxNjMwNA==", "url": "https://github.com/returntocorp/semgrep/pull/951#discussion_r438316304", "bodyText": "Can you add a comment/modify message field to mention what field is missing", "author": "brendongo", "createdAt": "2020-06-10T18:09:12Z", "path": "semgrep/tests/e2e/rules/syntax/missing-field.yaml", "diffHunk": "@@ -0,0 +1,13 @@\n+rules:\n+- id: flask-secure-set-cookie\n+  languages: [python]\n+  patterns:\n+    - pattern-not: |\n+        flask.response.set_cookie(..., httponly=True, secure=True,...)\n+    - pattern: |\n+        flask.response.set_cookie(....)\n+  message: |", "originalCommit": "57c10d5c483c01d81ed2135081952867cc5ec79d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxNzk4NA==", "url": "https://github.com/returntocorp/semgrep/pull/951#discussion_r438317984", "bodyText": "Can you create Issues for TODOs instead of having an inline todo", "author": "brendongo", "createdAt": "2020-06-10T18:12:04Z", "path": "semgrep/semgrep/semgrep_main.py", "diffHunk": "@@ -43,14 +45,27 @@ def validate_single_rule(config_id: str, rule_yaml: YamlTree) -> Optional[Rule]:\n     rule_keys = set(rule.keys())\n     if not rule_keys.issuperset(YAML_MUST_HAVE_KEYS):\n         missing_keys = YAML_MUST_HAVE_KEYS - rule_keys\n+        # TODO: return the error messages so we can emit nice JSON errors", "originalCommit": "57c10d5c483c01d81ed2135081952867cc5ec79d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxOTg4MQ==", "url": "https://github.com/returntocorp/semgrep/pull/951#discussion_r438319881", "bodyText": "Better Named SemgrepRuleFormatError or something more specific. Current name implies it can be any error with context but it only applies to rule format errors.", "author": "brendongo", "createdAt": "2020-06-10T18:15:29Z", "path": "semgrep/semgrep/error.py", "diffHunk": "@@ -32,3 +44,108 @@ class InvalidPatternNameError(SemgrepError):\n \n class UnknownOperatorError(SemgrepError):\n     pass\n+\n+\n+class ErrorWithContext(SemgrepError):", "originalCommit": "57c10d5c483c01d81ed2135081952867cc5ec79d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyMjkxNA==", "url": "https://github.com/returntocorp/semgrep/pull/951#discussion_r438322914", "bodyText": "I'm also going to use the same error to display errors from semgrep-core in the code", "author": "rcoh", "createdAt": "2020-06-10T18:21:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxOTg4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyMzA3Nw==", "url": "https://github.com/returntocorp/semgrep/pull/951#discussion_r438323077", "bodyText": "maybe ErrorWithSpan?", "author": "rcoh", "createdAt": "2020-06-10T18:21:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxOTg4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0MjYwMg==", "url": "https://github.com/returntocorp/semgrep/pull/951#discussion_r438342602", "bodyText": "what kind of errors from semgrep-core?", "author": "brendongo", "createdAt": "2020-06-10T18:57:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxOTg4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0NzEyNA==", "url": "https://github.com/returntocorp/semgrep/pull/951#discussion_r438347124", "bodyText": "invalid patterns & parse errors on ASTs", "author": "rcoh", "createdAt": "2020-06-10T19:05:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxOTg4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyMjEzMw==", "url": "https://github.com/returntocorp/semgrep/pull/951#discussion_r438322133", "bodyText": "Top level comment on what each arg means would be helpful", "author": "brendongo", "createdAt": "2020-06-10T18:19:37Z", "path": "semgrep/semgrep/error.py", "diffHunk": "@@ -32,3 +44,108 @@ class InvalidPatternNameError(SemgrepError):\n \n class UnknownOperatorError(SemgrepError):\n     pass\n+\n+\n+class ErrorWithContext(SemgrepError):\n+    \"\"\"\n+    Error which will print context from the Span. You should provide the most specific span possible,\n+    eg. if the error is an invalid key, provide exactly the span for that key. You can then expand what's printed\n+    with span.with_context(...)\n+    \"\"\"\n+\n+    def __init__(\n+        self,\n+        short_msg: str,\n+        long_msg: Optional[str],\n+        level: str,", "originalCommit": "57c10d5c483c01d81ed2135081952867cc5ec79d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "78a6968edac44c77904492cfc442794a8182cc9c", "url": "https://github.com/returntocorp/semgrep/commit/78a6968edac44c77904492cfc442794a8182cc9c", "message": "Assorted Improvements\n\n- Betters docs for ErrorWithSpan\n- Suppress color by default when the output is not a tty but enable it with `--force-color`\n- Add snapshot testing with and without color", "committedDate": "2020-06-10T18:45:16Z", "type": "commit"}, {"oid": "92c0fd6aa4841cd0bf063d032cef687091b18431", "url": "https://github.com/returntocorp/semgrep/commit/92c0fd6aa4841cd0bf063d032cef687091b18431", "message": "More cleanups\n\n- Add inline comments\n- Delete unused emit method\n- Change `emit_str` to __repr__ which is hopefully clearer", "committedDate": "2020-06-10T19:35:58Z", "type": "commit"}, {"oid": "c29fcb59cacf9b1198e79cb4d5b914813ea69861", "url": "https://github.com/returntocorp/semgrep/commit/c29fcb59cacf9b1198e79cb4d5b914813ea69861", "message": "Add lots more comments, change Positions to being 1-indexed", "committedDate": "2020-06-10T20:33:06Z", "type": "commit"}, {"oid": "c29fcb59cacf9b1198e79cb4d5b914813ea69861", "url": "https://github.com/returntocorp/semgrep/commit/c29fcb59cacf9b1198e79cb4d5b914813ea69861", "message": "Add lots more comments, change Positions to being 1-indexed", "committedDate": "2020-06-10T20:33:06Z", "type": "forcePushed"}]}