{"pr_number": 330, "pr_title": "Fix python interpolated strs", "pr_createdAt": "2020-03-25T03:55:08Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/330", "timeline": [{"oid": "7b479113fc61aef73d719e744b188f94d1a779a0", "url": "https://github.com/returntocorp/semgrep/commit/7b479113fc61aef73d719e744b188f94d1a779a0", "message": "Fix python interpolated strs", "committedDate": "2020-03-25T03:55:48Z", "type": "forcePushed"}, {"oid": "f5cb6b6bcfe908ef99a37dab71e6280d79c9424e", "url": "https://github.com/returntocorp/semgrep/commit/f5cb6b6bcfe908ef99a37dab71e6280d79c9424e", "message": "Fix python interpolated strs", "committedDate": "2020-03-25T16:35:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5OTQ1Ng==", "url": "https://github.com/returntocorp/semgrep/pull/330#discussion_r397999456", "bodyText": "see my recent eval func in normalize_generic.ml", "author": "aryx", "createdAt": "2020-03-25T16:36:08Z", "path": "sgrep/lib/subast_generic.ml", "diffHunk": "@@ -47,6 +46,14 @@ let subexprs_of_expr e =\n   | Container (_, xs) \n     -> unbracket xs\n \n+  | Call(IdSpecial (_, e), args) ->", "originalCommit": "7b479113fc61aef73d719e744b188f94d1a779a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0c3f87f82c183e9579ba25808dcc04cf3e1f221c", "url": "https://github.com/returntocorp/semgrep/commit/0c3f87f82c183e9579ba25808dcc04cf3e1f221c", "message": "update to handle multiple arguments", "committedDate": "2020-03-25T18:07:40Z", "type": "commit"}, {"oid": "0c3f87f82c183e9579ba25808dcc04cf3e1f221c", "url": "https://github.com/returntocorp/semgrep/commit/0c3f87f82c183e9579ba25808dcc04cf3e1f221c", "message": "update to handle multiple arguments", "committedDate": "2020-03-25T18:07:40Z", "type": "forcePushed"}, {"oid": "00a5d510dfc324e7e9d5979c8f540ee58c41eb11", "url": "https://github.com/returntocorp/semgrep/commit/00a5d510dfc324e7e9d5979c8f540ee58c41eb11", "message": "add colon for error", "committedDate": "2020-03-25T18:12:11Z", "type": "commit"}, {"oid": "1f19df34157dd65814f713fd5fb4467c25cf6539", "url": "https://github.com/returntocorp/semgrep/commit/1f19df34157dd65814f713fd5fb4467c25cf6539", "message": "handle empty list", "committedDate": "2020-03-25T18:25:28Z", "type": "commit"}, {"oid": "bd2410433f260c377fe2b01882c02188c2bf8900", "url": "https://github.com/returntocorp/semgrep/commit/bd2410433f260c377fe2b01882c02188c2bf8900", "message": "add more test", "committedDate": "2020-03-25T18:49:34Z", "type": "commit"}, {"oid": "c5ce3bd1867010d270f0daa697fc58dc2854ce6c", "url": "https://github.com/returntocorp/semgrep/commit/c5ce3bd1867010d270f0daa697fc58dc2854ce6c", "message": "add the failing go test", "committedDate": "2020-03-25T20:06:40Z", "type": "commit"}, {"oid": "c5ce3bd1867010d270f0daa697fc58dc2854ce6c", "url": "https://github.com/returntocorp/semgrep/commit/c5ce3bd1867010d270f0daa697fc58dc2854ce6c", "message": "add the failing go test", "committedDate": "2020-03-25T20:06:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0NzkxNw==", "url": "https://github.com/returntocorp/semgrep/pull/330#discussion_r398147917", "bodyText": "This is wrong.\nThe code should actually make sure all the arguments are an Arg that evaluates to a Some String.\nIf any of the argument is not a string, then the whole thing should fail, this is why\nthere is the | _ -> None case in my code, because if you look at the caller, if it's a None then the match\nwill call fail ()", "author": "aryx", "createdAt": "2020-03-25T20:28:37Z", "path": "sgrep/lib/normalize_generic.ml", "diffHunk": "@@ -71,11 +71,21 @@ let rec eval x =\n   | L x -> Some x\n   | Id (_, { id_const_literal = {contents = Some x}; _}) -> Some x\n \n-  | Call(IdSpecial((ArithOp(Plus) | Concat), _), [Arg e1; Arg e2]) ->\n-    (match eval e1, eval e2 with\n-    | Some (String (s1, t1)), Some (String (s2, _t2)) ->\n-          Some (String (s1 ^ s2, t1))\n-    | _ -> None\n+  | Call(IdSpecial((ArithOp(Plus) | Concat), _), args) ->\n+    let literals = args |> Common.map_filter (fun (arg) ->", "originalCommit": "c5ce3bd1867010d270f0daa697fc58dc2854ce6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0ODkyMA==", "url": "https://github.com/returntocorp/semgrep/pull/330#discussion_r398148920", "bodyText": "For example $F(\"...\") should not match foo(\"foo\" + bar) (assuming bar is not a constant).\nbut with your code it will.", "author": "aryx", "createdAt": "2020-03-25T20:30:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0NzkxNw=="}], "type": "inlineReview"}, {"oid": "a877f9e36b44e3950e4835ffa0228f68355baaeb", "url": "https://github.com/returntocorp/semgrep/commit/a877f9e36b44e3950e4835ffa0228f68355baaeb", "message": "apply only when all are strings", "committedDate": "2020-03-25T20:44:00Z", "type": "commit"}, {"oid": "4eb0be9faf8fc25df872aa2cdfd9ed5760752593", "url": "https://github.com/returntocorp/semgrep/commit/4eb0be9faf8fc25df872aa2cdfd9ed5760752593", "message": "add false positive test", "committedDate": "2020-03-25T20:52:22Z", "type": "commit"}]}