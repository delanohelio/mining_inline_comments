{"pr_number": 571, "pr_title": "Add regression testing infrastructure", "pr_createdAt": "2020-04-24T01:45:53Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/571", "timeline": [{"oid": "6045b9a700f75ca9f3c53a155d1d3528d065075d", "url": "https://github.com/returntocorp/semgrep/commit/6045b9a700f75ca9f3c53a155d1d3528d065075d", "message": "Add regression testing infrastructure\n\nCan now specify rules to run on a given repo at a given commit\nand will make sure --json output of semgrep does not differ\nfrom some expected output", "committedDate": "2020-04-24T01:44:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcxNjU1NA==", "url": "https://github.com/returntocorp/semgrep/pull/571#discussion_r414716554", "bodyText": "@brendongo why is this necessary?", "author": "ievans", "createdAt": "2020-04-24T16:46:00Z", "path": "semgrep/tests/acceptance/qa.py", "diffHunk": "@@ -0,0 +1,113 @@\n+import json\n+import os\n+import re\n+import shutil\n+import subprocess\n+import sys\n+import tempfile\n+from contextlib import contextmanager\n+from pathlib import Path\n+from typing import Any\n+from typing import Callable\n+from typing import Iterator\n+from typing import List\n+from typing import Mapping\n+from typing import Optional\n+\n+import yaml\n+\n+\n+@contextmanager\n+def git_checkout(url: str, commit_hash: str) -> Iterator[str]:\n+    \"\"\"\n+        Clones URL into destination and checks out commit_hash\n+\n+        Returns name of directory url was cloned into\n+    \"\"\"\n+    with tempfile.TemporaryDirectory() as destination:\n+        print(\"starting clone\")\n+        subprocess.run(\n+            [\"git\", \"clone\", url, destination],\n+            stdout=subprocess.PIPE,\n+            stderr=subprocess.PIPE,\n+            check=True,\n+        )\n+        print(\"done clone\")\n+        subprocess.run(\n+            [\"git\", \"checkout\", commit_hash],\n+            cwd=destination,\n+            stdout=subprocess.PIPE,\n+            stderr=subprocess.PIPE,\n+            check=True,\n+        )\n+        subprocess.run(\n+            [\"git\", \"clean\", \"-xdf\"],", "originalCommit": "6045b9a700f75ca9f3c53a155d1d3528d065075d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4bf6d31627df8b6d859f7eff01306b40f5a16c33", "url": "https://github.com/returntocorp/semgrep/commit/4bf6d31627df8b6d859f7eff01306b40f5a16c33", "message": "fixup! Add regression testing infrastructure", "committedDate": "2020-04-27T08:31:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg0OTQ1Mg==", "url": "https://github.com/returntocorp/semgrep/pull/571#discussion_r416849452", "bodyText": "You should add all our supported languages here [java, c, go]", "author": "ievans", "createdAt": "2020-04-28T18:57:28Z", "path": "semgrep/tests/acceptance/rule.yaml", "diffHunk": "@@ -0,0 +1,6 @@\n+rules:\n+  - id: useless-equals\n+    pattern: $X==$X\n+    message: \"Useless equals\"\n+    languages: [python, javascript]", "originalCommit": "4bf6d31627df8b6d859f7eff01306b40f5a16c33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzNTg1NQ==", "url": "https://github.com/returntocorp/semgrep/pull/571#discussion_r416935855", "bodyText": "I think the canonical test for NaN in Go might be $X != $X.", "author": "nbrahms", "createdAt": "2020-04-28T21:31:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg0OTQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4NDA2MQ==", "url": "https://github.com/returntocorp/semgrep/pull/571#discussion_r416984061", "bodyText": "I think can go in a follow on PR. The given repos are all JS/Python for now.", "author": "brendongo", "createdAt": "2020-04-28T23:27:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg0OTQ1Mg=="}], "type": "inlineReview"}, {"oid": "2cc814316a913eafa51d9f3f16151740945743e1", "url": "https://github.com/returntocorp/semgrep/commit/2cc814316a913eafa51d9f3f16151740945743e1", "message": "Run QA test on PRs", "committedDate": "2020-04-28T20:50:41Z", "type": "commit"}, {"oid": "3a9a77b2fb58a565ed634555d3b2740f5b3baaa5", "url": "https://github.com/returntocorp/semgrep/commit/3a9a77b2fb58a565ed634555d3b2740f5b3baaa5", "message": "fixup! Add regression testing infrastructure", "committedDate": "2020-04-28T23:34:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0NDMzOQ==", "url": "https://github.com/returntocorp/semgrep/pull/571#discussion_r417444339", "bodyText": "Spell check: pattrern", "author": "mschwager", "createdAt": "2020-04-29T16:21:43Z", "path": "semgrep/tests/acceptance/qa.py", "diffHunk": "@@ -0,0 +1,180 @@\n+import json\n+import os\n+import re\n+import shutil\n+import subprocess\n+import sys\n+import tempfile\n+from contextlib import contextmanager\n+from pathlib import Path\n+from typing import Any\n+from typing import Callable\n+from typing import Iterator\n+from typing import List\n+from typing import Mapping\n+from typing import Optional\n+\n+import yaml\n+\n+\n+@contextmanager\n+def git_checkout(url: str, commit_hash: Optional[str] = None) -> Iterator[str]:\n+    \"\"\"\n+        Clones URL into destination\n+\n+        Returns name of directory url was cloned into\n+    \"\"\"\n+    with tempfile.TemporaryDirectory() as destination:\n+        subprocess.run(\n+            [\"git\", \"clone\", \"--depth=1\", url, destination],\n+            stdout=subprocess.PIPE,\n+            stderr=subprocess.PIPE,\n+            check=True,\n+        )\n+        yield destination\n+\n+\n+def run_repo(target: str, rewrite: bool = False) -> None:\n+    \"\"\"\n+    Runs semgrep on github repo with a simple pattrern", "originalCommit": "3a9a77b2fb58a565ed634555d3b2740f5b3baaa5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0NjE4NA==", "url": "https://github.com/returntocorp/semgrep/pull/571#discussion_r417446184", "bodyText": "Does this do anything right now? I assume we'd have to have a __main__ check in qa.py for this do things.", "author": "mschwager", "createdAt": "2020-04-29T16:24:36Z", "path": "semgrep/Makefile", "diffHunk": "@@ -7,3 +7,11 @@ test:\n install:\n \tcp -rv ./build/semgrep.dist/ /usr/local/bin/semgrep-files/\n \tln -sf /usr/local/bin/semgrep-files/semgrep /usr/local/bin/semgrep\n+\n+.PHONY: qa-test\n+qa-test: build\n+\tpytest -s tests/acceptance/qa.py\n+\n+.PHONY: regenerate-tests\n+regenerate-tests:", "originalCommit": "3a9a77b2fb58a565ed634555d3b2740f5b3baaa5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU5NTEwMw==", "url": "https://github.com/returntocorp/semgrep/pull/571#discussion_r417595103", "bodyText": "You're right this is stale. Removing.", "author": "brendongo", "createdAt": "2020-04-29T20:35:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0NjE4NA=="}], "type": "inlineReview"}, {"oid": "b9b3d42ba929b48677e7335e2b148a0dda40a9fc", "url": "https://github.com/returntocorp/semgrep/commit/b9b3d42ba929b48677e7335e2b148a0dda40a9fc", "message": "fixup! Run QA test on PRs", "committedDate": "2020-04-29T20:37:30Z", "type": "commit"}, {"oid": "76f7e5029383a88858454ad4335bf0fd14ef6b7d", "url": "https://github.com/returntocorp/semgrep/commit/76f7e5029383a88858454ad4335bf0fd14ef6b7d", "message": "fixup! Run QA test on PRs", "committedDate": "2020-04-29T20:47:49Z", "type": "commit"}, {"oid": "b60d9c6e8b0b0a6090863f74b6c4d1e3336b091e", "url": "https://github.com/returntocorp/semgrep/commit/b60d9c6e8b0b0a6090863f74b6c4d1e3336b091e", "message": "fixup! Run QA test on PRs", "committedDate": "2020-04-29T20:58:53Z", "type": "commit"}, {"oid": "f12d429b1c1f03fa4cce0a3d41c2aec35d81e616", "url": "https://github.com/returntocorp/semgrep/commit/f12d429b1c1f03fa4cce0a3d41c2aec35d81e616", "message": "fixup! Run QA test on PRs", "committedDate": "2020-04-29T21:24:45Z", "type": "commit"}]}