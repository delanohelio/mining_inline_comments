{"pr_number": 237, "pr_title": "Add less_inheritance test for java, js, go", "pr_createdAt": "2020-03-03T18:47:35Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/237", "timeline": [{"oid": "35b0bd8a1a56f89ba79dffb9d65189e135af19d2", "url": "https://github.com/returntocorp/semgrep/commit/35b0bd8a1a56f89ba79dffb9d65189e135af19d2", "message": "Add less_inheritance test for java, js, go", "committedDate": "2020-03-03T18:45:55Z", "type": "commit"}, {"oid": "2b2eff63a6e44526a2070644515c32a116e9e7c3", "url": "https://github.com/returntocorp/semgrep/commit/2b2eff63a6e44526a2070644515c32a116e9e7c3", "message": "move tests to .TODO", "committedDate": "2020-03-03T20:25:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3NzgxNg==", "url": "https://github.com/returntocorp/semgrep/pull/237#discussion_r387277816", "bodyText": "maybe rename generate_test_matrix.py", "author": "aryx", "createdAt": "2020-03-03T20:34:47Z", "path": "tests/generate.py", "diffHunk": "@@ -0,0 +1,45 @@\n+# /usr/bin/env python3", "originalCommit": "2b2eff63a6e44526a2070644515c32a116e9e7c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3OTQ2Mw==", "url": "https://github.com/returntocorp/semgrep/pull/237#discussion_r387279463", "bodyText": "what does atts mean? And why did you prefix this test with a less? It looks more like a dots_xxx.\nThe spirit of the less_xxx is to say that a pattern can have less details that the concrete file.\nFor example writing the pattern class A { ...} will also match code where the code has the extra detail\nabout inheritnace like class A extends B {}. We do not force the user to write class A extends $X { ...} .", "author": "aryx", "createdAt": "2020-03-03T20:38:17Z", "path": "tests/go/less_atts.sgrep", "diffHunk": "@@ -0,0 +1,3 @@\n+func $F(...) {", "originalCommit": "2b2eff63a6e44526a2070644515c32a116e9e7c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI5MDY2MA==", "url": "https://github.com/returntocorp/semgrep/pull/237#discussion_r387290660", "bodyText": "Move to tests/go/dots_func_attributes.sgrep to clarify!", "author": "ulziibay", "createdAt": "2020-03-03T21:00:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3OTQ2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3OTg4OQ==", "url": "https://github.com/returntocorp/semgrep/pull/237#discussion_r387279889", "bodyText": "Go does not really have inheritance like the other languages. It does not fit in the less_xxx category.\nHowever having dots for fields is a nice test to have, so maybe rename to\ndots_struct_fields.TODO", "author": "aryx", "createdAt": "2020-03-03T20:39:10Z", "path": "tests/go/less_inherits.TODO", "diffHunk": "@@ -0,0 +1,3 @@\n+type struct A {", "originalCommit": "2b2eff63a6e44526a2070644515c32a116e9e7c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI5MDg3OA==", "url": "https://github.com/returntocorp/semgrep/pull/237#discussion_r387290878", "bodyText": "Ok addressed", "author": "ulziibay", "createdAt": "2020-03-03T21:01:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3OTg4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI5MTA0MQ==", "url": "https://github.com/returntocorp/semgrep/pull/237#discussion_r387291041", "bodyText": "Ok addressed", "author": "ulziibay", "createdAt": "2020-03-03T21:01:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3OTg4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4MDQwOA==", "url": "https://github.com/returntocorp/semgrep/pull/237#discussion_r387280408", "bodyText": "No, this should be class A extends B { ...}\nwe do not want class A { .. } to match public class B extends A { }", "author": "aryx", "createdAt": "2020-03-03T20:40:17Z", "path": "tests/java/less_inheritance.java.TODO", "diffHunk": "@@ -0,0 +1,19 @@\n+// ERROR: match\n+public class A {\n+  public static foo() {\n+    return 1;\n+  }\n+}\n+\n+// ERROR: match\n+public class B extends A {", "originalCommit": "2b2eff63a6e44526a2070644515c32a116e9e7c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI5MDcyNA==", "url": "https://github.com/returntocorp/semgrep/pull/237#discussion_r387290724", "bodyText": "ok", "author": "ulziibay", "createdAt": "2020-03-03T21:00:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4MDQwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4MDYxNw==", "url": "https://github.com/returntocorp/semgrep/pull/237#discussion_r387280617", "bodyText": "no, should be class A extends B.", "author": "aryx", "createdAt": "2020-03-03T20:40:45Z", "path": "tests/js/less_inheritance.js.TODO", "diffHunk": "@@ -0,0 +1,24 @@\n+//ERROR:\n+class A {\n+  constructor(name) {\n+    this.name = name;\n+  }\n+\n+  foo() {\n+    return 'foo';\n+  }\n+}\n+\n+//ERROR:\n+class B extends A {", "originalCommit": "2b2eff63a6e44526a2070644515c32a116e9e7c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI5MDc4MA==", "url": "https://github.com/returntocorp/semgrep/pull/237#discussion_r387290780", "bodyText": "addressed", "author": "ulziibay", "createdAt": "2020-03-03T21:01:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4MDYxNw=="}], "type": "inlineReview"}, {"oid": "76e6ff46b565abad47ea89cf4460c67c875b389b", "url": "https://github.com/returntocorp/semgrep/commit/76e6ff46b565abad47ea89cf4460c67c875b389b", "message": "address @aryx comments", "committedDate": "2020-03-03T20:59:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc2ODM5OA==", "url": "https://github.com/returntocorp/semgrep/pull/237#discussion_r387768398", "bodyText": "still don't understand what it has to do with attributes (a.k.a annotations).", "author": "aryx", "createdAt": "2020-03-04T16:06:44Z", "path": "tests/go/dots_attributes.sgrep", "diffHunk": "@@ -0,0 +1,3 @@\n+func $F(...) {", "originalCommit": "76e6ff46b565abad47ea89cf4460c67c875b389b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}