{"pr_number": 1332, "pr_title": "Go Struct Order Fix", "pr_createdAt": "2020-07-22T22:40:03Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/1332", "timeline": [{"oid": "de704d1ada88f4302cf46d6d4c6210d12b8983cc", "url": "https://github.com/returntocorp/semgrep/commit/de704d1ada88f4302cf46d6d4c6210d12b8983cc", "message": "fix to the go struct ordering bug, issue 1173. Added a case to match ellipses on both sides -- this case will match anything, regardless of order. There is an issue where this will match a correct line twice.", "committedDate": "2020-07-22T22:39:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkxMjg0MA==", "url": "https://github.com/returntocorp/semgrep/pull/1332#discussion_r459912840", "bodyText": "We don't have any ocaml coding style with @mjambon yet, but I usually try to avoid to use 'open' and prefer to qualify functions used in other modules because it's harder then when you see just  'foo arg' to see to which module it belongs to. You can use IDEs to help, but it still IMHO makes the code slightly harder to read.\nThere are a few exceptions when it's just annoying to qualify the same module again and again. For example I usually do open AST_generic when I know a module will exclusively use entities defined in this AST.", "author": "aryx", "createdAt": "2020-07-24T08:14:56Z", "path": "semgrep-core/matching/Generic_vs_generic.ml", "diffHunk": "@@ -16,6 +16,7 @@\n  *)\n (*e: pad/r2c copyright *)\n open Common\n+open List", "originalCommit": "de704d1ada88f4302cf46d6d4c6210d12b8983cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI0MDMzMQ==", "url": "https://github.com/returntocorp/semgrep/pull/1332#discussion_r463240331", "bodyText": "fixes issues in pfff together!", "author": "colleend", "createdAt": "2020-07-30T20:04:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkxMjg0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDExNDExNA==", "url": "https://github.com/returntocorp/semgrep/pull/1332#discussion_r460114114", "bodyText": "Is this trying to get the last element in the list?\nIf so, I think you can do List.nth xsa (List.length xsa - 1).\nI'm also wondering what happens with ellipses in the middle of the list; e.g. ..., a, ..., b, .... I'm wondering if we need some sort of recursive solution here? (cc. @aryx )", "author": "nbrahms", "createdAt": "2020-07-24T15:09:50Z", "path": "semgrep-core/matching/Generic_vs_generic.ml", "diffHunk": "@@ -995,7 +996,17 @@ and m_list__m_argument (xsa: A.argument list) (xsb: A.argument list) =\n   (* dots: ..., can also match no argument *)\n   | [A.Arg (A.Ellipsis _i)], [] ->\n       return ()\n-\n+  (* Fix to issue 1173. Case where there are ellipsis to the left and right of a statement.\n+    * Order should not matter in this case, as we can see from the go structs example.\n+    * However, there is an issue where this will match a correct line twice occasionally.\n+    * Look into m_list_in_any_order for correction in this case. *)\n+   | (A.Arg (A.Ellipsis _i))::xsa, xsb\n+     when let rev_xsa = rev xsa in", "originalCommit": "de704d1ada88f4302cf46d6d4c6210d12b8983cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyNDIzMA==", "url": "https://github.com/returntocorp/semgrep/pull/1332#discussion_r460124230", "bodyText": "There's also Common2.list_last.\nAs I said, improving the arguments matching for Composite literals is not the right approach.\nWe already have code to handle matching elements in any order for Dict, fields, etc. We just need\nto generate something better in go_to_generic.ml from CompositeLit.", "author": "aryx", "createdAt": "2020-07-24T15:26:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDExNDExNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4NTUyMQ==", "url": "https://github.com/returntocorp/semgrep/pull/1332#discussion_r461085521", "bodyText": "Whatever you all do, please avoid exceptions when you can (unless you do want a fatal error): if you want the last element of a list, such function should return an option because the list could be empty. Similarly, don't use List.hd, use pattern matching or a function that returns an option, like:\nlet first = function [] -> None | x :: _ -> Some x", "author": "mjambon", "createdAt": "2020-07-27T18:27:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDExNDExNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzOTkzNg==", "url": "https://github.com/returntocorp/semgrep/pull/1332#discussion_r463239936", "bodyText": "done! thanks for the comments!", "author": "colleend", "createdAt": "2020-07-30T20:03:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDExNDExNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDExNTM1NA==", "url": "https://github.com/returntocorp/semgrep/pull/1332#discussion_r460115354", "bodyText": "To what extent is our desire to match in any order due to the pattern syntax; vs. the parent AST node?\nI might imagine instead defining two different arg matching paths, using one from, e.g., function argument list, and using the other from object, import, and struct definition lists. cc. @aryx for thoughts here.", "author": "nbrahms", "createdAt": "2020-07-24T15:11:47Z", "path": "semgrep-core/matching/Generic_vs_generic.ml", "diffHunk": "@@ -995,7 +996,17 @@ and m_list__m_argument (xsa: A.argument list) (xsb: A.argument list) =\n   (* dots: ..., can also match no argument *)\n   | [A.Arg (A.Ellipsis _i)], [] ->\n       return ()\n-\n+  (* Fix to issue 1173. Case where there are ellipsis to the left and right of a statement.\n+    * Order should not matter in this case, as we can see from the go structs example.\n+    * However, there is an issue where this will match a correct line twice occasionally.\n+    * Look into m_list_in_any_order for correction in this case. *)\n+   | (A.Arg (A.Ellipsis _i))::xsa, xsb", "originalCommit": "de704d1ada88f4302cf46d6d4c6210d12b8983cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyNTU2NQ==", "url": "https://github.com/returntocorp/semgrep/pull/1332#discussion_r460125565", "bodyText": "I'm not sure I understand what you mean, but when we are in a object/records/hash definition context, then\nthe semantic of the language says that the order of the field does not really matter, which is why we want to match those in any order.\nFor function arguments, we match certain arguments in any order, but only for the keyword arguments (ArgKwd in AST_generic.ml).", "author": "aryx", "createdAt": "2020-07-24T15:28:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDExNTM1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk3MjIxNA==", "url": "https://github.com/returntocorp/semgrep/pull/1332#discussion_r460972214", "bodyText": "Yup, what you say is what I was suggesting: whether a list of arguments is order-independent should probably depend on the semantic context of the language (which ideally is represented in the parent node type of the generic AST).\nThe change here, in contrast, I believe uses the pattern API to determine whether matches are order-independent, rather than the semantic context.", "author": "nbrahms", "createdAt": "2020-07-27T15:23:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDExNTM1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyOTM4MA==", "url": "https://github.com/returntocorp/semgrep/pull/1332#discussion_r463229380", "bodyText": "done!", "author": "colleend", "createdAt": "2020-07-30T19:43:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDExNTM1NA=="}], "type": "inlineReview"}, {"oid": "a6e948a3c14655f146fce4fd992420ee87468d0f", "url": "https://github.com/returntocorp/semgrep/commit/a6e948a3c14655f146fce4fd992420ee87468d0f", "message": "Merge branch 'develop' of github.com:returntocorp/semgrep into go_struct_order_bug", "committedDate": "2020-07-30T19:24:29Z", "type": "commit"}, {"oid": "4d75dabb01c6c857d36e27a394be0da4ff7bc40e", "url": "https://github.com/returntocorp/semgrep/commit/4d75dabb01c6c857d36e27a394be0da4ff7bc40e", "message": "tests for pfff struct order fix.", "committedDate": "2020-07-30T19:37:54Z", "type": "commit"}, {"oid": "27939d1cb9ac2eb9cb16b0bcdcc8088eda11071f", "url": "https://github.com/returntocorp/semgrep/commit/27939d1cb9ac2eb9cb16b0bcdcc8088eda11071f", "message": "updating Generic vs generic to get rid of changes", "committedDate": "2020-07-30T19:41:07Z", "type": "commit"}, {"oid": "55c93929c66371dbd83e4d90ef895aa8843873ed", "url": "https://github.com/returntocorp/semgrep/commit/55c93929c66371dbd83e4d90ef895aa8843873ed", "message": "deleting repeated files", "committedDate": "2020-07-30T19:42:25Z", "type": "commit"}, {"oid": "e698ab1d4fb42db18c324822dd68dc4286861b18", "url": "https://github.com/returntocorp/semgrep/commit/e698ab1d4fb42db18c324822dd68dc4286861b18", "message": "pulled update to pfff", "committedDate": "2020-07-30T19:50:35Z", "type": "commit"}]}