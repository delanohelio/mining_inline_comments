{"pr_number": 2006, "pr_title": "support for dumping AST of very basic function", "pr_createdAt": "2020-11-10T18:44:03Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/2006", "timeline": [{"oid": "dbea79458cecbc5078a7862057c967dd2c8f24ed", "url": "https://github.com/returntocorp/semgrep/commit/dbea79458cecbc5078a7862057c967dd2c8f24ed", "message": "support for dumping very basic AST", "committedDate": "2020-11-10T18:42:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxOTk3Ng==", "url": "https://github.com/returntocorp/semgrep/pull/2006#discussion_r520819976", "bodyText": "there's a pr2 here.\nWe actually should have a semgrep rule preventing to commit such code.", "author": "aryx", "createdAt": "2020-11-10T19:27:53Z", "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "diffHunk": "@@ -1358,12 +1366,13 @@ and primary_constructor (env : env) ((v1, v2) : CST.primary_constructor) =\n   let v2 = class_parameters env v2 in\n   todo env (v1, v2)\n \n-and primary_expression (env : env) (x : CST.primary_expression) : AST.expr =\n+and primary_expression (env : env) (x : CST.primary_expression) : expr =\n   (match x with\n-  | `Paren_exp x -> let _ = parenthesized_expression env x in\n-      raise Todo\n-  | `Simple_id x -> simple_identifier env x\n-  | `Lit_cst x -> literal_constant env x\n+  | `Paren_exp x -> parenthesized_expression env x\n+  | `Simple_id x -> \n+      let id = simple_identifier env x in\n+      Id(id, empty_id_info())\n+  | `Lit_cst x -> pr2 \"in lit_cst\"; L (literal_constant env x)", "originalCommit": "dbea79458cecbc5078a7862057c967dd2c8f24ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2MTAxOQ==", "url": "https://github.com/returntocorp/semgrep/pull/2006#discussion_r520861019", "bodyText": "oh shoot, I'll change that! and very true we should have a semgrep rule for this", "author": "colleend", "createdAt": "2020-11-10T20:42:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxOTk3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg5MjUxOA==", "url": "https://github.com/returntocorp/semgrep/pull/2006#discussion_r520892518", "bodyText": "I will write this this week or next \ud83e\udd14", "author": "colleend", "createdAt": "2020-11-10T21:43:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxOTk3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgyMDMxOQ==", "url": "https://github.com/returntocorp/semgrep/pull/2006#discussion_r520820319", "bodyText": "There is a IdSpecial for This and Super.\nSee what I do in Parse_java_tree_sitter.ml", "author": "aryx", "createdAt": "2020-11-10T19:28:27Z", "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "diffHunk": "@@ -1404,7 +1413,7 @@ and primary_expression (env : env) (x : CST.primary_expression) : AST.expr =\n       in\n       let v4 = token env v4 (* \"]\" *) in\n       todo env (v1, v2, v3, v4)\n-  | `This_exp tok -> let _ = token env tok in raise Todo (* \"this\" *)\n+  | `This_exp tok -> Id(str env tok, empty_id_info()) (* \"this\" *)", "originalCommit": "dbea79458cecbc5078a7862057c967dd2c8f24ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "267b694fbe6cbdd4df3420c34ffb986f3d3da1ca", "url": "https://github.com/returntocorp/semgrep/commit/267b694fbe6cbdd4df3420c34ffb986f3d3da1ca", "message": "removed pr2, changed conversion from Id to IdSpecial for This", "committedDate": "2020-11-10T21:13:38Z", "type": "commit"}]}