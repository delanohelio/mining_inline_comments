{"pr_number": 712, "pr_title": "Implement metavariable matching between patterns", "pr_createdAt": "2020-05-07T18:56:07Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/712", "timeline": [{"oid": "561dc9f0302a77b89bb3023fcbfcd257e7d134f2", "url": "https://github.com/returntocorp/semgrep/commit/561dc9f0302a77b89bb3023fcbfcd257e7d134f2", "message": "Implement metavariable matching between patterns\n\nThis commit implements metavariable matching between patterns. What this\nmeans:\n\n  - Two patterns are equal only if, for any commonly defined\n    metavariables, those metavariables refer to the same variable (if\n    a variable) or expression\n  - A pattern is \"inside\" another pattern only if, for any commonly defined\n    metavariables, those metavariables refer to the same variable (if\n    a variable) or expression\n\nSee semgrep/tests/e2e/rules/inside.yaml and\nsemgrep/tests/e2e/targets/basic/inside.py for an example of how this\nmetavariable matching works.", "committedDate": "2020-05-07T18:54:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcyNTMxOQ==", "url": "https://github.com/returntocorp/semgrep/pull/712#discussion_r421725319", "bodyText": "I'll reword this", "author": "nbrahms", "createdAt": "2020-05-07T18:58:48Z", "path": "semgrep/semgrep/semgrep_types.py", "diffHunk": "@@ -118,9 +119,42 @@ def pattern_names_for_operators(operators: List[Operator]) -> List[str]:\n class Range(NamedTuple):\n     start: int\n     end: int\n+    vars: Mapping[str, Any]\n \n     def is_enclosing_or_eq(self, other_range: \"Range\") -> bool:\n-        return self.start <= other_range.start and other_range.end <= self.end\n+        return (\n+            self.start <= other_range.start\n+            and other_range.end <= self.end\n+            and self.vars_match(other_range)\n+        )\n+\n+    def vars_match(self, rhs: \"Range\") -> bool:\n+        \"\"\"\n+        Returns true if and only if all metavariables that match as variable nodes in either", "originalCommit": "561dc9f0302a77b89bb3023fcbfcd257e7d134f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcyOTg4MQ==", "url": "https://github.com/returntocorp/semgrep/pull/712#discussion_r421729881", "bodyText": "should this be a property of PatternMatch rather than Range?", "author": "brendongo", "createdAt": "2020-05-07T19:06:57Z", "path": "semgrep/semgrep/semgrep_types.py", "diffHunk": "@@ -118,9 +119,42 @@ def pattern_names_for_operators(operators: List[Operator]) -> List[str]:\n class Range(NamedTuple):\n     start: int\n     end: int\n+    vars: Mapping[str, Any]", "originalCommit": "561dc9f0302a77b89bb3023fcbfcd257e7d134f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5NjE5OA==", "url": "https://github.com/returntocorp/semgrep/pull/712#discussion_r421796198", "bodyText": "I need it for the equality and inclusion operations, so I'd have to call it all over the place if I did that. I think it makes more sense for an object to declare its own equality.", "author": "nbrahms", "createdAt": "2020-05-07T21:10:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcyOTg4MQ=="}], "type": "inlineReview"}, {"oid": "8e56655ce8279ae0fd75199ae1e8d11e87e0c975", "url": "https://github.com/returntocorp/semgrep/commit/8e56655ce8279ae0fd75199ae1e8d11e87e0c975", "message": "fixup! Implement metavariable matching between patterns", "committedDate": "2020-05-07T21:54:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzOTIxMA==", "url": "https://github.com/returntocorp/semgrep/pull/712#discussion_r421839210", "bodyText": "Do we need to do a membership check if we are looping over a set intersection?", "author": "brendongo", "createdAt": "2020-05-07T22:52:38Z", "path": "semgrep/semgrep/semgrep_types.py", "diffHunk": "@@ -118,9 +119,42 @@ def pattern_names_for_operators(operators: List[Operator]) -> List[str]:\n class Range(NamedTuple):\n     start: int\n     end: int\n+    vars: Mapping[str, Any]\n \n     def is_enclosing_or_eq(self, other_range: \"Range\") -> bool:\n-        return self.start <= other_range.start and other_range.end <= self.end\n+        return (\n+            self.start <= other_range.start\n+            and other_range.end <= self.end\n+            and self.vars_match(other_range)\n+        )\n+\n+    def vars_match(self, rhs: \"Range\") -> bool:\n+        \"\"\"\n+        Returns true if and only if all metavariables in both this and the other Range refer to the same\n+        variables (if variable nodes), in the same scope, or the same expressions (if expression nodes).\n+\n+        That is, if two patterns define a \"$X\", and $X refers to a variable in one pattern, then\n+        $X must refer to the same variable in both patterns\n+        :param rhs: The other Range\n+        \"\"\"\n+        to_match = set(self.vars.keys()).intersection(rhs.vars.keys())\n+        return all(\n+            v in self.vars and v in rhs.vars and self.vars[v] == rhs.vars[v]", "originalCommit": "8e56655ce8279ae0fd75199ae1e8d11e87e0c975", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1MjE2NQ==", "url": "https://github.com/returntocorp/semgrep/pull/712#discussion_r421852165", "bodyText": "oh yeah that's stale", "author": "nbrahms", "createdAt": "2020-05-07T23:32:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzOTIxMA=="}], "type": "inlineReview"}, {"oid": "e6637da57b595f850ba2a16c5161d18747347e72", "url": "https://github.com/returntocorp/semgrep/commit/e6637da57b595f850ba2a16c5161d18747347e72", "message": "fixup! Implement metavariable matching between patterns", "committedDate": "2020-05-07T23:33:16Z", "type": "commit"}]}