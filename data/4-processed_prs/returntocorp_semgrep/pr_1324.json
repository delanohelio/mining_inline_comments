{"pr_number": 1324, "pr_title": "Add 'metavariable-regex' operator", "pr_createdAt": "2020-07-22T17:41:57Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/1324", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3NzkxMA==", "url": "https://github.com/returntocorp/semgrep/pull/1324#discussion_r458977910", "bodyText": "is this the right error type? Don't we have an error type that represents invalid (semantically) YAML pattern?", "author": "ievans", "createdAt": "2020-07-22T17:55:04Z", "path": "semgrep/semgrep/evaluation.py", "diffHunk": "@@ -134,6 +161,30 @@ def _evaluate_single_expression(\n             }\n         )\n         return output_ranges\n+    elif expression.operator == OPERATORS.METAVARIABLE_REGEX:\n+        if (\n+            not isinstance(expression.operand, dict)\n+            or \"metavariable\" not in expression.operand\n+            or \"regex\" not in expression.operand\n+        ):\n+            raise SemgrepError(", "originalCommit": "fd12dc686e34d3d3b3cc9c45c2b95e5a820f30c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwNDUwNw==", "url": "https://github.com/returntocorp/semgrep/pull/1324#discussion_r459004507", "bodyText": "Good catch! Are you thinking of InvalidPatternError? That seems like the best fit here", "author": "mschwager", "createdAt": "2020-07-22T18:40:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3NzkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwNjc2OA==", "url": "https://github.com/returntocorp/semgrep/pull/1324#discussion_r459006768", "bodyText": "Actually, InvalidRuleSchemaError may be better since this isn't a pattern", "author": "mschwager", "createdAt": "2020-07-22T18:44:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3NzkxMA=="}], "type": "inlineReview"}, {"oid": "79cec25749e4a0630da07bd6477e1472d5b6e9ef", "url": "https://github.com/returntocorp/semgrep/commit/79cec25749e4a0630da07bd6477e1472d5b6e9ef", "message": "Add 'metavariable-regex' operator\n\nFix #1217. The 'metavariable-regex' operator filters finding's\nmetavariable values against a Python re.match compatible expression.", "committedDate": "2020-07-22T17:57:24Z", "type": "commit"}, {"oid": "42bd662db40a9305d300e650d0050da0c26bf39a", "url": "https://github.com/returntocorp/semgrep/commit/42bd662db40a9305d300e650d0050da0c26bf39a", "message": "Bump CHANGELOG", "committedDate": "2020-07-22T17:58:56Z", "type": "commit"}, {"oid": "42bd662db40a9305d300e650d0050da0c26bf39a", "url": "https://github.com/returntocorp/semgrep/commit/42bd662db40a9305d300e650d0050da0c26bf39a", "message": "Bump CHANGELOG", "committedDate": "2020-07-22T17:58:56Z", "type": "forcePushed"}, {"oid": "d689d90d5d9ed872d5ec57d43be00d4484390781", "url": "https://github.com/returntocorp/semgrep/commit/d689d90d5d9ed872d5ec57d43be00d4484390781", "message": "Fix tests and use more appropriate exceptions", "committedDate": "2020-07-22T18:48:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwOTI3OA==", "url": "https://github.com/returntocorp/semgrep/pull/1324#discussion_r459009278", "bodyText": "\u2764\ufe0f for documentation", "author": "nbrahms", "createdAt": "2020-07-22T18:48:39Z", "path": "docs/configuration-files.md", "diffHunk": "@@ -197,6 +199,30 @@ rules:\n *Note that single (`'`) and double (`\"`) quotes [behave differently](https://docs.octoprint.org/en/master/configuration/yaml.html#scalars)\n in YAML syntax. Single quotes are typically preferred when using backslashes (`\\`) with `pattern-regex`.*\n \n+### `metavariable-regex`", "originalCommit": "42bd662db40a9305d300e650d0050da0c26bf39a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxMTAxMQ==", "url": "https://github.com/returntocorp/semgrep/pull/1324#discussion_r459011011", "bodyText": "Is this the correct error message? What does this case have to do with pattern-where-python?", "author": "nbrahms", "createdAt": "2020-07-22T18:51:26Z", "path": "semgrep/semgrep/evaluation.py", "diffHunk": "@@ -99,7 +126,8 @@ def _evaluate_single_expression(\n                 f\"at least one rule needs to execute arbitrary code; this is dangerous! if you want to continue, enable the flag: {RCE_RULE_FLAG}\",\n                 code=NEED_ARBITRARY_CODE_EXEC_EXIT_CODE,\n             )\n-        assert expression.operand, \"must have operand for this operator type\"\n+        if not isinstance(expression.operand, str):\n+            raise InvalidRuleSchemaError(\"pattern-where-python must have a string value\")", "originalCommit": "d689d90d5d9ed872d5ec57d43be00d4484390781", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxODI4Ng==", "url": "https://github.com/returntocorp/semgrep/pull/1324#discussion_r459018286", "bodyText": "This was more of a code hygiene fix since operand is no longer guaranteed to be a string, so this appeases mypy. Also, when Python is run in optimize mode assert statements are removed, so we shouldn't rely on them:\n$ python --help\n...\n-O     : remove assert and __debug__-dependent statements; add .opt-1 before\n         .pyc extension; also PYTHONOPTIMIZE=x\n-OO    : do -O changes and also discard docstrings; add .opt-2 before\n         .pyc extension\n...", "author": "mschwager", "createdAt": "2020-07-22T19:03:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxMTAxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxMTgxMQ==", "url": "https://github.com/returntocorp/semgrep/pull/1324#discussion_r459011811", "bodyText": "This may be confusing, as the dict presumably won't be in a pattern key...", "author": "nbrahms", "createdAt": "2020-07-22T18:52:49Z", "path": "semgrep/semgrep/rule.py", "diffHunk": "@@ -172,11 +179,11 @@ def _parse_boolean_expression(\n                         )\n \n     @staticmethod\n-    def _validate_operand(operand: YamlTree) -> str:  # type: ignore\n-        if not isinstance(operand.value, str):\n+    def _validate_operand(operand: YamlTree) -> Union[str, dict]:  # type: ignore\n+        if not (isinstance(operand.value, str) or isinstance(operand.value, dict)):\n             raise InvalidRuleSchemaError(\n                 short_msg=\"invalid operand\",\n-                long_msg=f\"type of `pattern` must be a string, but it was a {type(operand.unroll()).__name__}\",\n+                long_msg=f\"type of `pattern` must be a string or dict, but it was a {type(operand.unroll()).__name__}\",", "originalCommit": "d689d90d5d9ed872d5ec57d43be00d4484390781", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxOTYzNw==", "url": "https://github.com/returntocorp/semgrep/pull/1324#discussion_r459019637", "bodyText": "I think this should be \"type of operand ...\". The function is _validate_operand with operand as an argument. I can bump the message", "author": "mschwager", "createdAt": "2020-07-22T19:06:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxMTgxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxMzA2MA==", "url": "https://github.com/returntocorp/semgrep/pull/1324#discussion_r459013060", "bodyText": "I'd be curious to see a negative test case for:\n- pattern:\n    metavariable: '$X'\n    regex: 'method1'", "author": "nbrahms", "createdAt": "2020-07-22T18:54:57Z", "path": "semgrep/tests/e2e/rules/metavariable-regex-multi-regex.yaml", "diffHunk": "@@ -0,0 +1,13 @@\n+rules:\n+  - id: metavar-test-multi-regex\n+    patterns:\n+      - pattern: 'metavariable_regex_test.$X($Y)'", "originalCommit": "d689d90d5d9ed872d5ec57d43be00d4484390781", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyOTg0Nw==", "url": "https://github.com/returntocorp/semgrep/pull/1324#discussion_r459029847", "bodyText": "That gives me:\nrunning 1 rules...\nan internal error occured while invoking semgrep-core:\n\tinvalid yaml: wrong rule fields\nAn error occurred while invoking the semgrep engine; please help us fix this by creating an issue at https://semgrep.dev\n\nIs there something specific you're trying to test for here? This PR isn't as precise as it could be. Ideally we'd want to avoid all operators allowing str|dict and instead only allow specific operators to be their specific type, but that's a much larger effort and refactor.", "author": "mschwager", "createdAt": "2020-07-22T19:25:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxMzA2MA=="}], "type": "inlineReview"}, {"oid": "a3a303f663c3dff9bfa55f48416d7d80e336f0a2", "url": "https://github.com/returntocorp/semgrep/commit/a3a303f663c3dff9bfa55f48416d7d80e336f0a2", "message": "Bump error message and use SemgrepError", "committedDate": "2020-07-22T19:32:46Z", "type": "commit"}, {"oid": "44bae5eb3823feb1b47d0b1d5a869bf8084e67d9", "url": "https://github.com/returntocorp/semgrep/commit/44bae5eb3823feb1b47d0b1d5a869bf8084e67d9", "message": "Fixup test message", "committedDate": "2020-07-22T19:48:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI5MzI5NQ==", "url": "https://github.com/returntocorp/semgrep/pull/1324#discussion_r459293295", "bodyText": "Why the quotes around $METHOD?\nWhy the quotes around the regexp below? The main advantage of YAML is not having\nto use \"\" as in JSON around strings.\nWe do not use quotes around semgrep patterns for examples.", "author": "aryx", "createdAt": "2020-07-23T08:32:10Z", "path": "docs/configuration-files.md", "diffHunk": "@@ -197,6 +199,30 @@ rules:\n *Note that single (`'`) and double (`\"`) quotes [behave differently](https://docs.octoprint.org/en/master/configuration/yaml.html#scalars)\n in YAML syntax. Single quotes are typically preferred when using backslashes (`\\`) with `pattern-regex`.*\n \n+### `metavariable-regex`\n+\n+The `metavariable-regex` operator searches metavariables for a [Python `re.match`](https://docs.python.org/3/library/re.html#re.match)\n+compatible expression. This is useful for filtering results based on a [metavariable's](/docs/pattern-features.md#metavariables)\n+value.\n+\n+**Example**\n+\n+The `metavariable-regex` operator is a mapping which requires the\n+`metavariable` and `regex` keys. It can be combined with other pattern operators:\n+\n+```yaml\n+rules:\n+  - id: insecure-methods\n+    patterns:\n+      - pattern: module.$METHOD(...)\n+      - metavariable-regex:\n+          metavariable: '$METHOD'", "originalCommit": "44bae5eb3823feb1b47d0b1d5a869bf8084e67d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}