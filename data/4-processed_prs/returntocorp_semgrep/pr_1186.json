{"pr_number": 1186, "pr_title": "Add a new -maxout to limit memory consumption", "pr_createdAt": "2020-07-01T22:10:48Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/1186", "timeline": [{"oid": "b7aa6e25d28f726fa386c8a44c64221007d1b5ff", "url": "https://github.com/returntocorp/semgrep/commit/b7aa6e25d28f726fa386c8a44c64221007d1b5ff", "message": "Add a new -maxout to limit memory consumption\n\nIn the past semgrep-core provoked the reboot of the machine of a few users\nbecause it was using lots of memory (probably because of >||> and the\nexplosion of paths with '...').\nThis diff adds the possibility to limit the amount of memory\nsemgrep-core should use. It then returns an exception instead of crashing\nbefore exhausing all the swap of the user's machine.\n\nTest plan:\nuncomment the line in the diff about Gc.full_major and then:\n\ntime yy -verbose -lang js -maxout 10_000_000 -rules_file ../../data/basic.yml   l10000.js\n+ /home/pad/github/semgrep/semgrep-core/_build/default/bin/Main.exe -verbose -lang js -maxout 10_000_000 -rules_file ../../data/basic.yml l10000.js\nmaxout allocated memory: 72597504\n{\n  \"matches\": [],\n  \"errors\": [\n    {\n      \"check_id\": \"FatalError\",\n      \"path\": \"l10000.js\",\n      \"start\": { \"line\": 1, \"col\": 1 },\n      \"end\": { \"line\": 1, \"col\": 1 },\n      \"extra\": { \"message\": \"Fatal Error: Out of memory\", \"line\": \"/**\" }\n    }\n  ],\n  \"stats\": { \"okfiles\": 0, \"errorfiles\": 1 }\n}\n0.669 secs", "committedDate": "2020-07-01T22:09:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY1MTAyNA==", "url": "https://github.com/returntocorp/semgrep/pull/1186#discussion_r448651024", "bodyText": "Does this mean semgrep-core will use 4GB split among all the jobs or each one can use 4GB?", "author": "brendongo", "createdAt": "2020-07-01T22:36:14Z", "path": "semgrep-core/bin/Main.ml", "diffHunk": "@@ -347,6 +348,24 @@ let timeout_function lang = fun f ->\n   then f ()\n   else Common.timeout_function ~verbose:!verbose timeout f\n \n+(* from https://discuss.ocaml.org/t/todays-trick-memory-limits-with-gc-alarms/4431 *)\n+let run_with_memory_limit limit f =", "originalCommit": "b7aa6e25d28f726fa386c8a44c64221007d1b5ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5Nzk1MA==", "url": "https://github.com/returntocorp/semgrep/pull/1186#discussion_r448697950", "bodyText": "It would be nice to have a permanent test for this. You could add a --test or --debug flag that would enable the Gc.full_major () (or an environment variable).", "author": "mjambon", "createdAt": "2020-07-02T01:26:22Z", "path": "semgrep-core/bin/Main.ml", "diffHunk": "@@ -530,7 +549,16 @@ let iter_generic_ast_of_files_and_get_matches_and_exn_to_errors f files =\n          let ast = parse_generic lang file in\n \n          (* calling the hook *)\n-         f file lang ast, []\n+         run_with_memory_limit !maxout (fun () ->\n+           (f file lang ast, [])\n+           (* to test -maxout, you can uncomment the code below, to give\n+            * a chance to the Gc.create_alarm to run even if the program does\n+            * noi even need to run the Gc. However, this has a slow perf\n+            * penality on small programs, which is why it's better to keep\n+            * it in comment when you're not testing -maxout.\n+            *)\n+           (*|> (fun v -> Gc.full_major(); v) *)\n+         )", "originalCommit": "b7aa6e25d28f726fa386c8a44c64221007d1b5ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5ODI2Nw==", "url": "https://github.com/returntocorp/semgrep/pull/1186#discussion_r448698267", "bodyText": "I didn't know about this way.", "author": "mjambon", "createdAt": "2020-07-02T01:27:38Z", "path": "semgrep-core/bin/Main.ml", "diffHunk": "@@ -347,6 +348,24 @@ let timeout_function lang = fun f ->\n   then f ()\n   else Common.timeout_function ~verbose:!verbose timeout f\n \n+(* from https://discuss.ocaml.org/t/todays-trick-memory-limits-with-gc-alarms/4431 *)\n+let run_with_memory_limit limit f =\n+  let limit_memory () =\n+    let mem = (Gc.quick_stat ()).Gc.heap_words in\n+    if mem > limit / (Sys.word_size / 8)\n+    then begin\n+        if !verbose\n+        then pr2 (spf \"maxout allocated memory: %d\"\n+                      (mem * (Sys.word_size / 8)));\n+        raise Out_of_memory\n+      end\n+  in\n+  let alarm = Gc.create_alarm limit_memory in\n+  Fun.protect f ~finally:(fun () ->\n+      Gc.delete_alarm alarm;\n+      Gc.compact ()\n+  )", "originalCommit": "b7aa6e25d28f726fa386c8a44c64221007d1b5ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}