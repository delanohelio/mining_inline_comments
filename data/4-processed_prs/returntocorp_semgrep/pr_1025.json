{"pr_number": 1025, "pr_title": "Add capability to use regexes in autofix.", "pr_createdAt": "2020-06-16T01:41:09Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/1025", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1NTcwOQ==", "url": "https://github.com/returntocorp/semgrep/pull/1025#discussion_r441055709", "bodyText": "Double raise", "author": "brendongo", "createdAt": "2020-06-16T18:23:42Z", "path": "semgrep/semgrep/autofix.py", "diffHunk": "@@ -45,8 +95,18 @@ def apply_fixes(rule_matches_by_rule: Dict[Rule, List[RuleMatch]]) -> None:\n     for _, rule_matches in rule_matches_by_rule.items():\n         for rule_match in rule_matches:\n             fix = rule_match.fix\n-            if fix:\n-                filepath = rule_match.path\n+            filepath = rule_match.path\n+            if fix and fix.startswith(\"s/\"):  # Regex-style fix\n+                try:\n+                    from_str, to_str = _parse_regex_fix(fix)\n+                    _regex_replace(rule_match, from_str, to_str)\n+                    modified_files.add(filepath)\n+                except Exception as e:\n+                    raise e", "originalCommit": "bad4009445361b33055a9c74f9b75ed09051af78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA3ODcyNQ==", "url": "https://github.com/returntocorp/semgrep/pull/1025#discussion_r441078725", "bodyText": "Oh yeah, that was for debugging. Good catch", "author": "minusworld", "createdAt": "2020-06-16T19:04:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1NTcwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1NjA0Ng==", "url": "https://github.com/returntocorp/semgrep/pull/1025#discussion_r441056046", "bodyText": "Might be useful to print out fix string", "author": "brendongo", "createdAt": "2020-06-16T18:24:16Z", "path": "semgrep/semgrep/autofix.py", "diffHunk": "@@ -45,8 +95,18 @@ def apply_fixes(rule_matches_by_rule: Dict[Rule, List[RuleMatch]]) -> None:\n     for _, rule_matches in rule_matches_by_rule.items():\n         for rule_match in rule_matches:\n             fix = rule_match.fix\n-            if fix:\n-                filepath = rule_match.path\n+            filepath = rule_match.path\n+            if fix and fix.startswith(\"s/\"):  # Regex-style fix\n+                try:\n+                    from_str, to_str = _parse_regex_fix(fix)\n+                    _regex_replace(rule_match, from_str, to_str)\n+                    modified_files.add(filepath)\n+                except Exception as e:\n+                    raise e\n+                    raise SemgrepError(\n+                        f\"unable to use regex to modify file {filepath}: {e}\"", "originalCommit": "bad4009445361b33055a9c74f9b75ed09051af78", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1Njk4MA==", "url": "https://github.com/returntocorp/semgrep/pull/1025#discussion_r441056980", "bodyText": "Add comment that it replaces the first instance of from_str to to_str", "author": "brendongo", "createdAt": "2020-06-16T18:25:49Z", "path": "semgrep/semgrep/autofix.py", "diffHunk": "@@ -35,6 +53,38 @@ def _modify_file(rule_match: RuleMatch, fix: str) -> None:\n     p.write_text(contents_after_fix_str)\n \n \n+def _parse_regex_fix(sed_string: str) -> Tuple[str, str]:\n+    \"\"\"\n+    Return the second and third elements of a sed-like string:\n+    E.g., s/one/two/g returns (one, two)\n+    \"\"\"\n+    splitstr = sed_string.split(\"/\")  # Do it this way to satisfy mypy\n+    return splitstr[1], splitstr[2]\n+\n+\n+def _regex_replace(rule_match: RuleMatch, from_str: str, to_str: str) -> None:\n+    \"\"\"\n+    Use a regular expression to autofix.\n+    Replaces from_str to to_str.", "originalCommit": "bad4009445361b33055a9c74f9b75ed09051af78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4MzU2OQ==", "url": "https://github.com/returntocorp/semgrep/pull/1025#discussion_r441083569", "bodyText": "Based on my read of the docs, it replaces all occurrences as is:  https://docs.python.org/3/library/re.html#re.sub\n>>> import re\n>>> replaceme = \"XaaaaXXaaXXXaaXaaaaaaXX\"\n>>> re.sub(\"X\", \"E\", replaceme)\n'EaaaaEEaaEEEaaEaaaaaaEE'\n>>> \nDo you have a preferred behavior? Is it more intuitive to replace everything or just the first occurrence?\n(I basically just lifted the sed syntax but I always use /g ... and it isn't really sed anyway so I'm not sure which is more familiar)", "author": "minusworld", "createdAt": "2020-06-16T19:13:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1Njk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyMjQxOQ==", "url": "https://github.com/returntocorp/semgrep/pull/1025#discussion_r441122419", "bodyText": "Oh i must have misread the docs. Can you add comment that it replaces all occurrences. Alternatively you can use the prescence of /g to make it all behavior but default to one replacement if g isnt there?", "author": "brendongo", "createdAt": "2020-06-16T20:28:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1Njk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyNjk2OQ==", "url": "https://github.com/returntocorp/semgrep/pull/1025#discussion_r441126969", "bodyText": "Yup. I realized after this discussion that a better solution would be to just parse the /g or /N flag so I just added that in.", "author": "minusworld", "createdAt": "2020-06-16T20:37:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1Njk4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1NzY2Mg==", "url": "https://github.com/returntocorp/semgrep/pull/1025#discussion_r441057662", "bodyText": "This probably doesn't play well if there are any close parenthesis in an argument to csv writer. The code will replace the first close parent encountered.", "author": "brendongo", "createdAt": "2020-06-16T18:27:02Z", "path": "semgrep/tests/e2e/rules/autofix/csv-writer.yaml", "diffHunk": "@@ -0,0 +1,14 @@\n+rules:\n+- id: python.lang.security.unquoted-csv-writer.unquoted-csv-writer\n+  patterns:\n+  - pattern-not: csv.writer(..., quoting=csv.QUOTE_ALL, ...)\n+  - pattern: csv.writer(...)\n+  fix: s/\\)/, quoting=csv.QUOTE_ALL)/g", "originalCommit": "bad4009445361b33055a9c74f9b75ed09051af78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4MTk4Ng==", "url": "https://github.com/returntocorp/semgrep/pull/1025#discussion_r441081986", "bodyText": "OK, yeah. So that means the proper 'fix' is making sure it's at the end of the line or something similar.\nI realize regexes aren't the ideal autofix solution, but it at least makes autofixes attainable for demo purposes -- or for the committed! \ud83d\ude1d", "author": "minusworld", "createdAt": "2020-06-16T19:10:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1NzY2Mg=="}], "type": "inlineReview"}, {"oid": "afad1c7391fec34f45a58d0b56acc70b8989b2af", "url": "https://github.com/returntocorp/semgrep/commit/afad1c7391fec34f45a58d0b56acc70b8989b2af", "message": "Add in capability for regex autofixes on the matched area of a file. Uses a sed-like syntax for familiarity.", "committedDate": "2020-06-18T17:03:31Z", "type": "commit"}, {"oid": "99a95f75c1743a8ac0f708d86beca3e16811816b", "url": "https://github.com/returntocorp/semgrep/commit/99a95f75c1743a8ac0f708d86beca3e16811816b", "message": "Fix a boo-boo: accidentally left the string slicing on in _parse_regex_fix", "committedDate": "2020-06-18T17:03:31Z", "type": "commit"}, {"oid": "b988d00a110068c87e279ac71c0c6d7d75de8cb0", "url": "https://github.com/returntocorp/semgrep/commit/b988d00a110068c87e279ac71c0c6d7d75de8cb0", "message": "Added e2e tests for regex autofix.\n\nBefore this commit, tests for regex autofix did not exist.\nThis commit introduces four rules with regex autofixes and their\ncorresponding test files. The tests use snapshots to determine\nif the autofix was applied to a source file correctly.", "committedDate": "2020-06-18T17:03:31Z", "type": "commit"}, {"oid": "5f224d163f810def191242a9f922e6ce431eae99", "url": "https://github.com/returntocorp/semgrep/commit/5f224d163f810def191242a9f922e6ce431eae99", "message": "Fixed a bug that was removing a line in multiline contexts", "committedDate": "2020-06-18T17:03:31Z", "type": "commit"}, {"oid": "f9ffecf1dc8ce675f11c977afbb0094c96673ee0", "url": "https://github.com/returntocorp/semgrep/commit/f9ffecf1dc8ce675f11c977afbb0094c96673ee0", "message": "Regenerate snapshots", "committedDate": "2020-06-18T17:03:31Z", "type": "commit"}, {"oid": "c14d39f8ca4bc7aa66a055d399311a6c10ee7848", "url": "https://github.com/returntocorp/semgrep/commit/c14d39f8ca4bc7aa66a055d399311a6c10ee7848", "message": "Regenerate snapshots", "committedDate": "2020-06-18T17:03:31Z", "type": "commit"}, {"oid": "25658b9fe84f24f5a446072fc2ba48d6d97ad44f", "url": "https://github.com/returntocorp/semgrep/commit/25658b9fe84f24f5a446072fc2ba48d6d97ad44f", "message": "Remove prints", "committedDate": "2020-06-18T17:03:31Z", "type": "commit"}, {"oid": "574f3b40f9b56f00d161ccc6d0388b7b7f5f47c6", "url": "https://github.com/returntocorp/semgrep/commit/574f3b40f9b56f00d161ccc6d0388b7b7f5f47c6", "message": "Regex autofix now only uses line context, ignoring columns.", "committedDate": "2020-06-18T17:03:31Z", "type": "commit"}, {"oid": "639e6aa652f67dea5bda1e5fe2726142bbdd4ddf", "url": "https://github.com/returntocorp/semgrep/commit/639e6aa652f67dea5bda1e5fe2726142bbdd4ddf", "message": "Fix django none password autofix. Update snapshots.", "committedDate": "2020-06-18T17:03:31Z", "type": "commit"}, {"oid": "6d0e791b50eb794d5987c666a0ae4c56b222605e", "url": "https://github.com/returntocorp/semgrep/commit/6d0e791b50eb794d5987c666a0ae4c56b222605e", "message": "Remove debugging 'raise'", "committedDate": "2020-06-18T17:03:31Z", "type": "commit"}, {"oid": "b609489e003a44c83c4cf24558f62d641f6ae28a", "url": "https://github.com/returntocorp/semgrep/commit/b609489e003a44c83c4cf24558f62d641f6ae28a", "message": "Add parsing for the /N flag at the end of a 'sed' command. 'g' means replace all, N means replace N times. Default is 1.", "committedDate": "2020-06-18T17:03:31Z", "type": "commit"}, {"oid": "b86885a6ea9ce72e0d5d9491eef76d2211d3aee8", "url": "https://github.com/returntocorp/semgrep/commit/b86885a6ea9ce72e0d5d9491eef76d2211d3aee8", "message": "Modified tests to include variants of the flag at the end of the sed-like command. Also updated rules that depend on the last parenthesis to greedily search for the last parenthesis. Added test cases based on PR comments to make sure internal parentheses are not modified.", "committedDate": "2020-06-18T17:03:31Z", "type": "commit"}, {"oid": "ac37c1ef2b592e8b1d4c9d4004527504c474ac3d", "url": "https://github.com/returntocorp/semgrep/commit/ac37c1ef2b592e8b1d4c9d4004527504c474ac3d", "message": "Use structured YAML instead of 'sed' syntax", "committedDate": "2020-06-18T17:03:31Z", "type": "commit"}, {"oid": "43c9c10a3ed906951bc2231dc8428bbd0d28529b", "url": "https://github.com/returntocorp/semgrep/commit/43c9c10a3ed906951bc2231dc8428bbd0d28529b", "message": "Update rule parser snapshots", "committedDate": "2020-06-18T17:03:31Z", "type": "commit"}, {"oid": "43c9c10a3ed906951bc2231dc8428bbd0d28529b", "url": "https://github.com/returntocorp/semgrep/commit/43c9c10a3ed906951bc2231dc8428bbd0d28529b", "message": "Update rule parser snapshots", "committedDate": "2020-06-18T17:03:31Z", "type": "forcePushed"}, {"oid": "a9f46b867843100a04866d443d4ab92d7bc965b4", "url": "https://github.com/returntocorp/semgrep/commit/a9f46b867843100a04866d443d4ab92d7bc965b4", "message": "Update rule parser snapshots again", "committedDate": "2020-06-18T17:10:52Z", "type": "commit"}]}