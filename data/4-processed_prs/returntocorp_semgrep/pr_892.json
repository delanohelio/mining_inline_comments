{"pr_number": 892, "pr_title": "Use cache for parsing files faster the second time", "pr_createdAt": "2020-06-02T14:28:34Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/892", "timeline": [{"oid": "133ca6c3f4e4db03e95e7c29955a136615fa5d2e", "url": "https://github.com/returntocorp/semgrep/commit/133ca6c3f4e4db03e95e7c29955a136615fa5d2e", "message": "Use cache for parsing files faster the second time\n\nThis should fix #876 (at least the ocaml part).\nThis saves parsed (and Naming_AST.resolved) generic AST\nin /tmp/semgrep_core_cache<uid/ if the -use_parsing_cache command-line\nargument was passed to semgrep-core.\n\nTo clean the cache, simply do\nrm -f /tmp/semgrep_core_cache<uid/ from the Python side if you need to.\n\nTest plan:\ntakes 2.1s the first time and 0.7sec the second time when testing\non tests/PERF/ js files.\n\n/home/pad/github/semgrep/semgrep-core/_build/default/bin/Main.exe -equivalences /home/pad/github/semgrep/semgrep-core/data/basic_equivalences.yml -verbose -profile -e 1==2 -lang js tests/PERF/\n---------------------\nprofiling result\n---------------------\nMain total                               :      1.996 sec          1 count\nParse_js.parse                           :      1.043 sec          4 count\nSemgrep.check                            :      0.537 sec          4 count\nParse_js.tokens                          :      0.401 sec         13 count\nSemgrep.match_e_e                        :      0.307 sec     132621 count\n...\n\nThis time with -use_parsing_cache:\n/home/pad/github/semgrep/semgrep-core/_build/default/bin/Main.exe -equivalences /home/pad/github/semgrep/semgrep-core/data/basic_equivalences.yml -use_parsing_cache -verbose -profile -e 1==2 -lang js tests/PERF/\n\n---------------------\nprofiling result\n---------------------\nMain total                               :      0.546 sec          1 count\nSemgrep.check                            :      0.486 sec          4 count\nSemgrep.match_e_e                        :      0.285 sec     132621 count\nrule:-e/-f                               :      0.105 sec     132621 count\nApply_equivalences.apply                 :      0.042 sec          4 count\nMain.cache_computation                   :      0.040 sec          4 count\n...\n\nls -al /tmp/semgrep_core_cache_1000/\ntotal 9984\ndrwx------  2 pad  pad     4096 Jun  2 16:08 .\ndrwxrwxrwt 17 root root   49152 Jun  2 16:26 ..\n-rw-r--r--  1 pad  pad  1019805 Jun  2 16:07 027e133a90b2c79d01c3224dfb0fed8f.ast_cache\n-rw-r--r--  1 pad  pad  3953523 Jun  2 16:05 20d25efa622e4bfbc4015d03ba0d1d68.ast_cache\n-rw-r--r--  1 pad  pad  3953523 Jun  2 16:08 6c05be109ca532cf545c082bda4a07fd.ast_cache\n-rw-r--r--  1 pad  pad     7590 Jun  2 16:05 8cae6609c9048056880aa68cc383912c.ast_cache\n-rw-r--r--  1 pad  pad     7590 Jun  2 16:07 92a4a1e679734b50b6dbc1cbfae37e86.ast_cache\n-rw-r--r--  1 pad  pad    98103 Jun  2 16:07 a51fb3d6d3645f7004df0cee7b18e176.ast_cache\n-rw-r--r--  1 pad  pad    98103 Jun  2 16:05 bd7d534ea53a44d782902098c97fedb9.ast_cache\n-rw-r--r--  1 pad  pad  1019805 Jun  2 16:05 e763c7f5ef9424a2a7e295dd564cfabb.ast_cache\n\nThere are each time 2 files with the same size because I bumped ast_version\nand so it regenerated new cache entries.", "committedDate": "2020-06-02T14:28:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1NDM5OA==", "url": "https://github.com/returntocorp/semgrep/pull/892#discussion_r433954398", "bodyText": "What are your thoughts re. adding the file md5 checksum here? This would enable the Python wrapper to skip calculating this value itself.", "author": "nbrahms", "createdAt": "2020-06-02T15:14:21Z", "path": "semgrep-core/bin/Main.ml", "diffHunk": "@@ -264,6 +275,55 @@ let gen_layer ~root ~query file =\n   ()\n (*e: function [[Main_semgrep_core.gen_layer]] *)\n \n+let filemtime file =\n+  (Unix.stat file).Unix.st_mtime\n+\n+(* The function below is mostly a copy-paste of Common.cache_computation.\n+ * This function is slightly more flexible because we can put the cache file\n+ * anywhere thanks to the argument 'cache_file_of_file'.\n+ * We also try to be a bit more type-safe by using the version tag above.\n+ * TODO: merge in pfff/commons/Common.ml at some point\n+ *)\n+let cache_computation file cache_file_of_file f =\n+  if not !use_parsing_cache\n+  then f ()\n+  else begin\n+    if not (Sys.file_exists file)", "originalCommit": "133ca6c3f4e4db03e95e7c29955a136615fa5d2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk2NDYzMQ==", "url": "https://github.com/returntocorp/semgrep/pull/892#discussion_r433964631", "bodyText": "we don't compute the md5sum of the file content, just of the filename", "author": "aryx", "createdAt": "2020-06-02T15:28:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1NDM5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk2OTQ2Mw==", "url": "https://github.com/returntocorp/semgrep/pull/892#discussion_r433969463", "bodyText": "The suggestion here is that we do calculate the md5 sum of the file content. Given that we're already lexing the entire file, this seems relatively cheap for us here, vs. done in the Python wrapper.", "author": "nbrahms", "createdAt": "2020-06-02T15:35:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1NDM5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzNTkwMQ==", "url": "https://github.com/returntocorp/semgrep/pull/892#discussion_r434035901", "bodyText": "I think caching on md5 sum most reasonable approach. Caching on filename / time which has weird issues among other things inside K8S based docker containers isn't worthwhile.\nI don't think in real world analysis that parsing seems to be a big part of runtime anyway?", "author": "rcoh", "createdAt": "2020-06-02T17:06:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1NDM5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1NTg0MQ==", "url": "https://github.com/returntocorp/semgrep/pull/892#discussion_r433955841", "bodyText": "What's the purpose of hashing the filename here?", "author": "nbrahms", "createdAt": "2020-06-02T15:16:22Z", "path": "semgrep-core/bin/Main.ml", "diffHunk": "@@ -264,6 +275,55 @@ let gen_layer ~root ~query file =\n   ()\n (*e: function [[Main_semgrep_core.gen_layer]] *)\n \n+let filemtime file =\n+  (Unix.stat file).Unix.st_mtime\n+\n+(* The function below is mostly a copy-paste of Common.cache_computation.\n+ * This function is slightly more flexible because we can put the cache file\n+ * anywhere thanks to the argument 'cache_file_of_file'.\n+ * We also try to be a bit more type-safe by using the version tag above.\n+ * TODO: merge in pfff/commons/Common.ml at some point\n+ *)\n+let cache_computation file cache_file_of_file f =\n+  if not !use_parsing_cache\n+  then f ()\n+  else begin\n+    if not (Sys.file_exists file)\n+    then begin\n+      pr2 (\"WARNING: cache_computation: can't find file \"  ^ file);\n+      pr2 (\"defaulting to calling the function\");\n+      f ()\n+    end else begin\n+    profile_code \"Main.cache_computation\" (fun () ->\n+\n+      let file_cache = cache_file_of_file file in\n+      if Sys.file_exists file_cache && filemtime file_cache >= filemtime file\n+      then begin\n+        if !verbose then pr2 (\"using cache: \" ^ file_cache);\n+        let (version, res) = Common2.get_value file_cache in\n+        if version != ast_version\n+        then failwith (spf \"Version mismatch! Clean the cache file %s\"\n+                      file_cache);\n+        res\n+      end\n+      else begin\n+        let res = f () in\n+        Common2.write_value (ast_version, res) file_cache;\n+        res\n+      end\n+      )\n+    end\n+  end\n+\n+\n+let cache_file_of_file filename =\n+  let dir = spf \"/tmp/semgrep_core_cache_%d\" (Unix.getuid()) in\n+  if not (Sys.file_exists dir)\n+  then Unix.mkdir dir 0o700;\n+  (* hopefully there will be no collision *)\n+  let md5 = Digest.string filename in", "originalCommit": "133ca6c3f4e4db03e95e7c29955a136615fa5d2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk2NDI3OQ==", "url": "https://github.com/returntocorp/semgrep/pull/892#discussion_r433964279", "bodyText": "Just to create easily a filename in /tmp/semgrep_core_cache/ that correspond to a complex path. semgrep will pass me  /path/to/project/nested/dir/foo.c  and I will hash that.\nI could also replace all / with __, but I might get escaping issues, so just using the md5sum of the path seemed simpler. Also it prevents people to play with the cache directory. Those filename are a bit more opaque than a /tmp/semgrep_core/path__to__project__nested__dir__foo_c", "author": "aryx", "createdAt": "2020-06-02T15:27:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1NTg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3MDI4NA==", "url": "https://github.com/returntocorp/semgrep/pull/892#discussion_r433970284", "bodyText": "Gotcha. What does happen if there's a collision? Can we at least store the full file path in the cache data, along with the NamedAST? That way we can tell when we've hit a collision.", "author": "nbrahms", "createdAt": "2020-06-02T15:36:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1NTg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3Nzc3Nw==", "url": "https://github.com/returntocorp/semgrep/pull/892#discussion_r434177777", "bodyText": "Good idea!", "author": "aryx", "createdAt": "2020-06-02T21:11:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1NTg0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1Njg4NQ==", "url": "https://github.com/returntocorp/semgrep/pull/892#discussion_r433956885", "bodyText": "Not sure how Docker cp works, but just flagging that this computation might always return false for the Docker container used with Docker CP.", "author": "nbrahms", "createdAt": "2020-06-02T15:17:53Z", "path": "semgrep-core/bin/Main.ml", "diffHunk": "@@ -264,6 +275,55 @@ let gen_layer ~root ~query file =\n   ()\n (*e: function [[Main_semgrep_core.gen_layer]] *)\n \n+let filemtime file =\n+  (Unix.stat file).Unix.st_mtime\n+\n+(* The function below is mostly a copy-paste of Common.cache_computation.\n+ * This function is slightly more flexible because we can put the cache file\n+ * anywhere thanks to the argument 'cache_file_of_file'.\n+ * We also try to be a bit more type-safe by using the version tag above.\n+ * TODO: merge in pfff/commons/Common.ml at some point\n+ *)\n+let cache_computation file cache_file_of_file f =\n+  if not !use_parsing_cache\n+  then f ()\n+  else begin\n+    if not (Sys.file_exists file)\n+    then begin\n+      pr2 (\"WARNING: cache_computation: can't find file \"  ^ file);\n+      pr2 (\"defaulting to calling the function\");\n+      f ()\n+    end else begin\n+    profile_code \"Main.cache_computation\" (fun () ->\n+\n+      let file_cache = cache_file_of_file file in\n+      if Sys.file_exists file_cache && filemtime file_cache >= filemtime file", "originalCommit": "133ca6c3f4e4db03e95e7c29955a136615fa5d2e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3MTE1MA==", "url": "https://github.com/returntocorp/semgrep/pull/892#discussion_r433971150", "bodyText": "I suggest that this be the full version (including git commit) of pfff, so that any rev to pfff invalidates the cache.", "author": "nbrahms", "createdAt": "2020-06-02T15:37:45Z", "path": "semgrep-core/bin/Main.ml", "diffHunk": "@@ -136,6 +136,17 @@ let supported_langs: string = String.concat \", \" keys\n let ncores = ref 1\n (*e: constant [[Main_semgrep_core.ncores]] *)\n \n+(* TODO: we may need to put that in AST_generic.ml at some point\n+ * and people should bump this number each time they make a modification\n+ * to the generic AST (or to some analysis such as Naming_AST.ml which\n+ * will have an impact on the marshalled AST). Otherwise, we may\n+ * get some segmentation fault as OCaml marshalling is not entirely\n+ * type-safe!!\n+ *)\n+let ast_version = 2", "originalCommit": "133ca6c3f4e4db03e95e7c29955a136615fa5d2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3MTQ4Nw==", "url": "https://github.com/returntocorp/semgrep/pull/892#discussion_r433971487", "bodyText": "For development, forcing invalidation whenever pfff is dirty would also prevent developer pain.", "author": "nbrahms", "createdAt": "2020-06-02T15:38:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3MTE1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3ODY5NA==", "url": "https://github.com/returntocorp/semgrep/pull/892#discussion_r434178694", "bodyText": "Sgtm. I think brendon generate a version.ml that we can use here", "author": "aryx", "createdAt": "2020-06-02T21:13:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3MTE1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA1ODkxOA==", "url": "https://github.com/returntocorp/semgrep/pull/892#discussion_r434058918", "bodyText": "About /tmp: you can use Filename.get_temp_dir_name () instead of assuming /tmp exists. (this point was raised by @mschwager )\nfrom https://caml.inria.fr/pub/docs/manual-ocaml/libref/Filename.html :\nval get_temp_dir_name : unit -> string\n\n\nThe name of the temporary directory: Under Unix, the value of the TMPDIR environment variable, or \"/tmp\" if the variable is not set. Under Windows, the value of the TEMP environment variable, or \".\" if the variable is not set. The temporary directory can be changed with Filename.set_temp_dir_name.\nSince 4.00.0", "author": "mjambon", "createdAt": "2020-06-02T17:44:47Z", "path": "semgrep-core/bin/Main.ml", "diffHunk": "@@ -264,6 +275,55 @@ let gen_layer ~root ~query file =\n   ()\n (*e: function [[Main_semgrep_core.gen_layer]] *)\n \n+let filemtime file =\n+  (Unix.stat file).Unix.st_mtime\n+\n+(* The function below is mostly a copy-paste of Common.cache_computation.\n+ * This function is slightly more flexible because we can put the cache file\n+ * anywhere thanks to the argument 'cache_file_of_file'.\n+ * We also try to be a bit more type-safe by using the version tag above.\n+ * TODO: merge in pfff/commons/Common.ml at some point\n+ *)\n+let cache_computation file cache_file_of_file f =\n+  if not !use_parsing_cache\n+  then f ()\n+  else begin\n+    if not (Sys.file_exists file)\n+    then begin\n+      pr2 (\"WARNING: cache_computation: can't find file \"  ^ file);\n+      pr2 (\"defaulting to calling the function\");\n+      f ()\n+    end else begin\n+    profile_code \"Main.cache_computation\" (fun () ->\n+\n+      let file_cache = cache_file_of_file file in\n+      if Sys.file_exists file_cache && filemtime file_cache >= filemtime file\n+      then begin\n+        if !verbose then pr2 (\"using cache: \" ^ file_cache);\n+        let (version, res) = Common2.get_value file_cache in\n+        if version != ast_version\n+        then failwith (spf \"Version mismatch! Clean the cache file %s\"\n+                      file_cache);\n+        res\n+      end\n+      else begin\n+        let res = f () in\n+        Common2.write_value (ast_version, res) file_cache;\n+        res\n+      end\n+      )\n+    end\n+  end\n+\n+\n+let cache_file_of_file filename =\n+  let dir = spf \"/tmp/semgrep_core_cache_%d\" (Unix.getuid()) in", "originalCommit": "133ca6c3f4e4db03e95e7c29955a136615fa5d2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3OTQ0MQ==", "url": "https://github.com/returntocorp/semgrep/pull/892#discussion_r434179441", "bodyText": "Good idea!", "author": "aryx", "createdAt": "2020-06-02T21:14:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA1ODkxOA=="}], "type": "inlineReview"}, {"oid": "87579a7ae6617f5cd68df30b9cd720edbc149c91", "url": "https://github.com/returntocorp/semgrep/commit/87579a7ae6617f5cd68df30b9cd720edbc149c91", "message": "Merge branch 'develop' into use_parsing_cache", "committedDate": "2020-06-10T13:04:48Z", "type": "commit"}, {"oid": "63c6394f6965ca960d90d4a7986da5529e810901", "url": "https://github.com/returntocorp/semgrep/commit/63c6394f6965ca960d90d4a7986da5529e810901", "message": "* semgrep-core/bin/Main.ml: address nathan and martin suggestions", "committedDate": "2020-06-10T13:27:45Z", "type": "commit"}]}