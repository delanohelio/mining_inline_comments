{"pr_number": 1167, "pr_title": "Added tests for pattern inference", "pr_createdAt": "2020-06-29T19:37:05Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/1167", "timeline": [{"oid": "1c3dfd911a15987c343a6e9fa15768c87fdccbe8", "url": "https://github.com/returntocorp/semgrep/commit/1c3dfd911a15987c343a6e9fa15768c87fdccbe8", "message": "Wrote stub code to test patterns\n\nFor a list of file/range pairs, Unit_synthesizer will synthesize the pattern for the given range in the file. Ideally, it will then take that list of patterns, and for each one, check that it matches the code at the range using semgrep.", "committedDate": "2020-06-29T19:35:01Z", "type": "commit"}, {"oid": "8b4026a7f5f18723ccf7a3dee57ddeaed2f9661c", "url": "https://github.com/returntocorp/semgrep/commit/8b4026a7f5f18723ccf7a3dee57ddeaed2f9661c", "message": "Wrote python tests for pattern inference\n\nAdded tests that directly match the list with its contents. Filled in python tests based on the file arrays_and_funcs.py. Changed DotAccess to also infer to a metavar.\n\nRan make test in semgrep-core", "committedDate": "2020-06-30T14:42:38Z", "type": "commit"}, {"oid": "35afe60e3fc3b949ccaeb65b1ccb19515749a641", "url": "https://github.com/returntocorp/semgrep/commit/35afe60e3fc3b949ccaeb65b1ccb19515749a641", "message": "Changed path to relative one", "committedDate": "2020-06-30T15:03:47Z", "type": "commit"}, {"oid": "b4d3a2866183f16128a800e1c14227472199552b", "url": "https://github.com/returntocorp/semgrep/commit/b4d3a2866183f16128a800e1c14227472199552b", "message": "Separated out the python tests for organizational convenience", "committedDate": "2020-06-30T15:13:09Z", "type": "commit"}, {"oid": "2b128ac613ed4117e4b6339bea292208c9012f57", "url": "https://github.com/returntocorp/semgrep/commit/2b128ac613ed4117e4b6339bea292208c9012f57", "message": "Tests check that each pattern correctly matches the code\n\nWhen each pattern is iterated through, check that the pattern matches with the expression it was generated with (duplicates some of the Synthesizer code)\n\nRan with make test (bonus check: before AST was resolved, metrics.send(...) failed to match send(...), and indeed an error was thrown)", "committedDate": "2020-07-01T04:06:55Z", "type": "commit"}, {"oid": "4cf1528446d1f2daa8f8af52671a61cffe7d6921", "url": "https://github.com/returntocorp/semgrep/commit/4cf1528446d1f2daa8f8af52671a61cffe7d6921", "message": "Implemented typed metavar as pattern option when applicable\n\nWrote java tests for type matching, but did not add them to be ran because of the patterns could not yet parse. Had pattern_from_code also infer types for metavars.", "committedDate": "2020-07-01T04:32:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM3ODQyNw==", "url": "https://github.com/returntocorp/semgrep/pull/1167#discussion_r448378427", "bodyText": "I usually try to also create a .mli where I put the interface (signature) of the exported functions.", "author": "aryx", "createdAt": "2020-07-01T13:52:29Z", "path": "semgrep-core/synthesizing/Synthesizer.ml", "diffHunk": "@@ -0,0 +1,14 @@\n+open Common", "originalCommit": "4cf1528446d1f2daa8f8af52671a61cffe7d6921", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6c933a77d98c4f35dd1d7abf9fd6ac1a53bc2aef", "url": "https://github.com/returntocorp/semgrep/commit/6c933a77d98c4f35dd1d7abf9fd6ac1a53bc2aef", "message": "Added an mli for Synthesizer", "committedDate": "2020-07-01T14:29:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxMTMxNA==", "url": "https://github.com/returntocorp/semgrep/pull/1167#discussion_r448411314", "bodyText": "Ideally this would use better type than string, something like\nsynthesize_patterns: Range.t -> Common.filename -> (string * Pattern.t) list\nthen the caller of that would use the parsing/unparsing functions to convert from or to string.", "author": "aryx", "createdAt": "2020-07-01T14:40:18Z", "path": "semgrep-core/synthesizing/Synthesizer.mli", "diffHunk": "@@ -0,0 +1,2 @@\n+(* range as \"start row:start col-end row:end col\" -> filename -> (label * pattern) list *)\n+val synthesize_patterns: string -> string -> (string * string) list", "originalCommit": "6c933a77d98c4f35dd1d7abf9fd6ac1a53bc2aef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}