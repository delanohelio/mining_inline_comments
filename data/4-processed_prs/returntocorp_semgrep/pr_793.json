{"pr_number": 793, "pr_title": "Add documentation for metavariable matching", "pr_createdAt": "2020-05-19T19:41:12Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/793", "timeline": [{"oid": "5188f12beff90498469f85d6f54bdde6def8b751", "url": "https://github.com/returntocorp/semgrep/commit/5188f12beff90498469f85d6f54bdde6def8b751", "message": "Add documentation for metavariable matching\n\nThis is pretty bare-bones, but adds some minimal documentation for\nmetavariable matching.", "committedDate": "2020-05-19T19:39:28Z", "type": "commit"}, {"oid": "ada493fecbd03b8bef2f034d57256cd0e71d60e0", "url": "https://github.com/returntocorp/semgrep/commit/ada493fecbd03b8bef2f034d57256cd0e71d60e0", "message": "fixup! Add documentation for metavariable matching", "committedDate": "2020-05-19T19:44:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU2Mjk5Mg==", "url": "https://github.com/returntocorp/semgrep/pull/793#discussion_r427562992", "bodyText": "We should link the sub-headers below here too.", "author": "mschwager", "createdAt": "2020-05-19T19:57:11Z", "path": "docs/configuration-files.md", "diffHunk": "@@ -22,6 +22,7 @@ Contents:\n   * [`pattern-inside`](configuration-files.md#pattern-inside)\n   * [`pattern-not-inside`](configuration-files.md#pattern-not-inside)\n   * [`pattern-where-python`](configuration-files.md#pattern-where-python)\n+* [Metavariable matching](configuration-files.md#metavariable-matching)", "originalCommit": "ada493fecbd03b8bef2f034d57256cd0e71d60e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU2NTEyNw==", "url": "https://github.com/returntocorp/semgrep/pull/793#discussion_r427565127", "bodyText": "The rest of this document uses \"logical AND\" and \"logical OR\" vs. \"logical inclusion\" and \"logical union\". I also think that language is simpler to understand for an entry-level engineer vs. a program analysis expert.", "author": "mschwager", "createdAt": "2020-05-19T20:00:56Z", "path": "docs/configuration-files.md", "diffHunk": "@@ -271,6 +272,117 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n+## Metavariable matching\n+\n+### Metavariables in logical inclusions", "originalCommit": "ada493fecbd03b8bef2f034d57256cd0e71d60e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU4MjgzNw==", "url": "https://github.com/returntocorp/semgrep/pull/793#discussion_r427582837", "bodyText": "I have inclusion here to be inclusive (heh) of both patterns and pattern-inside, but maybe we should just be extensional.", "author": "nbrahms", "createdAt": "2020-05-19T20:34:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU2NTEyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU2NjcxOQ==", "url": "https://github.com/returntocorp/semgrep/pull/793#discussion_r427566719", "bodyText": "I'm not really sure what this is saying. Could we instead say something like \"Metavariables persist across pattern, patterns, and pattern-inside operators.\"", "author": "mschwager", "createdAt": "2020-05-19T20:03:53Z", "path": "docs/configuration-files.md", "diffHunk": "@@ -271,6 +272,117 @@ rules:\n \n This rule looks for usage of Django's [`FloatField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.FloatField) model when storing currency information. `FloatField` can lead to rounding errors and should be avoided in favor of [`DecimalField`](https://docs.djangoproject.com/en/3.0/ref/models/fields/#django.db.models.DecimalField) when dealing with currency. Here the `pattern-where-python` operator allows us to utilize the Python `in` statement to filter findings that look like currency.\n \n+## Metavariable matching\n+\n+### Metavariables in logical inclusions\n+\n+Patterns' matched metavariable values are enforced to be identical when performing logical inclusion operations (`patterns`, `pattern-inside`) on matches.", "originalCommit": "ada493fecbd03b8bef2f034d57256cd0e71d60e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU4MjQ4Mg==", "url": "https://github.com/returntocorp/semgrep/pull/793#discussion_r427582482", "bodyText": "@mschwager would it be easiest if you just took a swing at the documentation? I'm definitely struggling to articulate this without getting way too technical.", "author": "nbrahms", "createdAt": "2020-05-19T20:33:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU2NjcxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0ODQwMw==", "url": "https://github.com/returntocorp/semgrep/pull/793#discussion_r432148403", "bodyText": "Just getting back to this, happy to iterate!", "author": "mschwager", "createdAt": "2020-05-28T22:00:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU2NjcxOQ=="}], "type": "inlineReview"}]}