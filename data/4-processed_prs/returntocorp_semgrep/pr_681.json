{"pr_number": 681, "pr_title": "Add matching line to json output", "pr_createdAt": "2020-05-05T00:33:34Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/681", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwNzA5OQ==", "url": "https://github.com/returntocorp/semgrep/pull/681#discussion_r419807099", "bodyText": "eventually we should have an Error object type / data class", "author": "DrewDennison", "createdAt": "2020-05-05T00:37:34Z", "path": "semgrep/semgrep/output.py", "diffHunk": "@@ -105,22 +85,39 @@ def build_normal_output(\n                     severity_prepend = f\"{YELLOW_COLOR}{severity} \"\n                 else:\n                     severity_prepend = f\"{severity} \"\n-            yield f\"{severity_prepend}{YELLOW_COLOR}rule:{check_id}: {finding.get('extra', {}).get('message')}{RESET_COLOR}\"\n+            yield f\"{severity_prepend}{YELLOW_COLOR}rule:{check_id}: {message}{RESET_COLOR}\"\n \n         last_file = current_file\n         last_message = message\n-        yield from finding_to_line(finding, color_output)\n+        yield from finding_to_line(rule_match, color_output)\n         if fix:\n             yield f\"{BLUE_COLOR}autofix:{RESET_COLOR} {fix}\"\n \n \n-def build_output_json(output_json: Dict[str, Any]) -> str:\n+def build_output_json(rule_matches: List[RuleMatch], semgrep_errors: List[Any]) -> str:\n     # wrap errors under \"data\" entry to be compatible with\n     # https://docs.r2c.dev/en/latest/api/output.html#errors\n-    errors = output_json[\"errors\"]\n-    if errors:\n-        output_json[\"errors\"] = {\n-            \"data\": output_json[\"errors\"],\n-            \"message\": \"SgrepRuntimeErrors\",\n-        }\n+    output_json = {}\n+    output_json[\"results\"] = [rm.to_json() for rm in rule_matches]\n+\n+    errors = []\n+    for error in semgrep_errors:\n+        errors.append(\n+            {\"data\": semgrep_errors, \"message\": \"SemgrepCoreRuntimeErrors\",}\n+        )\n+    output_json[\"errors\"] = errors\n     return json.dumps(output_json)\n+\n+\n+def build_output(\n+    rule_matches: List[RuleMatch],\n+    semgrep_errors: List[Any],", "originalCommit": "73060ccafdd434fb7a4949b26b527b33e62bb3bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwNzI2NA==", "url": "https://github.com/returntocorp/semgrep/pull/681#discussion_r419807264", "bodyText": "we could make this return a string instead of a list? idk maybe we use the list in other places", "author": "DrewDennison", "createdAt": "2020-05-05T00:38:12Z", "path": "semgrep/semgrep/output.py", "diffHunk": "@@ -105,22 +85,39 @@ def build_normal_output(\n                     severity_prepend = f\"{YELLOW_COLOR}{severity} \"\n                 else:\n                     severity_prepend = f\"{severity} \"\n-            yield f\"{severity_prepend}{YELLOW_COLOR}rule:{check_id}: {finding.get('extra', {}).get('message')}{RESET_COLOR}\"\n+            yield f\"{severity_prepend}{YELLOW_COLOR}rule:{check_id}: {message}{RESET_COLOR}\"\n \n         last_file = current_file\n         last_message = message\n-        yield from finding_to_line(finding, color_output)\n+        yield from finding_to_line(rule_match, color_output)\n         if fix:\n             yield f\"{BLUE_COLOR}autofix:{RESET_COLOR} {fix}\"\n \n \n-def build_output_json(output_json: Dict[str, Any]) -> str:\n+def build_output_json(rule_matches: List[RuleMatch], semgrep_errors: List[Any]) -> str:\n     # wrap errors under \"data\" entry to be compatible with\n     # https://docs.r2c.dev/en/latest/api/output.html#errors\n-    errors = output_json[\"errors\"]\n-    if errors:\n-        output_json[\"errors\"] = {\n-            \"data\": output_json[\"errors\"],\n-            \"message\": \"SgrepRuntimeErrors\",\n-        }\n+    output_json = {}\n+    output_json[\"results\"] = [rm.to_json() for rm in rule_matches]\n+\n+    errors = []\n+    for error in semgrep_errors:\n+        errors.append(\n+            {\"data\": semgrep_errors, \"message\": \"SemgrepCoreRuntimeErrors\",}\n+        )\n+    output_json[\"errors\"] = errors\n     return json.dumps(output_json)\n+\n+\n+def build_output(\n+    rule_matches: List[RuleMatch],\n+    semgrep_errors: List[Any],\n+    json_format: bool,\n+    color_output: bool,\n+) -> str:\n+    if json_format:\n+        return build_output_json(rule_matches, semgrep_errors)\n+    else:\n+        return \"\\n\".join(\n+            build_normal_output(rule_matches, semgrep_errors, color_output)", "originalCommit": "73060ccafdd434fb7a4949b26b527b33e62bb3bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwOTA2MQ==", "url": "https://github.com/returntocorp/semgrep/pull/681#discussion_r419809061", "bodyText": "Oh you're right I don't think it is called anywhere that uses it as a list. Will change.", "author": "brendongo", "createdAt": "2020-05-05T00:45:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwNzI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgxMTM2Ng==", "url": "https://github.com/returntocorp/semgrep/pull/681#discussion_r419811366", "bodyText": "Oh build_normal_output uses yielding that I probably didn't want to deal with refactoring to a single return in this PR", "author": "brendongo", "createdAt": "2020-05-05T00:54:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwNzI2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwNzU5Nw==", "url": "https://github.com/returntocorp/semgrep/pull/681#discussion_r419807597", "bodyText": "could possible add @lru_cache() if we expect this to be read multiple times. I noticed that black does this for reading .gitignore", "author": "DrewDennison", "createdAt": "2020-05-05T00:39:28Z", "path": "semgrep/semgrep/rule_match.py", "diffHunk": "@@ -63,6 +65,18 @@ def start(self) -> Dict[str, Any]:\n     def end(self) -> Dict[str, Any]:\n         return self._end\n \n+    @property\n+    def lines(self) -> Iterable[str]:\n+        \"\"\"\n+            Return lines in file that this RuleMatch is referring to.\n+\n+            Assumes file exists.  Note that start/end line is one-indexed\n+        \"\"\"\n+        with self.path.open(", "originalCommit": "73060ccafdd434fb7a4949b26b527b33e62bb3bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg1ODQ2Nw==", "url": "https://github.com/returntocorp/semgrep/pull/681#discussion_r419858467", "bodyText": "I don't expect this for now but good to know this exists", "author": "brendongo", "createdAt": "2020-05-05T04:34:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwNzU5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwNzgzNg==", "url": "https://github.com/returntocorp/semgrep/pull/681#discussion_r419807836", "bodyText": "would we ever expect to be able to call self.start.line?", "author": "DrewDennison", "createdAt": "2020-05-05T00:40:27Z", "path": "semgrep/semgrep/rule_match.py", "diffHunk": "@@ -63,6 +65,18 @@ def start(self) -> Dict[str, Any]:\n     def end(self) -> Dict[str, Any]:\n         return self._end\n \n+    @property\n+    def lines(self) -> Iterable[str]:\n+        \"\"\"\n+            Return lines in file that this RuleMatch is referring to.\n+\n+            Assumes file exists.  Note that start/end line is one-indexed\n+        \"\"\"\n+        with self.path.open(\n+            buffering=1, errors=\"replace\"\n+        ) as fin:  # buffering=1 turns on line-level reads\n+            return list(itertools.islice(fin, self.start[\"line\"] - 1, self.end[\"line\"]))", "originalCommit": "73060ccafdd434fb7a4949b26b527b33e62bb3bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwOTgyMA==", "url": "https://github.com/returntocorp/semgrep/pull/681#discussion_r419809820", "bodyText": "Yeah start and end should be objects with named fields as well", "author": "brendongo", "createdAt": "2020-05-05T00:48:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwNzgzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwODQzNA==", "url": "https://github.com/returntocorp/semgrep/pull/681#discussion_r419808434", "bodyText": "wish we did the serialization closer to the post but I suspect you want to do this once", "author": "DrewDennison", "createdAt": "2020-05-05T00:42:54Z", "path": "semgrep/semgrep/semgrep_main.py", "diffHunk": "@@ -131,39 +131,27 @@ def rename_rule_ids(valid_configs: Dict[str, Any]) -> Dict[str, Any]:\n ### Handle output\n \n \n-def post_output(output_url: str, output_data: Dict[str, Any]) -> None:\n+def post_output(output_url: str, output: str) -> None:\n     import requests  # here for faster startup times\n \n     print_msg(f\"posting to {output_url}...\")\n-    r = requests.post(output_url, json=output_data)\n+    r = requests.post(output_url, data=output)", "originalCommit": "73060ccafdd434fb7a4949b26b527b33e62bb3bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "aa76c6add736c1252e058dfba775b7f47a9edb9a", "url": "https://github.com/returntocorp/semgrep/commit/aa76c6add736c1252e058dfba775b7f47a9edb9a", "message": "Add matching line to json output\n\nMove around functionaliy in rule_match object and output.py.", "committedDate": "2020-05-05T04:07:51Z", "type": "commit"}, {"oid": "aa76c6add736c1252e058dfba775b7f47a9edb9a", "url": "https://github.com/returntocorp/semgrep/commit/aa76c6add736c1252e058dfba775b7f47a9edb9a", "message": "Add matching line to json output\n\nMove around functionaliy in rule_match object and output.py.", "committedDate": "2020-05-05T04:07:51Z", "type": "forcePushed"}]}