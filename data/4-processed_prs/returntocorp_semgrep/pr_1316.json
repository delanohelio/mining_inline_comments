{"pr_number": 1316, "pr_title": "Bump cheatsheet functionality and fill a few gaps", "pr_createdAt": "2020-07-21T18:37:39Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/1316", "timeline": [{"oid": "9c0355321286f8c0ccbf4844524c71815797631d", "url": "https://github.com/returntocorp/semgrep/commit/9c0355321286f8c0ccbf4844524c71815797631d", "message": "Bump cheatsheet functionality and fill a few gaps", "committedDate": "2020-07-21T18:32:55Z", "type": "commit"}, {"oid": "a87ee7aba744ee5ecc09a0baa85388c907fdaa35", "url": "https://github.com/returntocorp/semgrep/commit/a87ee7aba744ee5ecc09a0baa85388c907fdaa35", "message": "Remove parentheses from Golang test", "committedDate": "2020-07-21T19:40:50Z", "type": "commit"}, {"oid": "c669dc1fd39000a8773e3fc4253d26fb056ea76b", "url": "https://github.com/returntocorp/semgrep/commit/c669dc1fd39000a8773e3fc4253d26fb056ea76b", "message": "Remove unimplemented tests for now", "committedDate": "2020-07-21T20:04:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3NTE1MA==", "url": "https://github.com/returntocorp/semgrep/pull/1316#discussion_r458375150", "bodyText": "Is there an issue tracking this?", "author": "ievans", "createdAt": "2020-07-21T20:41:59Z", "path": "semgrep-core/tests/generate_test_matrix.py", "diffHunk": "@@ -40,6 +40,15 @@\n     \"exprstmt\": \"Expression and Statement\",\n }\n \n+LANGUAGE_EXCEPTIONS = {\n+    \"java\": [\n+        \"naming_import\",", "originalCommit": "c669dc1fd39000a8773e3fc4253d26fb056ea76b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3OTUyMw==", "url": "https://github.com/returntocorp/semgrep/pull/1316#discussion_r458379523", "bodyText": "From what I can tell, Java doesn't support import aliasing. To address the comment below as well, this list is the explicit declaration that a language doesn't support something. A missing test tells me \"someone forgot to test this, or maybe it's not supported\" whereas this list tells me \"this language doesn't support this feature.\" Or, at least, that's what I was hoping. Is there a better way we can state that?", "author": "mschwager", "createdAt": "2020-07-21T20:50:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3NTE1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3NTQwNQ==", "url": "https://github.com/returntocorp/semgrep/pull/1316#discussion_r458375405", "bodyText": "is it really worth having language exception? I'd prefer to be explicit: \"we don't have test cases for this, it is probably not supported\"", "author": "ievans", "createdAt": "2020-07-21T20:42:29Z", "path": "semgrep-core/tests/generate_test_matrix.py", "diffHunk": "@@ -89,7 +98,14 @@ def generate_cheatsheet(root_dir: str):\n                 \n                 entry = (read_if_exists(sgrep_path), sgrep_path,  read_if_exists(code_path), code_path)\n                 print((lang, entry))\n-                output[lang][VERBOSE_FEATURE_NAME.get(category, category)][VERBOSE_SUBCATEGORY_NAME.get(subcategory, subcategory)].append(entry)\n+                feature_name = VERBOSE_FEATURE_NAME.get(category, category)\n+                subcategory_name = VERBOSE_SUBCATEGORY_NAME.get(subcategory, subcategory)\n+                language_exception = (\n+                    feature_name in LANGUAGE_EXCEPTIONS.get(lang, [])\n+                    or subcategory in LANGUAGE_EXCEPTIONS.get(lang, [])\n+                )\n+                if not language_exception:", "originalCommit": "c669dc1fd39000a8773e3fc4253d26fb056ea76b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}