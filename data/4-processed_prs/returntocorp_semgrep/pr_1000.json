{"pr_number": 1000, "pr_title": "Respect .gitignore by default and add flag to ignore", "pr_createdAt": "2020-06-13T01:06:07Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/1000", "timeline": [{"oid": "64e1e747cdfc11665c9ae51a9d7b219616561cda", "url": "https://github.com/returntocorp/semgrep/commit/64e1e747cdfc11665c9ae51a9d7b219616561cda", "message": "Respect .gitignore by default and add flag to ignore", "committedDate": "2020-06-13T02:12:47Z", "type": "forcePushed"}, {"oid": "2a4d5c518438fb17303c51392f4df3df58de52ae", "url": "https://github.com/returntocorp/semgrep/commit/2a4d5c518438fb17303c51392f4df3df58de52ae", "message": "Respect .gitignore by default and add flag to ignore", "committedDate": "2020-06-15T20:11:49Z", "type": "commit"}, {"oid": "2a4d5c518438fb17303c51392f4df3df58de52ae", "url": "https://github.com/returntocorp/semgrep/commit/2a4d5c518438fb17303c51392f4df3df58de52ae", "message": "Respect .gitignore by default and add flag to ignore", "committedDate": "2020-06-15T20:11:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0MTE3MA==", "url": "https://github.com/returntocorp/semgrep/pull/1000#discussion_r440441170", "bodyText": "Can we do something like [p for p in curr_dir.rglob(f\"*.{ext}\") if p.is_file()]? subprocess will come with a lot of overhead and potential headaches (what if find doesn't exist on this system? is that possible?).", "author": "mschwager", "createdAt": "2020-06-15T20:54:47Z", "path": "semgrep/semgrep/target_manager.py", "diffHunk": "@@ -65,32 +64,48 @@ def resolve_targets(targets: List[str]) -> Set[Path]:\n             for target in targets\n         )\n \n-    @staticmethod\n-    def _parse_output(output: str, curr_dir: Path) -> Set[Path]:\n-        \"\"\"\n-            Convert a newline delimited list of files to a set of path objects\n-            prepends curr_dir to all paths in said list\n-\n-            If list is empty then returns an empty set\n-        \"\"\"\n-        files: Set[Path] = set()\n-        if output:\n-            files = set(Path(curr_dir) / elem for elem in output.strip().split(\"\\n\"))\n-        return files\n-\n     @staticmethod\n     def _expand_dir(\n-        curr_dir: Path, language: str, visible_to_git_only: bool\n+        curr_dir: Path, language: str, respect_git_ignore: bool\n     ) -> Set[Path]:\n         \"\"\"\n             Recursively go through a directory and return list of all files with\n             default file extention of language\n         \"\"\"\n+\n+        def _parse_output(output: str, curr_dir: Path) -> Set[Path]:\n+            \"\"\"\n+                Convert a newline delimited list of files to a set of path objects\n+                prepends curr_dir to all paths in said list\n+\n+                If list is empty then returns an empty set\n+            \"\"\"\n+            files: Set[Path] = set()\n+            if output:\n+                files = set(\n+                    Path(curr_dir) / elem for elem in output.strip().split(\"\\n\")\n+                )\n+            return files\n+\n+        def run_find(curr_dir: Path, extention: str) -> Set[Path]:\n+            \"\"\"\n+                Use 'find' to return set of files with given extension in a directory\n+            \"\"\"\n+            output = subprocess.run(", "originalCommit": "2a4d5c518438fb17303c51392f4df3df58de52ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0NDc0OQ==", "url": "https://github.com/returntocorp/semgrep/pull/1000#discussion_r440444749", "bodyText": "With some minimal testing using subprocess with find is about as fast as using rglob: #946 (comment)\nCurrently semgrep-core makes the assumption of find existing so this just moves the code from core to python", "author": "brendongo", "createdAt": "2020-06-15T21:01:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0MTE3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ1MDk3MQ==", "url": "https://github.com/returntocorp/semgrep/pull/1000#discussion_r440450971", "bodyText": "Sounds like a great opportunity to remove that assumption! If we're writing Python, why not write Python? It's also shorter and easier on the eyes. I try to avoid subprocess unless absolutely necessary - the equivalent Python code will likely be easier to debug and play nicer with existing code vs. string parsing subprocess output.", "author": "mschwager", "createdAt": "2020-06-15T21:14:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0MTE3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ2MTAyOA==", "url": "https://github.com/returntocorp/semgrep/pull/1000#discussion_r440461028", "bodyText": "Fair point. Changing to rglob", "author": "brendongo", "createdAt": "2020-06-15T21:36:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0MTE3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0MjkxNA==", "url": "https://github.com/returntocorp/semgrep/pull/1000#discussion_r440442914", "bodyText": "We should put these in the try's else block to minimize the exception catching surface. That way we don't catch exceptions we didn't mean to, and it's clear where the exception is expected to come from. Not that I would expect that to happen here, but I think it's good practice to minimize the amount of code in a try block.", "author": "mschwager", "createdAt": "2020-06-15T20:58:10Z", "path": "semgrep/semgrep/target_manager.py", "diffHunk": "@@ -113,36 +128,26 @@ def _expand_dir(\n                         encoding=\"utf-8\",\n                         stderr=subprocess.DEVNULL,\n                     )\n-                except subprocess.CalledProcessError:\n-                    raise NotGitProjectError(\n-                        f\"{curr_dir.resolve()} is not a git repository.\"\n-                    )\n \n-                tracked = TargetManager._parse_output(tracked_output, curr_dir)\n-                untracked_unignored = TargetManager._parse_output(\n-                    untracked_output, curr_dir\n-                )\n+                    tracked = _parse_output(tracked_output, curr_dir)", "originalCommit": "2a4d5c518438fb17303c51392f4df3df58de52ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0NTQ1MQ==", "url": "https://github.com/returntocorp/semgrep/pull/1000#discussion_r440445451", "bodyText": "I think we'll need to catch a separate exception if git doesn't exist on their system:\nIn [45]: try: \n    ...:     subprocess.check_output('ladida') \n    ...: except subprocess.CalledProcessError: \n    ...:     print(\"CAUGHT\") \n    ...:\n\n...\n\nFileNotFoundError: [Errno 2] No such file or directory: 'ladida': 'ladida'", "author": "mschwager", "createdAt": "2020-06-15T21:02:56Z", "path": "semgrep/semgrep/target_manager.py", "diffHunk": "@@ -113,36 +128,26 @@ def _expand_dir(\n                         encoding=\"utf-8\",\n                         stderr=subprocess.DEVNULL,\n                     )\n-                except subprocess.CalledProcessError:\n-                    raise NotGitProjectError(\n-                        f\"{curr_dir.resolve()} is not a git repository.\"\n-                    )\n \n-                tracked = TargetManager._parse_output(tracked_output, curr_dir)\n-                untracked_unignored = TargetManager._parse_output(\n-                    untracked_output, curr_dir\n-                )\n+                    tracked = _parse_output(tracked_output, curr_dir)\n+                    untracked_unignored = _parse_output(untracked_output, curr_dir)\n \n-                expanded = expanded.union(tracked)\n-                expanded = expanded.union(untracked_unignored)\n+                    expanded = expanded.union(tracked)\n+                    expanded = expanded.union(untracked_unignored)\n+                except subprocess.CalledProcessError:", "originalCommit": "2a4d5c518438fb17303c51392f4df3df58de52ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ae889131a606616d714b513ef8431325a21a03ff", "url": "https://github.com/returntocorp/semgrep/commit/ae889131a606616d714b513ef8431325a21a03ff", "message": "fixup! Respect .gitignore by default and add flag to ignore", "committedDate": "2020-06-15T21:49:39Z", "type": "commit"}, {"oid": "ae889131a606616d714b513ef8431325a21a03ff", "url": "https://github.com/returntocorp/semgrep/commit/ae889131a606616d714b513ef8431325a21a03ff", "message": "fixup! Respect .gitignore by default and add flag to ignore", "committedDate": "2020-06-15T21:49:39Z", "type": "forcePushed"}, {"oid": "a569467b4ca1165b3eca7abb63f5634340725f1e", "url": "https://github.com/returntocorp/semgrep/commit/a569467b4ca1165b3eca7abb63f5634340725f1e", "message": "Use clone fixture", "committedDate": "2020-06-16T00:50:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyNzc3NA==", "url": "https://github.com/returntocorp/semgrep/pull/1000#discussion_r440827774", "bodyText": "Let's add a line to the CHANGELOG mentioning this flag", "author": "mschwager", "createdAt": "2020-06-16T12:56:52Z", "path": "semgrep/semgrep/cli.py", "diffHunk": "@@ -108,6 +108,11 @@ def cli() -> None:\n         default=[],\n         help=\"Scan only directories with this name; --include-dir=doc will include doc/ as well as src/doc. Can add multiple times.\",\n     )\n+    parser.add_argument(", "originalCommit": "a569467b4ca1165b3eca7abb63f5634340725f1e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}