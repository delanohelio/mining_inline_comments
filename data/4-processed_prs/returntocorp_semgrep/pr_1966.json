{"pr_number": 1966, "pr_title": "Add error handling to spacegrep", "pr_createdAt": "2020-11-05T03:46:23Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/1966", "timeline": [{"oid": "2c974cb1eb69eb94042ea4f0267c6f57b0174667", "url": "https://github.com/returntocorp/semgrep/commit/2c974cb1eb69eb94042ea4f0267c6f57b0174667", "message": "Add error handling to spacegrep", "committedDate": "2020-11-05T03:43:02Z", "type": "commit"}, {"oid": "60889970cfdb65cd987ed09ee76facd18dcb75a8", "url": "https://github.com/returntocorp/semgrep/commit/60889970cfdb65cd987ed09ee76facd18dcb75a8", "message": "Print spacegrep's stderr when CalledProcessError occurs", "committedDate": "2020-11-05T03:47:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI1NzkyMQ==", "url": "https://github.com/returntocorp/semgrep/pull/1966#discussion_r518257921", "bodyText": "Is there a reason to use check_returncode then catch the exception instead of checking non-zero exit code in a conditional?", "author": "brendongo", "createdAt": "2020-11-05T18:05:27Z", "path": "semgrep/semgrep/spacegrep.py", "diffHunk": "@@ -38,15 +39,32 @@ def run_spacegrep(patterns: List[Pattern], targets: List[Path]) -> dict:\n                 str(target),\n                 pattern_str,\n             ]\n-            p = sub_run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n-            raw_output = p.stdout\n-            raw_error = p.stderr\n+            try:\n+                p = sub_run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+                p.check_returncode()", "originalCommit": "60889970cfdb65cd987ed09ee76facd18dcb75a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI1ODk4NA==", "url": "https://github.com/returntocorp/semgrep/pull/1966#discussion_r518258984", "bodyText": "Primarily because I don't know what the return code will be (except for 0), so I'm not sure how to handle any non-zero return codes. My thought was to use this check_returncode shorthand, which raises a CalledProcessError, and then propagate the error upward with an except clause for now.", "author": "minusworld", "createdAt": "2020-11-05T18:07:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI1NzkyMQ=="}], "type": "inlineReview"}]}