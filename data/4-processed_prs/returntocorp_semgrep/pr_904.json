{"pr_number": 904, "pr_title": "Refactor user-defined exceptions", "pr_createdAt": "2020-06-03T19:57:47Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/904", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxOTkyNw==", "url": "https://github.com/returntocorp/semgrep/pull/904#discussion_r434819927", "bodyText": "Probably want to unadd this", "author": "brendongo", "createdAt": "2020-06-03T19:59:35Z", "path": "semgrep/semgrep/constants.py", "diffHunk": "@@ -30,7 +30,7 @@ def compute_semgrep_path() -> str:\n     return exec_name\n \n \n-SEMGREP_PATH = compute_semgrep_path()\n+SEMGREP_PATH = \"/home/matt/bin/semgrep-files/semgrep-core\"  # compute_semgrep_path()", "originalCommit": "ff3e50524f0a21c66f3b7afeca8bcc37d7260944", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMTU5MA==", "url": "https://github.com/returntocorp/semgrep/pull/904#discussion_r434821590", "bodyText": "Did we remove the NotImplementedError (why was there even one lol)", "author": "brendongo", "createdAt": "2020-06-03T20:02:59Z", "path": "semgrep/semgrep/cli.py", "diffHunk": "@@ -233,48 +232,43 @@ def cli() -> None:\n     # change cwd if using docker\n     semgrep.config_resolver.adjust_for_docker(args.precommit)\n \n-    try:\n-        if args.dump_ast:\n-            if not args.lang:\n-                print_error_exit(\"language must be specified to dump ASTs\")\n-            else:\n-                dump_parsed_ast(args.json, args.lang, args.pattern, args.target)\n-        elif args.validate:\n-            _, invalid_configs = semgrep.semgrep_main.get_config(\n-                args.generate_config, args.pattern, args.lang, args.config\n-            )\n-            if invalid_configs:\n-                print_error_exit(\n-                    f\"run with --validate and there were {len(invalid_configs)} errors loading configs\"\n-                )\n-            else:\n-                print_error(\"Config is valid\")\n-\n-        elif args.test:\n-            semgrep.test.test_main(args)\n+    if args.dump_ast:\n+        if not args.lang:\n+            print_error_exit(\"language must be specified to dump ASTs\")\n         else:\n-            semgrep.semgrep_main.main(\n-                target=args.target,\n-                pattern=args.pattern,\n-                lang=args.lang,\n-                config=args.config,\n-                generate_config=args.generate_config,\n-                no_rewrite_rule_ids=args.no_rewrite_rule_ids,\n-                jobs=args.jobs,\n-                include=args.include,\n-                include_dir=args.include_dir,\n-                exclude=args.exclude,\n-                exclude_dir=args.exclude_dir,\n-                json_format=args.json,\n-                sarif=args.sarif,\n-                output_destination=args.output,\n-                quiet=args.quiet,\n-                strict=args.strict,\n-                exit_on_error=args.error,\n-                autofix=args.autofix,\n-                dangerously_allow_arbitrary_code_execution_from_rules=args.dangerously_allow_arbitrary_code_execution_from_rules,\n+            dump_parsed_ast(args.json, args.lang, args.pattern, args.target)\n+    elif args.validate:\n+        _, invalid_configs = semgrep.semgrep_main.get_config(\n+            args.generate_config, args.pattern, args.lang, args.config\n+        )\n+        if invalid_configs:\n+            print_error_exit(\n+                f\"run with --validate and there were {len(invalid_configs)} errors loading configs\"\n             )\n-    except NotImplementedError as ex:", "originalCommit": "ff3e50524f0a21c66f3b7afeca8bcc37d7260944", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzMDE3OA==", "url": "https://github.com/returntocorp/semgrep/pull/904#discussion_r434830178", "bodyText": "Ooops, forgot to submit my comments. Addressed below...", "author": "mschwager", "createdAt": "2020-06-03T20:20:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMTU5MA=="}], "type": "inlineReview"}, {"oid": "d3104c9c8b117531c90ee822e8803612b97ba713", "url": "https://github.com/returntocorp/semgrep/commit/d3104c9c8b117531c90ee822e8803612b97ba713", "message": "Refactor user-defined exceptions", "committedDate": "2020-06-03T20:15:51Z", "type": "commit"}, {"oid": "d3104c9c8b117531c90ee822e8803612b97ba713", "url": "https://github.com/returntocorp/semgrep/commit/d3104c9c8b117531c90ee822e8803612b97ba713", "message": "Refactor user-defined exceptions", "committedDate": "2020-06-03T20:15:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxOTg1NQ==", "url": "https://github.com/returntocorp/semgrep/pull/904#discussion_r434819855", "bodyText": "Most of this work built on the Python docs User-defined Exceptions. They recommend ended with \"Error\" instead of \"Exception.\"", "author": "mschwager", "createdAt": "2020-06-03T19:59:25Z", "path": "semgrep/semgrep/error.py", "diffHunk": "@@ -1,20 +1,24 @@\n-from typing import Optional\n-\n-\n-class SemgrepException(Exception):\n+class SemgrepError(Exception):", "originalCommit": "ff3e50524f0a21c66f3b7afeca8bcc37d7260944", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMDI5NA==", "url": "https://github.com/returntocorp/semgrep/pull/904#discussion_r434820294", "bodyText": "There's no need to smuggle an additional msg attribute, we can just call str(e) to get the message.", "author": "mschwager", "createdAt": "2020-06-03T20:00:21Z", "path": "semgrep/semgrep/error.py", "diffHunk": "@@ -1,20 +1,24 @@\n-from typing import Optional\n-\n-\n-class SemgrepException(Exception):\n+class SemgrepError(Exception):\n     \"\"\"\n     Parent class of all exceptions we anticipate in Semgrep commands\n \n     All Semgrep Exceptions are caught and their error messages\n     are displayed to the user.\n     \"\"\"\n \n-    def __init__(self) -> None:\n-        self.msg: Optional[str] = None", "originalCommit": "ff3e50524f0a21c66f3b7afeca8bcc37d7260944", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMDQ3MQ==", "url": "https://github.com/returntocorp/semgrep/pull/904#discussion_r434820471", "bodyText": "This wasn't used anywhere that I could find.", "author": "mschwager", "createdAt": "2020-06-03T20:00:41Z", "path": "semgrep/semgrep/error.py", "diffHunk": "@@ -1,20 +1,24 @@\n-from typing import Optional\n-\n-\n-class SemgrepException(Exception):\n+class SemgrepError(Exception):\n     \"\"\"\n     Parent class of all exceptions we anticipate in Semgrep commands\n \n     All Semgrep Exceptions are caught and their error messages\n     are displayed to the user.\n     \"\"\"\n \n-    def __init__(self) -> None:\n-        self.msg: Optional[str] = None\n-        self.code = 1\n+    def __init__(self, *args: object, code: int = 1) -> None:\n+        self.code = code\n+\n+        super().__init__(*args)\n+\n+\n+class InvalidRuleSchemaError(SemgrepError):\n+    pass\n+\n+\n+class InvalidPatternNameError(SemgrepError):\n+    pass\n \n \n-class OutdatedPythonException(SemgrepException):", "originalCommit": "ff3e50524f0a21c66f3b7afeca8bcc37d7260944", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMzE1MA==", "url": "https://github.com/returntocorp/semgrep/pull/904#discussion_r434823150", "bodyText": "We were raising NotImplementedError in a few different places, but I don't believe that's the intended use of NotImplementedError. It's mostly for raising in a base class function that should never be called directly, but instead via a child class implementation, not for normal unimplemented functionality:\nIn [21]: NotImplementedError?                                                                           \nInit signature: NotImplementedError(self, /, *args, **kwargs)\nDocstring:      Method or function hasn't been implemented yet.\nType:           type\nSubclasses:     StdinNotImplementedError\nIt's better to catch our own internally defined errors here anyway rather than re-purposing NotImplementedError. And finally, we can totally remove this try/except because the only place the cli function is called is in __main__ and it's wrapped in a SemgrepError try/except there.", "author": "mschwager", "createdAt": "2020-06-03T20:06:01Z", "path": "semgrep/semgrep/cli.py", "diffHunk": "@@ -233,48 +232,43 @@ def cli() -> None:\n     # change cwd if using docker\n     semgrep.config_resolver.adjust_for_docker(args.precommit)\n \n-    try:\n-        if args.dump_ast:\n-            if not args.lang:\n-                print_error_exit(\"language must be specified to dump ASTs\")\n-            else:\n-                dump_parsed_ast(args.json, args.lang, args.pattern, args.target)\n-        elif args.validate:\n-            _, invalid_configs = semgrep.semgrep_main.get_config(\n-                args.generate_config, args.pattern, args.lang, args.config\n-            )\n-            if invalid_configs:\n-                print_error_exit(\n-                    f\"run with --validate and there were {len(invalid_configs)} errors loading configs\"\n-                )\n-            else:\n-                print_error(\"Config is valid\")\n-\n-        elif args.test:\n-            semgrep.test.test_main(args)\n+    if args.dump_ast:\n+        if not args.lang:\n+            print_error_exit(\"language must be specified to dump ASTs\")\n         else:\n-            semgrep.semgrep_main.main(\n-                target=args.target,\n-                pattern=args.pattern,\n-                lang=args.lang,\n-                config=args.config,\n-                generate_config=args.generate_config,\n-                no_rewrite_rule_ids=args.no_rewrite_rule_ids,\n-                jobs=args.jobs,\n-                include=args.include,\n-                include_dir=args.include_dir,\n-                exclude=args.exclude,\n-                exclude_dir=args.exclude_dir,\n-                json_format=args.json,\n-                sarif=args.sarif,\n-                output_destination=args.output,\n-                quiet=args.quiet,\n-                strict=args.strict,\n-                exit_on_error=args.error,\n-                autofix=args.autofix,\n-                dangerously_allow_arbitrary_code_execution_from_rules=args.dangerously_allow_arbitrary_code_execution_from_rules,\n+            dump_parsed_ast(args.json, args.lang, args.pattern, args.target)\n+    elif args.validate:\n+        _, invalid_configs = semgrep.semgrep_main.get_config(\n+            args.generate_config, args.pattern, args.lang, args.config\n+        )\n+        if invalid_configs:\n+            print_error_exit(\n+                f\"run with --validate and there were {len(invalid_configs)} errors loading configs\"\n             )\n-    except NotImplementedError as ex:", "originalCommit": "ff3e50524f0a21c66f3b7afeca8bcc37d7260944", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyNDU5NA==", "url": "https://github.com/returntocorp/semgrep/pull/904#discussion_r434824594", "bodyText": "I don't think this error message was very useful, an error here could have been their fault. For example, if they use an unknown pattern operator it is their fault and they probably shouldn't file an issue in this situation:\ntest.yaml has invalid rule key {'pattern-unknown'} at rule id test-parent, can only have: {'metadata', 'fix', 'patterns', 'pattern', 'severity', 'equivalences', 'id', 'languages', 'pattern-regex', 'paths', 'pattern-either', 'message'}\nno valid configuration file found (1 configs were invalid)\n\nNote this case is now being handled in __main__.", "author": "mschwager", "createdAt": "2020-06-03T20:09:02Z", "path": "semgrep/semgrep/cli.py", "diffHunk": "@@ -233,48 +232,43 @@ def cli() -> None:\n     # change cwd if using docker\n     semgrep.config_resolver.adjust_for_docker(args.precommit)\n \n-    try:\n-        if args.dump_ast:\n-            if not args.lang:\n-                print_error_exit(\"language must be specified to dump ASTs\")\n-            else:\n-                dump_parsed_ast(args.json, args.lang, args.pattern, args.target)\n-        elif args.validate:\n-            _, invalid_configs = semgrep.semgrep_main.get_config(\n-                args.generate_config, args.pattern, args.lang, args.config\n-            )\n-            if invalid_configs:\n-                print_error_exit(\n-                    f\"run with --validate and there were {len(invalid_configs)} errors loading configs\"\n-                )\n-            else:\n-                print_error(\"Config is valid\")\n-\n-        elif args.test:\n-            semgrep.test.test_main(args)\n+    if args.dump_ast:\n+        if not args.lang:\n+            print_error_exit(\"language must be specified to dump ASTs\")\n         else:\n-            semgrep.semgrep_main.main(\n-                target=args.target,\n-                pattern=args.pattern,\n-                lang=args.lang,\n-                config=args.config,\n-                generate_config=args.generate_config,\n-                no_rewrite_rule_ids=args.no_rewrite_rule_ids,\n-                jobs=args.jobs,\n-                include=args.include,\n-                include_dir=args.include_dir,\n-                exclude=args.exclude,\n-                exclude_dir=args.exclude_dir,\n-                json_format=args.json,\n-                sarif=args.sarif,\n-                output_destination=args.output,\n-                quiet=args.quiet,\n-                strict=args.strict,\n-                exit_on_error=args.error,\n-                autofix=args.autofix,\n-                dangerously_allow_arbitrary_code_execution_from_rules=args.dangerously_allow_arbitrary_code_execution_from_rules,\n+            dump_parsed_ast(args.json, args.lang, args.pattern, args.target)\n+    elif args.validate:\n+        _, invalid_configs = semgrep.semgrep_main.get_config(\n+            args.generate_config, args.pattern, args.lang, args.config\n+        )\n+        if invalid_configs:\n+            print_error_exit(\n+                f\"run with --validate and there were {len(invalid_configs)} errors loading configs\"\n             )\n-    except NotImplementedError as ex:\n-        print_error_exit(\n-            f\"semgrep encountered an error: {ex}; this is not your fault. {PLEASE_FILE_ISSUE_TEXT}\"", "originalCommit": "ff3e50524f0a21c66f3b7afeca8bcc37d7260944", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a412475d6248af5acbc109d543a52dfd2af65b49", "url": "https://github.com/returntocorp/semgrep/commit/a412475d6248af5acbc109d543a52dfd2af65b49", "message": "Remove unused import", "committedDate": "2020-06-03T20:19:07Z", "type": "commit"}]}