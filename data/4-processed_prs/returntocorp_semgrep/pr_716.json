{"pr_number": 716, "pr_title": "readme: cleanup sections", "pr_createdAt": "2020-05-07T22:02:11Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/716", "timeline": [{"oid": "8c6dfbcbaa484966c19e40c13df216f69b7f979c", "url": "https://github.com/returntocorp/semgrep/commit/8c6dfbcbaa484966c19e40c13df216f69b7f979c", "message": "readme: Make running binary primary usage\n\nPreviously readme had running in docker as the mainline way of\nshowing examples. Now that binary deploys are stable we should\nhave running the semgrep binary as the primary way of running\nsemgrep.", "committedDate": "2020-05-07T22:33:17Z", "type": "forcePushed"}, {"oid": "d0f860097cd9a03cdfc53c941aea6608f03a3bfa", "url": "https://github.com/returntocorp/semgrep/commit/d0f860097cd9a03cdfc53c941aea6608f03a3bfa", "message": "readme: clean up sections of readme", "committedDate": "2020-05-07T22:33:42Z", "type": "forcePushed"}, {"oid": "abb2bbf55d6431901f2d6231a17f763a8304222d", "url": "https://github.com/returntocorp/semgrep/commit/abb2bbf55d6431901f2d6231a17f763a8304222d", "message": "readme: clean up sections of readme", "committedDate": "2020-05-07T22:41:15Z", "type": "commit"}, {"oid": "abb2bbf55d6431901f2d6231a17f763a8304222d", "url": "https://github.com/returntocorp/semgrep/commit/abb2bbf55d6431901f2d6231a17f763a8304222d", "message": "readme: clean up sections of readme", "committedDate": "2020-05-07T22:41:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzNzQ3Nw==", "url": "https://github.com/returntocorp/semgrep/pull/716#discussion_r421837477", "bodyText": "We already have running semgrep --config r2c elsewhere on the readme", "author": "brendongo", "createdAt": "2020-05-07T22:47:22Z", "path": "README.md", "diffHunk": "@@ -65,29 +68,9 @@ This is a bug. Let's use `semgrep` to find bugs like it, using a simple search p\n ```\n $ semgrep --lang python --pattern '$X == $X' test.py\n test.py\n-rule:python.deadcode.eqeq-is-bad: useless comparison operation `node.id == node.id` or `node.id != node.id`.\n 3:        if node.id == node.id:  # Oops, supposed to be 'node_id'\n ```\n \n-### r2c-developed Rules", "originalCommit": "abb2bbf55d6431901f2d6231a17f763a8304222d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzNzY0Mw==", "url": "https://github.com/returntocorp/semgrep/pull/716#discussion_r421837643", "bodyText": "We already talk about custom rules in the configuration files section below.", "author": "brendongo", "createdAt": "2020-05-07T22:47:52Z", "path": "README.md", "diffHunk": "@@ -65,29 +68,9 @@ This is a bug. Let's use `semgrep` to find bugs like it, using a simple search p\n ```\n $ semgrep --lang python --pattern '$X == $X' test.py\n test.py\n-rule:python.deadcode.eqeq-is-bad: useless comparison operation `node.id == node.id` or `node.id != node.id`.\n 3:        if node.id == node.id:  # Oops, supposed to be 'node_id'\n ```\n \n-### r2c-developed Rules\n-\n-You can use rules developed by [r2c](https://r2c.dev) to search for issues in your codebase:\n-\n-```bash\n-cd /path/to/code\n-semgrep --config r2c\n-```\n-\n-### Custom Rules\n-\n-You can also [create your own rules](docs/configuration-files.md):", "originalCommit": "abb2bbf55d6431901f2d6231a17f763a8304222d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzNzgzNQ==", "url": "https://github.com/returntocorp/semgrep/pull/716#discussion_r421837835", "bodyText": "It wasn't clear before what semgrep actually did with equivalences.", "author": "brendongo", "createdAt": "2020-05-07T22:48:28Z", "path": "README.md", "diffHunk": "@@ -168,14 +145,15 @@ see the [configuration documentation](docs/configuration-files.md).**\n \n Equivalences are another key concept in `semgrep`. `semgrep` automatically searches\n for code that is semantically equivalent. For example, the following patterns\n-are semantically equivalent\n+are semantically equivalent. The pattern `subprocess.Popen(...)` will fire on both.", "originalCommit": "abb2bbf55d6431901f2d6231a17f763a8304222d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}