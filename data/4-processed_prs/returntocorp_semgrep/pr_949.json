{"pr_number": 949, "pr_title": "Update README and docs to be more clear and intuitive to new users", "pr_createdAt": "2020-06-09T18:45:13Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/949", "timeline": [{"oid": "20821ea4af43ff916ca2f840539a781c14ea1026", "url": "https://github.com/returntocorp/semgrep/commit/20821ea4af43ff916ca2f840539a781c14ea1026", "message": "WIP updates to README, still need to move some content to supporting docs", "committedDate": "2020-06-02T23:43:56Z", "type": "commit"}, {"oid": "9fa2a0e92afb795530b2636131cbe4ca280d1e9d", "url": "https://github.com/returntocorp/semgrep/commit/9fa2a0e92afb795530b2636131cbe4ca280d1e9d", "message": "merge", "committedDate": "2020-06-09T17:18:43Z", "type": "commit"}, {"oid": "daa79c7e3d88d53ef188852c684392dbe1953049", "url": "https://github.com/returntocorp/semgrep/commit/daa79c7e3d88d53ef188852c684392dbe1953049", "message": "Finish updates", "committedDate": "2020-06-09T18:40:03Z", "type": "commit"}, {"oid": "a3e23b7c5399a45629eeaee0fe70cca928e2f804", "url": "https://github.com/returntocorp/semgrep/commit/a3e23b7c5399a45629eeaee0fe70cca928e2f804", "message": "merge", "committedDate": "2020-06-09T18:41:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2MDQ3Ng==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437660476", "bodyText": "@clintgibler could you comment on why you removed this? this is actually the only place we have \"pattern X matches code Y\" and I would miss it if it was gone -- it's a nice easy way to grok the syntax deductively.", "author": "ievans", "createdAt": "2020-06-09T19:16:05Z", "path": "README.md", "diffHunk": "@@ -4,216 +4,311 @@\n [![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n [![r2c Twitter](https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue)](https://twitter.com/intent/follow?screen_name=r2cdev)\n \n-`semgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n-your codebase. It combines the convenience of `grep` with the correctness of\n-syntactical and semantic search. Developers, DevOps engineers, and security engineers\n-use `semgrep` to write code with confidence.\n+<p align=\"center\">\n+  <a href=\"#overview\">Overview</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#installation\">Installation</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#usage\">Usage</a>\n+  <br/>\n+  <a href=\"#resources\">Resources</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#contributing\">Contributing</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#commercial-support\">Commercial Support</a>\n+</p>\n+\n+<h3 align=\"center\">\n+  A fast, lightweight static analysis tool that lets you search code like you\u2019d write it.\n+</h3>  \n+<h3 align=\"center\">\n+  Find security bugs. Enforce coding standards. Scan every PR.\n+</h3>\n+<h3 align=\"center\">  \n+  Easily block bad code so you can get back to building the next great thing.\n+</h3>\n+\n+Semgrep is a tool for easily detecting and preventing bugs and anti-patterns\n+in your codebase. It combines the convenience and rapid iteration speed of\n+`grep`, but is \"code-aware\"; that is, you can easily match function calls, class\n+or method definitions, and more.\n \n-**Try it now:** [https://semgrep.live](https://semgrep.live/)\n+## Quickstart\n+\n+After [installing semgrep](#installation), run the default set of checks with:\n+\n+```bash\n+$ semgrep --config=r2c path/to/repo\n+```\n+\n+Or try Semgrep in your browser: [https://semgrep.live](https://semgrep.live/).\n \n ## Overview\n \n-Language support:\n+### Key features\n+\n+* **Language aware**: Semgrep parses source code into Abstract Syntax Trees (ASTs), so it understands function calls, method and class definitions, conditionals, and more. \n+  * Unlike regexes, Semgrep won't get tripped up matching things you don't care about in comments or string literals.\n+* **Fast**: Speedy enough to run on every build, commit, or file save.\n+* **Batteries included**: Leverage hundreds of preexisting security checks for popular languages and frameworks in the community [registry](https://semgrep.live/r), including coverage for the [OWASP Top 10](https://owasp.org/www-project-top-ten/).\n+* **Handles multiple languages**: No need to learn and maintain multiple tools for your polyglot environment (e.g. ESLint, find-sec-bugs, rubocop, gosec, ...).\n+* **Easy to tweak**: Rules look like the code you\u2019re searching, no static analysis PhD required.\n+* Does **not** require compilation, Semgrep runs on source code directly. \n+* **Easy to integrate**: Highly portable and many CI and git hook integrations already exist. Run via CLI or Docker, output `--json` and pipe results into whatever system you want.\n+\n+\n+### Language support\n+\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Ruby** | **Typescript** | **PHP &nbsp; &nbsp;** |\n+|:-----------|:---------------|:----------------------------|:----------------|:----------------------------------|:---------|:---------------|:----------------------|\n+| \u2705          | \u2705              | \u2705                           | \u2705               | \u2705                                 | \ud83d\udea7 |  Coming...      | Coming...             |\n+\n+... and many more coming.\n+\n+### Pattern Syntax Teaser\n \n-| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n-|:-----------|:---------------|:----------------------------|:----------------|:----------------------------------|:---------------|:----------------------|\n-| \u2705          | \u2705              | \u2705                           | \u2705               | \u2705                                 | Coming...      | Coming...             |\n+One of the most unique and useful things about Semgrep is how easy it is to write and iterate on queries. \n \n-Example patterns:\n+The goal is to make it as *easy as possible* to go from an idea in your head to finding the code patterns you intend to.\n \n-| **Pattern**                                                        | **Matches**                                                |", "originalCommit": "a3e23b7c5399a45629eeaee0fe70cca928e2f804", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3MDA1Mw==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437670053", "bodyText": "@ievans Agreed, I like having a brief table of \"pattern X matches Y code.\"\nTo me, maybe it was some sort of combination of the patterns being links, the denseness of the table, maybe the patterns themselves - it felt a bit cluttered and hard to read / unintuitive. I felt like I had to focus to understand what each row was trying to convey, and that it wasn't obvious.\nI'm happy to put this back as is, but at some point I'd like to either change the formatting, the code snippets, or somehow make the examples pop more / be clearer.", "author": "clintgibler", "createdAt": "2020-06-09T19:34:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2MDQ3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczMzMwNg==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437733306", "bodyText": "From a user:\n\n$X == $X is not narratively very poignant to me. It makes it looks like it\u2019s just for code patterns, not variant analysis", "author": "dlukeomalley", "createdAt": "2020-06-09T21:29:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2MDQ3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyODE4Ng==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r438428186", "bodyText": "@dlukeomalley I vote for creating a separate issue to track updating examples in the table if that's something we want to do later.", "author": "clintgibler", "createdAt": "2020-06-10T21:50:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2MDQ3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2MDczMg==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437660732", "bodyText": "pet peeve but I'd suggest removing this $ and the one blow, if you know what brew is you don't need a $ reminder and it is always annoying to not be able to triple-click and paste", "author": "ievans", "createdAt": "2020-06-09T19:16:33Z", "path": "README.md", "diffHunk": "@@ -4,216 +4,311 @@\n [![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n [![r2c Twitter](https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue)](https://twitter.com/intent/follow?screen_name=r2cdev)\n \n-`semgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n-your codebase. It combines the convenience of `grep` with the correctness of\n-syntactical and semantic search. Developers, DevOps engineers, and security engineers\n-use `semgrep` to write code with confidence.\n+<p align=\"center\">\n+  <a href=\"#overview\">Overview</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#installation\">Installation</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#usage\">Usage</a>\n+  <br/>\n+  <a href=\"#resources\">Resources</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#contributing\">Contributing</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#commercial-support\">Commercial Support</a>\n+</p>\n+\n+<h3 align=\"center\">\n+  A fast, lightweight static analysis tool that lets you search code like you\u2019d write it.\n+</h3>  \n+<h3 align=\"center\">\n+  Find security bugs. Enforce coding standards. Scan every PR.\n+</h3>\n+<h3 align=\"center\">  \n+  Easily block bad code so you can get back to building the next great thing.\n+</h3>\n+\n+Semgrep is a tool for easily detecting and preventing bugs and anti-patterns\n+in your codebase. It combines the convenience and rapid iteration speed of\n+`grep`, but is \"code-aware\"; that is, you can easily match function calls, class\n+or method definitions, and more.\n \n-**Try it now:** [https://semgrep.live](https://semgrep.live/)\n+## Quickstart\n+\n+After [installing semgrep](#installation), run the default set of checks with:\n+\n+```bash\n+$ semgrep --config=r2c path/to/repo\n+```\n+\n+Or try Semgrep in your browser: [https://semgrep.live](https://semgrep.live/).\n \n ## Overview\n \n-Language support:\n+### Key features\n+\n+* **Language aware**: Semgrep parses source code into Abstract Syntax Trees (ASTs), so it understands function calls, method and class definitions, conditionals, and more. \n+  * Unlike regexes, Semgrep won't get tripped up matching things you don't care about in comments or string literals.\n+* **Fast**: Speedy enough to run on every build, commit, or file save.\n+* **Batteries included**: Leverage hundreds of preexisting security checks for popular languages and frameworks in the community [registry](https://semgrep.live/r), including coverage for the [OWASP Top 10](https://owasp.org/www-project-top-ten/).\n+* **Handles multiple languages**: No need to learn and maintain multiple tools for your polyglot environment (e.g. ESLint, find-sec-bugs, rubocop, gosec, ...).\n+* **Easy to tweak**: Rules look like the code you\u2019re searching, no static analysis PhD required.\n+* Does **not** require compilation, Semgrep runs on source code directly. \n+* **Easy to integrate**: Highly portable and many CI and git hook integrations already exist. Run via CLI or Docker, output `--json` and pipe results into whatever system you want.\n+\n+\n+### Language support\n+\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Ruby** | **Typescript** | **PHP &nbsp; &nbsp;** |\n+|:-----------|:---------------|:----------------------------|:----------------|:----------------------------------|:---------|:---------------|:----------------------|\n+| \u2705          | \u2705              | \u2705                           | \u2705               | \u2705                                 | \ud83d\udea7 |  Coming...      | Coming...             |\n+\n+... and many more coming.\n+\n+### Pattern Syntax Teaser\n \n-| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n-|:-----------|:---------------|:----------------------------|:----------------|:----------------------------------|:---------------|:----------------------|\n-| \u2705          | \u2705              | \u2705                           | \u2705               | \u2705                                 | Coming...      | Coming...             |\n+One of the most unique and useful things about Semgrep is how easy it is to write and iterate on queries. \n \n-Example patterns:\n+The goal is to make it as *easy as possible* to go from an idea in your head to finding the code patterns you intend to.\n \n-| **Pattern**                                                        | **Matches**                                                |\n-|:-------------------------------------------------------------------|:-----------------------------------------------------------|\n-| [`$X == $X`](https://semgrep.live/20B)                             | `if (node.id == node.id): ...`                             |\n-| [`requests.get(..., verify=False, ...)`](https://semgrep.live/jqn) | `requests.get(url, timeout=3, verify=False)`               |\n-| [`os.system(...)`](https://semgrep.live/1W5)                       | `from os import system; system('echo semgrep')`            |\n-| [`$ELEMENT.innerHTML`](https://semgrep.live/9ze)                   | ``el.innerHTML = \"<img src='x' onerror='alert(`XSS`)'>\";`` |\n-| [`$TOKEN.SignedString([]byte(\"...\"))`](https://semgrep.live/rXW)   | `ss, err := token.SignedString([]byte(\"HARDCODED KEY\"))`   |\n+**Example**: Let's say you want to find all calls to a function named `exec`, and you don't care about the arguments. With Semgrep, you could simply supply the pattern `exec(...)` and you'd match:\n \n-\u2192 [see more example patterns in the live registry viewer](https://semgrep.live/registry)\n+~~~python\n+# Simple cases grep could find\n+exec(\"ls\")\n+exec(some_var)\n+\n+# But you don't have to worry about whitespace\n+exec (foo)\n+\n+# Or calls across multiple lines\n+exec (\n+    bar\n+)\n+~~~\n+\n+Importantly, Semgrep would *not* match the following:\n+\n+~~~python\n+# grep would match this, but semgrep ignores it because \n+# it doesn't have the right function name\n+other_exec(bar)\n+\n+# semgrep ignores commented out lines\n+# exec(foo)\n+\n+# and hard-coded strings\n+print(\"exec(bar)\")\n+~~~\n+\n+Semgrep can even do fancy things like matching aliased imports:\n+\n+~~~python\n+# Semgrep knows that safe_function refers to exec so it\n+# will still match!\n+#   Oof, try finding this with grep\n+import exec as safe_function\n+safe_function(tricksy)\n+~~~\n+\n+Play with this example in your browser here: https://semgrep.live/QrkD.\n+\n+For more info on what you can do in patterns, see the [pattern features\n+docs](docs/pattern-features.md).\n \n ## Installation\n \n On macOS, binaries are available via [Homebrew](https://formulae.brew.sh/formula/semgrep):\n \n ```bash\n-brew install returntocorp/semgrep/semgrep\n+$ brew install returntocorp/semgrep/semgrep", "originalCommit": "a3e23b7c5399a45629eeaee0fe70cca928e2f804", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2ODA3Mw==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437668073", "bodyText": "Sure, happy to do that! To me, the $ is a nice signal that you're at a terminal vs its a code snippet, but agreed re: it makes it annoying to copy/paste. And if you're reading about Semgrep, you're probably comfortable with the terminal.", "author": "clintgibler", "createdAt": "2020-06-09T19:30:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2MDczMg=="}], "type": "inlineReview"}, {"oid": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "url": "https://github.com/returntocorp/semgrep/commit/6e24502ba50de118b730dd1e7e7305f5fc226e85", "message": "Remove $ from bash commands, add back in pattern example table", "committedDate": "2020-06-09T19:39:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY4OTY5MQ==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437689691", "bodyText": "IMO the styling and hierarchy of these three <h3>s make them seem like competing descriptions and/or taglines. I\u2019d suggest either moving one to a top-level (above the badges, for example), or moving all three to a bullet list like:\nWith Semgrep, you can:\n\nsearch code like you\u2019d write it\nfind security bugs\nenforce coding standards\nscan every PR or build\nEasily block bad code so you can get back to building the next great thing.", "author": "pabloest", "createdAt": "2020-06-09T20:11:43Z", "path": "README.md", "diffHunk": "@@ -4,22 +4,116 @@\n [![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n [![r2c Twitter](https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue)](https://twitter.com/intent/follow?screen_name=r2cdev)\n \n-`semgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n-your codebase. It combines the convenience of `grep` with the correctness of\n-syntactical and semantic search. Developers, DevOps engineers, and security engineers\n-use `semgrep` to write code with confidence.\n+<p align=\"center\">\n+  <a href=\"#overview\">Overview</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#installation\">Installation</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#usage\">Usage</a>\n+  <br/>\n+  <a href=\"#resources\">Resources</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#contributing\">Contributing</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#commercial-support\">Commercial Support</a>\n+</p>\n+\n+<h3 align=\"center\">\n+  A fast, lightweight static analysis tool that lets you search code like you\u2019d write it.\n+</h3>  \n+<h3 align=\"center\">\n+  Find security bugs. Enforce coding standards. Scan every PR.\n+</h3>\n+<h3 align=\"center\">  \n+  Easily block bad code so you can get back to building the next great thing.\n+</h3>", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyMjYxOQ==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437722619", "bodyText": "I had a similar reaction. Would you support me pulling the Bento README styling here, using the Semgrep logo, tagline, and your hierarchy changes?\n\nWhat I like about how we laid out our other README is that navigation elements came before badges and other secondary information.\nConcretely, I think I would use a tagline like:\n\nFast and customizable static analysis for many languages. Find code matches the way you'd write them.\n\nI'm trying to find a succinct way of emphasizing speed and simplicity. My suggestion needs work :)", "author": "dlukeomalley", "createdAt": "2020-06-09T21:06:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY4OTY5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY5MjI1OQ==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437692259", "bodyText": "On semgrep.live we\u2019ve described these as rules, not checks (AFAICT). Not sure if that was a deliberate decision or not. cc @dlukeomalley", "author": "pabloest", "createdAt": "2020-06-09T20:16:31Z", "path": "README.md", "diffHunk": "@@ -4,22 +4,116 @@\n [![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n [![r2c Twitter](https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue)](https://twitter.com/intent/follow?screen_name=r2cdev)\n \n-`semgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n-your codebase. It combines the convenience of `grep` with the correctness of\n-syntactical and semantic search. Developers, DevOps engineers, and security engineers\n-use `semgrep` to write code with confidence.\n+<p align=\"center\">\n+  <a href=\"#overview\">Overview</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#installation\">Installation</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#usage\">Usage</a>\n+  <br/>\n+  <a href=\"#resources\">Resources</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#contributing\">Contributing</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#commercial-support\">Commercial Support</a>\n+</p>\n+\n+<h3 align=\"center\">\n+  A fast, lightweight static analysis tool that lets you search code like you\u2019d write it.\n+</h3>  \n+<h3 align=\"center\">\n+  Find security bugs. Enforce coding standards. Scan every PR.\n+</h3>\n+<h3 align=\"center\">  \n+  Easily block bad code so you can get back to building the next great thing.\n+</h3>\n+\n+Semgrep is a tool for easily detecting and preventing bugs and anti-patterns\n+in your codebase. It combines the convenience and rapid iteration speed of\n+`grep`, but is \"code-aware\"; that is, you can easily match function calls, class\n+or method definitions, and more.\n+\n+## Quickstart\n+\n+After [installing semgrep](#installation), run the default set of checks with:", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyNTMwNQ==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437725305", "bodyText": "We should standardize, though I'm sufficiently confused about both terms that I don't have a preference. We use them both interchangeably in our conversations.", "author": "dlukeomalley", "createdAt": "2020-06-09T21:11:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY5MjI1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxODU0Nw==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r438418547", "bodyText": "I've changed this to \"rule\". We do use them interchangeabley various places and we should decide on one.", "author": "clintgibler", "createdAt": "2020-06-10T21:28:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY5MjI1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyNzc5Mw==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r438427793", "bodyText": "Let\u2019s use \u201crule.\u201d Any objections?", "author": "pabloest", "createdAt": "2020-06-10T21:49:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY5MjI1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY5Mjc5Mw==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437692793", "bodyText": "I love this section.", "author": "pabloest", "createdAt": "2020-06-09T20:17:34Z", "path": "README.md", "diffHunk": "@@ -4,22 +4,116 @@\n [![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n [![r2c Twitter](https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue)](https://twitter.com/intent/follow?screen_name=r2cdev)\n \n-`semgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n-your codebase. It combines the convenience of `grep` with the correctness of\n-syntactical and semantic search. Developers, DevOps engineers, and security engineers\n-use `semgrep` to write code with confidence.\n+<p align=\"center\">\n+  <a href=\"#overview\">Overview</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#installation\">Installation</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#usage\">Usage</a>\n+  <br/>\n+  <a href=\"#resources\">Resources</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#contributing\">Contributing</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#commercial-support\">Commercial Support</a>\n+</p>\n+\n+<h3 align=\"center\">\n+  A fast, lightweight static analysis tool that lets you search code like you\u2019d write it.\n+</h3>  \n+<h3 align=\"center\">\n+  Find security bugs. Enforce coding standards. Scan every PR.\n+</h3>\n+<h3 align=\"center\">  \n+  Easily block bad code so you can get back to building the next great thing.\n+</h3>\n+\n+Semgrep is a tool for easily detecting and preventing bugs and anti-patterns\n+in your codebase. It combines the convenience and rapid iteration speed of\n+`grep`, but is \"code-aware\"; that is, you can easily match function calls, class\n+or method definitions, and more.\n+\n+## Quickstart\n+\n+After [installing semgrep](#installation), run the default set of checks with:\n+\n+```bash\n+semgrep --config=r2c path/to/repo\n+```\n \n-**Try it now:** [https://semgrep.live](https://semgrep.live/)\n+Or try Semgrep in your browser: [https://semgrep.live](https://semgrep.live/).\n \n ## Overview\n \n-Language support:\n+### Key features", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyODc4MA==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437728780", "bodyText": "Ditto. Questions:\n\nCan we compress it from 7 items to 5? We're just at the edge of the lower bound of Miller's Law?\nMay we consistently prefix each point with a succinct phrase. Item 6 is missing a prefix?", "author": "dlukeomalley", "createdAt": "2020-06-09T21:19:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY5Mjc5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyNDUxNw==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r438424517", "bodyText": "@dlukeomalley It would be nice to compress to 5 but I don't know if there are any of these I'd cut, and unclear how they could be combined. Suggestions welcomed.", "author": "clintgibler", "createdAt": "2020-06-10T21:41:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY5Mjc5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY5MzQ4MQ==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437693481", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * **Batteries included**: Leverage hundreds of preexisting security checks for popular languages and frameworks in the community [registry](https://semgrep.live/r), including coverage for the [OWASP Top 10](https://owasp.org/www-project-top-ten/).\n          \n          \n            \n            * **Batteries included**: Leverage hundreds of pre-built rules for popular languages and frameworks in the community [registry](https://semgrep.live/r), including coverage for the [OWASP Top 10](https://owasp.org/www-project-top-ten/).\n          \n      \n    \n    \n  \n\n(matching with what\u2019s going to go live on the semgrep.live page)", "author": "pabloest", "createdAt": "2020-06-09T20:19:01Z", "path": "README.md", "diffHunk": "@@ -4,22 +4,116 @@\n [![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n [![r2c Twitter](https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue)](https://twitter.com/intent/follow?screen_name=r2cdev)\n \n-`semgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n-your codebase. It combines the convenience of `grep` with the correctness of\n-syntactical and semantic search. Developers, DevOps engineers, and security engineers\n-use `semgrep` to write code with confidence.\n+<p align=\"center\">\n+  <a href=\"#overview\">Overview</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#installation\">Installation</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#usage\">Usage</a>\n+  <br/>\n+  <a href=\"#resources\">Resources</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#contributing\">Contributing</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#commercial-support\">Commercial Support</a>\n+</p>\n+\n+<h3 align=\"center\">\n+  A fast, lightweight static analysis tool that lets you search code like you\u2019d write it.\n+</h3>  \n+<h3 align=\"center\">\n+  Find security bugs. Enforce coding standards. Scan every PR.\n+</h3>\n+<h3 align=\"center\">  \n+  Easily block bad code so you can get back to building the next great thing.\n+</h3>\n+\n+Semgrep is a tool for easily detecting and preventing bugs and anti-patterns\n+in your codebase. It combines the convenience and rapid iteration speed of\n+`grep`, but is \"code-aware\"; that is, you can easily match function calls, class\n+or method definitions, and more.\n+\n+## Quickstart\n+\n+After [installing semgrep](#installation), run the default set of checks with:\n+\n+```bash\n+semgrep --config=r2c path/to/repo\n+```\n \n-**Try it now:** [https://semgrep.live](https://semgrep.live/)\n+Or try Semgrep in your browser: [https://semgrep.live](https://semgrep.live/).\n \n ## Overview\n \n-Language support:\n+### Key features\n+\n+* **Language aware**: Semgrep parses source code into Abstract Syntax Trees (ASTs), so it understands function calls, method and class definitions, conditionals, and more. \n+  * Unlike regexes, Semgrep won't get tripped up matching things you don't care about in comments or string literals.\n+* **Fast**: Speedy enough to run on every build, commit, or file save.\n+* **Batteries included**: Leverage hundreds of preexisting security checks for popular languages and frameworks in the community [registry](https://semgrep.live/r), including coverage for the [OWASP Top 10](https://owasp.org/www-project-top-ten/).", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY5NDI5Mw==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437694293", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Ruby** | **Typescript** | **PHP &nbsp; &nbsp;** |\n          \n          \n            \n            | **Python** | **JavaScript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Ruby** | **TypeScript** | **PHP &nbsp; &nbsp;** |", "author": "pabloest", "createdAt": "2020-06-09T20:20:32Z", "path": "README.md", "diffHunk": "@@ -4,22 +4,116 @@\n [![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n [![r2c Twitter](https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue)](https://twitter.com/intent/follow?screen_name=r2cdev)\n \n-`semgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n-your codebase. It combines the convenience of `grep` with the correctness of\n-syntactical and semantic search. Developers, DevOps engineers, and security engineers\n-use `semgrep` to write code with confidence.\n+<p align=\"center\">\n+  <a href=\"#overview\">Overview</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#installation\">Installation</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#usage\">Usage</a>\n+  <br/>\n+  <a href=\"#resources\">Resources</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#contributing\">Contributing</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#commercial-support\">Commercial Support</a>\n+</p>\n+\n+<h3 align=\"center\">\n+  A fast, lightweight static analysis tool that lets you search code like you\u2019d write it.\n+</h3>  \n+<h3 align=\"center\">\n+  Find security bugs. Enforce coding standards. Scan every PR.\n+</h3>\n+<h3 align=\"center\">  \n+  Easily block bad code so you can get back to building the next great thing.\n+</h3>\n+\n+Semgrep is a tool for easily detecting and preventing bugs and anti-patterns\n+in your codebase. It combines the convenience and rapid iteration speed of\n+`grep`, but is \"code-aware\"; that is, you can easily match function calls, class\n+or method definitions, and more.\n+\n+## Quickstart\n+\n+After [installing semgrep](#installation), run the default set of checks with:\n+\n+```bash\n+semgrep --config=r2c path/to/repo\n+```\n \n-**Try it now:** [https://semgrep.live](https://semgrep.live/)\n+Or try Semgrep in your browser: [https://semgrep.live](https://semgrep.live/).\n \n ## Overview\n \n-Language support:\n+### Key features\n+\n+* **Language aware**: Semgrep parses source code into Abstract Syntax Trees (ASTs), so it understands function calls, method and class definitions, conditionals, and more. \n+  * Unlike regexes, Semgrep won't get tripped up matching things you don't care about in comments or string literals.\n+* **Fast**: Speedy enough to run on every build, commit, or file save.\n+* **Batteries included**: Leverage hundreds of preexisting security checks for popular languages and frameworks in the community [registry](https://semgrep.live/r), including coverage for the [OWASP Top 10](https://owasp.org/www-project-top-ten/).\n+* **Handles multiple languages**: No need to learn and maintain multiple tools for your polyglot environment (e.g. ESLint, find-sec-bugs, rubocop, gosec, ...).\n+* **Easy to tweak**: Rules look like the code you\u2019re searching, no static analysis PhD required.\n+* Does **not** require compilation, Semgrep runs on source code directly. \n+* **Easy to integrate**: Highly portable and many CI and git hook integrations already exist. Run via CLI or Docker, output `--json` and pipe results into whatever system you want.\n+\n+\n+### Language support\n+\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Ruby** | **Typescript** | **PHP &nbsp; &nbsp;** |", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY5NTUwOQ==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437695509", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            **Example**: Let's say you want to find all calls to a function named `exec`, and you don't care about the arguments. With Semgrep, you could simply supply the pattern `exec(...)` and you'd match:\n          \n          \n            \n            **Example**: Say you want to find all calls to a function named `exec`, and you don't care about the arguments. With Semgrep, you could simply supply the pattern `exec(...)` and you'd match:\n          \n      \n    \n    \n  \n\nI avoid using the first person plural in documentation / instructions as it can get fairly messy.", "author": "pabloest", "createdAt": "2020-06-09T20:22:42Z", "path": "README.md", "diffHunk": "@@ -4,22 +4,116 @@\n [![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n [![r2c Twitter](https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue)](https://twitter.com/intent/follow?screen_name=r2cdev)\n \n-`semgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n-your codebase. It combines the convenience of `grep` with the correctness of\n-syntactical and semantic search. Developers, DevOps engineers, and security engineers\n-use `semgrep` to write code with confidence.\n+<p align=\"center\">\n+  <a href=\"#overview\">Overview</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#installation\">Installation</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#usage\">Usage</a>\n+  <br/>\n+  <a href=\"#resources\">Resources</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#contributing\">Contributing</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#commercial-support\">Commercial Support</a>\n+</p>\n+\n+<h3 align=\"center\">\n+  A fast, lightweight static analysis tool that lets you search code like you\u2019d write it.\n+</h3>  \n+<h3 align=\"center\">\n+  Find security bugs. Enforce coding standards. Scan every PR.\n+</h3>\n+<h3 align=\"center\">  \n+  Easily block bad code so you can get back to building the next great thing.\n+</h3>\n+\n+Semgrep is a tool for easily detecting and preventing bugs and anti-patterns\n+in your codebase. It combines the convenience and rapid iteration speed of\n+`grep`, but is \"code-aware\"; that is, you can easily match function calls, class\n+or method definitions, and more.\n+\n+## Quickstart\n+\n+After [installing semgrep](#installation), run the default set of checks with:\n+\n+```bash\n+semgrep --config=r2c path/to/repo\n+```\n \n-**Try it now:** [https://semgrep.live](https://semgrep.live/)\n+Or try Semgrep in your browser: [https://semgrep.live](https://semgrep.live/).\n \n ## Overview\n \n-Language support:\n+### Key features\n+\n+* **Language aware**: Semgrep parses source code into Abstract Syntax Trees (ASTs), so it understands function calls, method and class definitions, conditionals, and more. \n+  * Unlike regexes, Semgrep won't get tripped up matching things you don't care about in comments or string literals.\n+* **Fast**: Speedy enough to run on every build, commit, or file save.\n+* **Batteries included**: Leverage hundreds of preexisting security checks for popular languages and frameworks in the community [registry](https://semgrep.live/r), including coverage for the [OWASP Top 10](https://owasp.org/www-project-top-ten/).\n+* **Handles multiple languages**: No need to learn and maintain multiple tools for your polyglot environment (e.g. ESLint, find-sec-bugs, rubocop, gosec, ...).\n+* **Easy to tweak**: Rules look like the code you\u2019re searching, no static analysis PhD required.\n+* Does **not** require compilation, Semgrep runs on source code directly. \n+* **Easy to integrate**: Highly portable and many CI and git hook integrations already exist. Run via CLI or Docker, output `--json` and pipe results into whatever system you want.\n+\n+\n+### Language support\n+\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Ruby** | **Typescript** | **PHP &nbsp; &nbsp;** |\n+|:-----------|:---------------|:----------------------------|:----------------|:----------------------------------|:---------|:---------------|:----------------------|\n+| \u2705          | \u2705              | \u2705                           | \u2705               | \u2705                                 | \ud83d\udea7 |  Coming...      | Coming...             |\n+\n+... and many more coming.\n+\n+### Pattern Syntax Teaser\n+\n+One of the most unique and useful things about Semgrep is how easy it is to write and iterate on queries. \n \n-| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n-|:-----------|:---------------|:----------------------------|:----------------|:----------------------------------|:---------------|:----------------------|\n-| \u2705          | \u2705              | \u2705                           | \u2705               | \u2705                                 | Coming...      | Coming...             |\n+The goal is to make it as *easy as possible* to go from an idea in your head to finding the code patterns you intend to.\n \n-Example patterns:\n+**Example**: Let's say you want to find all calls to a function named `exec`, and you don't care about the arguments. With Semgrep, you could simply supply the pattern `exec(...)` and you'd match:", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY5NTg1OQ==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437695859", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Simple cases grep could find\n          \n          \n            \n            # Simple cases grep finds", "author": "pabloest", "createdAt": "2020-06-09T20:23:23Z", "path": "README.md", "diffHunk": "@@ -4,22 +4,116 @@\n [![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n [![r2c Twitter](https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue)](https://twitter.com/intent/follow?screen_name=r2cdev)\n \n-`semgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n-your codebase. It combines the convenience of `grep` with the correctness of\n-syntactical and semantic search. Developers, DevOps engineers, and security engineers\n-use `semgrep` to write code with confidence.\n+<p align=\"center\">\n+  <a href=\"#overview\">Overview</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#installation\">Installation</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#usage\">Usage</a>\n+  <br/>\n+  <a href=\"#resources\">Resources</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#contributing\">Contributing</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#commercial-support\">Commercial Support</a>\n+</p>\n+\n+<h3 align=\"center\">\n+  A fast, lightweight static analysis tool that lets you search code like you\u2019d write it.\n+</h3>  \n+<h3 align=\"center\">\n+  Find security bugs. Enforce coding standards. Scan every PR.\n+</h3>\n+<h3 align=\"center\">  \n+  Easily block bad code so you can get back to building the next great thing.\n+</h3>\n+\n+Semgrep is a tool for easily detecting and preventing bugs and anti-patterns\n+in your codebase. It combines the convenience and rapid iteration speed of\n+`grep`, but is \"code-aware\"; that is, you can easily match function calls, class\n+or method definitions, and more.\n+\n+## Quickstart\n+\n+After [installing semgrep](#installation), run the default set of checks with:\n+\n+```bash\n+semgrep --config=r2c path/to/repo\n+```\n \n-**Try it now:** [https://semgrep.live](https://semgrep.live/)\n+Or try Semgrep in your browser: [https://semgrep.live](https://semgrep.live/).\n \n ## Overview\n \n-Language support:\n+### Key features\n+\n+* **Language aware**: Semgrep parses source code into Abstract Syntax Trees (ASTs), so it understands function calls, method and class definitions, conditionals, and more. \n+  * Unlike regexes, Semgrep won't get tripped up matching things you don't care about in comments or string literals.\n+* **Fast**: Speedy enough to run on every build, commit, or file save.\n+* **Batteries included**: Leverage hundreds of preexisting security checks for popular languages and frameworks in the community [registry](https://semgrep.live/r), including coverage for the [OWASP Top 10](https://owasp.org/www-project-top-ten/).\n+* **Handles multiple languages**: No need to learn and maintain multiple tools for your polyglot environment (e.g. ESLint, find-sec-bugs, rubocop, gosec, ...).\n+* **Easy to tweak**: Rules look like the code you\u2019re searching, no static analysis PhD required.\n+* Does **not** require compilation, Semgrep runs on source code directly. \n+* **Easy to integrate**: Highly portable and many CI and git hook integrations already exist. Run via CLI or Docker, output `--json` and pipe results into whatever system you want.\n+\n+\n+### Language support\n+\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Ruby** | **Typescript** | **PHP &nbsp; &nbsp;** |\n+|:-----------|:---------------|:----------------------------|:----------------|:----------------------------------|:---------|:---------------|:----------------------|\n+| \u2705          | \u2705              | \u2705                           | \u2705               | \u2705                                 | \ud83d\udea7 |  Coming...      | Coming...             |\n+\n+... and many more coming.\n+\n+### Pattern Syntax Teaser\n+\n+One of the most unique and useful things about Semgrep is how easy it is to write and iterate on queries. \n \n-| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n-|:-----------|:---------------|:----------------------------|:----------------|:----------------------------------|:---------------|:----------------------|\n-| \u2705          | \u2705              | \u2705                           | \u2705               | \u2705                                 | Coming...      | Coming...             |\n+The goal is to make it as *easy as possible* to go from an idea in your head to finding the code patterns you intend to.\n \n-Example patterns:\n+**Example**: Let's say you want to find all calls to a function named `exec`, and you don't care about the arguments. With Semgrep, you could simply supply the pattern `exec(...)` and you'd match:\n+\n+~~~python\n+# Simple cases grep could find", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY5NjI3NA==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437696274", "bodyText": "NICE!", "author": "pabloest", "createdAt": "2020-06-09T20:24:13Z", "path": "README.md", "diffHunk": "@@ -4,22 +4,116 @@\n [![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n [![r2c Twitter](https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue)](https://twitter.com/intent/follow?screen_name=r2cdev)\n \n-`semgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n-your codebase. It combines the convenience of `grep` with the correctness of\n-syntactical and semantic search. Developers, DevOps engineers, and security engineers\n-use `semgrep` to write code with confidence.\n+<p align=\"center\">\n+  <a href=\"#overview\">Overview</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#installation\">Installation</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#usage\">Usage</a>\n+  <br/>\n+  <a href=\"#resources\">Resources</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#contributing\">Contributing</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#commercial-support\">Commercial Support</a>\n+</p>\n+\n+<h3 align=\"center\">\n+  A fast, lightweight static analysis tool that lets you search code like you\u2019d write it.\n+</h3>  \n+<h3 align=\"center\">\n+  Find security bugs. Enforce coding standards. Scan every PR.\n+</h3>\n+<h3 align=\"center\">  \n+  Easily block bad code so you can get back to building the next great thing.\n+</h3>\n+\n+Semgrep is a tool for easily detecting and preventing bugs and anti-patterns\n+in your codebase. It combines the convenience and rapid iteration speed of\n+`grep`, but is \"code-aware\"; that is, you can easily match function calls, class\n+or method definitions, and more.\n+\n+## Quickstart\n+\n+After [installing semgrep](#installation), run the default set of checks with:\n+\n+```bash\n+semgrep --config=r2c path/to/repo\n+```\n \n-**Try it now:** [https://semgrep.live](https://semgrep.live/)\n+Or try Semgrep in your browser: [https://semgrep.live](https://semgrep.live/).\n \n ## Overview\n \n-Language support:\n+### Key features\n+\n+* **Language aware**: Semgrep parses source code into Abstract Syntax Trees (ASTs), so it understands function calls, method and class definitions, conditionals, and more. \n+  * Unlike regexes, Semgrep won't get tripped up matching things you don't care about in comments or string literals.\n+* **Fast**: Speedy enough to run on every build, commit, or file save.\n+* **Batteries included**: Leverage hundreds of preexisting security checks for popular languages and frameworks in the community [registry](https://semgrep.live/r), including coverage for the [OWASP Top 10](https://owasp.org/www-project-top-ten/).\n+* **Handles multiple languages**: No need to learn and maintain multiple tools for your polyglot environment (e.g. ESLint, find-sec-bugs, rubocop, gosec, ...).\n+* **Easy to tweak**: Rules look like the code you\u2019re searching, no static analysis PhD required.\n+* Does **not** require compilation, Semgrep runs on source code directly. \n+* **Easy to integrate**: Highly portable and many CI and git hook integrations already exist. Run via CLI or Docker, output `--json` and pipe results into whatever system you want.\n+\n+\n+### Language support\n+\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Ruby** | **Typescript** | **PHP &nbsp; &nbsp;** |\n+|:-----------|:---------------|:----------------------------|:----------------|:----------------------------------|:---------|:---------------|:----------------------|\n+| \u2705          | \u2705              | \u2705                           | \u2705               | \u2705                                 | \ud83d\udea7 |  Coming...      | Coming...             |\n+\n+... and many more coming.\n+\n+### Pattern Syntax Teaser\n+\n+One of the most unique and useful things about Semgrep is how easy it is to write and iterate on queries. \n \n-| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n-|:-----------|:---------------|:----------------------------|:----------------|:----------------------------------|:---------------|:----------------------|\n-| \u2705          | \u2705              | \u2705                           | \u2705               | \u2705                                 | Coming...      | Coming...             |\n+The goal is to make it as *easy as possible* to go from an idea in your head to finding the code patterns you intend to.\n \n-Example patterns:\n+**Example**: Let's say you want to find all calls to a function named `exec`, and you don't care about the arguments. With Semgrep, you could simply supply the pattern `exec(...)` and you'd match:\n+\n+~~~python\n+# Simple cases grep could find\n+exec(\"ls\")\n+exec(some_var)\n+\n+# But you don't have to worry about whitespace\n+exec (foo)\n+\n+# Or calls across multiple lines\n+exec (\n+    bar\n+)\n+~~~\n+\n+Importantly, Semgrep would *not* match the following:\n+\n+~~~python\n+# grep would match this, but semgrep ignores it because \n+# it doesn't have the right function name\n+other_exec(bar)\n+\n+# semgrep ignores commented out lines\n+# exec(foo)\n+\n+# and hard-coded strings\n+print(\"exec(bar)\")\n+~~~\n+\n+Semgrep can even do fancy things like matching aliased imports:\n+\n+~~~python\n+# Semgrep knows that safe_function refers to exec so it\n+# will still match!\n+#   Oof, try finding this with grep\n+import exec as safe_function\n+safe_function(tricksy)\n+~~~\n+\n+Play with this example in your browser here: https://semgrep.live/QrkD.", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczMjg4Mw==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437732883", "bodyText": "I'd love to include a \"run this locally\" snippet for people: semgrep -l javascript -e \"exec(...)\" code", "author": "dlukeomalley", "createdAt": "2020-06-09T21:28:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY5NjI3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY5NzA1Mg==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437697052", "bodyText": "Aha, see the earlier comment about rules vs checks. I don\u2019t have a strong preference either way except that we remain consistent.", "author": "pabloest", "createdAt": "2020-06-09T20:25:43Z", "path": "README.md", "diffHunk": "@@ -44,62 +141,57 @@ On Ubuntu, an install script is available on each release [here](https://github.\n ./semgrep-v0.9.0-ubuntu-generic.sh\n ```\n \n-To try `semgrep` without installation, you can also run it via [Docker](https://docs.docker.com/install/):\n+To try Semgrep without installation, you can also run it via [Docker](https://docs.docker.com/install/):\n \n ```\n docker run --rm -v \"${PWD}:/home/repo\" returntocorp/semgrep --help\n ```\n \n-## Usage\n+## Terminology\n \n-### Example Usage\n+A **rule** (or *check*) is a Semgrep pattern that can be used to tell match", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY5NzQxNw==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437697417", "bodyText": "\u201ctell match source code\u201d seems a bit clunky.", "author": "pabloest", "createdAt": "2020-06-09T20:26:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY5NzA1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY5NzcxMA==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437697710", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. Running Semgrep in CI so every pull request (PR) is checked.\n          \n          \n            \n            1. Running Semgrep in CI so every pull request (PR) is scanned.\n          \n      \n    \n    \n  \n\n?", "author": "pabloest", "createdAt": "2020-06-09T20:27:04Z", "path": "README.md", "diffHunk": "@@ -44,62 +141,57 @@ On Ubuntu, an install script is available on each release [here](https://github.\n ./semgrep-v0.9.0-ubuntu-generic.sh\n ```\n \n-To try `semgrep` without installation, you can also run it via [Docker](https://docs.docker.com/install/):\n+To try Semgrep without installation, you can also run it via [Docker](https://docs.docker.com/install/):\n \n ```\n docker run --rm -v \"${PWD}:/home/repo\" returntocorp/semgrep --help\n ```\n \n-## Usage\n+## Terminology\n \n-### Example Usage\n+A **rule** (or *check*) is a Semgrep pattern that can be used to tell match\n+source code.\n \n-Here is a simple Python example, `test.py`. We want to retrieve an object by ID:\n+A **rule pack** (*check pack*) is a collection of Semgrep rules bundled\n+together. For example, \"Here are a bunch of Java checks I want to run.\"\n \n-```python3\n-def get_node(node_id, nodes):\n-    for node in nodes:\n-        if node.id == node.id:  # Oops, supposed to be 'node_id'\n-            return node\n-    return None\n-```\n+## Usage\n \n-This is a bug. Let's use `semgrep` to find bugs like it, using a simple search pattern: `$X == $X`. It will find all places in our code where the left- and right-hand sides of a comparison are the same expression:\n+Generally when you're using Semgrep you're going to be doing one of three things:\n \n-```\n-$ semgrep --lang python --pattern '$X == $X' test.py\n-test.py\n-3:        if node.id == node.id:  # Oops, supposed to be 'node_id'\n-```\n+1. Manually scanning your source code using existing rules.\n+1. Running Semgrep in CI so every pull request (PR) is checked.", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY5OTI3OQ==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437699279", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The easiest way to get started with Semgrep (other than [semgrep.live](https://semgrep.live/)) is to scan your code with an existing set of rules.\n          \n          \n            \n            The easiest way to get started with Semgrep (other than [semgrep.live](https://semgrep.live/)) is to scan your code with pre-built rules.", "author": "pabloest", "createdAt": "2020-06-09T20:30:10Z", "path": "README.md", "diffHunk": "@@ -44,62 +141,57 @@ On Ubuntu, an install script is available on each release [here](https://github.\n ./semgrep-v0.9.0-ubuntu-generic.sh\n ```\n \n-To try `semgrep` without installation, you can also run it via [Docker](https://docs.docker.com/install/):\n+To try Semgrep without installation, you can also run it via [Docker](https://docs.docker.com/install/):\n \n ```\n docker run --rm -v \"${PWD}:/home/repo\" returntocorp/semgrep --help\n ```\n \n-## Usage\n+## Terminology\n \n-### Example Usage\n+A **rule** (or *check*) is a Semgrep pattern that can be used to tell match\n+source code.\n \n-Here is a simple Python example, `test.py`. We want to retrieve an object by ID:\n+A **rule pack** (*check pack*) is a collection of Semgrep rules bundled\n+together. For example, \"Here are a bunch of Java checks I want to run.\"\n \n-```python3\n-def get_node(node_id, nodes):\n-    for node in nodes:\n-        if node.id == node.id:  # Oops, supposed to be 'node_id'\n-            return node\n-    return None\n-```\n+## Usage\n \n-This is a bug. Let's use `semgrep` to find bugs like it, using a simple search pattern: `$X == $X`. It will find all places in our code where the left- and right-hand sides of a comparison are the same expression:\n+Generally when you're using Semgrep you're going to be doing one of three things:\n \n-```\n-$ semgrep --lang python --pattern '$X == $X' test.py\n-test.py\n-3:        if node.id == node.id:  # Oops, supposed to be 'node_id'\n-```\n+1. Manually scanning your source code using existing rules.\n+1. Running Semgrep in CI so every pull request (PR) is checked.\n+1. Writing new rules.\n \n-## Configuration\n+The following sections cover each in more detail.\n \n-For simple patterns use the `--lang` and `--pattern` flags. This mode of\n-operation is useful for quickly iterating on a pattern on a single file or\n-folder:\n+### \ud83d\udd0d 1. Run Existing Rules\n \n-```bash\n-semgrep --lang javascript --pattern 'eval(...)' path/to/file.js\n-```\n+The easiest way to get started with Semgrep (other than [semgrep.live](https://semgrep.live/)) is to scan your code with an existing set of rules.", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY5OTY1MQ==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437699651", "bodyText": "Can this image be a bit larger? It\u2019s slightly hard to read the text.", "author": "pabloest", "createdAt": "2020-06-09T20:30:54Z", "path": "README.md", "diffHunk": "@@ -44,62 +141,57 @@ On Ubuntu, an install script is available on each release [here](https://github.\n ./semgrep-v0.9.0-ubuntu-generic.sh\n ```\n \n-To try `semgrep` without installation, you can also run it via [Docker](https://docs.docker.com/install/):\n+To try Semgrep without installation, you can also run it via [Docker](https://docs.docker.com/install/):\n \n ```\n docker run --rm -v \"${PWD}:/home/repo\" returntocorp/semgrep --help\n ```\n \n-## Usage\n+## Terminology\n \n-### Example Usage\n+A **rule** (or *check*) is a Semgrep pattern that can be used to tell match\n+source code.\n \n-Here is a simple Python example, `test.py`. We want to retrieve an object by ID:\n+A **rule pack** (*check pack*) is a collection of Semgrep rules bundled\n+together. For example, \"Here are a bunch of Java checks I want to run.\"\n \n-```python3\n-def get_node(node_id, nodes):\n-    for node in nodes:\n-        if node.id == node.id:  # Oops, supposed to be 'node_id'\n-            return node\n-    return None\n-```\n+## Usage\n \n-This is a bug. Let's use `semgrep` to find bugs like it, using a simple search pattern: `$X == $X`. It will find all places in our code where the left- and right-hand sides of a comparison are the same expression:\n+Generally when you're using Semgrep you're going to be doing one of three things:\n \n-```\n-$ semgrep --lang python --pattern '$X == $X' test.py\n-test.py\n-3:        if node.id == node.id:  # Oops, supposed to be 'node_id'\n-```\n+1. Manually scanning your source code using existing rules.\n+1. Running Semgrep in CI so every pull request (PR) is checked.\n+1. Writing new rules.\n \n-## Configuration\n+The following sections cover each in more detail.\n \n-For simple patterns use the `--lang` and `--pattern` flags. This mode of\n-operation is useful for quickly iterating on a pattern on a single file or\n-folder:\n+### \ud83d\udd0d 1. Run Existing Rules\n \n-```bash\n-semgrep --lang javascript --pattern 'eval(...)' path/to/file.js\n-```\n+The easiest way to get started with Semgrep (other than [semgrep.live](https://semgrep.live/)) is to scan your code with an existing set of rules.\n \n-### Configuration Files\n+The [Semgrep rule registry](https://semgrep.live/r) contains rules for many programming errors, including security issues and correctness bugs. Security rules are annotated with CWE and OWASP metadata when applicable. OWASP rule coverage per language is displayed below.\n \n-For advanced configuration use the `--config` flag. This flag automagically\n-handles a multitude of input configuration types:\n+<p align=\"center\">\n+    <img width=\"600\" src=\"https://web-assets.r2c.dev/semgrep-rules-owasp-coverage-20200520.png\" style=\"max-width:100%;\" />", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwMDAxOQ==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437700019", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can use an existing [Check Packs](https://semgrep.live/packs), that contain sets of rules grouped by language and/or framework:\n          \n          \n            \n            You can use pre-built [Rule Packs](https://semgrep.live/packs) that contain sets of rules grouped by language and/or framework:", "author": "pabloest", "createdAt": "2020-06-09T20:31:37Z", "path": "README.md", "diffHunk": "@@ -44,62 +141,57 @@ On Ubuntu, an install script is available on each release [here](https://github.\n ./semgrep-v0.9.0-ubuntu-generic.sh\n ```\n \n-To try `semgrep` without installation, you can also run it via [Docker](https://docs.docker.com/install/):\n+To try Semgrep without installation, you can also run it via [Docker](https://docs.docker.com/install/):\n \n ```\n docker run --rm -v \"${PWD}:/home/repo\" returntocorp/semgrep --help\n ```\n \n-## Usage\n+## Terminology\n \n-### Example Usage\n+A **rule** (or *check*) is a Semgrep pattern that can be used to tell match\n+source code.\n \n-Here is a simple Python example, `test.py`. We want to retrieve an object by ID:\n+A **rule pack** (*check pack*) is a collection of Semgrep rules bundled\n+together. For example, \"Here are a bunch of Java checks I want to run.\"\n \n-```python3\n-def get_node(node_id, nodes):\n-    for node in nodes:\n-        if node.id == node.id:  # Oops, supposed to be 'node_id'\n-            return node\n-    return None\n-```\n+## Usage\n \n-This is a bug. Let's use `semgrep` to find bugs like it, using a simple search pattern: `$X == $X`. It will find all places in our code where the left- and right-hand sides of a comparison are the same expression:\n+Generally when you're using Semgrep you're going to be doing one of three things:\n \n-```\n-$ semgrep --lang python --pattern '$X == $X' test.py\n-test.py\n-3:        if node.id == node.id:  # Oops, supposed to be 'node_id'\n-```\n+1. Manually scanning your source code using existing rules.\n+1. Running Semgrep in CI so every pull request (PR) is checked.\n+1. Writing new rules.\n \n-## Configuration\n+The following sections cover each in more detail.\n \n-For simple patterns use the `--lang` and `--pattern` flags. This mode of\n-operation is useful for quickly iterating on a pattern on a single file or\n-folder:\n+### \ud83d\udd0d 1. Run Existing Rules\n \n-```bash\n-semgrep --lang javascript --pattern 'eval(...)' path/to/file.js\n-```\n+The easiest way to get started with Semgrep (other than [semgrep.live](https://semgrep.live/)) is to scan your code with an existing set of rules.\n \n-### Configuration Files\n+The [Semgrep rule registry](https://semgrep.live/r) contains rules for many programming errors, including security issues and correctness bugs. Security rules are annotated with CWE and OWASP metadata when applicable. OWASP rule coverage per language is displayed below.\n \n-For advanced configuration use the `--config` flag. This flag automagically\n-handles a multitude of input configuration types:\n+<p align=\"center\">\n+    <img width=\"600\" src=\"https://web-assets.r2c.dev/semgrep-rules-owasp-coverage-20200520.png\" style=\"max-width:100%;\" />\n+</p>\n \n-* `--config <file|folder|yaml_url|tarball_url|registy_name>`\n+You can use an existing [Check Packs](https://semgrep.live/packs), that contain sets of rules grouped by language and/or framework:", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwMDIxMA==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437700210", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Or you can run all of our default rules for all languages as appropriate (note: each rule says what language it's for, so Semgrep won't try to run a Python rule on Java code).\n          \n          \n            \n            Or you can run all of Semgrep\u2019s default rules for all languages as appropriate (note: each rule says what language it's for, so Semgrep won't try to run a Python rule on Java code).", "author": "pabloest", "createdAt": "2020-06-09T20:32:00Z", "path": "README.md", "diffHunk": "@@ -44,62 +141,57 @@ On Ubuntu, an install script is available on each release [here](https://github.\n ./semgrep-v0.9.0-ubuntu-generic.sh\n ```\n \n-To try `semgrep` without installation, you can also run it via [Docker](https://docs.docker.com/install/):\n+To try Semgrep without installation, you can also run it via [Docker](https://docs.docker.com/install/):\n \n ```\n docker run --rm -v \"${PWD}:/home/repo\" returntocorp/semgrep --help\n ```\n \n-## Usage\n+## Terminology\n \n-### Example Usage\n+A **rule** (or *check*) is a Semgrep pattern that can be used to tell match\n+source code.\n \n-Here is a simple Python example, `test.py`. We want to retrieve an object by ID:\n+A **rule pack** (*check pack*) is a collection of Semgrep rules bundled\n+together. For example, \"Here are a bunch of Java checks I want to run.\"\n \n-```python3\n-def get_node(node_id, nodes):\n-    for node in nodes:\n-        if node.id == node.id:  # Oops, supposed to be 'node_id'\n-            return node\n-    return None\n-```\n+## Usage\n \n-This is a bug. Let's use `semgrep` to find bugs like it, using a simple search pattern: `$X == $X`. It will find all places in our code where the left- and right-hand sides of a comparison are the same expression:\n+Generally when you're using Semgrep you're going to be doing one of three things:\n \n-```\n-$ semgrep --lang python --pattern '$X == $X' test.py\n-test.py\n-3:        if node.id == node.id:  # Oops, supposed to be 'node_id'\n-```\n+1. Manually scanning your source code using existing rules.\n+1. Running Semgrep in CI so every pull request (PR) is checked.\n+1. Writing new rules.\n \n-## Configuration\n+The following sections cover each in more detail.\n \n-For simple patterns use the `--lang` and `--pattern` flags. This mode of\n-operation is useful for quickly iterating on a pattern on a single file or\n-folder:\n+### \ud83d\udd0d 1. Run Existing Rules\n \n-```bash\n-semgrep --lang javascript --pattern 'eval(...)' path/to/file.js\n-```\n+The easiest way to get started with Semgrep (other than [semgrep.live](https://semgrep.live/)) is to scan your code with an existing set of rules.\n \n-### Configuration Files\n+The [Semgrep rule registry](https://semgrep.live/r) contains rules for many programming errors, including security issues and correctness bugs. Security rules are annotated with CWE and OWASP metadata when applicable. OWASP rule coverage per language is displayed below.\n \n-For advanced configuration use the `--config` flag. This flag automagically\n-handles a multitude of input configuration types:\n+<p align=\"center\">\n+    <img width=\"600\" src=\"https://web-assets.r2c.dev/semgrep-rules-owasp-coverage-20200520.png\" style=\"max-width:100%;\" />\n+</p>\n \n-* `--config <file|folder|yaml_url|tarball_url|registy_name>`\n+You can use an existing [Check Packs](https://semgrep.live/packs), that contain sets of rules grouped by language and/or framework:\n \n-In the absence of this flag, a default configuration is loaded from `.semgrep.yml`\n-or multiple files matching `.semgrep/**/*.yml`.\n+```bash\n+semgrep --config=https://semgrep.live/c/p/java\n+semgrep --config=https://semgrep.live/c/p/python\n+semgrep --config=https://semgrep.live/c/p/golang\n+semgrep --config=https://semgrep.live/c/p/javascript\n+...\n+```\n \n-### Registry\n+Or you can run all of our default rules for all languages as appropriate (note: each rule says what language it's for, so Semgrep won't try to run a Python rule on Java code).", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwMzg1OA==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437703858", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Some rules need more than one line of pattern to express.Sometimes you want to express code patterns, like: `X` must be true AND `Y` must be too, or `X` but NOT `Y`, or `X` must occur inside a block of code that `Y` matches.\n          \n          \n            \n            Some rules need more than one line of pattern to express. Sometimes you want to express code patterns, like: `X` must be true AND `Y` must be too, or `X` but NOT `Y`, or `X` must occur inside a block of code that `Y` matches.", "author": "pabloest", "createdAt": "2020-06-09T20:39:05Z", "path": "README.md", "diffHunk": "@@ -109,111 +201,126 @@ semgrep --config=https://semgrep.live/c/r/java.spring.security.audit.cookie-miss\n semgrep --config=https://semgrep.live/c/r/java.spring.security\n ```\n \n-The registry features rules for many programming errors, including security issues and correctness bugs. Security rules are annotated with CWE and OWASP metadata when applicable. OWASP rule coverage per language is displayed below.\n+All Semgrep rules can be viewed on the [Rule Registry page](https://semgrep.live/r), which pulls the rules from YAML files defined in the [semgrep-rules](https://github.com/returntocorp/semgrep-rules) GitHub repo.\n \n-<p align=\"center\">\n-    <img width=\"600\" src=\"https://web-assets.r2c.dev/semgrep-rules-owasp-coverage-20200520.png\" style=\"max-width:100%;\" />\n-</p>\n+Here are some sample vulnerable repos to test on:\n+* Django: [lets-be-bad-guys](https://github.com/mpirnat/lets-be-bad-guys), [django.nV](https://github.com/nVisium/django.nV)\n+* Flask: [Vulnerable-Flask-App](https://github.com/we45/Vulnerable-Flask-App)\n+* Java: [WebGoat](https://github.com/WebGoat/WebGoat), [OWASP Benchmark](https://github.com/OWASP/Benchmark)\n+* NodeJS: [OWASP Juice Shop](https://github.com/bkimminich/juice-shop), [DevSlop Pixi](https://github.com/DevSlop/Pixi)\n+* Golang: [GoVWA](https://github.com/0c34/govwa)\n \n \n-#### Pattern Features\n+### \ud83d\udee1\ufe0f 2. Integrate into CI\n \n-`semgrep` patterns make use of two primary features:\n+Semgrep can be run via CLI or Docker and output results as JSON (via the `--json` flag), so it can be inserted into any CI pipeline and have its results processed by whatever tools you're using.\n \n-* **Metavariables like `$X`, `$WIDGET`, or `$USERS_2`.** Metavariable names can\n-only contain uppercase characters, or `_`, or digits, and must start with\n-an uppercase character or `_`. Names like `$x` or `$some_value` are\n-invalid.  Metavariables are used to track a variable across a specific code\n-scope.\n-* **The `...` (ellipsis) operator.** The ellipsis operator abstracts away\n-sequences of zero or more arguments, statements, characters, [and more](docs/pattern-features.md).\n+Semgrep is aware of *diffs*, so it can report only findings that occur in newly added code, for example, in a commit or pull request.\n \n-For example,\n-```yaml\n-$FILE = open(...)\n-```\n-will find all occurrences in your code where the result of an `open()` call with zero or more arguments is assigned\n-to a variable.\n+Currently, the easiest way to integrate Semgrep into CI is via a GitHub action we've built. See the [integrations docs](docs/integrations.md) for more details.\n \n-#### Composing Patterns\n+Semgrep can also output results in the standardized Static Analysis Results Interchange Format ([SARIF](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html)) with the `--sarif` flag, if you use tools that accept this format. \n \n-You can also construct rules by composing multiple patterns together.\n+### \u270d\ufe0f 3. Writing Rules\n \n-Let's consider an example:\n+One of the strengths of Semgrep is how easy it is to write rules.\n \n-```yaml\n-rules:\n-  - id: open-never-closed\n-    patterns:\n-      - pattern: $FILE = open(...)\n-      - pattern-not-inside: |\n-          $FILE = open(...)\n-          ...\n-          $FILE.close()\n-    message: \"file object opened without corresponding close\"\n-    languages: [python]\n-    severity: ERROR\n+This makes it possible to:\n+* Quickly port rules from other tools.\n+* Think of an interesting code pattern, and then find instances of it in your\n+    code.\n+* Find code base or org-specific bugs and antipatterns - things that built-in\n+    checks for existing tools won't find because they're unique to you.\n+* and more!\n+\n+#### Simple Rules\n+\n+For iterating on simple patterns, you can use the `--lang` and `--pattern`\n+flags.\n+\n+```bash\n+semgrep --lang javascript --pattern 'eval(...)' path/to/file.js\n ```\n \n-This rule looks for files that are opened but never closed. It accomplishes\n-this by looking for the `open(...)` pattern _and not_ a following `close()`\n-pattern. The `$FILE` metavariable ensures that the same variable name is used\n-in the `open` and `close` calls. The ellipsis operator allows for any arguments\n-to be passed to `open` and any sequence of code statements in-between the `open`\n-and `close` calls. We don't care how `open` is called or what happens up to\n-a `close` call, we just need to make sure `close` is called.\n+The `--lang` flag tells Semgrep which language you're targeting and `--pattern` is the code pattern to search for.\n \n-**For more information on rule fields like `patterns` and `pattern-not-inside`\n-see the [configuration documentation](docs/configuration-files.md).**\n+#### Advanced Rules\n \n-#### Equivalences\n+Some rules need more than one line of pattern to express.Sometimes you want to express code patterns, like: `X` must be true AND `Y` must be too, or `X` but NOT `Y`, or `X` must occur inside a block of code that `Y` matches.", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwNDI1OQ==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437704259", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Let's say we are building a financial trading application in which every `Transaction` object must first be passed to `verify_transaction()` before being passed to `make_transaction()`, or it's a business logic bug.\n          \n          \n            \n            Say you are building a financial trading application in which every `Transaction` object must first be passed to `verify_transaction()` before being passed to `make_transaction()`, or it's a business logic bug.", "author": "pabloest", "createdAt": "2020-06-09T20:39:54Z", "path": "README.md", "diffHunk": "@@ -109,111 +201,126 @@ semgrep --config=https://semgrep.live/c/r/java.spring.security.audit.cookie-miss\n semgrep --config=https://semgrep.live/c/r/java.spring.security\n ```\n \n-The registry features rules for many programming errors, including security issues and correctness bugs. Security rules are annotated with CWE and OWASP metadata when applicable. OWASP rule coverage per language is displayed below.\n+All Semgrep rules can be viewed on the [Rule Registry page](https://semgrep.live/r), which pulls the rules from YAML files defined in the [semgrep-rules](https://github.com/returntocorp/semgrep-rules) GitHub repo.\n \n-<p align=\"center\">\n-    <img width=\"600\" src=\"https://web-assets.r2c.dev/semgrep-rules-owasp-coverage-20200520.png\" style=\"max-width:100%;\" />\n-</p>\n+Here are some sample vulnerable repos to test on:\n+* Django: [lets-be-bad-guys](https://github.com/mpirnat/lets-be-bad-guys), [django.nV](https://github.com/nVisium/django.nV)\n+* Flask: [Vulnerable-Flask-App](https://github.com/we45/Vulnerable-Flask-App)\n+* Java: [WebGoat](https://github.com/WebGoat/WebGoat), [OWASP Benchmark](https://github.com/OWASP/Benchmark)\n+* NodeJS: [OWASP Juice Shop](https://github.com/bkimminich/juice-shop), [DevSlop Pixi](https://github.com/DevSlop/Pixi)\n+* Golang: [GoVWA](https://github.com/0c34/govwa)\n \n \n-#### Pattern Features\n+### \ud83d\udee1\ufe0f 2. Integrate into CI\n \n-`semgrep` patterns make use of two primary features:\n+Semgrep can be run via CLI or Docker and output results as JSON (via the `--json` flag), so it can be inserted into any CI pipeline and have its results processed by whatever tools you're using.\n \n-* **Metavariables like `$X`, `$WIDGET`, or `$USERS_2`.** Metavariable names can\n-only contain uppercase characters, or `_`, or digits, and must start with\n-an uppercase character or `_`. Names like `$x` or `$some_value` are\n-invalid.  Metavariables are used to track a variable across a specific code\n-scope.\n-* **The `...` (ellipsis) operator.** The ellipsis operator abstracts away\n-sequences of zero or more arguments, statements, characters, [and more](docs/pattern-features.md).\n+Semgrep is aware of *diffs*, so it can report only findings that occur in newly added code, for example, in a commit or pull request.\n \n-For example,\n-```yaml\n-$FILE = open(...)\n-```\n-will find all occurrences in your code where the result of an `open()` call with zero or more arguments is assigned\n-to a variable.\n+Currently, the easiest way to integrate Semgrep into CI is via a GitHub action we've built. See the [integrations docs](docs/integrations.md) for more details.\n \n-#### Composing Patterns\n+Semgrep can also output results in the standardized Static Analysis Results Interchange Format ([SARIF](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html)) with the `--sarif` flag, if you use tools that accept this format. \n \n-You can also construct rules by composing multiple patterns together.\n+### \u270d\ufe0f 3. Writing Rules\n \n-Let's consider an example:\n+One of the strengths of Semgrep is how easy it is to write rules.\n \n-```yaml\n-rules:\n-  - id: open-never-closed\n-    patterns:\n-      - pattern: $FILE = open(...)\n-      - pattern-not-inside: |\n-          $FILE = open(...)\n-          ...\n-          $FILE.close()\n-    message: \"file object opened without corresponding close\"\n-    languages: [python]\n-    severity: ERROR\n+This makes it possible to:\n+* Quickly port rules from other tools.\n+* Think of an interesting code pattern, and then find instances of it in your\n+    code.\n+* Find code base or org-specific bugs and antipatterns - things that built-in\n+    checks for existing tools won't find because they're unique to you.\n+* and more!\n+\n+#### Simple Rules\n+\n+For iterating on simple patterns, you can use the `--lang` and `--pattern`\n+flags.\n+\n+```bash\n+semgrep --lang javascript --pattern 'eval(...)' path/to/file.js\n ```\n \n-This rule looks for files that are opened but never closed. It accomplishes\n-this by looking for the `open(...)` pattern _and not_ a following `close()`\n-pattern. The `$FILE` metavariable ensures that the same variable name is used\n-in the `open` and `close` calls. The ellipsis operator allows for any arguments\n-to be passed to `open` and any sequence of code statements in-between the `open`\n-and `close` calls. We don't care how `open` is called or what happens up to\n-a `close` call, we just need to make sure `close` is called.\n+The `--lang` flag tells Semgrep which language you're targeting and `--pattern` is the code pattern to search for.\n \n-**For more information on rule fields like `patterns` and `pattern-not-inside`\n-see the [configuration documentation](docs/configuration-files.md).**\n+#### Advanced Rules\n \n-#### Equivalences\n+Some rules need more than one line of pattern to express.Sometimes you want to express code patterns, like: `X` must be true AND `Y` must be too, or `X` but NOT `Y`, or `X` must occur inside a block of code that `Y` matches.\n \n-Equivalences are another key concept in `semgrep`. `semgrep` automatically searches\n-for code that is semantically equivalent. For example, the following patterns\n-are semantically equivalent. The pattern `subprocess.Popen(...)` will fire on both.\n+For these cases, Semgrep has a more powerful and flexible [YAML syntax](docs/configuration-files.md).\n \n-```python\n-subprocess.Popen(\"ls\")\n+You can run a single rule or directory of rules specified in YAML by:\n+```bash\n+semgrep --config my_rule.yml path/to/dir_or_file\n+\n+semgrep --config yaml_dir/ path/to/dir_or_file\n ```\n \n-```python\n-from subprocess import Popen as sub_popen\n+**Example Advanced Rule**\n+\n+Let's say we are building a financial trading application in which every `Transaction` object must first be passed to `verify_transaction()` before being passed to `make_transaction()`, or it's a business logic bug.", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwNDM0Mw==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437704343", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            We can express this behavior with the following Semgrep YAML pattern:\n          \n          \n            \n            You can express this behavior with the following Semgrep YAML pattern:", "author": "pabloest", "createdAt": "2020-06-09T20:40:04Z", "path": "README.md", "diffHunk": "@@ -109,111 +201,126 @@ semgrep --config=https://semgrep.live/c/r/java.spring.security.audit.cookie-miss\n semgrep --config=https://semgrep.live/c/r/java.spring.security\n ```\n \n-The registry features rules for many programming errors, including security issues and correctness bugs. Security rules are annotated with CWE and OWASP metadata when applicable. OWASP rule coverage per language is displayed below.\n+All Semgrep rules can be viewed on the [Rule Registry page](https://semgrep.live/r), which pulls the rules from YAML files defined in the [semgrep-rules](https://github.com/returntocorp/semgrep-rules) GitHub repo.\n \n-<p align=\"center\">\n-    <img width=\"600\" src=\"https://web-assets.r2c.dev/semgrep-rules-owasp-coverage-20200520.png\" style=\"max-width:100%;\" />\n-</p>\n+Here are some sample vulnerable repos to test on:\n+* Django: [lets-be-bad-guys](https://github.com/mpirnat/lets-be-bad-guys), [django.nV](https://github.com/nVisium/django.nV)\n+* Flask: [Vulnerable-Flask-App](https://github.com/we45/Vulnerable-Flask-App)\n+* Java: [WebGoat](https://github.com/WebGoat/WebGoat), [OWASP Benchmark](https://github.com/OWASP/Benchmark)\n+* NodeJS: [OWASP Juice Shop](https://github.com/bkimminich/juice-shop), [DevSlop Pixi](https://github.com/DevSlop/Pixi)\n+* Golang: [GoVWA](https://github.com/0c34/govwa)\n \n \n-#### Pattern Features\n+### \ud83d\udee1\ufe0f 2. Integrate into CI\n \n-`semgrep` patterns make use of two primary features:\n+Semgrep can be run via CLI or Docker and output results as JSON (via the `--json` flag), so it can be inserted into any CI pipeline and have its results processed by whatever tools you're using.\n \n-* **Metavariables like `$X`, `$WIDGET`, or `$USERS_2`.** Metavariable names can\n-only contain uppercase characters, or `_`, or digits, and must start with\n-an uppercase character or `_`. Names like `$x` or `$some_value` are\n-invalid.  Metavariables are used to track a variable across a specific code\n-scope.\n-* **The `...` (ellipsis) operator.** The ellipsis operator abstracts away\n-sequences of zero or more arguments, statements, characters, [and more](docs/pattern-features.md).\n+Semgrep is aware of *diffs*, so it can report only findings that occur in newly added code, for example, in a commit or pull request.\n \n-For example,\n-```yaml\n-$FILE = open(...)\n-```\n-will find all occurrences in your code where the result of an `open()` call with zero or more arguments is assigned\n-to a variable.\n+Currently, the easiest way to integrate Semgrep into CI is via a GitHub action we've built. See the [integrations docs](docs/integrations.md) for more details.\n \n-#### Composing Patterns\n+Semgrep can also output results in the standardized Static Analysis Results Interchange Format ([SARIF](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html)) with the `--sarif` flag, if you use tools that accept this format. \n \n-You can also construct rules by composing multiple patterns together.\n+### \u270d\ufe0f 3. Writing Rules\n \n-Let's consider an example:\n+One of the strengths of Semgrep is how easy it is to write rules.\n \n-```yaml\n-rules:\n-  - id: open-never-closed\n-    patterns:\n-      - pattern: $FILE = open(...)\n-      - pattern-not-inside: |\n-          $FILE = open(...)\n-          ...\n-          $FILE.close()\n-    message: \"file object opened without corresponding close\"\n-    languages: [python]\n-    severity: ERROR\n+This makes it possible to:\n+* Quickly port rules from other tools.\n+* Think of an interesting code pattern, and then find instances of it in your\n+    code.\n+* Find code base or org-specific bugs and antipatterns - things that built-in\n+    checks for existing tools won't find because they're unique to you.\n+* and more!\n+\n+#### Simple Rules\n+\n+For iterating on simple patterns, you can use the `--lang` and `--pattern`\n+flags.\n+\n+```bash\n+semgrep --lang javascript --pattern 'eval(...)' path/to/file.js\n ```\n \n-This rule looks for files that are opened but never closed. It accomplishes\n-this by looking for the `open(...)` pattern _and not_ a following `close()`\n-pattern. The `$FILE` metavariable ensures that the same variable name is used\n-in the `open` and `close` calls. The ellipsis operator allows for any arguments\n-to be passed to `open` and any sequence of code statements in-between the `open`\n-and `close` calls. We don't care how `open` is called or what happens up to\n-a `close` call, we just need to make sure `close` is called.\n+The `--lang` flag tells Semgrep which language you're targeting and `--pattern` is the code pattern to search for.\n \n-**For more information on rule fields like `patterns` and `pattern-not-inside`\n-see the [configuration documentation](docs/configuration-files.md).**\n+#### Advanced Rules\n \n-#### Equivalences\n+Some rules need more than one line of pattern to express.Sometimes you want to express code patterns, like: `X` must be true AND `Y` must be too, or `X` but NOT `Y`, or `X` must occur inside a block of code that `Y` matches.\n \n-Equivalences are another key concept in `semgrep`. `semgrep` automatically searches\n-for code that is semantically equivalent. For example, the following patterns\n-are semantically equivalent. The pattern `subprocess.Popen(...)` will fire on both.\n+For these cases, Semgrep has a more powerful and flexible [YAML syntax](docs/configuration-files.md).\n \n-```python\n-subprocess.Popen(\"ls\")\n+You can run a single rule or directory of rules specified in YAML by:\n+```bash\n+semgrep --config my_rule.yml path/to/dir_or_file\n+\n+semgrep --config yaml_dir/ path/to/dir_or_file\n ```\n \n-```python\n-from subprocess import Popen as sub_popen\n+**Example Advanced Rule**\n+\n+Let's say we are building a financial trading application in which every `Transaction` object must first be passed to `verify_transaction()` before being passed to `make_transaction()`, or it's a business logic bug.\n+\n+We can express this behavior with the following Semgrep YAML pattern:", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwNjU4OA==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437706588", "bodyText": "Perhaps another way to phrase this that better matches the pattern of the other bullets:\n\nRuns on source code: Semgrep doesn\u2019t require compilation because it runs on source directly.", "author": "pabloest", "createdAt": "2020-06-09T20:44:17Z", "path": "README.md", "diffHunk": "@@ -4,22 +4,116 @@\n [![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n [![r2c Twitter](https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue)](https://twitter.com/intent/follow?screen_name=r2cdev)\n \n-`semgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n-your codebase. It combines the convenience of `grep` with the correctness of\n-syntactical and semantic search. Developers, DevOps engineers, and security engineers\n-use `semgrep` to write code with confidence.\n+<p align=\"center\">\n+  <a href=\"#overview\">Overview</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#installation\">Installation</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#usage\">Usage</a>\n+  <br/>\n+  <a href=\"#resources\">Resources</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#contributing\">Contributing</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#commercial-support\">Commercial Support</a>\n+</p>\n+\n+<h3 align=\"center\">\n+  A fast, lightweight static analysis tool that lets you search code like you\u2019d write it.\n+</h3>  \n+<h3 align=\"center\">\n+  Find security bugs. Enforce coding standards. Scan every PR.\n+</h3>\n+<h3 align=\"center\">  \n+  Easily block bad code so you can get back to building the next great thing.\n+</h3>\n+\n+Semgrep is a tool for easily detecting and preventing bugs and anti-patterns\n+in your codebase. It combines the convenience and rapid iteration speed of\n+`grep`, but is \"code-aware\"; that is, you can easily match function calls, class\n+or method definitions, and more.\n+\n+## Quickstart\n+\n+After [installing semgrep](#installation), run the default set of checks with:\n+\n+```bash\n+semgrep --config=r2c path/to/repo\n+```\n \n-**Try it now:** [https://semgrep.live](https://semgrep.live/)\n+Or try Semgrep in your browser: [https://semgrep.live](https://semgrep.live/).\n \n ## Overview\n \n-Language support:\n+### Key features\n+\n+* **Language aware**: Semgrep parses source code into Abstract Syntax Trees (ASTs), so it understands function calls, method and class definitions, conditionals, and more. \n+  * Unlike regexes, Semgrep won't get tripped up matching things you don't care about in comments or string literals.\n+* **Fast**: Speedy enough to run on every build, commit, or file save.\n+* **Batteries included**: Leverage hundreds of preexisting security checks for popular languages and frameworks in the community [registry](https://semgrep.live/r), including coverage for the [OWASP Top 10](https://owasp.org/www-project-top-ten/).\n+* **Handles multiple languages**: No need to learn and maintain multiple tools for your polyglot environment (e.g. ESLint, find-sec-bugs, rubocop, gosec, ...).\n+* **Easy to tweak**: Rules look like the code you\u2019re searching, no static analysis PhD required.\n+* Does **not** require compilation, Semgrep runs on source code directly. ", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyOTQ0Nw==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437729447", "bodyText": "This is a big deal for Java. Thoughts on calling it out specifically?", "author": "dlukeomalley", "createdAt": "2020-06-09T21:20:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwNjU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyMzk0MQ==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r438423941", "bodyText": "@dlukeomalley Agreed that this is a big deal, not sure how to call it out specifically, beyond \"unlike tool names\". Thoughts?", "author": "clintgibler", "createdAt": "2020-06-10T21:40:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwNjU4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwNzI1NQ==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437707255", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u2192 [see more example patterns in the live registry viewer](https://semgrep.live/registry).\n          \n          \n            \n            \u2192 [see more example patterns in the Semgrep registry](https://semgrep.live/registry).", "author": "pabloest", "createdAt": "2020-06-09T20:45:23Z", "path": "README.md", "diffHunk": "@@ -29,7 +123,10 @@ Example patterns:\n | [`$ELEMENT.innerHTML`](https://semgrep.live/9ze)                   | ``el.innerHTML = \"<img src='x' onerror='alert(`XSS`)'>\";`` |\n | [`$TOKEN.SignedString([]byte(\"...\"))`](https://semgrep.live/rXW)   | `ss, err := token.SignedString([]byte(\"HARDCODED KEY\"))`   |\n \n-\u2192 [see more example patterns in the live registry viewer](https://semgrep.live/registry)\n+\u2192 [see more example patterns in the live registry viewer](https://semgrep.live/registry).", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyMzU2Mw==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437723563", "bodyText": "From a flow perspective, I find myself jumping to installation, then jumping back. Could we include installation instructions in the quick start or lead with the Installation section if it's sufficiently short?", "author": "dlukeomalley", "createdAt": "2020-06-09T21:08:02Z", "path": "README.md", "diffHunk": "@@ -4,22 +4,116 @@\n [![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n [![r2c Twitter](https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue)](https://twitter.com/intent/follow?screen_name=r2cdev)\n \n-`semgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n-your codebase. It combines the convenience of `grep` with the correctness of\n-syntactical and semantic search. Developers, DevOps engineers, and security engineers\n-use `semgrep` to write code with confidence.\n+<p align=\"center\">\n+  <a href=\"#overview\">Overview</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#installation\">Installation</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#usage\">Usage</a>\n+  <br/>\n+  <a href=\"#resources\">Resources</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#contributing\">Contributing</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#commercial-support\">Commercial Support</a>\n+</p>\n+\n+<h3 align=\"center\">\n+  A fast, lightweight static analysis tool that lets you search code like you\u2019d write it.\n+</h3>  \n+<h3 align=\"center\">\n+  Find security bugs. Enforce coding standards. Scan every PR.\n+</h3>\n+<h3 align=\"center\">  \n+  Easily block bad code so you can get back to building the next great thing.\n+</h3>\n+\n+Semgrep is a tool for easily detecting and preventing bugs and anti-patterns\n+in your codebase. It combines the convenience and rapid iteration speed of\n+`grep`, but is \"code-aware\"; that is, you can easily match function calls, class\n+or method definitions, and more.\n+\n+## Quickstart\n+\n+After [installing semgrep](#installation), run the default set of checks with:", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEzMjk4NQ==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r438132985", "bodyText": "I agree here, it's kinda awkward to immediately jump to installation then need to come back.", "author": "mschwager", "createdAt": "2020-06-10T13:44:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyMzU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxOTAyNA==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r438419024", "bodyText": "@dlukeomalley @mschwager Personally I'd rather cut the \"Quickstart\" section entirely and just have everything be centralized in the \"Installation\" section, which users can quickly go to via the link at the top if they want.\nAre you OK cutting this section?", "author": "clintgibler", "createdAt": "2020-06-10T21:29:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyMzU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyMjMyOQ==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r438422329", "bodyText": "I'm fine moving Installation to the top of the document and/or combining these sections. I do think it's important to tell you front-and-center how to get it / how to start running it.", "author": "dlukeomalley", "createdAt": "2020-06-10T21:37:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyMzU2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyMzg1OA==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437723858", "bodyText": "@pabloest @clintgibler Is there a good gif we can add here? Perhaps of the CLI -> pack running workflow? I can help define / test it.", "author": "dlukeomalley", "createdAt": "2020-06-09T21:08:41Z", "path": "README.md", "diffHunk": "@@ -4,22 +4,116 @@\n [![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n [![r2c Twitter](https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue)](https://twitter.com/intent/follow?screen_name=r2cdev)\n \n-`semgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n-your codebase. It combines the convenience of `grep` with the correctness of\n-syntactical and semantic search. Developers, DevOps engineers, and security engineers\n-use `semgrep` to write code with confidence.\n+<p align=\"center\">\n+  <a href=\"#overview\">Overview</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#installation\">Installation</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#usage\">Usage</a>\n+  <br/>\n+  <a href=\"#resources\">Resources</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#contributing\">Contributing</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#commercial-support\">Commercial Support</a>\n+</p>\n+\n+<h3 align=\"center\">\n+  A fast, lightweight static analysis tool that lets you search code like you\u2019d write it.\n+</h3>  \n+<h3 align=\"center\">\n+  Find security bugs. Enforce coding standards. Scan every PR.\n+</h3>\n+<h3 align=\"center\">  \n+  Easily block bad code so you can get back to building the next great thing.\n+</h3>\n+\n+Semgrep is a tool for easily detecting and preventing bugs and anti-patterns\n+in your codebase. It combines the convenience and rapid iteration speed of\n+`grep`, but is \"code-aware\"; that is, you can easily match function calls, class\n+or method definitions, and more.\n+", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxODE1OQ==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r438418159", "bodyText": "I don't have this gif currently. I propose creating a separate issue to track this so we can push out the updated readme faster. @dlukeomalley", "author": "clintgibler", "createdAt": "2020-06-10T21:27:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyMzg1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyNDk1OQ==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437724959", "bodyText": "I hear @ievans' feedback, though would include the $. It clearly denotes the context for a user (a console) and is needed for markdown's syntax highlighting, sadly.", "author": "dlukeomalley", "createdAt": "2020-06-09T21:10:55Z", "path": "README.md", "diffHunk": "@@ -4,22 +4,116 @@\n [![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n [![r2c Twitter](https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue)](https://twitter.com/intent/follow?screen_name=r2cdev)\n \n-`semgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n-your codebase. It combines the convenience of `grep` with the correctness of\n-syntactical and semantic search. Developers, DevOps engineers, and security engineers\n-use `semgrep` to write code with confidence.\n+<p align=\"center\">\n+  <a href=\"#overview\">Overview</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#installation\">Installation</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#usage\">Usage</a>\n+  <br/>\n+  <a href=\"#resources\">Resources</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#contributing\">Contributing</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#commercial-support\">Commercial Support</a>\n+</p>\n+\n+<h3 align=\"center\">\n+  A fast, lightweight static analysis tool that lets you search code like you\u2019d write it.\n+</h3>  \n+<h3 align=\"center\">\n+  Find security bugs. Enforce coding standards. Scan every PR.\n+</h3>\n+<h3 align=\"center\">  \n+  Easily block bad code so you can get back to building the next great thing.\n+</h3>\n+\n+Semgrep is a tool for easily detecting and preventing bugs and anti-patterns\n+in your codebase. It combines the convenience and rapid iteration speed of\n+`grep`, but is \"code-aware\"; that is, you can easily match function calls, class\n+or method definitions, and more.\n+\n+## Quickstart\n+\n+After [installing semgrep](#installation), run the default set of checks with:\n+\n+```bash\n+semgrep --config=r2c path/to/repo", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEzODIyMw==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r438138223", "bodyText": "I agree. I know this has been a minor point of contention, but I generally like to include the $. I get a lot of mileage out of DigitalOcean's Technical Writing Guidelines, especially the Code Blocks section here. We obviously don't have their full markup system, but the end result is they use $ or # for command line blocks.", "author": "mschwager", "createdAt": "2020-06-10T13:51:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyNDk1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxOTY1Ng==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r438419656", "bodyText": "3 (@clintgibler @dlukeomalley @mschwager) vs 1 (@ievans), let's go with $ for now.", "author": "clintgibler", "createdAt": "2020-06-10T21:31:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyNDk1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyNzE4Mw==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437727183", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            After [installing semgrep](#installation), run the default set of checks with:\n          \n          \n            \n            After [installing semgrep](#installation), run it using a package of pre-built [Registry](https://semgrep.live/r) rules:", "author": "dlukeomalley", "createdAt": "2020-06-09T21:15:47Z", "path": "README.md", "diffHunk": "@@ -4,22 +4,116 @@\n [![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n [![r2c Twitter](https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue)](https://twitter.com/intent/follow?screen_name=r2cdev)\n \n-`semgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n-your codebase. It combines the convenience of `grep` with the correctness of\n-syntactical and semantic search. Developers, DevOps engineers, and security engineers\n-use `semgrep` to write code with confidence.\n+<p align=\"center\">\n+  <a href=\"#overview\">Overview</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#installation\">Installation</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#usage\">Usage</a>\n+  <br/>\n+  <a href=\"#resources\">Resources</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#contributing\">Contributing</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#commercial-support\">Commercial Support</a>\n+</p>\n+\n+<h3 align=\"center\">\n+  A fast, lightweight static analysis tool that lets you search code like you\u2019d write it.\n+</h3>  \n+<h3 align=\"center\">\n+  Find security bugs. Enforce coding standards. Scan every PR.\n+</h3>\n+<h3 align=\"center\">  \n+  Easily block bad code so you can get back to building the next great thing.\n+</h3>\n+\n+Semgrep is a tool for easily detecting and preventing bugs and anti-patterns\n+in your codebase. It combines the convenience and rapid iteration speed of\n+`grep`, but is \"code-aware\"; that is, you can easily match function calls, class\n+or method definitions, and more.\n+\n+## Quickstart\n+\n+After [installing semgrep](#installation), run the default set of checks with:", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyNzU3OA==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437727578", "bodyText": "@pabloest @clintgibler Thoughts on adding \"Motivations\" explaining our paved road approach and philosophy with keeping Semgrep simple, fast, and intended for guardrail enforcement?", "author": "dlukeomalley", "createdAt": "2020-06-09T21:16:36Z", "path": "README.md", "diffHunk": "@@ -4,22 +4,116 @@\n [![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n [![r2c Twitter](https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue)](https://twitter.com/intent/follow?screen_name=r2cdev)\n \n-`semgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n-your codebase. It combines the convenience of `grep` with the correctness of\n-syntactical and semantic search. Developers, DevOps engineers, and security engineers\n-use `semgrep` to write code with confidence.\n+<p align=\"center\">\n+  <a href=\"#overview\">Overview</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#installation\">Installation</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#usage\">Usage</a>\n+  <br/>\n+  <a href=\"#resources\">Resources</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#contributing\">Contributing</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#commercial-support\">Commercial Support</a>\n+</p>\n+\n+<h3 align=\"center\">\n+  A fast, lightweight static analysis tool that lets you search code like you\u2019d write it.\n+</h3>  \n+<h3 align=\"center\">\n+  Find security bugs. Enforce coding standards. Scan every PR.\n+</h3>\n+<h3 align=\"center\">  \n+  Easily block bad code so you can get back to building the next great thing.\n+</h3>\n+\n+Semgrep is a tool for easily detecting and preventing bugs and anti-patterns\n+in your codebase. It combines the convenience and rapid iteration speed of\n+`grep`, but is \"code-aware\"; that is, you can easily match function calls, class\n+or method definitions, and more.\n+\n+## Quickstart\n+\n+After [installing semgrep](#installation), run the default set of checks with:\n+\n+```bash\n+semgrep --config=r2c path/to/repo\n+```\n \n-**Try it now:** [https://semgrep.live](https://semgrep.live/)\n+Or try Semgrep in your browser: [https://semgrep.live](https://semgrep.live/).\n \n ## Overview", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyMTIxMA==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r438421210", "bodyText": "@dlukeomalley I like that idea but I want to think more about how we want to word that. Propose creating a separate issue to track.", "author": "clintgibler", "createdAt": "2020-06-10T21:34:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyNzU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyMzEzOA==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r438423138", "bodyText": "I think this could start by being the tl;dr meetup slide. V0 is that acceptable?", "author": "dlukeomalley", "createdAt": "2020-06-10T21:39:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyNzU3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyOTA5MA==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437729090", "bodyText": "To match convention elsewhere, can we eliminate this bullet or break it out in a follow-up section? I suspect this specific feature is one worth demonstrating or spending some time on later in the README.", "author": "dlukeomalley", "createdAt": "2020-06-09T21:19:57Z", "path": "README.md", "diffHunk": "@@ -4,22 +4,116 @@\n [![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n [![r2c Twitter](https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue)](https://twitter.com/intent/follow?screen_name=r2cdev)\n \n-`semgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n-your codebase. It combines the convenience of `grep` with the correctness of\n-syntactical and semantic search. Developers, DevOps engineers, and security engineers\n-use `semgrep` to write code with confidence.\n+<p align=\"center\">\n+  <a href=\"#overview\">Overview</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#installation\">Installation</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#usage\">Usage</a>\n+  <br/>\n+  <a href=\"#resources\">Resources</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#contributing\">Contributing</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#commercial-support\">Commercial Support</a>\n+</p>\n+\n+<h3 align=\"center\">\n+  A fast, lightweight static analysis tool that lets you search code like you\u2019d write it.\n+</h3>  \n+<h3 align=\"center\">\n+  Find security bugs. Enforce coding standards. Scan every PR.\n+</h3>\n+<h3 align=\"center\">  \n+  Easily block bad code so you can get back to building the next great thing.\n+</h3>\n+\n+Semgrep is a tool for easily detecting and preventing bugs and anti-patterns\n+in your codebase. It combines the convenience and rapid iteration speed of\n+`grep`, but is \"code-aware\"; that is, you can easily match function calls, class\n+or method definitions, and more.\n+\n+## Quickstart\n+\n+After [installing semgrep](#installation), run the default set of checks with:\n+\n+```bash\n+semgrep --config=r2c path/to/repo\n+```\n \n-**Try it now:** [https://semgrep.live](https://semgrep.live/)\n+Or try Semgrep in your browser: [https://semgrep.live](https://semgrep.live/).\n \n ## Overview\n \n-Language support:\n+### Key features\n+\n+* **Language aware**: Semgrep parses source code into Abstract Syntax Trees (ASTs), so it understands function calls, method and class definitions, conditionals, and more. \n+  * Unlike regexes, Semgrep won't get tripped up matching things you don't care about in comments or string literals.", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczMDExMA==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437730110", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ... and many more coming.\n          \n          \n            \n            Missing support for a language? Let us know by filing a ticket or emailing [support@r2c.dev](url).\n          \n      \n    \n    \n  \n\nThoughts on inviting a reachout? Perhaps via a ticket, email, or Slack?", "author": "dlukeomalley", "createdAt": "2020-06-09T21:21:57Z", "path": "README.md", "diffHunk": "@@ -4,22 +4,116 @@\n [![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n [![r2c Twitter](https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue)](https://twitter.com/intent/follow?screen_name=r2cdev)\n \n-`semgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n-your codebase. It combines the convenience of `grep` with the correctness of\n-syntactical and semantic search. Developers, DevOps engineers, and security engineers\n-use `semgrep` to write code with confidence.\n+<p align=\"center\">\n+  <a href=\"#overview\">Overview</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#installation\">Installation</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#usage\">Usage</a>\n+  <br/>\n+  <a href=\"#resources\">Resources</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#contributing\">Contributing</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#commercial-support\">Commercial Support</a>\n+</p>\n+\n+<h3 align=\"center\">\n+  A fast, lightweight static analysis tool that lets you search code like you\u2019d write it.\n+</h3>  \n+<h3 align=\"center\">\n+  Find security bugs. Enforce coding standards. Scan every PR.\n+</h3>\n+<h3 align=\"center\">  \n+  Easily block bad code so you can get back to building the next great thing.\n+</h3>\n+\n+Semgrep is a tool for easily detecting and preventing bugs and anti-patterns\n+in your codebase. It combines the convenience and rapid iteration speed of\n+`grep`, but is \"code-aware\"; that is, you can easily match function calls, class\n+or method definitions, and more.\n+\n+## Quickstart\n+\n+After [installing semgrep](#installation), run the default set of checks with:\n+\n+```bash\n+semgrep --config=r2c path/to/repo\n+```\n \n-**Try it now:** [https://semgrep.live](https://semgrep.live/)\n+Or try Semgrep in your browser: [https://semgrep.live](https://semgrep.live/).\n \n ## Overview\n \n-Language support:\n+### Key features\n+\n+* **Language aware**: Semgrep parses source code into Abstract Syntax Trees (ASTs), so it understands function calls, method and class definitions, conditionals, and more. \n+  * Unlike regexes, Semgrep won't get tripped up matching things you don't care about in comments or string literals.\n+* **Fast**: Speedy enough to run on every build, commit, or file save.\n+* **Batteries included**: Leverage hundreds of preexisting security checks for popular languages and frameworks in the community [registry](https://semgrep.live/r), including coverage for the [OWASP Top 10](https://owasp.org/www-project-top-ten/).\n+* **Handles multiple languages**: No need to learn and maintain multiple tools for your polyglot environment (e.g. ESLint, find-sec-bugs, rubocop, gosec, ...).\n+* **Easy to tweak**: Rules look like the code you\u2019re searching, no static analysis PhD required.\n+* Does **not** require compilation, Semgrep runs on source code directly. \n+* **Easy to integrate**: Highly portable and many CI and git hook integrations already exist. Run via CLI or Docker, output `--json` and pipe results into whatever system you want.\n+\n+\n+### Language support\n+\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Ruby** | **Typescript** | **PHP &nbsp; &nbsp;** |\n+|:-----------|:---------------|:----------------------------|:----------------|:----------------------------------|:---------|:---------------|:----------------------|\n+| \u2705          | \u2705              | \u2705                           | \u2705               | \u2705                                 | \ud83d\udea7 |  Coming...      | Coming...             |\n+\n+... and many more coming.", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczMTAwOQ==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437731009", "bodyText": "I think we could strike this section so long as we have motivation / overview above.", "author": "dlukeomalley", "createdAt": "2020-06-09T21:24:04Z", "path": "README.md", "diffHunk": "@@ -4,22 +4,116 @@\n [![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n [![r2c Twitter](https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue)](https://twitter.com/intent/follow?screen_name=r2cdev)\n \n-`semgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n-your codebase. It combines the convenience of `grep` with the correctness of\n-syntactical and semantic search. Developers, DevOps engineers, and security engineers\n-use `semgrep` to write code with confidence.\n+<p align=\"center\">\n+  <a href=\"#overview\">Overview</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#installation\">Installation</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#usage\">Usage</a>\n+  <br/>\n+  <a href=\"#resources\">Resources</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#contributing\">Contributing</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#commercial-support\">Commercial Support</a>\n+</p>\n+\n+<h3 align=\"center\">\n+  A fast, lightweight static analysis tool that lets you search code like you\u2019d write it.\n+</h3>  \n+<h3 align=\"center\">\n+  Find security bugs. Enforce coding standards. Scan every PR.\n+</h3>\n+<h3 align=\"center\">  \n+  Easily block bad code so you can get back to building the next great thing.\n+</h3>\n+\n+Semgrep is a tool for easily detecting and preventing bugs and anti-patterns\n+in your codebase. It combines the convenience and rapid iteration speed of\n+`grep`, but is \"code-aware\"; that is, you can easily match function calls, class\n+or method definitions, and more.\n+\n+## Quickstart\n+\n+After [installing semgrep](#installation), run the default set of checks with:\n+\n+```bash\n+semgrep --config=r2c path/to/repo\n+```\n \n-**Try it now:** [https://semgrep.live](https://semgrep.live/)\n+Or try Semgrep in your browser: [https://semgrep.live](https://semgrep.live/).\n \n ## Overview\n \n-Language support:\n+### Key features\n+\n+* **Language aware**: Semgrep parses source code into Abstract Syntax Trees (ASTs), so it understands function calls, method and class definitions, conditionals, and more. \n+  * Unlike regexes, Semgrep won't get tripped up matching things you don't care about in comments or string literals.\n+* **Fast**: Speedy enough to run on every build, commit, or file save.\n+* **Batteries included**: Leverage hundreds of preexisting security checks for popular languages and frameworks in the community [registry](https://semgrep.live/r), including coverage for the [OWASP Top 10](https://owasp.org/www-project-top-ten/).\n+* **Handles multiple languages**: No need to learn and maintain multiple tools for your polyglot environment (e.g. ESLint, find-sec-bugs, rubocop, gosec, ...).\n+* **Easy to tweak**: Rules look like the code you\u2019re searching, no static analysis PhD required.\n+* Does **not** require compilation, Semgrep runs on source code directly. \n+* **Easy to integrate**: Highly portable and many CI and git hook integrations already exist. Run via CLI or Docker, output `--json` and pipe results into whatever system you want.\n+\n+\n+### Language support\n+\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Ruby** | **Typescript** | **PHP &nbsp; &nbsp;** |\n+|:-----------|:---------------|:----------------------------|:----------------|:----------------------------------|:---------|:---------------|:----------------------|\n+| \u2705          | \u2705              | \u2705                           | \u2705               | \u2705                                 | \ud83d\udea7 |  Coming...      | Coming...             |\n+\n+... and many more coming.\n+\n+### Pattern Syntax Teaser\n+\n+One of the most unique and useful things about Semgrep is how easy it is to write and iterate on queries. ", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyNjM5Ng==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r438426396", "bodyText": "@dlukeomalley To me, I feel like this more clearly outlines the value of semgrep's expressive power than having just the example pattern table, which, in its current form, the value prop doesn't leap out to me.\nI'd be up for reordering or renaming this section if you think that makes more sense, or can cut it if you'd prefer.", "author": "clintgibler", "createdAt": "2020-06-10T21:46:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczMTAwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczMjIyOA==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437732228", "bodyText": "Few thoughts for this section:\n\nI think it's worthwhile for us to acknowledge this is a Python sample\nI'd like to add or use the term \"audit\" for the broader queries. I have been using them when I want to see all call sites in my code, and perhaps explaining that workflow a little will help inspire folks.", "author": "dlukeomalley", "createdAt": "2020-06-09T21:26:45Z", "path": "README.md", "diffHunk": "@@ -4,22 +4,116 @@\n [![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n [![r2c Twitter](https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue)](https://twitter.com/intent/follow?screen_name=r2cdev)\n \n-`semgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n-your codebase. It combines the convenience of `grep` with the correctness of\n-syntactical and semantic search. Developers, DevOps engineers, and security engineers\n-use `semgrep` to write code with confidence.\n+<p align=\"center\">\n+  <a href=\"#overview\">Overview</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#installation\">Installation</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#usage\">Usage</a>\n+  <br/>\n+  <a href=\"#resources\">Resources</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#contributing\">Contributing</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#commercial-support\">Commercial Support</a>\n+</p>\n+\n+<h3 align=\"center\">\n+  A fast, lightweight static analysis tool that lets you search code like you\u2019d write it.\n+</h3>  \n+<h3 align=\"center\">\n+  Find security bugs. Enforce coding standards. Scan every PR.\n+</h3>\n+<h3 align=\"center\">  \n+  Easily block bad code so you can get back to building the next great thing.\n+</h3>\n+\n+Semgrep is a tool for easily detecting and preventing bugs and anti-patterns\n+in your codebase. It combines the convenience and rapid iteration speed of\n+`grep`, but is \"code-aware\"; that is, you can easily match function calls, class\n+or method definitions, and more.\n+\n+## Quickstart\n+\n+After [installing semgrep](#installation), run the default set of checks with:\n+\n+```bash\n+semgrep --config=r2c path/to/repo\n+```\n \n-**Try it now:** [https://semgrep.live](https://semgrep.live/)\n+Or try Semgrep in your browser: [https://semgrep.live](https://semgrep.live/).\n \n ## Overview\n \n-Language support:\n+### Key features\n+\n+* **Language aware**: Semgrep parses source code into Abstract Syntax Trees (ASTs), so it understands function calls, method and class definitions, conditionals, and more. \n+  * Unlike regexes, Semgrep won't get tripped up matching things you don't care about in comments or string literals.\n+* **Fast**: Speedy enough to run on every build, commit, or file save.\n+* **Batteries included**: Leverage hundreds of preexisting security checks for popular languages and frameworks in the community [registry](https://semgrep.live/r), including coverage for the [OWASP Top 10](https://owasp.org/www-project-top-ten/).\n+* **Handles multiple languages**: No need to learn and maintain multiple tools for your polyglot environment (e.g. ESLint, find-sec-bugs, rubocop, gosec, ...).\n+* **Easy to tweak**: Rules look like the code you\u2019re searching, no static analysis PhD required.\n+* Does **not** require compilation, Semgrep runs on source code directly. \n+* **Easy to integrate**: Highly portable and many CI and git hook integrations already exist. Run via CLI or Docker, output `--json` and pipe results into whatever system you want.\n+\n+\n+### Language support\n+\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Ruby** | **Typescript** | **PHP &nbsp; &nbsp;** |\n+|:-----------|:---------------|:----------------------------|:----------------|:----------------------------------|:---------|:---------------|:----------------------|\n+| \u2705          | \u2705              | \u2705                           | \u2705               | \u2705                                 | \ud83d\udea7 |  Coming...      | Coming...             |\n+\n+... and many more coming.\n+\n+### Pattern Syntax Teaser\n+\n+One of the most unique and useful things about Semgrep is how easy it is to write and iterate on queries. \n \n-| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n-|:-----------|:---------------|:----------------------------|:----------------|:----------------------------------|:---------------|:----------------------|\n-| \u2705          | \u2705              | \u2705                           | \u2705               | \u2705                                 | Coming...      | Coming...             |\n+The goal is to make it as *easy as possible* to go from an idea in your head to finding the code patterns you intend to.\n \n-Example patterns:\n+**Example**: Let's say you want to find all calls to a function named `exec`, and you don't care about the arguments. With Semgrep, you could simply supply the pattern `exec(...)` and you'd match:", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczMjgzMQ==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437732831", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Semgrep can even do fancy things like matching aliased imports:\n          \n          \n            \n            Semgrep will even match aliased imports:", "author": "dlukeomalley", "createdAt": "2020-06-09T21:28:03Z", "path": "README.md", "diffHunk": "@@ -4,22 +4,116 @@\n [![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n [![r2c Twitter](https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue)](https://twitter.com/intent/follow?screen_name=r2cdev)\n \n-`semgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n-your codebase. It combines the convenience of `grep` with the correctness of\n-syntactical and semantic search. Developers, DevOps engineers, and security engineers\n-use `semgrep` to write code with confidence.\n+<p align=\"center\">\n+  <a href=\"#overview\">Overview</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#installation\">Installation</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#usage\">Usage</a>\n+  <br/>\n+  <a href=\"#resources\">Resources</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#contributing\">Contributing</a>\n+  <span> \u00b7 </span>\n+  <a href=\"#commercial-support\">Commercial Support</a>\n+</p>\n+\n+<h3 align=\"center\">\n+  A fast, lightweight static analysis tool that lets you search code like you\u2019d write it.\n+</h3>  \n+<h3 align=\"center\">\n+  Find security bugs. Enforce coding standards. Scan every PR.\n+</h3>\n+<h3 align=\"center\">  \n+  Easily block bad code so you can get back to building the next great thing.\n+</h3>\n+\n+Semgrep is a tool for easily detecting and preventing bugs and anti-patterns\n+in your codebase. It combines the convenience and rapid iteration speed of\n+`grep`, but is \"code-aware\"; that is, you can easily match function calls, class\n+or method definitions, and more.\n+\n+## Quickstart\n+\n+After [installing semgrep](#installation), run the default set of checks with:\n+\n+```bash\n+semgrep --config=r2c path/to/repo\n+```\n \n-**Try it now:** [https://semgrep.live](https://semgrep.live/)\n+Or try Semgrep in your browser: [https://semgrep.live](https://semgrep.live/).\n \n ## Overview\n \n-Language support:\n+### Key features\n+\n+* **Language aware**: Semgrep parses source code into Abstract Syntax Trees (ASTs), so it understands function calls, method and class definitions, conditionals, and more. \n+  * Unlike regexes, Semgrep won't get tripped up matching things you don't care about in comments or string literals.\n+* **Fast**: Speedy enough to run on every build, commit, or file save.\n+* **Batteries included**: Leverage hundreds of preexisting security checks for popular languages and frameworks in the community [registry](https://semgrep.live/r), including coverage for the [OWASP Top 10](https://owasp.org/www-project-top-ten/).\n+* **Handles multiple languages**: No need to learn and maintain multiple tools for your polyglot environment (e.g. ESLint, find-sec-bugs, rubocop, gosec, ...).\n+* **Easy to tweak**: Rules look like the code you\u2019re searching, no static analysis PhD required.\n+* Does **not** require compilation, Semgrep runs on source code directly. \n+* **Easy to integrate**: Highly portable and many CI and git hook integrations already exist. Run via CLI or Docker, output `--json` and pipe results into whatever system you want.\n+\n+\n+### Language support\n+\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Ruby** | **Typescript** | **PHP &nbsp; &nbsp;** |\n+|:-----------|:---------------|:----------------------------|:----------------|:----------------------------------|:---------|:---------------|:----------------------|\n+| \u2705          | \u2705              | \u2705                           | \u2705               | \u2705                                 | \ud83d\udea7 |  Coming...      | Coming...             |\n+\n+... and many more coming.\n+\n+### Pattern Syntax Teaser\n+\n+One of the most unique and useful things about Semgrep is how easy it is to write and iterate on queries. \n \n-| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n-|:-----------|:---------------|:----------------------------|:----------------|:----------------------------------|:---------------|:----------------------|\n-| \u2705          | \u2705              | \u2705                           | \u2705               | \u2705                                 | Coming...      | Coming...             |\n+The goal is to make it as *easy as possible* to go from an idea in your head to finding the code patterns you intend to.\n \n-Example patterns:\n+**Example**: Let's say you want to find all calls to a function named `exec`, and you don't care about the arguments. With Semgrep, you could simply supply the pattern `exec(...)` and you'd match:\n+\n+~~~python\n+# Simple cases grep could find\n+exec(\"ls\")\n+exec(some_var)\n+\n+# But you don't have to worry about whitespace\n+exec (foo)\n+\n+# Or calls across multiple lines\n+exec (\n+    bar\n+)\n+~~~\n+\n+Importantly, Semgrep would *not* match the following:\n+\n+~~~python\n+# grep would match this, but semgrep ignores it because \n+# it doesn't have the right function name\n+other_exec(bar)\n+\n+# semgrep ignores commented out lines\n+# exec(foo)\n+\n+# and hard-coded strings\n+print(\"exec(bar)\")\n+~~~\n+\n+Semgrep can even do fancy things like matching aliased imports:", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczNDI3Ng==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437734276", "bodyText": "Meta comment. By this point in the README it's feeling very dense. I'd love to do a design pass to see if we can make it feel lighter or cut more content.", "author": "dlukeomalley", "createdAt": "2020-06-09T21:31:10Z", "path": "README.md", "diffHunk": "@@ -44,62 +141,57 @@ On Ubuntu, an install script is available on each release [here](https://github.\n ./semgrep-v0.9.0-ubuntu-generic.sh\n ```\n \n-To try `semgrep` without installation, you can also run it via [Docker](https://docs.docker.com/install/):\n+To try Semgrep without installation, you can also run it via [Docker](https://docs.docker.com/install/):\n \n ```\n docker run --rm -v \"${PWD}:/home/repo\" returntocorp/semgrep --help\n ```\n \n-## Usage\n+## Terminology", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyOTE1Nw==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r438429157", "bodyText": "Agreed re: making it light and doing a later design pass.", "author": "clintgibler", "createdAt": "2020-06-10T21:53:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczNDI3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczNDkxOA==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437734918", "bodyText": "These may be more \"Workflow\" related. Thoughts on adapting this section be about workflows and use cases, and added a \"Usage\" section that is more focused on the CLI? See Bento:\n\nhttps://github.com/returntocorp/bento#usage\nhttps://github.com/returntocorp/bento#workflows", "author": "dlukeomalley", "createdAt": "2020-06-09T21:32:29Z", "path": "README.md", "diffHunk": "@@ -44,62 +141,57 @@ On Ubuntu, an install script is available on each release [here](https://github.\n ./semgrep-v0.9.0-ubuntu-generic.sh\n ```\n \n-To try `semgrep` without installation, you can also run it via [Docker](https://docs.docker.com/install/):\n+To try Semgrep without installation, you can also run it via [Docker](https://docs.docker.com/install/):\n \n ```\n docker run --rm -v \"${PWD}:/home/repo\" returntocorp/semgrep --help\n ```\n \n-## Usage\n+## Terminology\n \n-### Example Usage\n+A **rule** (or *check*) is a Semgrep pattern that can be used to tell match\n+source code.\n \n-Here is a simple Python example, `test.py`. We want to retrieve an object by ID:\n+A **rule pack** (*check pack*) is a collection of Semgrep rules bundled\n+together. For example, \"Here are a bunch of Java checks I want to run.\"\n \n-```python3\n-def get_node(node_id, nodes):\n-    for node in nodes:\n-        if node.id == node.id:  # Oops, supposed to be 'node_id'\n-            return node\n-    return None\n-```\n+## Usage", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczNTM0MQ==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r437735341", "bodyText": "Given the length of the README I could see some of these workflow items being sub-pages and getting some breathing space.", "author": "dlukeomalley", "createdAt": "2020-06-09T21:33:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczNDkxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEzMTc5Nw==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r438131797", "bodyText": "Can we sneak that awesome new logo from @dan5382 somewhere in here?", "author": "mschwager", "createdAt": "2020-06-10T13:42:56Z", "path": "README.md", "diffHunk": "@@ -4,22 +4,116 @@\n [![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n [![r2c Twitter](https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue)](https://twitter.com/intent/follow?screen_name=r2cdev)\n \n-`semgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n-your codebase. It combines the convenience of `grep` with the correctness of\n-syntactical and semantic search. Developers, DevOps engineers, and security engineers\n-use `semgrep` to write code with confidence.\n+<p align=\"center\">", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxNzc5Ng==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r438417796", "bodyText": "\ud83d\udc4d will do.", "author": "clintgibler", "createdAt": "2020-06-10T21:27:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEzMTc5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0MjkyNw==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r438142927", "bodyText": "It feels somewhat redundant and dispersed to have this information in 3 different locations: the main README, the docs README, and the pattern features docs. IMO we should just link to the pattern features docs from here rather than restate a lot of that information. The top-level README is great for a quick intro, but I don't see what this is offering over simply referring to the full, comprehensive pattern features docs. Thoughts?", "author": "mschwager", "createdAt": "2020-06-10T13:57:46Z", "path": "docs/README.md", "diffHunk": "@@ -1,2 +1,118 @@\n-# Getting Started\n+# Semgrep Docs\n \n+Welcome to the extended Semgrep docs! \ud83d\ude4c The Director's Cut, if you will.\n+\n+## Language Support\n+\n+For every language that Semgrep supports, there are certain features that must\n+be implemented, like support for the ellipsis (`...`) operator, metavariables, and more.\n+\n+See [here](matrix.md) for a more detailed breakdown of feature support by\n+language.\n+\n+## Semgrep Output\n+\n+Semgrep by default prints to STDOUT, but it can also output JSON or SARIF (Static Analysis Results Interchange Format). See [here](output.md) for more details.\n+\n+## Integrations\n+\n+It's easy to integrate Semgrep as a pre-commit hook or in one of many\n+continuous integration (CI) systems. \n+\n+See [here](integrations.md) for example config files to run Semgrep using\n+tools like AppVeyor, CircleCI, TravisCI, GitHub Actions, and Gitlab.\n+\n+## Writing Rules\n+\n+In-depth docs:\n+* [Pattern Features](pattern-features.md) describes what Semgrep patterns can do\n+  in detail, and provides many example use cases of metavariables, the ellipsis\n+  operator, and more.\n+* Semgrep YAML rule files enable you to combine patterns in powerful ways,\n+  allowing you to find code patterns that do or don't match multiple sets of\n+  patterns. See the [config file spec](configuration-files.md) for more details.\n+\n+You can write and share rules directly from the live editor at https://semgrep.live or run Semgrep via a standalone CLI or Docker.\n+\n+### Semgrep Features", "originalCommit": "6e24502ba50de118b730dd1e7e7305f5fc226e85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyMjY4Mw==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r438422683", "bodyText": "Laziness I suppose. A lot of people will keep scrolling but not click from what I know. curious if @pabloest has thoughts", "author": "ievans", "createdAt": "2020-06-10T21:38:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0MjkyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyNzU3MQ==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r438427571", "bodyText": "I don\u2019t have hard data on GitHub readme page usage but my hunch is that given a long README file, many people won\u2019t fully digest what\u2019s deep down on the page and also aren\u2019t super likely to click through to directory-nested help files.\nI think we\u2019re just starting to bump into limitations of using one readme file (or linked/nested readme files) to document an ever-growing list of features and instructions. GitHub doesn\u2019t shine as a real docs replacement IMO. There\u2019s also the repo wiki, but not sure if that\u2019s super great, either.", "author": "pabloest", "createdAt": "2020-06-10T21:49:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0MjkyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQzMjI2OA==", "url": "https://github.com/returntocorp/semgrep/pull/949#discussion_r438432268", "bodyText": "Agreed, this feels too redundant. The reason I had these separate is the content is actually different here (which was moved from the old README) from the full pattern docs. Will combine them \ud83d\udc4d", "author": "clintgibler", "createdAt": "2020-06-10T22:01:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0MjkyNw=="}], "type": "inlineReview"}, {"oid": "fa2dc407412d3745d963a736ef8b25c6b5fad96d", "url": "https://github.com/returntocorp/semgrep/commit/fa2dc407412d3745d963a736ef8b25c6b5fad96d", "message": "Address feedback, move some content from docs/README.md to config-files and pattern-features", "committedDate": "2020-06-10T22:10:55Z", "type": "commit"}, {"oid": "cd9035f4a8395909f0bc556414d24462ac2229ca", "url": "https://github.com/returntocorp/semgrep/commit/cd9035f4a8395909f0bc556414d24462ac2229ca", "message": "Add semgrep logo and motivation section", "committedDate": "2020-06-10T22:24:22Z", "type": "commit"}, {"oid": "d93a05caa423810dd0dd1601ff69ef67b7ba9b83", "url": "https://github.com/returntocorp/semgrep/commit/d93a05caa423810dd0dd1601ff69ef67b7ba9b83", "message": "Fix capitalization in JS/TS", "committedDate": "2020-06-11T18:45:14Z", "type": "commit"}, {"oid": "d6c07f5b816dc9e85a7476567efed50f7df7e6da", "url": "https://github.com/returntocorp/semgrep/commit/d6c07f5b816dc9e85a7476567efed50f7df7e6da", "message": "Merge branch 'develop' into wip-readme-update-895", "committedDate": "2020-06-11T18:58:01Z", "type": "commit"}, {"oid": "a30e7e567d6ab8df18f263b4b86d816ab0d3e698", "url": "https://github.com/returntocorp/semgrep/commit/a30e7e567d6ab8df18f263b4b86d816ab0d3e698", "message": "Center badges. Update intro text.", "committedDate": "2020-06-11T19:36:38Z", "type": "commit"}, {"oid": "654d10ed190439398b8253620fdb5b4117b703ab", "url": "https://github.com/returntocorp/semgrep/commit/654d10ed190439398b8253620fdb5b4117b703ab", "message": "Expand motivation section and philosophy", "committedDate": "2020-06-11T19:36:38Z", "type": "commit"}, {"oid": "90f4ee74633eccc07d6718d7fc0571a93246e40f", "url": "https://github.com/returntocorp/semgrep/commit/90f4ee74633eccc07d6718d7fc0571a93246e40f", "message": "Move installation up. Fix motivation header level", "committedDate": "2020-06-11T19:39:58Z", "type": "commit"}, {"oid": "bb0eda52af7ce407d1c359863b5b00a3da2b4605", "url": "https://github.com/returntocorp/semgrep/commit/bb0eda52af7ce407d1c359863b5b00a3da2b4605", "message": "Add pointer to usage section", "committedDate": "2020-06-11T19:43:10Z", "type": "commit"}, {"oid": "4e736e415f0564db455d8ac069a0cfa2372e1f72", "url": "https://github.com/returntocorp/semgrep/commit/4e736e415f0564db455d8ac069a0cfa2372e1f72", "message": "Add br in slogan header", "committedDate": "2020-06-11T19:44:32Z", "type": "commit"}, {"oid": "8ae5f95556e9686f92c8906b8cafb39bf9b0b752", "url": "https://github.com/returntocorp/semgrep/commit/8ae5f95556e9686f92c8906b8cafb39bf9b0b752", "message": "Add installation first", "committedDate": "2020-06-11T19:48:12Z", "type": "commit"}, {"oid": "2ac8976030351876e30bddac6fe27e683d54fa3c", "url": "https://github.com/returntocorp/semgrep/commit/2ac8976030351876e30bddac6fe27e683d54fa3c", "message": "Fix title cases", "committedDate": "2020-06-11T19:51:03Z", "type": "commit"}, {"oid": "f42f36d0993fe7f10ceb1d0d155645def2754e86", "url": "https://github.com/returntocorp/semgrep/commit/f42f36d0993fe7f10ceb1d0d155645def2754e86", "message": "Capitalize Registry, a proper noun", "committedDate": "2020-06-11T20:07:32Z", "type": "commit"}, {"oid": "d6afa96921887714047eb517af93d9a72493634a", "url": "https://github.com/returntocorp/semgrep/commit/d6afa96921887714047eb517af93d9a72493634a", "message": "Add slack badge. Fix issues badge.", "committedDate": "2020-06-11T20:12:18Z", "type": "commit"}, {"oid": "5289c86d8283b0bce09c9e08b61bfa197fdc3411", "url": "https://github.com/returntocorp/semgrep/commit/5289c86d8283b0bce09c9e08b61bfa197fdc3411", "message": "Remove distracting links. Offer online during installation", "committedDate": "2020-06-11T20:35:23Z", "type": "commit"}, {"oid": "758ae6d448901a36b269665f23f3596704862d93", "url": "https://github.com/returntocorp/semgrep/commit/758ae6d448901a36b269665f23f3596704862d93", "message": "Update headlines. Rewrite intro and overview", "committedDate": "2020-06-11T21:33:54Z", "type": "commit"}, {"oid": "d8c0c7b18b572da7de4b1dd6151fe87bfcb081d2", "url": "https://github.com/returntocorp/semgrep/commit/d8c0c7b18b572da7de4b1dd6151fe87bfcb081d2", "message": "Remove terminology. Describe inline elsewhere", "committedDate": "2020-06-11T21:36:40Z", "type": "commit"}, {"oid": "7d3b962191c85b854efa4d0ecd7936ed5568f534", "url": "https://github.com/returntocorp/semgrep/commit/7d3b962191c85b854efa4d0ecd7936ed5568f534", "message": "Reorder workflow sections. Standardize semgrep capitalization", "committedDate": "2020-06-11T21:44:03Z", "type": "commit"}]}