{"pr_number": 907, "pr_title": "Switch YAML parsing to Ruamel", "pr_createdAt": "2020-06-03T20:15:02Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/907", "timeline": [{"oid": "3a3747443e3a7aa388ebc8cb3d82bad947d67b4c", "url": "https://github.com/returntocorp/semgrep/commit/3a3747443e3a7aa388ebc8cb3d82bad947d67b4c", "message": "Switch YAML parsing to Ruamel\n\n- Change YAML parsing to Ruamel\n- Wrap Ruamel output in `YamlTree` to preserve all the span information (Ruamel only preserves the start, not the end of spans in it's normal output)\n- Coax the mypy gods into accepting this. Python is bad for ADTs...", "committedDate": "2020-06-03T20:17:10Z", "type": "commit"}, {"oid": "3a3747443e3a7aa388ebc8cb3d82bad947d67b4c", "url": "https://github.com/returntocorp/semgrep/commit/3a3747443e3a7aa388ebc8cb3d82bad947d67b4c", "message": "Switch YAML parsing to Ruamel\n\n- Change YAML parsing to Ruamel\n- Wrap Ruamel output in `YamlTree` to preserve all the span information (Ruamel only preserves the start, not the end of spans in it's normal output)\n- Coax the mypy gods into accepting this. Python is bad for ADTs...", "committedDate": "2020-06-03T20:17:10Z", "type": "forcePushed"}, {"oid": "5c8a1e4052a5566db06452c5ff2f5f8e141da555", "url": "https://github.com/returntocorp/semgrep/commit/5c8a1e4052a5566db06452c5ff2f5f8e141da555", "message": "pre-commit CI job", "committedDate": "2020-06-03T20:31:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzOTMzMg==", "url": "https://github.com/returntocorp/semgrep/pull/907#discussion_r434839332", "bodyText": "Does ruamel.yaml have a fast import time wrt yaml?", "author": "brendongo", "createdAt": "2020-06-03T20:38:38Z", "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -16,6 +16,8 @@\n from typing import Optional\n from typing import Tuple\n \n+from ruamel.yaml import YAML", "originalCommit": "5c8a1e4052a5566db06452c5ff2f5f8e141da555", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0OTEyNQ==", "url": "https://github.com/returntocorp/semgrep/pull/907#discussion_r434849125", "bodyText": "I think we're good: semgrep --version  0.22s user 0.01s system 100% cpu 0.232 total", "author": "rcoh", "createdAt": "2020-06-03T20:57:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzOTMzMg=="}], "type": "inlineReview"}, {"oid": "e076f9c3e1d63669e5641beac5a6e645ee5b4e1b", "url": "https://github.com/returntocorp/semgrep/commit/e076f9c3e1d63669e5641beac5a6e645ee5b4e1b", "message": "pre-commit CI job", "committedDate": "2020-06-03T20:42:25Z", "type": "forcePushed"}, {"oid": "4767f27ca32c9299150d11d9a4ce1a070ddda5dc", "url": "https://github.com/returntocorp/semgrep/commit/4767f27ca32c9299150d11d9a4ce1a070ddda5dc", "message": "Fix pre-commit on CI with stubs", "committedDate": "2020-06-03T20:54:39Z", "type": "commit"}, {"oid": "4767f27ca32c9299150d11d9a4ce1a070ddda5dc", "url": "https://github.com/returntocorp/semgrep/commit/4767f27ca32c9299150d11d9a4ce1a070ddda5dc", "message": "Fix pre-commit on CI with stubs", "committedDate": "2020-06-03T20:54:39Z", "type": "forcePushed"}, {"oid": "95d1bf4639b386e17127d4d6d0ba36e32961789f", "url": "https://github.com/returntocorp/semgrep/commit/95d1bf4639b386e17127d4d6d0ba36e32961789f", "message": "Fix bug on coming from single-line patterns", "committedDate": "2020-06-03T21:32:50Z", "type": "commit"}, {"oid": "de3e130e0acc890d907590f115372a3d7dc23cb4", "url": "https://github.com/returntocorp/semgrep/commit/de3e130e0acc890d907590f115372a3d7dc23cb4", "message": "Fix broken tests (missing snapshot and missed change to ruamel)", "committedDate": "2020-06-03T22:07:21Z", "type": "commit"}, {"oid": "de3e130e0acc890d907590f115372a3d7dc23cb4", "url": "https://github.com/returntocorp/semgrep/commit/de3e130e0acc890d907590f115372a3d7dc23cb4", "message": "Fix broken tests (missing snapshot and missed change to ruamel)", "committedDate": "2020-06-03T22:07:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM3NzQzNw==", "url": "https://github.com/returntocorp/semgrep/pull/907#discussion_r435377437", "bodyText": "Can we use the standard {PLEASE_REPORT_ISSUE...} here?", "author": "ievans", "createdAt": "2020-06-04T16:08:18Z", "path": "semgrep/semgrep/rule_lang.py", "diffHunk": "@@ -0,0 +1,89 @@\n+from io import StringIO\n+from typing import Any\n+from typing import Dict\n+from typing import List\n+from typing import NamedTuple\n+from typing import Optional\n+from typing import Union\n+\n+from ruamel.yaml import Node\n+from ruamel.yaml import RoundTripConstructor\n+from ruamel.yaml import YAML\n+\n+\n+class Position(NamedTuple):\n+    line: int\n+    column: int\n+\n+    def __repr__(self) -> str:\n+        return f\"{self.line}:{self.column}\"\n+\n+\n+class Span(NamedTuple):\n+    start: Position\n+    end: Position\n+    file: Optional[str]\n+\n+    @classmethod\n+    def from_node(cls, node: Node, file: Optional[str]) -> \"Span\":\n+        start = Position(line=node.start_mark.line, column=node.start_mark.column)\n+        end = Position(line=node.end_mark.line, column=node.end_mark.column)\n+        return Span(start=start, end=end, file=file)\n+\n+    def __repr__(self) -> str:\n+        return f\"{self.start}-{self.end}\"\n+\n+\n+# Actually recursive but mypy is unhelpful\n+YamlValue = Union[str, int, List[Any], Dict[str, Any]]\n+LocatedYamlValue = Union[str, int, List[\"YamlTree\"], Dict[\"YamlTree\", \"YamlTree\"]]\n+\n+\n+class YamlTree:\n+    def __init__(self, value: LocatedYamlValue, span: Span):\n+        self.value = value\n+        self.span = span\n+\n+    # __eq__ and _hash__ delegate to value to support `value['a']` working properly.\n+    # otherwise, since the key is _actually_ a `Located` object you'd need to give the\n+    # span to pull it out of the dictionary.\n+    def __eq__(self, other: Any) -> bool:\n+        return self.value.__eq__(other)\n+\n+    def __hash__(self) -> int:\n+        return hash(self.value)\n+\n+    def __repr__(self) -> str:\n+        return f\"{self.span}: ---> {self.value}\"\n+\n+    def unroll(self) -> YamlValue:\n+        \"\"\"\n+        Recursively expand the `self.value`, converting back to a normal datastructure\n+        \"\"\"\n+        if isinstance(self.value, list):\n+            return [x.unroll() for x in self.value]\n+        elif isinstance(self.value, dict):\n+            return {str(k.unroll()): v.unroll() for k, v in self.value.items()}\n+        elif isinstance(self.value, YamlTree):\n+            return self.value.unroll()\n+        else:\n+            return self.value\n+\n+\n+def parse_yaml(contents: str) -> Dict[str, Any]:\n+    yaml = YAML()\n+    return yaml.load(StringIO(contents))  # type: ignore\n+\n+\n+def parse_yaml_preserve_spans(contents: str, filename: Optional[str]) -> YamlTree:\n+    class SpanPreservingRuamelConstructor(RoundTripConstructor):\n+        def construct_object(self, node: Node, deep: bool = False) -> YamlTree:\n+            r = super().construct_object(node, deep)\n+            return YamlTree(r, Span.from_node(node, filename))\n+\n+    yaml = YAML()\n+    yaml.Constructor = SpanPreservingRuamelConstructor\n+    data = yaml.load(StringIO(contents))\n+    if not isinstance(data, YamlTree):\n+        raise Exception(\"Something has gone horribly wrong in the YAML parser\")", "originalCommit": "de3e130e0acc890d907590f115372a3d7dc23cb4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM3ODEwNw==", "url": "https://github.com/returntocorp/semgrep/pull/907#discussion_r435378107", "bodyText": "should we explicit note in comment or function name whether or not this is safe?", "author": "ievans", "createdAt": "2020-06-04T16:09:19Z", "path": "semgrep/semgrep/rule_lang.py", "diffHunk": "@@ -0,0 +1,89 @@\n+from io import StringIO\n+from typing import Any\n+from typing import Dict\n+from typing import List\n+from typing import NamedTuple\n+from typing import Optional\n+from typing import Union\n+\n+from ruamel.yaml import Node\n+from ruamel.yaml import RoundTripConstructor\n+from ruamel.yaml import YAML\n+\n+\n+class Position(NamedTuple):\n+    line: int\n+    column: int\n+\n+    def __repr__(self) -> str:\n+        return f\"{self.line}:{self.column}\"\n+\n+\n+class Span(NamedTuple):\n+    start: Position\n+    end: Position\n+    file: Optional[str]\n+\n+    @classmethod\n+    def from_node(cls, node: Node, file: Optional[str]) -> \"Span\":\n+        start = Position(line=node.start_mark.line, column=node.start_mark.column)\n+        end = Position(line=node.end_mark.line, column=node.end_mark.column)\n+        return Span(start=start, end=end, file=file)\n+\n+    def __repr__(self) -> str:\n+        return f\"{self.start}-{self.end}\"\n+\n+\n+# Actually recursive but mypy is unhelpful\n+YamlValue = Union[str, int, List[Any], Dict[str, Any]]\n+LocatedYamlValue = Union[str, int, List[\"YamlTree\"], Dict[\"YamlTree\", \"YamlTree\"]]\n+\n+\n+class YamlTree:\n+    def __init__(self, value: LocatedYamlValue, span: Span):\n+        self.value = value\n+        self.span = span\n+\n+    # __eq__ and _hash__ delegate to value to support `value['a']` working properly.\n+    # otherwise, since the key is _actually_ a `Located` object you'd need to give the\n+    # span to pull it out of the dictionary.\n+    def __eq__(self, other: Any) -> bool:\n+        return self.value.__eq__(other)\n+\n+    def __hash__(self) -> int:\n+        return hash(self.value)\n+\n+    def __repr__(self) -> str:\n+        return f\"{self.span}: ---> {self.value}\"\n+\n+    def unroll(self) -> YamlValue:\n+        \"\"\"\n+        Recursively expand the `self.value`, converting back to a normal datastructure\n+        \"\"\"\n+        if isinstance(self.value, list):\n+            return [x.unroll() for x in self.value]\n+        elif isinstance(self.value, dict):\n+            return {str(k.unroll()): v.unroll() for k, v in self.value.items()}\n+        elif isinstance(self.value, YamlTree):\n+            return self.value.unroll()\n+        else:\n+            return self.value\n+\n+\n+def parse_yaml(contents: str) -> Dict[str, Any]:\n+    yaml = YAML()\n+    return yaml.load(StringIO(contents))  # type: ignore", "originalCommit": "de3e130e0acc890d907590f115372a3d7dc23cb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM4MTk2NQ==", "url": "https://github.com/returntocorp/semgrep/pull/907#discussion_r435381965", "bodyText": "(seems actually pretty important given that we suggest parsing remote YAML files all the time)", "author": "ievans", "createdAt": "2020-06-04T16:15:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM3ODEwNw=="}], "type": "inlineReview"}, {"oid": "813e8b5852f8bf70fe65e9be3393e9cef3627bf9", "url": "https://github.com/returntocorp/semgrep/commit/813e8b5852f8bf70fe65e9be3393e9cef3627bf9", "message": "CR feedback", "committedDate": "2020-06-04T16:20:29Z", "type": "commit"}, {"oid": "ae496d3a4bf5de452bc1969f557331d20a525ad6", "url": "https://github.com/returntocorp/semgrep/commit/ae496d3a4bf5de452bc1969f557331d20a525ad6", "message": "Merge branch 'develop' into russell/switch-to-ruamel", "committedDate": "2020-06-04T17:38:27Z", "type": "commit"}]}