{"pr_number": 1729, "pr_title": "Update javascript and typescript parsers for latest tree-sitter grammars", "pr_createdAt": "2020-09-24T22:28:35Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/1729", "timeline": [{"oid": "40efa4881f17a9f9ce3e84047f2bd860a55a6e93", "url": "https://github.com/returntocorp/semgrep/commit/40efa4881f17a9f9ce3e84047f2bd860a55a6e93", "message": "Use latest ocaml-tree-sitter-lang, with breaking changes for javascript\nand typescript. Update the unified ts/tsx CST type definitions.", "committedDate": "2020-09-23T20:17:43Z", "type": "commit"}, {"oid": "aa0972bbb45d3752a880a13f16ebe003afdc2f52", "url": "https://github.com/returntocorp/semgrep/commit/aa0972bbb45d3752a880a13f16ebe003afdc2f52", "message": "Fix javascript converter from cst to ast.", "committedDate": "2020-09-24T01:43:06Z", "type": "commit"}, {"oid": "b90582fc3f285b6c68dcbcb0a2b39a994deda710", "url": "https://github.com/returntocorp/semgrep/commit/b90582fc3f285b6c68dcbcb0a2b39a994deda710", "message": "Update typescript tree-sitter parser", "committedDate": "2020-09-24T21:57:22Z", "type": "commit"}, {"oid": "71390472cd824023b89b70baecae235ab3d640ce", "url": "https://github.com/returntocorp/semgrep/commit/71390472cd824023b89b70baecae235ab3d640ce", "message": "Merge remote-tracking branch 'origin/develop' into ts", "committedDate": "2020-09-24T22:27:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA3MjMyNw==", "url": "https://github.com/returntocorp/semgrep/pull/1729#discussion_r495072327", "bodyText": "I guess at some point we will need to extend ast_js.ml to describe more precisely this ?. construct instead\nof agglolmerating both in ObjAccess.", "author": "aryx", "createdAt": "2020-09-25T15:39:48Z", "path": "semgrep-core/parsing/Parse_javascript_tree_sitter.ml", "diffHunk": "@@ -715,19 +712,18 @@ and class_body (env : env) ((v1, v2, v3) : CST.class_body) =\n   let v3 = token env v3 (* \"}\" *) in\n   v1, v2, v3\n \n+and anon_choice_exp (env : env) (x : CST.anon_choice_exp) : expr =\n+  match x with\n+  | `Exp x -> expression env x\n+  | `Choice_this x -> primary_expression env x\n+\n and member_expression (env : env) ((v1, v2, v3) : CST.member_expression) : expr =\n-  let v1 =\n-    (match v1 with\n-    | `Exp x -> expression env x\n-    | `Id tok ->\n-          identifier_exp env tok (* identifier *)\n-    | `Super tok -> super env tok (* \"super\" *)\n-    | `Choice_get x ->\n-          let id = reserved_identifier env x in\n-          idexp id\n-    )\n+  let v1 = anon_choice_exp env v1 in\n+  let v2 =\n+    match v2 with\n+    | `DOT tok (* \".\" *)\n+    | `QMARKDOT (* \"?.\" *) tok -> token env tok\n   in\n-  let v2 = token env v2 (* \".\" *) in\n   let v3 = identifier env v3 (* identifier *) in\n   ObjAccess (v1, v2, PN v3)", "originalCommit": "71390472cd824023b89b70baecae235ab3d640ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI4MTkwNg==", "url": "https://github.com/returntocorp/semgrep/pull/1729#discussion_r495281906", "bodyText": "I added some to-dos. I suggest we take care of this later. At this point ?. is simply treated like normal access in all 3 cases (property access, function call, array access).", "author": "mjambon", "createdAt": "2020-09-25T22:26:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA3MjMyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA3MzU4NQ==", "url": "https://github.com/returntocorp/semgrep/pull/1729#discussion_r495073585", "bodyText": "again, probably need a new construct instead of putting in Apply.", "author": "aryx", "createdAt": "2020-09-25T15:41:50Z", "path": "semgrep-core/parsing/Parse_javascript_tree_sitter.ml", "diffHunk": "@@ -874,20 +871,30 @@ and constructable_expression (env : env) (x : CST.constructable_expression) : ex\n       let v3 = token env v3 (* \"target\" *) in\n       let t = PI.combine_infos v1 [v2;v3] in\n       IdSpecial (NewTarget, t)\n-  | `New_exp (v1, v2, v3) ->\n-      let v1 = token env v1 (* \"new\" *) in\n-      let v2 = constructable_expression env v2 in\n-      let (t1, xs, t2) =\n-        (match v3 with\n-        | Some x -> arguments env x\n-        | None -> fb [])\n-      in\n-      (* less: we should remove the extra Apply but that's what we do in pfff*)\n-      let newcall = Apply (IdSpecial (New, v1), fb [v2]) in\n-      Apply (newcall, (t1, xs, t2))\n-  )\n-\n \n+  | `Call_exp x ->\n+      (match x with\n+       | `Exp_choice_args (v1, v2) ->\n+           let v1 = expression env v1 in\n+           let v2 =\n+             (match v2 with\n+              | `Args x ->\n+                  let args = arguments env x in\n+                  Apply (v1, args)\n+              | `Temp_str x ->\n+                  let (t1, xs, t2) = template_string env x in\n+                  Apply (IdSpecial (Encaps true, t1),\n+                         (t1, v1::xs, t2))\n+             )\n+           in\n+           v2\n+       | `Choice_this_QMARKDOT_args (v1, v2, v3) ->\n+           let v1 = primary_expression env v1 in\n+           let _v2 = token env v2 (* \"?.\" *) in\n+           let v3 = arguments env v3 in\n+           Apply (v1, v3)", "originalCommit": "71390472cd824023b89b70baecae235ab3d640ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA3NDAwMg==", "url": "https://github.com/returntocorp/semgrep/pull/1729#discussion_r495074002", "bodyText": "AST_generic.And is the logical and. (BitAnd is the bitwise and '&').", "author": "aryx", "createdAt": "2020-09-25T15:42:38Z", "path": "semgrep-core/parsing/Parse_javascript_tree_sitter.ml", "diffHunk": "@@ -1024,6 +1031,9 @@ and expression (env : env) (x : CST.expression) : expr =\n         | `GTGTGTEQ tok -> G.ASR, token env tok (* \">>>=\" *)\n         | `LTLTEQ tok -> G.LSL, token env tok (* \"<<=\" *)\n         | `STARSTAREQ tok -> G.Pow, token env tok (* \"**=\" *)\n+        | `AMPAMPEQ tok -> G.LogAndAss, token env tok (* \"&&=\" *)", "originalCommit": "71390472cd824023b89b70baecae235ab3d640ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI3MzE1MA==", "url": "https://github.com/returntocorp/semgrep/pull/1729#discussion_r495273150", "bodyText": "I fixed this for js and ts. It should transpile into the right thing now.", "author": "mjambon", "createdAt": "2020-09-25T22:11:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA3NDAwMg=="}], "type": "inlineReview"}, {"oid": "d24b472ec3fe8e012b55bf4ccd8c14ea41f4f560", "url": "https://github.com/returntocorp/semgrep/commit/d24b472ec3fe8e012b55bf4ccd8c14ea41f4f560", "message": "Fix translation of logical assignment operators (js, ts).", "committedDate": "2020-09-25T20:55:50Z", "type": "commit"}, {"oid": "09aa9f375c7f979e5cec8d64fece7e98f54ff1a7", "url": "https://github.com/returntocorp/semgrep/commit/09aa9f375c7f979e5cec8d64fece7e98f54ff1a7", "message": "Add to-do notes about representing '?.' properly in the AST.", "committedDate": "2020-09-25T22:23:05Z", "type": "commit"}]}