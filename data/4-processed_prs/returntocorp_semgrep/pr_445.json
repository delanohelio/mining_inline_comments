{"pr_number": 445, "pr_title": "better error outputs and no more pattern validation required", "pr_createdAt": "2020-04-11T19:52:07Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/445", "timeline": [{"oid": "284216cc548b0b449abe6ad970c581a7d0698d08", "url": "https://github.com/returntocorp/semgrep/commit/284216cc548b0b449abe6ad970c581a7d0698d08", "message": "progress", "committedDate": "2020-04-11T18:04:46Z", "type": "commit"}, {"oid": "ce1da94478f23ec8ee29f9bf1bc6c35fcf71d710", "url": "https://github.com/returntocorp/semgrep/commit/ce1da94478f23ec8ee29f9bf1bc6c35fcf71d710", "message": "compiles", "committedDate": "2020-04-11T19:03:44Z", "type": "commit"}, {"oid": "e3904ad8a3d75c0a0d8297418aee28ffda536eb4", "url": "https://github.com/returntocorp/semgrep/commit/e3904ad8a3d75c0a0d8297418aee28ffda536eb4", "message": "use error messages inside sgrep-lint", "committedDate": "2020-04-11T19:46:05Z", "type": "commit"}, {"oid": "0b24d399d2f491dd4af71bedcc12f93fd21bfdf5", "url": "https://github.com/returntocorp/semgrep/commit/0b24d399d2f491dd4af71bedcc12f93fd21bfdf5", "message": "address mypy comments", "committedDate": "2020-04-11T19:53:20Z", "type": "commit"}, {"oid": "7f322afd221576ce790605eaf471e9c5485c04b3", "url": "https://github.com/returntocorp/semgrep/commit/7f322afd221576ce790605eaf471e9c5485c04b3", "message": "fix test suite", "committedDate": "2020-04-11T20:34:53Z", "type": "commit"}, {"oid": "ad6775378a80c60dadc23f40d713c33949759a84", "url": "https://github.com/returntocorp/semgrep/commit/ad6775378a80c60dadc23f40d713c33949759a84", "message": "cleanup dead code", "committedDate": "2020-04-11T20:38:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExMDY1Ng==", "url": "https://github.com/returntocorp/semgrep/pull/445#discussion_r407110656", "bodyText": "cc @aryx . What is the future of the sgrep CLI? Would it be reasonable to default to JSON output in all cases? Simplifies things for sgrep_lint but I don't have full visibility.", "author": "ievans", "createdAt": "2020-04-11T21:01:51Z", "path": "sgrep/bin/main_sgrep.ml", "diffHunk": "@@ -540,10 +566,14 @@ let main () =\n     (* main entry *)\n     (* --------------------------------------------------------- *)\n     | x::xs -> \n-        if !rules_file <> \"\"\n-        then sgrep_with_rules !rules_file (x::xs)\n-        else sgrep_with_one_pattern (x::xs)\n-\n+        (try (\n+          if !rules_file <> \"\"\n+          then sgrep_with_rules !rules_file (x::xs)\n+          else sgrep_with_one_pattern (x::xs)\n+        ) with exn -> \n+          pr (format_output_exception exn); (* todo, should be pr2 probably *)", "originalCommit": "ad6775378a80c60dadc23f40d713c33949759a84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1ODExMw==", "url": "https://github.com/returntocorp/semgrep/pull/445#discussion_r407158113", "bodyText": "I like to have a simple path to test sgrep core functionality. When there's a bug, I prefer to limit as much as possible layers, so I just want one pattern (no yaml file, no sgrep-lint wrapper) and a test file. Before it was bad because there was sgrep_lint.ml and sgrep_generic.ml but now it's mostly the same code behind -e and -rules_file (they both call the same sgrep_generic.ml) so I think it's fine.", "author": "aryx", "createdAt": "2020-04-12T07:16:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExMDY1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1ODMxNg==", "url": "https://github.com/returntocorp/semgrep/pull/445#discussion_r407158316", "bodyText": "pr means on stdout, pr2 means on stderr.\nI don't know what sgrep-lint captures, I think stdout, so probably good to have pr", "author": "aryx", "createdAt": "2020-04-12T07:18:12Z", "path": "sgrep/bin/main_sgrep.ml", "diffHunk": "@@ -540,10 +566,14 @@ let main () =\n     (* main entry *)\n     (* --------------------------------------------------------- *)\n     | x::xs -> \n-        if !rules_file <> \"\"\n-        then sgrep_with_rules !rules_file (x::xs)\n-        else sgrep_with_one_pattern (x::xs)\n-\n+        (try (\n+          if !rules_file <> \"\"\n+          then sgrep_with_rules !rules_file (x::xs)\n+          else sgrep_with_one_pattern (x::xs)\n+        ) with exn -> \n+          pr (format_output_exception exn); (* todo, should be pr2 probably *)", "originalCommit": "ad6775378a80c60dadc23f40d713c33949759a84", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1ODM5NQ==", "url": "https://github.com/returntocorp/semgrep/pull/445#discussion_r407158395", "bodyText": "I think you can remove the 'Exception' suffix, it's clear from the context that it's an exception.", "author": "aryx", "createdAt": "2020-04-12T07:18:57Z", "path": "sgrep/lib/parse_rules.ml", "diffHunk": "@@ -16,16 +16,21 @@ open Common\n \n module R = Rule\n \n+exception InvalidRuleException of string * string", "originalCommit": "ad6775378a80c60dadc23f40d713c33949759a84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzNTM3NA==", "url": "https://github.com/returntocorp/semgrep/pull/445#discussion_r408335374", "bodyText": "Yes, it's just a habit from Python", "author": "ievans", "createdAt": "2020-04-14T18:08:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1ODM5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1ODQ5Mw==", "url": "https://github.com/returntocorp/semgrep/pull/445#discussion_r407158493", "bodyText": "note that this yaml file is always generated by sgrep-lint; regular users are not supposed to feed sgrep-core directly with yaml file (except me when I test things), so those errors should be caught by the sgrep-lint wrapper anyway.", "author": "aryx", "createdAt": "2020-04-12T07:20:02Z", "path": "sgrep/lib/parse_rules.ml", "diffHunk": "@@ -52,37 +57,36 @@ let parse file =\n                let languages = langs |> List.map (function\n                 | `String s ->\n                   (match Lang.lang_of_string_opt s with\n-                  | None -> error (spf \"unsupported language: %s\" s)\n+                  | None -> raise (InvalidLanguageException (id, (spf \"unsupported language: %s\" s)))\n                   | Some l -> l\n                   )\n-                | _ -> error (spf \"expecting a string for languages\")\n+                | _ -> raise (InvalidRuleException (id, (spf \"expecting a string for languages\")))\n                ) in\n                let lang =\n                  match languages with\n-                 | [] -> error \"we need at least one language\"\n+                 | [] -> raise (InvalidRuleException (id, \"we need at least one language\"))\n                  | x::_xs -> x\n                in\n                let pattern =\n                  (* todo? call Normalize_ast.normalize here? *)\n                  try Parse_generic.parse_pattern lang pattern\n                  with exn ->\n-                   error (spf \"could not parse the pattern %s (exn = %s)\"\n-                            pattern (Common.exn_to_s exn))\n+                   raise (InvalidPatternException (id, pattern, (Lang.string_of_lang lang), (Common.exn_to_s exn)))\n                in\n-               let severity = severity_of_string sev in\n+               let severity = (severity_of_string id sev) in\n                { R. id; pattern; message; languages; severity }\n              | x ->\n                pr2_gen x;\n-               error \"wrong rule fields\"\n+               raise (InvalidYamlException \"wrong rule fields\")\n              )\n           | x ->\n               pr2_gen x;\n-              error \"wrong rule fields\"\n+              raise (InvalidYamlException \"wrong rule fields\")\n          )\n-      | _ -> error \"missing rules entry\"\n+      | _ -> raise (InvalidYamlException \"missing rules entry as top-level key\")\n       )\n   | Result.Error (`Msg s) ->\n-    failwith (spf \"sgrep_lint: could not parse %s (error = %s)\" file s)\n+    raise (UnparsableYamlException s)", "originalCommit": "ad6775378a80c60dadc23f40d713c33949759a84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzNTQ1OA==", "url": "https://github.com/returntocorp/semgrep/pull/445#discussion_r408335458", "bodyText": "True", "author": "ievans", "createdAt": "2020-04-14T18:08:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1ODQ5Mw=="}], "type": "inlineReview"}]}