{"pr_number": 709, "pr_title": "tests: Add performance tests", "pr_createdAt": "2020-05-07T14:25:56Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/709", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU0OTEyNQ==", "url": "https://github.com/returntocorp/semgrep/pull/709#discussion_r421549125", "bodyText": "Oh, we need to support 3.6, make this namedtuple?", "author": "underyx", "createdAt": "2020-05-07T14:28:48Z", "path": "semgrep/tests/performance/test_public_repos_perf.py", "diffHunk": "@@ -0,0 +1,47 @@\n+import subprocess\n+from dataclasses import dataclass\n+from pathlib import Path\n+\n+import pytest\n+\n+\n+@dataclass", "originalCommit": "a555eb9843da7e47fe48ebf335b3aa2f526aff5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcyMjYzOQ==", "url": "https://github.com/returntocorp/semgrep/pull/709#discussion_r421722639", "bodyText": "Looks like it:\nclass Range(NamedTuple):\n    start: int\n    end: int", "author": "mschwager", "createdAt": "2020-05-07T18:54:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU0OTEyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc0OTA1Mg==", "url": "https://github.com/returntocorp/semgrep/pull/709#discussion_r423749052", "bodyText": "Can we use --benchmark-autosave instead so we don't have to request user input? Having to repeatedly enter in snapshot names as you're benchmarking may get tedious, and won't work in CI environments.", "author": "mschwager", "createdAt": "2020-05-12T13:50:17Z", "path": "semgrep/Makefile", "diffHunk": "@@ -12,3 +12,12 @@ install:\n \n .PHONY: qa-test\n qa-test: PYTHONPATH=. pytest tests/ --qa\n+\n+.PHONY: benchmark\n+benchmark:\n+\tPYTHONPATH=. pytest tests/ --benchmark-only $(ARGS)\n+\n+.PHONY: benchmark-snapshot\n+benchmark-snapshot:\n+\t@read -p \"Name your snapshot: \" snapshot_name;\\\n+\tPYTHONPATH=. pytest tests/ --benchmark-only --benchmark-save=$$snapshot_name $(ARGS)", "originalCommit": "a555eb9843da7e47fe48ebf335b3aa2f526aff5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE0MjI3Ng==", "url": "https://github.com/returntocorp/semgrep/pull/709#discussion_r426142276", "bodyText": "Good call. Updated!", "author": "underyx", "createdAt": "2020-05-16T10:45:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc0OTA1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1MTcyMQ==", "url": "https://github.com/returntocorp/semgrep/pull/709#discussion_r423751721", "bodyText": "I'm still a little confused as to why we need subprocess here. Can't we call semgrep_main.main directly? That way we avoid the subprocess overhead when benchmarking which could throw results off. Am I missing something?", "author": "mschwager", "createdAt": "2020-05-12T13:53:37Z", "path": "semgrep/tests/performance/test_public_repos_perf.py", "diffHunk": "@@ -0,0 +1,47 @@\n+import subprocess\n+from dataclasses import dataclass\n+from pathlib import Path\n+\n+import pytest\n+\n+\n+@dataclass\n+class RepoCase:\n+    url: str\n+    sha: str\n+    language: str\n+\n+    @property\n+    def test_id(self):\n+        return self.url.split(\"/\")[-1]\n+\n+\n+@pytest.mark.parametrize(\n+    \"repo_case\",\n+    [\n+        # SHAs of May 6, 2020\n+        RepoCase(\"https://github.com/getsentry/sentry\", \"f25ea5dc\", \"python\"),\n+        RepoCase(\"https://github.com/highcharts/highcharts\", \"04709689\", \"javascript\"),\n+    ],\n+    ids=lambda case: case.test_id,\n+)\n+def test_public_repos(run_semgrep_in_tmp, benchmark, repo_case):\n+    subprocess.check_output([\"git\", \"clone\", repo_case.url, \"repo\"])\n+    subprocess.check_output(\n+        [\"git\", \"--git-dir\", \"repo/.git\", \"checkout\", repo_case.sha]\n+    )\n+    benchmark(", "originalCommit": "a555eb9843da7e47fe48ebf335b3aa2f526aff5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE0MTA3Mg==", "url": "https://github.com/returntocorp/semgrep/pull/709#discussion_r426141072", "bodyText": "Two reasons:\n\nThe testing code is much simpler if we can reuse what we have in E2E tests, and we don't have to mock the argparse.Namespace.\nI think it's fair to make benchmarks test the speed exactly how users experience it. Users will have to wait for the python process to spawn and modules to be imported. If we import semgrep in the test file before starting to benchmark, that'd hide issues such as #633.\n\nI was curious and checked how much time and variance the subprocess call adds, and I think it's not even that bad:\n$ time python -c \"import subprocess; import json; json.dumps([{'a':1} for _ in range(1000000)])\"\n0.59s user 0.12s system 98% cpu 0.790 total\n$ time python -c \"import subprocess; import json; json.dumps([{'a':1} for _ in range(1000000)])\"\n0.59s user 0.12s system 98% cpu 0.771 total\n$ time python -c \"import subprocess; import json; json.dumps([{'a':1} for _ in range(1000000)])\"\n0.59s user 0.12s system 98% cpu 0.771 total\n$ time python -c \"import subprocess; subprocess.check_output(['python', '-c', '''import json; json.dumps([{'a':1} for _ in range(1000000)])'''])\"\n0.61s user 0.13s system 98% cpu 0.804 total\n$ time python -c \"import subprocess; subprocess.check_output(['python', '-c', '''import json; json.dumps([{'a':1} for _ in range(1000000)])'''])\"\n0.62s user 0.13s system 98% cpu 0.803 total\n$ time python -c \"import subprocess; subprocess.check_output(['python', '-c', '''import json; json.dumps([{'a':1} for _ in range(1000000)])'''])\"\n0.62s user 0.13s system 98% cpu 0.837 total", "author": "underyx", "createdAt": "2020-05-16T10:28:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1MTcyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1MzIyNg==", "url": "https://github.com/returntocorp/semgrep/pull/709#discussion_r423753226", "bodyText": "Does this break if the file paths change in semgrep-rules? I know Grayson was recently working on changing the paths. This may also be a source of fragility in the future if the paths continue to evolve.", "author": "mschwager", "createdAt": "2020-05-12T13:55:30Z", "path": "semgrep/tests/performance/test_semgrep_rules_repo_perf.py", "diffHunk": "@@ -0,0 +1,198 @@\n+import subprocess\n+from pathlib import Path\n+\n+import pytest\n+\n+# output of `fd ya?ml$`\n+# not calculating dynamically to avoid slow test collection on each pytest run\n+RULE_PATHS: str = \"\"\"", "originalCommit": "a555eb9843da7e47fe48ebf335b3aa2f526aff5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE0MDAwNQ==", "url": "https://github.com/returntocorp/semgrep/pull/709#discussion_r426140005", "bodyText": "Doesn't break, cause we're pinning to a specific SHA of the semgrep-rules repo. The purpose of these benchmarks is to test semgrep's performance \u2014 I didn't want to snapshot performance increases that come from optimized rule files. I expect not to update the SHA and this list for like 6 months.\nI've updated the SHA and path list now though with @minusworld's file renames.", "author": "underyx", "createdAt": "2020-05-16T10:13:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1MzIyNg=="}], "type": "inlineReview"}, {"oid": "5a691cb177bc5dde657ad7328c71868b7153ef10", "url": "https://github.com/returntocorp/semgrep/commit/5a691cb177bc5dde657ad7328c71868b7153ef10", "message": "tests: Add performance tests\n\nCloses https://github.com/returntocorp/enterprise/issues/54", "committedDate": "2020-05-16T10:05:09Z", "type": "commit"}, {"oid": "633721c13330d6cde75b93cc1abd619e7b33483f", "url": "https://github.com/returntocorp/semgrep/commit/633721c13330d6cde75b93cc1abd619e7b33483f", "message": "fixup! tests: Add performance tests\n\ndataclass to namedtuple", "committedDate": "2020-05-16T10:06:13Z", "type": "commit"}, {"oid": "633721c13330d6cde75b93cc1abd619e7b33483f", "url": "https://github.com/returntocorp/semgrep/commit/633721c13330d6cde75b93cc1abd619e7b33483f", "message": "fixup! tests: Add performance tests\n\ndataclass to namedtuple", "committedDate": "2020-05-16T10:06:13Z", "type": "forcePushed"}, {"oid": "7eb99e16a7a4a4313e4ff35cdfc1fd79e211a4ee", "url": "https://github.com/returntocorp/semgrep/commit/7eb99e16a7a4a4313e4ff35cdfc1fd79e211a4ee", "message": "fixup! fixup! tests: Add performance tests\n\nleftover dataclass import", "committedDate": "2020-05-16T10:29:29Z", "type": "commit"}, {"oid": "f204e32d9269f01ca9de58fb359f15a9d76d7a2e", "url": "https://github.com/returntocorp/semgrep/commit/f204e32d9269f01ca9de58fb359f15a9d76d7a2e", "message": "Update test_semgrep_rules_repo_perf paths", "committedDate": "2020-05-16T10:29:48Z", "type": "commit"}, {"oid": "449012f570c5c3081d1aa36d0c7cfa8c3de84d42", "url": "https://github.com/returntocorp/semgrep/commit/449012f570c5c3081d1aa36d0c7cfa8c3de84d42", "message": "Makefile: Autogenerate benchmark snapshot names", "committedDate": "2020-05-16T10:43:12Z", "type": "commit"}]}