{"pr_number": 242, "pr_title": "Constant propagation!", "pr_createdAt": "2020-03-04T15:01:56Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/242", "timeline": [{"oid": "49ee7e1cc3736034e9a5979677c4a7989aa82c03", "url": "https://github.com/returntocorp/semgrep/commit/49ee7e1cc3736034e9a5979677c4a7989aa82c03", "message": "* lib/generic_vs_generic.ml: collateral evolutions after the Name\nto Id vs IdQualified split in pfff/.../ast_generic.ml", "committedDate": "2020-03-04T13:26:11Z", "type": "commit"}, {"oid": "701abae7b67a2e695227fb96bae9058ac3664d30", "url": "https://github.com/returntocorp/semgrep/commit/701abae7b67a2e695227fb96bae9058ac3664d30", "message": "Basic constant propagation for constants!\n\nBoom.\n\nTest plan:\ntest file included", "committedDate": "2020-03-04T14:59:33Z", "type": "commit"}, {"oid": "865fc5b8eab05aeb2301e948f34e793ce67fe62d", "url": "https://github.com/returntocorp/semgrep/commit/865fc5b8eab05aeb2301e948f34e793ce67fe62d", "message": "* tests/js/equivalence_constant_propagation.js: js example!", "committedDate": "2020-03-04T15:04:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4Mzk4MQ==", "url": "https://github.com/returntocorp/semgrep/pull/242#discussion_r387783981", "bodyText": "would this be better to be\"$F(\"password\")\" to fully test that we are propagating const Bar's value to password function so that we are matching it there?", "author": "ulziibay", "createdAt": "2020-03-04T16:29:32Z", "path": "tests/GENERIC/equivalence_constant_propagation.sgrep", "diffHunk": "@@ -0,0 +1 @@\n+password(\"...\")", "originalCommit": "865fc5b8eab05aeb2301e948f34e793ce67fe62d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4NDQzMg==", "url": "https://github.com/returntocorp/semgrep/pull/242#discussion_r387784432", "bodyText": "Also, I am not clear what \"...\" does compared to ..., can you explain?", "author": "ulziibay", "createdAt": "2020-03-04T16:30:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4Mzk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5MDE3MQ==", "url": "https://github.com/returntocorp/semgrep/pull/242#discussion_r387790171", "bodyText": "yes I may have chosen a bad name.\nIt's supposed to emulate the boto check where we check that we don't pass a constant string as the password_account keyword parameter. The goal here is just to check that we pass a constant string to a specific function and that we handle the propagation of constant.", "author": "aryx", "createdAt": "2020-03-04T16:38:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4Mzk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5MDU4Mw==", "url": "https://github.com/returntocorp/semgrep/pull/242#discussion_r387790583", "bodyText": "\"...\" is matching any string (a sequence of any character), ... is matching a sequence of arguments (in a call context).", "author": "aryx", "createdAt": "2020-03-04T16:39:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4Mzk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5MDc3Ng==", "url": "https://github.com/returntocorp/semgrep/pull/242#discussion_r387790776", "bodyText": "We can match on that constant right? Like $F(\"password\") would match the example.", "author": "ulziibay", "createdAt": "2020-03-04T16:39:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4Mzk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5MTM0Ng==", "url": "https://github.com/returntocorp/semgrep/pull/242#discussion_r387791346", "bodyText": "And \"...\" is a special case of ... where it matches on const literal strings. Does it match on const number?", "author": "ulziibay", "createdAt": "2020-03-04T16:40:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4Mzk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5MzcxOQ==", "url": "https://github.com/returntocorp/semgrep/pull/242#discussion_r387793719", "bodyText": "there are quotes around it, so it's a string, and it's just for strings.", "author": "aryx", "createdAt": "2020-03-04T16:44:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4Mzk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5MzkxMQ==", "url": "https://github.com/returntocorp/semgrep/pull/242#discussion_r387793911", "bodyText": "Yes, $F(\"password\") should match!", "author": "aryx", "createdAt": "2020-03-04T16:44:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4Mzk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NDIxNQ==", "url": "https://github.com/returntocorp/semgrep/pull/242#discussion_r387794215", "bodyText": "it would actually be a better test indeed, less confusing than using \"...\"", "author": "aryx", "createdAt": "2020-03-04T16:45:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4Mzk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzNDczMA==", "url": "https://github.com/returntocorp/semgrep/pull/242#discussion_r387934730", "bodyText": "Thanks for clarifying!", "author": "ulziibay", "createdAt": "2020-03-04T21:07:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4Mzk4MQ=="}], "type": "inlineReview"}, {"oid": "4b8c60054fca6b8853db4e7125ded58edca61aa8", "url": "https://github.com/returntocorp/semgrep/commit/4b8c60054fca6b8853db4e7125ded58edca61aa8", "message": "* tests/GENERIC/equivalence_constant_propagation.sgrep: ulzii comment, better\ntest case", "committedDate": "2020-03-04T21:21:38Z", "type": "commit"}, {"oid": "536c934aae0befa732e05180c2ad3138741a86d3", "url": "https://github.com/returntocorp/semgrep/commit/536c934aae0befa732e05180c2ad3138741a86d3", "message": "Merge branch 'develop' into naming_ast", "committedDate": "2020-03-04T22:21:38Z", "type": "commit"}, {"oid": "2f3ac9e71b394837eda3cd67d6f58c07c94aba85", "url": "https://github.com/returntocorp/semgrep/commit/2f3ac9e71b394837eda3cd67d6f58c07c94aba85", "message": "update expected template too", "committedDate": "2020-03-04T22:28:21Z", "type": "commit"}]}