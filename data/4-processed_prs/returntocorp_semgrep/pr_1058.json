{"pr_number": 1058, "pr_title": "Add JSON errors for various parse errors", "pr_createdAt": "2020-06-17T22:46:13Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/1058", "timeline": [{"oid": "9af1a608b4d44b8b7592a6e0d13ac87301248fbc", "url": "https://github.com/returntocorp/semgrep/commit/9af1a608b4d44b8b7592a6e0d13ac87301248fbc", "message": "Add JSON errors for various parse errors\n\nI also split out stdout and stderr from the snapshot tests which trigger known errors -- hopefully this makes the snapshot tests less brittle as well as ensuring that all\noutput is going to the right place!", "committedDate": "2020-06-17T22:43:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4NjUwNg==", "url": "https://github.com/returntocorp/semgrep/pull/1058#discussion_r441886506", "bodyText": "Is this the best way to enforce this?", "author": "brendongo", "createdAt": "2020-06-17T23:26:03Z", "path": "semgrep/semgrep/error.py", "diffHunk": "@@ -94,19 +111,21 @@ def __init__(\n         self.level = level\n         self.spans = spans\n         self.help = help\n-\n-    @property\n-    def code(self) -> int:  # type: ignore\n-        \"\"\"\n-        If we explicitly set a code, return that.\n-        Otherwise, if the cause sets a code, return that.\n-        Otherwise, return a generic FATAL_EXIT_CODE\n-        \"\"\"\n-        return (\n-            self.__dict__.get(\"code\")\n-            or getattr(self.__cause__, \"code\", None)\n-            or FATAL_EXIT_CODE\n+        assert hasattr(", "originalCommit": "9af1a608b4d44b8b7592a6e0d13ac87301248fbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkwMDM4MA==", "url": "https://github.com/returntocorp/semgrep/pull/1058#discussion_r441900380", "bodyText": "I suppose we could write a semgrep rule :-)", "author": "rcoh", "createdAt": "2020-06-18T00:15:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4NjUwNg=="}], "type": "inlineReview"}]}