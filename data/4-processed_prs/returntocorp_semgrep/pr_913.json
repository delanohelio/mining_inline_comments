{"pr_number": 913, "pr_title": "Refactor rule creation pipeline", "pr_createdAt": "2020-06-04T15:45:58Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/913", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM2Mjk4Ng==", "url": "https://github.com/returntocorp/semgrep/pull/913#discussion_r435362986", "bodyText": "this code doesn't do anything because looking up globs and expressions don't have side effects -- they're computed when the class is instantiated.", "author": "rcoh", "createdAt": "2020-06-04T15:47:06Z", "path": "semgrep/semgrep/semgrep_main.py", "diffHunk": "@@ -43,34 +43,25 @@ def validate_single_rule(config_id: str, rule: Dict[str, Any]) -> bool:\n         print_error(\n             f\"{config_id} is missing required keys {missing_keys} at rule id {rule_id_err_msg}\"\n         )\n-        return False\n+        return None\n     if not rule_keys.issubset(YAML_ALL_VALID_RULE_KEYS):\n         extra_keys = rule_keys - YAML_ALL_VALID_RULE_KEYS\n         print_error(\n             f\"{config_id} has invalid rule key {extra_keys} at rule id {rule_id_err_msg}, can only have: {YAML_ALL_VALID_RULE_KEYS}\"\n         )\n-        return False\n+        return None\n     try:\n-        _ = Rule.from_json(rule).expression\n+        return Rule.from_json(rule)\n     except InvalidRuleSchemaError as ex:\n         print_error(\n             f\"{config_id}: inside rule id {rule_id_err_msg}, pattern fields can't look like this: {ex}\"\n         )\n-        return False\n-    try:", "originalCommit": "14f6503dc838c11364690a9673284e3553443791", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5a1f139f9e9db211084393242911a4bb6d32e6a7", "url": "https://github.com/returntocorp/semgrep/commit/5a1f139f9e9db211084393242911a4bb6d32e6a7", "message": "Refactor rule creation pipeline\n\nWe were creating rules over and over again from raw JSON which is slow, but also made\nthe error tracking code more confusing because we stayed as raw for longer.\n\nTo keep the error tracking simple, we want to go straight from Yaml into something structured, then carry the structured object around rather than going back to raw dictionaries.", "committedDate": "2020-06-04T16:05:13Z", "type": "commit"}, {"oid": "5a1f139f9e9db211084393242911a4bb6d32e6a7", "url": "https://github.com/returntocorp/semgrep/commit/5a1f139f9e9db211084393242911a4bb6d32e6a7", "message": "Refactor rule creation pipeline\n\nWe were creating rules over and over again from raw JSON which is slow, but also made\nthe error tracking code more confusing because we stayed as raw for longer.\n\nTo keep the error tracking simple, we want to go straight from Yaml into something structured, then carry the structured object around rather than going back to raw dictionaries.", "committedDate": "2020-06-04T16:05:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM4MzgxNg==", "url": "https://github.com/returntocorp/semgrep/pull/913#discussion_r435383816", "bodyText": "do we still have to ignore type here?", "author": "ievans", "createdAt": "2020-06-04T16:18:11Z", "path": "semgrep/semgrep/semgrep_main.py", "diffHunk": "@@ -87,16 +77,17 @@ def validate_configs(\n         rules = config.get(RULES_KEY)\n         valid_rules = []\n         invalid_rules = []\n-        for rule in rules:  # type: ignore\n-            if validate_single_rule(config_id, rule):\n+        for rule_dict in rules:  # type: ignore", "originalCommit": "5a1f139f9e9db211084393242911a4bb6d32e6a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM4NTg0Nw==", "url": "https://github.com/returntocorp/semgrep/pull/913#discussion_r435385847", "bodyText": "I think so because an unused ignore is an error", "author": "rcoh", "createdAt": "2020-06-04T16:21:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM4MzgxNg=="}], "type": "inlineReview"}]}