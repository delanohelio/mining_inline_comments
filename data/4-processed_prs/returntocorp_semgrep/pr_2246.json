{"pr_number": 2246, "pr_title": "Parse lock in C#", "pr_createdAt": "2020-12-12T15:29:15Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/2246", "timeline": [{"oid": "548e6cedf8e357aa440b46093c3de88e1630cf2d", "url": "https://github.com/returntocorp/semgrep/commit/548e6cedf8e357aa440b46093c3de88e1630cf2d", "message": "Parse lock in C#\n\nE.g.\n`lock (obj) { ... }`\n\nSimilar to Java's `synchronized` block.", "committedDate": "2020-12-12T15:28:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTY1ODA2Ng==", "url": "https://github.com/returntocorp/semgrep/pull/2246#discussion_r541658066", "bodyText": "Actually for those kind of stmts that have inside other statements, it's better to use the\nOtherStmtWithStmt construct. It's better than OtherStmt because when we build\na control-flow graph for a generic AST (see pfff/lang-GENERIC/analyze/IL_to_CFG.ml),\nwe need to know those nested stmts,", "author": "aryx", "createdAt": "2020-12-12T16:41:33Z", "path": "semgrep-core/parsing/Parse_csharp_tree_sitter.ml", "diffHunk": "@@ -1368,7 +1368,7 @@ and statement (env : env) (x : CST.statement) =\n        let v3 = expression env v3 in\n        let v4 = token env v4 (* \")\" *) in\n        let v5 = statement env v5 in\n-       todo env (v1, v2, v3, v4, v5)\n+       OtherStmt (OS_Sync, [E v3; S v5])", "originalCommit": "548e6cedf8e357aa440b46093c3de88e1630cf2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}