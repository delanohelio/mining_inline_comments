{"pr_number": 2288, "pr_title": "type outline for kotlin", "pr_createdAt": "2020-12-18T00:42:00Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/2288", "timeline": [{"oid": "72e830b7096a42c47d903fd6f03311dc7c28b981", "url": "https://github.com/returntocorp/semgrep/commit/72e830b7096a42c47d903fd6f03311dc7c28b981", "message": "type outline for kotlin", "committedDate": "2020-12-18T00:41:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY2NDA5Ng==", "url": "https://github.com/returntocorp/semgrep/pull/2288#discussion_r545664096", "bodyText": "I tyink you can build a ParamClassic with p_type = v1, and p_name = None,\nlike we do in C for function signatures.", "author": "aryx", "createdAt": "2020-12-18T08:44:48Z", "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "diffHunk": "@@ -465,8 +465,9 @@ and annotation (env : env) (x : CST.annotation) =\n and anon_choice_param_b77c1d8 (env : env) (x : CST.anon_choice_param_b77c1d8) =\n   (match x with\n    | `Param x -> parameter env x\n-   | `Type x -> let _ =  type_ env x in\n-       raise Todo\n+   | `Type x ->\n+       let v1 =  type_ env x in\n+       ParamPattern (PatType v1)", "originalCommit": "72e830b7096a42c47d903fd6f03311dc7c28b981", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY2ODg5NQ==", "url": "https://github.com/returntocorp/semgrep/pull/2288#discussion_r545668895", "bodyText": "There is even AST_generic.param_of_type() to help build this parameter_classic type.", "author": "aryx", "createdAt": "2020-12-18T08:49:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY2NDA5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY2NzQ1Nw==", "url": "https://github.com/returntocorp/semgrep/pull/2288#discussion_r545667457", "bodyText": "in grammar.js they use repeat1($._quest)\nand _quest: $ => \"?\"\nwhich means there is at least one \"?\", so you can write the pattern:\n| [] -> raise Impossible (* see repeat1($._quest) in grammar.js *)", "author": "aryx", "createdAt": "2020-12-18T08:47:54Z", "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "diffHunk": "@@ -1344,13 +1345,25 @@ and nullable_type (env : env) ((v1, v2) : CST.nullable_type) =\n     )\n   in\n   let v2 = List.map (token env) (* \"?\" *) v2 in\n-  todo env (v1, v2)\n+  (match v2 with\n+   | hd::tl -> TyQuestion (v1, hd)\n+   | _ ->", "originalCommit": "72e830b7096a42c47d903fd6f03311dc7c28b981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTY3MDAyMg==", "url": "https://github.com/returntocorp/semgrep/pull/2288#discussion_r545670022", "bodyText": "You can factorize a bit and do let param = { (AST_generic.param_of_id v1) with ptype = v3 }", "author": "aryx", "createdAt": "2020-12-18T08:50:26Z", "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "diffHunk": "@@ -1344,13 +1345,25 @@ and nullable_type (env : env) ((v1, v2) : CST.nullable_type) =\n     )\n   in\n   let v2 = List.map (token env) (* \"?\" *) v2 in\n-  todo env (v1, v2)\n+  (match v2 with\n+   | hd::tl -> TyQuestion (v1, hd)\n+   | _ ->\n+       let q = Parse_info.fake_info \"?\" in\n+       TyQuestion (v1, q)\n+  )\n \n and parameter (env : env) ((v1, v2, v3) : CST.parameter) : parameter =\n   let v1 = simple_identifier env v1 in\n   let v2 = token env v2 (* \":\" *) in\n   let v3 = type_ env v3 in\n-  todo env (v1, v2, v3)\n+  let param = {", "originalCommit": "72e830b7096a42c47d903fd6f03311dc7c28b981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bdffc729ef8af778577c770c76dfb9ed732fe73f", "url": "https://github.com/returntocorp/semgrep/commit/bdffc729ef8af778577c770c76dfb9ed732fe73f", "message": "adding changes for succinctness and paramclassic", "committedDate": "2020-12-18T19:03:49Z", "type": "commit"}]}