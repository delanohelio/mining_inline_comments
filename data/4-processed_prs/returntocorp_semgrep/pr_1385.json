{"pr_number": 1385, "pr_title": "Add timeout for maximum time spent running rule on file", "pr_createdAt": "2020-07-29T00:03:27Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/1385", "timeline": [{"oid": "7eccf8d8cd126f9a202edc4e947f42029cf5b814", "url": "https://github.com/returntocorp/semgrep/commit/7eccf8d8cd126f9a202edc4e947f42029cf5b814", "message": "Add timeout for maximum time spent running rule on file", "committedDate": "2020-07-29T00:02:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2Mjg2Ng==", "url": "https://github.com/returntocorp/semgrep/pull/1385#discussion_r461962866", "bodyText": "lol", "author": "nbrahms", "createdAt": "2020-07-29T00:07:27Z", "path": "semgrep/semgrep/core_exception.py", "diffHunk": "@@ -56,27 +59,38 @@ def from_json(  # type: ignore\n         start_pos = Position(start[\"line\"], start[\"col\"])\n         end_pos = Position(end[\"line\"], end[\"col\"])\n \n+        # Semgrep-Core caches TimeoutErrors as FatalErrors\n+        # Hack to treat these as TimeoutErrors\n+        check_id = json_obj[\"check_id\"]\n+        if check_id == \"FatalError\" and \"Timeout\" in json_obj[\"extra\"][\"message\"]:", "originalCommit": "7eccf8d8cd126f9a202edc4e947f42029cf5b814", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MzA0MA==", "url": "https://github.com/returntocorp/semgrep/pull/1385#discussion_r461963040", "bodyText": "how do you feel about json_obj.get(\"check_id\", rule_id)?", "author": "nbrahms", "createdAt": "2020-07-29T00:08:04Z", "path": "semgrep/semgrep/core_exception.py", "diffHunk": "@@ -56,27 +59,38 @@ def from_json(  # type: ignore\n         start_pos = Position(start[\"line\"], start[\"col\"])\n         end_pos = Position(end[\"line\"], end[\"col\"])\n \n+        # Semgrep-Core caches TimeoutErrors as FatalErrors\n+        # Hack to treat these as TimeoutErrors\n+        check_id = json_obj[\"check_id\"]\n+        if check_id == \"FatalError\" and \"Timeout\" in json_obj[\"extra\"][\"message\"]:\n+            check_id = \"Timeout\"\n+\n         return cls(\n-            json_obj[\"check_id\"],\n+            check_id,", "originalCommit": "7eccf8d8cd126f9a202edc4e947f42029cf5b814", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3MDIxMg==", "url": "https://github.com/returntocorp/semgrep/pull/1385#discussion_r461970212", "bodyText": "This is needed for the above hack \ud83d\ude22", "author": "brendongo", "createdAt": "2020-07-29T00:32:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MzA0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MzUyOQ==", "url": "https://github.com/returntocorp/semgrep/pull/1385#discussion_r461963529", "bodyText": "I assume hash is set up on SemgrepError to do the right thing here?", "author": "nbrahms", "createdAt": "2020-07-29T00:09:43Z", "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -468,18 +473,8 @@ def dedup_output(outputs: List[RuleMatch]) -> List[RuleMatch]:\n     return list({uniq_id(r): r for r in outputs}.values())\n \n \n-def dedup_errors(errors: List[CoreException]) -> List[CoreException]:\n-    def uniq_error_id(error: CoreException) -> Tuple[str, str, int, int, int, int]:\n-        return (\n-            error._check_id,\n-            str(error._path),\n-            error._start.line,\n-            error._start.col,\n-            error._end.line,\n-            error._end.col,\n-        )\n-\n-    return list({uniq_error_id(r): r for r in errors}.values())\n+def dedup_errors(errors: List[SemgrepError]) -> List[SemgrepError]:\n+    return list(set(errors))", "originalCommit": "7eccf8d8cd126f9a202edc4e947f42029cf5b814", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk3MDEzMA==", "url": "https://github.com/returntocorp/semgrep/pull/1385#discussion_r461970130", "bodyText": "Yep. Attrs handles it correctly and there are tests verifying it", "author": "brendongo", "createdAt": "2020-07-29T00:32:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MzUyOQ=="}], "type": "inlineReview"}]}