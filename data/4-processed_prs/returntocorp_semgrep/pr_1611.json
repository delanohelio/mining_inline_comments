{"pr_number": 1611, "pr_title": "Parallelize --test functionality", "pr_createdAt": "2020-08-31T15:43:47Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/1611", "timeline": [{"oid": "ba72bd7d4e51e093e5c4063d3c102e6ca5ba1bdb", "url": "https://github.com/returntocorp/semgrep/commit/ba72bd7d4e51e093e5c4063d3c102e6ca5ba1bdb", "message": "Parallelize --test functionality", "committedDate": "2020-08-31T15:39:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIyMDkwNA==", "url": "https://github.com/returntocorp/semgrep/pull/1611#discussion_r480220904", "bodyText": "This is required because we cannot do a multiprocessing.Pool inside another Pool. We need to avoid the double Pool with --test using Pool and our rules in semgrep-rules using pattern-regex (uses Pool here). Since our tests only have one corresponding target file we can limit our multiprocessing use to > 1 target.", "author": "mschwager", "createdAt": "2020-08-31T15:47:16Z", "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -426,9 +426,14 @@ def handle_regex_patterns(\n             ]\n         except re.error as err:\n             raise SemgrepError(f\"invalid regular expression specified: {err}\")\n-        re_fn = functools.partial(get_re_matches, patterns_re)\n-        with multiprocessing.Pool(self._jobs) as pool:\n-            matches = pool.map(re_fn, targets)\n+\n+        if len(targets) > 1:", "originalCommit": "ba72bd7d4e51e093e5c4063d3c102e6ca5ba1bdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIyMTE4Mw==", "url": "https://github.com/returntocorp/semgrep/pull/1611#discussion_r480221183", "bodyText": "https://stackoverflow.com/questions/6974695/python-process-pool-non-daemonic", "author": "mschwager", "createdAt": "2020-08-31T15:47:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIyMDkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0Mjc3OQ==", "url": "https://github.com/returntocorp/semgrep/pull/1611#discussion_r480242779", "bodyText": "Have you looked into using a thread pool instead of a process pool? We got around most of these nasty issues in Bento by using multithreading inside a single process.\nThis won't work, of course, if your tests are mutating global state.", "author": "nbrahms", "createdAt": "2020-08-31T16:24:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIyMDkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0NjU5Ng==", "url": "https://github.com/returntocorp/semgrep/pull/1611#discussion_r480246596", "bodyText": "cf. http://lucasb.eyer.be/snips/python-thread-pool.html", "author": "nbrahms", "createdAt": "2020-08-31T16:31:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIyMDkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4MzE3OQ==", "url": "https://github.com/returntocorp/semgrep/pull/1611#discussion_r480383179", "bodyText": "Hmm, interesting. I'm going to save that for a future improvement. I've mostly achieved what I set out to with this, so I'm going to push it over the line \ud83d\udc4d", "author": "mschwager", "createdAt": "2020-08-31T20:33:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIyMDkwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0MzYwNw==", "url": "https://github.com/returntocorp/semgrep/pull/1611#discussion_r480243607", "bodyText": "It looks like you're assuming that we never test with more than one file? IMO that's a bit fragile. Would it make more sense to set a TESTING global and check against that?", "author": "nbrahms", "createdAt": "2020-08-31T16:25:55Z", "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -426,9 +426,14 @@ def handle_regex_patterns(\n             ]\n         except re.error as err:\n             raise SemgrepError(f\"invalid regular expression specified: {err}\")\n-        re_fn = functools.partial(get_re_matches, patterns_re)\n-        with multiprocessing.Pool(self._jobs) as pool:\n-            matches = pool.map(re_fn, targets)\n+\n+        if len(targets) > 1:", "originalCommit": "ba72bd7d4e51e093e5c4063d3c102e6ca5ba1bdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3MTg2OQ==", "url": "https://github.com/returntocorp/semgrep/pull/1611#discussion_r480371869", "bodyText": "Good catch! Although I did slightly better than a global.", "author": "mschwager", "createdAt": "2020-08-31T20:10:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0MzYwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0NDI2NQ==", "url": "https://github.com/returntocorp/semgrep/pull/1611#discussion_r480244265", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try:\n          \n          \n            \n                    output = invoke_semgrep(filename, *args, **kwargs)\n          \n          \n            \n                except Exception as error:\n          \n          \n            \n                    return (filename, error, {})\n          \n          \n            \n                else:\n          \n          \n            \n                    return (filename, None, output)\n          \n          \n            \n                try:\n          \n          \n            \n                    output = invoke_semgrep(filename, *args, **kwargs)\n          \n          \n            \n                    return (filename, None, output)\n          \n          \n            \n                except Exception as error:\n          \n          \n            \n                    return (filename, error, {})", "author": "nbrahms", "createdAt": "2020-08-31T16:27:09Z", "path": "semgrep/semgrep/test.py", "diffHunk": "@@ -195,62 +198,75 @@ def confusion_matrix_to_string(confusion: List[int]) -> str:\n     return f\"TP: {tp}\\tTN: {tn}\\tFP: {fp}\\tFN: {fn}\"\n \n \n+def invoke_semgrep_multi(filename, *args, **kwargs):\n+    try:\n+        output = invoke_semgrep(filename, *args, **kwargs)\n+    except Exception as error:\n+        return (filename, error, {})\n+    else:\n+        return (filename, None, output)", "originalCommit": "ba72bd7d4e51e093e5c4063d3c102e6ca5ba1bdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM2NTM3MQ==", "url": "https://github.com/returntocorp/semgrep/pull/1611#discussion_r480365371", "bodyText": "I try to only include the line I'm expecting an exception from in the try statement. This minimizes: \"Where did this exception get thrown from?\" Obviously this is an innocent enough change since we don't expect the return to raise, but I believe these are semantically equivalent so I'll stick to my rule of thumb here.", "author": "mschwager", "createdAt": "2020-08-31T19:57:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0NDI2NQ=="}], "type": "inlineReview"}, {"oid": "45b06a8e1748f137446008d739171ca624d4c7ed", "url": "https://github.com/returntocorp/semgrep/commit/45b06a8e1748f137446008d739171ca624d4c7ed", "message": "Explicitly state why we're avoiding multiprocessing when testing", "committedDate": "2020-08-31T20:09:29Z", "type": "commit"}]}