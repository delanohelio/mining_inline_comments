{"pr_number": 423, "pr_title": "Reformat README", "pr_createdAt": "2020-04-09T17:05:15Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/423", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0OTE0OA==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406349148", "bodyText": "New tagline. Is this first sentence a concise explanation we can get behind and start using elsewhere? E.g. slide decks, Github repository description, external emails, etc.", "author": "mschwager", "createdAt": "2020-04-09T17:05:59Z", "path": "README.md", "diffHunk": "@@ -1,149 +1,194 @@\n # sgrep\n \n-[![r2c community slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=for-the-badge&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n+[![CircleCI](https://circleci.com/gh/returntocorp/sgrep.svg?style=svg)](https://circleci.com/gh/returntocorp/sgrep)\n+[![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n \n-[sgrep.live](https://sgrep.live/): try it now!\n+`sgrep` is a tool for easily detecting and preventing bugs and anti-patterns in", "originalCommit": "741b6bcb7b710dec2296513bebcae06f3a68c0f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NzM2MQ==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406367361", "bodyText": "Would like to workshop the tagline more but not a blocker for the PR. I would like to feature sgrep.live up front and probably in even bigger text though -- it's an awesome demo.", "author": "ievans", "createdAt": "2020-04-09T17:38:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0OTE0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3NjA4OA==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406376088", "bodyText": "I like the tagline. We could iterate a bit but I agree with Isaac that it\u2019s not a blocker.\nTo feature sgrep.live more we might want a screenshot or composite screenshot.", "author": "pabloest", "createdAt": "2020-04-09T17:53:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0OTE0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4NDQ1MA==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406484450", "bodyText": "Roger that, I'm happy to iterate on it now or in the future. My only focus here would be keeping it concise, dead simple, and straightforward so that no one is confused about what the tool actually does.", "author": "mschwager", "createdAt": "2020-04-09T21:21:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0OTE0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1MDUzNw==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406350537", "bodyText": "Were Ruby and Scala being worked on? Should we include Typescript and PHP (from the language matrix)? Better to under-promise and over-deliver here, IMO.", "author": "mschwager", "createdAt": "2020-04-09T17:08:32Z", "path": "README.md", "diffHunk": "@@ -1,149 +1,194 @@\n # sgrep\n \n-[![r2c community slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=for-the-badge&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n+[![CircleCI](https://circleci.com/gh/returntocorp/sgrep.svg?style=svg)](https://circleci.com/gh/returntocorp/sgrep)\n+[![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n \n-[sgrep.live](https://sgrep.live/): try it now!\n+`sgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n+your codebase. It combines the convenience of `grep` with the correctness of\n+syntactical and semantic search. Quickly write rules so you can code with\n+confidence.\n \n-sgrep, for syntactical \\(and occasionnally semantic\\) grep, is a tool to help find bugs by specifying code patterns using a familiar syntax. The idea is to mix the convenience of grep with the correctness and precision of a compiler frontend.\n+Try it now: [https://sgrep.live](https://sgrep.live/)\n \n-## Quick Examples\n+## Overview\n \n-| **pattern** | **will match code like** |\n+Simple patterns for finding code in many languages:\n+\n+| **Pattern** | **Matches** |\n | :--- | :--- |\n | `$X == $X` | `if (node.id == node.id): ...` |\n-| `foo(kwd1=1, kwd2=2, ...)` | `foo(kwd2=2, kwd1=1, kwd3=3)` |\n-| `subprocess.Popen(...)` | `import subprocess as s; s.Popen(['foo'])` |\n-\n-\u2192 [see more examples in the sgrep-rules registry](https://github.com/returntocorp/sgrep-rules)\n+| `requests.get(..., verify=False, ...)` | `requests.get(url, timeout=3, verify=False)` |\n+| `os.system(...)` | `from os import system; system('echo sgrep')` |\n \n-## Supported Languages\n+Language support:\n \n-| **javascript** | **python** | **go** | **java** | **c** | **ruby** | **scala** |\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |", "originalCommit": "741b6bcb7b710dec2296513bebcae06f3a68c0f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1MTEzMQ==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406351131", "bodyText": "Oh yeah, the weird &nbsp; are there to even the table columns out a bit. I \"filled\" the language name to 5 characters if it was shorter than that.", "author": "mschwager", "createdAt": "2020-04-09T17:09:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1MDUzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2Njc2NA==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406366764", "bodyText": "+1 to these changes. I think that @aryx has done groundwork for Ruby but I approve of underepromising", "author": "ievans", "createdAt": "2020-04-09T17:37:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1MDUzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1MjEyMQ==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406352121", "bodyText": "I moved this down to the resources section. I tend to avoid immediately linking people to other things that may distract them and prevent them from using the thing they're here for. I don't have strong feelings here though.", "author": "mschwager", "createdAt": "2020-04-09T17:11:21Z", "path": "README.md", "diffHunk": "@@ -1,149 +1,194 @@\n # sgrep\n \n-[![r2c community slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=for-the-badge&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n+[![CircleCI](https://circleci.com/gh/returntocorp/sgrep.svg?style=svg)](https://circleci.com/gh/returntocorp/sgrep)\n+[![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n \n-[sgrep.live](https://sgrep.live/): try it now!\n+`sgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n+your codebase. It combines the convenience of `grep` with the correctness of\n+syntactical and semantic search. Quickly write rules so you can code with\n+confidence.\n \n-sgrep, for syntactical \\(and occasionnally semantic\\) grep, is a tool to help find bugs by specifying code patterns using a familiar syntax. The idea is to mix the convenience of grep with the correctness and precision of a compiler frontend.\n+Try it now: [https://sgrep.live](https://sgrep.live/)\n \n-## Quick Examples\n+## Overview\n \n-| **pattern** | **will match code like** |\n+Simple patterns for finding code in many languages:\n+\n+| **Pattern** | **Matches** |\n | :--- | :--- |\n | `$X == $X` | `if (node.id == node.id): ...` |\n-| `foo(kwd1=1, kwd2=2, ...)` | `foo(kwd2=2, kwd1=1, kwd3=3)` |\n-| `subprocess.Popen(...)` | `import subprocess as s; s.Popen(['foo'])` |\n-\n-\u2192 [see more examples in the sgrep-rules registry](https://github.com/returntocorp/sgrep-rules)\n+| `requests.get(..., verify=False, ...)` | `requests.get(url, timeout=3, verify=False)` |\n+| `os.system(...)` | `from os import system; system('echo sgrep')` |\n \n-## Supported Languages\n+Language support:\n \n-| **javascript** | **python** | **go** | **java** | **c** | **ruby** | **scala** |\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n-| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | coming | coming |\n-\n-\u2192 see full language support details in [matrix.md](docs/matrix.md)\n-\n-## Meetups", "originalCommit": "741b6bcb7b710dec2296513bebcae06f3a68c0f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1MjMyMA==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406352320", "bodyText": "Pending project/tool naming changes...", "author": "mschwager", "createdAt": "2020-04-09T17:11:41Z", "path": "README.md", "diffHunk": "@@ -1,149 +1,194 @@\n # sgrep\n \n-[![r2c community slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=for-the-badge&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n+[![CircleCI](https://circleci.com/gh/returntocorp/sgrep.svg?style=svg)](https://circleci.com/gh/returntocorp/sgrep)\n+[![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n \n-[sgrep.live](https://sgrep.live/): try it now!\n+`sgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n+your codebase. It combines the convenience of `grep` with the correctness of\n+syntactical and semantic search. Quickly write rules so you can code with\n+confidence.\n \n-sgrep, for syntactical \\(and occasionnally semantic\\) grep, is a tool to help find bugs by specifying code patterns using a familiar syntax. The idea is to mix the convenience of grep with the correctness and precision of a compiler frontend.\n+Try it now: [https://sgrep.live](https://sgrep.live/)\n \n-## Quick Examples\n+## Overview\n \n-| **pattern** | **will match code like** |\n+Simple patterns for finding code in many languages:\n+\n+| **Pattern** | **Matches** |\n | :--- | :--- |\n | `$X == $X` | `if (node.id == node.id): ...` |\n-| `foo(kwd1=1, kwd2=2, ...)` | `foo(kwd2=2, kwd1=1, kwd3=3)` |\n-| `subprocess.Popen(...)` | `import subprocess as s; s.Popen(['foo'])` |\n-\n-\u2192 [see more examples in the sgrep-rules registry](https://github.com/returntocorp/sgrep-rules)\n+| `requests.get(..., verify=False, ...)` | `requests.get(url, timeout=3, verify=False)` |\n+| `os.system(...)` | `from os import system; system('echo sgrep')` |\n \n-## Supported Languages\n+Language support:\n \n-| **javascript** | **python** | **go** | **java** | **c** | **ruby** | **scala** |\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n-| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | coming | coming |\n-\n-\u2192 see full language support details in [matrix.md](docs/matrix.md)\n-\n-## Meetups\n+| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | Coming... | Coming... |\n \n-Want to learn more about sgrep? Check out these [slides from the r2c February meetup](https://r2c.dev/sgrep-public2.pdf)\n+## Installing\n \n-## Installation\n+For the best experience, simply install `sgrep` with [Docker](https://docs.docker.com/install/):\n \n-Too lazy to install? Try out [sgrep.live](https://sgrep.live)\n-\n-### Docker\n-\n-`sgrep` is packaged within a [docker container](https://hub.docker.com/r/returntocorp/sgrep), making installation as easy as [installing docker](https://docs.docker.com/install/).\n+```\n+$ docker pull returntocorp/sgrep\n+```\n \n-### Mac \\(alpha\\)\n+`sgrep` binaries can also be installed on OSX and Ubuntu.\n \n-The brew install is WIP and will change significantly.\n+### OSX\n \n-```bash\n-brew tap returntocorp/sgrep https://github.com/returntocorp/sgrep.git\n-brew install sgrep-r2c\n-# Due to a naming conflict, when installed via brew, it is named `sgrok`\n-sgrok --help\n+```\n+$ brew tap returntocorp/sgrep https://github.com/returntocorp/sgrep.git\n+$ brew install sgrep-r2c\n+$ sgrep-lint --help", "originalCommit": "741b6bcb7b710dec2296513bebcae06f3a68c0f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1MzIwMw==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406353203", "bodyText": "From here down I tried to move away from the theory behind sgrep and comprehensive docs toward getting them up and running as soon as possible. Where appropriate we can link out to more comprehensive docs or resources.", "author": "mschwager", "createdAt": "2020-04-09T17:13:16Z", "path": "README.md", "diffHunk": "@@ -1,149 +1,194 @@\n # sgrep\n \n-[![r2c community slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=for-the-badge&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n+[![CircleCI](https://circleci.com/gh/returntocorp/sgrep.svg?style=svg)](https://circleci.com/gh/returntocorp/sgrep)\n+[![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n \n-[sgrep.live](https://sgrep.live/): try it now!\n+`sgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n+your codebase. It combines the convenience of `grep` with the correctness of\n+syntactical and semantic search. Quickly write rules so you can code with\n+confidence.\n \n-sgrep, for syntactical \\(and occasionnally semantic\\) grep, is a tool to help find bugs by specifying code patterns using a familiar syntax. The idea is to mix the convenience of grep with the correctness and precision of a compiler frontend.\n+Try it now: [https://sgrep.live](https://sgrep.live/)\n \n-## Quick Examples\n+## Overview\n \n-| **pattern** | **will match code like** |\n+Simple patterns for finding code in many languages:\n+\n+| **Pattern** | **Matches** |\n | :--- | :--- |\n | `$X == $X` | `if (node.id == node.id): ...` |\n-| `foo(kwd1=1, kwd2=2, ...)` | `foo(kwd2=2, kwd1=1, kwd3=3)` |\n-| `subprocess.Popen(...)` | `import subprocess as s; s.Popen(['foo'])` |\n-\n-\u2192 [see more examples in the sgrep-rules registry](https://github.com/returntocorp/sgrep-rules)\n+| `requests.get(..., verify=False, ...)` | `requests.get(url, timeout=3, verify=False)` |\n+| `os.system(...)` | `from os import system; system('echo sgrep')` |\n \n-## Supported Languages\n+Language support:\n \n-| **javascript** | **python** | **go** | **java** | **c** | **ruby** | **scala** |\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n-| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | coming | coming |\n-\n-\u2192 see full language support details in [matrix.md](docs/matrix.md)\n-\n-## Meetups\n+| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | Coming... | Coming... |\n \n-Want to learn more about sgrep? Check out these [slides from the r2c February meetup](https://r2c.dev/sgrep-public2.pdf)\n+## Installing\n \n-## Installation\n+For the best experience, simply install `sgrep` with [Docker](https://docs.docker.com/install/):\n \n-Too lazy to install? Try out [sgrep.live](https://sgrep.live)\n-\n-### Docker\n-\n-`sgrep` is packaged within a [docker container](https://hub.docker.com/r/returntocorp/sgrep), making installation as easy as [installing docker](https://docs.docker.com/install/).\n+```\n+$ docker pull returntocorp/sgrep\n+```\n \n-### Mac \\(alpha\\)\n+`sgrep` binaries can also be installed on OSX and Ubuntu.\n \n-The brew install is WIP and will change significantly.\n+### OSX\n \n-```bash\n-brew tap returntocorp/sgrep https://github.com/returntocorp/sgrep.git\n-brew install sgrep-r2c\n-# Due to a naming conflict, when installed via brew, it is named `sgrok`\n-sgrok --help\n+```\n+$ brew tap returntocorp/sgrep https://github.com/returntocorp/sgrep.git\n+$ brew install sgrep-r2c\n+$ sgrep-lint --help\n ```\n \n-## Quickstart\n-\n-```bash\n-docker pull returntocorp/sgrep\n-\n-cd /path/to/repo\n-# generate a template config file\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --generate-config\n+### Ubuntu\n \n-# look for findings\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep\n+```\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ sha256sum --check sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ tar xf sgrep-0.4.9-ubuntu-16.04.tgz\n+$ ./sgrep-lint-files/sgrep-lint --help\n ```\n \n-## Usage\n-\n-### Rule Development\n+## Using", "originalCommit": "741b6bcb7b710dec2296513bebcae06f3a68c0f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1NTY0NQ==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406355645", "bodyText": "The configuration docs seemed to be jumping around different concepts a lot. Between the registry, rule writing, design philosophy, tool defaults, etc. I think we can consolidate a lot of the information and move the finer points like design philosophy to the advanced documentation.", "author": "mschwager", "createdAt": "2020-04-09T17:17:32Z", "path": "README.md", "diffHunk": "@@ -1,149 +1,194 @@\n # sgrep\n \n-[![r2c community slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=for-the-badge&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n+[![CircleCI](https://circleci.com/gh/returntocorp/sgrep.svg?style=svg)](https://circleci.com/gh/returntocorp/sgrep)\n+[![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n \n-[sgrep.live](https://sgrep.live/): try it now!\n+`sgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n+your codebase. It combines the convenience of `grep` with the correctness of\n+syntactical and semantic search. Quickly write rules so you can code with\n+confidence.\n \n-sgrep, for syntactical \\(and occasionnally semantic\\) grep, is a tool to help find bugs by specifying code patterns using a familiar syntax. The idea is to mix the convenience of grep with the correctness and precision of a compiler frontend.\n+Try it now: [https://sgrep.live](https://sgrep.live/)\n \n-## Quick Examples\n+## Overview\n \n-| **pattern** | **will match code like** |\n+Simple patterns for finding code in many languages:\n+\n+| **Pattern** | **Matches** |\n | :--- | :--- |\n | `$X == $X` | `if (node.id == node.id): ...` |\n-| `foo(kwd1=1, kwd2=2, ...)` | `foo(kwd2=2, kwd1=1, kwd3=3)` |\n-| `subprocess.Popen(...)` | `import subprocess as s; s.Popen(['foo'])` |\n-\n-\u2192 [see more examples in the sgrep-rules registry](https://github.com/returntocorp/sgrep-rules)\n+| `requests.get(..., verify=False, ...)` | `requests.get(url, timeout=3, verify=False)` |\n+| `os.system(...)` | `from os import system; system('echo sgrep')` |\n \n-## Supported Languages\n+Language support:\n \n-| **javascript** | **python** | **go** | **java** | **c** | **ruby** | **scala** |\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n-| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | coming | coming |\n-\n-\u2192 see full language support details in [matrix.md](docs/matrix.md)\n-\n-## Meetups\n+| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | Coming... | Coming... |\n \n-Want to learn more about sgrep? Check out these [slides from the r2c February meetup](https://r2c.dev/sgrep-public2.pdf)\n+## Installing\n \n-## Installation\n+For the best experience, simply install `sgrep` with [Docker](https://docs.docker.com/install/):\n \n-Too lazy to install? Try out [sgrep.live](https://sgrep.live)\n-\n-### Docker\n-\n-`sgrep` is packaged within a [docker container](https://hub.docker.com/r/returntocorp/sgrep), making installation as easy as [installing docker](https://docs.docker.com/install/).\n+```\n+$ docker pull returntocorp/sgrep\n+```\n \n-### Mac \\(alpha\\)\n+`sgrep` binaries can also be installed on OSX and Ubuntu.\n \n-The brew install is WIP and will change significantly.\n+### OSX\n \n-```bash\n-brew tap returntocorp/sgrep https://github.com/returntocorp/sgrep.git\n-brew install sgrep-r2c\n-# Due to a naming conflict, when installed via brew, it is named `sgrok`\n-sgrok --help\n+```\n+$ brew tap returntocorp/sgrep https://github.com/returntocorp/sgrep.git\n+$ brew install sgrep-r2c\n+$ sgrep-lint --help\n ```\n \n-## Quickstart\n-\n-```bash\n-docker pull returntocorp/sgrep\n-\n-cd /path/to/repo\n-# generate a template config file\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --generate-config\n+### Ubuntu\n \n-# look for findings\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep\n+```\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ sha256sum --check sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ tar xf sgrep-0.4.9-ubuntu-16.04.tgz\n+$ ./sgrep-lint-files/sgrep-lint --help\n ```\n \n-## Usage\n-\n-### Rule Development\n+## Using\n \n-To rapidly iterate on a single pattern, you can test on a single file or folder. For example,\n+Let's start with a simple example:\n \n-```bash\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep -l python -e '$X == $X' path/to/file.py\n+```\n+$ cat << EOF > test.py\n+a = 1\n+b = 2\n+if a == a:  # oops, supposed to be a == b\n+    print('sgrep test')\n+EOF\n ```\n \n-Here, `sgrep` will search the target with the pattern `$X == $X` \\(which is a stupid equals check\\) and print the results to `stdout`. This also works for directories and will skip the file if parsing fails. You can specifiy the language of the pattern with `--lang javascript` for example.\n+```\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --lang python --pattern '$X == $X' test.py\n+test.py\n+3:if a == a:  # oops, supposed to be a == b\n+```\n \n-To see more options\n+From here you can use our rules to search for issues in your codebase:\n \n-```bash\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --help\n+```\n+$ cd /path/to/code\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --config https://r2c.dev/default-r2c-checks\n ```\n \n-### Config Files\n-\n-#### Format\n+You can also [create your own rules](docs/config/advanced.md):\n \n-See [config/advanced.md](docs/config/advanced.md) for example configuration files and details on the syntax.\n+```\n+$ cd /path/to/code\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --generate-config\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep\n+```\n \n-#### sgrep Registry\n+## Configuring", "originalCommit": "741b6bcb7b710dec2296513bebcae06f3a68c0f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1ODg3OQ==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406358879", "bodyText": "Since we're explaining $X and ..., it might be a leap to have people grok pattern-not-inside at the same time.  Is there another example we could use?", "author": "minusworld", "createdAt": "2020-04-09T17:23:13Z", "path": "README.md", "diffHunk": "@@ -1,149 +1,194 @@\n # sgrep\n \n-[![r2c community slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=for-the-badge&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n+[![CircleCI](https://circleci.com/gh/returntocorp/sgrep.svg?style=svg)](https://circleci.com/gh/returntocorp/sgrep)\n+[![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n \n-[sgrep.live](https://sgrep.live/): try it now!\n+`sgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n+your codebase. It combines the convenience of `grep` with the correctness of\n+syntactical and semantic search. Quickly write rules so you can code with\n+confidence.\n \n-sgrep, for syntactical \\(and occasionnally semantic\\) grep, is a tool to help find bugs by specifying code patterns using a familiar syntax. The idea is to mix the convenience of grep with the correctness and precision of a compiler frontend.\n+Try it now: [https://sgrep.live](https://sgrep.live/)\n \n-## Quick Examples\n+## Overview\n \n-| **pattern** | **will match code like** |\n+Simple patterns for finding code in many languages:\n+\n+| **Pattern** | **Matches** |\n | :--- | :--- |\n | `$X == $X` | `if (node.id == node.id): ...` |\n-| `foo(kwd1=1, kwd2=2, ...)` | `foo(kwd2=2, kwd1=1, kwd3=3)` |\n-| `subprocess.Popen(...)` | `import subprocess as s; s.Popen(['foo'])` |\n-\n-\u2192 [see more examples in the sgrep-rules registry](https://github.com/returntocorp/sgrep-rules)\n+| `requests.get(..., verify=False, ...)` | `requests.get(url, timeout=3, verify=False)` |\n+| `os.system(...)` | `from os import system; system('echo sgrep')` |\n \n-## Supported Languages\n+Language support:\n \n-| **javascript** | **python** | **go** | **java** | **c** | **ruby** | **scala** |\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n-| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | coming | coming |\n-\n-\u2192 see full language support details in [matrix.md](docs/matrix.md)\n-\n-## Meetups\n+| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | Coming... | Coming... |\n \n-Want to learn more about sgrep? Check out these [slides from the r2c February meetup](https://r2c.dev/sgrep-public2.pdf)\n+## Installing\n \n-## Installation\n+For the best experience, simply install `sgrep` with [Docker](https://docs.docker.com/install/):\n \n-Too lazy to install? Try out [sgrep.live](https://sgrep.live)\n-\n-### Docker\n-\n-`sgrep` is packaged within a [docker container](https://hub.docker.com/r/returntocorp/sgrep), making installation as easy as [installing docker](https://docs.docker.com/install/).\n+```\n+$ docker pull returntocorp/sgrep\n+```\n \n-### Mac \\(alpha\\)\n+`sgrep` binaries can also be installed on OSX and Ubuntu.\n \n-The brew install is WIP and will change significantly.\n+### OSX\n \n-```bash\n-brew tap returntocorp/sgrep https://github.com/returntocorp/sgrep.git\n-brew install sgrep-r2c\n-# Due to a naming conflict, when installed via brew, it is named `sgrok`\n-sgrok --help\n+```\n+$ brew tap returntocorp/sgrep https://github.com/returntocorp/sgrep.git\n+$ brew install sgrep-r2c\n+$ sgrep-lint --help\n ```\n \n-## Quickstart\n-\n-```bash\n-docker pull returntocorp/sgrep\n-\n-cd /path/to/repo\n-# generate a template config file\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --generate-config\n+### Ubuntu\n \n-# look for findings\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep\n+```\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ sha256sum --check sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ tar xf sgrep-0.4.9-ubuntu-16.04.tgz\n+$ ./sgrep-lint-files/sgrep-lint --help\n ```\n \n-## Usage\n-\n-### Rule Development\n+## Using\n \n-To rapidly iterate on a single pattern, you can test on a single file or folder. For example,\n+Let's start with a simple example:\n \n-```bash\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep -l python -e '$X == $X' path/to/file.py\n+```\n+$ cat << EOF > test.py\n+a = 1\n+b = 2\n+if a == a:  # oops, supposed to be a == b\n+    print('sgrep test')\n+EOF\n ```\n \n-Here, `sgrep` will search the target with the pattern `$X == $X` \\(which is a stupid equals check\\) and print the results to `stdout`. This also works for directories and will skip the file if parsing fails. You can specifiy the language of the pattern with `--lang javascript` for example.\n+```\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --lang python --pattern '$X == $X' test.py\n+test.py\n+3:if a == a:  # oops, supposed to be a == b\n+```\n \n-To see more options\n+From here you can use our rules to search for issues in your codebase:\n \n-```bash\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --help\n+```\n+$ cd /path/to/code\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --config https://r2c.dev/default-r2c-checks\n ```\n \n-### Config Files\n-\n-#### Format\n+You can also [create your own rules](docs/config/advanced.md):\n \n-See [config/advanced.md](docs/config/advanced.md) for example configuration files and details on the syntax.\n+```\n+$ cd /path/to/code\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --generate-config\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep\n+```\n \n-#### sgrep Registry\n+## Configuring\n \n-[r2c](https://r2c.dev) provides a [registry](https://github.com/returntocorp/sgrep-rules) of config files tuned using our [analysis platform](https://app.r2c.dev) on thousands of repositories. To use:\n+For simple patterns use the `--lang` and `--pattern` flags. This mode of\n+operation is useful for quickly iterating on a pattern on a single file or\n+folder:\n \n-```bash\n-sgrep --config r2c\n+```\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --lang javascript --pattern 'eval(...)' path/to/file.js\n ```\n \n-### Default\n-\n-Default configs are loaded from `.sgrep.yml` or multiple files matching `.sgrep/**/*.yml` and can be overridden by using `--config <file|folder|yaml_url|tarball_url|registy_name>`\n+To fine-tune your searching, specify the `--help` flag:\n \n-## Design\n+```\n+$ docker run --rm returntocorp/sgrep --help\n+```\n \n-Sgrep has a design philosophy that emphasizes simplicity and a single pattern being as expressive as possible:\n+### Configuration Files\n \n-1. **Use concrete code syntax:** easy to learn\n-2. **Metavariables \\($X\\)**: abstract away code\n-3. **'...' operator:** abstract away sequences\n-4. **Knows about code equivalences:** one pattern can match many equivalent variations on the code\n-5. **Less is more:** abstract away additional details\n+For advanced configuration use the `--config` flag. This flag automagically\n+handles a multitude of input types:\n \n-## Patterns\n+* `--config <file|folder|yaml_url|tarball_url|registy_name>`\n \n-Patterns are snippets of code with variables and other operators that will be parsed into an AST for that language and will be used to search for that pattern in code. See [docs/config/simple.md](docs/config/simple.md) for full documentation.\n+In the absense of this flag, a default configuration is loaded from `.sgrep.yml`\n+or multiple files matching `.sgrep/**/*.yml`.\n \n-### Metavariables\n+#### Operators\n \n-`$X`, `$FOO`, `$RETURNCODE` are all examples of metavariables. You can referance them later in your pattern and `sgrep` will ensure they match. **Metavariables can only contain uppercase ASCII characters**; `$x` and `$SOME_VALUE` are not valid metavariables.\n+Configuration files make use of two primary operators:\n+\n+* **Metavariables like $X, $LIST, or $METAVARIABLE.** Metavariable names can\n+only contain uppercase characters. Metavariables are used to track a variable\n+across a specific code scope.\n+* **The '...' (splat) operator.** The splat operator abstracts away sequences\n+so you don't have to sweat the details of a particular code pattern.\n+\n+Let's consider an example:\n+\n+```yaml\n+rules:\n+  - id: open-never-closed\n+    patterns:\n+      - pattern: $FD = open(...)\n+      - pattern-not-inside: |", "originalCommit": "741b6bcb7b710dec2296513bebcae06f3a68c0f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4MzQzMw==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406483433", "bodyText": "Good catch here. My thoughts were that we need: 1.) an obvious code smell that people can connect with (e.g. files opened but never closed), 2.) a simple, short example that makes use of metavariables and the ellipsis operator. This was just the first one that came to mind. I think people should be able to grok pattern-not-inside as a \"negation\" operator, but I'm open to other ideas too. Do you have an example in mind that meets the above criteria?", "author": "mschwager", "createdAt": "2020-04-09T21:18:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1ODg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5Mzk1Ng==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406893956", "bodyText": "\ud83e\udd14 What about modifying a list while iterating over it? https://sgrep.live/5K0. We could either briefly explain pattern-either because I think it's easier to understand than pattern-not-inside, or we could just grab one of those patterns. Probably .append", "author": "minusworld", "createdAt": "2020-04-10T18:51:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1ODg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk1ODY3NQ==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406958675", "bodyText": "I think, at the very least, we need to explain what pattern, etc. are and do (maybe up at line 115?) before introducing this example.", "author": "nbrahms", "createdAt": "2020-04-10T21:50:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1ODg3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NDM1Mw==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406364353", "bodyText": "Internally (in the code) and externally, we've referred to this as the ellipsis operator. Is there a reason to change?", "author": "ievans", "createdAt": "2020-04-09T17:32:39Z", "path": "README.md", "diffHunk": "@@ -1,149 +1,194 @@\n # sgrep\n \n-[![r2c community slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=for-the-badge&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n+[![CircleCI](https://circleci.com/gh/returntocorp/sgrep.svg?style=svg)](https://circleci.com/gh/returntocorp/sgrep)\n+[![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n \n-[sgrep.live](https://sgrep.live/): try it now!\n+`sgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n+your codebase. It combines the convenience of `grep` with the correctness of\n+syntactical and semantic search. Quickly write rules so you can code with\n+confidence.\n \n-sgrep, for syntactical \\(and occasionnally semantic\\) grep, is a tool to help find bugs by specifying code patterns using a familiar syntax. The idea is to mix the convenience of grep with the correctness and precision of a compiler frontend.\n+Try it now: [https://sgrep.live](https://sgrep.live/)\n \n-## Quick Examples\n+## Overview\n \n-| **pattern** | **will match code like** |\n+Simple patterns for finding code in many languages:\n+\n+| **Pattern** | **Matches** |\n | :--- | :--- |\n | `$X == $X` | `if (node.id == node.id): ...` |\n-| `foo(kwd1=1, kwd2=2, ...)` | `foo(kwd2=2, kwd1=1, kwd3=3)` |\n-| `subprocess.Popen(...)` | `import subprocess as s; s.Popen(['foo'])` |\n-\n-\u2192 [see more examples in the sgrep-rules registry](https://github.com/returntocorp/sgrep-rules)\n+| `requests.get(..., verify=False, ...)` | `requests.get(url, timeout=3, verify=False)` |\n+| `os.system(...)` | `from os import system; system('echo sgrep')` |\n \n-## Supported Languages\n+Language support:\n \n-| **javascript** | **python** | **go** | **java** | **c** | **ruby** | **scala** |\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n-| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | coming | coming |\n-\n-\u2192 see full language support details in [matrix.md](docs/matrix.md)\n-\n-## Meetups\n+| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | Coming... | Coming... |\n \n-Want to learn more about sgrep? Check out these [slides from the r2c February meetup](https://r2c.dev/sgrep-public2.pdf)\n+## Installing\n \n-## Installation\n+For the best experience, simply install `sgrep` with [Docker](https://docs.docker.com/install/):\n \n-Too lazy to install? Try out [sgrep.live](https://sgrep.live)\n-\n-### Docker\n-\n-`sgrep` is packaged within a [docker container](https://hub.docker.com/r/returntocorp/sgrep), making installation as easy as [installing docker](https://docs.docker.com/install/).\n+```\n+$ docker pull returntocorp/sgrep\n+```\n \n-### Mac \\(alpha\\)\n+`sgrep` binaries can also be installed on OSX and Ubuntu.\n \n-The brew install is WIP and will change significantly.\n+### OSX\n \n-```bash\n-brew tap returntocorp/sgrep https://github.com/returntocorp/sgrep.git\n-brew install sgrep-r2c\n-# Due to a naming conflict, when installed via brew, it is named `sgrok`\n-sgrok --help\n+```\n+$ brew tap returntocorp/sgrep https://github.com/returntocorp/sgrep.git\n+$ brew install sgrep-r2c\n+$ sgrep-lint --help\n ```\n \n-## Quickstart\n-\n-```bash\n-docker pull returntocorp/sgrep\n-\n-cd /path/to/repo\n-# generate a template config file\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --generate-config\n+### Ubuntu\n \n-# look for findings\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep\n+```\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ sha256sum --check sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ tar xf sgrep-0.4.9-ubuntu-16.04.tgz\n+$ ./sgrep-lint-files/sgrep-lint --help\n ```\n \n-## Usage\n-\n-### Rule Development\n+## Using\n \n-To rapidly iterate on a single pattern, you can test on a single file or folder. For example,\n+Let's start with a simple example:\n \n-```bash\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep -l python -e '$X == $X' path/to/file.py\n+```\n+$ cat << EOF > test.py\n+a = 1\n+b = 2\n+if a == a:  # oops, supposed to be a == b\n+    print('sgrep test')\n+EOF\n ```\n \n-Here, `sgrep` will search the target with the pattern `$X == $X` \\(which is a stupid equals check\\) and print the results to `stdout`. This also works for directories and will skip the file if parsing fails. You can specifiy the language of the pattern with `--lang javascript` for example.\n+```\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --lang python --pattern '$X == $X' test.py\n+test.py\n+3:if a == a:  # oops, supposed to be a == b\n+```\n \n-To see more options\n+From here you can use our rules to search for issues in your codebase:\n \n-```bash\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --help\n+```\n+$ cd /path/to/code\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --config https://r2c.dev/default-r2c-checks\n ```\n \n-### Config Files\n-\n-#### Format\n+You can also [create your own rules](docs/config/advanced.md):\n \n-See [config/advanced.md](docs/config/advanced.md) for example configuration files and details on the syntax.\n+```\n+$ cd /path/to/code\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --generate-config\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep\n+```\n \n-#### sgrep Registry\n+## Configuring\n \n-[r2c](https://r2c.dev) provides a [registry](https://github.com/returntocorp/sgrep-rules) of config files tuned using our [analysis platform](https://app.r2c.dev) on thousands of repositories. To use:\n+For simple patterns use the `--lang` and `--pattern` flags. This mode of\n+operation is useful for quickly iterating on a pattern on a single file or\n+folder:\n \n-```bash\n-sgrep --config r2c\n+```\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --lang javascript --pattern 'eval(...)' path/to/file.js\n ```\n \n-### Default\n-\n-Default configs are loaded from `.sgrep.yml` or multiple files matching `.sgrep/**/*.yml` and can be overridden by using `--config <file|folder|yaml_url|tarball_url|registy_name>`\n+To fine-tune your searching, specify the `--help` flag:\n \n-## Design\n+```\n+$ docker run --rm returntocorp/sgrep --help\n+```\n \n-Sgrep has a design philosophy that emphasizes simplicity and a single pattern being as expressive as possible:\n+### Configuration Files\n \n-1. **Use concrete code syntax:** easy to learn\n-2. **Metavariables \\($X\\)**: abstract away code\n-3. **'...' operator:** abstract away sequences\n-4. **Knows about code equivalences:** one pattern can match many equivalent variations on the code\n-5. **Less is more:** abstract away additional details\n+For advanced configuration use the `--config` flag. This flag automagically\n+handles a multitude of input types:\n \n-## Patterns\n+* `--config <file|folder|yaml_url|tarball_url|registy_name>`\n \n-Patterns are snippets of code with variables and other operators that will be parsed into an AST for that language and will be used to search for that pattern in code. See [docs/config/simple.md](docs/config/simple.md) for full documentation.\n+In the absense of this flag, a default configuration is loaded from `.sgrep.yml`\n+or multiple files matching `.sgrep/**/*.yml`.\n \n-### Metavariables\n+#### Operators\n \n-`$X`, `$FOO`, `$RETURNCODE` are all examples of metavariables. You can referance them later in your pattern and `sgrep` will ensure they match. **Metavariables can only contain uppercase ASCII characters**; `$x` and `$SOME_VALUE` are not valid metavariables.\n+Configuration files make use of two primary operators:\n+\n+* **Metavariables like $X, $LIST, or $METAVARIABLE.** Metavariable names can\n+only contain uppercase characters. Metavariables are used to track a variable\n+across a specific code scope.\n+* **The '...' (splat) operator.** The splat operator abstracts away sequences", "originalCommit": "741b6bcb7b710dec2296513bebcae06f3a68c0f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4MDEzMA==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406480130", "bodyText": "Nope! I hadn't heard \"ellipsis\" yet. I'll update \ud83d\udc4d", "author": "mschwager", "createdAt": "2020-04-09T21:11:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NDM1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NDk3Mw==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406364973", "bodyText": "I find it confusing to have $LIST or $METAVARIABLE as examples, they make me think there is something special about those words. Also found it helpful to have examples of the invalid metavars. Thoughts @mschwager ?", "author": "ievans", "createdAt": "2020-04-09T17:33:50Z", "path": "README.md", "diffHunk": "@@ -1,149 +1,194 @@\n # sgrep\n \n-[![r2c community slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=for-the-badge&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n+[![CircleCI](https://circleci.com/gh/returntocorp/sgrep.svg?style=svg)](https://circleci.com/gh/returntocorp/sgrep)\n+[![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n \n-[sgrep.live](https://sgrep.live/): try it now!\n+`sgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n+your codebase. It combines the convenience of `grep` with the correctness of\n+syntactical and semantic search. Quickly write rules so you can code with\n+confidence.\n \n-sgrep, for syntactical \\(and occasionnally semantic\\) grep, is a tool to help find bugs by specifying code patterns using a familiar syntax. The idea is to mix the convenience of grep with the correctness and precision of a compiler frontend.\n+Try it now: [https://sgrep.live](https://sgrep.live/)\n \n-## Quick Examples\n+## Overview\n \n-| **pattern** | **will match code like** |\n+Simple patterns for finding code in many languages:\n+\n+| **Pattern** | **Matches** |\n | :--- | :--- |\n | `$X == $X` | `if (node.id == node.id): ...` |\n-| `foo(kwd1=1, kwd2=2, ...)` | `foo(kwd2=2, kwd1=1, kwd3=3)` |\n-| `subprocess.Popen(...)` | `import subprocess as s; s.Popen(['foo'])` |\n-\n-\u2192 [see more examples in the sgrep-rules registry](https://github.com/returntocorp/sgrep-rules)\n+| `requests.get(..., verify=False, ...)` | `requests.get(url, timeout=3, verify=False)` |\n+| `os.system(...)` | `from os import system; system('echo sgrep')` |\n \n-## Supported Languages\n+Language support:\n \n-| **javascript** | **python** | **go** | **java** | **c** | **ruby** | **scala** |\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n-| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | coming | coming |\n-\n-\u2192 see full language support details in [matrix.md](docs/matrix.md)\n-\n-## Meetups\n+| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | Coming... | Coming... |\n \n-Want to learn more about sgrep? Check out these [slides from the r2c February meetup](https://r2c.dev/sgrep-public2.pdf)\n+## Installing\n \n-## Installation\n+For the best experience, simply install `sgrep` with [Docker](https://docs.docker.com/install/):\n \n-Too lazy to install? Try out [sgrep.live](https://sgrep.live)\n-\n-### Docker\n-\n-`sgrep` is packaged within a [docker container](https://hub.docker.com/r/returntocorp/sgrep), making installation as easy as [installing docker](https://docs.docker.com/install/).\n+```\n+$ docker pull returntocorp/sgrep\n+```\n \n-### Mac \\(alpha\\)\n+`sgrep` binaries can also be installed on OSX and Ubuntu.\n \n-The brew install is WIP and will change significantly.\n+### OSX\n \n-```bash\n-brew tap returntocorp/sgrep https://github.com/returntocorp/sgrep.git\n-brew install sgrep-r2c\n-# Due to a naming conflict, when installed via brew, it is named `sgrok`\n-sgrok --help\n+```\n+$ brew tap returntocorp/sgrep https://github.com/returntocorp/sgrep.git\n+$ brew install sgrep-r2c\n+$ sgrep-lint --help\n ```\n \n-## Quickstart\n-\n-```bash\n-docker pull returntocorp/sgrep\n-\n-cd /path/to/repo\n-# generate a template config file\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --generate-config\n+### Ubuntu\n \n-# look for findings\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep\n+```\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ sha256sum --check sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ tar xf sgrep-0.4.9-ubuntu-16.04.tgz\n+$ ./sgrep-lint-files/sgrep-lint --help\n ```\n \n-## Usage\n-\n-### Rule Development\n+## Using\n \n-To rapidly iterate on a single pattern, you can test on a single file or folder. For example,\n+Let's start with a simple example:\n \n-```bash\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep -l python -e '$X == $X' path/to/file.py\n+```\n+$ cat << EOF > test.py\n+a = 1\n+b = 2\n+if a == a:  # oops, supposed to be a == b\n+    print('sgrep test')\n+EOF\n ```\n \n-Here, `sgrep` will search the target with the pattern `$X == $X` \\(which is a stupid equals check\\) and print the results to `stdout`. This also works for directories and will skip the file if parsing fails. You can specifiy the language of the pattern with `--lang javascript` for example.\n+```\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --lang python --pattern '$X == $X' test.py\n+test.py\n+3:if a == a:  # oops, supposed to be a == b\n+```\n \n-To see more options\n+From here you can use our rules to search for issues in your codebase:\n \n-```bash\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --help\n+```\n+$ cd /path/to/code\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --config https://r2c.dev/default-r2c-checks\n ```\n \n-### Config Files\n-\n-#### Format\n+You can also [create your own rules](docs/config/advanced.md):\n \n-See [config/advanced.md](docs/config/advanced.md) for example configuration files and details on the syntax.\n+```\n+$ cd /path/to/code\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --generate-config\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep\n+```\n \n-#### sgrep Registry\n+## Configuring\n \n-[r2c](https://r2c.dev) provides a [registry](https://github.com/returntocorp/sgrep-rules) of config files tuned using our [analysis platform](https://app.r2c.dev) on thousands of repositories. To use:\n+For simple patterns use the `--lang` and `--pattern` flags. This mode of\n+operation is useful for quickly iterating on a pattern on a single file or\n+folder:\n \n-```bash\n-sgrep --config r2c\n+```\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --lang javascript --pattern 'eval(...)' path/to/file.js\n ```\n \n-### Default\n-\n-Default configs are loaded from `.sgrep.yml` or multiple files matching `.sgrep/**/*.yml` and can be overridden by using `--config <file|folder|yaml_url|tarball_url|registy_name>`\n+To fine-tune your searching, specify the `--help` flag:\n \n-## Design\n+```\n+$ docker run --rm returntocorp/sgrep --help\n+```\n \n-Sgrep has a design philosophy that emphasizes simplicity and a single pattern being as expressive as possible:\n+### Configuration Files\n \n-1. **Use concrete code syntax:** easy to learn\n-2. **Metavariables \\($X\\)**: abstract away code\n-3. **'...' operator:** abstract away sequences\n-4. **Knows about code equivalences:** one pattern can match many equivalent variations on the code\n-5. **Less is more:** abstract away additional details\n+For advanced configuration use the `--config` flag. This flag automagically\n+handles a multitude of input types:\n \n-## Patterns\n+* `--config <file|folder|yaml_url|tarball_url|registy_name>`\n \n-Patterns are snippets of code with variables and other operators that will be parsed into an AST for that language and will be used to search for that pattern in code. See [docs/config/simple.md](docs/config/simple.md) for full documentation.\n+In the absense of this flag, a default configuration is loaded from `.sgrep.yml`\n+or multiple files matching `.sgrep/**/*.yml`.\n \n-### Metavariables\n+#### Operators\n \n-`$X`, `$FOO`, `$RETURNCODE` are all examples of metavariables. You can referance them later in your pattern and `sgrep` will ensure they match. **Metavariables can only contain uppercase ASCII characters**; `$x` and `$SOME_VALUE` are not valid metavariables.\n+Configuration files make use of two primary operators:\n+\n+* **Metavariables like $X, $LIST, or $METAVARIABLE.** Metavariable names can", "originalCommit": "741b6bcb7b710dec2296513bebcae06f3a68c0f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4NzQ1MQ==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406487451", "bodyText": "Is it the fact that they're any word, or those specific words? I think there's value in using words in general, but they don't have to be those words. E.g. word names can help you keep track of what the variable is:\npattern-not-inside: |\n    $USERS = request.get(\"users\")\n    ...\n    db.remove($USERS)\nI think this is slightly more self-documenting than something like $X. Does something like \"Metavariables like $X, $WIDGET, or $USERS.\" make more sense?\nDefinitely agree on the invalid examples - I'll add those back in.", "author": "mschwager", "createdAt": "2020-04-09T21:27:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NDk3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzMzc1NA==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406533754", "bodyText": "@mschwager yes and thanks for guessing at what I meant! I think it helps to have something like \"Metavariables like $X, $WIDGET, or $USERS.\"", "author": "ievans", "createdAt": "2020-04-09T23:40:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NDk3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NjQ1MQ==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406366451", "bodyText": "suggestion for this table, it should show the sgrep invocation exactly to make it clear how to use the patteern, and have examples in Javascript and golang as well, eg:\ncommand          | matches\nsgrep -lang js const x = 5     | const $FOO = $BAR", "author": "ievans", "createdAt": "2020-04-09T17:36:26Z", "path": "README.md", "diffHunk": "@@ -1,149 +1,194 @@\n # sgrep\n \n-[![r2c community slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=for-the-badge&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n+[![CircleCI](https://circleci.com/gh/returntocorp/sgrep.svg?style=svg)](https://circleci.com/gh/returntocorp/sgrep)\n+[![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n \n-[sgrep.live](https://sgrep.live/): try it now!\n+`sgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n+your codebase. It combines the convenience of `grep` with the correctness of\n+syntactical and semantic search. Quickly write rules so you can code with\n+confidence.\n \n-sgrep, for syntactical \\(and occasionnally semantic\\) grep, is a tool to help find bugs by specifying code patterns using a familiar syntax. The idea is to mix the convenience of grep with the correctness and precision of a compiler frontend.\n+Try it now: [https://sgrep.live](https://sgrep.live/)\n \n-## Quick Examples\n+## Overview\n \n-| **pattern** | **will match code like** |\n+Simple patterns for finding code in many languages:", "originalCommit": "741b6bcb7b710dec2296513bebcae06f3a68c0f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NzUwNg==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406367506", "bodyText": "Oh, and ideally we would actually link each row to a sgrep.live example :D", "author": "ievans", "createdAt": "2020-04-09T17:38:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NjQ1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4NDYzOQ==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406484639", "bodyText": "Roger that, I'll iterate here.", "author": "mschwager", "createdAt": "2020-04-09T21:21:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NjQ1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwMjc4OA==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406802788", "bodyText": "I added a JS and Go example. As for showing the full invocation, adding that much text turns these examples into multi-line rows. Shall we just stick with the 5 simple examples for now and iterate on this table more specifically in the future?", "author": "mschwager", "createdAt": "2020-04-10T15:14:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NjQ1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgyMDYxNw==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406820617", "bodyText": "@mschwager sgtm!", "author": "ievans", "createdAt": "2020-04-10T15:55:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NjQ1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgyMTMwOQ==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406821309", "bodyText": "I dig it! Probably should stay away from the multiline wrap if we can, defer to you there. Let's just make sure that it's obvious later on how to use \"pattern\"", "author": "ievans", "createdAt": "2020-04-10T15:56:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NjQ1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2Nzc0MA==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406367740", "bodyText": "nice, smartquotes are the worst", "author": "ievans", "createdAt": "2020-04-09T17:38:45Z", "path": "README.md", "diffHunk": "@@ -1,149 +1,194 @@\n # sgrep\n \n-[![r2c community slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=for-the-badge&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n+[![CircleCI](https://circleci.com/gh/returntocorp/sgrep.svg?style=svg)](https://circleci.com/gh/returntocorp/sgrep)\n+[![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n \n-[sgrep.live](https://sgrep.live/): try it now!\n+`sgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n+your codebase. It combines the convenience of `grep` with the correctness of\n+syntactical and semantic search. Quickly write rules so you can code with\n+confidence.\n \n-sgrep, for syntactical \\(and occasionnally semantic\\) grep, is a tool to help find bugs by specifying code patterns using a familiar syntax. The idea is to mix the convenience of grep with the correctness and precision of a compiler frontend.\n+Try it now: [https://sgrep.live](https://sgrep.live/)\n \n-## Quick Examples\n+## Overview\n \n-| **pattern** | **will match code like** |\n+Simple patterns for finding code in many languages:\n+\n+| **Pattern** | **Matches** |\n | :--- | :--- |\n | `$X == $X` | `if (node.id == node.id): ...` |\n-| `foo(kwd1=1, kwd2=2, ...)` | `foo(kwd2=2, kwd1=1, kwd3=3)` |\n-| `subprocess.Popen(...)` | `import subprocess as s; s.Popen(['foo'])` |\n-\n-\u2192 [see more examples in the sgrep-rules registry](https://github.com/returntocorp/sgrep-rules)\n+| `requests.get(..., verify=False, ...)` | `requests.get(url, timeout=3, verify=False)` |\n+| `os.system(...)` | `from os import system; system('echo sgrep')` |\n \n-## Supported Languages\n+Language support:\n \n-| **javascript** | **python** | **go** | **java** | **c** | **ruby** | **scala** |\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n-| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | coming | coming |\n-\n-\u2192 see full language support details in [matrix.md](docs/matrix.md)\n-\n-## Meetups\n+| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | Coming... | Coming... |\n \n-Want to learn more about sgrep? Check out these [slides from the r2c February meetup](https://r2c.dev/sgrep-public2.pdf)\n+## Installing\n \n-## Installation\n+For the best experience, simply install `sgrep` with [Docker](https://docs.docker.com/install/):\n \n-Too lazy to install? Try out [sgrep.live](https://sgrep.live)\n-\n-### Docker\n-\n-`sgrep` is packaged within a [docker container](https://hub.docker.com/r/returntocorp/sgrep), making installation as easy as [installing docker](https://docs.docker.com/install/).\n+```\n+$ docker pull returntocorp/sgrep\n+```\n \n-### Mac \\(alpha\\)\n+`sgrep` binaries can also be installed on OSX and Ubuntu.\n \n-The brew install is WIP and will change significantly.\n+### OSX\n \n-```bash\n-brew tap returntocorp/sgrep https://github.com/returntocorp/sgrep.git\n-brew install sgrep-r2c\n-# Due to a naming conflict, when installed via brew, it is named `sgrok`\n-sgrok --help\n+```\n+$ brew tap returntocorp/sgrep https://github.com/returntocorp/sgrep.git\n+$ brew install sgrep-r2c\n+$ sgrep-lint --help\n ```\n \n-## Quickstart\n-\n-```bash\n-docker pull returntocorp/sgrep\n-\n-cd /path/to/repo\n-# generate a template config file\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --generate-config\n+### Ubuntu\n \n-# look for findings\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep\n+```\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ sha256sum --check sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ tar xf sgrep-0.4.9-ubuntu-16.04.tgz\n+$ ./sgrep-lint-files/sgrep-lint --help\n ```\n \n-## Usage\n-\n-### Rule Development\n+## Using\n \n-To rapidly iterate on a single pattern, you can test on a single file or folder. For example,\n+Let's start with a simple example:\n \n-```bash\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep -l python -e '$X == $X' path/to/file.py\n+```\n+$ cat << EOF > test.py\n+a = 1\n+b = 2\n+if a == a:  # oops, supposed to be a == b\n+    print('sgrep test')\n+EOF\n ```\n \n-Here, `sgrep` will search the target with the pattern `$X == $X` \\(which is a stupid equals check\\) and print the results to `stdout`. This also works for directories and will skip the file if parsing fails. You can specifiy the language of the pattern with `--lang javascript` for example.\n+```\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --lang python --pattern '$X == $X' test.py\n+test.py\n+3:if a == a:  # oops, supposed to be a == b\n+```\n \n-To see more options\n+From here you can use our rules to search for issues in your codebase:\n \n-```bash\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --help\n+```\n+$ cd /path/to/code\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --config https://r2c.dev/default-r2c-checks\n ```\n \n-### Config Files\n-\n-#### Format\n+You can also [create your own rules](docs/config/advanced.md):\n \n-See [config/advanced.md](docs/config/advanced.md) for example configuration files and details on the syntax.\n+```\n+$ cd /path/to/code\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --generate-config\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep\n+```\n \n-#### sgrep Registry\n+## Configuring\n \n-[r2c](https://r2c.dev) provides a [registry](https://github.com/returntocorp/sgrep-rules) of config files tuned using our [analysis platform](https://app.r2c.dev) on thousands of repositories. To use:\n+For simple patterns use the `--lang` and `--pattern` flags. This mode of\n+operation is useful for quickly iterating on a pattern on a single file or\n+folder:\n \n-```bash\n-sgrep --config r2c\n+```\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --lang javascript --pattern 'eval(...)' path/to/file.js\n ```\n \n-### Default\n-\n-Default configs are loaded from `.sgrep.yml` or multiple files matching `.sgrep/**/*.yml` and can be overridden by using `--config <file|folder|yaml_url|tarball_url|registy_name>`\n+To fine-tune your searching, specify the `--help` flag:\n \n-## Design\n+```\n+$ docker run --rm returntocorp/sgrep --help\n+```\n \n-Sgrep has a design philosophy that emphasizes simplicity and a single pattern being as expressive as possible:\n+### Configuration Files\n \n-1. **Use concrete code syntax:** easy to learn\n-2. **Metavariables \\($X\\)**: abstract away code\n-3. **'...' operator:** abstract away sequences\n-4. **Knows about code equivalences:** one pattern can match many equivalent variations on the code\n-5. **Less is more:** abstract away additional details\n+For advanced configuration use the `--config` flag. This flag automagically\n+handles a multitude of input types:\n \n-## Patterns\n+* `--config <file|folder|yaml_url|tarball_url|registy_name>`\n \n-Patterns are snippets of code with variables and other operators that will be parsed into an AST for that language and will be used to search for that pattern in code. See [docs/config/simple.md](docs/config/simple.md) for full documentation.\n+In the absense of this flag, a default configuration is loaded from `.sgrep.yml`\n+or multiple files matching `.sgrep/**/*.yml`.\n \n-### Metavariables\n+#### Operators\n \n-`$X`, `$FOO`, `$RETURNCODE` are all examples of metavariables. You can referance them later in your pattern and `sgrep` will ensure they match. **Metavariables can only contain uppercase ASCII characters**; `$x` and `$SOME_VALUE` are not valid metavariables.\n+Configuration files make use of two primary operators:\n+\n+* **Metavariables like $X, $LIST, or $METAVARIABLE.** Metavariable names can\n+only contain uppercase characters. Metavariables are used to track a variable\n+across a specific code scope.\n+* **The '...' (splat) operator.** The splat operator abstracts away sequences\n+so you don't have to sweat the details of a particular code pattern.\n+\n+Let's consider an example:\n+\n+```yaml\n+rules:\n+  - id: open-never-closed\n+    patterns:\n+      - pattern: $FD = open(...)\n+      - pattern-not-inside: |\n+          $FD = open(...)\n+          ...\n+          $FD.close()\n+    message: \"file object opened without corresponding close\"\n+    languages: [python]\n+    severity: ERROR\n+```\n \n-#### Operators\n+This rule looks for files that are opened but never closed. It accomplishes\n+this by looking for the `open(...)` pattern _and not_ a following `close()`\n+pattern. The `$FD` metavariable ensures that the same variable name is used\n+in the `open` and `close` calls. The splat operator allows for any arguments\n+to be passed to `open` and any sequence of code statements in-between the `open`\n+and `close` calls. We don't care how `open` is called or what happens up to\n+a `close` call, we just need to make sure `close` is called.\n \n-`...` is the primary \"match anything\" operator. It can match sequences of characters, arguments, or statements. See [docs/config/simple.md](docs/config/simple.md) for more details!\n+For a more complete introduction to the configuration format please see the\n+[advanced configuration documentation](docs/config/advanced.md).\n \n #### Equivalences\n \n-`sgrep` automatically searches for code that is semantically equivalent. For example, a pattern for\n+Equivalences are another key concept in `sgrep`. `sgrep` automatically searches\n+for code that is semantically equivalent. For example, the following patterns\n+are semantically equivalent\n \n-```text\n+```python\n subprocess.Popen(...)\n ```\n \n-will match\n-\n ```python\n-from subprocess import Popen as\n- sub_popen\n-result = sub_popen(\u201cls\u201d)\n+from subprocess import Popen as sub_popen\n+result = sub_popen(\"ls\")", "originalCommit": "741b6bcb7b710dec2296513bebcae06f3a68c0f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2ODM5OA==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406368398", "bodyText": "I like the resources section but the simple + advanced conf are such important parts I feel they merit being mentioned earlier and with larger emphasis", "author": "ievans", "createdAt": "2020-04-09T17:39:57Z", "path": "README.md", "diffHunk": "@@ -1,149 +1,194 @@\n # sgrep\n \n-[![r2c community slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=for-the-badge&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n+[![CircleCI](https://circleci.com/gh/returntocorp/sgrep.svg?style=svg)](https://circleci.com/gh/returntocorp/sgrep)\n+[![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n \n-[sgrep.live](https://sgrep.live/): try it now!\n+`sgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n+your codebase. It combines the convenience of `grep` with the correctness of\n+syntactical and semantic search. Quickly write rules so you can code with\n+confidence.\n \n-sgrep, for syntactical \\(and occasionnally semantic\\) grep, is a tool to help find bugs by specifying code patterns using a familiar syntax. The idea is to mix the convenience of grep with the correctness and precision of a compiler frontend.\n+Try it now: [https://sgrep.live](https://sgrep.live/)\n \n-## Quick Examples\n+## Overview\n \n-| **pattern** | **will match code like** |\n+Simple patterns for finding code in many languages:\n+\n+| **Pattern** | **Matches** |\n | :--- | :--- |\n | `$X == $X` | `if (node.id == node.id): ...` |\n-| `foo(kwd1=1, kwd2=2, ...)` | `foo(kwd2=2, kwd1=1, kwd3=3)` |\n-| `subprocess.Popen(...)` | `import subprocess as s; s.Popen(['foo'])` |\n-\n-\u2192 [see more examples in the sgrep-rules registry](https://github.com/returntocorp/sgrep-rules)\n+| `requests.get(..., verify=False, ...)` | `requests.get(url, timeout=3, verify=False)` |\n+| `os.system(...)` | `from os import system; system('echo sgrep')` |\n \n-## Supported Languages\n+Language support:\n \n-| **javascript** | **python** | **go** | **java** | **c** | **ruby** | **scala** |\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n-| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | coming | coming |\n-\n-\u2192 see full language support details in [matrix.md](docs/matrix.md)\n-\n-## Meetups\n+| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | Coming... | Coming... |\n \n-Want to learn more about sgrep? Check out these [slides from the r2c February meetup](https://r2c.dev/sgrep-public2.pdf)\n+## Installing\n \n-## Installation\n+For the best experience, simply install `sgrep` with [Docker](https://docs.docker.com/install/):\n \n-Too lazy to install? Try out [sgrep.live](https://sgrep.live)\n-\n-### Docker\n-\n-`sgrep` is packaged within a [docker container](https://hub.docker.com/r/returntocorp/sgrep), making installation as easy as [installing docker](https://docs.docker.com/install/).\n+```\n+$ docker pull returntocorp/sgrep\n+```\n \n-### Mac \\(alpha\\)\n+`sgrep` binaries can also be installed on OSX and Ubuntu.\n \n-The brew install is WIP and will change significantly.\n+### OSX\n \n-```bash\n-brew tap returntocorp/sgrep https://github.com/returntocorp/sgrep.git\n-brew install sgrep-r2c\n-# Due to a naming conflict, when installed via brew, it is named `sgrok`\n-sgrok --help\n+```\n+$ brew tap returntocorp/sgrep https://github.com/returntocorp/sgrep.git\n+$ brew install sgrep-r2c\n+$ sgrep-lint --help\n ```\n \n-## Quickstart\n-\n-```bash\n-docker pull returntocorp/sgrep\n-\n-cd /path/to/repo\n-# generate a template config file\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --generate-config\n+### Ubuntu\n \n-# look for findings\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep\n+```\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ sha256sum --check sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ tar xf sgrep-0.4.9-ubuntu-16.04.tgz\n+$ ./sgrep-lint-files/sgrep-lint --help\n ```\n \n-## Usage\n-\n-### Rule Development\n+## Using\n \n-To rapidly iterate on a single pattern, you can test on a single file or folder. For example,\n+Let's start with a simple example:\n \n-```bash\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep -l python -e '$X == $X' path/to/file.py\n+```\n+$ cat << EOF > test.py\n+a = 1\n+b = 2\n+if a == a:  # oops, supposed to be a == b\n+    print('sgrep test')\n+EOF\n ```\n \n-Here, `sgrep` will search the target with the pattern `$X == $X` \\(which is a stupid equals check\\) and print the results to `stdout`. This also works for directories and will skip the file if parsing fails. You can specifiy the language of the pattern with `--lang javascript` for example.\n+```\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --lang python --pattern '$X == $X' test.py\n+test.py\n+3:if a == a:  # oops, supposed to be a == b\n+```\n \n-To see more options\n+From here you can use our rules to search for issues in your codebase:\n \n-```bash\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --help\n+```\n+$ cd /path/to/code\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --config https://r2c.dev/default-r2c-checks\n ```\n \n-### Config Files\n-\n-#### Format\n+You can also [create your own rules](docs/config/advanced.md):\n \n-See [config/advanced.md](docs/config/advanced.md) for example configuration files and details on the syntax.\n+```\n+$ cd /path/to/code\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --generate-config\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep\n+```\n \n-#### sgrep Registry\n+## Configuring\n \n-[r2c](https://r2c.dev) provides a [registry](https://github.com/returntocorp/sgrep-rules) of config files tuned using our [analysis platform](https://app.r2c.dev) on thousands of repositories. To use:\n+For simple patterns use the `--lang` and `--pattern` flags. This mode of\n+operation is useful for quickly iterating on a pattern on a single file or\n+folder:\n \n-```bash\n-sgrep --config r2c\n+```\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --lang javascript --pattern 'eval(...)' path/to/file.js\n ```\n \n-### Default\n-\n-Default configs are loaded from `.sgrep.yml` or multiple files matching `.sgrep/**/*.yml` and can be overridden by using `--config <file|folder|yaml_url|tarball_url|registy_name>`\n+To fine-tune your searching, specify the `--help` flag:\n \n-## Design\n+```\n+$ docker run --rm returntocorp/sgrep --help\n+```\n \n-Sgrep has a design philosophy that emphasizes simplicity and a single pattern being as expressive as possible:\n+### Configuration Files\n \n-1. **Use concrete code syntax:** easy to learn\n-2. **Metavariables \\($X\\)**: abstract away code\n-3. **'...' operator:** abstract away sequences\n-4. **Knows about code equivalences:** one pattern can match many equivalent variations on the code\n-5. **Less is more:** abstract away additional details\n+For advanced configuration use the `--config` flag. This flag automagically\n+handles a multitude of input types:\n \n-## Patterns\n+* `--config <file|folder|yaml_url|tarball_url|registy_name>`\n \n-Patterns are snippets of code with variables and other operators that will be parsed into an AST for that language and will be used to search for that pattern in code. See [docs/config/simple.md](docs/config/simple.md) for full documentation.\n+In the absense of this flag, a default configuration is loaded from `.sgrep.yml`\n+or multiple files matching `.sgrep/**/*.yml`.\n \n-### Metavariables\n+#### Operators\n \n-`$X`, `$FOO`, `$RETURNCODE` are all examples of metavariables. You can referance them later in your pattern and `sgrep` will ensure they match. **Metavariables can only contain uppercase ASCII characters**; `$x` and `$SOME_VALUE` are not valid metavariables.\n+Configuration files make use of two primary operators:\n+\n+* **Metavariables like $X, $LIST, or $METAVARIABLE.** Metavariable names can\n+only contain uppercase characters. Metavariables are used to track a variable\n+across a specific code scope.\n+* **The '...' (splat) operator.** The splat operator abstracts away sequences\n+so you don't have to sweat the details of a particular code pattern.\n+\n+Let's consider an example:\n+\n+```yaml\n+rules:\n+  - id: open-never-closed\n+    patterns:\n+      - pattern: $FD = open(...)\n+      - pattern-not-inside: |\n+          $FD = open(...)\n+          ...\n+          $FD.close()\n+    message: \"file object opened without corresponding close\"\n+    languages: [python]\n+    severity: ERROR\n+```\n \n-#### Operators\n+This rule looks for files that are opened but never closed. It accomplishes\n+this by looking for the `open(...)` pattern _and not_ a following `close()`\n+pattern. The `$FD` metavariable ensures that the same variable name is used\n+in the `open` and `close` calls. The splat operator allows for any arguments\n+to be passed to `open` and any sequence of code statements in-between the `open`\n+and `close` calls. We don't care how `open` is called or what happens up to\n+a `close` call, we just need to make sure `close` is called.\n \n-`...` is the primary \"match anything\" operator. It can match sequences of characters, arguments, or statements. See [docs/config/simple.md](docs/config/simple.md) for more details!\n+For a more complete introduction to the configuration format please see the\n+[advanced configuration documentation](docs/config/advanced.md).\n \n #### Equivalences\n \n-`sgrep` automatically searches for code that is semantically equivalent. For example, a pattern for\n+Equivalences are another key concept in `sgrep`. `sgrep` automatically searches\n+for code that is semantically equivalent. For example, the following patterns\n+are semantically equivalent\n \n-```text\n+```python\n subprocess.Popen(...)\n ```\n \n-will match\n-\n ```python\n-from subprocess import Popen as\n- sub_popen\n-result = sub_popen(\u201cls\u201d)\n+from subprocess import Popen as sub_popen\n+result = sub_popen(\"ls\")\n ```\n \n-and other semantically equivalent configurations.\n+For a full list of `sgrep` feature support by language see the\n+[language matrix](docs/matrix.md).\n+\n+### Registry\n \n-## Integrations\n+As mentioned above, you may also specify a registry name as configuration.\n+[r2c](https://r2c.dev) provides a [registry](https://github.com/returntocorp/sgrep-rules)\n+of configuration files. These rules have been tuned on thousands of repositories\n+using our [analysis platform](https://app.r2c.dev).\n \n-See [integrations.md](docs/integrations.md)\n+```\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --config r2c\n+```\n \n-## Bug Reports\n+## Resources\n \n-Reports are welcome! Please open an issue on this project.\n+* [r2c `sgrep` meetup slides](https://r2c.dev/sgrep-public2.pdf)\n+* [Simple configuration documentation](docs/config/simple.md)", "originalCommit": "741b6bcb7b710dec2296513bebcae06f3a68c0f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4MTYzNw==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406481637", "bodyText": "That makes sense to me. I'm happy to more prominently display them earlier. One question though: do you see value in keeping them separate? My thoughts were that the simple docs should be simple enough to be in the README, i.e. \"Configuration\" section above, then link out to advanced configuration. Does that make sense?", "author": "mschwager", "createdAt": "2020-04-09T21:15:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2ODM5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzMzgzNg==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406533836", "bodyText": "Yes, I like that a lot!", "author": "ievans", "createdAt": "2020-04-09T23:41:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2ODM5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3Njc1NQ==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406376755", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n          \n          \n            \n            | **Python** | **JavaScript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **TypeScript** | **PHP &nbsp; &nbsp;** |", "author": "pabloest", "createdAt": "2020-04-09T17:54:25Z", "path": "README.md", "diffHunk": "@@ -1,149 +1,194 @@\n # sgrep\n \n-[![r2c community slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=for-the-badge&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n+[![CircleCI](https://circleci.com/gh/returntocorp/sgrep.svg?style=svg)](https://circleci.com/gh/returntocorp/sgrep)\n+[![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n \n-[sgrep.live](https://sgrep.live/): try it now!\n+`sgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n+your codebase. It combines the convenience of `grep` with the correctness of\n+syntactical and semantic search. Quickly write rules so you can code with\n+confidence.\n \n-sgrep, for syntactical \\(and occasionnally semantic\\) grep, is a tool to help find bugs by specifying code patterns using a familiar syntax. The idea is to mix the convenience of grep with the correctness and precision of a compiler frontend.\n+Try it now: [https://sgrep.live](https://sgrep.live/)\n \n-## Quick Examples\n+## Overview\n \n-| **pattern** | **will match code like** |\n+Simple patterns for finding code in many languages:\n+\n+| **Pattern** | **Matches** |\n | :--- | :--- |\n | `$X == $X` | `if (node.id == node.id): ...` |\n-| `foo(kwd1=1, kwd2=2, ...)` | `foo(kwd2=2, kwd1=1, kwd3=3)` |\n-| `subprocess.Popen(...)` | `import subprocess as s; s.Popen(['foo'])` |\n-\n-\u2192 [see more examples in the sgrep-rules registry](https://github.com/returntocorp/sgrep-rules)\n+| `requests.get(..., verify=False, ...)` | `requests.get(url, timeout=3, verify=False)` |\n+| `os.system(...)` | `from os import system; system('echo sgrep')` |\n \n-## Supported Languages\n+Language support:\n \n-| **javascript** | **python** | **go** | **java** | **c** | **ruby** | **scala** |\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |", "originalCommit": "741b6bcb7b710dec2296513bebcae06f3a68c0f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3NzY0Ng==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406377646", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### OSX\n          \n          \n            \n            ### macOS", "author": "pabloest", "createdAt": "2020-04-09T17:55:53Z", "path": "README.md", "diffHunk": "@@ -1,149 +1,194 @@\n # sgrep\n \n-[![r2c community slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=for-the-badge&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n+[![CircleCI](https://circleci.com/gh/returntocorp/sgrep.svg?style=svg)](https://circleci.com/gh/returntocorp/sgrep)\n+[![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n \n-[sgrep.live](https://sgrep.live/): try it now!\n+`sgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n+your codebase. It combines the convenience of `grep` with the correctness of\n+syntactical and semantic search. Quickly write rules so you can code with\n+confidence.\n \n-sgrep, for syntactical \\(and occasionnally semantic\\) grep, is a tool to help find bugs by specifying code patterns using a familiar syntax. The idea is to mix the convenience of grep with the correctness and precision of a compiler frontend.\n+Try it now: [https://sgrep.live](https://sgrep.live/)\n \n-## Quick Examples\n+## Overview\n \n-| **pattern** | **will match code like** |\n+Simple patterns for finding code in many languages:\n+\n+| **Pattern** | **Matches** |\n | :--- | :--- |\n | `$X == $X` | `if (node.id == node.id): ...` |\n-| `foo(kwd1=1, kwd2=2, ...)` | `foo(kwd2=2, kwd1=1, kwd3=3)` |\n-| `subprocess.Popen(...)` | `import subprocess as s; s.Popen(['foo'])` |\n-\n-\u2192 [see more examples in the sgrep-rules registry](https://github.com/returntocorp/sgrep-rules)\n+| `requests.get(..., verify=False, ...)` | `requests.get(url, timeout=3, verify=False)` |\n+| `os.system(...)` | `from os import system; system('echo sgrep')` |\n \n-## Supported Languages\n+Language support:\n \n-| **javascript** | **python** | **go** | **java** | **c** | **ruby** | **scala** |\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n-| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | coming | coming |\n-\n-\u2192 see full language support details in [matrix.md](docs/matrix.md)\n-\n-## Meetups\n+| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | Coming... | Coming... |\n \n-Want to learn more about sgrep? Check out these [slides from the r2c February meetup](https://r2c.dev/sgrep-public2.pdf)\n+## Installing\n \n-## Installation\n+For the best experience, simply install `sgrep` with [Docker](https://docs.docker.com/install/):\n \n-Too lazy to install? Try out [sgrep.live](https://sgrep.live)\n-\n-### Docker\n-\n-`sgrep` is packaged within a [docker container](https://hub.docker.com/r/returntocorp/sgrep), making installation as easy as [installing docker](https://docs.docker.com/install/).\n+```\n+$ docker pull returntocorp/sgrep\n+```\n \n-### Mac \\(alpha\\)\n+`sgrep` binaries can also be installed on OSX and Ubuntu.\n \n-The brew install is WIP and will change significantly.\n+### OSX", "originalCommit": "741b6bcb7b710dec2296513bebcae06f3a68c0f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3ODU2Mg==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406378562", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Let's start with a simple example:\n          \n          \n            \n            Start with a simple example:\n          \n      \n    \n    \n  \n\nPrefer to avoid using first person plural in these docs because it can get rather messy.", "author": "pabloest", "createdAt": "2020-04-09T17:57:30Z", "path": "README.md", "diffHunk": "@@ -1,149 +1,194 @@\n # sgrep\n \n-[![r2c community slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=for-the-badge&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n+[![CircleCI](https://circleci.com/gh/returntocorp/sgrep.svg?style=svg)](https://circleci.com/gh/returntocorp/sgrep)\n+[![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n \n-[sgrep.live](https://sgrep.live/): try it now!\n+`sgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n+your codebase. It combines the convenience of `grep` with the correctness of\n+syntactical and semantic search. Quickly write rules so you can code with\n+confidence.\n \n-sgrep, for syntactical \\(and occasionnally semantic\\) grep, is a tool to help find bugs by specifying code patterns using a familiar syntax. The idea is to mix the convenience of grep with the correctness and precision of a compiler frontend.\n+Try it now: [https://sgrep.live](https://sgrep.live/)\n \n-## Quick Examples\n+## Overview\n \n-| **pattern** | **will match code like** |\n+Simple patterns for finding code in many languages:\n+\n+| **Pattern** | **Matches** |\n | :--- | :--- |\n | `$X == $X` | `if (node.id == node.id): ...` |\n-| `foo(kwd1=1, kwd2=2, ...)` | `foo(kwd2=2, kwd1=1, kwd3=3)` |\n-| `subprocess.Popen(...)` | `import subprocess as s; s.Popen(['foo'])` |\n-\n-\u2192 [see more examples in the sgrep-rules registry](https://github.com/returntocorp/sgrep-rules)\n+| `requests.get(..., verify=False, ...)` | `requests.get(url, timeout=3, verify=False)` |\n+| `os.system(...)` | `from os import system; system('echo sgrep')` |\n \n-## Supported Languages\n+Language support:\n \n-| **javascript** | **python** | **go** | **java** | **c** | **ruby** | **scala** |\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n-| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | coming | coming |\n-\n-\u2192 see full language support details in [matrix.md](docs/matrix.md)\n-\n-## Meetups\n+| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | Coming... | Coming... |\n \n-Want to learn more about sgrep? Check out these [slides from the r2c February meetup](https://r2c.dev/sgrep-public2.pdf)\n+## Installing\n \n-## Installation\n+For the best experience, simply install `sgrep` with [Docker](https://docs.docker.com/install/):\n \n-Too lazy to install? Try out [sgrep.live](https://sgrep.live)\n-\n-### Docker\n-\n-`sgrep` is packaged within a [docker container](https://hub.docker.com/r/returntocorp/sgrep), making installation as easy as [installing docker](https://docs.docker.com/install/).\n+```\n+$ docker pull returntocorp/sgrep\n+```\n \n-### Mac \\(alpha\\)\n+`sgrep` binaries can also be installed on OSX and Ubuntu.\n \n-The brew install is WIP and will change significantly.\n+### OSX\n \n-```bash\n-brew tap returntocorp/sgrep https://github.com/returntocorp/sgrep.git\n-brew install sgrep-r2c\n-# Due to a naming conflict, when installed via brew, it is named `sgrok`\n-sgrok --help\n+```\n+$ brew tap returntocorp/sgrep https://github.com/returntocorp/sgrep.git\n+$ brew install sgrep-r2c\n+$ sgrep-lint --help\n ```\n \n-## Quickstart\n-\n-```bash\n-docker pull returntocorp/sgrep\n-\n-cd /path/to/repo\n-# generate a template config file\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --generate-config\n+### Ubuntu\n \n-# look for findings\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep\n+```\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ sha256sum --check sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ tar xf sgrep-0.4.9-ubuntu-16.04.tgz\n+$ ./sgrep-lint-files/sgrep-lint --help\n ```\n \n-## Usage\n-\n-### Rule Development\n+## Using\n \n-To rapidly iterate on a single pattern, you can test on a single file or folder. For example,\n+Let's start with a simple example:", "originalCommit": "741b6bcb7b710dec2296513bebcae06f3a68c0f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4MDYzNQ==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406380635", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Installing\n          \n          \n            \n            ## Installation\n          \n      \n    \n    \n  \n\nI suggest being consistent in the section titles using nouns instead of gerunds.", "author": "pabloest", "createdAt": "2020-04-09T18:01:12Z", "path": "README.md", "diffHunk": "@@ -1,149 +1,194 @@\n # sgrep\n \n-[![r2c community slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=for-the-badge&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n+[![CircleCI](https://circleci.com/gh/returntocorp/sgrep.svg?style=svg)](https://circleci.com/gh/returntocorp/sgrep)\n+[![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n \n-[sgrep.live](https://sgrep.live/): try it now!\n+`sgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n+your codebase. It combines the convenience of `grep` with the correctness of\n+syntactical and semantic search. Quickly write rules so you can code with\n+confidence.\n \n-sgrep, for syntactical \\(and occasionnally semantic\\) grep, is a tool to help find bugs by specifying code patterns using a familiar syntax. The idea is to mix the convenience of grep with the correctness and precision of a compiler frontend.\n+Try it now: [https://sgrep.live](https://sgrep.live/)\n \n-## Quick Examples\n+## Overview\n \n-| **pattern** | **will match code like** |\n+Simple patterns for finding code in many languages:\n+\n+| **Pattern** | **Matches** |\n | :--- | :--- |\n | `$X == $X` | `if (node.id == node.id): ...` |\n-| `foo(kwd1=1, kwd2=2, ...)` | `foo(kwd2=2, kwd1=1, kwd3=3)` |\n-| `subprocess.Popen(...)` | `import subprocess as s; s.Popen(['foo'])` |\n-\n-\u2192 [see more examples in the sgrep-rules registry](https://github.com/returntocorp/sgrep-rules)\n+| `requests.get(..., verify=False, ...)` | `requests.get(url, timeout=3, verify=False)` |\n+| `os.system(...)` | `from os import system; system('echo sgrep')` |\n \n-## Supported Languages\n+Language support:\n \n-| **javascript** | **python** | **go** | **java** | **c** | **ruby** | **scala** |\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n-| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | coming | coming |\n-\n-\u2192 see full language support details in [matrix.md](docs/matrix.md)\n-\n-## Meetups\n+| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | Coming... | Coming... |\n \n-Want to learn more about sgrep? Check out these [slides from the r2c February meetup](https://r2c.dev/sgrep-public2.pdf)\n+## Installing", "originalCommit": "741b6bcb7b710dec2296513bebcae06f3a68c0f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4MDc2Ng==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406380766", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Using\n          \n          \n            \n            ## Usage", "author": "pabloest", "createdAt": "2020-04-09T18:01:27Z", "path": "README.md", "diffHunk": "@@ -1,149 +1,194 @@\n # sgrep\n \n-[![r2c community slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=for-the-badge&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n+[![CircleCI](https://circleci.com/gh/returntocorp/sgrep.svg?style=svg)](https://circleci.com/gh/returntocorp/sgrep)\n+[![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n \n-[sgrep.live](https://sgrep.live/): try it now!\n+`sgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n+your codebase. It combines the convenience of `grep` with the correctness of\n+syntactical and semantic search. Quickly write rules so you can code with\n+confidence.\n \n-sgrep, for syntactical \\(and occasionnally semantic\\) grep, is a tool to help find bugs by specifying code patterns using a familiar syntax. The idea is to mix the convenience of grep with the correctness and precision of a compiler frontend.\n+Try it now: [https://sgrep.live](https://sgrep.live/)\n \n-## Quick Examples\n+## Overview\n \n-| **pattern** | **will match code like** |\n+Simple patterns for finding code in many languages:\n+\n+| **Pattern** | **Matches** |\n | :--- | :--- |\n | `$X == $X` | `if (node.id == node.id): ...` |\n-| `foo(kwd1=1, kwd2=2, ...)` | `foo(kwd2=2, kwd1=1, kwd3=3)` |\n-| `subprocess.Popen(...)` | `import subprocess as s; s.Popen(['foo'])` |\n-\n-\u2192 [see more examples in the sgrep-rules registry](https://github.com/returntocorp/sgrep-rules)\n+| `requests.get(..., verify=False, ...)` | `requests.get(url, timeout=3, verify=False)` |\n+| `os.system(...)` | `from os import system; system('echo sgrep')` |\n \n-## Supported Languages\n+Language support:\n \n-| **javascript** | **python** | **go** | **java** | **c** | **ruby** | **scala** |\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n-| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | coming | coming |\n-\n-\u2192 see full language support details in [matrix.md](docs/matrix.md)\n-\n-## Meetups\n+| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | Coming... | Coming... |\n \n-Want to learn more about sgrep? Check out these [slides from the r2c February meetup](https://r2c.dev/sgrep-public2.pdf)\n+## Installing\n \n-## Installation\n+For the best experience, simply install `sgrep` with [Docker](https://docs.docker.com/install/):\n \n-Too lazy to install? Try out [sgrep.live](https://sgrep.live)\n-\n-### Docker\n-\n-`sgrep` is packaged within a [docker container](https://hub.docker.com/r/returntocorp/sgrep), making installation as easy as [installing docker](https://docs.docker.com/install/).\n+```\n+$ docker pull returntocorp/sgrep\n+```\n \n-### Mac \\(alpha\\)\n+`sgrep` binaries can also be installed on OSX and Ubuntu.\n \n-The brew install is WIP and will change significantly.\n+### OSX\n \n-```bash\n-brew tap returntocorp/sgrep https://github.com/returntocorp/sgrep.git\n-brew install sgrep-r2c\n-# Due to a naming conflict, when installed via brew, it is named `sgrok`\n-sgrok --help\n+```\n+$ brew tap returntocorp/sgrep https://github.com/returntocorp/sgrep.git\n+$ brew install sgrep-r2c\n+$ sgrep-lint --help\n ```\n \n-## Quickstart\n-\n-```bash\n-docker pull returntocorp/sgrep\n-\n-cd /path/to/repo\n-# generate a template config file\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --generate-config\n+### Ubuntu\n \n-# look for findings\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep\n+```\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ sha256sum --check sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ tar xf sgrep-0.4.9-ubuntu-16.04.tgz\n+$ ./sgrep-lint-files/sgrep-lint --help\n ```\n \n-## Usage\n-\n-### Rule Development\n+## Using", "originalCommit": "741b6bcb7b710dec2296513bebcae06f3a68c0f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4MDg5Ng==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406380896", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Configuring\n          \n          \n            \n            ## Configuration", "author": "pabloest", "createdAt": "2020-04-09T18:01:42Z", "path": "README.md", "diffHunk": "@@ -1,149 +1,194 @@\n # sgrep\n \n-[![r2c community slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=for-the-badge&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n+[![CircleCI](https://circleci.com/gh/returntocorp/sgrep.svg?style=svg)](https://circleci.com/gh/returntocorp/sgrep)\n+[![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n \n-[sgrep.live](https://sgrep.live/): try it now!\n+`sgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n+your codebase. It combines the convenience of `grep` with the correctness of\n+syntactical and semantic search. Quickly write rules so you can code with\n+confidence.\n \n-sgrep, for syntactical \\(and occasionnally semantic\\) grep, is a tool to help find bugs by specifying code patterns using a familiar syntax. The idea is to mix the convenience of grep with the correctness and precision of a compiler frontend.\n+Try it now: [https://sgrep.live](https://sgrep.live/)\n \n-## Quick Examples\n+## Overview\n \n-| **pattern** | **will match code like** |\n+Simple patterns for finding code in many languages:\n+\n+| **Pattern** | **Matches** |\n | :--- | :--- |\n | `$X == $X` | `if (node.id == node.id): ...` |\n-| `foo(kwd1=1, kwd2=2, ...)` | `foo(kwd2=2, kwd1=1, kwd3=3)` |\n-| `subprocess.Popen(...)` | `import subprocess as s; s.Popen(['foo'])` |\n-\n-\u2192 [see more examples in the sgrep-rules registry](https://github.com/returntocorp/sgrep-rules)\n+| `requests.get(..., verify=False, ...)` | `requests.get(url, timeout=3, verify=False)` |\n+| `os.system(...)` | `from os import system; system('echo sgrep')` |\n \n-## Supported Languages\n+Language support:\n \n-| **javascript** | **python** | **go** | **java** | **c** | **ruby** | **scala** |\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n-| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | coming | coming |\n-\n-\u2192 see full language support details in [matrix.md](docs/matrix.md)\n-\n-## Meetups\n+| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | Coming... | Coming... |\n \n-Want to learn more about sgrep? Check out these [slides from the r2c February meetup](https://r2c.dev/sgrep-public2.pdf)\n+## Installing\n \n-## Installation\n+For the best experience, simply install `sgrep` with [Docker](https://docs.docker.com/install/):\n \n-Too lazy to install? Try out [sgrep.live](https://sgrep.live)\n-\n-### Docker\n-\n-`sgrep` is packaged within a [docker container](https://hub.docker.com/r/returntocorp/sgrep), making installation as easy as [installing docker](https://docs.docker.com/install/).\n+```\n+$ docker pull returntocorp/sgrep\n+```\n \n-### Mac \\(alpha\\)\n+`sgrep` binaries can also be installed on OSX and Ubuntu.\n \n-The brew install is WIP and will change significantly.\n+### OSX\n \n-```bash\n-brew tap returntocorp/sgrep https://github.com/returntocorp/sgrep.git\n-brew install sgrep-r2c\n-# Due to a naming conflict, when installed via brew, it is named `sgrok`\n-sgrok --help\n+```\n+$ brew tap returntocorp/sgrep https://github.com/returntocorp/sgrep.git\n+$ brew install sgrep-r2c\n+$ sgrep-lint --help\n ```\n \n-## Quickstart\n-\n-```bash\n-docker pull returntocorp/sgrep\n-\n-cd /path/to/repo\n-# generate a template config file\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --generate-config\n+### Ubuntu\n \n-# look for findings\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep\n+```\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ sha256sum --check sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ tar xf sgrep-0.4.9-ubuntu-16.04.tgz\n+$ ./sgrep-lint-files/sgrep-lint --help\n ```\n \n-## Usage\n-\n-### Rule Development\n+## Using\n \n-To rapidly iterate on a single pattern, you can test on a single file or folder. For example,\n+Let's start with a simple example:\n \n-```bash\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep -l python -e '$X == $X' path/to/file.py\n+```\n+$ cat << EOF > test.py\n+a = 1\n+b = 2\n+if a == a:  # oops, supposed to be a == b\n+    print('sgrep test')\n+EOF\n ```\n \n-Here, `sgrep` will search the target with the pattern `$X == $X` \\(which is a stupid equals check\\) and print the results to `stdout`. This also works for directories and will skip the file if parsing fails. You can specifiy the language of the pattern with `--lang javascript` for example.\n+```\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --lang python --pattern '$X == $X' test.py\n+test.py\n+3:if a == a:  # oops, supposed to be a == b\n+```\n \n-To see more options\n+From here you can use our rules to search for issues in your codebase:\n \n-```bash\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --help\n+```\n+$ cd /path/to/code\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --config https://r2c.dev/default-r2c-checks\n ```\n \n-### Config Files\n-\n-#### Format\n+You can also [create your own rules](docs/config/advanced.md):\n \n-See [config/advanced.md](docs/config/advanced.md) for example configuration files and details on the syntax.\n+```\n+$ cd /path/to/code\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --generate-config\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep\n+```\n \n-#### sgrep Registry\n+## Configuring", "originalCommit": "741b6bcb7b710dec2296513bebcae06f3a68c0f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4MjE4Nw==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406382187", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * [r2c `sgrep` meetup slides](https://r2c.dev/sgrep-public2.pdf)\n          \n          \n            \n            * [r2c `sgrep` meetup slides](https://web-assets.r2c.dev/sgrep/r2c-sgrep-meetup-feb-2020.pdf)", "author": "pabloest", "createdAt": "2020-04-09T18:04:00Z", "path": "README.md", "diffHunk": "@@ -1,149 +1,194 @@\n # sgrep\n \n-[![r2c community slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=for-the-badge&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n+[![CircleCI](https://circleci.com/gh/returntocorp/sgrep.svg?style=svg)](https://circleci.com/gh/returntocorp/sgrep)\n+[![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n \n-[sgrep.live](https://sgrep.live/): try it now!\n+`sgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n+your codebase. It combines the convenience of `grep` with the correctness of\n+syntactical and semantic search. Quickly write rules so you can code with\n+confidence.\n \n-sgrep, for syntactical \\(and occasionnally semantic\\) grep, is a tool to help find bugs by specifying code patterns using a familiar syntax. The idea is to mix the convenience of grep with the correctness and precision of a compiler frontend.\n+Try it now: [https://sgrep.live](https://sgrep.live/)\n \n-## Quick Examples\n+## Overview\n \n-| **pattern** | **will match code like** |\n+Simple patterns for finding code in many languages:\n+\n+| **Pattern** | **Matches** |\n | :--- | :--- |\n | `$X == $X` | `if (node.id == node.id): ...` |\n-| `foo(kwd1=1, kwd2=2, ...)` | `foo(kwd2=2, kwd1=1, kwd3=3)` |\n-| `subprocess.Popen(...)` | `import subprocess as s; s.Popen(['foo'])` |\n-\n-\u2192 [see more examples in the sgrep-rules registry](https://github.com/returntocorp/sgrep-rules)\n+| `requests.get(..., verify=False, ...)` | `requests.get(url, timeout=3, verify=False)` |\n+| `os.system(...)` | `from os import system; system('echo sgrep')` |\n \n-## Supported Languages\n+Language support:\n \n-| **javascript** | **python** | **go** | **java** | **c** | **ruby** | **scala** |\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n-| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | coming | coming |\n-\n-\u2192 see full language support details in [matrix.md](docs/matrix.md)\n-\n-## Meetups\n+| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | Coming... | Coming... |\n \n-Want to learn more about sgrep? Check out these [slides from the r2c February meetup](https://r2c.dev/sgrep-public2.pdf)\n+## Installing\n \n-## Installation\n+For the best experience, simply install `sgrep` with [Docker](https://docs.docker.com/install/):\n \n-Too lazy to install? Try out [sgrep.live](https://sgrep.live)\n-\n-### Docker\n-\n-`sgrep` is packaged within a [docker container](https://hub.docker.com/r/returntocorp/sgrep), making installation as easy as [installing docker](https://docs.docker.com/install/).\n+```\n+$ docker pull returntocorp/sgrep\n+```\n \n-### Mac \\(alpha\\)\n+`sgrep` binaries can also be installed on OSX and Ubuntu.\n \n-The brew install is WIP and will change significantly.\n+### OSX\n \n-```bash\n-brew tap returntocorp/sgrep https://github.com/returntocorp/sgrep.git\n-brew install sgrep-r2c\n-# Due to a naming conflict, when installed via brew, it is named `sgrok`\n-sgrok --help\n+```\n+$ brew tap returntocorp/sgrep https://github.com/returntocorp/sgrep.git\n+$ brew install sgrep-r2c\n+$ sgrep-lint --help\n ```\n \n-## Quickstart\n-\n-```bash\n-docker pull returntocorp/sgrep\n-\n-cd /path/to/repo\n-# generate a template config file\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --generate-config\n+### Ubuntu\n \n-# look for findings\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep\n+```\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ sha256sum --check sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ tar xf sgrep-0.4.9-ubuntu-16.04.tgz\n+$ ./sgrep-lint-files/sgrep-lint --help\n ```\n \n-## Usage\n-\n-### Rule Development\n+## Using\n \n-To rapidly iterate on a single pattern, you can test on a single file or folder. For example,\n+Let's start with a simple example:\n \n-```bash\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep -l python -e '$X == $X' path/to/file.py\n+```\n+$ cat << EOF > test.py\n+a = 1\n+b = 2\n+if a == a:  # oops, supposed to be a == b\n+    print('sgrep test')\n+EOF\n ```\n \n-Here, `sgrep` will search the target with the pattern `$X == $X` \\(which is a stupid equals check\\) and print the results to `stdout`. This also works for directories and will skip the file if parsing fails. You can specifiy the language of the pattern with `--lang javascript` for example.\n+```\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --lang python --pattern '$X == $X' test.py\n+test.py\n+3:if a == a:  # oops, supposed to be a == b\n+```\n \n-To see more options\n+From here you can use our rules to search for issues in your codebase:\n \n-```bash\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --help\n+```\n+$ cd /path/to/code\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --config https://r2c.dev/default-r2c-checks\n ```\n \n-### Config Files\n-\n-#### Format\n+You can also [create your own rules](docs/config/advanced.md):\n \n-See [config/advanced.md](docs/config/advanced.md) for example configuration files and details on the syntax.\n+```\n+$ cd /path/to/code\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --generate-config\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep\n+```\n \n-#### sgrep Registry\n+## Configuring\n \n-[r2c](https://r2c.dev) provides a [registry](https://github.com/returntocorp/sgrep-rules) of config files tuned using our [analysis platform](https://app.r2c.dev) on thousands of repositories. To use:\n+For simple patterns use the `--lang` and `--pattern` flags. This mode of\n+operation is useful for quickly iterating on a pattern on a single file or\n+folder:\n \n-```bash\n-sgrep --config r2c\n+```\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --lang javascript --pattern 'eval(...)' path/to/file.js\n ```\n \n-### Default\n-\n-Default configs are loaded from `.sgrep.yml` or multiple files matching `.sgrep/**/*.yml` and can be overridden by using `--config <file|folder|yaml_url|tarball_url|registy_name>`\n+To fine-tune your searching, specify the `--help` flag:\n \n-## Design\n+```\n+$ docker run --rm returntocorp/sgrep --help\n+```\n \n-Sgrep has a design philosophy that emphasizes simplicity and a single pattern being as expressive as possible:\n+### Configuration Files\n \n-1. **Use concrete code syntax:** easy to learn\n-2. **Metavariables \\($X\\)**: abstract away code\n-3. **'...' operator:** abstract away sequences\n-4. **Knows about code equivalences:** one pattern can match many equivalent variations on the code\n-5. **Less is more:** abstract away additional details\n+For advanced configuration use the `--config` flag. This flag automagically\n+handles a multitude of input types:\n \n-## Patterns\n+* `--config <file|folder|yaml_url|tarball_url|registy_name>`\n \n-Patterns are snippets of code with variables and other operators that will be parsed into an AST for that language and will be used to search for that pattern in code. See [docs/config/simple.md](docs/config/simple.md) for full documentation.\n+In the absense of this flag, a default configuration is loaded from `.sgrep.yml`\n+or multiple files matching `.sgrep/**/*.yml`.\n \n-### Metavariables\n+#### Operators\n \n-`$X`, `$FOO`, `$RETURNCODE` are all examples of metavariables. You can referance them later in your pattern and `sgrep` will ensure they match. **Metavariables can only contain uppercase ASCII characters**; `$x` and `$SOME_VALUE` are not valid metavariables.\n+Configuration files make use of two primary operators:\n+\n+* **Metavariables like $X, $LIST, or $METAVARIABLE.** Metavariable names can\n+only contain uppercase characters. Metavariables are used to track a variable\n+across a specific code scope.\n+* **The '...' (splat) operator.** The splat operator abstracts away sequences\n+so you don't have to sweat the details of a particular code pattern.\n+\n+Let's consider an example:\n+\n+```yaml\n+rules:\n+  - id: open-never-closed\n+    patterns:\n+      - pattern: $FD = open(...)\n+      - pattern-not-inside: |\n+          $FD = open(...)\n+          ...\n+          $FD.close()\n+    message: \"file object opened without corresponding close\"\n+    languages: [python]\n+    severity: ERROR\n+```\n \n-#### Operators\n+This rule looks for files that are opened but never closed. It accomplishes\n+this by looking for the `open(...)` pattern _and not_ a following `close()`\n+pattern. The `$FD` metavariable ensures that the same variable name is used\n+in the `open` and `close` calls. The splat operator allows for any arguments\n+to be passed to `open` and any sequence of code statements in-between the `open`\n+and `close` calls. We don't care how `open` is called or what happens up to\n+a `close` call, we just need to make sure `close` is called.\n \n-`...` is the primary \"match anything\" operator. It can match sequences of characters, arguments, or statements. See [docs/config/simple.md](docs/config/simple.md) for more details!\n+For a more complete introduction to the configuration format please see the\n+[advanced configuration documentation](docs/config/advanced.md).\n \n #### Equivalences\n \n-`sgrep` automatically searches for code that is semantically equivalent. For example, a pattern for\n+Equivalences are another key concept in `sgrep`. `sgrep` automatically searches\n+for code that is semantically equivalent. For example, the following patterns\n+are semantically equivalent\n \n-```text\n+```python\n subprocess.Popen(...)\n ```\n \n-will match\n-\n ```python\n-from subprocess import Popen as\n- sub_popen\n-result = sub_popen(\u201cls\u201d)\n+from subprocess import Popen as sub_popen\n+result = sub_popen(\"ls\")\n ```\n \n-and other semantically equivalent configurations.\n+For a full list of `sgrep` feature support by language see the\n+[language matrix](docs/matrix.md).\n+\n+### Registry\n \n-## Integrations\n+As mentioned above, you may also specify a registry name as configuration.\n+[r2c](https://r2c.dev) provides a [registry](https://github.com/returntocorp/sgrep-rules)\n+of configuration files. These rules have been tuned on thousands of repositories\n+using our [analysis platform](https://app.r2c.dev).\n \n-See [integrations.md](docs/integrations.md)\n+```\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --config r2c\n+```\n \n-## Bug Reports\n+## Resources\n \n-Reports are welcome! Please open an issue on this project.\n+* [r2c `sgrep` meetup slides](https://r2c.dev/sgrep-public2.pdf)", "originalCommit": "741b6bcb7b710dec2296513bebcae06f3a68c0f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4MjMzMw==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406382333", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Contributing\n          \n          \n            \n            ## Contribution", "author": "pabloest", "createdAt": "2020-04-09T18:04:15Z", "path": "README.md", "diffHunk": "@@ -1,149 +1,194 @@\n # sgrep\n \n-[![r2c community slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=for-the-badge&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n+[![CircleCI](https://circleci.com/gh/returntocorp/sgrep.svg?style=svg)](https://circleci.com/gh/returntocorp/sgrep)\n+[![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n \n-[sgrep.live](https://sgrep.live/): try it now!\n+`sgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n+your codebase. It combines the convenience of `grep` with the correctness of\n+syntactical and semantic search. Quickly write rules so you can code with\n+confidence.\n \n-sgrep, for syntactical \\(and occasionnally semantic\\) grep, is a tool to help find bugs by specifying code patterns using a familiar syntax. The idea is to mix the convenience of grep with the correctness and precision of a compiler frontend.\n+Try it now: [https://sgrep.live](https://sgrep.live/)\n \n-## Quick Examples\n+## Overview\n \n-| **pattern** | **will match code like** |\n+Simple patterns for finding code in many languages:\n+\n+| **Pattern** | **Matches** |\n | :--- | :--- |\n | `$X == $X` | `if (node.id == node.id): ...` |\n-| `foo(kwd1=1, kwd2=2, ...)` | `foo(kwd2=2, kwd1=1, kwd3=3)` |\n-| `subprocess.Popen(...)` | `import subprocess as s; s.Popen(['foo'])` |\n-\n-\u2192 [see more examples in the sgrep-rules registry](https://github.com/returntocorp/sgrep-rules)\n+| `requests.get(..., verify=False, ...)` | `requests.get(url, timeout=3, verify=False)` |\n+| `os.system(...)` | `from os import system; system('echo sgrep')` |\n \n-## Supported Languages\n+Language support:\n \n-| **javascript** | **python** | **go** | **java** | **c** | **ruby** | **scala** |\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n-| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | coming | coming |\n-\n-\u2192 see full language support details in [matrix.md](docs/matrix.md)\n-\n-## Meetups\n+| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | Coming... | Coming... |\n \n-Want to learn more about sgrep? Check out these [slides from the r2c February meetup](https://r2c.dev/sgrep-public2.pdf)\n+## Installing\n \n-## Installation\n+For the best experience, simply install `sgrep` with [Docker](https://docs.docker.com/install/):\n \n-Too lazy to install? Try out [sgrep.live](https://sgrep.live)\n-\n-### Docker\n-\n-`sgrep` is packaged within a [docker container](https://hub.docker.com/r/returntocorp/sgrep), making installation as easy as [installing docker](https://docs.docker.com/install/).\n+```\n+$ docker pull returntocorp/sgrep\n+```\n \n-### Mac \\(alpha\\)\n+`sgrep` binaries can also be installed on OSX and Ubuntu.\n \n-The brew install is WIP and will change significantly.\n+### OSX\n \n-```bash\n-brew tap returntocorp/sgrep https://github.com/returntocorp/sgrep.git\n-brew install sgrep-r2c\n-# Due to a naming conflict, when installed via brew, it is named `sgrok`\n-sgrok --help\n+```\n+$ brew tap returntocorp/sgrep https://github.com/returntocorp/sgrep.git\n+$ brew install sgrep-r2c\n+$ sgrep-lint --help\n ```\n \n-## Quickstart\n-\n-```bash\n-docker pull returntocorp/sgrep\n-\n-cd /path/to/repo\n-# generate a template config file\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --generate-config\n+### Ubuntu\n \n-# look for findings\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep\n+```\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ sha256sum --check sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ tar xf sgrep-0.4.9-ubuntu-16.04.tgz\n+$ ./sgrep-lint-files/sgrep-lint --help\n ```\n \n-## Usage\n-\n-### Rule Development\n+## Using\n \n-To rapidly iterate on a single pattern, you can test on a single file or folder. For example,\n+Let's start with a simple example:\n \n-```bash\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep -l python -e '$X == $X' path/to/file.py\n+```\n+$ cat << EOF > test.py\n+a = 1\n+b = 2\n+if a == a:  # oops, supposed to be a == b\n+    print('sgrep test')\n+EOF\n ```\n \n-Here, `sgrep` will search the target with the pattern `$X == $X` \\(which is a stupid equals check\\) and print the results to `stdout`. This also works for directories and will skip the file if parsing fails. You can specifiy the language of the pattern with `--lang javascript` for example.\n+```\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --lang python --pattern '$X == $X' test.py\n+test.py\n+3:if a == a:  # oops, supposed to be a == b\n+```\n \n-To see more options\n+From here you can use our rules to search for issues in your codebase:\n \n-```bash\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --help\n+```\n+$ cd /path/to/code\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --config https://r2c.dev/default-r2c-checks\n ```\n \n-### Config Files\n-\n-#### Format\n+You can also [create your own rules](docs/config/advanced.md):\n \n-See [config/advanced.md](docs/config/advanced.md) for example configuration files and details on the syntax.\n+```\n+$ cd /path/to/code\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --generate-config\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep\n+```\n \n-#### sgrep Registry\n+## Configuring\n \n-[r2c](https://r2c.dev) provides a [registry](https://github.com/returntocorp/sgrep-rules) of config files tuned using our [analysis platform](https://app.r2c.dev) on thousands of repositories. To use:\n+For simple patterns use the `--lang` and `--pattern` flags. This mode of\n+operation is useful for quickly iterating on a pattern on a single file or\n+folder:\n \n-```bash\n-sgrep --config r2c\n+```\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --lang javascript --pattern 'eval(...)' path/to/file.js\n ```\n \n-### Default\n-\n-Default configs are loaded from `.sgrep.yml` or multiple files matching `.sgrep/**/*.yml` and can be overridden by using `--config <file|folder|yaml_url|tarball_url|registy_name>`\n+To fine-tune your searching, specify the `--help` flag:\n \n-## Design\n+```\n+$ docker run --rm returntocorp/sgrep --help\n+```\n \n-Sgrep has a design philosophy that emphasizes simplicity and a single pattern being as expressive as possible:\n+### Configuration Files\n \n-1. **Use concrete code syntax:** easy to learn\n-2. **Metavariables \\($X\\)**: abstract away code\n-3. **'...' operator:** abstract away sequences\n-4. **Knows about code equivalences:** one pattern can match many equivalent variations on the code\n-5. **Less is more:** abstract away additional details\n+For advanced configuration use the `--config` flag. This flag automagically\n+handles a multitude of input types:\n \n-## Patterns\n+* `--config <file|folder|yaml_url|tarball_url|registy_name>`\n \n-Patterns are snippets of code with variables and other operators that will be parsed into an AST for that language and will be used to search for that pattern in code. See [docs/config/simple.md](docs/config/simple.md) for full documentation.\n+In the absense of this flag, a default configuration is loaded from `.sgrep.yml`\n+or multiple files matching `.sgrep/**/*.yml`.\n \n-### Metavariables\n+#### Operators\n \n-`$X`, `$FOO`, `$RETURNCODE` are all examples of metavariables. You can referance them later in your pattern and `sgrep` will ensure they match. **Metavariables can only contain uppercase ASCII characters**; `$x` and `$SOME_VALUE` are not valid metavariables.\n+Configuration files make use of two primary operators:\n+\n+* **Metavariables like $X, $LIST, or $METAVARIABLE.** Metavariable names can\n+only contain uppercase characters. Metavariables are used to track a variable\n+across a specific code scope.\n+* **The '...' (splat) operator.** The splat operator abstracts away sequences\n+so you don't have to sweat the details of a particular code pattern.\n+\n+Let's consider an example:\n+\n+```yaml\n+rules:\n+  - id: open-never-closed\n+    patterns:\n+      - pattern: $FD = open(...)\n+      - pattern-not-inside: |\n+          $FD = open(...)\n+          ...\n+          $FD.close()\n+    message: \"file object opened without corresponding close\"\n+    languages: [python]\n+    severity: ERROR\n+```\n \n-#### Operators\n+This rule looks for files that are opened but never closed. It accomplishes\n+this by looking for the `open(...)` pattern _and not_ a following `close()`\n+pattern. The `$FD` metavariable ensures that the same variable name is used\n+in the `open` and `close` calls. The splat operator allows for any arguments\n+to be passed to `open` and any sequence of code statements in-between the `open`\n+and `close` calls. We don't care how `open` is called or what happens up to\n+a `close` call, we just need to make sure `close` is called.\n \n-`...` is the primary \"match anything\" operator. It can match sequences of characters, arguments, or statements. See [docs/config/simple.md](docs/config/simple.md) for more details!\n+For a more complete introduction to the configuration format please see the\n+[advanced configuration documentation](docs/config/advanced.md).\n \n #### Equivalences\n \n-`sgrep` automatically searches for code that is semantically equivalent. For example, a pattern for\n+Equivalences are another key concept in `sgrep`. `sgrep` automatically searches\n+for code that is semantically equivalent. For example, the following patterns\n+are semantically equivalent\n \n-```text\n+```python\n subprocess.Popen(...)\n ```\n \n-will match\n-\n ```python\n-from subprocess import Popen as\n- sub_popen\n-result = sub_popen(\u201cls\u201d)\n+from subprocess import Popen as sub_popen\n+result = sub_popen(\"ls\")\n ```\n \n-and other semantically equivalent configurations.\n+For a full list of `sgrep` feature support by language see the\n+[language matrix](docs/matrix.md).\n+\n+### Registry\n \n-## Integrations\n+As mentioned above, you may also specify a registry name as configuration.\n+[r2c](https://r2c.dev) provides a [registry](https://github.com/returntocorp/sgrep-rules)\n+of configuration files. These rules have been tuned on thousands of repositories\n+using our [analysis platform](https://app.r2c.dev).\n \n-See [integrations.md](docs/integrations.md)\n+```\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --config r2c\n+```\n \n-## Bug Reports\n+## Resources\n \n-Reports are welcome! Please open an issue on this project.\n+* [r2c `sgrep` meetup slides](https://r2c.dev/sgrep-public2.pdf)\n+* [Simple configuration documentation](docs/config/simple.md)\n+* [Advanced configuration documentation](docs/config/advanced.md)\n+* [Integrations](docs/integrations.md)\n+* [Development](docs/development.md)\n+* [Bug reports](https://github.com/returntocorp/sgrep/issues)\n \n-## Contributions\n+## Contributing", "originalCommit": "741b6bcb7b710dec2296513bebcae06f3a68c0f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "51b7ba7a186fd990b4968f2c6acb04f32890013c", "url": "https://github.com/returntocorp/semgrep/commit/51b7ba7a186fd990b4968f2c6acb04f32890013c", "message": "Reformat README\n\nThis includes many different changes that attempt to provide a concise\nexplanation of the tool and guide a new user through their first usage.\nWhen more information is needed in any specific instance we can link out\nto more detailed documentation.", "committedDate": "2020-04-10T15:20:31Z", "type": "commit"}, {"oid": "a0ec86a935610bea2309260034b8b1ac31fe1d61", "url": "https://github.com/returntocorp/semgrep/commit/a0ec86a935610bea2309260034b8b1ac31fe1d61", "message": "Update README.md\n\nCo-Authored-By: Pablo Estrada <pablo@r2c.dev>", "committedDate": "2020-04-10T15:20:31Z", "type": "commit"}, {"oid": "19ff50cc437e6cd2aaa8f83c9ea341c639878fab", "url": "https://github.com/returntocorp/semgrep/commit/19ff50cc437e6cd2aaa8f83c9ea341c639878fab", "message": "Update README.md\n\nCo-Authored-By: Pablo Estrada <pablo@r2c.dev>", "committedDate": "2020-04-10T15:21:12Z", "type": "commit"}, {"oid": "a65d8daad5b2de71e6cd68bfb180915e99202877", "url": "https://github.com/returntocorp/semgrep/commit/a65d8daad5b2de71e6cd68bfb180915e99202877", "message": "Update README.md\n\nCo-Authored-By: Pablo Estrada <pablo@r2c.dev>", "committedDate": "2020-04-10T15:21:12Z", "type": "commit"}, {"oid": "267e66680a24eb9ff888f0f12ce241b385786663", "url": "https://github.com/returntocorp/semgrep/commit/267e66680a24eb9ff888f0f12ce241b385786663", "message": "Update README.md\n\nCo-Authored-By: Pablo Estrada <pablo@r2c.dev>", "committedDate": "2020-04-10T15:21:12Z", "type": "commit"}, {"oid": "578608cfe707627edfb697bfbe46c3a2e0fc8685", "url": "https://github.com/returntocorp/semgrep/commit/578608cfe707627edfb697bfbe46c3a2e0fc8685", "message": "Update README.md\n\nCo-Authored-By: Pablo Estrada <pablo@r2c.dev>", "committedDate": "2020-04-10T15:21:12Z", "type": "commit"}, {"oid": "d190834216632de50874be3254db4eb4a0b72bcb", "url": "https://github.com/returntocorp/semgrep/commit/d190834216632de50874be3254db4eb4a0b72bcb", "message": "Update README.md\n\nCo-Authored-By: Pablo Estrada <pablo@r2c.dev>", "committedDate": "2020-04-10T15:21:12Z", "type": "commit"}, {"oid": "d677cab21f179540907d39f023d31ae96d3ac994", "url": "https://github.com/returntocorp/semgrep/commit/d677cab21f179540907d39f023d31ae96d3ac994", "message": "Update README.md\n\nCo-Authored-By: Pablo Estrada <pablo@r2c.dev>", "committedDate": "2020-04-10T15:21:12Z", "type": "commit"}, {"oid": "3a5934fd67ec0ad6ca1992410e791f22ec3e3bc3", "url": "https://github.com/returntocorp/semgrep/commit/3a5934fd67ec0ad6ca1992410e791f22ec3e3bc3", "message": "Address PR feedback", "committedDate": "2020-04-10T15:22:08Z", "type": "commit"}, {"oid": "3a5934fd67ec0ad6ca1992410e791f22ec3e3bc3", "url": "https://github.com/returntocorp/semgrep/commit/3a5934fd67ec0ad6ca1992410e791f22ec3e3bc3", "message": "Address PR feedback", "committedDate": "2020-04-10T15:22:08Z", "type": "forcePushed"}, {"oid": "68401b35cf19e794f797c17d79ccc5634626e6f9", "url": "https://github.com/returntocorp/semgrep/commit/68401b35cf19e794f797c17d79ccc5634626e6f9", "message": "Add invalid metavariable example", "committedDate": "2020-04-10T15:53:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxOTg5Mg==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406919892", "bodyText": "IMO we should not be recommending this path (in the README) until it is as easy as apt-get install semgrep @DrewDennison  thoughts?", "author": "ievans", "createdAt": "2020-04-10T20:03:25Z", "path": "README.md", "diffHunk": "@@ -1,138 +1,187 @@\n # sgrep\n \n-[![r2c community slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=for-the-badge&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n+[![CircleCI](https://circleci.com/gh/returntocorp/sgrep.svg?style=svg)](https://circleci.com/gh/returntocorp/sgrep)\n+[![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n \n-[sgrep.live](https://sgrep.live/): try it now!\n+`sgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n+your codebase. It combines the convenience of `grep` with the correctness of\n+syntactical and semantic search. Quickly write rules so you can code with\n+confidence.\n \n-sgrep, for syntactical \\(and occasionnally semantic\\) grep, is a tool to help find bugs by specifying code patterns using a familiar syntax. The idea is to mix the convenience of grep with the correctness and precision of a compiler frontend.\n+**Try it now:** [https://sgrep.live](https://sgrep.live/)\n \n-## Quick Examples\n+## Overview\n \n-| **pattern** | **will match code like** |\n-| :--- | :--- |\n-| `$X == $X` | `if (node.id == node.id): ...` |\n-| `foo(kwd1=1, kwd2=2, ...)` | `foo(kwd2=2, kwd1=1, kwd3=3)` |\n-| `subprocess.Popen(...)` | `import subprocess as s; s.Popen(['foo'])` |\n-\n-\u2192 [see more examples in the sgrep-rules registry](https://github.com/returntocorp/sgrep-rules)\n+Language support:\n \n-## Supported Languages\n-\n-| **javascript** | **python** | **go** | **java** | **c** | **ruby** | **scala** |\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n-| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | coming | coming |\n-\n-\u2192 see full language support details in [matrix.md](docs/matrix.md)\n+| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | Coming... | Coming... |\n \n-## Meetups\n+Simple patterns for finding code in many languages:\n \n-Want to learn more about sgrep? Check out these [slides from the r2c February meetup](https://r2c.dev/sgrep-public2.pdf)\n+| **Pattern** | **Matches** |\n+| :--- | :--- |\n+| `$X == $X` | `if (node.id == node.id): ...` |\n+| `requests.get(..., verify=False, ...)` | `requests.get(url, timeout=3, verify=False)` |\n+| `os.system(...)` | `from os import system; system('echo sgrep')` |\n+| `$ELEMENT.innerHTML` | ``el.innerHTML = \"<img src='x' onerror='alert(`XSS`)'>\";`` |\n+| `$TOKEN.SignedString([]byte(\"...\"))` | `ss, err := token.SignedString([]byte(\"HARDCODED KEY\"))` |\n \n ## Installation\n \n-Too lazy to install? Try out [sgrep.live](https://sgrep.live)\n-\n-### Docker\n-\n-`sgrep` is packaged within a [docker container](https://hub.docker.com/r/returntocorp/sgrep), making installation as easy as [installing docker](https://docs.docker.com/install/).\n+For the best experience, simply install `sgrep` with [Docker](https://docs.docker.com/install/):\n \n-## Quickstart\n-\n-```bash\n-docker pull returntocorp/sgrep\n+```\n+$ docker pull returntocorp/sgrep\n+```\n \n-cd /path/to/repo\n-# generate a template config file\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --generate-config\n+`sgrep` binaries can also be installed on Ubuntu:\n \n-# look for findings\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep\n+```\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ sha256sum --check sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ tar xf sgrep-0.4.9-ubuntu-16.04.tgz\n+$ ./sgrep-lint-files/sgrep-lint --help", "originalCommit": "68401b35cf19e794f797c17d79ccc5634626e6f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MzEyMQ==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406943121", "bodyText": "I'll remove for now, we can re-add when we have a clearer picture.", "author": "mschwager", "createdAt": "2020-04-10T21:02:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxOTg5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyMDExMw==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406920113", "bodyText": "this makes me think that a single pattern works on multiple languages (which isn't really true). Could we rephrase?", "author": "ievans", "createdAt": "2020-04-10T20:04:01Z", "path": "README.md", "diffHunk": "@@ -1,138 +1,187 @@\n # sgrep\n \n-[![r2c community slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=for-the-badge&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n+[![CircleCI](https://circleci.com/gh/returntocorp/sgrep.svg?style=svg)](https://circleci.com/gh/returntocorp/sgrep)\n+[![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n \n-[sgrep.live](https://sgrep.live/): try it now!\n+`sgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n+your codebase. It combines the convenience of `grep` with the correctness of\n+syntactical and semantic search. Quickly write rules so you can code with\n+confidence.\n \n-sgrep, for syntactical \\(and occasionnally semantic\\) grep, is a tool to help find bugs by specifying code patterns using a familiar syntax. The idea is to mix the convenience of grep with the correctness and precision of a compiler frontend.\n+**Try it now:** [https://sgrep.live](https://sgrep.live/)\n \n-## Quick Examples\n+## Overview\n \n-| **pattern** | **will match code like** |\n-| :--- | :--- |\n-| `$X == $X` | `if (node.id == node.id): ...` |\n-| `foo(kwd1=1, kwd2=2, ...)` | `foo(kwd2=2, kwd1=1, kwd3=3)` |\n-| `subprocess.Popen(...)` | `import subprocess as s; s.Popen(['foo'])` |\n-\n-\u2192 [see more examples in the sgrep-rules registry](https://github.com/returntocorp/sgrep-rules)\n+Language support:\n \n-## Supported Languages\n-\n-| **javascript** | **python** | **go** | **java** | **c** | **ruby** | **scala** |\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n-| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | coming | coming |\n-\n-\u2192 see full language support details in [matrix.md](docs/matrix.md)\n+| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | Coming... | Coming... |\n \n-## Meetups\n+Simple patterns for finding code in many languages:", "originalCommit": "68401b35cf19e794f797c17d79ccc5634626e6f9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyMDMxMg==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406920312", "bodyText": "@DrewDennison why would we not use -config=r2c here?", "author": "ievans", "createdAt": "2020-04-10T20:04:40Z", "path": "README.md", "diffHunk": "@@ -1,138 +1,187 @@\n # sgrep\n \n-[![r2c community slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=for-the-badge&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n+[![CircleCI](https://circleci.com/gh/returntocorp/sgrep.svg?style=svg)](https://circleci.com/gh/returntocorp/sgrep)\n+[![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n \n-[sgrep.live](https://sgrep.live/): try it now!\n+`sgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\n+your codebase. It combines the convenience of `grep` with the correctness of\n+syntactical and semantic search. Quickly write rules so you can code with\n+confidence.\n \n-sgrep, for syntactical \\(and occasionnally semantic\\) grep, is a tool to help find bugs by specifying code patterns using a familiar syntax. The idea is to mix the convenience of grep with the correctness and precision of a compiler frontend.\n+**Try it now:** [https://sgrep.live](https://sgrep.live/)\n \n-## Quick Examples\n+## Overview\n \n-| **pattern** | **will match code like** |\n-| :--- | :--- |\n-| `$X == $X` | `if (node.id == node.id): ...` |\n-| `foo(kwd1=1, kwd2=2, ...)` | `foo(kwd2=2, kwd1=1, kwd3=3)` |\n-| `subprocess.Popen(...)` | `import subprocess as s; s.Popen(['foo'])` |\n-\n-\u2192 [see more examples in the sgrep-rules registry](https://github.com/returntocorp/sgrep-rules)\n+Language support:\n \n-## Supported Languages\n-\n-| **javascript** | **python** | **go** | **java** | **c** | **ruby** | **scala** |\n+| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n-| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | coming | coming |\n-\n-\u2192 see full language support details in [matrix.md](docs/matrix.md)\n+| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | Coming... | Coming... |\n \n-## Meetups\n+Simple patterns for finding code in many languages:\n \n-Want to learn more about sgrep? Check out these [slides from the r2c February meetup](https://r2c.dev/sgrep-public2.pdf)\n+| **Pattern** | **Matches** |\n+| :--- | :--- |\n+| `$X == $X` | `if (node.id == node.id): ...` |\n+| `requests.get(..., verify=False, ...)` | `requests.get(url, timeout=3, verify=False)` |\n+| `os.system(...)` | `from os import system; system('echo sgrep')` |\n+| `$ELEMENT.innerHTML` | ``el.innerHTML = \"<img src='x' onerror='alert(`XSS`)'>\";`` |\n+| `$TOKEN.SignedString([]byte(\"...\"))` | `ss, err := token.SignedString([]byte(\"HARDCODED KEY\"))` |\n \n ## Installation\n \n-Too lazy to install? Try out [sgrep.live](https://sgrep.live)\n-\n-### Docker\n-\n-`sgrep` is packaged within a [docker container](https://hub.docker.com/r/returntocorp/sgrep), making installation as easy as [installing docker](https://docs.docker.com/install/).\n+For the best experience, simply install `sgrep` with [Docker](https://docs.docker.com/install/):\n \n-## Quickstart\n-\n-```bash\n-docker pull returntocorp/sgrep\n+```\n+$ docker pull returntocorp/sgrep\n+```\n \n-cd /path/to/repo\n-# generate a template config file\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --generate-config\n+`sgrep` binaries can also be installed on Ubuntu:\n \n-# look for findings\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep\n+```\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz\n+$ wget https://github.com/returntocorp/sgrep/releases/download/v0.4.9/sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ sha256sum --check sgrep-0.4.9-ubuntu-16.04.tgz.sha256\n+$ tar xf sgrep-0.4.9-ubuntu-16.04.tgz\n+$ ./sgrep-lint-files/sgrep-lint --help\n ```\n \n ## Usage\n \n-### Rule Development\n+Start with a simple example:\n \n-To rapidly iterate on a single pattern, you can test on a single file or folder. For example,\n-\n-```bash\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep -l python -e '$X == $X' path/to/file.py\n+```\n+$ cat << EOF > test.py\n+a = 1\n+b = 2\n+if a == a:  # oops, supposed to be a == b\n+    print('sgrep test')\n+EOF\n ```\n \n-Here, `sgrep` will search the target with the pattern `$X == $X` \\(which is a stupid equals check\\) and print the results to `stdout`. This also works for directories and will skip the file if parsing fails. You can specifiy the language of the pattern with `--lang javascript` for example.\n+```\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --lang python --pattern '$X == $X' test.py\n+test.py\n+3:if a == a:  # oops, supposed to be a == b\n+```\n \n-To see more options\n+From here you can use our rules to search for issues in your codebase:\n \n-```bash\n-docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --help\n+```\n+$ cd /path/to/code\n+$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/sgrep --config https://r2c.dev/default-r2c-checks", "originalCommit": "68401b35cf19e794f797c17d79ccc5634626e6f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MzUyMw==", "url": "https://github.com/returntocorp/semgrep/pull/423#discussion_r406943523", "bodyText": "I'll switch to r2c. I wasn't aware of how the registries worked or what rules they pulled in and figured this was simplest. Just tested out r2c and that should be fine here \ud83d\udc4d", "author": "mschwager", "createdAt": "2020-04-10T21:03:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyMDMxMg=="}], "type": "inlineReview"}, {"oid": "cb408d6216771de471259ecd8f8dd53b659a6edc", "url": "https://github.com/returntocorp/semgrep/commit/cb408d6216771de471259ecd8f8dd53b659a6edc", "message": "Address PR feedback", "committedDate": "2020-04-10T21:08:51Z", "type": "commit"}]}