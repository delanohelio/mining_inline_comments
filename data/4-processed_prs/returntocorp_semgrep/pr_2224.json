{"pr_number": 2224, "pr_title": "Nx test matrix speedup via multiprocessing, N = CPU count", "pr_createdAt": "2020-12-09T20:49:26Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/2224", "timeline": [{"oid": "2d5043017fe42db4eed5109a4b81ebbb8ad95161", "url": "https://github.com/returntocorp/semgrep/commit/2d5043017fe42db4eed5109a4b81ebbb8ad95161", "message": "Nx test matrix speedup via multiprocessing, N = CPU count", "committedDate": "2020-12-09T20:47:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYzNzcwNw==", "url": "https://github.com/returntocorp/semgrep/pull/2224#discussion_r539637707", "bodyText": "This was originally a suggestion by @nbrahms. It allows us to more cleanly avoid this problem: https://stackoverflow.com/questions/6974695/python-process-pool-non-daemonic \ud83d\udc4d", "author": "mschwager", "createdAt": "2020-12-09T20:50:17Z", "path": "semgrep/semgrep/core_runner.py", "diffHunk": "@@ -463,15 +461,9 @@ def handle_regex_patterns(\n         except re.error as err:\n             raise SemgrepError(f\"invalid regular expression specified: {err}\")\n \n-        if self._testing:\n-            # Testing functionality runs in a multiprocessing.Pool. We cannot run\n-            # a Pool inside a Pool, so we have to avoid multiprocessing when testing.\n-            # https://stackoverflow.com/questions/6974695/python-process-pool-non-daemonic\n-            matches = [get_re_matches(patterns_re, target) for target in targets]\n-        else:\n-            re_fn = functools.partial(get_re_matches, patterns_re)\n-            with multiprocessing.Pool(self._jobs) as pool:\n-                matches = pool.map(re_fn, targets)\n+        re_fn = functools.partial(get_re_matches, patterns_re)\n+        with pool.ThreadPool(self._jobs) as tpool:", "originalCommit": "2d5043017fe42db4eed5109a4b81ebbb8ad95161", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}