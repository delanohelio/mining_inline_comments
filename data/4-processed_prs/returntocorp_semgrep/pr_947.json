{"pr_number": 947, "pr_title": "Fix 'pattern_id' when using nested pattern operators", "pr_createdAt": "2020-06-09T17:23:32Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/947", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5Njk2OA==", "url": "https://github.com/returntocorp/semgrep/pull/947#discussion_r437596968", "bodyText": "Not sure if this was actually causing a problem, but it looked like a bug to me. Variables returned from semgrep-core either have a sid or md5sum. In this case, if the variable didn't have a sid it was using the literal \"md5sum\" instead of the value of that key. This seems like it should've broken metavariable matching, but I didn't look into it too much.", "author": "mschwager", "createdAt": "2020-06-09T17:25:04Z", "path": "semgrep/semgrep/pattern_match.py", "diffHunk": "@@ -37,7 +37,7 @@ def extra(self) -> Dict[str, Any]:\n     @property\n     def vars(self) -> Dict[str, Any]:\n         metavars = {v: data.get(\"unique_id\", {}) for v, data in self.metavars.items()}\n-        return {v: uid.get(\"sid\", \"md5sum\") for v, uid in metavars.items()}\n+        return {v: uid.get(\"sid\", uid.get(\"md5sum\")) for v, uid in metavars.items()}", "originalCommit": "1eb0ef63112f641cffc438740b6c6038b566e798", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5OTY5NQ==", "url": "https://github.com/returntocorp/semgrep/pull/947#discussion_r437599695", "bodyText": "Oh yeah, I'm not sure what the best failure case here is if the result has neither the sid nor the md5sum. Is that possible? Do we bail on the whole run, or just skip that variable?", "author": "mschwager", "createdAt": "2020-06-09T17:29:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5Njk2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYyNDA2NA==", "url": "https://github.com/returntocorp/semgrep/pull/947#discussion_r437624064", "bodyText": "Interesting, the test failures are actually because this surfaced a bug in one of our rules that was unintentionally making use of metavariable matching.", "author": "mschwager", "createdAt": "2020-06-09T18:11:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5Njk2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzMjAyOQ==", "url": "https://github.com/returntocorp/semgrep/pull/947#discussion_r437632029", "bodyText": "Probably ok to raise an exception. idk if we want to show work that was done or just bail completely?", "author": "brendongo", "createdAt": "2020-06-09T18:24:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5Njk2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcxMDUzMA==", "url": "https://github.com/returntocorp/semgrep/pull/947#discussion_r437710530", "bodyText": "Per the two semgrep-rules that needed fixing, I'd say this definitely was a bug. I added some code to test if anything hits that case. Let's see what happens \ud83d\udc4d", "author": "mschwager", "createdAt": "2020-06-09T20:49:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5Njk2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5ODQ4OQ==", "url": "https://github.com/returntocorp/semgrep/pull/947#discussion_r437598489", "bodyText": "This was the bug. Multiple patterns could end up having the same pattern_id, which was confusing semgrep when it would receive the results back from semgrep-core. Since multiple patterns would have the same pattern_id then we'd occasionally return invalid results.", "author": "mschwager", "createdAt": "2020-06-09T17:27:31Z", "path": "semgrep/semgrep/rule.py", "diffHunk": "@@ -48,7 +47,7 @@ def _parse_boolean_expression(\n                 if operator in set(OPERATORS_WITH_CHILDREN):\n                     if isinstance(pattern_text, list):\n                         sub_expression = self._parse_boolean_expression(\n-                            pattern_text, 0, f\"{prefix}.{pattern_id}\"\n+                            pattern_text, 0, f\"{prefix}.{rule_index}.{pattern_id}\"", "originalCommit": "1eb0ef63112f641cffc438740b6c6038b566e798", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "991ac63c8a7ebd13d76c0dfc3fbfc59944f7ee0e", "url": "https://github.com/returntocorp/semgrep/commit/991ac63c8a7ebd13d76c0dfc3fbfc59944f7ee0e", "message": "Fix 'pattern_id' when using nested pattern operators\n\nFixes #828.", "committedDate": "2020-06-10T13:38:54Z", "type": "commit"}, {"oid": "d56fb4d357107d764ed66efbf9c04426431ad241", "url": "https://github.com/returntocorp/semgrep/commit/d56fb4d357107d764ed66efbf9c04426431ad241", "message": "Explicitly detect when metavariables are missing a unique identifier", "committedDate": "2020-06-10T13:38:54Z", "type": "commit"}, {"oid": "77028067281eca130ae92e6091734e3ce417e5ce", "url": "https://github.com/returntocorp/semgrep/commit/77028067281eca130ae92e6091734e3ce417e5ce", "message": "Bump CHANGELOG and check metavariable unique_id when determining equality", "committedDate": "2020-06-10T13:40:01Z", "type": "commit"}, {"oid": "77028067281eca130ae92e6091734e3ce417e5ce", "url": "https://github.com/returntocorp/semgrep/commit/77028067281eca130ae92e6091734e3ce417e5ce", "message": "Bump CHANGELOG and check metavariable unique_id when determining equality", "committedDate": "2020-06-10T13:40:01Z", "type": "forcePushed"}]}