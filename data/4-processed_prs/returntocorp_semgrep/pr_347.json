{"pr_number": 347, "pr_title": "[Python] f-string with const propagation", "pr_createdAt": "2020-03-30T20:33:46Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/347", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUxNDA3OA==", "url": "https://github.com/returntocorp/semgrep/pull/347#discussion_r400514078", "bodyText": "Shouldn't this match your pattern?", "author": "nbrahms", "createdAt": "2020-03-30T21:46:33Z", "path": "sgrep/tests/python/equivalence_f_string.py", "diffHunk": "@@ -0,0 +1,30 @@\n+def foo1():\n+  # ERROR:\n+  w = \"foo\"\n+  query = f\"hello {w} hel\"\n+\n+def foo2():\n+  # ERROR:\n+  ww = \"bar\"\n+  query = f\"ASD{ww}ASASD\"\n+\n+def foo3():\n+  # OK:\n+  www = \"bar\"\n+  query = f\"SELECT {www}\"\n+\n+def foo4():\n+  # OK:", "originalCommit": "62369000d104e041be230b91388add96872e0a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyMDg3NA==", "url": "https://github.com/returntocorp/semgrep/pull/347#discussion_r400520874", "bodyText": "... is matching more than 0 characters and for {ww} it fumbles. Something like\n$M = \"...\"\n$N = \"...\"\n...\n$Q = f\"...{$M}...{$N}\"\n``` matches though!", "author": "ulziibay", "createdAt": "2020-03-30T22:01:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUxNDA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyNDIxOA==", "url": "https://github.com/returntocorp/semgrep/pull/347#discussion_r400524218", "bodyText": "Hmm, I'd think constant propagation should treat these as equivalent. Maybe a bug to file?", "author": "nbrahms", "createdAt": "2020-03-30T22:09:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUxNDA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyNDY4NQ==", "url": "https://github.com/returntocorp/semgrep/pull/347#discussion_r400524685", "bodyText": "Honestly I think ... should match 0 characters.", "author": "nbrahms", "createdAt": "2020-03-30T22:10:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUxNDA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0NDUzMg==", "url": "https://github.com/returntocorp/semgrep/pull/347#discussion_r400744532", "bodyText": "\"...\" matches 0 characters.\nThe issue here is that f\"...{$M}\"...\" is internally rewritten as\nspecial_concat(\"...\", $M, \"...\")\nand a string like f\"foo{a}\" is internally rewritten as\nspecial_concat(\"foo\", a)\nand the issue here is that the number of arguments are different so the engine will say \"no match\".\nWe need to handle specially calls to special_concat and accept that \"...\" matches not only a string, or an empty string, or nothing at all.\nIn fact we probably want f\"...{$X}...\" to match any interpolated expression, not just the first one, so you also don't have to write another pattern when an f-string use 2 interpolated expressions as in f\"one {a} other stuff {b}\"", "author": "aryx", "createdAt": "2020-03-31T08:48:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUxNDA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NzQ5Mg==", "url": "https://github.com/returntocorp/semgrep/pull/347#discussion_r401177492", "bodyText": "@aryx: I have update the generic matcher such that  \"...\" could match many more arguments, thus taking care of the case  where  the number of arguments are different.\nHowever, I use constant_propagation_and_evaluate_literal to determine if variable www is a literal.  As the moment, the constant propagation in python does not seem to keep track of www as a literal", "author": "ulziibay", "createdAt": "2020-03-31T19:58:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUxNDA3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIwNjEwMg==", "url": "https://github.com/returntocorp/semgrep/pull/347#discussion_r401206102", "bodyText": "maybe add a comment here saying interpolated strings are transformed in Call(Spedial(Concat, ...)\nand we want patterns like f\"...{$X}...\", which are expanded to Call(Special(Concat, [L\"...\"; Id \"$X\"; L\"...\"])) to\nmatch concrete code like f\"foo{a}\"", "author": "aryx", "createdAt": "2020-03-31T20:49:13Z", "path": "sgrep/lib/generic_vs_generic.ml", "diffHunk": "@@ -1033,6 +1032,21 @@ and m_list__m_argument (xsa: A.argument list) (xsb: A.argument list) =\n       (* can match more *)\n       (m_list__m_argument ((A.Arg (A.Ellipsis i))::xsa) xsb)\n \n+  (* dots: '...', can also match no argument *)", "originalCommit": "1aa7a8957c2102ef28c6ca1e851db758b64b17a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxMDc0OA==", "url": "https://github.com/returntocorp/semgrep/pull/347#discussion_r401210748", "bodyText": "Ok", "author": "ulziibay", "createdAt": "2020-03-31T20:57:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIwNjEwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyODA1MQ==", "url": "https://github.com/returntocorp/semgrep/pull/347#discussion_r401228051", "bodyText": "do we still need # TODO here?", "author": "nbrahms", "createdAt": "2020-03-31T21:32:29Z", "path": "sgrep/tests/python/equivalence_f_string.py", "diffHunk": "@@ -0,0 +1,32 @@\n+def foo1():\n+  # ERROR:\n+  w = \"foo\"\n+  query = f\"hello {w}\"\n+\n+def foo2():\n+  # ERROR:\n+  ww = \"bar\"\n+  query = f\"ASD{ww}\"\n+\n+def foo3():\n+  # ERROR:\n+  www = \"bar\"\n+  query = f\"SELECT {www}\"\n+\n+def foo4():\n+  # TODO:", "originalCommit": "2b2beff75f77db60f771352d9f5a3eeade2abb14", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0NTg0OA==", "url": "https://github.com/returntocorp/semgrep/pull/347#discussion_r401245848", "bodyText": "Yes we still need TODO: From #347 (comment), I use constant_propagation_and_evaluate_literal to determine if variable name is a literal. As the moment, the constant propagation in python does not seem to keep track of name as a literal", "author": "ulziibay", "createdAt": "2020-03-31T22:11:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyODA1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyODU4Mw==", "url": "https://github.com/returntocorp/semgrep/pull/347#discussion_r401228583", "bodyText": "Also it seems like this should match", "author": "nbrahms", "createdAt": "2020-03-31T21:33:35Z", "path": "sgrep/tests/python/equivalence_f_string_2.py", "diffHunk": "@@ -0,0 +1,27 @@\n+def foo1():\n+  # ERROR:\n+  select = \"select * \"\n+  query = f\"{select} from foo\"\n+\n+def foo2():\n+  # ERROR:\n+  select = \"select * \"\n+  name = \"foo\"\n+  query = f\"{select} from foo \" + f\"where name={name}\"\n+\n+def foo2a():\n+  # TODO:\n+  # OK:\n+  select = \"select * \"\n+  name = \"foo\"\n+  query = f\"{select} from foo where name={name}\"", "originalCommit": "2b2beff75f77db60f771352d9f5a3eeade2abb14", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyODczNA==", "url": "https://github.com/returntocorp/semgrep/pull/347#discussion_r401228734", "bodyText": "NM I'm silly", "author": "nbrahms", "createdAt": "2020-03-31T21:33:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyODU4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzMDI0MQ==", "url": "https://github.com/returntocorp/semgrep/pull/347#discussion_r401230241", "bodyText": "From #347 (comment),  I use constant_propagation_and_evaluate_literal to determine if variable name is a literal. As the moment, the constant propagation in python does not seem to keep track of name as a literal", "author": "ulziibay", "createdAt": "2020-03-31T21:37:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyODU4Mw=="}], "type": "inlineReview"}, {"oid": "2b4d48b9549955efcf002414f04556ecb9270cf9", "url": "https://github.com/returntocorp/semgrep/commit/2b4d48b9549955efcf002414f04556ecb9270cf9", "message": "F-string with const propagation", "committedDate": "2020-03-31T21:43:29Z", "type": "commit"}, {"oid": "e221a3a430bde6bf4c44c7444eba0181c6254b69", "url": "https://github.com/returntocorp/semgrep/commit/e221a3a430bde6bf4c44c7444eba0181c6254b69", "message": "clarify test", "committedDate": "2020-03-31T21:43:29Z", "type": "commit"}, {"oid": "68636b044d1a2df65d806886071bdde7cfdfde8b", "url": "https://github.com/returntocorp/semgrep/commit/68636b044d1a2df65d806886071bdde7cfdfde8b", "message": "complex f-string test", "committedDate": "2020-03-31T21:43:29Z", "type": "commit"}, {"oid": "b8dd0aaa21057dde00f4f18eeb35081fbfbe94f6", "url": "https://github.com/returntocorp/semgrep/commit/b8dd0aaa21057dde00f4f18eeb35081fbfbe94f6", "message": "fix parsing issue", "committedDate": "2020-03-31T21:43:29Z", "type": "commit"}, {"oid": "c0448c466d56af3eca7a560aa2b61c34baa0c453", "url": "https://github.com/returntocorp/semgrep/commit/c0448c466d56af3eca7a560aa2b61c34baa0c453", "message": "make ... match 0 or more", "committedDate": "2020-03-31T21:43:29Z", "type": "commit"}, {"oid": "6bc265779a40e7d4414a2ca246a5ab728ca09817", "url": "https://github.com/returntocorp/semgrep/commit/6bc265779a40e7d4414a2ca246a5ab728ca09817", "message": "verbose comment", "committedDate": "2020-03-31T21:43:29Z", "type": "commit"}, {"oid": "6bc265779a40e7d4414a2ca246a5ab728ca09817", "url": "https://github.com/returntocorp/semgrep/commit/6bc265779a40e7d4414a2ca246a5ab728ca09817", "message": "verbose comment", "committedDate": "2020-03-31T21:43:29Z", "type": "forcePushed"}]}