{"pr_number": 2088, "pr_title": "adding binary expr transformation", "pr_createdAt": "2020-11-19T00:40:12Z", "pr_url": "https://github.com/returntocorp/semgrep/pull/2088", "timeline": [{"oid": "f0dff8f3f7e73dbb5769c8c68a08d67ff9247133", "url": "https://github.com/returntocorp/semgrep/commit/f0dff8f3f7e73dbb5769c8c68a08d67ff9247133", "message": "adding binary expr transformation", "committedDate": "2020-11-19T00:37:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MjcyNA==", "url": "https://github.com/returntocorp/semgrep/pull/2088#discussion_r526792724", "bodyText": "We could add an operator for that maybe. It's actually used also in Python (but right now I use\nOE_In, and OE_NotIn, but really we could make In and NotIn operators like Plus/... in AST_generic.operator.", "author": "aryx", "createdAt": "2020-11-19T11:25:38Z", "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "diffHunk": "@@ -516,28 +517,29 @@ and binary_expression (env : env) (x : CST.binary_expression) =\n         | `Is_op x -> is_operator env x\n         )\n       in\n+      let v2_id = Id ((\"\", v2), empty_id_info()) in", "originalCommit": "f0dff8f3f7e73dbb5769c8c68a08d67ff9247133", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA1MTc2Mg==", "url": "https://github.com/returntocorp/semgrep/pull/2088#discussion_r527051762", "bodyText": "adding in AST_generic sounds great, we could probably also add in the Is/NotIs operators in there too \ud83e\udd14", "author": "colleend", "createdAt": "2020-11-19T17:04:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MjcyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MzI3Ng==", "url": "https://github.com/returntocorp/semgrep/pull/2088#discussion_r526793276", "bodyText": "better to keep the todo than using fake thing when you're not sure.", "author": "aryx", "createdAt": "2020-11-19T11:26:37Z", "path": "semgrep-core/parsing/Parse_kotlin_tree_sitter.ml", "diffHunk": "@@ -1369,25 +1371,30 @@ and primary_constructor (env : env) ((v1, v2) : CST.primary_constructor) =\n and primary_expression (env : env) (x : CST.primary_expression) : expr =\n   (match x with\n   | `Paren_exp x -> parenthesized_expression env x\n-  | `Simple_id x -> \n+  | `Simple_id x ->\n       let id = simple_identifier env x in\n       Id(id, empty_id_info())\n   | `Lit_cst x -> L (literal_constant env x)\n   | `Str_lit x -> L (String (string_literal env x))\n   | `Call_ref (v1, v2, v3) ->\n       let v1 =\n         (match v1 with\n-        | Some x -> simple_identifier env x\n-        | None -> todo env ())\n+        | Some x ->\n+            let id = simple_identifier env x in\n+            Id(id, empty_id_info())\n+        | None ->\n+            let fake_id = (\"None\", fake \"None\") in", "originalCommit": "f0dff8f3f7e73dbb5769c8c68a08d67ff9247133", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA3NzExNg==", "url": "https://github.com/returntocorp/semgrep/pull/2088#discussion_r527077116", "bodyText": "yep, probably can add Is and Isnot; I have no idea what it is though. Is it a type check?\nmaybe we could convert it in an InstanceOf which is part of the 'special' type.", "author": "aryx", "createdAt": "2020-11-19T17:41:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MzI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwNDA4Mw==", "url": "https://github.com/returntocorp/semgrep/pull/2088#discussion_r527104083", "bodyText": "yep, they're type checks -- if we convert is and isnot both to instanceof, would we need to differentiate between if it's isnot or is when doing matching?", "author": "colleend", "createdAt": "2020-11-19T18:23:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MzI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE1MjA4OA==", "url": "https://github.com/returntocorp/semgrep/pull/2088#discussion_r527152088", "bodyText": "In theory you can create an Ast with a regular Not before the InstanceOf. But problably simpler\nyou add Is and IsNot in AST_generic.operator.", "author": "aryx", "createdAt": "2020-11-19T19:43:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MzI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI1NDU3MA==", "url": "https://github.com/returntocorp/semgrep/pull/2088#discussion_r527254570", "bodyText": "got it! I'll add it to the AST_generic then \ud83d\ude04", "author": "colleend", "createdAt": "2020-11-19T22:45:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MzI3Ng=="}], "type": "inlineReview"}]}