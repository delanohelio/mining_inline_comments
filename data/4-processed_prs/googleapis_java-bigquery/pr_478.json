{"pr_number": 478, "pr_title": "docs(samples): add auth user flow and query", "pr_createdAt": "2020-06-23T11:27:53Z", "pr_url": "https://github.com/googleapis/java-bigquery/pull/478", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMyNDkzOQ==", "url": "https://github.com/googleapis/java-bigquery/pull/478#discussion_r449324939", "bodyText": "getting IllegalArgumentException on this line", "author": "stephaniewang526", "createdAt": "2020-07-03T00:45:37Z", "path": "samples/snippets/src/main/java/com/example/bigquery/AuthUserFlow.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_auth_user_flow]\n+import com.google.api.client.auth.oauth2.Credential;\n+import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;\n+import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;\n+import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;\n+import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.store.FileDataStoreFactory;\n+import com.google.api.gax.paging.Page;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.auth.oauth2.UserCredentials;\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Dataset;\n+import com.google.common.collect.ImmutableList;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.security.GeneralSecurityException;\n+import java.util.List;\n+\n+// Sample to authenticate by using a user credential\n+public class AuthUserFlow {\n+\n+  private static final File DATA_STORE_DIR =\n+      new File(AuthUserFlow.class.getResource(\"/\").getPath(), \"credentials\");\n+  private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();\n+  // i.e redirect_uri http://localhost:61984/Callback\n+  private static final int LOCAL_RECEIVER_PORT = 61984;\n+\n+  public static void runAuthUserFlow() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    /**\n+     * Download your OAuth2 configuration from the Google Developers Console API Credentials page.\n+     * https://console.cloud.google.com/apis/credentials\n+     */\n+    File credentialsPath = new File(\"path/to/your/client_secret.json\");\n+    List<String> scopes = ImmutableList.of(\"https://www.googleapis.com/auth/bigquery\");\n+    authUserFlow(credentialsPath, scopes);\n+  }\n+\n+  public static void authUserFlow(File credentialsPath, List<String> selectedScopes) {\n+    try {\n+\n+      // Load client_secret.json file\n+      GoogleClientSecrets clientSecrets =\n+          GoogleClientSecrets.load(\n+              JSON_FACTORY, new InputStreamReader(new FileInputStream(credentialsPath)));\n+      String clientId = clientSecrets.getDetails().getClientId();", "originalCommit": "e61090d7aa403a85dd0aad9dc3cfbccc962d6efb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMyNTA3Mw==", "url": "https://github.com/googleapis/java-bigquery/pull/478#discussion_r449325073", "bodyText": "we cannot upload any files that contains secrets -- have to use GCS\nString sourceUri = \"gs://cloud-devrel-kokoro-resources/java-docs-samples/service-acct.json\"; so we have to figure out how to generate File from gcs path.", "author": "stephaniewang526", "createdAt": "2020-07-03T00:46:18Z", "path": "samples/snippets/src/test/java/com/example/bigquery/AuthUserFlowIT.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class AuthUserFlowIT {\n+\n+  private ByteArrayOutputStream bout;\n+  private PrintStream out;\n+\n+  @Before\n+  public void setUp() {\n+    bout = new ByteArrayOutputStream();\n+    out = new PrintStream(bout);\n+    System.setOut(out);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    System.setOut(null);\n+  }\n+\n+  @Test\n+  public void testAuthUserFlow() {\n+    // TODO(stephaniewang526): Replace client_secret.json\n+    /*File credentialsPath = new File(\"\"path/to/your/client_secret.json\");", "originalCommit": "e61090d7aa403a85dd0aad9dc3cfbccc962d6efb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMyNzM5Mg==", "url": "https://github.com/googleapis/java-bigquery/pull/478#discussion_r449327392", "bodyText": "please add in imports\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.PrintStream;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport com.google.common.collect.ImmutableList;\nimport java.util.List;", "author": "stephaniewang526", "createdAt": "2020-07-03T00:58:41Z", "path": "samples/snippets/src/test/java/com/example/bigquery/AuthUserFlowIT.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+import java.io.ByteArrayOutputStream;", "originalCommit": "e61090d7aa403a85dd0aad9dc3cfbccc962d6efb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM1MzQxMg==", "url": "https://github.com/googleapis/java-bigquery/pull/478#discussion_r450353412", "bodyText": "change to \"auto\" so user does not need to manually confirm", "author": "stephaniewang526", "createdAt": "2020-07-06T16:50:04Z", "path": "samples/snippets/src/main/java/com/example/bigquery/AuthUserQuery.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_auth_user_query]\n+import com.google.api.client.auth.oauth2.Credential;\n+import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;\n+import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;\n+import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;\n+import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.store.FileDataStoreFactory;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.auth.oauth2.UserCredentials;\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.GeneralSecurityException;\n+import java.util.List;\n+\n+// Sample to query by using a user credential\n+public class AuthUserQuery {\n+\n+  private static final File DATA_STORE_DIR =\n+      new File(AuthUserQuery.class.getResource(\"/\").getPath(), \"credentials\");\n+  private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();\n+  // i.e redirect_uri http://localhost:61984/Callback\n+  private static final int LOCAL_RECEIVER_PORT = 61984;\n+\n+  public static void runAuthUserQuery() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    /**\n+     * Download your OAuth2 configuration from the Google Developers Console API Credentials page.\n+     * https://console.cloud.google.com/apis/credentials\n+     */\n+    Path credentialsPath = Paths.get(\"path/to/your/client_secret.json\");\n+    List<String> scopes = ImmutableList.of(\"https://www.googleapis.com/auth/bigquery\");\n+    String query =\n+        \"SELECT name, SUM(number) as total\"\n+            + \"  FROM `bigquery-public-data.usa_names.usa_1910_current`\"\n+            + \"  WHERE name = 'William'\"\n+            + \"  GROUP BY name;\";\n+    authUserQuery(credentialsPath, scopes, query);\n+  }\n+\n+  public static void authUserQuery(\n+      Path credentialsPath, List<String> selectedScopes, String query) {\n+    // Reading credentials file\n+    try (InputStream inputStream = Files.newInputStream(credentialsPath)) {\n+\n+      // Load client_secret.json file\n+      GoogleClientSecrets clientSecrets =\n+          GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(inputStream));\n+      String clientId = clientSecrets.getDetails().getClientId();\n+      String clientSecret = clientSecrets.getDetails().getClientSecret();\n+\n+      // Generate the url that will be used for the consent dialog.\n+      GoogleAuthorizationCodeFlow flow =\n+          new GoogleAuthorizationCodeFlow.Builder(\n+                  GoogleNetHttpTransport.newTrustedTransport(),\n+                  JSON_FACTORY,\n+                  clientSecrets,\n+                  selectedScopes)\n+              .setDataStoreFactory(new FileDataStoreFactory(DATA_STORE_DIR))\n+              .setAccessType(\"offline\")\n+              .setApprovalPrompt(\"force\")", "originalCommit": "bf298d2cb8dd151551b1fe39b1d0a549674575ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8990b959011f37e548c99e1dd305c3111814c727", "url": "https://github.com/googleapis/java-bigquery/commit/8990b959011f37e548c99e1dd305c3111814c727", "message": "docs(samples): add auth user flow and query", "committedDate": "2020-07-10T05:45:04Z", "type": "commit"}, {"oid": "5999fc76b2cb7ced874fde0bdcb18ac67d927d7f", "url": "https://github.com/googleapis/java-bigquery/commit/5999fc76b2cb7ced874fde0bdcb18ac67d927d7f", "message": "docs(samples): add dependencies", "committedDate": "2020-07-10T05:45:04Z", "type": "commit"}, {"oid": "bb82aebd0649a3b7595dd5eebc1f70473dbd7827", "url": "https://github.com/googleapis/java-bigquery/commit/bb82aebd0649a3b7595dd5eebc1f70473dbd7827", "message": "docs(samples): rename methods", "committedDate": "2020-07-10T05:45:04Z", "type": "commit"}, {"oid": "4be79ba6125db0269ea1babba9f1ee50be3e2e55", "url": "https://github.com/googleapis/java-bigquery/commit/4be79ba6125db0269ea1babba9f1ee50be3e2e55", "message": "docs(samples): address feedback", "committedDate": "2020-07-10T05:45:04Z", "type": "commit"}, {"oid": "14a81860138a083525a10998eeebe3a9090dbc50", "url": "https://github.com/googleapis/java-bigquery/commit/14a81860138a083525a10998eeebe3a9090dbc50", "message": "docs(samples): set auto", "committedDate": "2020-07-10T05:45:04Z", "type": "commit"}, {"oid": "315cbb5c95eca208e40734a2ed16562907777e8b", "url": "https://github.com/googleapis/java-bigquery/commit/315cbb5c95eca208e40734a2ed16562907777e8b", "message": "docs(samples): modified code and remove deps", "committedDate": "2020-07-17T06:09:27Z", "type": "commit"}, {"oid": "315cbb5c95eca208e40734a2ed16562907777e8b", "url": "https://github.com/googleapis/java-bigquery/commit/315cbb5c95eca208e40734a2ed16562907777e8b", "message": "docs(samples): modified code and remove deps", "committedDate": "2020-07-17T06:09:27Z", "type": "forcePushed"}]}