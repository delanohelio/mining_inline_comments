{"pr_number": 8805, "pr_title": "Remove need for WebSecurityConfigurerAdapter", "pr_createdAt": "2020-07-07T15:03:45Z", "pr_url": "https://github.com/spring-projects/spring-security/pull/8805", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU4NTMyNw==", "url": "https://github.com/spring-projects/spring-security/pull/8805#discussion_r451585327", "bodyText": "I wonder if we could avoid the use of powermock here? Instead we could validate that using the resulting WebAsncManager uses SecurityContextCallableProcessingInterceptor by ensuring the SecurityContext is propagated", "author": "rwinch", "createdAt": "2020-07-08T14:23:36Z", "path": "config/src/test/java/org/springframework/security/config/annotation/web/configuration/HttpSecurityConfigurationPowermockTests.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.springframework.security.config.annotation.web.configuration;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.powermock.core.classloader.annotations.PowerMockIgnore;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.core.io.support.SpringFactoriesLoader;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.test.SpringTestRule;\n+import org.springframework.security.web.SecurityFilterChain;\n+import org.springframework.security.web.context.request.async.SecurityContextCallableProcessingInterceptor;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.web.context.request.async.CallableProcessingInterceptor;\n+import org.springframework.web.context.request.async.WebAsyncManager;\n+import org.springframework.web.context.request.async.WebAsyncUtils;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+\n+/**\n+ * Tests for {@link HttpSecurityConfiguration}.\n+ *\n+ * @author Eleftheria Stein\n+ */\n+@RunWith(PowerMockRunner.class)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0NTAwOA==", "url": "https://github.com/spring-projects/spring-security/pull/8805#discussion_r452045008", "bodyText": "I'm not sure how to do that. Is there a similar test somewhere else in the codebase?", "author": "eleftherias", "createdAt": "2020-07-09T08:17:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU4NTMyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2OTgyNg==", "url": "https://github.com/spring-projects/spring-security/pull/8805#discussion_r452969826", "bodyText": "I don't know if there is. I'd like to avoid using Powermock where possible. I believe you would need a downstream Filter use WebAsncManager in a Thread that asserts the SecurityContext", "author": "rwinch", "createdAt": "2020-07-10T17:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU4NTMyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU4OTI4Nw==", "url": "https://github.com/spring-projects/spring-security/pull/8805#discussion_r451589287", "bodyText": "I wonder if we could/should use this.securityFilterChainBuilders.add(() -> securityFilterChain) instead. This would mean that performBuild could stay the same and be simplified (it only operates on a single collection instead of two.", "author": "rwinch", "createdAt": "2020-07-08T14:28:46Z", "path": "config/src/main/java/org/springframework/security/config/annotation/web/builders/WebSecurity.java", "diffHunk": "@@ -208,6 +205,25 @@ public WebSecurity addSecurityFilterChainBuilder(\n \t\treturn this;\n \t}\n \n+\t/**\n+\t * <p>\n+\t * Adds {@link SecurityFilterChain} instances.\n+\t * </p>\n+\t *\n+\t * <p>\n+\t * Typically this method is invoked automatically within the framework from\n+\t * {@link WebSecurityConfigurerAdapter#init(WebSecurity)}\n+\t * </p>\n+\t *\n+\t * @since 5.4\n+\t * @param securityFilterChain the {@link SecurityFilterChain} instance\n+\t * @return the {@link WebSecurity} for further customizations\n+\t */\n+\tpublic WebSecurity addSecurityFilterChain(SecurityFilterChain securityFilterChain) {\n+\t\tthis.securityFilterChains.add(securityFilterChain);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU5MDc5Mw==", "url": "https://github.com/spring-projects/spring-security/pull/8805#discussion_r451590793", "bodyText": "Is there a reason to limit to one or the other?", "author": "rwinch", "createdAt": "2020-07-08T14:30:43Z", "path": "config/src/main/java/org/springframework/security/config/annotation/web/configuration/WebSecurityConfiguration.java", "diffHunk": "@@ -95,12 +100,27 @@ public static DelegatingApplicationListener delegatingApplicationListener() {\n \tpublic Filter springSecurityFilterChain() throws Exception {\n \t\tboolean hasConfigurers = webSecurityConfigurers != null\n \t\t\t\t&& !webSecurityConfigurers.isEmpty();\n-\t\tif (!hasConfigurers) {\n+\t\tboolean hasFilterChain = !securityFilterChains.isEmpty();\n+\t\tif (hasConfigurers && hasFilterChain) {\n+\t\t\tthrow new IllegalStateException(\n+\t\t\t\t\t\"Found WebSecurityConfigurerAdapter as well as SecurityFilterChain.\" +", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0NzY3MA==", "url": "https://github.com/spring-projects/spring-security/pull/8805#discussion_r452047670", "bodyText": "If we allow both, it brings up concerns around ordering.\nUsing the @Order annotation doesn't make sense because they are different components, so their order cannot be compared.\nThe other option I see is to always apply one before the other, for example, first apply all WebSecurityConfigurerAdapter configurations and then all SecurityFilterChain configurations. But I can see that causing more confusion.", "author": "eleftherias", "createdAt": "2020-07-09T08:22:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU5MDc5Mw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "43e3763f85a8b2e5394f14618b07ff2eb7654bce", "url": "https://github.com/spring-projects/spring-security/commit/43e3763f85a8b2e5394f14618b07ff2eb7654bce", "message": "Remove need for WebSecurityConfigurerAdapter\n\nCloses gh-8804", "committedDate": "2020-07-13T15:33:16Z", "type": "commit"}, {"oid": "43e3763f85a8b2e5394f14618b07ff2eb7654bce", "url": "https://github.com/spring-projects/spring-security/commit/43e3763f85a8b2e5394f14618b07ff2eb7654bce", "message": "Remove need for WebSecurityConfigurerAdapter\n\nCloses gh-8804", "committedDate": "2020-07-13T15:33:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzMTU2Mw==", "url": "https://github.com/spring-projects/spring-security/pull/8805#discussion_r463331563", "bodyText": "What are the consequences of not adding the other shared objects that WebSecurityConfigurerAdapter adds?", "author": "jzheaux", "createdAt": "2020-07-30T23:47:46Z", "path": "config/src/main/java/org/springframework/security/config/annotation/web/configuration/HttpSecurityConfiguration.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.config.annotation.web.configuration;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.config.annotation.ObjectPostProcessor;\n+import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n+import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configurers.DefaultLoginPageConfigurer;\n+import org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.springframework.security.config.Customizer.withDefaults;\n+\n+/**\n+ * {@link Configuration} that exposes the {@link HttpSecurity} bean.\n+ *\n+ * @author Eleftheria Stein\n+ * @since 5.4\n+ */\n+@Configuration(proxyBeanMethods = false)\n+class HttpSecurityConfiguration {\n+\tprivate static final String BEAN_NAME_PREFIX = \"org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration.\";\n+\tprivate static final String HTTPSECURITY_BEAN_NAME = BEAN_NAME_PREFIX + \"httpSecurity\";\n+\n+\tprivate ObjectPostProcessor<Object> objectPostProcessor;\n+\n+\tprivate AuthenticationManager authenticationManager;\n+\n+\tprivate AuthenticationConfiguration authenticationConfiguration;\n+\n+\tprivate ApplicationContext context;\n+\n+\t@Autowired\n+\tpublic void setObjectPostProcessor(ObjectPostProcessor<Object> objectPostProcessor) {\n+\t\tthis.objectPostProcessor = objectPostProcessor;\n+\t}\n+\n+\t@Autowired(required = false)\n+\tvoid setAuthenticationManager(AuthenticationManager authenticationManager) {\n+\t\tthis.authenticationManager = authenticationManager;\n+\t}\n+\n+\t@Autowired\n+\tpublic void setAuthenticationConfiguration(\n+\t\t\tAuthenticationConfiguration authenticationConfiguration) {\n+\t\tthis.authenticationConfiguration = authenticationConfiguration;\n+\t}\n+\n+\t@Autowired\n+\tpublic void setApplicationContext(ApplicationContext context) {\n+\t\tthis.context = context;\n+\t}\n+\n+\t@Bean(HTTPSECURITY_BEAN_NAME)\n+\t@Scope(\"prototype\")\n+\tpublic HttpSecurity httpSecurity() throws Exception {\n+\t\tWebSecurityConfigurerAdapter.LazyPasswordEncoder passwordEncoder =\n+\t\t\t\tnew WebSecurityConfigurerAdapter.LazyPasswordEncoder(this.context);\n+\n+\t\tAuthenticationManagerBuilder authenticationBuilder =\n+\t\t\t\tnew WebSecurityConfigurerAdapter.DefaultPasswordEncoderAuthenticationManagerBuilder(this.objectPostProcessor, passwordEncoder);\n+\t\tauthenticationBuilder.parentAuthenticationManager(authenticationManager());\n+\n+\t\tHttpSecurity http = new HttpSecurity(objectPostProcessor, authenticationBuilder, createSharedObjects());\n+\t\thttp\n+\t\t\t\t.csrf(withDefaults())\n+\t\t\t\t.addFilter(new WebAsyncManagerIntegrationFilter())\n+\t\t\t\t.exceptionHandling(withDefaults())\n+\t\t\t\t.headers(withDefaults())\n+\t\t\t\t.sessionManagement(withDefaults())\n+\t\t\t\t.securityContext(withDefaults())\n+\t\t\t\t.requestCache(withDefaults())\n+\t\t\t\t.anonymous(withDefaults())\n+\t\t\t\t.servletApi(withDefaults())\n+\t\t\t\t.logout(withDefaults())\n+\t\t\t\t.apply(new DefaultLoginPageConfigurer<>());\n+\n+\t\treturn http;\n+\t}\n+\n+\tprivate AuthenticationManager authenticationManager() throws Exception {\n+\t\tif (this.authenticationManager != null) {\n+\t\t\treturn this.authenticationManager;\n+\t\t} else {\n+\t\t\treturn this.authenticationConfiguration.getAuthenticationManager();\n+\t\t}\n+\t}\n+\n+\tprivate Map<Class<?>, Object> createSharedObjects() {\n+\t\tMap<Class<?>, Object> sharedObjects = new HashMap<>();", "originalCommit": "43e3763f85a8b2e5394f14618b07ff2eb7654bce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0MDQ3OA==", "url": "https://github.com/spring-projects/spring-security/pull/8805#discussion_r463540478", "bodyText": "My understanding is that the WebSecurityConfigurerAdapter adds the additional shared objects because they may be overridden within that class, for example using configure(AuthenticationManagerBuilder auth).\nWhen using the SecurityFilterChain bean, you would need to expose a UserDetailsService bean and I confirmed that the UserDetailsService is used even if it's not explicitly added to the shared objects here.\nIt was similar for the ContentNegotiationStrategy and AuthenticationTrustResolver.", "author": "eleftherias", "createdAt": "2020-07-31T10:46:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzMTU2Mw=="}], "type": "inlineReview"}]}