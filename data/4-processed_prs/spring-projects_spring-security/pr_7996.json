{"pr_number": 7996, "pr_title": "Instantiate exceptions lazily", "pr_createdAt": "2020-02-19T16:05:25Z", "pr_url": "https://github.com/spring-projects/spring-security/pull/7996", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM5ODQ3Mg==", "url": "https://github.com/spring-projects/spring-security/pull/7996#discussion_r381398472", "bodyText": "if assume that predicate is stateless (as far as result is cached indefinitely) this could be rewritten to\n@Override\npublic Mono<ReactiveAuthenticationManager> resolve(String issuer) {\n\tif (!this.trustedIssuer.test(issuer)) {\n\t\treturn Mono.empty();\n\t}\n\treturn this.authenticationManagers.computeIfAbsent(issuer, k ->\n\t\t\tMono.<ReactiveAuthenticationManager>fromCallable(() ->\n\t\t\t\t\tnew JwtReactiveAuthenticationManager(ReactiveJwtDecoders.fromIssuerLocation(k))\n\t\t\t)\n\t\t\t.subscribeOn(Schedulers.boundedElastic())\n\t\t\t.cache());\n}\nthis will reduce 3 operators and allocations", "author": "robotmrv", "createdAt": "2020-02-19T16:41:33Z", "path": "oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerReactiveAuthenticationManagerResolver.java", "diffHunk": "@@ -166,7 +167,7 @@ public JwtIssuerReactiveAuthenticationManagerResolver(Collection<String> trusted\n \t\t\t\t\t.filter(this.trustedIssuer)\n \t\t\t\t\t.flatMap(iss ->", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4MzgzMA==", "url": "https://github.com/spring-projects/spring-security/pull/7996#discussion_r381583830", "bodyText": "original exception is not passed as cause. Is it intentionally?", "author": "robotmrv", "createdAt": "2020-02-19T22:29:37Z", "path": "oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/authentication/JwtIssuerReactiveAuthenticationManagerResolver.java", "diffHunk": "@@ -133,26 +133,26 @@ public JwtIssuerReactiveAuthenticationManagerResolver(Collection<String> trusted\n \n \t\t@Override\n \t\tpublic Mono<String> convert(@NonNull ServerWebExchange exchange) {\n-\t\t\treturn this.converter.convert(exchange)\n-\t\t\t\t\t.cast(BearerTokenAuthenticationToken.class)\n-\t\t\t\t\t.flatMap(this::issuer);\n-\t\t}\n-\n-\t\tprivate Mono<String> issuer(BearerTokenAuthenticationToken token) {\n-\t\t\ttry {\n-\t\t\t\tString issuer = JWTParser.parse(token.getToken()).getJWTClaimsSet().getIssuer();\n-\t\t\t\treturn Mono.justOrEmpty(issuer).switchIfEmpty(\n-\t\t\t\t\t\tMono.error(new InvalidBearerTokenException(\"Missing issuer\")));\n-\t\t\t} catch (Exception e) {\n-\t\t\t\treturn Mono.error(new InvalidBearerTokenException(e.getMessage()));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIwODg1Mg==", "url": "https://github.com/spring-projects/spring-security/pull/7996#discussion_r382208852", "bodyText": "That's likely an oversight, especially since the servlet version wraps the exception. Would you like to update your PR to include this change as well?", "author": "jzheaux", "createdAt": "2020-02-20T19:25:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4MzgzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIyMTYzNA==", "url": "https://github.com/spring-projects/spring-security/pull/7996#discussion_r382221634", "bodyText": "no problem", "author": "robotmrv", "createdAt": "2020-02-20T19:49:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4MzgzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIyMjU1OQ==", "url": "https://github.com/spring-projects/spring-security/pull/7996#discussion_r382222559", "bodyText": "could it be separate commit or should it be integrated into first/second?", "author": "robotmrv", "createdAt": "2020-02-20T19:51:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4MzgzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyNTE0NA==", "url": "https://github.com/spring-projects/spring-security/pull/7996#discussion_r382525144", "bodyText": "done it in polish commit", "author": "robotmrv", "createdAt": "2020-02-21T11:08:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4MzgzMA=="}], "type": "inlineReview"}, {"oid": "18f62d7a54b746cbf6df78f26184ac94b7cc2fd8", "url": "https://github.com/spring-projects/spring-security/commit/18f62d7a54b746cbf6df78f26184ac94b7cc2fd8", "message": "Instantiate exceptions lazily\n\nAdd lazy Exception instantiation to reduce allocations\n\nFixes gh-7995", "committedDate": "2020-02-20T12:59:37Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "a92f1d7bfc638eeac9015c1f40d259ed6bd5e843", "url": "https://github.com/spring-projects/spring-security/commit/a92f1d7bfc638eeac9015c1f40d259ed6bd5e843", "message": "polish gh-7996\n\nMake defensive collection copy as Collections.unmodifiableCollection\ndoes not protect from the source collection direct modification.\nUse Mono#map instead of Mono#flatMap as it allocates less.\nUse less operators to reduce allocations.\nUse lambda parameter instead of outer method parameter\nin authenticationManagers#computeIfAbsent()\nto make it non capturing so it could be cached by JVM.\nPropagate cause for InvalidBearerTokenException.", "committedDate": "2020-02-21T10:25:46Z", "type": "commit"}, {"oid": "a92f1d7bfc638eeac9015c1f40d259ed6bd5e843", "url": "https://github.com/spring-projects/spring-security/commit/a92f1d7bfc638eeac9015c1f40d259ed6bd5e843", "message": "polish gh-7996\n\nMake defensive collection copy as Collections.unmodifiableCollection\ndoes not protect from the source collection direct modification.\nUse Mono#map instead of Mono#flatMap as it allocates less.\nUse less operators to reduce allocations.\nUse lambda parameter instead of outer method parameter\nin authenticationManagers#computeIfAbsent()\nto make it non capturing so it could be cached by JVM.\nPropagate cause for InvalidBearerTokenException.", "committedDate": "2020-02-21T10:25:46Z", "type": "forcePushed"}]}