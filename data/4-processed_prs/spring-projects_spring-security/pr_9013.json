{"pr_number": 9013, "pr_title": "Use AssertJ for exception testing", "pr_createdAt": "2020-09-11T22:05:03Z", "pr_url": "https://github.com/spring-projects/spring-security/pull/9013", "timeline": [{"oid": "962a1ac257599653c88ad60436f44aaa9b64ee43", "url": "https://github.com/spring-projects/spring-security/commit/962a1ac257599653c88ad60436f44aaa9b64ee43", "message": "Replace try/catch with AssertJ\n\nReplace manual try/catch/fail blocks with AssertJ calls.", "committedDate": "2020-09-11T21:58:19Z", "type": "commit"}, {"oid": "f3b9260565827ac3434d05a22fa3081c096fe1f9", "url": "https://github.com/spring-projects/spring-security/commit/f3b9260565827ac3434d05a22fa3081c096fe1f9", "message": "Replace ExpectedException @Rules with AssertJ\n\nReplace JUnit ExpectedException @Rules with AssertJ calls.", "committedDate": "2020-09-11T22:00:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxODQ3Mg==", "url": "https://github.com/spring-projects/spring-security/pull/9013#discussion_r488018472", "bodyText": "The way the lines are broken here, at line 105, and below at lines 111 and 113, appear quite arbitrary. At least, I'm having a difficult time seeing the logic.\nI figure these are the result of the JavaFormat plugin. Is there a place I can read up on the way it makes decisions about line breaks?", "author": "jzheaux", "createdAt": "2020-09-14T15:22:46Z", "path": "acl/src/test/java/org/springframework/security/acls/domain/AclImplTests.java", "diffHunk": "@@ -97,58 +98,38 @@ public void tearDown() {\n \t\tSecurityContextHolder.clearContext();\n \t}\n \n-\t@Test(expected = IllegalArgumentException.class)\n+\t@Test\n \tpublic void constructorsRejectNullObjectIdentity() {\n-\t\ttry {\n-\t\t\tnew AclImpl(null, 1, this.authzStrategy, this.pgs, null, null, true, new PrincipalSid(\"joe\"));\n-\t\t\tfail(\"Should have thrown IllegalArgumentException\");\n-\t\t}\n-\t\tcatch (IllegalArgumentException expected) {\n-\t\t}\n-\t\tnew AclImpl(null, 1, this.authzStrategy, this.mockAuditLogger);\n+\t\tassertThatIllegalArgumentException().isThrownBy(", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE2MTA2Nw==", "url": "https://github.com/spring-projects/spring-security/pull/9013#discussion_r488161067", "bodyText": "The plugin uses the Formatter logic from Eclipse. I'm not aware of any documentation about when it decides to split lines. In this example, the length of constructor seems to be causing the difference. I can wrap those blocks in // no-format if you like?", "author": "philwebb", "createdAt": "2020-09-14T19:11:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxODQ3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYzMDc5MQ==", "url": "https://github.com/spring-projects/spring-security/pull/9013#discussion_r489630791", "bodyText": "Thanks for the extra explanation. No, I think okay to leave as-is. It's more curiosity on my part.", "author": "jzheaux", "createdAt": "2020-09-16T18:16:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxODQ3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA4MjcxMg==", "url": "https://github.com/spring-projects/spring-security/pull/9013#discussion_r488082712", "bodyText": "While I agree that giving distinct variable names makes the test more readable, are the changes precisely necessary to move to AssertJ?", "author": "jzheaux", "createdAt": "2020-09-14T16:53:54Z", "path": "acl/src/test/java/org/springframework/security/acls/jdbc/JdbcMutableAclServiceTests.java", "diffHunk": "@@ -161,91 +162,80 @@ public void testLifecycle() {\n \t\tMap<ObjectIdentity, Acl> map = this.jdbcMutableAclService\n \t\t\t\t.readAclsById(Arrays.asList(getTopParentOid(), getMiddleParentOid(), getChildOid()));\n \t\tassertThat(map).hasSize(3);\n-\t\t// Replace our current objects with their retrieved versions\n-\t\ttopParent = (MutableAcl) map.get(getTopParentOid());\n-\t\tmiddleParent = (MutableAcl) map.get(getMiddleParentOid());\n-\t\tchild = (MutableAcl) map.get(getChildOid());\n+\t\t// Get the retrieved versions\n+\t\tMutableAcl retrievedTopParent = (MutableAcl) map.get(getTopParentOid());\n+\t\tMutableAcl retrievedMiddleParent = (MutableAcl) map.get(getMiddleParentOid());\n+\t\tMutableAcl retrievedChild = (MutableAcl) map.get(getChildOid());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE1Njk0NA==", "url": "https://github.com/spring-projects/spring-security/pull/9013#discussion_r488156944", "bodyText": "The use of lambdas means that the variables need to be effectively final. The original version reassigned variables which meant compilation failed when they were referenced in the lambda.", "author": "philwebb", "createdAt": "2020-09-14T19:04:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA4MjcxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyNTMwMg==", "url": "https://github.com/spring-projects/spring-security/pull/9013#discussion_r488125302", "bodyText": "Since this method no longer throws an Exception, should that be cleaned up? There may be other methods to which this clean up might also need applying.", "author": "jzheaux", "createdAt": "2020-09-14T18:07:19Z", "path": "core/src/test/java/org/springframework/security/core/authority/mapping/SimpleAuthoritiesMapperTests.java", "diffHunk": "@@ -25,18 +25,19 @@\n import org.springframework.security.core.authority.AuthorityUtils;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n \n /**\n  * @author Luke Taylor\n  */\n public class SimpleAuthoritiesMapperTests {\n \n-\t@Test(expected = IllegalArgumentException.class)\n+\t@Test\n \tpublic void rejectsInvalidCaseConversionFlags() throws Exception {\n \t\tSimpleAuthorityMapper mapper = new SimpleAuthorityMapper();\n \t\tmapper.setConvertToLowerCase(true);\n \t\tmapper.setConvertToUpperCase(true);\n-\t\tmapper.afterPropertiesSet();\n+\t\tassertThatIllegalArgumentException().isThrownBy(mapper::afterPropertiesSet);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzMDU4Ng==", "url": "https://github.com/spring-projects/spring-security/pull/9013#discussion_r488130586", "bodyText": "Should this instead be replaced with @Test?", "author": "jzheaux", "createdAt": "2020-09-14T18:16:37Z", "path": "ldap/src/test/java/org/springframework/security/ldap/authentication/ad/ActiveDirectoryLdapAuthenticationProviderTests.java", "diffHunk": "@@ -250,100 +239,72 @@ public void passwordNeedsResetIsCorrectlyMapped() {\n \t\tthis.provider.contextFactory = createContextFactoryThrowing(\n \t\t\t\tnew AuthenticationException(msg + dataCode + \", xxxx]\"));\n \t\tthis.provider.setConvertSubErrorCodesToExceptions(true);\n-\t\tthis.thrown.expect(BadCredentialsException.class);\n-\t\tthis.thrown.expect(new BaseMatcher<BadCredentialsException>() {\n-\t\t\tprivate Matcher<Object> causeInstance = CoreMatchers\n-\t\t\t\t\t.instanceOf(ActiveDirectoryAuthenticationException.class);\n-\n-\t\t\tprivate Matcher<String> causeDataCode = CoreMatchers.equalTo(dataCode);\n-\n-\t\t\t@Override\n-\t\t\tpublic boolean matches(Object that) {\n-\t\t\t\tThrowable t = (Throwable) that;\n-\t\t\t\tActiveDirectoryAuthenticationException cause = (ActiveDirectoryAuthenticationException) t.getCause();\n-\t\t\t\treturn this.causeInstance.matches(cause) && this.causeDataCode.matches(cause.getDataCode());\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic void describeTo(Description desc) {\n-\t\t\t\tdesc.appendText(\"getCause() \");\n-\t\t\t\tthis.causeInstance.describeTo(desc);\n-\t\t\t\tdesc.appendText(\"getCause().getDataCode() \");\n-\t\t\t\tthis.causeDataCode.describeTo(desc);\n-\t\t\t}\n-\t\t});\n-\t\tthis.provider.authenticate(this.joe);\n+\t\tassertThatExceptionOfType(BadCredentialsException.class).isThrownBy(() -> this.provider.authenticate(this.joe))\n+\t\t\t\t.withCauseInstanceOf(ActiveDirectoryAuthenticationException.class)\n+\t\t\t\t.satisfies((ex) -> assertThat(((ActiveDirectoryAuthenticationException) ex.getCause()).getDataCode())\n+\t\t\t\t\t\t.isEqualTo(dataCode));\n \t}\n \n-\t@Test(expected = CredentialsExpiredException.class)\n+\t@Test\n \tpublic void expiredPasswordIsCorrectlyMapped() {\n \t\tthis.provider.contextFactory = createContextFactoryThrowing(new AuthenticationException(msg + \"532, xxxx]\"));\n-\t\ttry {\n-\t\t\tthis.provider.authenticate(this.joe);\n-\t\t\tfail(\"BadCredentialsException should had been thrown\");\n-\t\t}\n-\t\tcatch (BadCredentialsException expected) {\n-\t\t}\n+\t\tassertThatExceptionOfType(BadCredentialsException.class).isThrownBy(() -> this.provider.authenticate(this.joe));\n \t\tthis.provider.setConvertSubErrorCodesToExceptions(true);\n-\t\tthis.provider.authenticate(this.joe);\n+\t\tassertThatExceptionOfType(CredentialsExpiredException.class)\n+\t\t\t\t.isThrownBy(() -> this.provider.authenticate(this.joe));\n \t}\n \n-\t@Test(expected = DisabledException.class)\n+\t@Test\n \tpublic void accountDisabledIsCorrectlyMapped() {\n \t\tthis.provider.contextFactory = createContextFactoryThrowing(new AuthenticationException(msg + \"533, xxxx]\"));\n \t\tthis.provider.setConvertSubErrorCodesToExceptions(true);\n-\t\tthis.provider.authenticate(this.joe);\n+\t\tassertThatExceptionOfType(DisabledException.class).isThrownBy(() -> this.provider.authenticate(this.joe));\n \t}\n \n-\t@Test(expected = AccountExpiredException.class)\n+\t@Test\n \tpublic void accountExpiredIsCorrectlyMapped() {\n \t\tthis.provider.contextFactory = createContextFactoryThrowing(new AuthenticationException(msg + \"701, xxxx]\"));\n \t\tthis.provider.setConvertSubErrorCodesToExceptions(true);\n-\t\tthis.provider.authenticate(this.joe);\n+\t\tassertThatExceptionOfType(AccountExpiredException.class).isThrownBy(() -> this.provider.authenticate(this.joe));\n \t}\n \n-\t@Test(expected = LockedException.class)\n+\t@Test\n \tpublic void accountLockedIsCorrectlyMapped() {\n \t\tthis.provider.contextFactory = createContextFactoryThrowing(new AuthenticationException(msg + \"775, xxxx]\"));\n \t\tthis.provider.setConvertSubErrorCodesToExceptions(true);\n-\t\tthis.provider.authenticate(this.joe);\n+\t\tassertThatExceptionOfType(LockedException.class).isThrownBy(() -> this.provider.authenticate(this.joe));\n \t}\n \n-\t@Test(expected = BadCredentialsException.class)\n+\t@Test\n \tpublic void unknownErrorCodeIsCorrectlyMapped() {\n \t\tthis.provider.contextFactory = createContextFactoryThrowing(new AuthenticationException(msg + \"999, xxxx]\"));\n \t\tthis.provider.setConvertSubErrorCodesToExceptions(true);\n-\t\tthis.provider.authenticate(this.joe);\n+\t\tassertThatExceptionOfType(BadCredentialsException.class).isThrownBy(() -> this.provider.authenticate(this.joe));\n \t}\n \n-\t@Test(expected = BadCredentialsException.class)\n+\t@Test\n \tpublic void errorWithNoSubcodeIsHandledCleanly() {\n \t\tthis.provider.contextFactory = createContextFactoryThrowing(new AuthenticationException(msg));\n \t\tthis.provider.setConvertSubErrorCodesToExceptions(true);\n-\t\tthis.provider.authenticate(this.joe);\n+\t\tassertThatExceptionOfType(BadCredentialsException.class).isThrownBy(() -> this.provider.authenticate(this.joe));\n \t}\n \n-\t@Test(expected = org.springframework.ldap.CommunicationException.class)\n+\t@Test\n \tpublic void nonAuthenticationExceptionIsConvertedToSpringLdapException() throws Throwable {\n-\t\ttry {\n+\t\tassertThatExceptionOfType(InternalAuthenticationServiceException.class).isThrownBy(() -> {\n \t\t\tthis.provider.contextFactory = createContextFactoryThrowing(new CommunicationException(msg));\n \t\t\tthis.provider.authenticate(this.joe);\n-\t\t}\n-\t\tcatch (InternalAuthenticationServiceException ex) {\n-\t\t\t// Since GH-8418 ldap communication exception is wrapped into\n-\t\t\t// InternalAuthenticationServiceException.\n-\t\t\t// This test is about the wrapped exception, so we throw it.\n-\t\t\tthrow ex.getCause();\n-\t\t}\n+\t\t}).withCauseInstanceOf(org.springframework.ldap.CommunicationException.class);\n \t}\n \n-\t@Test(expected = org.springframework.security.authentication.InternalAuthenticationServiceException.class)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE2MzE3OQ==", "url": "https://github.com/spring-projects/spring-security/pull/9013#discussion_r488163179", "bodyText": "Yes, I must have accidentally deleted it. I'll push a fix then we can rebased when all the other issues are addressed.", "author": "philwebb", "createdAt": "2020-09-14T19:15:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzMDU4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0NjI3Mg==", "url": "https://github.com/spring-projects/spring-security/pull/9013#discussion_r488146272", "bodyText": "This is another spot where I'm confused about the line wrapping. Compare this to line 220 and 221 where the content is identical, but separated across two lines.", "author": "jzheaux", "createdAt": "2020-09-14T18:45:05Z", "path": "web/src/test/java/org/springframework/security/web/server/authentication/SwitchUserWebFilterTests.java", "diffHunk": "@@ -183,11 +179,12 @@ public void switchUserWhenUsernameIsMissingThenThrowException() {\n \t\t\t\t.from(MockServerHttpRequest.post(\"/login/impersonate\"));\n \t\tfinal WebFilterChain chain = mock(WebFilterChain.class);\n \t\tfinal SecurityContextImpl securityContext = new SecurityContextImpl(mock(Authentication.class));\n-\t\tthis.exceptionRule.expect(IllegalArgumentException.class);\n-\t\tthis.exceptionRule.expectMessage(\"The userName can not be null.\");\n-\t\tthis.switchUserWebFilter.filter(exchange, chain)\n-\t\t\t\t.subscriberContext(ReactiveSecurityContextHolder.withSecurityContext(Mono.just(securityContext)))\n-\t\t\t\t.block();\n+\t\tassertThatIllegalArgumentException()\n+\t\t\t\t.isThrownBy(() -> this.switchUserWebFilter.filter(exchange, chain)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE2NDg0MQ==", "url": "https://github.com/spring-projects/spring-security/pull/9013#discussion_r488164841", "bodyText": "This is related to the length of the contained line. Extracting the holder to a variable helps quite a bit. I'll push a fix.", "author": "philwebb", "createdAt": "2020-09-14T19:18:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0NjI3Mg=="}], "type": "inlineReview"}, {"oid": "245b09eda47d930dfb1056c897b48d8976aead11", "url": "https://github.com/spring-projects/spring-security/commit/245b09eda47d930dfb1056c897b48d8976aead11", "message": "Replace expected @Test attributes with AssertJ\n\nReplace JUnit expected @Test attributes with AssertJ calls.", "committedDate": "2020-09-17T04:21:50Z", "type": "commit"}, {"oid": "245b09eda47d930dfb1056c897b48d8976aead11", "url": "https://github.com/spring-projects/spring-security/commit/245b09eda47d930dfb1056c897b48d8976aead11", "message": "Replace expected @Test attributes with AssertJ\n\nReplace JUnit expected @Test attributes with AssertJ calls.", "committedDate": "2020-09-17T04:21:50Z", "type": "forcePushed"}]}