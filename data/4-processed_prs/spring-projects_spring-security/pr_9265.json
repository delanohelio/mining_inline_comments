{"pr_number": 9265, "pr_title": "Add permissionsPolicy http header", "pr_createdAt": "2020-12-05T08:59:25Z", "pr_url": "https://github.com/spring-projects/spring-security/pull/9265", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMxODg3Ng==", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r537318876", "bodyText": "This will be in version 5.5, since that is our next minor release.", "author": "eleftherias", "createdAt": "2020-12-07T08:34:54Z", "path": "config/src/main/java/org/springframework/security/config/annotation/web/configurers/HeadersConfigurer.java", "diffHunk": "@@ -487,12 +491,34 @@ public ReferrerPolicyConfig referrerPolicy(ReferrerPolicy policy) {\n \t * @throws IllegalArgumentException if policyDirectives is {@code null} or empty\n \t * @since 5.1\n \t * @see FeaturePolicyHeaderWriter\n+\t * @deprecated Use {@link #permissionsPolicy(String)} instead.\n \t */\n+\t@Deprecated\n \tpublic FeaturePolicyConfig featurePolicy(String policyDirectives) {\n \t\tthis.featurePolicy.writer = new FeaturePolicyHeaderWriter(policyDirectives);\n \t\treturn this.featurePolicy;\n \t}\n \n+\t/**\n+\t * Allows configuration for\n+\t * <a href=\"https://w3c.github.io/webappsec-permissions-policy/\"> Permissions\n+\t * Policy</a>.\n+\t * <p>\n+\t * Calling this method automatically enables (includes) the {@code Permissions-Policy}\n+\t * header in the response using the supplied policy directive(s).\n+\t * <p>\n+\t * Configuration is provided to the {@link PermissionsPolicyHeaderWriter} which is\n+\t * responsible for writing the header.\n+\t * @return the {@link PermissionsPolicyConfig} for additional configuration\n+\t * @throws IllegalArgumentException if policyDirectives is {@code null} or empty\n+\t * @since 5.4", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMzMjcwOQ==", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r537332709", "bodyText": "In order to facilitate the lambda DSL we will need a method that accepts a Customizer, permissionsPolicy(Customizer<PermissionsPolicyConfig> permissionsPolicyConfigCustomizer(). See HeadersConfigurer<H> referrerPolicy(Customizer<ReferrerPolicyConfig> referrerPolicyCustomizer) as an example.", "author": "eleftherias", "createdAt": "2020-12-07T08:56:59Z", "path": "config/src/main/java/org/springframework/security/config/annotation/web/configurers/HeadersConfigurer.java", "diffHunk": "@@ -487,12 +491,34 @@ public ReferrerPolicyConfig referrerPolicy(ReferrerPolicy policy) {\n \t * @throws IllegalArgumentException if policyDirectives is {@code null} or empty\n \t * @since 5.1\n \t * @see FeaturePolicyHeaderWriter\n+\t * @deprecated Use {@link #permissionsPolicy(String)} instead.\n \t */\n+\t@Deprecated\n \tpublic FeaturePolicyConfig featurePolicy(String policyDirectives) {\n \t\tthis.featurePolicy.writer = new FeaturePolicyHeaderWriter(policyDirectives);\n \t\treturn this.featurePolicy;\n \t}\n \n+\t/**\n+\t * Allows configuration for\n+\t * <a href=\"https://w3c.github.io/webappsec-permissions-policy/\"> Permissions\n+\t * Policy</a>.\n+\t * <p>\n+\t * Calling this method automatically enables (includes) the {@code Permissions-Policy}\n+\t * header in the response using the supplied policy directive(s).\n+\t * <p>\n+\t * Configuration is provided to the {@link PermissionsPolicyHeaderWriter} which is\n+\t * responsible for writing the header.\n+\t * @return the {@link PermissionsPolicyConfig} for additional configuration\n+\t * @throws IllegalArgumentException if policyDirectives is {@code null} or empty\n+\t * @since 5.4\n+\t * @see PermissionsPolicyHeaderWriter\n+\t */\n+\tpublic PermissionsPolicyConfig permissionsPolicy(String policyDirectives) {\n+\t\tthis.permissionsPolicy.writer = new PermissionsPolicyHeaderWriter(policyDirectives);\n+\t\treturn this.permissionsPolicy;\n+\t}\n+", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMzNTU4Mg==", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r537335582", "bodyText": "Rather than accepting the policyDirectives as a parameter here, we should make this part of the PermissionsPolicyConfig.\nThis means the configuration will look like this:\nhttp\n\t.headers()\n\t\t.permissionsPolicy()\n\t\t\t.policyDirectives(\"geolocation 'self'\");\n\nand it will be compatible with the lambda DSL.", "author": "eleftherias", "createdAt": "2020-12-07T09:01:25Z", "path": "config/src/main/java/org/springframework/security/config/annotation/web/configurers/HeadersConfigurer.java", "diffHunk": "@@ -487,12 +491,34 @@ public ReferrerPolicyConfig referrerPolicy(ReferrerPolicy policy) {\n \t * @throws IllegalArgumentException if policyDirectives is {@code null} or empty\n \t * @since 5.1\n \t * @see FeaturePolicyHeaderWriter\n+\t * @deprecated Use {@link #permissionsPolicy(String)} instead.\n \t */\n+\t@Deprecated\n \tpublic FeaturePolicyConfig featurePolicy(String policyDirectives) {\n \t\tthis.featurePolicy.writer = new FeaturePolicyHeaderWriter(policyDirectives);\n \t\treturn this.featurePolicy;\n \t}\n \n+\t/**\n+\t * Allows configuration for\n+\t * <a href=\"https://w3c.github.io/webappsec-permissions-policy/\"> Permissions\n+\t * Policy</a>.\n+\t * <p>\n+\t * Calling this method automatically enables (includes) the {@code Permissions-Policy}\n+\t * header in the response using the supplied policy directive(s).\n+\t * <p>\n+\t * Configuration is provided to the {@link PermissionsPolicyHeaderWriter} which is\n+\t * responsible for writing the header.\n+\t * @return the {@link PermissionsPolicyConfig} for additional configuration\n+\t * @throws IllegalArgumentException if policyDirectives is {@code null} or empty\n+\t * @since 5.4\n+\t * @see PermissionsPolicyHeaderWriter\n+\t */\n+\tpublic PermissionsPolicyConfig permissionsPolicy(String policyDirectives) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMzNzMzMw==", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r537337333", "bodyText": "Similar to the feedback in HeadersConfigurer, this needs to be configurable via the lambda DSL.", "author": "eleftherias", "createdAt": "2020-12-07T09:04:16Z", "path": "config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java", "diffHunk": "@@ -2402,6 +2406,15 @@ public FeaturePolicySpec featurePolicy(String policyDirectives) {\n \t\t\treturn new FeaturePolicySpec(policyDirectives);\n \t\t}\n \n+\t\t/**\n+\t\t * Configures {@code Permissions-Policy} response header.\n+\t\t * @param policyDirectives the policy directive(s)\n+\t\t * @return the {@link PermissionsPolicySpec} to configure\n+\t\t */\n+\t\tpublic PermissionsPolicySpec permissionsPolicy(String policyDirectives) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMzODIyNw==", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r537338227", "bodyText": "The copyright should be up to 2020.", "author": "eleftherias", "createdAt": "2020-12-07T09:05:36Z", "path": "web/src/main/java/org/springframework/security/web/header/writers/PermissionsPolicyHeaderWriter.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2002-2019 the original author or authors.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU0MzE3Mw==", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r538543173", "bodyText": "We still need a PermissionsPolicyConfig permissionsPolicy() method with no parameters for the users that do not use the lambda DSL.", "author": "eleftherias", "createdAt": "2020-12-08T16:07:23Z", "path": "config/src/main/java/org/springframework/security/config/annotation/web/configurers/HeadersConfigurer.java", "diffHunk": "@@ -487,12 +491,35 @@ public ReferrerPolicyConfig referrerPolicy(ReferrerPolicy policy) {\n \t * @throws IllegalArgumentException if policyDirectives is {@code null} or empty\n \t * @since 5.1\n \t * @see FeaturePolicyHeaderWriter\n+\t * @deprecated Use {@link #permissionsPolicy(Customizer)} instead.\n \t */\n+\t@Deprecated\n \tpublic FeaturePolicyConfig featurePolicy(String policyDirectives) {\n \t\tthis.featurePolicy.writer = new FeaturePolicyHeaderWriter(policyDirectives);\n \t\treturn this.featurePolicy;\n \t}\n \n+\t/**\n+\t * Allows configuration for\n+\t * <a href=\"https://w3c.github.io/webappsec-permissions-policy/\"> Permissions\n+\t * Policy</a>.\n+\t * <p>\n+\t * Calling this method automatically enables (includes) the {@code Permissions-Policy}\n+\t * header in the response using the supplied policy directive(s).\n+\t * <p>\n+\t * Configuration is provided to the {@link PermissionsPolicyHeaderWriter} which is\n+\t * responsible for writing the header.\n+\t * @return the {@link PermissionsPolicyConfig} for additional configuration\n+\t * @throws IllegalArgumentException if policyDirectives is {@code null} or empty\n+\t * @since 5.5\n+\t * @see PermissionsPolicyHeaderWriter\n+\t */\n+\tpublic PermissionsPolicyConfig permissionsPolicy(Customizer<PermissionsPolicyConfig> permissionsPolicyCustomizer) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU0NTI0Mw==", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r538545243", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @throws IllegalArgumentException if policyDirectives is {@code null} or empty\n          \n          \n            \n            \t * @throws IllegalArgumentException if policy is {@code null} or empty", "author": "eleftherias", "createdAt": "2020-12-08T16:09:09Z", "path": "web/src/main/java/org/springframework/security/web/header/writers/PermissionsPolicyHeaderWriter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.web.header.writers;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.security.web.header.HeaderWriter;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Provides support for\n+ * <a href=\"https://w3c.github.io/webappsec-permissions-policy//\">Permisisons Policy</a>.\n+ * <p>\n+ * Permissions Policy allows web developers to selectively enable, disable, and modify the\n+ * behavior of certain APIs and web features in the browser.\n+ * <p>\n+ * A declaration of a permissions policy contains a set of security policy directives,\n+ * each responsible for declaring the restrictions for a particular feature type.\n+ *\n+ * @author Christophe Gilles\n+ * @since 5.5\n+ */\n+public final class PermissionsPolicyHeaderWriter implements HeaderWriter {\n+\n+\tprivate static final String PERMISSIONS_POLICY_HEADER = \"Permissions-Policy\";\n+\n+\tprivate String policy;\n+\n+\t/**\n+\t * Create a new instance of {@link PermissionsPolicyHeaderWriter}.\n+\t */\n+\tpublic PermissionsPolicyHeaderWriter() {\n+\t\tthis(\"\");\n+\t}\n+\n+\t/**\n+\t * Create a new instance of {@link PermissionsPolicyHeaderWriter} with supplied\n+\t * security policy directive(s).\n+\t * @param policy the security policy directive(s)\n+\t * @throws IllegalArgumentException if policyDirectives is {@code null} or empty", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU1MDQ4MA==", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r538550480", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn getClass().getName() + \" [policyDirectives=\" + this.policy + \"]\";\n          \n          \n            \n            \t\treturn getClass().getName() + \" [policy=\" + this.policy + \"]\";", "author": "eleftherias", "createdAt": "2020-12-08T16:13:34Z", "path": "web/src/main/java/org/springframework/security/web/header/writers/PermissionsPolicyHeaderWriter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.web.header.writers;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.security.web.header.HeaderWriter;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Provides support for\n+ * <a href=\"https://w3c.github.io/webappsec-permissions-policy//\">Permisisons Policy</a>.\n+ * <p>\n+ * Permissions Policy allows web developers to selectively enable, disable, and modify the\n+ * behavior of certain APIs and web features in the browser.\n+ * <p>\n+ * A declaration of a permissions policy contains a set of security policy directives,\n+ * each responsible for declaring the restrictions for a particular feature type.\n+ *\n+ * @author Christophe Gilles\n+ * @since 5.5\n+ */\n+public final class PermissionsPolicyHeaderWriter implements HeaderWriter {\n+\n+\tprivate static final String PERMISSIONS_POLICY_HEADER = \"Permissions-Policy\";\n+\n+\tprivate String policy;\n+\n+\t/**\n+\t * Create a new instance of {@link PermissionsPolicyHeaderWriter}.\n+\t */\n+\tpublic PermissionsPolicyHeaderWriter() {\n+\t\tthis(\"\");\n+\t}\n+\n+\t/**\n+\t * Create a new instance of {@link PermissionsPolicyHeaderWriter} with supplied\n+\t * security policy directive(s).\n+\t * @param policy the security policy directive(s)\n+\t * @throws IllegalArgumentException if policyDirectives is {@code null} or empty\n+\t */\n+\tpublic PermissionsPolicyHeaderWriter(String policy) {\n+\t\tsetPolicy(policy);\n+\t}\n+\n+\t/**\n+\t * Sets the policy to be used in the response header.\n+\t * @param policy a permissions policy\n+\t * @throws IllegalArgumentException if policy is null\n+\t */\n+\tpublic void setPolicy(String policy) {\n+\t\tAssert.notNull(policy, \"policy can not be null\");\n+\t\tthis.policy = policy;\n+\t}\n+\n+\t@Override\n+\tpublic void writeHeaders(HttpServletRequest request, HttpServletResponse response) {\n+\t\tif (!response.containsHeader(PERMISSIONS_POLICY_HEADER)) {\n+\t\t\tresponse.setHeader(PERMISSIONS_POLICY_HEADER, this.policy);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn getClass().getName() + \" [policyDirectives=\" + this.policy + \"]\";", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU1MDg5OA==", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r538550898", "bodyText": "This should go up to 2020", "author": "eleftherias", "createdAt": "2020-12-08T16:13:52Z", "path": "web/src/main/java/org/springframework/security/web/server/header/PermissionsPolicyServerHttpHeadersWriter.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2002-2018 the original author or authors.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU1NDI0OQ==", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r538554249", "bodyText": "We should keep the parameter names consistent across this class and PermissionsPolicyConfig. We can name both of them either \"permissionsPolicy\" or \"policy\".", "author": "eleftherias", "createdAt": "2020-12-08T16:16:55Z", "path": "config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java", "diffHunk": "@@ -2677,6 +2701,42 @@ public HeaderSpec and() {\n \n \t\t}\n \n+\t\t/**\n+\t\t * Configures {@code Permissions-Policy} response header.\n+\t\t *\n+\t\t * @since 5.5\n+\t\t * @see #permissionsPolicy(String)\n+\t\t */\n+\t\tpublic final class PermissionsPolicySpec {\n+\n+\t\t\tprivate PermissionsPolicySpec() {\n+\t\t\t}\n+\n+\t\t\tprivate PermissionsPolicySpec(String permissionsPolicy) {\n+\t\t\t\tHeaderSpec.this.permissionsPolicy.setPolicy(permissionsPolicy);\n+\t\t\t}\n+\n+\t\t\t/**\n+\t\t\t * Sets the policy to be used in the response header.\n+\t\t\t * @param permissionsPolicy a referrer policy\n+\t\t\t * @return the {@link PermissionsPolicySpec} to continue configuring\n+\t\t\t */\n+\t\t\tpublic PermissionsPolicySpec policy(String permissionsPolicy) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU1NTI3NQ==", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r538555275", "bodyText": "This doesn't need to accept any parameters since \"permissionsPolicy\" is configurable in PermissionsPolicySpec.", "author": "eleftherias", "createdAt": "2020-12-08T16:17:46Z", "path": "config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java", "diffHunk": "@@ -2395,13 +2399,33 @@ public HeaderSpec contentSecurityPolicy(Customizer<ContentSecurityPolicySpec> co\n \n \t\t/**\n \t\t * Configures {@code Feature-Policy} response header.\n-\t\t * @param policyDirectives the policy directive(s)\n+\t\t * @param policyDirectives the policy\n \t\t * @return the {@link FeaturePolicySpec} to configure\n \t\t */\n \t\tpublic FeaturePolicySpec featurePolicy(String policyDirectives) {\n \t\t\treturn new FeaturePolicySpec(policyDirectives);\n \t\t}\n \n+\t\t/**\n+\t\t * Configures {@code Permissions-Policy} response header.\n+\t\t * @param permissionsPolicy the policy\n+\t\t * @return the {@link PermissionsPolicySpec} to configure\n+\t\t */\n+\t\tpublic PermissionsPolicySpec permissionsPolicy(String permissionsPolicy) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU1OTE0Mw==", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r538559143", "bodyText": "This should go up to 2020.", "author": "eleftherias", "createdAt": "2020-12-08T16:21:17Z", "path": "web/src/test/java/org/springframework/security/web/header/writers/PermissionsPolicyHeaderWriterTests.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2002-2019 the original author or authors.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI1NzIxMQ==", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r540257211", "bodyText": "I believe this constructor is unused.", "author": "eleftherias", "createdAt": "2020-12-10T15:23:29Z", "path": "config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java", "diffHunk": "@@ -2677,6 +2700,42 @@ public HeaderSpec and() {\n \n \t\t}\n \n+\t\t/**\n+\t\t * Configures {@code Permissions-Policy} response header.\n+\t\t *\n+\t\t * @since 5.5\n+\t\t * @see #permissionsPolicy()\n+\t\t */\n+\t\tpublic final class PermissionsPolicySpec {\n+\n+\t\t\tprivate PermissionsPolicySpec() {\n+\t\t\t}\n+\n+\t\t\tprivate PermissionsPolicySpec(String permissionsPolicy) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI2MTUyOQ==", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r540261529", "bodyText": "I don't think this should set the policy to \"\".\nWe want to ensure that users are configuring the policy if they are using the PermissionsPolicyHeaderWriter.\nThis will allow them to create a PermissionsPolicyHeaderWriter without specifying the policy.", "author": "eleftherias", "createdAt": "2020-12-10T15:28:35Z", "path": "web/src/main/java/org/springframework/security/web/header/writers/PermissionsPolicyHeaderWriter.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.web.header.writers;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.security.web.header.HeaderWriter;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Provides support for\n+ * <a href=\"https://w3c.github.io/webappsec-permissions-policy//\">Permisisons Policy</a>.\n+ * <p>\n+ * Permissions Policy allows web developers to selectively enable, disable, and modify the\n+ * behavior of certain APIs and web features in the browser.\n+ * <p>\n+ * A declaration of a permissions policy contains a set of security policies, each\n+ * responsible for declaring the restrictions for a particular feature type.\n+ *\n+ * @author Christophe Gilles\n+ * @since 5.5\n+ */\n+public final class PermissionsPolicyHeaderWriter implements HeaderWriter {\n+\n+\tprivate static final String PERMISSIONS_POLICY_HEADER = \"Permissions-Policy\";\n+\n+\tprivate String policy;\n+\n+\t/**\n+\t * Create a new instance of {@link PermissionsPolicyHeaderWriter}.\n+\t */\n+\tpublic PermissionsPolicyHeaderWriter() {\n+\t\tthis(\"\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI3NTI4OQ==", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r540275289", "bodyText": "Ok so we should have two ways to set the Policy ? With String and with Lambda ?", "author": "kris2kris", "createdAt": "2020-12-10T15:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI2MTUyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI3ODkzMw==", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r540278933", "bodyText": "Yes\nhttp\n\t.headers()\n\t\t.permissionsPolicy()\n\t\t\t.policy(\"geolocation 'self'\");\n\nand\nhttp\n\t.headers(headers -> headers\n\t\t.permissionsPolicy(permissions -> permissions\n\t\t\t.policy(\"geolocation 'self'\")\n\t\t)\n\t);", "author": "eleftherias", "createdAt": "2020-12-10T15:49:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI2MTUyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMxNTAzNw==", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r540315037", "bodyText": "Ok, I change constructor and add some tests to be sure everything is ok", "author": "kris2kris", "createdAt": "2020-12-10T16:33:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI2MTUyOQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg0NjUwNA==", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r540846504", "bodyText": "I think I confused you with my previous comment. This was correct before.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic PermissionsPolicyConfig permissionsPolicy(String policy) {\n          \n          \n            \n            \t\tthis.permissionsPolicy.writer = new PermissionsPolicyHeaderWriter(policy);\n          \n          \n            \n            \t\treturn this.permissionsPolicy;\n          \n          \n            \n            \t}\n          \n          \n            \n            \tpublic PermissionsPolicyConfig permissionsPolicy() {\n          \n          \n            \n            \t\tthis.permissionsPolicy.writer = new PermissionsPolicyHeaderWriter();\n          \n          \n            \n            \t\treturn this.permissionsPolicy;\n          \n          \n            \n            \t}", "author": "eleftherias", "createdAt": "2020-12-11T10:28:58Z", "path": "config/src/main/java/org/springframework/security/config/annotation/web/configurers/HeadersConfigurer.java", "diffHunk": "@@ -487,12 +491,58 @@ public ReferrerPolicyConfig referrerPolicy(ReferrerPolicy policy) {\n \t * @throws IllegalArgumentException if policyDirectives is {@code null} or empty\n \t * @since 5.1\n \t * @see FeaturePolicyHeaderWriter\n+\t * @deprecated Use {@link #permissionsPolicy(Customizer)} instead.\n \t */\n+\t@Deprecated\n \tpublic FeaturePolicyConfig featurePolicy(String policyDirectives) {\n \t\tthis.featurePolicy.writer = new FeaturePolicyHeaderWriter(policyDirectives);\n \t\treturn this.featurePolicy;\n \t}\n \n+\t/**\n+\t * <p>\n+\t * Allows configuration for\n+\t * <a href=\"https://w3c.github.io/webappsec-permissions-policy/\">Permissions\n+\t * Policy</a>.\n+\t * </p>\n+\t *\n+\t * <p>\n+\t * Configuration is provided to the {@link PermissionsPolicyHeaderWriter} which\n+\t * support the writing of the header as detailed in the W3C Technical Report:\n+\t * </p>\n+\t * <ul>\n+\t * <li>Permissions-Policy</li>\n+\t * </ul>\n+\t * @return the {@link PermissionsPolicyConfig} for additional configuration\n+\t * @since 5.5\n+\t * @see PermissionsPolicyHeaderWriter\n+\t */\n+\tpublic PermissionsPolicyConfig permissionsPolicy(String policy) {\n+\t\tthis.permissionsPolicy.writer = new PermissionsPolicyHeaderWriter(policy);\n+\t\treturn this.permissionsPolicy;\n+\t}", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg3Nzc5Mg==", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r540877792", "bodyText": "Oh yes, it's my bad... I revert the change and update the tests", "author": "kris2kris", "createdAt": "2020-12-11T11:22:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg0NjUwNA=="}], "type": "inlineReview"}, {"oid": "f832fa7d2f47775b99522efda14fb61f20e8df45", "url": "https://github.com/spring-projects/spring-security/commit/f832fa7d2f47775b99522efda14fb61f20e8df45", "message": "Add permissionsPolicy http header", "committedDate": "2020-12-11T11:14:31Z", "type": "commit"}, {"oid": "f832fa7d2f47775b99522efda14fb61f20e8df45", "url": "https://github.com/spring-projects/spring-security/commit/f832fa7d2f47775b99522efda14fb61f20e8df45", "message": "Add permissionsPolicy http header", "committedDate": "2020-12-11T11:14:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE0MDExMQ==", "url": "https://github.com/spring-projects/spring-security/pull/9265#discussion_r543140111", "bodyText": "nit: it looks like an unused import.", "author": "php-coder", "createdAt": "2020-12-15T08:27:03Z", "path": "config/src/main/kotlin/org/springframework/security/config/web/server/ServerPermissionsPolicyDsl.kt", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2002-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.security.config.web.server\n+\n+import org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter", "originalCommit": "f832fa7d2f47775b99522efda14fb61f20e8df45", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}