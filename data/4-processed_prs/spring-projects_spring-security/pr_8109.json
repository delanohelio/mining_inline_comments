{"pr_number": 8109, "pr_title": "Fix exception from empty basic auth header token", "pr_createdAt": "2020-03-12T20:35:40Z", "pr_url": "https://github.com/spring-projects/spring-security/pull/8109", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIyNjU4NQ==", "url": "https://github.com/spring-projects/spring-security/pull/8109#discussion_r392226585", "bodyText": "Although this test name follows the same pattern as other tests in this class, we would like any new tests to follow the convention methodWhenConditionThenResult.\nA possible name could be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testWhenEmptyBasicAuthorizationHeaderTokenThenIgnored() {\n          \n          \n            \n            \tpublic void requestWhenEmptyBasicAuthorizationHeaderTokenThenIgnored() {", "author": "eleftherias", "createdAt": "2020-03-13T13:28:12Z", "path": "web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationConverterTests.java", "diffHunk": "@@ -111,4 +111,15 @@ public void convertWhenEmptyPassword() {\n \t\tassertThat(authentication.getName()).isEqualTo(\"rod\");\n \t\tassertThat(authentication.getCredentials()).isEqualTo(\"\");\n \t}\n+\n+\t@Test\n+\tpublic void testWhenEmptyBasicAuthorizationHeaderTokenThenIgnored() {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQzODcwMw==", "url": "https://github.com/spring-projects/spring-security/pull/8109#discussion_r392438703", "bodyText": "Please add the expected exception to the @Test annotation.\nFor an example see \n  \n    \n      spring-security/web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationConverterTests.java\n    \n    \n        Lines 94 to 100\n      in\n      7411f25\n    \n    \n    \n    \n\n        \n          \n           @Test(expected = BadCredentialsException.class) \n        \n\n        \n          \n           public void testWhenInvalidBase64ThenError() { \n        \n\n        \n          \n           \tMockHttpServletRequest request = new MockHttpServletRequest(); \n        \n\n        \n          \n           \trequest.addHeader(\"Authorization\", \"Basic NOT_VALID_BASE64\"); \n        \n\n        \n          \n            \n        \n\n        \n          \n           \tconverter.convert(request); \n        \n\n        \n          \n           }", "author": "eleftherias", "createdAt": "2020-03-13T19:55:32Z", "path": "web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationConverterTests.java", "diffHunk": "@@ -111,4 +112,12 @@ public void convertWhenEmptyPassword() {\n \t\tassertThat(authentication.getName()).isEqualTo(\"rod\");\n \t\tassertThat(authentication.getCredentials()).isEqualTo(\"\");\n \t}\n+\n+\t@Test", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0MzUzMw==", "url": "https://github.com/spring-projects/spring-security/pull/8109#discussion_r392443533", "bodyText": "I followed the convention of using AssertJ in new tests. So used assertThatThrownBy.", "author": "zeeshanadnan", "createdAt": "2020-03-13T20:08:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQzODcwMw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEwODg3Nw==", "url": "https://github.com/spring-projects/spring-security/pull/8109#discussion_r393108877", "bodyText": "Please update the test name, since the header is not ignored, but rather returns unauthorized.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void requestWhenEmptyBasicAuthorizationHeaderTokenThenIgnored() throws Exception {\n          \n          \n            \n            \tpublic void requestWhenEmptyBasicAuthorizationHeaderTokenThenUnauthorized() throws Exception {", "author": "eleftherias", "createdAt": "2020-03-16T15:27:23Z", "path": "web/src/test/java/org/springframework/security/web/authentication/www/BasicAuthenticationFilterTests.java", "diffHunk": "@@ -424,4 +424,20 @@ public void doFilterWhenTokenAndFilterCharsetDoNotMatchThenUnauthorized() throws\n \t\tassertThat(SecurityContextHolder.getContext().getAuthentication()).isNull();\n \t}\n \n+\t@Test\n+\tpublic void requestWhenEmptyBasicAuthorizationHeaderTokenThenIgnored() throws Exception {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a7525b1d5a0cb8cbf8c7ed76ad37896ee93593eb", "url": "https://github.com/spring-projects/spring-security/commit/a7525b1d5a0cb8cbf8c7ed76ad37896ee93593eb", "message": "Fix exception for empty basic auth header token\nfixes spring-projectsgh-7976", "committedDate": "2020-03-16T15:38:31Z", "type": "commit"}, {"oid": "a7525b1d5a0cb8cbf8c7ed76ad37896ee93593eb", "url": "https://github.com/spring-projects/spring-security/commit/a7525b1d5a0cb8cbf8c7ed76ad37896ee93593eb", "message": "Fix exception for empty basic auth header token\nfixes spring-projectsgh-7976", "committedDate": "2020-03-16T15:38:31Z", "type": "forcePushed"}]}