{"pr_number": 433, "pr_title": "Add provider config management operations.", "pr_createdAt": "2020-06-04T20:19:10Z", "pr_url": "https://github.com/firebase/firebase-admin-java/pull/433", "timeline": [{"oid": "392bf67e74c77bcf6d882a50a4e044bbb8fc8f2a", "url": "https://github.com/firebase/firebase-admin-java/commit/392bf67e74c77bcf6d882a50a4e044bbb8fc8f2a", "message": "Add OIDC Auth provider config class (#397)\n\nAdds OIDC provider config class and base class. This is part of adding multi-tenancy support (see issue #332).", "committedDate": "2020-06-04T20:50:53Z", "type": "commit"}, {"oid": "a2fa7824d1c8ac7cf0ff518890ea1157afdcedef", "url": "https://github.com/firebase/firebase-admin-java/commit/a2fa7824d1c8ac7cf0ff518890ea1157afdcedef", "message": "Fix CreateRequest chaining and provider ID extraction. (#399)\n\nThis makes the base `CreateRequest` setters return the proper instance type, so that methods can be chained. This also makes it so that the provider ID can be parsed from the resource name.\r\n\r\nA package private `getProviderId()` method was also added, which will be needed by the `FirebaseUserManager` class when the provider config operations are added there.\r\n\r\nAlso renamed `AuthProviderConfig` to `ProviderConfig` since \"Auth\" is redundant with the package name.\r\n\r\nThis work is part of adding multi-tenancy support (see issue #332).", "committedDate": "2020-06-04T20:50:53Z", "type": "commit"}, {"oid": "db81c068167bb10f4577b7ae2b70a68c02426fec", "url": "https://github.com/firebase/firebase-admin-java/commit/db81c068167bb10f4577b7ae2b70a68c02426fec", "message": "Add operations to create and delete OIDC provider configs. (#400)\n\nThis adds an operation to create OIDC provider configs, as well as an operation to delete provider configs. These operations can be performed using either the tenant-aware or standard Firebase client.\n\nThis work is part of adding multi-tenancy support (see issue #332).", "committedDate": "2020-06-04T21:21:53Z", "type": "commit"}, {"oid": "424d9ce4b9349506ca25b95779fb1d7d5b6c8436", "url": "https://github.com/firebase/firebase-admin-java/commit/424d9ce4b9349506ca25b95779fb1d7d5b6c8436", "message": "Add getOidcProviderConfig operation. (#401)\n\nThis adds an operation to get OIDC provider configs (can be done using either the tenant-aware or standard Firebase client).\r\n\r\nThis work is part of adding multi-tenancy support (see issue #332).", "committedDate": "2020-06-04T21:21:57Z", "type": "commit"}, {"oid": "f728f6343881a604c59760cf8783f99ef6c83b8c", "url": "https://github.com/firebase/firebase-admin-java/commit/f728f6343881a604c59760cf8783f99ef6c83b8c", "message": "Add operation to update OIDC provider configs. (#402)\n\nThis adds an operation to update OIDC provider configs (can be done using either the tenant-aware or standard Firebase client).\r\n\r\nThis work is part of adding multi-tenancy support (see issue #332).", "committedDate": "2020-06-04T21:21:57Z", "type": "commit"}, {"oid": "9052434b1e1b91fd61783d8162e5297e747e5972", "url": "https://github.com/firebase/firebase-admin-java/commit/9052434b1e1b91fd61783d8162e5297e747e5972", "message": "Add operation to list OIDC provider configs. (#404)\n\nThis adds an operation to list OIDC provider configs (can be done using either the tenant-aware or standard Firebase client).\r\n\r\nThis work is part of adding multi-tenancy support (see issue #332).", "committedDate": "2020-06-04T21:21:57Z", "type": "commit"}, {"oid": "580eeddac96db7ae4a4b0836ddf176b2c63e1e8d", "url": "https://github.com/firebase/firebase-admin-java/commit/580eeddac96db7ae4a4b0836ddf176b2c63e1e8d", "message": "Move tenant-aware integration tests to separate class (#405)\n\nMove tenant-aware integration tests to separate class. This simplifies the setup and teardown required for these tests.", "committedDate": "2020-06-04T21:21:57Z", "type": "commit"}, {"oid": "36c27bece218a71bfd4a0f9ed90f6f2ae6b1961f", "url": "https://github.com/firebase/firebase-admin-java/commit/36c27bece218a71bfd4a0f9ed90f6f2ae6b1961f", "message": "Add missing listOidcProviderConfigs method. (#406)\n\nEach asynchronous method is supposed to have a synchronous counterpart. This was supposed to be included when I initially added the operation to list OIDC provider configs.", "committedDate": "2020-06-04T21:21:57Z", "type": "commit"}, {"oid": "732a90870a4503cf9232b75dcf1781bf4601498c", "url": "https://github.com/firebase/firebase-admin-java/commit/732a90870a4503cf9232b75dcf1781bf4601498c", "message": "Add validation to provider config ID. (#410)\n\nThe OIDC Auth provider config ID must begin with \"oidc.\". This validation is being done in other APIs (e.g. Go), so we should do it here as well.\r\n\r\nI've moved assertValidUrl to the base class so that it can be reused for SamlProviderConfig, once that class is added.", "committedDate": "2020-06-04T21:21:58Z", "type": "commit"}, {"oid": "c323314c1e872f0d2942fc27746bf3d3c1b4069a", "url": "https://github.com/firebase/firebase-admin-java/commit/c323314c1e872f0d2942fc27746bf3d3c1b4069a", "message": "fix(auth): Ensuring test user account cleanup with a Rule (#409)\n\n* fix(auth): Ensuring test user account cleanup with a Rule\n\n* Updated copyright holder", "committedDate": "2020-06-04T21:24:12Z", "type": "commit"}, {"oid": "7b550455cd4c6159a05222db01656c23da85c6ac", "url": "https://github.com/firebase/firebase-admin-java/commit/7b550455cd4c6159a05222db01656c23da85c6ac", "message": "Rename OIDC delete operation and refactor integration tests. (#411)\n\nI've renamed the delete operation since we need separate methods for deleting OIDC and SAML provider configs.\r\n\r\nI've also created a ProviderConfigTestUtils class to house shared logic between TenantAwareFirebaseAuthIT and FirebaseAuthIT, and I've added a TemporaryProviderConfig class to make it easier for provider configs to be cleaned up automatically. I've structured this class in such a way that we can easily tack on logic to cleanup SAML provider configs as well.\r\n\r\nI've also decided to remove testGetUserWithMultipleTenantIds. I initially wrote this test to understand how tenant-aware auths and tenant-agnostic auths interacted with one another. In its existing state, it appears to be leaking created users, and in order to resolve this with TemporaryUser, we would need to declare multiple TemporaryUser objects as rules. I think it's better to avoid this complexity and remove this test. After all, this integration test is mainly making assertions about the server's behavior and not our behavior.", "committedDate": "2020-06-04T21:24:16Z", "type": "commit"}, {"oid": "99b07bdbf46c40ce9d48a4ed4dd9be6dc34ce0da", "url": "https://github.com/firebase/firebase-admin-java/commit/99b07bdbf46c40ce9d48a4ed4dd9be6dc34ce0da", "message": "Make Javadoc comments consistent and validate provider ID in CreateRequest. (#418)\n\nThis makes the formatting of the Javadoc comments more consistent, and it's now more clear when/why IllegalArgumentExceptions get thrown. This also adds validation to the provider ID in the CreateRequest to ensure that it has the correct prefix.'\r\n\r\nImprovements were also made to the tests. The JSON string is now more readable, the parameters are now in the correct order for assertEquals calls, and the IllegalArgumentException tests have been properly fleshed out.", "committedDate": "2020-06-04T21:24:16Z", "type": "commit"}, {"oid": "537b7a72db2798c910c42183f0b90432edc19144", "url": "https://github.com/firebase/firebase-admin-java/commit/537b7a72db2798c910c42183f0b90432edc19144", "message": "Add class for SAML provider config. (#419)\n\nAdds a class for the SAML provider config.", "committedDate": "2020-06-04T21:24:16Z", "type": "commit"}, {"oid": "0751674bdf4a2b4ce39abf7653edf4ff7ccfdf98", "url": "https://github.com/firebase/firebase-admin-java/commit/0751674bdf4a2b4ce39abf7653edf4ff7ccfdf98", "message": "Add operations to create and delete SAML provider configs. (#420)\n\nThis adds operations to create and delete SAML provider configs.", "committedDate": "2020-06-04T21:25:41Z", "type": "commit"}, {"oid": "7732833e82a18623b9a330c507f3566d79c16e09", "url": "https://github.com/firebase/firebase-admin-java/commit/7732833e82a18623b9a330c507f3566d79c16e09", "message": "Add get operation for SAML provider configs. (#421)", "committedDate": "2020-06-04T21:25:45Z", "type": "commit"}, {"oid": "de24a2b255c5bcd7b18523c0adce840d13d15a3e", "url": "https://github.com/firebase/firebase-admin-java/commit/de24a2b255c5bcd7b18523c0adce840d13d15a3e", "message": "Add operation to update SAML provider configs. (#424)", "committedDate": "2020-06-04T21:25:45Z", "type": "commit"}, {"oid": "638240f77befb8181b8a36876f6c6fe76a6357db", "url": "https://github.com/firebase/firebase-admin-java/commit/638240f77befb8181b8a36876f6c6fe76a6357db", "message": "Add operation to list SAML provider configs. (#426)\n\nAdds a list operation for SAML provider configs.\r\n\r\nI also set 'suppressLoadErrors' to true to avoid class information error. See https://stackoverflow.com/questions/27938039/unable-to-get-class-information-for-checkstyle for more context.", "committedDate": "2020-06-04T21:25:45Z", "type": "commit"}, {"oid": "aa96da043dbf30c92c6079fe8da3c26bf3ee142e", "url": "https://github.com/firebase/firebase-admin-java/commit/aa96da043dbf30c92c6079fe8da3c26bf3ee142e", "message": "Finish implementing SAML provider config. (#428)\n\nI've implemented addAllX509Certificates and removed the TODOs for the request signing, since we are not ready to expose that yet.\r\n\r\nI've also added unit tests for SamlProviderConfig.UpdateRequest, because those were missed in a previous PR.\r\n\r\nOn an unrelated note, I've also added a comment describing why 'suppressLoadErrors' needs to be set.", "committedDate": "2020-06-04T21:25:45Z", "type": "commit"}, {"oid": "0fa48b2a74191d309afda6af67d97ba23fa11668", "url": "https://github.com/firebase/firebase-admin-java/commit/0fa48b2a74191d309afda6af67d97ba23fa11668", "message": "Move check in FirebaseUserManager.updateTenant outside CallableOperation. (#431)", "committedDate": "2020-06-04T21:27:09Z", "type": "commit"}, {"oid": "d32705af8a044ff75869787b47974834f09b5837", "url": "https://github.com/firebase/firebase-admin-java/commit/d32705af8a044ff75869787b47974834f09b5837", "message": "Refactor shared code into UserTestUtils. (#432)", "committedDate": "2020-06-04T21:34:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5ODA3NQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/433#discussion_r438998075", "bodyText": "Let's spell out OpenID Connect", "author": "kevinthecheung", "createdAt": "2020-06-11T18:46:38Z", "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -945,6 +939,543 @@ protected String execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new OIDC Auth provider config with the attributes contained in the specified", "originalCommit": "e1e49e3501d879cb42eb755190be8ba07a749206", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY2ODc1Ng==", "url": "https://github.com/firebase/firebase-admin-java/pull/433#discussion_r439668756", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-06-12T22:38:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5ODA3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5OTEyNw==", "url": "https://github.com/firebase/firebase-admin-java/pull/433#discussion_r438999127", "bodyText": "Gets the OpenID Connect auth provider config corresponding to the specified provider ID.", "author": "kevinthecheung", "createdAt": "2020-06-11T18:48:33Z", "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -945,6 +939,543 @@ protected String execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new OIDC Auth provider config with the attributes contained in the specified\n+   * {@link OidcProviderConfig.CreateRequest}.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.CreateRequest} instance.\n+   * @return An {@link OidcProviderConfig} instance corresponding to the newly created provider\n+   *     config.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not\n+   *     prefixed with 'oidc.'.\n+   * @throws FirebaseAuthException if an error occurs while creating the provider config.\n+   */\n+  public OidcProviderConfig createOidcProviderConfig(\n+      @NonNull OidcProviderConfig.CreateRequest request) throws FirebaseAuthException {\n+    return createOidcProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #createOidcProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.CreateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link OidcProviderConfig}\n+   *     instance corresponding to the newly created provider config. If an error occurs while\n+   *     creating the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not\n+   *     prefixed with 'oidc.'.\n+   */\n+  public ApiFuture<OidcProviderConfig> createOidcProviderConfigAsync(\n+      @NonNull OidcProviderConfig.CreateRequest request) {\n+    return createOidcProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<OidcProviderConfig, FirebaseAuthException>\n+      createOidcProviderConfigOp(final OidcProviderConfig.CreateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Create request must not be null.\");\n+    OidcProviderConfig.checkOidcProviderId(request.getProviderId());\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<OidcProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected OidcProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.createOidcProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Updates an existing OIDC Auth provider config with the attributes contained in the specified\n+   * {@link OidcProviderConfig.UpdateRequest}.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.UpdateRequest} instance.\n+   * @return A {@link OidcProviderConfig} instance corresponding to the updated provider config.\n+   * @throws NullPointerException if the provided update request is null.\n+   * @throws IllegalArgumentException If the provided update request is invalid.\n+   * @throws FirebaseAuthException if an error occurs while updating the provider config.\n+   */\n+  public OidcProviderConfig updateOidcProviderConfig(\n+      @NonNull OidcProviderConfig.UpdateRequest request) throws FirebaseAuthException {\n+    return updateOidcProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #updateOidcProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.UpdateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link OidcProviderConfig}\n+   *     instance corresponding to the updated provider config. If an error occurs while updating\n+   *     the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided update request is null.\n+   * @throws IllegalArgumentException If the provided update request is invalid.\n+   */\n+  public ApiFuture<OidcProviderConfig> updateOidcProviderConfigAsync(\n+      @NonNull OidcProviderConfig.UpdateRequest request) {\n+    return updateOidcProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<OidcProviderConfig, FirebaseAuthException> updateOidcProviderConfigOp(\n+      final OidcProviderConfig.UpdateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Update request must not be null.\");\n+    checkArgument(!request.getProperties().isEmpty(),\n+        \"Update request must have at least one property set.\");\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<OidcProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected OidcProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.updateOidcProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Gets the provider OIDC Auth config corresponding to the specified provider ID.", "originalCommit": "e1e49e3501d879cb42eb755190be8ba07a749206", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY2ODc3OQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/433#discussion_r439668779", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-06-12T22:38:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5OTEyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5OTQxMA==", "url": "https://github.com/firebase/firebase-admin-java/pull/433#discussion_r438999410", "bodyText": "will be -> is", "author": "kevinthecheung", "createdAt": "2020-06-11T18:49:07Z", "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -945,6 +939,543 @@ protected String execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new OIDC Auth provider config with the attributes contained in the specified\n+   * {@link OidcProviderConfig.CreateRequest}.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.CreateRequest} instance.\n+   * @return An {@link OidcProviderConfig} instance corresponding to the newly created provider\n+   *     config.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not\n+   *     prefixed with 'oidc.'.\n+   * @throws FirebaseAuthException if an error occurs while creating the provider config.\n+   */\n+  public OidcProviderConfig createOidcProviderConfig(\n+      @NonNull OidcProviderConfig.CreateRequest request) throws FirebaseAuthException {\n+    return createOidcProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #createOidcProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.CreateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link OidcProviderConfig}\n+   *     instance corresponding to the newly created provider config. If an error occurs while\n+   *     creating the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not\n+   *     prefixed with 'oidc.'.\n+   */\n+  public ApiFuture<OidcProviderConfig> createOidcProviderConfigAsync(\n+      @NonNull OidcProviderConfig.CreateRequest request) {\n+    return createOidcProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<OidcProviderConfig, FirebaseAuthException>\n+      createOidcProviderConfigOp(final OidcProviderConfig.CreateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Create request must not be null.\");\n+    OidcProviderConfig.checkOidcProviderId(request.getProviderId());\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<OidcProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected OidcProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.createOidcProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Updates an existing OIDC Auth provider config with the attributes contained in the specified\n+   * {@link OidcProviderConfig.UpdateRequest}.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.UpdateRequest} instance.\n+   * @return A {@link OidcProviderConfig} instance corresponding to the updated provider config.\n+   * @throws NullPointerException if the provided update request is null.\n+   * @throws IllegalArgumentException If the provided update request is invalid.\n+   * @throws FirebaseAuthException if an error occurs while updating the provider config.\n+   */\n+  public OidcProviderConfig updateOidcProviderConfig(\n+      @NonNull OidcProviderConfig.UpdateRequest request) throws FirebaseAuthException {\n+    return updateOidcProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #updateOidcProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.UpdateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link OidcProviderConfig}\n+   *     instance corresponding to the updated provider config. If an error occurs while updating\n+   *     the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided update request is null.\n+   * @throws IllegalArgumentException If the provided update request is invalid.\n+   */\n+  public ApiFuture<OidcProviderConfig> updateOidcProviderConfigAsync(\n+      @NonNull OidcProviderConfig.UpdateRequest request) {\n+    return updateOidcProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<OidcProviderConfig, FirebaseAuthException> updateOidcProviderConfigOp(\n+      final OidcProviderConfig.UpdateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Update request must not be null.\");\n+    checkArgument(!request.getProperties().isEmpty(),\n+        \"Update request must have at least one property set.\");\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<OidcProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected OidcProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.updateOidcProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Gets the provider OIDC Auth config corresponding to the specified provider ID.\n+   *\n+   * @param providerId A provider ID string.\n+   * @return An {@link OidcProviderConfig} instance.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not prefixed\n+   *     with 'oidc'.\n+   * @throws FirebaseAuthException If an error occurs while retrieving the provider config.\n+   */\n+  public OidcProviderConfig getOidcProviderConfig(@NonNull String providerId)\n+      throws FirebaseAuthException {\n+    return getOidcProviderConfigOp(providerId).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #getOidcProviderConfig(String)} but performs the operation asynchronously.\n+   * Page size will be limited to 100 provider configs.", "originalCommit": "e1e49e3501d879cb42eb755190be8ba07a749206", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY2ODgyMQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/433#discussion_r439668821", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-06-12T22:38:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5OTQxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwNTQ5Ng==", "url": "https://github.com/firebase/firebase-admin-java/pull/433#discussion_r439005496", "bodyText": "auth provider", "author": "kevinthecheung", "createdAt": "2020-06-11T19:00:40Z", "path": "src/main/java/com/google/firebase/auth/AbstractFirebaseAuth.java", "diffHunk": "@@ -945,6 +939,543 @@ protected String execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Creates a new OIDC Auth provider config with the attributes contained in the specified\n+   * {@link OidcProviderConfig.CreateRequest}.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.CreateRequest} instance.\n+   * @return An {@link OidcProviderConfig} instance corresponding to the newly created provider\n+   *     config.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not\n+   *     prefixed with 'oidc.'.\n+   * @throws FirebaseAuthException if an error occurs while creating the provider config.\n+   */\n+  public OidcProviderConfig createOidcProviderConfig(\n+      @NonNull OidcProviderConfig.CreateRequest request) throws FirebaseAuthException {\n+    return createOidcProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #createOidcProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.CreateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link OidcProviderConfig}\n+   *     instance corresponding to the newly created provider config. If an error occurs while\n+   *     creating the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not\n+   *     prefixed with 'oidc.'.\n+   */\n+  public ApiFuture<OidcProviderConfig> createOidcProviderConfigAsync(\n+      @NonNull OidcProviderConfig.CreateRequest request) {\n+    return createOidcProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<OidcProviderConfig, FirebaseAuthException>\n+      createOidcProviderConfigOp(final OidcProviderConfig.CreateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Create request must not be null.\");\n+    OidcProviderConfig.checkOidcProviderId(request.getProviderId());\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<OidcProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected OidcProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.createOidcProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Updates an existing OIDC Auth provider config with the attributes contained in the specified\n+   * {@link OidcProviderConfig.UpdateRequest}.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.UpdateRequest} instance.\n+   * @return A {@link OidcProviderConfig} instance corresponding to the updated provider config.\n+   * @throws NullPointerException if the provided update request is null.\n+   * @throws IllegalArgumentException If the provided update request is invalid.\n+   * @throws FirebaseAuthException if an error occurs while updating the provider config.\n+   */\n+  public OidcProviderConfig updateOidcProviderConfig(\n+      @NonNull OidcProviderConfig.UpdateRequest request) throws FirebaseAuthException {\n+    return updateOidcProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #updateOidcProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link OidcProviderConfig.UpdateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link OidcProviderConfig}\n+   *     instance corresponding to the updated provider config. If an error occurs while updating\n+   *     the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided update request is null.\n+   * @throws IllegalArgumentException If the provided update request is invalid.\n+   */\n+  public ApiFuture<OidcProviderConfig> updateOidcProviderConfigAsync(\n+      @NonNull OidcProviderConfig.UpdateRequest request) {\n+    return updateOidcProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<OidcProviderConfig, FirebaseAuthException> updateOidcProviderConfigOp(\n+      final OidcProviderConfig.UpdateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Update request must not be null.\");\n+    checkArgument(!request.getProperties().isEmpty(),\n+        \"Update request must have at least one property set.\");\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<OidcProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected OidcProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.updateOidcProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Gets the provider OIDC Auth config corresponding to the specified provider ID.\n+   *\n+   * @param providerId A provider ID string.\n+   * @return An {@link OidcProviderConfig} instance.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not prefixed\n+   *     with 'oidc'.\n+   * @throws FirebaseAuthException If an error occurs while retrieving the provider config.\n+   */\n+  public OidcProviderConfig getOidcProviderConfig(@NonNull String providerId)\n+      throws FirebaseAuthException {\n+    return getOidcProviderConfigOp(providerId).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #getOidcProviderConfig(String)} but performs the operation asynchronously.\n+   * Page size will be limited to 100 provider configs.\n+   *\n+   * @param providerId A provider ID string.\n+   * @return An {@code ApiFuture} which will complete successfully with an\n+   *     {@link OidcProviderConfig} instance. If an error occurs while retrieving the provider\n+   *     config or if the specified provider ID does not exist, the future throws a\n+   *     {@link FirebaseAuthException}.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not\n+   *     prefixed with 'oidc.'.\n+   */\n+  public ApiFuture<OidcProviderConfig> getOidcProviderConfigAsync(@NonNull String providerId) {\n+    return getOidcProviderConfigOp(providerId).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<OidcProviderConfig, FirebaseAuthException>\n+      getOidcProviderConfigOp(final String providerId) {\n+    checkNotDestroyed();\n+    OidcProviderConfig.checkOidcProviderId(providerId);\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<OidcProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected OidcProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.getOidcProviderConfig(providerId);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Gets a page of OIDC Auth provider configs starting from the specified {@code pageToken}. Page\n+   * size will be limited to 100 provider configs.\n+   *\n+   * @param pageToken A non-empty page token string, or null to retrieve the first page of provider\n+   *     configs.\n+   * @return A {@link ListProviderConfigsPage} instance.\n+   * @throws IllegalArgumentException If the specified page token is empty\n+   * @throws FirebaseAuthException If an error occurs while retrieving provider config data.\n+   */\n+  public ListProviderConfigsPage<OidcProviderConfig> listOidcProviderConfigs(\n+        @Nullable String pageToken) throws FirebaseAuthException {\n+    int maxResults = FirebaseUserManager.MAX_LIST_PROVIDER_CONFIGS_RESULTS;\n+    return listOidcProviderConfigsOp(pageToken, maxResults).call();\n+  }\n+\n+  /**\n+   * Gets a page of OIDC Auth provider configs starting from the specified {@code pageToken}.\n+   *\n+   * @param pageToken A non-empty page token string, or null to retrieve the first page of provider\n+   *     configs.\n+   * @param maxResults Maximum number of provider configs to include in the returned page. This may\n+   *     not exceed 100.\n+   * @return A {@link ListProviderConfigsPage} instance.\n+   * @throws IllegalArgumentException If the specified page token is empty, or max results value is\n+   *     invalid.\n+   * @throws FirebaseAuthException If an error occurs while retrieving provider config data.\n+   */\n+  public ListProviderConfigsPage<OidcProviderConfig> listOidcProviderConfigs(\n+        @Nullable String pageToken, int maxResults) throws FirebaseAuthException {\n+    return listOidcProviderConfigsOp(pageToken, maxResults).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #listOidcProviderConfigs(String)} but performs the operation asynchronously.\n+   * Page size will be limited to 100 provider configs.\n+   *\n+   * @param pageToken A non-empty page token string, or null to retrieve the first page of provider\n+   *     configs.\n+   * @return An {@code ApiFuture} which will complete successfully with a\n+   *     {@link ListProviderConfigsPage} instance. If an error occurs while retrieving provider\n+   *     config data, the future throws an exception.\n+   * @throws IllegalArgumentException If the specified page token is empty.\n+   */\n+  public ApiFuture<ListProviderConfigsPage<OidcProviderConfig>> listOidcProviderConfigsAsync(\n+      @Nullable String pageToken) {\n+    int maxResults = FirebaseUserManager.MAX_LIST_PROVIDER_CONFIGS_RESULTS;\n+    return listOidcProviderConfigsAsync(pageToken, maxResults);\n+  }\n+\n+  /**\n+   * Similar to {@link #listOidcProviderConfigs(String, int)} but performs the operation\n+   * asynchronously.\n+   *\n+   * @param pageToken A non-empty page token string, or null to retrieve the first page of provider\n+   *     configs.\n+   * @param maxResults Maximum number of provider configs to include in the returned page. This may\n+   *     not exceed 100.\n+   * @return An {@code ApiFuture} which will complete successfully with a\n+   *     {@link ListProviderConfigsPage} instance. If an error occurs while retrieving provider\n+   *     config data, the future throws an exception.\n+   * @throws IllegalArgumentException If the specified page token is empty, or max results value is\n+   *     invalid.\n+   */\n+  public ApiFuture<ListProviderConfigsPage<OidcProviderConfig>> listOidcProviderConfigsAsync(\n+      @Nullable String pageToken,\n+      int maxResults) {\n+    return listOidcProviderConfigsOp(pageToken, maxResults).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<ListProviderConfigsPage<OidcProviderConfig>, FirebaseAuthException>\n+      listOidcProviderConfigsOp(@Nullable final String pageToken, final int maxResults) {\n+    checkNotDestroyed();\n+    final FirebaseUserManager userManager = getUserManager();\n+    final DefaultOidcProviderConfigSource source = new DefaultOidcProviderConfigSource(userManager);\n+    final ListProviderConfigsPage.Factory<OidcProviderConfig> factory =\n+        new ListProviderConfigsPage.Factory<OidcProviderConfig>(source, maxResults, pageToken);\n+    return\n+      new CallableOperation<ListProviderConfigsPage<OidcProviderConfig>, FirebaseAuthException>() {\n+        @Override\n+        protected ListProviderConfigsPage<OidcProviderConfig> execute()\n+            throws FirebaseAuthException {\n+          return factory.create();\n+        }\n+    };\n+  }\n+\n+  /**\n+   * Deletes the OIDC Auth provider config identified by the specified provider ID.\n+   *\n+   * @param providerId A provider ID string.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not prefixed\n+   *     with 'oidc'.\n+   * @throws FirebaseAuthException If an error occurs while deleting the provider config.\n+   */\n+  public void deleteOidcProviderConfig(@NonNull String providerId) throws FirebaseAuthException {\n+    deleteOidcProviderConfigOp(providerId).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #deleteOidcProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param providerId A provider ID string.\n+   * @return An {@code ApiFuture} which will complete successfully when the specified provider\n+   *     config has been deleted. If an error occurs while deleting the provider config, the future\n+   *     throws a {@link FirebaseAuthException}.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not prefixed\n+   *     with \"oidc.\".\n+   */\n+  public ApiFuture<Void> deleteOidcProviderConfigAsync(String providerId) {\n+    return deleteOidcProviderConfigOp(providerId).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<Void, FirebaseAuthException> deleteOidcProviderConfigOp(\n+      final String providerId) {\n+    checkNotDestroyed();\n+    OidcProviderConfig.checkOidcProviderId(providerId);\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<Void, FirebaseAuthException>() {\n+      @Override\n+      protected Void execute() throws FirebaseAuthException {\n+        userManager.deleteOidcProviderConfig(providerId);\n+        return null;\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Creates a new SAML Auth provider config with the attributes contained in the specified\n+   * {@link SamlProviderConfig.CreateRequest}.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.CreateRequest} instance.\n+   * @return An {@link SamlProviderConfig} instance corresponding to the newly created provider\n+   *     config.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not prefixed\n+   *     with 'saml'.\n+   * @throws FirebaseAuthException if an error occurs while creating the provider config.\n+   */\n+  public SamlProviderConfig createSamlProviderConfig(\n+      @NonNull SamlProviderConfig.CreateRequest request) throws FirebaseAuthException {\n+    return createSamlProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #createSamlProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.CreateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link SamlProviderConfig}\n+   *     instance corresponding to the newly created provider config. If an error occurs while\n+   *     creating the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided request is null.\n+   * @throws IllegalArgumentException If the provider ID string is null or empty, or is not prefixed\n+   *     with 'saml'.\n+   */\n+  public ApiFuture<SamlProviderConfig> createSamlProviderConfigAsync(\n+      @NonNull SamlProviderConfig.CreateRequest request) {\n+    return createSamlProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<SamlProviderConfig, FirebaseAuthException>\n+      createSamlProviderConfigOp(final SamlProviderConfig.CreateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Create request must not be null.\");\n+    SamlProviderConfig.checkSamlProviderId(request.getProviderId());\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<SamlProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected SamlProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.createSamlProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Updates an existing SAML Auth provider config with the attributes contained in the specified\n+   * {@link SamlProviderConfig.UpdateRequest}.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.UpdateRequest} instance.\n+   * @return A {@link SamlProviderConfig} instance corresponding to the updated provider config.\n+   * @throws NullPointerException if the provided update request is null.\n+   * @throws IllegalArgumentException If the provided update request is invalid.\n+   * @throws FirebaseAuthException if an error occurs while updating the provider config.\n+   */\n+  public SamlProviderConfig updateSamlProviderConfig(\n+      @NonNull SamlProviderConfig.UpdateRequest request) throws FirebaseAuthException {\n+    return updateSamlProviderConfigOp(request).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #updateSamlProviderConfig} but performs the operation asynchronously.\n+   *\n+   * @param request A non-null {@link SamlProviderConfig.UpdateRequest} instance.\n+   * @return An {@code ApiFuture} which will complete successfully with a {@link SamlProviderConfig}\n+   *     instance corresponding to the updated provider config. If an error occurs while updating\n+   *     the provider config, the future throws a {@link FirebaseAuthException}.\n+   * @throws NullPointerException if the provided update request is null.\n+   * @throws IllegalArgumentException If the provided update request is invalid.\n+   */\n+  public ApiFuture<SamlProviderConfig> updateSamlProviderConfigAsync(\n+      @NonNull SamlProviderConfig.UpdateRequest request) {\n+    return updateSamlProviderConfigOp(request).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<SamlProviderConfig, FirebaseAuthException> updateSamlProviderConfigOp(\n+      final SamlProviderConfig.UpdateRequest request) {\n+    checkNotDestroyed();\n+    checkNotNull(request, \"Update request must not be null.\");\n+    checkArgument(!request.getProperties().isEmpty(),\n+        \"Update request must have at least one property set.\");\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<SamlProviderConfig, FirebaseAuthException>() {\n+      @Override\n+      protected SamlProviderConfig execute() throws FirebaseAuthException {\n+        return userManager.updateSamlProviderConfig(request);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Gets the SAML provider Auth config corresponding to the specified provider ID.", "originalCommit": "e1e49e3501d879cb42eb755190be8ba07a749206", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY2ODgwMQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/433#discussion_r439668801", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-06-12T22:38:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwNTQ5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwNzcxNg==", "url": "https://github.com/firebase/firebase-admin-java/pull/433#discussion_r439007716", "bodyText": "to save the updated config", "author": "kevinthecheung", "createdAt": "2020-06-11T19:05:07Z", "path": "src/main/java/com/google/firebase/auth/OidcProviderConfig.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.api.client.util.Key;\n+import com.google.common.base.Strings;\n+import com.google.firebase.auth.ProviderConfig.AbstractCreateRequest;\n+import com.google.firebase.auth.ProviderConfig.AbstractUpdateRequest;\n+\n+/**\n+ * Contains metadata associated with an OIDC Auth provider.\n+ *\n+ * <p>Instances of this class are immutable and thread safe.\n+ */\n+public final class OidcProviderConfig extends ProviderConfig {\n+\n+  @Key(\"clientId\")\n+  private String clientId;\n+\n+  @Key(\"issuer\")\n+  private String issuer;\n+\n+  public String getClientId() {\n+    return clientId;\n+  }\n+\n+  public String getIssuer() {\n+    return issuer;\n+  }\n+\n+  /**\n+   * Returns a new {@link UpdateRequest}, which can be used to update the attributes of this\n+   * provider config.\n+   *\n+   * @return A non-null {@link UpdateRequest} instance.\n+   */\n+  public UpdateRequest updateRequest() {\n+    return new UpdateRequest(getProviderId());\n+  }\n+\n+  static void checkOidcProviderId(String providerId) {\n+    checkArgument(!Strings.isNullOrEmpty(providerId), \"Provider ID must not be null or empty.\");\n+    checkArgument(providerId.startsWith(\"oidc.\"),\n+        \"Invalid OIDC provider ID (must be prefixed with 'oidc.'): \" + providerId);\n+  }\n+\n+  /**\n+   * A specification class for creating a new OIDC Auth provider.\n+   *\n+   * <p>Set the initial attributes of the new provider by calling various setter methods available\n+   * in this class.\n+   */\n+  public static final class CreateRequest extends AbstractCreateRequest<CreateRequest> {\n+\n+    /**\n+     * Creates a new {@link CreateRequest}, which can be used to create a new OIDC Auth provider.\n+     *\n+     * <p>The returned object should be passed to\n+     * {@link AbstractFirebaseAuth#createOidcProviderConfig(CreateRequest)} to register the provider\n+     * information persistently.\n+     */\n+    public CreateRequest() { }\n+\n+    /**\n+     * Sets the ID for the new provider.\n+     *\n+     * @param providerId A non-null, non-empty provider ID string.\n+     * @throws IllegalArgumentException If the provider ID is null or empty, or is not prefixed with\n+     *     'oidc.'.\n+     */\n+    @Override\n+    public CreateRequest setProviderId(String providerId) {\n+      checkOidcProviderId(providerId);\n+      return super.setProviderId(providerId);\n+    }\n+\n+    /**\n+     * Sets the client ID for the new provider.\n+     *\n+     * @param clientId A non-null, non-empty client ID string.\n+     * @throws IllegalArgumentException If the client ID is null or empty.\n+     */\n+    public CreateRequest setClientId(String clientId) {\n+      checkArgument(!Strings.isNullOrEmpty(clientId), \"Client ID must not be null or empty.\");\n+      properties.put(\"clientId\", clientId);\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the issuer for the new provider.\n+     *\n+     * @param issuer A non-null, non-empty issuer URL string.\n+     * @throws IllegalArgumentException If the issuer URL is null or empty, or if the format is\n+     *     invalid.\n+     */\n+    public CreateRequest setIssuer(String issuer) {\n+      checkArgument(!Strings.isNullOrEmpty(issuer), \"Issuer must not be null or empty.\");\n+      assertValidUrl(issuer);\n+      properties.put(\"issuer\", issuer);\n+      return this;\n+    }\n+\n+    CreateRequest getThis() {\n+      return this;\n+    }\n+  }\n+\n+  /**\n+   * A specification class for updating an existing OIDC Auth provider.\n+   *\n+   * <p>An instance of this class can be obtained via a {@link OidcProviderConfig} object, or from\n+   * a provider ID string. Specify the changes to be made to the provider config by calling the\n+   * various setter methods available in this class.\n+   */\n+  public static final class UpdateRequest extends AbstractUpdateRequest<UpdateRequest> {\n+\n+    /**\n+     * Creates a new {@link UpdateRequest}, which can be used to updates an existing OIDC Auth\n+     * provider.\n+     *\n+     * <p>The returned object should be passed to\n+     * {@link AbstractFirebaseAuth#updateOidcProviderConfig(CreateRequest)} to update the provider", "originalCommit": "e1e49e3501d879cb42eb755190be8ba07a749206", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY2ODgzOA==", "url": "https://github.com/firebase/firebase-admin-java/pull/433#discussion_r439668838", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-06-12T22:38:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwNzcxNg=="}], "type": "inlineReview"}, {"oid": "a196aa4cbad3042a5b142e1b41762dc5a63e66a0", "url": "https://github.com/firebase/firebase-admin-java/commit/a196aa4cbad3042a5b142e1b41762dc5a63e66a0", "message": "Address Kevin's feedback.", "committedDate": "2020-06-12T22:30:53Z", "type": "commit"}, {"oid": "a196aa4cbad3042a5b142e1b41762dc5a63e66a0", "url": "https://github.com/firebase/firebase-admin-java/commit/a196aa4cbad3042a5b142e1b41762dc5a63e66a0", "message": "Address Kevin's feedback.", "committedDate": "2020-06-12T22:30:53Z", "type": "forcePushed"}]}