{"pr_number": 365, "pr_title": "feat(auth): Add bulk get/delete methods", "pr_createdAt": "2020-02-12T20:14:45Z", "pr_url": "https://github.com/firebase/firebase-admin-java/pull/365", "timeline": [{"oid": "b9c332d8f8fd6382d97b504fd9d56f623ea86585", "url": "https://github.com/firebase/firebase-admin-java/commit/b9c332d8f8fd6382d97b504fd9d56f623ea86585", "message": "Bulk delete users", "committedDate": "2020-02-12T20:15:31Z", "type": "forcePushed"}, {"oid": "9f0c4ee5ee9a5faf1f662f964d36e0b30d1f90a7", "url": "https://github.com/firebase/firebase-admin-java/commit/9f0c4ee5ee9a5faf1f662f964d36e0b30d1f90a7", "message": "Bulk delete users", "committedDate": "2020-02-12T20:41:47Z", "type": "forcePushed"}, {"oid": "74c76ead94042a5bd9e7a9bc7db8dc061dc2048b", "url": "https://github.com/firebase/firebase-admin-java/commit/74c76ead94042a5bd9e7a9bc7db8dc061dc2048b", "message": "Bulk get users", "committedDate": "2020-02-12T20:51:51Z", "type": "commit"}, {"oid": "1615fb379ba1fb0181c1e500de6736dd9c7af4c8", "url": "https://github.com/firebase/firebase-admin-java/commit/1615fb379ba1fb0181c1e500de6736dd9c7af4c8", "message": "add lastRefreshTimestamp", "committedDate": "2020-02-12T20:51:51Z", "type": "commit"}, {"oid": "69b37ae2cbb61f789e5a15b1d30c587427406a8d", "url": "https://github.com/firebase/firebase-admin-java/commit/69b37ae2cbb61f789e5a15b1d30c587427406a8d", "message": "Bulk delete users", "committedDate": "2020-02-12T20:51:51Z", "type": "commit"}, {"oid": "69b37ae2cbb61f789e5a15b1d30c587427406a8d", "url": "https://github.com/firebase/firebase-admin-java/commit/69b37ae2cbb61f789e5a15b1d30c587427406a8d", "message": "Bulk delete users", "committedDate": "2020-02-12T20:51:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwNjExNQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r378506115", "bodyText": "These are verified in the calling code. (As an alternative, we could just repeat the validation here.)", "author": "rsgowman", "createdAt": "2020-02-12T20:53:05Z", "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -171,6 +178,37 @@ UserRecord getUserByPhoneNumber(String phoneNumber) throws FirebaseAuthException\n     return new UserRecord(response.getUsers().get(0), jsonFactory);\n   }\n \n+  /**\n+   * @pre identifiers != null", "originalCommit": "69b37ae2cbb61f789e5a15b1d30c587427406a8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1Njg3OA==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r380856878", "bodyText": "Let's drop the pre annotations. That's not really a convention we use. It is understood that the arguments passed to this class have already been validated. If you want add a class-level javadoc to indicate that explicitly.", "author": "hiranya911", "createdAt": "2020-02-18T18:32:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwNjExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNTc4OQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r381435789", "bodyText": "Removed.", "author": "rsgowman", "createdAt": "2020-02-19T17:41:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwNjExNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwNzYxMA==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r378507610", "bodyText": "We may need to do something similar for the other ports... There seems to be some elasticity such that the full test suite can often pass, but not if you run just the delete users tests in quick succession (as I did while testing).", "author": "rsgowman", "createdAt": "2020-02-12T20:56:13Z", "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "diffHunk": "@@ -137,6 +137,83 @@ public void testDeleteNonExistingUser() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testDeleteUsers() throws Exception {\n+    UserRecord user1 = newUserWithParams();\n+    UserRecord user2 = newUserWithParams();\n+    UserRecord user3 = newUserWithParams();\n+\n+    DeleteUsersResult deleteUsersResult = slowDeleteUsersAsync(\n+        ImmutableList.of(user1.getUid(), user2.getUid(), user3.getUid())\n+        ).get();\n+\n+    assertEquals(3, deleteUsersResult.getSuccessCount());\n+    assertEquals(0, deleteUsersResult.getFailureCount());\n+    assertTrue(deleteUsersResult.getErrors().isEmpty());\n+\n+    GetUsersResult getUsersResult = auth.getUsersAsync(ImmutableList.<UserIdentifier>of(\n+          new UidIdentifier(user1.getUid()),\n+          new UidIdentifier(user2.getUid()),\n+          new UidIdentifier(user3.getUid())\n+          )).get();\n+\n+    assertTrue(getUsersResult.getUsers().isEmpty());\n+    assertEquals(3, getUsersResult.getNotFound().size());\n+  }\n+\n+  @Test\n+  public void testDeleteExistingAndNonExistingUsers() throws Exception {\n+    UserRecord user1 = newUserWithParams();\n+\n+    DeleteUsersResult deleteUsersResult = slowDeleteUsersAsync(\n+        ImmutableList.of(user1.getUid(), \"uid-that-doesnt-exist\")\n+        ).get();\n+\n+    assertEquals(2, deleteUsersResult.getSuccessCount());\n+    assertEquals(0, deleteUsersResult.getFailureCount());\n+    assertTrue(deleteUsersResult.getErrors().isEmpty());\n+\n+    GetUsersResult getUsersResult = auth.getUsersAsync(ImmutableList.<UserIdentifier>of(\n+          new UidIdentifier(user1.getUid()),\n+          new UidIdentifier(\"uid-that-doesnt-exist\")\n+          )).get();\n+\n+    assertTrue(getUsersResult.getUsers().isEmpty());\n+    assertEquals(2, getUsersResult.getNotFound().size());\n+  }\n+\n+  @Test\n+  public void testDeleteUsersIsIdempotent() throws Exception {\n+    UserRecord user1 = newUserWithParams();\n+\n+    DeleteUsersResult result = slowDeleteUsersAsync(\n+        ImmutableList.of(user1.getUid())\n+        ).get();\n+\n+    assertEquals(1, result.getSuccessCount());\n+    assertEquals(0, result.getFailureCount());\n+    assertTrue(result.getErrors().isEmpty());\n+\n+    // Delete the user again, ensuring that everything still counts as a success.\n+    result = slowDeleteUsersAsync(\n+        ImmutableList.of(user1.getUid())\n+        ).get();\n+\n+    assertEquals(1, result.getSuccessCount());\n+    assertEquals(0, result.getFailureCount());\n+    assertTrue(result.getErrors().isEmpty());\n+  }\n+\n+  /**\n+   * The batchDelete endpoint is currently rate limited to 1qps. Use this test helper to ensure we\n+   * don't run into quota exceeded errors.\n+   */\n+  // TODO(rsgowman): When/if the rate limit is relaxed, eliminate this helper.\n+  private ApiFuture<DeleteUsersResult> slowDeleteUsersAsync(List<String> uids) throws Exception {", "originalCommit": "69b37ae2cbb61f789e5a15b1d30c587427406a8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwODM3OQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r378508379", "bodyText": "junit4 doesn't allow nested tests (and therefore doesn't allow nested setup/teardown functions.) The recommendation is to just split into a separate file, which is what I've done here.", "author": "rsgowman", "createdAt": "2020-02-12T20:57:49Z", "path": "src/test/java/com/google/firebase/auth/GetUsersIT.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*", "originalCommit": "69b37ae2cbb61f789e5a15b1d30c587427406a8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "93a043c54c3cf528f357b8f71d39be69a40988eb", "url": "https://github.com/firebase/firebase-admin-java/commit/93a043c54c3cf528f357b8f71d39be69a40988eb", "message": "oops; forgot to add this to the commit", "committedDate": "2020-02-12T21:00:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MjgyNA==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r380852824", "bodyText": "Make all these final as well.", "author": "hiranya911", "createdAt": "2020-02-18T18:24:15Z", "path": "src/main/java/com/google/firebase/auth/DeleteUsersResult.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.firebase.auth.internal.BatchDeleteResponse;\n+import com.google.firebase.internal.NonNull;\n+import java.util.List;\n+\n+/**\n+ * Represents the result of the {@link FirebaseAuth#deleteUsersAsync(List)} API.\n+ */\n+public final class DeleteUsersResult {\n+\n+  private int successCount;", "originalCommit": "93a043c54c3cf528f357b8f71d39be69a40988eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNjIwMA==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r381436200", "bodyText": "Done.", "author": "rsgowman", "createdAt": "2020-02-19T17:42:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MjgyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MzUzNQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r380853535", "bodyText": "Perhaps remove this attribute and just return errors.size()", "author": "hiranya911", "createdAt": "2020-02-18T18:25:40Z", "path": "src/main/java/com/google/firebase/auth/DeleteUsersResult.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.firebase.auth.internal.BatchDeleteResponse;\n+import com.google.firebase.internal.NonNull;\n+import java.util.List;\n+\n+/**\n+ * Represents the result of the {@link FirebaseAuth#deleteUsersAsync(List)} API.\n+ */\n+public final class DeleteUsersResult {\n+\n+  private int successCount;\n+  private int failureCount;\n+  private List<ErrorInfo> errors;\n+\n+  DeleteUsersResult(int users, BatchDeleteResponse response) {\n+    ImmutableList.Builder<ErrorInfo> errorsBuilder = ImmutableList.builder();\n+    List<BatchDeleteResponse.ErrorInfo> responseErrors = response.getErrors();\n+    if (responseErrors != null) {\n+      checkArgument(users >= responseErrors.size());\n+      for (BatchDeleteResponse.ErrorInfo error : responseErrors) {\n+        errorsBuilder.add(new ErrorInfo(error.getIndex(), error.getMessage()));\n+      }\n+    }\n+    errors = errorsBuilder.build();\n+    failureCount = errors.size();\n+    successCount = users - errors.size();\n+  }\n+\n+  /**\n+   * Returns the number of users that were deleted successfully (possibly zero). Users that did\n+   * not exist prior to calling deleteUsersAsync() will be considered to be successfully\n+   * deleted.\n+   */ \n+  public int getSuccessCount() {\n+    return successCount;\n+  }\n+\n+  /**\n+   * Returns the number of users that failed to be deleted (possibly zero).\n+   */\n+  public int getFailureCount() {\n+    return failureCount;", "originalCommit": "93a043c54c3cf528f357b8f71d39be69a40988eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNjExOQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r381436119", "bodyText": "Done.", "author": "rsgowman", "createdAt": "2020-02-19T17:41:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MzUzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1Mzc4Nw==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r380853787", "bodyText": "final", "author": "hiranya911", "createdAt": "2020-02-18T18:26:03Z", "path": "src/main/java/com/google/firebase/auth/EmailIdentifier.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import com.google.firebase.auth.internal.GetAccountInfoRequest;\n+import com.google.firebase.internal.NonNull;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Used for looking up an account by email.\n+ *\n+ * @see {FirebaseAuth#getUsers}\n+ */\n+public class EmailIdentifier extends UserIdentifier {", "originalCommit": "93a043c54c3cf528f357b8f71d39be69a40988eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNjA2Mg==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r381436062", "bodyText": "Done.", "author": "rsgowman", "createdAt": "2020-02-19T17:41:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1Mzc4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1NDQ5Mg==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r380854492", "bodyText": "Nit: s/supplied/specified", "author": "hiranya911", "createdAt": "2020-02-18T18:27:22Z", "path": "src/main/java/com/google/firebase/auth/FirebaseAuth.java", "diffHunk": "@@ -600,6 +603,81 @@ protected UserRecord execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Gets the user data corresponding to the specified identifiers.\n+   *\n+   * <p>There are no ordering guarantees; in particular, the nth entry in the users result list is\n+   * not guaranteed to correspond to the nth entry in the input parameters list.\n+   *\n+   * <p>Only a maximum of 100 identifiers may be supplied. If more than 100 identifiers are", "originalCommit": "93a043c54c3cf528f357b8f71d39be69a40988eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNjAwOA==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r381436008", "bodyText": "Done.", "author": "rsgowman", "createdAt": "2020-02-19T17:41:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1NDQ5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1NzYxNA==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r380857614", "bodyText": "final", "author": "hiranya911", "createdAt": "2020-02-18T18:33:35Z", "path": "src/main/java/com/google/firebase/auth/GetUsersResult.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.firebase.internal.NonNull;\n+import java.util.Set;\n+\n+/**\n+ * Represents the result of the {@link FirebaseAuth#getUsersAsync(Collection)} API.\n+ */\n+public final class GetUsersResult {\n+  private Set<UserRecord> users;", "originalCommit": "93a043c54c3cf528f357b8f71d39be69a40988eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNTcxMg==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r381435712", "bodyText": "Done", "author": "rsgowman", "createdAt": "2020-02-19T17:41:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1NzYxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1Nzc5OQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r380857799", "bodyText": "Should be public?", "author": "hiranya911", "createdAt": "2020-02-18T18:33:55Z", "path": "src/main/java/com/google/firebase/auth/GetUsersResult.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.firebase.internal.NonNull;\n+import java.util.Set;\n+\n+/**\n+ * Represents the result of the {@link FirebaseAuth#getUsersAsync(Collection)} API.\n+ */\n+public final class GetUsersResult {\n+  private Set<UserRecord> users;\n+  private Set<UserIdentifier> notFound;\n+\n+  GetUsersResult(@NonNull Set<UserRecord> users, @NonNull Set<UserIdentifier> notFound) {\n+    this.users = checkNotNull(users);\n+    this.notFound = checkNotNull(notFound);\n+  }\n+\n+  /**\n+   * Set of user records, corresponding to the set of users that were requested. Only users\n+   * that were found are listed here. The result set is unordered.\n+   */\n+  @NonNull\n+  public Set<UserRecord> getUsers() {\n+    return this.users;\n+  }\n+\n+  /**\n+   * Set of identifiers that were requested, but not found.\n+   */\n+  @NonNull\n+  Set<UserIdentifier> getNotFound() {", "originalCommit": "93a043c54c3cf528f357b8f71d39be69a40988eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNTYzNA==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r381435634", "bodyText": "Done.", "author": "rsgowman", "createdAt": "2020-02-19T17:41:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1Nzc5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1ODQ5Nw==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r380858497", "bodyText": "final -- here and other similar classes.", "author": "hiranya911", "createdAt": "2020-02-18T18:35:20Z", "path": "src/main/java/com/google/firebase/auth/UidIdentifier.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import com.google.firebase.auth.internal.GetAccountInfoRequest;\n+import com.google.firebase.internal.NonNull;\n+\n+/**\n+ * Used for looking up an account by uid.\n+ *\n+ * @see {FirebaseAuth#getUsers}\n+ */\n+public class UidIdentifier extends UserIdentifier {", "originalCommit": "93a043c54c3cf528f357b8f71d39be69a40988eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNTM4Nw==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r381435387", "bodyText": "Done.", "author": "rsgowman", "createdAt": "2020-02-19T17:40:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1ODQ5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2MDMzMw==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r380860333", "bodyText": "Might be too late for this conversation. But I wonder if we should make all implementations of this class package-protected and provide a set of static factory methods instead.\npublic static UserIdentifier fromUid(String uid);\npublic static UserIdentifier fromEmail(String email);\n// and so on\n\nDoes that make sense?", "author": "hiranya911", "createdAt": "2020-02-18T18:38:56Z", "path": "src/main/java/com/google/firebase/auth/UserIdentifier.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import com.google.firebase.auth.internal.GetAccountInfoRequest;\n+import com.google.firebase.internal.NonNull;\n+\n+/**\n+ * Identifies a user to be looked up.\n+ */\n+public abstract class UserIdentifier {", "originalCommit": "93a043c54c3cf528f357b8f71d39be69a40988eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA2NzQxMQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r382067411", "bodyText": "Discussed offline. tl;dr: for better or worse, we're going to keep it as is for now.", "author": "rsgowman", "createdAt": "2020-02-20T15:20:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2MDMzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2MTYzMw==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r380861633", "bodyText": "!Strings.isNullOrEmpty()", "author": "hiranya911", "createdAt": "2020-02-18T18:41:27Z", "path": "src/main/java/com/google/firebase/auth/UserRecord.java", "diffHunk": "@@ -80,7 +81,15 @@\n       }\n     }\n     this.tokensValidAfterTimestamp = response.getValidSince() * 1000;\n-    this.userMetadata = new UserMetadata(response.getCreatedAt(), response.getLastLoginAt());\n+\n+    String lastRefreshAtRfc3339 = response.getLastRefreshAt();\n+    long lastRefreshAtMillis = 0;\n+    if (lastRefreshAtRfc3339 != null && !lastRefreshAtRfc3339.isEmpty()) {", "originalCommit": "93a043c54c3cf528f357b8f71d39be69a40988eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUxNTUzNw==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r381515537", "bodyText": "Done.", "author": "rsgowman", "createdAt": "2020-02-19T20:07:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2MTYzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2MjUwMQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r380862501", "bodyText": "Make these final too.", "author": "hiranya911", "createdAt": "2020-02-18T18:43:11Z", "path": "src/main/java/com/google/firebase/auth/internal/GetAccountInfoRequest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth.internal;\n+\n+import com.google.api.client.util.Key;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Represents the request to lookup account information.\n+ */\n+public class GetAccountInfoRequest {", "originalCommit": "93a043c54c3cf528f357b8f71d39be69a40988eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUxOTc1Mg==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r381519752", "bodyText": "Done.", "author": "rsgowman", "createdAt": "2020-02-19T20:16:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2MjUwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2MzYzNQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r380863635", "bodyText": "Nit: Kind of strange line wrapping here.", "author": "hiranya911", "createdAt": "2020-02-18T18:45:23Z", "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "diffHunk": "@@ -137,6 +137,83 @@ public void testDeleteNonExistingUser() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testDeleteUsers() throws Exception {\n+    UserRecord user1 = newUserWithParams();\n+    UserRecord user2 = newUserWithParams();\n+    UserRecord user3 = newUserWithParams();\n+\n+    DeleteUsersResult deleteUsersResult = slowDeleteUsersAsync(\n+        ImmutableList.of(user1.getUid(), user2.getUid(), user3.getUid())\n+        ).get();", "originalCommit": "93a043c54c3cf528f357b8f71d39be69a40988eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA4ODI3MA==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r382088270", "bodyText": "hmm... we should hook up clang-format or similar. I've ran clang-format over this file (just my changes; separately from the other review feedback).", "author": "rsgowman", "createdAt": "2020-02-20T15:50:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2MzYzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2NDQxOA==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r380864418", "bodyText": "30 minutes sound too high. Did you mean 30 seconds?", "author": "hiranya911", "createdAt": "2020-02-18T18:46:56Z", "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "diffHunk": "@@ -248,6 +325,35 @@ public void testUserLifecycle() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testLastRefreshTime() throws Exception {\n+    RandomUser user = RandomUser.create();\n+    UserRecord newUserRecord = auth.createUser(new CreateRequest()\n+        .setUid(user.uid)\n+        .setEmail(user.email)\n+        .setEmailVerified(false)\n+        .setPassword(\"password\"));\n+\n+    try {\n+      // New users should not have a lastRefreshTimestamp set.\n+      assertEquals(0, newUserRecord.getUserMetadata().getLastRefreshTimestamp());\n+\n+      // Login to cause the lastRefreshTimestamp to be set.\n+      signInWithPassword(newUserRecord.getEmail(), \"password\");\n+\n+      UserRecord userRecord = auth.getUser(newUserRecord.getUid());\n+\n+      // Ensure the lastRefreshTimestamp is approximately \"now\" (with a tollerance of 30 minutes).", "originalCommit": "93a043c54c3cf528f357b8f71d39be69a40988eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA3MTk1Mg==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r382071952", "bodyText": "I did mean 30m. I considered something shorter (such as 30s) but I wanted to allow a bit of clock skew as well as time for an extra long context switch on an overloaded CI server. (Both of which have bitten me in the past.) 30m seems like it should be more than long enough to cover both goals, but short enough that\na) a random value is highly unlikely to fall within the range.\nb) timezone incorrectness should still cause a failure. Hm. Well, possibly except for \"interesting\" timezones (i.e. non-hour increments from UTC), I suppose. I've reduced the timeout from 30m to 10m, which should put us beneath a timezone error from a +Xh:45m timezone.", "author": "rsgowman", "createdAt": "2020-02-20T15:26:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2NDQxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2ODYzMg==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r380868632", "bodyText": "importUserUid", "author": "hiranya911", "createdAt": "2020-02-18T18:54:48Z", "path": "src/test/java/com/google/firebase/auth/GetUsersIT.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.testing.IntegrationTestUtils;\n+import java.util.Collection;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class GetUsersIT {\n+  private static FirebaseAuth auth;\n+  private static UserRecord testUser1;\n+  private static UserRecord testUser2;\n+  private static UserRecord testUser3;\n+  private static String importUser1Uid;", "originalCommit": "93a043c54c3cf528f357b8f71d39be69a40988eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA3MjgyNw==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r382072827", "bodyText": "Done.", "author": "rsgowman", "createdAt": "2020-02-20T15:28:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2ODYzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg3NzU1Ng==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r380877556", "bodyText": "Suggest code font/link for the method and present tense:\n{@link deleteUsersAsync()} are considered", "author": "egilmorez", "createdAt": "2020-02-18T19:11:38Z", "path": "src/main/java/com/google/firebase/auth/DeleteUsersResult.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.firebase.auth.internal.BatchDeleteResponse;\n+import com.google.firebase.internal.NonNull;\n+import java.util.List;\n+\n+/**\n+ * Represents the result of the {@link FirebaseAuth#deleteUsersAsync(List)} API.\n+ */\n+public final class DeleteUsersResult {\n+\n+  private int successCount;\n+  private int failureCount;\n+  private List<ErrorInfo> errors;\n+\n+  DeleteUsersResult(int users, BatchDeleteResponse response) {\n+    ImmutableList.Builder<ErrorInfo> errorsBuilder = ImmutableList.builder();\n+    List<BatchDeleteResponse.ErrorInfo> responseErrors = response.getErrors();\n+    if (responseErrors != null) {\n+      checkArgument(users >= responseErrors.size());\n+      for (BatchDeleteResponse.ErrorInfo error : responseErrors) {\n+        errorsBuilder.add(new ErrorInfo(error.getIndex(), error.getMessage()));\n+      }\n+    }\n+    errors = errorsBuilder.build();\n+    failureCount = errors.size();\n+    successCount = users - errors.size();\n+  }\n+\n+  /**\n+   * Returns the number of users that were deleted successfully (possibly zero). Users that did\n+   * not exist prior to calling deleteUsersAsync() will be considered to be successfully", "originalCommit": "93a043c54c3cf528f357b8f71d39be69a40988eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNjE1MQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r381436151", "bodyText": "Done.", "author": "rsgowman", "createdAt": "2020-02-19T17:41:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg3NzU1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg3ODQ5Ng==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r380878496", "bodyText": "Suggest just \"A maximum . . . \"", "author": "egilmorez", "createdAt": "2020-02-18T19:13:28Z", "path": "src/main/java/com/google/firebase/auth/FirebaseAuth.java", "diffHunk": "@@ -600,6 +603,81 @@ protected UserRecord execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Gets the user data corresponding to the specified identifiers.\n+   *\n+   * <p>There are no ordering guarantees; in particular, the nth entry in the users result list is\n+   * not guaranteed to correspond to the nth entry in the input parameters list.\n+   *\n+   * <p>Only a maximum of 100 identifiers may be supplied. If more than 100 identifiers are", "originalCommit": "93a043c54c3cf528f357b8f71d39be69a40988eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNTk4Nw==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r381435987", "bodyText": "Done.", "author": "rsgowman", "createdAt": "2020-02-19T17:41:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg3ODQ5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg3ODk4OA==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r380878988", "bodyText": "Suggest \"this method throws an {@link ...}", "author": "egilmorez", "createdAt": "2020-02-18T19:14:29Z", "path": "src/main/java/com/google/firebase/auth/FirebaseAuth.java", "diffHunk": "@@ -600,6 +603,81 @@ protected UserRecord execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Gets the user data corresponding to the specified identifiers.\n+   *\n+   * <p>There are no ordering guarantees; in particular, the nth entry in the users result list is\n+   * not guaranteed to correspond to the nth entry in the input parameters list.\n+   *\n+   * <p>Only a maximum of 100 identifiers may be supplied. If more than 100 identifiers are\n+   * supplied, this method will immediately throw an IllegalArgumentException.", "originalCommit": "93a043c54c3cf528f357b8f71d39be69a40988eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNTk3MQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r381435971", "bodyText": "Done.", "author": "rsgowman", "createdAt": "2020-02-19T17:41:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg3ODk4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg3OTY1Mg==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r380879652", "bodyText": "If we say \"specified\" above, this should probably work that way too.\nSame on the present tense/link format in line 635.", "author": "egilmorez", "createdAt": "2020-02-18T19:15:48Z", "path": "src/main/java/com/google/firebase/auth/FirebaseAuth.java", "diffHunk": "@@ -600,6 +603,81 @@ protected UserRecord execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Gets the user data corresponding to the specified identifiers.\n+   *\n+   * <p>There are no ordering guarantees; in particular, the nth entry in the users result list is\n+   * not guaranteed to correspond to the nth entry in the input parameters list.\n+   *\n+   * <p>Only a maximum of 100 identifiers may be supplied. If more than 100 identifiers are\n+   * supplied, this method will immediately throw an IllegalArgumentException.\n+   *\n+   * @param identifiers The identifiers used to indicate which user records should be returned. Must\n+   *     have 100 or fewer entries.\n+   * @return The corresponding user records.\n+   * @throws IllegalArgumentException If any of the identifiers are invalid or if more than 100\n+   *     identifiers are specified.\n+   * @throws NullPointerException If the identifiers parameter is null.\n+   * @throws FirebaseAuthException If an error occurs while retrieving user data.\n+   */\n+  public GetUsersResult getUsers(@NonNull Collection<UserIdentifier> identifiers)\n+      throws FirebaseAuthException {\n+    return getUsersOp(identifiers).call();\n+  }\n+\n+  /**\n+   * Gets the user data corresponding to the specified identifiers.\n+   *\n+   * <p>There are no ordering guarantees; in particular, the nth entry in the users result list is\n+   * not guaranteed to correspond to the nth entry in the input parameters list.\n+   *\n+   * <p>Only a maximum of 100 identifiers may be supplied. If more than 100 identifiers are", "originalCommit": "93a043c54c3cf528f357b8f71d39be69a40988eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNTk0OA==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r381435948", "bodyText": "Done/done.", "author": "rsgowman", "createdAt": "2020-02-19T17:41:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg3OTY1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4MDIzNg==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r380880236", "bodyText": "Similar changes here and next line as in 634 and 635.", "author": "egilmorez", "createdAt": "2020-02-18T19:16:55Z", "path": "src/main/java/com/google/firebase/auth/FirebaseAuth.java", "diffHunk": "@@ -841,6 +919,65 @@ protected Void execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Deletes the users specified by the given identifiers.\n+   *\n+   * <p>Deleting a non-existing user won't generate an error. (i.e. this method is idempotent.)\n+   * Non-existing users will be considered to be successfully deleted, and will therefore be counted\n+   * in the DeleteUsersResult.getSuccessCount() value.\n+   *\n+   * <p>Only a maximum of 1000 identifiers may be supplied. If more than 1000 identifiers are", "originalCommit": "93a043c54c3cf528f357b8f71d39be69a40988eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNTg5Nw==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r381435897", "bodyText": "Done/done.", "author": "rsgowman", "createdAt": "2020-02-19T17:41:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4MDIzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4MTE3Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r380881173", "bodyText": "Suggest omitting this comma.", "author": "egilmorez", "createdAt": "2020-02-18T19:18:40Z", "path": "src/main/java/com/google/firebase/auth/GetUsersResult.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.firebase.internal.NonNull;\n+import java.util.Set;\n+\n+/**\n+ * Represents the result of the {@link FirebaseAuth#getUsersAsync(Collection)} API.\n+ */\n+public final class GetUsersResult {\n+  private Set<UserRecord> users;\n+  private Set<UserIdentifier> notFound;\n+\n+  GetUsersResult(@NonNull Set<UserRecord> users, @NonNull Set<UserIdentifier> notFound) {\n+    this.users = checkNotNull(users);\n+    this.notFound = checkNotNull(notFound);\n+  }\n+\n+  /**\n+   * Set of user records, corresponding to the set of users that were requested. Only users", "originalCommit": "93a043c54c3cf528f357b8f71d39be69a40988eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNTY5NA==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r381435694", "bodyText": "Done", "author": "rsgowman", "createdAt": "2020-02-19T17:41:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4MTE3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4MzA3NQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r380883075", "bodyText": "Should this be \"the identity toolkit?\"\nThe article would normally be omitted only if this is a name, like uppercase \"Identity Toolkit\"", "author": "egilmorez", "createdAt": "2020-02-18T19:22:12Z", "path": "src/main/java/com/google/firebase/auth/internal/BatchDeleteResponse.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth.internal;\n+\n+import com.google.api.client.util.Key;\n+import java.util.List;\n+\n+/**\n+ * Represents the response from identity toolkit for a batch delete request.", "originalCommit": "93a043c54c3cf528f357b8f71d39be69a40988eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUxODk0OA==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r381518948", "bodyText": "Maybe? I think I just copied it from UploadAccountResponse. Other locations use 'Google identity toolkit' (HttpErrorResponse, GetAccountInfoResponse, DownloadAccountResponse.) FirebaseUserManager uses 'Google Identity Toolkit'.\nI've switched to 'Google Identity Toolkit'.\n(Though note that this is an internal object, so shouldn't show up in the public api docs regardless.)", "author": "rsgowman", "createdAt": "2020-02-19T20:14:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4MzA3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4MzMxNw==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r380883317", "bodyText": "Suggest caps for \"Admin SDK.\"", "author": "egilmorez", "createdAt": "2020-02-18T19:22:42Z", "path": "src/main/java/com/google/firebase/auth/internal/BatchDeleteResponse.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth.internal;\n+\n+import com.google.api.client.util.Key;\n+import java.util.List;\n+\n+/**\n+ * Represents the response from identity toolkit for a batch delete request.\n+ */\n+public class BatchDeleteResponse {\n+\n+  @Key(\"errors\")\n+  private List<ErrorInfo> errors;\n+\n+  public List<ErrorInfo> getErrors() {\n+    return errors;\n+  }\n+\n+  public static class ErrorInfo {\n+    @Key(\"index\")\n+    private int index;\n+\n+    @Key(\"message\")\n+    private String message;\n+\n+    // A 'localId' field also exists here, but is not currently exposed in the admin sdk.", "originalCommit": "93a043c54c3cf528f357b8f71d39be69a40988eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUxOTIxNQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r381519215", "bodyText": "Done.", "author": "rsgowman", "createdAt": "2020-02-19T20:15:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4MzMxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4MzkyMA==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r380883920", "bodyText": "Suggest {@code batchDelete}\n(or @link if that actually works for this)\nAlso, should \"we\" be \"you\" ?", "author": "egilmorez", "createdAt": "2020-02-18T19:23:51Z", "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "diffHunk": "@@ -137,6 +137,83 @@ public void testDeleteNonExistingUser() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testDeleteUsers() throws Exception {\n+    UserRecord user1 = newUserWithParams();\n+    UserRecord user2 = newUserWithParams();\n+    UserRecord user3 = newUserWithParams();\n+\n+    DeleteUsersResult deleteUsersResult = slowDeleteUsersAsync(\n+        ImmutableList.of(user1.getUid(), user2.getUid(), user3.getUid())\n+        ).get();\n+\n+    assertEquals(3, deleteUsersResult.getSuccessCount());\n+    assertEquals(0, deleteUsersResult.getFailureCount());\n+    assertTrue(deleteUsersResult.getErrors().isEmpty());\n+\n+    GetUsersResult getUsersResult = auth.getUsersAsync(ImmutableList.<UserIdentifier>of(\n+          new UidIdentifier(user1.getUid()),\n+          new UidIdentifier(user2.getUid()),\n+          new UidIdentifier(user3.getUid())\n+          )).get();\n+\n+    assertTrue(getUsersResult.getUsers().isEmpty());\n+    assertEquals(3, getUsersResult.getNotFound().size());\n+  }\n+\n+  @Test\n+  public void testDeleteExistingAndNonExistingUsers() throws Exception {\n+    UserRecord user1 = newUserWithParams();\n+\n+    DeleteUsersResult deleteUsersResult = slowDeleteUsersAsync(\n+        ImmutableList.of(user1.getUid(), \"uid-that-doesnt-exist\")\n+        ).get();\n+\n+    assertEquals(2, deleteUsersResult.getSuccessCount());\n+    assertEquals(0, deleteUsersResult.getFailureCount());\n+    assertTrue(deleteUsersResult.getErrors().isEmpty());\n+\n+    GetUsersResult getUsersResult = auth.getUsersAsync(ImmutableList.<UserIdentifier>of(\n+          new UidIdentifier(user1.getUid()),\n+          new UidIdentifier(\"uid-that-doesnt-exist\")\n+          )).get();\n+\n+    assertTrue(getUsersResult.getUsers().isEmpty());\n+    assertEquals(2, getUsersResult.getNotFound().size());\n+  }\n+\n+  @Test\n+  public void testDeleteUsersIsIdempotent() throws Exception {\n+    UserRecord user1 = newUserWithParams();\n+\n+    DeleteUsersResult result = slowDeleteUsersAsync(\n+        ImmutableList.of(user1.getUid())\n+        ).get();\n+\n+    assertEquals(1, result.getSuccessCount());\n+    assertEquals(0, result.getFailureCount());\n+    assertTrue(result.getErrors().isEmpty());\n+\n+    // Delete the user again, ensuring that everything still counts as a success.\n+    result = slowDeleteUsersAsync(\n+        ImmutableList.of(user1.getUid())\n+        ).get();\n+\n+    assertEquals(1, result.getSuccessCount());\n+    assertEquals(0, result.getFailureCount());\n+    assertTrue(result.getErrors().isEmpty());\n+  }\n+\n+  /**\n+   * The batchDelete endpoint is currently rate limited to 1qps. Use this test helper to ensure we", "originalCommit": "93a043c54c3cf528f357b8f71d39be69a40988eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUyMTA1OQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r381521059", "bodyText": "Used @code.\n\nwe/you\n\n\ud83e\udd37\u200d\u2642\ufe0f Either seem reasonable to me. I've gone with 'you'.", "author": "rsgowman", "createdAt": "2020-02-19T20:18:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4MzkyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4NDYwMQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r380884601", "bodyText": "Suggest @link or @code for all instances of this.", "author": "egilmorez", "createdAt": "2020-02-18T19:25:14Z", "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "diffHunk": "@@ -248,6 +325,35 @@ public void testUserLifecycle() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testLastRefreshTime() throws Exception {\n+    RandomUser user = RandomUser.create();\n+    UserRecord newUserRecord = auth.createUser(new CreateRequest()\n+        .setUid(user.uid)\n+        .setEmail(user.email)\n+        .setEmailVerified(false)\n+        .setPassword(\"password\"));\n+\n+    try {\n+      // New users should not have a lastRefreshTimestamp set.", "originalCommit": "93a043c54c3cf528f357b8f71d39be69a40988eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUyNDExMQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r381524111", "bodyText": "This isn't a javadoc comment; is it conventional to use these types of annotations for inline docs like this?", "author": "rsgowman", "createdAt": "2020-02-19T20:25:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4NDYwMQ=="}], "type": "inlineReview"}, {"oid": "9bd3813fb44775d9508e7ab72101544841636223", "url": "https://github.com/firebase/firebase-admin-java/commit/9bd3813fb44775d9508e7ab72101544841636223", "message": "review feedback", "committedDate": "2020-02-20T15:45:46Z", "type": "commit"}, {"oid": "df3519e9a0c39af2dc2c8d02aa36d95d2317b76e", "url": "https://github.com/firebase/firebase-admin-java/commit/df3519e9a0c39af2dc2c8d02aa36d95d2317b76e", "message": "clang-format over FirebaseAuthIT.java\n\ni.e.:\nclang-format src/test/java/com/google/firebase/auth/FirebaseAuthIT.java \\\n    --lines=140:215 --lines=328:356 --lines=822:838 -i", "committedDate": "2020-02-20T15:48:34Z", "type": "commit"}, {"oid": "727b15bc9e6e95fed10b2ba2a9609ccc86ff8b21", "url": "https://github.com/firebase/firebase-admin-java/commit/727b15bc9e6e95fed10b2ba2a9609ccc86ff8b21", "message": "Merge remote-tracking branch 'origin/master' into rsgowman/bulk_get_users", "committedDate": "2020-02-20T16:35:03Z", "type": "commit"}, {"oid": "a67aef859566e67f892570e0aed9a78e5793814e", "url": "https://github.com/firebase/firebase-admin-java/commit/a67aef859566e67f892570e0aed9a78e5793814e", "message": "Switch unit tests to use .setCredentials() when calling FirebaseApp.initializeApp", "committedDate": "2020-02-20T16:39:57Z", "type": "commit"}, {"oid": "cf7026e97e6b47e94a1974326c1b6514114dd21d", "url": "https://github.com/firebase/firebase-admin-java/commit/cf7026e97e6b47e94a1974326c1b6514114dd21d", "message": "docs typo", "committedDate": "2020-02-21T15:38:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3Nzc4MQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r389777781", "bodyText": "\"Page size is limited to...\"", "author": "cbonnie", "createdAt": "2020-03-09T15:44:21Z", "path": "src/main/java/com/google/firebase/auth/FirebaseAuth.java", "diffHunk": "@@ -600,6 +603,81 @@ protected UserRecord execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Gets the user data corresponding to the specified identifiers.\n+   *\n+   * <p>There are no ordering guarantees; in particular, the nth entry in the users result list is\n+   * not guaranteed to correspond to the nth entry in the input parameters list.\n+   *\n+   * <p>A maximum of 100 identifiers may be specified. If more than 100 identifiers are\n+   * supplied, this method throws an {@link IllegalArgumentException}.\n+   *\n+   * @param identifiers The identifiers used to indicate which user records should be returned. Must\n+   *     have 100 or fewer entries.\n+   * @return The corresponding user records.\n+   * @throws IllegalArgumentException If any of the identifiers are invalid or if more than 100\n+   *     identifiers are specified.\n+   * @throws NullPointerException If the identifiers parameter is null.\n+   * @throws FirebaseAuthException If an error occurs while retrieving user data.\n+   */\n+  public GetUsersResult getUsers(@NonNull Collection<UserIdentifier> identifiers)\n+      throws FirebaseAuthException {\n+    return getUsersOp(identifiers).call();\n+  }\n+\n+  /**\n+   * Gets the user data corresponding to the specified identifiers.\n+   *\n+   * <p>There are no ordering guarantees; in particular, the nth entry in the users result list is\n+   * not guaranteed to correspond to the nth entry in the input parameters list.\n+   *\n+   * <p>A maximum of 100 identifiers may be specified. If more than 100 identifiers are\n+   * supplied, this method throws an {@link IllegalArgumentException}.\n+   *\n+   * @param identifiers The identifiers used to indicate which user records should be returned.\n+   *     Must have 100 or fewer entries.\n+   * @return An {@code ApiFuture} that resolves to the corresponding user records.\n+   * @throws IllegalArgumentException If any of the identifiers are invalid or if more than 100\n+   *     identifiers are specified.\n+   * @throws NullPointerException If the identifiers parameter is null.\n+   */\n+  public ApiFuture<GetUsersResult> getUsersAsync(@NonNull Collection<UserIdentifier> identifiers) {\n+    return getUsersOp(identifiers).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<GetUsersResult, FirebaseAuthException> getUsersOp(\n+      @NonNull final Collection<UserIdentifier> identifiers) {\n+    checkNotDestroyed();\n+    checkNotNull(identifiers, \"identifiers must not be null\");\n+    checkArgument(identifiers.size() <= FirebaseUserManager.MAX_GET_ACCOUNTS_BATCH_SIZE,\n+        \"identifiers parameter must have <= \" + FirebaseUserManager.MAX_GET_ACCOUNTS_BATCH_SIZE\n+        + \" entries.\");\n+\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<GetUsersResult, FirebaseAuthException>() {\n+      @Override\n+      protected GetUsersResult execute() throws FirebaseAuthException {\n+        Set<UserRecord> users = userManager.getAccountInfo(identifiers);\n+        Set<UserIdentifier> notFound = new HashSet<>();\n+        for (UserIdentifier id : identifiers) {\n+          if (!isUserFound(id, users)) {\n+            notFound.add(id);\n+          }\n+        }\n+        return new GetUsersResult(users, notFound);\n+      }\n+    };\n+  }\n+\n+  private boolean isUserFound(UserIdentifier id, Collection<UserRecord> userRecords) {\n+    for (UserRecord userRecord : userRecords) {\n+      if (id.matches(userRecord)) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n   /**\n    * Gets a page of users starting from the specified {@code pageToken}. Page size will be", "originalCommit": "cf7026e97e6b47e94a1974326c1b6514114dd21d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM4NDQ5NA==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r422384494", "bodyText": "Done.", "author": "rsgowman", "createdAt": "2020-05-08T21:29:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3Nzc4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3OTg4NA==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r389779884", "bodyText": "Suggest:\n\"Deleting a non-existing user does not generate an error (the method is idempotent). Non-existing users are considered to be successfully deleted and are therefore included in the DeleteUsersResult.getSuccessCount() value.\"", "author": "cbonnie", "createdAt": "2020-03-09T15:47:22Z", "path": "src/main/java/com/google/firebase/auth/FirebaseAuth.java", "diffHunk": "@@ -841,6 +919,65 @@ protected Void execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Deletes the users specified by the given identifiers.\n+   *\n+   * <p>Deleting a non-existing user won't generate an error. (i.e. this method is idempotent.)", "originalCommit": "cf7026e97e6b47e94a1974326c1b6514114dd21d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM4NDk4OA==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r422384988", "bodyText": "Done.", "author": "rsgowman", "createdAt": "2020-05-08T21:30:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3OTg4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc4MjIyNA==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r389782224", "bodyText": "Suggest:\n\"This API has a rate limit of 1 QPS. Exceeding the limit may result in a quota exceeded error. If you want to delete more than 1000 users, we suggest adding a delay to ensure you don't exceed the limit.\"", "author": "cbonnie", "createdAt": "2020-03-09T15:50:57Z", "path": "src/main/java/com/google/firebase/auth/FirebaseAuth.java", "diffHunk": "@@ -841,6 +919,65 @@ protected Void execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Deletes the users specified by the given identifiers.\n+   *\n+   * <p>Deleting a non-existing user won't generate an error. (i.e. this method is idempotent.)\n+   * Non-existing users will be considered to be successfully deleted, and will therefore be counted\n+   * in the DeleteUsersResult.getSuccessCount() value.\n+   *\n+   * <p>A maximum of 1000 identifiers may be supplied. If more than 1000 identifiers are\n+   * supplied, this method throws an {@link IllegalArgumentException}.\n+   *\n+   * <p>This API is currently rate limited at the server to 1 QPS. If you exceed this, you may get a", "originalCommit": "cf7026e97e6b47e94a1974326c1b6514114dd21d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM4NTM5NQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r422385395", "bodyText": "Done.", "author": "rsgowman", "createdAt": "2020-05-08T21:31:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc4MjIyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc4MzkzMA==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r389783930", "bodyText": "Suggest:\n\"Imports the provided list of users into Firebase Auth. You can import a maximum of 1000 users at a time. This operation is optimized for bulk imports and ignores checks on user identifiers.\"\n(Not completely sure about the user identifiers part, I'm assuming that's what the operation would've checked for)", "author": "cbonnie", "createdAt": "2020-03-09T15:53:27Z", "path": "src/main/java/com/google/firebase/auth/FirebaseAuth.java", "diffHunk": "@@ -841,6 +919,65 @@ protected Void execute() throws FirebaseAuthException {\n     };\n   }\n \n+  /**\n+   * Deletes the users specified by the given identifiers.\n+   *\n+   * <p>Deleting a non-existing user won't generate an error. (i.e. this method is idempotent.)\n+   * Non-existing users will be considered to be successfully deleted, and will therefore be counted\n+   * in the DeleteUsersResult.getSuccessCount() value.\n+   *\n+   * <p>A maximum of 1000 identifiers may be supplied. If more than 1000 identifiers are\n+   * supplied, this method throws an {@link IllegalArgumentException}.\n+   *\n+   * <p>This API is currently rate limited at the server to 1 QPS. If you exceed this, you may get a\n+   * quota exceeded error. Therefore, if you want to delete more than 1000 users, you may need to\n+   * add a delay to ensure you don't go over this limit.\n+   *\n+   * @param uids The uids of the users to be deleted. Must have <= 1000 entries.\n+   * @return The total number of successful/failed deletions, as well as the array of errors that\n+   *     correspond to the failed deletions.\n+   * @throw IllegalArgumentException If any of the identifiers are invalid or if more than 1000\n+   *     identifiers are specified.\n+   * @throws FirebaseAuthException If an error occurs while deleting users.\n+   */\n+  public DeleteUsersResult deleteUsers(List<String> uids) throws FirebaseAuthException {\n+    return deleteUsersOp(uids).call();\n+  }\n+\n+  /**\n+   * Similar to {@link #deleteUsers(List)} but performs the operation asynchronously.\n+   *\n+   * @param uids The uids of the users to be deleted. Must have <= 1000 entries.\n+   * @return An {@code ApiFuture} that resolves to the total number of successful/failed\n+   *     deletions, as well as the array of errors that correspond to the failed deletions. If an\n+   *     error occurs while deleting the user account, the future throws a\n+   *     {@link FirebaseAuthException}.\n+   * @throw IllegalArgumentException If any of the identifiers are invalid or if more than 1000\n+   *     identifiers are specified.\n+   */\n+  public ApiFuture<DeleteUsersResult> deleteUsersAsync(List<String> uids) {\n+    return deleteUsersOp(uids).callAsync(firebaseApp);\n+  }\n+\n+  private CallableOperation<DeleteUsersResult, FirebaseAuthException> deleteUsersOp(\n+      final List<String> uids) {\n+    checkNotDestroyed();\n+    checkNotNull(uids, \"uids must not be null\");\n+    for (String uid : uids) {\n+      UserRecord.checkUid(uid);\n+    }\n+    checkArgument(uids.size() <= FirebaseUserManager.MAX_DELETE_ACCOUNTS_BATCH_SIZE,\n+        \"uids parameter must have <= \" + FirebaseUserManager.MAX_DELETE_ACCOUNTS_BATCH_SIZE\n+        + \" entries.\");\n+    final FirebaseUserManager userManager = getUserManager();\n+    return new CallableOperation<DeleteUsersResult, FirebaseAuthException>() {\n+      @Override\n+      protected DeleteUsersResult execute() throws FirebaseAuthException {\n+        return userManager.deleteUsers(uids);\n+      }\n+    };\n+  }\n+\n   /**\n    * Imports the provided list of users into Firebase Auth. At most 1000 users can be imported at a\n    * time. This operation is optimized for bulk imports and will ignore checks on identifier", "originalCommit": "cf7026e97e6b47e94a1974326c1b6514114dd21d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM4NzM3OA==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r422387378", "bodyText": "I changed the first two sentences as per your suggestion. I've changed the last to \"This operation is optimized for bulk imports and does not check identifier uniqueness which could result in duplications\".", "author": "rsgowman", "createdAt": "2020-05-08T21:36:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc4MzkzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc4NDkwNg==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r389784906", "bodyText": "\"look up\" (verb)", "author": "cbonnie", "createdAt": "2020-03-09T15:54:53Z", "path": "src/main/java/com/google/firebase/auth/internal/GetAccountInfoRequest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth.internal;\n+\n+import com.google.api.client.util.Key;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Represents the request to lookup account information.", "originalCommit": "cf7026e97e6b47e94a1974326c1b6514114dd21d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM4NzgzNw==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r422387837", "bodyText": "Done.", "author": "rsgowman", "createdAt": "2020-05-08T21:38:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc4NDkwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc4NTIwMg==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r389785202", "bodyText": "Suggest: \"Delete the user again to ensure that...\"", "author": "cbonnie", "createdAt": "2020-03-09T15:55:19Z", "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "diffHunk": "@@ -137,6 +137,78 @@ public void testDeleteNonExistingUser() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testDeleteUsers() throws Exception {\n+    UserRecord user1 = newUserWithParams();\n+    UserRecord user2 = newUserWithParams();\n+    UserRecord user3 = newUserWithParams();\n+\n+    DeleteUsersResult deleteUsersResult =\n+        slowDeleteUsersAsync(ImmutableList.of(user1.getUid(), user2.getUid(), user3.getUid()))\n+            .get();\n+\n+    assertEquals(3, deleteUsersResult.getSuccessCount());\n+    assertEquals(0, deleteUsersResult.getFailureCount());\n+    assertTrue(deleteUsersResult.getErrors().isEmpty());\n+\n+    GetUsersResult getUsersResult =\n+        auth.getUsersAsync(\n+                ImmutableList.<UserIdentifier>of(new UidIdentifier(user1.getUid()),\n+                    new UidIdentifier(user2.getUid()), new UidIdentifier(user3.getUid())))\n+            .get();\n+\n+    assertTrue(getUsersResult.getUsers().isEmpty());\n+    assertEquals(3, getUsersResult.getNotFound().size());\n+  }\n+\n+  @Test\n+  public void testDeleteExistingAndNonExistingUsers() throws Exception {\n+    UserRecord user1 = newUserWithParams();\n+\n+    DeleteUsersResult deleteUsersResult =\n+        slowDeleteUsersAsync(ImmutableList.of(user1.getUid(), \"uid-that-doesnt-exist\")).get();\n+\n+    assertEquals(2, deleteUsersResult.getSuccessCount());\n+    assertEquals(0, deleteUsersResult.getFailureCount());\n+    assertTrue(deleteUsersResult.getErrors().isEmpty());\n+\n+    GetUsersResult getUsersResult =\n+        auth.getUsersAsync(ImmutableList.<UserIdentifier>of(new UidIdentifier(user1.getUid()),\n+                               new UidIdentifier(\"uid-that-doesnt-exist\")))\n+            .get();\n+\n+    assertTrue(getUsersResult.getUsers().isEmpty());\n+    assertEquals(2, getUsersResult.getNotFound().size());\n+  }\n+\n+  @Test\n+  public void testDeleteUsersIsIdempotent() throws Exception {\n+    UserRecord user1 = newUserWithParams();\n+\n+    DeleteUsersResult result = slowDeleteUsersAsync(ImmutableList.of(user1.getUid())).get();\n+\n+    assertEquals(1, result.getSuccessCount());\n+    assertEquals(0, result.getFailureCount());\n+    assertTrue(result.getErrors().isEmpty());\n+\n+    // Delete the user again, ensuring that everything still counts as a success.", "originalCommit": "cf7026e97e6b47e94a1974326c1b6514114dd21d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM4ODEyMw==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r422388123", "bodyText": "Done.", "author": "rsgowman", "createdAt": "2020-05-08T21:38:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc4NTIwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc4NTcxNQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r389785715", "bodyText": "\"The {@code batchDelete} endpoint has a rate limit of 1 QPS. Use this test helper to ensure you don't exceed the quota.\"", "author": "cbonnie", "createdAt": "2020-03-09T15:56:04Z", "path": "src/test/java/com/google/firebase/auth/FirebaseAuthIT.java", "diffHunk": "@@ -137,6 +137,78 @@ public void testDeleteNonExistingUser() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testDeleteUsers() throws Exception {\n+    UserRecord user1 = newUserWithParams();\n+    UserRecord user2 = newUserWithParams();\n+    UserRecord user3 = newUserWithParams();\n+\n+    DeleteUsersResult deleteUsersResult =\n+        slowDeleteUsersAsync(ImmutableList.of(user1.getUid(), user2.getUid(), user3.getUid()))\n+            .get();\n+\n+    assertEquals(3, deleteUsersResult.getSuccessCount());\n+    assertEquals(0, deleteUsersResult.getFailureCount());\n+    assertTrue(deleteUsersResult.getErrors().isEmpty());\n+\n+    GetUsersResult getUsersResult =\n+        auth.getUsersAsync(\n+                ImmutableList.<UserIdentifier>of(new UidIdentifier(user1.getUid()),\n+                    new UidIdentifier(user2.getUid()), new UidIdentifier(user3.getUid())))\n+            .get();\n+\n+    assertTrue(getUsersResult.getUsers().isEmpty());\n+    assertEquals(3, getUsersResult.getNotFound().size());\n+  }\n+\n+  @Test\n+  public void testDeleteExistingAndNonExistingUsers() throws Exception {\n+    UserRecord user1 = newUserWithParams();\n+\n+    DeleteUsersResult deleteUsersResult =\n+        slowDeleteUsersAsync(ImmutableList.of(user1.getUid(), \"uid-that-doesnt-exist\")).get();\n+\n+    assertEquals(2, deleteUsersResult.getSuccessCount());\n+    assertEquals(0, deleteUsersResult.getFailureCount());\n+    assertTrue(deleteUsersResult.getErrors().isEmpty());\n+\n+    GetUsersResult getUsersResult =\n+        auth.getUsersAsync(ImmutableList.<UserIdentifier>of(new UidIdentifier(user1.getUid()),\n+                               new UidIdentifier(\"uid-that-doesnt-exist\")))\n+            .get();\n+\n+    assertTrue(getUsersResult.getUsers().isEmpty());\n+    assertEquals(2, getUsersResult.getNotFound().size());\n+  }\n+\n+  @Test\n+  public void testDeleteUsersIsIdempotent() throws Exception {\n+    UserRecord user1 = newUserWithParams();\n+\n+    DeleteUsersResult result = slowDeleteUsersAsync(ImmutableList.of(user1.getUid())).get();\n+\n+    assertEquals(1, result.getSuccessCount());\n+    assertEquals(0, result.getFailureCount());\n+    assertTrue(result.getErrors().isEmpty());\n+\n+    // Delete the user again, ensuring that everything still counts as a success.\n+    result = slowDeleteUsersAsync(ImmutableList.of(user1.getUid())).get();\n+\n+    assertEquals(1, result.getSuccessCount());\n+    assertEquals(0, result.getFailureCount());\n+    assertTrue(result.getErrors().isEmpty());\n+  }\n+\n+  /**\n+   * The {@code batchDelete} endpoint is currently rate limited to 1qps. Use this test helper to", "originalCommit": "cf7026e97e6b47e94a1974326c1b6514114dd21d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM4ODM5OQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/365#discussion_r422388399", "bodyText": "Done.", "author": "rsgowman", "createdAt": "2020-05-08T21:39:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc4NTcxNQ=="}], "type": "inlineReview"}, {"oid": "844d751acec53327cad239dd7e30a3040c2ffcf9", "url": "https://github.com/firebase/firebase-admin-java/commit/844d751acec53327cad239dd7e30a3040c2ffcf9", "message": "Merge remote-tracking branch 'origin/master' into rsgowman/bulk_get_users", "committedDate": "2020-05-07T18:22:29Z", "type": "commit"}, {"oid": "5afc278380130f4002a60eb9180c735400d238d5", "url": "https://github.com/firebase/firebase-admin-java/commit/5afc278380130f4002a60eb9180c735400d238d5", "message": "doc fixups", "committedDate": "2020-05-08T21:40:00Z", "type": "commit"}]}