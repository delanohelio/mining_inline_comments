{"pr_number": 500, "pr_title": "Add toJSON and fromJSON to Remote Config Template", "pr_createdAt": "2020-12-07T21:08:01Z", "pr_url": "https://github.com/firebase/firebase-admin-java/pull/500", "timeline": [{"oid": "239401df217666331772f0022132c24d4476a75e", "url": "https://github.com/firebase/firebase-admin-java/commit/239401df217666331772f0022132c24d4476a75e", "message": "Add toJSON and fromJSON to Remote Config Template", "committedDate": "2020-12-07T21:10:15Z", "type": "forcePushed"}, {"oid": "071940e3e852fd03f24ca69029f96b6eb23caf60", "url": "https://github.com/firebase/firebase-admin-java/commit/071940e3e852fd03f24ca69029f96b6eb23caf60", "message": "Add toJSON and fromJSON to Remote Config Template", "committedDate": "2020-12-07T21:20:36Z", "type": "commit"}, {"oid": "071940e3e852fd03f24ca69029f96b6eb23caf60", "url": "https://github.com/firebase/firebase-admin-java/commit/071940e3e852fd03f24ca69029f96b6eb23caf60", "message": "Add toJSON and fromJSON to Remote Config Template", "committedDate": "2020-12-07T21:20:36Z", "type": "forcePushed"}, {"oid": "da323994ac5c0ffc95bc64b2d7f1040e45a0f77b", "url": "https://github.com/firebase/firebase-admin-java/commit/da323994ac5c0ffc95bc64b2d7f1040e45a0f77b", "message": "Update version update time serialization", "committedDate": "2020-12-08T17:30:54Z", "type": "commit"}, {"oid": "da323994ac5c0ffc95bc64b2d7f1040e45a0f77b", "url": "https://github.com/firebase/firebase-admin-java/commit/da323994ac5c0ffc95bc64b2d7f1040e45a0f77b", "message": "Update version update time serialization", "committedDate": "2020-12-08T17:30:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3MTE3Ng==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r537871176", "bodyText": "return", "author": "hiranya911", "createdAt": "2020-12-07T22:10:52Z", "path": "src/main/java/com/google/firebase/remoteconfig/Template.java", "diffHunk": "@@ -177,6 +216,24 @@ public Template setVersion(Version version) {\n     return this;\n   }\n \n+  /**\n+   * Gets the JSON-serializable representation of this template.\n+   *\n+   * @return A JSON-serializable representation of this {@link Template} instance.\n+   */\n+  public String toJSON() {\n+    String jsonSerialization;\n+    Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ParameterValue.InAppDefault.class, new InAppDefaultAdapter())\n+            .create();\n+    try {\n+      jsonSerialization = gson.toJson(this);", "originalCommit": "071940e3e852fd03f24ca69029f96b6eb23caf60", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc0NTQyMQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r538745421", "bodyText": "We should use the JsonFactory that comes from AppOptions", "author": "hiranya911", "createdAt": "2020-12-08T19:27:14Z", "path": "src/main/java/com/google/firebase/remoteconfig/Template.java", "diffHunk": "@@ -73,6 +87,22 @@ public Template() {\n     if (templateResponse.getVersion() != null) {\n       this.version = new Version(templateResponse.getVersion());\n     }\n+    this.etag = templateResponse.getEtag();\n+  }\n+\n+  /**\n+   * Creates and returns a new Remote Config template from a JSON string.\n+   *\n+   * @param json A non-null JSON string to populate a Remote Config template.\n+   * @return A new {@link Template} instance.\n+   * @throws IOException If the input JSON string is not parsable.\n+   */\n+  public static Template fromJSON(@NonNull String json) throws IOException {\n+    checkArgument(!Strings.isNullOrEmpty(json), \"JSON String must not be null or empty.\");\n+    JsonFactory jsonFactory = Utils.getDefaultJsonFactory();", "originalCommit": "da323994ac5c0ffc95bc64b2d7f1040e45a0f77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgzMzMxMw==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r538833313", "bodyText": "Note: Discussed offline and decided to use the default json factory here for local serializations. Added a comment\nin code to clarify.", "author": "lahirumaramba", "createdAt": "2020-12-08T21:50:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc0NTQyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc0OTM4MQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r538749381", "bodyText": "Why not just construct a TemplateResponse instance here and then serialize that via JsonFactory? Gson shouldn't be needed.", "author": "hiranya911", "createdAt": "2020-12-08T19:33:24Z", "path": "src/main/java/com/google/firebase/remoteconfig/Template.java", "diffHunk": "@@ -177,6 +207,25 @@ public Template setVersion(Version version) {\n     return this;\n   }\n \n+  /**\n+   * Gets the JSON-serializable representation of this template.\n+   *\n+   * @return A JSON-serializable representation of this {@link Template} instance.\n+   */\n+  public String toJSON() {\n+    String jsonSerialization;\n+    Gson gson = new GsonBuilder()", "originalCommit": "da323994ac5c0ffc95bc64b2d7f1040e45a0f77b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgzMzgzOA==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r538833838", "bodyText": "Good call! Updated the code to use Response types. Thanks!", "author": "lahirumaramba", "createdAt": "2020-12-08T21:51:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc0OTM4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc0OTkxMA==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r538749910", "bodyText": "This wouldn't be needed if we used the existing TemplateResponse and VersionResponse types to handle serialization.", "author": "hiranya911", "createdAt": "2020-12-08T19:34:17Z", "path": "src/main/java/com/google/firebase/remoteconfig/Template.java", "diffHunk": "@@ -224,4 +273,33 @@ public boolean equals(Object o) {\n   public int hashCode() {\n     return Objects.hash(etag, parameters, conditions, parameterGroups, version);\n   }\n+\n+  private static class InAppDefaultAdapter implements JsonSerializer<ParameterValue.InAppDefault> {\n+\n+    @Override\n+    public JsonElement serialize(ParameterValue.InAppDefault src, Type typeOfSrc,\n+                                 JsonSerializationContext context) {\n+      JsonObject obj = new JsonObject();\n+      obj.addProperty(\"useInAppDefault\", true);\n+      return obj;\n+    }\n+  }\n+\n+  private static class VersionAdapter implements JsonSerializer<Version> {", "originalCommit": "da323994ac5c0ffc95bc64b2d7f1040e45a0f77b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1MDI2OA==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r538750268", "bodyText": "Can be handled via ParameterValueResponse.", "author": "hiranya911", "createdAt": "2020-12-08T19:34:50Z", "path": "src/main/java/com/google/firebase/remoteconfig/Template.java", "diffHunk": "@@ -224,4 +273,33 @@ public boolean equals(Object o) {\n   public int hashCode() {\n     return Objects.hash(etag, parameters, conditions, parameterGroups, version);\n   }\n+\n+  private static class InAppDefaultAdapter implements JsonSerializer<ParameterValue.InAppDefault> {", "originalCommit": "da323994ac5c0ffc95bc64b2d7f1040e45a0f77b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b42051cd2b545f12d46d0577a245de34c8c21185", "url": "https://github.com/firebase/firebase-admin-java/commit/b42051cd2b545f12d46d0577a245de34c8c21185", "message": "Use Response types to serialize template", "committedDate": "2020-12-08T21:46:57Z", "type": "commit"}, {"oid": "8d92f733542f8765b0da375cf9b689eb09181c2e", "url": "https://github.com/firebase/firebase-admin-java/commit/8d92f733542f8765b0da375cf9b689eb09181c2e", "message": "Remove json string equality check to prevent failures with child reordering", "committedDate": "2020-12-08T22:06:53Z", "type": "commit"}, {"oid": "ca4907df9f52747f170f920278d82466ec79a123", "url": "https://github.com/firebase/firebase-admin-java/commit/ca4907df9f52747f170f920278d82466ec79a123", "message": "Remove unused time validation function", "committedDate": "2020-12-08T22:17:00Z", "type": "commit"}, {"oid": "4bf780a2f57394ed00a52dd2951e373bc3046df8", "url": "https://github.com/firebase/firebase-admin-java/commit/4bf780a2f57394ed00a52dd2951e373bc3046df8", "message": "Improve Version update time unit tests", "committedDate": "2020-12-08T22:21:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg0NjgyMA==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r538846820", "bodyText": "Should we throw a FirebaseRemoteConfigException here?", "author": "hiranya911", "createdAt": "2020-12-08T22:13:15Z", "path": "src/main/java/com/google/firebase/remoteconfig/Template.java", "diffHunk": "@@ -73,6 +79,23 @@ public Template() {\n     if (templateResponse.getVersion() != null) {\n       this.version = new Version(templateResponse.getVersion());\n     }\n+    this.etag = templateResponse.getEtag();\n+  }\n+\n+  /**\n+   * Creates and returns a new Remote Config template from a JSON string.\n+   *\n+   * @param json A non-null JSON string to populate a Remote Config template.\n+   * @return A new {@link Template} instance.\n+   * @throws IOException If the input JSON string is not parsable.\n+   */\n+  public static Template fromJSON(@NonNull String json) throws IOException {", "originalCommit": "8d92f733542f8765b0da375cf9b689eb09181c2e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg0ODc1MA==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r538848750", "bodyText": "Nit: Slightly better for readability if this was turned into an if condition.\nif (includeAll) {\n  return templateResponse.setEtag(this.etag);\n}\n\nreturn templateResponse;", "author": "hiranya911", "createdAt": "2020-12-08T22:16:35Z", "path": "src/main/java/com/google/firebase/remoteconfig/Template.java", "diffHunk": "@@ -196,12 +233,13 @@ TemplateResponse toTemplateResponse() {\n       parameterGroupResponse.put(entry.getKey(), entry.getValue().toParameterGroupResponse());\n     }\n     TemplateResponse.VersionResponse versionResponse = (this.version == null) ? null\n-            : this.version.toVersionResponse();\n+            : this.version.toVersionResponse(includeAll);\n     return new TemplateResponse()\n             .setParameters(parameterResponses)\n             .setConditions(conditionResponses)\n             .setParameterGroups(parameterGroupResponse)\n-            .setVersion(versionResponse);\n+            .setVersion(versionResponse)\n+            .setEtag(includeAll ? this.etag : null);", "originalCommit": "8d92f733542f8765b0da375cf9b689eb09181c2e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg0OTk1Nw==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r538849957", "bodyText": "Nit:\nVersionResponse response = new VersionResponse().setDescription(this.description);\nif (includeAll) {\n  // add others\n}\n\nreturn response;", "author": "hiranya911", "createdAt": "2020-12-08T22:18:11Z", "path": "src/main/java/com/google/firebase/remoteconfig/Version.java", "diffHunk": "@@ -196,8 +190,20 @@ public Version setDescription(String description) {\n     return this;\n   }\n \n-  VersionResponse toVersionResponse() {\n+  VersionResponse toVersionResponse(boolean includeAll) {\n+    if (!includeAll) {", "originalCommit": "8d92f733542f8765b0da375cf9b689eb09181c2e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg1MDY3MA==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r538850670", "bodyText": "Add a comment here indicating that this is never set by the HTTP response payload.", "author": "hiranya911", "createdAt": "2020-12-08T22:19:29Z", "path": "src/main/java/com/google/firebase/remoteconfig/internal/TemplateResponse.java", "diffHunk": "@@ -39,6 +39,9 @@\n   @Key(\"version\")\n   private VersionResponse version;\n \n+  @Key(\"etag\")", "originalCommit": "ca4907df9f52747f170f920278d82466ec79a123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg1MjA0NQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r538852045", "bodyText": "Add newline at eof", "author": "hiranya911", "createdAt": "2020-12-08T22:21:49Z", "path": "src/test/resources/rcTemplateWithETag.json", "diffHunk": "@@ -0,0 +1 @@\n+{\"conditions\":[{\"expression\":\"exp ios\",\"name\":\"ios_en\",\"tagColor\":\"INDIGO\"},{\"expression\":\"exp android\",\"name\":\"android_en\"}],\"etag\":\"etag-0010201\",\"parameterGroups\":{\"greetings_group\":{\"description\":\"description\",\"parameters\":{\"greeting_text\":{\"conditionalValues\":{\"promo\":{\"useInAppDefault\":true},\"android\":{\"value\":\"hello android\"},\"ios\":{\"value\":\"hello ios\"}},\"defaultValue\":{\"useInAppDefault\":true},\"description\":\"greeting text\"},\"greeting_header\":{\"conditionalValues\":{\"promo\":{\"useInAppDefault\":true},\"android\":{\"value\":\"hello android\"},\"ios\":{\"value\":\"hello ios\"}},\"defaultValue\":{\"useInAppDefault\":true},\"description\":\"greeting header text\"}}}},\"parameters\":{\"greeting_text\":{\"conditionalValues\":{\"promo\":{\"useInAppDefault\":true},\"android\":{\"value\":\"hello android\"},\"ios\":{\"value\":\"hello ios\"}},\"defaultValue\":{\"useInAppDefault\":true},\"description\":\"greeting text\"},\"greeting_header\":{\"conditionalValues\":{\"promo\":{\"useInAppDefault\":true},\"android\":{\"value\":\"hello android\"},\"ios\":{\"value\":\"hello ios\"}},\"defaultValue\":{\"useInAppDefault\":true},\"description\":\"greeting header text\"}},\"version\":{\"description\":\"promo version\",\"legacy\":false}}", "originalCommit": "ca4907df9f52747f170f920278d82466ec79a123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYwMzU4Mg==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r539603582", "bodyText": "We no longer need this file. Removed.", "author": "lahirumaramba", "createdAt": "2020-12-09T19:56:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg1MjA0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg1MzczMQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r538853731", "bodyText": "This always ends up parsing at least twice. Can we improve that?\ntry {\n  return convertFromUtcZuluFormat(dateString); // common case first\n} catch (ParseException e) {\n  return convertFromUtcDateFormat(dateString); // fall back\n}", "author": "hiranya911", "createdAt": "2020-12-08T22:24:53Z", "path": "src/main/java/com/google/firebase/remoteconfig/RemoteConfigUtil.java", "diffHunk": "@@ -30,10 +31,52 @@ static boolean isValidVersionNumber(String versionNumber) {\n     return !Strings.isNullOrEmpty(versionNumber) && versionNumber.matches(\"^\\\\d+$\");\n   }\n \n+  static long convertToMilliseconds(String dateString) throws ParseException {\n+    if (isUTCDateString(dateString)) {", "originalCommit": "ca4907df9f52747f170f920278d82466ec79a123", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4MzAwNg==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r539583006", "bodyText": "Good point! Thanks!", "author": "lahirumaramba", "createdAt": "2020-12-09T19:25:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg1MzczMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg1NDU2Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r538854563", "bodyText": "Can we assign TimeZone.getTimeZone(\"UTC\") to a class-level constant?", "author": "hiranya911", "createdAt": "2020-12-08T22:26:28Z", "path": "src/main/java/com/google/firebase/remoteconfig/RemoteConfigUtil.java", "diffHunk": "@@ -30,10 +31,52 @@ static boolean isValidVersionNumber(String versionNumber) {\n     return !Strings.isNullOrEmpty(versionNumber) && versionNumber.matches(\"^\\\\d+$\");\n   }\n \n+  static long convertToMilliseconds(String dateString) throws ParseException {\n+    if (isUTCDateString(dateString)) {\n+      return convertFromUtcDateFormat(dateString);\n+    }\n+    return convertFromUtcZuluFormat(dateString);\n+  }\n+\n   static String convertToUtcZuluFormat(long millis) {\n+    // sample output date string: 2020-12-08T15:49:51.887878Z\n     checkArgument(millis >= 0, \"Milliseconds duration must not be negative\");\n     SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS000000'Z'\");\n     dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n     return dateFormat.format(new Date(millis));\n   }\n+\n+  static String convertToUtcDateFormat(long millis) {\n+    // sample output date string: Tue, 08 Dec 2020 15:49:51 GMT\n+    checkArgument(millis >= 0, \"Milliseconds duration must not be negative\");\n+    SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss z\");\n+    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));", "originalCommit": "ca4907df9f52747f170f920278d82466ec79a123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg1NTAwOA==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r538855008", "bodyText": "Use constants for pattern strings.", "author": "hiranya911", "createdAt": "2020-12-08T22:27:13Z", "path": "src/main/java/com/google/firebase/remoteconfig/RemoteConfigUtil.java", "diffHunk": "@@ -30,10 +31,52 @@ static boolean isValidVersionNumber(String versionNumber) {\n     return !Strings.isNullOrEmpty(versionNumber) && versionNumber.matches(\"^\\\\d+$\");\n   }\n \n+  static long convertToMilliseconds(String dateString) throws ParseException {\n+    if (isUTCDateString(dateString)) {\n+      return convertFromUtcDateFormat(dateString);\n+    }\n+    return convertFromUtcZuluFormat(dateString);\n+  }\n+\n   static String convertToUtcZuluFormat(long millis) {\n+    // sample output date string: 2020-12-08T15:49:51.887878Z\n     checkArgument(millis >= 0, \"Milliseconds duration must not be negative\");\n     SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS000000'Z'\");\n     dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n     return dateFormat.format(new Date(millis));\n   }\n+\n+  static String convertToUtcDateFormat(long millis) {\n+    // sample output date string: Tue, 08 Dec 2020 15:49:51 GMT\n+    checkArgument(millis >= 0, \"Milliseconds duration must not be negative\");\n+    SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss z\");", "originalCommit": "ca4907df9f52747f170f920278d82466ec79a123", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg1NjM0Mg==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r538856342", "bodyText": "Make this a separate test case.", "author": "hiranya911", "createdAt": "2020-12-08T22:29:31Z", "path": "src/test/java/com/google/firebase/remoteconfig/TemplateTest.java", "diffHunk": "@@ -153,4 +159,193 @@ public void testEquality() {\n     assertNotEquals(templateThree, templateFive);\n     assertNotEquals(templateFour, templateFive);\n   }\n+\n+  @Test(expected = IOException.class)\n+  public void testFromJSONWithInvalidString() throws IOException {\n+    Template.fromJSON(\"abc\");\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testFromJSONWithEmptyString() throws IOException {\n+    Template.fromJSON(\"\");\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testFromJSONWithNullString() throws IOException {\n+    Template.fromJSON(null);\n+  }\n+\n+  @Test\n+  public void testFromJSON() throws IOException {\n+    Template template = Template.fromJSON(\"{}\");\n+\n+    assertNotNull(template.getParameters());\n+    assertNotNull(template.getConditions());\n+    assertNotNull(template.getParameterGroups());\n+    assertTrue(template.getParameters().isEmpty());\n+    assertTrue(template.getConditions().isEmpty());\n+    assertTrue(template.getParameterGroups().isEmpty());\n+    assertNull(template.getETag());\n+\n+    template = Template.fromJSON(\"{\"", "originalCommit": "4bf780a2f57394ed00a52dd2951e373bc3046df8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg1NzQyNg==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r538857426", "bodyText": "Split into multiple test cases", "author": "hiranya911", "createdAt": "2020-12-08T22:31:33Z", "path": "src/test/java/com/google/firebase/remoteconfig/TemplateTest.java", "diffHunk": "@@ -153,4 +159,193 @@ public void testEquality() {\n     assertNotEquals(templateThree, templateFive);\n     assertNotEquals(templateFour, templateFive);\n   }\n+\n+  @Test(expected = IOException.class)\n+  public void testFromJSONWithInvalidString() throws IOException {\n+    Template.fromJSON(\"abc\");\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testFromJSONWithEmptyString() throws IOException {\n+    Template.fromJSON(\"\");\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testFromJSONWithNullString() throws IOException {\n+    Template.fromJSON(null);\n+  }\n+\n+  @Test\n+  public void testFromJSON() throws IOException {\n+    Template template = Template.fromJSON(\"{}\");\n+\n+    assertNotNull(template.getParameters());\n+    assertNotNull(template.getConditions());\n+    assertNotNull(template.getParameterGroups());\n+    assertTrue(template.getParameters().isEmpty());\n+    assertTrue(template.getConditions().isEmpty());\n+    assertTrue(template.getParameterGroups().isEmpty());\n+    assertNull(template.getETag());\n+\n+    template = Template.fromJSON(\"{\"\n+            + \"  \\\"etag\\\": \\\"etag-001234\\\",\"\n+            + \"  \\\"conditions\\\": [\"\n+            + \"    {\"\n+            + \"      \\\"name\\\": \\\"ios_en\\\",\"\n+            + \"      \\\"expression\\\": \\\"device.os == 'ios' && device.country in ['us', 'uk']\\\",\"\n+            + \"      \\\"tagColor\\\": \\\"INDIGO\\\"\"\n+            + \"    },\"\n+            + \"    {\"\n+            + \"      \\\"name\\\": \\\"android_en\\\",\"\n+            + \"      \\\"expression\\\": \\\"device.os == 'android' && device.country in ['us', 'uk']\\\"\"\n+            + \"    }\"\n+            + \"  ]\"\n+            + \"}\");\n+\n+    assertNotNull(template.getParameters());\n+    assertNotNull(template.getConditions());\n+    assertNotNull(template.getParameterGroups());\n+    assertTrue(template.getParameters().isEmpty());\n+    assertEquals(2, template.getConditions().size());\n+    assertEquals(\"ios_en\", template.getConditions().get(0).getName());\n+    assertEquals(\"device.os == 'ios' && device.country in ['us', 'uk']\",\n+            template.getConditions().get(0).getExpression());\n+    assertEquals(TagColor.INDIGO, template.getConditions().get(0).getTagColor());\n+    assertEquals(\"android_en\", template.getConditions().get(1).getName());\n+    assertEquals(\"device.os == 'android' && device.country in ['us', 'uk']\",\n+            template.getConditions().get(1).getExpression());\n+    assertEquals(TagColor.UNSPECIFIED, template.getConditions().get(1).getTagColor());\n+    assertTrue(template.getParameterGroups().isEmpty());\n+    assertEquals(\"etag-001234\", template.getETag());\n+  }\n+\n+  @Test\n+  public void testFromJSONWithVersion() throws IOException {\n+    final Version expectedVersion = new Version(new TemplateResponse.VersionResponse()\n+            .setDescription(\"template version\")\n+            .setUpdateTime(\"2020-12-08T15:49:51.887878Z\")\n+            .setUpdateUser(new TemplateResponse.UserResponse().setEmail(\"user@user.com\"))\n+            .setLegacy(false)\n+            .setUpdateType(\"INCREMENTAL_UPDATE\")\n+            .setRollbackSource(\"26\")\n+            .setVersionNumber(\"34\")\n+            .setUpdateOrigin(\"ADMIN_SDK_NODE\")\n+    );\n+    String jsonString = \"{\\\"parameters\\\":{},\\\"conditions\\\":[],\\\"parameterGroups\\\":{},\"\n+            + \"\\\"version\\\":{\\\"versionNumber\\\":\\\"34\\\",\"\n+            + \"\\\"updateTime\\\":\\\"Tue, 08 Dec 2020 15:49:51 UTC\\\",\"\n+            + \"\\\"updateOrigin\\\":\\\"ADMIN_SDK_NODE\\\",\\\"updateType\\\":\\\"INCREMENTAL_UPDATE\\\",\"\n+            + \"\\\"updateUser\\\":{\\\"email\\\":\\\"user@user.com\\\"},\\\"rollbackSource\\\":\\\"26\\\",\"\n+            + \"\\\"legacy\\\":false,\\\"description\\\":\\\"template version\\\"}}\";\n+    Template template = Template.fromJSON(jsonString);\n+\n+    assertNotNull(template.getParameters());\n+    assertNotNull(template.getConditions());\n+    assertNotNull(template.getParameterGroups());\n+    assertTrue(template.getParameters().isEmpty());\n+    assertTrue(template.getConditions().isEmpty());\n+    assertTrue(template.getParameterGroups().isEmpty());\n+    assertNull(template.getETag());\n+    // check version\n+    assertEquals(expectedVersion, template.getVersion());\n+    // update time should be correctly converted to milliseconds\n+    assertEquals(1607442591000L, template.getVersion().getUpdateTime());\n+  }\n+\n+  @Test\n+  public void testToJSON() {\n+    // Empty template\n+    String jsonString = new Template().toJSON();\n+\n+    assertEquals(\"{\\\"conditions\\\":[],\"\n+            + \"\\\"parameterGroups\\\":{},\\\"parameters\\\":{}}\", jsonString);\n+\n+    // Template with parameter values", "originalCommit": "4bf780a2f57394ed00a52dd2951e373bc3046df8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg1ODQ0MA==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r538858440", "bodyText": "How about something like this?\nTemplate original = new Template();\nTemplate other = Template.fromJSON(original.toJSON());\nassertEqual(other, original);", "author": "hiranya911", "createdAt": "2020-12-08T22:33:21Z", "path": "src/test/java/com/google/firebase/remoteconfig/TemplateTest.java", "diffHunk": "@@ -153,4 +159,193 @@ public void testEquality() {\n     assertNotEquals(templateThree, templateFive);\n     assertNotEquals(templateFour, templateFive);\n   }\n+\n+  @Test(expected = IOException.class)\n+  public void testFromJSONWithInvalidString() throws IOException {\n+    Template.fromJSON(\"abc\");\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testFromJSONWithEmptyString() throws IOException {\n+    Template.fromJSON(\"\");\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testFromJSONWithNullString() throws IOException {\n+    Template.fromJSON(null);\n+  }\n+\n+  @Test\n+  public void testFromJSON() throws IOException {\n+    Template template = Template.fromJSON(\"{}\");\n+\n+    assertNotNull(template.getParameters());\n+    assertNotNull(template.getConditions());\n+    assertNotNull(template.getParameterGroups());\n+    assertTrue(template.getParameters().isEmpty());\n+    assertTrue(template.getConditions().isEmpty());\n+    assertTrue(template.getParameterGroups().isEmpty());\n+    assertNull(template.getETag());\n+\n+    template = Template.fromJSON(\"{\"\n+            + \"  \\\"etag\\\": \\\"etag-001234\\\",\"\n+            + \"  \\\"conditions\\\": [\"\n+            + \"    {\"\n+            + \"      \\\"name\\\": \\\"ios_en\\\",\"\n+            + \"      \\\"expression\\\": \\\"device.os == 'ios' && device.country in ['us', 'uk']\\\",\"\n+            + \"      \\\"tagColor\\\": \\\"INDIGO\\\"\"\n+            + \"    },\"\n+            + \"    {\"\n+            + \"      \\\"name\\\": \\\"android_en\\\",\"\n+            + \"      \\\"expression\\\": \\\"device.os == 'android' && device.country in ['us', 'uk']\\\"\"\n+            + \"    }\"\n+            + \"  ]\"\n+            + \"}\");\n+\n+    assertNotNull(template.getParameters());\n+    assertNotNull(template.getConditions());\n+    assertNotNull(template.getParameterGroups());\n+    assertTrue(template.getParameters().isEmpty());\n+    assertEquals(2, template.getConditions().size());\n+    assertEquals(\"ios_en\", template.getConditions().get(0).getName());\n+    assertEquals(\"device.os == 'ios' && device.country in ['us', 'uk']\",\n+            template.getConditions().get(0).getExpression());\n+    assertEquals(TagColor.INDIGO, template.getConditions().get(0).getTagColor());\n+    assertEquals(\"android_en\", template.getConditions().get(1).getName());\n+    assertEquals(\"device.os == 'android' && device.country in ['us', 'uk']\",\n+            template.getConditions().get(1).getExpression());\n+    assertEquals(TagColor.UNSPECIFIED, template.getConditions().get(1).getTagColor());\n+    assertTrue(template.getParameterGroups().isEmpty());\n+    assertEquals(\"etag-001234\", template.getETag());\n+  }\n+\n+  @Test\n+  public void testFromJSONWithVersion() throws IOException {\n+    final Version expectedVersion = new Version(new TemplateResponse.VersionResponse()\n+            .setDescription(\"template version\")\n+            .setUpdateTime(\"2020-12-08T15:49:51.887878Z\")\n+            .setUpdateUser(new TemplateResponse.UserResponse().setEmail(\"user@user.com\"))\n+            .setLegacy(false)\n+            .setUpdateType(\"INCREMENTAL_UPDATE\")\n+            .setRollbackSource(\"26\")\n+            .setVersionNumber(\"34\")\n+            .setUpdateOrigin(\"ADMIN_SDK_NODE\")\n+    );\n+    String jsonString = \"{\\\"parameters\\\":{},\\\"conditions\\\":[],\\\"parameterGroups\\\":{},\"\n+            + \"\\\"version\\\":{\\\"versionNumber\\\":\\\"34\\\",\"\n+            + \"\\\"updateTime\\\":\\\"Tue, 08 Dec 2020 15:49:51 UTC\\\",\"\n+            + \"\\\"updateOrigin\\\":\\\"ADMIN_SDK_NODE\\\",\\\"updateType\\\":\\\"INCREMENTAL_UPDATE\\\",\"\n+            + \"\\\"updateUser\\\":{\\\"email\\\":\\\"user@user.com\\\"},\\\"rollbackSource\\\":\\\"26\\\",\"\n+            + \"\\\"legacy\\\":false,\\\"description\\\":\\\"template version\\\"}}\";\n+    Template template = Template.fromJSON(jsonString);\n+\n+    assertNotNull(template.getParameters());\n+    assertNotNull(template.getConditions());\n+    assertNotNull(template.getParameterGroups());\n+    assertTrue(template.getParameters().isEmpty());\n+    assertTrue(template.getConditions().isEmpty());\n+    assertTrue(template.getParameterGroups().isEmpty());\n+    assertNull(template.getETag());\n+    // check version\n+    assertEquals(expectedVersion, template.getVersion());\n+    // update time should be correctly converted to milliseconds\n+    assertEquals(1607442591000L, template.getVersion().getUpdateTime());\n+  }\n+\n+  @Test\n+  public void testToJSON() {\n+    // Empty template\n+    String jsonString = new Template().toJSON();\n+\n+    assertEquals(\"{\\\"conditions\\\":[],\"\n+            + \"\\\"parameterGroups\\\":{},\\\"parameters\\\":{}}\", jsonString);\n+\n+    // Template with parameter values\n+    Template t = new Template();\n+    t.getParameters()\n+            .put(\"with_value\", new Parameter().setDefaultValue(ParameterValue.of(\"hello\")));\n+    t.getParameters()\n+            .put(\"with_inApp\", new Parameter().setDefaultValue(ParameterValue.inAppDefault()));\n+    jsonString = t.toJSON();\n+\n+    assertEquals(\"{\\\"conditions\\\":[],\\\"parameterGroups\\\":{},\"\n+            + \"\\\"parameters\\\":{\\\"with_value\\\":{\\\"conditionalValues\\\":{},\"\n+            + \"\\\"defaultValue\\\":{\\\"value\\\":\\\"hello\\\"}},\\\"with_inApp\\\":{\\\"conditionalValues\\\":{},\"\n+            + \"\\\"defaultValue\\\":{\\\"useInAppDefault\\\":true}}}}\", jsonString);\n+\n+    // Template with etag\n+    jsonString = new Template().setETag(\"etag-12345\").toJSON();\n+\n+    assertEquals(\"{\\\"conditions\\\":[],\\\"etag\\\":\\\"etag-12345\\\",\\\"parameterGroups\\\":{},\"\n+            + \"\\\"parameters\\\":{}}\", jsonString);\n+\n+    // Template with etag and conditions\n+    jsonString = new Template()\n+            .setETag(\"etag-0010201\")\n+            .setConditions(CONDITIONS).toJSON();\n+\n+    assertEquals(\"{\\\"conditions\\\":[{\\\"expression\\\":\\\"exp ios\\\",\\\"name\\\":\\\"ios_en\\\",\"\n+            + \"\\\"tagColor\\\":\\\"INDIGO\\\"},{\\\"expression\\\":\\\"exp android\\\",\"\n+            + \"\\\"name\\\":\\\"android_en\\\"}],\\\"etag\\\":\\\"etag-0010201\\\",\\\"parameterGroups\\\":{},\"\n+            + \"\\\"parameters\\\":{}}\", jsonString);\n+  }\n+\n+  @Test\n+  public void testToJSONWithVersion() {\n+    Version version = new Version(new TemplateResponse.VersionResponse()\n+            .setDescription(\"template version\")\n+            .setUpdateTime(\"2020-12-08T15:49:51.887878Z\")\n+            .setUpdateUser(new TemplateResponse.UserResponse().setEmail(\"user@user.com\"))\n+            .setLegacy(false)\n+            .setUpdateType(\"INCREMENTAL_UPDATE\")\n+            .setRollbackSource(\"26\")\n+            .setVersionNumber(\"34\")\n+            .setUpdateOrigin(\"ADMIN_SDK_NODE\")\n+    );\n+    String jsonString = new Template().setVersion(version).toJSON();\n+\n+    assertEquals(\"{\\\"conditions\\\":[],\\\"parameterGroups\\\":{},\\\"parameters\\\":{},\"\n+            + \"\\\"version\\\":{\\\"description\\\":\\\"template version\\\",\\\"legacy\\\":false,\"\n+            + \"\\\"rollbackSource\\\":\\\"26\\\",\\\"updateOrigin\\\":\\\"ADMIN_SDK_NODE\\\",\"\n+            + \"\\\"updateTime\\\":\\\"Tue, 08 Dec 2020 15:49:51 UTC\\\",\"\n+            + \"\\\"updateType\\\":\\\"INCREMENTAL_UPDATE\\\",\\\"updateUser\\\":{\"\n+            + \"\\\"email\\\":\\\"user@user.com\\\"},\\\"versionNumber\\\":\\\"34\\\"}}\", jsonString);\n+  }\n+\n+  @Test\n+  public void testToJSONAndFromJSON() throws IOException {\n+    String jsonString = new Template().toJSON();", "originalCommit": "4bf780a2f57394ed00a52dd2951e373bc3046df8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "15bf2af6f2cc91af2c969fdda134726ba657dff0", "url": "https://github.com/firebase/firebase-admin-java/commit/15bf2af6f2cc91af2c969fdda134726ba657dff0", "message": "Clean up code base", "committedDate": "2020-12-09T06:06:17Z", "type": "commit"}, {"oid": "9bfc019df5e122699ac84ff2121a6333a17c3a46", "url": "https://github.com/firebase/firebase-admin-java/commit/9bfc019df5e122699ac84ff2121a6333a17c3a46", "message": "PR fixes", "committedDate": "2020-12-09T20:05:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY1Mzg1OQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r539653859", "bodyText": "The example input doesn't really match the pattern. You might want to remove the fractional seconds before parsing the timestamp.", "author": "hiranya911", "createdAt": "2020-12-09T21:16:58Z", "path": "src/main/java/com/google/firebase/remoteconfig/RemoteConfigUtil.java", "diffHunk": "@@ -27,66 +27,52 @@\n \n final class RemoteConfigUtil {\n \n+  private static final String ZULU_DATE_PATTERN = \"yyyy-MM-dd'T'HH:mm:ss.SSS000000'Z'\";\n+  private static final String ZULU_DATE_NO_FRAC_SECS_PATTERN = \"yyyy-MM-dd'T'HH:mm:ss\";\n+  private static final String UTC_DATE_PATTERN = \"EEE, dd MMM yyyy HH:mm:ss z\";\n+  private static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone(\"UTC\");\n+\n   static boolean isValidVersionNumber(String versionNumber) {\n     return !Strings.isNullOrEmpty(versionNumber) && versionNumber.matches(\"^\\\\d+$\");\n   }\n \n   static long convertToMilliseconds(String dateString) throws ParseException {\n-    if (isUTCDateString(dateString)) {\n+    try {\n+      return convertFromUtcZuluFormat(dateString);\n+    } catch (ParseException e) {\n       return convertFromUtcDateFormat(dateString);\n     }\n-    return convertFromUtcZuluFormat(dateString);\n   }\n \n   static String convertToUtcZuluFormat(long millis) {\n     // sample output date string: 2020-12-08T15:49:51.887878Z\n     checkArgument(millis >= 0, \"Milliseconds duration must not be negative\");\n-    SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS000000'Z'\");\n-    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    SimpleDateFormat dateFormat = new SimpleDateFormat(ZULU_DATE_PATTERN);\n+    dateFormat.setTimeZone(UTC_TIME_ZONE);\n     return dateFormat.format(new Date(millis));\n   }\n \n   static String convertToUtcDateFormat(long millis) {\n     // sample output date string: Tue, 08 Dec 2020 15:49:51 GMT\n     checkArgument(millis >= 0, \"Milliseconds duration must not be negative\");\n-    SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss z\");\n-    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    SimpleDateFormat dateFormat = new SimpleDateFormat(UTC_DATE_PATTERN);\n+    dateFormat.setTimeZone(UTC_TIME_ZONE);\n     return dateFormat.format(new Date(millis));\n   }\n \n   static long convertFromUtcZuluFormat(String dateString) throws ParseException {\n     // sample input date string: 2020-12-08T15:49:51.887878Z\n     checkArgument(!Strings.isNullOrEmpty(dateString), \"Date string must not be null or empty\");\n-    SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n-    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    SimpleDateFormat dateFormat = new SimpleDateFormat(ZULU_DATE_NO_FRAC_SECS_PATTERN);", "originalCommit": "9bfc019df5e122699ac84ff2121a6333a17c3a46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwMTM0MQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r540401341", "bodyText": "Moved the date string formatting to this util method and added comments to clarify the steps.", "author": "lahirumaramba", "createdAt": "2020-12-10T18:30:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY1Mzg1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY1NDI1MQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r539654251", "bodyText": "this(null)", "author": "hiranya911", "createdAt": "2020-12-09T21:17:33Z", "path": "src/main/java/com/google/firebase/remoteconfig/Template.java", "diffHunk": "@@ -46,11 +46,20 @@\n \n   /**\n    * Creates a new {@link Template}.\n+   *\n+   * @param etag The ETag of this template.\n    */\n-  public Template() {\n-    parameters = new HashMap<>();\n-    conditions = new ArrayList<>();\n-    parameterGroups = new HashMap<>();\n+  public Template(String etag) {\n+    this.parameters = new HashMap<>();\n+    this.conditions = new ArrayList<>();\n+    this.parameterGroups = new HashMap<>();\n+    this.etag = etag;\n+  }\n+\n+  Template() {\n+    this.parameters = new HashMap<>();", "originalCommit": "9bfc019df5e122699ac84ff2121a6333a17c3a46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwMzk0Nw==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r540403947", "bodyText": "I have to cast null to String here for this to work... this((String)null). Let me know if this is okay to use.", "author": "lahirumaramba", "createdAt": "2020-12-10T18:33:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY1NDI1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY1NDY2NQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r539654665", "bodyText": "Use a local variable and split into 2 steps.", "author": "hiranya911", "createdAt": "2020-12-09T21:18:14Z", "path": "src/main/java/com/google/firebase/remoteconfig/Template.java", "diffHunk": "@@ -84,18 +93,24 @@ public Template() {\n \n   /**\n    * Creates and returns a new Remote Config template from a JSON string.\n+   * Input JSON string must contain an {@code etag} property to create a valid template.\n    *\n    * @param json A non-null JSON string to populate a Remote Config template.\n    * @return A new {@link Template} instance.\n-   * @throws IOException If the input JSON string is not parsable.\n+   * @throws FirebaseRemoteConfigException If the input JSON string is not parsable.\n    */\n-  public static Template fromJSON(@NonNull String json) throws IOException {\n+  public static Template fromJSON(@NonNull String json) throws FirebaseRemoteConfigException {\n     checkArgument(!Strings.isNullOrEmpty(json), \"JSON String must not be null or empty.\");\n     // using the default json factory as no rpc calls are made here\n     JsonFactory jsonFactory = Utils.getDefaultJsonFactory();\n-    JsonParser parser = jsonFactory.createJsonParser(json);\n-    TemplateResponse templateResponse = parser.parseAndClose(TemplateResponse.class);\n-    return new Template(templateResponse);\n+    try {\n+      return new Template(jsonFactory", "originalCommit": "9bfc019df5e122699ac84ff2121a6333a17c3a46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY1NTgwMg==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r539655802", "bodyText": "Add a comment here indicating why we need 2 zulu format strings.", "author": "hiranya911", "createdAt": "2020-12-09T21:20:01Z", "path": "src/main/java/com/google/firebase/remoteconfig/RemoteConfigUtil.java", "diffHunk": "@@ -20,20 +20,59 @@\n \n import com.google.common.base.Strings;\n \n+import java.text.ParseException;\n import java.text.SimpleDateFormat;\n import java.util.Date;\n import java.util.TimeZone;\n \n final class RemoteConfigUtil {\n \n+  private static final String ZULU_DATE_PATTERN = \"yyyy-MM-dd'T'HH:mm:ss.SSS000000'Z'\";", "originalCommit": "9bfc019df5e122699ac84ff2121a6333a17c3a46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1MjMzMA==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r540352330", "bodyText": "Good call. Thanks!", "author": "lahirumaramba", "createdAt": "2020-12-10T17:19:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY1NTgwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY1Nzk3Nw==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r539657977", "bodyText": "Why not run assertEquals on the template instances?", "author": "hiranya911", "createdAt": "2020-12-09T21:23:14Z", "path": "src/test/java/com/google/firebase/remoteconfig/TemplateTest.java", "diffHunk": "@@ -153,4 +166,192 @@ public void testEquality() {\n     assertNotEquals(templateThree, templateFive);\n     assertNotEquals(templateFour, templateFive);\n   }\n+\n+  @Test(expected = FirebaseRemoteConfigException.class)\n+  public void testFromJSONWithInvalidString() throws FirebaseRemoteConfigException {\n+    Template.fromJSON(\"abc\");\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testFromJSONWithEmptyString() throws FirebaseRemoteConfigException {\n+    Template.fromJSON(\"\");\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testFromJSONWithNullString() throws FirebaseRemoteConfigException {\n+    Template.fromJSON(null);\n+  }\n+\n+  @Test\n+  public void testFromJSONWithEmptyTemplateString() throws FirebaseRemoteConfigException {\n+    Template template = Template.fromJSON(\"{}\");\n+\n+    assertNotNull(template.getParameters());\n+    assertNotNull(template.getConditions());\n+    assertNotNull(template.getParameterGroups());\n+    assertTrue(template.getParameters().isEmpty());\n+    assertTrue(template.getConditions().isEmpty());\n+    assertTrue(template.getParameterGroups().isEmpty());\n+    assertNull(template.getETag());\n+  }\n+\n+  @Test\n+  public void testFromJSONWithNonEmptyTemplateString() throws FirebaseRemoteConfigException {\n+    Template template = Template.fromJSON(\"{\"\n+            + \"  \\\"etag\\\": \\\"etag-001234\\\",\"\n+            + \"  \\\"conditions\\\": [\"\n+            + \"    {\"\n+            + \"      \\\"name\\\": \\\"ios_en\\\",\"\n+            + \"      \\\"expression\\\": \\\"device.os == 'ios' && device.country in ['us', 'uk']\\\",\"\n+            + \"      \\\"tagColor\\\": \\\"INDIGO\\\"\"\n+            + \"    },\"\n+            + \"    {\"\n+            + \"      \\\"name\\\": \\\"android_en\\\",\"\n+            + \"      \\\"expression\\\": \\\"device.os == 'android' && device.country in ['us', 'uk']\\\"\"\n+            + \"    }\"\n+            + \"  ]\"\n+            + \"}\");\n+\n+    assertNotNull(template.getParameters());\n+    assertNotNull(template.getConditions());\n+    assertNotNull(template.getParameterGroups());\n+    assertTrue(template.getParameters().isEmpty());\n+    assertEquals(2, template.getConditions().size());\n+    assertEquals(\"ios_en\", template.getConditions().get(0).getName());\n+    assertEquals(\"device.os == 'ios' && device.country in ['us', 'uk']\",\n+            template.getConditions().get(0).getExpression());\n+    assertEquals(TagColor.INDIGO, template.getConditions().get(0).getTagColor());\n+    assertEquals(\"android_en\", template.getConditions().get(1).getName());\n+    assertEquals(\"device.os == 'android' && device.country in ['us', 'uk']\",\n+            template.getConditions().get(1).getExpression());\n+    assertEquals(TagColor.UNSPECIFIED, template.getConditions().get(1).getTagColor());\n+    assertTrue(template.getParameterGroups().isEmpty());\n+    assertEquals(\"etag-001234\", template.getETag());\n+  }\n+\n+  @Test\n+  public void testFromJSONWithVersion() throws FirebaseRemoteConfigException {\n+    final Version expectedVersion = new Version(new TemplateResponse.VersionResponse()\n+            .setDescription(\"template version\")\n+            .setUpdateTime(\"2020-12-08T15:49:51.887878Z\")\n+            .setUpdateUser(new TemplateResponse.UserResponse().setEmail(\"user@user.com\"))\n+            .setLegacy(false)\n+            .setUpdateType(\"INCREMENTAL_UPDATE\")\n+            .setRollbackSource(\"26\")\n+            .setVersionNumber(\"34\")\n+            .setUpdateOrigin(\"ADMIN_SDK_NODE\")\n+    );\n+    String jsonString = \"{\\\"parameters\\\":{},\\\"conditions\\\":[],\\\"parameterGroups\\\":{},\"\n+            + \"\\\"version\\\":{\\\"versionNumber\\\":\\\"34\\\",\"\n+            + \"\\\"updateTime\\\":\\\"Tue, 08 Dec 2020 15:49:51 UTC\\\",\"\n+            + \"\\\"updateOrigin\\\":\\\"ADMIN_SDK_NODE\\\",\\\"updateType\\\":\\\"INCREMENTAL_UPDATE\\\",\"\n+            + \"\\\"updateUser\\\":{\\\"email\\\":\\\"user@user.com\\\"},\\\"rollbackSource\\\":\\\"26\\\",\"\n+            + \"\\\"legacy\\\":false,\\\"description\\\":\\\"template version\\\"}}\";\n+    Template template = Template.fromJSON(jsonString);\n+\n+    assertNotNull(template.getParameters());\n+    assertNotNull(template.getConditions());\n+    assertNotNull(template.getParameterGroups());\n+    assertTrue(template.getParameters().isEmpty());\n+    assertTrue(template.getConditions().isEmpty());\n+    assertTrue(template.getParameterGroups().isEmpty());\n+    assertNull(template.getETag());\n+    // check version\n+    assertEquals(expectedVersion, template.getVersion());\n+    // update time should be correctly converted to milliseconds\n+    assertEquals(1607442591000L, template.getVersion().getUpdateTime());\n+  }\n+\n+  @Test\n+  public void testToJSONWithEmptyTemplate() {\n+    String jsonString = new Template().toJSON();\n+\n+    assertEquals(\"{\\\"conditions\\\":[],\"\n+            + \"\\\"parameterGroups\\\":{},\\\"parameters\\\":{}}\", jsonString);\n+  }\n+\n+  @Test\n+  public void testToJSONWithParameterValues() {\n+    Template t = new Template();\n+    t.getParameters()\n+            .put(\"with_value\", new Parameter().setDefaultValue(ParameterValue.of(\"hello\")));\n+    t.getParameters()\n+            .put(\"with_inApp\", new Parameter().setDefaultValue(ParameterValue.inAppDefault()));\n+    String jsonString = t.toJSON();\n+\n+    assertEquals(\"{\\\"conditions\\\":[],\\\"parameterGroups\\\":{},\"\n+            + \"\\\"parameters\\\":{\\\"with_value\\\":{\\\"conditionalValues\\\":{},\"\n+            + \"\\\"defaultValue\\\":{\\\"value\\\":\\\"hello\\\"}},\\\"with_inApp\\\":{\\\"conditionalValues\\\":{},\"\n+            + \"\\\"defaultValue\\\":{\\\"useInAppDefault\\\":true}}}}\", jsonString);\n+  }\n+\n+  @Test\n+  public void testToJSONWithEtag() {\n+    String jsonString = new Template(\"etag-12345\").toJSON();\n+\n+    assertEquals(\"{\\\"conditions\\\":[],\\\"etag\\\":\\\"etag-12345\\\",\\\"parameterGroups\\\":{},\"\n+            + \"\\\"parameters\\\":{}}\", jsonString);\n+  }\n+\n+  @Test\n+  public void testToJSONWithEtagAndConditions() {\n+    String jsonString = new Template(\"etag-0010201\")\n+            .setConditions(CONDITIONS).toJSON();\n+\n+    assertEquals(\"{\\\"conditions\\\":[{\\\"expression\\\":\\\"exp ios\\\",\\\"name\\\":\\\"ios_en\\\",\"\n+            + \"\\\"tagColor\\\":\\\"INDIGO\\\"},{\\\"expression\\\":\\\"exp android\\\",\"\n+            + \"\\\"name\\\":\\\"android_en\\\"}],\\\"etag\\\":\\\"etag-0010201\\\",\\\"parameterGroups\\\":{},\"\n+            + \"\\\"parameters\\\":{}}\", jsonString);\n+  }\n+\n+  @Test\n+  public void testToJSONWithVersion() {\n+    Version version = new Version(new TemplateResponse.VersionResponse()\n+            .setDescription(\"template version\")\n+            .setUpdateTime(\"2020-12-08T15:49:51.887878Z\")\n+            .setUpdateUser(new TemplateResponse.UserResponse().setEmail(\"user@user.com\"))\n+            .setLegacy(false)\n+            .setUpdateType(\"INCREMENTAL_UPDATE\")\n+            .setRollbackSource(\"26\")\n+            .setVersionNumber(\"34\")\n+            .setUpdateOrigin(\"ADMIN_SDK_NODE\")\n+    );\n+    String jsonString = new Template().setVersion(version).toJSON();\n+\n+    assertEquals(\"{\\\"conditions\\\":[],\\\"parameterGroups\\\":{},\\\"parameters\\\":{},\"\n+            + \"\\\"version\\\":{\\\"description\\\":\\\"template version\\\",\\\"legacy\\\":false,\"\n+            + \"\\\"rollbackSource\\\":\\\"26\\\",\\\"updateOrigin\\\":\\\"ADMIN_SDK_NODE\\\",\"\n+            + \"\\\"updateTime\\\":\\\"Tue, 08 Dec 2020 15:49:51 UTC\\\",\"\n+            + \"\\\"updateType\\\":\\\"INCREMENTAL_UPDATE\\\",\\\"updateUser\\\":{\"\n+            + \"\\\"email\\\":\\\"user@user.com\\\"},\\\"versionNumber\\\":\\\"34\\\"}}\", jsonString);\n+  }\n+\n+  @Test\n+  public void testToJSONAndFromJSON() throws FirebaseRemoteConfigException {\n+    Template originalTemplate = new Template();\n+    Template otherTemplate = Template.fromJSON(originalTemplate.toJSON());\n+\n+    assertEquals(originalTemplate, otherTemplate);\n+\n+    Version expectedVersion = Version.withDescription(\"promo version\");\n+    originalTemplate = new Template(\"etag-0010201\")\n+            .setParameters(PARAMETERS)\n+            .setConditions(CONDITIONS)\n+            .setParameterGroups(PARAMETER_GROUPS)\n+            .setVersion(expectedVersion);\n+    Template template = Template.fromJSON(originalTemplate.toJSON());\n+\n+    assertEquals(\"etag-0010201\", template.getETag());", "originalCommit": "9bfc019df5e122699ac84ff2121a6333a17c3a46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwNjgxNA==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r540406814", "bodyText": "Condition arrays are not quite the same for a direct equality check. The original template contains a condition that does not have a tag color. After the serialization -> deserialization process that tag color will be set to TagColor.UNSPECIFIED.", "author": "lahirumaramba", "createdAt": "2020-12-10T18:38:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY1Nzk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ2NzQwNQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r540467405", "bodyText": "Should we fix that so the behavior remains consistent?", "author": "hiranya911", "createdAt": "2020-12-10T20:16:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY1Nzk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ5MjQwNQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r540492405", "bodyText": "I think we should. Updated the code not to serialize the tag color as TagColor.UNSPECIFIED when null or empty.", "author": "lahirumaramba", "createdAt": "2020-12-10T20:59:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY1Nzk3Nw=="}], "type": "inlineReview"}, {"oid": "5aa86007b0e220df47789d7c07481aa183885c02", "url": "https://github.com/firebase/firebase-admin-java/commit/5aa86007b0e220df47789d7c07481aa183885c02", "message": "Code cleanup", "committedDate": "2020-12-10T18:39:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ2ODQxNQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r540468415", "bodyText": "This should happen before everything else.", "author": "hiranya911", "createdAt": "2020-12-10T20:17:53Z", "path": "src/main/java/com/google/firebase/remoteconfig/RemoteConfigUtil.java", "diffHunk": "@@ -20,20 +20,74 @@\n \n import com.google.common.base.Strings;\n \n+import java.text.ParseException;\n import java.text.SimpleDateFormat;\n import java.util.Date;\n import java.util.TimeZone;\n \n final class RemoteConfigUtil {\n \n+  // SimpleDateFormat cannot handle fractional seconds in timestamps\n+  // (example: \"2014-10-02T15:01:23.045123456Z\"). Therefore, we strip fractional seconds\n+  // from the date string (example: \"2014-10-02T15:01:23\") when parsing Zulu timestamp strings.\n+  // The backend API expects timestamps in Zulu format with fractional seconds. To generate correct\n+  // timestamps in payloads we use \".SSS000000'Z'\" suffix.\n+  // Hence, two Zulu date patterns are used below.\n+  private static final String ZULU_DATE_PATTERN = \"yyyy-MM-dd'T'HH:mm:ss.SSS000000'Z'\";\n+  private static final String ZULU_DATE_NO_FRAC_SECS_PATTERN = \"yyyy-MM-dd'T'HH:mm:ss\";\n+  private static final String UTC_DATE_PATTERN = \"EEE, dd MMM yyyy HH:mm:ss z\";\n+  private static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone(\"UTC\");\n+\n   static boolean isValidVersionNumber(String versionNumber) {\n     return !Strings.isNullOrEmpty(versionNumber) && versionNumber.matches(\"^\\\\d+$\");\n   }\n \n+  static long convertToMilliseconds(String dateString) throws ParseException {\n+    try {\n+      return convertFromUtcZuluFormat(dateString);\n+    } catch (ParseException e) {\n+      return convertFromUtcDateFormat(dateString);\n+    }\n+  }\n+\n   static String convertToUtcZuluFormat(long millis) {\n+    // sample output date string: 2020-11-12T22:12:02.000000000Z\n     checkArgument(millis >= 0, \"Milliseconds duration must not be negative\");\n-    SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS000000'Z'\");\n-    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    SimpleDateFormat dateFormat = new SimpleDateFormat(ZULU_DATE_PATTERN);\n+    dateFormat.setTimeZone(UTC_TIME_ZONE);\n     return dateFormat.format(new Date(millis));\n   }\n+\n+  static String convertToUtcDateFormat(long millis) {\n+    // sample output date string: Tue, 08 Dec 2020 15:49:51 GMT\n+    checkArgument(millis >= 0, \"Milliseconds duration must not be negative\");\n+    SimpleDateFormat dateFormat = new SimpleDateFormat(UTC_DATE_PATTERN);\n+    dateFormat.setTimeZone(UTC_TIME_ZONE);\n+    return dateFormat.format(new Date(millis));\n+  }\n+\n+  static long convertFromUtcZuluFormat(String dateString) throws ParseException {\n+    // Input timestamp is in RFC3339 UTC \"Zulu\" format, accurate to\n+    // nanoseconds (up to 9 fractional seconds digits).\n+    // SimpleDateFormat cannot handle fractional seconds, therefore we strip fractional seconds\n+    // from the input date string before parsing.\n+    // example: input -> \"2014-10-02T15:01:23.045123456Z\"\n+    // formatted -> \"2014-10-02T15:01:23\"\n+    int indexOfPeriod = dateString.indexOf(\".\");\n+    if (indexOfPeriod != -1) {\n+      dateString = dateString.substring(0, indexOfPeriod);\n+    }\n+    checkArgument(!Strings.isNullOrEmpty(dateString), \"Date string must not be null or empty\");", "originalCommit": "5aa86007b0e220df47789d7c07481aa183885c02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4NzQ2Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/500#discussion_r540487463", "bodyText": "Ah good catch! Thanks!", "author": "lahirumaramba", "createdAt": "2020-12-10T20:50:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ2ODQxNQ=="}], "type": "inlineReview"}, {"oid": "2c9ca43e84a583dab5f4044156ef734819bb1fd1", "url": "https://github.com/firebase/firebase-admin-java/commit/2c9ca43e84a583dab5f4044156ef734819bb1fd1", "message": "PR fixes", "committedDate": "2020-12-10T21:00:08Z", "type": "commit"}]}