{"pr_number": 361, "pr_title": "Add updateRequest method to Tenant class and add unit tests.", "pr_createdAt": "2020-02-07T19:17:47Z", "pr_url": "https://github.com/firebase/firebase-admin-java/pull/361", "timeline": [{"oid": "5747795f46013d0adf6ad35211ea756ae83023e7", "url": "https://github.com/firebase/firebase-admin-java/commit/5747795f46013d0adf6ad35211ea756ae83023e7", "message": "Add updateRequest method to Tenant class and add unit tests.", "committedDate": "2020-02-07T19:05:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxNzg0MA==", "url": "https://github.com/firebase/firebase-admin-java/pull/361#discussion_r376617840", "bodyText": "I think this shouldn't be exposed. Builder seems to be a package-protected. Also we don't have a similar method in UserRecord.UpdateRequest. May be just expose the constructor.\nTenant tenant = ...;\nUpdateRequest req = tenant.updateRequest();\n\n// Or alternatively users should be able to:\nUpdateRequest req = new Tenant.UpdateReuqst(tenant.getTenantId());", "author": "hiranya911", "createdAt": "2020-02-07T21:33:32Z", "path": "src/main/java/com/google/firebase/auth/Tenant.java", "diffHunk": "@@ -134,14 +161,20 @@ public static Builder newBuilder() {\n      * Returns a builder for a tenant update request.\n      */\n     public static Builder newBuilder() {\n+      // TOOD(micahstairs): Figure out if any of the UpdateRequest fields should default to anything\n+      // particular. If any fields do not have a reasonable default, then the\n+      // fields should be made nullable, otherwise AutoValue will throw an\n+      // exception if those fields are left unset.", "originalCommit": "5747795f46013d0adf6ad35211ea756ae83023e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA5MDc1OA==", "url": "https://github.com/firebase/firebase-admin-java/pull/361#discussion_r379090758", "bodyText": "Hmm.. I gave this some thought and ended up rewriting the create/update classes without using AutoValue. This is a lot more consistent with UserRecord's request classes. It will also make it easier to serialize these into json requests.", "author": "micahstairs", "createdAt": "2020-02-13T20:06:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxNzg0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxODM0NQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/361#discussion_r376618345", "bodyText": "I think we should just set the tenantId. Other parameters will not be set, which means they won't be updated in the back-end.", "author": "hiranya911", "createdAt": "2020-02-07T21:34:57Z", "path": "src/main/java/com/google/firebase/auth/Tenant.java", "diffHunk": "@@ -54,6 +54,22 @@ public boolean isEmailLinkSignInEnabled() {\n     return emailLinkSignInEnabled;\n   }\n \n+  /**\n+   * Returns a new {@link UpdateRequest}, which can be used to update the attributes\n+   * of this tenant.\n+   *\n+   * @return a non-null Tenant.UpdateRequest instance.\n+   */\n+  public UpdateRequest updateRequest() {\n+    return UpdateRequest", "originalCommit": "5747795f46013d0adf6ad35211ea756ae83023e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA5MDE1OA==", "url": "https://github.com/firebase/firebase-admin-java/pull/361#discussion_r379090158", "bodyText": "Alright this makes sense!", "author": "micahstairs", "createdAt": "2020-02-13T20:05:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxODM0NQ=="}], "type": "inlineReview"}, {"oid": "6e546a56f24797cba544d52ff833773bf5cd2bb8", "url": "https://github.com/firebase/firebase-admin-java/commit/6e546a56f24797cba544d52ff833773bf5cd2bb8", "message": "Rewrite Tenant.CreateRequest and Tenant.UpdateRequest without using AutoValue.", "committedDate": "2020-02-13T20:04:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyNjMzMw==", "url": "https://github.com/firebase/firebase-admin-java/pull/361#discussion_r379126333", "bodyText": "final", "author": "hiranya911", "createdAt": "2020-02-13T21:23:50Z", "path": "src/main/java/com/google/firebase/auth/Tenant.java", "diffHunk": "@@ -55,100 +60,136 @@ public boolean isEmailLinkSignInEnabled() {\n   }\n \n   /**\n-   * Class used to hold the information needs to make a tenant create request.\n+   * Returns a new {@link UpdateRequest}, which can be used to update the attributes\n+   * of this tenant.\n+   *\n+   * @return a non-null Tenant.UpdateRequest instance.\n    */\n-  @AutoValue\n-  public abstract static class CreateRequest {\n+  public UpdateRequest updateRequest() {\n+    return new UpdateRequest(getTenantId());\n+  }\n+\n+  /**\n+   * A specification class for creating new user accounts.\n+   *\n+   * <p>Set the initial attributes of the new tenant by calling various setter methods available in\n+   * this class. None of the attributes are required.\n+   */\n+  public static class CreateRequest {", "originalCommit": "6e546a56f24797cba544d52ff833773bf5cd2bb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIwNDIxMg==", "url": "https://github.com/firebase/firebase-admin-java/pull/361#discussion_r379204212", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-02-14T01:05:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyNjMzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyNjQ5Ng==", "url": "https://github.com/firebase/firebase-admin-java/pull/361#discussion_r379126496", "bodyText": "final", "author": "hiranya911", "createdAt": "2020-02-13T21:24:11Z", "path": "src/main/java/com/google/firebase/auth/Tenant.java", "diffHunk": "@@ -55,100 +60,136 @@ public boolean isEmailLinkSignInEnabled() {\n   }\n \n   /**\n-   * Class used to hold the information needs to make a tenant create request.\n+   * Returns a new {@link UpdateRequest}, which can be used to update the attributes\n+   * of this tenant.\n+   *\n+   * @return a non-null Tenant.UpdateRequest instance.\n    */\n-  @AutoValue\n-  public abstract static class CreateRequest {\n+  public UpdateRequest updateRequest() {\n+    return new UpdateRequest(getTenantId());\n+  }\n+\n+  /**\n+   * A specification class for creating new user accounts.\n+   *\n+   * <p>Set the initial attributes of the new tenant by calling various setter methods available in\n+   * this class. None of the attributes are required.\n+   */\n+  public static class CreateRequest {\n+\n+    private final Map<String,Object> properties = new HashMap<>();\n \n     /**\n-     * Returns the display name of this tenant.\n+     * Creates a new {@link CreateRequest}, which can be used to create a new tenant.\n      *\n-     * @return a non-empty display name string.\n+     * <p>The returned object should be passed to {@link TenantManager#createTenant(CreateRequest)}\n+     * to register the tenant information persistently.\n      */\n-    public abstract String getDisplayName();\n+    public CreateRequest() { }\n \n     /**\n-     * Returns whether to allow email/password user authentication.\n+     * Sets the display name for the new tenant.\n      *\n-     * @return true if a user can be authenticated using an email and password, and false otherwise.\n+     * @param displayName a non-null, non-empty display name string.\n      */\n-    public abstract boolean isPasswordSignInAllowed();\n+    public CreateRequest setDisplayName(String displayName) {\n+      checkArgument(!Strings.isNullOrEmpty(displayName), \"display name must not be null or empty\");\n+      properties.put(\"dislayName\", displayName);\n+      return this;\n+    }\n \n     /**\n-     * Returns whether to enable email link user authentication.\n+     * Sets whether to allow email/password user authentication.\n      *\n-     * @return true if a user can be authenticated using an email link, and false otherwise.\n+     * @param passwordSignInAllowed a boolean indicating whether users can be authenticated using\n+     *     an email and password, and false otherwise.\n      */\n-    public abstract boolean isEmailLinkSignInEnabled();\n+    public CreateRequest setPasswordSignInAllowed(boolean passwordSignInAllowed) {\n+      properties.put(\"allowPasswordSignup\", passwordSignInAllowed);\n+      return this;\n+    }\n \n     /**\n-     * Returns a builder for a tenant create request.\n+     * Sets whether to enable email link user authentication.\n+     *\n+     * @param emailLinkSignInEnabled a boolean indicating whether users can be authenticated using\n+     *     an email link, and false otherwise.\n      */\n-    public static Builder newBuilder() {\n-      return new AutoValue_Tenant_CreateRequest.Builder();\n+    public CreateRequest setEmailLinkSignInEnabled(boolean emailLinkSignInEnabled) {\n+      properties.put(\"enableEmailLinkSignin\", emailLinkSignInEnabled);\n+      return this;\n     }\n \n-    /**\n-    * Builder class used to construct a create request.\n-    */\n-    @AutoValue.Builder\n-    abstract static class Builder {\n-      public abstract Builder setDisplayName(String displayName);\n-\n-      public abstract Builder setPasswordSignInAllowed(boolean allowPasswordSignIn);\n-\n-      public abstract Builder setEmailLinkSignInEnabled(boolean enableEmailLinkSignIn);\n-\n-      public abstract CreateRequest build();\n+    Map<String, Object> getProperties() {\n+      return ImmutableMap.copyOf(properties);\n     }\n   }\n \n   /**\n-   * Class used to hold the information needs to make a tenant update request. \n+   * A class for updating the attributes of an existing tenant.\n+   *\n+   * <p>An instance of this class can be obtained via a {@link Tenant} object, or from a tenant ID\n+   * string. Specify the changes to be made to the tenant by calling the various setter methods\n+   * available in this class.\n    */\n-  @AutoValue\n-  public abstract static class UpdateRequest {\n+  public static class UpdateRequest {", "originalCommit": "6e546a56f24797cba544d52ff833773bf5cd2bb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIwNTE1OQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/361#discussion_r379205159", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-02-14T01:08:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyNjQ5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyNjk4Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/361#discussion_r379126983", "bodyText": "Define a constant for this and avoid duplication.", "author": "hiranya911", "createdAt": "2020-02-13T21:25:10Z", "path": "src/test/java/com/google/firebase/auth/TenantTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static com.google.firebase.auth.Tenant.UpdateRequest;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.api.client.googleapis.util.Utils;\n+import com.google.api.client.json.JsonFactory;\n+import java.io.IOException;\n+import java.util.Map;\n+import org.junit.Test;\n+\n+public class TenantTest {\n+\n+  private static final JsonFactory jsonFactory = Utils.getDefaultJsonFactory();\n+\n+  @Test\n+  public void testJsonSerialization() throws IOException {\n+    Tenant tenant = jsonFactory.fromString(\n+        \"{\"", "originalCommit": "6e546a56f24797cba544d52ff833773bf5cd2bb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIwNDI0NQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/361#discussion_r379204245", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-02-14T01:05:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyNjk4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyNzMxOA==", "url": "https://github.com/firebase/firebase-admin-java/pull/361#discussion_r379127318", "bodyText": "These last 3 assertions are probably redundant since you've already tested for size == 1", "author": "hiranya911", "createdAt": "2020-02-13T21:25:55Z", "path": "src/test/java/com/google/firebase/auth/TenantTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static com.google.firebase.auth.Tenant.UpdateRequest;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.api.client.googleapis.util.Utils;\n+import com.google.api.client.json.JsonFactory;\n+import java.io.IOException;\n+import java.util.Map;\n+import org.junit.Test;\n+\n+public class TenantTest {\n+\n+  private static final JsonFactory jsonFactory = Utils.getDefaultJsonFactory();\n+\n+  @Test\n+  public void testJsonSerialization() throws IOException {\n+    Tenant tenant = jsonFactory.fromString(\n+        \"{\"\n+          + \"\\\"tenantId\\\":\\\"TENANT_ID\\\",\"\n+          + \"\\\"displayName\\\":\\\"DISPLAY_NAME\\\",\"\n+          + \"\\\"allowPasswordSignup\\\":true,\"\n+          + \"\\\"enableEmailLinkSignin\\\":false\"\n+          + \"}\", Tenant.class);\n+\n+    assertEquals(tenant.getTenantId(), \"TENANT_ID\");\n+    assertEquals(tenant.getDisplayName(), \"DISPLAY_NAME\");\n+    assertTrue(tenant.isPasswordSignInAllowed());\n+    assertFalse(tenant.isEmailLinkSignInEnabled());\n+  }\n+\n+  @Test\n+  public void testCreateUpdateRequestFromTenant() throws IOException {\n+    Tenant tenant = jsonFactory.fromString(\n+        \"{\"\n+          + \"\\\"tenantId\\\":\\\"TENANT_ID\\\",\"\n+          + \"\\\"displayName\\\":\\\"DISPLAY_NAME\\\",\"\n+          + \"\\\"allowPasswordSignup\\\":true,\"\n+          + \"\\\"enableEmailLinkSignin\\\":false\"\n+          + \"}\", Tenant.class);\n+\n+    Tenant.UpdateRequest updateRequest = tenant.updateRequest();\n+\n+    assertEquals(\"TENANT_ID\", updateRequest.getTenantId());\n+    Map<String,Object> properties = updateRequest.getProperties();\n+    assertEquals(properties.size(), 1);\n+    assertEquals(\"TENANT_ID\", (String) properties.get(\"tenantId\"));\n+    assertNull(properties.get(\"displayName\"));", "originalCommit": "6e546a56f24797cba544d52ff833773bf5cd2bb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIwNDY3MQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/361#discussion_r379204671", "bodyText": "Good point.", "author": "micahstairs", "createdAt": "2020-02-14T01:07:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyNzMxOA=="}], "type": "inlineReview"}, {"oid": "03e8220f9bb1ae2c582c88d056190f602e49bc8e", "url": "https://github.com/firebase/firebase-admin-java/commit/03e8220f9bb1ae2c582c88d056190f602e49bc8e", "message": "Fix inaccurate documentation concerning the emptyness of displayName parameter.", "committedDate": "2020-02-14T00:47:12Z", "type": "commit"}, {"oid": "2077e3bb54de30169df97880c21e8e735942cdcb", "url": "https://github.com/firebase/firebase-admin-java/commit/2077e3bb54de30169df97880c21e8e735942cdcb", "message": "Apply suggested fixes.", "committedDate": "2020-02-14T00:57:35Z", "type": "commit"}, {"oid": "565bea538155f66ae729dcb05e9f4e208e559837", "url": "https://github.com/firebase/firebase-admin-java/commit/565bea538155f66ae729dcb05e9f4e208e559837", "message": "Remove blip which slipped into my editor accidentally.", "committedDate": "2020-02-14T01:04:35Z", "type": "commit"}, {"oid": "bbd97ed7977db2104a59fe1aef271f4373255bad", "url": "https://github.com/firebase/firebase-admin-java/commit/bbd97ed7977db2104a59fe1aef271f4373255bad", "message": "Add unit test for Tenant.CreateRequest and fix bug in implementation.", "committedDate": "2020-02-14T14:44:04Z", "type": "commit"}, {"oid": "3ea93da39673f45fbf96e4d7472f4c801c384a04", "url": "https://github.com/firebase/firebase-admin-java/commit/3ea93da39673f45fbf96e4d7472f4c801c384a04", "message": "Fix JSON variable for tenant ID.", "committedDate": "2020-02-15T19:22:37Z", "type": "commit"}]}