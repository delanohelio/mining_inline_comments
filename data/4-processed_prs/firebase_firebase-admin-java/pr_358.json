{"pr_number": 358, "pr_title": "Add ListTenantsPage class.", "pr_createdAt": "2020-01-30T21:49:20Z", "pr_url": "https://github.com/firebase/firebase-admin-java/pull/358", "timeline": [{"oid": "d30a4d03d9ad372b3e0f9a98ee67827c733f47dd", "url": "https://github.com/firebase/firebase-admin-java/commit/d30a4d03d9ad372b3e0f9a98ee67827c733f47dd", "message": "Add ListTenantsPage class.", "committedDate": "2020-01-30T21:22:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNDE1Nw==", "url": "https://github.com/firebase/firebase-admin-java/pull/358#discussion_r373714157", "bodyText": "I noticed that Go SDK uses v2beta1. But if this is indeed supported, then it's ok (and even preferred).", "author": "hiranya911", "createdAt": "2020-01-31T22:30:39Z", "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -117,7 +122,8 @@\n         \"Project ID is required to access the auth service. Use a service account credential or \"\n             + \"set the project ID explicitly via FirebaseOptions. Alternatively you can also \"\n             + \"set the project ID via the GOOGLE_CLOUD_PROJECT environment variable.\");\n-    this.baseUrl = String.format(ID_TOOLKIT_URL, projectId);\n+    this.userBaseUrl = String.format(ID_TOOLKIT_URL, \"v1\", projectId);\n+    this.tenantBaseUrl = String.format(ID_TOOLKIT_URL, \"v2\", projectId);", "originalCommit": "3224d7df7af6a46b9f49e1278866692aa1da5c19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyMjM2Nw==", "url": "https://github.com/firebase/firebase-admin-java/pull/358#discussion_r373722367", "bodyText": "Yeah, I did notice that the Go implementation was using the beta. But I think the non-beta version is supported: https://identitytoolkit.googleapis.com/$discovery/rest?version=v2.", "author": "micahstairs", "createdAt": "2020-01-31T22:59:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNDE1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNDM5NQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/358#discussion_r373714395", "bodyText": "I believe this should be just /tenants", "author": "hiranya911", "createdAt": "2020-01-31T22:31:31Z", "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -221,6 +227,25 @@ UserImportResult importUsers(UserImportRequest request) throws FirebaseAuthExcep\n     return new UserImportResult(request.getUsersCount(), response);\n   }\n \n+  // TODO(micahstairs): Write unit tests for this method.\n+  ListTenantsResponse listTenants(int maxResults, String pageToken) throws FirebaseAuthException {\n+    ImmutableMap.Builder<String, Object> builder = ImmutableMap.<String, Object>builder()\n+        .put(\"maxResults\", maxResults);\n+    if (pageToken != null) {\n+      checkArgument(!pageToken.equals(\n+          ListTenantsPage.END_OF_LIST), \"invalid end of list page token\");\n+      builder.put(\"nextPageToken\", pageToken);\n+    }\n+\n+    GenericUrl url = new GenericUrl(tenantBaseUrl + \"/tenants:tenants\");", "originalCommit": "3224d7df7af6a46b9f49e1278866692aa1da5c19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1OTYwNA==", "url": "https://github.com/firebase/firebase-admin-java/pull/358#discussion_r374459604", "bodyText": "After taking another look at https://identitytoolkit.googleapis.com/$discovery/rest?version=v2, I'm thinking it should be \"/tenants:list\".", "author": "micahstairs", "createdAt": "2020-02-04T03:35:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNDM5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNDc0Ng==", "url": "https://github.com/firebase/firebase-admin-java/pull/358#discussion_r373714746", "bodyText": "I think the query params are called pageSize and pageToken. Verify and correct if necessary.", "author": "hiranya911", "createdAt": "2020-01-31T22:32:42Z", "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -221,6 +227,25 @@ UserImportResult importUsers(UserImportRequest request) throws FirebaseAuthExcep\n     return new UserImportResult(request.getUsersCount(), response);\n   }\n \n+  // TODO(micahstairs): Write unit tests for this method.\n+  ListTenantsResponse listTenants(int maxResults, String pageToken) throws FirebaseAuthException {\n+    ImmutableMap.Builder<String, Object> builder = ImmutableMap.<String, Object>builder()\n+        .put(\"maxResults\", maxResults);\n+    if (pageToken != null) {\n+      checkArgument(!pageToken.equals(\n+          ListTenantsPage.END_OF_LIST), \"invalid end of list page token\");\n+      builder.put(\"nextPageToken\", pageToken);", "originalCommit": "3224d7df7af6a46b9f49e1278866692aa1da5c19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1OTY0MQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/358#discussion_r374459641", "bodyText": "You are correct.", "author": "micahstairs", "createdAt": "2020-02-04T03:35:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNDc0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNjA3NQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/358#discussion_r373716075", "bodyText": "Add newline", "author": "hiranya911", "createdAt": "2020-01-31T22:37:21Z", "path": "src/main/java/com/google/firebase/auth/internal/ListTenantsResponse.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth.internal;\n+\n+import com.google.api.client.util.Key;\n+import com.google.firebase.auth.Tenant;\n+import java.util.List;\n+\n+/**\n+ * JSON data binding for ListTenantsResponse messages sent by Google identity toolkit service.\n+ */\n+public class ListTenantsResponse {\n+\n+  @Key(\"tenants\")\n+  private List<Tenant> tenants;\n+\n+  @Key(\"nextPageToken\")\n+  private String pageToken;\n+\n+  public List<Tenant> getTenants() {\n+    return tenants;\n+  }\n+\n+  public boolean hasTenants() {\n+    return tenants != null && !tenants.isEmpty();\n+  }\n+\n+  public String getPageToken() {\n+    return pageToken;\n+  }\n+}", "originalCommit": "3224d7df7af6a46b9f49e1278866692aa1da5c19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4OTUzOQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/358#discussion_r374989539", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-02-04T23:50:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNjA3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNzI5NQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/358#discussion_r373717295", "bodyText": "You probably don't need this type. Just try to use the ListTenantsResponse type directly.\nlistUsers() API use this middle-ground type since the REST API returns a User type which needs to be mapped to ExportedUserRecord. But that requirement is not present here.", "author": "hiranya911", "createdAt": "2020-01-31T22:41:34Z", "path": "src/main/java/com/google/firebase/auth/ListTenantsPage.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.client.json.JsonFactory;\n+import com.google.api.gax.paging.Page;\n+import com.google.common.collect.ImmutableList;\n+import com.google.firebase.auth.internal.DownloadAccountResponse;\n+import com.google.firebase.auth.internal.ListTenantsResponse;\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.internal.Nullable;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Represents a page of {@link Tenant} instances.\n+ * \n+ * <p>Provides methods for iterating over the tenants in the current page, and calling up\n+ * subsequent pages of tenants.\n+ * \n+ * <p>Instances of this class are thread-safe and immutable.\n+ */\n+public class ListTenantsPage implements Page<Tenant> {\n+\n+  static final String END_OF_LIST = \"\";\n+\n+  private final ListTenantsResult currentBatch;\n+  private final TenantSource source;\n+  private final int maxResults;\n+\n+  private ListTenantsPage(\n+      @NonNull ListTenantsResult currentBatch, @NonNull TenantSource source, int maxResults) {\n+    this.currentBatch = checkNotNull(currentBatch);\n+    this.source = checkNotNull(source);\n+    this.maxResults = maxResults;\n+  }\n+\n+  /**\n+   * Checks if there is another page of tenants available to retrieve.\n+   *\n+   * @return true if another page is available, or false otherwise.\n+   */\n+  @Override\n+  public boolean hasNextPage() {\n+    return !END_OF_LIST.equals(currentBatch.getNextPageToken());\n+  }\n+\n+  /**\n+   * Returns the string token that identifies the next page.\n+   * \n+   * <p>Never returns null. Returns empty string if there are no more pages available to be\n+   * retrieved.\n+   *\n+   * @return A non-null string token (possibly empty, representing no more pages)\n+   */\n+  @NonNull\n+  @Override\n+  public String getNextPageToken() {\n+    return currentBatch.getNextPageToken();\n+  }\n+\n+  /**\n+   * Returns the next page of tenants.\n+   *\n+   * @return A new {@link ListTenantsPage} instance, or null if there are no more pages.\n+   */\n+  @Nullable\n+  @Override\n+  public ListTenantsPage getNextPage() {\n+    if (hasNextPage()) {\n+      PageFactory factory = new PageFactory(source, maxResults, currentBatch.getNextPageToken());\n+      try {\n+        return factory.create();\n+      } catch (FirebaseAuthException e) {\n+        throw new RuntimeException(e);\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Returns an {@link Iterable} that facilitates transparently iterating over all the tenants in\n+   * the current Firebase project, starting from this page.\n+   * \n+   * <p>The {@link Iterator} instances produced by the returned {@link Iterable} never buffers more\n+   * than one page of tenants at a time. It is safe to abandon the iterators (i.e. break the loops)\n+   * at any time.\n+   *\n+   * @return a new {@link Iterable} instance.\n+   */\n+  @NonNull\n+  @Override\n+  public Iterable<Tenant> iterateAll() {\n+    return new TenantIterable(this);\n+  }\n+\n+  /**\n+   * Returns an {@code Iterable} over the tenants in this page.\n+   *\n+   * @return a {@code Iterable<Tenant>} instance.\n+   */\n+  @NonNull\n+  @Override\n+  public Iterable<Tenant> getValues() {\n+    return currentBatch.getTenants();\n+  }\n+\n+  private static class TenantIterable implements Iterable<Tenant> {\n+\n+    private final ListTenantsPage startingPage;\n+\n+    TenantIterable(@NonNull ListTenantsPage startingPage) {\n+      this.startingPage = checkNotNull(startingPage, \"starting page must not be null\");\n+    }\n+\n+    @Override\n+    @NonNull\n+    public Iterator<Tenant> iterator() {\n+      return new TenantIterator(startingPage);\n+    }\n+\n+    /**\n+     * An {@link Iterator} that cycles through tenants, one at a time.\n+     * \n+     * <p>It buffers the last retrieved batch of tenants in memory. The {@code maxResults} parameter\n+     * is an upper bound on the batch size.\n+     */\n+    private static class TenantIterator implements Iterator<Tenant> {\n+\n+      private ListTenantsPage currentPage;\n+      private List<Tenant> batch;\n+      private int index = 0;\n+\n+      private TenantIterator(ListTenantsPage startingPage) {\n+        setCurrentPage(startingPage);\n+      }\n+\n+      @Override\n+      public boolean hasNext() {\n+        if (index == batch.size()) {\n+          if (currentPage.hasNextPage()) {\n+            setCurrentPage(currentPage.getNextPage());\n+          } else {\n+            return false;\n+          }\n+        }\n+\n+        return index < batch.size();\n+      }\n+\n+      @Override\n+      public Tenant next() {\n+        if (!hasNext()) {\n+          throw new NoSuchElementException();\n+        }\n+        return batch.get(index++);\n+      }\n+\n+      @Override\n+      public void remove() {\n+        throw new UnsupportedOperationException(\"remove operation not supported\");\n+      }\n+\n+      private void setCurrentPage(ListTenantsPage page) {\n+        this.currentPage = checkNotNull(page);\n+        this.batch = ImmutableList.copyOf(page.getValues());\n+        this.index = 0;\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Represents a source of tenant data that can be queried to load a batch of tenants.\n+   */\n+  interface TenantSource {\n+    @NonNull\n+    ListTenantsResult fetch(int maxResults, String pageToken) throws FirebaseAuthException;\n+  }\n+\n+  static class DefaultTenantSource implements TenantSource {\n+\n+    private final FirebaseUserManager userManager;\n+    private final JsonFactory jsonFactory;\n+\n+    DefaultTenantSource(FirebaseUserManager userManager, JsonFactory jsonFactory) {\n+      this.userManager = checkNotNull(userManager, \"user manager must not be null\");\n+      this.jsonFactory = checkNotNull(jsonFactory, \"json factory must not be null\");\n+    }\n+\n+    @Override\n+    public ListTenantsResult fetch(int maxResults, String pageToken) throws FirebaseAuthException {\n+      ListTenantsResponse response = userManager.listTenants(maxResults, pageToken);\n+      ImmutableList.Builder<Tenant> builder = ImmutableList.builder();\n+      if (response.hasTenants()) {\n+        builder.addAll(response.getTenants());\n+      }\n+      String nextPageToken = response.getPageToken() != null\n+          ? response.getPageToken() : END_OF_LIST;\n+      return new ListTenantsResult(builder.build(), nextPageToken);\n+    }\n+  }\n+\n+  static final class ListTenantsResult {", "originalCommit": "3224d7df7af6a46b9f49e1278866692aa1da5c19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4OTYwMA==", "url": "https://github.com/firebase/firebase-admin-java/pull/358#discussion_r374989600", "bodyText": "Okay, but I had to add a constructor to ListTenantsResponse so that I could construct it in the unit test.", "author": "micahstairs", "createdAt": "2020-02-04T23:50:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNzI5NQ=="}], "type": "inlineReview"}, {"oid": "d30a4d03d9ad372b3e0f9a98ee67827c733f47dd", "url": "https://github.com/firebase/firebase-admin-java/commit/d30a4d03d9ad372b3e0f9a98ee67827c733f47dd", "message": "Add ListTenantsPage class.", "committedDate": "2020-01-30T21:22:30Z", "type": "forcePushed"}, {"oid": "02e49cf246df9478df7c8d94bb7bd4db5f5cde02", "url": "https://github.com/firebase/firebase-admin-java/commit/02e49cf246df9478df7c8d94bb7bd4db5f5cde02", "message": "Implement review feedback.", "committedDate": "2020-02-04T23:47:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5Mzk0Ng==", "url": "https://github.com/firebase/firebase-admin-java/pull/358#discussion_r374993946", "bodyText": "Nit: Lets call them userMgtBaseUrl and tenantMgtBaseUrl for clarity.", "author": "hiranya911", "createdAt": "2020-02-05T00:05:11Z", "path": "src/main/java/com/google/firebase/auth/FirebaseUserManager.java", "diffHunk": "@@ -117,7 +122,8 @@\n         \"Project ID is required to access the auth service. Use a service account credential or \"\n             + \"set the project ID explicitly via FirebaseOptions. Alternatively you can also \"\n             + \"set the project ID via the GOOGLE_CLOUD_PROJECT environment variable.\");\n-    this.baseUrl = String.format(ID_TOOLKIT_URL, projectId);\n+    this.userBaseUrl = String.format(ID_TOOLKIT_URL, \"v1\", projectId);", "originalCommit": "02e49cf246df9478df7c8d94bb7bd4db5f5cde02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMzcwNw==", "url": "https://github.com/firebase/firebase-admin-java/pull/358#discussion_r375033707", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-02-05T02:42:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5Mzk0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5NTg3MA==", "url": "https://github.com/firebase/firebase-admin-java/pull/358#discussion_r374995870", "bodyText": "You probably won't be able to parse/deserialize into this unless you also define a no-args constructor. Chances are the existing unit tests don't hit that case as of yet. But it's fine to defer adding it until we hit that case.", "author": "hiranya911", "createdAt": "2020-02-05T00:12:38Z", "path": "src/main/java/com/google/firebase/auth/internal/ListTenantsResponse.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.auth.internal;\n+\n+import com.google.api.client.util.Key;\n+import com.google.firebase.auth.Tenant;\n+import java.util.List;\n+\n+/**\n+ * JSON data binding for ListTenantsResponse messages sent by Google identity toolkit service.\n+ */\n+public class ListTenantsResponse {\n+\n+  @Key(\"tenants\")\n+  private List<Tenant> tenants;\n+\n+  @Key(\"pageToken\")\n+  private String pageToken;\n+\n+  public ListTenantsResponse(List<Tenant> tenants, String pageToken) {", "originalCommit": "02e49cf246df9478df7c8d94bb7bd4db5f5cde02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzNDc5Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/358#discussion_r375034793", "bodyText": "Oh, you're right, I think we do need that (I slipped it into this PR).\nNo, there's not any unit tests which hit this yet. Those will come when I flesh out the other tenant methods in FirebaseUserManager.", "author": "micahstairs", "createdAt": "2020-02-05T02:48:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5NTg3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5NjAzOA==", "url": "https://github.com/firebase/firebase-admin-java/pull/358#discussion_r374996038", "bodyText": "2020 (also check other files)", "author": "hiranya911", "createdAt": "2020-02-05T00:13:10Z", "path": "src/test/java/com/google/firebase/auth/ListTenantsPageTest.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/*\n+ * Copyright 202 Google LLC", "originalCommit": "02e49cf246df9478df7c8d94bb7bd4db5f5cde02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMzY1MA==", "url": "https://github.com/firebase/firebase-admin-java/pull/358#discussion_r375033650", "bodyText": "Done.", "author": "micahstairs", "createdAt": "2020-02-05T02:42:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5NjAzOA=="}], "type": "inlineReview"}, {"oid": "72276ab973972289e00b03972d562137724b865a", "url": "https://github.com/firebase/firebase-admin-java/commit/72276ab973972289e00b03972d562137724b865a", "message": "Rename variable and fix copyright notice.", "committedDate": "2020-02-05T02:41:10Z", "type": "commit"}, {"oid": "b7ffd360d3b0ac6478b9020fd617a2f6f2edfc71", "url": "https://github.com/firebase/firebase-admin-java/commit/b7ffd360d3b0ac6478b9020fd617a2f6f2edfc71", "message": "Add empty constructor to allow for json serialization.", "committedDate": "2020-02-05T02:44:17Z", "type": "commit"}]}