{"pr_number": 498, "pr_title": "Add List Versions operation in Remote Config", "pr_createdAt": "2020-12-01T22:07:10Z", "pr_url": "https://github.com/firebase/firebase-admin-java/pull/498", "timeline": [{"oid": "460d9144c12aabbb63f4342478d97e6e1e8dfbc5", "url": "https://github.com/firebase/firebase-admin-java/commit/460d9144c12aabbb63f4342478d97e6e1e8dfbc5", "message": "Add List Versions operation in Remote Config", "committedDate": "2020-12-01T23:04:42Z", "type": "forcePushed"}, {"oid": "180f8f9eea3c772abaf455a73a3a4d660699bfb4", "url": "https://github.com/firebase/firebase-admin-java/commit/180f8f9eea3c772abaf455a73a3a4d660699bfb4", "message": "Add List Versions operation in Remote Config", "committedDate": "2020-12-01T23:12:38Z", "type": "forcePushed"}, {"oid": "c965c485539920c3c8584309bbb55cdaf8ee6186", "url": "https://github.com/firebase/firebase-admin-java/commit/c965c485539920c3c8584309bbb55cdaf8ee6186", "message": "Add List Versions operation in Remote Config", "committedDate": "2020-12-01T23:14:09Z", "type": "commit"}, {"oid": "c965c485539920c3c8584309bbb55cdaf8ee6186", "url": "https://github.com/firebase/firebase-admin-java/commit/c965c485539920c3c8584309bbb55cdaf8ee6186", "message": "Add List Versions operation in Remote Config", "committedDate": "2020-12-01T23:14:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5MjE0OQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/498#discussion_r533792149", "bodyText": "Shouldn't this have a version that takes a long?", "author": "hiranya911", "createdAt": "2020-12-01T23:29:55Z", "path": "src/main/java/com/google/firebase/remoteconfig/ListVersionsOptions.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.common.base.Strings;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TimeZone;\n+\n+/**\n+ * A class representing options for Remote Config list versions operation.\n+ */\n+public final class ListVersionsOptions {\n+\n+  private final Integer pageSize;\n+  private final String pageToken;\n+  private final String endVersionNumber;\n+  private final String startTime;\n+  private final String endTime;\n+\n+  private ListVersionsOptions(Builder builder) {\n+    this.pageSize = builder.pageSize;\n+    this.pageToken = builder.pageToken;\n+    this.endVersionNumber = builder.endVersionNumber;\n+    this.startTime = builder.startTime;\n+    this.endTime = builder.endTime;\n+  }\n+\n+  Map<String, Object> wrapForTransport() {\n+    Map<String, Object> optionsMap = new HashMap<>();\n+    if (this.pageSize != null) {\n+      optionsMap.put(\"pageSize\", this.pageSize);\n+    }\n+    if (this.pageToken != null) {\n+      optionsMap.put(\"pageToken\", this.pageToken);\n+    }\n+    if (this.endVersionNumber != null) {\n+      optionsMap.put(\"endVersionNumber\", this.endVersionNumber);\n+    }\n+    if (this.startTime != null) {\n+      optionsMap.put(\"startTime\", this.startTime);\n+    }\n+    if (this.endTime != null) {\n+      optionsMap.put(\"endTime\", this.endTime);\n+    }\n+    return optionsMap;\n+  }\n+\n+  String getPageToken() {\n+    return pageToken;\n+  }\n+\n+  /**\n+   * Creates a new {@link ListVersionsOptions.Builder}.\n+   *\n+   * @return A {@link ListVersionsOptions.Builder} instance.\n+   */\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /**\n+   * Creates a new {@code Builder} from the options object.\n+   *\n+   * <p>The new builder is not backed by this object's values; that is, changes made to the new\n+   * builder don't change the values of the origin object.\n+   */\n+  public Builder toBuilder() {\n+    return new Builder(this);\n+  }\n+\n+  public static class Builder {\n+    private Integer pageSize;\n+    private String pageToken;\n+    private String endVersionNumber;\n+    private String startTime;\n+    private String endTime;\n+\n+    private Builder() {}\n+\n+    private Builder(ListVersionsOptions options) {\n+      this.pageSize = options.pageSize;\n+      this.pageToken = options.pageToken;\n+      this.endVersionNumber = options.endVersionNumber;\n+      this.startTime = options.startTime;\n+      this.endTime = options.endTime;\n+    }\n+\n+    /**\n+     * Sets the page size.\n+     *\n+     * @param pageSize The maximum number of items to return per page.\n+     * @return This builder.\n+     */\n+    public Builder setPageSize(int pageSize) {\n+      checkArgument(pageSize > 0 && pageSize < 301,\n+              \"pageSize must be a number between 1 and 300 (inclusive).\");\n+      this.pageSize = pageSize;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the page token.\n+     *\n+     * @param pageToken The {@code nextPageToken} value returned from a previous List request,\n+     *                  if any.\n+     * @return This builder.\n+     */\n+    public Builder setPageToken(String pageToken) {\n+      this.pageToken = pageToken;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the newest version number to include in the results.\n+     *\n+     * @param endVersionNumber Specify the newest version number to include in the results.\n+     *                         If specified, must be greater than zero. Defaults to the newest\n+     *                         version.\n+     * @return This builder.\n+     */\n+    public Builder setEndVersionNumber(String endVersionNumber) {", "originalCommit": "c965c485539920c3c8584309bbb55cdaf8ee6186", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQzMjI0MA==", "url": "https://github.com/firebase/firebase-admin-java/pull/498#discussion_r534432240", "bodyText": "Good catch! Added a setter that takes a long", "author": "lahirumaramba", "createdAt": "2020-12-02T19:38:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5MjE0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5MjQ3Ng==", "url": "https://github.com/firebase/firebase-admin-java/pull/498#discussion_r533792476", "bodyText": "We typically do all argument validation in the constructor. So any errors are deferred until build() is called.", "author": "hiranya911", "createdAt": "2020-12-01T23:30:48Z", "path": "src/main/java/com/google/firebase/remoteconfig/ListVersionsOptions.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.common.base.Strings;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TimeZone;\n+\n+/**\n+ * A class representing options for Remote Config list versions operation.\n+ */\n+public final class ListVersionsOptions {\n+\n+  private final Integer pageSize;\n+  private final String pageToken;\n+  private final String endVersionNumber;\n+  private final String startTime;\n+  private final String endTime;\n+\n+  private ListVersionsOptions(Builder builder) {\n+    this.pageSize = builder.pageSize;\n+    this.pageToken = builder.pageToken;\n+    this.endVersionNumber = builder.endVersionNumber;\n+    this.startTime = builder.startTime;\n+    this.endTime = builder.endTime;\n+  }\n+\n+  Map<String, Object> wrapForTransport() {\n+    Map<String, Object> optionsMap = new HashMap<>();\n+    if (this.pageSize != null) {\n+      optionsMap.put(\"pageSize\", this.pageSize);\n+    }\n+    if (this.pageToken != null) {\n+      optionsMap.put(\"pageToken\", this.pageToken);\n+    }\n+    if (this.endVersionNumber != null) {\n+      optionsMap.put(\"endVersionNumber\", this.endVersionNumber);\n+    }\n+    if (this.startTime != null) {\n+      optionsMap.put(\"startTime\", this.startTime);\n+    }\n+    if (this.endTime != null) {\n+      optionsMap.put(\"endTime\", this.endTime);\n+    }\n+    return optionsMap;\n+  }\n+\n+  String getPageToken() {\n+    return pageToken;\n+  }\n+\n+  /**\n+   * Creates a new {@link ListVersionsOptions.Builder}.\n+   *\n+   * @return A {@link ListVersionsOptions.Builder} instance.\n+   */\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /**\n+   * Creates a new {@code Builder} from the options object.\n+   *\n+   * <p>The new builder is not backed by this object's values; that is, changes made to the new\n+   * builder don't change the values of the origin object.\n+   */\n+  public Builder toBuilder() {\n+    return new Builder(this);\n+  }\n+\n+  public static class Builder {\n+    private Integer pageSize;\n+    private String pageToken;\n+    private String endVersionNumber;\n+    private String startTime;\n+    private String endTime;\n+\n+    private Builder() {}\n+\n+    private Builder(ListVersionsOptions options) {\n+      this.pageSize = options.pageSize;\n+      this.pageToken = options.pageToken;\n+      this.endVersionNumber = options.endVersionNumber;\n+      this.startTime = options.startTime;\n+      this.endTime = options.endTime;\n+    }\n+\n+    /**\n+     * Sets the page size.\n+     *\n+     * @param pageSize The maximum number of items to return per page.\n+     * @return This builder.\n+     */\n+    public Builder setPageSize(int pageSize) {\n+      checkArgument(pageSize > 0 && pageSize < 301,", "originalCommit": "c965c485539920c3c8584309bbb55cdaf8ee6186", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQzMjQyNw==", "url": "https://github.com/firebase/firebase-admin-java/pull/498#discussion_r534432427", "bodyText": "Moved the validation to the constructor. Thanks!", "author": "lahirumaramba", "createdAt": "2020-12-02T19:39:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5MjQ3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NjUwOQ==", "url": "https://github.com/firebase/firebase-admin-java/pull/498#discussion_r533796509", "bodyText": "May be duplicated elsewhere if I'm not mistaken. Think about extracting into a shared utils class.", "author": "hiranya911", "createdAt": "2020-12-01T23:41:51Z", "path": "src/main/java/com/google/firebase/remoteconfig/ListVersionsOptions.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.common.base.Strings;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TimeZone;\n+\n+/**\n+ * A class representing options for Remote Config list versions operation.\n+ */\n+public final class ListVersionsOptions {\n+\n+  private final Integer pageSize;\n+  private final String pageToken;\n+  private final String endVersionNumber;\n+  private final String startTime;\n+  private final String endTime;\n+\n+  private ListVersionsOptions(Builder builder) {\n+    this.pageSize = builder.pageSize;\n+    this.pageToken = builder.pageToken;\n+    this.endVersionNumber = builder.endVersionNumber;\n+    this.startTime = builder.startTime;\n+    this.endTime = builder.endTime;\n+  }\n+\n+  Map<String, Object> wrapForTransport() {\n+    Map<String, Object> optionsMap = new HashMap<>();\n+    if (this.pageSize != null) {\n+      optionsMap.put(\"pageSize\", this.pageSize);\n+    }\n+    if (this.pageToken != null) {\n+      optionsMap.put(\"pageToken\", this.pageToken);\n+    }\n+    if (this.endVersionNumber != null) {\n+      optionsMap.put(\"endVersionNumber\", this.endVersionNumber);\n+    }\n+    if (this.startTime != null) {\n+      optionsMap.put(\"startTime\", this.startTime);\n+    }\n+    if (this.endTime != null) {\n+      optionsMap.put(\"endTime\", this.endTime);\n+    }\n+    return optionsMap;\n+  }\n+\n+  String getPageToken() {\n+    return pageToken;\n+  }\n+\n+  /**\n+   * Creates a new {@link ListVersionsOptions.Builder}.\n+   *\n+   * @return A {@link ListVersionsOptions.Builder} instance.\n+   */\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /**\n+   * Creates a new {@code Builder} from the options object.\n+   *\n+   * <p>The new builder is not backed by this object's values; that is, changes made to the new\n+   * builder don't change the values of the origin object.\n+   */\n+  public Builder toBuilder() {\n+    return new Builder(this);\n+  }\n+\n+  public static class Builder {\n+    private Integer pageSize;\n+    private String pageToken;\n+    private String endVersionNumber;\n+    private String startTime;\n+    private String endTime;\n+\n+    private Builder() {}\n+\n+    private Builder(ListVersionsOptions options) {\n+      this.pageSize = options.pageSize;\n+      this.pageToken = options.pageToken;\n+      this.endVersionNumber = options.endVersionNumber;\n+      this.startTime = options.startTime;\n+      this.endTime = options.endTime;\n+    }\n+\n+    /**\n+     * Sets the page size.\n+     *\n+     * @param pageSize The maximum number of items to return per page.\n+     * @return This builder.\n+     */\n+    public Builder setPageSize(int pageSize) {\n+      checkArgument(pageSize > 0 && pageSize < 301,\n+              \"pageSize must be a number between 1 and 300 (inclusive).\");\n+      this.pageSize = pageSize;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the page token.\n+     *\n+     * @param pageToken The {@code nextPageToken} value returned from a previous List request,\n+     *                  if any.\n+     * @return This builder.\n+     */\n+    public Builder setPageToken(String pageToken) {\n+      this.pageToken = pageToken;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the newest version number to include in the results.\n+     *\n+     * @param endVersionNumber Specify the newest version number to include in the results.\n+     *                         If specified, must be greater than zero. Defaults to the newest\n+     *                         version.\n+     * @return This builder.\n+     */\n+    public Builder setEndVersionNumber(String endVersionNumber) {\n+      checkArgument(isValidVersionNumber(endVersionNumber),\n+              \"endVersionNumber must be a non-empty string in int64 format.\");\n+      this.endVersionNumber = endVersionNumber;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the earliest update time to include in the results.\n+     *\n+     * @param startTimeMillis Specify the earliest update time to include in the results.\n+     *                        Any entries updated before this time are omitted.\n+     * @return This builder.\n+     */\n+    public Builder setStartTime(long startTimeMillis) {\n+      this.startTime = convertToUtcZuluFormat(startTimeMillis);\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the latest update time to include in the results.\n+     *\n+     * @param endTimeMillis Specify the latest update time to include in the results.\n+     *                      Any entries updated on or after this time are omitted.\n+     * @return This builder.\n+     */\n+    public Builder setEndTime(long endTimeMillis) {\n+      this.endTime = convertToUtcZuluFormat(endTimeMillis);\n+      return this;\n+    }\n+\n+    private String convertToUtcZuluFormat(long millis) {\n+      checkArgument(millis >= 0, \"Milliseconds duration must not be negative\");\n+      SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS000000'Z'\");\n+      dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+      return dateFormat.format(new Date(millis));\n+    }\n+\n+    private boolean isValidVersionNumber(String versionNumber) {", "originalCommit": "c965c485539920c3c8584309bbb55cdaf8ee6186", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQzMjY2Nw==", "url": "https://github.com/firebase/firebase-admin-java/pull/498#discussion_r534432667", "bodyText": "Good call! Moved the validations to RemoteConfigUtil", "author": "lahirumaramba", "createdAt": "2020-12-02T19:39:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NjUwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5Njg2Mg==", "url": "https://github.com/firebase/firebase-admin-java/pull/498#discussion_r533796862", "bodyText": "ListVersionsPage to be consistent with the naming convention used in other APIs.", "author": "hiranya911", "createdAt": "2020-12-01T23:42:50Z", "path": "src/main/java/com/google/firebase/remoteconfig/ListVersionsResult.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.common.collect.ImmutableList;\n+import com.google.firebase.internal.NonNull;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Represents a page of {@link Version} instances. Provides methods for iterating\n+ * over the versions in the current page, and calling up subsequent pages of versions. Instances of\n+ * this class are thread-safe and immutable.\n+ */\n+public final class ListVersionsResult implements Page<Version> {", "originalCommit": "c965c485539920c3c8584309bbb55cdaf8ee6186", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg1NDM0Mw==", "url": "https://github.com/firebase/firebase-admin-java/pull/498#discussion_r533854343", "bodyText": "Redundant whitespace", "author": "hiranya911", "createdAt": "2020-12-02T02:29:51Z", "path": "src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigClientImplTest.java", "diffHunk": "@@ -914,6 +919,196 @@ public void testRollbackErrorWithRcError() throws IOException {\n     }\n   }\n \n+", "originalCommit": "c965c485539920c3c8584309bbb55cdaf8ee6186", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg1NDkzMg==", "url": "https://github.com/firebase/firebase-admin-java/pull/498#discussion_r533854932", "bodyText": "setStartTimeMillis?", "author": "hiranya911", "createdAt": "2020-12-02T02:31:33Z", "path": "src/main/java/com/google/firebase/remoteconfig/ListVersionsOptions.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.common.base.Strings;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TimeZone;\n+\n+/**\n+ * A class representing options for Remote Config list versions operation.\n+ */\n+public final class ListVersionsOptions {\n+\n+  private final Integer pageSize;\n+  private final String pageToken;\n+  private final String endVersionNumber;\n+  private final String startTime;\n+  private final String endTime;\n+\n+  private ListVersionsOptions(Builder builder) {\n+    this.pageSize = builder.pageSize;\n+    this.pageToken = builder.pageToken;\n+    this.endVersionNumber = builder.endVersionNumber;\n+    this.startTime = builder.startTime;\n+    this.endTime = builder.endTime;\n+  }\n+\n+  Map<String, Object> wrapForTransport() {\n+    Map<String, Object> optionsMap = new HashMap<>();\n+    if (this.pageSize != null) {\n+      optionsMap.put(\"pageSize\", this.pageSize);\n+    }\n+    if (this.pageToken != null) {\n+      optionsMap.put(\"pageToken\", this.pageToken);\n+    }\n+    if (this.endVersionNumber != null) {\n+      optionsMap.put(\"endVersionNumber\", this.endVersionNumber);\n+    }\n+    if (this.startTime != null) {\n+      optionsMap.put(\"startTime\", this.startTime);\n+    }\n+    if (this.endTime != null) {\n+      optionsMap.put(\"endTime\", this.endTime);\n+    }\n+    return optionsMap;\n+  }\n+\n+  String getPageToken() {\n+    return pageToken;\n+  }\n+\n+  /**\n+   * Creates a new {@link ListVersionsOptions.Builder}.\n+   *\n+   * @return A {@link ListVersionsOptions.Builder} instance.\n+   */\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /**\n+   * Creates a new {@code Builder} from the options object.\n+   *\n+   * <p>The new builder is not backed by this object's values; that is, changes made to the new\n+   * builder don't change the values of the origin object.\n+   */\n+  public Builder toBuilder() {\n+    return new Builder(this);\n+  }\n+\n+  public static class Builder {\n+    private Integer pageSize;\n+    private String pageToken;\n+    private String endVersionNumber;\n+    private String startTime;\n+    private String endTime;\n+\n+    private Builder() {}\n+\n+    private Builder(ListVersionsOptions options) {\n+      this.pageSize = options.pageSize;\n+      this.pageToken = options.pageToken;\n+      this.endVersionNumber = options.endVersionNumber;\n+      this.startTime = options.startTime;\n+      this.endTime = options.endTime;\n+    }\n+\n+    /**\n+     * Sets the page size.\n+     *\n+     * @param pageSize The maximum number of items to return per page.\n+     * @return This builder.\n+     */\n+    public Builder setPageSize(int pageSize) {\n+      checkArgument(pageSize > 0 && pageSize < 301,\n+              \"pageSize must be a number between 1 and 300 (inclusive).\");\n+      this.pageSize = pageSize;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the page token.\n+     *\n+     * @param pageToken The {@code nextPageToken} value returned from a previous List request,\n+     *                  if any.\n+     * @return This builder.\n+     */\n+    public Builder setPageToken(String pageToken) {\n+      this.pageToken = pageToken;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the newest version number to include in the results.\n+     *\n+     * @param endVersionNumber Specify the newest version number to include in the results.\n+     *                         If specified, must be greater than zero. Defaults to the newest\n+     *                         version.\n+     * @return This builder.\n+     */\n+    public Builder setEndVersionNumber(String endVersionNumber) {\n+      checkArgument(isValidVersionNumber(endVersionNumber),\n+              \"endVersionNumber must be a non-empty string in int64 format.\");\n+      this.endVersionNumber = endVersionNumber;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the earliest update time to include in the results.\n+     *\n+     * @param startTimeMillis Specify the earliest update time to include in the results.\n+     *                        Any entries updated before this time are omitted.\n+     * @return This builder.\n+     */\n+    public Builder setStartTime(long startTimeMillis) {", "originalCommit": "c965c485539920c3c8584309bbb55cdaf8ee6186", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg1NTczNw==", "url": "https://github.com/firebase/firebase-admin-java/pull/498#discussion_r533855737", "bodyText": "assertFalse(iterator.hasNext())", "author": "hiranya911", "createdAt": "2020-12-02T02:34:08Z", "path": "src/test/java/com/google/firebase/remoteconfig/ListVersionsResultTest.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.firebase.remoteconfig.internal.TemplateResponse;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+import org.junit.Test;\n+\n+public class ListVersionsResultTest {\n+\n+  @Test\n+  public void testSinglePage() throws FirebaseRemoteConfigException {\n+    TestVersionSource source = new TestVersionSource(3);\n+    ListVersionsResult page = new ListVersionsResult.Factory(source).create();\n+    assertFalse(page.hasNextPage());\n+    assertEquals(ListVersionsResult.END_OF_LIST, page.getNextPageToken());\n+    assertNull(page.getNextPage());\n+\n+    ImmutableList<Version> versions = ImmutableList.copyOf(page.getValues());\n+    assertEquals(3, versions.size());\n+    for (int i = 0; i < 3; i++) {\n+      assertEquals(\"1\" + i, versions.get(i).getVersionNumber());\n+    }\n+    assertEquals(1, source.calls.size());\n+    assertNull(source.calls.get(0));\n+  }\n+\n+  @Test\n+  public void testMultiplePages() throws FirebaseRemoteConfigException {\n+    ListVersionsResult.VersionsResultBatch result = new ListVersionsResult.VersionsResultBatch(\n+            ImmutableList.of(\n+                    newVersion(\"10\"),\n+                    newVersion(\"11\"),\n+                    newVersion(\"12\")), \"token\");\n+    TestVersionSource source = new TestVersionSource(result);\n+    ListVersionsResult page1 = new ListVersionsResult.Factory(source).create();\n+\n+    assertTrue(page1.hasNextPage());\n+    assertEquals(\"token\", page1.getNextPageToken());\n+    ImmutableList<Version> versions = ImmutableList.copyOf(page1.getValues());\n+    assertEquals(3, versions.size());\n+    for (int i = 0; i < 3; i++) {\n+      assertEquals(\"1\" + i, versions.get(i).getVersionNumber());\n+    }\n+\n+    result = new ListVersionsResult.VersionsResultBatch(\n+            ImmutableList.of(\n+                    newVersion(\"13\"),\n+                    newVersion(\"14\"),\n+                    newVersion(\"15\")), ListVersionsResult.END_OF_LIST);\n+    source.result = result;\n+    ListVersionsResult page2 = page1.getNextPage();\n+\n+    assertNotNull(page2);\n+    assertFalse(page2.hasNextPage());\n+    assertEquals(ListVersionsResult.END_OF_LIST, page2.getNextPageToken());\n+    versions = ImmutableList.copyOf(page2.getValues());\n+    assertEquals(3, versions.size());\n+    for (int i = 3; i < 6; i++) {\n+      assertEquals(\"1\" + i, versions.get(i - 3).getVersionNumber());\n+    }\n+\n+    assertEquals(2, source.calls.size());\n+    assertNull(source.calls.get(0));\n+    assertEquals(\"token\", source.calls.get(1).getPageToken());\n+\n+    // Should iterate all versions from both pages\n+    int iterations = 0;\n+    for (Version ignored : page1.iterateAll()) {\n+      iterations++;\n+    }\n+    assertEquals(6, iterations);\n+    assertEquals(3, source.calls.size());\n+    assertEquals(\"token\", source.calls.get(2).getPageToken());\n+\n+    // Should only iterate versions in the last page\n+    iterations = 0;\n+    for (Version ignored : page2.iterateAll()) {\n+      iterations++;\n+    }\n+    assertEquals(3, iterations);\n+    assertEquals(3, source.calls.size());\n+  }\n+\n+  @Test\n+  public void testListVersionsIterable() throws FirebaseRemoteConfigException {\n+    TestVersionSource source = new TestVersionSource(3);\n+    ListVersionsResult page = new ListVersionsResult.Factory(source).create();\n+    Iterable<Version> versions = page.iterateAll();\n+\n+    int iterations = 0;\n+    for (Version version : versions) {\n+      assertEquals(\"1\" + iterations, version.getVersionNumber());\n+      iterations++;\n+    }\n+    assertEquals(3, iterations);\n+    assertEquals(1, source.calls.size());\n+    assertNull(source.calls.get(0));\n+\n+    // Should result in a new iterator\n+    iterations = 0;\n+    for (Version version : versions) {\n+      assertEquals(\"1\" + iterations, version.getVersionNumber());\n+      iterations++;\n+    }\n+    assertEquals(3, iterations);\n+    assertEquals(1, source.calls.size());\n+    assertNull(source.calls.get(0));\n+  }\n+\n+  @Test\n+  public void testListVersionsIterator() throws FirebaseRemoteConfigException {\n+    TestVersionSource source = new TestVersionSource(3);\n+    ListVersionsResult page = new ListVersionsResult.Factory(source).create();\n+    Iterable<Version> versions = page.iterateAll();\n+    Iterator<Version> iterator = versions.iterator();\n+    int iterations = 0;\n+    while (iterator.hasNext()) {\n+      assertEquals(\"1\" + iterations, iterator.next().getVersionNumber());\n+      iterations++;\n+    }\n+    assertEquals(3, iterations);\n+    assertEquals(1, source.calls.size());\n+    assertNull(source.calls.get(0));\n+\n+    while (iterator.hasNext()) {\n+      fail(\"Should not be able to to iterate any more\");\n+    }\n+    try {\n+      iterator.next();\n+      fail(\"Should not be able to iterate any more\");\n+    } catch (NoSuchElementException expected) {\n+      // expected\n+    }\n+    assertEquals(1, source.calls.size());\n+  }\n+\n+  @Test\n+  public void testListVersionsPagedIterable() throws FirebaseRemoteConfigException {\n+    ListVersionsResult.VersionsResultBatch result = new ListVersionsResult.VersionsResultBatch(\n+            ImmutableList.of(\n+                    newVersion(\"10\"),\n+                    newVersion(\"11\"),\n+                    newVersion(\"12\")), \"token\");\n+    TestVersionSource source = new TestVersionSource(result);\n+    ListVersionsResult page = new ListVersionsResult.Factory(source).create();\n+    int iterations = 0;\n+    for (Version version : page.iterateAll()) {\n+      assertEquals(\"1\" + iterations, version.getVersionNumber());\n+      iterations++;\n+      if (iterations == 3) {\n+        assertEquals(1, source.calls.size());\n+        assertNull(source.calls.get(0));\n+        result = new ListVersionsResult.VersionsResultBatch(\n+                ImmutableList.of(\n+                        newVersion(\"13\"),\n+                        newVersion(\"14\"),\n+                        newVersion(\"15\")), ListVersionsResult.END_OF_LIST);\n+        source.result = result;\n+      }\n+    }\n+\n+    assertEquals(6, iterations);\n+    assertEquals(2, source.calls.size());\n+    assertEquals(\"token\", source.calls.get(1).getPageToken());\n+  }\n+\n+  @Test\n+  public void testListVersionsPagedIterator() throws FirebaseRemoteConfigException {\n+    ListVersionsResult.VersionsResultBatch result = new ListVersionsResult.VersionsResultBatch(\n+            ImmutableList.of(\n+                    newVersion(\"10\"),\n+                    newVersion(\"11\"),\n+                    newVersion(\"12\")), \"token\");\n+    TestVersionSource source = new TestVersionSource(result);\n+    ListVersionsResult page = new ListVersionsResult.Factory(source).create();\n+    Iterator<Version> versions = page.iterateAll().iterator();\n+    int iterations = 0;\n+    while (versions.hasNext()) {\n+      assertEquals(\"1\" + iterations, versions.next().getVersionNumber());\n+      iterations++;\n+      if (iterations == 3) {\n+        assertEquals(1, source.calls.size());\n+        assertNull(source.calls.get(0));\n+        result = new ListVersionsResult.VersionsResultBatch(\n+                ImmutableList.of(\n+                        newVersion(\"13\"),\n+                        newVersion(\"14\"),\n+                        newVersion(\"15\")), ListVersionsResult.END_OF_LIST);\n+        source.result = result;\n+      }\n+    }\n+\n+    assertEquals(6, iterations);\n+    assertEquals(2, source.calls.size());\n+    assertEquals(\"token\", source.calls.get(1).getPageToken());\n+    assertFalse(versions.hasNext());\n+    try {\n+      versions.next();\n+    } catch (NoSuchElementException e) {\n+      // expected\n+    }\n+  }\n+\n+  @Test\n+  public void testPageWithNoVersions() throws FirebaseRemoteConfigException {\n+    ListVersionsResult.VersionsResultBatch result = new ListVersionsResult.VersionsResultBatch(\n+            ImmutableList.<Version>of(),\n+            ListVersionsResult.END_OF_LIST);\n+    TestVersionSource source = new TestVersionSource(result);\n+    ListVersionsResult page = new ListVersionsResult.Factory(source).create();\n+\n+    assertFalse(page.hasNextPage());\n+    assertEquals(ListVersionsResult.END_OF_LIST, page.getNextPageToken());\n+    assertNull(page.getNextPage());\n+    assertEquals(0, ImmutableList.copyOf(page.getValues()).size());\n+    assertEquals(1, source.calls.size());\n+  }\n+\n+  @Test\n+  public void testIterableWithNoVersions() throws FirebaseRemoteConfigException {\n+    ListVersionsResult.VersionsResultBatch result = new ListVersionsResult.VersionsResultBatch(\n+            ImmutableList.<Version>of(),\n+            ListVersionsResult.END_OF_LIST);\n+    TestVersionSource source = new TestVersionSource(result);\n+    ListVersionsResult page = new ListVersionsResult.Factory(source).create();\n+    for (Version version : page.iterateAll()) {\n+      fail(\"Should not be able to iterate, but got: \" + version);\n+    }\n+\n+    assertEquals(1, source.calls.size());\n+  }\n+\n+  @Test\n+  public void testIteratorWithNoVersions() throws FirebaseRemoteConfigException {\n+    ListVersionsResult.VersionsResultBatch result = new ListVersionsResult.VersionsResultBatch(\n+            ImmutableList.<Version>of(),\n+            ListVersionsResult.END_OF_LIST);\n+    TestVersionSource source = new TestVersionSource(result);\n+\n+    ListVersionsResult page = new ListVersionsResult.Factory(source).create();\n+    Iterator<Version> iterator = page.iterateAll().iterator();\n+    while (iterator.hasNext()) {", "originalCommit": "c965c485539920c3c8584309bbb55cdaf8ee6186", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "415c5151f4753ebd05e0eeb2d4a663689b311c9d", "url": "https://github.com/firebase/firebase-admin-java/commit/415c5151f4753ebd05e0eeb2d4a663689b311c9d", "message": "PR fixes", "committedDate": "2020-12-02T19:37:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1NjQ5MA==", "url": "https://github.com/firebase/firebase-admin-java/pull/498#discussion_r534456490", "bodyText": "Probably belongs in the shared util. I assume there are other places where this is needed.", "author": "hiranya911", "createdAt": "2020-12-02T20:21:35Z", "path": "src/main/java/com/google/firebase/remoteconfig/ListVersionsOptions.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.firebase.remoteconfig;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TimeZone;\n+\n+/**\n+ * A class representing options for Remote Config list versions operation.\n+ */\n+public final class ListVersionsOptions {\n+\n+  private final Integer pageSize;\n+  private final String pageToken;\n+  private final String endVersionNumber;\n+  private final String startTime;\n+  private final String endTime;\n+\n+  private ListVersionsOptions(Builder builder) {\n+    if (builder.pageSize != null) {\n+      checkArgument(builder.pageSize > 0 && builder.pageSize < 301,\n+              \"pageSize must be a number between 1 and 300 (inclusive).\");\n+    }\n+    if (builder.endVersionNumber != null) {\n+      checkArgument(RemoteConfigUtil.isValidVersionNumber(builder.endVersionNumber)\n+                      && (Integer.parseInt(builder.endVersionNumber) > 0),\n+              \"endVersionNumber must be a non-empty string in int64 format and must be\"\n+                      + \" greater than 0.\");\n+    }\n+    this.pageSize = builder.pageSize;\n+    this.pageToken = builder.pageToken;\n+    this.endVersionNumber = builder.endVersionNumber;\n+    this.startTime = builder.startTime;\n+    this.endTime = builder.endTime;\n+  }\n+\n+  Map<String, Object> wrapForTransport() {\n+    Map<String, Object> optionsMap = new HashMap<>();\n+    if (this.pageSize != null) {\n+      optionsMap.put(\"pageSize\", this.pageSize);\n+    }\n+    if (this.pageToken != null) {\n+      optionsMap.put(\"pageToken\", this.pageToken);\n+    }\n+    if (this.endVersionNumber != null) {\n+      optionsMap.put(\"endVersionNumber\", this.endVersionNumber);\n+    }\n+    if (this.startTime != null) {\n+      optionsMap.put(\"startTime\", this.startTime);\n+    }\n+    if (this.endTime != null) {\n+      optionsMap.put(\"endTime\", this.endTime);\n+    }\n+    return optionsMap;\n+  }\n+\n+  String getPageToken() {\n+    return pageToken;\n+  }\n+\n+  /**\n+   * Creates a new {@link ListVersionsOptions.Builder}.\n+   *\n+   * @return A {@link ListVersionsOptions.Builder} instance.\n+   */\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /**\n+   * Creates a new {@code Builder} from the options object.\n+   *\n+   * <p>The new builder is not backed by this object's values; that is, changes made to the new\n+   * builder don't change the values of the origin object.\n+   */\n+  public Builder toBuilder() {\n+    return new Builder(this);\n+  }\n+\n+  public static class Builder {\n+    private Integer pageSize;\n+    private String pageToken;\n+    private String endVersionNumber;\n+    private String startTime;\n+    private String endTime;\n+\n+    private Builder() {}\n+\n+    private Builder(ListVersionsOptions options) {\n+      this.pageSize = options.pageSize;\n+      this.pageToken = options.pageToken;\n+      this.endVersionNumber = options.endVersionNumber;\n+      this.startTime = options.startTime;\n+      this.endTime = options.endTime;\n+    }\n+\n+    /**\n+     * Sets the page size.\n+     *\n+     * @param pageSize The maximum number of items to return per page.\n+     * @return This builder.\n+     */\n+    public Builder setPageSize(int pageSize) {\n+      this.pageSize = pageSize;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the page token.\n+     *\n+     * @param pageToken The {@code nextPageToken} value returned from a previous List request,\n+     *                  if any.\n+     * @return This builder.\n+     */\n+    public Builder setPageToken(String pageToken) {\n+      this.pageToken = pageToken;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the newest version number to include in the results.\n+     *\n+     * @param endVersionNumber Specify the newest version number to include in the results.\n+     *                         If specified, must be greater than zero. Defaults to the newest\n+     *                         version.\n+     * @return This builder.\n+     */\n+    public Builder setEndVersionNumber(String endVersionNumber) {\n+      this.endVersionNumber = endVersionNumber;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the newest version number to include in the results.\n+     *\n+     * @param endVersionNumber Specify the newest version number to include in the results.\n+     *                         If specified, must be greater than zero. Defaults to the newest\n+     *                         version.\n+     * @return This builder.\n+     */\n+    public Builder setEndVersionNumber(long endVersionNumber) {\n+      this.endVersionNumber = String.valueOf(endVersionNumber);;\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the earliest update time to include in the results.\n+     *\n+     * @param startTimeMillis Specify the earliest update time to include in the results.\n+     *                        Any entries updated before this time are omitted.\n+     * @return This builder.\n+     */\n+    public Builder setStartTimeMillis(long startTimeMillis) {\n+      this.startTime = convertToUtcZuluFormat(startTimeMillis);\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the latest update time to include in the results.\n+     *\n+     * @param endTimeMillis Specify the latest update time to include in the results.\n+     *                      Any entries updated on or after this time are omitted.\n+     * @return This builder.\n+     */\n+    public Builder setEndTimeMillis(long endTimeMillis) {\n+      this.endTime = convertToUtcZuluFormat(endTimeMillis);\n+      return this;\n+    }\n+\n+    private String convertToUtcZuluFormat(long millis) {", "originalCommit": "415c5151f4753ebd05e0eeb2d4a663689b311c9d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUxMzU3MA==", "url": "https://github.com/firebase/firebase-admin-java/pull/498#discussion_r534513570", "bodyText": "Good call. Currently, we use it only in ListVersionsOptions. I moved it to Utils anyway to future proof :)", "author": "lahirumaramba", "createdAt": "2020-12-02T22:06:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1NjQ5MA=="}], "type": "inlineReview"}, {"oid": "a18da913fd1959836fa6871b43c365a039607463", "url": "https://github.com/firebase/firebase-admin-java/commit/a18da913fd1959836fa6871b43c365a039607463", "message": "Move convertToUtcZuluFormat to utils class", "committedDate": "2020-12-02T22:04:45Z", "type": "commit"}]}