{"pr_number": 2829, "pr_title": "[GEOT-6526] Add percentages to Classifiers", "pr_createdAt": "2020-03-06T13:41:08Z", "pr_url": "https://github.com/geotools/geotools/pull/2829", "timeline": [{"oid": "c6a8bc56dfe7594f0f9a02590da40e4ec04a3635", "url": "https://github.com/geotools/geotools/commit/c6a8bc56dfe7594f0f9a02590da40e4ec04a3635", "message": "[GEOT-6526] Add percentages to Classifiers", "committedDate": "2020-03-08T11:54:49Z", "type": "forcePushed"}, {"oid": "8bb606b0a897c91e771fbb88980c89685d02474f", "url": "https://github.com/geotools/geotools/commit/8bb606b0a897c91e771fbb88980c89685d02474f", "message": "[GEOT-6526] Add percentages to Classifiers", "committedDate": "2020-03-09T07:33:23Z", "type": "forcePushed"}, {"oid": "5323c53bc3572b9e1b095bf43a0d7dea64e015f8", "url": "https://github.com/geotools/geotools/commit/5323c53bc3572b9e1b095bf43a0d7dea64e015f8", "message": "[GEOT-6526] Add percentages to Classifiers", "committedDate": "2020-03-09T12:10:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyODg0NQ==", "url": "https://github.com/geotools/geotools/pull/2829#discussion_r390228845", "bodyText": "Since it's a derived value (not a bean property), call it just \"percertanges\", or \"percentagesEnabled\" it reads better in an if. Also, please add javadoc.", "author": "aaime", "createdAt": "2020-03-10T10:45:19Z", "path": "modules/library/main/src/main/java/org/geotools/filter/function/AbstractQuantityClassificationFunction.java", "diffHunk": "@@ -166,4 +170,14 @@ public Object evaluate(Object feature) {\n         }\n         return calculate((SimpleFeatureCollection) feature);\n     }\n+\n+    private double[] calculatePercentages(List[] bin, int totalSize) {\n+        double[] percentages = new double[bin.length];\n+        for (int i = 0; i < bin.length; i++) {\n+            percentages[i] = ((double) bin[i].size() / (double) totalSize) * 100;\n+        }\n+        return percentages;\n+    }\n+\n+    protected abstract boolean isPercentages();", "originalCommit": "5323c53bc3572b9e1b095bf43a0d7dea64e015f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4NTkyNg==", "url": "https://github.com/geotools/geotools/pull/2829#discussion_r391085926", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-03-11T16:07:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyODg0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMjQ3Ng==", "url": "https://github.com/geotools/geotools/pull/2829#discussion_r390232476", "bodyText": "Functions work in a positional fashion, one cannot have two optional parameters at the end (pretty much like Java). Inputs cannot be recognized by type as they can come from an encoding that does not have types, but just strings (e.g, XML). At best, I would suggest to make areaFunction specification mandatory when percentages is used... it's still a break but can be documented. So the function would accept either:\n\nTwo parameters, value and classes\nThree parameters, values, classes, area function\nFour parameters, values, classes, area function, and percentages", "author": "aaime", "createdAt": "2020-03-10T10:52:10Z", "path": "modules/library/main/src/main/java/org/geotools/filter/function/EqualAreaFunction.java", "diffHunk": "@@ -43,7 +44,8 @@\n                     RangedClassifier.class,\n                     parameter(\"value\", Double.class),\n                     parameter(\"classes\", Integer.class),\n-                    parameter(\"areaFunction\", Double.class, 0, 1));\n+                    parameter(\"areaFunction\", Double.class, 0, 1),\n+                    parameter(\"percentages\", Boolean.class, 0, 1));", "originalCommit": "5323c53bc3572b9e1b095bf43a0d7dea64e015f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4NzA4MQ==", "url": "https://github.com/geotools/geotools/pull/2829#discussion_r391087081", "bodyText": "now function is checking just for position 4, so that if percentages is provided without having passed third parameter also it will be ingnored", "author": "taba90", "createdAt": "2020-03-11T16:09:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMjQ3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTExOTg4OQ==", "url": "https://github.com/geotools/geotools/pull/2829#discussion_r391119889", "bodyText": "Should work.", "author": "aaime", "createdAt": "2020-03-11T16:57:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMjQ3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMzk4MA==", "url": "https://github.com/geotools/geotools/pull/2829#discussion_r390233980", "bodyText": "Please add javadocs for both getter and setter", "author": "aaime", "createdAt": "2020-03-10T10:55:02Z", "path": "modules/library/main/src/main/java/org/geotools/filter/function/Classifier.java", "diffHunk": "@@ -61,4 +63,12 @@ public int classify(org.opengis.filter.expression.Expression expr, Object featur\n \n     /** @return the number of bins */\n     public abstract int getSize();\n+\n+    public double[] getPercentages() {", "originalCommit": "5323c53bc3572b9e1b095bf43a0d7dea64e015f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4NzIxMQ==", "url": "https://github.com/geotools/geotools/pull/2829#discussion_r391087211", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-03-11T16:09:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMzk4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNjc5MQ==", "url": "https://github.com/geotools/geotools/pull/2829#discussion_r390236791", "bodyText": "Overloads another method with the same name, but does it do the same thing?", "author": "aaime", "createdAt": "2020-03-10T11:00:07Z", "path": "modules/library/main/src/main/java/org/geotools/filter/function/EqualIntervalFunction.java", "diffHunk": "@@ -220,4 +242,66 @@ public RangedClassifier evaluate(Object object) {\n         }\n         return calculate((SimpleFeatureCollection) object);\n     }\n+\n+    private double[] getNotNumericalPercentages(int classNum, int totalSize) {\n+        int lastBigBin = totalSize % classNum;\n+        if (lastBigBin != 0) lastBigBin--;\n+        double classMembers = (double) totalSize / classNum;\n+        double[] percentages = new double[classNum];\n+        for (int i = 0; i < classNum; i++) {\n+            percentages[i] = (classMembers / totalSize) * 100;\n+            if (lastBigBin != 0 && lastBigBin == i) {\n+                classMembers--;\n+            }\n+        }\n+        return percentages;\n+    }\n+\n+    private double[] getNumericalPercentages(\n+            int classNum, RangedClassifier classifier, FeatureCollection collection)\n+            throws IOException {\n+        double max = ((Number) classifier.getMax(classifier.getSize() - 1)).doubleValue();\n+        double min = ((Number) classifier.getMin(0)).doubleValue();\n+        double classWidth = (max - min) / classNum;\n+        Subtract subtract = FF.subtract(getParameters().get(0), FF.literal(min));\n+        Divide divide = FF.divide(subtract, FF.literal(classWidth));\n+\n+        GroupByVisitor groupBy =\n+                new GroupByVisitor(\n+                        Aggregate.COUNT, getParameters().get(0), Arrays.asList(divide), null);\n+        collection.accepts(groupBy, null);\n+        Object[] result = groupBy.getResult().toArray();\n+        return calculateNumerical(result, classifier, collection.size(), classNum, min, classWidth);\n+    }\n+\n+    private double[] calculateNumerical(", "originalCommit": "5323c53bc3572b9e1b095bf43a0d7dea64e015f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4NzMwNA==", "url": "https://github.com/geotools/geotools/pull/2829#discussion_r391087304", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-03-11T16:09:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNjc5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MDQxMQ==", "url": "https://github.com/geotools/geotools/pull/2829#discussion_r390240411", "bodyText": "Normally I would get the result as a map, why turn it into an array? The way the result is given also seems bizarre, is it an array of arrays?", "author": "aaime", "createdAt": "2020-03-10T11:07:35Z", "path": "modules/library/main/src/main/java/org/geotools/filter/function/EqualIntervalFunction.java", "diffHunk": "@@ -220,4 +242,66 @@ public RangedClassifier evaluate(Object object) {\n         }\n         return calculate((SimpleFeatureCollection) object);\n     }\n+\n+    private double[] getNotNumericalPercentages(int classNum, int totalSize) {\n+        int lastBigBin = totalSize % classNum;\n+        if (lastBigBin != 0) lastBigBin--;\n+        double classMembers = (double) totalSize / classNum;\n+        double[] percentages = new double[classNum];\n+        for (int i = 0; i < classNum; i++) {\n+            percentages[i] = (classMembers / totalSize) * 100;\n+            if (lastBigBin != 0 && lastBigBin == i) {\n+                classMembers--;\n+            }\n+        }\n+        return percentages;\n+    }\n+\n+    private double[] getNumericalPercentages(\n+            int classNum, RangedClassifier classifier, FeatureCollection collection)\n+            throws IOException {\n+        double max = ((Number) classifier.getMax(classifier.getSize() - 1)).doubleValue();\n+        double min = ((Number) classifier.getMin(0)).doubleValue();\n+        double classWidth = (max - min) / classNum;\n+        Subtract subtract = FF.subtract(getParameters().get(0), FF.literal(min));\n+        Divide divide = FF.divide(subtract, FF.literal(classWidth));\n+\n+        GroupByVisitor groupBy =\n+                new GroupByVisitor(\n+                        Aggregate.COUNT, getParameters().get(0), Arrays.asList(divide), null);\n+        collection.accepts(groupBy, null);\n+        Object[] result = groupBy.getResult().toArray();", "originalCommit": "5323c53bc3572b9e1b095bf43a0d7dea64e015f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4NzU1Mw==", "url": "https://github.com/geotools/geotools/pull/2829#discussion_r391087553", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-03-11T16:09:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MDQxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MTA5OQ==", "url": "https://github.com/geotools/geotools/pull/2829#discussion_r390241099", "bodyText": "I have to admin, no clue as to what it's happening here... I would have gone to get a map as a result, each key would have been the index of the class and each value the count, simple loop over them with a cast for the count, done... or not?", "author": "aaime", "createdAt": "2020-03-10T11:08:57Z", "path": "modules/library/main/src/main/java/org/geotools/filter/function/EqualIntervalFunction.java", "diffHunk": "@@ -220,4 +242,66 @@ public RangedClassifier evaluate(Object object) {\n         }\n         return calculate((SimpleFeatureCollection) object);\n     }\n+\n+    private double[] getNotNumericalPercentages(int classNum, int totalSize) {\n+        int lastBigBin = totalSize % classNum;\n+        if (lastBigBin != 0) lastBigBin--;\n+        double classMembers = (double) totalSize / classNum;\n+        double[] percentages = new double[classNum];\n+        for (int i = 0; i < classNum; i++) {\n+            percentages[i] = (classMembers / totalSize) * 100;\n+            if (lastBigBin != 0 && lastBigBin == i) {\n+                classMembers--;\n+            }\n+        }\n+        return percentages;\n+    }\n+\n+    private double[] getNumericalPercentages(\n+            int classNum, RangedClassifier classifier, FeatureCollection collection)\n+            throws IOException {\n+        double max = ((Number) classifier.getMax(classifier.getSize() - 1)).doubleValue();\n+        double min = ((Number) classifier.getMin(0)).doubleValue();\n+        double classWidth = (max - min) / classNum;\n+        Subtract subtract = FF.subtract(getParameters().get(0), FF.literal(min));\n+        Divide divide = FF.divide(subtract, FF.literal(classWidth));\n+\n+        GroupByVisitor groupBy =\n+                new GroupByVisitor(\n+                        Aggregate.COUNT, getParameters().get(0), Arrays.asList(divide), null);\n+        collection.accepts(groupBy, null);\n+        Object[] result = groupBy.getResult().toArray();\n+        return calculateNumerical(result, classifier, collection.size(), classNum, min, classWidth);\n+    }\n+\n+    private double[] calculateNumerical(\n+            Object[] queryResult,\n+            RangedClassifier classifier,\n+            int totalSize,\n+            int classNum,\n+            double min,\n+            double classWidth) {\n+        double[] percentages = new double[classNum];", "originalCommit": "5323c53bc3572b9e1b095bf43a0d7dea64e015f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4NzcwOQ==", "url": "https://github.com/geotools/geotools/pull/2829#discussion_r391087709", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-03-11T16:10:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MTA5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MjQyMg==", "url": "https://github.com/geotools/geotools/pull/2829#discussion_r390242422", "bodyText": "Does not seem to be used? Reminder, a quantile function tries its best to create classes with the same count, but data might disagree and the even distribution might not happen. The percentage should report the actual class distribution, not the desired one.", "author": "aaime", "createdAt": "2020-03-10T11:11:46Z", "path": "modules/library/main/src/main/java/org/geotools/filter/function/QuantileFunction.java", "diffHunk": "@@ -44,4 +46,14 @@ protected QuantileListVisitor getListVisitor() {\n         // use a visitor to find the values in each bin\n         return new QuantileListVisitor(getParameters().get(0), getClasses());\n     }\n+\n+    @Override\n+    protected boolean isPercentages() {", "originalCommit": "5323c53bc3572b9e1b095bf43a0d7dea64e015f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4ODczMQ==", "url": "https://github.com/geotools/geotools/pull/2829#discussion_r391088731", "bodyText": "the method gets used by the abstract class. Regarding the uneven distribution tests have been added", "author": "taba90", "createdAt": "2020-03-11T16:11:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MjQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MjY0Mw==", "url": "https://github.com/geotools/geotools/pull/2829#discussion_r390242643", "bodyText": "Same observation as the other group by approach.", "author": "aaime", "createdAt": "2020-03-10T11:12:16Z", "path": "modules/library/main/src/main/java/org/geotools/filter/function/UniqueIntervalFunction.java", "diffHunk": "@@ -137,4 +146,38 @@ public Object evaluate(Object feature) {\n         }\n         return calculate((SimpleFeatureCollection) feature);\n     }\n+\n+    private double[] getPercentages(FeatureCollection collection, Set[] values) throws IOException {\n+        Expression prop = getParameters().get(0);\n+        GroupByVisitor groupBy =\n+                new GroupByVisitor(Aggregate.COUNT, prop, Arrays.asList(prop), null);\n+        collection.accepts(groupBy, null);\n+        Object[] result = groupBy.getResult().toArray();", "originalCommit": "5323c53bc3572b9e1b095bf43a0d7dea64e015f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4ODgyMg==", "url": "https://github.com/geotools/geotools/pull/2829#discussion_r391088822", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-03-11T16:11:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MjY0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MzA2OA==", "url": "https://github.com/geotools/geotools/pull/2829#discussion_r390243068", "bodyText": "Please add a test for unequally distributed classes, due to the data itself.", "author": "aaime", "createdAt": "2020-03-10T11:13:13Z", "path": "modules/library/main/src/test/java/org/geotools/filter/function/QuantileFunctionTest.java", "diffHunk": "@@ -235,4 +236,19 @@ public void testConstantValuesString() {\n         assertEquals(1, classifier.getValues(0).size());\n         assertEquals(\"abc\", classifier.getValues(0).iterator().next());\n     }\n+\n+    @Test\n+    public void testEvaluateWithPercentages() throws Exception {", "originalCommit": "5323c53bc3572b9e1b095bf43a0d7dea64e015f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4ODk3MA==", "url": "https://github.com/geotools/geotools/pull/2829#discussion_r391088970", "bodyText": "tests added", "author": "taba90", "createdAt": "2020-03-11T16:11:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MzA2OA=="}], "type": "inlineReview"}, {"oid": "8f5fd5c7ba1829c123abd28488bd5aa9d3e665a7", "url": "https://github.com/geotools/geotools/commit/8f5fd5c7ba1829c123abd28488bd5aa9d3e665a7", "message": "[GEOT-6526] Add percentages to Classifiers", "committedDate": "2020-03-11T16:03:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEyMjkzNg==", "url": "https://github.com/geotools/geotools/pull/2829#discussion_r391122936", "bodyText": "So the treeset is used to make sure the classes are ordered from low to high right? And then collect the percentages in the right order? I'd add a comment about it.", "author": "aaime", "createdAt": "2020-03-11T17:01:37Z", "path": "modules/library/main/src/main/java/org/geotools/filter/function/EqualIntervalFunction.java", "diffHunk": "@@ -220,4 +242,53 @@ public RangedClassifier evaluate(Object object) {\n         }\n         return calculate((SimpleFeatureCollection) object);\n     }\n+\n+    private double[] getNotNumericalPercentages(int classNum, int totalSize) {\n+        int lastBigBin = totalSize % classNum;\n+        if (lastBigBin != 0) lastBigBin--;\n+        double classMembers = (double) totalSize / classNum;\n+        double[] percentages = new double[classNum];\n+        for (int i = 0; i < classNum; i++) {\n+            percentages[i] = (classMembers / totalSize) * 100;\n+            if (lastBigBin != 0 && lastBigBin == i) {\n+                classMembers--;\n+            }\n+        }\n+        return percentages;\n+    }\n+\n+    private double[] getNumericalPercentages(\n+            int classNum, RangedClassifier classifier, FeatureCollection collection)\n+            throws IOException {\n+        double max = ((Number) classifier.getMax(classifier.getSize() - 1)).doubleValue();\n+        double min = ((Number) classifier.getMin(0)).doubleValue();\n+        double classWidth = (max - min) / classNum;\n+        Subtract subtract = FF.subtract(getParameters().get(0), FF.literal(min));\n+        Divide divide = FF.divide(subtract, FF.literal(classWidth));\n+        Function abs = FF.function(\"abs\", divide);\n+        GroupByVisitor groupBy =\n+                new GroupByVisitor(\n+                        Aggregate.COUNT, getParameters().get(0), Arrays.asList(abs), null);\n+        collection.accepts(groupBy, null);\n+        Map<List<Integer>, Integer> result = groupBy.getResult().toMap();\n+        return calculateNumericalPercentages(result, collection.size(), classNum);\n+    }\n+\n+    private double[] calculateNumericalPercentages(\n+            Map<List<Integer>, Integer> queryResult, int totalSize, int classNum) {\n+        double[] percentages = new double[classNum];\n+        Set<Integer> keys =", "originalCommit": "8f5fd5c7ba1829c123abd28488bd5aa9d3e665a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0MzMxMQ==", "url": "https://github.com/geotools/geotools/pull/2829#discussion_r391143311", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-03-11T17:31:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEyMjkzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEyOTk2MA==", "url": "https://github.com/geotools/geotools/pull/2829#discussion_r391129960", "bodyText": "Same as in the other PRs, can you have a test method run one test scenario instead of a bunch mixed toghether?", "author": "aaime", "createdAt": "2020-03-11T17:12:26Z", "path": "modules/library/main/src/test/java/org/geotools/filter/function/QuantileFunctionTest.java", "diffHunk": "@@ -235,4 +237,89 @@ public void testConstantValuesString() {\n         assertEquals(1, classifier.getValues(0).size());\n         assertEquals(\"abc\", classifier.getValues(0).iterator().next());\n     }\n+\n+    @Test\n+    public void testEvaluateWithPercentages() throws Exception {\n+        // numerical\n+        Literal classes = ff.literal(2);\n+        PropertyName exp = ff.property(\"foo\");\n+        Function func = ff.function(\"Quantile\", exp, classes, ff.literal(true));\n+\n+        Object value = func.evaluate(featureCollection);\n+        assertTrue(value instanceof RangedClassifier);\n+        RangedClassifier ranged = (RangedClassifier) value;\n+        double[] percentages = ranged.getPercentages();\n+        assertEquals(percentages.length, 2);\n+        assertEquals(percentages[0], 50.0);\n+        assertEquals(percentages[1], 50.0);\n+\n+        // not numerical\n+        SimpleFeatureType dataType =\n+                DataUtilities.createType(\"classification.test1\", \"id:0,value:String\");\n+        String sVal[] = new String[] {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"};\n+        SimpleFeature[] myfeatures = new SimpleFeature[sVal.length];\n+        for (int i = 0; i < sVal.length; i++) {\n+            myfeatures[i] =\n+                    SimpleFeatureBuilder.build(\n+                            dataType,\n+                            new Object[] {Integer.valueOf(i + 1), sVal[i]},\n+                            \"classification.test1\" + (i + 1));\n+        }\n+\n+        SimpleFeatureCollection myFeatureCollection = DataUtilities.collection(myfeatures);\n+        org.opengis.filter.expression.Expression func2 =\n+                ff.function(\"Quantile\", ff.property(\"value\"), ff.literal(6), ff.literal(true));\n+\n+        Object value2 = func2.evaluate(myFeatureCollection);\n+        // assertTrue(value2 instanceof RangedClassifier);\n+        Classifier ranged2 = (Classifier) value2;\n+        double[] percentages2 = ranged2.getPercentages();\n+        assertEquals(percentages2.length, 6);\n+        for (int i = 0; i < percentages2.length; i++) {\n+            assertEquals(Math.floor(percentages2[i]), 16.0);\n+        }\n+    }\n+\n+    public void testPercentagesConsistencyWithClasses() throws SchemaException {\n+        // create a feature collection with five features values 1-5\n+        SimpleFeatureType dataType =\n+                DataUtilities.createType(\"classification.test1\", \"id:0,value:int\");\n+        int iVal[] = new int[] {1, 1, 2, 3, 4, 5};\n+        SimpleFeature[] myfeatures = new SimpleFeature[iVal.length];\n+        for (int i = 0; i < iVal.length; i++) {\n+            myfeatures[i] =\n+                    SimpleFeatureBuilder.build(\n+                            dataType,\n+                            new Object[] {Integer.valueOf(i + 1), Integer.valueOf(iVal[i])},\n+                            \"classification.test1\" + (i + 1));\n+        }\n+\n+        // test unequally distributed classes\n+        SimpleFeatureCollection myFeatureCollection = DataUtilities.collection(myfeatures);\n+        org.opengis.filter.expression.Expression func2 =\n+                ff.function(\"Quantile\", ff.property(\"value\"), ff.literal(5), ff.literal(true));\n+\n+        Object value2 = func2.evaluate(myFeatureCollection);\n+        assertTrue(value2 instanceof RangedClassifier);\n+        RangedClassifier ranged2 = (RangedClassifier) value2;\n+        double[] percentages2 = ranged2.getPercentages();\n+        assertEquals(percentages2.length, 5);\n+        assertEquals(Math.floor(percentages2[0]), 33.0);\n+        for (int i = 1; i < percentages2.length; i++) {\n+            assertEquals(Math.floor(percentages2[i]), 16.0);\n+        }\n+\n+        // test requested more classes than breaks", "originalCommit": "8f5fd5c7ba1829c123abd28488bd5aa9d3e665a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0MzE3MA==", "url": "https://github.com/geotools/geotools/pull/2829#discussion_r391143170", "bodyText": "fixed", "author": "taba90", "createdAt": "2020-03-11T17:31:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEyOTk2MA=="}], "type": "inlineReview"}, {"oid": "fe0271a2fdd445c013a03eaeb27add3fdcbce2d7", "url": "https://github.com/geotools/geotools/commit/fe0271a2fdd445c013a03eaeb27add3fdcbce2d7", "message": "[GEOT-6526] Add percentages to Classifiers", "committedDate": "2020-03-11T17:30:33Z", "type": "commit"}, {"oid": "fe0271a2fdd445c013a03eaeb27add3fdcbce2d7", "url": "https://github.com/geotools/geotools/commit/fe0271a2fdd445c013a03eaeb27add3fdcbce2d7", "message": "[GEOT-6526] Add percentages to Classifiers", "committedDate": "2020-03-11T17:30:33Z", "type": "forcePushed"}]}