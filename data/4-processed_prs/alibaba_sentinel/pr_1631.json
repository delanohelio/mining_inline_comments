{"pr_number": 1631, "pr_title": "[feature]finish cluster concurrent flow control rule checker", "pr_createdAt": "2020-07-27T08:51:06Z", "pr_url": "https://github.com/alibaba/Sentinel/pull/1631", "timeline": [{"oid": "ab867b31c0e7b996ed8df0590ab3f051b2915f4e", "url": "https://github.com/alibaba/Sentinel/commit/ab867b31c0e7b996ed8df0590ab3f051b2915f4e", "message": "fix test\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>", "committedDate": "2020-07-27T09:11:37Z", "type": "forcePushed"}, {"oid": "6d8cc45540663aa3a93e1b1a267124730c1c3128", "url": "https://github.com/alibaba/Sentinel/commit/6d8cc45540663aa3a93e1b1a267124730c1c3128", "message": "fix test\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>", "committedDate": "2020-07-27T09:21:58Z", "type": "forcePushed"}, {"oid": "d74c0bc7747e25fcdd985f03993920ba6e4a3c3f", "url": "https://github.com/alibaba/Sentinel/commit/d74c0bc7747e25fcdd985f03993920ba6e4a3c3f", "message": "s\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>", "committedDate": "2020-07-27T09:41:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MTQwOA==", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464171408", "bodyText": "Why clientAddress is needed here? The token server could get the remote address from Netty context.\nAnd maybe this can be merged in requestToken?", "author": "sczyh30", "createdAt": "2020-08-03T03:04:39Z", "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/cluster/TokenService.java", "diffHunk": "@@ -44,4 +44,21 @@\n      * @return result of the token request\n      */\n     TokenResult requestParamToken(Long ruleId, int acquireCount, Collection<Object> params);\n+\n+    /**\n+     * Request acquire concurrent tokens from remote token server.\n+     *\n+     * @param clientAddress the address of the request belong.\n+     * @param ruleId ruleId the unique rule ID\n+     * @param acquireCount token count to acquire\n+     * @return result of the token request\n+     */\n+    TokenResult requestConcurrentToken(String clientAddress,Long ruleId,int acquireCount);", "originalCommit": "0ddd0e5eb32e9083476863eaefcd35ac4a5d2e13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3NzA3OQ==", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464177079", "bodyText": "\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7netty\u83b7\u5f97\u5730\u5740\uff0cTokenService\u4f1a\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u8c03\u7528\uff0c\u4e00\u4e2a\u662fserver\u8c03\u7528\uff08\u672c\u673a\u662fserver\uff09\uff0c\u4e00\u79cd\u662f\u901a\u8fc7client\u7aef\u53d1\u8d77netty\u8bf7\u8c03\u7528\uff08\u672c\u673a\u662fclient\uff09\u3002\u5728\u6211\u7684\u8bbe\u8ba1\u4e2d\uff0c\u5982\u679c\u662fserver\u7aef\u8fdb\u884c\u8c03\u7528\uff0c\u76f4\u63a5\u4ece\u7cfb\u7edf\u4f20\u5165\u672c\u673aip\uff0c\u5982\u679cclient\u7aef\uff0c\u8fd9\u91cc\u4f1a\u4f20\u5165null\uff0c\u901a\u8fc7netty\u5728server\u7aef\u83b7\u53d6ip\u5730\u5740\uff1b\u4e24\u79cd\u65b9\u5f0f\u90fd\u4e0d\u4f1a\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u8fd9\u4e2a\u5730\u5740\u3002\u4e4b\u6240\u4ee5\u4f1a\u52a0\u5165\u8fd9\u4e2a\u53c2\u6570\u662f\u4e3a\u4e86\u517c\u5bb9\u73b0\u6709\u7684\u8c03\u7528\u5f62\u5f0f\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u63a5\u53e3\u4f1a\u6709\u4e09\u4e2a\u5b9e\u73b0\uff0c\u5206\u522b\u662fDefaultEmbeddedTokenServer\uff08\u76f4\u63a5\u4f20\u5165\u672c\u673aip\uff09\uff0cDefaultClusterTokenClient\uff08\u4f20\u5165null\uff09\uff0cDefaultTokenService\uff08\u524d\u9762\u4e24\u4e2a\u90fd\u4f1a\u6c47\u5165\u5230\u8fd9\u91cc\uff0cDefaultClusterTokenClient\u4f1a\u4ecenetty\u83b7\u53d6\uff09\uff0c\u5982\u679c\u53bb\u6389\u8fd9\u4e2a\u53c2\u6570DefaultEmbeddedTokenServer\uff0cDefaultClusterTokenClient\u6ca1\u6709\u5f71\u54cd\uff0c\u4f46\u662fDefaultTokenService\u4e5f\u8981\u53bb\u6389\u8fd9\u4e2a\u53c2\u6570\uff0c\u65e0\u6cd5\u83b7\u53d6\u5730\u5740\u3002\u6ca1\u529e\u6cd5\u6cbf\u7528\u4ee5\u524d\u7684\u63a5\u53e3\u3002@sczyh30", "author": "yunfeiyanggzq", "createdAt": "2020-08-03T03:32:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MTQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3ODUzMA==", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464178530", "bodyText": "\u6211\u89c9\u5f97\u662f\u4e0d\u80fd\u548crequestToken\u5408\u5e76\u7684\uff0c\u56e0\u4e3a\u6211\u8fd9\u91cc\u9700\u8981\u4f20\u5165\u4e00\u4e2atoken\u6240\u5c5eclient\u7684\u5730\u5740\u4fe1\u606f\uff0c\u591a\u4e86\u4e00\u4e2a\u53c2\u6570\uff0c\u867d\u7136\u8fd9\u4e2a\u5730\u5740\u4fe1\u606f\u662f\u4e0d\u4f1a\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u7684\u3002", "author": "yunfeiyanggzq", "createdAt": "2020-08-03T03:39:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MTQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3OTEwMg==", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464179102", "bodyText": "@RequestType(ClusterConstants.MSG_TYPE_CONCURRENT_FLOW_ACQUIRE)\npublic class ConcurrentFlowRequestAcquireProcessor implements RequestProcessor<ConcurrentFlowAcquireRequestData, ConcurrentFlowAcquireResponseData> {\n    @Override\n    public ClusterResponse processRequest(ChannelHandlerContext ctx, ClusterRequest<ConcurrentFlowAcquireRequestData> request) {\n        TokenService tokenService = TokenServiceProvider.getService();\n        long flowId = request.getData().getFlowId();\n        int count = request.getData().getCount();\n        String clientAddress = getRemoteAddress(ctx);\n        // \u8fd9\u91cc\u9700\u8981\u4f20\u5165\u4e00\u4e2a\u5730\u5740\u4fe1\u606f\uff0c\n        TokenResult result = tokenService.requestConcurrentToken(clientAddress, flowId, count);\n        return toResponse(result, request);\n    }\n\n\u8fd9\u662f\u901a\u8fc7netty\u83b7\u53d6\u5730\u5740\u7684\u4ee3\u7801\uff0c\u591a\u4e86\u8fd9\u6837\u4e00\u4e2a\u53c2\u6570\u4e3b\u8981\u8fd8\u662f\u517c\u5bb9\u73b0\u5728\u7684\u8bbe\u8ba1\u6a21\u5f0f\u3002\u4e0b\u9762\u662f\u666e\u901aqps\u7684processor\u4ee3\u7801\n@RequestType(ClusterConstants.MSG_TYPE_FLOW)\npublic class FlowRequestProcessor implements RequestProcessor<FlowRequestData, FlowTokenResponseData> {\n\n    @Override\n    public ClusterResponse<FlowTokenResponseData> processRequest(ChannelHandlerContext ctx,ClusterRequest<FlowRequestData> request) {\n        TokenService tokenService = TokenServiceProvider.getService();\n\n        long flowId = request.getData().getFlowId();\n        int count = request.getData().getCount();\n        boolean prioritized = request.getData().isPriority();\n\n        TokenResult result = tokenService.requestToken(flowId, count, prioritized);\n        return toResponse(result, request);\n    }\n\n\n\u4e3b\u8981\u8fd8\u662f\u4e3a\u4e86\u517c\u5bb9", "author": "yunfeiyanggzq", "createdAt": "2020-08-03T03:42:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MTQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkyMTExOQ==", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464921119", "bodyText": "i will make it better in the next pr", "author": "yunfeiyanggzq", "createdAt": "2020-08-04T09:26:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MTQwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3MjkyMA==", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464772920", "bodyText": "We may need to pay attention to the memory and GC footprint when there are large amount of requests coming.", "author": "sczyh30", "createdAt": "2020-08-04T03:10:56Z", "path": "sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/ConcurrentClusterFlowChecker.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.cluster.flow;\n+\n+import com.alibaba.csp.sentinel.cluster.TokenResult;\n+import com.alibaba.csp.sentinel.cluster.TokenResultStatus;\n+import com.alibaba.csp.sentinel.cluster.flow.rule.ClusterFlowRuleManager;\n+import com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent.CurrentConcurrencyManager;\n+import com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent.TokenCacheNode;\n+import com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent.TokenCacheNodeManager;\n+import com.alibaba.csp.sentinel.cluster.server.log.ClusterServerStatLogUtil;\n+import com.alibaba.csp.sentinel.log.RecordLog;\n+import com.alibaba.csp.sentinel.slots.block.ClusterRuleConstant;\n+import com.alibaba.csp.sentinel.slots.block.flow.FlowRule;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * @author yunfeiyanggzq\n+ */\n+final public class ConcurrentClusterFlowChecker {\n+\n+    public static double calcGlobalThreshold(FlowRule rule) {\n+        double count = rule.getCount();\n+        switch (rule.getClusterConfig().getThresholdType()) {\n+            case ClusterRuleConstant.FLOW_THRESHOLD_GLOBAL:\n+                return count;\n+            case ClusterRuleConstant.FLOW_THRESHOLD_AVG_LOCAL:\n+            default:\n+                int connectedCount = ClusterFlowRuleManager.getConnectedCount(rule.getClusterConfig().getFlowId());\n+                return count * connectedCount;\n+        }\n+    }\n+\n+    public static TokenResult acquireConcurrentToken(/*@Valid*/ String clientAddress,FlowRule rule, int acquireCount) {\n+        long flowId = rule.getClusterConfig().getFlowId();\n+        AtomicInteger nowCalls = CurrentConcurrencyManager.get(flowId);\n+        if (nowCalls == null) {\n+            RecordLog.warn(\"[ConcurrentClusterFlowChecker] Fail to get nowCalls by flowId<{}>\", flowId);\n+            return new TokenResult(TokenResultStatus.FAIL);\n+        }\n+\n+        // check before enter the lock to improve the efficiency\n+        if (nowCalls.get() + acquireCount > calcGlobalThreshold(rule)) {\n+            ClusterServerStatLogUtil.log(\"concurrent|block|\" + flowId, acquireCount);\n+            return new TokenResult(TokenResultStatus.BLOCKED);\n+        }\n+\n+        // ensure the atomicity of operations\n+        // lock different nowCalls to improve the efficiency\n+        synchronized (nowCalls) {\n+            // check again whether the request can pass.\n+            if (nowCalls.get() + acquireCount > calcGlobalThreshold(rule)) {\n+                ClusterServerStatLogUtil.log(\"concurrent|block|\" + flowId, acquireCount);\n+                return new TokenResult(TokenResultStatus.BLOCKED);\n+            } else {\n+                nowCalls.getAndAdd(acquireCount);\n+            }\n+        }\n+        ClusterServerStatLogUtil.log(\"concurrent|pass|\" + flowId, acquireCount);\n+        TokenCacheNode node = TokenCacheNode.generateTokenCacheNode(rule, acquireCount, clientAddress);", "originalCommit": "0ddd0e5eb32e9083476863eaefcd35ac4a5d2e13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkxNTM1Mg==", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464915352", "bodyText": "the max memory used is decided by rules*maxConcurrency, I think memory used is controllable.every token information is small and the token can be replaced fastly during the process of acquiring and releasing, there may be some young gc in the case you mention, I think it can be acceptable", "author": "yunfeiyanggzq", "createdAt": "2020-08-04T09:16:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3MjkyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkyMDU4Ng==", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464920586", "bodyText": "We may provide benchmark of the scenario. Frequent YGC may need optimizing.", "author": "sczyh30", "createdAt": "2020-08-04T09:25:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3MjkyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkyMzExMQ==", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464923111", "bodyText": "I will do it, Thanks !", "author": "yunfeiyanggzq", "createdAt": "2020-08-04T09:30:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3MjkyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyMDIyNQ==", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r465420225", "bodyText": "Because the process is too short, so the image is not statistically accurate.\n\n\nthe code is as follows:\n       @Before\n    public void setUp() {\n        FlowRule rule = new FlowRule();\n        ClusterFlowConfig config = new ClusterFlowConfig();\n        config.setResourceTimeout(500);\n        config.setClientOfflineTime(1000);\n        config.setFlowId(111L);\n        config.setThresholdType(ClusterRuleConstant.FLOW_THRESHOLD_GLOBAL);\n        rule.setClusterConfig(config);\n        rule.setClusterMode(true);\n        rule.setCount(1000);\n        rule.setResource(\"test\");\n        rule.setGrade(RuleConstant.FLOW_GRADE_THREAD);\n        ArrayList<FlowRule> rules = new ArrayList<>();\n        rules.add(rule);\n        ClusterFlowRuleManager.registerPropertyIfAbsent(\"1-name\");\n        ClusterFlowRuleManager.loadRules(\"1-name\", rules);\n    }\n   \n   @Test\n    public void testConcurrentAcquireAndRelease() throws InterruptedException {\n        setCurrentMillis(System.currentTimeMillis());\n        final FlowRule rule = ClusterFlowRuleManager.getFlowRuleById(111L);\n        final CountDownLatch countDownLatch = new CountDownLatch(1000000);\n        ExecutorService pool = Executors.newFixedThreadPool(100);\n        final AtomicInteger success=new AtomicInteger(0);\n        for (long i = 0; i < 1000000; i++) {\n            Runnable task = new Runnable() {\n                @Override\n                public void run() {\n                    assert rule != null;\n                    TokenResult result = ConcurrentClusterFlowChecker.acquireConcurrentToken(\"127.0.0.1\", rule, 1);\n                    Assert.assertTrue(\"concurrent control fail\", CurrentConcurrencyManager.get(111L).get() <= rule.getCount());\n                    if (result.getStatus() == TokenResultStatus.OK) {\n                        success.incrementAndGet();\n                        ConcurrentClusterFlowChecker.releaseConcurrentToken(result.getTokenId());\n                    }\n                    countDownLatch.countDown();\n                }\n            };\n            pool.execute(task);\n        }\n        countDownLatch.await();\n        pool.shutdown();\n        System.out.println(success.get()+\"\u6210\u529f\u7684\");\n        assert rule != null;\n        Assert.assertTrue(\"fail to acquire and release token\",\n                CurrentConcurrencyManager.get(rule.getClusterConfig().getFlowId()).get() == 0 && TokenCacheNodeManager.getSize() == 0);\n    }", "author": "yunfeiyanggzq", "createdAt": "2020-08-05T01:32:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3MjkyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwOTk2Nw==", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r475009967", "bodyText": "\u6bcf\u79d2\u8bf7\u6c42\u91cf\u8d8a\u5c0fgc\u8d8a\u5c11", "author": "yunfeiyanggzq", "createdAt": "2020-08-21T23:30:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3MjkyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3NDUzMA==", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464774530", "bodyText": "How about returning boolean instead? And this function does not \"update\" but actually \"add concurrency\".", "author": "sczyh30", "createdAt": "2020-08-04T03:17:24Z", "path": "sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/statistic/concurrent/CurrentConcurrencyManager.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent;\n+\n+import com.alibaba.csp.sentinel.concurrent.NamedThreadFactory;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * We use a ConcurrentHashMap<long, AtomicInteger> type structure to store nowCalls corresponding to\n+ * rules, where the key is flowId and the value is nowCalls. Because nowCalls may be accessed and\n+ * modified by multiple threads, we consider to design it as an AtomicInteger class . Each newly\n+ * created rule will add a nowCalls object to this map. If the concurrency corresponding to a rule changes,\n+ * we will update the corresponding nowCalls in real time. Each request to obtain a token will increase the nowCalls;\n+ * and the request to release the token will reduce the nowCalls.\n+ *\n+ * @author yunfeiyanggzq\n+ */\n+public final class CurrentConcurrencyManager {\n+    /**\n+     * use ConcurrentHashMap to store the nowCalls of rules.\n+     */\n+    private static final ConcurrentHashMap<Long, AtomicInteger> NOW_CALLS_MAP = new ConcurrentHashMap<Long, AtomicInteger>();\n+\n+    @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n+    private static final ScheduledExecutorService SCHEDULER = Executors.newScheduledThreadPool(1,\n+            new NamedThreadFactory(\"sentinel-cluster-concurrency-record-task\", true));\n+\n+    static {\n+        ClusterConcurrentCheckerLogListener logTask = new ClusterConcurrentCheckerLogListener();\n+        SCHEDULER.scheduleAtFixedRate(logTask, 0, 1, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * update current concurrency.\n+     */\n+    public static Boolean update(Long flowId, Integer count) {", "originalCommit": "0ddd0e5eb32e9083476863eaefcd35ac4a5d2e13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkyMTIwOQ==", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464921209", "bodyText": "done", "author": "yunfeiyanggzq", "createdAt": "2020-08-04T09:27:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3NDUzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3NDk1Mg==", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464774952", "bodyText": "Usually, the getXxxMap() operation should not be public exported.", "author": "sczyh30", "createdAt": "2020-08-04T03:19:17Z", "path": "sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/statistic/concurrent/CurrentConcurrencyManager.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent;\n+\n+import com.alibaba.csp.sentinel.concurrent.NamedThreadFactory;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * We use a ConcurrentHashMap<long, AtomicInteger> type structure to store nowCalls corresponding to\n+ * rules, where the key is flowId and the value is nowCalls. Because nowCalls may be accessed and\n+ * modified by multiple threads, we consider to design it as an AtomicInteger class . Each newly\n+ * created rule will add a nowCalls object to this map. If the concurrency corresponding to a rule changes,\n+ * we will update the corresponding nowCalls in real time. Each request to obtain a token will increase the nowCalls;\n+ * and the request to release the token will reduce the nowCalls.\n+ *\n+ * @author yunfeiyanggzq\n+ */\n+public final class CurrentConcurrencyManager {\n+    /**\n+     * use ConcurrentHashMap to store the nowCalls of rules.\n+     */\n+    private static final ConcurrentHashMap<Long, AtomicInteger> NOW_CALLS_MAP = new ConcurrentHashMap<Long, AtomicInteger>();\n+\n+    @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n+    private static final ScheduledExecutorService SCHEDULER = Executors.newScheduledThreadPool(1,\n+            new NamedThreadFactory(\"sentinel-cluster-concurrency-record-task\", true));\n+\n+    static {\n+        ClusterConcurrentCheckerLogListener logTask = new ClusterConcurrentCheckerLogListener();\n+        SCHEDULER.scheduleAtFixedRate(logTask, 0, 1, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * update current concurrency.\n+     */\n+    public static Boolean update(Long flowId, Integer count) {\n+\n+        AtomicInteger nowCalls = NOW_CALLS_MAP.get(flowId);\n+        if (nowCalls == null) {\n+            return false;\n+        }\n+        nowCalls.getAndAdd(count);\n+        return true;\n+    }\n+\n+    /**\n+     * get the current concurrency.\n+     */\n+    public static AtomicInteger get(Long flowId) {\n+        return NOW_CALLS_MAP.get(flowId);\n+    }\n+\n+    /**\n+     * delete the current concurrency.\n+     */\n+    public static void remove(Long flowId) {\n+        NOW_CALLS_MAP.remove(flowId);\n+    }\n+\n+    /**\n+     * add the current concurrency.\n+     */\n+    public static void put(Long flowId, Integer nowCalls) {\n+        NOW_CALLS_MAP.put(flowId, new AtomicInteger(nowCalls));\n+    }\n+\n+    /**\n+     * check flow id.\n+     */\n+    public static boolean containsFlowId(Long flowId) {\n+        return NOW_CALLS_MAP.containsKey(flowId);\n+    }\n+\n+    /**\n+     * get NOW_CALLS_MAP.\n+     */\n+    public static ConcurrentHashMap<Long, AtomicInteger> getConcurrencyMap() {", "originalCommit": "0ddd0e5eb32e9083476863eaefcd35ac4a5d2e13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgxNzQ1Mg==", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464817452", "bodyText": "I make it public to test,I will make this private.", "author": "yunfeiyanggzq", "createdAt": "2020-08-04T05:59:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3NDk1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkyMTMxOQ==", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464921319", "bodyText": "done", "author": "yunfeiyanggzq", "createdAt": "2020-08-04T09:27:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3NDk1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3NTI1OA==", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464775258", "bodyText": "Improve the naming here?", "author": "sczyh30", "createdAt": "2020-08-04T03:20:35Z", "path": "sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/statistic/concurrent/expire/RegularExpireStrategy.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent.expire;\n+\n+import com.alibaba.csp.sentinel.cluster.flow.rule.ClusterFlowRuleManager;\n+import com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent.CurrentConcurrencyManager;\n+import com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent.TokenCacheNode;\n+import com.alibaba.csp.sentinel.cluster.server.connection.ConnectionManager;\n+import com.alibaba.csp.sentinel.concurrent.NamedThreadFactory;\n+import com.alibaba.csp.sentinel.log.RecordLog;\n+import com.alibaba.csp.sentinel.util.AssertUtil;\n+import com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * We need to consider the situation that the token client goes offline\n+ * or the resource call times out. It can be detected by sourceTimeout\n+ * and clientTimeout. The resource calls timeout detection is triggered\n+ * on the token client. If the resource is called over time, the token\n+ * client will request the token server to release token or refresh the\n+ * token. The client offline detection is triggered on the token server.\n+ * If the offline detection time is exceeded, token server will trigger\n+ * the detection token client\u2019s status. If the token client is offline,\n+ * token server will delete the corresponding tokenId. If it is not offline,\n+ * token server will continue to save it.\n+ *\n+ * @author yunfeiyanggzq\n+ **/\n+public class RegularExpireStrategy implements ExpireStrategy {\n+    /**\n+     * The max number of token deleted each time,\n+     * the number of expired key-value pairs deleted each time does not exceed this number\n+     */\n+    private long executeCount = 1000;\n+    /**\n+     * Length of time for task execution\n+     */\n+    private long executeDuration = 600;\n+    /**\n+     * Frequency of task execution\n+     */\n+    private long executeRate = 1000;\n+    /**\n+     * the local cache of tokenId\n+     */\n+    private ConcurrentLinkedHashMap<Long, TokenCacheNode> localCache;\n+\n+    @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n+    private static ScheduledExecutorService executor = Executors.newScheduledThreadPool(1,\n+            new NamedThreadFactory(\"regular clear expired token thread\"));\n+\n+\n+    public RegularExpireStrategy() {\n+    }\n+\n+    @Override\n+    public void removeExpireKey(ConcurrentLinkedHashMap localCache) {\n+        AssertUtil.isTrue(localCache != null, \" local cache can't be null\");\n+        this.localCache = localCache;\n+        executor.scheduleAtFixedRate(new MyTask(), 0, executeRate, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private class MyTask implements Runnable {", "originalCommit": "0ddd0e5eb32e9083476863eaefcd35ac4a5d2e13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkyMTYwOA==", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464921608", "bodyText": "done", "author": "yunfeiyanggzq", "createdAt": "2020-08-04T09:27:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3NTI1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3NTg3Mg==", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464775872", "bodyText": "Can we use CacheMap interface here instead of a concrete type?", "author": "sczyh30", "createdAt": "2020-08-04T03:23:09Z", "path": "sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/statistic/concurrent/expire/ExpireStrategy.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent.expire;\n+\n+import com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent.TokenCacheNode;\n+import com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\n+\n+/**\n+ * @author yunfeiyagnggzq\n+ */\n+public interface ExpireStrategy<K, V> {\n+    /**\n+     * clean expireKey-Value\n+     *\n+     * @param map the map needs to detect expired tokens.\n+     * @return the number of the key cleaned\n+     */\n+    void removeExpireKey(ConcurrentLinkedHashMap<Long, TokenCacheNode> map);", "originalCommit": "0ddd0e5eb32e9083476863eaefcd35ac4a5d2e13", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3NTk5Nw==", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464775997", "bodyText": "It's unused?", "author": "sczyh30", "createdAt": "2020-08-04T03:23:36Z", "path": "sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/statistic/concurrent/expire/ExpireStrategy.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent.expire;\n+\n+import com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent.TokenCacheNode;\n+import com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\n+\n+/**\n+ * @author yunfeiyagnggzq\n+ */\n+public interface ExpireStrategy<K, V> {\n+    /**\n+     * clean expireKey-Value\n+     *\n+     * @param map the map needs to detect expired tokens.\n+     * @return the number of the key cleaned", "originalCommit": "0ddd0e5eb32e9083476863eaefcd35ac4a5d2e13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkyMTgyMw==", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464921823", "bodyText": "done", "author": "yunfeiyanggzq", "createdAt": "2020-08-04T09:28:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3NTk5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3NjkwMQ==", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464776901", "bodyText": "The removeExpireKey method here is confusing. It actually starts a periodical task instead of removing the keys immediately (so it's not allowed to invoke more than once). The design should be improved.", "author": "sczyh30", "createdAt": "2020-08-04T03:27:14Z", "path": "sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/statistic/concurrent/expire/RegularExpireStrategy.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent.expire;\n+\n+import com.alibaba.csp.sentinel.cluster.flow.rule.ClusterFlowRuleManager;\n+import com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent.CurrentConcurrencyManager;\n+import com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent.TokenCacheNode;\n+import com.alibaba.csp.sentinel.cluster.server.connection.ConnectionManager;\n+import com.alibaba.csp.sentinel.concurrent.NamedThreadFactory;\n+import com.alibaba.csp.sentinel.log.RecordLog;\n+import com.alibaba.csp.sentinel.util.AssertUtil;\n+import com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * We need to consider the situation that the token client goes offline\n+ * or the resource call times out. It can be detected by sourceTimeout\n+ * and clientTimeout. The resource calls timeout detection is triggered\n+ * on the token client. If the resource is called over time, the token\n+ * client will request the token server to release token or refresh the\n+ * token. The client offline detection is triggered on the token server.\n+ * If the offline detection time is exceeded, token server will trigger\n+ * the detection token client\u2019s status. If the token client is offline,\n+ * token server will delete the corresponding tokenId. If it is not offline,\n+ * token server will continue to save it.\n+ *\n+ * @author yunfeiyanggzq\n+ **/\n+public class RegularExpireStrategy implements ExpireStrategy {\n+    /**\n+     * The max number of token deleted each time,\n+     * the number of expired key-value pairs deleted each time does not exceed this number\n+     */\n+    private long executeCount = 1000;\n+    /**\n+     * Length of time for task execution\n+     */\n+    private long executeDuration = 600;\n+    /**\n+     * Frequency of task execution\n+     */\n+    private long executeRate = 1000;\n+    /**\n+     * the local cache of tokenId\n+     */\n+    private ConcurrentLinkedHashMap<Long, TokenCacheNode> localCache;\n+\n+    @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n+    private static ScheduledExecutorService executor = Executors.newScheduledThreadPool(1,\n+            new NamedThreadFactory(\"regular clear expired token thread\"));\n+\n+\n+    public RegularExpireStrategy() {\n+    }\n+\n+    @Override\n+    public void removeExpireKey(ConcurrentLinkedHashMap localCache) {\n+        AssertUtil.isTrue(localCache != null, \" local cache can't be null\");\n+        this.localCache = localCache;\n+        executor.scheduleAtFixedRate(new MyTask(), 0, executeRate, TimeUnit.MILLISECONDS);", "originalCommit": "0ddd0e5eb32e9083476863eaefcd35ac4a5d2e13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkyMTkxMg==", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464921912", "bodyText": "done", "author": "yunfeiyanggzq", "createdAt": "2020-08-04T09:28:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3NjkwMQ=="}], "type": "inlineReview"}, {"oid": "17c3ff7a443752b4d37c19ef56b90f4637cc3dd5", "url": "https://github.com/alibaba/Sentinel/commit/17c3ff7a443752b4d37c19ef56b90f4637cc3dd5", "message": "test: Add unit test for sentinel-cluster-server and polish code (#1529)\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>", "committedDate": "2020-07-23T02:15:01Z", "type": "forcePushed"}, {"oid": "3943abb51846f2b959641ac9d758b748d4aeb8b2", "url": "https://github.com/alibaba/Sentinel/commit/3943abb51846f2b959641ac9d758b748d4aeb8b2", "message": "finish the default token server\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>", "committedDate": "2020-08-04T09:07:33Z", "type": "forcePushed"}, {"oid": "d4d2d477a3ad2ee6111b27cdf1034d33d8d72281", "url": "https://github.com/alibaba/Sentinel/commit/d4d2d477a3ad2ee6111b27cdf1034d33d8d72281", "message": "finish the default token server\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>", "committedDate": "2020-08-20T07:30:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMDIwNQ==", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r482920205", "bodyText": "Could you please reformat your code?", "author": "sczyh30", "createdAt": "2020-09-03T11:54:20Z", "path": "sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/rule/ClusterFlowRuleManager.java", "diffHunk": "@@ -351,6 +358,9 @@ private static void applyClusterFlowRule(List<FlowRule> list, /*@Valid*/ String\n             ruleMap.put(flowId, rule);\n             FLOW_NAMESPACE_MAP.put(flowId, namespace);\n             flowIdSet.add(flowId);\n+            if(!CurrentConcurrencyManager.containsFlowId(flowId)){", "originalCommit": "d4d2d477a3ad2ee6111b27cdf1034d33d8d72281", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMzkzOA==", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r482923938", "bodyText": "done", "author": "yunfeiyanggzq", "createdAt": "2020-09-03T12:01:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMDIwNQ=="}], "type": "inlineReview"}, {"oid": "2926e286f40578be9942aa768fed511045e455bc", "url": "https://github.com/alibaba/Sentinel/commit/2926e286f40578be9942aa768fed511045e455bc", "message": "add cluster concurrent flow control param into flow rule\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>", "committedDate": "2020-09-04T00:51:51Z", "type": "commit"}, {"oid": "f7d93546c94fae4d2b723327723fef5dbcd17b9b", "url": "https://github.com/alibaba/Sentinel/commit/f7d93546c94fae4d2b723327723fef5dbcd17b9b", "message": "add cluster concurrent  flow control interface into TokenService\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>", "committedDate": "2020-09-04T00:54:18Z", "type": "commit"}, {"oid": "5c496afdf8762a6ac988389cd6945022bc4af567", "url": "https://github.com/alibaba/Sentinel/commit/5c496afdf8762a6ac988389cd6945022bc4af567", "message": "finish concurrent flow control checker\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>", "committedDate": "2020-09-04T00:56:52Z", "type": "commit"}, {"oid": "49f7da6c74692e1f7010b66dbee175d1c1227b99", "url": "https://github.com/alibaba/Sentinel/commit/49f7da6c74692e1f7010b66dbee175d1c1227b99", "message": "unit tests for this pr\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>", "committedDate": "2020-09-04T00:57:18Z", "type": "forcePushed"}, {"oid": "1f0ce3bb1626d034d9f95945bba7a18ee56066e9", "url": "https://github.com/alibaba/Sentinel/commit/1f0ce3bb1626d034d9f95945bba7a18ee56066e9", "message": "unit tests for cluster concurrent flow control checker\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>", "committedDate": "2020-09-04T01:22:57Z", "type": "commit"}, {"oid": "1f0ce3bb1626d034d9f95945bba7a18ee56066e9", "url": "https://github.com/alibaba/Sentinel/commit/1f0ce3bb1626d034d9f95945bba7a18ee56066e9", "message": "unit tests for cluster concurrent flow control checker\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>", "committedDate": "2020-09-04T01:22:57Z", "type": "forcePushed"}]}