{"pr_number": 1319, "pr_title": "Fix InMemoryMetricsRepository can't keep the last five minutes data problem and  Improve read-write performance", "pr_createdAt": "2020-03-05T14:22:15Z", "pr_url": "https://github.com/alibaba/Sentinel/pull/1319", "timeline": [{"oid": "b6eb2e02441df7e0f343f427a87a589a8274e2ba", "url": "https://github.com/alibaba/Sentinel/commit/b6eb2e02441df7e0f343f427a87a589a8274e2ba", "message": "Fix InMemoryMetricsRepository can't keep the last five minutes metrics data problem and Improve read-write performance", "committedDate": "2020-03-05T14:18:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0NDgxMg==", "url": "https://github.com/alibaba/Sentinel/pull/1319#discussion_r388844812", "bodyText": "Oh i notice it this time that System.currentTimeMillis should better be replaced into TimeUtil for better performance.", "author": "jasonjoo2010", "createdAt": "2020-03-06T11:09:50Z", "path": "sentinel-dashboard/src/main/java/com/alibaba/csp/sentinel/dashboard/repository/metric/InMemoryMetricsRepository.java", "diffHunk": "@@ -44,54 +43,71 @@\n     /**\n      * {@code app -> resource -> timestamp -> metric}\n      */\n-    private Map<String, Map<String, ConcurrentLinkedHashMap<Long, MetricEntity>>> allMetrics = new ConcurrentHashMap<>();\n+    private Map<String, Map<String, LinkedHashMap<Long, MetricEntity>>> allMetrics = new ConcurrentHashMap<>();\n \n+    private ReentrantReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n \n \n     @Override\n-    public synchronized void save(MetricEntity entity) {\n+    public void save(MetricEntity entity) {\n         if (entity == null || StringUtil.isBlank(entity.getApp())) {\n             return;\n         }\n-        allMetrics.computeIfAbsent(entity.getApp(), e -> new ConcurrentHashMap<>(16))\n-            .computeIfAbsent(entity.getResource(), e -> new ConcurrentLinkedHashMap.Builder<Long, MetricEntity>()\n-                .maximumWeightedCapacity(MAX_METRIC_LIVE_TIME_MS).weigher((key, value) -> {\n-                    // Metric older than {@link #MAX_METRIC_LIVE_TIME_MS} will be removed.\n-                    int weight = (int)(System.currentTimeMillis() - key);\n-                    // weight must be a number greater than or equal to one\n-                    return Math.max(weight, 1);\n-                }).build()).put(entity.getTimestamp().getTime(), entity);\n+        readWriteLock.writeLock().lock();\n+        try {\n+            allMetrics.computeIfAbsent(entity.getApp(), e -> new HashMap<>(16))\n+                    .computeIfAbsent(entity.getResource(), e -> new LinkedHashMap<Long, MetricEntity>() {\n+                        @Override\n+                        protected boolean removeEldestEntry(Entry<Long, MetricEntity> eldest) {\n+                            // Metric older than {@link #MAX_METRIC_LIVE_TIME_MS} will be removed.\n+                            return eldest.getKey() < System.currentTimeMillis() - MAX_METRIC_LIVE_TIME_MS;", "originalCommit": "b6eb2e02441df7e0f343f427a87a589a8274e2ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0NTA3OA==", "url": "https://github.com/alibaba/Sentinel/pull/1319#discussion_r388845078", "bodyText": "It should be a final variable.", "author": "jasonjoo2010", "createdAt": "2020-03-06T11:10:34Z", "path": "sentinel-dashboard/src/main/java/com/alibaba/csp/sentinel/dashboard/repository/metric/InMemoryMetricsRepository.java", "diffHunk": "@@ -44,54 +43,71 @@\n     /**\n      * {@code app -> resource -> timestamp -> metric}\n      */\n-    private Map<String, Map<String, ConcurrentLinkedHashMap<Long, MetricEntity>>> allMetrics = new ConcurrentHashMap<>();\n+    private Map<String, Map<String, LinkedHashMap<Long, MetricEntity>>> allMetrics = new ConcurrentHashMap<>();\n \n+    private ReentrantReadWriteLock readWriteLock = new ReentrantReadWriteLock();", "originalCommit": "b6eb2e02441df7e0f343f427a87a589a8274e2ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwNjM3Nw==", "url": "https://github.com/alibaba/Sentinel/pull/1319#discussion_r388906377", "bodyText": "readWriteLock here will be escape?", "author": "linlinisme", "createdAt": "2020-03-06T13:38:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0NTA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk0NDYyNg==", "url": "https://github.com/alibaba/Sentinel/pull/1319#discussion_r388944626", "bodyText": "readWriteLock here will be escape?\n\nI'm sorry i don't understand what you mean. Adding final is unnecessary or there's any reason? Just an instance final variable which can't change.", "author": "jasonjoo2010", "createdAt": "2020-03-06T14:48:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0NTA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk1NDEwMQ==", "url": "https://github.com/alibaba/Sentinel/pull/1319#discussion_r388954101", "bodyText": "Haha, jason is a man who is very precise and detail oriented! If the readWriteLock add final decoration, then is theallMetrics variable also needed? Since they are both private, I think it's ok : )", "author": "cdfive", "createdAt": "2020-03-06T15:03:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0NTA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk1NDkzMg==", "url": "https://github.com/alibaba/Sentinel/pull/1319#discussion_r388954932", "bodyText": "readWriteLock here will be escape?\n\nI'm sorry i don't understand what you mean. Adding final is unnecessary or there's any reason? Just an instance final variable which can't change.\n\n\u6211\u7684\u610f\u601d\u662f\u4f60\u60f3\u901a\u8fc7final\u5173\u952e\u5b57\u786e\u4fddreadWriteLock \u4e0d\u4f1a\u53d1\u5bf9\u8c61\u9003\u9038\u5417\u3002 readWriteLock\n\u662fInMemoryMetricsRepository\u7684\u79c1\u6709\u5c5e\u6027\u5e76\u4e14\u6ca1\u6709\u66b4\u9732\u7ed9\u5916\u90e8\u8bbf\u95ee\u7684\u63a5\u53e3(getter/setter) \u5e94\u8be5\u662f\u4e0d\u4f1a\u53d1\u751f\u9003\u9038\u7684\u548c\u4e5f\u4e0d\u4f1a\u88ab\u5916\u90e8\u6240\u4fee\u6539\u3002\u6240\u4ee5\u52a0final\u5173\u952e\u5b57\u76ee\u7684\u662f\uff1f\nI mean what you want to make sure is  'readWriteLock' prevent escape by using the final keyword?  readWriteLock\nIs InMemoryMetricsRepository private property and not exposed to the external access interface (getter/setter) . So  escape is not going to happen, and also not be modified by the external. So what is the purpose of adding the final keyword?", "author": "linlinisme", "createdAt": "2020-03-06T15:05:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0NTA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk1ODEwNw==", "url": "https://github.com/alibaba/Sentinel/pull/1319#discussion_r388958107", "bodyText": "Haha, jason is a man who is very precise and detail oriented! If the readWriteLock add final decoration, then is theallMetrics variable also needed? Since they are both private, I think it's ok : )\n\n\nHaha, jason is a man who is very precise and detail oriented! If the readWriteLock add final decoration, then is theallMetrics variable also needed? Since they are both private, I think it's ok : )\n\nI know\uff0c I just wondering if he had some extra reason.", "author": "linlinisme", "createdAt": "2020-03-06T15:11:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0NTA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk2NzIzOA==", "url": "https://github.com/alibaba/Sentinel/pull/1319#discussion_r388967238", "bodyText": "readWriteLock here will be escape?\n\nI'm sorry i don't understand what you mean. Adding final is unnecessary or there's any reason? Just an instance final variable which can't change.\n\n\u6211\u7684\u610f\u601d\u662f\u4f60\u60f3\u901a\u8fc7final\u5173\u952e\u5b57\u786e\u4fddreadWriteLock \u4e0d\u4f1a\u53d1\u5bf9\u8c61\u9003\u9038\u5417\u3002 readWriteLock\n\u662fInMemoryMetricsRepository\u7684\u79c1\u6709\u5c5e\u6027\u5e76\u4e14\u6ca1\u6709\u66b4\u9732\u7ed9\u5916\u90e8\u8bbf\u95ee\u7684\u63a5\u53e3(getter/setter) \u5e94\u8be5\u662f\u4e0d\u4f1a\u53d1\u751f\u9003\u9038\u7684\u548c\u4e5f\u4e0d\u4f1a\u88ab\u5916\u90e8\u6240\u4fee\u6539\u3002\u6240\u4ee5\u52a0final\u5173\u952e\u5b57\u76ee\u7684\u662f\uff1f\nI mean what you want to make sure is 'readWriteLock' prevent escape by using the final keyword? readWriteLock\nIs InMemoryMetricsRepository private property and not exposed to the external access interface (getter/setter) . So escape is not going to happen, and also not be modified by the external. So what is the purpose of adding the final keyword?\n\nYep just to promise the purpose and you can take it as a kind of \"documentation\" like\n\"I will not change anytime and every instance has a different one.\"\nAnd maybe the compiler will replace it with fixed address but not variable sign when compiling.", "author": "jasonjoo2010", "createdAt": "2020-03-06T15:25:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0NTA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk2ODc3MQ==", "url": "https://github.com/alibaba/Sentinel/pull/1319#discussion_r388968771", "bodyText": "Haha, jason is a man who is very precise and detail oriented! If the readWriteLock add final decoration, then is theallMetrics variable also needed? Since they are both private, I think it's ok : )\n\nAnd allMetrics has no need to do the same thing in my opinion because it indeed can be replaced to another instance. But a lock cannot.", "author": "jasonjoo2010", "createdAt": "2020-03-06T15:28:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0NTA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk3MzE3OQ==", "url": "https://github.com/alibaba/Sentinel/pull/1319#discussion_r388973179", "bodyText": "readWriteLock here will be escape?\n\nI'm sorry i don't understand what you mean. Adding final is unnecessary or there's any reason? Just an instance final variable which can't change.\n\n\u6211\u7684\u610f\u601d\u662f\u4f60\u60f3\u901a\u8fc7final\u5173\u952e\u5b57\u786e\u4fddreadWriteLock \u4e0d\u4f1a\u53d1\u5bf9\u8c61\u9003\u9038\u5417\u3002 readWriteLock\n\u662fInMemoryMetricsRepository\u7684\u79c1\u6709\u5c5e\u6027\u5e76\u4e14\u6ca1\u6709\u66b4\u9732\u7ed9\u5916\u90e8\u8bbf\u95ee\u7684\u63a5\u53e3(getter/setter) \u5e94\u8be5\u662f\u4e0d\u4f1a\u53d1\u751f\u9003\u9038\u7684\u548c\u4e5f\u4e0d\u4f1a\u88ab\u5916\u90e8\u6240\u4fee\u6539\u3002\u6240\u4ee5\u52a0final\u5173\u952e\u5b57\u76ee\u7684\u662f\uff1f\nI mean what you want to make sure is 'readWriteLock' prevent escape by using the final keyword? readWriteLock\nIs InMemoryMetricsRepository private property and not exposed to the external access interface (getter/setter) . So escape is not going to happen, and also not be modified by the external. So what is the purpose of adding the final keyword?\n\nYep just to promise the purpose and you can take it as a kind of \"documentation\" like\n\"I will not change anytime and every instance has a different one.\"\nAnd maybe the compiler will replace it with fixed address but not variable sign when compiling.\n\nok, may be It is better to stress that a lock is final, when it is globally unique and won't be modified.", "author": "linlinisme", "createdAt": "2020-03-06T15:35:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0NTA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk3NjU4Mw==", "url": "https://github.com/alibaba/Sentinel/pull/1319#discussion_r388976583", "bodyText": "readWriteLock here will be escape?\n\nI'm sorry i don't understand what you mean. Adding final is unnecessary or there's any reason? Just an instance final variable which can't change.\n\n\u6211\u7684\u610f\u601d\u662f\u4f60\u60f3\u901a\u8fc7final\u5173\u952e\u5b57\u786e\u4fddreadWriteLock \u4e0d\u4f1a\u53d1\u5bf9\u8c61\u9003\u9038\u5417\u3002 readWriteLock\n\u662fInMemoryMetricsRepository\u7684\u79c1\u6709\u5c5e\u6027\u5e76\u4e14\u6ca1\u6709\u66b4\u9732\u7ed9\u5916\u90e8\u8bbf\u95ee\u7684\u63a5\u53e3(getter/setter) \u5e94\u8be5\u662f\u4e0d\u4f1a\u53d1\u751f\u9003\u9038\u7684\u548c\u4e5f\u4e0d\u4f1a\u88ab\u5916\u90e8\u6240\u4fee\u6539\u3002\u6240\u4ee5\u52a0final\u5173\u952e\u5b57\u76ee\u7684\u662f\uff1f\nI mean what you want to make sure is 'readWriteLock' prevent escape by using the final keyword? readWriteLock\nIs InMemoryMetricsRepository private property and not exposed to the external access interface (getter/setter) . So escape is not going to happen, and also not be modified by the external. So what is the purpose of adding the final keyword?\n\nYep just to promise the purpose and you can take it as a kind of \"documentation\" like\n\"I will not change anytime and every instance has a different one.\"\nAnd maybe the compiler will replace it with fixed address but not variable sign when compiling.\n\nok, may be It is better to stress that a lock is final, when it is globally unique and won't be modified.\n\nYeah it's just a manner but not any constraint. Don't forget the TimeUtil issue and do you have any further question on it? It may effect the performance i think. Then we can get it done this time, right? @cdfive", "author": "jasonjoo2010", "createdAt": "2020-03-06T15:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0NTA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk4ODEyNg==", "url": "https://github.com/alibaba/Sentinel/pull/1319#discussion_r388988126", "bodyText": "Yep just to promise the purpose and you can take it as a kind of \"documentation\" like\n\"I will not change anytime and every instance has a different one.\"\nAnd maybe the compiler will replace it with fixed address but not variable sign when compiling.\n\nThese two points are very precise, though not very sure which is better\nand I found the line in CtSph @jasonjoo2010 @linlinisme\nprivate static final Object LOCK = new Object();", "author": "cdfive", "createdAt": "2020-03-06T16:00:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0NTA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk5NDAzMQ==", "url": "https://github.com/alibaba/Sentinel/pull/1319#discussion_r388994031", "bodyText": "Yep just to promise the purpose and you can take it as a kind of \"documentation\" like\n\"I will not change anytime and every instance has a different one.\"\nAnd maybe the compiler will replace it with fixed address but not variable sign when compiling.\n\nThese two points are very precise, though not very sure which is better\nand I found the line in CtSph @jasonjoo2010 @linlinisme\nprivate static final Object LOCK = new Object();\n\nWhether we should qualify it as static depends on actual design and InMemoryMetricsRepository  may need a per instance lock only. Though there may be only one instance in practice :)\nAnd surely static final is the gramma to declare a \"constant\" so it's a good practice to name it all upper cases with underscore between each pair of word.\nAs per instance final both of styles is acceptable for me though.", "author": "jasonjoo2010", "createdAt": "2020-03-06T16:10:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0NTA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk5NTE3Ng==", "url": "https://github.com/alibaba/Sentinel/pull/1319#discussion_r388995176", "bodyText": "Yep just to promise the purpose and you can take it as a kind of \"documentation\" like\n\"I will not change anytime and every instance has a different one.\"\nAnd maybe the compiler will replace it with fixed address but not variable sign when compiling.\n\nThese two points are very precise, though not very sure which is better\nand I found the line in CtSph @jasonjoo2010 @linlinisme\nprivate static final Object LOCK = new Object();\n\nWhether we should qualify it as static depends on actual design and InMemoryMetricsRepository  may need a per instance lock only. Though there may be only one instance in practice :)\nAnd surely static final is the gramma to declare a \"constant\" so name it all upper cases with\n\n\nYep just to promise the purpose and you can take it as a kind of \"documentation\" like\n\"I will not change anytime and every instance has a different one.\"\nAnd maybe the compiler will replace it with fixed address but not variable sign when compiling.\n\nThese two points are very precise, though not very sure which is better\nand I found the line in CtSph @jasonjoo2010 @linlinisme\nprivate static final Object LOCK = new Object();\n\nBy the way we should speed up your design in another PR & issue because it's quite important maybe. I have make several proposals including the one based on yours :)", "author": "jasonjoo2010", "createdAt": "2020-03-06T16:12:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0NTA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk5OTI0Mg==", "url": "https://github.com/alibaba/Sentinel/pull/1319#discussion_r388999242", "bodyText": "\u611f\u8c22Jason\u8010\u5fc3\u8be6\u5b9e\u7684\u8bf4\u660e\u3002\n\u8bfb\u5230\u8fd9\u91cc\uff0c\u6211\u4e5f\u5206\u4eab\u4e2a\u8fd9\u5468\u8ddf\u540c\u4e8b\u8ba8\u8bba\u7684\u4e00\u4e2a\uff1a\npublic class StringConcat {\n    public static void main(String[] args) {\n        String a = \"hello2\";\n        final String b = \"hello\";\n        String d = \"hello\";\n        String c = b + 2;\n        String e = d + 2;\n        System.out.println((a == c));\n        System.out.println((a == e));\n    }\n}\n\nBy the way we should speed up your design in another PR & issue because it's quite important maybe.\n\n\u8d5e\u540c~ \u5e0c\u671b\u4e24\u4f4d\u5927\u4f6c\u522b\u592a\u7ea0\u7ed3\u52a0\u5feb\u4e00\u70b9\u901f\u5ea6\u3002\n// \u54c8\u54c8\uff01\u592a\u6ce8\u91cd\u7ec6\u8282~\u5b66\u4e60\u4e86: )\n@sczyh30 \u624b\u52a8\u53ec\u5524\u5927\u4f6c\u56f4\u89c2", "author": "cdfive", "createdAt": "2020-03-06T16:19:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0NTA3OA=="}], "type": "inlineReview"}, {"oid": "f51446d5bb93107ba6037da7e21e50358d8c7325", "url": "https://github.com/alibaba/Sentinel/commit/f51446d5bb93107ba6037da7e21e50358d8c7325", "message": "add final key word for readWriteLock and using TimeUtil.currentTimeMillis() replace System.currentTimeMillis()", "committedDate": "2020-03-06T15:38:15Z", "type": "commit"}]}