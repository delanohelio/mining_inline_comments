{"pr_number": 1420, "pr_title": "Refactor the mechanism of recording error (on completed)", "pr_createdAt": "2020-04-21T14:51:08Z", "pr_url": "https://github.com/alibaba/Sentinel/pull/1420", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUwNDk2OQ==", "url": "https://github.com/alibaba/Sentinel/pull/1420#discussion_r413504969", "bodyText": "This recordCompleteFor makes it more clear to record for related node.\nIn StatisticSlot#exit of previous version, there is a judgement for max rt:\nint maxStatisticRt = SentinelConfig.statisticMaxRt();\nif (rt > maxStatisticRt) {\n    rt = maxStatisticRt;\n}\nIs it still needed here or some other place?\nI found that in MetricBucket\npublic void addRT(long rt) {\n    add(MetricEvent.RT, rt);\n    // Not thread-safe, but it's okay.\n    if (rt < minRt) {\n        minRt = rt;\n    }\n}\nIf a RT which is greater than default maxRT, it will still be added with actual value,\nnot quite sure about it, and the minRT seems not the same meaning as judgement of maxRT.", "author": "cdfive", "createdAt": "2020-04-23T04:45:15Z", "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/statistic/StatisticSlot.java", "diffHunk": "@@ -171,4 +150,16 @@ public void exit(Context context, ResourceWrapper resourceWrapper, int count, Ob\n \n         fireExit(context, resourceWrapper, count);\n     }\n+\n+    private void recordCompleteFor(Node node, int batchCount, long rt, Throwable error) {\n+        if (node == null) {\n+            return;\n+        }\n+        node.addRtAndSuccess(rt, batchCount);\n+        node.decreaseThreadNum();\n+\n+        if (error != null && !(error instanceof BlockException)) {\n+            node.increaseExceptionQps(batchCount);\n+        }\n+    }", "originalCommit": "59704f2cd5c7c0c18d33775d1fea8db33d55a490", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc1NDI1Mg==", "url": "https://github.com/alibaba/Sentinel/pull/1420#discussion_r413754252", "bodyText": "This recordCompleteFor makes it more clear to record for related node.\nIn StatisticSlot#exit of previous version, there is a judgement for max rt:\nint maxStatisticRt = SentinelConfig.statisticMaxRt();\nif (rt > maxStatisticRt) {\n    rt = maxStatisticRt;\n}\nIs it still needed here or some other place?\n\nIt's not needed anymore. The maxStatisticRt was designed to avoid affecting the avgRt by extremely-slow requests, which could undermine the effect of RT-based circuit breaking. Now we'll record the original response time (so that the monitoring data could be more accurate). The RT-based circuit breaking strategy will be refactored in the incoming PRs so that it will not suffer from high avgRt.\n\nI found that in MetricBucket\npublic void addRT(long rt) {\n    add(MetricEvent.RT, rt);\n    // Not thread-safe, but it's okay.\n    if (rt < minRt) {\n        minRt = rt;\n    }\n}\nIf a RT which is greater than default maxRT, it will still be added with actual value,\nnot quite sure about it, and the minRT seems not the same meaning as judgement of maxRT.\n\nIt doesn't matter for minRt, which is used for adaptive system protection during the BBR period. The maxStatisticRt could be deprecated later.", "author": "sczyh30", "createdAt": "2020-04-23T11:59:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUwNDk2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgzNTM5OQ==", "url": "https://github.com/alibaba/Sentinel/pull/1420#discussion_r413835399", "bodyText": "Got it, thanks!", "author": "cdfive", "createdAt": "2020-04-23T14:18:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUwNDk2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg4MjA5OA==", "url": "https://github.com/alibaba/Sentinel/pull/1420#discussion_r413882098", "bodyText": "How about keeping the same suffix of the two fields?", "author": "cdfive", "createdAt": "2020-04-23T15:11:29Z", "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/Entry.java", "diffHunk": "@@ -52,14 +54,19 @@\n \n     private static final Object[] OBJECTS0 = new Object[0];\n \n-    private long createTime;\n+    private final long createTime;\n+    private long completeTimestamp;", "originalCommit": "59704f2cd5c7c0c18d33775d1fea8db33d55a490", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNjA1NQ==", "url": "https://github.com/alibaba/Sentinel/pull/1420#discussion_r415306055", "bodyText": "Good idea. I've updated createTime to createTimestamp.", "author": "sczyh30", "createdAt": "2020-04-26T13:03:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg4MjA5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg5MzM1Mw==", "url": "https://github.com/alibaba/Sentinel/pull/1420#discussion_r413893353", "bodyText": "The parameter count now is unused, do we have no scenes that need to use it?\nAs @Deprecated is marked, maybe the caller SentinelReactorSubscriber#L150 and ReactorSphU#L60 use the newer method is better.", "author": "cdfive", "createdAt": "2020-04-23T15:24:46Z", "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/Tracer.java", "diffHunk": "@@ -39,87 +35,81 @@\n     protected Tracer() {}\n \n     /**\n-     * Trace provided {@link Throwable} and increment exception count to entry in current context.\n+     * Trace provided {@link Throwable} to the resource entry in current context.\n      *\n      * @param e exception to record\n      */\n     public static void trace(Throwable e) {\n-        trace(e, 1);\n+        traceContext(e, ContextUtil.getContext());\n     }\n \n     /**\n-     * Trace provided {@link Throwable} and add exception count to entry in current context.\n+     * Trace provided {@link Throwable} to current entry in current context.\n      *\n      * @param e     exception to record\n      * @param count exception count to add\n      */\n+    @Deprecated\n     public static void trace(Throwable e, int count) {\n         traceContext(e, count, ContextUtil.getContext());\n     }\n \n     /**\n-     * Trace provided {@link Throwable} and add exception count to current entry in provided context.\n+     * Trace provided {@link Throwable} to current entry of given entrance context.\n      *\n      * @param e     exception to record\n-     * @param count exception count to add\n-     * @since 1.4.2\n+     * @param context target entrance context\n+     * @since 1.8.0\n      */\n-    public static void traceContext(Throwable e, int count, Context context) {\n+    public static void traceContext(Throwable e, Context context) {\n         if (!shouldTrace(e)) {\n             return;\n         }\n \n         if (context == null || context instanceof NullContext) {\n             return;\n         }\n-\n-        DefaultNode curNode = (DefaultNode)context.getCurNode();\n-        traceExceptionToNode(e, count, context.getCurEntry(), curNode);\n-    }\n-\n-    /**\n-     * Trace provided {@link Throwable} and increment exception count to provided entry.\n-     *\n-     * @param e exception to record\n-     * @since 1.4.2\n-     */\n-    public static void traceEntry(Throwable e, Entry entry) {\n-        traceEntry(e, 1, entry);\n+        traceEntryInternal(e, context.getCurEntry());\n     }\n \n     /**\n-     * Trace provided {@link Throwable} and add exception count to provided entry.\n+     * Trace provided {@link Throwable} and add exception count to current entry in provided context.\n      *\n      * @param e     exception to record\n      * @param count exception count to add\n      * @since 1.4.2\n      */\n-    public static void traceEntry(Throwable e, int count, Entry entry) {\n+    @Deprecated\n+    public static void traceContext(Throwable e, int count, Context context) {\n         if (!shouldTrace(e)) {\n             return;\n         }\n-        if (entry == null || entry.getCurNode() == null) {\n+\n+        if (context == null || context instanceof NullContext) {\n             return;\n         }\n-\n-        DefaultNode curNode = (DefaultNode)entry.getCurNode();\n-        traceExceptionToNode(e, count, entry, curNode);\n+        traceEntryInternal(e, context.getCurEntry());\n     }", "originalCommit": "59704f2cd5c7c0c18d33775d1fea8db33d55a490", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5NzMyNQ==", "url": "https://github.com/alibaba/Sentinel/pull/1420#discussion_r415297325", "bodyText": "As it's related to other adapter modules, it might be better to make changes in a new PR.", "author": "sczyh30", "createdAt": "2020-04-26T12:20:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg5MzM1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg5OTUzMw==", "url": "https://github.com/alibaba/Sentinel/pull/1420#discussion_r413899533", "bodyText": "clusterNode.trace(t, count); is removed here, and is it right understanding that the increaseExceptionQps now is in the StatisticSlot#recordCompleteFor method. But the operation of cluserNode seems missing, is it affects?", "author": "cdfive", "createdAt": "2020-04-23T15:32:14Z", "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/Tracer.java", "diffHunk": "@@ -39,87 +35,81 @@\n     protected Tracer() {}\n \n     /**\n-     * Trace provided {@link Throwable} and increment exception count to entry in current context.\n+     * Trace provided {@link Throwable} to the resource entry in current context.\n      *\n      * @param e exception to record\n      */\n     public static void trace(Throwable e) {\n-        trace(e, 1);\n+        traceContext(e, ContextUtil.getContext());\n     }\n \n     /**\n-     * Trace provided {@link Throwable} and add exception count to entry in current context.\n+     * Trace provided {@link Throwable} to current entry in current context.\n      *\n      * @param e     exception to record\n      * @param count exception count to add\n      */\n+    @Deprecated\n     public static void trace(Throwable e, int count) {\n         traceContext(e, count, ContextUtil.getContext());\n     }\n \n     /**\n-     * Trace provided {@link Throwable} and add exception count to current entry in provided context.\n+     * Trace provided {@link Throwable} to current entry of given entrance context.\n      *\n      * @param e     exception to record\n-     * @param count exception count to add\n-     * @since 1.4.2\n+     * @param context target entrance context\n+     * @since 1.8.0\n      */\n-    public static void traceContext(Throwable e, int count, Context context) {\n+    public static void traceContext(Throwable e, Context context) {\n         if (!shouldTrace(e)) {\n             return;\n         }\n \n         if (context == null || context instanceof NullContext) {\n             return;\n         }\n-\n-        DefaultNode curNode = (DefaultNode)context.getCurNode();\n-        traceExceptionToNode(e, count, context.getCurEntry(), curNode);\n-    }\n-\n-    /**\n-     * Trace provided {@link Throwable} and increment exception count to provided entry.\n-     *\n-     * @param e exception to record\n-     * @since 1.4.2\n-     */\n-    public static void traceEntry(Throwable e, Entry entry) {\n-        traceEntry(e, 1, entry);\n+        traceEntryInternal(e, context.getCurEntry());\n     }\n \n     /**\n-     * Trace provided {@link Throwable} and add exception count to provided entry.\n+     * Trace provided {@link Throwable} and add exception count to current entry in provided context.\n      *\n      * @param e     exception to record\n      * @param count exception count to add\n      * @since 1.4.2\n      */\n-    public static void traceEntry(Throwable e, int count, Entry entry) {\n+    @Deprecated\n+    public static void traceContext(Throwable e, int count, Context context) {\n         if (!shouldTrace(e)) {\n             return;\n         }\n-        if (entry == null || entry.getCurNode() == null) {\n+\n+        if (context == null || context instanceof NullContext) {\n             return;\n         }\n-\n-        DefaultNode curNode = (DefaultNode)entry.getCurNode();\n-        traceExceptionToNode(e, count, entry, curNode);\n+        traceEntryInternal(e, context.getCurEntry());\n     }\n \n-    private static void traceExceptionToNode(Throwable t, int count, Entry entry, DefaultNode curNode) {\n-        if (curNode == null) {\n+    /**\n+     * Trace provided {@link Throwable} to the given resource entry.\n+     *\n+     * @param e exception to record\n+     * @since 1.4.2\n+     */\n+    public static void traceEntry(Throwable e, Entry entry) {\n+        if (!shouldTrace(e)) {\n             return;\n         }\n-        for (MetricExtension m : MetricExtensionProvider.getMetricExtensions()) {\n-            m.addException(entry.getResourceWrapper().getName(), count, t);\n-        }\n+        traceEntryInternal(e, entry);\n+    }\n \n-        // clusterNode can be null when Constants.ON is false.\n-        ClusterNode clusterNode = curNode.getClusterNode();\n-        if (clusterNode == null) {\n+    private static void traceEntryInternal(/*@NeedToTrace*/ Throwable e, Entry entry) {\n+        if (entry == null) {\n             return;\n         }\n-        clusterNode.trace(t, count);\n+\n+        entry.setError(e);\n     }", "originalCommit": "59704f2cd5c7c0c18d33775d1fea8db33d55a490", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMwNTU2OQ==", "url": "https://github.com/alibaba/Sentinel/pull/1420#discussion_r415305569", "bodyText": "It's included in recordCompleteFor method (for both DefaultNode and its ClusterNode)", "author": "sczyh30", "createdAt": "2020-04-26T13:00:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg5OTUzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMxNzYyMA==", "url": "https://github.com/alibaba/Sentinel/pull/1420#discussion_r415317620", "bodyText": "Okay, I found it in DefaultNode#increaseExceptionQps.", "author": "cdfive", "createdAt": "2020-04-26T14:01:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg5OTUzMw=="}], "type": "inlineReview"}, {"oid": "daaf5cd13f3feff85f3df125fcecff0e04f9f457", "url": "https://github.com/alibaba/Sentinel/commit/daaf5cd13f3feff85f3df125fcecff0e04f9f457", "message": "Polish Tracer with entry.setError(ex) mechanism\n\nSigned-off-by: Eric Zhao <sczyh16@gmail.com>", "committedDate": "2020-04-26T12:59:48Z", "type": "forcePushed"}, {"oid": "fcd5451fd47ac4784996b204f747eb84bbf374e7", "url": "https://github.com/alibaba/Sentinel/commit/fcd5451fd47ac4784996b204f747eb84bbf374e7", "message": "Refactor the mechanism of recording error in Entry and StatisticSlot\n\n* Also polish related complete callbacks\n\nSigned-off-by: Eric Zhao <sczyh16@gmail.com>", "committedDate": "2020-04-26T13:02:39Z", "type": "commit"}, {"oid": "847f23ca79b52c308b39b229549b009b9772aeb0", "url": "https://github.com/alibaba/Sentinel/commit/847f23ca79b52c308b39b229549b009b9772aeb0", "message": "Polish Tracer with entry.setError(ex) mechanism\n\nSigned-off-by: Eric Zhao <sczyh16@gmail.com>", "committedDate": "2020-04-26T13:02:39Z", "type": "commit"}, {"oid": "847f23ca79b52c308b39b229549b009b9772aeb0", "url": "https://github.com/alibaba/Sentinel/commit/847f23ca79b52c308b39b229549b009b9772aeb0", "message": "Polish Tracer with entry.setError(ex) mechanism\n\nSigned-off-by: Eric Zhao <sczyh16@gmail.com>", "committedDate": "2020-04-26T13:02:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMyMDU4OA==", "url": "https://github.com/alibaba/Sentinel/pull/1420#discussion_r415320588", "bodyText": "I found that with the new design, we needn't increaseExceptionQps here(Unexpected error), which looks nicer.\nBy the way, context.getCurEntry().setError(e) looks equivalent to Tracer.traceContext(e, context), and the difference is that traceContext has shouldTrace judgement.\nSince almost never happens here, both are okay, right?", "author": "cdfive", "createdAt": "2020-04-26T14:16:14Z", "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/statistic/StatisticSlot.java", "diffHunk": "@@ -115,52 +115,31 @@ public void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode\n \n             throw e;\n         } catch (Throwable e) {\n-            // Unexpected error, set error to current entry.\n+            // Unexpected internal error, set error to current entry.\n             context.getCurEntry().setError(e);\n \n-            // This should not happen.\n-            node.increaseExceptionQps(count);\n-            if (context.getCurEntry().getOriginNode() != null) {\n-                context.getCurEntry().getOriginNode().increaseExceptionQps(count);\n-            }\n-\n-            if (resourceWrapper.getEntryType() == EntryType.IN) {\n-                Constants.ENTRY_NODE.increaseExceptionQps(count);\n-            }\n             throw e;\n         }", "originalCommit": "847f23ca79b52c308b39b229549b009b9772aeb0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}