{"pr_number": 1431, "pr_title": "[1416]  fix sentinel-apache-dubbo-adapter full GC problem", "pr_createdAt": "2020-04-25T15:33:47Z", "pr_url": "https://github.com/alibaba/Sentinel/pull/1431", "timeline": [{"oid": "ed3b2ee3d18a88e68cab3c962c9de86b1b1b0b55", "url": "https://github.com/alibaba/Sentinel/commit/ed3b2ee3d18a88e68cab3c962c9de86b1b1b0b55", "message": "[1416] fix sentinel-apache-dubbo-adapter full gc problem", "committedDate": "2020-04-25T13:53:33Z", "type": "commit"}, {"oid": "2dbdd715f5a22b4a73e682d979d96bbc6c2615fc", "url": "https://github.com/alibaba/Sentinel/commit/2dbdd715f5a22b4a73e682d979d96bbc6c2615fc", "message": "[1416] fix sentinel-apache-dubbo-adapter full gc problem", "committedDate": "2020-04-25T13:54:21Z", "type": "commit"}, {"oid": "b854e2d7ae185f8d0efb5a85caee432d436a6757", "url": "https://github.com/alibaba/Sentinel/commit/b854e2d7ae185f8d0efb5a85caee432d436a6757", "message": "[1416] fix test error and update dubbo version", "committedDate": "2020-04-25T15:53:38Z", "type": "commit"}, {"oid": "69f51170046bce4d912fed6ddd64c88f9e540c36", "url": "https://github.com/alibaba/Sentinel/commit/69f51170046bce4d912fed6ddd64c88f9e540c36", "message": "[1416] fix test error and update dubbo version", "committedDate": "2020-04-25T16:01:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA5MTk5OQ==", "url": "https://github.com/alibaba/Sentinel/pull/1431#discussion_r415091999", "bodyText": "It's good adding a DubboUtils#getInterfaceName for resue.\nNow the interfaceResource and methodResource key are merged into one key, but the key name is methodResourceName, is it better using a fixed key(Provider and consumer use different fix key)?\n@sczyh30 How about your opinion?", "author": "cdfive", "createdAt": "2020-04-25T16:09:49Z", "path": "sentinel-adapter/sentinel-apache-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/SentinelDubboProviderFilter.java", "diffHunk": "@@ -61,15 +61,13 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept\n         Entry methodEntry = null;\n         try {\n             String methodResourceName = DubboUtils.getResourceName(invoker, invocation, DubboConfig.getDubboProviderPrefix());\n-            String interfaceResourceName = DubboConfig.getDubboInterfaceGroupAndVersionEnabled() ? invoker.getUrl().getColonSeparatedKey()\n-                    : invoker.getInterface().getName();\n+            String interfaceResourceName = DubboUtils.getInterfaceName(invoker);\n             // Only need to create entrance context at provider side, as context will take effect\n             // at entrance of invocation chain only (for inbound traffic).\n             ContextUtil.enter(methodResourceName, application);\n             interfaceEntry = SphU.entry(interfaceResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.IN);\n-            rpcContext.set(DubboUtils.DUBBO_INTERFACE_ENTRY_KEY, interfaceEntry);\n             methodEntry = SphU.entry(methodResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.IN, invocation.getArguments());\n-            rpcContext.set(DubboUtils.DUBBO_METHOD_ENTRY_KEY, methodEntry);\n+            rpcContext.set(methodResourceName, new Entry[]{interfaceEntry, methodEntry});\n             return invoker.invoke(invocation);", "originalCommit": "2dbdd715f5a22b4a73e682d979d96bbc6c2615fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMyNzE4Mg==", "url": "https://github.com/alibaba/Sentinel/pull/1431#discussion_r415327182", "bodyText": "Sorry for wrong idea, fixed key is incorrect here, since a method may have more than one consumer call with sync or async. I'm agree with adding the Sentinel prefix for identification.", "author": "cdfive", "createdAt": "2020-04-26T14:47:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA5MTk5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA5MzYxNw==", "url": "https://github.com/alibaba/Sentinel/pull/1431#discussion_r415093617", "bodyText": "As both SentinelDubboProviderFilter and SentinelDubboConsumerFilter share this method,  DubboConfig.getDubboConsumerPrefix() may not correct, when providerPrefix, consumerPrefix have different settings.\nIf use methodResourceName as key, here we may need to differentiate provider and consumer.", "author": "cdfive", "createdAt": "2020-04-25T16:18:32Z", "path": "sentinel-adapter/sentinel-apache-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/BaseSentinelDubboFilter.java", "diffHunk": "@@ -38,43 +42,46 @@ public BaseSentinelDubboFilter() {\n     static class SentinelDubboListener implements Listener {\n \n         public void onResponse(Result appResponse, Invoker<?> invoker, Invocation invocation) {\n-            onSuccess(appResponse, invoker);\n+            onSuccess(appResponse, invoker, invocation);\n         }\n \n         //for compatible dubbo 2.7.5 rename onResponse to onMessage\n         public void onMessage(Result appResponse, Invoker<?> invoker, Invocation invocation) {\n-            onSuccess(appResponse, invoker);\n+            onSuccess(appResponse, invoker, invocation);\n         }\n \n-        private void onSuccess(Result appResponse, Invoker<?> invoker) {\n+        private void onSuccess(Result appResponse, Invoker<?> invoker, Invocation invocation) {\n             if (DubboConfig.getDubboBizExceptionTraceEnabled()) {\n-                traceAndExit(appResponse.getException(), invoker.getUrl());\n+                traceAndExit(appResponse.getException(), invoker, invocation);\n             } else {\n-                traceAndExit(null, invoker.getUrl());\n+                traceAndExit(null, invoker, invocation);\n             }\n         }\n \n         @Override\n         public void onError(Throwable t, Invoker<?> invoker, Invocation invocation) {\n-            traceAndExit(t, invoker.getUrl());\n+            traceAndExit(t, invoker, invocation);\n         }\n \n     }\n \n-    static void traceAndExit(Throwable throwable, URL url) {\n-        Entry interfaceEntry = (Entry) RpcContext.getContext().get(DubboUtils.DUBBO_INTERFACE_ENTRY_KEY);\n-        Entry methodEntry = (Entry) RpcContext.getContext().get(DubboUtils.DUBBO_METHOD_ENTRY_KEY);\n-        if (methodEntry != null) {\n-            Tracer.traceEntry(throwable, methodEntry);\n-            methodEntry.exit();\n-            RpcContext.getContext().remove(DubboUtils.DUBBO_METHOD_ENTRY_KEY);\n-        }\n-        if (interfaceEntry != null) {\n-            Tracer.traceEntry(throwable, interfaceEntry);\n-            interfaceEntry.exit();\n-            RpcContext.getContext().remove(DubboUtils.DUBBO_INTERFACE_ENTRY_KEY);\n+    static void traceAndExit(Throwable throwable, Invoker invoker, Invocation invocation) {\n+        String methodResourceName = DubboUtils.getResourceName(invoker, invocation, DubboConfig.getDubboConsumerPrefix());\n+        Entry[] entries = (Entry[]) RpcContext.getContext().get(methodResourceName);", "originalCommit": "2dbdd715f5a22b4a73e682d979d96bbc6c2615fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE3OTE0NA==", "url": "https://github.com/alibaba/Sentinel/pull/1431#discussion_r415179144", "bodyText": "emm.. I don't notice this. I will modify it later.", "author": "linlinisme", "createdAt": "2020-04-26T00:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA5MzYxNw=="}], "type": "inlineReview"}, {"oid": "f9ad2bd7f6941f55db733af02b2a3df3b70770ff", "url": "https://github.com/alibaba/Sentinel/commit/f9ad2bd7f6941f55db733af02b2a3df3b70770ff", "message": "[1416] BaseSentinelDubboFilter add getMethodName() and getInterfaceName() method", "committedDate": "2020-04-26T01:07:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5NTAwMA==", "url": "https://github.com/alibaba/Sentinel/pull/1431#discussion_r415295000", "bodyText": "This may cause leak of interfaceEntry when the methodEntry is blocked. Refer #1124 (comment)", "author": "sczyh30", "createdAt": "2020-04-26T12:08:14Z", "path": "sentinel-adapter/sentinel-apache-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/SentinelDubboProviderFilter.java", "diffHunk": "@@ -60,16 +70,14 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept\n         Entry interfaceEntry = null;\n         Entry methodEntry = null;\n         try {\n-            String methodResourceName = DubboUtils.getResourceName(invoker, invocation, DubboConfig.getDubboProviderPrefix());\n-            String interfaceResourceName = DubboConfig.getDubboInterfaceGroupAndVersionEnabled() ? invoker.getUrl().getColonSeparatedKey()\n-                    : invoker.getInterface().getName();\n+            String methodResourceName = getMethodName(invoker, invocation);\n+            String interfaceResourceName = getInterfaceName(invoker);\n             // Only need to create entrance context at provider side, as context will take effect\n             // at entrance of invocation chain only (for inbound traffic).\n             ContextUtil.enter(methodResourceName, application);\n             interfaceEntry = SphU.entry(interfaceResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.IN);\n-            rpcContext.set(DubboUtils.DUBBO_INTERFACE_ENTRY_KEY, interfaceEntry);\n             methodEntry = SphU.entry(methodResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.IN, invocation.getArguments());\n-            rpcContext.set(DubboUtils.DUBBO_METHOD_ENTRY_KEY, methodEntry);\n+            rpcContext.set(methodResourceName, new Entry[]{interfaceEntry, methodEntry});", "originalCommit": "f9ad2bd7f6941f55db733af02b2a3df3b70770ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMyODQyMQ==", "url": "https://github.com/alibaba/Sentinel/pull/1431#discussion_r415328421", "bodyText": "+1, when methodEntry is blocked, the rpcContext#set can't be executed, and the value in rpcContext with key of methodResourceName is null. We may need to keep the same as the previous commit, use two different key separately.", "author": "cdfive", "createdAt": "2020-04-26T14:53:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5NTAwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMyNjE3NQ==", "url": "https://github.com/alibaba/Sentinel/pull/1431#discussion_r415326175", "bodyText": "It's better to keep only one blank line here.\nAlso Line#78,Line#80.\nLine#104 can be removed for better and uniform formatting.", "author": "cdfive", "createdAt": "2020-04-26T14:42:28Z", "path": "sentinel-adapter/sentinel-apache-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/BaseSentinelDubboFilter.java", "diffHunk": "@@ -35,47 +38,69 @@ public BaseSentinelDubboFilter() {\n         this.listener = new SentinelDubboListener();\n     }\n \n-    static class SentinelDubboListener implements Listener {\n+", "originalCommit": "f9ad2bd7f6941f55db733af02b2a3df3b70770ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1f224ff7522644b9d0284c1ef01d51eca63fe17b", "url": "https://github.com/alibaba/Sentinel/commit/1f224ff7522644b9d0284c1ef01d51eca63fe17b", "message": "[1416] refactor  SentinelDubboConsumerFilter and SentinelDubboProviderFilter", "committedDate": "2020-04-28T01:23:57Z", "type": "commit"}, {"oid": "57c689259c3cc9265f66df596c86e0159eb7b2d7", "url": "https://github.com/alibaba/Sentinel/commit/57c689259c3cc9265f66df596c86e0159eb7b2d7", "message": "[1416] BaseSentinelDubboFilter add getMethodName() and getInterfaceName() method", "committedDate": "2020-04-28T14:19:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM1NDE1Mw==", "url": "https://github.com/alibaba/Sentinel/pull/1431#discussion_r430354153", "bodyText": "How about using Deque instead to avoid bad performance? Stack is derived from Vector, whose operations are wrapped with synchronized.", "author": "sczyh30", "createdAt": "2020-05-26T11:51:50Z", "path": "sentinel-adapter/sentinel-apache-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/SentinelDubboConsumerFilter.java", "diffHunk": "@@ -52,33 +55,87 @@ public SentinelDubboConsumerFilter() {\n         RecordLog.info(\"Sentinel Apache Dubbo consumer filter initialized\");\n     }\n \n+    @Override\n+    String getMethodName(Invoker invoker, Invocation invocation) {\n+        return DubboUtils.getResourceName(invoker, invocation, DubboConfig.getDubboConsumerPrefix());\n+    }\n+\n+    @Override\n+    String getInterfaceName(Invoker invoker) {\n+        return DubboUtils.getInterfaceName(invoker);\n+    }\n+\n     @Override\n     public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n+        InvokeMode invokeMode = RpcUtils.getInvokeMode(invoker.getUrl(), invocation);\n+        if (InvokeMode.SYNC == invokeMode) {\n+            return syncInvoke(invoker, invocation);\n+        } else {\n+            return asyncInvoke(invoker, invocation);\n+        }\n+\n+    }\n+\n+    private Result syncInvoke(Invoker<?> invoker, Invocation invocation) {\n         Entry interfaceEntry = null;\n         Entry methodEntry = null;\n-        RpcContext rpcContext = RpcContext.getContext();\n+        String methodResourceName = getMethodName(invoker, invocation);\n+        String interfaceResourceName = getInterfaceName(invoker);\n         try {\n-            String methodResourceName = DubboUtils.getResourceName(invoker, invocation, DubboConfig.getDubboConsumerPrefix());\n-            String interfaceResourceName = DubboConfig.getDubboInterfaceGroupAndVersionEnabled() ? invoker.getUrl().getColonSeparatedKey()\n-                    : invoker.getInterface().getName();\n-            InvokeMode invokeMode = RpcUtils.getInvokeMode(invoker.getUrl(), invocation);\n-\n-            if (InvokeMode.SYNC == invokeMode) {\n-                interfaceEntry = SphU.entry(interfaceResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.OUT);\n-                rpcContext.set(DubboUtils.DUBBO_INTERFACE_ENTRY_KEY, interfaceEntry);\n-                methodEntry = SphU.entry(methodResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.OUT, invocation.getArguments());\n-            } else {\n-                // should generate the AsyncEntry when the invoke model in future or async\n-                interfaceEntry = SphU.asyncEntry(interfaceResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.OUT);\n-                rpcContext.set(DubboUtils.DUBBO_INTERFACE_ENTRY_KEY, interfaceEntry);\n-                methodEntry = SphU.asyncEntry(methodResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.OUT, 1, invocation.getArguments());\n+            interfaceEntry = SphU.entry(interfaceResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.OUT);\n+            methodEntry = SphU.entry(methodResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.OUT, invocation.getArguments());\n+            Result result = invoker.invoke(invocation);\n+            if (result.hasException()) {\n+                Tracer.traceEntry(result.getException(), interfaceEntry);\n+                Tracer.traceEntry(result.getException(), methodEntry);\n+            }\n+            return result;\n+        } catch (BlockException e) {\n+            return DubboFallbackRegistry.getConsumerFallback().handle(invoker, invocation, e);\n+        } catch (RpcException e) {\n+            Tracer.traceEntry(e, interfaceEntry);\n+            Tracer.traceEntry(e, methodEntry);\n+            throw e;\n+        } finally {\n+            if (methodEntry != null) {\n+                methodEntry.exit();\n+            }\n+            if (interfaceEntry != null) {\n+                interfaceEntry.exit();\n             }\n-            rpcContext.set(DubboUtils.DUBBO_METHOD_ENTRY_KEY, methodEntry);\n-            return invoker.invoke(invocation);\n+        }\n+    }\n+\n+\n+    private Result asyncInvoke(Invoker<?> invoker, Invocation invocation) {\n+        Stack<Entry> entryStack = new Stack<>();", "originalCommit": "57c689259c3cc9265f66df596c86e0159eb7b2d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU3ODc0MQ==", "url": "https://github.com/alibaba/Sentinel/pull/1431#discussion_r431578741", "bodyText": "Oh why not using final here? Any performance related reason?", "author": "jasonjoo2010", "createdAt": "2020-05-28T04:46:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM1NDE1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIzNzU0OQ==", "url": "https://github.com/alibaba/Sentinel/pull/1431#discussion_r432237549", "bodyText": "final can improve the performance highly?", "author": "Lin-Liang", "createdAt": "2020-05-29T03:34:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM1NDE1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI1NTkzNg==", "url": "https://github.com/alibaba/Sentinel/pull/1431#discussion_r432255936", "bodyText": "final can improve the performance highly?\n\nNot really.\nTalk to performance in time efficiency i should say there isn't obvious difference. It's a suggestion aiming:\n\nNo extra data structure was introduced.\nLook simpler\nImplicit reference was introduced for Stack or Dequeue compared to final. They are similar in this view.", "author": "jasonjoo2010", "createdAt": "2020-05-29T04:58:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM1NDE1Mw=="}], "type": "inlineReview"}, {"oid": "0766b9ca709483a4c06f68d7826a45092cc7cb71", "url": "https://github.com/alibaba/Sentinel/commit/0766b9ca709483a4c06f68d7826a45092cc7cb71", "message": "[1416] replace Stack with LinkedList for improve performance\n\n[1416] replace Stack with LinkedList for improve performance", "committedDate": "2020-05-26T15:41:04Z", "type": "commit"}]}