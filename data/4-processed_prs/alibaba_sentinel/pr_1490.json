{"pr_number": 1490, "pr_title": "Refactor degrade hierarchy with new circuit breaker mechanism and improve strategy", "pr_createdAt": "2020-05-18T15:12:13Z", "pr_url": "https://github.com/alibaba/Sentinel/pull/1490", "timeline": [{"oid": "c017b12789fd86fb0e42955696ce74dcef09c94f", "url": "https://github.com/alibaba/Sentinel/commit/c017b12789fd86fb0e42955696ce74dcef09c94f", "message": "Update test cases for circuit breaking\n\nSigned-off-by: Eric Zhao <sczyh16@gmail.com>", "committedDate": "2020-05-18T15:27:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3NzI1Mg==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r427877252", "bodyText": "Inside getExistingSameCbOrNew method, the design of reuse the circuit breaker if the rule remains unchanged.is smart. I tried with DegradeRuleManager.loadRules in different places, it works. A small question is that, if using DegradeRuleManager.loadRules(rules) first time, and rules have two same DegradeRule , there will be two CircuitBreaker created, since in the first time, the static circuitBreakers variable is null.", "author": "cdfive", "createdAt": "2020-05-20T09:40:32Z", "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeRuleManager.java", "diffHunk": "@@ -146,88 +142,128 @@ public static boolean setRulesForResource(String resourceName, Set<DegradeRule>\n             }\n             return currentProperty.updateValue(allRules);\n         } catch (Throwable e) {\n-            RecordLog.warn(\n-                \"[DegradeRuleManager] Unexpected error when setting degrade rules for resource: \" + resourceName, e);\n+            RecordLog.error(\"[DegradeRuleManager] Unexpected error when setting circuit breaking\"\n+                + \" rules for resource: \" + resourceName, e);\n+            return false;\n+        }\n+    }\n+\n+    private static CircuitBreaker getExistingSameCbOrNew(/*@Valid*/ DegradeRule rule) {\n+        List<CircuitBreaker> cbs = getCircuitBreakers(rule.getResource());\n+        if (cbs == null || cbs.isEmpty()) {\n+            return newCircuitBreakerFrom(rule);\n+        }\n+        for (CircuitBreaker cb : cbs) {\n+            if (rule.equals(cb.getRule())) {\n+                // Reuse the circuit breaker if the rule remains unchanged.\n+                return cb;\n+            }\n+        }\n+        return newCircuitBreakerFrom(rule);\n+    }\n+\n+    /**\n+     * Create a circuit breaker instance from provided circuit breaking rule.\n+     *\n+     * @param rule a valid circuit breaking rule\n+     * @return new circuit breaker based on provided rule; null if rule is invalid or unsupported type\n+     */\n+    private static CircuitBreaker newCircuitBreakerFrom(/*@Valid*/ DegradeRule rule) {\n+        switch (rule.getGrade()) {\n+            case RuleConstant.DEGRADE_GRADE_RT:\n+                return new ResponseTimeCircuitBreaker(rule);\n+            case RuleConstant.DEGRADE_GRADE_EXCEPTION_RATIO:\n+            case RuleConstant.DEGRADE_GRADE_EXCEPTION_COUNT:\n+                return new ExceptionCircuitBreaker(rule);\n+            default:\n+                return null;\n+        }\n+    }\n+\n+    public static boolean isValidRule(DegradeRule rule) {\n+        boolean baseValid = rule != null && !StringUtil.isBlank(rule.getResource())\n+            && rule.getCount() >= 0 && rule.getTimeWindow() > 0;\n+        if (!baseValid) {\n+            return false;\n+        }\n+        if (rule.getMinRequestAmount() <= 0 || rule.getStatIntervalMs() <= 0) {\n             return false;\n         }\n+        switch (rule.getGrade()) {\n+            case RuleConstant.DEGRADE_GRADE_RT:\n+                return rule.getSlowRatioThreshold() >= 0 && rule.getSlowRatioThreshold() <= 1;\n+            case RuleConstant.DEGRADE_GRADE_EXCEPTION_RATIO:\n+                return rule.getCount() <= 1;\n+            case RuleConstant.DEGRADE_GRADE_EXCEPTION_COUNT:\n+                return true;\n+            default:\n+                return false;\n+        }\n     }\n \n     private static class RulePropertyListener implements PropertyListener<List<DegradeRule>> {\n \n+        private synchronized void reloadFrom(List<DegradeRule> list) {\n+            Map<String, List<CircuitBreaker>> cbs = buildCircuitBreakers(list);\n+            Map<String, Set<DegradeRule>> rm = new HashMap<>(cbs.size());\n+\n+            for (Map.Entry<String, List<CircuitBreaker>> e : cbs.entrySet()) {\n+                if (e.getValue() == null || e.getValue().isEmpty()) {\n+                    continue;\n+                }\n+                Set<DegradeRule> rules = new HashSet<>(e.getValue().size());\n+                for (CircuitBreaker cb : e.getValue()) {\n+                    rules.add(cb.getRule());\n+                }\n+                rm.put(e.getKey(), rules);\n+            }\n+\n+            DegradeRuleManager.circuitBreakers = cbs;\n+            DegradeRuleManager.ruleMap = rm;\n+        }\n+\n         @Override\n         public void configUpdate(List<DegradeRule> conf) {\n-            Map<String, Set<DegradeRule>> rules = loadDegradeConf(conf);\n-            if (rules != null) {\n-                degradeRules.clear();\n-                degradeRules.putAll(rules);\n-            }\n-            RecordLog.info(\"[DegradeRuleManager] Degrade rules received: \" + degradeRules);\n+            reloadFrom(conf);\n+            RecordLog.info(\"[DegradeRuleManager] Degrade rules has been updated to: \" + ruleMap);\n         }\n \n         @Override\n         public void configLoad(List<DegradeRule> conf) {\n-            Map<String, Set<DegradeRule>> rules = loadDegradeConf(conf);\n-            if (rules != null) {\n-                degradeRules.clear();\n-                degradeRules.putAll(rules);\n-            }\n-            RecordLog.info(\"[DegradeRuleManager] Degrade rules loaded: \" + degradeRules);\n+            reloadFrom(conf);\n+            RecordLog.info(\"[DegradeRuleManager] Degrade rules loaded: \" + ruleMap);\n         }\n \n-        private Map<String, Set<DegradeRule>> loadDegradeConf(List<DegradeRule> list) {\n-            Map<String, Set<DegradeRule>> newRuleMap = new ConcurrentHashMap<>();\n-\n+        private Map<String, List<CircuitBreaker>> buildCircuitBreakers(List<DegradeRule> list) {\n+            Map<String, List<CircuitBreaker>> cbMap = new HashMap<>(8);\n             if (list == null || list.isEmpty()) {\n-                return newRuleMap;\n+                return cbMap;\n             }\n-\n             for (DegradeRule rule : list) {\n                 if (!isValidRule(rule)) {\n-                    RecordLog.warn(\n-                        \"[DegradeRuleManager] Ignoring invalid degrade rule when loading new rules: \" + rule);\n+                    RecordLog.warn(\"[DegradeRuleManager] Ignoring invalid rule when loading new rules: \" + rule);\n                     continue;\n                 }\n \n                 if (StringUtil.isBlank(rule.getLimitApp())) {\n                     rule.setLimitApp(RuleConstant.LIMIT_APP_DEFAULT);\n                 }\n-\n-                String identity = rule.getResource();\n-                Set<DegradeRule> ruleSet = newRuleMap.get(identity);\n-                if (ruleSet == null) {\n-                    ruleSet = new HashSet<>();\n-                    newRuleMap.put(identity, ruleSet);\n+                CircuitBreaker cb = getExistingSameCbOrNew(rule);\n+                if (cb == null) {\n+                    RecordLog.warn(\"[DegradeRuleManager] Unknown circuit breaking strategy, ignoring: \" + rule);\n+                    continue;\n                 }\n-                ruleSet.add(rule);", "originalCommit": "4c043ed94b2e949a7e8871690e0d9008d273efdd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIwMTA0Mw==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r442201043", "bodyText": "Yes, it can be improved.", "author": "sczyh30", "createdAt": "2020-06-18T12:50:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3NzI1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3ODk0OQ==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r427878949", "bodyText": "This judgement seems can be removed since Line#63.", "author": "cdfive", "createdAt": "2020-05-20T09:43:17Z", "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeSlot.java", "diffHunk": "@@ -15,30 +15,73 @@\n  */\n package com.alibaba.csp.sentinel.slots.block.degrade;\n \n+import java.util.List;\n+\n+import com.alibaba.csp.sentinel.Entry;\n import com.alibaba.csp.sentinel.context.Context;\n import com.alibaba.csp.sentinel.node.DefaultNode;\n import com.alibaba.csp.sentinel.slotchain.AbstractLinkedProcessorSlot;\n import com.alibaba.csp.sentinel.slotchain.ProcessorSlot;\n import com.alibaba.csp.sentinel.slotchain.ResourceWrapper;\n+import com.alibaba.csp.sentinel.slots.block.BlockException;\n+import com.alibaba.csp.sentinel.slots.block.degrade.circuitbreaker.CircuitBreaker;\n import com.alibaba.csp.sentinel.spi.SpiOrder;\n+import com.alibaba.csp.sentinel.util.TimeUtil;\n \n /**\n- * A {@link ProcessorSlot} dedicates to {@link DegradeRule} checking.\n+ * A {@link ProcessorSlot} dedicates to circuit breaking.\n  *\n- * @author leyou\n+ * @author Carpenter Lee\n+ * @author Eric Zhao\n  */\n @SpiOrder(-1000)\n public class DegradeSlot extends AbstractLinkedProcessorSlot<DefaultNode> {\n \n     @Override\n-    public void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode node, int count, boolean prioritized, Object... args)\n-        throws Throwable {\n-        DegradeRuleManager.checkDegrade(resourceWrapper, context, node, count);\n+    public void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode node, int count,\n+                      boolean prioritized, Object... args) throws Throwable {\n+        performChecking(resourceWrapper);\n+\n         fireEntry(context, resourceWrapper, node, count, prioritized, args);\n     }\n \n+    void performChecking(ResourceWrapper r) throws BlockException {\n+        List<CircuitBreaker> circuitBreakers = DegradeRuleManager.getCircuitBreakers(r.getName());\n+        if (circuitBreakers == null || circuitBreakers.isEmpty()) {\n+            return;\n+        }\n+        for (CircuitBreaker cb : circuitBreakers) {\n+            if (!cb.tryPass()) {\n+                throw new DegradeException(cb.getRule().getLimitApp(), cb.getRule());\n+            }\n+        }\n+    }\n+\n     @Override\n-    public void exit(Context context, ResourceWrapper resourceWrapper, int count, Object... args) {\n-        fireExit(context, resourceWrapper, count, args);\n+    public void exit(Context context, ResourceWrapper r, int count, Object... args) {\n+        Entry curEntry = context.getCurEntry();\n+        if (curEntry.getBlockError() != null) {\n+            fireExit(context, r, count, args);\n+            return;\n+        }\n+        List<CircuitBreaker> circuitBreakers = DegradeRuleManager.getCircuitBreakers(r.getName());\n+        if (circuitBreakers == null || circuitBreakers.isEmpty()) {\n+            fireExit(context, r, count, args);\n+            return;\n+        }\n+\n+        if (curEntry.getBlockError() == null) {", "originalCommit": "4c043ed94b2e949a7e8871690e0d9008d273efdd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIwMTg4Ng==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r442201886", "bodyText": "It's here in case the blockError was modified.", "author": "sczyh30", "createdAt": "2020-06-18T12:51:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3ODk0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczMDY5Nw==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r449730697", "bodyText": "Is it really concurrent? And the time lapse is really tiny here.", "author": "jasonjoo2010", "createdAt": "2020-07-04T02:26:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3ODk0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4MzE4OQ==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r436483189", "bodyText": "If thare are two breakers and curState is open, one breaker tryPass and change state to half open, but other breaker tryPass return false, it is right that no request be allowed. but the below requests will not be allowed because two breakers tryPass can't both be true.", "author": "wavesZh", "createdAt": "2020-06-08T06:38:06Z", "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/circuitbreaker/AbstractCircuitBreaker.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 1999-2019 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.slots.block.degrade.circuitbreaker;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;\n+import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRuleManager;\n+import com.alibaba.csp.sentinel.util.AssertUtil;\n+import com.alibaba.csp.sentinel.util.TimeUtil;\n+\n+/**\n+ * @author Eric Zhao\n+ * @since 1.8.0\n+ */\n+public abstract class AbstractCircuitBreaker implements CircuitBreaker {\n+\n+    protected final DegradeRule rule;\n+    protected final int retryTimeoutMs;\n+\n+    private final EventObserverRegistry observerRegistry;\n+\n+    protected final AtomicReference<State> currentState = new AtomicReference<>(State.CLOSED);\n+    protected volatile long nextRetryTimestamp;\n+\n+    public AbstractCircuitBreaker(DegradeRule rule) {\n+        this(rule, EventObserverRegistry.getInstance());\n+    }\n+\n+    AbstractCircuitBreaker(DegradeRule rule, EventObserverRegistry observerRegistry) {\n+        AssertUtil.notNull(observerRegistry, \"observerRegistry cannot be null\");\n+        if (!DegradeRuleManager.isValidRule(rule)) {\n+            throw new IllegalArgumentException(\"Invalid DegradeRule: \" + rule);\n+        }\n+        this.observerRegistry = observerRegistry;\n+        this.rule = rule;\n+        this.retryTimeoutMs = rule.getTimeWindow() * 1000;\n+    }\n+\n+    @Override\n+    public DegradeRule getRule() {\n+        return rule;\n+    }\n+\n+    @Override\n+    public State currentState() {\n+        return currentState.get();\n+    }\n+\n+    @Override\n+    public boolean tryPass() {\n+        // Template implementation.\n+        if (currentState.get() == State.CLOSED) {\n+            return true;\n+        }\n+        if (currentState.get() == State.OPEN) {\n+            // For half-open state we allow a request for trial.\n+            return retryTimeoutArrived() && fromOpenToHalfOpen();\n+        }\n+        return false;\n+    }", "originalCommit": "4c043ed94b2e949a7e8871690e0d9008d273efdd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI5NTExNw==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r461295117", "bodyText": "@sczyh30  Any idea for the scene\uff1fWas I wrong\uff1f", "author": "wavesZh", "createdAt": "2020-07-28T03:26:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4MzE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcyNjY0Ng==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r461726646", "bodyText": "I think it's ok for this scenario.\nB1(open) & B2(open)   -> no request at all\nB1(open -> half) & B2(open)   -> no request at all, but B1 may transform to closed leaving B2 alone, that is:\nB1(closed) & B2(open)", "author": "jasonjoo2010", "createdAt": "2020-07-28T16:49:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4MzE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5MDUxMA==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r461990510", "bodyText": "Sorry, i cannot find how to change half-open to close.\nMethod fromHalfOpenToClose is invoked in DegradeSlot#exist when no BlockingException. But if B1(open -> half) & B2(open), the follow requests check by CircuitBreaker#tryPass must return false then throw DegradeException.", "author": "wavesZh", "createdAt": "2020-07-29T01:50:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4MzE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5NTA5MQ==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r461995091", "bodyText": "Requests is blocked by tryPass() in abstract parent and the state of breakers are maintained in different implementations when requests complete (post-request).\nSo they are not collided.", "author": "jasonjoo2010", "createdAt": "2020-07-29T02:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4MzE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNzcyMA==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r462007720", "bodyText": "\u53ef\u80fd\u6211\u8bf4\u7684\u4e0d\u6e05\u695a\u3002\n\u5047\u5982\u6b64\u65f6 B1(open) & B2(open)\uff0cB1,B2\u7684 recoveryTimeoutMs \u4e0d\u4e00\u6837\uff0c\u4e0b\u4e00\u4e2a\u8bf7\u6c42\u5bfc\u81f4B1(half)\uff0c\u800cB2\u7531\u4e8e\u8fd8\u672a\u8fbe\u5230 timeout \u65f6\u95f4\uff0c\u4ecd\u4fdd\u6301 B2(open)\uff0c\u6545 tryPass \u4e0d\u901a\u8fc7\u8fdb\u800c\u629b\u51fa BlockException. \u5728 DegradeSlot#exit \u4e2d\u4ec5\u5bf9\u975e BlockException \u7684\u60c5\u51b5\u7ef4\u62a4 Breaker \u72b6\u6001\uff0c\u6545\u6b64\u65f6 B1(half) & B2(open).\npublic void exit(Context context, ResourceWrapper r, int count, Object... args) {\n        Entry curEntry = context.getCurEntry();\n        if (curEntry.getBlockError() != null) {\n            fireExit(context, r, count, args);\n            return;\n        }\n        ...\n        if (curEntry.getBlockError() == null) {\n          ...\n          for (CircuitBreaker circuitBreaker : circuitBreakers) {\n                circuitBreaker.onRequestComplete(rt, error);\n            }\n        }\n       ...\n}\n\u540e\u9762\u7684\u8bf7\u6c42\uff0c\u7531\u4e8e B1 \u4e0d\u7b26\u5408 [open, close] \u72b6\u6001\uff0ctryPass \u5fc5\u7136\u4e3a false \u53c8\u629b BlockException\uff0c\u8fdb\u5165\u5faa\u73af\u3002\n\nB1(open -> half) & B2(open) -> no request at all, but B1 may transform to closed leaving B2 alone, that is:\nB1(closed) & B2(open)\n\n\u8fd9\u4e2a\u6211\u6ca1\u627e\u5230\u5728\u4ec0\u4e48\u54ea\u91cc\u6709\u4e2a\u903b\u8f91\u5b9e\u73b0\u3002", "author": "wavesZh", "createdAt": "2020-07-29T02:55:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4MzE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxNDM3NQ==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r462014375", "bodyText": "\u5662\u6211\u61c2\u4f60\u5173\u6ce8\u7684\u70b9\u4e86\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u573a\u666f\u4e2d\u7684\u5904\u7406\u6709\u95ee\u9898\u5417\uff1f\nB1/B2\u540c\u65f6\u5bf9\u8d44\u6e90\u505a\u5904\u7406\uff08\u4f8b\u5982\u4e00\u4e2a\u9488\u5bf9RT\u4e00\u4e2a\u9488\u5bf9ErrorRate\uff09\uff0c\u8fd9\u65f6\u4e00\u4e2a\u5173\u65ad\u4e00\u4e2a\u4ece\u5173\u65ad\u8fdb\u5165\u534a\u6062\u590d\u72b6\u6001\uff0c\u90a3\u4e48\u5355\u4e2a\u7684\u72b6\u6001\u662f\u4e0d\u662f\u6709\u53ca\u65f6\u6062\u590d\uff0c\u7406\u8bba\u4e0a\u6ca1\u8fd9\u4e48\u91cd\u8981\uff0c\u56e0\u4e3a\u5176\u4e2d\u4e4b\u4e00\u5173\u65ad\u5219\u8d44\u6e90\u5173\u65ad\uff0c\u4e24\u8005\u8f83\u957f\u6062\u590d\u65f6\u95f4\u8005\u8fdb\u5165\u534a\u5f00\u5219\u4e24\u8005\u6062\u590d\u901a\u8def\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7ba1\u63a7\u6307\u6807\u540c\u4e00\u8d44\u6e90\u7684\u65ad\u8def\u5668\u8fd9\u91cc\u8c8c\u4f3c\u4e0d\u5b58\u5728\u95ee\u9898\u3002\u662f\u8fd9\u6837\u5417\uff1f", "author": "jasonjoo2010", "createdAt": "2020-07-29T03:20:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4MzE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxODIyNA==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r462018224", "bodyText": "\u4e0d\u5bf9\u5427\u3002\n\n\u540e\u9762\u7684\u8bf7\u6c42\uff0c\u7531\u4e8e B1 \u4e0d\u7b26\u5408 [open, close] \u72b6\u6001\uff0ctryPass \u5fc5\u7136\u4e3a false \u53c8\u629b BlockException\uff0c\u8fdb\u5165\u5faa\u73af\n\n\u5c31\u7b97 B2 \u53ef\u4ee5\u8fdb\u5165\u534a\u5f00\uff0c\u4f46\u662f B1(half) \u4e5f\u4f1a\u56e0\u4e3a\u4e0a\u9762\u7684\u5224\u65ad\u5bfc\u81f4\u629b\u51fa BlockException\uff0c\u540e\u7eed\u5728 exit \u65b9\u6cd5\u4e2d\u4e5f\u4e0d\u4f1a\u5c1d\u8bd5\u66f4\u6539\u65ad\u8def\u5668\u7684\u72b6\u6001\u4e86\uff0c\u4e0d\u4f1a\u518d\u6062\u590d\u901a\u8def\u4e86", "author": "wavesZh", "createdAt": "2020-07-29T03:36:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4MzE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAyNDA3OQ==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r462024079", "bodyText": "\u5728tryPass\u4e2d\uff0c\nopen -> false\nclosed -> true\nhalf -> retryTimeout && halfToOpen\n\u8fd9\u91cc\u5e76\u4e0d\u662f\u8bf4\u975eopen\u975eclose\u4e00\u5b9afalse\u7684\uff0c\u662f\u6211\u7406\u89e3\u9519\u4e86\u5417\uff1f", "author": "jasonjoo2010", "createdAt": "2020-07-29T03:59:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4MzE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAyODY5MA==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r462028690", "bodyText": "public boolean tryPass() {\n        // Template implementation.\n        if (currentState.get() == State.CLOSED) {\n            return true;\n        }\n        if (currentState.get() == State.OPEN) {\n            // For half-open state we allow a request for trial.\n            return retryTimeoutArrived() && fromOpenToHalfOpen();\n        }\n        return false;\n    }\n\u6211\u5df2\u7ecf\u81ea\u6211\u6000\u7591\u4e86\ud83e\udd28\ud83d\ude22  \u662f\u6211\u7406\u89e3\u9519\u4e86\u5417\uff1f\uff1f", "author": "wavesZh", "createdAt": "2020-07-29T04:19:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4MzE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAzMzI3NA==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r462033274", "bodyText": "```java\npublic boolean tryPass() {\n        // Template implementation.\n        if (currentState.get() == State.CLOSED) {\n            return true;\n        }\n        if (currentState.get() == State.OPEN) {\n            // For half-open state we allow a request for trial.\n            return retryTimeoutArrived() && fromOpenToHalfOpen();\n        }\n        return false;\n    }\n\u6211\u5df2\u7ecf\u81ea\u6211\u6000\u7591\u4e86\ud83e\udd28\ud83d\ude22  \u662f\u6211\u7406\u89e3\u9519\u4e86\u5417\uff1f\uff1f\n\n\nemmm.........\u4ed4\u7ec6\u60f3\u4e86\u4e0b\uff0c\u4f60\u8003\u8651\u7684\u95ee\u9898\u7684\u786e\u5b58\u5728\uff0c\u800c\u4e14\u8c8c\u4f3c\u8fd8\u5b58\u5728\u5176\u5b83\u9650\u6d41\u89c4\u5219\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u8fd9\u91cc\u5e76\u6ca1\u6709\u5224\u65ad\u662f\u4e0d\u662fDegradeException\uff0c\u5f85\u6211\u4e0b\u5348\u62ffTest\u6d4b\u4e00\u4e0b", "author": "jasonjoo2010", "createdAt": "2020-07-29T04:38:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4MzE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3OTk1OQ==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r462079959", "bodyText": "@sczyh30 Hi, Eric\nHere're some boundaries which lead to new issues while we should discuss more how to make the recovery logic better:\n\nMultiple degrading rules for same resource(Especially after introducing prefix/postfix matching)\nAnother rule after degrading rule in half-open state(Though there's no such kind of rule but it's possible in future)\n\nThese will lead to the incorrect workflow:\nentry:   R0(open -> half) -> R1(block)\nexit: XXXBlockException -> skip the detection for stalling half state\nFor straightforward patch i think the onComplete method is intentioned to be call after a successfully transforming into half. We should make the exiting logic more simple and clear.", "author": "jasonjoo2010", "createdAt": "2020-07-29T06:58:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4MzE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg4MTE5MQ==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r462881191", "bodyText": "@jasonjoo2010 @wavesZh Yes, it's a fatal bug indeed and should be resolved immediately. However we need a better temporary workaround for this (for the half-open case). I'll merge this PR first and we may discuss it in a new issue. It's a common problem for all rules that have their own metrics and rely on onComplete.", "author": "sczyh30", "createdAt": "2020-07-30T09:47:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4MzE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkzNTc0NQ==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r462935745", "bodyText": "See #1638", "author": "sczyh30", "createdAt": "2020-07-30T11:38:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4MzE4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEwMDc3OA==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r437100778", "bodyText": "I think \"attempt/try\" is better than \"retry\"", "author": "wavesZh", "createdAt": "2020-06-09T02:20:17Z", "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/circuitbreaker/AbstractCircuitBreaker.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 1999-2019 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.slots.block.degrade.circuitbreaker;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;\n+import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRuleManager;\n+import com.alibaba.csp.sentinel.util.AssertUtil;\n+import com.alibaba.csp.sentinel.util.TimeUtil;\n+\n+/**\n+ * @author Eric Zhao\n+ * @since 1.8.0\n+ */\n+public abstract class AbstractCircuitBreaker implements CircuitBreaker {\n+\n+    protected final DegradeRule rule;\n+    protected final int retryTimeoutMs;", "originalCommit": "4c043ed94b2e949a7e8871690e0d9008d273efdd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc2MTg5MA==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r460761890", "bodyText": "Maybe \"recoveryTimeout\"?", "author": "sczyh30", "createdAt": "2020-07-27T09:26:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEwMDc3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI5NjAzOQ==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r461296039", "bodyText": "\u201cnextRetryTimestamp\u201d is same above .", "author": "wavesZh", "createdAt": "2020-07-28T03:30:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEwMDc3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczMDI5Mw==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r449730293", "bodyText": "Why don't use ruleMap here? Though they are equivalent on performance i think but maybe makes more sense.", "author": "jasonjoo2010", "createdAt": "2020-07-04T02:19:34Z", "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeRuleManager.java", "diffHunk": "@@ -98,12 +87,19 @@ public static boolean hasConfig(String resource) {\n      */\n     public static List<DegradeRule> getRules() {\n         List<DegradeRule> rules = new ArrayList<>();\n-        for (Map.Entry<String, Set<DegradeRule>> entry : degradeRules.entrySet()) {\n-            rules.addAll(entry.getValue());\n+        for (Map.Entry<String, List<CircuitBreaker>> entry : circuitBreakers.entrySet()) {\n+            for (CircuitBreaker cb : entry.getValue()) {", "originalCommit": "4c043ed94b2e949a7e8871690e0d9008d273efdd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwOTYzNQ==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r460809635", "bodyText": "I'll fix it.", "author": "sczyh30", "createdAt": "2020-07-27T10:56:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczMDI5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczMDQyOA==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r449730428", "bodyText": "I think it's not necessary for this condition branch. Because they are private logics.", "author": "jasonjoo2010", "createdAt": "2020-07-04T02:21:41Z", "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeRuleManager.java", "diffHunk": "@@ -146,88 +142,128 @@ public static boolean setRulesForResource(String resourceName, Set<DegradeRule>\n             }\n             return currentProperty.updateValue(allRules);\n         } catch (Throwable e) {\n-            RecordLog.warn(\n-                \"[DegradeRuleManager] Unexpected error when setting degrade rules for resource: \" + resourceName, e);\n+            RecordLog.error(\"[DegradeRuleManager] Unexpected error when setting circuit breaking\"\n+                + \" rules for resource: \" + resourceName, e);\n+            return false;\n+        }\n+    }\n+\n+    private static CircuitBreaker getExistingSameCbOrNew(/*@Valid*/ DegradeRule rule) {\n+        List<CircuitBreaker> cbs = getCircuitBreakers(rule.getResource());\n+        if (cbs == null || cbs.isEmpty()) {\n+            return newCircuitBreakerFrom(rule);\n+        }\n+        for (CircuitBreaker cb : cbs) {\n+            if (rule.equals(cb.getRule())) {\n+                // Reuse the circuit breaker if the rule remains unchanged.\n+                return cb;\n+            }\n+        }\n+        return newCircuitBreakerFrom(rule);\n+    }\n+\n+    /**\n+     * Create a circuit breaker instance from provided circuit breaking rule.\n+     *\n+     * @param rule a valid circuit breaking rule\n+     * @return new circuit breaker based on provided rule; null if rule is invalid or unsupported type\n+     */\n+    private static CircuitBreaker newCircuitBreakerFrom(/*@Valid*/ DegradeRule rule) {\n+        switch (rule.getGrade()) {\n+            case RuleConstant.DEGRADE_GRADE_RT:\n+                return new ResponseTimeCircuitBreaker(rule);\n+            case RuleConstant.DEGRADE_GRADE_EXCEPTION_RATIO:\n+            case RuleConstant.DEGRADE_GRADE_EXCEPTION_COUNT:\n+                return new ExceptionCircuitBreaker(rule);\n+            default:\n+                return null;\n+        }\n+    }\n+\n+    public static boolean isValidRule(DegradeRule rule) {\n+        boolean baseValid = rule != null && !StringUtil.isBlank(rule.getResource())\n+            && rule.getCount() >= 0 && rule.getTimeWindow() > 0;\n+        if (!baseValid) {\n+            return false;\n+        }\n+        if (rule.getMinRequestAmount() <= 0 || rule.getStatIntervalMs() <= 0) {\n             return false;\n         }\n+        switch (rule.getGrade()) {\n+            case RuleConstant.DEGRADE_GRADE_RT:\n+                return rule.getSlowRatioThreshold() >= 0 && rule.getSlowRatioThreshold() <= 1;\n+            case RuleConstant.DEGRADE_GRADE_EXCEPTION_RATIO:\n+                return rule.getCount() <= 1;\n+            case RuleConstant.DEGRADE_GRADE_EXCEPTION_COUNT:\n+                return true;\n+            default:\n+                return false;\n+        }\n     }\n \n     private static class RulePropertyListener implements PropertyListener<List<DegradeRule>> {\n \n+        private synchronized void reloadFrom(List<DegradeRule> list) {\n+            Map<String, List<CircuitBreaker>> cbs = buildCircuitBreakers(list);\n+            Map<String, Set<DegradeRule>> rm = new HashMap<>(cbs.size());\n+\n+            for (Map.Entry<String, List<CircuitBreaker>> e : cbs.entrySet()) {\n+                if (e.getValue() == null || e.getValue().isEmpty()) {", "originalCommit": "4c043ed94b2e949a7e8871690e0d9008d273efdd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3Njk0MA==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r461276940", "bodyText": "Changed to assertion in case of bugs.", "author": "sczyh30", "createdAt": "2020-07-28T02:17:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczMDQyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczMTc4Mg==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r449731782", "bodyText": "How about replacing them into void onChange(CircuitBreaker.State prev, CircuitBreaker.State cur, DegradeRule rule, double snapshotValue);. It seems simpler.", "author": "jasonjoo2010", "createdAt": "2020-07-04T02:45:50Z", "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/circuitbreaker/CircuitBreakerStateChangeObserver.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 1999-2019 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.slots.block.degrade.circuitbreaker;\n+\n+import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;\n+\n+/**\n+ * @author Eric Zhao\n+ * @since 1.8.0\n+ */\n+public interface CircuitBreakerStateChangeObserver {\n+\n+    /**\n+     * Observer method triggered when circuit breaker state transformed to {@code CLOSED}.\n+     *\n+     * @param prev previous state of the circuit breaker\n+     * @param rule associated rule\n+     */\n+    void onTransformToClosed(CircuitBreaker.State prev, DegradeRule rule);\n+\n+    /**\n+     * Observer method triggered when circuit breaker state transformed to {@code OPEN}.\n+     *\n+     * @param prev          previous state of the circuit breaker\n+     * @param rule          associated rule\n+     * @param snapshotValue triggered value on circuit breaker opens\n+     */\n+    void onTransformToOpen(CircuitBreaker.State prev, DegradeRule rule, double snapshotValue);", "originalCommit": "4c043ed94b2e949a7e8871690e0d9008d273efdd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc2MjI3Nw==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r460762277", "bodyText": "Good idea.", "author": "sczyh30", "createdAt": "2020-07-27T09:26:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczMTc4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczMTkxNw==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r449731917", "bodyText": "So is it better to use something like SHUT, CUT, PASS, etc. ,  to avoid ambiguous?", "author": "jasonjoo2010", "createdAt": "2020-07-04T02:48:53Z", "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/circuitbreaker/CircuitBreaker.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 1999-2019 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.slots.block.degrade.circuitbreaker;\n+\n+import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;\n+\n+/**\n+ * Basic circuit breaker interface.\n+ *\n+ * @author Eric Zhao\n+ */\n+public interface CircuitBreaker {\n+\n+    /**\n+     * Get the associated circuit breaking rule.\n+     *\n+     * @return associated circuit breaking rule\n+     */\n+    DegradeRule getRule();\n+\n+    /**\n+     * Acquires permission of an invocation only if it is available at the time of invocation.\n+     *\n+     * @return {@code true} if permission was acquired and {@code false} otherwise\n+     */\n+    boolean tryPass();\n+\n+    /**\n+     * Get current state of the circuit breaker.\n+     *\n+     * @return current state of the circuit breaker\n+     */\n+    State currentState();\n+\n+    /**\n+     * Record a completed request with the given response time and error (if present) and\n+     * handle state transformation of the circuit breaker.\n+     *\n+     * @param rt the response time of this entry\n+     * @param error the error of this entry (if present)\n+     */\n+    void onRequestComplete(long rt, Throwable error);\n+\n+    /**\n+     * Circuit breaker state.\n+     */\n+    enum State {\n+        /**\n+         * In {@code OPEN} state, all requests will be rejected until the next retry time point.\n+         */\n+        OPEN,", "originalCommit": "4c043ed94b2e949a7e8871690e0d9008d273efdd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczMjAxMg==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r449732012", "bodyText": "Just a naming suggestion. It's okay if nobody could misunderstand it. But i think only providers and developers on it will not", "author": "jasonjoo2010", "createdAt": "2020-07-04T02:50:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczMTkxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc2MzYxMw==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r460763613", "bodyText": "OPEN, CLOSED and HALF-OPEN are terminologies of circuit breaker pattern, so maybe keeping it is better.", "author": "sczyh30", "createdAt": "2020-07-27T09:29:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczMTkxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwMzUzOA==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r460803538", "bodyText": "Totally agree.\nMore descriptions would be more friendly for beginners.", "author": "jasonjoo2010", "createdAt": "2020-07-27T10:44:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczMTkxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczMjM3OA==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r449732378", "bodyText": "To avoid ambiguous better to use breaks enables cuts off", "author": "jasonjoo2010", "createdAt": "2020-07-04T02:56:53Z", "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/circuitbreaker/CircuitBreakerStrategy.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 1999-2020 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.slots.block.degrade.circuitbreaker;\n+\n+/**\n+ * @author Eric Zhao\n+ * @since 1.8.0\n+ */\n+public enum CircuitBreakerStrategy {\n+\n+    /**\n+     * Circuit breaker opens when slow request ratio exceeds the threshold.", "originalCommit": "4c043ed94b2e949a7e8871690e0d9008d273efdd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc2NDQ5NA==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r460764494", "bodyText": "I'll add additional descriptions to avoid ambiguity.", "author": "sczyh30", "createdAt": "2020-07-27T09:30:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczMjM3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgyNjU4MA==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r449826580", "bodyText": "Here is a missing property in new implementation. Is that acceptable in compatibility?", "author": "jasonjoo2010", "createdAt": "2020-07-05T03:11:47Z", "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeRule.java", "diffHunk": "@@ -52,47 +45,45 @@\n  * </ul>\n  *\n  * @author jialiang.linjl\n+ * @author Eric Zhao\n  */\n public class DegradeRule extends AbstractRule {\n \n-    @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n-    private static ScheduledExecutorService pool = Executors.newScheduledThreadPool(\n-        Runtime.getRuntime().availableProcessors(), new NamedThreadFactory(\"sentinel-degrade-reset-task\", true));\n-\n     public DegradeRule() {}\n \n     public DegradeRule(String resourceName) {\n         setResource(resourceName);\n     }\n \n     /**\n-     * RT threshold or exception ratio threshold count.\n+     * Circuit breaking strategy (0: average RT, 1: exception ratio, 2: exception count).\n      */\n-    private double count;\n+    private int grade = RuleConstant.DEGRADE_GRADE_RT;\n \n     /**\n-     * Degrade recover timeout (in seconds) when degradation occurs.\n+     * Threshold count.\n      */\n-    private int timeWindow;\n+    private double count;\n \n     /**\n-     * Degrade strategy (0: average RT, 1: exception ratio, 2: exception count).\n+     * Recovery timeout (in seconds) when circuit breaker opens. After the timeout, the circuit breaker will\n+     * transform to half-open state for trying a few requests.\n      */\n-    private int grade = RuleConstant.DEGRADE_GRADE_RT;\n+    private int timeWindow;\n \n     /**\n-     * Minimum number of consecutive slow requests that can trigger RT circuit breaking.\n+     * Minimum number of requests (in an active statistic time span) that can trigger circuit breaking.\n      *\n      * @since 1.7.0\n      */\n-    private int rtSlowRequestAmount = RuleConstant.DEGRADE_DEFAULT_SLOW_REQUEST_AMOUNT;", "originalCommit": "4c043ed94b2e949a7e8871690e0d9008d273efdd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc3MTU5Mw==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r460771593", "bodyText": "It could bring breaking changes (and break the SEMVER spec) indeed. In convention, we should mark it deprecated and remove it until 2.x. But actually it's rarely used and often regarded as a \"hidden\" attribute (not even appeared in the dashboard)...", "author": "sczyh30", "createdAt": "2020-07-27T09:43:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgyNjU4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwMjYzNw==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r460802637", "bodyText": "Yeah you're right. But i just afraid the users who integrating manually suffering broken compatibility.\ud83d\ude02 We can make decision here whether doing it carefully this time. Decide and record it and it would be ok.", "author": "jasonjoo2010", "createdAt": "2020-07-27T10:42:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgyNjU4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3ODczMw==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r461278733", "bodyText": "IMHO we could drop it (the legacy bad design) and add notes in relevant documents :)", "author": "sczyh30", "createdAt": "2020-07-28T02:24:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgyNjU4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgyNjkxNQ==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r449826915", "bodyText": "And here's a problem that if something went wrong which may cause RT down to more than 10s (100ms for normal) . Our breaker will cut the traffic after 10s. Maybe we could improve it (or as a new issue and do it in future) that unfinished entries could be recorded as statIntervalMs when slidingCounter is reset.", "author": "jasonjoo2010", "createdAt": "2020-07-05T03:18:29Z", "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeSlot.java", "diffHunk": "@@ -15,30 +15,73 @@\n  */\n package com.alibaba.csp.sentinel.slots.block.degrade;\n \n+import java.util.List;\n+\n+import com.alibaba.csp.sentinel.Entry;\n import com.alibaba.csp.sentinel.context.Context;\n import com.alibaba.csp.sentinel.node.DefaultNode;\n import com.alibaba.csp.sentinel.slotchain.AbstractLinkedProcessorSlot;\n import com.alibaba.csp.sentinel.slotchain.ProcessorSlot;\n import com.alibaba.csp.sentinel.slotchain.ResourceWrapper;\n+import com.alibaba.csp.sentinel.slots.block.BlockException;\n+import com.alibaba.csp.sentinel.slots.block.degrade.circuitbreaker.CircuitBreaker;\n import com.alibaba.csp.sentinel.spi.SpiOrder;\n+import com.alibaba.csp.sentinel.util.TimeUtil;\n \n /**\n- * A {@link ProcessorSlot} dedicates to {@link DegradeRule} checking.\n+ * A {@link ProcessorSlot} dedicates to circuit breaking.\n  *\n- * @author leyou\n+ * @author Carpenter Lee\n+ * @author Eric Zhao\n  */\n @SpiOrder(-1000)\n public class DegradeSlot extends AbstractLinkedProcessorSlot<DefaultNode> {\n \n     @Override\n-    public void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode node, int count, boolean prioritized, Object... args)\n-        throws Throwable {\n-        DegradeRuleManager.checkDegrade(resourceWrapper, context, node, count);\n+    public void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode node, int count,\n+                      boolean prioritized, Object... args) throws Throwable {\n+        performChecking(resourceWrapper);\n+\n         fireEntry(context, resourceWrapper, node, count, prioritized, args);\n     }\n \n+    void performChecking(ResourceWrapper r) throws BlockException {\n+        List<CircuitBreaker> circuitBreakers = DegradeRuleManager.getCircuitBreakers(r.getName());\n+        if (circuitBreakers == null || circuitBreakers.isEmpty()) {\n+            return;\n+        }\n+        for (CircuitBreaker cb : circuitBreakers) {\n+            if (!cb.tryPass()) {\n+                throw new DegradeException(cb.getRule().getLimitApp(), cb.getRule());\n+            }\n+        }\n+    }\n+\n     @Override\n-    public void exit(Context context, ResourceWrapper resourceWrapper, int count, Object... args) {\n-        fireExit(context, resourceWrapper, count, args);\n+    public void exit(Context context, ResourceWrapper r, int count, Object... args) {", "originalCommit": "4c043ed94b2e949a7e8871690e0d9008d273efdd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc2NjEyMQ==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r460766121", "bodyText": "Yes, it's necessary to improve the scenarios regarding slow in-flight requests. See #1405", "author": "sczyh30", "createdAt": "2020-07-27T09:33:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgyNjkxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwMTI0MA==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r460801240", "bodyText": "Oh they are not the same issue i think.\nHow to calculate a more reasonable RT is one thing while how to make a more reasonable degradation is quite another thing. The primary reason is that the calculating window is separated from general RT, isn't?\nAnd sure we can improve it later but it's more important than making it more reasonable calculating RT. Maybe another time window is required to make it under tracing.", "author": "jasonjoo2010", "createdAt": "2020-07-27T10:39:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgyNjkxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg4MTU2NA==", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r462881564", "bodyText": "We could open a new issue to discuss it.", "author": "sczyh30", "createdAt": "2020-07-30T09:48:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgyNjkxNQ=="}], "type": "inlineReview"}, {"oid": "2e4f60879d594eafacf4655b6a5c07d21c51dde1", "url": "https://github.com/alibaba/Sentinel/commit/2e4f60879d594eafacf4655b6a5c07d21c51dde1", "message": "Refactor degrade hierarchy with new circuit breaker mechanism and improve strategy\n\n* Add `CircuitBreaker` abstraction (with half-open state) and add circuit breaker state change event observer support.\n* Improve circuit breaking strategy (avg RT \u2192 slow request ratio) and make statistics of each rule dependent (to support arbitrary statistic interval).\n* Add simple \"trial\" mechanism (aka. half-open).\n* Refactor mechanism of metric recording and state change handling for circuit breakers: record RT and error when requests have completed (i.e. `onExit`, based on #1420).\n\nSigned-off-by: Eric Zhao <sczyh16@gmail.com>", "committedDate": "2020-07-28T02:16:46Z", "type": "commit"}, {"oid": "174300103b0df564607a45cf3223df0764d67e94", "url": "https://github.com/alibaba/Sentinel/commit/174300103b0df564607a45cf3223df0764d67e94", "message": "Update test cases for circuit breaking\n\nSigned-off-by: Eric Zhao <sczyh16@gmail.com>", "committedDate": "2020-07-28T02:16:47Z", "type": "commit"}, {"oid": "17395c01cc77d5d6d9213e9f2333ab3ee4331a20", "url": "https://github.com/alibaba/Sentinel/commit/17395c01cc77d5d6d9213e9f2333ab3ee4331a20", "message": "Update demo for circuit breaking (DegradeRule)\n\nSigned-off-by: Eric Zhao <sczyh16@gmail.com>", "committedDate": "2020-07-28T02:16:47Z", "type": "commit"}, {"oid": "17395c01cc77d5d6d9213e9f2333ab3ee4331a20", "url": "https://github.com/alibaba/Sentinel/commit/17395c01cc77d5d6d9213e9f2333ab3ee4331a20", "message": "Update demo for circuit breaking (DegradeRule)\n\nSigned-off-by: Eric Zhao <sczyh16@gmail.com>", "committedDate": "2020-07-28T02:16:47Z", "type": "forcePushed"}]}