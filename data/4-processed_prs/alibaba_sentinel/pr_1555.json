{"pr_number": 1555, "pr_title": "Customized handler parser in Dubbo provider filter.", "pr_createdAt": "2020-06-17T06:42:23Z", "pr_url": "https://github.com/alibaba/Sentinel/pull/1555", "timeline": [{"oid": "4bb9590653ed2c4f6e36f874d26b02e7354ff914", "url": "https://github.com/alibaba/Sentinel/commit/4bb9590653ed2c4f6e36f874d26b02e7354ff914", "message": "Customized handler parser in Dubbo provider filter.", "committedDate": "2020-06-17T06:19:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMyMTEwMQ==", "url": "https://github.com/alibaba/Sentinel/pull/1555#discussion_r441321101", "bodyText": "We may need to check null here (and replace with empty string).", "author": "sczyh30", "createdAt": "2020-06-17T06:56:42Z", "path": "sentinel-adapter/sentinel-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/SentinelDubboProviderFilter.java", "diffHunk": "@@ -55,14 +56,14 @@ public SentinelDubboProviderFilter() {\n     @Override\n     public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n         // Get origin caller.\n-        String application = DubboUtils.getApplication(invocation, \"\");\n+        String origin = DubboOriginRegistry.getDubboOrigin().handler(invoker, invocation);", "originalCommit": "4bb9590653ed2c4f6e36f874d26b02e7354ff914", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMyMTQ0Nw==", "url": "https://github.com/alibaba/Sentinel/pull/1555#discussion_r441321447", "bodyText": "Maybe DubboOriginParser is better?", "author": "sczyh30", "createdAt": "2020-06-17T06:57:21Z", "path": "sentinel-adapter/sentinel-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/origin/DubboOrigin.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package com.alibaba.csp.sentinel.adapter.dubbo.origin;\n+\n+import com.alibaba.csp.sentinel.context.Context;\n+import com.alibaba.dubbo.rpc.Invocation;\n+import com.alibaba.dubbo.rpc.Invoker;\n+\n+/**\n+ * Customized handler parser in Dubbo provider filter. {@link Context#getOrigin()}\n+ *\n+ * @author tc\n+ * @date 2020/6/10\n+ */\n+public interface DubboOrigin {", "originalCommit": "4bb9590653ed2c4f6e36f874d26b02e7354ff914", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMyNTQyOA==", "url": "https://github.com/alibaba/Sentinel/pull/1555#discussion_r441325428", "bodyText": "Yes, I think too.", "author": "cityiron", "createdAt": "2020-06-17T07:05:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMyMTQ0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMyMTU1Nw==", "url": "https://github.com/alibaba/Sentinel/pull/1555#discussion_r441321557", "bodyText": "Maybe parseOrigin is better?", "author": "sczyh30", "createdAt": "2020-06-17T06:57:35Z", "path": "sentinel-adapter/sentinel-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/origin/DubboOrigin.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package com.alibaba.csp.sentinel.adapter.dubbo.origin;\n+\n+import com.alibaba.csp.sentinel.context.Context;\n+import com.alibaba.dubbo.rpc.Invocation;\n+import com.alibaba.dubbo.rpc.Invoker;\n+\n+/**\n+ * Customized handler parser in Dubbo provider filter. {@link Context#getOrigin()}\n+ *\n+ * @author tc\n+ * @date 2020/6/10\n+ */\n+public interface DubboOrigin {\n+\n+    /**\n+     * Handle the handler parser.\n+     *\n+     * @param invoker    Dubbo invoker\n+     * @param invocation Dubbo invocation\n+     * @return handler result\n+     */\n+    String handler(Invoker<?> invoker, Invocation invocation);", "originalCommit": "4bb9590653ed2c4f6e36f874d26b02e7354ff914", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMyNTU3MQ==", "url": "https://github.com/alibaba/Sentinel/pull/1555#discussion_r441325571", "bodyText": "I think parse is better", "author": "cityiron", "createdAt": "2020-06-17T07:06:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMyMTU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ1ODI2NQ==", "url": "https://github.com/alibaba/Sentinel/pull/1555#discussion_r441458265", "bodyText": "Both are okay.", "author": "sczyh30", "createdAt": "2020-06-17T10:52:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMyMTU1Nw=="}], "type": "inlineReview"}, {"oid": "f2b7759828729e3e5f9a156924ae93fc1c1e0d53", "url": "https://github.com/alibaba/Sentinel/commit/f2b7759828729e3e5f9a156924ae93fc1c1e0d53", "message": "1. rename to DubboOriginParser#parse\n2. add DubboOriginParser feature to README.md", "committedDate": "2020-06-17T10:55:21Z", "type": "commit"}, {"oid": "9396092a185935d3de29f1097dabf477a26b6ff2", "url": "https://github.com/alibaba/Sentinel/commit/9396092a185935d3de29f1097dabf477a26b6ff2", "message": "1. rename to DubboOriginParser#parse\n2. add DubboOriginParser feature to README.md", "committedDate": "2020-06-17T10:57:03Z", "type": "commit"}, {"oid": "6dcf059322174f25e4070c7a84abfe9927f490a1", "url": "https://github.com/alibaba/Sentinel/commit/6dcf059322174f25e4070c7a84abfe9927f490a1", "message": "Merge remote-tracking branch 'origin/dubbo_origin' into dubbo_origin\n\n# Conflicts:\n#\tsentinel-adapter/sentinel-dubbo-adapter/README.md", "committedDate": "2020-06-17T10:58:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ3ODQ3Nw==", "url": "https://github.com/alibaba/Sentinel/pull/1555#discussion_r441478477", "bodyText": "Could you please add the license header?", "author": "sczyh30", "createdAt": "2020-06-17T11:35:00Z", "path": "sentinel-adapter/sentinel-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/origin/DefaultDubboOriginParser.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package com.alibaba.csp.sentinel.adapter.dubbo.origin;", "originalCommit": "6dcf059322174f25e4070c7a84abfe9927f490a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzNTk3Mg==", "url": "https://github.com/alibaba/Sentinel/pull/1555#discussion_r441535972", "bodyText": "Yes, I will do. ^_^", "author": "cityiron", "createdAt": "2020-06-17T13:16:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ3ODQ3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ3ODU5Mg==", "url": "https://github.com/alibaba/Sentinel/pull/1555#discussion_r441478592", "bodyText": "We may remove the date here.", "author": "sczyh30", "createdAt": "2020-06-17T11:35:13Z", "path": "sentinel-adapter/sentinel-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/origin/DefaultDubboOriginParser.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package com.alibaba.csp.sentinel.adapter.dubbo.origin;\n+\n+import com.alibaba.csp.sentinel.adapter.dubbo.DubboUtils;\n+import com.alibaba.dubbo.rpc.Invocation;\n+import com.alibaba.dubbo.rpc.Invoker;\n+\n+/**\n+ * Default Dubbo origin parse.\n+ *\n+ * @author tc\n+ * @date 2020/6/10", "originalCommit": "6dcf059322174f25e4070c7a84abfe9927f490a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzNTg3NQ==", "url": "https://github.com/alibaba/Sentinel/pull/1555#discussion_r441535875", "bodyText": "I will remove it.", "author": "cityiron", "createdAt": "2020-06-17T13:16:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ3ODU5Mg=="}], "type": "inlineReview"}, {"oid": "0ade21b47d932eda4385db27506cb71cbfc45776", "url": "https://github.com/alibaba/Sentinel/commit/0ade21b47d932eda4385db27506cb71cbfc45776", "message": "1. add license header\n2. remove date", "committedDate": "2020-06-17T13:17:38Z", "type": "commit"}, {"oid": "d2e5f51894dd3c7a6a502d2127c24d209624bf02", "url": "https://github.com/alibaba/Sentinel/commit/d2e5f51894dd3c7a6a502d2127c24d209624bf02", "message": "effect on SentinelDubboProviderFilterTest when mvn integration-test, so set default parser when run testCustomOriginParser.", "committedDate": "2020-06-19T01:53:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwNjI0Nw==", "url": "https://github.com/alibaba/Sentinel/pull/1555#discussion_r442706247", "bodyText": "It may better that we use uniform clean method before and after each test case.\nsuch as:\n@Before\npublic void setUp() {\n    DubboOriginParserRegistry.setDubboOriginParser(new DefaultDubboOriginParser());\n}\n\n@After\npublic void cleanUp() {\n    DubboOriginParserRegistry.setDubboOriginParser(new DefaultDubboOriginParser());\n}", "author": "cdfive", "createdAt": "2020-06-19T08:27:07Z", "path": "sentinel-adapter/sentinel-dubbo-adapter/src/test/java/com/alibaba/csp/sentinel/adapter/dubbo/origin/DubboOriginRegistryTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 1999-2020 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.adapter.dubbo.origin;\n+\n+import com.alibaba.csp.sentinel.adapter.dubbo.DubboUtils;\n+import com.alibaba.dubbo.rpc.Invocation;\n+import com.alibaba.dubbo.rpc.Invoker;\n+import com.alibaba.dubbo.rpc.RpcInvocation;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * @author tiecheng\n+ */\n+public class DubboOriginRegistryTest {\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testDefaultOriginParserFail() {\n+        DubboOriginParserRegistry.getDubboOriginParser().parse(null, null);\n+    }\n+\n+    @Test\n+    public void testDefaultOriginParserSuccess() {\n+        RpcInvocation invocation = new RpcInvocation();\n+        String dubboName = \"sentinel\";\n+        invocation.setAttachment(DubboUtils.DUBBO_APPLICATION_KEY, dubboName);\n+        String origin = DubboOriginParserRegistry.getDubboOriginParser().parse(null, invocation);\n+        Assert.assertEquals(dubboName, origin);\n+    }\n+\n+    @Test\n+    public void testCustomOriginParser() {\n+        DubboOriginParserRegistry.setDubboOriginParser(new DubboOriginParser() {\n+            @Override\n+            public String parse(Invoker<?> invoker, Invocation invocation) {\n+                return invocation.getAttachment(DubboUtils.DUBBO_APPLICATION_KEY, \"default\") + \"_\" + invocation\n+                    .getMethodName();\n+            }\n+        });\n+\n+        RpcInvocation invocation = new RpcInvocation();\n+        String origin = DubboOriginParserRegistry.getDubboOriginParser().parse(null, invocation);\n+        Assert.assertEquals(\"default_null\", origin);\n+\n+        String dubboName = \"sentinel\";\n+        invocation.setAttachment(DubboUtils.DUBBO_APPLICATION_KEY, dubboName);\n+        origin = DubboOriginParserRegistry.getDubboOriginParser().parse(null, invocation);\n+        Assert.assertEquals(dubboName + \"_null\", origin);\n+\n+        invocation.setMethodName(\"hello\");\n+        origin = DubboOriginParserRegistry.getDubboOriginParser().parse(null, invocation);\n+        Assert.assertEquals(dubboName + \"_hello\", origin);\n+\n+        // if not set default, effect on SentinelDubboProviderFilterTest when mvn integration-test\n+        DubboOriginParserRegistry.setDubboOriginParser(new DefaultDubboOriginParser());\n+    }", "originalCommit": "d2e5f51894dd3c7a6a502d2127c24d209624bf02", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwNzM1MA==", "url": "https://github.com/alibaba/Sentinel/pull/1555#discussion_r442707350", "bodyText": "The parameter name such as dubboOriginParser is clearer semantically.", "author": "cdfive", "createdAt": "2020-06-19T08:29:21Z", "path": "sentinel-adapter/sentinel-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/origin/DubboOriginParserRegistry.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 1999-2020 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.adapter.dubbo.origin;\n+\n+/**\n+ * Global origin parser registry for Dubbo.\n+ *\n+ * @author tiecheng\n+ */\n+public final class DubboOriginParserRegistry {\n+\n+    private static volatile DubboOriginParser dubboOriginParser = new DefaultDubboOriginParser();\n+\n+    public static DubboOriginParser getDubboOriginParser() {\n+        return dubboOriginParser;\n+    }\n+\n+    public static void setDubboOriginParser(DubboOriginParser dubboOrigin) {", "originalCommit": "d2e5f51894dd3c7a6a502d2127c24d209624bf02", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "aa5e8f6eb7fa36dba6a25452a2eb089ce361fbf0", "url": "https://github.com/alibaba/Sentinel/commit/aa5e8f6eb7fa36dba6a25452a2eb089ce361fbf0", "message": "make code clearer.", "committedDate": "2020-06-19T10:03:40Z", "type": "commit"}]}