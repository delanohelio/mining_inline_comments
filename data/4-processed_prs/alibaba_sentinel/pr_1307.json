{"pr_number": 1307, "pr_title": "Add Sentinel SOFARPC adapter module", "pr_createdAt": "2020-02-26T13:49:04Z", "pr_url": "https://github.com/alibaba/Sentinel/pull/1307", "timeline": [{"oid": "22804220c1e83471fe9549bcbfdb1959be5e2cfb", "url": "https://github.com/alibaba/Sentinel/commit/22804220c1e83471fe9549bcbfdb1959be5e2cfb", "message": "Add Sentinel SOFARPC adapter module", "committedDate": "2020-02-26T12:29:40Z", "type": "commit"}, {"oid": "2374947fe4257436500c9ff7e857165e03750590", "url": "https://github.com/alibaba/Sentinel/commit/2374947fe4257436500c9ff7e857165e03750590", "message": "Fix test case CI failed", "committedDate": "2020-02-26T14:11:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY3OTU1Mg==", "url": "https://github.com/alibaba/Sentinel/pull/1307#discussion_r385679552", "bodyText": "According to the comments of SofaResponse, the appResponse may indicate the biz exception and the errorMsg indicates the framework exception. Should we handle the latter case?", "author": "sczyh30", "createdAt": "2020-02-28T12:54:07Z", "path": "sentinel-adapter/sentinel-sofa-rpc-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/sofa/rpc/SentinelSofaRpcProviderFilter.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.adapter.sofa.rpc;\n+\n+import com.alibaba.csp.sentinel.*;\n+import com.alibaba.csp.sentinel.adapter.sofa.rpc.fallback.SofaRpcFallbackRegistry;\n+import com.alibaba.csp.sentinel.context.ContextUtil;\n+import com.alibaba.csp.sentinel.slots.block.BlockException;\n+import com.alipay.sofa.rpc.common.RpcConstants;\n+import com.alipay.sofa.rpc.core.exception.SofaRpcException;\n+import com.alipay.sofa.rpc.core.request.SofaRequest;\n+import com.alipay.sofa.rpc.core.response.SofaResponse;\n+import com.alipay.sofa.rpc.ext.Extension;\n+import com.alipay.sofa.rpc.filter.AutoActive;\n+import com.alipay.sofa.rpc.filter.FilterInvoker;\n+\n+import static com.alibaba.csp.sentinel.adapter.sofa.rpc.SofaRpcUtils.getApplicationName;\n+import static com.alibaba.csp.sentinel.adapter.sofa.rpc.SofaRpcUtils.getInterfaceResourceName;\n+import static com.alibaba.csp.sentinel.adapter.sofa.rpc.SofaRpcUtils.getMethodResourceName;\n+import static com.alibaba.csp.sentinel.adapter.sofa.rpc.SofaRpcUtils.getMethodArguments;\n+\n+/**\n+ * SOFARPC service provider filter for Sentinel, auto activated by default.\n+ *\n+ * If you want to disable the provider filter, you can configure:\n+ * <pre>ProviderConfig.setParameter(\"sofa.rpc.sentinel.enabled\", \"false\");</pre>\n+ *\n+ * or add setting in rpc-config.json file:\n+ * <pre>\n+ * {\n+ *   \"sofa.rpc.sentinel.enabled\": false\n+ * }\n+ * </pre>\n+ *\n+ * @author cdfive\n+ */\n+@Extension(value = \"providerSentinel\", order = -1000)\n+@AutoActive(providerSide = true)\n+public class SentinelSofaRpcProviderFilter extends AbstractSofaRpcFilter {\n+\n+    @Override\n+    public SofaResponse invoke(FilterInvoker invoker, SofaRequest request) throws SofaRpcException {\n+        // Now only support sync invoke.\n+        if (request.getInvokeType() != null && !RpcConstants.INVOKER_TYPE_SYNC.equals(request.getInvokeType())) {\n+            return invoker.invoke(request);\n+        }\n+\n+        String applicationName = getApplicationName(request);\n+        String interfaceResourceName = getInterfaceResourceName(request);\n+        String methodResourceName = getMethodResourceName(request);\n+\n+        Entry interfaceEntry = null;\n+        Entry methodEntry = null;\n+        try {\n+            ContextUtil.enter(methodResourceName, applicationName);\n+\n+            interfaceEntry = SphU.entry(interfaceResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.IN);\n+            methodEntry = SphU.entry(methodResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.IN, getMethodArguments(request));\n+\n+            SofaResponse response = invoker.invoke(request);\n+\n+            Object appResponse = response.getAppResponse();\n+            if (appResponse instanceof Throwable) {", "originalCommit": "2374947fe4257436500c9ff7e857165e03750590", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5MTU2Nw==", "url": "https://github.com/alibaba/Sentinel/pull/1307#discussion_r385691567", "bodyText": "Oh, I always thought biz exception should be traced, as it often happened in actual project, and the framework error is less likely happen.\nI found the commment in Trace class, Tracer is used to record other exceptions except block exception. Should we handle both of them?\nBesides, I have a question whycom.alibaba.csp.sentinel.adapter.dubbo.SentinelDubboProviderFilter doesn't catch other Exception except BlockException and RpcException?", "author": "cdfive", "createdAt": "2020-02-28T13:22:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY3OTU1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5ODMyNg==", "url": "https://github.com/alibaba/Sentinel/pull/1307#discussion_r386098326", "bodyText": "I found the comment in Trace class, Tracer is used to record other exceptions except for block exception. Should we handle both of them?\n\nYes, though framework error does not occur frequently, we may need to handle it.", "author": "sczyh30", "createdAt": "2020-03-01T11:04:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY3OTU1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEwNTkzMg==", "url": "https://github.com/alibaba/Sentinel/pull/1307#discussion_r386105932", "bodyText": "Got it, thanks.", "author": "cdfive", "createdAt": "2020-03-01T12:55:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY3OTU1Mg=="}], "type": "inlineReview"}, {"oid": "4622772d5dcdcf16376355eef0951814f5e2e3d2", "url": "https://github.com/alibaba/Sentinel/commit/4622772d5dcdcf16376355eef0951814f5e2e3d2", "message": "Handle framework error,upgrade sofa-rpc version in demo,fix comment", "committedDate": "2020-02-29T04:06:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5ODM5NA==", "url": "https://github.com/alibaba/Sentinel/pull/1307#discussion_r386098394", "bodyText": "Test messages? :)", "author": "sczyh30", "createdAt": "2020-03-01T11:05:48Z", "path": "sentinel-adapter/sentinel-sofa-rpc-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/sofa/rpc/SentinelSofaRpcProviderFilter.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.adapter.sofa.rpc;\n+\n+import com.alibaba.csp.sentinel.*;\n+import com.alibaba.csp.sentinel.adapter.sofa.rpc.fallback.SofaRpcFallbackRegistry;\n+import com.alibaba.csp.sentinel.context.ContextUtil;\n+import com.alibaba.csp.sentinel.slots.block.BlockException;\n+import com.alipay.sofa.rpc.common.RpcConstants;\n+import com.alipay.sofa.rpc.core.exception.RpcErrorType;\n+import com.alipay.sofa.rpc.core.exception.SofaRpcException;\n+import com.alipay.sofa.rpc.core.request.SofaRequest;\n+import com.alipay.sofa.rpc.core.response.SofaResponse;\n+import com.alipay.sofa.rpc.ext.Extension;\n+import com.alipay.sofa.rpc.filter.AutoActive;\n+import com.alipay.sofa.rpc.filter.FilterInvoker;\n+\n+import static com.alibaba.csp.sentinel.adapter.sofa.rpc.SofaRpcUtils.getApplicationName;\n+import static com.alibaba.csp.sentinel.adapter.sofa.rpc.SofaRpcUtils.getInterfaceResourceName;\n+import static com.alibaba.csp.sentinel.adapter.sofa.rpc.SofaRpcUtils.getMethodResourceName;\n+import static com.alibaba.csp.sentinel.adapter.sofa.rpc.SofaRpcUtils.getMethodArguments;\n+\n+/**\n+ * SOFARPC service provider filter for Sentinel, auto activated by default.\n+ *\n+ * If you want to disable the provider filter, you can configure:\n+ * <pre>ProviderConfig.setParameter(\"sofa.rpc.sentinel.enabled\", \"false\");</pre>\n+ *\n+ * or add setting in rpc-config.json file:\n+ * <pre>\n+ * {\n+ *   \"sofa.rpc.sentinel.enabled\": false\n+ * }\n+ * </pre>\n+ *\n+ * @author cdfive\n+ */\n+@Extension(value = \"providerSentinel\", order = -1000)\n+@AutoActive(providerSide = true)\n+public class SentinelSofaRpcProviderFilter extends AbstractSofaRpcFilter {\n+\n+    @Override\n+    public SofaResponse invoke(FilterInvoker invoker, SofaRequest request) throws SofaRpcException {\n+        // Now only support sync invoke.\n+        if (request.getInvokeType() != null && !RpcConstants.INVOKER_TYPE_SYNC.equals(request.getInvokeType())) {\n+            return invoker.invoke(request);\n+        }\n+\n+        String applicationName = getApplicationName(request);\n+        String interfaceResourceName = getInterfaceResourceName(request);\n+        String methodResourceName = getMethodResourceName(request);\n+\n+        Entry interfaceEntry = null;\n+        Entry methodEntry = null;\n+        try {\n+            ContextUtil.enter(methodResourceName, applicationName);\n+\n+            interfaceEntry = SphU.entry(interfaceResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.IN);\n+            methodEntry = SphU.entry(methodResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.IN, getMethodArguments(request));\n+\n+            SofaResponse response = invoker.invoke(request);\n+\n+            response.setErrorMsg(\"test error msg\");", "originalCommit": "4622772d5dcdcf16376355eef0951814f5e2e3d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEwNTkwNg==", "url": "https://github.com/alibaba/Sentinel/pull/1307#discussion_r386105906", "bodyText": "Sorry for commit test mesage.It has been fixed.", "author": "cdfive", "createdAt": "2020-03-01T12:54:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5ODM5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5ODQ4NA==", "url": "https://github.com/alibaba/Sentinel/pull/1307#discussion_r386098484", "bodyText": "Maybe this code snippet can be extracted into AbstractSofaRpcFilter?", "author": "sczyh30", "createdAt": "2020-03-01T11:07:10Z", "path": "sentinel-adapter/sentinel-sofa-rpc-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/sofa/rpc/SentinelSofaRpcProviderFilter.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.adapter.sofa.rpc;\n+\n+import com.alibaba.csp.sentinel.*;\n+import com.alibaba.csp.sentinel.adapter.sofa.rpc.fallback.SofaRpcFallbackRegistry;\n+import com.alibaba.csp.sentinel.context.ContextUtil;\n+import com.alibaba.csp.sentinel.slots.block.BlockException;\n+import com.alipay.sofa.rpc.common.RpcConstants;\n+import com.alipay.sofa.rpc.core.exception.RpcErrorType;\n+import com.alipay.sofa.rpc.core.exception.SofaRpcException;\n+import com.alipay.sofa.rpc.core.request.SofaRequest;\n+import com.alipay.sofa.rpc.core.response.SofaResponse;\n+import com.alipay.sofa.rpc.ext.Extension;\n+import com.alipay.sofa.rpc.filter.AutoActive;\n+import com.alipay.sofa.rpc.filter.FilterInvoker;\n+\n+import static com.alibaba.csp.sentinel.adapter.sofa.rpc.SofaRpcUtils.getApplicationName;\n+import static com.alibaba.csp.sentinel.adapter.sofa.rpc.SofaRpcUtils.getInterfaceResourceName;\n+import static com.alibaba.csp.sentinel.adapter.sofa.rpc.SofaRpcUtils.getMethodResourceName;\n+import static com.alibaba.csp.sentinel.adapter.sofa.rpc.SofaRpcUtils.getMethodArguments;\n+\n+/**\n+ * SOFARPC service provider filter for Sentinel, auto activated by default.\n+ *\n+ * If you want to disable the provider filter, you can configure:\n+ * <pre>ProviderConfig.setParameter(\"sofa.rpc.sentinel.enabled\", \"false\");</pre>\n+ *\n+ * or add setting in rpc-config.json file:\n+ * <pre>\n+ * {\n+ *   \"sofa.rpc.sentinel.enabled\": false\n+ * }\n+ * </pre>\n+ *\n+ * @author cdfive\n+ */\n+@Extension(value = \"providerSentinel\", order = -1000)\n+@AutoActive(providerSide = true)\n+public class SentinelSofaRpcProviderFilter extends AbstractSofaRpcFilter {\n+\n+    @Override\n+    public SofaResponse invoke(FilterInvoker invoker, SofaRequest request) throws SofaRpcException {\n+        // Now only support sync invoke.\n+        if (request.getInvokeType() != null && !RpcConstants.INVOKER_TYPE_SYNC.equals(request.getInvokeType())) {\n+            return invoker.invoke(request);\n+        }\n+\n+        String applicationName = getApplicationName(request);\n+        String interfaceResourceName = getInterfaceResourceName(request);\n+        String methodResourceName = getMethodResourceName(request);\n+\n+        Entry interfaceEntry = null;\n+        Entry methodEntry = null;\n+        try {\n+            ContextUtil.enter(methodResourceName, applicationName);\n+\n+            interfaceEntry = SphU.entry(interfaceResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.IN);\n+            methodEntry = SphU.entry(methodResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.IN, getMethodArguments(request));\n+\n+            SofaResponse response = invoker.invoke(request);\n+\n+            response.setErrorMsg(\"test error msg\");\n+\n+            if (response.isError()) {\n+                SofaRpcException rpcException = new SofaRpcException(RpcErrorType.SERVER_FILTER, response.getErrorMsg());\n+                Tracer.traceEntry(rpcException, interfaceEntry);\n+                Tracer.traceEntry(rpcException, methodEntry);\n+            } else {\n+                Object appResponse = response.getAppResponse();\n+                if (appResponse instanceof Throwable) {\n+                    Tracer.traceEntry((Throwable) appResponse, interfaceEntry);\n+                    Tracer.traceEntry((Throwable) appResponse, methodEntry);\n+                }\n+            }", "originalCommit": "4622772d5dcdcf16376355eef0951814f5e2e3d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEwNjI2MA==", "url": "https://github.com/alibaba/Sentinel/pull/1307#discussion_r386106260", "bodyText": "Good idea! useful to reduce duplicate code. Two method, one for trace response exception, and one for trace other exception has been refactored into AbstractSofaRpcFilter.", "author": "cdfive", "createdAt": "2020-03-01T13:00:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5ODQ4NA=="}], "type": "inlineReview"}, {"oid": "0cf675f8d0f067b7ea88455062c22cf44786201a", "url": "https://github.com/alibaba/Sentinel/commit/0cf675f8d0f067b7ea88455062c22cf44786201a", "message": "Improve test case", "committedDate": "2020-03-01T12:23:24Z", "type": "commit"}, {"oid": "f4745c02b7dbcb231cfaa5b0dfb04acb0ba52d2f", "url": "https://github.com/alibaba/Sentinel/commit/f4745c02b7dbcb231cfaa5b0dfb04acb0ba52d2f", "message": "Refactor trace response and other exception logic into abtract class", "committedDate": "2020-03-01T12:53:56Z", "type": "commit"}]}