{"pr_number": 1144, "pr_title": "removes query permission that have no reference any more", "pr_createdAt": "2020-04-06T06:44:16Z", "pr_url": "https://github.com/bakdata/conquery/pull/1144", "timeline": [{"oid": "a10af77d9726054309cdab3c1a172389361faabb", "url": "https://github.com/bakdata/conquery/commit/a10af77d9726054309cdab3c1a172389361faabb", "message": "removes query permission that have no reference any more", "committedDate": "2020-04-03T14:59:40Z", "type": "commit"}, {"oid": "3a13aa0d1577a7c2ff28a60813cb74c0a4fc8910", "url": "https://github.com/bakdata/conquery/commit/3a13aa0d1577a7c2ff28a60813cb74c0a4fc8910", "message": "Merge branch 'develop' into feature/query-permission-cleanup", "committedDate": "2020-04-06T06:46:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2Mjk1NQ==", "url": "https://github.com/bakdata/conquery/pull/1144#discussion_r403862955", "bodyText": "\ud83e\udd47", "author": "awildturtok", "createdAt": "2020-04-06T06:49:08Z", "path": "backend/src/main/java/com/bakdata/conquery/tasks/QueryCleanupTask.java", "diffHunk": "@@ -98,6 +104,65 @@ else if (execution instanceof ManagedForm) {\n \t\t\t\tlog.debug(\"Deleting now unused Execution `{}`\", managedExecutionId);\n \t\t\t\tstorage.removeExecution(managedExecutionId);\n \t\t\t}\n+\t\t\t\n+\t\t\t// Iterate over all PermissionOwners\n+\t\t\t\n+\t\t\tlog.info(\"Permissions deleted from all users: {}\", deleteQueryPermissionsWithMissingRef(storage, storage.getAllUsers()));\n+\t\t\tlog.info(\"Permissions deleted from all groups: {}\", deleteQueryPermissionsWithMissingRef(storage, storage.getAllGroups()));\n+\t\t\tlog.info(\"Permissions deleted from all roles: {}\", deleteQueryPermissionsWithMissingRef(storage, storage.getAllRoles()));\n \t\t}\n \t}\n+\n+\t/**\n+\t * Deletes permission that reference non-existing executions.\n+\t * @return The number of deleted permissions.\n+\t */\n+\tpublic static int deleteQueryPermissionsWithMissingRef(MasterMetaStorage storage, Iterable<? extends PermissionOwner<?>> owners) {\n+\t\tint countDeleted = 0;\n+\t\t// Do the loop-di-loop", "originalCommit": "3a13aa0d1577a7c2ff28a60813cb74c0a4fc8910", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2MzIwMg==", "url": "https://github.com/bakdata/conquery/pull/1144#discussion_r403863202", "bodyText": "eher ne Warning oder?", "author": "awildturtok", "createdAt": "2020-04-06T06:49:41Z", "path": "backend/src/main/java/com/bakdata/conquery/tasks/QueryCleanupTask.java", "diffHunk": "@@ -98,6 +104,65 @@ else if (execution instanceof ManagedForm) {\n \t\t\t\tlog.debug(\"Deleting now unused Execution `{}`\", managedExecutionId);\n \t\t\t\tstorage.removeExecution(managedExecutionId);\n \t\t\t}\n+\t\t\t\n+\t\t\t// Iterate over all PermissionOwners\n+\t\t\t\n+\t\t\tlog.info(\"Permissions deleted from all users: {}\", deleteQueryPermissionsWithMissingRef(storage, storage.getAllUsers()));\n+\t\t\tlog.info(\"Permissions deleted from all groups: {}\", deleteQueryPermissionsWithMissingRef(storage, storage.getAllGroups()));\n+\t\t\tlog.info(\"Permissions deleted from all roles: {}\", deleteQueryPermissionsWithMissingRef(storage, storage.getAllRoles()));\n \t\t}\n \t}\n+\n+\t/**\n+\t * Deletes permission that reference non-existing executions.\n+\t * @return The number of deleted permissions.\n+\t */\n+\tpublic static int deleteQueryPermissionsWithMissingRef(MasterMetaStorage storage, Iterable<? extends PermissionOwner<?>> owners) {\n+\t\tint countDeleted = 0;\n+\t\t// Do the loop-di-loop\n+\t\tfor(PermissionOwner<?> owner : owners) {\n+\t\t\tfor (Permission permission : owner.getPermissions()) {\n+\t\t\t\tif(!(permission instanceof WildcardPermission)) {\n+\t\t\t\t\tlog.info(\"Encountered the permission type {} that is not handled by this routine. Permission was: {}\", permission.getClass(), permission);", "originalCommit": "3a13aa0d1577a7c2ff28a60813cb74c0a4fc8910", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2Mzg2Mw==", "url": "https://github.com/bakdata/conquery/pull/1144#discussion_r403863863", "bodyText": "cool!", "author": "awildturtok", "createdAt": "2020-04-06T06:51:21Z", "path": "backend/src/main/java/com/bakdata/conquery/tasks/QueryCleanupTask.java", "diffHunk": "@@ -98,6 +104,65 @@ else if (execution instanceof ManagedForm) {\n \t\t\t\tlog.debug(\"Deleting now unused Execution `{}`\", managedExecutionId);\n \t\t\t\tstorage.removeExecution(managedExecutionId);\n \t\t\t}\n+\t\t\t\n+\t\t\t// Iterate over all PermissionOwners\n+\t\t\t\n+\t\t\tlog.info(\"Permissions deleted from all users: {}\", deleteQueryPermissionsWithMissingRef(storage, storage.getAllUsers()));\n+\t\t\tlog.info(\"Permissions deleted from all groups: {}\", deleteQueryPermissionsWithMissingRef(storage, storage.getAllGroups()));\n+\t\t\tlog.info(\"Permissions deleted from all roles: {}\", deleteQueryPermissionsWithMissingRef(storage, storage.getAllRoles()));\n \t\t}\n \t}\n+\n+\t/**\n+\t * Deletes permission that reference non-existing executions.\n+\t * @return The number of deleted permissions.\n+\t */\n+\tpublic static int deleteQueryPermissionsWithMissingRef(MasterMetaStorage storage, Iterable<? extends PermissionOwner<?>> owners) {\n+\t\tint countDeleted = 0;\n+\t\t// Do the loop-di-loop\n+\t\tfor(PermissionOwner<?> owner : owners) {\n+\t\t\tfor (Permission permission : owner.getPermissions()) {\n+\t\t\t\tif(!(permission instanceof WildcardPermission)) {\n+\t\t\t\t\tlog.info(\"Encountered the permission type {} that is not handled by this routine. Permission was: {}\", permission.getClass(), permission);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tWildcardPermission wpermission = (WildcardPermission) permission;\n+\t\t\t\tif(!wpermission.getDomains().contains(QueryPermission.DOMAIN)) {\n+\t\t\t\t\t// Skip Permissions that do not reference an Execution/Query\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\t// Simple deletion, when there is only one reference to an execution (standard)\n+\t\t\t\tif(wpermission.getInstances().size() == 1) {\n+\t\t\t\t\tManagedExecutionId mId = ManagedExecutionId.Parser.INSTANCE.parse(wpermission.getInstances().iterator().next());\n+\t\t\t\t\tif (storage.getExecution(mId) != null) {\n+\t\t\t\t\t\t// Execution exists -- it is a valid reference\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\t\t\t\t\towner.removePermission(storage, wpermission);\n+\t\t\t\t\tcountDeleted++;\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\t// Handle multiple references to instances (untypical)\n+\t\t\t\tSet<String> validRef = new HashSet<>();\n+\t\t\t\tfor(String sId : wpermission.getInstances()) {\n+\t\t\t\t\tManagedExecutionId mId = ManagedExecutionId.Parser.INSTANCE.parse(sId);\n+\t\t\t\t\tif (storage.getExecution(mId) != null) {\n+\t\t\t\t\t\t// Execution exists -- it is a valid reference\n+\t\t\t\t\t\tvalidRef.add(mId.toString());\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// Create a new Permission that only contains valid references", "originalCommit": "3a13aa0d1577a7c2ff28a60813cb74c0a4fc8910", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2NDQxOA==", "url": "https://github.com/bakdata/conquery/pull/1144#discussion_r403864418", "bodyText": "Kannst du nicht die beiden branches zusammenziehen indem du am Ende einfach schaust ob das set elemente hat und nur dann eine reduzierte variante erzeugst?", "author": "awildturtok", "createdAt": "2020-04-06T06:52:38Z", "path": "backend/src/main/java/com/bakdata/conquery/tasks/QueryCleanupTask.java", "diffHunk": "@@ -98,6 +104,65 @@ else if (execution instanceof ManagedForm) {\n \t\t\t\tlog.debug(\"Deleting now unused Execution `{}`\", managedExecutionId);\n \t\t\t\tstorage.removeExecution(managedExecutionId);\n \t\t\t}\n+\t\t\t\n+\t\t\t// Iterate over all PermissionOwners\n+\t\t\t\n+\t\t\tlog.info(\"Permissions deleted from all users: {}\", deleteQueryPermissionsWithMissingRef(storage, storage.getAllUsers()));\n+\t\t\tlog.info(\"Permissions deleted from all groups: {}\", deleteQueryPermissionsWithMissingRef(storage, storage.getAllGroups()));\n+\t\t\tlog.info(\"Permissions deleted from all roles: {}\", deleteQueryPermissionsWithMissingRef(storage, storage.getAllRoles()));\n \t\t}\n \t}\n+\n+\t/**\n+\t * Deletes permission that reference non-existing executions.\n+\t * @return The number of deleted permissions.\n+\t */\n+\tpublic static int deleteQueryPermissionsWithMissingRef(MasterMetaStorage storage, Iterable<? extends PermissionOwner<?>> owners) {\n+\t\tint countDeleted = 0;\n+\t\t// Do the loop-di-loop\n+\t\tfor(PermissionOwner<?> owner : owners) {\n+\t\t\tfor (Permission permission : owner.getPermissions()) {\n+\t\t\t\tif(!(permission instanceof WildcardPermission)) {\n+\t\t\t\t\tlog.info(\"Encountered the permission type {} that is not handled by this routine. Permission was: {}\", permission.getClass(), permission);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tWildcardPermission wpermission = (WildcardPermission) permission;\n+\t\t\t\tif(!wpermission.getDomains().contains(QueryPermission.DOMAIN)) {\n+\t\t\t\t\t// Skip Permissions that do not reference an Execution/Query\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\t// Simple deletion, when there is only one reference to an execution (standard)\n+\t\t\t\tif(wpermission.getInstances().size() == 1) {", "originalCommit": "3a13aa0d1577a7c2ff28a60813cb74c0a4fc8910", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "78d107069ad8fea6675f409a0322fb6afba44614", "url": "https://github.com/bakdata/conquery/commit/78d107069ad8fea6675f409a0322fb6afba44614", "message": "review changes", "committedDate": "2020-04-06T07:41:01Z", "type": "commit"}, {"oid": "4a5dbb503042ea6b367e3c479030879b4ac1c4ab", "url": "https://github.com/bakdata/conquery/commit/4a5dbb503042ea6b367e3c479030879b4ac1c4ab", "message": "Merge branch 'develop' into feature/query-permission-cleanup", "committedDate": "2020-04-06T07:47:28Z", "type": "commit"}]}