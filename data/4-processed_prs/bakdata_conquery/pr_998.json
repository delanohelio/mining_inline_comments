{"pr_number": 998, "pr_title": "Feature/restrict entity upload", "pr_createdAt": "2020-01-21T10:08:11Z", "pr_url": "https://github.com/bakdata/conquery/pull/998", "timeline": [{"oid": "bda81e002ce9f6a4309c02ef8e809e7ec8ec184a", "url": "https://github.com/bakdata/conquery/commit/bda81e002ce9f6a4309c02ef8e809e7ec8ec184a", "message": "fixes endpoint tree", "committedDate": "2020-01-20T12:24:13Z", "type": "commit"}, {"oid": "828d595a3ca04fa45688b4865267cefba931906f", "url": "https://github.com/bakdata/conquery/commit/828d595a3ca04fa45688b4865267cefba931906f", "message": "clean up stored queries", "committedDate": "2020-01-20T12:41:11Z", "type": "commit"}, {"oid": "dc1a952e86a039859b19301a8656267fde084ee0", "url": "https://github.com/bakdata/conquery/commit/dc1a952e86a039859b19301a8656267fde084ee0", "message": "checks queries and form for id resolving", "committedDate": "2020-01-21T08:46:56Z", "type": "commit"}, {"oid": "a2341eab41b0804b5c35168373be961993ae9eaf", "url": "https://github.com/bakdata/conquery/commit/a2341eab41b0804b5c35168373be961993ae9eaf", "message": "provided implementation for easing the restrictions on entity upload headers", "committedDate": "2020-01-21T10:04:46Z", "type": "commit"}, {"oid": "faceae4d9a59c3331745441d9a80ad6202acabff", "url": "https://github.com/bakdata/conquery/commit/faceae4d9a59c3331745441d9a80ad6202acabff", "message": "code factor", "committedDate": "2020-01-21T10:21:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk0MzQwNA==", "url": "https://github.com/bakdata/conquery/pull/998#discussion_r368943404", "bodyText": "kannst du das dahin auslagern wo es benutzt wird?", "author": "awildturtok", "createdAt": "2020-01-21T11:17:22Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/Visitable.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package com.bakdata.conquery.models.query;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.bakdata.conquery.models.query.concept.CQElement;\n+import com.bakdata.conquery.models.query.concept.specific.CQExternal;\n+import com.bakdata.conquery.models.query.visitor.QueryVisitor;\n+\n+public interface Visitable {\n+\n+\tvoid visit(QueryVisitor visitor);\n+\t\n+\t\n+\t/**\n+\t * Checks if the query requires to resolve external ids.\n+\t * @return True if a {@link CQExternal} is found.\n+\t */\n+\tstatic boolean usesExternalIds(Visitable query) {", "originalCommit": "faceae4d9a59c3331745441d9a80ad6202acabff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk0NDQxMA==", "url": "https://github.com/bakdata/conquery/pull/998#discussion_r368944410", "bodyText": "Und dann f\u00fcr Reused bitte auch machen?", "author": "awildturtok", "createdAt": "2020-01-21T11:19:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk0MzQwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk2NTg4OA==", "url": "https://github.com/bakdata/conquery/pull/998#discussion_r368965888", "bodyText": "warum CQElement.super und nicht nur super?", "author": "awildturtok", "createdAt": "2020-01-21T12:13:17Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/specific/CQDateRestriction.java", "diffHunk": "@@ -84,6 +85,7 @@ public void collectNamespacedIds(Set<NamespacedId> namespacedIds) {\n \t\n \t@Override\n \tpublic void visit(QueryVisitor visitor) {\n-\t\tchild.visit(visitor);\t\t\n+\t\tCQElement.super.visit(visitor);", "originalCommit": "faceae4d9a59c3331745441d9a80ad6202acabff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk4MzQyNA==", "url": "https://github.com/bakdata/conquery/pull/998#discussion_r368983424", "bodyText": "Das wurde mir so vorgeschlagen. ich denke so greift man auf die default implementierung zur\u00fcck", "author": "thoniTUB", "createdAt": "2020-01-21T12:55:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk2NTg4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk2NTk4OQ==", "url": "https://github.com/bakdata/conquery/pull/998#discussion_r368965989", "bodyText": "warum?", "author": "awildturtok", "createdAt": "2020-01-21T12:13:32Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/concept/specific/CQExternal.java", "diffHunk": "@@ -181,7 +176,7 @@ public CDateSet readDates(int[] dateIndices, String[] row) throws ParsingExcepti\n \n \t@RequiredArgsConstructor\n \t@Getter\n-\tpublic static enum FormatColumn {\n+\tpublic enum FormatColumn {", "originalCommit": "faceae4d9a59c3331745441d9a80ad6202acabff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk4MzYyOA==", "url": "https://github.com/bakdata/conquery/pull/998#discussion_r368983628", "bodyText": "Code factor meinte das sei hier redundant", "author": "thoniTUB", "createdAt": "2020-01-21T12:55:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk2NTk4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk2NjQzNA==", "url": "https://github.com/bakdata/conquery/pull/998#discussion_r368966434", "bodyText": "@FunctionalInterface", "author": "awildturtok", "createdAt": "2020-01-21T12:14:33Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/visitor/QueryVisitor.java", "diffHunk": "@@ -1,8 +1,11 @@\n package com.bakdata.conquery.models.query.visitor;\n \n-import com.bakdata.conquery.models.query.concept.specific.CQConcept;\n+import com.bakdata.conquery.models.query.concept.CQElement;\n \n+/**\n+ * Visits the elements of which a query consist.\n+ */\n public interface QueryVisitor {\n-\n-\tpublic default void visitConcept(CQConcept concept) {}\n+\t", "originalCommit": "faceae4d9a59c3331745441d9a80ad6202acabff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk4NDE3OQ==", "url": "https://github.com/bakdata/conquery/pull/998#discussion_r368984179", "bodyText": "oki", "author": "thoniTUB", "createdAt": "2020-01-21T12:57:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk2NjQzNA=="}], "type": "inlineReview"}, {"oid": "9858e9e95bb56c6d300b36d8d318370e3a5394a0", "url": "https://github.com/bakdata/conquery/commit/9858e9e95bb56c6d300b36d8d318370e3a5394a0", "message": "review changes", "committedDate": "2020-01-21T14:52:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA1MDkzMw==", "url": "https://github.com/bakdata/conquery/pull/998#discussion_r369050933", "bodyText": "Doku bitte", "author": "awildturtok", "createdAt": "2020-01-21T14:59:23Z", "path": "backend/src/main/java/com/bakdata/conquery/apiv1/QueryProcessor.java", "diffHunk": "@@ -17,67 +14,37 @@\n import com.bakdata.conquery.models.query.IQuery;\n import com.bakdata.conquery.models.query.ManagedQuery;\n import com.bakdata.conquery.models.query.QueryTranslator;\n-import com.bakdata.conquery.models.query.concept.CQElement;\n-import com.bakdata.conquery.models.query.concept.ConceptQuery;\n-import com.bakdata.conquery.models.query.concept.specific.CQAnd;\n-import com.bakdata.conquery.models.query.concept.specific.CQOr;\n-import com.bakdata.conquery.models.query.concept.specific.CQReusedQuery;\n import com.bakdata.conquery.models.worker.Namespace;\n import com.bakdata.conquery.models.worker.Namespaces;\n+import com.bakdata.conquery.util.QueryUtils;\n+import com.bakdata.conquery.util.QueryUtils.ExternalIdChecker;\n+import com.bakdata.conquery.util.QueryUtils.SingleReusedChecker;\n+import lombok.Getter;\n import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n-\n @Slf4j\n @RequiredArgsConstructor\n public class QueryProcessor {\n \n+\t@Getter\n \tprivate final Namespaces namespaces;\n \tprivate final MasterMetaStorage storage;\n \n-\t/**\n-\t * Find first and only directly ReusedQuery in the queries tree, and return its Id. ie.: arbirtary CQAnd/CQOr with only them or then a ReusedQuery.\n-\t *\n-\t * @return Null if not only a single {@link CQReusedQuery} was found beside {@link CQAnd} / {@link CQOr}.\n-\t */\n-\tprivate static ManagedExecutionId getOnlyReused(IQuery query) {\n-\n-\t\tif(!(query instanceof ConceptQuery))\n-\t\t\treturn null;\n-\n-\t\tfinal ArrayList<CQReusedQuery> queries = new ArrayList<>();\n-\n-\t\tfinal ArrayDeque<CQElement> search = new ArrayDeque<>();\n-\n-\t\tsearch.add(((ConceptQuery) query).getRoot());\n-\t\tCQElement element;\n-\n-\t\twhile((element = search.poll()) != null) {\n-\t\t\tif(element instanceof CQReusedQuery)\n-\t\t\t\tqueries.add(((CQReusedQuery) element));\n-\t\t\telse if (element instanceof CQAnd) {\n-\t\t\t\tsearch.addAll(((CQAnd) element).getChildren());\n-\t\t\t}\n-\t\t\telse if (element instanceof CQOr) {\n-\t\t\t\tsearch.addAll(((CQOr) element).getChildren());\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn queries.size() == 1 ? queries.get(0).getQuery() : null;\n-\t}\n \n \t/**\n \t * Creates a query for all datasets, then submits it for execution on the\n \t * intended dataset.\n \t */\n \tpublic ExecutionStatus postQuery(Dataset dataset, IQuery query, URLBuilder urlb, User user) throws JSONException {\n \t\tNamespace namespace = namespaces.get(dataset.getId());\n+\t\t\n+\t\tExternalIdChecker externalIdChecker = new QueryUtils.ExternalIdChecker();", "originalCommit": "9858e9e95bb56c6d300b36d8d318370e3a5394a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA1MjAxOA==", "url": "https://github.com/bakdata/conquery/pull/998#discussion_r369052018", "bodyText": "\"For example used in QueryProcessor to ...\"", "author": "awildturtok", "createdAt": "2020-01-21T15:01:05Z", "path": "backend/src/main/java/com/bakdata/conquery/models/query/visitor/QueryVisitor.java", "diffHunk": "@@ -1,8 +1,12 @@\n package com.bakdata.conquery.models.query.visitor;\n \n-import com.bakdata.conquery.models.query.concept.specific.CQConcept;\n+import java.util.function.Consumer;\n \n-public interface QueryVisitor {\n+import com.bakdata.conquery.models.query.concept.CQElement;\n \n-\tpublic default void visitConcept(CQConcept concept) {}\n+/**\n+ * Visits the elements of which a query consist.", "originalCommit": "9858e9e95bb56c6d300b36d8d318370e3a5394a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA1MjI3MQ==", "url": "https://github.com/bakdata/conquery/pull/998#discussion_r369052271", "bodyText": "For reference implementations see ...", "author": "awildturtok", "createdAt": "2020-01-21T15:01:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA1MjAxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA1MjYxNQ==", "url": "https://github.com/bakdata/conquery/pull/998#discussion_r369052615", "bodyText": "\ud83d\udcaf", "author": "awildturtok", "createdAt": "2020-01-21T15:02:02Z", "path": "backend/src/main/java/com/bakdata/conquery/util/QueryUtils.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.bakdata.conquery.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.bakdata.conquery.models.identifiable.ids.specific.ManagedExecutionId;\n+import com.bakdata.conquery.models.query.concept.CQElement;\n+import com.bakdata.conquery.models.query.concept.specific.CQAnd;\n+import com.bakdata.conquery.models.query.concept.specific.CQExternal;\n+import com.bakdata.conquery.models.query.concept.specific.CQOr;\n+import com.bakdata.conquery.models.query.concept.specific.CQReusedQuery;\n+import com.bakdata.conquery.models.query.visitor.QueryVisitor;\n+import lombok.experimental.UtilityClass;\n+\n+@UtilityClass\n+public class QueryUtils {\n+\t\n+\t/**\n+\t * Checks if the query requires to resolve external ids.", "originalCommit": "9858e9e95bb56c6d300b36d8d318370e3a5394a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "88808ed7a19ea39c96f8fffc3d4edef657933606", "url": "https://github.com/bakdata/conquery/commit/88808ed7a19ea39c96f8fffc3d4edef657933606", "message": "comments", "committedDate": "2020-01-21T15:08:11Z", "type": "commit"}, {"oid": "8cb0d9362769c91ecb23c1bc455c1d23e619f55a", "url": "https://github.com/bakdata/conquery/commit/8cb0d9362769c91ecb23c1bc455c1d23e619f55a", "message": "Merge branch 'develop' into feature/restrict-entity-upload", "committedDate": "2020-01-21T15:20:36Z", "type": "commit"}]}