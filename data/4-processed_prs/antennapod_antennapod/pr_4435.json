{"pr_number": 4435, "pr_title": "Added podcastindex.org search", "pr_createdAt": "2020-09-19T12:49:52Z", "pr_url": "https://github.com/AntennaPod/AntennaPod/pull/4435", "timeline": [{"oid": "00b952685170bbc13afabff46adf4138e6a70447", "url": "https://github.com/AntennaPod/AntennaPod/commit/00b952685170bbc13afabff46adf4138e6a70447", "message": "Added podcastindex.org search", "committedDate": "2020-09-19T12:44:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY2Mjg3Nw==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4435#discussion_r491662877", "bodyText": "Could you please make those a buildConfigField? That way, we can have one key+secret that is open-source and might get blocked if someone abuses it and an additional pair that is shipped only to Google Play and is not included in the source code.\nSomething like this should work:\nhttps://github.com/AntennaPod/AntennaPod/blob/develop/app/build.gradle#L32", "author": "ByteHamster", "createdAt": "2020-09-20T07:22:43Z", "path": "app/src/main/java/de/danoeh/antennapod/discovery/PodcastIndexPodcastSearcher.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package de.danoeh.antennapod.discovery;\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.security.MessageDigest;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import de.danoeh.antennapod.core.ClientConfig;\n+import de.danoeh.antennapod.core.service.download.AntennapodHttpClient;\n+import io.reactivex.Single;\n+import io.reactivex.SingleOnSubscribe;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.schedulers.Schedulers;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+public class PodcastIndexPodcastSearcher implements PodcastSearcher {\n+    private static final String PODCASTINDEX_API_URL = \"https://api.podcastindex.org/api/1.0/search/byterm?q=%s\";\n+    private static final String API_KEY = \"JRJPPWC6ZA7DKKTSU2R3\";\n+    private static final String API_SECRET = \"7$$67JtrfkSYtAncGBEaJp$v$Y9$ZJUzYVy8GuBm\";", "originalCommit": "00b952685170bbc13afabff46adf4138e6a70447", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc1NTQxMA==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4435#discussion_r491755410", "bodyText": "Changed these fields to buildConfigField", "author": "edwinhere", "createdAt": "2020-09-21T00:42:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY2Mjg3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY2MzAyNw==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4435#discussion_r491663027", "bodyText": "This converts to a hex string, right? If so, please rename the function to be more clear. Just converting to string would be something like new String(bytes)", "author": "ByteHamster", "createdAt": "2020-09-20T07:24:50Z", "path": "app/src/main/java/de/danoeh/antennapod/discovery/PodcastIndexPodcastSearcher.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package de.danoeh.antennapod.discovery;\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.security.MessageDigest;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import de.danoeh.antennapod.core.ClientConfig;\n+import de.danoeh.antennapod.core.service.download.AntennapodHttpClient;\n+import io.reactivex.Single;\n+import io.reactivex.SingleOnSubscribe;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.schedulers.Schedulers;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+public class PodcastIndexPodcastSearcher implements PodcastSearcher {\n+    private static final String PODCASTINDEX_API_URL = \"https://api.podcastindex.org/api/1.0/search/byterm?q=%s\";\n+    private static final String API_KEY = \"JRJPPWC6ZA7DKKTSU2R3\";\n+    private static final String API_SECRET = \"7$$67JtrfkSYtAncGBEaJp$v$Y9$ZJUzYVy8GuBm\";\n+\n+    public PodcastIndexPodcastSearcher() {\n+    }\n+\n+    @Override\n+    public Single<List<PodcastSearchResult>> search(String query) {\n+        return Single.create((SingleOnSubscribe<List<PodcastSearchResult>>) subscriber -> {\n+\n+            Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n+            calendar.clear();\n+            Date now = new Date();\n+            calendar.setTime(now);\n+            long secondsSinceEpoch = calendar.getTimeInMillis() / 1000L;\n+            String apiHeaderTime = String.valueOf(secondsSinceEpoch);\n+            String data4Hash = API_KEY + API_SECRET + apiHeaderTime;\n+            String hashString = sha1(data4Hash);\n+\n+            String encodedQuery;\n+            try {\n+                encodedQuery = URLEncoder.encode(query, \"UTF-8\");\n+            } catch (UnsupportedEncodingException e) {\n+                // this won't ever be thrown\n+                encodedQuery = query;\n+            }\n+\n+            String formattedUrl = String.format(PODCASTINDEX_API_URL, encodedQuery);\n+\n+            OkHttpClient client = AntennapodHttpClient.getHttpClient();\n+            Request.Builder httpReq = new Request.Builder()\n+                    .addHeader(\"X-Auth-Date\", apiHeaderTime)\n+                    .addHeader(\"X-Auth-Key\", API_KEY)\n+                    .addHeader(\"Authorization\", hashString)\n+                    .addHeader(\"User-Agent\", ClientConfig.USER_AGENT)\n+                    .url(formattedUrl);\n+            List<PodcastSearchResult> podcasts = new ArrayList<>();\n+            try {\n+                Response response = client.newCall(httpReq.build()).execute();\n+\n+                if (response.isSuccessful()) {\n+                    String resultString = response.body().string();\n+                    JSONObject result = new JSONObject(resultString);\n+                    JSONArray j = result.getJSONArray(\"feeds\");\n+\n+                    for (int i = 0; i < j.length(); i++) {\n+                        JSONObject podcastJson = j.getJSONObject(i);\n+                        PodcastSearchResult podcast = PodcastSearchResult.fromPodcastIndex(podcastJson);\n+                        if (podcast.feedUrl != null) {\n+                            podcasts.add(podcast);\n+                        }\n+                    }\n+                } else {\n+                    subscriber.onError(new IOException(response.toString()));\n+                }\n+            } catch (IOException | JSONException e) {\n+                subscriber.onError(e);\n+            }\n+            subscriber.onSuccess(podcasts);\n+        })\n+                .subscribeOn(Schedulers.io())\n+                .observeOn(AndroidSchedulers.mainThread());\n+    }\n+\n+    @Override\n+    public Single<String> lookupUrl(String url) {\n+        return Single.just(url);\n+    }\n+\n+    @Override\n+    public boolean urlNeedsLookup(String url) {\n+        return false;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"Podcastindex.org\";\n+    }\n+\n+    public static String sha1(String clearString) {\n+        try {\n+            MessageDigest messageDigest = MessageDigest.getInstance(\"SHA-1\");\n+            messageDigest.update(clearString.getBytes(\"UTF-8\"));\n+            return byteArrayToString(messageDigest.digest());\n+        } catch (Exception ignored) {\n+            ignored.printStackTrace();\n+            return null;\n+        }\n+    }\n+\n+    public static String byteArrayToString(byte[] bytes) {", "originalCommit": "00b952685170bbc13afabff46adf4138e6a70447", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc1NTM0OQ==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4435#discussion_r491755349", "bodyText": "Renamed it to toHex", "author": "edwinhere", "createdAt": "2020-09-21T00:41:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY2MzAyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY2MzI4Mw==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4435#discussion_r491663283", "bodyText": "Please use the same indention as the rest of the file. I know it is pretty inconsistent throughout the project but I think we should at least have it consistent within each file.", "author": "ByteHamster", "createdAt": "2020-09-20T07:28:00Z", "path": "app/src/main/res/layout/addfeed.xml", "diffHunk": "@@ -142,6 +142,20 @@\n                     android:clickable=\"true\"\n                     android:text=\"@string/browse_gpoddernet_label\"/>\n \n+            <TextView\n+                android:id=\"@+id/btn_search_podcastindex\"", "originalCommit": "00b952685170bbc13afabff46adf4138e6a70447", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc1NTMwMw==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4435#discussion_r491755303", "bodyText": "Intended like the rest of the file.", "author": "edwinhere", "createdAt": "2020-09-21T00:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY2MzI4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY2MzM2OQ==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4435#discussion_r491663369", "bodyText": "Please only add English strings. Everything else is handled on Transifex. Merging Transifex and translations from the git repo is troublesome.", "author": "ByteHamster", "createdAt": "2020-09-20T07:29:06Z", "path": "core/src/main/res/values-eu/strings.xml", "diffHunk": "@@ -778,4 +778,5 @@\n   <string name=\"on_demand_config_setting_changed\">Konfigurazio eguneratua, arrakastaz.</string>\n   <string name=\"on_demand_config_stream_text\">Badirudi asko transmititzen duzula. Saio-zerrendek transmisio-botoiak erakustea nahi duzu?</string>\n   <string name=\"on_demand_config_download_text\">Badirudi asko deskargatzen duzula. Gertaera-zerrendek deskarga-botoiak erakustea nahi duzu?</string>\n+  <string name=\"search_podcastindex_label\">Bilatu Podcastindex-en</string>", "originalCommit": "00b952685170bbc13afabff46adf4138e6a70447", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc1NTI1MQ==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4435#discussion_r491755251", "bodyText": "I have removed non-English strings.", "author": "edwinhere", "createdAt": "2020-09-21T00:41:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY2MzM2OQ=="}], "type": "inlineReview"}, {"oid": "f8d4c04c6e38d63ac97a388bedd9ea5e3bec49ee", "url": "https://github.com/AntennaPod/AntennaPod/commit/f8d4c04c6e38d63ac97a388bedd9ea5e3bec49ee", "message": "Merge branch 'develop' of https://github.com/AntennaPod/AntennaPod into develop", "committedDate": "2020-09-20T23:49:45Z", "type": "commit"}, {"oid": "fe9245b816711015c5c1c1a27fe947396d3308a5", "url": "https://github.com/AntennaPod/AntennaPod/commit/fe9245b816711015c5c1c1a27fe947396d3308a5", "message": "Incorporated review comments", "committedDate": "2020-09-21T00:21:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU3MjAyMA==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4435#discussion_r495572020", "bodyText": "This does not make clear which API key is meant. Could you please use something like PODCASTINDEX_API_KEY?", "author": "ByteHamster", "createdAt": "2020-09-27T13:16:19Z", "path": "app/build.gradle", "diffHunk": "@@ -30,6 +30,8 @@ android {\n         } catch (Exception ignore) {\n         }\n         buildConfigField \"String\", \"COMMIT_HASH\", ('\"' + commit + '\"')\n+        buildConfigField \"String\", \"API_KEY\", '\"JRJPPWC6ZA7DKKTSU2R3\"'\n+        buildConfigField \"String\", \"API_SECRET\", '\"7$$67JtrfkSYtAncGBEaJp$v$Y9$ZJUzYVy8GuBm\"'", "originalCommit": "fe9245b816711015c5c1c1a27fe947396d3308a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM1NTAwMw==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4435#discussion_r496355003", "bodyText": "Done", "author": "edwinhere", "createdAt": "2020-09-29T03:21:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU3MjAyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU3MjA2OA==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4435#discussion_r495572068", "bodyText": "This can be private, I think", "author": "ByteHamster", "createdAt": "2020-09-27T13:17:05Z", "path": "app/src/main/java/de/danoeh/antennapod/discovery/PodcastIndexPodcastSearcher.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package de.danoeh.antennapod.discovery;\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.security.MessageDigest;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import de.danoeh.antennapod.BuildConfig;\n+import de.danoeh.antennapod.core.ClientConfig;\n+import de.danoeh.antennapod.core.service.download.AntennapodHttpClient;\n+import io.reactivex.Single;\n+import io.reactivex.SingleOnSubscribe;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.schedulers.Schedulers;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+public class PodcastIndexPodcastSearcher implements PodcastSearcher {\n+    private static final String PODCASTINDEX_API_URL = \"https://api.podcastindex.org/api/1.0/search/byterm?q=%s\";\n+\n+    public PodcastIndexPodcastSearcher() {\n+    }\n+\n+    @Override\n+    public Single<List<PodcastSearchResult>> search(String query) {\n+        return Single.create((SingleOnSubscribe<List<PodcastSearchResult>>) subscriber -> {\n+\n+            Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n+            calendar.clear();\n+            Date now = new Date();\n+            calendar.setTime(now);\n+            long secondsSinceEpoch = calendar.getTimeInMillis() / 1000L;\n+            String apiHeaderTime = String.valueOf(secondsSinceEpoch);\n+            String data4Hash = BuildConfig.API_KEY + BuildConfig.API_SECRET + apiHeaderTime;\n+            String hashString = sha1(data4Hash);\n+\n+            String encodedQuery;\n+            try {\n+                encodedQuery = URLEncoder.encode(query, \"UTF-8\");\n+            } catch (UnsupportedEncodingException e) {\n+                // this won't ever be thrown\n+                encodedQuery = query;\n+            }\n+\n+            String formattedUrl = String.format(PODCASTINDEX_API_URL, encodedQuery);\n+\n+            OkHttpClient client = AntennapodHttpClient.getHttpClient();\n+            Request.Builder httpReq = new Request.Builder()\n+                    .addHeader(\"X-Auth-Date\", apiHeaderTime)\n+                    .addHeader(\"X-Auth-Key\", BuildConfig.API_KEY)\n+                    .addHeader(\"Authorization\", hashString)\n+                    .addHeader(\"User-Agent\", ClientConfig.USER_AGENT)\n+                    .url(formattedUrl);\n+            List<PodcastSearchResult> podcasts = new ArrayList<>();\n+            try {\n+                Response response = client.newCall(httpReq.build()).execute();\n+\n+                if (response.isSuccessful()) {\n+                    String resultString = response.body().string();\n+                    JSONObject result = new JSONObject(resultString);\n+                    JSONArray j = result.getJSONArray(\"feeds\");\n+\n+                    for (int i = 0; i < j.length(); i++) {\n+                        JSONObject podcastJson = j.getJSONObject(i);\n+                        PodcastSearchResult podcast = PodcastSearchResult.fromPodcastIndex(podcastJson);\n+                        if (podcast.feedUrl != null) {\n+                            podcasts.add(podcast);\n+                        }\n+                    }\n+                } else {\n+                    subscriber.onError(new IOException(response.toString()));\n+                }\n+            } catch (IOException | JSONException e) {\n+                subscriber.onError(e);\n+            }\n+            subscriber.onSuccess(podcasts);\n+        })\n+                .subscribeOn(Schedulers.io())\n+                .observeOn(AndroidSchedulers.mainThread());\n+    }\n+\n+    @Override\n+    public Single<String> lookupUrl(String url) {\n+        return Single.just(url);\n+    }\n+\n+    @Override\n+    public boolean urlNeedsLookup(String url) {\n+        return false;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"Podcastindex.org\";\n+    }\n+\n+    public static String sha1(String clearString) {\n+        try {\n+            MessageDigest messageDigest = MessageDigest.getInstance(\"SHA-1\");\n+            messageDigest.update(clearString.getBytes(\"UTF-8\"));\n+            return toHex(messageDigest.digest());\n+        } catch (Exception ignored) {\n+            ignored.printStackTrace();\n+            return null;\n+        }\n+    }\n+\n+    public static String toHex(byte[] bytes) {", "originalCommit": "fe9245b816711015c5c1c1a27fe947396d3308a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM1NTAzNw==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4435#discussion_r496355037", "bodyText": "Done", "author": "edwinhere", "createdAt": "2020-09-29T03:21:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU3MjA2OA=="}], "type": "inlineReview"}, {"oid": "5139642c3913e9e3ef62f5e6754bc69c2a98e8fd", "url": "https://github.com/AntennaPod/AntennaPod/commit/5139642c3913e9e3ef62f5e6754bc69c2a98e8fd", "message": "Incorporated review comments 2", "committedDate": "2020-09-29T03:06:13Z", "type": "commit"}]}