{"pr_number": 4646, "pr_title": "Add Notifications for episodes", "pr_createdAt": "2020-11-04T19:01:35Z", "pr_url": "https://github.com/AntennaPod/AntennaPod/pull/4646", "timeline": [{"oid": "e6927e6d96a2fe2aa2004b7206a8c20acbf07a3e", "url": "https://github.com/AntennaPod/AntennaPod/commit/e6927e6d96a2fe2aa2004b7206a8c20acbf07a3e", "message": "add basic implementation of episode notification.", "committedDate": "2020-11-04T18:42:28Z", "type": "commit"}, {"oid": "0090f9d55e3cd8e11eaee1aa650245365e77fefc", "url": "https://github.com/AntennaPod/AntennaPod/commit/0090f9d55e3cd8e11eaee1aa650245365e77fefc", "message": "add intent for opening feed on clicking the notification.", "committedDate": "2020-11-04T18:42:51Z", "type": "commit"}, {"oid": "aa1c0ba7b4296940bd7d79dcb474b4269634ee65", "url": "https://github.com/AntennaPod/AntennaPod/commit/aa1c0ba7b4296940bd7d79dcb474b4269634ee65", "message": "fixed not showing new episode notification.", "committedDate": "2020-11-04T18:42:51Z", "type": "commit"}, {"oid": "e4ab744f446e6c990a58fe980c3f402e94562ffc", "url": "https://github.com/AntennaPod/AntennaPod/commit/e4ab744f446e6c990a58fe980c3f402e94562ffc", "message": "fixed notification not opening podcast feed.", "committedDate": "2020-11-04T18:42:51Z", "type": "commit"}, {"oid": "d7966d80932b81d81de05e1adf263ff131a4db5f", "url": "https://github.com/AntennaPod/AntennaPod/commit/d7966d80932b81d81de05e1adf263ff131a4db5f", "message": "add handling for when podcast does not yet have an episode", "committedDate": "2020-11-04T18:42:51Z", "type": "commit"}, {"oid": "89422b8e28ce975e792f07d18dcaaf3c401eb355", "url": "https://github.com/AntennaPod/AntennaPod/commit/89422b8e28ce975e792f07d18dcaaf3c401eb355", "message": "put code for creating channel next to similar code.", "committedDate": "2020-11-04T18:42:51Z", "type": "commit"}, {"oid": "029cfadc0b9ceb20e7300411d8f98867537c0fe4", "url": "https://github.com/AntennaPod/AntennaPod/commit/029cfadc0b9ceb20e7300411d8f98867537c0fe4", "message": "fix race condition.", "committedDate": "2020-11-04T18:42:51Z", "type": "commit"}, {"oid": "02ea778c89c9a30120f2be2656c524b44b0139b2", "url": "https://github.com/AntennaPod/AntennaPod/commit/02ea778c89c9a30120f2be2656c524b44b0139b2", "message": "use ic_notifications instead of own image to remove duplicate assets", "committedDate": "2020-11-04T18:42:51Z", "type": "commit"}, {"oid": "6d20fa6b57ef38e1f080334066eeb75fac6153d0", "url": "https://github.com/AntennaPod/AntennaPod/commit/6d20fa6b57ef38e1f080334066eeb75fac6153d0", "message": "use tag for episode notification so only correct notifications are overwritten.", "committedDate": "2020-11-04T18:42:51Z", "type": "commit"}, {"oid": "433a2ff29a5205ebbea5b19b042d236c105013e6", "url": "https://github.com/AntennaPod/AntennaPod/commit/433a2ff29a5205ebbea5b19b042d236c105013e6", "message": "some minor code cleanup", "committedDate": "2020-11-04T19:29:45Z", "type": "commit"}, {"oid": "55f07fa244648a50aa178c21ec3466d6cd54c564", "url": "https://github.com/AntennaPod/AntennaPod/commit/55f07fa244648a50aa178c21ec3466d6cd54c564", "message": "fix NullPointerException in hashCode in FeedItem", "committedDate": "2020-11-04T22:10:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY1MjI3OA==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r517652278", "bodyText": "For the new code, please use the same indention as the rest of the file (12 spaces vs 8 spaces)", "author": "ByteHamster", "createdAt": "2020-11-04T21:51:51Z", "path": "app/src/main/res/xml/feed_settings.xml", "diffHunk": "@@ -9,6 +9,14 @@\n             android:title=\"@string/keep_updated\"\n             android:summary=\"@string/keep_updated_summary\"/>\n \n+    <SwitchPreferenceCompat\n+        android:key=\"episodeNotification\"\n+        android:defaultValue=\"false\"\n+        android:dependency=\"keepUpdated\"\n+        android:icon=\"?attr/ic_notifications\"\n+        android:title=\"@string/episode_notification\"\n+        android:summary=\"@string/episode_notification_summary\"/>", "originalCommit": "433a2ff29a5205ebbea5b19b042d236c105013e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY1NDc5Ng==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r517654796", "bodyText": "Please always use braces. You can find more details about the code style in the wiki: https://github.com/AntennaPod/AntennaPod/wiki/Code-style\nEdit: not sure if this will still be needed when using the \"new\" episodes (see other comments)", "author": "ByteHamster", "createdAt": "2020-11-04T21:57:18Z", "path": "core/src/main/java/de/danoeh/antennapod/core/feed/FeedItem.java", "diffHunk": "@@ -489,4 +489,27 @@ public boolean isAutoDownloadable() {\n     public String toString() {\n         return ToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE);\n     }\n+\n+    @Override\n+    public int hashCode() {\n+        int result = 17;\n+\n+        result = 31 * result + itemIdentifier.hashCode();\n+        result = 31 * result + (int) (feedId ^ (feedId >>> 32));\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)", "originalCommit": "433a2ff29a5205ebbea5b19b042d236c105013e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY1NzE2NA==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r517657164", "bodyText": "How about Show a notification when a new episode is released.?", "author": "ByteHamster", "createdAt": "2020-11-04T22:02:28Z", "path": "core/src/main/res/values/strings.xml", "diffHunk": "@@ -719,6 +719,8 @@\n     <string name=\"statistics_episodes_on_device\">Episodes on the device:</string>\n     <string name=\"statistics_space_used\">Space used:</string>\n     <string name=\"statistics_view_all\">View for all podcasts \u00bb</string>\n+    <string name=\"episode_notification\">Episode Notifications</string>\n+    <string name=\"episode_notification_summary\">Shows a notification when a new episode comes out.</string>", "originalCommit": "433a2ff29a5205ebbea5b19b042d236c105013e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY1NzY2Ng==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r517657666", "bodyText": "Could you please remove the newline before this and move new_episode_message further up to episode_notification_summary? I think the section here is only about the notification channels themselves.", "author": "ByteHamster", "createdAt": "2020-11-04T22:03:41Z", "path": "core/src/main/res/values/strings.xml", "diffHunk": "@@ -863,6 +865,13 @@\n     <string name=\"notification_channel_auto_download\">Auto Downloads</string>\n     <string name=\"notification_channel_episode_auto_download\">Shown when episodes have been automatically downloaded.</string>\n \n+    <string name=\"notification_channel_new_episode\">New Episode</string>", "originalCommit": "433a2ff29a5205ebbea5b19b042d236c105013e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2MDkxOA==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r517660918", "bodyText": "I think it is a bit risky doing this with an event. The worker could already be stopped (because refreshing is performed in a service, not the worker here) and could therefore not receive events when the download service is stopped. I think it would be better to create a new class NewEpisodesNotification (?) next to the DownloadServiceNotification class and call the method directly from DownloadService. Currently, that's just a broad direction. I am aware that it does not directly work like I suggested (storing state etc). Just a broad direction that I would find more clean and stable.", "author": "ByteHamster", "createdAt": "2020-11-04T22:11:03Z", "path": "core/src/main/java/de/danoeh/antennapod/core/service/FeedUpdateWorker.java", "diffHunk": "@@ -44,4 +89,51 @@ public Result doWork() {\n \n         return Result.success();\n     }\n+\n+    @Subscribe(sticky = true, threadMode = ThreadMode.MAIN)", "originalCommit": "433a2ff29a5205ebbea5b19b042d236c105013e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2MjU0Nw==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r517662547", "bodyText": "In the worst case, this will load all episodes of all feeds. That will lead to out-of-memory errors when using a big list of feeds. Something similar was done in another location and I just recently found out that this is responsible for a pretty decent number of crashes. So there must be some way to do that without storing all episodes.\nDo we actually need to store what episodes are new? I think the \"new\" flag in the database is basically meant to be used for exactly that purpose: an episode that users have not interacted with yet. Using the \"new\" flag will also fix this case:\n\nCurrently if there a notification for 2 episodes and another is found, the notification gets updated with only the newly found episodes (e.g 1) instead of adding the previous episodes", "author": "ByteHamster", "createdAt": "2020-11-04T22:14:47Z", "path": "core/src/main/java/de/danoeh/antennapod/core/service/FeedUpdateWorker.java", "diffHunk": "@@ -31,6 +56,26 @@ public Result doWork() {\n         ClientConfig.initialize(getApplicationContext());\n \n         if (NetworkUtils.networkAvailable() && NetworkUtils.isFeedRefreshAllowed()) {\n+            List<Feed> feeds = new ArrayList<>();\n+            Map<Long, FeedItem> lastItemsMap = new HashMap<>();\n+\n+            for (Feed feed : DBReader.getFeedList()) {\n+                FeedPreferences prefs = feed.getPreferences();\n+                if (prefs.getKeepUpdated() && prefs.getShowNotification()) {\n+                    List<FeedItem> outdatedFeedItems = DBReader.getFeedItemList(feed);", "originalCommit": "433a2ff29a5205ebbea5b19b042d236c105013e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3NzU3OA==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r517677578", "bodyText": "I thought about that, but basically you would end up with a lot of notifications, because you would get a notification each time there is a background update and there is some episode marked as new. So you gotta go through your podcasts and manually remove all the new flags. But sure this has to be change.", "author": "connectety", "createdAt": "2020-11-04T22:50:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2MjU0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU3Mjk0OA==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r518572948", "bodyText": "How about using the database to store the most recent episode ID for each subscription (or alternatively, maybe more efficiently, simply the number of episodes)? If the most recent episode changes during refresh, display a notification of all \"new\" episodes. That way, we do not need to store another flag per episode (which needs more space when multiplying with 20k+ items), only one per subscription. Also, this fixes the case that the notification is not updated properly when there are additional new items.\nIt still might display a notification for a new item twice but only if there is an additional new item. I think this is pretty reasonable and also is consistent with the idea of \"new\" episodes, being the ones you have not interacted with yet.", "author": "ByteHamster", "createdAt": "2020-11-06T07:44:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2MjU0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyOTA4Ng==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r518929086", "bodyText": "Okay, so I just had a look at what you recently changed. I like that it works without new database entries that store the episode state. How about making the NewEpisodesNotification class a normal object that is created when the download service starts and then shows the notification when the download service is stopped? I think static variables that store actual user data should be avoided when possible because it makes it harder to add unit tests.", "author": "ByteHamster", "createdAt": "2020-11-06T18:27:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2MjU0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1NTkzMw==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r519055933", "bodyText": "While implementing this I also had the idea of using the new Flag but clearing it every-time the feed gets opened or notification gets dismissed and giving the option to clear it via an notification action. I didn't do this because this would (besides being more work) change the behavior of the new flag feature and to me it feels like a whole other issue & discussion which should be solved in its own PR.\n(leaving this open for now in case there is anything to be said about this)", "author": "connectety", "createdAt": "2020-11-06T23:36:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2MjU0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1NDA0OQ==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r519154049", "bodyText": "My idea was not to clear the new flag. Just notify for all \"new\" flagged episodes if (and only if) an additional episode is released. This fixes this problem:\n\nCurrently if there a notification for 2 episodes and another is found, the notification gets updated with only the newly found episodes (e.g 1) instead of adding the previous episodes\n\nI think that it is okay to display all \"new\" flagged ones again (even if they might be displayed twice, then) because they are only displayed twice if an additional one was released. I also think that it is okay to display them again - being flagged as \"new\" means that the user has not interacted with them yet.", "author": "ByteHamster", "createdAt": "2020-11-07T08:45:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2MjU0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2MzU0Nw==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r517663547", "bodyText": "It's stored in PodDBAdapter.VERSION. I usually use the expected release version code for that change. As this will be released in AntennaPod 2.2.0, the code would be 2020000.", "author": "ByteHamster", "createdAt": "2020-11-04T22:17:02Z", "path": "core/src/main/java/de/danoeh/antennapod/core/storage/DBUpgrader.java", "diffHunk": "@@ -310,6 +310,10 @@ static void upgrade(final SQLiteDatabase db, final int oldVersion, final int new\n             db.execSQL(\"ALTER TABLE \" + PodDBAdapter.TABLE_NAME_FEEDS +\n                     \" ADD COLUMN \" + PodDBAdapter.KEY_FEED_SKIP_ENDING + \" INTEGER DEFAULT 0;\");\n         }\n+        if (oldVersion < 1090001) { // fixme / todo: fix  version", "originalCommit": "433a2ff29a5205ebbea5b19b042d236c105013e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2NzI0MQ==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r517667241", "bodyText": "How about adding another string when multiple feeds have new episodes? Could be something like %1$s and %2$s have %3$d new episodes. This can't be done by Android automatically, switching between the messages would need to be done manually.", "author": "ByteHamster", "createdAt": "2020-11-04T22:25:40Z", "path": "core/src/main/res/values/strings.xml", "diffHunk": "@@ -863,6 +865,13 @@\n     <string name=\"notification_channel_auto_download\">Auto Downloads</string>\n     <string name=\"notification_channel_episode_auto_download\">Shown when episodes have been automatically downloaded.</string>\n \n+    <string name=\"notification_channel_new_episode\">New Episode</string>\n+    <string name=\"notification_channel_new_episode_description\">Shown when a new episode of a podcast was found, where notifications are enabled</string>\n+    <plurals name=\"new_episode_message\">\n+        <item quantity=\"one\">%2$s has a new episode</item>\n+        <item quantity=\"other\">%2$s has %1$d new episodes</item>\n+    </plurals>", "originalCommit": "55f07fa244648a50aa178c21ec3466d6cd54c564", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3MTQ0Nw==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r517671447", "bodyText": "ATM every feed gets one notification, so if there already is a notification for one feed you still get a sound if a new episodes drops on another feed (I don't think you get a sound when you update a notification). So I should have to change the notification code too.", "author": "connectety", "createdAt": "2020-11-04T22:35:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2NzI0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU2OTk2MQ==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r518569961", "bodyText": "Okay, having one notification per subscription is fine, too, as long as you only get one notification sound during refresh, even if there are new episodes of multiple subscriptions. How about using notification groups, so that users can swipe away all of them at once if they want? https://developer.android.com/training/notify-user/group", "author": "ByteHamster", "createdAt": "2020-11-06T07:37:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2NzI0MQ=="}], "type": "inlineReview"}, {"oid": "a7834999f9f683388937c4af52ec166f7f4c20e5", "url": "https://github.com/AntennaPod/AntennaPod/commit/a7834999f9f683388937c4af52ec166f7f4c20e5", "message": "fix indentation", "committedDate": "2020-11-04T22:37:41Z", "type": "commit"}, {"oid": "70024630793a999b4978552cf25af36a48ed9c14", "url": "https://github.com/AntennaPod/AntennaPod/commit/70024630793a999b4978552cf25af36a48ed9c14", "message": "add braces to if", "committedDate": "2020-11-04T22:40:54Z", "type": "commit"}, {"oid": "1dcdf0f704277f8552dfc2a6a9df195ba146ff30", "url": "https://github.com/AntennaPod/AntennaPod/commit/1dcdf0f704277f8552dfc2a6a9df195ba146ff30", "message": "fix placement of strings in strings file and update episode_notification_summary string", "committedDate": "2020-11-04T22:49:52Z", "type": "commit"}, {"oid": "8f3dbfa31a86765fc3e2446512c81fc581bdb4a7", "url": "https://github.com/AntennaPod/AntennaPod/commit/8f3dbfa31a86765fc3e2446512c81fc581bdb4a7", "message": "create EpisodesNotification class for displaying Episodes Notifications\nthis removes the need for EventBus and thus removes the DownloadFinishedEvent class", "committedDate": "2020-11-06T10:13:21Z", "type": "commit"}, {"oid": "adaf21a5f04a08ee8c5b94f23ed534aca48aa051", "url": "https://github.com/AntennaPod/AntennaPod/commit/adaf21a5f04a08ee8c5b94f23ed534aca48aa051", "message": "set correct version in DBUpgrader", "committedDate": "2020-11-06T11:30:53Z", "type": "commit"}, {"oid": "adaf21a5f04a08ee8c5b94f23ed534aca48aa051", "url": "https://github.com/AntennaPod/AntennaPod/commit/adaf21a5f04a08ee8c5b94f23ed534aca48aa051", "message": "set correct version in DBUpgrader", "committedDate": "2020-11-06T11:30:53Z", "type": "forcePushed"}, {"oid": "87cc5978ff00b9beb51b50e2e56eeff2d2b698f2", "url": "https://github.com/AntennaPod/AntennaPod/commit/87cc5978ff00b9beb51b50e2e56eeff2d2b698f2", "message": "rename EpisodeNotification to NewEpisodesNotification bc the name didn't have a distinct meaning", "committedDate": "2020-11-06T13:53:49Z", "type": "commit"}, {"oid": "425e7fd2b6288b0dc2e6f5fceae42dc02412ac50", "url": "https://github.com/AntennaPod/AntennaPod/commit/425e7fd2b6288b0dc2e6f5fceae42dc02412ac50", "message": "Make proper use of NewEpisodesNotification instead of using it as a wrapper class.", "committedDate": "2020-11-06T23:28:27Z", "type": "commit"}, {"oid": "55c5e6300adff360fc4b708f91cdeedc2cf47918", "url": "https://github.com/AntennaPod/AntennaPod/commit/55c5e6300adff360fc4b708f91cdeedc2cf47918", "message": "use consistent wording for episode notifications", "committedDate": "2020-11-06T23:50:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1NDU0OQ==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r519154549", "bodyText": "How about storing just the FeedItem id here instead of the whole FeedItem? That avoids storing data unnecessarily.", "author": "ByteHamster", "createdAt": "2020-11-07T08:52:14Z", "path": "core/src/main/java/de/danoeh/antennapod/core/service/download/NewEpisodesNotification.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package de.danoeh.antennapod.core.service.download;\n+\n+import android.app.PendingIntent;\n+import android.content.ComponentName;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.res.Resources;\n+\n+import androidx.core.app.NotificationCompat;\n+import androidx.core.app.NotificationManagerCompat;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.feed.Feed;\n+import de.danoeh.antennapod.core.feed.FeedItem;\n+import de.danoeh.antennapod.core.feed.FeedPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.util.gui.NotificationUtils;\n+\n+public class NewEpisodesNotification {\n+    private final List<Feed> feeds = new ArrayList<>();\n+    private final Map<Long, FeedItem> lastItemsMap = new HashMap<>();", "originalCommit": "55c5e6300adff360fc4b708f91cdeedc2cf47918", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "13d7403594490143970b3140a15b770ba4240547", "url": "https://github.com/AntennaPod/AntennaPod/commit/13d7403594490143970b3140a15b770ba4240547", "message": "use ids instead of full objects for storing vars to decrease memory consumption", "committedDate": "2020-11-07T12:36:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMwMzA1Mw==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r519303053", "bodyText": "Sorry for all the back and forth. I just noticed a problem with this method. This executes database operations on the main thread, which could lead to problems when having a big number of feeds. How about moving notification handling to handleSuccessfulDownload? That one is executed in the background. Also, the FeedSyncTask that it called there needs to load the feed anyway. Maybe that task could get another property that shows if there was a new item.", "author": "ByteHamster", "createdAt": "2020-11-08T08:56:17Z", "path": "core/src/main/java/de/danoeh/antennapod/core/service/download/DownloadService.java", "diffHunk": "@@ -178,6 +180,8 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n     @Override\n     public void onCreate() {\n         Log.d(TAG, \"Service started\");\n+        newEpisodesNotification = new NewEpisodesNotification(getApplicationContext());", "originalCommit": "13d7403594490143970b3140a15b770ba4240547", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwNzg3OA==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r526507878", "bodyText": "Not sure if I understood this correctly... like this?", "author": "connectety", "createdAt": "2020-11-19T00:15:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMwMzA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYzMTMyNA==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r527631324", "bodyText": "The problem is that you call the NewEpisodesNotification constructor in onCreate. This causes database operations like DBReader.getFeedItemList to be executed on the main thread (which can cause \"application not responding\" errors if it takes too long). Currently, you handle all subscriptions at once. My suggestion would be to handle the subscriptions one by one in FeedSyncTask (called from handleSuccessfulDownload). That way, loading the items is done in a background thread (because handleSuccessfulDownload is called in a background thread). Doing this in FeedSyncTask has another advantage: The class loads the feed from the database anyway. So when using that class, AntennaPod needs to do fewer database queries, which is good for the performance.", "author": "ByteHamster", "createdAt": "2020-11-20T11:32:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMwMzA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgwNjc1MQ==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r531806751", "bodyText": "This took me some time because there are some issues, which seam hard to fix to me:\n\nbecause this is split up now, there is no unified place to create the group summary from. also I would have to create another data class for holding the Group summary and pass it around like a hot potato between the classes and methods, so I could get the information about the feeds without recalculating it and still call it after all the feedSync stuff is done. (thats why the group summary has currently been removed)\nbecause this is split up and slightly asynchronous I fear it might have more than one notification sound now.\nI can't see where I would get feed data like the current episode list or prefs without another DB conenction. (I mean i could do another hot potato thing for the prefs) (to my understanding this currently makes the tests fail)", "author": "connectety", "createdAt": "2020-11-27T23:28:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMwMzA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgwNzg0MQ==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r531807841", "bodyText": "I will have a look at the code changes later but I already have some comments to your message :)\n\nbecause this is split up and slightly asynchronous I fear it might have more than one notification sound now.\n\nCould something like this help? I have not tested it but it looks like it is possible to only have one notification sound per group. https://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder#setGroupAlertBehavior(int)\n\nbecause this is split up now, there is no unified place to create the group summary from\n\nMaybe something like \"You have new episodes\" without the number could be enough (and is easier to implement).\n\nI can't fully see where I would use some db connection\n\nAnything that calls DbReader or DbWriter should not be called on the UI thread.", "author": "ByteHamster", "createdAt": "2020-11-27T23:38:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMwMzA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI3MTQ2MQ==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r534271461", "bodyText": "Maybe something like \"You have new episodes\" without the number could be enough (and is easier to implement).\n\nThis does not work because:\n\nTo support older versions, which cannot show a nested group of notifications, you must create an extra notification that acts as the summary. This appears as the only notification [...]. So this summary should include a snippet from all the other notifications, which the user can tap to open your app.\n\nSo in our case users with pre Android 7.0 would only see that some number of podcast have some amount of new episodes, and the only action they have is to open the app. And this is only this way after somehow telling some part if it should create a summary at all. I think In this case I would prefer not having the ability to Group up the notifications and having to delete them all individually over only having a vague something. Althought:\n\nThe behavior of the group summary may vary on some device types such as wearables. To ensure the best experience on all devices and versions, always include a group summary when you create a group.\n\nSo maybe the only right thing to do make live hard and pass the data around.", "author": "connectety", "createdAt": "2020-12-02T15:46:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMwMzA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ2NjE4Nw==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r534466187", "bodyText": "Hmm, maybe we could create a single notification manager object in DownloadService that does something like this in onCreate?\nsyncExecutor.execute(() -> newEpisodeNotification.loadCounters());\n\nsyncExecutor is a single background thread, so if posting the method call to that thread is the first thing that the DownloadService does, we can be sure that the counters are loaded before the first feed is parsed.\nThen it could do something like this in handleSuccessfulDownload:\nnewEpisodeNotification.displayIfNecessary(request);\n\nThe problem is that we can not really do database things in onDestroy. The method itself is called on the main thread and it needs to shut down the executors. So the easiest method would be to do this in handleSuccessfulDownload, I think.", "author": "ByteHamster", "createdAt": "2020-12-02T20:39:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMwMzA1Mw=="}], "type": "inlineReview"}, {"oid": "9ebaf0b32231806d22186d5128fe196a0f196ea5", "url": "https://github.com/AntennaPod/AntennaPod/commit/9ebaf0b32231806d22186d5128fe196a0f196ea5", "message": "add Grouping to episode notifications & make the title translatable", "committedDate": "2020-11-08T14:41:02Z", "type": "forcePushed"}, {"oid": "9af1a59149d1fdcbfe304fa3cf40a3c94ecd818e", "url": "https://github.com/AntennaPod/AntennaPod/commit/9af1a59149d1fdcbfe304fa3cf40a3c94ecd818e", "message": "add Grouping to episode notifications, make the title translatable and place the string in a more correct place in strings.xml", "committedDate": "2020-11-08T14:49:07Z", "type": "commit"}, {"oid": "9af1a59149d1fdcbfe304fa3cf40a3c94ecd818e", "url": "https://github.com/AntennaPod/AntennaPod/commit/9af1a59149d1fdcbfe304fa3cf40a3c94ecd818e", "message": "add Grouping to episode notifications, make the title translatable and place the string in a more correct place in strings.xml", "committedDate": "2020-11-08T14:49:07Z", "type": "forcePushed"}, {"oid": "318be891e864e3ea0b9187a9f4440982621f561f", "url": "https://github.com/AntennaPod/AntennaPod/commit/318be891e864e3ea0b9187a9f4440982621f561f", "message": "reduce memory usage by deleting an feedIDs-Arraylist and using lastItemsMap more instead", "committedDate": "2020-11-09T20:15:51Z", "type": "commit"}, {"oid": "dfe165cdf18ced967a29bf8aace400c9f2b917eb", "url": "https://github.com/AntennaPod/AntennaPod/commit/dfe165cdf18ced967a29bf8aace400c9f2b917eb", "message": "fix all checkstyle errors in previously changed lines", "committedDate": "2020-11-09T22:06:05Z", "type": "commit"}, {"oid": "30a072b7ac358a622dc51ed5e3fa3dee052acae4", "url": "https://github.com/AntennaPod/AntennaPod/commit/30a072b7ac358a622dc51ed5e3fa3dee052acae4", "message": "fix incorrectly using feedId instead of lastKnownEpisodeId", "committedDate": "2020-11-19T00:11:52Z", "type": "commit"}, {"oid": "abe14bb7dc7dfa4c842fa59f2ce13f609d5aab0f", "url": "https://github.com/AntennaPod/AntennaPod/commit/abe14bb7dc7dfa4c842fa59f2ce13f609d5aab0f", "message": "call NewEpisodesNotification from FeedSyncTask", "committedDate": "2020-11-27T22:53:13Z", "type": "commit"}, {"oid": "abe14bb7dc7dfa4c842fa59f2ce13f609d5aab0f", "url": "https://github.com/AntennaPod/AntennaPod/commit/abe14bb7dc7dfa4c842fa59f2ce13f609d5aab0f", "message": "call NewEpisodesNotification from FeedSyncTask", "committedDate": "2020-11-27T22:53:13Z", "type": "forcePushed"}, {"oid": "4f5dde4ec49c86e75eca4cd73aeeddeaca449c0c", "url": "https://github.com/AntennaPod/AntennaPod/commit/4f5dde4ec49c86e75eca4cd73aeeddeaca449c0c", "message": "remove unused imports and \"this.\" .", "committedDate": "2020-11-27T23:25:41Z", "type": "commit"}, {"oid": "d2d4d96d09104e5430047f7e72f508eace9e2878", "url": "https://github.com/AntennaPod/AntennaPod/commit/d2d4d96d09104e5430047f7e72f508eace9e2878", "message": "get feed from FeedSyncTask.run instead of storing the feedID and creating a feed via DB", "committedDate": "2020-11-28T00:01:44Z", "type": "commit"}, {"oid": "2d456ad462fb96626fd57893125e9c1a684b8173", "url": "https://github.com/AntennaPod/AntennaPod/commit/2d456ad462fb96626fd57893125e9c1a684b8173", "message": "Merge remote-tracking branch 'upstream/develop' into notify-change", "committedDate": "2020-11-28T00:12:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUwOTIyMQ==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r532509221", "bodyText": "How about naming this showIfNeeded()?", "author": "ByteHamster", "createdAt": "2020-11-30T10:55:44Z", "path": "core/src/main/java/de/danoeh/antennapod/core/service/download/NewEpisodesNotification.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package de.danoeh.antennapod.core.service.download;\n+\n+import android.app.Notification;\n+import android.app.PendingIntent;\n+import android.content.ComponentName;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.res.Resources;\n+\n+import androidx.core.app.NotificationCompat;\n+import androidx.core.app.NotificationManagerCompat;\n+\n+import java.util.List;\n+\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.feed.Feed;\n+import de.danoeh.antennapod.core.feed.FeedItem;\n+import de.danoeh.antennapod.core.feed.FeedPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.util.gui.NotificationUtils;\n+\n+public class NewEpisodesNotification {\n+    static final String GROUP_KEY = \"de.danoeh.antennapod.EPISODES\";\n+\n+    private final Long lastEpisodeID;\n+    private final boolean dontShowNotification;\n+\n+    public NewEpisodesNotification(Long feedId) {\n+        Feed feed = DBReader.getFeed(feedId);\n+\n+        FeedPreferences prefs = feed.getPreferences();\n+        if (!prefs.getKeepUpdated() || !prefs.getShowEpisodeNotification()) {\n+            dontShowNotification = true;\n+            lastEpisodeID = null;\n+            return;\n+        }\n+\n+        List<FeedItem> feedItems = DBReader.getFeedItemList(feed);\n+\n+        Long newestEpisodeId = null;\n+        if (!feedItems.isEmpty()) {\n+            newestEpisodeId = feedItems.get(0).getId();\n+        }\n+\n+        dontShowNotification = false;\n+\n+        // newestEpisodeId is null if the feed does not have an an episode yet\n+        lastEpisodeID = newestEpisodeId;\n+    }\n+\n+    public void showNotification(Context context, Feed feed) {", "originalCommit": "d2d4d96d09104e5430047f7e72f508eace9e2878", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUxMjc5MQ==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r532512791", "bodyText": "How about using PodDbAdapter.getFeedCounters here? If you make the setting an argument of the method, the code here can only load the number of new items for a specific feed instead of loading the whole feed and all its items. I know this is slightly different to what I wrote earlier but that way, it could be even more efficient ;)", "author": "ByteHamster", "createdAt": "2020-11-30T11:01:33Z", "path": "core/src/main/java/de/danoeh/antennapod/core/service/download/NewEpisodesNotification.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package de.danoeh.antennapod.core.service.download;\n+\n+import android.app.Notification;\n+import android.app.PendingIntent;\n+import android.content.ComponentName;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.res.Resources;\n+\n+import androidx.core.app.NotificationCompat;\n+import androidx.core.app.NotificationManagerCompat;\n+\n+import java.util.List;\n+\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.feed.Feed;\n+import de.danoeh.antennapod.core.feed.FeedItem;\n+import de.danoeh.antennapod.core.feed.FeedPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.util.gui.NotificationUtils;\n+\n+public class NewEpisodesNotification {\n+    static final String GROUP_KEY = \"de.danoeh.antennapod.EPISODES\";\n+\n+    private final Long lastEpisodeID;\n+    private final boolean dontShowNotification;\n+\n+    public NewEpisodesNotification(Long feedId) {\n+        Feed feed = DBReader.getFeed(feedId);\n+\n+        FeedPreferences prefs = feed.getPreferences();\n+        if (!prefs.getKeepUpdated() || !prefs.getShowEpisodeNotification()) {\n+            dontShowNotification = true;\n+            lastEpisodeID = null;\n+            return;\n+        }\n+\n+        List<FeedItem> feedItems = DBReader.getFeedItemList(feed);", "originalCommit": "d2d4d96d09104e5430047f7e72f508eace9e2878", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU2NDM2Mg==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r532564362", "bodyText": "is this always 100% accurate? I thought this might fail when you have a huge amount of episodes, because AntennaPod might delete records of old episodes at some point.\n(because the maintainers (you) should know better than me, i'm creating a commit now which implements this. I will revert it in case this AntennaPod does infact delete old records, otherwise pls let me know)", "author": "connectety", "createdAt": "2020-11-30T12:34:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUxMjc5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzMTE2Nw==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r532831167", "bodyText": "AntennaPod might delete records of old episodes at some point.\n\nAntennaPod does not delete old items. Not seeing all episodes only happens when you subscribe to a new podcast and the publishers delete old episodes. I think it should be okay because even if we did clean up, we would probably not delete new items.", "author": "ByteHamster", "createdAt": "2020-11-30T19:05:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUxMjc5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUxMzAyMg==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r532513022", "bodyText": "Please remove this change, so that the PR does not touch unrelated files", "author": "ByteHamster", "createdAt": "2020-11-30T11:01:59Z", "path": "core/src/main/java/de/danoeh/antennapod/core/service/download/DownloadService.java", "diffHunk": "@@ -178,6 +178,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n     @Override\n     public void onCreate() {\n         Log.d(TAG, \"Service started\");\n+", "originalCommit": "d2d4d96d09104e5430047f7e72f508eace9e2878", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUxMzQwMg==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r532513402", "bodyText": "I think those methods are no longer needed. Could you please remove them again?", "author": "ByteHamster", "createdAt": "2020-11-30T11:02:35Z", "path": "core/src/main/java/de/danoeh/antennapod/core/feed/FeedItem.java", "diffHunk": "@@ -489,4 +489,29 @@ public boolean isAutoDownloadable() {\n     public String toString() {\n         return ToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE);\n     }\n+\n+    @Override\n+    public int hashCode() {\n+        int result = itemIdentifier != null ? itemIdentifier.hashCode() : 0;\n+        result = 31 * result + (int) (feedId ^ (feedId >>> 32));\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        FeedItem other = (FeedItem) obj;\n+        if (feedId != other.feedId) {\n+            return false;\n+        }\n+        return getIdentifyingValue().equals(other.getIdentifyingValue());\n+    }", "originalCommit": "d2d4d96d09104e5430047f7e72f508eace9e2878", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU1MTQ1Ng==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r532551456", "bodyText": "I think they are needed for indexOf to work (maybe not but I introduced it with other things to fix an error), alternatively they are definitly needed when using the new flag count because I would just compare if the first object is still the same using equals and than create a notification with the episode count marked as new. But maybe possibly not both are needed (although i created both because you should always create both).\n(leaving open as a reminder to test if this still works before closing)\nnvm only read the comment about using PodDbAdapter.getFeedCounters later.", "author": "connectety", "createdAt": "2020-11-30T12:10:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUxMzQwMg=="}], "type": "inlineReview"}, {"oid": "6139dfe83bdbdb70d314791a45a6905881746866", "url": "https://github.com/AntennaPod/AntennaPod/commit/6139dfe83bdbdb70d314791a45a6905881746866", "message": "undo accidentally creating a new line", "committedDate": "2020-11-30T12:20:17Z", "type": "commit"}, {"oid": "4ccefb16c779a7c74eb7d228d1ded92986bccb0d", "url": "https://github.com/AntennaPod/AntennaPod/commit/4ccefb16c779a7c74eb7d228d1ded92986bccb0d", "message": "use PodDBAdapter.getFeedCounters() instead of comparing the feed items in NewEpisodesNotification. This also eliminates the need for equals in FeedItem.", "committedDate": "2020-11-30T12:49:55Z", "type": "commit"}, {"oid": "7628be1055337bf1ad033578bb068b53935fc20d", "url": "https://github.com/AntennaPod/AntennaPod/commit/7628be1055337bf1ad033578bb068b53935fc20d", "message": "rename NewEpisodesNotification.showNotification to showIfNeeded", "committedDate": "2020-11-30T12:53:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzMjIyNQ==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r532832225", "bodyText": "Even if the adapter's open and close methods currently don't do much, please use them for consistency.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int episodeCount = PodDBAdapter.getInstance().getFeedCounters(feedId).get(feedId);\n          \n          \n            \n                    PodDBAdapter adapter = PodDBAdapter.getInstance();\n          \n          \n            \n                    adapter.open();\n          \n          \n            \n                    int episodeCount = adapter.getFeedCounters(feedId).get(feedId);\n          \n          \n            \n                    adapter.close();", "author": "ByteHamster", "createdAt": "2020-11-30T19:06:59Z", "path": "core/src/main/java/de/danoeh/antennapod/core/service/download/NewEpisodesNotification.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package de.danoeh.antennapod.core.service.download;\n+\n+import android.app.Notification;\n+import android.app.PendingIntent;\n+import android.content.ComponentName;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.res.Resources;\n+\n+import androidx.core.app.NotificationCompat;\n+import androidx.core.app.NotificationManagerCompat;\n+\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.feed.Feed;\n+import de.danoeh.antennapod.core.feed.FeedPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+import de.danoeh.antennapod.core.util.gui.NotificationUtils;\n+\n+public class NewEpisodesNotification {\n+    static final String GROUP_KEY = \"de.danoeh.antennapod.EPISODES\";\n+\n+    private final int lastEpisodeCount;\n+    private final boolean dontShowNotification;\n+\n+    public NewEpisodesNotification(Long feedId) {\n+        Feed feed = DBReader.getFeed(feedId);\n+\n+        FeedPreferences prefs = feed.getPreferences();\n+        if (!prefs.getKeepUpdated() || !prefs.getShowEpisodeNotification()) {\n+            dontShowNotification = true;\n+            lastEpisodeCount = -1;\n+            return;\n+        }\n+\n+        lastEpisodeCount = PodDBAdapter.getInstance().getFeedCounters(feedId).get(feedId);\n+\n+        dontShowNotification = false;\n+    }\n+\n+    public void showIfNeeded(Context context, Feed feed) {\n+        if (dontShowNotification) {\n+            return;\n+        }\n+\n+        long feedId = feed.getId();\n+        int episodeCount = PodDBAdapter.getInstance().getFeedCounters(feedId).get(feedId);", "originalCommit": "7628be1055337bf1ad033578bb068b53935fc20d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzMjY4Ng==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r532832686", "bodyText": "Please move this ) to the line above", "author": "ByteHamster", "createdAt": "2020-11-30T19:07:46Z", "path": "core/src/main/java/de/danoeh/antennapod/core/service/download/NewEpisodesNotification.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package de.danoeh.antennapod.core.service.download;\n+\n+import android.app.Notification;\n+import android.app.PendingIntent;\n+import android.content.ComponentName;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.res.Resources;\n+\n+import androidx.core.app.NotificationCompat;\n+import androidx.core.app.NotificationManagerCompat;\n+\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.feed.Feed;\n+import de.danoeh.antennapod.core.feed.FeedPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+import de.danoeh.antennapod.core.util.gui.NotificationUtils;\n+\n+public class NewEpisodesNotification {\n+    static final String GROUP_KEY = \"de.danoeh.antennapod.EPISODES\";\n+\n+    private final int lastEpisodeCount;\n+    private final boolean dontShowNotification;\n+\n+    public NewEpisodesNotification(Long feedId) {\n+        Feed feed = DBReader.getFeed(feedId);\n+\n+        FeedPreferences prefs = feed.getPreferences();\n+        if (!prefs.getKeepUpdated() || !prefs.getShowEpisodeNotification()) {\n+            dontShowNotification = true;\n+            lastEpisodeCount = -1;\n+            return;\n+        }\n+\n+        lastEpisodeCount = PodDBAdapter.getInstance().getFeedCounters(feedId).get(feedId);\n+\n+        dontShowNotification = false;\n+    }\n+\n+    public void showIfNeeded(Context context, Feed feed) {\n+        if (dontShowNotification) {\n+            return;\n+        }\n+\n+        long feedId = feed.getId();\n+        int episodeCount = PodDBAdapter.getInstance().getFeedCounters(feedId).get(feedId);\n+        int newEpisodes = episodeCount - lastEpisodeCount;\n+\n+        if (newEpisodes > 0) {\n+            NotificationManagerCompat notificationManager = NotificationManagerCompat.from(context);\n+            showNotification(newEpisodes, feed, context, notificationManager);\n+        }\n+    }\n+\n+    private static void showNotification(int newEpisodes, Feed feed, Context context,\n+                                         NotificationManagerCompat notificationManager) {\n+        Resources res = context.getResources();\n+        String text = res.getQuantityString(\n+                R.plurals.new_episode_notification_message, newEpisodes, newEpisodes, feed.getTitle()\n+        );\n+        String title = res.getQuantityString(R.plurals.new_episode_notification_title, newEpisodes);\n+\n+        Intent intent = new Intent();\n+        intent.setComponent(new ComponentName(context, \"de.danoeh.antennapod.activity.MainActivity\"));\n+\n+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\n+        intent.putExtra(\"fragment_feed_id\", feed.getId());\n+        PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, intent, 0);\n+\n+        Notification notification = new NotificationCompat.Builder(\n+                context, NotificationUtils.CHANNEL_ID_EPISODE_NOTIFICATIONS\n+        )", "originalCommit": "7628be1055337bf1ad033578bb068b53935fc20d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzNTA0Mg==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r532835042", "bodyText": "Could you please reverse this variable? I think the positive form shouldShowNotification is easier to read.", "author": "ByteHamster", "createdAt": "2020-11-30T19:11:48Z", "path": "core/src/main/java/de/danoeh/antennapod/core/service/download/NewEpisodesNotification.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package de.danoeh.antennapod.core.service.download;\n+\n+import android.app.Notification;\n+import android.app.PendingIntent;\n+import android.content.ComponentName;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.res.Resources;\n+\n+import androidx.core.app.NotificationCompat;\n+import androidx.core.app.NotificationManagerCompat;\n+\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.feed.Feed;\n+import de.danoeh.antennapod.core.feed.FeedPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+import de.danoeh.antennapod.core.util.gui.NotificationUtils;\n+\n+public class NewEpisodesNotification {\n+    static final String GROUP_KEY = \"de.danoeh.antennapod.EPISODES\";\n+\n+    private final int lastEpisodeCount;\n+    private final boolean dontShowNotification;\n+\n+    public NewEpisodesNotification(Long feedId) {\n+        Feed feed = DBReader.getFeed(feedId);\n+\n+        FeedPreferences prefs = feed.getPreferences();\n+        if (!prefs.getKeepUpdated() || !prefs.getShowEpisodeNotification()) {\n+            dontShowNotification = true;\n+            lastEpisodeCount = -1;\n+            return;\n+        }\n+\n+        lastEpisodeCount = PodDBAdapter.getInstance().getFeedCounters(feedId).get(feedId);\n+\n+        dontShowNotification = false;", "originalCommit": "7628be1055337bf1ad033578bb068b53935fc20d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzODQ2Nw==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r532838467", "bodyText": "getFeedCounters loads a different counter depending on user settings. Please add another argument to that method and call getFeedCounters(UserPreferences.FEED_COUNTER_SHOW_NEW, feedId) here. The only other usage of that method can then pass the user setting.\nI mean something like this in PodDBAdapter:\npublic final LongIntMap getFeedCounters(int setting, long... feedIds) {", "author": "ByteHamster", "createdAt": "2020-11-30T19:17:37Z", "path": "core/src/main/java/de/danoeh/antennapod/core/service/download/NewEpisodesNotification.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package de.danoeh.antennapod.core.service.download;\n+\n+import android.app.Notification;\n+import android.app.PendingIntent;\n+import android.content.ComponentName;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.res.Resources;\n+\n+import androidx.core.app.NotificationCompat;\n+import androidx.core.app.NotificationManagerCompat;\n+\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.feed.Feed;\n+import de.danoeh.antennapod.core.feed.FeedPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+import de.danoeh.antennapod.core.util.gui.NotificationUtils;\n+\n+public class NewEpisodesNotification {\n+    static final String GROUP_KEY = \"de.danoeh.antennapod.EPISODES\";\n+\n+    private final int lastEpisodeCount;\n+    private final boolean dontShowNotification;\n+\n+    public NewEpisodesNotification(Long feedId) {\n+        Feed feed = DBReader.getFeed(feedId);\n+\n+        FeedPreferences prefs = feed.getPreferences();\n+        if (!prefs.getKeepUpdated() || !prefs.getShowEpisodeNotification()) {\n+            dontShowNotification = true;\n+            lastEpisodeCount = -1;\n+            return;\n+        }\n+\n+        lastEpisodeCount = PodDBAdapter.getInstance().getFeedCounters(feedId).get(feedId);", "originalCommit": "7628be1055337bf1ad033578bb068b53935fc20d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7d3ea94ad69697dd6439ead110b22a18b130f21f", "url": "https://github.com/AntennaPod/AntennaPod/commit/7d3ea94ad69697dd6439ead110b22a18b130f21f", "message": "change things addressed in review.", "committedDate": "2020-12-01T08:39:21Z", "type": "commit"}, {"oid": "37a0257e7f3054985abb827cfdee41bfbe36eba5", "url": "https://github.com/AntennaPod/AntennaPod/commit/37a0257e7f3054985abb827cfdee41bfbe36eba5", "message": "fixes for checkstyle", "committedDate": "2020-12-01T08:45:57Z", "type": "commit"}, {"oid": "c181a02eb79b55d7c23925181414735c2a222bfe", "url": "https://github.com/AntennaPod/AntennaPod/commit/c181a02eb79b55d7c23925181414735c2a222bfe", "message": "fix crash on subscribing to podcast", "committedDate": "2020-12-02T15:05:38Z", "type": "commit"}, {"oid": "07ba3adbbb883add30079566d42c6366cd058856", "url": "https://github.com/AntennaPod/AntennaPod/commit/07ba3adbbb883add30079566d42c6366cd058856", "message": "set Category for Episode Notifications.", "committedDate": "2020-12-02T15:13:33Z", "type": "commit"}, {"oid": "ca4baada00ec12641a0e0386493552c5aa6ecce9", "url": "https://github.com/AntennaPod/AntennaPod/commit/ca4baada00ec12641a0e0386493552c5aa6ecce9", "message": "use episodes flagged instead of the delta from last time when showing episode Notifications", "committedDate": "2020-12-02T15:20:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0NTUxMg==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r534445512", "bodyText": "Hmm, this adds some complexity here. How about moving the check inside NewEpisodesNotification? It can then set shouldShowNotification to false when the id is 0", "author": "ByteHamster", "createdAt": "2020-12-02T20:01:50Z", "path": "core/src/main/java/de/danoeh/antennapod/core/service/download/handler/FeedSyncTask.java", "diffHunk": "@@ -22,6 +24,9 @@ public FeedSyncTask(Context context, DownloadRequest request) {\n     }\n \n     public boolean run() {\n+        final NewEpisodesNotification newEpisodesNotification =\n+                request.getFeedfileId() == 0 ? null : new NewEpisodesNotification(request.getFeedfileId());", "originalCommit": "ca4baada00ec12641a0e0386493552c5aa6ecce9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0ODA2MA==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r534448060", "bodyText": "Just created some mock-ups for the notification icons. Do you have another idea? If not, I can draw the images and add them to the branding repo.\nPlayer:\n\nNew episodes: (this PR)\n\nAuto download completed: (another PR)", "author": "ByteHamster", "createdAt": "2020-12-02T20:06:13Z", "path": "core/src/main/java/de/danoeh/antennapod/core/service/download/NewEpisodesNotification.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package de.danoeh.antennapod.core.service.download;\n+\n+import android.app.Notification;\n+import android.app.PendingIntent;\n+import android.content.ComponentName;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.res.Resources;\n+\n+import androidx.core.app.NotificationCompat;\n+import androidx.core.app.NotificationManagerCompat;\n+\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.feed.Feed;\n+import de.danoeh.antennapod.core.feed.FeedPreferences;\n+import de.danoeh.antennapod.core.preferences.UserPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+import de.danoeh.antennapod.core.util.gui.NotificationUtils;\n+\n+public class NewEpisodesNotification {\n+    static final String GROUP_KEY = \"de.danoeh.antennapod.EPISODES\";\n+\n+    private final int lastEpisodeCount;\n+    private final boolean shouldShowNotification;\n+\n+    public NewEpisodesNotification(Long feedId) {\n+        Feed feed = DBReader.getFeed(feedId);\n+\n+        FeedPreferences prefs = feed.getPreferences();\n+        if (!prefs.getKeepUpdated() || !prefs.getShowEpisodeNotification()) {\n+            shouldShowNotification = false;\n+            lastEpisodeCount = -1;\n+            return;\n+        }\n+\n+        lastEpisodeCount = getNewEpisodeCount(feedId);\n+        shouldShowNotification = true;\n+    }\n+\n+    public void showIfNeeded(Context context, Feed feed) {\n+        if (!shouldShowNotification) {\n+            return;\n+        }\n+\n+        long feedId = feed.getId();\n+        int newEpisodes = getNewEpisodeCount(feedId);\n+\n+        if (newEpisodes > lastEpisodeCount) {\n+            NotificationManagerCompat notificationManager = NotificationManagerCompat.from(context);\n+            showNotification(newEpisodes, feed, context, notificationManager);\n+        }\n+    }\n+\n+    private static void showNotification(int newEpisodes, Feed feed, Context context,\n+                                         NotificationManagerCompat notificationManager) {\n+        Resources res = context.getResources();\n+        String text = res.getQuantityString(\n+                R.plurals.new_episode_notification_message, newEpisodes, newEpisodes, feed.getTitle()\n+        );\n+        String title = res.getQuantityString(R.plurals.new_episode_notification_title, newEpisodes);\n+\n+        Intent intent = new Intent();\n+        intent.setComponent(new ComponentName(context, \"de.danoeh.antennapod.activity.MainActivity\"));\n+\n+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\n+        intent.putExtra(\"fragment_feed_id\", feed.getId());\n+        PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, intent, 0);\n+\n+        Notification notification = new NotificationCompat.Builder(\n+                context, NotificationUtils.CHANNEL_ID_EPISODE_NOTIFICATIONS)\n+                .setSmallIcon(R.drawable.ic_notification)", "originalCommit": "ca4baada00ec12641a0e0386493552c5aa6ecce9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1NDQyNQ==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r534454425", "bodyText": "Maybe I would still use the commit from notify-change-pref-cursor because at the moment we unesarally fetch feed info like LastModifiedDate, author etc.\n\nOh, I was not aware that DBReader.getFeed also loads all items of the feed. I don't think author etc are a problem - they don't need much space. The whole list of feed items definitely does, though. I think it would be good to add a method DBReader.getFeedWithoutItems that can then also be used by other classes. The method with a Cursor does not decouple the classes enough, in my opinion. I think notification code should not know anything about database internals.", "author": "ByteHamster", "createdAt": "2020-12-02T20:17:50Z", "path": "core/src/main/java/de/danoeh/antennapod/core/service/download/NewEpisodesNotification.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package de.danoeh.antennapod.core.service.download;\n+\n+import android.app.Notification;\n+import android.app.PendingIntent;\n+import android.content.ComponentName;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.res.Resources;\n+\n+import androidx.core.app.NotificationCompat;\n+import androidx.core.app.NotificationManagerCompat;\n+\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.feed.Feed;\n+import de.danoeh.antennapod.core.feed.FeedPreferences;\n+import de.danoeh.antennapod.core.preferences.UserPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+import de.danoeh.antennapod.core.util.gui.NotificationUtils;\n+\n+public class NewEpisodesNotification {\n+    static final String GROUP_KEY = \"de.danoeh.antennapod.EPISODES\";\n+\n+    private final int lastEpisodeCount;\n+    private final boolean shouldShowNotification;\n+\n+    public NewEpisodesNotification(Long feedId) {\n+        Feed feed = DBReader.getFeed(feedId);", "originalCommit": "ca4baada00ec12641a0e0386493552c5aa6ecce9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1NTUwMg==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r534455502", "bodyText": "I personally dislike that solution, because i feel like I will be more disinformed as suposed to informed by that. But I guess I will implement it soon (DONE).\n\nMaybe we could ask this question in the original issue. Also, the manual/automatic thing could be interesting to ask there.", "author": "ByteHamster", "createdAt": "2020-12-02T20:19:53Z", "path": "core/src/main/java/de/danoeh/antennapod/core/service/download/NewEpisodesNotification.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package de.danoeh.antennapod.core.service.download;\n+\n+import android.app.Notification;\n+import android.app.PendingIntent;\n+import android.content.ComponentName;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.res.Resources;\n+\n+import androidx.core.app.NotificationCompat;\n+import androidx.core.app.NotificationManagerCompat;\n+\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.feed.Feed;\n+import de.danoeh.antennapod.core.feed.FeedPreferences;\n+import de.danoeh.antennapod.core.preferences.UserPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+import de.danoeh.antennapod.core.util.gui.NotificationUtils;\n+\n+public class NewEpisodesNotification {\n+    static final String GROUP_KEY = \"de.danoeh.antennapod.EPISODES\";\n+\n+    private final int lastEpisodeCount;\n+    private final boolean shouldShowNotification;\n+\n+    public NewEpisodesNotification(Long feedId) {\n+        Feed feed = DBReader.getFeed(feedId);\n+\n+        FeedPreferences prefs = feed.getPreferences();\n+        if (!prefs.getKeepUpdated() || !prefs.getShowEpisodeNotification()) {\n+            shouldShowNotification = false;\n+            lastEpisodeCount = -1;\n+            return;\n+        }\n+\n+        lastEpisodeCount = getNewEpisodeCount(feedId);\n+        shouldShowNotification = true;\n+    }\n+\n+    public void showIfNeeded(Context context, Feed feed) {\n+        if (!shouldShowNotification) {\n+            return;\n+        }\n+\n+        long feedId = feed.getId();\n+        int newEpisodes = getNewEpisodeCount(feedId);\n+\n+        if (newEpisodes > lastEpisodeCount) {\n+            NotificationManagerCompat notificationManager = NotificationManagerCompat.from(context);\n+            showNotification(newEpisodes, feed, context, notificationManager);\n+        }\n+    }\n+\n+    private static void showNotification(int newEpisodes, Feed feed, Context context,\n+                                         NotificationManagerCompat notificationManager) {\n+        Resources res = context.getResources();\n+        String text = res.getQuantityString(\n+                R.plurals.new_episode_notification_message, newEpisodes, newEpisodes, feed.getTitle()\n+        );\n+        String title = res.getQuantityString(R.plurals.new_episode_notification_title, newEpisodes);", "originalCommit": "ca4baada00ec12641a0e0386493552c5aa6ecce9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5844608bf807710a28c8c30640b9788fc04671ad", "url": "https://github.com/AntennaPod/AntennaPod/commit/5844608bf807710a28c8c30640b9788fc04671ad", "message": "Updated new episode notification icon", "committedDate": "2021-01-02T11:37:52Z", "type": "commit"}, {"oid": "8c3dacb8c17524c1d5e0b6a41db5075b232e2b78", "url": "https://github.com/AntennaPod/AntennaPod/commit/8c3dacb8c17524c1d5e0b6a41db5075b232e2b78", "message": "Added summary notification", "committedDate": "2021-01-02T11:50:22Z", "type": "commit"}, {"oid": "6e33b01c635bf5d35ac90053a01eddf2b6fd64d0", "url": "https://github.com/AntennaPod/AntennaPod/commit/6e33b01c635bf5d35ac90053a01eddf2b6fd64d0", "message": "Added icon to new episode notification", "committedDate": "2021-01-02T11:54:12Z", "type": "commit"}, {"oid": "e9044a00151b476cb5d98d53a64e96f72a381771", "url": "https://github.com/AntennaPod/AntennaPod/commit/e9044a00151b476cb5d98d53a64e96f72a381771", "message": "Merge branch 'develop' into notify-change", "committedDate": "2021-01-21T12:48:22Z", "type": "commit"}, {"oid": "2fc0acf66ffa50db4868fb5b501172b669becebf", "url": "https://github.com/AntennaPod/AntennaPod/commit/2fc0acf66ffa50db4868fb5b501172b669becebf", "message": "Checkstyle", "committedDate": "2021-01-21T12:51:57Z", "type": "commit"}, {"oid": "c0291fd783c58cb7501975a0795606e7472a24a8", "url": "https://github.com/AntennaPod/AntennaPod/commit/c0291fd783c58cb7501975a0795606e7472a24a8", "message": "Load feed counters when starting DownloadService", "committedDate": "2021-01-21T13:17:50Z", "type": "commit"}, {"oid": "f8c501a7ca0de768b4190e7f0c807a35d0e508ed", "url": "https://github.com/AntennaPod/AntennaPod/commit/f8c501a7ca0de768b4190e7f0c807a35d0e508ed", "message": "Do not show notification for manual refresh", "committedDate": "2021-01-21T13:25:53Z", "type": "commit"}, {"oid": "b2518e898dd736421ac7a3046442e3d211c7761f", "url": "https://github.com/AntennaPod/AntennaPod/commit/b2518e898dd736421ac7a3046442e3d211c7761f", "message": "Bug fixes", "committedDate": "2021-01-21T13:38:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjcxMDM1NQ==", "url": "https://github.com/AntennaPod/AntennaPod/pull/4646#discussion_r562710355", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    <item quantity=\"one\">%2$s has a new episode</item>\n          \n          \n            \n                    <item quantity=\"other\">%2$s has %1$d episodes flagged as new.</item>\n          \n          \n            \n                    <item quantity=\"one\">%2$s has a new episode</item>\n          \n          \n            \n                    <item quantity=\"other\">%2$s has %1$d new episodes</item>", "author": "ByteHamster", "createdAt": "2021-01-22T15:29:13Z", "path": "core/src/main/res/values/strings.xml", "diffHunk": "@@ -133,6 +133,17 @@\n         <item quantity=\"other\">%d episodes</item>\n     </plurals>\n     <string name=\"loading_more\">Loading more\u2026</string>\n+    <string name=\"episode_notification\">Episode Notifications</string>\n+    <string name=\"episode_notification_summary\">Show a notification when a new episode is released.</string>\n+    <plurals name=\"new_episode_notification_message\">\n+        <item quantity=\"one\">%2$s has a new episode</item>\n+        <item quantity=\"other\">%2$s has %1$d episodes flagged as new.</item>", "originalCommit": "b2518e898dd736421ac7a3046442e3d211c7761f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "97256b0f1e8e4929afd88eb8c0e4caf7c1eb1d0a", "url": "https://github.com/AntennaPod/AntennaPod/commit/97256b0f1e8e4929afd88eb8c0e4caf7c1eb1d0a", "message": "Update core/src/main/res/values/strings.xml", "committedDate": "2021-01-22T15:29:20Z", "type": "commit"}, {"oid": "41849f3f72919ec8670723c5552a25c4c34c13df", "url": "https://github.com/AntennaPod/AntennaPod/commit/41849f3f72919ec8670723c5552a25c4c34c13df", "message": "Execute database upgrades", "committedDate": "2021-01-22T15:31:36Z", "type": "commit"}]}