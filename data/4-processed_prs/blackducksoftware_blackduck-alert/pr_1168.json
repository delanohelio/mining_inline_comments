{"pr_number": 1168, "pr_title": "distribution validation", "pr_createdAt": "2020-09-16T13:09:50Z", "pr_url": "https://github.com/blackducksoftware/blackduck-alert/pull/1168", "timeline": [{"oid": "26467d924f59866b5d4567a6e3092d5f1e2a2872", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/26467d924f59866b5d4567a6e3092d5f1e2a2872", "message": "feat: Implement actions and reducers for validating jobs.", "committedDate": "2020-09-15T17:30:55Z", "type": "commit"}, {"oid": "df7b3ea98904e6553b1387d77803601d35e506c6", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/df7b3ea98904e6553b1387d77803601d35e506c6", "message": "refactor: Validate before saving.", "committedDate": "2020-09-15T20:31:56Z", "type": "commit"}, {"oid": "4c404b87d5e29a6c13d51b9355d56ed48e376e7b", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/4c404b87d5e29a6c13d51b9355d56ed48e376e7b", "message": "fix: Update the distribution jobs to show validation errors.", "committedDate": "2020-09-16T13:04:39Z", "type": "commit"}, {"oid": "d423bc1d9f327d96e1d69a11bce5023c932c115d", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/d423bc1d9f327d96e1d69a11bce5023c932c115d", "message": "chore: Update comment for the getValue/setValue methods.", "committedDate": "2020-09-16T13:08:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQyNDQ3Ng==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1168#discussion_r489424476", "bodyText": "This ensures validation happens before saving the job.", "author": "psantos1113", "createdAt": "2020-09-16T13:11:13Z", "path": "src/main/js/dynamic/DistributionConfiguration.js", "diffHunk": "@@ -107,66 +106,73 @@ class DistributionConfiguration extends Component {\n             const keepFrequency = Object.assign(keepName, FieldModelUtilities.updateFieldModelSingleValue(updatedChannelConfig, KEY_FREQUENCY, frequency));\n             const keepProvider = Object.assign(keepFrequency, FieldModelUtilities.updateFieldModelSingleValue(updatedChannelConfig, KEY_PROVIDER_NAME, provider));\n \n-            this.props.checkDescriptorForGlobalConfig(KEY_CHANNEL_NAME, newChannel.name);\n+            validateDescriptorForGlobalConfig(KEY_CHANNEL_NAME, newChannel.name);\n             this.setState({\n                 channelConfig: keepProvider,\n                 currentChannel: newChannel\n             });\n         }\n-        const selectedProviderOption = FieldModelUtilities.getFieldModelSingleValue(this.state.channelConfig, KEY_PROVIDER_NAME);\n+        const selectedProviderOption = FieldModelUtilities.getFieldModelSingleValue(channelConfig, KEY_PROVIDER_NAME);\n         const prevProviderName = currentProvider ? currentProvider.name : '';\n \n         if (selectedProviderOption && prevProviderName !== selectedProviderOption) {\n-            const newProvider = this.props.descriptors.find((descriptor) => descriptor.name === selectedProviderOption && descriptor.context === DescriptorUtilities.CONTEXT_TYPE.DISTRIBUTION);\n+            const newProvider = descriptors.find((descriptor) => descriptor.name === selectedProviderOption && descriptor.context === DescriptorUtilities.CONTEXT_TYPE.DISTRIBUTION);\n             const emptyProviderConfig = FieldModelUtilities.createFieldModelWithDefaults(newProvider.fields, newProvider.context, newProvider.name);\n-            this.props.checkDescriptorForGlobalConfig(KEY_PROVIDER_NAME, newProvider.name);\n+            validateDescriptorForGlobalConfig(KEY_PROVIDER_NAME, newProvider.name);\n             this.setState({\n                 providerConfig: emptyProviderConfig,\n                 currentProvider: newProvider\n             });\n         }\n+\n+        if (prevProps.status === 'VALIDATING' && status === 'VALIDATED') {\n+            const jsonBody = this.buildJsonBody();\n+            if (isUpdatingJob) {\n+                updateDistribution(jsonBody);\n+            } else {\n+                saveDistribution(jsonBody);\n+            }\n+        }", "originalCommit": "d423bc1d9f327d96e1d69a11bce5023c932c115d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQyNTMxOQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1168#discussion_r489425319", "bodyText": "Moved the code that checked the job id into this function instead of having the check in multiple places.", "author": "psantos1113", "createdAt": "2020-09-16T13:12:29Z", "path": "src/main/js/dynamic/DistributionConfiguration.js", "diffHunk": "@@ -107,66 +106,73 @@ class DistributionConfiguration extends Component {\n             const keepFrequency = Object.assign(keepName, FieldModelUtilities.updateFieldModelSingleValue(updatedChannelConfig, KEY_FREQUENCY, frequency));\n             const keepProvider = Object.assign(keepFrequency, FieldModelUtilities.updateFieldModelSingleValue(updatedChannelConfig, KEY_PROVIDER_NAME, provider));\n \n-            this.props.checkDescriptorForGlobalConfig(KEY_CHANNEL_NAME, newChannel.name);\n+            validateDescriptorForGlobalConfig(KEY_CHANNEL_NAME, newChannel.name);\n             this.setState({\n                 channelConfig: keepProvider,\n                 currentChannel: newChannel\n             });\n         }\n-        const selectedProviderOption = FieldModelUtilities.getFieldModelSingleValue(this.state.channelConfig, KEY_PROVIDER_NAME);\n+        const selectedProviderOption = FieldModelUtilities.getFieldModelSingleValue(channelConfig, KEY_PROVIDER_NAME);\n         const prevProviderName = currentProvider ? currentProvider.name : '';\n \n         if (selectedProviderOption && prevProviderName !== selectedProviderOption) {\n-            const newProvider = this.props.descriptors.find((descriptor) => descriptor.name === selectedProviderOption && descriptor.context === DescriptorUtilities.CONTEXT_TYPE.DISTRIBUTION);\n+            const newProvider = descriptors.find((descriptor) => descriptor.name === selectedProviderOption && descriptor.context === DescriptorUtilities.CONTEXT_TYPE.DISTRIBUTION);\n             const emptyProviderConfig = FieldModelUtilities.createFieldModelWithDefaults(newProvider.fields, newProvider.context, newProvider.name);\n-            this.props.checkDescriptorForGlobalConfig(KEY_PROVIDER_NAME, newProvider.name);\n+            validateDescriptorForGlobalConfig(KEY_PROVIDER_NAME, newProvider.name);\n             this.setState({\n                 providerConfig: emptyProviderConfig,\n                 currentProvider: newProvider\n             });\n         }\n+\n+        if (prevProps.status === 'VALIDATING' && status === 'VALIDATED') {\n+            const jsonBody = this.buildJsonBody();\n+            if (isUpdatingJob) {\n+                updateDistribution(jsonBody);\n+            } else {\n+                saveDistribution(jsonBody);\n+            }\n+        }\n     }\n \n-    handleClose() {\n-        this.setState({ show: false });\n-        this.props.onModalClose();\n-        this.props.handleCancel();\n+    setSendMessageVisible(visible) {\n+        this.setState({\n+            showSendMessage: visible\n+        });\n+    }\n+\n+    handleTestSubmit(event) {\n+        event.preventDefault();\n+        const { testDistribution } = this.props;\n+        const jsonBody = this.buildJsonBody();\n+        testDistribution(jsonBody);\n     }\n \n     buildJsonBody() {\n         const { channelConfig, providerConfig } = this.state;\n+        const { jobId } = this.props;", "originalCommit": "d423bc1d9f327d96e1d69a11bce5023c932c115d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQyNjA0MQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1168#discussion_r489426041", "bodyText": "Most of the changes in this class are for linting issues.  I have commented on the changes that actually were made to get distribution job validation to work.", "author": "psantos1113", "createdAt": "2020-09-16T13:13:33Z", "path": "src/main/js/dynamic/DistributionConfiguration.js", "diffHunk": "@@ -6,11 +6,7 @@ import * as DescriptorUtilities from 'util/descriptorUtilities';\n import { OPERATIONS } from 'util/descriptorUtilities';\n import FieldsPanel from 'field/FieldsPanel';\n import {\n-    checkDescriptorForGlobalConfig,\n-    getDistributionJob,\n-    saveDistributionJob,\n-    testDistributionJob,\n-    updateDistributionJob\n+    checkDescriptorForGlobalConfig, getDistributionJob, saveDistributionJob, testDistributionJob, updateDistributionJob, validateDistributionJob", "originalCommit": "d423bc1d9f327d96e1d69a11bce5023c932c115d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7b5c39cf513474e45148c300821acc58cb30aa16", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/7b5c39cf513474e45148c300821acc58cb30aa16", "message": "fix: Update the status for distribution test success.", "committedDate": "2020-09-16T13:15:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzODI5Mg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1168#discussion_r489438292", "bodyText": "What's the difference among these three calls? It seems like we should be able to drop the else-if and else to just call dispatch(handler(response.status));", "author": "gkillough", "createdAt": "2020-09-16T13:30:16Z", "path": "src/main/js/store/actions/distributionConfigs.js", "diffHunk": "@@ -206,11 +238,19 @@ export function testDistributionJob(config) {\n         request.then((response) => {\n             response.json()\n                 .then((responseData) => {\n-                    if (response.ok) {\n+                    const defaultHandler = () => jobError({\n+                        type: DISTRIBUTION_JOB_TEST_FAILURE,\n+                        ...responseData\n+                    });\n+                    const handler = createErrorHandler(DISTRIBUTION_JOB_TEST_FAILURE, defaultHandler);\n+                    if (responseData.errors && !Object.keys(responseData.errors).length) {\n                         dispatch(testJobSuccess(responseData.message));\n+                    } else if (!response.ok) {\n+                        dispatch(handler(response.status));\n                     } else {\n-                        handleFailureResponse(DISTRIBUTION_JOB_TEST_FAILURE, dispatch, responseData, response.status);\n+                        dispatch(handler(400));\n                     }\n+                    dispatch(handler(response.status));", "originalCommit": "7b5c39cf513474e45148c300821acc58cb30aa16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ1ODY0OA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1168#discussion_r489458648", "bodyText": "the dispatch at the end I need to remove", "author": "psantos1113", "createdAt": "2020-09-16T13:57:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzODI5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzOTA3NQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1168#discussion_r489439075", "bodyText": "When will the else be called, but not the else-if?", "author": "gkillough", "createdAt": "2020-09-16T13:31:22Z", "path": "src/main/js/store/actions/distributionConfigs.js", "diffHunk": "@@ -241,3 +281,24 @@ export function checkDescriptorForGlobalConfig(errorFieldName, descriptorName) {\n         }).catch(console.error);\n     };\n }\n+\n+export function validateDistributionJob(config) {\n+    return (dispatch, getState) => {\n+        dispatch(validatingJob());\n+        const { csrfToken } = getState().session;\n+        const request = ConfigRequestBuilder.createValidateRequest(ConfigRequestBuilder.JOB_API_URL, csrfToken, config);\n+        request.then((response) => {\n+            response.json()\n+                .then((responseData) => {\n+                    const handler = createErrorHandler(DISTRIBUTION_JOB_VALIDATE_ERROR, () => validateJobError(responseData));\n+                    if (responseData.errors && !Object.keys(responseData.errors).length) {\n+                        dispatch(validatedJob());\n+                    } else if (!response.ok) {\n+                        dispatch(handler(response.status));\n+                    } else {\n+                        dispatch(handler(400));\n+                    }", "originalCommit": "7b5c39cf513474e45148c300821acc58cb30aa16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ1NTMyNQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1168#discussion_r489455325", "bodyText": "The else will be called when we have validation errors.  The controller has to return an OK response to contain the validation errors.  We check to see if there are errors and  we then handle it like a bad request which updates the UI with the field validation errors.  If we had a 401 or 403 or another unexpected error like 500 then the else if case will be used. Otherwise there are field validation errors and we end up in the else case.", "author": "psantos1113", "createdAt": "2020-09-16T13:53:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzOTA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ1ODAyOA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1168#discussion_r489458028", "bodyText": "Ah yes, that makes sense.", "author": "gkillough", "createdAt": "2020-09-16T13:56:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzOTA3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ0MTIyNA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1168#discussion_r489441224", "bodyText": "This should be moved above the promise for responseData", "author": "ChomickiM", "createdAt": "2020-09-16T13:34:24Z", "path": "src/main/js/store/actions/distributionConfigs.js", "diffHunk": "@@ -173,7 +195,12 @@ export function saveDistributionJob(config) {\n                     if (response.ok) {", "originalCommit": "7b5c39cf513474e45148c300821acc58cb30aa16", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ0OTU3Ng==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1168#discussion_r489449576", "bodyText": "It seems like we are checking does the field \"errors\" have any values and if it does then do the dispatch but we are not passing the errors along. Is this expected? Are the errors that we checked for being ignored/lost?", "author": "jamesrichard91", "createdAt": "2020-09-16T13:45:31Z", "path": "src/main/js/store/actions/distributionConfigs.js", "diffHunk": "@@ -241,3 +281,24 @@ export function checkDescriptorForGlobalConfig(errorFieldName, descriptorName) {\n         }).catch(console.error);\n     };\n }\n+\n+export function validateDistributionJob(config) {\n+    return (dispatch, getState) => {\n+        dispatch(validatingJob());\n+        const { csrfToken } = getState().session;\n+        const request = ConfigRequestBuilder.createValidateRequest(ConfigRequestBuilder.JOB_API_URL, csrfToken, config);\n+        request.then((response) => {\n+            response.json()\n+                .then((responseData) => {\n+                    const handler = createErrorHandler(DISTRIBUTION_JOB_VALIDATE_ERROR, () => validateJobError(responseData));\n+                    if (responseData.errors && !Object.keys(responseData.errors).length) {\n+                        dispatch(validatedJob());", "originalCommit": "7b5c39cf513474e45148c300821acc58cb30aa16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ1ODU1Nw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1168#discussion_r489458557", "bodyText": "Notice the ! (NOT) operator prefixing the second condition.", "author": "gkillough", "createdAt": "2020-09-16T13:57:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ0OTU3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ2MTY2NQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1168#discussion_r489461665", "bodyText": "yes the errors are passed in the else case.  the dispatch of the validatedJob() sets the state that signifies the data is valid. The else called handler(400) meaning bad request so the  default handler will call validateJobError which takes the responseData that contains the message and the errors and set the status to ERROR so a save will never be called.", "author": "psantos1113", "createdAt": "2020-09-16T14:01:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ0OTU3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ1MTM1NA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1168#discussion_r489451354", "bodyText": "It seems odd to me that we are checking for values in the \"errors\" field and then passing along the \"message\" field.  Is this check  looking for errors? or is it looking for the absence of errors?", "author": "jamesrichard91", "createdAt": "2020-09-16T13:47:53Z", "path": "src/main/js/store/actions/distributionConfigs.js", "diffHunk": "@@ -206,11 +238,19 @@ export function testDistributionJob(config) {\n         request.then((response) => {\n             response.json()\n                 .then((responseData) => {\n-                    if (response.ok) {\n+                    const defaultHandler = () => jobError({\n+                        type: DISTRIBUTION_JOB_TEST_FAILURE,\n+                        ...responseData\n+                    });\n+                    const handler = createErrorHandler(DISTRIBUTION_JOB_TEST_FAILURE, defaultHandler);\n+                    if (responseData.errors && !Object.keys(responseData.errors).length) {\n                         dispatch(testJobSuccess(responseData.message));", "originalCommit": "7b5c39cf513474e45148c300821acc58cb30aa16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ2MzM1Mw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1168#discussion_r489463353", "bodyText": "looking for the absence of errors.", "author": "psantos1113", "createdAt": "2020-09-16T14:03:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ1MTM1NA=="}], "type": "inlineReview"}, {"oid": "8db117a41bc6b0cf1d9f29e0709de9aa5a5b592f", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/8db117a41bc6b0cf1d9f29e0709de9aa5a5b592f", "message": "fix: Remove unused dispatch call.", "committedDate": "2020-09-16T13:57:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUwMTE1Mw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1168#discussion_r489501153", "bodyText": "If we're ok returning null, then why do we work with an optional as Content?", "author": "bamandel", "createdAt": "2020-09-16T14:52:52Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigController.java", "diffHunk": "@@ -100,6 +100,7 @@ public ValidationResponseModel validate(JobFieldModel requestBody) {\n \n     @Override\n     public ValidationResponseModel test(JobFieldModel resource) {\n-        return ResponseFactory.createContentResponseFromAction(jobConfigActions.test(resource));\n+        ValidationActionResponse response = jobConfigActions.test(resource);\n+        return ResponseFactory.createContentResponseFromAction(new ValidationActionResponse(HttpStatus.OK, response.getContent().orElse(null)));", "originalCommit": "8db117a41bc6b0cf1d9f29e0709de9aa5a5b592f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUwMzE3NA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1168#discussion_r489503174", "bodyText": "I brought this same issue up in the video code review. It shouldn't ever actually return null, but we should have a static initializer for validation responses anyway.", "author": "gkillough", "createdAt": "2020-09-16T14:55:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUwMTE1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUxOTAyNg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1168#discussion_r489519026", "bodyText": "ActionResponse has the getContent() method and in some cases there is no content to return it can be null you just want the http status code and/or message with no content. So because content can be null we return an Optional to indicate to other users of the API that the content can be null and avoid NullPointerExceptions.  The Optional allows you to know you need to check if it is present otherwise you would need to have special code to check for null otherwise you would have NullPointerExceptions.  ValidationActionResponse extends ActionResponse. Because we are wrapping the ValidationActionResponse with a new ValidationActionResponse with an OK status to represent validation or test execution, we need to get the content with getContent() which is an Optional.  So to work with the Optional API i have the orElse(null) for the empty optional case.\nIt's a little beyond the scope of this PR but we might be able to refactor the API to make it a clearer if there's confusion.", "author": "psantos1113", "createdAt": "2020-09-16T15:16:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUwMTE1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUxNDk4OQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1168#discussion_r489514989", "bodyText": "is handler a function here? We're passing a status to handler but it doesn't look like handler expects anything passed to it.", "author": "bamandel", "createdAt": "2020-09-16T15:10:46Z", "path": "src/main/js/store/actions/distributionConfigs.js", "diffHunk": "@@ -173,7 +195,12 @@ export function saveDistributionJob(config) {\n                     if (response.ok) {\n                         dispatch(saveJobSuccess(responseData.message));\n                     } else {\n-                        handleFailureResponse(DISTRIBUTION_JOB_SAVE_ERROR, dispatch, responseData, response.status);\n+                        const defaultHandler = () => jobError({\n+                            type: DISTRIBUTION_JOB_SAVE_ERROR,\n+                            ...responseData\n+                        });\n+                        const handler = createErrorHandler(DISTRIBUTION_JOB_SAVE_ERROR, defaultHandler);\n+                        dispatch(handler(response.status));", "originalCommit": "8db117a41bc6b0cf1d9f29e0709de9aa5a5b592f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUxNzExNA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1168#discussion_r489517114", "bodyText": "createErrroHandler creates a function reference like a lambda expression.  We are assigning handler to the function that is returned by createErrorHandler.", "author": "psantos1113", "createdAt": "2020-09-16T15:13:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUxNDk4OQ=="}], "type": "inlineReview"}]}