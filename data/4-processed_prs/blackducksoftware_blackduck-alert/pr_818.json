{"pr_number": 818, "pr_title": "Certificate Storage", "pr_createdAt": "2020-01-20T20:33:18Z", "pr_url": "https://github.com/blackducksoftware/blackduck-alert/pull/818", "timeline": [{"oid": "167cefa97f29cc4e34e8b0cdadd1e85bd3a820c1", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/167cefa97f29cc4e34e8b0cdadd1e85bd3a820c1", "message": "Feat(Java): Implement custom certificate storage api", "committedDate": "2020-01-20T20:32:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcyMTI0Mg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/818#discussion_r368721242", "bodyText": "I'm not sure that we want to store the certificateContent in our DB. What would the use be? It should just be stored in the Java truststore", "author": "jamesrichard91", "createdAt": "2020-01-20T20:49:13Z", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultCustomCertificateAccessor.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/**\n+ * alert-database\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.database.api;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.accessor.CustomCertificateAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.CustomCertificateModel;\n+import com.synopsys.integration.alert.database.certificates.CustomCertificateEntity;\n+import com.synopsys.integration.alert.database.certificates.CustomCertificateRepository;\n+\n+@Component\n+public class DefaultCustomCertificateAccessor implements CustomCertificateAccessor {\n+    private CustomCertificateRepository customCertificateRepository;\n+\n+    @Autowired\n+    public DefaultCustomCertificateAccessor(CustomCertificateRepository customCertificateRepository) {\n+        this.customCertificateRepository = customCertificateRepository;\n+    }\n+\n+    @Override\n+    public CustomCertificateModel storeCertificate(CustomCertificateModel certificateModel) throws AlertDatabaseConstraintException {\n+        if (null == certificateModel) {\n+            throw new AlertDatabaseConstraintException(\"The certificate model cannot be null\");\n+        }\n+\n+        String alias = certificateModel.getAlias();\n+        if (StringUtils.isBlank(alias)) {\n+            throw new AlertDatabaseConstraintException(\"The field 'alias' cannot be blank\");\n+        }\n+\n+        String certificateContent = certificateModel.getCertificateContent();\n+        if (StringUtils.isBlank(certificateContent)) {\n+            throw new AlertDatabaseConstraintException(\"The field 'certificateContent' cannot be blank\");\n+        }\n+\n+        CustomCertificateEntity entityToSave = new CustomCertificateEntity(alias, certificateContent);", "originalCommit": "167cefa97f29cc4e34e8b0cdadd1e85bd3a820c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk1NjQ4NQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/818#discussion_r368956485", "bodyText": "Currently the certificates get regenerated each time the container is started.  So we would need to have a startup component to import the certificates stored in the database into the truststore.  We could look into saving the certificate into the volume but if the cfssl container gets updated and generates new certificates with different attributes then the Alert container may not be able to communicate with the other containers in a deployment with Black Duck.", "author": "psantos1113", "createdAt": "2020-01-21T11:49:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcyMTI0Mg=="}], "type": "inlineReview"}]}