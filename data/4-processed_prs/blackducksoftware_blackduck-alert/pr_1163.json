{"pr_number": 1163, "pr_title": "User controller refactor", "pr_createdAt": "2020-09-11T14:28:48Z", "pr_url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163", "timeline": [{"oid": "1166f71545d1c4e64514c900ac858225e446dfdb", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/1166f71545d1c4e64514c900ac858225e446dfdb", "message": "refactor: Make UserController return explicit return types", "committedDate": "2020-09-02T18:47:16Z", "type": "commit"}, {"oid": "19c5e8f9295fc5d6db721d7ac4c37d96488f28c6", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/19c5e8f9295fc5d6db721d7ac4c37d96488f28c6", "message": "refactor: Update validation in user api to throw exceptions with fieldErrors", "committedDate": "2020-09-08T14:58:11Z", "type": "commit"}, {"oid": "10eeea3725664e3913e79ed9e5793ae8abd047ef", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/10eeea3725664e3913e79ed9e5793ae8abd047ef", "message": "refactor: Update user actions to validate when saving", "committedDate": "2020-09-08T18:39:17Z", "type": "commit"}, {"oid": "e5d46c652b8100d4f58a406f551d28f98a731976", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/e5d46c652b8100d4f58a406f551d28f98a731976", "message": "Merge branch 'master' into mc_api_user_controller_refactor\n\n# Conflicts:\n#\tsrc/main/js/store/actions/users.js", "committedDate": "2020-09-08T18:44:16Z", "type": "commit"}, {"oid": "64672bbc376808d62a71bfbd2e34b464bdc5631a", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/64672bbc376808d62a71bfbd2e34b464bdc5631a", "message": "refactor: Update validateUser to accept a UserConfig", "committedDate": "2020-09-09T18:35:44Z", "type": "commit"}, {"oid": "c8a7a24bbd7002ec5c2263a119da7cb1d1d0072f", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/c8a7a24bbd7002ec5c2263a119da7cb1d1d0072f", "message": "refactor: Update users UI component to handle validation", "committedDate": "2020-09-10T20:30:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE2NTAwMQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163#discussion_r487165001", "bodyText": "Should this return NO_CONTENT here?", "author": "psantos1113", "createdAt": "2020-09-11T16:45:15Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/user/UserController.java", "diffHunk": "@@ -51,76 +55,80 @@\n     public static final String USER_BASE_PATH = ConfigController.CONFIGURATION_PATH + \"/user\";\n \n     private final Logger logger = LoggerFactory.getLogger(UserController.class);\n-    private final ContentConverter contentConverter;\n-    private final ResponseFactory responseFactory;\n     private final AuthorizationManager authorizationManager;\n     private final UserActions userActions;\n     private final UserManagementDescriptorKey descriptorKey;\n \n     @Autowired\n-    public UserController(ContentConverter contentConverter, ResponseFactory responseFactory, AuthorizationManager authorizationManager, UserActions userActions,\n+    public UserController(AuthorizationManager authorizationManager, UserActions userActions,\n         UserManagementDescriptorKey descriptorKey) {\n-        this.contentConverter = contentConverter;\n-        this.responseFactory = responseFactory;\n         this.authorizationManager = authorizationManager;\n         this.userActions = userActions;\n         this.descriptorKey = descriptorKey;\n     }\n \n     @GetMapping\n-    public ResponseEntity<String> getAllUsers() {\n+    public List<UserConfig> getAllUsers() {\n+        if (!hasGlobalPermission(authorizationManager::hasReadPermission, descriptorKey)) {\n+            throw ResponseFactory.createForbiddenException();\n+        }\n+        return userActions.getUsers();\n+    }\n+\n+    @PostMapping(\"/validate\")\n+    public ValidationResponseModel validateUserModel(@RequestBody UserConfig userConfig) {\n         if (!hasGlobalPermission(authorizationManager::hasReadPermission, descriptorKey)) {\n-            return responseFactory.createForbiddenResponse();\n+            throw ResponseFactory.createForbiddenException();\n         }\n-        return responseFactory.createOkContentResponse(contentConverter.getJsonString(userActions.getUsers()));\n+        return userActions.validateUser(userConfig);\n     }\n \n     @PostMapping\n-    public ResponseEntity<String> createUser(@RequestBody UserConfig userModel) {\n+    public UserConfig createUser(@RequestBody UserConfig userModel) {\n         if (!hasGlobalPermission(authorizationManager::hasCreatePermission, descriptorKey)) {\n-            return responseFactory.createForbiddenResponse();\n+            throw ResponseFactory.createForbiddenException();\n         }\n         try {\n-            UserConfig newUser = userActions.createUser(userModel);\n-            return responseFactory.createCreatedResponse(newUser.getId(), \"User Created.\");\n+            return userActions.createUser(userModel);\n         } catch (AlertDatabaseConstraintException e) {\n             logger.error(\"There was an issue with the DB: {}\", e.getMessage());\n             logger.debug(\"Cause\", e);\n-            return responseFactory.createInternalServerErrorResponse(\"\", \"There was an issue with the DB\");\n-        } catch (AlertFieldException e) {\n-            return responseFactory.createFieldErrorResponse(ResponseFactory.EMPTY_ID, \"There were errors with the configuration.\", e.getFieldErrors());\n+            throw ResponseFactory.createInternalServerErrorException(\"There was an issue with the DB\");\n+        } catch (AlertFieldException fieldException) {\n+            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, String.format(\"There were errors with the configuration: %s\", fieldException.getFlattenedErrorMessages()));\n         }\n \n     }\n \n     @PutMapping(value = \"/{userId}\")\n-    public ResponseEntity<String> updateUser(@PathVariable Long userId, @RequestBody UserConfig userModel) {\n+    public UserConfig updateUser(@PathVariable Long userId, @RequestBody UserConfig userModel) {", "originalCommit": "c8a7a24bbd7002ec5c2263a119da7cb1d1d0072f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE3NTUzNg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163#discussion_r487175536", "bodyText": "This looks wrong. If I am validating a user exists, why is there a list of statuses all saying the same thing being returned? Shouldn't it just be a single item returned?", "author": "bamandel", "createdAt": "2020-09-11T17:04:54Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java", "diffHunk": "@@ -187,11 +199,12 @@ private void validateUserExistsByName(List<AlertFieldStatus> fieldErrors, String\n         userModel.ifPresent(user -> fieldErrors.add(AlertFieldStatus.error(FIELD_KEY_USER_MGMT_USERNAME, \"A user with that username already exists.\")));\n     }\n \n-    private void validateUserExistsById(List<AlertFieldStatus> fieldErrors, Long userId, String userName) {\n-        validateRequiredField(FIELD_KEY_USER_MGMT_USERNAME, fieldErrors, userName);\n+    private List<AlertFieldStatus> validateUserExistsById(Long userId, String userName) {\n         Optional<UserModel> userModel = userAccessor.getUser(userName);\n-        userModel.filter(user -> !user.getId().equals(userId))\n-            .ifPresent(user -> fieldErrors.add(AlertFieldStatus.error(FIELD_KEY_USER_MGMT_USERNAME, \"A user with that username already exists.\")));\n+        return userModel.filter(user -> !user.getId().equals(userId))\n+                   .map(user -> AlertFieldStatus.error(FIELD_KEY_USER_MGMT_USERNAME, \"A user with that username already exists.\"))\n+                   .stream()\n+                   .collect(Collectors.toList());\n     }", "originalCommit": "c8a7a24bbd7002ec5c2263a119da7cb1d1d0072f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5MDMxNA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163#discussion_r487190314", "bodyText": "Should usage of \"accept\" be quoted like the other headers?", "author": "gkillough", "createdAt": "2020-09-11T17:34:19Z", "path": "src/main/js/util/configurationRequestBuilder.js", "diffHunk": "@@ -65,6 +65,7 @@ export function createUpdateRequest(apiUrl, csrfToken, configurationId, fieldMod\n         method: 'PUT',\n         body: JSON.stringify(fieldModel),\n         headers: {\n+            accept: 'application/json',", "originalCommit": "c8a7a24bbd7002ec5c2263a119da7cb1d1d0072f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5MTc0OA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163#discussion_r487191748", "bodyText": "I'm not entirely sure, I was basing this on export functions just above this one where the accept: 'application/json' wasn't in quotes either", "author": "ChomickiM", "createdAt": "2020-09-11T17:37:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5MDMxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5MzgzMg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163#discussion_r487193832", "bodyText": "RequestUtilities also seems to have the accept outside of quotes, so I think this may be intended", "author": "ChomickiM", "createdAt": "2020-09-11T17:41:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5MDMxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIxMDc5OA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163#discussion_r487210798", "bodyText": "Our linting rules declare the quotes as unnecessary for the accept header.", "author": "psantos1113", "createdAt": "2020-09-11T18:14:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5MDMxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIxMjM2Mg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163#discussion_r487212362", "bodyText": "We should probably refactor this code to use the Headers object and append the headers. I would probably write up an enhancement ticket for that.", "author": "psantos1113", "createdAt": "2020-09-11T18:18:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5MDMxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIxODQ1Mw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163#discussion_r487218453", "bodyText": "We also need to make sure we update the deleteUser errors.", "author": "gkillough", "createdAt": "2020-09-11T18:30:13Z", "path": "src/main/js/store/actions/users.js", "diffHunk": "@@ -95,6 +98,33 @@ function clearFieldErrors() {\n     };\n }\n \n+function validatingUser() {", "originalCommit": "c8a7a24bbd7002ec5c2263a119da7cb1d1d0072f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4NTI1Nw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163#discussion_r487885257", "bodyText": "Take a look at #1165 for an example of this.", "author": "gkillough", "createdAt": "2020-09-14T12:49:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIxODQ1Mw=="}], "type": "inlineReview"}, {"oid": "d404aa0be2eab81f12f9cd8906423029f34da433", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/d404aa0be2eab81f12f9cd8906423029f34da433", "message": "fix: Update users to correctly handle update and delete cases.", "committedDate": "2020-09-14T17:43:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1NjEzNw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163#discussion_r488856137", "bodyText": "Can we wrap this List in an object?\nFor exmaple:\npublic class MultiUserConfigResponseModel {\n    private List<UserConfig> users;\n    .\n    .\n    .\n}", "author": "gkillough", "createdAt": "2020-09-15T17:50:52Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/user/UserController.java", "diffHunk": "@@ -51,76 +55,81 @@\n     public static final String USER_BASE_PATH = ConfigController.CONFIGURATION_PATH + \"/user\";\n \n     private final Logger logger = LoggerFactory.getLogger(UserController.class);\n-    private final ContentConverter contentConverter;\n-    private final ResponseFactory responseFactory;\n     private final AuthorizationManager authorizationManager;\n     private final UserActions userActions;\n     private final UserManagementDescriptorKey descriptorKey;\n \n     @Autowired\n-    public UserController(ContentConverter contentConverter, ResponseFactory responseFactory, AuthorizationManager authorizationManager, UserActions userActions,\n+    public UserController(AuthorizationManager authorizationManager, UserActions userActions,\n         UserManagementDescriptorKey descriptorKey) {\n-        this.contentConverter = contentConverter;\n-        this.responseFactory = responseFactory;\n         this.authorizationManager = authorizationManager;\n         this.userActions = userActions;\n         this.descriptorKey = descriptorKey;\n     }\n \n     @GetMapping\n-    public ResponseEntity<String> getAllUsers() {\n+    public List<UserConfig> getAllUsers() {", "originalCommit": "d404aa0be2eab81f12f9cd8906423029f34da433", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1OTY0MQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163#discussion_r488859641", "bodyText": "Sure, something similar to MultiRolePermissionModel.java that just has methods to get the UserConfig list?", "author": "ChomickiM", "createdAt": "2020-09-15T17:56:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1NjEzNw=="}], "type": "inlineReview"}, {"oid": "abaad3282c2a52cf6e1def5047ff93dae38ccdb7", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/abaad3282c2a52cf6e1def5047ff93dae38ccdb7", "message": "refactor: Update UserController to return a MultiUserConfigResponseModel object", "committedDate": "2020-09-15T20:10:06Z", "type": "commit"}]}