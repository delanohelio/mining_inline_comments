{"pr_number": 895, "pr_title": "Fix issues found from a development smoke test", "pr_createdAt": "2020-03-04T19:10:44Z", "pr_url": "https://github.com/blackducksoftware/blackduck-alert/pull/895", "timeline": [{"oid": "7169fd8df67681782e89ee3f6ca29f9140fe3036", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/7169fd8df67681782e89ee3f6ca29f9140fe3036", "message": "Fix(Java): Fix task name logging and project-version notification url", "committedDate": "2020-03-04T14:25:07Z", "type": "commit"}, {"oid": "4c9ca94004bbc2d1cf54a7a1c275ad8ba806e2a4", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/4c9ca94004bbc2d1cf54a7a1c275ad8ba806e2a4", "message": "Fix(Java): Update message parser to exclude links in top level deletes", "committedDate": "2020-03-04T14:56:29Z", "type": "commit"}, {"oid": "034b531303ea219e5fd52f1a349c65538f8de99a", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/034b531303ea219e5fd52f1a349c65538f8de99a", "message": "Fix(Java): Change the way to get tasks by class name to use isAssignable", "committedDate": "2020-03-04T17:41:00Z", "type": "commit"}, {"oid": "a591869033e8f08d2b6b4f9e6ac98397f5d85067", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/a591869033e8f08d2b6b4f9e6ac98397f5d85067", "message": "Fix(Java): Include the project url in project deleted messages", "committedDate": "2020-03-04T19:09:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NTUyOA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/895#discussion_r387885528", "bodyText": "Why not add @Nullable, javax.annotation.Nullable, to the nullableTopLevelAction?\npublic String getCommonTopic(MessageContentGroup messageContent, @Nullable ItemOperation nullableTopLevelAction) {", "author": "jamesrichard91", "createdAt": "2020-03-04T19:29:45Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/channel/message/ChannelMessageParser.java", "diffHunk": "@@ -77,14 +79,24 @@ public String createHeader(MessageContentGroup messageContentGroup) {\n         return headerSeparator;\n     }\n \n-    public String getCommonTopic(MessageContentGroup messageContentGroup) {\n-        return createLinkableItemString(messageContentGroup.getCommonTopic(), true) + getLineSeparator();\n+    public String getCommonTopic(MessageContentGroup messageContent, ItemOperation nullableTopLevelAction) {", "originalCommit": "a591869033e8f08d2b6b4f9e6ac98397f5d85067", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMDM4NA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/895#discussion_r387900384", "bodyText": "We don't have a standardized use of this and even if it is null, it is used in a null-safe way.", "author": "gkillough", "createdAt": "2020-03-04T19:56:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NTUyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NTg2Ng==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/895#discussion_r387885866", "bodyText": "Why not add @Nullable, javax.annotation.Nullable, to the nullableTopLevelAction?", "author": "jamesrichard91", "createdAt": "2020-03-04T19:30:19Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/channel/message/ChannelMessageParser.java", "diffHunk": "@@ -77,14 +79,24 @@ public String createHeader(MessageContentGroup messageContentGroup) {\n         return headerSeparator;\n     }\n \n-    public String getCommonTopic(MessageContentGroup messageContentGroup) {\n-        return createLinkableItemString(messageContentGroup.getCommonTopic(), true) + getLineSeparator();\n+    public String getCommonTopic(MessageContentGroup messageContent, ItemOperation nullableTopLevelAction) {\n+        LinkableItem commonTopic = messageContent.getCommonTopic();\n+        if (ItemOperation.DELETE.equals(nullableTopLevelAction)) {\n+            commonTopic = new LinkableItem(commonTopic.getName(), commonTopic.getValue());\n+        }\n+        return createLinkableItemString(commonTopic, true) + getLineSeparator();\n     }\n \n-    public String getComponentSubTopic(ProviderMessageContent messageContent) {\n-        return messageContent.getSubTopic()\n-                   .map(item -> createLinkableItemString(item, true))\n-                   .orElse(\"\");\n+    public String getComponentSubTopic(ProviderMessageContent messageContent, ItemOperation nullableTopLevelAction) {", "originalCommit": "a591869033e8f08d2b6b4f9e6ac98397f5d85067", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NjQ0Ng==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/895#discussion_r387886446", "bodyText": "Why not add @Nullable, javax.annotation.Nullable, to the returned ItemOperation?\nprotected @Nullable ItemOperation getNullableTopLevelAction(MessageContentGroup messageContentGroup) {", "author": "jamesrichard91", "createdAt": "2020-03-04T19:31:17Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/channel/message/ChannelMessageParser.java", "diffHunk": "@@ -329,4 +341,14 @@ protected String createLinkableItemValueString(LinkableItem linkableItem) {\n                    .findAny();\n     }\n \n+    protected ItemOperation getNullableTopLevelAction(MessageContentGroup messageContentGroup) {", "originalCommit": "a591869033e8f08d2b6b4f9e6ac98397f5d85067", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMjEyOQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/895#discussion_r387902129", "bodyText": "Or the return type should be Optional<ItemOperation>", "author": "jamesrichard91", "createdAt": "2020-03-04T19:59:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NjQ0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwNjA2OA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/895#discussion_r387906068", "bodyText": "Perhaps.", "author": "gkillough", "createdAt": "2020-03-04T20:07:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NjQ0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5ODQ5MQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/895#discussion_r387898491", "bodyText": "By removing the default \"-1\" aren't you opening this up to possible NPE's?", "author": "jamesrichard91", "createdAt": "2020-03-04T19:53:02Z", "path": "src/main/java/com/synopsys/integration/alert/provider/blackduck/actions/BlackDuckGlobalApiAction.java", "diffHunk": "@@ -77,8 +81,8 @@ public void afterDeleteAction(FieldModel fieldModel) {\n         FieldValueModel fieldValueModel = keyToValues.get(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME);\n         String blackDuckGlobalConfigName = fieldValueModel.getValue().orElse(\"\");\n \n-        Long configId = Long.parseLong(Objects.requireNonNullElse(fieldModel.getId(), \"-1\"));\n-        providerLifecycleManager.unscheduleTasksForProviderConfig(blackDuckProvider, configId);\n+        Long configId = Long.parseLong(fieldModel.getId());", "originalCommit": "a591869033e8f08d2b6b4f9e6ac98397f5d85067", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMTUwNw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/895#discussion_r387901507", "bodyText": "There is no way for this config to be deleted without the id, so it will always be present or error out before it gets here.", "author": "gkillough", "createdAt": "2020-03-04T19:58:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5ODQ5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5MTgwNw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/895#discussion_r387891807", "bodyText": "When should we use the ternary operator vs something like this?", "author": "bamandel", "createdAt": "2020-03-04T19:41:09Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/channel/message/ChannelMessageParser.java", "diffHunk": "@@ -77,14 +79,24 @@ public String createHeader(MessageContentGroup messageContentGroup) {\n         return headerSeparator;\n     }\n \n-    public String getCommonTopic(MessageContentGroup messageContentGroup) {\n-        return createLinkableItemString(messageContentGroup.getCommonTopic(), true) + getLineSeparator();\n+    public String getCommonTopic(MessageContentGroup messageContent, ItemOperation nullableTopLevelAction) {\n+        LinkableItem commonTopic = messageContent.getCommonTopic();\n+        if (ItemOperation.DELETE.equals(nullableTopLevelAction)) {\n+            commonTopic = new LinkableItem(commonTopic.getName(), commonTopic.getValue());\n+        }", "originalCommit": "a591869033e8f08d2b6b4f9e6ac98397f5d85067", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzMjUwNQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/895#discussion_r388332505", "bodyText": "This is gonna sound weird, but I think a \"three dot\" maximum should be the rule of thumb. If dereferencing is happening more than three times, it should not be part of a ternary operation.", "author": "gkillough", "createdAt": "2020-03-05T14:36:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5MTgwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzMzM1OQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/895#discussion_r388333359", "bodyText": "That goes for the calling class as well, think of method calls as this.doSomething().", "author": "gkillough", "createdAt": "2020-03-05T14:37:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5MTgwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5MjExNg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/895#discussion_r387892116", "bodyText": "Another possible location for ternary operator", "author": "bamandel", "createdAt": "2020-03-04T19:41:41Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/channel/message/ChannelMessageParser.java", "diffHunk": "@@ -77,14 +79,24 @@ public String createHeader(MessageContentGroup messageContentGroup) {\n         return headerSeparator;\n     }\n \n-    public String getCommonTopic(MessageContentGroup messageContentGroup) {\n-        return createLinkableItemString(messageContentGroup.getCommonTopic(), true) + getLineSeparator();\n+    public String getCommonTopic(MessageContentGroup messageContent, ItemOperation nullableTopLevelAction) {\n+        LinkableItem commonTopic = messageContent.getCommonTopic();\n+        if (ItemOperation.DELETE.equals(nullableTopLevelAction)) {\n+            commonTopic = new LinkableItem(commonTopic.getName(), commonTopic.getValue());\n+        }\n+        return createLinkableItemString(commonTopic, true) + getLineSeparator();\n     }\n \n-    public String getComponentSubTopic(ProviderMessageContent messageContent) {\n-        return messageContent.getSubTopic()\n-                   .map(item -> createLinkableItemString(item, true))\n-                   .orElse(\"\");\n+    public String getComponentSubTopic(ProviderMessageContent messageContent, ItemOperation nullableTopLevelAction) {\n+        Optional<LinkableItem> optionalSubTopic = messageContent.getSubTopic();\n+        if (optionalSubTopic.isPresent()) {\n+            LinkableItem subTopic = optionalSubTopic.get();\n+            if (ItemOperation.DELETE.equals(nullableTopLevelAction)) {\n+                subTopic = new LinkableItem(subTopic.getName(), subTopic.getValue());\n+            }", "originalCommit": "a591869033e8f08d2b6b4f9e6ac98397f5d85067", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6fd6995e6d63b51c4053269f837cce951da9a68f", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/6fd6995e6d63b51c4053269f837cce951da9a68f", "message": "Fix(Java): Return Optional rather than null and fix test errors", "committedDate": "2020-03-04T20:26:13Z", "type": "commit"}]}