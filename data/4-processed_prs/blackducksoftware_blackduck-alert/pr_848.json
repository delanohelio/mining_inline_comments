{"pr_number": 848, "pr_title": "Ensure descriptors with no global config do not fail global config validation", "pr_createdAt": "2020-02-10T18:32:04Z", "pr_url": "https://github.com/blackducksoftware/blackduck-alert/pull/848", "timeline": [{"oid": "95f86fa3d70c79b011c6bf431ceb3ee9607ba25a", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/95f86fa3d70c79b011c6bf431ceb3ee9607ba25a", "message": "Fix(Java): Ensure descriptors with no global config do not fail global config validation", "committedDate": "2020-02-10T18:31:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI3NzAzNA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/848#discussion_r377277034", "bodyText": "Validating global configs is more expensive than comparing the descriptorName which is why the map happens later.", "author": "gkillough", "createdAt": "2020-02-10T19:44:17Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/GlobalConfigExistsValidator.java", "diffHunk": "@@ -42,23 +44,33 @@\n     public static final String GLOBAL_CONFIG_MISSING = \"%s global configuration missing.\";\n     private static final Logger logger = LoggerFactory.getLogger(GlobalConfigExistsValidator.class);\n     private ConfigurationAccessor configurationAccessor;\n-    private List<DescriptorKey> descriptorKeys;\n+    private List<Descriptor> descriptors;\n \n     @Autowired\n-    public GlobalConfigExistsValidator(ConfigurationAccessor configurationAccessor, List<DescriptorKey> descriptorKeys) {\n+    public GlobalConfigExistsValidator(ConfigurationAccessor configurationAccessor, List<Descriptor> descriptors) {\n         this.configurationAccessor = configurationAccessor;\n-        this.descriptorKeys = descriptorKeys;\n+        this.descriptors = descriptors;\n     }\n \n+    /**\n+     * @return An Optional<String> containing the error message.\n+     */\n     public Optional<String> validate(String descriptorName) {\n         if (StringUtils.isBlank(descriptorName)) {\n             return Optional.empty();\n         }\n-        String descriptorDisplayName = descriptorKeys.stream()\n-                                           .filter(descriptorKey -> descriptorKey.getUniversalKey().equals(descriptorName))\n-                                           .map(descriptorKey -> descriptorKey.getDisplayName())\n-                                           .findFirst()\n-                                           .orElse(descriptorName);\n+\n+        Optional<DescriptorKey> optionalDescriptorKey = descriptors\n+                                                            .stream()\n+                                                            .filter(desc -> desc.getDescriptorKey().getUniversalKey().equals(descriptorName))\n+                                                            .filter(this::hasGlobalConfig)", "originalCommit": "95f86fa3d70c79b011c6bf431ceb3ee9607ba25a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}