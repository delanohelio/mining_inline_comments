{"pr_number": 958, "pr_title": "Increasing coverage on database apis", "pr_createdAt": "2020-04-20T18:37:13Z", "pr_url": "https://github.com/blackducksoftware/blackduck-alert/pull/958", "timeline": [{"oid": "37ffca38726abeea87f68d9a89329b4f2af23c51", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/37ffca38726abeea87f68d9a89329b4f2af23c51", "message": "test: Adding new test and increasing test coverage for DefaultAuditUtilittyTest", "committedDate": "2020-04-03T18:23:34Z", "type": "commit"}, {"oid": "9fe424e41585b743586321bac5314a74e7bff843", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/9fe424e41585b743586321bac5314a74e7bff843", "message": "test: Refactoring DefaultAuditUtilityTest to increase method coverage", "committedDate": "2020-04-07T14:53:27Z", "type": "commit"}, {"oid": "d837b4709e6217c4657aed1ad167e637b5fa27ed", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/d837b4709e6217c4657aed1ad167e637b5fa27ed", "message": "test: Increasing test coverage for DefaultSystemStatusUtility", "committedDate": "2020-04-08T18:27:18Z", "type": "commit"}, {"oid": "ef0e3cf12db9aa07bdf04144c14091c304eece23", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/ef0e3cf12db9aa07bdf04144c14091c304eece23", "message": "refactor: Add constructor and changing public variable to private", "committedDate": "2020-04-09T19:29:21Z", "type": "commit"}, {"oid": "91907753baeef0fca69d9909a66b09572cccbcef", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/91907753baeef0fca69d9909a66b09572cccbcef", "message": "test: Increasing test coverage for DefaultAuthenticationTypeAccessor", "committedDate": "2020-04-10T13:21:53Z", "type": "commit"}, {"oid": "d454430ff2324b2ea5f9a92739fc02a8ffada790", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/d454430ff2324b2ea5f9a92739fc02a8ffada790", "message": "test: Increasing test coverage on DefaultSettingsKeyAccessor", "committedDate": "2020-04-15T14:18:41Z", "type": "commit"}, {"oid": "9c5ba094637ed22f8d41aa874acad9a2e1199287", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/9c5ba094637ed22f8d41aa874acad9a2e1199287", "message": "test: Increasing test coverage for DefaultDescriptorAccessor", "committedDate": "2020-04-20T18:06:20Z", "type": "commit"}, {"oid": "f855c6c40784106fd56df471fac6564d533acc8e", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f855c6c40784106fd56df471fac6564d533acc8e", "message": "Merge remote-tracking branch 'origin/master' into mc_db_api_tests", "committedDate": "2020-04-20T18:07:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwNDk2NQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/958#discussion_r411604965", "bodyText": "We created these \"mock\" repositories for test purposes so that we can control the functionality within repository and do not have to mock out the returns from each of these methods since these repositories were easier to implement than others.", "author": "ChomickiM", "createdAt": "2020-04-20T18:40:34Z", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/mock/MockSettingsKeyRepository.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package com.synopsys.integration.alert.database.api.mock;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.springframework.data.domain.Example;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.domain.Sort;\n+\n+import com.synopsys.integration.alert.database.settings.SettingsKeyEntity;\n+import com.synopsys.integration.alert.database.settings.SettingsKeyRepository;\n+\n+public class MockSettingsKeyRepository implements SettingsKeyRepository {", "originalCommit": "f855c6c40784106fd56df471fac6564d533acc8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwNTE1Ng==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/958#discussion_r411605156", "bodyText": "Same as above.", "author": "ChomickiM", "createdAt": "2020-04-20T18:40:49Z", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/mock/MockSystemStatusRepository.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package com.synopsys.integration.alert.database.api.mock;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.springframework.data.domain.Example;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.domain.Sort;\n+\n+import com.synopsys.integration.alert.database.system.SystemStatus;\n+import com.synopsys.integration.alert.database.system.SystemStatusRepository;\n+\n+public class MockSystemStatusRepository implements SystemStatusRepository {", "originalCommit": "f855c6c40784106fd56df471fac6564d533acc8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzMTI2Nw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/958#discussion_r412131267", "bodyText": "Do we want serialVersionUIDs explicitly defined for database entities? We are not maintaining backward-compatible POJOs (liquibase handles data migration, so we never need intermediate Java Objects), so I'm not convinced that we gain any value from having it.", "author": "gkillough", "createdAt": "2020-04-21T12:15:04Z", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/user/AuthenticationTypeEntity.java", "diffHunk": "@@ -31,13 +31,18 @@\n @Entity\n @Table(schema = \"alert\", name = \"authentication_type\")\n public class AuthenticationTypeEntity extends DatabaseEntity {\n+    private static final long serialVersionUID = -2308934073112918860L;", "originalCommit": "f855c6c40784106fd56df471fac6564d533acc8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE2NTE0OA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/958#discussion_r412165148", "bodyText": "I believe this was added as a save action, when I try to delete the serialVersionUID and save, it is added back in automatically.", "author": "ChomickiM", "createdAt": "2020-04-21T13:03:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzMTI2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1NTM2Nw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/958#discussion_r412255367", "bodyText": "Yes it was added by the save action.", "author": "jamesrichard91", "createdAt": "2020-04-21T14:52:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzMTI2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1OTI3Mg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/958#discussion_r412259272", "bodyText": "We may want to remove this rule from the save actions. It's not clear if we are getting any value from the serialVersionUID's as Gavin pointed out", "author": "jamesrichard91", "createdAt": "2020-04-21T14:56:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzMTI2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI3MjQxMA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/958#discussion_r412272410", "bodyText": "You will get a compiler warning if the serialVersionUID is missing on classes that implement Serializable.", "author": "psantos1113", "createdAt": "2020-04-21T15:11:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzMTI2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMxNjIxMw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/958#discussion_r412316213", "bodyText": "How is this any different than the previous test? It looks like the assertions do not match the test name", "author": "jamesrichard91", "createdAt": "2020-04-21T16:42:49Z", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultDescriptorAccessorTest.java", "diffHunk": "@@ -0,0 +1,289 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.model.DefinedFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.database.configuration.ConfigContextEntity;\n+import com.synopsys.integration.alert.database.configuration.DefinedFieldEntity;\n+import com.synopsys.integration.alert.database.configuration.DescriptorTypeEntity;\n+import com.synopsys.integration.alert.database.configuration.RegisteredDescriptorEntity;\n+import com.synopsys.integration.alert.database.configuration.repository.ConfigContextRepository;\n+import com.synopsys.integration.alert.database.configuration.repository.DefinedFieldRepository;\n+import com.synopsys.integration.alert.database.configuration.repository.DescriptorTypeRepository;\n+import com.synopsys.integration.alert.database.configuration.repository.RegisteredDescriptorRepository;\n+\n+public class DefaultDescriptorAccessorTest {\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultAuditUtility.class);\n+\n+    @Test\n+    public void getRegisteredDescriptorsTest() throws Exception {\n+        final String name = \"name-test\";\n+        final Long typeId = 1L;\n+        final DescriptorType descriptorType = DescriptorType.CHANNEL;\n+\n+        RegisteredDescriptorEntity registeredDescriptorEntity = new RegisteredDescriptorEntity(name, typeId);\n+        registeredDescriptorEntity.setId(1L);\n+        DescriptorTypeEntity descriptorTypeEntity = new DescriptorTypeEntity(descriptorType.name());\n+\n+        RegisteredDescriptorRepository registeredDescriptorRepository = Mockito.mock(RegisteredDescriptorRepository.class);\n+        DescriptorTypeRepository descriptorTypeRepository = Mockito.mock(DescriptorTypeRepository.class);\n+\n+        Mockito.when(registeredDescriptorRepository.findAll()).thenReturn(List.of(registeredDescriptorEntity));\n+        Mockito.when(descriptorTypeRepository.findById(Mockito.any())).thenReturn(Optional.of(descriptorTypeEntity));\n+\n+        DefaultDescriptorAccessor descriptorAccessor = new DefaultDescriptorAccessor(registeredDescriptorRepository, null, null, descriptorTypeRepository);\n+        List<RegisteredDescriptorModel> registeredDescriptorModelList = descriptorAccessor.getRegisteredDescriptors();\n+\n+        assertEquals(1, registeredDescriptorModelList.size());\n+        assertEquals(name, registeredDescriptorModelList.get(0).getName());\n+        assertEquals(descriptorType, registeredDescriptorModelList.get(0).getType());\n+    }\n+\n+    @Test\n+    public void getRegisteredDescriptorByKeyTest() throws Exception {\n+        final String name = \"name-test\";\n+        final Long typeId = 1L;\n+        final DescriptorType descriptorType = DescriptorType.CHANNEL;\n+\n+        RegisteredDescriptorEntity registeredDescriptorEntity = new RegisteredDescriptorEntity(name, typeId);\n+        registeredDescriptorEntity.setId(1L);\n+        DescriptorKey descriptorKey = createDescriptorKey(\"descriptorKey-test\");\n+        DescriptorKey emptyDescriptorKey = createDescriptorKey(\"bad-key\");\n+        DescriptorTypeEntity descriptorTypeEntity = new DescriptorTypeEntity(descriptorType.name());\n+\n+        RegisteredDescriptorRepository registeredDescriptorRepository = Mockito.mock(RegisteredDescriptorRepository.class);\n+        DescriptorTypeRepository descriptorTypeRepository = Mockito.mock(DescriptorTypeRepository.class);\n+\n+        Mockito.when(registeredDescriptorRepository.findFirstByName(descriptorKey.getUniversalKey())).thenReturn(Optional.of(registeredDescriptorEntity));\n+        Mockito.when(registeredDescriptorRepository.findFirstByName(emptyDescriptorKey.getUniversalKey())).thenReturn(Optional.empty());\n+        Mockito.when(descriptorTypeRepository.findById(Mockito.any())).thenReturn(Optional.of(descriptorTypeEntity));\n+\n+        DefaultDescriptorAccessor descriptorAccessor = new DefaultDescriptorAccessor(registeredDescriptorRepository, null, null, descriptorTypeRepository);\n+        Optional<RegisteredDescriptorModel> registeredDescriptorModel = descriptorAccessor.getRegisteredDescriptorByKey(descriptorKey);\n+        Optional<RegisteredDescriptorModel> registeredDescriptorModelEmpty = descriptorAccessor.getRegisteredDescriptorByKey(emptyDescriptorKey);\n+\n+        assertTrue(registeredDescriptorModel.isPresent());\n+        assertFalse(registeredDescriptorModelEmpty.isPresent());\n+        assertEquals(name, registeredDescriptorModel.get().getName());\n+        assertEquals(descriptorType, registeredDescriptorModel.get().getType());\n+    }\n+\n+    @Test\n+    public void descriptorKeyFailureTest() throws Exception {\n+        DefaultDescriptorAccessor descriptorAccessor = new DefaultDescriptorAccessor(null, null, null, null);\n+        DescriptorKey descriptorKey = createDescriptorKey(\"\");\n+\n+        try {\n+            descriptorAccessor.getRegisteredDescriptorByKey(descriptorKey);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+            logger.error(e.getMessage(), e);\n+        }\n+    }\n+\n+    @Test\n+    public void getRegisteredDescriptorsByTypeTest() throws Exception {\n+        final String name = \"name-test\";\n+        final Long typeId = 1L;\n+        final DescriptorType descriptorType = DescriptorType.CHANNEL;\n+\n+        RegisteredDescriptorRepository registeredDescriptorRepository = Mockito.mock(RegisteredDescriptorRepository.class);\n+        DescriptorTypeRepository descriptorTypeRepository = Mockito.mock(DescriptorTypeRepository.class);\n+\n+        RegisteredDescriptorEntity registeredDescriptorEntity = new RegisteredDescriptorEntity(name, typeId);\n+        registeredDescriptorEntity.setId(1L);\n+        DescriptorTypeEntity descriptorTypeEntity = new DescriptorTypeEntity(descriptorType.name());\n+        descriptorTypeEntity.setId(1L);\n+\n+        Mockito.when(descriptorTypeRepository.findFirstByType(descriptorType.name())).thenReturn(Optional.of(descriptorTypeEntity));\n+        Mockito.when(registeredDescriptorRepository.findByTypeId(Mockito.any())).thenReturn(List.of(registeredDescriptorEntity));\n+        Mockito.when(descriptorTypeRepository.findById(registeredDescriptorEntity.getTypeId())).thenReturn(Optional.of(descriptorTypeEntity));\n+\n+        DefaultDescriptorAccessor descriptorAccessor = new DefaultDescriptorAccessor(registeredDescriptorRepository, null, null, descriptorTypeRepository);\n+        List<RegisteredDescriptorModel> registeredDescriptorModelList = descriptorAccessor.getRegisteredDescriptorsByType(descriptorType);\n+\n+        assertEquals(1, registeredDescriptorModelList.size());\n+        assertEquals(name, registeredDescriptorModelList.get(0).getName());\n+        assertEquals(descriptorType, registeredDescriptorModelList.get(0).getType());\n+    }\n+\n+    @Test\n+    public void getRegisteredDescriptorsByTypeMissingDescriptorTypeTest() throws Exception {\n+        final String name = \"name-test\";\n+        final Long typeId = 1L;\n+        final DescriptorType descriptorType = DescriptorType.CHANNEL;\n+\n+        RegisteredDescriptorRepository registeredDescriptorRepository = Mockito.mock(RegisteredDescriptorRepository.class);\n+        DescriptorTypeRepository descriptorTypeRepository = Mockito.mock(DescriptorTypeRepository.class);\n+\n+        RegisteredDescriptorEntity registeredDescriptorEntity = new RegisteredDescriptorEntity(name, typeId);\n+        registeredDescriptorEntity.setId(1L);\n+        DescriptorTypeEntity descriptorTypeEntity = new DescriptorTypeEntity(descriptorType.name());\n+        descriptorTypeEntity.setId(1L);\n+\n+        Mockito.when(descriptorTypeRepository.findFirstByType(descriptorType.name())).thenReturn(Optional.empty());\n+        Mockito.when(descriptorTypeRepository.save(Mockito.any())).thenReturn(descriptorTypeEntity);\n+        Mockito.when(registeredDescriptorRepository.findByTypeId(Mockito.any())).thenReturn(List.of(registeredDescriptorEntity));\n+        Mockito.when(descriptorTypeRepository.findById(registeredDescriptorEntity.getTypeId())).thenReturn(Optional.of(descriptorTypeEntity));\n+\n+        DefaultDescriptorAccessor descriptorAccessor = new DefaultDescriptorAccessor(registeredDescriptorRepository, null, null, descriptorTypeRepository);\n+        List<RegisteredDescriptorModel> registeredDescriptorModelList = descriptorAccessor.getRegisteredDescriptorsByType(descriptorType);\n+\n+        assertEquals(1, registeredDescriptorModelList.size());", "originalCommit": "f855c6c40784106fd56df471fac6564d533acc8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM0MjIwNA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/958#discussion_r412342204", "bodyText": "This test is testing for an Optional.empty case that is used by one of the private methods to increase its coverage, it is being passed on line 141 and as a result needed some other mocks. Because it will create a new descriptorTypeEntity I used the same setup as in the previous test after that.", "author": "ChomickiM", "createdAt": "2020-04-21T17:17:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMxNjIxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMxODM5NA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/958#discussion_r412318394", "bodyText": "Instead of calling registeredDescriptorModel.get() over and over, you could create a local variable for the return of this method and use that variable instead.\nOptional<RegisteredDescriptorModel> registeredDescriptorModelOptional = descriptorAccessor.getRegisteredDescriptorById(descriptorId);\nRegisteredDescriptorModel registeredDescriptorModel = registeredDescriptorModelOptional.get();\nassertTrue(registeredDescriptorModel.isPresent());\nassertEquals(typeId, registeredDescriptorModel.getId());\nassertEquals(name, registeredDescriptorModel.getName());\nassertEquals(descriptorType, registeredDescriptorModel.getType());", "author": "jamesrichard91", "createdAt": "2020-04-21T16:46:10Z", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultDescriptorAccessorTest.java", "diffHunk": "@@ -0,0 +1,289 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.model.DefinedFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.database.configuration.ConfigContextEntity;\n+import com.synopsys.integration.alert.database.configuration.DefinedFieldEntity;\n+import com.synopsys.integration.alert.database.configuration.DescriptorTypeEntity;\n+import com.synopsys.integration.alert.database.configuration.RegisteredDescriptorEntity;\n+import com.synopsys.integration.alert.database.configuration.repository.ConfigContextRepository;\n+import com.synopsys.integration.alert.database.configuration.repository.DefinedFieldRepository;\n+import com.synopsys.integration.alert.database.configuration.repository.DescriptorTypeRepository;\n+import com.synopsys.integration.alert.database.configuration.repository.RegisteredDescriptorRepository;\n+\n+public class DefaultDescriptorAccessorTest {\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultAuditUtility.class);\n+\n+    @Test\n+    public void getRegisteredDescriptorsTest() throws Exception {\n+        final String name = \"name-test\";\n+        final Long typeId = 1L;\n+        final DescriptorType descriptorType = DescriptorType.CHANNEL;\n+\n+        RegisteredDescriptorEntity registeredDescriptorEntity = new RegisteredDescriptorEntity(name, typeId);\n+        registeredDescriptorEntity.setId(1L);\n+        DescriptorTypeEntity descriptorTypeEntity = new DescriptorTypeEntity(descriptorType.name());\n+\n+        RegisteredDescriptorRepository registeredDescriptorRepository = Mockito.mock(RegisteredDescriptorRepository.class);\n+        DescriptorTypeRepository descriptorTypeRepository = Mockito.mock(DescriptorTypeRepository.class);\n+\n+        Mockito.when(registeredDescriptorRepository.findAll()).thenReturn(List.of(registeredDescriptorEntity));\n+        Mockito.when(descriptorTypeRepository.findById(Mockito.any())).thenReturn(Optional.of(descriptorTypeEntity));\n+\n+        DefaultDescriptorAccessor descriptorAccessor = new DefaultDescriptorAccessor(registeredDescriptorRepository, null, null, descriptorTypeRepository);\n+        List<RegisteredDescriptorModel> registeredDescriptorModelList = descriptorAccessor.getRegisteredDescriptors();\n+\n+        assertEquals(1, registeredDescriptorModelList.size());\n+        assertEquals(name, registeredDescriptorModelList.get(0).getName());\n+        assertEquals(descriptorType, registeredDescriptorModelList.get(0).getType());\n+    }\n+\n+    @Test\n+    public void getRegisteredDescriptorByKeyTest() throws Exception {\n+        final String name = \"name-test\";\n+        final Long typeId = 1L;\n+        final DescriptorType descriptorType = DescriptorType.CHANNEL;\n+\n+        RegisteredDescriptorEntity registeredDescriptorEntity = new RegisteredDescriptorEntity(name, typeId);\n+        registeredDescriptorEntity.setId(1L);\n+        DescriptorKey descriptorKey = createDescriptorKey(\"descriptorKey-test\");\n+        DescriptorKey emptyDescriptorKey = createDescriptorKey(\"bad-key\");\n+        DescriptorTypeEntity descriptorTypeEntity = new DescriptorTypeEntity(descriptorType.name());\n+\n+        RegisteredDescriptorRepository registeredDescriptorRepository = Mockito.mock(RegisteredDescriptorRepository.class);\n+        DescriptorTypeRepository descriptorTypeRepository = Mockito.mock(DescriptorTypeRepository.class);\n+\n+        Mockito.when(registeredDescriptorRepository.findFirstByName(descriptorKey.getUniversalKey())).thenReturn(Optional.of(registeredDescriptorEntity));\n+        Mockito.when(registeredDescriptorRepository.findFirstByName(emptyDescriptorKey.getUniversalKey())).thenReturn(Optional.empty());\n+        Mockito.when(descriptorTypeRepository.findById(Mockito.any())).thenReturn(Optional.of(descriptorTypeEntity));\n+\n+        DefaultDescriptorAccessor descriptorAccessor = new DefaultDescriptorAccessor(registeredDescriptorRepository, null, null, descriptorTypeRepository);\n+        Optional<RegisteredDescriptorModel> registeredDescriptorModel = descriptorAccessor.getRegisteredDescriptorByKey(descriptorKey);\n+        Optional<RegisteredDescriptorModel> registeredDescriptorModelEmpty = descriptorAccessor.getRegisteredDescriptorByKey(emptyDescriptorKey);\n+\n+        assertTrue(registeredDescriptorModel.isPresent());\n+        assertFalse(registeredDescriptorModelEmpty.isPresent());\n+        assertEquals(name, registeredDescriptorModel.get().getName());\n+        assertEquals(descriptorType, registeredDescriptorModel.get().getType());\n+    }\n+\n+    @Test\n+    public void descriptorKeyFailureTest() throws Exception {\n+        DefaultDescriptorAccessor descriptorAccessor = new DefaultDescriptorAccessor(null, null, null, null);\n+        DescriptorKey descriptorKey = createDescriptorKey(\"\");\n+\n+        try {\n+            descriptorAccessor.getRegisteredDescriptorByKey(descriptorKey);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+            logger.error(e.getMessage(), e);\n+        }\n+    }\n+\n+    @Test\n+    public void getRegisteredDescriptorsByTypeTest() throws Exception {\n+        final String name = \"name-test\";\n+        final Long typeId = 1L;\n+        final DescriptorType descriptorType = DescriptorType.CHANNEL;\n+\n+        RegisteredDescriptorRepository registeredDescriptorRepository = Mockito.mock(RegisteredDescriptorRepository.class);\n+        DescriptorTypeRepository descriptorTypeRepository = Mockito.mock(DescriptorTypeRepository.class);\n+\n+        RegisteredDescriptorEntity registeredDescriptorEntity = new RegisteredDescriptorEntity(name, typeId);\n+        registeredDescriptorEntity.setId(1L);\n+        DescriptorTypeEntity descriptorTypeEntity = new DescriptorTypeEntity(descriptorType.name());\n+        descriptorTypeEntity.setId(1L);\n+\n+        Mockito.when(descriptorTypeRepository.findFirstByType(descriptorType.name())).thenReturn(Optional.of(descriptorTypeEntity));\n+        Mockito.when(registeredDescriptorRepository.findByTypeId(Mockito.any())).thenReturn(List.of(registeredDescriptorEntity));\n+        Mockito.when(descriptorTypeRepository.findById(registeredDescriptorEntity.getTypeId())).thenReturn(Optional.of(descriptorTypeEntity));\n+\n+        DefaultDescriptorAccessor descriptorAccessor = new DefaultDescriptorAccessor(registeredDescriptorRepository, null, null, descriptorTypeRepository);\n+        List<RegisteredDescriptorModel> registeredDescriptorModelList = descriptorAccessor.getRegisteredDescriptorsByType(descriptorType);\n+\n+        assertEquals(1, registeredDescriptorModelList.size());\n+        assertEquals(name, registeredDescriptorModelList.get(0).getName());\n+        assertEquals(descriptorType, registeredDescriptorModelList.get(0).getType());\n+    }\n+\n+    @Test\n+    public void getRegisteredDescriptorsByTypeMissingDescriptorTypeTest() throws Exception {\n+        final String name = \"name-test\";\n+        final Long typeId = 1L;\n+        final DescriptorType descriptorType = DescriptorType.CHANNEL;\n+\n+        RegisteredDescriptorRepository registeredDescriptorRepository = Mockito.mock(RegisteredDescriptorRepository.class);\n+        DescriptorTypeRepository descriptorTypeRepository = Mockito.mock(DescriptorTypeRepository.class);\n+\n+        RegisteredDescriptorEntity registeredDescriptorEntity = new RegisteredDescriptorEntity(name, typeId);\n+        registeredDescriptorEntity.setId(1L);\n+        DescriptorTypeEntity descriptorTypeEntity = new DescriptorTypeEntity(descriptorType.name());\n+        descriptorTypeEntity.setId(1L);\n+\n+        Mockito.when(descriptorTypeRepository.findFirstByType(descriptorType.name())).thenReturn(Optional.empty());\n+        Mockito.when(descriptorTypeRepository.save(Mockito.any())).thenReturn(descriptorTypeEntity);\n+        Mockito.when(registeredDescriptorRepository.findByTypeId(Mockito.any())).thenReturn(List.of(registeredDescriptorEntity));\n+        Mockito.when(descriptorTypeRepository.findById(registeredDescriptorEntity.getTypeId())).thenReturn(Optional.of(descriptorTypeEntity));\n+\n+        DefaultDescriptorAccessor descriptorAccessor = new DefaultDescriptorAccessor(registeredDescriptorRepository, null, null, descriptorTypeRepository);\n+        List<RegisteredDescriptorModel> registeredDescriptorModelList = descriptorAccessor.getRegisteredDescriptorsByType(descriptorType);\n+\n+        assertEquals(1, registeredDescriptorModelList.size());\n+        assertEquals(name, registeredDescriptorModelList.get(0).getName());\n+        assertEquals(descriptorType, registeredDescriptorModelList.get(0).getType());\n+    }\n+\n+    @Test\n+    public void descriptorTypeFailureTest() throws Exception {\n+        DefaultDescriptorAccessor descriptorAccessor = new DefaultDescriptorAccessor(null, null, null, null);\n+        DescriptorType descriptorType = null;\n+\n+        try {\n+            descriptorAccessor.getRegisteredDescriptorsByType(descriptorType);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+            logger.error(e.getMessage(), e);\n+        }\n+    }\n+\n+    @Test\n+    public void getRegisteredDescriptorByIdTest() throws Exception {\n+        final String name = \"name-test\";\n+        final Long typeId = 1L;\n+        final DescriptorType descriptorType = DescriptorType.CHANNEL;\n+        final Long descriptorId = 2L;\n+\n+        RegisteredDescriptorEntity registeredDescriptorEntity = new RegisteredDescriptorEntity(name, typeId);\n+        registeredDescriptorEntity.setId(1L);\n+        DescriptorTypeEntity descriptorTypeEntity = new DescriptorTypeEntity(descriptorType.name());\n+        descriptorTypeEntity.setId(2L);\n+\n+        RegisteredDescriptorRepository registeredDescriptorRepository = Mockito.mock(RegisteredDescriptorRepository.class);\n+        DescriptorTypeRepository descriptorTypeRepository = Mockito.mock(DescriptorTypeRepository.class);\n+\n+        Mockito.when(registeredDescriptorRepository.findById(descriptorId)).thenReturn(Optional.of(registeredDescriptorEntity));\n+        Mockito.when(descriptorTypeRepository.findById(Mockito.any())).thenReturn(Optional.of(descriptorTypeEntity));\n+\n+        DefaultDescriptorAccessor descriptorAccessor = new DefaultDescriptorAccessor(registeredDescriptorRepository, null, null, descriptorTypeRepository);\n+        Optional<RegisteredDescriptorModel> registeredDescriptorModel = descriptorAccessor.getRegisteredDescriptorById(descriptorId);\n+\n+        assertTrue(registeredDescriptorModel.isPresent());\n+        assertEquals(typeId, registeredDescriptorModel.get().getId());", "originalCommit": "f855c6c40784106fd56df471fac6564d533acc8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMxOTc1OQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/958#discussion_r412319759", "bodyText": "Instead of calling definedFieldModelList.get(0) repeatedly, try calling it once and create a local variable and reuse the variable.", "author": "jamesrichard91", "createdAt": "2020-04-21T16:47:53Z", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultDescriptorAccessorTest.java", "diffHunk": "@@ -0,0 +1,289 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.model.DefinedFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.database.configuration.ConfigContextEntity;\n+import com.synopsys.integration.alert.database.configuration.DefinedFieldEntity;\n+import com.synopsys.integration.alert.database.configuration.DescriptorTypeEntity;\n+import com.synopsys.integration.alert.database.configuration.RegisteredDescriptorEntity;\n+import com.synopsys.integration.alert.database.configuration.repository.ConfigContextRepository;\n+import com.synopsys.integration.alert.database.configuration.repository.DefinedFieldRepository;\n+import com.synopsys.integration.alert.database.configuration.repository.DescriptorTypeRepository;\n+import com.synopsys.integration.alert.database.configuration.repository.RegisteredDescriptorRepository;\n+\n+public class DefaultDescriptorAccessorTest {\n+    private static final Logger logger = LoggerFactory.getLogger(DefaultAuditUtility.class);\n+\n+    @Test\n+    public void getRegisteredDescriptorsTest() throws Exception {\n+        final String name = \"name-test\";\n+        final Long typeId = 1L;\n+        final DescriptorType descriptorType = DescriptorType.CHANNEL;\n+\n+        RegisteredDescriptorEntity registeredDescriptorEntity = new RegisteredDescriptorEntity(name, typeId);\n+        registeredDescriptorEntity.setId(1L);\n+        DescriptorTypeEntity descriptorTypeEntity = new DescriptorTypeEntity(descriptorType.name());\n+\n+        RegisteredDescriptorRepository registeredDescriptorRepository = Mockito.mock(RegisteredDescriptorRepository.class);\n+        DescriptorTypeRepository descriptorTypeRepository = Mockito.mock(DescriptorTypeRepository.class);\n+\n+        Mockito.when(registeredDescriptorRepository.findAll()).thenReturn(List.of(registeredDescriptorEntity));\n+        Mockito.when(descriptorTypeRepository.findById(Mockito.any())).thenReturn(Optional.of(descriptorTypeEntity));\n+\n+        DefaultDescriptorAccessor descriptorAccessor = new DefaultDescriptorAccessor(registeredDescriptorRepository, null, null, descriptorTypeRepository);\n+        List<RegisteredDescriptorModel> registeredDescriptorModelList = descriptorAccessor.getRegisteredDescriptors();\n+\n+        assertEquals(1, registeredDescriptorModelList.size());\n+        assertEquals(name, registeredDescriptorModelList.get(0).getName());\n+        assertEquals(descriptorType, registeredDescriptorModelList.get(0).getType());\n+    }\n+\n+    @Test\n+    public void getRegisteredDescriptorByKeyTest() throws Exception {\n+        final String name = \"name-test\";\n+        final Long typeId = 1L;\n+        final DescriptorType descriptorType = DescriptorType.CHANNEL;\n+\n+        RegisteredDescriptorEntity registeredDescriptorEntity = new RegisteredDescriptorEntity(name, typeId);\n+        registeredDescriptorEntity.setId(1L);\n+        DescriptorKey descriptorKey = createDescriptorKey(\"descriptorKey-test\");\n+        DescriptorKey emptyDescriptorKey = createDescriptorKey(\"bad-key\");\n+        DescriptorTypeEntity descriptorTypeEntity = new DescriptorTypeEntity(descriptorType.name());\n+\n+        RegisteredDescriptorRepository registeredDescriptorRepository = Mockito.mock(RegisteredDescriptorRepository.class);\n+        DescriptorTypeRepository descriptorTypeRepository = Mockito.mock(DescriptorTypeRepository.class);\n+\n+        Mockito.when(registeredDescriptorRepository.findFirstByName(descriptorKey.getUniversalKey())).thenReturn(Optional.of(registeredDescriptorEntity));\n+        Mockito.when(registeredDescriptorRepository.findFirstByName(emptyDescriptorKey.getUniversalKey())).thenReturn(Optional.empty());\n+        Mockito.when(descriptorTypeRepository.findById(Mockito.any())).thenReturn(Optional.of(descriptorTypeEntity));\n+\n+        DefaultDescriptorAccessor descriptorAccessor = new DefaultDescriptorAccessor(registeredDescriptorRepository, null, null, descriptorTypeRepository);\n+        Optional<RegisteredDescriptorModel> registeredDescriptorModel = descriptorAccessor.getRegisteredDescriptorByKey(descriptorKey);\n+        Optional<RegisteredDescriptorModel> registeredDescriptorModelEmpty = descriptorAccessor.getRegisteredDescriptorByKey(emptyDescriptorKey);\n+\n+        assertTrue(registeredDescriptorModel.isPresent());\n+        assertFalse(registeredDescriptorModelEmpty.isPresent());\n+        assertEquals(name, registeredDescriptorModel.get().getName());\n+        assertEquals(descriptorType, registeredDescriptorModel.get().getType());\n+    }\n+\n+    @Test\n+    public void descriptorKeyFailureTest() throws Exception {\n+        DefaultDescriptorAccessor descriptorAccessor = new DefaultDescriptorAccessor(null, null, null, null);\n+        DescriptorKey descriptorKey = createDescriptorKey(\"\");\n+\n+        try {\n+            descriptorAccessor.getRegisteredDescriptorByKey(descriptorKey);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+            logger.error(e.getMessage(), e);\n+        }\n+    }\n+\n+    @Test\n+    public void getRegisteredDescriptorsByTypeTest() throws Exception {\n+        final String name = \"name-test\";\n+        final Long typeId = 1L;\n+        final DescriptorType descriptorType = DescriptorType.CHANNEL;\n+\n+        RegisteredDescriptorRepository registeredDescriptorRepository = Mockito.mock(RegisteredDescriptorRepository.class);\n+        DescriptorTypeRepository descriptorTypeRepository = Mockito.mock(DescriptorTypeRepository.class);\n+\n+        RegisteredDescriptorEntity registeredDescriptorEntity = new RegisteredDescriptorEntity(name, typeId);\n+        registeredDescriptorEntity.setId(1L);\n+        DescriptorTypeEntity descriptorTypeEntity = new DescriptorTypeEntity(descriptorType.name());\n+        descriptorTypeEntity.setId(1L);\n+\n+        Mockito.when(descriptorTypeRepository.findFirstByType(descriptorType.name())).thenReturn(Optional.of(descriptorTypeEntity));\n+        Mockito.when(registeredDescriptorRepository.findByTypeId(Mockito.any())).thenReturn(List.of(registeredDescriptorEntity));\n+        Mockito.when(descriptorTypeRepository.findById(registeredDescriptorEntity.getTypeId())).thenReturn(Optional.of(descriptorTypeEntity));\n+\n+        DefaultDescriptorAccessor descriptorAccessor = new DefaultDescriptorAccessor(registeredDescriptorRepository, null, null, descriptorTypeRepository);\n+        List<RegisteredDescriptorModel> registeredDescriptorModelList = descriptorAccessor.getRegisteredDescriptorsByType(descriptorType);\n+\n+        assertEquals(1, registeredDescriptorModelList.size());\n+        assertEquals(name, registeredDescriptorModelList.get(0).getName());\n+        assertEquals(descriptorType, registeredDescriptorModelList.get(0).getType());\n+    }\n+\n+    @Test\n+    public void getRegisteredDescriptorsByTypeMissingDescriptorTypeTest() throws Exception {\n+        final String name = \"name-test\";\n+        final Long typeId = 1L;\n+        final DescriptorType descriptorType = DescriptorType.CHANNEL;\n+\n+        RegisteredDescriptorRepository registeredDescriptorRepository = Mockito.mock(RegisteredDescriptorRepository.class);\n+        DescriptorTypeRepository descriptorTypeRepository = Mockito.mock(DescriptorTypeRepository.class);\n+\n+        RegisteredDescriptorEntity registeredDescriptorEntity = new RegisteredDescriptorEntity(name, typeId);\n+        registeredDescriptorEntity.setId(1L);\n+        DescriptorTypeEntity descriptorTypeEntity = new DescriptorTypeEntity(descriptorType.name());\n+        descriptorTypeEntity.setId(1L);\n+\n+        Mockito.when(descriptorTypeRepository.findFirstByType(descriptorType.name())).thenReturn(Optional.empty());\n+        Mockito.when(descriptorTypeRepository.save(Mockito.any())).thenReturn(descriptorTypeEntity);\n+        Mockito.when(registeredDescriptorRepository.findByTypeId(Mockito.any())).thenReturn(List.of(registeredDescriptorEntity));\n+        Mockito.when(descriptorTypeRepository.findById(registeredDescriptorEntity.getTypeId())).thenReturn(Optional.of(descriptorTypeEntity));\n+\n+        DefaultDescriptorAccessor descriptorAccessor = new DefaultDescriptorAccessor(registeredDescriptorRepository, null, null, descriptorTypeRepository);\n+        List<RegisteredDescriptorModel> registeredDescriptorModelList = descriptorAccessor.getRegisteredDescriptorsByType(descriptorType);\n+\n+        assertEquals(1, registeredDescriptorModelList.size());\n+        assertEquals(name, registeredDescriptorModelList.get(0).getName());\n+        assertEquals(descriptorType, registeredDescriptorModelList.get(0).getType());\n+    }\n+\n+    @Test\n+    public void descriptorTypeFailureTest() throws Exception {\n+        DefaultDescriptorAccessor descriptorAccessor = new DefaultDescriptorAccessor(null, null, null, null);\n+        DescriptorType descriptorType = null;\n+\n+        try {\n+            descriptorAccessor.getRegisteredDescriptorsByType(descriptorType);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+            logger.error(e.getMessage(), e);\n+        }\n+    }\n+\n+    @Test\n+    public void getRegisteredDescriptorByIdTest() throws Exception {\n+        final String name = \"name-test\";\n+        final Long typeId = 1L;\n+        final DescriptorType descriptorType = DescriptorType.CHANNEL;\n+        final Long descriptorId = 2L;\n+\n+        RegisteredDescriptorEntity registeredDescriptorEntity = new RegisteredDescriptorEntity(name, typeId);\n+        registeredDescriptorEntity.setId(1L);\n+        DescriptorTypeEntity descriptorTypeEntity = new DescriptorTypeEntity(descriptorType.name());\n+        descriptorTypeEntity.setId(2L);\n+\n+        RegisteredDescriptorRepository registeredDescriptorRepository = Mockito.mock(RegisteredDescriptorRepository.class);\n+        DescriptorTypeRepository descriptorTypeRepository = Mockito.mock(DescriptorTypeRepository.class);\n+\n+        Mockito.when(registeredDescriptorRepository.findById(descriptorId)).thenReturn(Optional.of(registeredDescriptorEntity));\n+        Mockito.when(descriptorTypeRepository.findById(Mockito.any())).thenReturn(Optional.of(descriptorTypeEntity));\n+\n+        DefaultDescriptorAccessor descriptorAccessor = new DefaultDescriptorAccessor(registeredDescriptorRepository, null, null, descriptorTypeRepository);\n+        Optional<RegisteredDescriptorModel> registeredDescriptorModel = descriptorAccessor.getRegisteredDescriptorById(descriptorId);\n+\n+        assertTrue(registeredDescriptorModel.isPresent());\n+        assertEquals(typeId, registeredDescriptorModel.get().getId());\n+        assertEquals(name, registeredDescriptorModel.get().getName());\n+        assertEquals(descriptorType, registeredDescriptorModel.get().getType());\n+    }\n+\n+    @Test\n+    public void getFieldsForDescriptorTest() throws Exception {\n+        final String name = \"name-test\";\n+        final Long typeId = 1L;\n+        final ConfigContextEnum configContextEnum = ConfigContextEnum.GLOBAL;\n+        final ConfigContextEnum invalidConfigContextEnum = ConfigContextEnum.DISTRIBUTION;\n+        final String definedFieldsKey = \"defined-field-key-test\";\n+        Boolean isSensitive = Boolean.TRUE;\n+\n+        RegisteredDescriptorEntity registeredDescriptorEntity = new RegisteredDescriptorEntity(name, typeId);\n+        registeredDescriptorEntity.setId(1L);\n+        DescriptorKey descriptorKey = createDescriptorKey(\"descriptorKey-test\");\n+        ConfigContextEntity configContextEntity = new ConfigContextEntity(configContextEnum.name());\n+        configContextEntity.setId(3L);\n+        DefinedFieldEntity definedFieldEntity = new DefinedFieldEntity(definedFieldsKey, isSensitive);\n+\n+        RegisteredDescriptorRepository registeredDescriptorRepository = Mockito.mock(RegisteredDescriptorRepository.class);\n+        DefinedFieldRepository definedFieldRepository = Mockito.mock(DefinedFieldRepository.class);\n+        ConfigContextRepository configContextRepository = Mockito.mock(ConfigContextRepository.class);\n+        DescriptorTypeRepository descriptorTypeRepository = Mockito.mock(DescriptorTypeRepository.class);\n+\n+        Mockito.when(registeredDescriptorRepository.findFirstByName(descriptorKey.getUniversalKey())).thenReturn(Optional.of(registeredDescriptorEntity));\n+        Mockito.when(configContextRepository.findFirstByContext(configContextEnum.name())).thenReturn(Optional.of(configContextEntity));\n+        //Used to test the optional expression\n+        Mockito.when(configContextRepository.findFirstByContext(invalidConfigContextEnum.name())).thenReturn(Optional.empty());\n+        Mockito.when(configContextRepository.save(Mockito.any())).thenReturn(configContextEntity);\n+        Mockito.when(definedFieldRepository.findByDescriptorIdAndContext(Mockito.any(), Mockito.any())).thenReturn(List.of(definedFieldEntity));\n+\n+        DefaultDescriptorAccessor descriptorAccessor = new DefaultDescriptorAccessor(registeredDescriptorRepository, definedFieldRepository, configContextRepository, descriptorTypeRepository);\n+        List<DefinedFieldModel> definedFieldModelList = descriptorAccessor.getFieldsForDescriptor(descriptorKey, configContextEnum);\n+        List<DefinedFieldModel> emptyConfigContextDefinedFieldModelList = descriptorAccessor.getFieldsForDescriptor(descriptorKey, invalidConfigContextEnum);\n+\n+        assertEquals(1, definedFieldModelList.size());\n+        assertEquals(definedFieldsKey, definedFieldModelList.get(0).getKey());", "originalCommit": "f855c6c40784106fd56df471fac6564d533acc8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMzMjk2Ng==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/958#discussion_r412332966", "bodyText": "I understand this is a Mock object for tests but I think it would be best to follow good conventions and make these fields private and create setters or some methods to add to these Map's.", "author": "jamesrichard91", "createdAt": "2020-04-21T17:04:02Z", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/mock/MockSettingsKeyRepository.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package com.synopsys.integration.alert.database.api.mock;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.springframework.data.domain.Example;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.domain.Sort;\n+\n+import com.synopsys.integration.alert.database.settings.SettingsKeyEntity;\n+import com.synopsys.integration.alert.database.settings.SettingsKeyRepository;\n+\n+public class MockSettingsKeyRepository implements SettingsKeyRepository {\n+\n+    Map<String, SettingsKeyEntity> settingsKeyEntities = new HashMap<>();", "originalCommit": "f855c6c40784106fd56df471fac6564d533acc8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMzNDQyMQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/958#discussion_r412334421", "bodyText": "Same as my comment above. We should make this field private and expose a setter for this method. We should also avoid hardcoding the fields. This reduces the usability of the mock object in the tests.", "author": "jamesrichard91", "createdAt": "2020-04-21T17:06:09Z", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/mock/MockSystemStatusRepository.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package com.synopsys.integration.alert.database.api.mock;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.springframework.data.domain.Example;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.domain.Sort;\n+\n+import com.synopsys.integration.alert.database.system.SystemStatus;\n+import com.synopsys.integration.alert.database.system.SystemStatusRepository;\n+\n+public class MockSystemStatusRepository implements SystemStatusRepository {\n+\n+    //Only methods that are used by a test are currently implemented, all others are left default.\n+    SystemStatus systemStatus = new SystemStatus(Boolean.FALSE, new Date());", "originalCommit": "f855c6c40784106fd56df471fac6564d533acc8e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "429fc8f8904964d34bee672eacf0e569eca6db5d", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/429fc8f8904964d34bee672eacf0e569eca6db5d", "message": "refactor: removing serialVersionUID from AuthenticationTypeEntity", "committedDate": "2020-04-21T17:23:47Z", "type": "commit"}, {"oid": "f0c83910ef1e1ea9639e6aec87d03137fd0885c7", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f0c83910ef1e1ea9639e6aec87d03137fd0885c7", "message": "test: Improving tests based on PR feedback", "committedDate": "2020-04-21T19:25:42Z", "type": "commit"}]}