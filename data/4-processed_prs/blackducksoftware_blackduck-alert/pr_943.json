{"pr_number": 943, "pr_title": "Sonarcloud code smells", "pr_createdAt": "2020-04-09T14:26:02Z", "pr_url": "https://github.com/blackducksoftware/blackduck-alert/pull/943", "timeline": [{"oid": "05eace172962f5460ccc9ae9218eebb45d4b3429", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/05eace172962f5460ccc9ae9218eebb45d4b3429", "message": "Resolving sonarcloud issues", "committedDate": "2020-04-08T22:14:03Z", "type": "commit"}, {"oid": "1ed5d484e2bc41512eb27921787cd0080628ec19", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/1ed5d484e2bc41512eb27921787cd0080628ec19", "message": "Refactor: resolving sonarcloud issues", "committedDate": "2020-04-08T22:37:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0NDcwNA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/943#discussion_r406244704", "bodyText": "SonarCloud pushes to use boolean when possible to avoid issues with null objects", "author": "jamesrichard91", "createdAt": "2020-04-09T14:27:27Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/AlertProperties.java", "diffHunk": "@@ -136,8 +137,8 @@ public Boolean getH2ConsoleEnabled() {\n         return h2ConsoleEnabled;\n     }\n \n-    public Boolean getSslEnabled() {\n-        return sslEnabled;\n+    public boolean getSslEnabled() {\n+        return BooleanUtils.isTrue(sslEnabled);", "originalCommit": "1ed5d484e2bc41512eb27921787cd0080628ec19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0NTY0MA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/943#discussion_r406245640", "bodyText": "SonarCloud does not want a method to throw an exception if the body of code does not throw that exception. In our case we do this so that overriding methods can throw the exception. The Javadoc allows SonarCloud to ignore this.", "author": "jamesrichard91", "createdAt": "2020-04-09T14:28:49Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/ApiAction.java", "diffHunk": "@@ -27,29 +27,50 @@\n \n public abstract class ApiAction {\n \n+    /**\n+     * @throws AlertException Overriding classes may throw this exception\n+     */\n     public FieldModel beforeSaveAction(FieldModel fieldModel) throws AlertException {", "originalCommit": "1ed5d484e2bc41512eb27921787cd0080628ec19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0NjA2OA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/943#discussion_r406246068", "bodyText": "What is the specific error SonarCloud is complaining about here? This may be a suggestion we want to ignore.", "author": "gkillough", "createdAt": "2020-04-09T14:29:23Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/channel/DistributionChannel.java", "diffHunk": "@@ -64,7 +64,7 @@ public void sendAuditedMessage(DistributionEvent event) throws IntegrationExcept\n             auditUtility.setAuditEntrySuccess(event.getAuditIds());\n         } catch (IntegrationRestException irex) {\n             auditUtility.setAuditEntryFailure(event.getAuditIds(), irex.getMessage(), irex);\n-            logger.error(\"{} : {}\", irex.getHttpStatusCode(), irex.getHttpStatusMessage());", "originalCommit": "1ed5d484e2bc41512eb27921787cd0080628ec19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1NjY2Mw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/943#discussion_r406256663", "bodyText": "I undid this particular change, but the issue is SonarCloud wants you to either log and handle the exception OR re-throw the exception but it does not want you to do both. In this case we want to log the extra fields from the IntegrationRestException so we will ignore this smelly smell.", "author": "jamesrichard91", "createdAt": "2020-04-09T14:43:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0NjA2OA=="}], "type": "inlineReview"}, {"oid": "a020c641cbb67ddfe3097f71268c5899aca18fcd", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/a020c641cbb67ddfe3097f71268c5899aca18fcd", "message": "Undoing duplicate logging", "committedDate": "2020-04-09T14:30:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0ODA5Mg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/943#discussion_r406248092", "bodyText": "Is there a way we can keep the explicit declaration that this set is an ordered set (not necessarily sorted, but ordered)?", "author": "gkillough", "createdAt": "2020-04-09T14:32:06Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/message/model/ComponentItem.java", "diffHunk": "@@ -140,7 +140,7 @@ public boolean collapseOnCategory() {\n         return getCollapseOnCategory();\n     }\n \n-    public LinkedHashSet<LinkableItem> getComponentAttributes() {\n+    public Set<LinkableItem> getComponentAttributes() {", "originalCommit": "1ed5d484e2bc41512eb27921787cd0080628ec19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1NzYwOA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/943#discussion_r406257608", "bodyText": "Where we create the Set we are creating a LinkedHashSet. SonarCloud reasonably points out that User's should not worry about the exact implementation of the Set so just return the generic Set type.", "author": "jamesrichard91", "createdAt": "2020-04-09T14:45:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0ODA5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2MjQ3NQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/943#discussion_r406262475", "bodyText": "My worry is that it is imperative to the consumer of this object that order be maintained. If someone consumes this object by streaming over it and collecting to a generic set, then the order is lost. The API must somehow explicitly declare that this is ordered.", "author": "gkillough", "createdAt": "2020-04-09T14:51:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0ODA5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2ODAwNQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/943#discussion_r406268005", "bodyText": "Alright, thats not a bad criticism, I can change this back and ignore the rule violation.", "author": "jamesrichard91", "createdAt": "2020-04-09T14:58:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0ODA5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0ODM2Nw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/943#discussion_r406248367", "bodyText": "SonarCloud does not want a method to have unused parameters. In our case we do this so that overriding methods can use the parameter. The Javadoc allows SonarCloud to ignore this.", "author": "jamesrichard91", "createdAt": "2020-04-09T14:32:29Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/endpoint/CustomEndpoint.java", "diffHunk": "@@ -35,6 +35,9 @@ public CustomEndpoint(String fieldKey, CustomEndpointManager customEndpointManag\n         customEndpointManager.registerFunction(fieldKey, this::createResponse);\n     }\n \n+    /**\n+     * @param fieldModel This FieldModel may be use for further computation in overriding classes\n+     */\n     protected Optional<ResponseEntity<String>> preprocessRequest(FieldModel fieldModel) {", "originalCommit": "a020c641cbb67ddfe3097f71268c5899aca18fcd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0ODc4Mw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/943#discussion_r406248783", "bodyText": "This gets logged later, we don't need to log this multiple times.", "author": "jamesrichard91", "createdAt": "2020-04-09T14:33:01Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/email/EmailMessagingService.java", "diffHunk": "@@ -110,7 +110,6 @@ public void sendEmailMessage(EmailTarget emailTarget) throws AlertException {\n             sendMessages(emailProperties, session, messages);\n         } catch (MessagingException | IOException | IntegrationException ex) {\n             String errorMessage = \"Could not send the email. \" + ex.getMessage();\n-            logger.error(errorMessage, ex);", "originalCommit": "a020c641cbb67ddfe3097f71268c5899aca18fcd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0OTQzOQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/943#discussion_r406249439", "bodyText": "These errors get logged again later, the exception message is sufficient.", "author": "jamesrichard91", "createdAt": "2020-04-09T14:33:54Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/security/CertificateUtility.java", "diffHunk": "@@ -72,7 +72,6 @@ public void importCertificate(CustomCertificateModel customCertificate) throws A\n                 trustStore.store(stream, getTrustStorePassword());\n             }\n         } catch (IOException | CertificateException | NoSuchAlgorithmException | KeyStoreException e) {\n-            logger.debug(\"Error importing certificate.\", e);", "originalCommit": "a020c641cbb67ddfe3097f71268c5899aca18fcd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1MDA5Mg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/943#discussion_r406250092", "bodyText": "SonarCloud does not like an empty catch block unless there is a comment as to why", "author": "jamesrichard91", "createdAt": "2020-04-09T14:34:52Z", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessor.java", "diffHunk": "@@ -85,6 +85,7 @@ public DefaultProviderDataAccessor(ProviderProjectRepository providerProjectRepo\n                            .collect(Collectors.toList());\n             }\n         } catch (AlertDatabaseConstraintException ignored) {\n+            // ignoring this exception", "originalCommit": "a020c641cbb67ddfe3097f71268c5899aca18fcd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1MzI1NA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/943#discussion_r406253254", "bodyText": "I think we as a team agreed to the convention of naming the exception ignored. We should remove this SonarCloud rule.", "author": "gkillough", "createdAt": "2020-04-09T14:39:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1MDA5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI3MjcxMA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/943#discussion_r406272710", "bodyText": "Is there a way for us to handle this type of Exception differently? It's all over the code base and almost always has the same content. Would handling these exceptions at the source be a better option?", "author": "bamandel", "createdAt": "2020-04-09T15:05:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1MDA5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1MTMyMg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/943#discussion_r406251322", "bodyText": "SonarCloud does not like code in the switch cases, to make the cases easier to understand moved the code to a method", "author": "jamesrichard91", "createdAt": "2020-04-09T14:36:33Z", "path": "src/main/java/com/synopsys/integration/alert/channel/jira/common/JiraTestIssueRequestCreator.java", "diffHunk": "@@ -77,14 +77,12 @@ public IssueTrackerRequest createRequest(IssueOperation operation, String messag\n \n             switch (operation) {\n                 case RESOLVE: {\n-                    IssueContentModel contentModel = jiraMessageParser.createIssueContentModel(providerName, IssueResolutionRequest.OPERATION, topicItem, subTopicItem, componentItems, arbitraryItem);\n-                    return IssueResolutionRequest.of(issueSearchProperties, contentModel);\n+                    return createResolveIssueRequest(providerName, topicItem, subTopicItem, componentItems, arbitraryItem, issueSearchProperties);", "originalCommit": "a020c641cbb67ddfe3097f71268c5899aca18fcd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "21498639e8d390bdeb586aa58fbe8d4589eaa133", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/21498639e8d390bdeb586aa58fbe8d4589eaa133", "message": "Adding missing log format", "committedDate": "2020-04-09T14:37:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1MjYzMA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/943#discussion_r406252630", "bodyText": "Would returning a boolean instead of a Boolean resolve this? I'd rather not use BooleanUtils everywhere.", "author": "gkillough", "createdAt": "2020-04-09T14:38:28Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/workflow/task/StartupScheduledTask.java", "diffHunk": "@@ -47,7 +48,7 @@ public void checkTaskEnabled() {\n     public void startTask() {\n         checkTaskEnabled();\n         String taskName = getTaskName();\n-        if (!getEnabled()) {\n+        if (BooleanUtils.isFalse(getEnabled())) {", "originalCommit": "a020c641cbb67ddfe3097f71268c5899aca18fcd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1ODcxOA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/943#discussion_r406258718", "bodyText": "Good catch", "author": "jamesrichard91", "createdAt": "2020-04-09T14:46:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1MjYzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2NzcwMw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/943#discussion_r406267703", "bodyText": "I believe SonarCloud won't complain if you do the following:\nboolean enabled = getEnabled(); if(!enabled) {\nAlthough you still have the same underlying problem with Null.  We should favor the primitive type, but the Boolean Object might be needed for the databased entity objects.  I'd have to refresh my memory on that.", "author": "psantos1113", "createdAt": "2020-04-09T14:58:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1MjYzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1NTQyMA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/943#discussion_r406255420", "bodyText": "I think this is still wrong. Missing {} after \"Error: \"", "author": "gkillough", "createdAt": "2020-04-09T14:42:14Z", "path": "src/main/java/com/synopsys/integration/alert/web/certificates/CertificateActions.java", "diffHunk": "@@ -120,7 +121,7 @@ private void deleteByAlias(CustomCertificateModel certificateModel) {\n             certificateAccessor.deleteCertificate(certificateModel.getAlias());\n             certificateUtility.removeCertificate(certificateModel.getAlias());\n         } catch (AlertException deleteEx) {\n-            logger.error(\"Error deleting certificate with alias {}\", certificateModel.getAlias());\n+            logger.error(\"Error deleting certificate with alias {}. Error: \", certificateModel.getAlias(), deleteEx.getMessage());", "originalCommit": "a020c641cbb67ddfe3097f71268c5899aca18fcd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1Njc4Ng==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/943#discussion_r406256786", "bodyText": "Does this have to do with using Boolean rather than boolean? If so, we should fix that instead.", "author": "gkillough", "createdAt": "2020-04-09T14:44:00Z", "path": "src/main/java/com/synopsys/integration/alert/channel/jira/server/web/JiraServerCustomEndpoint.java", "diffHunk": "@@ -80,7 +80,7 @@ public JiraServerCustomEndpoint(JiraServerChannelKey jiraChannelKey, CustomEndpo\n             String username = jiraProperties.getUsername();\n             String password = jiraProperties.getPassword();\n             Response response = jiraAppService.installMarketplaceServerApp(JiraConstants.JIRA_APP_KEY, username, password);\n-            if (response.isStatusCodeError()) {\n+            if (BooleanUtils.isTrue(response.isStatusCodeError())) {", "originalCommit": "a020c641cbb67ddfe3097f71268c5899aca18fcd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2MDEzNg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/943#discussion_r406260136", "bodyText": "We would need to fix Response in integration-rest to resolve this. Which we should but until that gets fixed, this resolves any null issues that would come up. The current implementation of response.isStatusCodeError() does allow returning a null.", "author": "jamesrichard91", "createdAt": "2020-04-09T14:48:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1Njc4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1ODQ1NQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/943#discussion_r406258455", "bodyText": "The reason this exists is to be overridable in different channel implementations. SonarCloud doesn't know that.", "author": "gkillough", "createdAt": "2020-04-09T14:46:18Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/channel/message/ChannelMessageParser.java", "diffHunk": "@@ -134,10 +133,6 @@ public String createFooter(MessageContentGroup messageContentGroup) {\n \n     protected abstract String getLineSeparator();\n \n-    protected String getListItemPrefix() {", "originalCommit": "a020c641cbb67ddfe3097f71268c5899aca18fcd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2MDgzMg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/943#discussion_r406260832", "bodyText": "I think we may want to add this method back if we ever need to override it. Currently there is nowhere in Alert that overrides the method.", "author": "jamesrichard91", "createdAt": "2020-04-09T14:49:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1ODQ1NQ=="}], "type": "inlineReview"}, {"oid": "a95f6c204e6a42f6b9be3c54d266799e72dca1a7", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/a95f6c204e6a42f6b9be3c54d266799e72dca1a7", "message": "Adjusting Boolean handling", "committedDate": "2020-04-09T14:49:39Z", "type": "commit"}, {"oid": "db293dd2028c3756cb0450041fa41b261c7fb291", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/db293dd2028c3756cb0450041fa41b261c7fb291", "message": "Merge branch 'master' into jr_sonarcloud_code_smells", "committedDate": "2020-04-09T14:50:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2OTMxNg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/943#discussion_r406269316", "bodyText": "collect should be on its own line like map.", "author": "psantos1113", "createdAt": "2020-04-09T15:00:43Z", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/system/DefaultSystemMessageUtility.java", "diffHunk": "@@ -102,8 +103,8 @@ public void removeSystemMessagesByType(SystemMessageType messageType) {\n     @Transactional\n     public void deleteSystemMessages(List<SystemMessageModel> messagesToDelete) {\n         List<SystemMessage> convertedMessages = messagesToDelete.stream()\n-                                                          .map(this::convertToSystemMessage)\n-                                                          .filter(message -> message != null).collect(Collectors.toList());\n+                                                    .map(this::convertToSystemMessage)\n+                                                    .filter(Objects::nonNull).collect(Collectors.toList());", "originalCommit": "21498639e8d390bdeb586aa58fbe8d4589eaa133", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI3NTg5Mw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/943#discussion_r406275893", "bodyText": "I think we could take this opportunity to use a bifunction here. The only difference is the Class calling of.", "author": "bamandel", "createdAt": "2020-04-09T15:10:28Z", "path": "src/main/java/com/synopsys/integration/alert/channel/jira/common/JiraTestIssueRequestCreator.java", "diffHunk": "@@ -95,6 +93,18 @@ public IssueTrackerRequest createRequest(IssueOperation operation, String messag\n         return null;\n     }\n \n+    private IssueResolutionRequest createResolveIssueRequest(String providerName, LinkableItem topicItem, LinkableItem subTopicItem, Set<ComponentItem> componentItems, ComponentItem arbitraryItem,\n+        IssueSearchProperties issueSearchProperties) {\n+        IssueContentModel contentModel = jiraMessageParser.createIssueContentModel(providerName, IssueResolutionRequest.OPERATION, topicItem, subTopicItem, componentItems, arbitraryItem);\n+        return IssueResolutionRequest.of(issueSearchProperties, contentModel);\n+    }\n+\n+    private IssueCreationRequest createCreateOrUpdateIssueRequest(String providerName, LinkableItem topicItem, LinkableItem subTopicItem, Set<ComponentItem> componentItems, ComponentItem arbitraryItem,\n+        IssueSearchProperties issueSearchProperties) {\n+        IssueContentModel contentModel = jiraMessageParser.createIssueContentModel(providerName, IssueCreationRequest.OPERATION, topicItem, subTopicItem, componentItems, arbitraryItem);\n+        return IssueCreationRequest.of(issueSearchProperties, contentModel);\n+    }", "originalCommit": "db293dd2028c3756cb0450041fa41b261c7fb291", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9f69758f950c0de94ded508753df5cd9f5e0b98e", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/9f69758f950c0de94ded508753df5cd9f5e0b98e", "message": "Making changes based on suggestions.", "committedDate": "2020-04-09T15:33:48Z", "type": "commit"}, {"oid": "0183911171daa1eb81872c072692a79bd1ee413a", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/0183911171daa1eb81872c072692a79bd1ee413a", "message": "Updating method return types", "committedDate": "2020-04-09T15:47:22Z", "type": "commit"}]}