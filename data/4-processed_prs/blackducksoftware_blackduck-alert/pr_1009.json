{"pr_number": 1009, "pr_title": "Create and separate a mutable and immutable version of the ConfigurationModel class", "pr_createdAt": "2020-06-08T13:58:30Z", "pr_url": "https://github.com/blackducksoftware/blackduck-alert/pull/1009", "timeline": [{"oid": "004189c82548d8baa4a6c08679654f4b985e6362", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/004189c82548d8baa4a6c08679654f4b985e6362", "message": "test: Created mutable ConfigurationModel", "committedDate": "2020-06-04T20:03:20Z", "type": "commit"}, {"oid": "b47810c7a8dce5ae37d1f8df921ee3e3d081754e", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/b47810c7a8dce5ae37d1f8df921ee3e3d081754e", "message": "test: Increasing test coverage for ConfigurationModel", "committedDate": "2020-06-08T13:31:44Z", "type": "commit"}, {"oid": "67e5deade1afd4738fefe402ece4975de0a3a698", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/67e5deade1afd4738fefe402ece4975de0a3a698", "message": "Merge remote-tracking branch 'origin/master' into mc_ConfigurationModel_builder", "committedDate": "2020-06-08T13:32:56Z", "type": "commit"}, {"oid": "aa1e9b43d31f915c4b4ea133e52c9af8f9ac35ca", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/aa1e9b43d31f915c4b4ea133e52c9af8f9ac35ca", "message": "style: License header update", "committedDate": "2020-06-08T13:45:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1MDI4Mw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1009#discussion_r436750283", "bodyText": "We also need the configuredFields from this set on the new instance. You could do this through the constructor or you could do something like this:\npublic ConfigurationModelMutable createMutableCopy() {\n    ConfigurationModelMutable mutableCopy = new ConfigurationModelMutable(descriptorId, configurationId, createdAt, lastUpdated, context);\n    mutableCopy.getConfiguredFields().putAll(configuredFields);\n    return mutableCopy;\n}\nor (not 100% sure this will work)\npublic ConfigurationModelMutable createMutableCopy() {\n    ConfigurationModelMutable mutableCopy = new ConfigurationModelMutable(descriptorId, configurationId, createdAt, lastUpdated, context);\n    mutableCopy.configuredFields = configuredFields;\n    return mutableCopy;\n}\nEdit: I forgot you cannot actually do it through the constructor because the super-class owns configuredFields.", "author": "gkillough", "createdAt": "2020-06-08T14:25:50Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/persistence/model/ConfigurationModel.java", "diffHunk": "@@ -88,20 +91,7 @@ public ConfigContextEnum getDescriptorContext() {\n         return new HashMap<>(configuredFields);\n     }\n \n-    public void put(ConfigurationFieldModel configFieldModel) {\n-        Objects.requireNonNull(configFieldModel);\n-        String fieldKey = configFieldModel.getFieldKey();\n-        Objects.requireNonNull(fieldKey);\n-        if (configuredFields.containsKey(fieldKey)) {\n-            ConfigurationFieldModel oldConfigField = configuredFields.get(fieldKey);\n-            List<String> values = combine(oldConfigField, configFieldModel);\n-            oldConfigField.setFieldValues(values);\n-        } else {\n-            configuredFields.put(fieldKey, configFieldModel);\n-        }\n-    }\n-\n-    private List<String> combine(ConfigurationFieldModel first, ConfigurationFieldModel second) {\n-        return Stream.concat(first.getFieldValues().stream(), second.getFieldValues().stream()).collect(Collectors.toList());\n+    public ConfigurationModelMutable createMutableCopy() {\n+        return new ConfigurationModelMutable(descriptorId, configurationId, createdAt, lastUpdated, context);", "originalCommit": "aa1e9b43d31f915c4b4ea133e52c9af8f9ac35ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc4MDAyMg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1009#discussion_r436780022", "bodyText": "I like the putAll approach better.  The equals operator would assign the mutable to the same object reference as the immutable instance.", "author": "psantos1113", "createdAt": "2020-06-08T15:05:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1MDI4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1Mjc4NQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1009#discussion_r436752785", "bodyText": "Let's add a configuredField or two to configurationModel to make sure that the fields are copied.", "author": "gkillough", "createdAt": "2020-06-08T14:29:08Z", "path": "alert-common/src/test/java/com/synopsys/integration/alert/common/persistence/model/ConfigurationModelTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package com.synopsys.integration.alert.common.persistence.model;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.persistence.model.mutable.ConfigurationModelMutable;\n+\n+public class ConfigurationModelTest {\n+    private final Long descriptorId = 1L;\n+    private final Long configurationId = 2L;\n+    private final String createdAt = \"createdAt-test\";\n+    private final String lastUpdated = \"lastUpdated-test\";\n+    private final ConfigContextEnum configContextEnum = ConfigContextEnum.GLOBAL;\n+    private final String fieldKey = \"fieldKey\";\n+\n+    @Test\n+    public void getDescriptorIdTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertEquals(descriptorId, configurationModel.getDescriptorId());\n+    }\n+\n+    @Test\n+    public void getConfigurationIdTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertEquals(configurationId, configurationModel.getConfigurationId());\n+    }\n+\n+    @Test\n+    public void getCreatedAtTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertEquals(createdAt, configurationModel.getCreatedAt());\n+    }\n+\n+    @Test\n+    public void getLastUpdatedTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertEquals(lastUpdated, configurationModel.getLastUpdated());\n+    }\n+\n+    @Test\n+    public void getDescriptorContextTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertEquals(configContextEnum, configurationModel.getDescriptorContext());\n+    }\n+\n+    @Test\n+    public void getFieldTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertFalse(configurationModel.getField(fieldKey).isPresent());\n+    }\n+\n+    @Test\n+    public void getCopyOfFieldListTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertTrue(configurationModel.getCopyOfFieldList().isEmpty());\n+    }\n+\n+    @Test\n+    public void getCopyOfKeyToFieldMapTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertTrue(configurationModel.getCopyOfKeyToFieldMap().isEmpty());\n+    }\n+\n+    @Test\n+    public void createMutableCopyTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();", "originalCommit": "aa1e9b43d31f915c4b4ea133e52c9af8f9ac35ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1NDU0Mg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1009#discussion_r436754542", "bodyText": "If all of its constructors create the Map maybe we should consider passing it as a parameter in one of them.", "author": "gkillough", "createdAt": "2020-06-08T14:31:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1Mjc4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1NTYzOQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1009#discussion_r436755639", "bodyText": "configurationModel does not have access to the put method so it cannot add a configuredField. I would be able to add a field on the configurationModelMutable but that test would be covered in ConfigurationModelMutableTest.", "author": "ChomickiM", "createdAt": "2020-06-08T14:33:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1Mjc4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1ODQxNQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1009#discussion_r436758415", "bodyText": "Ok, that makes me think we will need to update the constructor(s) in ConfigurationModel then.", "author": "gkillough", "createdAt": "2020-06-08T14:37:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1Mjc4NQ=="}], "type": "inlineReview"}, {"oid": "66b7bec82c8a0d17c2d545d1ae8d21b21c7f712d", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/66b7bec82c8a0d17c2d545d1ae8d21b21c7f712d", "message": "refactor: Creating new ConfigurationModel constructor with configuredFields", "committedDate": "2020-06-08T18:00:46Z", "type": "commit"}]}