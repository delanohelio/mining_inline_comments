{"pr_number": 6641, "pr_title": "Allow fileupload api", "pr_createdAt": "2020-07-06T20:41:24Z", "pr_url": "https://github.com/ankidroid/Anki-Android/pull/6641", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5ODk4Mw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r461498983", "bodyText": "Is this comment copy-pasted from somewhere else ? It seems more like a tutorial description and not a comment for the method. If so, we would at least need to credit the author properly", "author": "Arthur-Milchior", "createdAt": "2020-07-28T11:07:01Z", "path": "api/src/main/java/com/ichi2/anki/api/AddContentApi.java", "diffHunk": "@@ -151,6 +158,27 @@ public int addNotes(long modelId, long deckId, List<String[]> fieldsList, List<S\n         return getCompat().insertNotes(deckId, newNoteValuesList.toArray(new ContentValues[newNoteValuesList.size()]));\n     }\n \n+    /*\n+    You would likely implement a FileProvider in your API to share the file from your app to \"the system\" as a URI,\n+    and pass that to a new AnkiDroid-API call you implement, where it would use ContentResolver to get the display\n+    name for the file and then open an input stream for it to copy the file in to the collection, similar to the way\n+    BasicImageFieldController does it (or will do it when a PR-in-progress lands) in the internalizeUri method\n+     */\n+", "originalCommit": "2a705ab5c2901707b6453ba9b7f6543f788371cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUxMzU4OA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r461513588", "bodyText": "This was the guidance Matt gave me initially to start working from, I think its probably best to just remove it, right?", "author": "KieranMigaku", "createdAt": "2020-07-28T11:36:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5ODk4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUxOTQ3Nw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r461519477", "bodyText": "Please note I've no idea who Matt is.\nI clearly appreciate that you comment your method/class. The code alone is not sufficient, and so if you can write something relevant for the reader of the code that would be great. The notion of PR-in-progress does not seems to be relevant for future reader;", "author": "Arthur-Milchior", "createdAt": "2020-07-28T11:48:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5ODk4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5OTQyNg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r461499426", "bodyText": "It seems you get some value and do nothing with them. Just throw null.\u00a0I don't understand this commit", "author": "Arthur-Milchior", "createdAt": "2020-07-28T11:07:59Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/provider/CardContentProvider.java", "diffHunk": "@@ -1032,6 +1043,13 @@ public Uri insert(Uri uri, ContentValues values) {\n             case DECKS_ID:\n                 // Deck ID is generated automatically by libanki\n                 throw new IllegalArgumentException(\"Not possible to insert deck with specific ID\");\n+            case MEDIA:\n+                // insert a media file\n+                // contentvalue should have data and preferredFileName values\n+                Uri filUri = Uri.parse(values.getAsString(FlashCardsContract.AnkiMedia.FILE_URI));\n+                String preferredName = values.getAsString(FlashCardsContract.AnkiMedia.PREFERRED_NAME);", "originalCommit": "e8197314503c92e39a116d495d07e305ae83e9ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwMDY5Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r461500696", "bodyText": "If you  understand interactive rebase in git, it would be nice to put this import in the commit where it was useful. Makes commit history simpler to read", "author": "Arthur-Milchior", "createdAt": "2020-07-28T11:10:16Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/provider/CardContentProvider.java", "diffHunk": "@@ -52,6 +52,7 @@\n import com.ichi2.compat.CompatHelper;\n import com.ichi2.libanki.Consts;\n import com.ichi2.libanki.Media;\n+import com.ichi2.libanki.Decks;\n import com.ichi2.libanki.sched.AbstractSched;", "originalCommit": "912e3993c4bbcbc6131a4cec4c47332ee7cab0af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU0ODEzMw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r461548133", "bodyText": "When trying to rebase I am running into some errors with other commits, I think because my branch was already merged with master. Should I reset to before the merge and then rebase and fix my commit history? Or from here shall I just commit the fixes and push? Thanks for your help", "author": "KieranMigaku", "createdAt": "2020-07-28T12:41:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwMDY5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwMTQ1MQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r461501451", "bodyText": "\"audio file\" ?\u00a0How do you know it's an audio file problem ?\u00a0It seems this code is not audio related.", "author": "Arthur-Milchior", "createdAt": "2020-07-28T11:11:40Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/provider/CardContentProvider.java", "diffHunk": "@@ -1046,9 +1051,58 @@ public Uri insert(Uri uri, ContentValues values) {\n             case MEDIA:\n                 // insert a media file\n                 // contentvalue should have data and preferredFileName values\n-                Uri filUri = Uri.parse(values.getAsString(FlashCardsContract.AnkiMedia.FILE_URI));\n+                Uri fileUri = Uri.parse(values.getAsString(FlashCardsContract.AnkiMedia.FILE_URI));\n                 String preferredName = values.getAsString(FlashCardsContract.AnkiMedia.PREFERRED_NAME);\n-                return null;\n+                InputStream inputStream = null;\n+\n+                try {\n+                    ContentResolver cR = mContext.getContentResolver();\n+                    Media media = col.getMedia();\n+                    // idea, open input stream and save to cache directory, then\n+                    // pass this (hopefully temporary) file to the media.addFile function.\n+                    inputStream = cR.openInputStream(fileUri);\n+                    String fileMimeType = MimeTypeMap.getSingleton().getExtensionFromMimeType(cR.getType(fileUri)); // return eg \"jpeg\"\n+                    // should we be enforcing strict mimetypes? which types?\n+                    File tempFile;\n+                    try {\n+                        tempFile = File.createTempFile(\n+                                preferredName+\"_\", // the beginning of the filename.\n+                                \".\" + fileMimeType, // this is the extension, if null, '.tmp' is used, need to get the extension from MIME type?\n+                                new File(media.dir())\n+                        );\n+                        tempFile.deleteOnExit();\n+                    } catch (Exception e) {\n+                        Timber.e(e, \"Could not create temporary audio file. \");\n+                        return null;\n+                    }\n+\n+                    // copy contents into temp file (possibly check file size and warn if large?)\n+                    try {\n+                        CompatHelper.getCompat().copyFile(inputStream, tempFile.getAbsolutePath());\n+                    } catch (FileNotFoundException e) {\n+                        Timber.e(e, \"File not found when opening stream for supplied media file.\");\n+                        return null;\n+                    }\n+                    catch (Exception e) {\n+                        Timber.e(e, \"Unable to copy audio file from ContentProvider\");", "originalCommit": "1e968db654e64746f9a4d74f8901c6799cf71368", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwMTYxOQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r461501619", "bodyText": "Would you please put the catch on the same line as } ?", "author": "Arthur-Milchior", "createdAt": "2020-07-28T11:11:58Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/provider/CardContentProvider.java", "diffHunk": "@@ -1046,9 +1051,58 @@ public Uri insert(Uri uri, ContentValues values) {\n             case MEDIA:\n                 // insert a media file\n                 // contentvalue should have data and preferredFileName values\n-                Uri filUri = Uri.parse(values.getAsString(FlashCardsContract.AnkiMedia.FILE_URI));\n+                Uri fileUri = Uri.parse(values.getAsString(FlashCardsContract.AnkiMedia.FILE_URI));\n                 String preferredName = values.getAsString(FlashCardsContract.AnkiMedia.PREFERRED_NAME);\n-                return null;\n+                InputStream inputStream = null;\n+\n+                try {\n+                    ContentResolver cR = mContext.getContentResolver();\n+                    Media media = col.getMedia();\n+                    // idea, open input stream and save to cache directory, then\n+                    // pass this (hopefully temporary) file to the media.addFile function.\n+                    inputStream = cR.openInputStream(fileUri);\n+                    String fileMimeType = MimeTypeMap.getSingleton().getExtensionFromMimeType(cR.getType(fileUri)); // return eg \"jpeg\"\n+                    // should we be enforcing strict mimetypes? which types?\n+                    File tempFile;\n+                    try {\n+                        tempFile = File.createTempFile(\n+                                preferredName+\"_\", // the beginning of the filename.\n+                                \".\" + fileMimeType, // this is the extension, if null, '.tmp' is used, need to get the extension from MIME type?\n+                                new File(media.dir())\n+                        );\n+                        tempFile.deleteOnExit();\n+                    } catch (Exception e) {\n+                        Timber.e(e, \"Could not create temporary audio file. \");\n+                        return null;\n+                    }\n+\n+                    // copy contents into temp file (possibly check file size and warn if large?)\n+                    try {\n+                        CompatHelper.getCompat().copyFile(inputStream, tempFile.getAbsolutePath());\n+                    } catch (FileNotFoundException e) {\n+                        Timber.e(e, \"File not found when opening stream for supplied media file.\");\n+                        return null;\n+                    }\n+                    catch (Exception e) {", "originalCommit": "1e968db654e64746f9a4d74f8901c6799cf71368", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwMjcyOQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r461502729", "bodyText": "Maybe you could return a boolean instead of 0 or 1", "author": "Arthur-Milchior", "createdAt": "2020-07-28T11:14:04Z", "path": "api/src/main/java/com/ichi2/anki/api/AddContentApi.java", "diffHunk": "@@ -151,6 +158,27 @@ public int addNotes(long modelId, long deckId, List<String[]> fieldsList, List<S\n         return getCompat().insertNotes(deckId, newNoteValuesList.toArray(new ContentValues[newNoteValuesList.size()]));\n     }\n \n+    /*\n+    You would likely implement a FileProvider in your API to share the file from your app to \"the system\" as a URI,\n+    and pass that to a new AnkiDroid-API call you implement, where it would use ContentResolver to get the display\n+    name for the file and then open an input stream for it to copy the file in to the collection, similar to the way\n+    BasicImageFieldController does it (or will do it when a PR-in-progress lands) in the internalizeUri method\n+     */\n+\n+    public int addMediaFromUri(Uri fileUri, String preferredName) {\n+        ContentValues contentValues = new ContentValues();\n+        contentValues.put(AnkiMedia.FILE_URI, fileUri.toString());\n+        contentValues.put(AnkiMedia.PREFERRED_NAME, preferredName);\n+\n+        try {\n+            mResolver.insert(AnkiMedia.CONTENT_URI, contentValues);\n+            return 0;\n+        } catch (Exception e){\n+            return 1;\n+        }", "originalCommit": "2a705ab5c2901707b6453ba9b7f6543f788371cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c20248feaf961a65a5c8480c12342018fe8ee5d5", "url": "https://github.com/ankidroid/Anki-Android/commit/c20248feaf961a65a5c8480c12342018fe8ee5d5", "message": "addMediaFromUri returns proper formatted String\n\nThis formatted string can be returned and inserted straight into the\nfield of a card.", "committedDate": "2020-07-30T22:37:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ2Mzc3MQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r472463771", "bodyText": "assert doesn't work in Java, it is typically a no-op but if they ever fix it, then this will crash the app which is a terrible outcome, this should be\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    assert inputStream != null;\n          \n          \n            \n                                    inputStream.close();\n          \n          \n            \n                                    if (inputStream != null) {\n          \n          \n            \n                                        inputStream.close();\n          \n          \n            \n                                    }", "author": "mikehardy", "createdAt": "2020-08-18T20:20:50Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/provider/CardContentProvider.java", "diffHunk": "@@ -1048,7 +1053,60 @@ public Uri insert(Uri uri, ContentValues values) {\n             case DECKS_ID:\n                 // Deck ID is generated automatically by libanki\n                 throw new IllegalArgumentException(\"Not possible to insert deck with specific ID\");\n+            case MEDIA:\n+                // insert a media file\n+                // contentvalue should have data and preferredFileName values\n+                Uri fileUri = Uri.parse(values.getAsString(FlashCardsContract.AnkiMedia.FILE_URI));\n+                String preferredName = values.getAsString(FlashCardsContract.AnkiMedia.PREFERRED_NAME);\n+                InputStream inputStream = null;\n \n+                try {\n+                    ContentResolver cR = mContext.getContentResolver();\n+                    Media media = col.getMedia();\n+                    // idea, open input stream and save to cache directory, then\n+                    // pass this (hopefully temporary) file to the media.addFile function.\n+                    inputStream = cR.openInputStream(fileUri);\n+                    String fileMimeType = MimeTypeMap.getSingleton().getExtensionFromMimeType(cR.getType(fileUri)); // return eg \"jpeg\"\n+                    // should we be enforcing strict mimetypes? which types?\n+                    File tempFile;\n+                    try {\n+                        tempFile = File.createTempFile(\n+                                preferredName+\"_\", // the beginning of the filename.\n+                                \".\" + fileMimeType, // this is the extension, if null, '.tmp' is used, need to get the extension from MIME type?\n+                                new File(media.dir())\n+                        );\n+                        tempFile.deleteOnExit();\n+                    } catch (Exception e) {\n+                        Timber.e(e, \"Could not create temporary media file. \");\n+                        return null;\n+                    }\n+\n+                    // copy contents into temp file (possibly check file size and warn if large?)\n+                    try {\n+                        CompatHelper.getCompat().copyFile(inputStream, tempFile.getAbsolutePath());\n+                    } catch (FileNotFoundException e) {\n+                        Timber.e(e, \"File not found when opening stream for supplied media file.\");\n+                        return null;\n+                    } catch (Exception e) {\n+                        Timber.e(e, \"Unable to copy media file from ContentProvider\");\n+                        return null;\n+                    } finally {\n+                        assert inputStream != null;\n+                        inputStream.close();", "originalCommit": "7207f523cc7d3db7304a6673691545158d2fe76d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ2NjE3MQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r472466171", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                e.printStackTrace();\n          \n          \n            \n                                Timber.w(e, \"insert failed from %s\", fileUri);", "author": "mikehardy", "createdAt": "2020-08-18T20:23:29Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/provider/CardContentProvider.java", "diffHunk": "@@ -1048,7 +1053,60 @@ public Uri insert(Uri uri, ContentValues values) {\n             case DECKS_ID:\n                 // Deck ID is generated automatically by libanki\n                 throw new IllegalArgumentException(\"Not possible to insert deck with specific ID\");\n+            case MEDIA:\n+                // insert a media file\n+                // contentvalue should have data and preferredFileName values\n+                Uri fileUri = Uri.parse(values.getAsString(FlashCardsContract.AnkiMedia.FILE_URI));\n+                String preferredName = values.getAsString(FlashCardsContract.AnkiMedia.PREFERRED_NAME);\n+                InputStream inputStream = null;\n \n+                try {\n+                    ContentResolver cR = mContext.getContentResolver();\n+                    Media media = col.getMedia();\n+                    // idea, open input stream and save to cache directory, then\n+                    // pass this (hopefully temporary) file to the media.addFile function.\n+                    inputStream = cR.openInputStream(fileUri);\n+                    String fileMimeType = MimeTypeMap.getSingleton().getExtensionFromMimeType(cR.getType(fileUri)); // return eg \"jpeg\"\n+                    // should we be enforcing strict mimetypes? which types?\n+                    File tempFile;\n+                    try {\n+                        tempFile = File.createTempFile(\n+                                preferredName+\"_\", // the beginning of the filename.\n+                                \".\" + fileMimeType, // this is the extension, if null, '.tmp' is used, need to get the extension from MIME type?\n+                                new File(media.dir())\n+                        );\n+                        tempFile.deleteOnExit();\n+                    } catch (Exception e) {\n+                        Timber.e(e, \"Could not create temporary media file. \");\n+                        return null;\n+                    }\n+\n+                    // copy contents into temp file (possibly check file size and warn if large?)\n+                    try {\n+                        CompatHelper.getCompat().copyFile(inputStream, tempFile.getAbsolutePath());\n+                    } catch (FileNotFoundException e) {\n+                        Timber.e(e, \"File not found when opening stream for supplied media file.\");\n+                        return null;\n+                    } catch (Exception e) {\n+                        Timber.e(e, \"Unable to copy media file from ContentProvider\");\n+                        return null;\n+                    } finally {\n+                        assert inputStream != null;\n+                        inputStream.close();\n+                    }\n+\n+                    String fname = media.addFile(tempFile);\n+                    Timber.d(\"insert -> MEDIA: fname = %s\", fname);\n+                    File f = new File(fname);\n+                    Timber.d(\"insert -> MEDIA: f = %s\", f);\n+                    Uri uriFromF = Uri.fromFile(f);\n+                    Timber.d(\"insert -> MEDIA: uriFromF = %s\", uriFromF);\n+                    return Uri.fromFile(new File(fname));\n+\n+                } catch (IOException e) {\n+                    e.printStackTrace();", "originalCommit": "7207f523cc7d3db7304a6673691545158d2fe76d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ2NjU0Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r472466546", "bodyText": "This is a lot of code to have as a switch case, extract it to a method with parameters and call it from this case instead", "author": "mikehardy", "createdAt": "2020-08-18T20:23:55Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/provider/CardContentProvider.java", "diffHunk": "@@ -1048,7 +1053,60 @@ public Uri insert(Uri uri, ContentValues values) {\n             case DECKS_ID:\n                 // Deck ID is generated automatically by libanki\n                 throw new IllegalArgumentException(\"Not possible to insert deck with specific ID\");\n+            case MEDIA:\n+                // insert a media file", "originalCommit": "7207f523cc7d3db7304a6673691545158d2fe76d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ2NzYzMA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r472467630", "bodyText": "All the other classes in the contract have explicit usage instructions for integrators and CONTENT_TYPEs, can you add those following the existing pattern(s) above?", "author": "mikehardy", "createdAt": "2020-08-18T20:25:01Z", "path": "api/src/main/java/com/ichi2/anki/FlashCardsContract.java", "diffHunk": "@@ -1185,4 +1185,19 @@ private FlashCardsContract() {\n         public static final String CONTENT_TYPE = \"vnd.android.cursor.dir/vnd.com.ichi2.anki.deck\";\n \n     }\n+\n+    public static class AnkiMedia {", "originalCommit": "cb4577493ffd01d1dbcd5244b10ad5166ef9034d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3MDU2OA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r472470568", "bodyText": "I wonder if any of the logic here could be re-used? https://github.com/ankidroid/Anki-Android/blob/master/AnkiDroid/src/main/java/com/ichi2/anki/multimediacard/fields/BasicImageFieldController.java#L410\nThe error handling wouldn't be \"showSomethingWentWrong()\" obviously, but if the common logic could be extracted so we're not handling URI-internalizing in multiple spots that could be a win - it is very tricky stuff!", "author": "mikehardy", "createdAt": "2020-08-18T20:27:58Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/provider/CardContentProvider.java", "diffHunk": "@@ -1048,7 +1053,60 @@ public Uri insert(Uri uri, ContentValues values) {\n             case DECKS_ID:\n                 // Deck ID is generated automatically by libanki\n                 throw new IllegalArgumentException(\"Not possible to insert deck with specific ID\");\n+            case MEDIA:\n+                // insert a media file\n+                // contentvalue should have data and preferredFileName values\n+                Uri fileUri = Uri.parse(values.getAsString(FlashCardsContract.AnkiMedia.FILE_URI));\n+                String preferredName = values.getAsString(FlashCardsContract.AnkiMedia.PREFERRED_NAME);\n+                InputStream inputStream = null;\n \n+                try {\n+                    ContentResolver cR = mContext.getContentResolver();\n+                    Media media = col.getMedia();\n+                    // idea, open input stream and save to cache directory, then\n+                    // pass this (hopefully temporary) file to the media.addFile function.\n+                    inputStream = cR.openInputStream(fileUri);\n+                    String fileMimeType = MimeTypeMap.getSingleton().getExtensionFromMimeType(cR.getType(fileUri)); // return eg \"jpeg\"", "originalCommit": "7207f523cc7d3db7304a6673691545158d2fe76d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk0NjA2OA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r473946068", "bodyText": "At the moment the internalizeUri is private, and doesn't allow for user-inputted 'preferred names' for the files.\nI think it would work if we allowed a Nullable parameter String preferredName to internalizeUri, which could then be passed as a parameter when creating the internal temp file. Then this function could be called by the BasicImageFieldController and from the CardContentProvider, but I'm not sure where we should extract the internalizeUri function to, where it would be publicly available to other classes.\nThe internalizeUri function also uses another private function createNewCacheFile(@NonNull String extension) which we would also need to possibly extract into the other class where internalizeUri is called from. We could simply write another overloading function createNewCacheFile(@NonNull String extension, @NonNull String preferredName) which takes a String preferredName argument.\npublic internalizeUri(Uri uri, @Nullable String preferredName) {\n    ...\n    String internalFileName\n    if (preferredName != null) {\n        internalFileName = preferredName;\n    } else {\n        internalFileName = uriFileInfo.first; // filepath\n    }\n    ...\n}", "author": "KieranMigaku", "createdAt": "2020-08-20T12:53:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3MDU2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA4NzcxNQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r474087715", "bodyText": "If you wanted to give it a shot, https://github.com/ankidroid/Anki-Android/tree/master/AnkiDroid/src/main/java/com/ichi2/utils seems like as good a place as any to put the \"URI Internalizing utility\" that extracts the cache-creation / file copying etc logic", "author": "mikehardy", "createdAt": "2020-08-20T15:48:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3MDU2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk4MDI4Mg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r474980282", "bodyText": "Would https://github.com/ankidroid/Anki-Android/blob/master/AnkiDroid/src/main/java/com/ichi2/utils/FileUtil.java be a good place to put the functions? At the moment it only has one function getFreeDiskSpace, but I think 'Uri-internalizing' could make sense under FileUtil.java.", "author": "KieranMigaku", "createdAt": "2020-08-21T21:35:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3MDU2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk4Nzc1NQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r474987755", "bodyText": "Yeah, that seems like a fine spot", "author": "mikehardy", "createdAt": "2020-08-21T21:59:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3MDU2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3MjcwMg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r472472702", "bodyText": "Should protect these from being sent in null as they are accessed blindly, and I think the method can be private so you don't have to worry as much about API contracts as it won't be exposed to other objects. Can return null so should be marked as such as well\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public String formatMediaName(String fname, String mimeType) {\n          \n          \n            \n                private @Nullable String formatMediaName(@NonNull String fname, @NonNull String mimeType) {", "author": "mikehardy", "createdAt": "2020-08-18T20:30:13Z", "path": "api/src/main/java/com/ichi2/anki/api/AddContentApi.java", "diffHunk": "@@ -151,6 +158,47 @@ public int addNotes(long modelId, long deckId, List<String[]> fieldsList, List<S\n         return getCompat().insertNotes(deckId, newNoteValuesList.toArray(new ContentValues[newNoteValuesList.size()]));\n     }\n \n+    /**\n+     * Add a media file to AnkiDroid's media collection. You would likely supply this uri through a FileProvider, and\n+     * then set FLAG_GRANT_READ_URI_PERMISSION using something like:\n+     * getContext().grantUriPermission(\"com.ichi2.anki\", uri, Intent.FLAG_GRANT_READ_URI_PERMISSION) and then afterward\n+     * remove the permission with getContext().revokePermission(uri, Intent.FLAG_GRAN_READ_URI_PERMISSION)\n+     * @param fileUri   Uri for the file to be added.\n+     * @param preferredName String that will be added to the beginning of the file name in the media collection\n+     * @param mimeType  String indicating the mimeType of the media. Accepts \"audio\" or \"image\"\n+     * @return the correctly formatted String for the media file to be placed in the desired field of a Card.\n+     */\n+    public String addMediaFromUri(Uri fileUri, String preferredName, String mimeType) {\n+        ContentValues contentValues = new ContentValues();\n+        contentValues.put(AnkiMedia.FILE_URI, fileUri.toString());\n+        preferredName = preferredName.replace(\" \", \"_\");\n+        contentValues.put(AnkiMedia.PREFERRED_NAME, preferredName);\n+\n+        try {\n+            Uri returnUri = mResolver.insert(AnkiMedia.CONTENT_URI, contentValues);\n+            // get the filename from Uri, return [sound:%s] % file.getName()\n+            String fname = new File(returnUri.getPath()).toString();\n+            String formatted_fname = formatMediaName(fname, mimeType);\n+            return formatted_fname;\n+        } catch (Exception e){\n+            return null;\n+        }\n+\n+    }\n+\n+    public String formatMediaName(String fname, String mimeType) {", "originalCommit": "c20248feaf961a65a5c8480c12342018fe8ee5d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3NTE5NQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r472475195", "bodyText": "Should mark it up with expectations on what can be null and what can't both in docs and as annotations, to guard against crashes - those are common sources of crashes for us\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param fileUri   Uri for the file to be added.\n          \n          \n            \n                 * @param preferredName String that will be added to the beginning of the file name in the media collection\n          \n          \n            \n                 * @param mimeType  String indicating the mimeType of the media. Accepts \"audio\" or \"image\"\n          \n          \n            \n                 * @return the correctly formatted String for the media file to be placed in the desired field of a Card.\n          \n          \n            \n                 */\n          \n          \n            \n                public String addMediaFromUri(Uri fileUri, String preferredName, String mimeType) {\n          \n          \n            \n                 * @param fileUri  Uri for the file to be added, required.\n          \n          \n            \n                 * @param preferredName String that will be added to the beginning of the file name in the media collection, required\n          \n          \n            \n                 * @param mimeType  String indicating the mimeType of the media. Accepts \"audio\" or \"image\", required\n          \n          \n            \n                 * @return the correctly formatted String for the media file to be placed in the desired field of a Card or null if unsuccessful.\n          \n          \n            \n                 */\n          \n          \n            \n                public @Nullable String addMediaFromUri(@NonNull Uri fileUri, @NonNull String preferredName, @NonNull String mimeType) {", "author": "mikehardy", "createdAt": "2020-08-18T20:32:53Z", "path": "api/src/main/java/com/ichi2/anki/api/AddContentApi.java", "diffHunk": "@@ -151,6 +158,47 @@ public int addNotes(long modelId, long deckId, List<String[]> fieldsList, List<S\n         return getCompat().insertNotes(deckId, newNoteValuesList.toArray(new ContentValues[newNoteValuesList.size()]));\n     }\n \n+    /**\n+     * Add a media file to AnkiDroid's media collection. You would likely supply this uri through a FileProvider, and\n+     * then set FLAG_GRANT_READ_URI_PERMISSION using something like:\n+     * getContext().grantUriPermission(\"com.ichi2.anki\", uri, Intent.FLAG_GRANT_READ_URI_PERMISSION) and then afterward\n+     * remove the permission with getContext().revokePermission(uri, Intent.FLAG_GRAN_READ_URI_PERMISSION)\n+     * @param fileUri   Uri for the file to be added.\n+     * @param preferredName String that will be added to the beginning of the file name in the media collection\n+     * @param mimeType  String indicating the mimeType of the media. Accepts \"audio\" or \"image\"\n+     * @return the correctly formatted String for the media file to be placed in the desired field of a Card.\n+     */\n+    public String addMediaFromUri(Uri fileUri, String preferredName, String mimeType) {", "originalCommit": "c20248feaf961a65a5c8480c12342018fe8ee5d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2ODc1Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r473168756", "bodyText": "When I apply the annotations it shows a warning and gives me some options:\n\"Add 'annotations' to classpath\", and\n\"Add dependency on androidx.annotation:annotation\"\nBoth of these edit the build.gradle file for api so I'm wondering what I should do here?", "author": "KieranMigaku", "createdAt": "2020-08-19T16:35:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3NTE5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1ODgyMw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r473258823", "bodyText": "Oh interesting! The API module hasn't gotten much love in a while and I guess we just hadn't used annotations there yet. Great question, thank you for asking. Adding those to the build.gradle is the right thing to do", "author": "mikehardy", "createdAt": "2020-08-19T19:09:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3NTE5NQ=="}], "type": "inlineReview"}, {"oid": "560cd233011fdd60d9631cbb4d2d216245d63073", "url": "https://github.com/ankidroid/Anki-Android/commit/560cd233011fdd60d9631cbb4d2d216245d63073", "message": "Extract internalizeUri to FileUtil.java", "committedDate": "2020-08-22T20:28:09Z", "type": "forcePushed"}, {"oid": "ce815547847110b28b395642ca8c896ccb2ecb5a", "url": "https://github.com/ankidroid/Anki-Android/commit/ce815547847110b28b395642ca8c896ccb2ecb5a", "message": "Extract internalizeUri to FileUtil.java", "committedDate": "2020-08-22T21:14:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NDU3OQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r475254579", "bodyText": "This doesn't necessarily point to the cache - questionable naming", "author": "david-allison-1", "createdAt": "2020-08-23T19:15:06Z", "path": "AnkiDroid/src/main/java/com/ichi2/utils/FileUtil.java", "diffHunk": "@@ -18,4 +32,54 @@ public static long getFreeDiskSpace(File file, long defaultValue) {\n             return defaultValue;\n         }\n     }\n+\n+    public static File createNewCacheFile(\n+            @NonNull File storageDir, @NonNull String preferredName, @NonNull String extension\n+    ) throws IOException {\n+        return File.createTempFile(preferredName, \".\" + extension, storageDir);", "originalCommit": "ce815547847110b28b395642ca8c896ccb2ecb5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUzNjY5NA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r478536694", "bodyText": "This was here simply for when extracting the internalizeUri method into the FileUtil class. In hindsight I see no use for this method actually and it would probably be better to simply create the tempFiles as and when they are needed but I could be wrong. What do you think?", "author": "KieranMigaku", "createdAt": "2020-08-27T16:13:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NDU3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3ODI0NQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r479478245", "bodyText": "Seems best to inline and remove the method", "author": "david-allison-1", "createdAt": "2020-08-28T18:48:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NDU3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NDY4Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r475254686", "bodyText": "Why are we using the media directory here? Shouldn't we be using a temp dir to ensure this doesn't interfere with syncing", "author": "david-allison-1", "createdAt": "2020-08-23T19:16:20Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/provider/CardContentProvider.java", "diffHunk": "@@ -1038,12 +1056,59 @@ public Uri insert(Uri uri, ContentValues values) {\n             case DECKS_ID:\n                 // Deck ID is generated automatically by libanki\n                 throw new IllegalArgumentException(\"Not possible to insert deck with specific ID\");\n+            case MEDIA:\n+                // insert a media file\n+                // contentvalue should have data and preferredFileName values\n+                return insertMediaFile(values, col);\n             default:\n                 // Unknown URI type\n                 throw new IllegalArgumentException(\"uri \" + uri + \" is not supported\");\n         }\n     }\n \n+    private Uri insertMediaFile(ContentValues values, Collection col) {\n+        // Insert media file using libanki.Media.addFile and return Uri for the inserted file.\n+        Uri fileUri = Uri.parse(values.getAsString(FlashCardsContract.AnkiMedia.FILE_URI));\n+        String preferredName = values.getAsString(FlashCardsContract.AnkiMedia.PREFERRED_NAME);\n+\n+\n+        try {\n+            ContentResolver cR = mContext.getContentResolver();\n+            Media media = col.getMedia();\n+            // idea, open input stream and save to cache directory, then\n+            // pass this (hopefully temporary) file to the media.addFile function.\n+\n+            String fileMimeType = MimeTypeMap.getSingleton().getExtensionFromMimeType(cR.getType(fileUri)); // return eg \"jpeg\"\n+            // should we be enforcing strict mimetypes? which types?\n+            File tempFile;\n+            try {\n+                tempFile = File.createTempFile(", "originalCommit": "ce815547847110b28b395642ca8c896ccb2ecb5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ5NzkxOQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r479497919", "bodyText": "I've changed this now to create a \"temp-media\" folder the same as how its done here: https://github.com/ankidroid/Anki-Android/blob/master/AnkiDroid/src/main/java/com/ichi2/anki/multimediacard/fields/BasicImageFieldController.java#L157", "author": "KieranMigaku", "createdAt": "2020-08-28T19:34:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NDY4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NDc1OQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r475254759", "bodyText": "I can see a use case of allowing the caller to pass in the file extension as an override. Was this not required for your use case?", "author": "david-allison-1", "createdAt": "2020-08-23T19:16:58Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/provider/CardContentProvider.java", "diffHunk": "@@ -1038,12 +1056,59 @@ public Uri insert(Uri uri, ContentValues values) {\n             case DECKS_ID:\n                 // Deck ID is generated automatically by libanki\n                 throw new IllegalArgumentException(\"Not possible to insert deck with specific ID\");\n+            case MEDIA:\n+                // insert a media file\n+                // contentvalue should have data and preferredFileName values\n+                return insertMediaFile(values, col);\n             default:\n                 // Unknown URI type\n                 throw new IllegalArgumentException(\"uri \" + uri + \" is not supported\");\n         }\n     }\n \n+    private Uri insertMediaFile(ContentValues values, Collection col) {\n+        // Insert media file using libanki.Media.addFile and return Uri for the inserted file.\n+        Uri fileUri = Uri.parse(values.getAsString(FlashCardsContract.AnkiMedia.FILE_URI));\n+        String preferredName = values.getAsString(FlashCardsContract.AnkiMedia.PREFERRED_NAME);\n+\n+\n+        try {\n+            ContentResolver cR = mContext.getContentResolver();\n+            Media media = col.getMedia();\n+            // idea, open input stream and save to cache directory, then\n+            // pass this (hopefully temporary) file to the media.addFile function.\n+\n+            String fileMimeType = MimeTypeMap.getSingleton().getExtensionFromMimeType(cR.getType(fileUri)); // return eg \"jpeg\"", "originalCommit": "ce815547847110b28b395642ca8c896ccb2ecb5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUzOTA0NQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r478539045", "bodyText": "For my use case the file that is sent by the client is provided by a File Picker. The extension used is taken from the file itself (the one supplied by the user).\nI have no idea but overriding the extension might cause problems if the client/user supplies an incorrect extension that doesn't work for the file they uploaded.", "author": "KieranMigaku", "createdAt": "2020-08-27T16:17:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NDc1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3ODUxMw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r479478513", "bodyText": "Okay - we should be able to add it in in a backwards-compatible manner if requested.", "author": "david-allison-1", "createdAt": "2020-08-28T18:49:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NDc1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NDc5NQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r475254795", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Timber.e(e, \"Could not create temporary media file. \");\n          \n          \n            \n                            Timber.w(e, \"Could not create temporary media file. \");", "author": "david-allison-1", "createdAt": "2020-08-23T19:17:31Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/provider/CardContentProvider.java", "diffHunk": "@@ -1038,12 +1056,59 @@ public Uri insert(Uri uri, ContentValues values) {\n             case DECKS_ID:\n                 // Deck ID is generated automatically by libanki\n                 throw new IllegalArgumentException(\"Not possible to insert deck with specific ID\");\n+            case MEDIA:\n+                // insert a media file\n+                // contentvalue should have data and preferredFileName values\n+                return insertMediaFile(values, col);\n             default:\n                 // Unknown URI type\n                 throw new IllegalArgumentException(\"uri \" + uri + \" is not supported\");\n         }\n     }\n \n+    private Uri insertMediaFile(ContentValues values, Collection col) {\n+        // Insert media file using libanki.Media.addFile and return Uri for the inserted file.\n+        Uri fileUri = Uri.parse(values.getAsString(FlashCardsContract.AnkiMedia.FILE_URI));\n+        String preferredName = values.getAsString(FlashCardsContract.AnkiMedia.PREFERRED_NAME);\n+\n+\n+        try {\n+            ContentResolver cR = mContext.getContentResolver();\n+            Media media = col.getMedia();\n+            // idea, open input stream and save to cache directory, then\n+            // pass this (hopefully temporary) file to the media.addFile function.\n+\n+            String fileMimeType = MimeTypeMap.getSingleton().getExtensionFromMimeType(cR.getType(fileUri)); // return eg \"jpeg\"\n+            // should we be enforcing strict mimetypes? which types?\n+            File tempFile;\n+            try {\n+                tempFile = File.createTempFile(\n+                        preferredName+\"_\", // the beginning of the filename.\n+                        \".\" + fileMimeType, // this is the extension, if null, '.tmp' is used, need to get the extension from MIME type?\n+                        new File(media.dir())\n+                );\n+                tempFile.deleteOnExit();\n+            } catch (Exception e) {\n+                Timber.e(e, \"Could not create temporary media file. \");", "originalCommit": "ce815547847110b28b395642ca8c896ccb2ecb5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1NTg5NA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r479455894", "bodyText": "Should I change all of the catch blocks here to warnings or just this one? I'll just change this one for now.", "author": "KieranMigaku", "createdAt": "2020-08-28T17:59:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NDc5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1NjM2Mw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r479456363", "bodyText": "Nevermind that was a brain fart haha.", "author": "KieranMigaku", "createdAt": "2020-08-28T18:00:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NDc5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NTEzNg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r475255136", "bodyText": "This returns a file:// URI. Will this work on later APIs? Can we provide this via a FileProvider instead?", "author": "david-allison-1", "createdAt": "2020-08-23T19:21:11Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/provider/CardContentProvider.java", "diffHunk": "@@ -1038,12 +1056,59 @@ public Uri insert(Uri uri, ContentValues values) {\n             case DECKS_ID:\n                 // Deck ID is generated automatically by libanki\n                 throw new IllegalArgumentException(\"Not possible to insert deck with specific ID\");\n+            case MEDIA:\n+                // insert a media file\n+                // contentvalue should have data and preferredFileName values\n+                return insertMediaFile(values, col);\n             default:\n                 // Unknown URI type\n                 throw new IllegalArgumentException(\"uri \" + uri + \" is not supported\");\n         }\n     }\n \n+    private Uri insertMediaFile(ContentValues values, Collection col) {\n+        // Insert media file using libanki.Media.addFile and return Uri for the inserted file.\n+        Uri fileUri = Uri.parse(values.getAsString(FlashCardsContract.AnkiMedia.FILE_URI));\n+        String preferredName = values.getAsString(FlashCardsContract.AnkiMedia.PREFERRED_NAME);\n+\n+\n+        try {\n+            ContentResolver cR = mContext.getContentResolver();\n+            Media media = col.getMedia();\n+            // idea, open input stream and save to cache directory, then\n+            // pass this (hopefully temporary) file to the media.addFile function.\n+\n+            String fileMimeType = MimeTypeMap.getSingleton().getExtensionFromMimeType(cR.getType(fileUri)); // return eg \"jpeg\"\n+            // should we be enforcing strict mimetypes? which types?\n+            File tempFile;\n+            try {\n+                tempFile = File.createTempFile(\n+                        preferredName+\"_\", // the beginning of the filename.\n+                        \".\" + fileMimeType, // this is the extension, if null, '.tmp' is used, need to get the extension from MIME type?\n+                        new File(media.dir())\n+                );\n+                tempFile.deleteOnExit();\n+            } catch (Exception e) {\n+                Timber.e(e, \"Could not create temporary media file. \");\n+                return null;\n+            }\n+\n+            FileUtil.internalizeUri(fileUri, null, tempFile, cR);\n+\n+            String fname = media.addFile(tempFile);\n+            Timber.d(\"insert -> MEDIA: fname = %s\", fname);\n+            File f = new File(fname);\n+            Timber.d(\"insert -> MEDIA: f = %s\", f);\n+            Uri uriFromF = Uri.fromFile(f);\n+            Timber.d(\"insert -> MEDIA: uriFromF = %s\", uriFromF);\n+            return Uri.fromFile(new File(fname));", "originalCommit": "ce815547847110b28b395642ca8c896ccb2ecb5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU4NDMyOQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r497584329", "bodyText": "I believe file:// URIs will always work on all APIs if you guarantee that you created a real file that you control so you have filesystem access, which we are doing here. The complexity in file handling on Android is that \"files\" can come in to you (from other apps) that are maybe security protected or ephemeral requiring ContentResolver / FileProvider work, but if you are creating a real file in your space you can just use the regular file APIs. That's my understanding", "author": "mikehardy", "createdAt": "2020-09-30T15:04:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NTEzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NjAyMA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r475256020", "bodyText": "Should the URI be guaranteed to be a file? I feel it will better to return a content:// URI so the calling app doesn't requires file system access.", "author": "david-allison-1", "createdAt": "2020-08-23T19:30:29Z", "path": "api/src/main/java/com/ichi2/anki/api/AddContentApi.java", "diffHunk": "@@ -151,6 +161,51 @@ public int addNotes(long modelId, long deckId, List<String[]> fieldsList, List<S\n         return getCompat().insertNotes(deckId, newNoteValuesList.toArray(new ContentValues[newNoteValuesList.size()]));\n     }\n \n+    /**\n+     * Add a media file to AnkiDroid's media collection. You would likely supply this uri through a FileProvider, and\n+     * then set FLAG_GRANT_READ_URI_PERMISSION using something like:\n+     * getContext().grantUriPermission(\"com.ichi2.anki\", uri, Intent.FLAG_GRANT_READ_URI_PERMISSION) and then afterward\n+     * remove the permission with getContext().revokePermission(uri, Intent.FLAG_GRAN_READ_URI_PERMISSION)\n+     * @param fileUri   Uri for the file to be added, required.\n+     * @param preferredName String that will be added to the beginning of the file name in the\n+     *                      media collection, required.\n+     * @param mimeType  String indicating the mimeType of the media. Accepts \"audio\" or \"image\", required.\n+     * @return the correctly formatted String for the media file to be placed in the desired field of a Card, or null\n+     *          if unsuccessful.\n+     */\n+    public @Nullable String addMediaFromUri(\n+            @NotNull Uri fileUri, @NotNull String preferredName, @NotNull String mimeType\n+    ) {\n+        ContentValues contentValues = new ContentValues();\n+        contentValues.put(AnkiMedia.FILE_URI, fileUri.toString());\n+        preferredName = preferredName.replace(\" \", \"_\");\n+        contentValues.put(AnkiMedia.PREFERRED_NAME, preferredName);\n+\n+        try {\n+            Uri returnUri = mResolver.insert(AnkiMedia.CONTENT_URI, contentValues);\n+            // get the filename from Uri, return [sound:%s] % file.getName()\n+            String fname = new File(returnUri.getPath()).toString();", "originalCommit": "ce815547847110b28b395642ca8c896ccb2ecb5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU5MTYxNQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r497591615", "bodyText": "This one is a big deal if I am reading it correctly. The reason to add the file insert API is because we will soon be forced to observe restricted filesystem access between apps - AnkiDroid API users won't be able to just drop files in - that is understood I think. The symmetrical statement is that AnkiDroid API users won't be able to access the files after adding them via filename I don't think.\nIf the intention here is just to have the filename that AnkiDroid can reliably use to display the file during review, that will work for AnkiDroid even though it is collection-internal and not available to other apps, this is fine for me\nIt may be that when getting card contents from AnkiDroid API, there needs to be some translation of all collection-internal media to a real FileProvider API with content URIs etc, and it may be that's a separate thing, I'm not sure how that is handled now", "author": "mikehardy", "createdAt": "2020-09-30T15:14:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NjAyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI2NTYwOA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r499265608", "bodyText": "I'm not sure I'm following 100%, but just to state what I can: my intention is to return the filename of the inserted media file to the user as a string, for instance \"332495_1377171239635.mp3\". Then they can use this when inserting a card so, for example a vocab card for languages, they would also like to insert the audio file for vocab so they can add to an audio field [sound:332495_1377171239635.mp3].\nFor API users that would simply like to insert media files and be done with it, for example static files that will be inserted and 'forgotten' about (I think this is what is needed for #6971 ), then the returned filename wouldn't be needed.\nIn terms of the File part, this was more just the only way I could find to retrieve the filename from the Uri, and it was a Uri simply because that is what the ContentProvider.insert call returns. Perhaps just having a different method in the ContentProvider for inserting a media file and having that method return the inserted String fname would get around this more cleanly.\nI agree that to make this more rigorous it could be a case of making a separate ContentProvider that handles interactions with the anki Media collection. For example this could provide access to querying content URIs from the media collection, as well as inserting files and perhaps other methods as necessary.\nI've only been doing android for about 4 months so I'm not entirely sure, but hopefully this helps explain what was intended with the code in this part.", "author": "KieranMigaku", "createdAt": "2020-10-04T16:47:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NjAyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3ODg0OA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r499278848", "bodyText": "I think that falls under the path that resulted in \"this is fine for me\" :-)", "author": "mikehardy", "createdAt": "2020-10-04T19:12:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NjAyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NjA1MQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r475256051", "bodyText": "It would likely be better to return the filename as well as the content URI (not sure if this is possible, but I expect it should be) - it will remove the need to potentially janky URI handling.", "author": "david-allison-1", "createdAt": "2020-08-23T19:30:57Z", "path": "api/src/main/java/com/ichi2/anki/api/AddContentApi.java", "diffHunk": "@@ -151,6 +161,51 @@ public int addNotes(long modelId, long deckId, List<String[]> fieldsList, List<S\n         return getCompat().insertNotes(deckId, newNoteValuesList.toArray(new ContentValues[newNoteValuesList.size()]));\n     }\n \n+    /**\n+     * Add a media file to AnkiDroid's media collection. You would likely supply this uri through a FileProvider, and\n+     * then set FLAG_GRANT_READ_URI_PERMISSION using something like:\n+     * getContext().grantUriPermission(\"com.ichi2.anki\", uri, Intent.FLAG_GRANT_READ_URI_PERMISSION) and then afterward\n+     * remove the permission with getContext().revokePermission(uri, Intent.FLAG_GRAN_READ_URI_PERMISSION)\n+     * @param fileUri   Uri for the file to be added, required.\n+     * @param preferredName String that will be added to the beginning of the file name in the\n+     *                      media collection, required.\n+     * @param mimeType  String indicating the mimeType of the media. Accepts \"audio\" or \"image\", required.\n+     * @return the correctly formatted String for the media file to be placed in the desired field of a Card, or null\n+     *          if unsuccessful.\n+     */\n+    public @Nullable String addMediaFromUri(\n+            @NotNull Uri fileUri, @NotNull String preferredName, @NotNull String mimeType\n+    ) {\n+        ContentValues contentValues = new ContentValues();\n+        contentValues.put(AnkiMedia.FILE_URI, fileUri.toString());\n+        preferredName = preferredName.replace(\" \", \"_\");\n+        contentValues.put(AnkiMedia.PREFERRED_NAME, preferredName);\n+\n+        try {\n+            Uri returnUri = mResolver.insert(AnkiMedia.CONTENT_URI, contentValues);", "originalCommit": "ce815547847110b28b395642ca8c896ccb2ecb5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUzMjQ0MA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r478532440", "bodyText": "The insert method of the CardContentProvider currently only returns a Uri.\nWhat I wanted was  return the String filename to the user so they can simply add this / append this string to one of the fields they would like to add.\nSo what I have done is:\n(CardContentProvider.java lines 1098-1104) - convert the File fname returned by media.addFile(tempFile) to a Uri and return this from the insert call.\n(AddContentApi.java lines 187-189) - Convert this from Uri to File to String and then format the string and return this to the user.\nSo essentially I would like to just return the filename straight away, but the Uri was the only way I could see around it.\nI'm not sure of a better solution for this, but I can edit in a suggestion if you have one.", "author": "KieranMigaku", "createdAt": "2020-08-27T16:06:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NjA1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NjI3Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r475256276", "bodyText": "Give an example - many people would include the extension here.", "author": "david-allison-1", "createdAt": "2020-08-23T19:33:24Z", "path": "api/src/main/java/com/ichi2/anki/api/AddContentApi.java", "diffHunk": "@@ -151,6 +161,51 @@ public int addNotes(long modelId, long deckId, List<String[]> fieldsList, List<S\n         return getCompat().insertNotes(deckId, newNoteValuesList.toArray(new ContentValues[newNoteValuesList.size()]));\n     }\n \n+    /**\n+     * Add a media file to AnkiDroid's media collection. You would likely supply this uri through a FileProvider, and\n+     * then set FLAG_GRANT_READ_URI_PERMISSION using something like:\n+     * getContext().grantUriPermission(\"com.ichi2.anki\", uri, Intent.FLAG_GRANT_READ_URI_PERMISSION) and then afterward\n+     * remove the permission with getContext().revokePermission(uri, Intent.FLAG_GRAN_READ_URI_PERMISSION)\n+     * @param fileUri   Uri for the file to be added, required.\n+     * @param preferredName String that will be added to the beginning of the file name in the", "originalCommit": "ce815547847110b28b395642ca8c896ccb2ecb5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ee19ceefbeeb0b8abd702935ea0c1f4b0ac4f4e6", "url": "https://github.com/ankidroid/Anki-Android/commit/ee19ceefbeeb0b8abd702935ea0c1f4b0ac4f4e6", "message": "Use temp-media cache dir instead of media.dir()", "committedDate": "2020-08-28T19:24:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0MzQxOQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r484543419", "bodyText": "Don't update robolectric version yet! That one is a really really hard upgrade - I'm working on it already in #7015 and it's a mess\nIn general don't mess with the dependencies, just leave those where they are in master\nI don't blame for your trying, just that this one in particular is a mess :-)", "author": "mikehardy", "createdAt": "2020-09-07T18:41:55Z", "path": "api/build.gradle", "diffHunk": "@@ -50,9 +50,9 @@ apply from: \"../lint.gradle\"\n \n dependencies {\n     api fileTree(dir: 'libs', include: ['*.jar'])\n-    implementation 'org.jetbrains:annotations:15.0'\n+    implementation 'org.jetbrains:annotations:20.0.0'\n     testImplementation 'org.junit.vintage:junit-vintage-engine:5.6.2'\n-    testImplementation 'org.robolectric:robolectric:4.3.1'\n+    testImplementation 'org.robolectric:robolectric:4.4'", "originalCommit": "4a3b55b1a6ddfa3f823f66ae9e4c771a1b395a8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0NDIyNA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r484544224", "bodyText": "OK, thanks for catching this so quickly. I was trying to fix the reason the CI failed, and I was just going to make the change and then comment for input. I'll revert that now, although I'm not sure what to do about the fail.", "author": "KieranMigaku", "createdAt": "2020-09-07T18:47:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0MzQxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0NDQ3Mg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r484544472", "bodyText": "For now I'm just going to update it to the upstream, since at time of writing it is 147 commits behind", "author": "KieranMigaku", "createdAt": "2020-09-07T18:48:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0MzQxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0NTY3MA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r484545670", "bodyText": "that could help - and to be forward-compatible with regard to Robolectric, the main change between 4.3.1 and 4.4 for tests is LooperMode.PAUSED - if you did that you'd get the benefit of 4.4's changes for the most part. The difficult parts that are separate are that it requires JDK9+ (ouch! all devs and CI need changes) and forces PAUSED looper mode for all tests (major timing issues)", "author": "mikehardy", "createdAt": "2020-09-07T18:55:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0MzQxOQ=="}], "type": "inlineReview"}, {"oid": "a3b99155c38e4bca93be145c1f77f2c0c68a2165", "url": "https://github.com/ankidroid/Anki-Android/commit/a3b99155c38e4bca93be145c1f77f2c0c68a2165", "message": "Use temp-media cache dir instead of media.dir()", "committedDate": "2020-09-07T19:15:33Z", "type": "forcePushed"}, {"oid": "502d41c7572c4d4210074a8bed62d1fc96861603", "url": "https://github.com/ankidroid/Anki-Android/commit/502d41c7572c4d4210074a8bed62d1fc96861603", "message": "Add AnkiMedia class to FlashCardsContract.java", "committedDate": "2020-09-09T18:31:04Z", "type": "commit"}, {"oid": "c7971d207dcc29b05d954be17bc1535c2ddcd4a4", "url": "https://github.com/ankidroid/Anki-Android/commit/c7971d207dcc29b05d954be17bc1535c2ddcd4a4", "message": "Add MEDIA uri to ContentProvider", "committedDate": "2020-09-09T18:31:04Z", "type": "commit"}, {"oid": "023161d04aef8ff4d12c371ff719c5f7c896ad3d", "url": "https://github.com/ankidroid/Anki-Android/commit/023161d04aef8ff4d12c371ff719c5f7c896ad3d", "message": "Insert MEDIA adds media file and returns Uri fname", "committedDate": "2020-09-09T18:31:04Z", "type": "commit"}, {"oid": "ca52875a9765a344a6dd130c7ced44c15c08cb74", "url": "https://github.com/ankidroid/Anki-Android/commit/ca52875a9765a344a6dd130c7ced44c15c08cb74", "message": "addMediaFromUri returns proper formatted String\n\nThis formatted string can be returned and inserted straight into the\nfield of a card.", "committedDate": "2020-09-09T18:31:04Z", "type": "commit"}, {"oid": "cf50f7e264d49f04bc50e459f66e9e0bc357a30b", "url": "https://github.com/ankidroid/Anki-Android/commit/cf50f7e264d49f04bc50e459f66e9e0bc357a30b", "message": "Replace assert call\n\nAssert doesn't work in java, but if it ever gets fixed it could cause crashes. Best not to use it.", "committedDate": "2020-09-09T18:31:04Z", "type": "commit"}, {"oid": "62c5028704689a67b4c28341a7f5474b88be993a", "url": "https://github.com/ankidroid/Anki-Android/commit/62c5028704689a67b4c28341a7f5474b88be993a", "message": "Change StackTrace to specific Timber warning", "committedDate": "2020-09-09T18:31:04Z", "type": "commit"}, {"oid": "f461535fbdff978b02d7815f0e92a599c1f1b7b4", "url": "https://github.com/ankidroid/Anki-Android/commit/f461535fbdff978b02d7815f0e92a599c1f1b7b4", "message": "Refactor insert MEDIA case into a function call", "committedDate": "2020-09-09T18:31:04Z", "type": "commit"}, {"oid": "37cf79bce3ff89e5526b36b398979dcb00834bb1", "url": "https://github.com/ankidroid/Anki-Android/commit/37cf79bce3ff89e5526b36b398979dcb00834bb1", "message": "Improve documentation", "committedDate": "2020-09-09T18:31:04Z", "type": "commit"}, {"oid": "fe0b2578dde10e3efc73d7ad59ee3d281af53d9a", "url": "https://github.com/ankidroid/Anki-Android/commit/fe0b2578dde10e3efc73d7ad59ee3d281af53d9a", "message": "Add Nullable and NotNull annotations", "committedDate": "2020-09-09T18:31:04Z", "type": "commit"}, {"oid": "867f6257a254c6b9d9516ac2b7b7ad95e10cb72c", "url": "https://github.com/ankidroid/Anki-Android/commit/867f6257a254c6b9d9516ac2b7b7ad95e10cb72c", "message": "Extract internalizeUri to FileUtil.java", "committedDate": "2020-09-09T18:31:04Z", "type": "commit"}, {"oid": "60012b11dcc7987e86d1d33b36cbaa85453471dd", "url": "https://github.com/ankidroid/Anki-Android/commit/60012b11dcc7987e86d1d33b36cbaa85453471dd", "message": "Add example to javadoc", "committedDate": "2020-09-09T18:31:04Z", "type": "commit"}, {"oid": "ee189b6dae8912f6284b8efbc2abb5a359fb1566", "url": "https://github.com/ankidroid/Anki-Android/commit/ee189b6dae8912f6284b8efbc2abb5a359fb1566", "message": "Convert Timber.e to Timber.w", "committedDate": "2020-09-09T18:31:04Z", "type": "commit"}, {"oid": "e24981b0d6a4450150150a01358f2450ab5c53cf", "url": "https://github.com/ankidroid/Anki-Android/commit/e24981b0d6a4450150150a01358f2450ab5c53cf", "message": "Use temp-media cache dir instead of media.dir()", "committedDate": "2020-09-09T18:31:04Z", "type": "commit"}, {"oid": "eedee141b3d4e0eec03c00fcac1831f28897f3f7", "url": "https://github.com/ankidroid/Anki-Android/commit/eedee141b3d4e0eec03c00fcac1831f28897f3f7", "message": "Change annotations to androidx\n\nUnitTest was throwing linting error because we were using jetbrains\nannotations.", "committedDate": "2020-09-09T18:31:04Z", "type": "commit"}, {"oid": "eedee141b3d4e0eec03c00fcac1831f28897f3f7", "url": "https://github.com/ankidroid/Anki-Android/commit/eedee141b3d4e0eec03c00fcac1831f28897f3f7", "message": "Change annotations to androidx\n\nUnitTest was throwing linting error because we were using jetbrains\nannotations.", "committedDate": "2020-09-09T18:31:04Z", "type": "forcePushed"}, {"oid": "aebca21534e378125173b7e5346d24df664f6170", "url": "https://github.com/ankidroid/Anki-Android/commit/aebca21534e378125173b7e5346d24df664f6170", "message": "Merge branch 'master' into allow-fileupload-api", "committedDate": "2020-09-30T14:58:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU4Njc4OA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r497586788", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param preferredName String that will be added to the beginning of the file name in the\n          \n          \n            \n                 *                      media collection, required.\n          \n          \n            \n                 * @param preferredName String to add to start of filename (do not use a file extension), required.", "author": "mikehardy", "createdAt": "2020-09-30T15:07:52Z", "path": "api/src/main/java/com/ichi2/anki/api/AddContentApi.java", "diffHunk": "@@ -151,6 +161,76 @@ public int addNotes(long modelId, long deckId, List<String[]> fieldsList, List<S\n         return getCompat().insertNotes(deckId, newNoteValuesList.toArray(new ContentValues[newNoteValuesList.size()]));\n     }\n \n+    /**\n+     * Add a media file to AnkiDroid's media collection. You would likely supply this uri through a FileProvider, and\n+     * then set FLAG_GRANT_READ_URI_PERMISSION using something like:\n+     *\n+     * <pre>\n+     *     <code>\n+     *     getContext().grantUriPermission(\"com.ichi2.anki\", uri, Intent.FLAG_GRANT_READ_URI_PERMISSION)\n+     *     // Then when file is added, remove the permission\n+     *     // add File ...\n+     *     getContext().revokePermission(uri, Intent.FLAG_GRAN_READ_URI_PERMISSION)\n+     *     </code>\n+     * </pre>\n+     *\n+     * Example usage:\n+     *  <pre>\n+     *      <code>\n+     *      Long modelId = getModelId(); // implementation can be seen in api sample app\n+     *      Long deckId = getDeckId(); // as above\n+     *      Set&lt;String&gt; tags = getTags(); // as above\n+     *      Uri fileUri = ... // this will be returned by a File Picker activity where we select an image file\n+     *      String addedImageFileName = mApi.addMediaFromUri(fileUri, \"My_Image_File\", \"image\");\n+     *\n+     *      String[] fields = new String[] {\"text on front of card\", \"text on back of card \" + addedImageFileName};\n+     *      mApi.addNote(modelId, deckId, fields, tags)\n+     *      </code>\n+     *  </pre>\n+     *\n+     *\n+     *\n+     *\n+     * @param fileUri   Uri for the file to be added, required.\n+     * @param preferredName String that will be added to the beginning of the file name in the\n+     *                      media collection, required.", "originalCommit": "aebca21534e378125173b7e5346d24df664f6170", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8df4208c8d00aff8b210799a8cbdf355d9a36559", "url": "https://github.com/ankidroid/Anki-Android/commit/8df4208c8d00aff8b210799a8cbdf355d9a36559", "message": "Apply suggestions from code review", "committedDate": "2020-09-30T15:08:07Z", "type": "commit"}]}