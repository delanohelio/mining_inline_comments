{"pr_number": 6773, "pr_title": "CSV Importer: Implement Backend", "pr_createdAt": "2020-07-30T02:11:57Z", "pr_url": "https://github.com/ankidroid/Anki-Android/pull/6773", "timeline": [{"oid": "d07b5355d21bc88cba6cfeba9fdf67a32d746c7d", "url": "https://github.com/ankidroid/Anki-Android/commit/d07b5355d21bc88cba6cfeba9fdf67a32d746c7d", "message": "DO_NOT_COMMIT:\n\nCSV Importer - For Initial Review\n\nIssue: 6772", "committedDate": "2020-07-30T02:14:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5MzEwNw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6773#discussion_r462693107", "bodyText": "TODO", "author": "david-allison-1", "createdAt": "2020-07-30T02:12:46Z", "path": "AnkiDroid/src/androidTest/java/com/ichi2/anki/tests/libanki/ImportTest.java", "diffHunk": "@@ -227,64 +236,82 @@ public void testAnki2Updates() throws IOException, ImportExportException {\n         assertTrue(testCol.getDb().queryString(\"select flds from notes\").startsWith(\"goodbye\"));\n     }\n \n+    @Test\n+    public void testCsv() throws IOException {\n+        String file = Shared.getTestFilePath(InstrumentationRegistry.getInstrumentation().getTargetContext(), \"text-2fields.txt\");\n+        TextImporter i = new TextImporter(testCol, file);\n+        i.initMapping();\n+        i.run();\n+        // four problems - too many & too few fields, a missing front, and a\n+        // duplicate entry\n+        assertThat(i.getLog(), contains(\n+                \"\u2018\u591a\u3059\u304e\u308b too many fields\u2019 had 3 fields, expected 2\",\n+                \"\u2018not, enough, fields\u2019 had 1 fields, expected 2\",\n+                \"Appeared twice in file: \u98f2\u3080\",\n+                \"Empty first field:  to play\",\n+                \"5 notes added, 0 notes updated, 0 notes unchanged.\"));\n+\n+        assertEquals(5, i.getTotal());\n+        // if we run the import again, it should update instead\n+        i.run();\n+        assertThat(i.getLog(), hasSize(10));\n+        /**\n+         * [\"'\u591a\u3059\u304e\u308b too many fields' had 3 fields, expected 2\",", "originalCommit": "57b6f406db2f817c24f543ec0682f7514d6957bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5MzQyMQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6773#discussion_r462693421", "bodyText": "This is pending", "author": "david-allison-1", "createdAt": "2020-07-30T02:14:05Z", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/NoteImporter.java", "diffHunk": "@@ -1,21 +1,467 @@\n package com.ichi2.libanki.importer;\n \n+import android.database.Cursor;\n+import android.text.TextUtils;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.AnkiDroidApp;\n+import com.ichi2.anki.R;\n import com.ichi2.libanki.Collection;\n+import com.ichi2.libanki.Consts;\n+import com.ichi2.libanki.DeckConfig;\n+import com.ichi2.libanki.Model;\n+import com.ichi2.libanki.utils.StringUtils;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.HtmlUtils;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+import com.ichi2.utils.StringUtil;\n+\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.PluralsRes;\n+import androidx.annotation.StringRes;\n+import androidx.annotation.VisibleForTesting;\n \n-/**\n- * This class is a stub. Nothing is implemented yet.\n- */\n+import static com.ichi2.libanki.Consts.NEW_CARDS_RANDOM;\n+import static com.ichi2.libanki.Utils.collection2Array;\n+import static com.ichi2.libanki.Utils.fieldChecksum;\n+import static com.ichi2.libanki.Utils.guid64;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.joinFields;\n+import static com.ichi2.libanki.Utils.splitFields;\n+import static com.ichi2.libanki.Utils.timestampID;\n+import static com.ichi2.libanki.importer.NoteImporter.ImportMode.*;\n+import static com.ichi2.libanki.importer.NoteImporter.ImportMode.ADD_MODE;\n+import static com.ichi2.libanki.importer.NoteImporter.ImportMode.UPDATE_MODE;\n+\n+// Note: This is an accidental combination of\n+// https://github.com/ankitects/anki/blob/50fdf9b03dec33c99a501f332306f378db5eb4ea/pylib/anki/importing/noteimp.py and\n+// https://github.com/ankitects/anki/blob/2.0.52/anki/importing/noteimp.py\n+// TODO: https://github.com/ankitects/anki/commit/9f676dbe0b2ad9b87a3bf89d7735b4253abd440e#diff-da2e8114329cabede4db7c8f7b0f616e", "originalCommit": "57b6f406db2f817c24f543ec0682f7514d6957bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NTE2MA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6773#discussion_r462695160", "bodyText": "Consider a histogram class", "author": "david-allison-1", "createdAt": "2020-07-30T02:20:46Z", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/python/CsvSniffer.java", "diffHunk": "@@ -0,0 +1,447 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+ This file incorporates work covered by the following copyright and permission notice.\n+ Please see LICENSE for full details\n+\n+ Ported from https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Lib/csv.py#L159\n+\n+ */\n+\n+package com.ichi2.libanki.importer.python;\n+\n+import android.os.Build;\n+\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import androidx.annotation.RequiresApi;\n+\n+@RequiresApi(Build.VERSION_CODES.O) // Regex group(str)\n+public class CsvSniffer {\n+\n+    private static int QUOTE_MINIMAL = 0;\n+    private final char[] preferred;\n+\n+\n+    public CsvSniffer() {\n+        // in case there is more than one possible delimiter\n+        preferred = new char[] {',', '\\t', ';', ' ', ':'};\n+    }\n+\n+\n+\n+    public CsvDialect sniff(String sample, char[] delimiters) {\n+\n+        GuessQuoteAndDelimiter result = _guess_quote_and_delimiter(sample, toList(delimiters));\n+        char quotechar = result.quotechar;\n+        boolean doublequote = result.doublequote;\n+        char delimiter = result.delimiter;\n+        boolean skipinitialspace = result.skipinitialspace;\n+\n+        if (delimiter == '\\0') {\n+            Guess g = _guess_delimiter(sample, toList(delimiters));\n+            delimiter = g.delimiter;\n+            skipinitialspace = g.skipinitialspace;\n+        }\n+\n+        if (delimiter == '\\0') {\n+            throw new CsvException(\"Could not determine delimiter\");\n+        }\n+\n+        CsvDialect dialect = new CsvDialect(\"sniffed\");\n+\n+        dialect.mDoublequote = doublequote;\n+        dialect.mDelimiter = delimiter;\n+        // _csv.reader won't accept a quotechar of ''\n+        dialect.mQuotechar = quotechar == '\\0' ? '\"' : quotechar;\n+        dialect.mSkipInitialSpace = skipinitialspace;\n+\n+        return dialect;\n+    }\n+\n+\n+    private List<Character> toList(char[] delimiters) {\n+        ArrayList<Character> ret = new ArrayList<>();\n+        for (char delimiter : delimiters) {\n+            ret.add(delimiter);\n+        }\n+        return ret;\n+    }\n+\n+\n+    /**\n+     *  Looks for text enclosed between two identical quotes\n+     *  (the probable quotechar) which are preceded and followed\n+     *  by the same character (the probable delimiter).\n+     *  For example:\n+     *                   ,'some text',\n+     *  The quote with the most wins, same with the delimiter.\n+     *  If there is no quotechar the delimiter can't be determined\n+     *  this way.\n+     */\n+    private GuessQuoteAndDelimiter _guess_quote_and_delimiter(String data, List<Character> delimiters) {\n+\n+        // TODO: These need testing\n+        ArrayList<String> regexes = new ArrayList<>();\n+        regexes.add(\"(?<delim>[^\\\\w\\\\n\\\"'])(?<space> ?)(?<quote>[\\\"']).*?\\\\k<quote>\\\\k<delim>\"); // ,\".*?\",\n+        regexes.add(\"(?:^|\\\\n)(?<quote>[\\\"']).*?\\\\k<quote>(?<delim>[^\\\\w\\\\n\\\"'])(?<space> ?)\");  //  \".*?\",\n+        regexes.add(\"(?<delim>[^\\\\w\\\\n\\\"'])(?<space> ?)(?<quote>[\\\"']).*?\\\\k<quote>(?:$|\\\\n)\");  // ,\".*?\"\n+        regexes.add(\"(?:^|\\\\n)(?<quote>[\\\"']).*?\\\\k<quote>(?:$|\\\\n)\");                           //  \".*?\" (no delim, no space)\n+\n+\n+        List<Group> matches = new ArrayList<>();\n+\n+        for(String regex : regexes) {\n+            Pattern p = Pattern.compile(regex, Pattern.MULTILINE | Pattern.DOTALL);\n+            Matcher m = p.matcher(data);\n+            while (m.find()) {\n+                Group g = new Group();\n+                g.delim = getCharOrNull(m, \"delim\");\n+                g.quote = getCharOrNull(m, \"quote\");\n+                g.space = m.group(\"space\");\n+                matches.add(g);\n+            }\n+            if (!matches.isEmpty()) {\n+                break;\n+            }\n+        }\n+        if (matches.isEmpty()) {\n+            return new GuessQuoteAndDelimiter('\\0', false, '\\0', false);\n+        }\n+\n+\n+        Map<Character, Integer> quotes = new HashMap<>();\n+        Map<Character, Integer> delims = new HashMap<>();\n+        int spaces = 0;\n+        for (Group m : matches) {\n+            char key = m.quote;\n+            if (key != '\\0') {\n+                quotes.put(key, quotes.getOrDefault(key, 0) + 1);", "originalCommit": "d07b5355d21bc88cba6cfeba9fdf67a32d746c7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NTIxMg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6773#discussion_r462695212", "bodyText": "\u26a0\ufe0f", "author": "david-allison-1", "createdAt": "2020-07-30T02:21:02Z", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/python/FileObj.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.libanki.importer.python;\n+\n+import android.os.Build;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.RequiresApi;\n+\n+@RequiresApi(api = Build.VERSION_CODES.O)\n+public class FileObj {\n+\n+    private final File mFile;\n+\n+\n+    public FileObj(@NonNull File file) {\n+        this.mFile = file;\n+    }\n+\n+\n+    @NonNull\n+    public static FileObj open(@NonNull String mFile) {\n+        return new FileObj(new File(mFile));\n+    }\n+\n+\n+    public void close() {\n+        // No need for anything - closed in the read\n+    }\n+\n+\n+    @NonNull\n+    public String readAsUtf8WithoutBOM() throws IOException {\n+        // TODO: This needs to handle the BOM (Python handles EFBBBF)", "originalCommit": "d07b5355d21bc88cba6cfeba9fdf67a32d746c7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NTI5NQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6773#discussion_r462695295", "bodyText": "Suggestions here would be helpful - I don't trust this currently", "author": "david-allison-1", "createdAt": "2020-07-30T02:21:21Z", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/utils/StringUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.libanki.utils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import androidx.annotation.NonNull;\n+\n+public class StringUtils {\n+\n+    private static Pattern WHITESPACE_PATTERN = Pattern.compile(\"\\\\s+\", Pattern.MULTILINE | Pattern.DOTALL);\n+\n+    /** Equivalent to the python string.split() */\n+    @NonNull\n+    public static List<String> split(@NonNull String value) {\n+        // TODO: This needs a little more regression cover.", "originalCommit": "d07b5355d21bc88cba6cfeba9fdf67a32d746c7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0MzcwNQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6773#discussion_r463043705", "bodyText": "No suggestions other than a test (which you have) which starts with everything you can think of (which it does) and makes it easy to add new cases as we learn of failures. I wouldn't overthink it unless you think there is a design issue. All I would say is that the name has me expect the typical java String.split(char delimiter) so it might be better named as splitOnWhitespace or something (not really fussy about what just the raw \"split\" verb is used in Java already", "author": "mikehardy", "createdAt": "2020-07-30T14:36:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NTI5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0OTc0Nw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6773#discussion_r463049747", "bodyText": "Agreed -  thanks!", "author": "david-allison-1", "createdAt": "2020-07-30T14:44:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NTI5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NTYyOQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6773#discussion_r462695629", "bodyText": "Also need regression cover suggestions here - I presume these are wrong", "author": "david-allison-1", "createdAt": "2020-07-30T02:22:32Z", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/python/CsvSniffer.java", "diffHunk": "@@ -0,0 +1,447 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+ This file incorporates work covered by the following copyright and permission notice.\n+ Please see LICENSE for full details\n+\n+ Ported from https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Lib/csv.py#L159\n+\n+ */\n+\n+package com.ichi2.libanki.importer.python;\n+\n+import android.os.Build;\n+\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import androidx.annotation.RequiresApi;\n+\n+@RequiresApi(Build.VERSION_CODES.O) // Regex group(str)\n+public class CsvSniffer {\n+\n+    private static int QUOTE_MINIMAL = 0;\n+    private final char[] preferred;\n+\n+\n+    public CsvSniffer() {\n+        // in case there is more than one possible delimiter\n+        preferred = new char[] {',', '\\t', ';', ' ', ':'};\n+    }\n+\n+\n+\n+    public CsvDialect sniff(String sample, char[] delimiters) {\n+\n+        GuessQuoteAndDelimiter result = _guess_quote_and_delimiter(sample, toList(delimiters));\n+        char quotechar = result.quotechar;\n+        boolean doublequote = result.doublequote;\n+        char delimiter = result.delimiter;\n+        boolean skipinitialspace = result.skipinitialspace;\n+\n+        if (delimiter == '\\0') {\n+            Guess g = _guess_delimiter(sample, toList(delimiters));\n+            delimiter = g.delimiter;\n+            skipinitialspace = g.skipinitialspace;\n+        }\n+\n+        if (delimiter == '\\0') {\n+            throw new CsvException(\"Could not determine delimiter\");\n+        }\n+\n+        CsvDialect dialect = new CsvDialect(\"sniffed\");\n+\n+        dialect.mDoublequote = doublequote;\n+        dialect.mDelimiter = delimiter;\n+        // _csv.reader won't accept a quotechar of ''\n+        dialect.mQuotechar = quotechar == '\\0' ? '\"' : quotechar;\n+        dialect.mSkipInitialSpace = skipinitialspace;\n+\n+        return dialect;\n+    }\n+\n+\n+    private List<Character> toList(char[] delimiters) {\n+        ArrayList<Character> ret = new ArrayList<>();\n+        for (char delimiter : delimiters) {\n+            ret.add(delimiter);\n+        }\n+        return ret;\n+    }\n+\n+\n+    /**\n+     *  Looks for text enclosed between two identical quotes\n+     *  (the probable quotechar) which are preceded and followed\n+     *  by the same character (the probable delimiter).\n+     *  For example:\n+     *                   ,'some text',\n+     *  The quote with the most wins, same with the delimiter.\n+     *  If there is no quotechar the delimiter can't be determined\n+     *  this way.\n+     */\n+    private GuessQuoteAndDelimiter _guess_quote_and_delimiter(String data, List<Character> delimiters) {\n+\n+        // TODO: These need testing", "originalCommit": "d07b5355d21bc88cba6cfeba9fdf67a32d746c7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f9864341480b29ba42f3e2692b299d0dc34467e3", "url": "https://github.com/ankidroid/Anki-Android/commit/f9864341480b29ba42f3e2692b299d0dc34467e3", "message": "DO_NOT_COMMIT:\n\nCSV Importer - For Initial Review\n\nIssue: 6772", "committedDate": "2020-07-30T07:22:46Z", "type": "forcePushed"}, {"oid": "2c75494912de5acc7ed6940fcf3e245281135c41", "url": "https://github.com/ankidroid/Anki-Android/commit/2c75494912de5acc7ed6940fcf3e245281135c41", "message": "DO_NOT_COMMIT:\n\nCSV Importer - For Initial Review\n\nIssue: 6772", "committedDate": "2020-07-30T10:58:10Z", "type": "forcePushed"}, {"oid": "221e1729207f25298e9b5945153d5f4aa1d9335f", "url": "https://github.com/ankidroid/Anki-Android/commit/221e1729207f25298e9b5945153d5f4aa1d9335f", "message": "DO_NOT_COMMIT:\n\nCSV Importer - For Initial Review\n\nIssue: 6772", "committedDate": "2020-07-30T14:19:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAzNjM1Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/6773#discussion_r463036356", "bodyText": "That will blow up in the future, someone will send something \"ridiculously\" large (quotes because it is just ridiculous vs device constraints) through it and OOM. Might do the same OOM handling from deck images, where in the loop reading the data you do the super-rare OOM Error catch, and say something about \"hey, so, this file has NNN lines and phones are small, maybe do a smaller amount at a time?\"", "author": "mikehardy", "createdAt": "2020-07-30T14:26:41Z", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/TextImporter.java", "diffHunk": "@@ -1,26 +1,240 @@\n package com.ichi2.libanki.importer;\n \n+import android.os.Build;\n+import android.text.TextUtils;\n+\n+import com.ichi2.anki.R;\n import com.ichi2.libanki.Collection;\n+import com.ichi2.libanki.importer.python.CsvDialect;\n+import com.ichi2.libanki.importer.python.CsvException;\n+import com.ichi2.libanki.importer.python.CsvReader;\n+import com.ichi2.libanki.importer.python.CsvSniffer;\n+import com.ichi2.libanki.importer.python.FileObj;\n+\n+import org.jetbrains.annotations.Contract;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.regex.Pattern;\n \n-/**\n- * This class is a stub. Nothing is implemented yet.\n- */\n+import androidx.annotation.NonNull;\n+import androidx.annotation.RequiresApi;\n+import timber.log.Timber;\n+\n+@RequiresApi(api = Build.VERSION_CODES.O)\n public class TextImporter extends NoteImporter {\n \n+    private boolean mNeedDelimiter = true;\n+    String mPatterns = \"\\t|,;:\";\n+\n+    private final Object lines;\n+    private FileObj fileobj;\n+    private char delimiter;\n+    private String[] tagsToAdd;\n+\n+    /** The whole content of the file */", "originalCommit": "221e1729207f25298e9b5945153d5f4aa1d9335f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAzNzUwMQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6773#discussion_r463037501", "bodyText": "I mean, you could convert to a stream-based style but I didn't even mention that at first because - to be clear - I understand streaming vs all-at-once is a completely different style, usually more difficult, and as it is likely only a small %age use case that a user themselves can work around if they have actionable information, it's not a requirement here IMHO", "author": "mikehardy", "createdAt": "2020-07-30T14:28:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAzNjM1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA1NTI4Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/6773#discussion_r463055286", "bodyText": "I like streaming (although it's painful in the version of Java that we use), but wanted to keep this as a (pretty much) true port of the Python in the first round.\nI'll see what I can do in a follow-up commit", "author": "david-allison-1", "createdAt": "2020-07-30T14:52:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAzNjM1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA4NDkxMA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6773#discussion_r463084910", "bodyText": "Okay... since we're in API 26 land, streaming is easy. Done!", "author": "david-allison-1", "createdAt": "2020-07-30T15:33:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAzNjM1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0NjQzMQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6773#discussion_r463046431", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             This file incorporates work covered by the following copyright and permission notice.\n          \n          \n            \n             Please see LICENSE for full details\n          \n          \n            \n            \n          \n          \n            \n             Ported from https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Lib/csv.py#L159\n          \n          \n            \n             Ported from https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Lib/csv.py#L159\n          \n          \n            \n            \n          \n          \n            \n              This file incorporates work covered by the following copyright and permission notice.\n          \n          \n            \n             Please see the file LICENSE in this directory for full details\n          \n          \n            \n            \n          \n      \n    \n    \n  \n\nI read the LICENSE file, and I like this header but I'd put the ported file link above it, then an explicit reference to the LICENSE file in the directory so it is unambiguous\nFurther thoughts?\nNeeds to be in all the files in the python dir though I think?", "author": "mikehardy", "createdAt": "2020-07-30T14:40:10Z", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/python/CsvSniffer.java", "diffHunk": "@@ -0,0 +1,446 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+ This file incorporates work covered by the following copyright and permission notice.\n+ Please see LICENSE for full details\n+\n+ Ported from https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Lib/csv.py#L159", "originalCommit": "221e1729207f25298e9b5945153d5f4aa1d9335f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5554311dc86f90c719eb0155423e0634bd20e529", "url": "https://github.com/ankidroid/Anki-Android/commit/5554311dc86f90c719eb0155423e0634bd20e529", "message": "DO_NOT_COMMIT:\n\nCSV Importer - For Initial Review\n\nIssue: 6772", "committedDate": "2020-07-30T14:51:07Z", "type": "forcePushed"}, {"oid": "239213f316b0e30c55dcc1397d47c4a97e947a5a", "url": "https://github.com/ankidroid/Anki-Android/commit/239213f316b0e30c55dcc1397d47c4a97e947a5a", "message": "DO_NOT_COMMIT:\n\nCSV Importer - For Initial Review\n\nIssue: 6772", "committedDate": "2020-07-30T14:53:29Z", "type": "forcePushed"}, {"oid": "dea68c849a8672e7cbd2663076b07dbffe2b2ce9", "url": "https://github.com/ankidroid/Anki-Android/commit/dea68c849a8672e7cbd2663076b07dbffe2b2ce9", "message": "CSV Import: Convert to Streaming\n\nEnsures that we shouldn't OOM on import", "committedDate": "2020-07-30T16:24:28Z", "type": "forcePushed"}, {"oid": "8c15d17faeea76f4caec3377cdc4f8d1da9604fb", "url": "https://github.com/ankidroid/Anki-Android/commit/8c15d17faeea76f4caec3377cdc4f8d1da9604fb", "message": "CSV Import: Convert to Streaming\n\nEnsures that we shouldn't OOM on import", "committedDate": "2020-07-30T18:47:49Z", "type": "forcePushed"}, {"oid": "93c60baf824544931982be9eddbcfcb3c4ad8bd7", "url": "https://github.com/ankidroid/Anki-Android/commit/93c60baf824544931982be9eddbcfcb3c4ad8bd7", "message": "CSV Import: Convert to Streaming\n\nEnsures that we shouldn't OOM on import", "committedDate": "2020-07-30T19:00:57Z", "type": "forcePushed"}, {"oid": "0b4632edce2695a8911d3f4027edeae447522505", "url": "https://github.com/ankidroid/Anki-Android/commit/0b4632edce2695a8911d3f4027edeae447522505", "message": "CSV Import: Convert to Streaming\n\nEnsures that we shouldn't OOM on import", "committedDate": "2020-07-30T19:07:48Z", "type": "forcePushed"}, {"oid": "a744a3785d3aad21b0a20a1fa4b7362d2e4cda2c", "url": "https://github.com/ankidroid/Anki-Android/commit/a744a3785d3aad21b0a20a1fa4b7362d2e4cda2c", "message": "genCards: Don't crash if note's deck not found\n\nRequired for CSV Importing\n\nMatches the Python, which defaulted to a falsey value if not found", "committedDate": "2020-07-30T19:11:12Z", "type": "commit"}, {"oid": "70f5f7984d355e56534b9fde43945af946697249", "url": "https://github.com/ankidroid/Anki-Android/commit/70f5f7984d355e56534b9fde43945af946697249", "message": "CSV Import: Stream CSV File Input\n\nEnsures that we shouldn't OOM on import\n\nThis is for API 26+, so uses Java Streams\n\nFrom code review on 6772/6773", "committedDate": "2020-07-30T19:13:55Z", "type": "forcePushed"}, {"oid": "dd7bb01b10f9a63b65e5a6b581f6602a9f28f212", "url": "https://github.com/ankidroid/Anki-Android/commit/dd7bb01b10f9a63b65e5a6b581f6602a9f28f212", "message": "CSV Import: Stream CSV File Input\n\nEnsures that we shouldn't OOM on import\n\nThis is for API 26+, so uses Java Streams\n\nFrom code review on 6772/6773", "committedDate": "2020-07-30T20:34:38Z", "type": "forcePushed"}, {"oid": "551ec57005ac9588ed3980348d6dace72ca4ae58", "url": "https://github.com/ankidroid/Anki-Android/commit/551ec57005ac9588ed3980348d6dace72ca4ae58", "message": "CSV Import: Stream CSV File Input\n\nEnsures that we shouldn't OOM on import\n\nThis is for API 26+, so uses Java Streams\n\nFrom code review on 6772/6773", "committedDate": "2020-07-30T20:58:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI2OTI5MQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6773#discussion_r463269291", "bodyText": "@mikehardy @Arthur-Milchior I'm going to mark this as ready for review if the CI passes.\nI'd like to flag this pattern and see if you're OK with it. We might not get full coverage as most of the CI machines instrumented test in non-English locales.", "author": "david-allison-1", "createdAt": "2020-07-30T21:02:08Z", "path": "AnkiDroid/src/androidTest/java/com/ichi2/anki/tests/libanki/ImportTest.java", "diffHunk": "@@ -227,64 +241,111 @@ public void testAnki2Updates() throws IOException, ImportExportException {\n         assertTrue(testCol.getDb().queryString(\"select flds from notes\").startsWith(\"goodbye\"));\n     }\n \n-    // Exchange @Suppress for @Test when csv importer is implemented\n-//    @Suppress\n-//    public void testCsv() throws IOException {\n-//        String file = Shared.getTestFilePath(InstrumentationRegistry.getInstrumentation().getTargetContext(), \"text-2fields.txt\");\n-//        TextImporter i = new TextImporter(testCol, file);\n-//        i.initMapping();\n-//        i.run();\n-//        // four problems - too many & too few fields, a missing front, and a\n-//        // duplicate entry\n-//        assertTrue(i.getLog().size() == 5);\n-//        assertTrue(i.getTotal() == 5);\n-//        // if we run the import again, it should update instead\n-//        i.run();\n-//        assertTrue(i.getLog().size() == 10);\n-//        assertTrue(i.getTotal() == 5);\n-//        // but importing should not clobber tags if they're unmapped\n-//        Note n = testCol.getNote(testCol.getDb().queryLongScalar(\"select id from notes\"));\n-//        n.addTag(\"test\");\n-//        n.flush();\n-//        i.run();\n-//        n.load();\n-//        assertTrue((n.getTags().size() == 1) && (n.getTags().get(0) == \"test\"));\n-//        // if add-only mode, count will be 0\n-//        i.setImportMode(1);\n-//        i.run();\n-//        assertTrue(i.getTotal() == 0);\n-//        // and if dupes mode, will reimport everything\n-//        assertTrue(testCol.cardCount() == 5);\n-//        i.setImportMode(2);\n-//        i.run();\n-//        // includes repeated field\n-//        assertTrue(i.getTotal() == 6);\n-//        assertTrue(testCol.cardCount() == 11);\n-//    }\n-//\n-//    // Exchange @Suppress for @Test when csv importer is implemented\n-//    @Suppress\n-//    public void testCsv2() throws  IOException, ConfirmModSchemaException {\n-//        Models mm = testCol.getModels();\n-//        JSONObject m = mm.current();\n-//        JSONObject f = mm.newField(\"Three\");\n-//        mm.addField(m, f);\n-//        mm.save(m);\n-//        Note n = deck.newNote();\n-//        n.setItem(\"Front\", \"1\");\n-//        n.setItem(\"Back\", \"2\");\n-//        n.setItem(\"Three\", \"3\");\n-//        testCol.addNote(n);\n-//        // an update with unmapped fields should not clobber those fields\n-//        String file = Shared.getTestFilePath(InstrumentationRegistry.getInstrumentation().getTargetContext(), \"text-update.txt\");\n-//        TextImporter i = new TextImporter(testCol, file);\n-//        i.initMapping();\n-//        i.run();\n-//        n.load();\n-//        assertTrue(\"1\".equals(n.getItem(\"Front\")));\n-//        assertTrue(\"x\".equals(n.getItem(\"Back\")));\n-//        assertTrue(\"3\".equals(n.getItem(\"Three\")));\n-//    }\n+    @Test\n+    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.O)\n+    public void testCsv() throws IOException {\n+        String file = Shared.getTestFilePath(InstrumentationRegistry.getInstrumentation().getTargetContext(), \"text-2fields.txt\");\n+        TextImporter i = new TextImporter(testCol, file);\n+        i.initMapping();\n+        i.run();\n+        if (TestEnvironment.isDisplayingEnglishStrings()) {", "originalCommit": "551ec57005ac9588ed3980348d6dace72ca4ae58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM5NDY1MQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6773#discussion_r463394651", "bodyText": "s/most/all but one/ :-) - there is one and only one en-US but that should be sufficient ?\nEither way, cool! This is a big feature", "author": "mikehardy", "createdAt": "2020-07-31T04:07:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI2OTI5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzNTU0MQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6773#discussion_r463535541", "bodyText": "We're API 26+, CI doesn't have 26, we test on:\n\n27 (fr-FR)\n28 (default: en-US)\n29 (pt-BR)\n30 (de-DE)\n\nso we're fine from a coverage POV, but only on one API level", "author": "david-allison-1", "createdAt": "2020-07-31T10:34:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI2OTI5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzOTU2Nw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6773#discussion_r463539567", "bodyText": "Switched to en-US anyway. Can only test in CI now (my device is en-GB)", "author": "david-allison-1", "createdAt": "2020-07-31T10:44:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI2OTI5MQ=="}], "type": "inlineReview"}, {"oid": "eaaffefda4303378252488a77d025451f1fed147", "url": "https://github.com/ankidroid/Anki-Android/commit/eaaffefda4303378252488a77d025451f1fed147", "message": "CSV Import: Stream CSV File Input\n\nEnsures that we shouldn't OOM on import\n\nThis is for API 26+, so uses Java Streams\n\nFrom code review on 6772/6773", "committedDate": "2020-07-30T21:57:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxMTY3Nw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6773#discussion_r463311677", "bodyText": "This no longer has a BOM :/", "author": "david-allison-1", "createdAt": "2020-07-30T22:42:02Z", "path": "AnkiDroid/src/androidTest/assets/text-utf8-bom.txt", "diffHunk": "@@ -0,0 +1 @@\n+Hello, world", "originalCommit": "eaaffefda4303378252488a77d025451f1fed147", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk2NzE2NQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6773#discussion_r463967165", "bodyText": "What is a BOM\u00a0?", "author": "Arthur-Milchior", "createdAt": "2020-08-01T14:29:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxMTY3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk2OTcwNQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6773#discussion_r463969705", "bodyText": "https://en.wikipedia.org/wiki/Byte_order_mark - the code should ensure that they're stripped before the file is read.", "author": "david-allison-1", "createdAt": "2020-08-01T14:58:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxMTY3Nw=="}], "type": "inlineReview"}, {"oid": "cd02941c89071646942bf3f0ce9143282ea04fa1", "url": "https://github.com/ankidroid/Anki-Android/commit/cd02941c89071646942bf3f0ce9143282ea04fa1", "message": "CSV Import: Stream CSV File Input\n\nEnsures that we shouldn't OOM on import\n\nThis is for API 26+, so uses Java Streams\n\nFrom code review on 6772/6773", "committedDate": "2020-07-31T01:24:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2OTUyNw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6773#discussion_r463369527", "bodyText": "I don't think we needed this - should either port or remove", "author": "david-allison-1", "createdAt": "2020-07-31T02:14:17Z", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/python/CsvReaderIterator.java", "diffHunk": "@@ -0,0 +1,336 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+ This file incorporates work covered by the following copyright and permission notice.\n+ Please see the file LICENSE in this directory for full details\n+\n+ Ported from https://github.com/python/cpython/blob/c88239f864a27f673c0f0a9e62d2488563f9d081/Modules/_csv.c\n+ */\n+\n+package com.ichi2.libanki.importer.python;\n+\n+import com.ichi2.libanki.importer.CsvException;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.importer.python.CsvDialect.Quoting.*;\n+import static com.ichi2.libanki.importer.python.CsvReaderIterator.State.*;\n+\n+public class CsvReaderIterator implements Iterator<List<String>> {\n+    private final CsvReader reader;\n+\n+    private int field_len;\n+    private State state;\n+    private int line_num;\n+    private List<String> fields;\n+    private int numeric_field;\n+\n+    // These were modified from a bare array and size to a StringBuilder\n+    private char[] field = new char[5000];\n+    private int field_size = 5000;\n+\n+\n+    public CsvReaderIterator(@NonNull CsvReader reader) {\n+        this.reader = reader;\n+    }\n+\n+\n+    @Override\n+    public boolean hasNext() {\n+        return this.reader.input_iter.hasNext();\n+    }\n+\n+    enum State {\n+        START_RECORD,\n+        START_FIELD,\n+        IN_QUOTED_FIELD,\n+        EAT_CRNL,\n+        AFTER_ESCAPED_CRNL,\n+        ESCAPED_CHAR,\n+        IN_FIELD,\n+        ESCAPE_IN_QUOTED_FIELD,\n+        QUOTE_IN_QUOTED_FIELD\n+    }\n+\n+    private int parse_save_field() {\n+        String field;\n+\n+        field = new String(this.field, 0, this.field_len); // ignored field.length\n+\n+        this.field_len = 0;\n+        if (this.numeric_field != 0) {\n+            Timber.w(\"skipping numeric field\");", "originalCommit": "cd02941c89071646942bf3f0ce9143282ea04fa1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk2ODAxMQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6773#discussion_r463968011", "bodyText": "What is a numeric field ?", "author": "Arthur-Milchior", "createdAt": "2020-08-01T14:38:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2OTUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk2OTg2Mw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6773#discussion_r463969863", "bodyText": "See the commented code below - it performs a conversion to a float - I don't think it's necessary as we're string based - but I might be proven wrong at a later date", "author": "david-allison-1", "createdAt": "2020-08-01T15:00:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM2OTUyNw=="}], "type": "inlineReview"}, {"oid": "1695b1b9fad3906b096929f27a7f4f7dd23c6b0d", "url": "https://github.com/ankidroid/Anki-Android/commit/1695b1b9fad3906b096929f27a7f4f7dd23c6b0d", "message": "CSV Import: Stream CSV File Input\n\nEnsures that we shouldn't OOM on import\n\nThis is for API 26+, so uses Java Streams\n\nFrom code review on 6772/6773", "committedDate": "2020-07-31T10:37:03Z", "type": "forcePushed"}, {"oid": "5e2aee7a33ba29462ec75520977ee4f9f40c2be5", "url": "https://github.com/ankidroid/Anki-Android/commit/5e2aee7a33ba29462ec75520977ee4f9f40c2be5", "message": "CSV Import: Stream CSV File Input\n\nEnsures that we shouldn't OOM on import\n\nThis is for API 26+, so uses Java Streams\n\nFrom code review on 6772/6773", "committedDate": "2020-07-31T20:10:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk2Nzc2Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/6773#discussion_r463967766", "bodyText": "I would suggest creating a utils class Triple<First,\u00a0Second, Third> as we already have Pair, so that this will avoid code duplication. As you may have seen, I expect to use such a class in other PR", "author": "Arthur-Milchior", "createdAt": "2020-08-01T14:36:05Z", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/NoteImporter.java", "diffHunk": "@@ -1,21 +1,497 @@\n package com.ichi2.libanki.importer;\n \n+import android.database.Cursor;\n+import android.text.TextUtils;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.AnkiDroidApp;\n+import com.ichi2.anki.R;\n import com.ichi2.libanki.Collection;\n+import com.ichi2.libanki.Consts;\n+import com.ichi2.libanki.DeckConfig;\n+import com.ichi2.libanki.Model;\n+import com.ichi2.libanki.utils.StringUtils;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.HtmlUtils;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.PluralsRes;\n+import androidx.annotation.StringRes;\n \n-/**\n- * This class is a stub. Nothing is implemented yet.\n- */\n+import static com.ichi2.libanki.Consts.NEW_CARDS_RANDOM;\n+import static com.ichi2.libanki.Utils.collection2Array;\n+import static com.ichi2.libanki.Utils.fieldChecksum;\n+import static com.ichi2.libanki.Utils.guid64;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.joinFields;\n+import static com.ichi2.libanki.Utils.splitFields;\n+import static com.ichi2.libanki.Utils.timestampID;\n+import static com.ichi2.libanki.importer.NoteImporter.ImportMode.ADD_MODE;\n+import static com.ichi2.libanki.importer.NoteImporter.ImportMode.IGNORE_MODE;\n+import static com.ichi2.libanki.importer.NoteImporter.ImportMode.UPDATE_MODE;\n+\n+// Ported from https://github.com/ankitects/anki/blob/50fdf9b03dec33c99a501f332306f378db5eb4ea/pylib/anki/importing/noteimp.py\n+// Aside from 9f676dbe0b2ad9b87a3bf89d7735b4253abd440e, which allows empty notes.\n public class NoteImporter extends Importer {\n+\n+    private boolean mNeedMapper = true;\n+    private boolean mNeedDelimiter = false;\n+    private boolean mAllowHTML = false;\n+    private ImportMode mImportMode = UPDATE_MODE;\n+    /** Note: elements can be null */\n+    @Nullable\n+    private List<String> mMapping;\n+    @Nullable\n+    private String mTagModified ;\n+\n+\n+    private final Model mModel;\n+\n+    /** _tagsMapped in python */\n+    private boolean mTagsMapped;\n+\n+    /** _fmap in Python */\n+    private Map<String, Pair<Integer, JSONObject>> mFMap;\n+\n+    /** _nextID in python */\n+    private long mNextId;\n+    private ArrayList<Long> _ids;\n+    private List<Triple> _cards;\n+    private boolean mEmptyNotes;\n+    private int mUpdateCount;\n+\n+\n     public NoteImporter(Collection col, String file) {\n         super(col, file);\n+        this.mModel = col.getModels().current();\n+        this.mMapping = null;\n+        this.mTagModified = null;\n+        this.mTagsMapped = false;\n     }\n \n+\n     @Override\n     public void run() {\n-        // do nothing\n+        Assert.that(mMapping != null);\n+        Assert.that(!mMapping.isEmpty());\n+        List<ForeignNote> c = foreignNotes();\n+        importNotes(c);\n+    }\n+\n+\n+\n+    /** The number of fields.*/\n+    protected int fields() {\n+        return 0;\n+    }\n+\n+\n+    public void initMapping() {\n+        List<String> flds = new ArrayList<>();\n+        JSONArray array = mModel.getJSONArray(\"flds\");\n+        for (int i = 0; i < array.length(); i++) {\n+            flds.add(array.getJSONObject(i).getString(\"name\"));\n+        }\n+        // truncate to provided count\n+        flds = flds.subList(0, Math.min(flds.size(), fields()));\n+        // if there's room left, add tags\n+        if (fields() > flds.size()) {\n+            flds.add(\"_tags\");\n+        }\n+        // and if there's still room left, pad\n+        int iterations = fields() - flds.size();\n+        for (int i = 0; i < iterations; i++) {\n+            flds.add(null);\n+        }\n+        mMapping = flds;\n+    }\n+\n+\n+    boolean mappingOk() {\n+        return mMapping.contains(mModel.getJSONArray(\"flds\").getJSONObject(0).getString(\"name\"));\n+    }\n+\n+\n+    @NonNull\n+    protected List<ForeignNote> foreignNotes() {\n+        return new ArrayList<>();\n+    }\n+\n+    /** Open file and ensure it's in the right format. */\n+    protected void open() {\n+        // intentionally empty\n+    }\n+\n+\n+    /** Closes the open file. */\n+    protected void close() {\n+        // intentionally empty\n+    }\n+\n+\n+    /** Convert each card into a note, apply attributes and add to col. */\n+    public void importNotes(List<ForeignNote> notes) {\n+        Assert.that(mappingOk());\n+        // note whether tags are mapped\n+        mTagsMapped = false;\n+        for (String f : mMapping) {\n+            if (\"_tags\".equals(f)) {\n+                mTagsMapped = true;\n+                break;\n+            }\n+        }\n+        // gather checks for duplicate comparison\n+        HashMap<Long, List<Long>> csums = new HashMap<>();\n+        try (Cursor c = mCol.getDb().getDatabase().query(\"select csum, id from notes where mid = ?\", new Object[] {mModel.getLong(\"id\")})) {\n+            while (c.moveToNext()) {\n+                long csum = c.getLong(0);\n+                long id = c.getLong(1);\n+                if (csums.containsKey(csum)) {\n+                    csums.get(csum).add(id);\n+                } else {\n+                    csums.put(csum, new ArrayList<>(Collections.singletonList(id)));\n+                }\n+            }\n+        }\n+\n+        HashMap<String, Boolean> firsts = new HashMap<>();\n+        int fld0index = mMapping.indexOf(mModel.getJSONArray(\"flds\").getJSONObject(0).getString(\"name\"));\n+        mFMap = mCol.getModels().fieldMap(mModel);\n+        mNextId = timestampID(mCol.getDb(), \"notes\");\n+        // loop through the notes\n+        List<Object[]> updates = new ArrayList<>();\n+        List<String> updateLog = new ArrayList<>();\n+        // PORT: Translations moved closer to their sources\n+        List<Object[]> _new = new ArrayList<>();\n+        _ids = new ArrayList<>();\n+        _cards = new ArrayList<>();\n+        mEmptyNotes = false;\n+        int dupeCount = 0;\n+        List<String> dupes = new ArrayList<>();\n+        for (ForeignNote n : notes) {\n+            for (int c = 0; c < n.mFields.size(); c++) {\n+                if (!this.mAllowHTML) {\n+                    n.mFields.set(c, HtmlUtils.escape(n.mFields.get(c)));\n+                }\n+                n.mFields.set(c, n.mFields.get(c).trim());\n+                if (!this.mAllowHTML) {\n+                    n.mFields.set(c, n.mFields.get(c).replace(\"\\n\", \"<br>\"));\n+                }\n+            }\n+            String fld0 = n.mFields.get(fld0index);\n+            long csum = fieldChecksum(fld0);\n+            // first field must exist\n+            if (fld0 == null || fld0.length() == 0) {\n+                getLog().add(getString(R.string.note_importer_error_empty_first_field, TextUtils.join(\" \", n.mFields)));\n+                continue;\n+            }\n+            // earlier in import?\n+            if (firsts.containsKey(fld0) && mImportMode != ADD_MODE) {\n+                // duplicates in source file; log and ignore\n+                getLog().add(getString(R.string.note_importer_error_appeared_twice, fld0));\n+                continue;\n+            }\n+            firsts.put(fld0, true);\n+            // already exists?\n+            boolean found = false;\n+            if (csums.containsKey(csum)) {\n+                // csum is not a guarantee; have to check\n+                for (Long id : csums.get(csum)) {\n+                    String flds = mCol.getDb().queryString(\"select flds from notes where id = ?\", id);\n+                    String[] sflds = splitFields(flds);\n+                    if (fld0.equals(sflds[0])) {\n+                        // duplicate\n+                        found = true;\n+                        if (mImportMode == UPDATE_MODE) {\n+                            Object[] data = updateData(n, id, sflds);\n+                            if (data != null && data.length > 0) {\n+                                updates.add(data);\n+                                updateLog.add(getString(R.string.note_importer_error_first_field_matched, fld0));\n+                                dupeCount += 1;\n+                                found = true;\n+                            }\n+                        } else if (mImportMode == IGNORE_MODE) {\n+                            dupeCount += 1;\n+                        } else if (mImportMode == ADD_MODE) {\n+                            // allow duplicates in this case\n+                            if (!dupes.contains(fld0)) {\n+                                // only show message once, no matter how many\n+                                // duplicates are in the collection already\n+                                updateLog.add(getString(R.string.note_importer_error_added_duplicate_first_field, fld0));\n+                                dupes.add(fld0);\n+                            }\n+                            found = false;\n+                        }\n+                    }\n+                }\n+            }\n+            // newly add\n+            if (!found) {\n+                Object[] data = newData(n);\n+                if (data != null && data.length > 0) {\n+                    _new.add(data);\n+                    // note that we've seen this note once already\n+                    firsts.put(fld0, true);\n+                }\n+            }\n+        }\n+        addNew(_new);\n+        addUpdates(updates);\n+        // make sure to update sflds, etc\n+        mCol.updateFieldCache(collection2Array(_ids));\n+        // generate cards\n+        if (!mCol.genCards(_ids).isEmpty()) {\n+            this.getLog().add(0, getString(R.string.note_importer_empty_cards_found));\n+        }\n+\n+\n+        // apply scheduling updates\n+        updateCards();\n+        // we randomize or order here, to ensure that siblings\n+        // have the same due#\n+        long did = mCol.getDecks().selected();\n+        DeckConfig conf = mCol.getDecks().confForDid(did);\n+        // in order due?\n+        if (conf.getJSONObject(\"new\").getInt(\"order\") == NEW_CARDS_RANDOM) {\n+            mCol.getSched().randomizeCards(did);\n+        }\n+        String part1 = getQuantityString(R.plurals.note_importer_notes_added, _new.size());\n+        String part2 = getQuantityString(R.plurals.note_importer_notes_updated, mUpdateCount);\n+        int unchanged;\n+        if (mImportMode == UPDATE_MODE) {\n+            unchanged = dupeCount - mUpdateCount;\n+        } else if (mImportMode == IGNORE_MODE) {\n+            unchanged = dupeCount;\n+        } else {\n+            unchanged = 0;\n+        }\n+        String part3 = getQuantityString(R.plurals.note_importer_notes_unchanged, unchanged);\n+        mLog.add(String.format(\"%s, %s, %s.\", part1, part2, part3));\n+        mLog.addAll(updateLog);\n+        if (mEmptyNotes) {\n+            mLog.add(getString(R.string.note_importer_error_empty_notes));\n+        }\n+        mTotal = _ids.size();\n+    }\n+\n+    @Nullable\n+    private Object[] newData(ForeignNote n) {\n+        long id = mNextId;\n+        mNextId++;\n+        _ids.add(id);\n+        if (!processFields(n)) {\n+            return null;\n+        }\n+        for (Map.Entry<Integer, ForeignCard> a : n.cards.entrySet()) {\n+            _cards.add(new Triple(id, a.getKey(), a.getValue()));\n+        }\n+        return new Object[] {\n+                id,\n+                guid64(),\n+                mModel.getLong(\"id\"),\n+                intTime(),\n+                mCol.usn(),\n+                mCol.getTags().join(n.mTags),\n+                n.fieldsStr,\n+                \"\",\n+                \"\",\n+                0,\n+                \"\"\n+        };\n+    }\n+\n+    private void addNew(List<Object[]> rows) {\n+        mCol.getDb().executeMany(\"insert or replace into notes values (?,?,?,?,?,?,?,?,?,?,?)\", rows);\n+    }\n+\n+\n+    private Object[] updateData(ForeignNote n, long id, String[] sflds) {\n+        _ids.add(id);\n+        if (!processFields(n, sflds)) {\n+            return null;\n+        }\n+        String tags;\n+        if (mTagsMapped) {\n+            tags = mCol.getTags().join(n.mTags);\n+            return new Object[] {intTime(), mCol.usn(), n.fieldsStr, tags, id, n.fieldsStr, tags };\n+        } else if (mTagModified != null) {\n+            tags = mCol.getDb().queryString(\"select tags from notes where id = ?\", id);\n+            List<String> tagList = mCol.getTags().split(tags);\n+            tagList.addAll(StringUtils.splitOnWhitespace(mTagModified));\n+            tags = mCol.getTags().join(tagList);\n+            return new Object[] {intTime(), mCol.usn(), n.fieldsStr, tags, id, n.fieldsStr };\n+        } else {\n+            // This looks inconsistent but is fine, see: addUpdates\n+            return new Object[] {intTime(), mCol.usn(), n.fieldsStr, id, n.fieldsStr };\n+        }\n     }\n \n+\n+    private void addUpdates(List<Object[]> rows) {\n+        int changes = mCol.getDb().queryScalar(\"select total_changes()\");\n+        if (mTagsMapped) {\n+            mCol.getDb().executeMany(\n+                    \"update notes set mod = ?, usn = ?, flds = ?, tags = ? \" +\n+                    \"where id = ? and (flds != ? or tags != ?)\",\n+                    rows\n+                    );\n+        } else if (mTagModified != null) {\n+            mCol.getDb().executeMany(\n+                    \"update notes set mod = ?, usn = ?, flds = ?, tags = ? \" +\n+                    \"where id = ? and flds != ?\",\n+                    rows\n+            );\n+\n+        } else {\n+            mCol.getDb().executeMany(\n+                    \"update notes set mod = ?, usn = ?, flds = ? \" +\n+                    \"where id = ? and flds != ?\",\n+                    rows\n+            );\n+        }\n+        int changes2 = mCol.getDb().queryScalar(\"select total_changes()\");\n+        mUpdateCount = changes2 - changes;\n+    }\n+\n+\n+    private boolean processFields(ForeignNote note) {\n+        return processFields(note, null);\n+    }\n+\n+    private boolean processFields(ForeignNote note, @Nullable String[] fields) {\n+        if (fields == null) {\n+            int length = mModel.getJSONArray(\"flds\").length();\n+            fields = new String[length];\n+            for (int i = 0; i < length; i++) {\n+                fields[i] = \"\";\n+            }\n+        }\n+        for (Map.Entry<Integer, String> entry : enumerate(mMapping)) {\n+            if (entry.getValue() == null) {\n+                continue;\n+            }\n+            int c = entry.getKey();\n+            if (entry.getValue().equals(\"_tags\")) {\n+                note.mTags.addAll(mCol.getTags().split(note.mFields.get(c)));\n+            } else {\n+                Integer sidx = mFMap.get(entry.getValue()).first;\n+                fields[sidx] = note.mFields.get(c);\n+            }\n+        }\n+        note.fieldsStr = joinFields(fields);\n+        ArrayList<Integer> ords = mCol.getModels().availOrds(mModel, fields);\n+        if (ords.isEmpty()) {\n+            mEmptyNotes = true;\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+\n+    private void updateCards() {\n+        ArrayList<Object[]> data = new ArrayList<>();\n+        for (Triple t : _cards) {\n+            ForeignCard c = t.mCard;\n+            data.add(new Object[] { c.mIvl, c.mDue, c.mFactor, c.mReps, c.mLapses, t.mNid, t.mOrd});\n+        }\n+\n+        // we assume any updated cards are reviews\n+        mCol.getDb().executeMany(\"update cards set type = 2, queue = 2, ivl = ?, due = ?, \" +\n+                \"factor = ?, reps = ?, lapses = ? where nid = ? and ord = ?\", data);\n+    }\n+\n+    /** Not in libAnki */\n+\n+    private <T> List<Map.Entry<Integer, T>> enumerate(List<T> list) {\n+        List<Map.Entry<Integer, T>> ret = new ArrayList<>();\n+        int index = 0;\n+        for (T el : list) {\n+            ret.add(new AbstractMap.SimpleEntry<>(index, el));\n+            index++;\n+        }\n+        return ret;\n+    }\n+\n+\n     public int getTotal() {\n         return mTotal;\n     }\n+\n+    public void setImportMode(ImportMode mode) {\n+        this.mImportMode = mode;\n+    }\n+\n+\n+    private String getQuantityString(@PluralsRes int res, int quantity) {\n+        return AnkiDroidApp.getAppResources().getQuantityString(res, quantity, quantity);\n+    }\n+\n+\n+    @NonNull\n+    protected String getString(@StringRes int res) {\n+        return AnkiDroidApp.getAppResources().getString(res);\n+    }\n+\n+\n+    @NonNull\n+    protected String getString(int res, @NonNull Object... formatArgs) {\n+        return AnkiDroidApp.getAppResources().getString(res, formatArgs);\n+    }\n+\n+\n+    public void setAllowHtml(boolean allowHtml) {\n+        this.mAllowHTML = allowHtml;\n+    }\n+\n+\n+    public enum ImportMode {\n+        /** update if first field matches existing note */\n+        UPDATE_MODE, //0\n+        /** ignore if first field matches existing note */\n+        IGNORE_MODE, //1\n+        /** ADD_MODE: import even if first field matches existing note */\n+        ADD_MODE, //2\n+    }\n+\n+    /** A temporary object storing fields and attributes. */\n+    public static class ForeignNote {\n+        public List<String> mFields = new ArrayList<>();\n+        public List<String> mTags = new ArrayList<>();\n+        public Object deck = new Object();\n+        public Map<Integer, ForeignCard> cards = new HashMap<>();\n+        public String fieldsStr = \"\";\n+    }\n+\n+    public static class ForeignCard {\n+        public long mDue = 0;\n+        public int mIvl = 1;\n+        public int mFactor = Consts.STARTING_FACTOR;\n+        public int mReps = 0;\n+        public int mLapses = 0;\n+    }\n+\n+    private static class Triple {\n+", "originalCommit": "c17b4372ff729b817ff81572e237359644b64190", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c025e936a8a8c7cea0a644972c6ccfa19f215b91", "url": "https://github.com/ankidroid/Anki-Android/commit/c025e936a8a8c7cea0a644972c6ccfa19f215b91", "message": "CSV Import: Add Backend\n\nPorted from both the python standard library and libAnki\n\nNote: 9f676dbe0b2ad9b87a3bf89d7735b4253abd440e (allowing empty notes)\nwas not ported\n\nRelated to ticket 6772", "committedDate": "2020-08-02T15:28:40Z", "type": "commit"}, {"oid": "a762257e13e9dbc85f718de8bbed6ce9e3f875e6", "url": "https://github.com/ankidroid/Anki-Android/commit/a762257e13e9dbc85f718de8bbed6ce9e3f875e6", "message": "CSV Import: Stream CSV File Input\n\nEnsures that we shouldn't OOM on import\n\nThis is for API 26+, so uses Java Streams\n\nFrom code review on 6772/6773", "committedDate": "2020-08-02T15:28:44Z", "type": "commit"}, {"oid": "a762257e13e9dbc85f718de8bbed6ce9e3f875e6", "url": "https://github.com/ankidroid/Anki-Android/commit/a762257e13e9dbc85f718de8bbed6ce9e3f875e6", "message": "CSV Import: Stream CSV File Input\n\nEnsures that we shouldn't OOM on import\n\nThis is for API 26+, so uses Java Streams\n\nFrom code review on 6772/6773", "committedDate": "2020-08-02T15:28:44Z", "type": "forcePushed"}]}