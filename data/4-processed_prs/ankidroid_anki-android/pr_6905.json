{"pr_number": 6905, "pr_title": "Fixes #6903", "pr_createdAt": "2020-08-16T23:34:53Z", "pr_url": "https://github.com/ankidroid/Anki-Android/pull/6905", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE3NzYzMw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6905#discussion_r471177633", "bodyText": "yessss! love seeing a test for it that pokes the problem", "author": "mikehardy", "createdAt": "2020-08-17T00:08:07Z", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -139,4 +146,62 @@ public void onPostExecute(TaskData result) {\n         waitForAsyncTasksToComplete();\n         assertTrue(executed[0]);\n     }\n+\n+    @Test\n+    public void CardQueue() {\n+        Collection col = getCol();\n+        SchedV2 sched = (SchedV2) col.getSched();\n+        SchedV2.SimpleCardQueue queue = sched.new SimpleCardQueue();\n+        assertEquals(queue.size(), 0);\n+        final int nbCard = 6;\n+        long[] cids = new long[nbCard];\n+        for (int i = 0; i < nbCard; i++) {\n+            Note note = addNoteUsingBasicModel(\"foo\", \"bar\");\n+            ArrayList<Card> cards = note.cards();\n+            Card card = cards.get(0);\n+            long cid = card.getId();\n+            cids[i] = cid;\n+            queue.add(cid);\n+        }\n+        assertEquals(queue.size(), nbCard);\n+        assertEquals(queue.removeFirstCard().getId(), cids[0]);\n+        assertEquals(queue.size(), nbCard - 1);\n+        queue.remove(cids[1]);\n+        assertEquals(queue.size(), nbCard - 2);\n+        queue.remove(cids[3]);\n+        assertEquals(queue.size(), nbCard - 3);\n+        assertEquals(queue.removeFirstCard().getId(), cids[2]);\n+        assertEquals(queue.size(), nbCard - 4);\n+        assertEquals(queue.removeFirstCard().getId(), cids[4]);\n+        assertEquals(queue.size(), nbCard - 5);\n+    }\n+\n+    @Test\n+    public void getCards() {\n+        // #6903", "originalCommit": "a3a4d16ebcc8990f3db5b4268845124ea4255d50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE3ODc1NQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6905#discussion_r471178755", "bodyText": "Optional: you could implement the interface to remove this method. Likely not worth it", "author": "david-allison-1", "createdAt": "2020-08-17T00:17:02Z", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/SchedV2.java", "diffHunk": "@@ -128,25 +128,56 @@ public int compareTo(LrnCard o) {\n         }\n     }\n \n-    protected abstract class CardQueue<T extends Card.Cache> extends LinkedList<T> {\n+    protected abstract class CardQueue<T extends Card.Cache> {\n+        private final LinkedList<T> mQueue = new LinkedList<>();\n+\n         public void loadFirstCard() {\n-            if (!isEmpty()) {\n+            if (!mQueue.isEmpty()) {\n                 // No nead to reload. If the card was changed, reset would have been called and emptied the queue\n-                get(0).loadQA(false, false);\n+                mQueue.get(0).loadQA(false, false);\n             }\n         }\n \n         public Card removeFirstCard() throws NoSuchElementException {\n-            return remove().getCard();\n+            return mQueue.remove().getCard();\n         }\n \n         public boolean remove(long cid) {\n             // CardCache and LrnCache with the same id will be considered as equal so it's a valid implementation.\n-            return remove(new Card.Cache(mCol, cid));\n+            return mQueue.remove(new Card.Cache(mCol, cid));\n+        }\n+\n+        public void add(T elt) {\n+            mQueue.add(elt);\n+        }\n+\n+        public void clear() {\n+            mQueue.clear();\n+        }\n+\n+        public boolean isEmpty() {\n+            return isEmpty();\n+        }\n+\n+        public int size() {\n+            return mQueue.size();\n+        }\n+\n+        protected LinkedList<T> getQueue() {\n+            return mQueue;\n+        }\n+\n+        public void shuffle(Random r) {\n+            Collections.shuffle(mQueue, r);", "originalCommit": "fc2330b50796048dfa11fe53a0d8ca8fbcb36052", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE3ODkyNg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6905#discussion_r471178926", "bodyText": "Optional: assertThat(queue, hasSize(0));", "author": "david-allison-1", "createdAt": "2020-08-17T00:18:33Z", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -139,4 +146,62 @@ public void onPostExecute(TaskData result) {\n         waitForAsyncTasksToComplete();\n         assertTrue(executed[0]);\n     }\n+\n+    @Test\n+    public void CardQueue() {\n+        Collection col = getCol();\n+        SchedV2 sched = (SchedV2) col.getSched();\n+        SchedV2.SimpleCardQueue queue = sched.new SimpleCardQueue();\n+        assertEquals(queue.size(), 0);", "originalCommit": "fc2330b50796048dfa11fe53a0d8ca8fbcb36052", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE4MTA4Mw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6905#discussion_r471181083", "bodyText": "Done", "author": "Arthur-Milchior", "createdAt": "2020-08-17T00:34:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE3ODkyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE3OTA3Mg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6905#discussion_r471179072", "bodyText": "Didn't we add getFirstCard for situations like this? Could save a little time per test", "author": "david-allison-1", "createdAt": "2020-08-17T00:19:45Z", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -139,4 +146,62 @@ public void onPostExecute(TaskData result) {\n         waitForAsyncTasksToComplete();\n         assertTrue(executed[0]);\n     }\n+\n+    @Test\n+    public void CardQueue() {\n+        Collection col = getCol();\n+        SchedV2 sched = (SchedV2) col.getSched();\n+        SchedV2.SimpleCardQueue queue = sched.new SimpleCardQueue();\n+        assertEquals(queue.size(), 0);\n+        final int nbCard = 6;\n+        long[] cids = new long[nbCard];\n+        for (int i = 0; i < nbCard; i++) {\n+            Note note = addNoteUsingBasicModel(\"foo\", \"bar\");\n+            ArrayList<Card> cards = note.cards();", "originalCommit": "fc2330b50796048dfa11fe53a0d8ca8fbcb36052", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIxOTc2MA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6905#discussion_r471219760", "bodyText": "Indeed. If we really want efficiency however, directly querying the database would be better, since here we create a card object only to get its id.\nNo way to gets cids from note I thing", "author": "Arthur-Milchior", "createdAt": "2020-08-17T03:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE3OTA3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE3OTE1OQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6905#discussion_r471179159", "bodyText": "Could do with better naming", "author": "david-allison-1", "createdAt": "2020-08-17T00:20:22Z", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -139,4 +146,62 @@ public void onPostExecute(TaskData result) {\n         waitForAsyncTasksToComplete();\n         assertTrue(executed[0]);\n     }\n+\n+    @Test\n+    public void CardQueue() {\n+        Collection col = getCol();\n+        SchedV2 sched = (SchedV2) col.getSched();\n+        SchedV2.SimpleCardQueue queue = sched.new SimpleCardQueue();\n+        assertEquals(queue.size(), 0);\n+        final int nbCard = 6;\n+        long[] cids = new long[nbCard];\n+        for (int i = 0; i < nbCard; i++) {\n+            Note note = addNoteUsingBasicModel(\"foo\", \"bar\");\n+            ArrayList<Card> cards = note.cards();\n+            Card card = cards.get(0);\n+            long cid = card.getId();\n+            cids[i] = cid;\n+            queue.add(cid);\n+        }\n+        assertEquals(queue.size(), nbCard);\n+        assertEquals(queue.removeFirstCard().getId(), cids[0]);\n+        assertEquals(queue.size(), nbCard - 1);\n+        queue.remove(cids[1]);\n+        assertEquals(queue.size(), nbCard - 2);\n+        queue.remove(cids[3]);\n+        assertEquals(queue.size(), nbCard - 3);\n+        assertEquals(queue.removeFirstCard().getId(), cids[2]);\n+        assertEquals(queue.size(), nbCard - 4);\n+        assertEquals(queue.removeFirstCard().getId(), cids[4]);\n+        assertEquals(queue.size(), nbCard - 5);\n+    }\n+\n+    @Test\n+    public void getCards() {", "originalCommit": "fc2330b50796048dfa11fe53a0d8ca8fbcb36052", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE4MTE3Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/6905#discussion_r471181176", "bodyText": "siblingCorrectlyBuried", "author": "Arthur-Milchior", "createdAt": "2020-08-17T00:34:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE3OTE1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE3OTIyNw==", "url": "https://github.com/ankidroid/Anki-Android/pull/6905#discussion_r471179227", "bodyText": "Java naming standards, and could do with a more descriptive name", "author": "david-allison-1", "createdAt": "2020-08-17T00:20:44Z", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -139,4 +146,62 @@ public void onPostExecute(TaskData result) {\n         waitForAsyncTasksToComplete();\n         assertTrue(executed[0]);\n     }\n+\n+    @Test\n+    public void CardQueue() {", "originalCommit": "fc2330b50796048dfa11fe53a0d8ca8fbcb36052", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE4MTMwMg==", "url": "https://github.com/ankidroid/Anki-Android/pull/6905#discussion_r471181302", "bodyText": "testCardQueue\nThat's really the whole point, testing this class", "author": "Arthur-Milchior", "createdAt": "2020-08-17T00:35:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE3OTIyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE3OTM1NA==", "url": "https://github.com/ankidroid/Anki-Android/pull/6905#discussion_r471179354", "bodyText": "Note.cards() is slow, factor it into one call", "author": "david-allison-1", "createdAt": "2020-08-17T00:21:36Z", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -139,4 +146,62 @@ public void onPostExecute(TaskData result) {\n         waitForAsyncTasksToComplete();\n         assertTrue(executed[0]);\n     }\n+\n+    @Test\n+    public void CardQueue() {\n+        Collection col = getCol();\n+        SchedV2 sched = (SchedV2) col.getSched();\n+        SchedV2.SimpleCardQueue queue = sched.new SimpleCardQueue();\n+        assertEquals(queue.size(), 0);\n+        final int nbCard = 6;\n+        long[] cids = new long[nbCard];\n+        for (int i = 0; i < nbCard; i++) {\n+            Note note = addNoteUsingBasicModel(\"foo\", \"bar\");\n+            ArrayList<Card> cards = note.cards();\n+            Card card = cards.get(0);\n+            long cid = card.getId();\n+            cids[i] = cid;\n+            queue.add(cid);\n+        }\n+        assertEquals(queue.size(), nbCard);\n+        assertEquals(queue.removeFirstCard().getId(), cids[0]);\n+        assertEquals(queue.size(), nbCard - 1);\n+        queue.remove(cids[1]);\n+        assertEquals(queue.size(), nbCard - 2);\n+        queue.remove(cids[3]);\n+        assertEquals(queue.size(), nbCard - 3);\n+        assertEquals(queue.removeFirstCard().getId(), cids[2]);\n+        assertEquals(queue.size(), nbCard - 4);\n+        assertEquals(queue.removeFirstCard().getId(), cids[4]);\n+        assertEquals(queue.size(), nbCard - 5);\n+    }\n+\n+    @Test\n+    public void getCards() {\n+        // #6903\n+        Collection col = getCol();\n+        AbstractSched sched = col.getSched();\n+        Models models = col.getModels();\n+        DeckConfig dconf = col.getDecks().getConf(1);\n+        dconf.getJSONObject(\"new\").put(\"bury\", true);\n+        final int nbNote = 2;\n+        Note[] notes = new Note[nbNote];\n+        for (int i = 0; i < nbNote; i++) {\n+            Note note  = addNoteUsingBasicAndReversedModel(\"front\", \"back\");\n+            notes[i] = note;\n+            Timber.d(\"note %d has cards %d and %d\", i, note.cards().get(0).getId(), note.cards().get(1).getId());", "originalCommit": "fc2330b50796048dfa11fe53a0d8ca8fbcb36052", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE4MTM0OQ==", "url": "https://github.com/ankidroid/Anki-Android/pull/6905#discussion_r471181349", "bodyText": "Actually, I remove the timber.\u00a0Used it for debugging. I don't want it anymore", "author": "Arthur-Milchior", "createdAt": "2020-08-17T00:35:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE3OTM1NA=="}], "type": "inlineReview"}, {"oid": "7791ce8dda8721c09d4f5e82e5b84bef3c0b8d3a", "url": "https://github.com/ankidroid/Anki-Android/commit/7791ce8dda8721c09d4f5e82e5b84bef3c0b8d3a", "message": "NF: inner class outer", "committedDate": "2020-08-17T00:37:55Z", "type": "forcePushed"}, {"oid": "cb66e9b4ad973d27f8da8c0d08080dbb704aa5f2", "url": "https://github.com/ankidroid/Anki-Android/commit/cb66e9b4ad973d27f8da8c0d08080dbb704aa5f2", "message": "NF: inner class outer", "committedDate": "2020-08-17T00:53:12Z", "type": "forcePushed"}, {"oid": "fb3f3a8e645b9f3887cfb556ae0a10cb01b5a3bd", "url": "https://github.com/ankidroid/Anki-Android/commit/fb3f3a8e645b9f3887cfb556ae0a10cb01b5a3bd", "message": "NF: inner class outer", "committedDate": "2020-08-17T01:05:23Z", "type": "forcePushed"}, {"oid": "f7d60806843efe45fb7f8cb70a2d5f2885a2974b", "url": "https://github.com/ankidroid/Anki-Android/commit/f7d60806843efe45fb7f8cb70a2d5f2885a2974b", "message": "NF: inner class outer", "committedDate": "2020-08-17T03:56:29Z", "type": "forcePushed"}, {"oid": "e45696e65055ca386e211ed9305c488f46d2743f", "url": "https://github.com/ankidroid/Anki-Android/commit/e45696e65055ca386e211ed9305c488f46d2743f", "message": "NF: inner class outer", "committedDate": "2020-08-17T03:58:18Z", "type": "forcePushed"}, {"oid": "2062daa38a55c995baca191ea792f45de1b03862", "url": "https://github.com/ankidroid/Anki-Android/commit/2062daa38a55c995baca191ea792f45de1b03862", "message": "NF: Regression test for 6903", "committedDate": "2020-08-17T04:17:20Z", "type": "commit"}, {"oid": "933ffddc8e1942dcea005e68b594e000395525f9", "url": "https://github.com/ankidroid/Anki-Android/commit/933ffddc8e1942dcea005e68b594e000395525f9", "message": "NF: use correct type\n\nSeems that in this case, the overriding of `remove` was not detected, because for a `List<>`; it thought I used\n`remove(Object)` instead of the expected `remove(long)`\n\nThe second interesting thing here is that the class CardQueue was added last minute, and not tested in my merge branch\nas the remaining of the PR.", "committedDate": "2020-08-17T04:17:20Z", "type": "commit"}, {"oid": "19b59aa1f4d9b1f62fd307c0843a6a4e8cf2a4fe", "url": "https://github.com/ankidroid/Anki-Android/commit/19b59aa1f4d9b1f62fd307c0843a6a4e8cf2a4fe", "message": "NF: encapsulate list in card queue", "committedDate": "2020-08-17T04:17:20Z", "type": "commit"}, {"oid": "0ea0b92077e99f934cbb3969a95361ba93187f82", "url": "https://github.com/ankidroid/Anki-Android/commit/0ea0b92077e99f934cbb3969a95361ba93187f82", "message": "NF: inner class outer", "committedDate": "2020-08-17T04:17:20Z", "type": "forcePushed"}, {"oid": "883f18acddd52e857f4495c0d4efbe627b4b3777", "url": "https://github.com/ankidroid/Anki-Android/commit/883f18acddd52e857f4495c0d4efbe627b4b3777", "message": "NF: inner class outer", "committedDate": "2020-08-17T04:18:07Z", "type": "commit"}, {"oid": "883f18acddd52e857f4495c0d4efbe627b4b3777", "url": "https://github.com/ankidroid/Anki-Android/commit/883f18acddd52e857f4495c0d4efbe627b4b3777", "message": "NF: inner class outer", "committedDate": "2020-08-17T04:18:07Z", "type": "forcePushed"}]}