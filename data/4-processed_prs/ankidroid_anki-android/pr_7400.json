{"pr_number": 7400, "pr_title": "Add \"Card Info\" screen", "pr_createdAt": "2020-10-18T02:24:23Z", "pr_url": "https://github.com/ankidroid/Anki-Android/pull/7400", "timeline": [{"oid": "9a89a4ede03fbf896bc922b3d3e849f5e7989b12", "url": "https://github.com/ankidroid/Anki-Android/commit/9a89a4ede03fbf896bc922b3d3e849f5e7989b12", "message": "Add \"Card Info\" screen\n\nFixes 7397", "committedDate": "2020-10-18T02:28:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwODAyMA==", "url": "https://github.com/ankidroid/Anki-Android/pull/7400#discussion_r507008020", "bodyText": "This is a pain. We want to show total time, or average time in fractions of a second, but Android's plurals don't support floats.\nI don't really know what to do here.", "author": "david-allison-1", "createdAt": "2020-10-18T02:39:22Z", "path": "AnkiDroid/src/main/res/values/02-strings.xml", "diffHunk": "@@ -238,6 +238,11 @@\n         <item quantity=\"one\">%s year</item>\n         <item quantity=\"other\">%s years</item>\n     </plurals>\n+\n+    <!-- A decimal number of seconds.\n+    Please give this a best-effort translation and explain the requirements for\n+    formatting decimals in your language in the CrowdIn comments -->\n+    <string name=\"time_span_decimal_seconds\">%s seconds</string>", "originalCommit": "9a89a4ede03fbf896bc922b3d3e849f5e7989b12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE4MjA2OA==", "url": "https://github.com/ankidroid/Anki-Android/pull/7400#discussion_r507182068", "bodyText": "rounding and move on IMHO", "author": "mikehardy", "createdAt": "2020-10-18T16:17:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwODAyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE4MjY2Ng==", "url": "https://github.com/ankidroid/Anki-Android/pull/7400#discussion_r507182666", "bodyText": "How does this handle activity restarts? the intent won't be there, needs an mCardId + onSaveInstanceState + check for card id persisted in bundle and set in onCreate ?", "author": "mikehardy", "createdAt": "2020-10-18T16:22:45Z", "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardInfo.java", "diffHunk": "@@ -0,0 +1,534 @@\n+/*\n+ *  Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+ *\n+ *  This program is free software; you can redistribute it and/or modify it under\n+ *  the terms of the GNU General Public License as published by the Free Software\n+ *  Foundation; either version 3 of the License, or (at your option) any later\n+ *  version.\n+ *\n+ *  This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ *  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ *  PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License along with\n+ *  this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki;\n+\n+import android.annotation.SuppressLint;\n+import android.content.Context;\n+import android.content.res.TypedArray;\n+import android.database.Cursor;\n+import android.os.Build;\n+import android.os.Bundle;\n+import android.text.Spannable;\n+import android.text.SpannableString;\n+import android.view.Gravity;\n+import android.view.View;\n+import android.widget.TableLayout;\n+import android.widget.TableRow;\n+import android.widget.TextView;\n+\n+import com.ichi2.libanki.Card;\n+import com.ichi2.libanki.Collection;\n+import com.ichi2.libanki.Consts;\n+import com.ichi2.libanki.Model;\n+import com.ichi2.libanki.Models;\n+import com.ichi2.libanki.Utils;\n+import com.ichi2.ui.FixedTextView;\n+import com.ichi2.utils.FunctionalInterfaces;\n+import com.ichi2.utils.UiUtil;\n+\n+import java.text.DateFormat;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import androidx.annotation.CheckResult;\n+import androidx.annotation.IdRes;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.VisibleForTesting;\n+import androidx.core.content.ContextCompat;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.stats.Stats.SECONDS_PER_DAY;\n+\n+public class CardInfo extends AnkiActivity {\n+    \n+    private static final long INVALID_CARD_ID = -1;\n+\n+    private static final DateFormat sDateFormat = DateFormat.getDateInstance();\n+    private static final DateFormat sDateTimeFormat = DateFormat.getDateTimeInstance();\n+    private CardInfoModel mModel;\n+\n+\n+    @Override\n+    protected void onCreate(Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+\n+        setContentView(R.layout.card_info);\n+\n+        if (!hasValidCardId()) {\n+            UIUtils.showThemedToast(this, getString(R.string.card_info_cannot_load), false);\n+            finishWithoutAnimation();\n+            return;\n+        }\n+\n+        enableToolbar();\n+\n+        startLoadingCollection();\n+    }\n+\n+\n+    @Override\n+    protected void onCollectionLoaded(Collection col) {\n+        super.onCollectionLoaded(col);\n+\n+        Card c = getCard(col);\n+\n+        if (c == null) {\n+            UIUtils.showThemedToast(this, getString(R.string.card_info_cannot_load), false);\n+            finishWithoutAnimation();\n+            return;\n+        }\n+\n+        // Candidate to move to background thread - can get hundreds of rows for bad cards.\n+        CardInfoModel model = CardInfoModel.create(c, col);\n+\n+        setText(R.id.card_info_added, formatDate(model.getAddedDate()));\n+\n+        setIfNotNull(model.getFirstReviewDate(), R.id.card_info_first_review, R.id.card_info_first_review_label, this::formatDate);\n+        setIfNotNull(model.getLatestReviewDate(), R.id.card_info_latest_review, R.id.card_info_latest_review_label, this::formatDate);\n+        setIfNotNull(model.getDue(), R.id.card_info_due, R.id.card_info_due_label, s -> s);\n+        setIfNotNull(model.getInterval(), R.id.card_info_interval, R.id.card_info_interval_label, s -> getResources().getQuantityString(R.plurals.time_span_days, model.getInterval(), model.getInterval()));\n+        setIfNotNull(model.getEaseInPercent(), R.id.card_info_ease, R.id.card_info_ease_label, easePercent -> formatDouble(\"%.0f%%\", easePercent * 100));\n+        setFormattedText(R.id.card_info_review_count, \"%d\", model.getReviews());\n+        setFormattedText(R.id.card_info_lapse_count, \"%d\", model.getLapses());\n+        setIfNotNull(model.getAverageTimeMs(), R.id.card_info_average_time, R.id.card_info_average_time_label, this::formatAsTimeSpan);\n+        setIfNotNull(model.getTotalTimeMs(), R.id.card_info_total_time, R.id.card_info_total_time_label, this::formatAsTimeSpan);\n+        setText(R.id.card_info_card_type, model.getCardType());\n+        setText(R.id.card_info_note_type, model.getNoteType());\n+        setText(R.id.card_info_deck_name, model.getDeckName());\n+        setFormattedText(R.id.card_info_card_id, \"%d\", model.getCardId());\n+        setFormattedText(R.id.card_info_note_id, \"%d\", model.getNoteId());\n+\n+        TableLayout tl = findViewById(R.id.card_info_revlog_entries);\n+\n+        for (CardInfoModel.RevLogEntry entry : model.getEntries()) {\n+            TableRow row = new TableRow(this);\n+\n+            addWithText(row, formatDateTime(entry.dateTime)).setGravity(Gravity.START);\n+            addWithText(row, entry.spannableType(this)).setGravity(Gravity.CENTER_HORIZONTAL);\n+            addWithText(row, entry.getRating(this)).setGravity(Gravity.CENTER_HORIZONTAL);\n+            addWithText(row, Utils.timeQuantityNextIvl(this, entry.intervalAsTimeSeconds())).setGravity(Gravity.START);\n+            addWithText(row, entry.getEase(this)).setGravity(Gravity.CENTER_HORIZONTAL);\n+            addWithText(row, entry.getTimeTaken(this)).setGravity(Gravity.END);\n+\n+            tl.addView(row);\n+        }\n+\n+        this.mModel = model;\n+    }\n+\n+    private FixedTextView addWithText(TableRow row, String value) {\n+        return addWithText(row, new SpannableString(value));\n+    }\n+\n+    private FixedTextView addWithText(TableRow row, Spannable value) {\n+        FixedTextView text = new FixedTextView(this);\n+        text.setText(value);\n+        row.addView(text);\n+        return text;\n+    }\n+\n+\n+    @NonNull\n+    private String formatAsTimeSpan(Long timeInMs) {\n+        // HACK: There is probably a bug here\n+        // It would be nice to use Utils.timeSpan, but the Android string formatting system does not support floats.\n+        // https://stackoverflow.com/questions/54882981/android-plurals-for-float-values\n+        // Mixing both float-based time processing and plural processing seems like a recipe for disaster until we have\n+        // a spec, so we ignore the problem for now\n+\n+        // So, we use seconds\n+        return getString(R.string.time_span_decimal_seconds, String.format(getLocale(), \"%.2f\", timeInMs / 1000d));\n+    }\n+\n+\n+    private <T> void setIfNotNull(T nullableData, @IdRes int dataRes, @IdRes int labelRes, FunctionalInterfaces.Function<T, String> asString) {\n+        if (nullableData == null) {\n+            findViewById(dataRes).setVisibility(View.GONE);\n+            findViewById(labelRes).setVisibility(View.GONE);\n+        } else {\n+            setText(dataRes, asString.apply(nullableData));\n+        }\n+    }\n+\n+\n+    private void setFormattedText(@IdRes int resource, String formatSpecifier, long number) {\n+        String text = formatLong(formatSpecifier, number);\n+        setText(resource, text);\n+    }\n+\n+\n+    @NonNull\n+    private String formatLong(String formatSpecifier, long number) {\n+        return String.format(getLocale(), formatSpecifier, number);\n+    }\n+\n+    @NonNull\n+    private String formatDouble(String formatSpecifier, double number) {\n+        return String.format(getLocale(), formatSpecifier, number);\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private Locale getLocale() {\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n+            return getResources().getConfiguration().getLocales().get(0);\n+        } else {\n+            return getResources().getConfiguration().locale;\n+        }\n+    }\n+\n+\n+    private void setText(@IdRes int id, String text) {\n+        TextView view = findViewById(id);\n+        view.setText(text);\n+    }\n+\n+\n+    @SuppressLint(\"DirectDateInstantiation\")\n+    private String formatDate(Long date) {\n+        return sDateFormat.format(new Date(date));\n+    }\n+\n+    @SuppressLint(\"DirectDateInstantiation\")\n+    private String formatDateTime(long dateTime) {\n+        return sDateTimeFormat.format(new Date(dateTime));\n+    }\n+\n+    @Nullable\n+    private Card getCard(Collection col) {\n+        return col.getCard(getCardId());\n+    }\n+\n+\n+    private boolean hasValidCardId() {\n+        return getCardId() != INVALID_CARD_ID;\n+    }\n+\n+\n+    private long getCardId() {\n+        try {\n+            return getIntent().getLongExtra(\"cardId\", INVALID_CARD_ID);", "originalCommit": "9a89a4ede03fbf896bc922b3d3e849f5e7989b12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "98dd459b7c8a10f1121014ffab35b78c63ea102f", "url": "https://github.com/ankidroid/Anki-Android/commit/98dd459b7c8a10f1121014ffab35b78c63ea102f", "message": "Add \"Card Info\" screen\n\nFixes 7397", "committedDate": "2020-10-23T16:27:07Z", "type": "commit"}, {"oid": "98dd459b7c8a10f1121014ffab35b78c63ea102f", "url": "https://github.com/ankidroid/Anki-Android/commit/98dd459b7c8a10f1121014ffab35b78c63ea102f", "message": "Add \"Card Info\" screen\n\nFixes 7397", "committedDate": "2020-10-23T16:27:07Z", "type": "forcePushed"}]}