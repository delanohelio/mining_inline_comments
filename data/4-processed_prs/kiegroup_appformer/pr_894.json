{"pr_number": 894, "pr_title": "KOGITO-879 KOGITO-880 KOGITO-881: State Control API (undo/redo)", "pr_createdAt": "2020-02-12T15:33:17Z", "pr_url": "https://github.com/kiegroup/appformer/pull/894", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEwOTQ1Nw==", "url": "https://github.com/kiegroup/appformer/pull/894#discussion_r380109457", "bodyText": "Is this javadoc complete?", "author": "jomarko", "createdAt": "2020-02-17T10:47:10Z", "path": "appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/stateControl/registry/RegistryChangeListener.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.appformer.kogito.bridge.client.stateControl.registry;\n+\n+/**\n+ * This functional interface represents the code that will be executed everytime there's a change on a {@link CommandRegistry}\n+ */\n+@FunctionalInterface\n+public interface RegistryChangeListener {\n+\n+    /**\n+     * Method that will be executed every time theres a", "originalCommit": "f8cfc7c2fe795fc50736e4ba61d40318fa10a36f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEwOTY3MQ==", "url": "https://github.com/kiegroup/appformer/pull/894#discussion_r380109671", "bodyText": "formatting", "author": "jomarko", "createdAt": "2020-02-17T10:47:39Z", "path": "appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/stateControl/KogitoStateControlInitializer.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.appformer.kogito.bridge.client.stateControl;\n+\n+import org.appformer.kogito.bridge.client.interop.WindowRef;\n+import org.appformer.kogito.bridge.client.stateControl.interop.StateControl;\n+import org.appformer.kogito.bridge.client.stateControl.interop.StateControlCommand;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import java.util.function.Supplier;\n+\n+@ApplicationScoped\n+public class KogitoStateControlInitializer {\n+\n+    private final Supplier<Boolean> envelopeEnabledSupplier;\n+    private final Supplier<StateControl> stateControlSupplier;\n+\n+    public KogitoStateControlInitializer() {\n+        this(WindowRef::isEnvelopeAvailable,\n+                () -> WindowRef.getEnvelope().getStateControl());\n+    }\n+\n+    KogitoStateControlInitializer(final Supplier<Boolean> envelopeEnabledSupplier,\n+                                  final Supplier<StateControl> stateControlSupplier) {\n+        this.envelopeEnabledSupplier = envelopeEnabledSupplier;\n+        this.stateControlSupplier = stateControlSupplier;\n+    }\n+\n+    public boolean isKogitoEnabled() {\n+        return envelopeEnabledSupplier.get();\n+    }\n+\n+    StateControl getStateControl() {\n+        return stateControlSupplier.get();\n+    }\n+\n+    public void setUndoCommand(StateControlCommand command) {\n+        if(isKogitoEnabled()) {", "originalCommit": "f8cfc7c2fe795fc50736e4ba61d40318fa10a36f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEwOTcyMw==", "url": "https://github.com/kiegroup/appformer/pull/894#discussion_r380109723", "bodyText": "formatting", "author": "jomarko", "createdAt": "2020-02-17T10:47:46Z", "path": "appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/stateControl/KogitoStateControlInitializer.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.appformer.kogito.bridge.client.stateControl;\n+\n+import org.appformer.kogito.bridge.client.interop.WindowRef;\n+import org.appformer.kogito.bridge.client.stateControl.interop.StateControl;\n+import org.appformer.kogito.bridge.client.stateControl.interop.StateControlCommand;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import java.util.function.Supplier;\n+\n+@ApplicationScoped\n+public class KogitoStateControlInitializer {\n+\n+    private final Supplier<Boolean> envelopeEnabledSupplier;\n+    private final Supplier<StateControl> stateControlSupplier;\n+\n+    public KogitoStateControlInitializer() {\n+        this(WindowRef::isEnvelopeAvailable,\n+                () -> WindowRef.getEnvelope().getStateControl());\n+    }\n+\n+    KogitoStateControlInitializer(final Supplier<Boolean> envelopeEnabledSupplier,\n+                                  final Supplier<StateControl> stateControlSupplier) {\n+        this.envelopeEnabledSupplier = envelopeEnabledSupplier;\n+        this.stateControlSupplier = stateControlSupplier;\n+    }\n+\n+    public boolean isKogitoEnabled() {\n+        return envelopeEnabledSupplier.get();\n+    }\n+\n+    StateControl getStateControl() {\n+        return stateControlSupplier.get();\n+    }\n+\n+    public void setUndoCommand(StateControlCommand command) {\n+        if(isKogitoEnabled()) {\n+            getStateControl().setUndoCommand(command);\n+        }\n+    }\n+\n+    public void setRedoCommand(StateControlCommand command) {\n+        if(isKogitoEnabled()) {", "originalCommit": "f8cfc7c2fe795fc50736e4ba61d40318fa10a36f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDExMDI3MQ==", "url": "https://github.com/kiegroup/appformer/pull/894#discussion_r380110271", "bodyText": "Reading the javadoc and implementation, we do not check if value is a positive number.", "author": "jomarko", "createdAt": "2020-02-17T10:48:49Z", "path": "appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/stateControl/registry/CommandRegistry.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.appformer.kogito.bridge.client.stateControl.registry;\n+\n+import java.util.List;\n+\n+/**\n+ * Represents a registry of commands to be used on the StateControl engine.\n+ * @param <C> anything that can be considered a Command\n+ */\n+public interface CommandRegistry<C> {\n+\n+    /**\n+     * Registers a command into the registry\n+     * @param command A command to register\n+     */\n+    void register(final C command);\n+\n+    /**\n+     * Peeks the last added command. Doesn't remove it.\n+     * @return The last added Command\n+     */\n+    C peek();\n+\n+    /**\n+     * Pops the last added command and removes it.\n+     * @return The last added Command\n+     */\n+    C pop();\n+\n+    /**\n+     * Sets the max number of commands that can be stored on the registry.\n+     * @param size A positive integer\n+     */\n+    void setMaxSize(final int size);", "originalCommit": "f8cfc7c2fe795fc50736e4ba61d40318fa10a36f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDExMjQwNA==", "url": "https://github.com/kiegroup/appformer/pull/894#discussion_r380112404", "bodyText": "I think is more standard have single test per tested method", "author": "jomarko", "createdAt": "2020-02-17T10:53:03Z", "path": "appformer-kogito-bridge/src/test/java/org/appformer/kogito/bridge/client/stateControl/registry/impl/KogitoCommandRegistryTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.appformer.kogito.bridge.client.stateControl.registry.impl;\n+\n+import org.appformer.kogito.bridge.client.stateControl.registry.interop.KogitoJSCommandRegistry;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class KogitoCommandRegistryTest {\n+\n+    private boolean envelopeEnabled = true;\n+\n+    @Mock\n+    private KogitoJSCommandRegistry<Object> kogitoJSCommandRegistry;\n+\n+    private KogitoCommandRegistry<Object> commandRegistry;\n+\n+    @Test\n+    public void testBuildOutsideEnvelope() {\n+        this.envelopeEnabled = false;\n+\n+        Assertions.assertThatThrownBy(() -> new KogitoCommandRegistry<>(() -> envelopeEnabled, () -> kogitoJSCommandRegistry))\n+                .isInstanceOf(RuntimeException.class)\n+                .hasMessage(\"Envelope isn't present, we shouldn't be here!\");\n+    }\n+\n+    @Test\n+    public void testMethods() {", "originalCommit": "f8cfc7c2fe795fc50736e4ba61d40318fa10a36f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3aef4e8451d59b60e5ad10ba7f9ee3f51ec97955", "url": "https://github.com/kiegroup/appformer/commit/3aef4e8451d59b60e5ad10ba7f9ee3f51ec97955", "message": "- code review changes.", "committedDate": "2020-02-18T10:17:27Z", "type": "forcePushed"}, {"oid": "495c4b5294b1aa4a5ee62e9641f46a3faffbe979", "url": "https://github.com/kiegroup/appformer/commit/495c4b5294b1aa4a5ee62e9641f46a3faffbe979", "message": "- Code improvements.", "committedDate": "2020-02-18T17:11:31Z", "type": "forcePushed"}, {"oid": "da46b65bd43948a8fab3d888b49e2b0c05ee0d12", "url": "https://github.com/kiegroup/appformer/commit/da46b65bd43948a8fab3d888b49e2b0c05ee0d12", "message": "- Code improvements.", "committedDate": "2020-02-21T18:09:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyODEwNQ==", "url": "https://github.com/kiegroup/appformer/pull/894#discussion_r383328105", "bodyText": "Missing README", "author": "jomarko", "createdAt": "2020-02-24T15:21:42Z", "path": "appformer-kogito-api/pom.xml", "diffHunk": "@@ -0,0 +1,40 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>uberfire-parent</artifactId>\n+    <groupId>org.uberfire</groupId>\n+    <version>7.34.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>appformer-kogito-api</artifactId>\n+  <name>AppFormer Kogito API</name>", "originalCommit": "da46b65bd43948a8fab3d888b49e2b0c05ee0d12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyOTg3MA==", "url": "https://github.com/kiegroup/appformer/pull/894#discussion_r383329870", "bodyText": "Do we need this? Can't DefaultCommandRegistryImpl implement directly CommandRegistry?", "author": "jomarko", "createdAt": "2020-02-24T15:24:32Z", "path": "appformer-kogito-api/src/main/java/org/appformer/kogito/api/stateControl/registry/DefaultCommandRegistry.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.appformer.kogito.api.stateControl.registry;\n+\n+public interface DefaultCommandRegistry<C> extends CommandRegistry<C> {", "originalCommit": "da46b65bd43948a8fab3d888b49e2b0c05ee0d12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM1MTQ0MA==", "url": "https://github.com/kiegroup/appformer/pull/894#discussion_r383351440", "bodyText": "The  reason of doing it like that is that stunner is using the CommandRegistry in different places and I had to differenciate it by adding that extra interface to make. In regular CDI This could be achieved by using qualifiers for example but this approach was breaking the GWT compilation. So I had to do it like that.", "author": "pefernan", "createdAt": "2020-02-24T15:57:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyOTg3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzMDgyMw==", "url": "https://github.com/kiegroup/appformer/pull/894#discussion_r383330823", "bodyText": "Maybe we could rename to CommandRegistryChangeListener WDYT?", "author": "jomarko", "createdAt": "2020-02-24T15:26:03Z", "path": "appformer-kogito-api/src/main/java/org/appformer/kogito/api/stateControl/registry/RegistryChangeListener.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.appformer.kogito.api.stateControl.registry;\n+\n+/**\n+ * This functional interface represents the code that will be executed every time there's a change on a {@link CommandRegistry}\n+ */\n+@FunctionalInterface\n+public interface RegistryChangeListener {", "originalCommit": "da46b65bd43948a8fab3d888b49e2b0c05ee0d12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM0NTc5Mw==", "url": "https://github.com/kiegroup/appformer/pull/894#discussion_r383345793", "bodyText": "ok", "author": "pefernan", "createdAt": "2020-02-24T15:48:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzMDgyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzMTQ0MQ==", "url": "https://github.com/kiegroup/appformer/pull/894#discussion_r383331441", "bodyText": "just for consistency we could use final RegistryChangeListener registryChangeListener", "author": "jomarko", "createdAt": "2020-02-24T15:26:58Z", "path": "appformer-kogito-api/src/main/java/org/appformer/kogito/api/stateControl/registry/impl/DefaultCommandRegistryImpl.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.appformer.kogito.api.stateControl.registry.impl;\n+\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.List;\n+\n+import org.appformer.kogito.api.stateControl.registry.DefaultCommandRegistry;\n+import org.appformer.kogito.api.stateControl.registry.RegistryChangeListener;\n+\n+/**\n+ * The default generic implementation for the CommandRegistry type.\n+ * It's implemented for achieving an in-memory and lightweight registry approach, don't do an overuse of it.\n+ * Note: The Stack class behavior when using the iterator is not the expected one, so used\n+ * ArrayDeque instead of an Stack to provide right iteration order.\n+ */\n+public class DefaultCommandRegistryImpl<C> implements DefaultCommandRegistry<C> {\n+\n+    private final Deque<C> commands = new ArrayDeque<>();\n+    private int maxStackSize = 200;\n+    private RegistryChangeListener registryChangeListener;\n+\n+    @Override\n+    public void setMaxSize(final int size) {\n+        if (size < 0) {\n+            throw new IllegalArgumentException(\"The registry size should be a positive number\");\n+        }\n+        this.maxStackSize = size;\n+    }\n+\n+    @Override\n+    public void register(final C command) {\n+        addIntoStack(command);\n+        notifyRegistryChange();\n+    }\n+\n+    @Override\n+    public void clear() {\n+        commands.clear();\n+        notifyRegistryChange();\n+    }\n+\n+    @Override\n+    public List<C> getCommandHistory() {\n+        return new ArrayList<>(commands);\n+    }\n+\n+    @Override\n+    public void setRegistryChangeListener(RegistryChangeListener registryChangeListener) {", "originalCommit": "da46b65bd43948a8fab3d888b49e2b0c05ee0d12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM0NTY1MQ==", "url": "https://github.com/kiegroup/appformer/pull/894#discussion_r383345651", "bodyText": "np with that.", "author": "pefernan", "createdAt": "2020-02-24T15:48:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzMTQ0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzNDU2Mw==", "url": "https://github.com/kiegroup/appformer/pull/894#discussion_r383334563", "bodyText": "reading the code, assuimng your explanation, this module should be named appformer-state-control-api?", "author": "jomarko", "createdAt": "2020-02-24T15:31:37Z", "path": "appformer-kogito-api/pom.xml", "diffHunk": "@@ -0,0 +1,40 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>uberfire-parent</artifactId>\n+    <groupId>org.uberfire</groupId>\n+    <version>7.34.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>appformer-kogito-api</artifactId>", "originalCommit": "da46b65bd43948a8fab3d888b49e2b0c05ee0d12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM1MzU5Nw==", "url": "https://github.com/kiegroup/appformer/pull/894#discussion_r383353597", "bodyText": "I'd prefer not having a dedicated module for state control since we are not sure how will be growing.", "author": "pefernan", "createdAt": "2020-02-24T16:00:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzNDU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2OTE2Nw==", "url": "https://github.com/kiegroup/appformer/pull/894#discussion_r383369167", "bodyText": "ok, understand, then still think we need to explain properly purpose of this module somewhere", "author": "jomarko", "createdAt": "2020-02-24T16:25:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzNDU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4MDQ4Mw==", "url": "https://github.com/kiegroup/appformer/pull/894#discussion_r383880483", "bodyText": "@pefernan I like all of your refactoring; thank-you..... other than the name of this new module.\nIt has nothing to do with kogito itself and is indeed, just a module with zero/minimal dependencies on other things to prevent the kogito specific implementation module dragging in unnecessary libraries. Can you come up with a better name that does not mention kogito!?!? (appformer-client-api is super-nice BUT obviously cannot be used as it has a ton of other dependencies you don't want in kogito). appformer-collaboration-api is reasonable - but limits its future use. appformer/uberfire-services/uberfire-services-client is available!", "author": "manstis", "createdAt": "2020-02-25T13:34:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzNDU2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzOTc1OQ==", "url": "https://github.com/kiegroup/appformer/pull/894#discussion_r383339759", "bodyText": "Could you please explain why appformer-kogito-bridge module needs to have this KogitoCommandRegistry registry implementation? KogitoCommandRegistry seems same as DefaultCommandRegistryImpl from appformer-kogito-api. I expected in appformer-kogito-bridge just KogitoJSCommandRegistry.", "author": "jomarko", "createdAt": "2020-02-24T15:39:29Z", "path": "appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/stateControl/registry/impl/KogitoCommandRegistry.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.appformer.kogito.bridge.client.stateControl.registry.impl;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.appformer.kogito.api.stateControl.registry.CommandRegistry;\n+import org.appformer.kogito.api.stateControl.registry.RegistryChangeListener;\n+import org.appformer.kogito.bridge.client.interop.WindowRef;\n+import org.appformer.kogito.bridge.client.stateControl.interop.StateControl;\n+import org.appformer.kogito.bridge.client.stateControl.registry.interop.KogitoJSCommandRegistry;\n+\n+public class KogitoCommandRegistry<C> implements CommandRegistry<C> {", "originalCommit": "da46b65bd43948a8fab3d888b49e2b0c05ee0d12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM0NTY5NQ==", "url": "https://github.com/kiegroup/appformer/pull/894#discussion_r383345695", "bodyText": "Well, the KogitoCommandRegistry is the CDI bean that will be injected instead of the DefaultCommandRegistry when using the envelope. It basically wraps the JS registry from the envelope, since the JS cannot be directly injected. That's the main point of having that KogitoCommandRegistry.", "author": "pefernan", "createdAt": "2020-02-24T15:48:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzOTc1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE1MTEyMA==", "url": "https://github.com/kiegroup/appformer/pull/894#discussion_r384151120", "bodyText": "in fact this interface describes a generic Registry... I mean, even being called CommandRegistry, the C parameter is a generic type, which does not extends from any other types as well.\nSo just as a suggestion, as we're moving this to the fundation codebase, we can renane it just as Registry<O>, it can contain commands, or whatever, also we could remove the term \"command\" from the methods below.\nAnyway just as a proposal, but I see no reason why it describes a registry of commands, nothing actually is realted to the Command API...", "author": "romartin", "createdAt": "2020-02-25T21:57:25Z", "path": "appformer-client-api/src/main/java/org/appformer/client/stateControl/registry/CommandRegistry.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.appformer.client.stateControl.registry;\n+\n+import java.util.List;\n+\n+/**\n+ * Represents a registry of commands to be used on the StateControl engine.\n+ *\n+ * @param <C> anything that can be considered a Command\n+ */\n+public interface CommandRegistry<C> {", "originalCommit": "1f334b9415e3788c75517006b04c0c3a58a95c12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5NjcxOQ==", "url": "https://github.com/kiegroup/appformer/pull/894#discussion_r384296719", "bodyText": "I think I get your point. Replying as was one of assumed Command substring properly used in names of classes.\nI think you are correct we can remove Command form name of this interface and keep it just in real implementations which are:\nXYZCommandRegistry implements Registry<Command>", "author": "jomarko", "createdAt": "2020-02-26T06:32:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE1MTEyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM0MTI5OA==", "url": "https://github.com/kiegroup/appformer/pull/894#discussion_r384341298", "bodyText": "Ok", "author": "pefernan", "createdAt": "2020-02-26T08:41:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE1MTEyMA=="}], "type": "inlineReview"}, {"oid": "8bab334aa4e78e4afd31bc2771b15f263ae8226a", "url": "https://github.com/kiegroup/appformer/commit/8bab334aa4e78e4afd31bc2771b15f263ae8226a", "message": "KOGITO-879: Define State Control API\nKOGITO-880: Create JSInterop layer for StateControl API\nKOGITO-881: Integrate State Control API in Stunner to handle Undo & Redo", "committedDate": "2020-02-27T16:05:03Z", "type": "commit"}, {"oid": "14c3bd65adf379e17fdf4d565172554f69b452d1", "url": "https://github.com/kiegroup/appformer/commit/14c3bd65adf379e17fdf4d565172554f69b452d1", "message": "- code review changes.", "committedDate": "2020-02-27T16:05:03Z", "type": "commit"}, {"oid": "077b8bd70d69e49f9bffc9f4a4d987d28e1afe04", "url": "https://github.com/kiegroup/appformer/commit/077b8bd70d69e49f9bffc9f4a4d987d28e1afe04", "message": "- Code improvements.", "committedDate": "2020-02-27T16:05:03Z", "type": "commit"}, {"oid": "4665d76e4fe41dc7ff06224bac1f2a954d17f661", "url": "https://github.com/kiegroup/appformer/commit/4665d76e4fe41dc7ff06224bac1f2a954d17f661", "message": "- Code improvements.", "committedDate": "2020-02-27T16:05:03Z", "type": "commit"}, {"oid": "964007d3d8f5294f9cd1a461b2fba742456ec29a", "url": "https://github.com/kiegroup/appformer/commit/964007d3d8f5294f9cd1a461b2fba742456ec29a", "message": "- Adding README.md, code suggestions", "committedDate": "2020-02-27T16:05:03Z", "type": "commit"}, {"oid": "a6ddf8d98787bc87d4d4892af727ddea78f1c3a2", "url": "https://github.com/kiegroup/appformer/commit/a6ddf8d98787bc87d4d4892af727ddea78f1c3a2", "message": "- Module renaming", "committedDate": "2020-02-27T16:05:03Z", "type": "commit"}, {"oid": "7c493d41887b4d7693194b47c37cb7e18e948662", "url": "https://github.com/kiegroup/appformer/commit/7c493d41887b4d7693194b47c37cb7e18e948662", "message": "- Class renames", "committedDate": "2020-02-27T16:05:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5NTAzNg==", "url": "https://github.com/kiegroup/appformer/pull/894#discussion_r385395036", "bodyText": "just minor thing - wrong word \"command\", it does not apply anymore... :)", "author": "romartin", "createdAt": "2020-02-27T21:57:21Z", "path": "appformer-client-api/src/main/java/org/appformer/client/stateControl/registry/Registry.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.appformer.client.stateControl.registry;\n+\n+import java.util.List;\n+\n+/**\n+ * Represents a basic items registry.\n+ *\n+ * @param <C> anything that can be registered.\n+ */\n+public interface Registry<C> {\n+\n+    /**\n+     * Registers an item into the registry\n+     *\n+     * @param item An item to register\n+     */\n+    void register(final C item);\n+\n+    /**\n+     * Peeks the last added item. Doesn't remove it.\n+     *\n+     * @return The last added item\n+     */\n+    C peek();\n+\n+    /**\n+     * Pops the last added item and removes it.\n+     *\n+     * @return The last added item\n+     */\n+    C pop();\n+\n+    /**\n+     * Sets the max number of items that can be stored on the registry.\n+     *\n+     * @param size A positive integer\n+     */\n+    void setMaxSize(final int size);\n+\n+    /**\n+     * Clears the registry\n+     */\n+    void clear();\n+\n+    /**\n+     * Determines if the registry is empty or not\n+     *\n+     * @return true if empty, false if not.\n+     */\n+    boolean isEmpty();\n+\n+    /**\n+     * Returns a {@link List} containing all the items in the registry\n+     *\n+     * @return A {@link List} of commands", "originalCommit": "7c493d41887b4d7693194b47c37cb7e18e948662", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5302ffe981ac8b280f96eaa9dbb203ba2bb1ab30", "url": "https://github.com/kiegroup/appformer/commit/5302ffe981ac8b280f96eaa9dbb203ba2bb1ab30", "message": "- Class renames", "committedDate": "2020-02-28T08:11:04Z", "type": "forcePushed"}, {"oid": "1591f5737b044d6ac6a7b0bf34fc7028b75cba1d", "url": "https://github.com/kiegroup/appformer/commit/1591f5737b044d6ac6a7b0bf34fc7028b75cba1d", "message": "- Class renames", "committedDate": "2020-02-28T08:14:16Z", "type": "commit"}, {"oid": "1591f5737b044d6ac6a7b0bf34fc7028b75cba1d", "url": "https://github.com/kiegroup/appformer/commit/1591f5737b044d6ac6a7b0bf34fc7028b75cba1d", "message": "- Class renames", "committedDate": "2020-02-28T08:14:16Z", "type": "forcePushed"}]}