{"pr_number": 956, "pr_title": "AF-2471: Create Dashbuilder Runtimes Module", "pr_createdAt": "2020-05-04T20:05:05Z", "pr_url": "https://github.com/kiegroup/appformer/pull/956", "timeline": [{"oid": "0f9dbff42cbf6b2d4d6714f72d9c949c65f7541d", "url": "https://github.com/kiegroup/appformer/commit/0f9dbff42cbf6b2d4d6714f72d9c949c65f7541d", "message": "AF-2471: Create Dashbuilder Runtimes Module", "committedDate": "2020-05-04T20:14:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM4ODY1MQ==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r420388651", "bodyText": "Why this is needed?", "author": "ederign", "createdAt": "2020-05-05T20:33:50Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/resources/RuntimeJaxAppApp.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.backend.resources;\n+\n+import javax.ws.rs.ApplicationPath;\n+import javax.ws.rs.core.Application;\n+\n+@ApplicationPath(\"/rest\")", "originalCommit": "5e18aa2cf39c5fdb9b17e860fc1148bac989627b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwOTIyNQ==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r423709225", "bodyText": "We use this to expose REST services. Currently we have one REST service to upload files, I am thinking about making the call to RuntimeModelService use REST instead RPC", "author": "jesuino", "createdAt": "2020-05-12T12:55:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM4ODY1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM4OTg0Ng==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r420389846", "bodyText": "Could you please clarify?", "author": "ederign", "createdAt": "2020-05-05T20:36:06Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/plugins/RuntimePerspectivePluginManager.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.plugins;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.Alternative;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.ui.IsWidget;\n+import org.dashbuilder.client.navigation.plugin.PerspectivePluginManager;\n+import org.dashbuilder.navigation.NavGroup;\n+import org.dashbuilder.navigation.NavItem;\n+import org.dashbuilder.navigation.layout.LayoutRecursionIssue;\n+import org.dashbuilder.navigation.layout.LayoutTemplateContext;\n+import org.dashbuilder.navigation.layout.LayoutTemplateInfo;\n+import org.dashbuilder.navigation.workbench.NavWorkbenchCtx;\n+import org.dashbuilder.shared.event.RuntimeModelEvent;\n+import org.jboss.errai.common.client.ui.ElementWrapperWidget;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutInstance;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutTemplate;\n+import org.uberfire.ext.layout.editor.client.generator.LayoutGenerator;\n+import org.uberfire.ext.plugin.model.Plugin;\n+import org.uberfire.ext.plugin.model.PluginType;\n+import org.uberfire.mvp.ParameterizedCommand;\n+\n+@Alternative\n+@ApplicationScoped\n+public class RuntimePerspectivePluginManager implements PerspectivePluginManager {\n+    \n+    @Inject\n+    LayoutGenerator layoutGenerator;\n+\n+    List<LayoutTemplate> templates = new ArrayList<>();\n+\n+    @Override\n+    public void loadPlugins() {\n+\n+    }\n+\n+    @Override\n+    public void getPerspectivePlugins(ParameterizedCommand<Collection<Plugin>> callback) {\n+        List<Plugin> plugins = templates.stream()\n+                                        .map(lt -> new Plugin(lt.getName(),\n+                                                              PluginType.PERSPECTIVE,\n+                                                              null))\n+                                        .collect(Collectors.toList());\n+        callback.execute(plugins);\n+    }\n+\n+    @Override\n+    public boolean isRuntimePerspective(Plugin plugin) {\n+        return searchLayoutTemplate(plugin.getName());\n+    }\n+\n+    @Override\n+    public boolean isRuntimePerspective(NavItem navItem) {\n+        NavWorkbenchCtx navCtx = NavWorkbenchCtx.get(navItem);\n+        String resourceId = navCtx.getResourceId();\n+        return searchLayoutTemplate(resourceId);\n+    }\n+\n+    @Override\n+    public boolean isRuntimePerspective(String perspectiveId) {\n+        return searchLayoutTemplate(perspectiveId);\n+    }\n+\n+    @Override\n+    public String getRuntimePerspectiveId(NavItem navItem) {\n+        NavWorkbenchCtx navCtx = NavWorkbenchCtx.get(navItem);\n+        return navCtx.getResourceId();\n+    }\n+\n+    @Override\n+    public boolean existsPerspectivePlugin(String perspectiveName) {\n+        return searchLayoutTemplate(perspectiveName);\n+    }\n+\n+    @Override\n+    public void getLayoutTemplateInfo(String perspectiveName, ParameterizedCommand<LayoutTemplateInfo> callback) {\n+        // not used in runtime\n+    }\n+\n+    @Override\n+    public void getLayoutTemplateInfo(LayoutTemplate layoutTemplate, ParameterizedCommand<LayoutTemplateInfo> callback) {\n+        // not used in runtime\n+    }\n+\n+    @Override\n+    public void buildPerspectiveWidget(String perspectiveName, LayoutTemplateContext layoutCtx, ParameterizedCommand<IsWidget> afterBuild, ParameterizedCommand<LayoutRecursionIssue> onInfiniteRecursion) {\n+        // LAYOUT RECURSION SHOULD BE HANDLED HERE", "originalCommit": "5e18aa2cf39c5fdb9b17e860fc1148bac989627b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwOTY0OQ==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r423709649", "bodyText": "This layout recursion should not be a problem after authoring, but I left a comment to remember where to fix if we face it.", "author": "jesuino", "createdAt": "2020-05-12T12:55:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM4OTg0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM5MDIyMw==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r420390223", "bodyText": "William, I think we should remove this option at this stage and add it later if necessary.", "author": "ederign", "createdAt": "2020-05-05T20:36:50Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/model/DashbuilderRuntimeMode.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.shared.model;\n+\n+/**\n+ * Execution for dashbuilder Runtime\n+ *\n+ */\n+public enum DashbuilderRuntimeMode {\n+\n+    /**\n+     * Used when only the first import is used\n+     */\n+    STATIC,\n+\n+    /**\n+     * Allow users to import once\n+     */\n+    SINGLE_IMPORT,\n+\n+    /**\n+     * Users can import how many dashboards they want and reopen them later.\n+     */\n+    MULTIPLE_IMPORT;", "originalCommit": "5e18aa2cf39c5fdb9b17e860fc1148bac989627b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "67287a0286ee2481d55442b371ff610385bc20b4", "url": "https://github.com/kiegroup/appformer/commit/67287a0286ee2481d55442b371ff610385bc20b4", "message": "changes to adapt to wildfly18", "committedDate": "2020-05-11T19:48:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk0NDE4NQ==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r423944185", "bodyText": "Please add the copyright header to this file.", "author": "caponetto", "createdAt": "2020-05-12T18:26:10Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-navigation-client/src/main/java/org/dashbuilder/client/navigation/plugin/PerspectivePluginEntryPoint.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package org.dashbuilder.client.navigation.plugin;", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk1MTE3Mg==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r423951172", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2020 JBoss, by Red Hat, Inc\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "author": "caponetto", "createdAt": "2020-05-12T18:38:17Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-navigation-client/src/main/java/org/dashbuilder/client/navigation/plugin/PerspectivePluginManager.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2016 JBoss, by Red Hat, Inc\n+ * Copyright 2020 JBoss, by Red Hat, Inc", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk1MTM1Mw==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r423951353", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2016 JBoss, by Red Hat, Inc\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "author": "caponetto", "createdAt": "2020-05-12T18:38:35Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-navigation-client/src/main/java/org/dashbuilder/client/navigation/plugin/PerspectivePluginManagerImpl.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright 2016 JBoss, by Red Hat, Inc", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk1MjA5MQ==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r423952091", "bodyText": "Please add copyright header to this file.", "author": "caponetto", "createdAt": "2020-05-12T18:39:52Z", "path": "dashbuilder/dashbuilder-runtime/src/test/java/org/dashbuilder/backend/services/impl/ImportValidationServiceImplTest.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.dashbuilder.backend.services.impl;", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk1NzQxMQ==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r423957411", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public Optional<RuntimeModel> getRuntimeModel(String runtimeModelId);\n          \n          \n            \n                Optional<RuntimeModel> getRuntimeModel(String runtimeModelId);", "author": "caponetto", "createdAt": "2020-05-12T18:48:51Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/service/RuntimeModelService.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.shared.service;\n+\n+import java.util.Optional;\n+\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.jboss.errai.bus.server.annotations.Remote;\n+\n+@Remote\n+public interface RuntimeModelService {\n+\n+    public Optional<RuntimeModel> getRuntimeModel(String runtimeModelId);", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk1NzUzMw==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r423957533", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public Optional<RuntimeModel> registerExternalImport(String externalModelUrl);\n          \n          \n            \n                Optional<RuntimeModel> registerExternalImport(String externalModelUrl);", "author": "caponetto", "createdAt": "2020-05-12T18:49:04Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/services/ExternalImportService.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.shared.services;\n+\n+import java.util.Optional;\n+\n+import org.dashbuilder.shared.model.RuntimeModel;\n+\n+/**\n+ * Responsible for downloading external models and registering it\n+ *\n+ */\n+public interface ExternalImportService {\n+    \n+    public Optional<RuntimeModel> registerExternalImport(String externalModelUrl);", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk2MDEyNA==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r423960124", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public RuntimeModel parse(InputStream is);\n          \n          \n            \n                RuntimeModel parse(InputStream is);", "author": "caponetto", "createdAt": "2020-05-12T18:53:09Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/service/RuntimeModelParser.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.shared.service;\n+\n+import java.io.InputStream;\n+\n+import org.dashbuilder.shared.model.RuntimeModel;\n+\n+/**\n+ * Parses an import content to RuntimeModel\n+ *\n+ */\n+public interface RuntimeModelParser {\n+\n+    public RuntimeModel parse(InputStream is);", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk2MzYwNQ==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r423963605", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public PerspectivePluginManagerImpl(ClientTypeRegistry clientTypeRegistry,\n          \n          \n            \n                                                LayoutGenerator layoutGenerator,\n          \n          \n            \n                                                NavigationManager navigationManager,\n          \n          \n            \n                                                Caller<PerspectivePluginServices> pluginServices,\n          \n          \n            \n                                                Event<PerspectivePluginsChangedEvent> perspectivesChangedEvent) {\n          \n          \n            \n                public PerspectivePluginManagerImpl(ClientTypeRegistry clientTypeRegistry,\n          \n          \n            \n                                                    LayoutGenerator layoutGenerator,\n          \n          \n            \n                                                    NavigationManager navigationManager,\n          \n          \n            \n                                                    Caller<PerspectivePluginServices> pluginServices,\n          \n          \n            \n                                                    Event<PerspectivePluginsChangedEvent> perspectivesChangedEvent) {", "author": "caponetto", "createdAt": "2020-05-12T18:59:11Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-navigation-client/src/main/java/org/dashbuilder/client/navigation/plugin/PerspectivePluginManagerImpl.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright 2016 JBoss, by Red Hat, Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.client.navigation.plugin;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Stack;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.client.navigation.NavigationManager;\n+import org.dashbuilder.navigation.event.PerspectivePluginsChangedEvent;\n+import org.dashbuilder.navigation.NavGroup;\n+import org.dashbuilder.navigation.NavItem;\n+import org.dashbuilder.navigation.NavTree;\n+import org.dashbuilder.navigation.layout.LayoutRecursionIssue;\n+import org.dashbuilder.navigation.layout.LayoutTemplateContext;\n+import org.dashbuilder.navigation.layout.LayoutTemplateInfo;\n+import org.dashbuilder.navigation.service.PerspectivePluginServices;\n+import org.dashbuilder.navigation.workbench.NavWorkbenchCtx;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.jboss.errai.common.client.api.RemoteCallback;\n+import org.jboss.errai.common.client.ui.ElementWrapperWidget;\n+import org.jboss.errai.ioc.client.api.EntryPoint;\n+import org.uberfire.client.workbench.type.ClientResourceType;\n+import org.uberfire.client.workbench.type.ClientTypeRegistry;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutInstance;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutTemplate;\n+import org.uberfire.ext.layout.editor.client.generator.LayoutGenerator;\n+import org.uberfire.ext.plugin.client.type.PerspectiveLayoutPluginResourceType;\n+import org.uberfire.ext.plugin.event.PluginAdded;\n+import org.uberfire.ext.plugin.event.PluginDeleted;\n+import org.uberfire.ext.plugin.event.PluginRenamed;\n+import org.uberfire.ext.plugin.event.PluginSaved;\n+import org.uberfire.ext.plugin.model.Plugin;\n+import org.uberfire.mvp.ParameterizedCommand;\n+import org.uberfire.workbench.model.ActivityResourceType;\n+\n+import com.google.gwt.user.client.ui.IsWidget;\n+\n+@EntryPoint\n+@ApplicationScoped\n+public class PerspectivePluginManagerImpl implements PerspectivePluginManager {\n+\n+    private ClientTypeRegistry clientTypeRegistry;\n+    private LayoutGenerator layoutGenerator;\n+    private NavigationManager navigationManager;\n+    private Caller<PerspectivePluginServices> pluginServices;\n+    private Event<PerspectivePluginsChangedEvent> perspectivesChangedEvent;\n+    private Map<String, Plugin> pluginMap = new HashMap<>();\n+    private boolean pluginsLoaded = false;\n+    private Stack<NavGroup> navGroupStack = new Stack<>();\n+\n+    @Inject\n+    public PerspectivePluginManagerImpl(ClientTypeRegistry clientTypeRegistry,\n+                                    LayoutGenerator layoutGenerator,\n+                                    NavigationManager navigationManager,\n+                                    Caller<PerspectivePluginServices> pluginServices,\n+                                    Event<PerspectivePluginsChangedEvent> perspectivesChangedEvent) {", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk2NzI1Ng==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r423967256", "bodyText": "Is this change really necessary?", "author": "caponetto", "createdAt": "2020-05-12T19:05:28Z", "path": "uberfire-extensions/uberfire-runtime-plugins/uberfire-runtime-plugins-client/src/main/java/org/uberfire/ext/plugin/client/perspective/editor/generator/PerspectiveEditorActivity.java", "diffHunk": "@@ -95,7 +95,7 @@ public PerspectiveDefinition buildPerspective() {\n         return perspectiveDefinition;\n     }\n \n-    private String getDefaultPanelType() {\n+    protected String getDefaultPanelType() {", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYxMDU1NQ==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r426610555", "bodyText": "Yes, we had to change the PanelType specifically for the Runtime. We didn't want to possibly break generated panels in Business Central. See the class RuntimePerspectiveEditorActivity", "author": "jesuino", "createdAt": "2020-05-18T13:05:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk2NzI1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk3MTI2NA==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r423971264", "bodyText": "Could this test be broken into more specific (and shorter) tests?", "author": "caponetto", "createdAt": "2020-05-12T19:12:36Z", "path": "dashbuilder/dashbuilder-runtime/src/test/java/org/dashbuilder/backend/services/impl/RuntimeModelParserImplTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.backend.services.impl;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import javax.enterprise.event.Event;\n+\n+import org.dashbuilder.backend.navigation.RuntimeNavigationBuilder;\n+import org.dashbuilder.navigation.impl.NavTreeBuilder;\n+import org.dashbuilder.shared.event.NewDataSetContentEvent;\n+import org.dashbuilder.shared.model.DataSetContent;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutTemplate;\n+\n+import static org.dashbuilder.shared.model.DataSetContentType.CSV;\n+import static org.dashbuilder.shared.model.DataSetContentType.DEFINITION;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class RuntimeModelParserImplTest {\n+\n+    @Mock\n+    Event<NewDataSetContentEvent> newDataSetContentEventSource;\n+\n+    @Mock\n+    RuntimeNavigationBuilder navigationBuilder;\n+\n+    @InjectMocks\n+    RuntimeModelParserImpl parser;\n+\n+    @Test\n+    public void testEmptyImport() throws IOException {\n+        when(navigationBuilder.build(any(), any())).thenReturn(new NavTreeBuilder().build());\n+        InputStream emptyImport = this.getClass().getResourceAsStream(\"/empty.zip\");\n+        RuntimeModel runtimeModel = parser.retrieveRuntimeModel(emptyImport);\n+\n+        verify(newDataSetContentEventSource, times(0)).fire(any());\n+        assertTrue(runtimeModel.getLayoutTemplates().isEmpty());\n+        assertTrue(runtimeModel.getNavTree().getRootItems().isEmpty());\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testValidImport() throws IOException {", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk3MzQwOQ==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r423973409", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<LayoutTemplate> templates = new ArrayList<>();\n          \n          \n            \n                    templates.add(lt1);\n          \n          \n            \n                    templates.add(lt2);\n          \n          \n            \n                    templates.add(lt3);\n          \n          \n            \n                    List<LayoutTemplate> templates = Arrays.asList(lt1, lt2, lt3);\n          \n      \n    \n    \n  \n\nJust a suggestion to make it shorter :)", "author": "caponetto", "createdAt": "2020-05-12T19:16:24Z", "path": "dashbuilder/dashbuilder-runtime/src/test/java/org/dashbuilder/backend/navigation/RuntimeNavigationBuilderTest.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.backend.navigation;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.dashbuilder.navigation.NavGroup;\n+import org.dashbuilder.navigation.NavItem;\n+import org.dashbuilder.navigation.NavTree;\n+import org.dashbuilder.navigation.impl.NavTreeBuilder;\n+import org.dashbuilder.navigation.workbench.NavWorkbenchCtx;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutTemplate;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class RuntimeNavigationBuilderTest {\n+\n+    RuntimeNavigationBuilder runtimeNavigationBuilder;\n+\n+    @Before\n+    public void init() {\n+        runtimeNavigationBuilder = new RuntimeNavigationBuilder();\n+    }\n+\n+    /**\n+     * Checks if groups are pruned correctly\n+     */\n+    @Test\n+    public void groupPruneTest() {\n+        NavTreeBuilder builder = new NavTreeBuilder();\n+        LayoutTemplate lt = new LayoutTemplate(\"lt1\");\n+\n+        final String ITEM = \"item1\";\n+        final String NOT_PRUNED_GROUP = \"notemptygroup\";\n+        final String EMPTY_GROUP = \"emptyGroup\";\n+        final String EMPTYCHILDGROUP = \"emptychildgroup\";\n+        final String EMPTYONANONEMPTY = \"empty_on_a_not_empty\";\n+\n+        builder.group(EMPTY_GROUP, \"empty\", \"\", false);\n+        builder.group(EMPTYCHILDGROUP, \"\", \"\", false);\n+        builder.endGroup();\n+        builder.endGroup();\n+\n+        builder.group(NOT_PRUNED_GROUP, \"notemptygroup\", \"\", false);\n+        builder.item(ITEM, \"item1\", \"\", false, NavWorkbenchCtx.perspective(lt.getName()));\n+        builder.group(EMPTYONANONEMPTY, EMPTYONANONEMPTY, \"\", false);\n+        builder.endGroup();\n+        builder.endGroup();\n+\n+        List<LayoutTemplate> templates = new ArrayList<>();\n+        templates.add(lt);\n+        NavTree originalTree = builder.build();\n+\n+        assertEquals(2, originalTree.getRootItems().size());\n+        assertNotNull(originalTree.getItemById(EMPTYONANONEMPTY));\n+        assertNotNull(originalTree.getItemById(EMPTY_GROUP));\n+        assertNotNull(originalTree.getItemById(EMPTYCHILDGROUP));\n+\n+        NavTree runtimeTree = runtimeNavigationBuilder.buildRuntimeTree(originalTree, templates);\n+\n+        assertNull(runtimeTree.getItemById(EMPTYONANONEMPTY));\n+        assertNull(runtimeTree.getItemById(EMPTY_GROUP));\n+        assertNull(runtimeTree.getItemById(EMPTYCHILDGROUP));\n+\n+        assertEquals(1, runtimeTree.getRootItems().size());\n+        NavGroup notPrunedGroup = (NavGroup) runtimeTree.getItemById(NOT_PRUNED_GROUP);\n+        NavItem item = runtimeTree.getItemById(ITEM);\n+        assertNotNull(notPrunedGroup);\n+        assertNotNull(item);\n+        assertEquals(notPrunedGroup, item.getParent());\n+        assertEquals(1, notPrunedGroup.getChildren().size());\n+    }\n+\n+    @Test\n+    public void removeItemWithoutTemplateTest() {\n+        NavTreeBuilder builder = new NavTreeBuilder();\n+        LayoutTemplate lt = new LayoutTemplate(\"lt1\");\n+\n+        final String ITEM = \"item1\";\n+        final String ITEM_TO_REMOVE = \"item2\";\n+        final String GROUP = \"group\";\n+\n+        builder.group(GROUP, GROUP, \"\", false);\n+        builder.item(ITEM, ITEM, \"\", false, NavWorkbenchCtx.perspective(lt.getName()));\n+        builder.item(ITEM_TO_REMOVE, ITEM_TO_REMOVE, \"\", false);\n+        builder.endGroup();\n+\n+        NavTree originalTree = builder.build();\n+\n+        assertNotNull(originalTree.getItemById(ITEM_TO_REMOVE));\n+\n+        List<LayoutTemplate> templates = new ArrayList<>();\n+        templates.add(lt);\n+        NavTree runtimeTree = runtimeNavigationBuilder.buildRuntimeTree(originalTree, templates);\n+\n+        assertEquals(1, runtimeTree.getRootItems().size());\n+        NavGroup group = (NavGroup) runtimeTree.getItemById(GROUP);\n+        assertNotNull(group);\n+        assertEquals(1, group.getChildren().size());\n+        assertNull(runtimeTree.getItemById(ITEM_TO_REMOVE));\n+        assertNotNull(runtimeTree.getItemById(ITEM));\n+    }\n+\n+    @Test\n+    public void groupForOrphanItemsTest() {\n+        final String ORPHAN_ITEM = \"orphanitem\";\n+\n+        NavTreeBuilder builder = new NavTreeBuilder();\n+        LayoutTemplate lt = new LayoutTemplate(\"lt1\");\n+        LayoutTemplate lt2 = new LayoutTemplate(ORPHAN_ITEM);\n+\n+        final String ITEM = \"item1\";\n+        final String ITEM_TO_REMOVE = \"item2\";\n+        final String GROUP = \"group\";\n+\n+        builder.group(GROUP, GROUP, \"\", false);\n+        builder.item(ITEM, ITEM, \"\", false, NavWorkbenchCtx.perspective(lt.getName()));\n+        builder.item(ITEM_TO_REMOVE, ITEM_TO_REMOVE, \"\", false);\n+        builder.endGroup();\n+\n+        List<LayoutTemplate> templates = new ArrayList<>();\n+        templates.add(lt);\n+        templates.add(lt2);\n+        NavTree originalTree = builder.build();\n+        assertNull(originalTree.getItemById(RuntimeNavigationBuilder.ORPHAN_GROUP_ID));\n+        assertEquals(1, originalTree.getRootItems().size());\n+\n+        NavTree runtimeTree = runtimeNavigationBuilder.buildRuntimeTree(originalTree, templates);\n+        assertEquals(2, runtimeTree.getRootItems().size());\n+\n+        NavGroup orphanItemsGroup = (NavGroup) runtimeTree.getItemById(RuntimeNavigationBuilder.ORPHAN_GROUP_ID);\n+        assertNotNull(orphanItemsGroup);\n+        assertEquals(1, orphanItemsGroup.getChildren().size());\n+\n+        NavItem orphanItem = runtimeTree.getItemById(ORPHAN_ITEM);\n+        String resourceId = NavWorkbenchCtx.get(orphanItem).getResourceId();\n+        assertEquals(ORPHAN_ITEM, resourceId);\n+        assertEquals(orphanItemsGroup, orphanItem.getParent());\n+    }\n+\n+    @Test\n+    public void treeForEmptyNavigationTest() {\n+        LayoutTemplate lt1 = new LayoutTemplate(\"lt1\");\n+        LayoutTemplate lt2 = new LayoutTemplate(\"lt2\");\n+        LayoutTemplate lt3 = new LayoutTemplate(\"lt3\");\n+\n+        List<LayoutTemplate> templates = new ArrayList<>();\n+        templates.add(lt1);\n+        templates.add(lt2);\n+        templates.add(lt3);", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk3NDIzNA==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r423974234", "bodyText": "Consider declaring these variables as class-scoped constants.\nI see them being repeatedly declared/used on other methods.", "author": "caponetto", "createdAt": "2020-05-12T19:17:55Z", "path": "dashbuilder/dashbuilder-runtime/src/test/java/org/dashbuilder/backend/navigation/RuntimeNavigationBuilderTest.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.backend.navigation;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.dashbuilder.navigation.NavGroup;\n+import org.dashbuilder.navigation.NavItem;\n+import org.dashbuilder.navigation.NavTree;\n+import org.dashbuilder.navigation.impl.NavTreeBuilder;\n+import org.dashbuilder.navigation.workbench.NavWorkbenchCtx;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutTemplate;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class RuntimeNavigationBuilderTest {\n+\n+    RuntimeNavigationBuilder runtimeNavigationBuilder;\n+\n+    @Before\n+    public void init() {\n+        runtimeNavigationBuilder = new RuntimeNavigationBuilder();\n+    }\n+\n+    /**\n+     * Checks if groups are pruned correctly\n+     */\n+    @Test\n+    public void groupPruneTest() {\n+        NavTreeBuilder builder = new NavTreeBuilder();\n+        LayoutTemplate lt = new LayoutTemplate(\"lt1\");\n+\n+        final String ITEM = \"item1\";\n+        final String NOT_PRUNED_GROUP = \"notemptygroup\";\n+        final String EMPTY_GROUP = \"emptyGroup\";\n+        final String EMPTYCHILDGROUP = \"emptychildgroup\";\n+        final String EMPTYONANONEMPTY = \"empty_on_a_not_empty\";\n+\n+        builder.group(EMPTY_GROUP, \"empty\", \"\", false);\n+        builder.group(EMPTYCHILDGROUP, \"\", \"\", false);\n+        builder.endGroup();\n+        builder.endGroup();\n+\n+        builder.group(NOT_PRUNED_GROUP, \"notemptygroup\", \"\", false);\n+        builder.item(ITEM, \"item1\", \"\", false, NavWorkbenchCtx.perspective(lt.getName()));\n+        builder.group(EMPTYONANONEMPTY, EMPTYONANONEMPTY, \"\", false);\n+        builder.endGroup();\n+        builder.endGroup();\n+\n+        List<LayoutTemplate> templates = new ArrayList<>();\n+        templates.add(lt);\n+        NavTree originalTree = builder.build();\n+\n+        assertEquals(2, originalTree.getRootItems().size());\n+        assertNotNull(originalTree.getItemById(EMPTYONANONEMPTY));\n+        assertNotNull(originalTree.getItemById(EMPTY_GROUP));\n+        assertNotNull(originalTree.getItemById(EMPTYCHILDGROUP));\n+\n+        NavTree runtimeTree = runtimeNavigationBuilder.buildRuntimeTree(originalTree, templates);\n+\n+        assertNull(runtimeTree.getItemById(EMPTYONANONEMPTY));\n+        assertNull(runtimeTree.getItemById(EMPTY_GROUP));\n+        assertNull(runtimeTree.getItemById(EMPTYCHILDGROUP));\n+\n+        assertEquals(1, runtimeTree.getRootItems().size());\n+        NavGroup notPrunedGroup = (NavGroup) runtimeTree.getItemById(NOT_PRUNED_GROUP);\n+        NavItem item = runtimeTree.getItemById(ITEM);\n+        assertNotNull(notPrunedGroup);\n+        assertNotNull(item);\n+        assertEquals(notPrunedGroup, item.getParent());\n+        assertEquals(1, notPrunedGroup.getChildren().size());\n+    }\n+\n+    @Test\n+    public void removeItemWithoutTemplateTest() {\n+        NavTreeBuilder builder = new NavTreeBuilder();\n+        LayoutTemplate lt = new LayoutTemplate(\"lt1\");\n+\n+        final String ITEM = \"item1\";\n+        final String ITEM_TO_REMOVE = \"item2\";\n+        final String GROUP = \"group\";", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk3NTMwOA==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r423975308", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<LayoutTemplate> templates = new ArrayList<>();\n          \n          \n            \n                    templates.add(lt);\n          \n          \n            \n                    templates.add(lt2);\n          \n          \n            \n                    List<LayoutTemplate> templates = Arrays.asList(lt, lt2);\n          \n      \n    \n    \n  \n\nJust a suggestion to make it shorter :)", "author": "caponetto", "createdAt": "2020-05-12T19:19:57Z", "path": "dashbuilder/dashbuilder-runtime/src/test/java/org/dashbuilder/backend/navigation/RuntimeNavigationBuilderTest.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.backend.navigation;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.dashbuilder.navigation.NavGroup;\n+import org.dashbuilder.navigation.NavItem;\n+import org.dashbuilder.navigation.NavTree;\n+import org.dashbuilder.navigation.impl.NavTreeBuilder;\n+import org.dashbuilder.navigation.workbench.NavWorkbenchCtx;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutTemplate;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class RuntimeNavigationBuilderTest {\n+\n+    RuntimeNavigationBuilder runtimeNavigationBuilder;\n+\n+    @Before\n+    public void init() {\n+        runtimeNavigationBuilder = new RuntimeNavigationBuilder();\n+    }\n+\n+    /**\n+     * Checks if groups are pruned correctly\n+     */\n+    @Test\n+    public void groupPruneTest() {\n+        NavTreeBuilder builder = new NavTreeBuilder();\n+        LayoutTemplate lt = new LayoutTemplate(\"lt1\");\n+\n+        final String ITEM = \"item1\";\n+        final String NOT_PRUNED_GROUP = \"notemptygroup\";\n+        final String EMPTY_GROUP = \"emptyGroup\";\n+        final String EMPTYCHILDGROUP = \"emptychildgroup\";\n+        final String EMPTYONANONEMPTY = \"empty_on_a_not_empty\";\n+\n+        builder.group(EMPTY_GROUP, \"empty\", \"\", false);\n+        builder.group(EMPTYCHILDGROUP, \"\", \"\", false);\n+        builder.endGroup();\n+        builder.endGroup();\n+\n+        builder.group(NOT_PRUNED_GROUP, \"notemptygroup\", \"\", false);\n+        builder.item(ITEM, \"item1\", \"\", false, NavWorkbenchCtx.perspective(lt.getName()));\n+        builder.group(EMPTYONANONEMPTY, EMPTYONANONEMPTY, \"\", false);\n+        builder.endGroup();\n+        builder.endGroup();\n+\n+        List<LayoutTemplate> templates = new ArrayList<>();\n+        templates.add(lt);\n+        NavTree originalTree = builder.build();\n+\n+        assertEquals(2, originalTree.getRootItems().size());\n+        assertNotNull(originalTree.getItemById(EMPTYONANONEMPTY));\n+        assertNotNull(originalTree.getItemById(EMPTY_GROUP));\n+        assertNotNull(originalTree.getItemById(EMPTYCHILDGROUP));\n+\n+        NavTree runtimeTree = runtimeNavigationBuilder.buildRuntimeTree(originalTree, templates);\n+\n+        assertNull(runtimeTree.getItemById(EMPTYONANONEMPTY));\n+        assertNull(runtimeTree.getItemById(EMPTY_GROUP));\n+        assertNull(runtimeTree.getItemById(EMPTYCHILDGROUP));\n+\n+        assertEquals(1, runtimeTree.getRootItems().size());\n+        NavGroup notPrunedGroup = (NavGroup) runtimeTree.getItemById(NOT_PRUNED_GROUP);\n+        NavItem item = runtimeTree.getItemById(ITEM);\n+        assertNotNull(notPrunedGroup);\n+        assertNotNull(item);\n+        assertEquals(notPrunedGroup, item.getParent());\n+        assertEquals(1, notPrunedGroup.getChildren().size());\n+    }\n+\n+    @Test\n+    public void removeItemWithoutTemplateTest() {\n+        NavTreeBuilder builder = new NavTreeBuilder();\n+        LayoutTemplate lt = new LayoutTemplate(\"lt1\");\n+\n+        final String ITEM = \"item1\";\n+        final String ITEM_TO_REMOVE = \"item2\";\n+        final String GROUP = \"group\";\n+\n+        builder.group(GROUP, GROUP, \"\", false);\n+        builder.item(ITEM, ITEM, \"\", false, NavWorkbenchCtx.perspective(lt.getName()));\n+        builder.item(ITEM_TO_REMOVE, ITEM_TO_REMOVE, \"\", false);\n+        builder.endGroup();\n+\n+        NavTree originalTree = builder.build();\n+\n+        assertNotNull(originalTree.getItemById(ITEM_TO_REMOVE));\n+\n+        List<LayoutTemplate> templates = new ArrayList<>();\n+        templates.add(lt);\n+        NavTree runtimeTree = runtimeNavigationBuilder.buildRuntimeTree(originalTree, templates);\n+\n+        assertEquals(1, runtimeTree.getRootItems().size());\n+        NavGroup group = (NavGroup) runtimeTree.getItemById(GROUP);\n+        assertNotNull(group);\n+        assertEquals(1, group.getChildren().size());\n+        assertNull(runtimeTree.getItemById(ITEM_TO_REMOVE));\n+        assertNotNull(runtimeTree.getItemById(ITEM));\n+    }\n+\n+    @Test\n+    public void groupForOrphanItemsTest() {\n+        final String ORPHAN_ITEM = \"orphanitem\";\n+\n+        NavTreeBuilder builder = new NavTreeBuilder();\n+        LayoutTemplate lt = new LayoutTemplate(\"lt1\");\n+        LayoutTemplate lt2 = new LayoutTemplate(ORPHAN_ITEM);\n+\n+        final String ITEM = \"item1\";\n+        final String ITEM_TO_REMOVE = \"item2\";\n+        final String GROUP = \"group\";\n+\n+        builder.group(GROUP, GROUP, \"\", false);\n+        builder.item(ITEM, ITEM, \"\", false, NavWorkbenchCtx.perspective(lt.getName()));\n+        builder.item(ITEM_TO_REMOVE, ITEM_TO_REMOVE, \"\", false);\n+        builder.endGroup();\n+\n+        List<LayoutTemplate> templates = new ArrayList<>();\n+        templates.add(lt);\n+        templates.add(lt2);", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2NTcyNw==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424365727", "bodyText": "Please add copyright header to this file.", "author": "caponetto", "createdAt": "2020-05-13T11:30:28Z", "path": "dashbuilder/dashbuilder-runtime/pom.xml", "diffHunk": "@@ -0,0 +1,893 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2NzMyNw==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424367327", "bodyText": "We should add an entry in the BOM (https://github.com/kiegroup/droolsjbpm-build-bootstrap) for this new artifact, shouldn't we?", "author": "caponetto", "createdAt": "2020-05-13T11:33:26Z", "path": "dashbuilder/dashbuilder-runtime/pom.xml", "diffHunk": "@@ -0,0 +1,893 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<parent>\n+\t\t<groupId>org.dashbuilder</groupId>\n+\t\t<artifactId>dashbuilder-parent</artifactId>\n+\t\t<version>7.38.0-SNAPSHOT</version>\n+\t\t<relativePath>../pom.xml</relativePath>\n+\t</parent>\n+\n+\t<artifactId>dashbuilder-runtime</artifactId>", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc1MzY5MA==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r426753690", "bodyText": "Thanks!\nCreated PR kiegroup/droolsjbpm-build-bootstrap#1316", "author": "jesuino", "createdAt": "2020-05-18T16:32:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2NzMyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3MTcwNw==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424371707", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String multipleImportStr = System.getProperty(DASHBUILDER_RUNTIME_MULTIPLE_IMPORT, \"false\");\n          \n          \n            \n                    String allowExternalStr = System.getProperty(ALLOW_EXTERNAL_FILE_REGISTER_PROP, \"true\");\n          \n          \n            \n                    String multipleImportStr = System.getProperty(DASHBUILDER_RUNTIME_MULTIPLE_IMPORT, Boolean.FALSE.toString());\n          \n          \n            \n                    String allowExternalStr = System.getProperty(ALLOW_EXTERNAL_FILE_REGISTER_PROP, Boolean.TRUE.toString());", "author": "caponetto", "createdAt": "2020-05-13T11:41:59Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeOptions.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.backend;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.uberfire.commons.data.Pair;\n+\n+/**\n+ * Holds Runtime System properties\n+ *\n+ */\n+@ApplicationScoped\n+public class RuntimeOptions {\n+\n+    Logger logger = LoggerFactory.getLogger(RuntimeOptions.class);\n+\n+    private static final String IMPORTS_BASE_DIR_PROP = \"org.dashbuilder.import.base.dir\";\n+\n+    private static final String IMPORT_FILE_LOCATION_PROP = \"dashbuilder.runtime.import\";\n+\n+    private static final String UPLOAD_SIZE_PROP = \"dashbuilder.runtime.upload.size\";\n+\n+    private static final String ALLOW_EXTERNAL_FILE_REGISTER_PROP = \"dashbuilder.runtime.allowExternal\";\n+\n+    private static final String DASHBUILDER_RUNTIME_MULTIPLE_IMPORT = \"dashbuilder.runtime.multiple\";\n+\n+    private static final int DEFAULT_UPLOAD_SIZE = 96 * 1024;\n+\n+    private boolean multipleImport;\n+    private boolean allowExternal;\n+    private String importFileLocation;\n+    private String importsBaseDir;\n+    private int uploadSize;\n+\n+    @PostConstruct\n+    public void init() {\n+        String multipleImportStr = System.getProperty(DASHBUILDER_RUNTIME_MULTIPLE_IMPORT, \"false\");\n+        String allowExternalStr = System.getProperty(ALLOW_EXTERNAL_FILE_REGISTER_PROP, \"true\");", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYxOTE5Mw==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r426619193", "bodyText": "Thanks, you also reminded me that I should use default false for allowExternalStr!", "author": "jesuino", "createdAt": "2020-05-18T13:19:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3MTcwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3NzA2MA==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424377060", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // TODO Auto-generated method stub", "author": "caponetto", "createdAt": "2020-05-13T11:52:28Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/remote/services/dummy/DummyPerspectiveServices.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.backend.remote.services.dummy;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.jboss.errai.bus.server.annotations.Service;\n+import org.uberfire.backend.vfs.Path;\n+import org.uberfire.ext.editor.commons.file.DefaultMetadata;\n+import org.uberfire.ext.layout.editor.api.PerspectiveServices;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutTemplate;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutTemplate.Style;\n+import org.uberfire.ext.plugin.model.Plugin;\n+\n+\n+@Service\n+@ApplicationScoped\n+public class DummyPerspectiveServices implements PerspectiveServices {\n+\n+    @Override\n+    public Path copy(Path path, String newName, String comment) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Path copy(Path path, String newName, Path targetDirectory, String comment) {\n+        return null;\n+    }\n+\n+    @Override\n+    public void delete(Path path, String comment) {\n+        \n+    }\n+\n+    @Override\n+    public Path saveAndRename(Path path, String newFileName, DefaultMetadata metadata, LayoutTemplate content, String comment) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Path rename(Path path, String newName, String comment) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Path save(Path path, LayoutTemplate content, DefaultMetadata metadata, String comment) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Plugin createNewPerspective(String name, Style style) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Collection<LayoutTemplate> listLayoutTemplates() {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public LayoutTemplate getLayoutTemplate(String perspectiveName) {\n+        return null;\n+    }\n+\n+    @Override\n+    public LayoutTemplate getLayoutTemplate(Path perspectivePath) {\n+        return null;\n+    }\n+\n+    @Override\n+    public LayoutTemplate getLayoutTemplate(Plugin perspectivePlugin) {\n+        return null;\n+    }\n+\n+    @Override\n+    public LayoutTemplate convertToLayoutTemplate(String layoutModel) {\n+        // TODO Auto-generated method stub", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3ODAzNQ==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424378035", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This should removed as soon as PluginServices cliend side mocked service starts working.\n          \n          \n            \n             * This should be removed as soon as PluginServices cliend side mocked service starts working.", "author": "caponetto", "createdAt": "2020-05-13T11:54:19Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/remote/services/dummy/DummyPluginServices.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.backend.remote.services.dummy;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.jboss.errai.bus.server.annotations.Service;\n+import org.uberfire.backend.vfs.Path;\n+import org.uberfire.ext.editor.commons.file.DefaultMetadata;\n+import org.uberfire.ext.plugin.model.DynamicMenu;\n+import org.uberfire.ext.plugin.model.LayoutEditorModel;\n+import org.uberfire.ext.plugin.model.Media;\n+import org.uberfire.ext.plugin.model.Plugin;\n+import org.uberfire.ext.plugin.model.PluginContent;\n+import org.uberfire.ext.plugin.model.PluginType;\n+import org.uberfire.ext.plugin.model.RuntimePlugin;\n+import org.uberfire.ext.plugin.service.PluginServices;\n+\n+/**\n+ * This should removed as soon as PluginServices cliend side mocked service starts working.", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM4MDg5NQ==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424380895", "bodyText": "Please double-check this FIXME. Shoult it really be there or it is a leftover?", "author": "caponetto", "createdAt": "2020-05-13T11:59:42Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/resources/LogoutResource.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.backend.resources;\n+\n+import java.net.URI;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.Response.Status;\n+import javax.ws.rs.core.UriInfo;\n+\n+/**\n+ * Resource to logout from Runtime App\n+ *\n+ */\n+@Path(\"/logout\")\n+public class LogoutResource {\n+\n+    @GET\n+    public Response logout(@Context HttpServletRequest request, @Context UriInfo uriInfo) {\n+        request.getSession().invalidate();\n+        String contextPath = \"/\"; // FIXME: This should be updated if the WAR is not deployed in the root context", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM4MjUyOQ==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424382529", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class RuntimeJaxAppApp extends Application {\n          \n          \n            \n            public class RuntimeJaxApp extends Application {", "author": "caponetto", "createdAt": "2020-05-13T12:02:46Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/resources/RuntimeJaxAppApp.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.backend.resources;\n+\n+import javax.ws.rs.ApplicationPath;\n+import javax.ws.rs.core.Application;\n+\n+@ApplicationPath(\"/rest\")\n+public class RuntimeJaxAppApp extends Application {", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM5NjIyMA==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424396220", "bodyText": "Modifier public is redundant for interface methods. Please check all methods.", "author": "caponetto", "createdAt": "2020-05-13T12:26:59Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/service/RuntimeModelRegistry.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.shared.service;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.dashbuilder.shared.model.DashbuilderRuntimeMode;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+\n+import static org.dashbuilder.shared.model.DashbuilderRuntimeMode.MULTIPLE_IMPORT;\n+\n+/**\n+ * Provides access to a saved ImportModelService\n+ *\n+ */\n+public interface RuntimeModelRegistry {\n+\n+    public default boolean acceptingNewImports() {\n+        return getMode() == MULTIPLE_IMPORT ||\n+               (getMode() == DashbuilderRuntimeMode.SINGLE_IMPORT && isEmpty());\n+    }\n+    \n+    /**\n+     * Returns the first model available \n+     * \n+     * @return\n+     */\n+    Optional<RuntimeModel> single();\n+    \n+\n+    /**\n+     * Returns if this registry has at least one model.\n+     * @return\n+     */\n+    public boolean isEmpty();", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM5NjYzMw==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424396633", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public boolean validate(String file);\n          \n          \n            \n                boolean validate(String file);", "author": "caponetto", "createdAt": "2020-05-13T12:27:41Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/service/ImportValidationService.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.shared.service;\n+\n+/**\n+ * Validates an imported ZIP file\n+ *\n+ */\n+public interface ImportValidationService {\n+\n+    /**\n+     * \n+     * Validate the file from the given path. \n+     * @param file\n+     * The File path\n+     * @return\n+     * true if the file is valid, false otherwise;\n+     */\n+    public boolean validate(String file);", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyNjgxNA==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424426814", "bodyText": "As there's an i18n-key, why the title is hardcoded? Same applies to the subtitle below.", "author": "caponetto", "createdAt": "2020-05-13T13:14:36Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/RuntimeScreen.html", "diffHunk": "@@ -0,0 +1,31 @@\n+<!--\n+  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<div id=\"runtimePage\">\n+    <div class=\"runtimePageBody\">\n+        <div\n+            class=\"runtimePage__content runtimeContent--bg-image runtime-blank-slate\">\n+            <div\n+                class=\"container-fluid runtime-container-fluid--blank-slate\">\n+                <div class=\"blank-slate-pf row\">\n+                    <h1 data-i18n-key=\"title\">Welcome to Dashbuilder Runtimes</h1>", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyOTU4Mg==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424429582", "bodyText": "Suggested change", "author": "caponetto", "createdAt": "2020-05-13T13:18:33Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/remote/services/dataset/RuntimeDataSetLookupServices.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.backend.remote.services.dataset;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.dataset.DataSet;\n+import org.dashbuilder.dataset.DataSetLookup;\n+import org.dashbuilder.dataset.DataSetManager;\n+import org.dashbuilder.dataset.DataSetMetadata;\n+import org.dashbuilder.dataset.def.DataSetDef;\n+import org.dashbuilder.dataset.service.DataSetLookupServices;\n+import org.jboss.errai.bus.server.annotations.Service;\n+\n+@Service\n+@ApplicationScoped\n+public class RuntimeDataSetLookupServices implements DataSetLookupServices {\n+\n+    @Inject\n+    DataSetManager manager;\n+    \n+", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQzODY4Mg==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424438682", "bodyText": "This constructor is redundant.", "author": "caponetto", "createdAt": "2020-05-13T13:30:45Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/services/dataset/provider/RuntimeBeanDataSetProvider.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.backend.services.dataset.provider;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.enterprise.inject.spi.Bean;\n+import javax.enterprise.inject.spi.BeanManager;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.dataprovider.BeanDataSetProvider;\n+import org.dashbuilder.dataprovider.StaticDataSetProvider;\n+import org.dashbuilder.dataset.DataSetGenerator;\n+import org.dashbuilder.dataset.def.BeanDataSetDef;\n+import org.dashbuilder.dataset.def.DataSetDef;\n+\n+@ApplicationScoped\n+public class RuntimeBeanDataSetProvider extends BeanDataSetProvider {\n+\n+    protected BeanManager beanManager;\n+    protected Map<String, DataSetGenerator> generatorMap = new HashMap<>();\n+\n+    public RuntimeBeanDataSetProvider() {\n+        super();\n+    }", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MTY0NQ==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424441645", "bodyText": "Consider instantiating the InitialContext only once, for example in the PostConstruct.", "author": "caponetto", "createdAt": "2020-05-13T13:34:49Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/services/dataset/provider/RuntimeSQLDataSourceLocator.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.backend.services.dataset.provider;\n+\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.naming.InitialContext;\n+import javax.sql.DataSource;\n+\n+import org.dashbuilder.dataprovider.sql.JDBCUtils;\n+import org.dashbuilder.dataprovider.sql.SQLDataSourceLocator;\n+import org.dashbuilder.dataset.def.SQLDataSetDef;\n+import org.dashbuilder.dataset.def.SQLDataSourceDef;\n+\n+@ApplicationScoped\n+public class RuntimeSQLDataSourceLocator implements SQLDataSourceLocator {\n+\n+    @Override\n+    public DataSource lookup(SQLDataSetDef def) throws Exception {\n+        InitialContext ctx = new InitialContext();", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2MzMyNQ==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424563325", "bodyText": "Please add copyright header to this file.", "author": "caponetto", "createdAt": "2020-05-13T16:15:20Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/RuntimeScreen.less", "diffHunk": "@@ -0,0 +1,40 @@\n+#runtimePage {", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2NDM5Ng==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424564396", "bodyText": "As there's an i18n-key, why the title is hardcoded? Same applies to subtitle and importButton below.", "author": "caponetto", "createdAt": "2020-05-13T16:16:59Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/UploadDashboardsScreen.html", "diffHunk": "@@ -0,0 +1,36 @@\n+<!--\n+  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<div class=\"blank-slate-pf \" id=\"emptyImport\">\n+    <div class=\"blank-slate-pf-icon\">\n+        <span class=\"pficon pficon pficon-add-circle-o\"></span>\n+    </div>\n+    <h1 data-i18n-key=\"title\">Dashboards are not available</h1>", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5NDkyNw==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424594927", "bodyText": "Consider checking if def istanceof BeanDataSetDef before casting.", "author": "caponetto", "createdAt": "2020-05-13T17:04:29Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/services/dataset/provider/RuntimeBeanDataSetProvider.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.backend.services.dataset.provider;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.enterprise.inject.spi.Bean;\n+import javax.enterprise.inject.spi.BeanManager;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.dataprovider.BeanDataSetProvider;\n+import org.dashbuilder.dataprovider.StaticDataSetProvider;\n+import org.dashbuilder.dataset.DataSetGenerator;\n+import org.dashbuilder.dataset.def.BeanDataSetDef;\n+import org.dashbuilder.dataset.def.DataSetDef;\n+\n+@ApplicationScoped\n+public class RuntimeBeanDataSetProvider extends BeanDataSetProvider {\n+\n+    protected BeanManager beanManager;\n+    protected Map<String, DataSetGenerator> generatorMap = new HashMap<>();\n+\n+    public RuntimeBeanDataSetProvider() {\n+        super();\n+    }\n+\n+    @Inject\n+    public RuntimeBeanDataSetProvider(StaticDataSetProvider staticDataSetProvider,\n+                                      BeanManager beanManager) {\n+\n+        super(staticDataSetProvider);\n+        this.beanManager = beanManager;\n+    }\n+\n+    @PostConstruct\n+    protected void init() {\n+        Set<Bean<?>> beans = beanManager.getBeans(DataSetGenerator.class);\n+        for (Bean<?> bean : beans) {\n+            CreationalContext<?> ctx = beanManager.createCreationalContext(bean);\n+            DataSetGenerator generator = (DataSetGenerator) beanManager.getReference(bean, DataSetGenerator.class, ctx);\n+            generatorMap.put(bean.getBeanClass().getName(), generator);\n+        }\n+    }\n+\n+    @Override\n+    public DataSetGenerator lookupGenerator(DataSetDef def) {\n+        BeanDataSetDef beanDef = (BeanDataSetDef) def;", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5ODIyOA==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424598228", "bodyText": "Suggested change", "author": "caponetto", "createdAt": "2020-05-13T17:10:08Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/services/dataset/RuntimeCSVFileStorage.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.backend.services.dataset;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.dashbuilder.dataprovider.csv.CSVFileStorage;\n+import org.dashbuilder.dataset.def.CSVDataSetDef;\n+\n+@ApplicationScoped\n+public class RuntimeCSVFileStorage implements CSVFileStorage {\n+    \n+    Map<String, String> csvStorage;\n+    \n+    ", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMDIzMg==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424600232", "bodyText": "Since getCSVString can return null, csvStr.getBytes() could throw a NPE.", "author": "caponetto", "createdAt": "2020-05-13T17:13:25Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/services/dataset/RuntimeCSVFileStorage.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.backend.services.dataset;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.dashbuilder.dataprovider.csv.CSVFileStorage;\n+import org.dashbuilder.dataset.def.CSVDataSetDef;\n+\n+@ApplicationScoped\n+public class RuntimeCSVFileStorage implements CSVFileStorage {\n+    \n+    Map<String, String> csvStorage;\n+    \n+    \n+    public RuntimeCSVFileStorage() {\n+    }\n+\n+\n+    @PostConstruct\n+    public void init() {\n+        csvStorage = new HashMap<>();\n+    }\n+\n+    @Override\n+    public InputStream getCSVInputStream(CSVDataSetDef def) {\n+        String csvStr = getCSVString(def);\n+        return new ByteArrayInputStream(csvStr.getBytes());", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxNDQ2OQ==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424614469", "bodyText": "Consider creating an @EventHandler method instead of using onclick.", "author": "caponetto", "createdAt": "2020-05-13T17:36:55Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/UploadDashboardsScreen.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.client.screens;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.ui.Composite;\n+import elemental2.dom.DomGlobal;\n+import elemental2.dom.FormData;\n+import elemental2.dom.HTMLButtonElement;\n+import elemental2.dom.HTMLDivElement;\n+import elemental2.dom.HTMLFormElement;\n+import elemental2.dom.HTMLInputElement;\n+import elemental2.dom.RequestInit;\n+import elemental2.dom.Response;\n+import org.dashbuilder.client.RuntimeCommunication;\n+import org.dashbuilder.client.resources.i18n.AppConstants;\n+import org.jboss.errai.ui.shared.api.annotations.DataField;\n+import org.jboss.errai.ui.shared.api.annotations.Templated;\n+import org.uberfire.client.annotations.WorkbenchPartTitle;\n+import org.uberfire.client.annotations.WorkbenchScreen;\n+import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;\n+\n+@Templated\n+@Dependent\n+@WorkbenchScreen(identifier = UploadDashboardsScreen.ID)\n+public class UploadDashboardsScreen extends Composite {\n+\n+    public static final String ID = \"UploadDashboardsScreen\";\n+\n+    AppConstants i18n = AppConstants.INSTANCE;\n+\n+    @Inject\n+    @DataField\n+    HTMLButtonElement btnImport;\n+\n+    @Inject\n+    @DataField\n+    HTMLFormElement uploadForm;\n+\n+    @Inject\n+    @DataField\n+    HTMLInputElement inputFile;\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement emptyImport;\n+\n+    @Inject\n+    RuntimeCommunication runtimeCommunication;\n+\n+    @Inject\n+    BusyIndicatorView loading;\n+\n+    @PostConstruct\n+    public void build() {\n+        btnImport.onclick = e -> {", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxODY2NQ==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424618665", "bodyText": "Consider creating an @EventHandler method instead of using onchange.", "author": "caponetto", "createdAt": "2020-05-13T17:44:04Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/UploadDashboardsScreen.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.client.screens;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.ui.Composite;\n+import elemental2.dom.DomGlobal;\n+import elemental2.dom.FormData;\n+import elemental2.dom.HTMLButtonElement;\n+import elemental2.dom.HTMLDivElement;\n+import elemental2.dom.HTMLFormElement;\n+import elemental2.dom.HTMLInputElement;\n+import elemental2.dom.RequestInit;\n+import elemental2.dom.Response;\n+import org.dashbuilder.client.RuntimeCommunication;\n+import org.dashbuilder.client.resources.i18n.AppConstants;\n+import org.jboss.errai.ui.shared.api.annotations.DataField;\n+import org.jboss.errai.ui.shared.api.annotations.Templated;\n+import org.uberfire.client.annotations.WorkbenchPartTitle;\n+import org.uberfire.client.annotations.WorkbenchScreen;\n+import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;\n+\n+@Templated\n+@Dependent\n+@WorkbenchScreen(identifier = UploadDashboardsScreen.ID)\n+public class UploadDashboardsScreen extends Composite {\n+\n+    public static final String ID = \"UploadDashboardsScreen\";\n+\n+    AppConstants i18n = AppConstants.INSTANCE;\n+\n+    @Inject\n+    @DataField\n+    HTMLButtonElement btnImport;\n+\n+    @Inject\n+    @DataField\n+    HTMLFormElement uploadForm;\n+\n+    @Inject\n+    @DataField\n+    HTMLInputElement inputFile;\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement emptyImport;\n+\n+    @Inject\n+    RuntimeCommunication runtimeCommunication;\n+\n+    @Inject\n+    BusyIndicatorView loading;\n+\n+    @PostConstruct\n+    public void build() {\n+        btnImport.onclick = e -> {\n+            inputFile.click();\n+            return null;\n+        };\n+\n+        inputFile.onchange = e -> {", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyMDAxNQ==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424620015", "bodyText": "I'd be better to split this class into a View and a Presenter. Then, the logic below could be moved to the Presenter.", "author": "caponetto", "createdAt": "2020-05-13T17:46:16Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/UploadDashboardsScreen.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.client.screens;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.ui.Composite;\n+import elemental2.dom.DomGlobal;\n+import elemental2.dom.FormData;\n+import elemental2.dom.HTMLButtonElement;\n+import elemental2.dom.HTMLDivElement;\n+import elemental2.dom.HTMLFormElement;\n+import elemental2.dom.HTMLInputElement;\n+import elemental2.dom.RequestInit;\n+import elemental2.dom.Response;\n+import org.dashbuilder.client.RuntimeCommunication;\n+import org.dashbuilder.client.resources.i18n.AppConstants;\n+import org.jboss.errai.ui.shared.api.annotations.DataField;\n+import org.jboss.errai.ui.shared.api.annotations.Templated;\n+import org.uberfire.client.annotations.WorkbenchPartTitle;\n+import org.uberfire.client.annotations.WorkbenchScreen;\n+import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;\n+\n+@Templated\n+@Dependent\n+@WorkbenchScreen(identifier = UploadDashboardsScreen.ID)\n+public class UploadDashboardsScreen extends Composite {\n+\n+    public static final String ID = \"UploadDashboardsScreen\";\n+\n+    AppConstants i18n = AppConstants.INSTANCE;\n+\n+    @Inject\n+    @DataField\n+    HTMLButtonElement btnImport;\n+\n+    @Inject\n+    @DataField\n+    HTMLFormElement uploadForm;\n+\n+    @Inject\n+    @DataField\n+    HTMLInputElement inputFile;\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement emptyImport;\n+\n+    @Inject\n+    RuntimeCommunication runtimeCommunication;\n+\n+    @Inject\n+    BusyIndicatorView loading;\n+\n+    @PostConstruct\n+    public void build() {\n+        btnImport.onclick = e -> {\n+            inputFile.click();\n+            return null;\n+        };\n+\n+        inputFile.onchange = e -> {\n+            RequestInit request = RequestInit.create();", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyMjIzNQ==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424622235", "bodyText": "This is causing the page to reload after the upload, right? Can we avoid such a behavior?\nFrom a UX perspective, I think we should have a way to load the file right away on the current screen instead of reloading the entire page.", "author": "caponetto", "createdAt": "2020-05-13T17:49:59Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/UploadDashboardsScreen.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.client.screens;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.ui.Composite;\n+import elemental2.dom.DomGlobal;\n+import elemental2.dom.FormData;\n+import elemental2.dom.HTMLButtonElement;\n+import elemental2.dom.HTMLDivElement;\n+import elemental2.dom.HTMLFormElement;\n+import elemental2.dom.HTMLInputElement;\n+import elemental2.dom.RequestInit;\n+import elemental2.dom.Response;\n+import org.dashbuilder.client.RuntimeCommunication;\n+import org.dashbuilder.client.resources.i18n.AppConstants;\n+import org.jboss.errai.ui.shared.api.annotations.DataField;\n+import org.jboss.errai.ui.shared.api.annotations.Templated;\n+import org.uberfire.client.annotations.WorkbenchPartTitle;\n+import org.uberfire.client.annotations.WorkbenchScreen;\n+import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;\n+\n+@Templated\n+@Dependent\n+@WorkbenchScreen(identifier = UploadDashboardsScreen.ID)\n+public class UploadDashboardsScreen extends Composite {\n+\n+    public static final String ID = \"UploadDashboardsScreen\";\n+\n+    AppConstants i18n = AppConstants.INSTANCE;\n+\n+    @Inject\n+    @DataField\n+    HTMLButtonElement btnImport;\n+\n+    @Inject\n+    @DataField\n+    HTMLFormElement uploadForm;\n+\n+    @Inject\n+    @DataField\n+    HTMLInputElement inputFile;\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement emptyImport;\n+\n+    @Inject\n+    RuntimeCommunication runtimeCommunication;\n+\n+    @Inject\n+    BusyIndicatorView loading;\n+\n+    @PostConstruct\n+    public void build() {\n+        btnImport.onclick = e -> {\n+            inputFile.click();\n+            return null;\n+        };\n+\n+        inputFile.onchange = e -> {\n+            RequestInit request = RequestInit.create();\n+            request.setMethod(\"POST\");\n+            request.setBody(new FormData(uploadForm));\n+            loading.showBusyIndicator(i18n.uploadingDashboards());\n+            DomGlobal.window.fetch(\"/rest/upload\", request)\n+                            .then((Response response) -> response.text().then(id -> {\n+                                loading.hideBusyIndicator();\n+                                if (response.status == 200) {\n+                                    DomGlobal.window.location.assign(\"/dashbuilder.html?import=\" + id);", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyMzc2OA==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424623768", "bodyText": "Consider using i18n for this title.", "author": "caponetto", "createdAt": "2020-05-13T17:52:31Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/UploadDashboardsScreen.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.client.screens;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.ui.Composite;\n+import elemental2.dom.DomGlobal;\n+import elemental2.dom.FormData;\n+import elemental2.dom.HTMLButtonElement;\n+import elemental2.dom.HTMLDivElement;\n+import elemental2.dom.HTMLFormElement;\n+import elemental2.dom.HTMLInputElement;\n+import elemental2.dom.RequestInit;\n+import elemental2.dom.Response;\n+import org.dashbuilder.client.RuntimeCommunication;\n+import org.dashbuilder.client.resources.i18n.AppConstants;\n+import org.jboss.errai.ui.shared.api.annotations.DataField;\n+import org.jboss.errai.ui.shared.api.annotations.Templated;\n+import org.uberfire.client.annotations.WorkbenchPartTitle;\n+import org.uberfire.client.annotations.WorkbenchScreen;\n+import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;\n+\n+@Templated\n+@Dependent\n+@WorkbenchScreen(identifier = UploadDashboardsScreen.ID)\n+public class UploadDashboardsScreen extends Composite {\n+\n+    public static final String ID = \"UploadDashboardsScreen\";\n+\n+    AppConstants i18n = AppConstants.INSTANCE;\n+\n+    @Inject\n+    @DataField\n+    HTMLButtonElement btnImport;\n+\n+    @Inject\n+    @DataField\n+    HTMLFormElement uploadForm;\n+\n+    @Inject\n+    @DataField\n+    HTMLInputElement inputFile;\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement emptyImport;\n+\n+    @Inject\n+    RuntimeCommunication runtimeCommunication;\n+\n+    @Inject\n+    BusyIndicatorView loading;\n+\n+    @PostConstruct\n+    public void build() {\n+        btnImport.onclick = e -> {\n+            inputFile.click();\n+            return null;\n+        };\n+\n+        inputFile.onchange = e -> {\n+            RequestInit request = RequestInit.create();\n+            request.setMethod(\"POST\");\n+            request.setBody(new FormData(uploadForm));\n+            loading.showBusyIndicator(i18n.uploadingDashboards());\n+            DomGlobal.window.fetch(\"/rest/upload\", request)\n+                            .then((Response response) -> response.text().then(id -> {\n+                                loading.hideBusyIndicator();\n+                                if (response.status == 200) {\n+                                    DomGlobal.window.location.assign(\"/dashbuilder.html?import=\" + id);\n+                                } else {\n+                                    runtimeCommunication.showError(i18n.errorUploadingDashboards(), response);\n+                                }\n+                                return null;\n+                            }), error -> {\n+                                loading.hideBusyIndicator();\n+                                runtimeCommunication.showError(i18n.errorUploadingDashboards(), error);\n+                                return null;\n+                            });\n+            return null;\n+        };\n+    }\n+\n+    @WorkbenchPartTitle\n+    public String title() {\n+        return \"Upload Dashboards\";", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyNjI3MA==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424626270", "bodyText": "Consider splitting this class into View and Presenter.", "author": "caponetto", "createdAt": "2020-05-13T17:56:36Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/RuntimeScreen.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.client.screens;\n+\n+import java.util.Optional;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.Window;\n+import com.google.gwt.user.client.ui.Composite;\n+import elemental2.dom.HTMLDivElement;\n+import org.dashbuilder.client.RuntimeCommunication;\n+import org.dashbuilder.client.navbar.NavBarHelper;\n+import org.dashbuilder.client.navigation.NavigationManager;\n+import org.dashbuilder.client.perspective.RuntimePerspectiveGenerator;\n+import org.dashbuilder.client.resources.i18n.AppConstants;\n+import org.dashbuilder.navigation.NavTree;\n+import org.dashbuilder.shared.event.RuntimeModelEvent;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.service.RuntimeModelService;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.jboss.errai.common.client.api.ErrorCallback;\n+import org.jboss.errai.ui.shared.api.annotations.DataField;\n+import org.jboss.errai.ui.shared.api.annotations.Templated;\n+import org.uberfire.client.annotations.WorkbenchPartTitle;\n+import org.uberfire.client.annotations.WorkbenchScreen;\n+import org.uberfire.client.mvp.PlaceManager;\n+import org.uberfire.client.workbench.widgets.menu.megamenu.WorkbenchMegaMenuPresenter;\n+import org.uberfire.ext.layout.editor.client.generator.LayoutGenerator;\n+import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;\n+import org.uberfire.lifecycle.OnOpen;\n+import org.uberfire.workbench.model.menu.Menus;\n+\n+@Templated\n+@ApplicationScoped\n+@WorkbenchScreen(identifier = RuntimeScreen.ID)\n+public class RuntimeScreen extends Composite {", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyNjcwNA==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424626704", "bodyText": "Consider using i18n for this title.", "author": "caponetto", "createdAt": "2020-05-13T17:57:17Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/RuntimeScreen.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.client.screens;\n+\n+import java.util.Optional;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.Window;\n+import com.google.gwt.user.client.ui.Composite;\n+import elemental2.dom.HTMLDivElement;\n+import org.dashbuilder.client.RuntimeCommunication;\n+import org.dashbuilder.client.navbar.NavBarHelper;\n+import org.dashbuilder.client.navigation.NavigationManager;\n+import org.dashbuilder.client.perspective.RuntimePerspectiveGenerator;\n+import org.dashbuilder.client.resources.i18n.AppConstants;\n+import org.dashbuilder.navigation.NavTree;\n+import org.dashbuilder.shared.event.RuntimeModelEvent;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.service.RuntimeModelService;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.jboss.errai.common.client.api.ErrorCallback;\n+import org.jboss.errai.ui.shared.api.annotations.DataField;\n+import org.jboss.errai.ui.shared.api.annotations.Templated;\n+import org.uberfire.client.annotations.WorkbenchPartTitle;\n+import org.uberfire.client.annotations.WorkbenchScreen;\n+import org.uberfire.client.mvp.PlaceManager;\n+import org.uberfire.client.workbench.widgets.menu.megamenu.WorkbenchMegaMenuPresenter;\n+import org.uberfire.ext.layout.editor.client.generator.LayoutGenerator;\n+import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;\n+import org.uberfire.lifecycle.OnOpen;\n+import org.uberfire.workbench.model.menu.Menus;\n+\n+@Templated\n+@ApplicationScoped\n+@WorkbenchScreen(identifier = RuntimeScreen.ID)\n+public class RuntimeScreen extends Composite {\n+\n+    public static final String ID = \"RuntimeScreen\";\n+    private static final String IMPORT_ID_PARAM = \"import\";\n+\n+    private AppConstants i18n = AppConstants.INSTANCE;\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement runtimePage;\n+\n+    @Inject\n+    private Caller<RuntimeModelService> importModelServiceCaller;\n+\n+    @Inject\n+    NavigationManager navigationManager;\n+\n+    @Inject\n+    RuntimePerspectiveGenerator perspectiveEditorGenerator;\n+\n+    @Inject\n+    NavBarHelper menusHelper;\n+\n+    @Inject\n+    WorkbenchMegaMenuPresenter menuBar;\n+\n+    @Inject\n+    PlaceManager placeManager;\n+\n+    @Inject\n+    LayoutGenerator layoutGenerator;\n+\n+    @Inject\n+    Event<RuntimeModelEvent> runtimeModelEvent;\n+\n+    @Inject\n+    BusyIndicatorView loading;\n+\n+    @Inject\n+    RuntimeCommunication runtimeCommunication;\n+    private RuntimeModel loadedModel;\n+\n+    @OnOpen\n+    public void onOpen() {\n+        if (loadedModel == null) {\n+            String importID = Window.Location.getParameter(IMPORT_ID_PARAM);\n+            loadRuntimeModel(importID);\n+        }\n+    }\n+\n+    @WorkbenchPartTitle\n+    public String getScreenTitle() {\n+        return \"Welcome to Dashboards\";", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNjU2Nw==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424636567", "bodyText": "Question: does it make sense to run the callback if plugins is empty?", "author": "caponetto", "createdAt": "2020-05-13T18:13:45Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/plugins/RuntimePerspectivePluginManager.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.plugins;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.Alternative;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.ui.IsWidget;\n+import org.dashbuilder.client.navigation.plugin.PerspectivePluginManager;\n+import org.dashbuilder.navigation.NavGroup;\n+import org.dashbuilder.navigation.NavItem;\n+import org.dashbuilder.navigation.layout.LayoutRecursionIssue;\n+import org.dashbuilder.navigation.layout.LayoutTemplateContext;\n+import org.dashbuilder.navigation.layout.LayoutTemplateInfo;\n+import org.dashbuilder.navigation.workbench.NavWorkbenchCtx;\n+import org.dashbuilder.shared.event.RuntimeModelEvent;\n+import org.jboss.errai.common.client.ui.ElementWrapperWidget;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutInstance;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutTemplate;\n+import org.uberfire.ext.layout.editor.client.generator.LayoutGenerator;\n+import org.uberfire.ext.plugin.model.Plugin;\n+import org.uberfire.ext.plugin.model.PluginType;\n+import org.uberfire.mvp.ParameterizedCommand;\n+\n+@Alternative\n+@ApplicationScoped\n+public class RuntimePerspectivePluginManager implements PerspectivePluginManager {\n+    \n+    @Inject\n+    LayoutGenerator layoutGenerator;\n+\n+    List<LayoutTemplate> templates = new ArrayList<>();\n+\n+    @Override\n+    public void loadPlugins() {\n+\n+    }\n+\n+    @Override\n+    public void getPerspectivePlugins(ParameterizedCommand<Collection<Plugin>> callback) {\n+        List<Plugin> plugins = templates.stream()\n+                                        .map(lt -> new Plugin(lt.getName(),\n+                                                              PluginType.PERSPECTIVE,\n+                                                              null))\n+                                        .collect(Collectors.toList());\n+        callback.execute(plugins);", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcwMTI1Mw==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r426701253", "bodyText": "Yes, otherwise it would make the UI stuck in some of the navigation drag components", "author": "jesuino", "createdAt": "2020-05-18T15:14:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNjU2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNzIwMw==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424637203", "bodyText": "This method is intentionally empty, right?\nIf so, could you add the comment // not used in runtime just like you did for the other methods?", "author": "caponetto", "createdAt": "2020-05-13T18:14:52Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/plugins/RuntimePerspectivePluginManager.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.plugins;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.Alternative;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.ui.IsWidget;\n+import org.dashbuilder.client.navigation.plugin.PerspectivePluginManager;\n+import org.dashbuilder.navigation.NavGroup;\n+import org.dashbuilder.navigation.NavItem;\n+import org.dashbuilder.navigation.layout.LayoutRecursionIssue;\n+import org.dashbuilder.navigation.layout.LayoutTemplateContext;\n+import org.dashbuilder.navigation.layout.LayoutTemplateInfo;\n+import org.dashbuilder.navigation.workbench.NavWorkbenchCtx;\n+import org.dashbuilder.shared.event.RuntimeModelEvent;\n+import org.jboss.errai.common.client.ui.ElementWrapperWidget;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutInstance;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutTemplate;\n+import org.uberfire.ext.layout.editor.client.generator.LayoutGenerator;\n+import org.uberfire.ext.plugin.model.Plugin;\n+import org.uberfire.ext.plugin.model.PluginType;\n+import org.uberfire.mvp.ParameterizedCommand;\n+\n+@Alternative\n+@ApplicationScoped\n+public class RuntimePerspectivePluginManager implements PerspectivePluginManager {\n+    \n+    @Inject\n+    LayoutGenerator layoutGenerator;\n+\n+    List<LayoutTemplate> templates = new ArrayList<>();\n+\n+    @Override\n+    public void loadPlugins() {\n+", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MzcyNQ==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424673725", "bodyText": "Null check here is not needed.", "author": "caponetto", "createdAt": "2020-05-13T19:17:30Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-navigation-client/src/main/java/org/dashbuilder/client/navigation/plugin/PerspectivePluginManagerImpl.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright 2016 JBoss, by Red Hat, Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.client.navigation.plugin;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Stack;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.client.navigation.NavigationManager;\n+import org.dashbuilder.navigation.event.PerspectivePluginsChangedEvent;\n+import org.dashbuilder.navigation.NavGroup;\n+import org.dashbuilder.navigation.NavItem;\n+import org.dashbuilder.navigation.NavTree;\n+import org.dashbuilder.navigation.layout.LayoutRecursionIssue;\n+import org.dashbuilder.navigation.layout.LayoutTemplateContext;\n+import org.dashbuilder.navigation.layout.LayoutTemplateInfo;\n+import org.dashbuilder.navigation.service.PerspectivePluginServices;\n+import org.dashbuilder.navigation.workbench.NavWorkbenchCtx;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.jboss.errai.common.client.api.RemoteCallback;\n+import org.jboss.errai.common.client.ui.ElementWrapperWidget;\n+import org.jboss.errai.ioc.client.api.EntryPoint;\n+import org.uberfire.client.workbench.type.ClientResourceType;\n+import org.uberfire.client.workbench.type.ClientTypeRegistry;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutInstance;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutTemplate;\n+import org.uberfire.ext.layout.editor.client.generator.LayoutGenerator;\n+import org.uberfire.ext.plugin.client.type.PerspectiveLayoutPluginResourceType;\n+import org.uberfire.ext.plugin.event.PluginAdded;\n+import org.uberfire.ext.plugin.event.PluginDeleted;\n+import org.uberfire.ext.plugin.event.PluginRenamed;\n+import org.uberfire.ext.plugin.event.PluginSaved;\n+import org.uberfire.ext.plugin.model.Plugin;\n+import org.uberfire.mvp.ParameterizedCommand;\n+import org.uberfire.workbench.model.ActivityResourceType;\n+\n+import com.google.gwt.user.client.ui.IsWidget;\n+\n+@EntryPoint\n+@ApplicationScoped\n+public class PerspectivePluginManagerImpl implements PerspectivePluginManager {\n+\n+    private ClientTypeRegistry clientTypeRegistry;\n+    private LayoutGenerator layoutGenerator;\n+    private NavigationManager navigationManager;\n+    private Caller<PerspectivePluginServices> pluginServices;\n+    private Event<PerspectivePluginsChangedEvent> perspectivesChangedEvent;\n+    private Map<String, Plugin> pluginMap = new HashMap<>();\n+    private boolean pluginsLoaded = false;\n+    private Stack<NavGroup> navGroupStack = new Stack<>();\n+\n+    @Inject\n+    public PerspectivePluginManagerImpl(ClientTypeRegistry clientTypeRegistry,\n+                                    LayoutGenerator layoutGenerator,\n+                                    NavigationManager navigationManager,\n+                                    Caller<PerspectivePluginServices> pluginServices,\n+                                    Event<PerspectivePluginsChangedEvent> perspectivesChangedEvent) {\n+        this.clientTypeRegistry = clientTypeRegistry;\n+        this.layoutGenerator = layoutGenerator;\n+        this.navigationManager = navigationManager;\n+        this.pluginServices = pluginServices;\n+        this.perspectivesChangedEvent = perspectivesChangedEvent;\n+    }\n+\n+    @Override\n+    public void getPerspectivePlugins(ParameterizedCommand<Collection<Plugin>> callback) {\n+        loadPlugins(callback);\n+    }\n+\n+\n+    @Override\n+    public boolean isRuntimePerspective(Plugin plugin) {\n+        ClientResourceType type = clientTypeRegistry.resolve(plugin.getPath());\n+        return type != null && type instanceof PerspectiveLayoutPluginResourceType;", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1ODU1Mw==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r426658553", "bodyText": "See this comment -> #956 (comment)", "author": "jesuino", "createdAt": "2020-05-18T14:15:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MzcyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MjM3Mg==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r424682372", "bodyText": "It seems that onPlugInAdded and onPlugInSaved share the same content.\nConsider creating a common method that they can use, thus avoiding code duplication.", "author": "caponetto", "createdAt": "2020-05-13T19:33:32Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-navigation-client/src/main/java/org/dashbuilder/client/navigation/plugin/PerspectivePluginManagerImpl.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright 2016 JBoss, by Red Hat, Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.client.navigation.plugin;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Stack;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.client.navigation.NavigationManager;\n+import org.dashbuilder.navigation.event.PerspectivePluginsChangedEvent;\n+import org.dashbuilder.navigation.NavGroup;\n+import org.dashbuilder.navigation.NavItem;\n+import org.dashbuilder.navigation.NavTree;\n+import org.dashbuilder.navigation.layout.LayoutRecursionIssue;\n+import org.dashbuilder.navigation.layout.LayoutTemplateContext;\n+import org.dashbuilder.navigation.layout.LayoutTemplateInfo;\n+import org.dashbuilder.navigation.service.PerspectivePluginServices;\n+import org.dashbuilder.navigation.workbench.NavWorkbenchCtx;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.jboss.errai.common.client.api.RemoteCallback;\n+import org.jboss.errai.common.client.ui.ElementWrapperWidget;\n+import org.jboss.errai.ioc.client.api.EntryPoint;\n+import org.uberfire.client.workbench.type.ClientResourceType;\n+import org.uberfire.client.workbench.type.ClientTypeRegistry;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutInstance;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutTemplate;\n+import org.uberfire.ext.layout.editor.client.generator.LayoutGenerator;\n+import org.uberfire.ext.plugin.client.type.PerspectiveLayoutPluginResourceType;\n+import org.uberfire.ext.plugin.event.PluginAdded;\n+import org.uberfire.ext.plugin.event.PluginDeleted;\n+import org.uberfire.ext.plugin.event.PluginRenamed;\n+import org.uberfire.ext.plugin.event.PluginSaved;\n+import org.uberfire.ext.plugin.model.Plugin;\n+import org.uberfire.mvp.ParameterizedCommand;\n+import org.uberfire.workbench.model.ActivityResourceType;\n+\n+import com.google.gwt.user.client.ui.IsWidget;\n+\n+@EntryPoint\n+@ApplicationScoped\n+public class PerspectivePluginManagerImpl implements PerspectivePluginManager {\n+\n+    private ClientTypeRegistry clientTypeRegistry;\n+    private LayoutGenerator layoutGenerator;\n+    private NavigationManager navigationManager;\n+    private Caller<PerspectivePluginServices> pluginServices;\n+    private Event<PerspectivePluginsChangedEvent> perspectivesChangedEvent;\n+    private Map<String, Plugin> pluginMap = new HashMap<>();\n+    private boolean pluginsLoaded = false;\n+    private Stack<NavGroup> navGroupStack = new Stack<>();\n+\n+    @Inject\n+    public PerspectivePluginManagerImpl(ClientTypeRegistry clientTypeRegistry,\n+                                    LayoutGenerator layoutGenerator,\n+                                    NavigationManager navigationManager,\n+                                    Caller<PerspectivePluginServices> pluginServices,\n+                                    Event<PerspectivePluginsChangedEvent> perspectivesChangedEvent) {\n+        this.clientTypeRegistry = clientTypeRegistry;\n+        this.layoutGenerator = layoutGenerator;\n+        this.navigationManager = navigationManager;\n+        this.pluginServices = pluginServices;\n+        this.perspectivesChangedEvent = perspectivesChangedEvent;\n+    }\n+\n+    @Override\n+    public void getPerspectivePlugins(ParameterizedCommand<Collection<Plugin>> callback) {\n+        loadPlugins(callback);\n+    }\n+\n+\n+    @Override\n+    public boolean isRuntimePerspective(Plugin plugin) {\n+        ClientResourceType type = clientTypeRegistry.resolve(plugin.getPath());\n+        return type != null && type instanceof PerspectiveLayoutPluginResourceType;\n+    }\n+\n+    @Override\n+    public boolean isRuntimePerspective(NavItem navItem) {\n+        return getRuntimePerspectiveId(navItem) != null;\n+    }\n+\n+    @Override\n+    public boolean isRuntimePerspective(String perspectiveId) {\n+        return pluginMap.containsKey(perspectiveId);\n+    }\n+\n+    @Override\n+    public String getRuntimePerspectiveId(NavItem navItem) {\n+        NavWorkbenchCtx navCtx = NavWorkbenchCtx.get(navItem);\n+        String resourceId = navCtx.getResourceId();\n+        ActivityResourceType resourceType = navCtx.getResourceType();\n+        boolean isRuntimePerspective = resourceId != null && ActivityResourceType.PERSPECTIVE.equals(resourceType) && isRuntimePerspective(resourceId);\n+        return isRuntimePerspective ? resourceId : null;\n+    }\n+\n+    @Override\n+    public boolean existsPerspectivePlugin(String perspectiveName) {\n+        return perspectiveName != null && pluginMap.get(perspectiveName) != null;\n+    }\n+\n+    @Override\n+    public void getLayoutTemplateInfo(String perspectiveName, ParameterizedCommand<LayoutTemplateInfo> callback) {\n+        pluginServices.call((RemoteCallback<LayoutTemplateInfo>) callback::execute).getLayoutTemplateInfo(perspectiveName);\n+    }\n+\n+    @Override\n+    public void getLayoutTemplateInfo(LayoutTemplate layoutTemplate, ParameterizedCommand<LayoutTemplateInfo> callback) {\n+        pluginServices.call((RemoteCallback<LayoutTemplateInfo>) callback::execute).getLayoutTemplateInfo(layoutTemplate);\n+    }\n+\n+    @Override\n+    public void buildPerspectiveWidget(String perspectiveName, LayoutTemplateContext layoutCtx, ParameterizedCommand<IsWidget> afterBuild, ParameterizedCommand<LayoutRecursionIssue> onInfiniteRecursion) {\n+        Plugin plugin = pluginMap.get(perspectiveName);\n+        pluginServices.call((LayoutTemplateInfo layoutInfo) -> {\n+\n+            if (!layoutInfo.getRecursionIssue().isEmpty()) {\n+                onInfiniteRecursion.execute(layoutInfo.getRecursionIssue());\n+            } else {\n+                String navGroupId = layoutCtx != null && layoutCtx.getNavGroupId() != null ? layoutCtx.getNavGroupId() : null;\n+                NavGroup navGroup = navGroupId != null ? (NavGroup) navigationManager.getNavTree().getItemById(navGroupId) : null;\n+                try {\n+                    if (navGroup != null) {\n+                        navGroupStack.push(navGroup);\n+                    }\n+                    LayoutInstance result = layoutGenerator.build(layoutInfo.getLayoutTemplate());\n+                    IsWidget widget = ElementWrapperWidget.getWidget(result.getElement());\n+                    afterBuild.execute(widget);\n+                }\n+                finally {\n+                    if (navGroup != null) {\n+                        navGroupStack.pop();\n+                    }\n+                }\n+            }\n+        }).getLayoutTemplateInfo(plugin, layoutCtx);\n+    }\n+\n+    /**\n+     * Get the last nav group instance passed to the execution of a {@link #buildPerspectiveWidget(String, LayoutTemplateContext, ParameterizedCommand, ParameterizedCommand)} call.\n+     *\n+     * @return The {@link NavGroup} instance passed to the build method or null if none.\n+     */\n+    @Override\n+    public NavGroup getLastBuildPerspectiveNavGroup() {\n+        return navGroupStack.isEmpty() ? null : navGroupStack.peek();\n+    }\n+\n+    // Sync up both the internals plugin & widget registry\n+\n+    public void onPlugInAdded(@Observes final PluginAdded event) {", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1ODQyNw==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r426658427", "bodyText": "See this comment -> #956 (comment)", "author": "jesuino", "createdAt": "2020-05-18T14:15:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MjM3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3NTYzNw==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r425075637", "bodyText": "This for block could be moved inside the if block below.", "author": "caponetto", "createdAt": "2020-05-14T11:48:15Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-navigation-client/src/main/java/org/dashbuilder/client/navigation/plugin/PerspectivePluginManagerImpl.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright 2016 JBoss, by Red Hat, Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.client.navigation.plugin;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Stack;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.client.navigation.NavigationManager;\n+import org.dashbuilder.navigation.event.PerspectivePluginsChangedEvent;\n+import org.dashbuilder.navigation.NavGroup;\n+import org.dashbuilder.navigation.NavItem;\n+import org.dashbuilder.navigation.NavTree;\n+import org.dashbuilder.navigation.layout.LayoutRecursionIssue;\n+import org.dashbuilder.navigation.layout.LayoutTemplateContext;\n+import org.dashbuilder.navigation.layout.LayoutTemplateInfo;\n+import org.dashbuilder.navigation.service.PerspectivePluginServices;\n+import org.dashbuilder.navigation.workbench.NavWorkbenchCtx;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.jboss.errai.common.client.api.RemoteCallback;\n+import org.jboss.errai.common.client.ui.ElementWrapperWidget;\n+import org.jboss.errai.ioc.client.api.EntryPoint;\n+import org.uberfire.client.workbench.type.ClientResourceType;\n+import org.uberfire.client.workbench.type.ClientTypeRegistry;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutInstance;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutTemplate;\n+import org.uberfire.ext.layout.editor.client.generator.LayoutGenerator;\n+import org.uberfire.ext.plugin.client.type.PerspectiveLayoutPluginResourceType;\n+import org.uberfire.ext.plugin.event.PluginAdded;\n+import org.uberfire.ext.plugin.event.PluginDeleted;\n+import org.uberfire.ext.plugin.event.PluginRenamed;\n+import org.uberfire.ext.plugin.event.PluginSaved;\n+import org.uberfire.ext.plugin.model.Plugin;\n+import org.uberfire.mvp.ParameterizedCommand;\n+import org.uberfire.workbench.model.ActivityResourceType;\n+\n+import com.google.gwt.user.client.ui.IsWidget;\n+\n+@EntryPoint\n+@ApplicationScoped\n+public class PerspectivePluginManagerImpl implements PerspectivePluginManager {\n+\n+    private ClientTypeRegistry clientTypeRegistry;\n+    private LayoutGenerator layoutGenerator;\n+    private NavigationManager navigationManager;\n+    private Caller<PerspectivePluginServices> pluginServices;\n+    private Event<PerspectivePluginsChangedEvent> perspectivesChangedEvent;\n+    private Map<String, Plugin> pluginMap = new HashMap<>();\n+    private boolean pluginsLoaded = false;\n+    private Stack<NavGroup> navGroupStack = new Stack<>();\n+\n+    @Inject\n+    public PerspectivePluginManagerImpl(ClientTypeRegistry clientTypeRegistry,\n+                                    LayoutGenerator layoutGenerator,\n+                                    NavigationManager navigationManager,\n+                                    Caller<PerspectivePluginServices> pluginServices,\n+                                    Event<PerspectivePluginsChangedEvent> perspectivesChangedEvent) {\n+        this.clientTypeRegistry = clientTypeRegistry;\n+        this.layoutGenerator = layoutGenerator;\n+        this.navigationManager = navigationManager;\n+        this.pluginServices = pluginServices;\n+        this.perspectivesChangedEvent = perspectivesChangedEvent;\n+    }\n+\n+    @Override\n+    public void getPerspectivePlugins(ParameterizedCommand<Collection<Plugin>> callback) {\n+        loadPlugins(callback);\n+    }\n+\n+\n+    @Override\n+    public boolean isRuntimePerspective(Plugin plugin) {\n+        ClientResourceType type = clientTypeRegistry.resolve(plugin.getPath());\n+        return type != null && type instanceof PerspectiveLayoutPluginResourceType;\n+    }\n+\n+    @Override\n+    public boolean isRuntimePerspective(NavItem navItem) {\n+        return getRuntimePerspectiveId(navItem) != null;\n+    }\n+\n+    @Override\n+    public boolean isRuntimePerspective(String perspectiveId) {\n+        return pluginMap.containsKey(perspectiveId);\n+    }\n+\n+    @Override\n+    public String getRuntimePerspectiveId(NavItem navItem) {\n+        NavWorkbenchCtx navCtx = NavWorkbenchCtx.get(navItem);\n+        String resourceId = navCtx.getResourceId();\n+        ActivityResourceType resourceType = navCtx.getResourceType();\n+        boolean isRuntimePerspective = resourceId != null && ActivityResourceType.PERSPECTIVE.equals(resourceType) && isRuntimePerspective(resourceId);\n+        return isRuntimePerspective ? resourceId : null;\n+    }\n+\n+    @Override\n+    public boolean existsPerspectivePlugin(String perspectiveName) {\n+        return perspectiveName != null && pluginMap.get(perspectiveName) != null;\n+    }\n+\n+    @Override\n+    public void getLayoutTemplateInfo(String perspectiveName, ParameterizedCommand<LayoutTemplateInfo> callback) {\n+        pluginServices.call((RemoteCallback<LayoutTemplateInfo>) callback::execute).getLayoutTemplateInfo(perspectiveName);\n+    }\n+\n+    @Override\n+    public void getLayoutTemplateInfo(LayoutTemplate layoutTemplate, ParameterizedCommand<LayoutTemplateInfo> callback) {\n+        pluginServices.call((RemoteCallback<LayoutTemplateInfo>) callback::execute).getLayoutTemplateInfo(layoutTemplate);\n+    }\n+\n+    @Override\n+    public void buildPerspectiveWidget(String perspectiveName, LayoutTemplateContext layoutCtx, ParameterizedCommand<IsWidget> afterBuild, ParameterizedCommand<LayoutRecursionIssue> onInfiniteRecursion) {\n+        Plugin plugin = pluginMap.get(perspectiveName);\n+        pluginServices.call((LayoutTemplateInfo layoutInfo) -> {\n+\n+            if (!layoutInfo.getRecursionIssue().isEmpty()) {\n+                onInfiniteRecursion.execute(layoutInfo.getRecursionIssue());\n+            } else {\n+                String navGroupId = layoutCtx != null && layoutCtx.getNavGroupId() != null ? layoutCtx.getNavGroupId() : null;\n+                NavGroup navGroup = navGroupId != null ? (NavGroup) navigationManager.getNavTree().getItemById(navGroupId) : null;\n+                try {\n+                    if (navGroup != null) {\n+                        navGroupStack.push(navGroup);\n+                    }\n+                    LayoutInstance result = layoutGenerator.build(layoutInfo.getLayoutTemplate());\n+                    IsWidget widget = ElementWrapperWidget.getWidget(result.getElement());\n+                    afterBuild.execute(widget);\n+                }\n+                finally {\n+                    if (navGroup != null) {\n+                        navGroupStack.pop();\n+                    }\n+                }\n+            }\n+        }).getLayoutTemplateInfo(plugin, layoutCtx);\n+    }\n+\n+    /**\n+     * Get the last nav group instance passed to the execution of a {@link #buildPerspectiveWidget(String, LayoutTemplateContext, ParameterizedCommand, ParameterizedCommand)} call.\n+     *\n+     * @return The {@link NavGroup} instance passed to the build method or null if none.\n+     */\n+    @Override\n+    public NavGroup getLastBuildPerspectiveNavGroup() {\n+        return navGroupStack.isEmpty() ? null : navGroupStack.peek();\n+    }\n+\n+    // Sync up both the internals plugin & widget registry\n+\n+    public void onPlugInAdded(@Observes final PluginAdded event) {\n+        Plugin plugin = event.getPlugin();\n+        if (isRuntimePerspective(plugin)) {\n+            pluginMap.put(plugin.getName(), plugin);\n+            perspectivesChangedEvent.fire(new PerspectivePluginsChangedEvent());\n+        }\n+    }\n+\n+    public void onPlugInSaved(@Observes final PluginSaved event) {\n+        Plugin plugin = event.getPlugin();\n+        if (isRuntimePerspective(plugin)) {\n+            pluginMap.put(plugin.getName(), plugin);\n+            perspectivesChangedEvent.fire(new PerspectivePluginsChangedEvent());\n+        }\n+    }\n+\n+    public void onPlugInRenamed(@Observes final PluginRenamed event) {\n+        Plugin plugin = event.getPlugin();\n+        if (isRuntimePerspective(plugin)) {\n+            pluginMap.remove(event.getOldPluginName());\n+            pluginMap.put(plugin.getName(), plugin);\n+\n+            NavWorkbenchCtx ctx = NavWorkbenchCtx.perspective(event.getOldPluginName());\n+            NavWorkbenchCtx newCtx = NavWorkbenchCtx.perspective(event.getPlugin().getName());\n+            List<NavItem> itemsToRename = navigationManager.getNavTree().searchItems(ctx);\n+            for (NavItem navItem : itemsToRename) {", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1ODI4OQ==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r426658289", "bodyText": "See this comment -> #956 (comment)", "author": "jesuino", "createdAt": "2020-05-18T14:15:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3NTYzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3NTkxNw==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r425075917", "bodyText": "This for block could be moved inside the if block below.", "author": "caponetto", "createdAt": "2020-05-14T11:48:49Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-navigation-client/src/main/java/org/dashbuilder/client/navigation/plugin/PerspectivePluginManagerImpl.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright 2016 JBoss, by Red Hat, Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.client.navigation.plugin;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Stack;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.client.navigation.NavigationManager;\n+import org.dashbuilder.navigation.event.PerspectivePluginsChangedEvent;\n+import org.dashbuilder.navigation.NavGroup;\n+import org.dashbuilder.navigation.NavItem;\n+import org.dashbuilder.navigation.NavTree;\n+import org.dashbuilder.navigation.layout.LayoutRecursionIssue;\n+import org.dashbuilder.navigation.layout.LayoutTemplateContext;\n+import org.dashbuilder.navigation.layout.LayoutTemplateInfo;\n+import org.dashbuilder.navigation.service.PerspectivePluginServices;\n+import org.dashbuilder.navigation.workbench.NavWorkbenchCtx;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.jboss.errai.common.client.api.RemoteCallback;\n+import org.jboss.errai.common.client.ui.ElementWrapperWidget;\n+import org.jboss.errai.ioc.client.api.EntryPoint;\n+import org.uberfire.client.workbench.type.ClientResourceType;\n+import org.uberfire.client.workbench.type.ClientTypeRegistry;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutInstance;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutTemplate;\n+import org.uberfire.ext.layout.editor.client.generator.LayoutGenerator;\n+import org.uberfire.ext.plugin.client.type.PerspectiveLayoutPluginResourceType;\n+import org.uberfire.ext.plugin.event.PluginAdded;\n+import org.uberfire.ext.plugin.event.PluginDeleted;\n+import org.uberfire.ext.plugin.event.PluginRenamed;\n+import org.uberfire.ext.plugin.event.PluginSaved;\n+import org.uberfire.ext.plugin.model.Plugin;\n+import org.uberfire.mvp.ParameterizedCommand;\n+import org.uberfire.workbench.model.ActivityResourceType;\n+\n+import com.google.gwt.user.client.ui.IsWidget;\n+\n+@EntryPoint\n+@ApplicationScoped\n+public class PerspectivePluginManagerImpl implements PerspectivePluginManager {\n+\n+    private ClientTypeRegistry clientTypeRegistry;\n+    private LayoutGenerator layoutGenerator;\n+    private NavigationManager navigationManager;\n+    private Caller<PerspectivePluginServices> pluginServices;\n+    private Event<PerspectivePluginsChangedEvent> perspectivesChangedEvent;\n+    private Map<String, Plugin> pluginMap = new HashMap<>();\n+    private boolean pluginsLoaded = false;\n+    private Stack<NavGroup> navGroupStack = new Stack<>();\n+\n+    @Inject\n+    public PerspectivePluginManagerImpl(ClientTypeRegistry clientTypeRegistry,\n+                                    LayoutGenerator layoutGenerator,\n+                                    NavigationManager navigationManager,\n+                                    Caller<PerspectivePluginServices> pluginServices,\n+                                    Event<PerspectivePluginsChangedEvent> perspectivesChangedEvent) {\n+        this.clientTypeRegistry = clientTypeRegistry;\n+        this.layoutGenerator = layoutGenerator;\n+        this.navigationManager = navigationManager;\n+        this.pluginServices = pluginServices;\n+        this.perspectivesChangedEvent = perspectivesChangedEvent;\n+    }\n+\n+    @Override\n+    public void getPerspectivePlugins(ParameterizedCommand<Collection<Plugin>> callback) {\n+        loadPlugins(callback);\n+    }\n+\n+\n+    @Override\n+    public boolean isRuntimePerspective(Plugin plugin) {\n+        ClientResourceType type = clientTypeRegistry.resolve(plugin.getPath());\n+        return type != null && type instanceof PerspectiveLayoutPluginResourceType;\n+    }\n+\n+    @Override\n+    public boolean isRuntimePerspective(NavItem navItem) {\n+        return getRuntimePerspectiveId(navItem) != null;\n+    }\n+\n+    @Override\n+    public boolean isRuntimePerspective(String perspectiveId) {\n+        return pluginMap.containsKey(perspectiveId);\n+    }\n+\n+    @Override\n+    public String getRuntimePerspectiveId(NavItem navItem) {\n+        NavWorkbenchCtx navCtx = NavWorkbenchCtx.get(navItem);\n+        String resourceId = navCtx.getResourceId();\n+        ActivityResourceType resourceType = navCtx.getResourceType();\n+        boolean isRuntimePerspective = resourceId != null && ActivityResourceType.PERSPECTIVE.equals(resourceType) && isRuntimePerspective(resourceId);\n+        return isRuntimePerspective ? resourceId : null;\n+    }\n+\n+    @Override\n+    public boolean existsPerspectivePlugin(String perspectiveName) {\n+        return perspectiveName != null && pluginMap.get(perspectiveName) != null;\n+    }\n+\n+    @Override\n+    public void getLayoutTemplateInfo(String perspectiveName, ParameterizedCommand<LayoutTemplateInfo> callback) {\n+        pluginServices.call((RemoteCallback<LayoutTemplateInfo>) callback::execute).getLayoutTemplateInfo(perspectiveName);\n+    }\n+\n+    @Override\n+    public void getLayoutTemplateInfo(LayoutTemplate layoutTemplate, ParameterizedCommand<LayoutTemplateInfo> callback) {\n+        pluginServices.call((RemoteCallback<LayoutTemplateInfo>) callback::execute).getLayoutTemplateInfo(layoutTemplate);\n+    }\n+\n+    @Override\n+    public void buildPerspectiveWidget(String perspectiveName, LayoutTemplateContext layoutCtx, ParameterizedCommand<IsWidget> afterBuild, ParameterizedCommand<LayoutRecursionIssue> onInfiniteRecursion) {\n+        Plugin plugin = pluginMap.get(perspectiveName);\n+        pluginServices.call((LayoutTemplateInfo layoutInfo) -> {\n+\n+            if (!layoutInfo.getRecursionIssue().isEmpty()) {\n+                onInfiniteRecursion.execute(layoutInfo.getRecursionIssue());\n+            } else {\n+                String navGroupId = layoutCtx != null && layoutCtx.getNavGroupId() != null ? layoutCtx.getNavGroupId() : null;\n+                NavGroup navGroup = navGroupId != null ? (NavGroup) navigationManager.getNavTree().getItemById(navGroupId) : null;\n+                try {\n+                    if (navGroup != null) {\n+                        navGroupStack.push(navGroup);\n+                    }\n+                    LayoutInstance result = layoutGenerator.build(layoutInfo.getLayoutTemplate());\n+                    IsWidget widget = ElementWrapperWidget.getWidget(result.getElement());\n+                    afterBuild.execute(widget);\n+                }\n+                finally {\n+                    if (navGroup != null) {\n+                        navGroupStack.pop();\n+                    }\n+                }\n+            }\n+        }).getLayoutTemplateInfo(plugin, layoutCtx);\n+    }\n+\n+    /**\n+     * Get the last nav group instance passed to the execution of a {@link #buildPerspectiveWidget(String, LayoutTemplateContext, ParameterizedCommand, ParameterizedCommand)} call.\n+     *\n+     * @return The {@link NavGroup} instance passed to the build method or null if none.\n+     */\n+    @Override\n+    public NavGroup getLastBuildPerspectiveNavGroup() {\n+        return navGroupStack.isEmpty() ? null : navGroupStack.peek();\n+    }\n+\n+    // Sync up both the internals plugin & widget registry\n+\n+    public void onPlugInAdded(@Observes final PluginAdded event) {\n+        Plugin plugin = event.getPlugin();\n+        if (isRuntimePerspective(plugin)) {\n+            pluginMap.put(plugin.getName(), plugin);\n+            perspectivesChangedEvent.fire(new PerspectivePluginsChangedEvent());\n+        }\n+    }\n+\n+    public void onPlugInSaved(@Observes final PluginSaved event) {\n+        Plugin plugin = event.getPlugin();\n+        if (isRuntimePerspective(plugin)) {\n+            pluginMap.put(plugin.getName(), plugin);\n+            perspectivesChangedEvent.fire(new PerspectivePluginsChangedEvent());\n+        }\n+    }\n+\n+    public void onPlugInRenamed(@Observes final PluginRenamed event) {\n+        Plugin plugin = event.getPlugin();\n+        if (isRuntimePerspective(plugin)) {\n+            pluginMap.remove(event.getOldPluginName());\n+            pluginMap.put(plugin.getName(), plugin);\n+\n+            NavWorkbenchCtx ctx = NavWorkbenchCtx.perspective(event.getOldPluginName());\n+            NavWorkbenchCtx newCtx = NavWorkbenchCtx.perspective(event.getPlugin().getName());\n+            List<NavItem> itemsToRename = navigationManager.getNavTree().searchItems(ctx);\n+            for (NavItem navItem : itemsToRename) {\n+                navItem.setContext(newCtx.toString());\n+            }\n+            if (!itemsToRename.isEmpty()) {\n+                navigationManager.saveNavTree(navigationManager.getNavTree(), () -> {});\n+            }\n+            perspectivesChangedEvent.fire(new PerspectivePluginsChangedEvent());\n+        }\n+    }\n+\n+    public void onPlugInDeleted(@Observes final PluginDeleted event) {\n+        String pluginName = event.getPluginName();\n+        pluginMap.remove(pluginName);\n+\n+        NavWorkbenchCtx ctx = NavWorkbenchCtx.perspective(pluginName);\n+        NavTree navTree = navigationManager.getNavTree();\n+        List<NavItem> itemsToDelete = navTree.searchItems(ctx);\n+        for (NavItem item : itemsToDelete) {", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1ODIwNA==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r426658204", "bodyText": "See this comment -> #956 (comment)", "author": "jesuino", "createdAt": "2020-05-18T14:15:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3NTkxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3ODYzNg==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r425078636", "bodyText": "Should we check here if pluginsLoaded == true first?", "author": "caponetto", "createdAt": "2020-05-14T11:54:03Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-navigation-client/src/main/java/org/dashbuilder/client/navigation/plugin/PerspectivePluginManagerImpl.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright 2016 JBoss, by Red Hat, Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.client.navigation.plugin;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Stack;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.client.navigation.NavigationManager;\n+import org.dashbuilder.navigation.event.PerspectivePluginsChangedEvent;\n+import org.dashbuilder.navigation.NavGroup;\n+import org.dashbuilder.navigation.NavItem;\n+import org.dashbuilder.navigation.NavTree;\n+import org.dashbuilder.navigation.layout.LayoutRecursionIssue;\n+import org.dashbuilder.navigation.layout.LayoutTemplateContext;\n+import org.dashbuilder.navigation.layout.LayoutTemplateInfo;\n+import org.dashbuilder.navigation.service.PerspectivePluginServices;\n+import org.dashbuilder.navigation.workbench.NavWorkbenchCtx;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.jboss.errai.common.client.api.RemoteCallback;\n+import org.jboss.errai.common.client.ui.ElementWrapperWidget;\n+import org.jboss.errai.ioc.client.api.EntryPoint;\n+import org.uberfire.client.workbench.type.ClientResourceType;\n+import org.uberfire.client.workbench.type.ClientTypeRegistry;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutInstance;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutTemplate;\n+import org.uberfire.ext.layout.editor.client.generator.LayoutGenerator;\n+import org.uberfire.ext.plugin.client.type.PerspectiveLayoutPluginResourceType;\n+import org.uberfire.ext.plugin.event.PluginAdded;\n+import org.uberfire.ext.plugin.event.PluginDeleted;\n+import org.uberfire.ext.plugin.event.PluginRenamed;\n+import org.uberfire.ext.plugin.event.PluginSaved;\n+import org.uberfire.ext.plugin.model.Plugin;\n+import org.uberfire.mvp.ParameterizedCommand;\n+import org.uberfire.workbench.model.ActivityResourceType;\n+\n+import com.google.gwt.user.client.ui.IsWidget;\n+\n+@EntryPoint\n+@ApplicationScoped\n+public class PerspectivePluginManagerImpl implements PerspectivePluginManager {\n+\n+    private ClientTypeRegistry clientTypeRegistry;\n+    private LayoutGenerator layoutGenerator;\n+    private NavigationManager navigationManager;\n+    private Caller<PerspectivePluginServices> pluginServices;\n+    private Event<PerspectivePluginsChangedEvent> perspectivesChangedEvent;\n+    private Map<String, Plugin> pluginMap = new HashMap<>();\n+    private boolean pluginsLoaded = false;\n+    private Stack<NavGroup> navGroupStack = new Stack<>();\n+\n+    @Inject\n+    public PerspectivePluginManagerImpl(ClientTypeRegistry clientTypeRegistry,\n+                                    LayoutGenerator layoutGenerator,\n+                                    NavigationManager navigationManager,\n+                                    Caller<PerspectivePluginServices> pluginServices,\n+                                    Event<PerspectivePluginsChangedEvent> perspectivesChangedEvent) {\n+        this.clientTypeRegistry = clientTypeRegistry;\n+        this.layoutGenerator = layoutGenerator;\n+        this.navigationManager = navigationManager;\n+        this.pluginServices = pluginServices;\n+        this.perspectivesChangedEvent = perspectivesChangedEvent;\n+    }\n+\n+    @Override\n+    public void getPerspectivePlugins(ParameterizedCommand<Collection<Plugin>> callback) {\n+        loadPlugins(callback);\n+    }\n+\n+\n+    @Override\n+    public boolean isRuntimePerspective(Plugin plugin) {\n+        ClientResourceType type = clientTypeRegistry.resolve(plugin.getPath());\n+        return type != null && type instanceof PerspectiveLayoutPluginResourceType;\n+    }\n+\n+    @Override\n+    public boolean isRuntimePerspective(NavItem navItem) {\n+        return getRuntimePerspectiveId(navItem) != null;\n+    }\n+\n+    @Override\n+    public boolean isRuntimePerspective(String perspectiveId) {\n+        return pluginMap.containsKey(perspectiveId);\n+    }\n+\n+    @Override\n+    public String getRuntimePerspectiveId(NavItem navItem) {\n+        NavWorkbenchCtx navCtx = NavWorkbenchCtx.get(navItem);\n+        String resourceId = navCtx.getResourceId();\n+        ActivityResourceType resourceType = navCtx.getResourceType();\n+        boolean isRuntimePerspective = resourceId != null && ActivityResourceType.PERSPECTIVE.equals(resourceType) && isRuntimePerspective(resourceId);\n+        return isRuntimePerspective ? resourceId : null;\n+    }\n+\n+    @Override\n+    public boolean existsPerspectivePlugin(String perspectiveName) {\n+        return perspectiveName != null && pluginMap.get(perspectiveName) != null;\n+    }\n+\n+    @Override\n+    public void getLayoutTemplateInfo(String perspectiveName, ParameterizedCommand<LayoutTemplateInfo> callback) {\n+        pluginServices.call((RemoteCallback<LayoutTemplateInfo>) callback::execute).getLayoutTemplateInfo(perspectiveName);\n+    }\n+\n+    @Override\n+    public void getLayoutTemplateInfo(LayoutTemplate layoutTemplate, ParameterizedCommand<LayoutTemplateInfo> callback) {\n+        pluginServices.call((RemoteCallback<LayoutTemplateInfo>) callback::execute).getLayoutTemplateInfo(layoutTemplate);\n+    }\n+\n+    @Override\n+    public void buildPerspectiveWidget(String perspectiveName, LayoutTemplateContext layoutCtx, ParameterizedCommand<IsWidget> afterBuild, ParameterizedCommand<LayoutRecursionIssue> onInfiniteRecursion) {\n+        Plugin plugin = pluginMap.get(perspectiveName);", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1NzQ5NA==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r426657494", "bodyText": "I have to agree but this code was a refactor from PerspectivePluginManager. We had to re-implement the behavior of this class in Runtime, so I had to extract and interface out of it and add a specific implementation in Runtime! Hence why I didn't modify any of the original code to avoid breaking stuff in other webapps\n[1] https://github.com/kiegroup/appformer/blob/master/dashbuilder/dashbuilder-client/dashbuilder-navigation-client/src/main/java/org/dashbuilder/client/navigation/plugin/PerspectivePluginManager.java#L147", "author": "jesuino", "createdAt": "2020-05-18T14:14:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3ODYzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4MDMyMQ==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r425080321", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                logger.error(\"Unknow DataSet Content Type: {}\", contentType.name(), null);\n          \n          \n            \n                                logger.error(\"Unknown DataSet Content Type: {}\", contentType.name(), null);", "author": "caponetto", "createdAt": "2020-05-14T11:57:23Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/DataSetContentListener.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.backend;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.backend.services.dataset.RuntimeCSVFileStorage;\n+import org.dashbuilder.backend.services.dataset.provider.RuntimeDataSetProviderRegistry;\n+import org.dashbuilder.dataset.def.DataSetDef;\n+import org.dashbuilder.dataset.def.DataSetDefRegistry;\n+import org.dashbuilder.dataset.json.DataSetDefJSONMarshaller;\n+import org.dashbuilder.shared.event.NewDataSetContentEvent;\n+import org.dashbuilder.shared.model.DataSetContent;\n+import org.dashbuilder.shared.model.DataSetContentType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Listen for new dataset contents and register it accordingly\n+ *\n+ */\n+@ApplicationScoped\n+public class DataSetContentListener {\n+\n+    Logger logger = LoggerFactory.getLogger(DataSetContentListener.class);\n+\n+    @Inject\n+    DataSetDefRegistry registry;\n+\n+    @Inject\n+    RuntimeCSVFileStorage storage;\n+\n+    @Inject\n+    RuntimeDataSetProviderRegistry runtimeDataSetProviderRegistry;\n+\n+    DataSetDefJSONMarshaller defMarshaller;\n+\n+    @PostConstruct\n+    public void init() {\n+        defMarshaller = runtimeDataSetProviderRegistry.getDataSetDefJSONMarshaller();\n+    }\n+\n+    public void register(@Observes NewDataSetContentEvent newDataSetContentEvent) {\n+        newDataSetContentEvent.getContent().forEach(this::registerDataSetContent);\n+    }\n+\n+    public void registerDataSetContent(DataSetContent content) {\n+        try {\n+            DataSetContentType contentType = content.getContentType();\n+            switch (contentType) {\n+                case CSV:\n+                    storage.storeCSV(content.getId(), content.getContent());\n+                    break;\n+                case DEFINITION:\n+                    registerDataSetDefinition(content);\n+                    break;\n+                default:\n+                    logger.error(\"Unknow DataSet Content Type: {}\", contentType.name(), null);", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4MzQ3OQ==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r425083479", "bodyText": "This value is in KB but the property must be set in MB, right?", "author": "caponetto", "createdAt": "2020-05-14T12:03:36Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeOptions.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.backend;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.uberfire.commons.data.Pair;\n+\n+/**\n+ * Holds Runtime System properties\n+ *\n+ */\n+@ApplicationScoped\n+public class RuntimeOptions {\n+\n+    Logger logger = LoggerFactory.getLogger(RuntimeOptions.class);\n+\n+    private static final String IMPORTS_BASE_DIR_PROP = \"org.dashbuilder.import.base.dir\";\n+\n+    private static final String IMPORT_FILE_LOCATION_PROP = \"dashbuilder.runtime.import\";\n+\n+    private static final String UPLOAD_SIZE_PROP = \"dashbuilder.runtime.upload.size\";\n+\n+    private static final String ALLOW_EXTERNAL_FILE_REGISTER_PROP = \"dashbuilder.runtime.allowExternal\";\n+\n+    private static final String DASHBUILDER_RUNTIME_MULTIPLE_IMPORT = \"dashbuilder.runtime.multiple\";\n+\n+    private static final int DEFAULT_UPLOAD_SIZE = 96 * 1024;", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1NDY5Ng==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r426654696", "bodyText": "It should be in KB - export models without big CSVs inside it would always be <100kb", "author": "jesuino", "createdAt": "2020-05-18T14:10:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4MzQ3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5NzExNA==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r425097114", "bodyText": "I'd remove this comment and the other below.", "author": "caponetto", "createdAt": "2020-05-14T12:28:15Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/remote/services/RuntimeModelServiceImpl.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.backend.remote.services;\n+\n+import java.util.Optional;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.backend.RuntimeOptions;\n+import org.dashbuilder.backend.navigation.RuntimeNavigationBuilder;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.service.RuntimeModelRegistry;\n+import org.dashbuilder.shared.service.RuntimeModelService;\n+import org.dashbuilder.shared.services.ExternalImportService;\n+import org.jboss.errai.bus.server.annotations.Service;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Service\n+@ApplicationScoped\n+public class RuntimeModelServiceImpl implements RuntimeModelService {\n+\n+    Logger logger = LoggerFactory.getLogger(RuntimeModelServiceImpl.class);\n+\n+    @Inject\n+    RuntimeModelRegistry importModelRegistry;\n+\n+    @Inject\n+    RuntimeNavigationBuilder runtimeNavigationBuilder;\n+\n+    @Inject\n+    RuntimeOptions runtimeOptions;\n+    \n+    @Inject\n+    ExternalImportService externalImportService;\n+\n+    @Override\n+    public Optional<RuntimeModel> getRuntimeModel(String exportId) {\n+        if (exportId == null) {\n+            return importModelRegistry.single();\n+        }\n+\n+        Optional<RuntimeModel> runtimeModelOp = importModelRegistry.get(exportId);\n+        if (runtimeModelOp.isPresent()) {\n+            return runtimeModelOp;\n+        }\n+\n+        // if it is an existing file", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5NzkwOA==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r425097908", "bodyText": "You can simplify this code with ifPresent.", "author": "caponetto", "createdAt": "2020-05-14T12:29:41Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/remote/services/RuntimeModelServiceImpl.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.backend.remote.services;\n+\n+import java.util.Optional;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.backend.RuntimeOptions;\n+import org.dashbuilder.backend.navigation.RuntimeNavigationBuilder;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.service.RuntimeModelRegistry;\n+import org.dashbuilder.shared.service.RuntimeModelService;\n+import org.dashbuilder.shared.services.ExternalImportService;\n+import org.jboss.errai.bus.server.annotations.Service;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Service\n+@ApplicationScoped\n+public class RuntimeModelServiceImpl implements RuntimeModelService {\n+\n+    Logger logger = LoggerFactory.getLogger(RuntimeModelServiceImpl.class);\n+\n+    @Inject\n+    RuntimeModelRegistry importModelRegistry;\n+\n+    @Inject\n+    RuntimeNavigationBuilder runtimeNavigationBuilder;\n+\n+    @Inject\n+    RuntimeOptions runtimeOptions;\n+    \n+    @Inject\n+    ExternalImportService externalImportService;\n+\n+    @Override\n+    public Optional<RuntimeModel> getRuntimeModel(String exportId) {\n+        if (exportId == null) {\n+            return importModelRegistry.single();\n+        }\n+\n+        Optional<RuntimeModel> runtimeModelOp = importModelRegistry.get(exportId);\n+        if (runtimeModelOp.isPresent()) {\n+            return runtimeModelOp;\n+        }\n+\n+        // if it is an existing file\n+        Optional<String> modelPath = runtimeOptions.modelPath(exportId);\n+        if (modelPath.isPresent()) {\n+            return importModelRegistry.registerFile(modelPath.get());\n+        }", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1Mjk3OQ==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r426652979", "bodyText": "In this I think that ifPresent would not help us because I need to return the optional value. I thought about chaining all optional calls, but I think the code would be more unclear. The If's sequence is helpful to expose what would be the order to load stuff:\n\nNo modelId is provided, so we try to return the only one that is registered;\nNext we try to load some existing file with the given model Id;\nFinally we try to load external files (only if it is enabled to load external files)\n\nif we do not allow multiple imports than we simple return the single one that is potentially loaded.", "author": "jesuino", "createdAt": "2020-05-18T14:07:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5NzkwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEyMzUzOA==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r425123538", "bodyText": "Another option here would be FilenameUtils#getBaseName.", "author": "caponetto", "createdAt": "2020-05-14T13:10:23Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/services/impl/RuntimeModelRegistryImpl.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.backend.services.impl;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.shared.event.NewDataSetContentEvent;\n+import org.dashbuilder.shared.model.DashbuilderRuntimeMode;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.service.ImportValidationService;\n+import org.dashbuilder.shared.service.RuntimeModelParser;\n+import org.dashbuilder.shared.service.RuntimeModelRegistry;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class RuntimeModelRegistryImpl implements RuntimeModelRegistry {\n+\n+    Logger logger = LoggerFactory.getLogger(RuntimeModelRegistryImpl.class);\n+\n+    Map<String, RuntimeModel> runtimeModels;\n+\n+    DashbuilderRuntimeMode mode = DashbuilderRuntimeMode.SINGLE_IMPORT;\n+\n+    @Inject\n+    RuntimeModelParser parser;\n+\n+    @Inject\n+    Event<NewDataSetContentEvent> newDataSetContentEvent;\n+    \n+    @Inject\n+    ImportValidationService importValidationService;\n+\n+    @PostConstruct\n+    public void init() {\n+        runtimeModels = new HashMap<>();\n+    }\n+\n+    @Override\n+    public Optional<RuntimeModel> single() {\n+        return runtimeModels.values().stream().findFirst();\n+    }\n+\n+    @Override\n+    public Optional<RuntimeModel> get(String id) {\n+        if (mode == DashbuilderRuntimeMode.MULTIPLE_IMPORT) {\n+            return Optional.ofNullable(runtimeModels.get(id));\n+        }\n+        return single();\n+    }\n+\n+    @Override\n+    public Optional<RuntimeModel> registerFile(String fileName) {\n+        // it could be possible to NOT STORE models\n+        if (fileName == null || fileName.trim().isEmpty()) {\n+            logger.error(\"Invalid file name: {}\", fileName);\n+            throw new IllegalArgumentException(\"Invalid file name.\");\n+        }\n+        \n+        File file = new File(fileName);\n+        if (!file.exists()) {\n+            logger.error(\"File does not exist: {}\", fileName);\n+            throw new IllegalArgumentException(\"File does not exist\");\n+        }\n+        \n+        if (!importValidationService.validate(fileName)) {\n+            logger.error(\"File does not have a valid structure: {}\", fileName);\n+            throw new IllegalArgumentException(\"Not a valid file structure.\");\n+        }\n+        \n+        try (FileInputStream fis = new FileInputStream(fileName)) {\n+            String importId = file.getName().replaceAll(\".zip\", \"\");", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0MjU3Mg==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r425142572", "bodyText": "You can reuse the deleteFile method here.", "author": "caponetto", "createdAt": "2020-05-14T13:37:26Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/services/impl/ExternalImportServiceImpl.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.backend.services.impl;\n+\n+import java.io.BufferedInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.backend.RuntimeOptions;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.service.RuntimeModelRegistry;\n+import org.dashbuilder.shared.services.ExternalImportService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ExternalImportServiceImpl implements ExternalImportService {\n+\n+    Logger logger = LoggerFactory.getLogger(ExternalImportServiceImpl.class);\n+\n+    @Inject\n+    RuntimeOptions runtimeOptions;\n+\n+    @Inject\n+    RuntimeModelRegistry runtimeModelRegistry;\n+\n+    @Override\n+    public Optional<RuntimeModel> registerExternalImport(String externalModelUrl) {\n+        String modelId = \"\";\n+        URL url = getExternalModelUrl(externalModelUrl);\n+        modelId = buildURLIdentifier(url);\n+\n+        // consider generate better model ids for URLs\n+        final String filePath = runtimeOptions.buildFilePath(modelId);\n+        int totalBytes = 0;\n+        final int pageSize = 1024;\n+        try (BufferedInputStream in = new BufferedInputStream(url.openStream());\n+                FileOutputStream fos = new FileOutputStream(filePath)) {\n+            byte[] dataBuffer = new byte[pageSize];\n+            int bytesRead;\n+            while ((bytesRead = in.read(dataBuffer, 0, pageSize)) != -1) {\n+                fos.write(dataBuffer, 0, bytesRead);\n+                totalBytes += pageSize;\n+                checkSize(filePath, totalBytes);\n+            }\n+        } catch (IOException e) {\n+            logger.debug(\"Error downloading and parsing content from URL {}\", externalModelUrl, e);\n+            logger.warn(\"Error downloading and parsing content from URL {}\", externalModelUrl);\n+            deleteFile(filePath);\n+            throw new IllegalArgumentException(\"Not able to download file\", e);\n+        }\n+        return runtimeModelRegistry.registerFile(filePath);\n+    }\n+\n+    private void checkSize(final String filePath, int totalBytes) throws IOException {\n+        if (totalBytes > runtimeOptions.getUploadSize()) {\n+            Files.deleteIfExists(Paths.get(filePath));", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0MzQ5Mw==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r425143493", "bodyText": "Is it a TODO?", "author": "caponetto", "createdAt": "2020-05-14T13:38:42Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/services/impl/ExternalImportServiceImpl.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.backend.services.impl;\n+\n+import java.io.BufferedInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.backend.RuntimeOptions;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.service.RuntimeModelRegistry;\n+import org.dashbuilder.shared.services.ExternalImportService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ExternalImportServiceImpl implements ExternalImportService {\n+\n+    Logger logger = LoggerFactory.getLogger(ExternalImportServiceImpl.class);\n+\n+    @Inject\n+    RuntimeOptions runtimeOptions;\n+\n+    @Inject\n+    RuntimeModelRegistry runtimeModelRegistry;\n+\n+    @Override\n+    public Optional<RuntimeModel> registerExternalImport(String externalModelUrl) {\n+        String modelId = \"\";\n+        URL url = getExternalModelUrl(externalModelUrl);\n+        modelId = buildURLIdentifier(url);\n+\n+        // consider generate better model ids for URLs", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0Nzc4Ng==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r425147786", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Parses a exported zip file from Transfer Services into RuntimeModel.\n          \n          \n            \n             * Parses an exported zip file from Transfer Services into RuntimeModel.", "author": "caponetto", "createdAt": "2020-05-14T13:44:30Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/services/impl/RuntimeModelParserImpl.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.backend.services.impl;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.inject.Inject;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.dashbuilder.backend.navigation.RuntimeNavigationBuilder;\n+import org.dashbuilder.navigation.NavTree;\n+import org.dashbuilder.shared.event.NewDataSetContentEvent;\n+import org.dashbuilder.shared.model.DataSetContent;\n+import org.dashbuilder.shared.model.DataSetContentType;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.service.RuntimeModelParser;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutTemplate;\n+\n+import static org.dashbuilder.shared.model.ImportDefinitions.DATASET_PREFIX;\n+import static org.dashbuilder.shared.model.ImportDefinitions.NAVIGATION_FILE;\n+import static org.dashbuilder.shared.model.ImportDefinitions.PERSPECTIVE_SUFFIX;\n+\n+/**\n+ * Parses a exported zip file from Transfer Services into RuntimeModel.", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0ODY1OA==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r425148658", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (! datasetContents.isEmpty()) {\n          \n          \n            \n                    if (!datasetContents.isEmpty()) {", "author": "caponetto", "createdAt": "2020-05-14T13:45:33Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/services/impl/RuntimeModelParserImpl.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.backend.services.impl;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.inject.Inject;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.dashbuilder.backend.navigation.RuntimeNavigationBuilder;\n+import org.dashbuilder.navigation.NavTree;\n+import org.dashbuilder.shared.event.NewDataSetContentEvent;\n+import org.dashbuilder.shared.model.DataSetContent;\n+import org.dashbuilder.shared.model.DataSetContentType;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.service.RuntimeModelParser;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutTemplate;\n+\n+import static org.dashbuilder.shared.model.ImportDefinitions.DATASET_PREFIX;\n+import static org.dashbuilder.shared.model.ImportDefinitions.NAVIGATION_FILE;\n+import static org.dashbuilder.shared.model.ImportDefinitions.PERSPECTIVE_SUFFIX;\n+\n+/**\n+ * Parses a exported zip file from Transfer Services into RuntimeModel.\n+ *\n+ */\n+@ApplicationScoped\n+public class RuntimeModelParserImpl implements RuntimeModelParser {\n+\n+    @Inject\n+    Event<NewDataSetContentEvent> newDataSetContentEvent;\n+\n+    @Inject\n+    RuntimeNavigationBuilder runtimeNavigationBuilder;\n+\n+    Gson gson;\n+\n+    @PostConstruct\n+    void init() {\n+        gson = new GsonBuilder().create();\n+    }\n+\n+    @Override\n+    public RuntimeModel parse(InputStream is) {\n+        try {\n+            return retrieveRuntimeModel(is);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    protected RuntimeModel retrieveRuntimeModel(InputStream is) throws IOException {\n+        List<DataSetContent> datasetContents = new ArrayList<>();\n+        List<LayoutTemplate> layoutTemplates = new ArrayList<>();\n+        Optional<String> navTreeOp = Optional.empty();\n+        try (ZipInputStream zis = new ZipInputStream(is)) {\n+            ZipEntry entry;\n+            while ((entry = zis.getNextEntry()) != null) {\n+                if (!entry.isDirectory()) {\n+                    String entryName = entry.getName();\n+                    if (entryName.startsWith(DATASET_PREFIX)) {\n+                        datasetContents.add(retrieveDataSetContent(entry, zis));\n+                    }\n+\n+                    if (entryName.endsWith(PERSPECTIVE_SUFFIX)) {\n+                        layoutTemplates.add(retrieveLayoutTemplate(zis));\n+                    }\n+\n+                    if (entryName.equalsIgnoreCase(NAVIGATION_FILE)) {\n+                        navTreeOp = Optional.of(nextEntryContent(zis));\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (! datasetContents.isEmpty()) {", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE1MTk0Ng==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r425151946", "bodyText": "This code seems fragile, i.e., can we rely on this expected path structure?\nAnother thing, does it work on Windows OS?", "author": "caponetto", "createdAt": "2020-05-14T13:50:01Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/services/impl/RuntimeModelParserImpl.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.backend.services.impl;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.inject.Inject;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.dashbuilder.backend.navigation.RuntimeNavigationBuilder;\n+import org.dashbuilder.navigation.NavTree;\n+import org.dashbuilder.shared.event.NewDataSetContentEvent;\n+import org.dashbuilder.shared.model.DataSetContent;\n+import org.dashbuilder.shared.model.DataSetContentType;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.service.RuntimeModelParser;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutTemplate;\n+\n+import static org.dashbuilder.shared.model.ImportDefinitions.DATASET_PREFIX;\n+import static org.dashbuilder.shared.model.ImportDefinitions.NAVIGATION_FILE;\n+import static org.dashbuilder.shared.model.ImportDefinitions.PERSPECTIVE_SUFFIX;\n+\n+/**\n+ * Parses a exported zip file from Transfer Services into RuntimeModel.\n+ *\n+ */\n+@ApplicationScoped\n+public class RuntimeModelParserImpl implements RuntimeModelParser {\n+\n+    @Inject\n+    Event<NewDataSetContentEvent> newDataSetContentEvent;\n+\n+    @Inject\n+    RuntimeNavigationBuilder runtimeNavigationBuilder;\n+\n+    Gson gson;\n+\n+    @PostConstruct\n+    void init() {\n+        gson = new GsonBuilder().create();\n+    }\n+\n+    @Override\n+    public RuntimeModel parse(InputStream is) {\n+        try {\n+            return retrieveRuntimeModel(is);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    protected RuntimeModel retrieveRuntimeModel(InputStream is) throws IOException {\n+        List<DataSetContent> datasetContents = new ArrayList<>();\n+        List<LayoutTemplate> layoutTemplates = new ArrayList<>();\n+        Optional<String> navTreeOp = Optional.empty();\n+        try (ZipInputStream zis = new ZipInputStream(is)) {\n+            ZipEntry entry;\n+            while ((entry = zis.getNextEntry()) != null) {\n+                if (!entry.isDirectory()) {\n+                    String entryName = entry.getName();\n+                    if (entryName.startsWith(DATASET_PREFIX)) {\n+                        datasetContents.add(retrieveDataSetContent(entry, zis));\n+                    }\n+\n+                    if (entryName.endsWith(PERSPECTIVE_SUFFIX)) {\n+                        layoutTemplates.add(retrieveLayoutTemplate(zis));\n+                    }\n+\n+                    if (entryName.equalsIgnoreCase(NAVIGATION_FILE)) {\n+                        navTreeOp = Optional.of(nextEntryContent(zis));\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (! datasetContents.isEmpty()) {\n+            newDataSetContentEvent.fire(new NewDataSetContentEvent(datasetContents));\n+        }\n+        NavTree navTree = runtimeNavigationBuilder.build(navTreeOp, layoutTemplates);\n+        \n+        return new RuntimeModel(navTree, layoutTemplates);\n+    }\n+\n+    private LayoutTemplate retrieveLayoutTemplate(ZipInputStream zis) {\n+        String content = nextEntryContent(zis);\n+        return gson.fromJson(content, LayoutTemplate.class);\n+    }\n+\n+    private DataSetContent retrieveDataSetContent(ZipEntry entry, ZipInputStream zis) {\n+        String fileName = entry.getName().split(\"/\")[3];\n+        String[] nameParts = fileName.split(\"\\\\.\");\n+        String id = nameParts[0];\n+        String ext = nameParts[1];", "originalCommit": "67287a0286ee2481d55442b371ff610385bc20b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzMjY2OA==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r426832668", "bodyText": "The path is retrieved from a file supposedly exported from BC or Dashbuilder. In these cases the directory structure would have to follow zip entry specification, see in [1]:\n       4.4.17.1 The name of the file, with optional relative path.\n       The path stored MUST NOT contain a drive or\n       device letter, or a leading slash.  All slashes\n       MUST be forward slashes '/' as opposed to\n       backwards slashes '\\' for compatibility with Amiga\n       and UNIX file systems etc.  If input came from standard\n       input, there is no file name field.  \n\nSo it should use forward slash.\nHowever, DataTransferServices should be tested on Windows environment. But bear in mind that unfortunately it is broken on Windows, see [2]. Once [2] is solved we should revisit this topic to make sure that exported files in Windows will work with runtime, hence I created [3].\n[1] https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT\n[2] https://issues.redhat.com/browse/RHPAM-2751\n[3] https://issues.redhat.com/browse/AF-2520", "author": "jesuino", "createdAt": "2020-05-18T18:59:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE1MTk0Ng=="}], "type": "inlineReview"}, {"oid": "a084d7f1af7e59a8ba6526130439d665c6849613", "url": "https://github.com/kiegroup/appformer/commit/a084d7f1af7e59a8ba6526130439d665c6849613", "message": "removing thorntail", "committedDate": "2020-05-18T19:18:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwMTIwNg==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r427301206", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            package org.dashbuilder.client.screens.view;\n          \n          \n            \n            /*\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n          \n          \n            \n             *\n          \n          \n            \n             * Licensed under the Apache License, Version 2.0 (the \"License\");\n          \n          \n            \n             * you may not use this file except in compliance with the License.\n          \n          \n            \n             * You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *       http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing, software\n          \n          \n            \n             * distributed under the License is distributed on an \"AS IS\" BASIS,\n          \n          \n            \n             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n          \n          \n            \n             * See the License for the specific language governing permissions and\n          \n          \n            \n             * limitations under the License.\n          \n          \n            \n             */\n          \n          \n            \n            package org.dashbuilder.client.screens.view;", "author": "caponetto", "createdAt": "2020-05-19T13:27:52Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/view/UploadDashboardsScreenView.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package org.dashbuilder.client.screens.view;", "originalCommit": "a084d7f1af7e59a8ba6526130439d665c6849613", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwMTM4NA==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r427301384", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            package org.dashbuilder.client.screens.view;\n          \n          \n            \n            /*\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n          \n          \n            \n             *\n          \n          \n            \n             * Licensed under the Apache License, Version 2.0 (the \"License\");\n          \n          \n            \n             * you may not use this file except in compliance with the License.\n          \n          \n            \n             * You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *       http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing, software\n          \n          \n            \n             * distributed under the License is distributed on an \"AS IS\" BASIS,\n          \n          \n            \n             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n          \n          \n            \n             * See the License for the specific language governing permissions and\n          \n          \n            \n             * limitations under the License.\n          \n          \n            \n             */\n          \n          \n            \n            package org.dashbuilder.client.screens.view;", "author": "caponetto", "createdAt": "2020-05-19T13:28:08Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/view/RuntimeScreenView.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.dashbuilder.client.screens.view;", "originalCommit": "a084d7f1af7e59a8ba6526130439d665c6849613", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwNTIzMw==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r427305233", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                <h1 data-i18n-key=\"title\">Welcome to Dashbuilder Runtimes</h1>\n          \n          \n            \n                                <h1 data-i18n-key=\"title\"></h1>\n          \n      \n    \n    \n  \n\nSince you have an i18n-key binding, you don't need the hardcoded string.", "author": "caponetto", "createdAt": "2020-05-19T13:33:19Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/view/RuntimeScreenView.html", "diffHunk": "@@ -0,0 +1,31 @@\n+<!--\n+  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<div id=\"runtimePage\">\n+    <div class=\"runtimePageBody\">\n+        <div\n+            class=\"runtimePage__content runtimeContent--bg-image runtime-blank-slate\">\n+            <div\n+                class=\"container-fluid runtime-container-fluid--blank-slate\">\n+                <div class=\"blank-slate-pf row\">\n+                    <h1 data-i18n-key=\"title\">Welcome to Dashbuilder Runtimes</h1>", "originalCommit": "a084d7f1af7e59a8ba6526130439d665c6849613", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwNTQ0NQ==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r427305445", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                <p data-i18n-key=\"subTitle\">Select a Dashboard from menu to get started.</p>\n          \n          \n            \n                                <p data-i18n-key=\"subTitle\"></p>", "author": "caponetto", "createdAt": "2020-05-19T13:33:37Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/view/RuntimeScreenView.html", "diffHunk": "@@ -0,0 +1,31 @@\n+<!--\n+  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<div id=\"runtimePage\">\n+    <div class=\"runtimePageBody\">\n+        <div\n+            class=\"runtimePage__content runtimeContent--bg-image runtime-blank-slate\">\n+            <div\n+                class=\"container-fluid runtime-container-fluid--blank-slate\">\n+                <div class=\"blank-slate-pf row\">\n+                    <h1 data-i18n-key=\"title\">Welcome to Dashbuilder Runtimes</h1>\n+\n+                    <p data-i18n-key=\"subTitle\">Select a Dashboard from menu to get started.</p>", "originalCommit": "a084d7f1af7e59a8ba6526130439d665c6849613", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwNzAwMQ==", "url": "https://github.com/kiegroup/appformer/pull/956#discussion_r427307001", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <h1 data-i18n-key=\"title\">Dashboards are not available</h1>\n          \n          \n            \n                <p data-i18n-key=\"subTitle\">Dashboards were not imported. You\n          \n          \n            \n                    can import them by uploading a file previously exported from\n          \n          \n            \n                    Business Central.</p>\n          \n          \n            \n                <div class=\"blank-slate-pf-main-action\">\n          \n          \n            \n                    <button class=\"btn btn-primary btn-lg\" id=\"btnImport\"\n          \n          \n            \n                        data-i18n-key=\"importButton\">Import Dashboards</button>\n          \n          \n            \n                </div>\n          \n          \n            \n                <h1 data-i18n-key=\"title\"></h1>\n          \n          \n            \n                <p data-i18n-key=\"subTitle\"></p>\n          \n          \n            \n                <div class=\"blank-slate-pf-main-action\">\n          \n          \n            \n                    <button class=\"btn btn-primary btn-lg\" id=\"btnImport\"\n          \n          \n            \n                        data-i18n-key=\"importButton\"></button>\n          \n          \n            \n                </div>", "author": "caponetto", "createdAt": "2020-05-19T13:35:51Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/view/UploadDashboardsScreenView.html", "diffHunk": "@@ -0,0 +1,36 @@\n+<!--\n+  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<div class=\"blank-slate-pf \" id=\"emptyImport\">\n+    <div class=\"blank-slate-pf-icon\">\n+        <span class=\"pficon pficon pficon-add-circle-o\"></span>\n+    </div>\n+    <h1 data-i18n-key=\"title\">Dashboards are not available</h1>\n+    <p data-i18n-key=\"subTitle\">Dashboards were not imported. You\n+        can import them by uploading a file previously exported from\n+        Business Central.</p>\n+    <div class=\"blank-slate-pf-main-action\">\n+        <button class=\"btn btn-primary btn-lg\" id=\"btnImport\"\n+            data-i18n-key=\"importButton\">Import Dashboards</button>\n+    </div>", "originalCommit": "a084d7f1af7e59a8ba6526130439d665c6849613", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "53a61dd9af45564f78302802ed7baeeced36e84d", "url": "https://github.com/kiegroup/appformer/commit/53a61dd9af45564f78302802ed7baeeced36e84d", "message": "AF-2471: Create Dashbuilder Runtimes Module", "committedDate": "2020-05-26T12:38:55Z", "type": "commit"}, {"oid": "d07c9c630bd1e1d8b342ba9e34954aaa7f9bddcc", "url": "https://github.com/kiegroup/appformer/commit/d07c9c630bd1e1d8b342ba9e34954aaa7f9bddcc", "message": "Adding missing license headers", "committedDate": "2020-05-26T12:38:55Z", "type": "commit"}, {"oid": "97f12d101b97ce33d905dff7d92da7b82a0f2c9e", "url": "https://github.com/kiegroup/appformer/commit/97f12d101b97ce33d905dff7d92da7b82a0f2c9e", "message": "Fixes: unknown datasets and runtime screen loaded model cache", "committedDate": "2020-05-26T12:38:55Z", "type": "commit"}, {"oid": "a5887139ada21ca920dae2164a0a6e50dd0e3a2c", "url": "https://github.com/kiegroup/appformer/commit/a5887139ada21ca920dae2164a0a6e50dd0e3a2c", "message": "changes to adapt to wildfly18", "committedDate": "2020-05-26T12:38:55Z", "type": "commit"}, {"oid": "332b8ff35ba66df2a220db74d576ec2f35480bc0", "url": "https://github.com/kiegroup/appformer/commit/332b8ff35ba66df2a220db74d576ec2f35480bc0", "message": "Applying review changes", "committedDate": "2020-05-26T12:38:55Z", "type": "commit"}, {"oid": "24fd49a9f346e1b4c529b2028c21cd380c041d83", "url": "https://github.com/kiegroup/appformer/commit/24fd49a9f346e1b4c529b2028c21cd380c041d83", "message": "removing thorntail", "committedDate": "2020-05-26T12:38:55Z", "type": "commit"}, {"oid": "903377bde3b81a152fb21d91b5b4ef4f9a5291e8", "url": "https://github.com/kiegroup/appformer/commit/903377bde3b81a152fb21d91b5b4ef4f9a5291e8", "message": "Fixing Copyright and i18n", "committedDate": "2020-05-26T12:38:55Z", "type": "commit"}, {"oid": "e6b624508c3d9a77f5c41ba1a8eb6b35c4893a1c", "url": "https://github.com/kiegroup/appformer/commit/e6b624508c3d9a77f5c41ba1a8eb6b35c4893a1c", "message": "Adding runtime to root context", "committedDate": "2020-05-26T12:38:55Z", "type": "commit"}, {"oid": "f4eb7404e39533e4b2ffc4fc10e0ca1f22cd2610", "url": "https://github.com/kiegroup/appformer/commit/f4eb7404e39533e4b2ffc4fc10e0ca1f22cd2610", "message": "Adding GZIP filter", "committedDate": "2020-05-26T12:38:55Z", "type": "commit"}, {"oid": "36b3aa7a4ccf89cfc83775adbd7da5727e1afc53", "url": "https://github.com/kiegroup/appformer/commit/36b3aa7a4ccf89cfc83775adbd7da5727e1afc53", "message": "Adding dashbuilder Runtime to main pom.xml", "committedDate": "2020-05-26T12:38:55Z", "type": "commit"}, {"oid": "e28c6270da269066d9dd8b810b026dbc36e9db6a", "url": "https://github.com/kiegroup/appformer/commit/e28c6270da269066d9dd8b810b026dbc36e9db6a", "message": "Version update", "committedDate": "2020-05-26T12:39:28Z", "type": "commit"}, {"oid": "e28c6270da269066d9dd8b810b026dbc36e9db6a", "url": "https://github.com/kiegroup/appformer/commit/e28c6270da269066d9dd8b810b026dbc36e9db6a", "message": "Version update", "committedDate": "2020-05-26T12:39:28Z", "type": "forcePushed"}, {"oid": "103e7ed8b9201a35bd165d562ee98763f45fb617", "url": "https://github.com/kiegroup/appformer/commit/103e7ed8b9201a35bd165d562ee98763f45fb617", "message": "Removing checked exception", "committedDate": "2020-05-26T16:45:59Z", "type": "commit"}, {"oid": "5a447413c051560e8a2e0beaec2561f0d9bee985", "url": "https://github.com/kiegroup/appformer/commit/5a447413c051560e8a2e0beaec2561f0d9bee985", "message": "Fixing STATIC mode", "committedDate": "2020-05-28T12:16:35Z", "type": "commit"}, {"oid": "671810fc19d824f843e492226e6f75980b4741f6", "url": "https://github.com/kiegroup/appformer/commit/671810fc19d824f843e492226e6f75980b4741f6", "message": "Fixing some smells and improvements", "committedDate": "2020-05-28T18:48:26Z", "type": "commit"}]}