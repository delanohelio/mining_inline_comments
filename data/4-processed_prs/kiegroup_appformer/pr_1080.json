{"pr_number": 1080, "pr_title": "AF-2700: Create Heatmap internal component", "pr_createdAt": "2020-11-26T21:57:08Z", "pr_url": "https://github.com/kiegroup/appformer/pull/1080", "timeline": [{"oid": "5069c6537d6c142b35324b49d0fa19bedefd6854", "url": "https://github.com/kiegroup/appformer/commit/5069c6537d6c142b35324b49d0fa19bedefd6854", "message": "AF-2700: Create Heatmap internal component", "committedDate": "2020-11-27T19:30:01Z", "type": "forcePushed"}, {"oid": "d2883a5ccf38d2a10ca39dc282f3f9c1285d8a9a", "url": "https://github.com/kiegroup/appformer/commit/d2883a5ccf38d2a10ca39dc282f3f9c1285d8a9a", "message": "AF-2700: Create Heatmap internal component", "committedDate": "2020-11-27T22:52:03Z", "type": "forcePushed"}, {"oid": "85590509080dfb1818689d58a7180f953bf27a5e", "url": "https://github.com/kiegroup/appformer/commit/85590509080dfb1818689d58a7180f953bf27a5e", "message": "AF-2700: Create Heatmap internal component", "committedDate": "2020-12-01T21:47:33Z", "type": "forcePushed"}, {"oid": "f2e372258969774cf4209452b1a74259202af9cd", "url": "https://github.com/kiegroup/appformer/commit/f2e372258969774cf4209452b1a74259202af9cd", "message": "AF-2700: Create Heatmap internal component", "committedDate": "2020-12-01T21:48:40Z", "type": "forcePushed"}, {"oid": "79921f4e8dce92ace1f73addc43e781bde7da73b", "url": "https://github.com/kiegroup/appformer/commit/79921f4e8dce92ace1f73addc43e781bde7da73b", "message": "AF-2700: Create Heatmap internal component", "committedDate": "2020-12-03T19:06:17Z", "type": "forcePushed"}, {"oid": "92cc3d7ed3aecdb1c7eb88454223911b93526944", "url": "https://github.com/kiegroup/appformer/commit/92cc3d7ed3aecdb1c7eb88454223911b93526944", "message": "AF-2700: Create Heatmap internal component", "committedDate": "2020-12-03T19:13:51Z", "type": "forcePushed"}, {"oid": "c0c91855653bc4db82e0a64284a1e01df8d69ff0", "url": "https://github.com/kiegroup/appformer/commit/c0c91855653bc4db82e0a64284a1e01df8d69ff0", "message": "AF-2700: Create Heatmap internal component", "committedDate": "2020-12-03T22:53:57Z", "type": "commit"}, {"oid": "c0c91855653bc4db82e0a64284a1e01df8d69ff0", "url": "https://github.com/kiegroup/appformer/commit/c0c91855653bc4db82e0a64284a1e01df8d69ff0", "message": "AF-2700: Create Heatmap internal component", "committedDate": "2020-12-03T22:53:57Z", "type": "forcePushed"}, {"oid": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "url": "https://github.com/kiegroup/appformer/commit/8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "message": "Only used external components are exported", "committedDate": "2020-12-04T22:27:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ3MTAxMw==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537471013", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class ComponentsGroupProducer {\n          \n          \n            \n            public class ComponentGroupProducer {", "author": "caponetto", "createdAt": "2020-12-07T12:33:23Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-editor/src/main/java/org/dashbuilder/client/editor/external/ComponentsGroupProducer.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.editor.external;\n+\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.client.editor.resources.i18n.Constants;\n+import org.dashbuilder.external.model.ExternalComponent;\n+import org.dashbuilder.external.service.ComponentService;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.jboss.errai.ioc.client.container.SyncBeanManager;\n+import org.uberfire.ext.layout.editor.client.api.LayoutDragComponentGroup;\n+import org.uberfire.ext.layout.editor.client.api.LayoutDragComponentPalette;\n+import org.uberfire.ext.layout.editor.client.widgets.LayoutComponentPaletteGroupProvider;\n+import org.uberfire.ext.plugin.client.perspective.editor.events.PerspectiveEditorFocusEvent;\n+\n+@ApplicationScoped\n+public class ComponentsGroupProducer {", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ3MTIxOA==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537471218", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \n          \n      \n    \n    \n  \n\nPlease remove these extra spaces.", "author": "caponetto", "createdAt": "2020-12-07T12:33:46Z", "path": "dashbuilder/dashbuilder-backend/dashbuilder-services/src/test/java/org/dashbuilder/transfer/DataTransferServicesTest.java", "diffHunk": "@@ -301,8 +304,8 @@ public void testDoExportWithoutNavigation() throws Exception {\n     \n     @Test\n     public void testDoExportWithComponents() throws Exception {\n-        when(externalComponentLoader.loadExternal()).thenReturn(asList(component(\"c1\")));\n-\n+        when(layoutComponentsHelper.findComponentsInTemplates((any()))).thenReturn(asList(\"c1\"));\n+        ", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ3MTc0MA==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537471740", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class LayoutComponentsHelper {\n          \n          \n            \n            public class LayoutComponentHelper {", "author": "caponetto", "createdAt": "2020-12-07T12:34:42Z", "path": "dashbuilder/dashbuilder-backend/dashbuilder-services/src/main/java/org/dashbuilder/transfer/LayoutComponentsHelper.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.transfer;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.external.model.ExternalComponent;\n+import org.uberfire.ext.layout.editor.api.PerspectiveServices;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutComponent;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutRow;\n+import org.uberfire.ext.layout.editor.api.editor.LayoutTemplate;\n+\n+@ApplicationScoped\n+public class LayoutComponentsHelper {", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ5MzAzOA==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537493038", "bodyText": "Please update this URL.\nAlso, I don't see this information in the other package.json files.", "author": "caponetto", "createdAt": "2020-12-07T13:08:40Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-js/packages/heatmap-base/package.json", "diffHunk": "@@ -0,0 +1,38 @@\n+{\n+  \"name\": \"@dashbuilder-js/heatmap-base\",\n+  \"version\": \"0.1.0\",\n+  \"description\": \"\",\n+  \"license\": \"Apache-2.0\",\n+  \"main\": \"./dist/index.js\",\n+  \"types\": \"./dist/index.d.ts\",\n+  \"files\": [\n+    \"dist\"\n+  ],\n+  \"repository\": {\n+    \"type\": \"git\",\n+    \"url\": \"https://github.com/kiegroup/kogito-tooling.git\"", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY1MzMzMQ==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537653331", "bodyText": "Can we have a boolean property like isProvided for ExternalComponent?\nThen componentService can return all components in a single remote call.\nThen you can filter them by isProvided to decide where to add them.\nSee, the point here is to do only one remote call instead of two.", "author": "caponetto", "createdAt": "2020-12-07T16:40:38Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-editor/src/main/java/org/dashbuilder/client/editor/external/ComponentsGroupProducer.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.editor.external;\n+\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.client.editor.resources.i18n.Constants;\n+import org.dashbuilder.external.model.ExternalComponent;\n+import org.dashbuilder.external.service.ComponentService;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.jboss.errai.ioc.client.container.SyncBeanManager;\n+import org.uberfire.ext.layout.editor.client.api.LayoutDragComponentGroup;\n+import org.uberfire.ext.layout.editor.client.api.LayoutDragComponentPalette;\n+import org.uberfire.ext.layout.editor.client.widgets.LayoutComponentPaletteGroupProvider;\n+import org.uberfire.ext.plugin.client.perspective.editor.events.PerspectiveEditorFocusEvent;\n+\n+@ApplicationScoped\n+public class ComponentsGroupProducer {\n+\n+    private static final Constants i18n = Constants.INSTANCE;\n+\n+    private SyncBeanManager beanManager;\n+    private LayoutDragComponentPalette layoutDragComponentPalette;\n+    private Caller<ComponentService> componentService;\n+\n+    @Inject\n+    public ComponentsGroupProducer(Caller<ComponentService> externalComponentService,\n+                                   SyncBeanManager beanManager,\n+                                   LayoutDragComponentPalette layoutDragComponentPalette) {\n+        this.componentService = externalComponentService;\n+        this.beanManager = beanManager;\n+        this.layoutDragComponentPalette = layoutDragComponentPalette;\n+    }\n+\n+    public void onEditorFocus(@Observes PerspectiveEditorFocusEvent event) {\n+        loadComponents();\n+    }\n+\n+    public void loadComponents() {\n+\n+        componentService.call((List<ExternalComponent> components) -> addExternalComponents(components))\n+                        .listExternalComponents();\n+\n+        componentService.call((List<ExternalComponent> components) -> addInternalComponents(components))\n+                        .listProvidedComponents();", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ3OTQ4Ng==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r538479486", "bodyText": "The issue I faced with the flag is that users could set the flag in their component's JSON - messing with our internal categories.\nBut if I only use this flag for internal communication I can force the flag when listing external to false and to true when listing provided components, so I will make this change!", "author": "jesuino", "createdAt": "2020-12-08T15:10:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY1MzMzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY1NjkwNw==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537656907", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void addInternalComponents(List<ExternalComponent> components) {\n          \n          \n            \n                public void addProvidedComponents(List<ExternalComponent> components) {", "author": "caponetto", "createdAt": "2020-12-07T16:45:13Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-editor/src/main/java/org/dashbuilder/client/editor/external/ComponentsGroupProducer.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.editor.external;\n+\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import org.dashbuilder.client.editor.resources.i18n.Constants;\n+import org.dashbuilder.external.model.ExternalComponent;\n+import org.dashbuilder.external.service.ComponentService;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.jboss.errai.ioc.client.container.SyncBeanManager;\n+import org.uberfire.ext.layout.editor.client.api.LayoutDragComponentGroup;\n+import org.uberfire.ext.layout.editor.client.api.LayoutDragComponentPalette;\n+import org.uberfire.ext.layout.editor.client.widgets.LayoutComponentPaletteGroupProvider;\n+import org.uberfire.ext.plugin.client.perspective.editor.events.PerspectiveEditorFocusEvent;\n+\n+@ApplicationScoped\n+public class ComponentsGroupProducer {\n+\n+    private static final Constants i18n = Constants.INSTANCE;\n+\n+    private SyncBeanManager beanManager;\n+    private LayoutDragComponentPalette layoutDragComponentPalette;\n+    private Caller<ComponentService> componentService;\n+\n+    @Inject\n+    public ComponentsGroupProducer(Caller<ComponentService> externalComponentService,\n+                                   SyncBeanManager beanManager,\n+                                   LayoutDragComponentPalette layoutDragComponentPalette) {\n+        this.componentService = externalComponentService;\n+        this.beanManager = beanManager;\n+        this.layoutDragComponentPalette = layoutDragComponentPalette;\n+    }\n+\n+    public void onEditorFocus(@Observes PerspectiveEditorFocusEvent event) {\n+        loadComponents();\n+    }\n+\n+    public void loadComponents() {\n+\n+        componentService.call((List<ExternalComponent> components) -> addExternalComponents(components))\n+                        .listExternalComponents();\n+\n+        componentService.call((List<ExternalComponent> components) -> addInternalComponents(components))\n+                        .listProvidedComponents();\n+    }\n+\n+    public void addExternalComponents(List<ExternalComponent> components) {\n+        String groupId = i18n.externalComponentsGroupName();\n+        if (!components.isEmpty()) {\n+            checkGroup(groupId);\n+        }\n+        components.forEach(comp -> {\n+            layoutDragComponentPalette.addDraggableComponent(groupId,\n+                                                             comp.getId(),\n+                                                             produceDragComponent(comp));\n+        });\n+\n+    }\n+\n+    public void addInternalComponents(List<ExternalComponent> components) {", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY2Mjc5NQ==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537662795", "bodyText": "Why is this test file \"disabled\"?", "author": "caponetto", "createdAt": "2020-12-07T16:52:40Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-js/packages/heatmap-base/src/__tests__/svgHeatmap.test.disabled", "diffHunk": "@@ -0,0 +1,45 @@\n+/*", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUwMTQ0OA==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r538501448", "bodyText": "I had to disable this test because I am waiting to the heatmaps bug to be fixed - once it is fixed I plan to test all heatmaps components", "author": "jesuino", "createdAt": "2020-12-08T15:30:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY2Mjc5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUwMjAzMQ==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r538502031", "bodyText": "pa7/heatmap.js#331", "author": "jesuino", "createdAt": "2020-12-08T15:31:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY2Mjc5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY3MTQ0MA==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537671440", "bodyText": "Is there a specific reason for using the alias Bus?", "author": "caponetto", "createdAt": "2020-12-07T17:03:40Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-js/packages/component-api/src/controller/index.ts", "diffHunk": "@@ -13,4 +13,6 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-export * from \"./ComponentController\";\n\\ No newline at end of file\n+export * from \"./ComponentController\";\n+export * from \"./api\";\n+export * as Bus from \"./ComponentBus\"", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY3Mjk1OQ==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537672959", "bodyText": "Keep in mind that this.componentId would be undefined if withComponentId is not called.", "author": "caponetto", "createdAt": "2020-12-07T17:05:45Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-js/packages/component-api/src/controller/BrowserComponentBus.ts", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import { ComponentMessage, MessageProperty } from \"../message\";\n+import { ComponentBus } from \"./ComponentBus\";\n+\n+export class BrowserComponentBus implements ComponentBus {\n+  private componentId: string;\n+\n+  private listener: (message: ComponentMessage) => void;\n+\n+  private readonly messageListener = (e: MessageEvent) => {\n+    this.listener(e.data as ComponentMessage);\n+  };\n+\n+  public start() {\n+    window.addEventListener(\"message\", this.messageListener, false);\n+  }\n+\n+  public send(message: ComponentMessage): void {\n+    console.debug(\"[BrowserComponentBus] Sending Message\");\n+    console.debug(message);\n+    message.properties.set(MessageProperty.COMPONENT_ID, this.componentId);", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg1MTA1MA==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537851050", "bodyText": "Can we have \"componentId\" be a constructor parameter? That would remove this issue.", "author": "tiagobento", "createdAt": "2020-12-07T21:37:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY3Mjk1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUyOTUzNg==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r538529536", "bodyText": "The issue is that we need to receive the componentid from dashbuilder so we can identify the component itself so dashbuilder can send messages to it. This way we can reuse the same message bus for all components.\nWhat I changed was to keep the componentId on controller - it may be undefined at the beginning, but once INIT is received the controller will get it.\nFeel free to suggest any other kind of change related to this!", "author": "jesuino", "createdAt": "2020-12-08T15:55:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY3Mjk1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY3OTQwOQ==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537679409", "bodyText": "Since you're importing all from heatmap (line 20), you could remove this line and use heatmap.Heatmap where applicable (line 74 only if I'm not mistaken).", "author": "caponetto", "createdAt": "2020-12-07T17:14:22Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-js/packages/heatmap-base/src/SVGHeatmap.tsx", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import { Heatmap } from \"heatmap.js\";", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4MDgyOA==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537680828", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import * as heatmap from \"heatmap.js\";\n          \n          \n            \n            import * as heatmap from \"heatmap\";", "author": "caponetto", "createdAt": "2020-12-07T17:16:12Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-js/packages/heatmap-base/src/SVGHeatmap.tsx", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import { Heatmap } from \"heatmap.js\";\n+import * as React from \"react\";\n+import { useEffect, createRef, useState } from \"react\";\n+import * as heatmap from \"heatmap.js\";", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0OTEzOQ==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537849139", "bodyText": "I think \"heatmap.js\" is the name of the module, so in this case, the .js part is required.", "author": "tiagobento", "createdAt": "2020-12-07T21:34:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4MDgyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4NjYwNA==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537686604", "bodyText": "Not that I'm saying to do this in this PR, but I think this could be a good opportunity to use our i18n package. :)\nAlso applicable to other places.", "author": "caponetto", "createdAt": "2020-12-07T17:23:50Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-js/packages/heatmap-component/src/SVGHeatmapComponent.tsx", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import * as React from \"react\";\n+import { useEffect, useState } from \"react\";\n+\n+import { SVGHeatmap, SVGNodeValue } from \"@dashbuilder-js/heatmap-base\";\n+import { DataSet } from \"@dashbuilder-js/component-api\";\n+import { ComponentController } from \"@dashbuilder-js/component-api/dist/controller/ComponentController\";\n+\n+const SVG_CONTENT_PARAM = \"svgContent\";\n+const SVG_URL_PARAM = \"svgUrl\";\n+\n+const NOT_ENOUGH_COLUMNS_MSG = \"Heatmap expects 2 columns: Node ID (TEXT or Label) and value (NUMBER)\";\n+const INVALID_COLUMNS_TYPE_MSG = \"Wrong columns type. First column should be TEXT or LABEL and second column NUMBER.\";\n+const MISSING_PARAM_MSG = \"You must provide either a SVG URL or the SVG Content.\";", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0OTI3OA==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537849278", "bodyText": "+1000 \ud83d\ude05", "author": "tiagobento", "createdAt": "2020-12-07T21:34:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4NjYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU0MDgzMw==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r538540833", "bodyText": "Indeed we had a brief discussion about it. The near future is to glue components API with Kogito tooling and reuse the protocol and also all available packages available there!", "author": "jesuino", "createdAt": "2020-12-08T16:05:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4NjYwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY5OTQzNg==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537699436", "bodyText": "Can we use ColumnType here instead of \"TEXT\", \"LABEL\", and \"NUMBER\"?", "author": "caponetto", "createdAt": "2020-12-07T17:41:57Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-js/packages/heatmap-component/src/SVGHeatmapComponent.tsx", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import * as React from \"react\";\n+import { useEffect, useState } from \"react\";\n+\n+import { SVGHeatmap, SVGNodeValue } from \"@dashbuilder-js/heatmap-base\";\n+import { DataSet } from \"@dashbuilder-js/component-api\";\n+import { ComponentController } from \"@dashbuilder-js/component-api/dist/controller/ComponentController\";\n+\n+const SVG_CONTENT_PARAM = \"svgContent\";\n+const SVG_URL_PARAM = \"svgUrl\";\n+\n+const NOT_ENOUGH_COLUMNS_MSG = \"Heatmap expects 2 columns: Node ID (TEXT or Label) and value (NUMBER)\";\n+const INVALID_COLUMNS_TYPE_MSG = \"Wrong columns type. First column should be TEXT or LABEL and second column NUMBER.\";\n+const MISSING_PARAM_MSG = \"You must provide either a SVG URL or the SVG Content.\";\n+\n+const notEmpty = (param?: string) => param !== undefined && param.trim() !== \"\";\n+\n+const validateDataSet = (ds: DataSet): string | undefined => {\n+  if (ds.columns.length < 2) {\n+    return NOT_ENOUGH_COLUMNS_MSG;\n+  }\n+  if ((ds.columns[0].type !== \"TEXT\" && ds.columns[0].type !== \"LABEL\") || ds.columns[1].type !== \"NUMBER\") {", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcxNTc3NQ==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537715775", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const [ repaint, setRepaint ] = useState(false);\n          \n          \n            \n              const [repaint, setRepaint] = useState(false);", "author": "caponetto", "createdAt": "2020-12-07T18:05:06Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-js/packages/heatmap-base/src/SVGHeatmap.tsx", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import { Heatmap } from \"heatmap.js\";\n+import * as React from \"react\";\n+import { useEffect, createRef, useState } from \"react\";\n+import * as heatmap from \"heatmap.js\";\n+\n+export interface SVGNodeValue {\n+  nodeId: string;\n+  value: number;\n+}\n+\n+interface NodeInfo {\n+  x: number;\n+  y: number;\n+  size: number;\n+}\n+\n+interface HeatData {\n+  x: number;\n+  y: number;\n+  value: number;\n+  radius?: number;\n+}\n+\n+const reduce = (data: HeatData[], reducer: (v1: number, v2: number) => number) =>\n+  data.length > 0 ? data.map(d => d.value).reduce((d1, d2) => reducer(d1, d2)) : 0;\n+\n+function createHeatmap(parent: HTMLElement, heatData: HeatData[]) {\n+  return heatmap\n+    .create({\n+      container: parent\n+    })\n+    .setData({\n+      max: reduce(heatData, Math.max),\n+      min: reduce(heatData, Math.min),\n+      data: heatData\n+    });\n+}\n+\n+const getNodeInfo = (el: HTMLElement): NodeInfo => {\n+  const bounds = el.getBoundingClientRect();\n+  const radius = Math.sqrt((bounds.width * bounds.height) / 4);\n+  return {\n+    x: (bounds.left + bounds.right) / 2,\n+    y: (bounds.top + bounds.bottom) / 2,\n+    size: radius\n+  };\n+};\n+\n+export interface SVGHeatmapProps {\n+  svgNodesValues: SVGNodeValue[];\n+  svgContent: string;\n+  width?: string;\n+  height?: string;\n+}\n+\n+export function SVGHeatmap(props: SVGHeatmapProps) {\n+  const parentRef = createRef<HTMLDivElement>();\n+  const [svgHeatmap, setSvgHeatmap] = useState<Heatmap<any, any, any>>();\n+  const [ repaint, setRepaint ] = useState(false);", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc0MjA0NQ==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537742045", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const onClickTitled = useCallback((e: any) => {\n          \n          \n            \n              const onTitleClicked = useCallback((e: any) => {", "author": "caponetto", "createdAt": "2020-12-07T18:45:53Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-js/packages/processes-heatmaps-component/src/ProcessSelector.tsx", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import * as React from \"react\";\n+import { useEffect, useCallback, useState, createRef } from \"react\";\n+\n+export interface KieServerContainer {\n+  id: string;\n+  processes: string[];\n+}\n+\n+interface SelectedValue {\n+  container: KieServerContainer;\n+  process: string;\n+}\n+\n+export interface ProcessSelectorProps {\n+  containers: KieServerContainer[];\n+  onContainerProcessSelected: (container: string, process: string) => void;\n+  selectedContainer?: string;\n+  selectedProcess?: string;\n+}\n+\n+export function ProcessSelector(props: ProcessSelectorProps) {\n+  const containerSelectRef = createRef<HTMLSelectElement>();\n+  const titleRef = createRef<HTMLDivElement>();\n+  const bodyRef = createRef<HTMLDivElement>();\n+  const processSelectRef = createRef<HTMLSelectElement>();\n+  const [selectedValue, setSelectedValue] = useState<SelectedValue>();\n+\n+  const onClickTitled = useCallback((e: any) => {", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg1MDY0Mw==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537850643", "bodyText": "A file called \"controller\" exporting something labeled as \"ComponentAPI\" doesn't smell good. I don't know the context of that, but do you think we can improve it?", "author": "tiagobento", "createdAt": "2020-12-07T21:36:43Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-js/packages/component-api/src/__tests__/api.test.ts", "diffHunk": "@@ -13,9 +13,8 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-\n-import * as ComponentAPI from \"../controller/api\";\n-import * as Bus from \"../controller/ComponentBus\";\n+import { Bus } from \"../controller\";\n+import * as ComponentAPI from \"../controller\";", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU3ODExMA==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r538578110", "bodyText": "Hello Tiago,\nI do agree with you. This is what the API should provide to component developers :\n\nModel Objects that represents what is sent in the wire:\n\n\nDataSet\nFunctionRequest\nFilterRequest\n\nand others objects\n\nAccess to ComponentController, which is how users will communicate with DB. In practice only \"getComponentController\" would be required so users can set their callback methods and call functions/fire configuration issues alert and more. To expose this function I simply exported it from controller, but I moved api.ts to the root dir, it will avoid confusion.\n\nWhen importing it I usually call it ComponentAPI and in the component itself users should not see controller package, I hope only the getComponentController and the model objects would be accessible!", "author": "jesuino", "createdAt": "2020-12-08T16:38:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg1MDY0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg1MTQ3Ng==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537851476", "bodyText": "Nice change.", "author": "tiagobento", "createdAt": "2020-12-07T21:38:06Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-js/packages/component-api/src/controller/DashbuilderComponentDispatcher.ts", "diffHunk": "@@ -56,8 +54,8 @@ export class DashbuilderComponentDispatcher implements InternalComponentDispatch\n   }\n \n   public init(): void {\n-    Bus.INSTANCE.setListener(this.messageDispatcher);\n-    Bus.INSTANCE.start();\n+    this.bus.setListener(this.messageDispatcher);\n+    this.bus.start();", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU3OTg0NQ==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r538579845", "bodyText": "I can't use in the constructor because the componentId is given by DB when the component is initialized. What I did is move the component ID to the controller, who sends message, and it will acquire the componentId after the init and send all messages with it.\nIf the component id is undefined then something is really wrong with DB - and all the messages will be sent to oblivion and ignored.", "author": "jesuino", "createdAt": "2020-12-08T16:39:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg1MTQ3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg1MzExNA==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537853114", "bodyText": "This should be an effect. You want to remove this event listener when this component is unmounted, right? So you have to wrap that into an useEffect and have it be registered on the returning function.", "author": "tiagobento", "createdAt": "2020-12-07T21:40:52Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-js/packages/heatmap-base/src/SVGHeatmap.tsx", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import { Heatmap } from \"heatmap.js\";\n+import * as React from \"react\";\n+import { useEffect, createRef, useState } from \"react\";\n+import * as heatmap from \"heatmap.js\";\n+\n+export interface SVGNodeValue {\n+  nodeId: string;\n+  value: number;\n+}\n+\n+interface NodeInfo {\n+  x: number;\n+  y: number;\n+  size: number;\n+}\n+\n+interface HeatData {\n+  x: number;\n+  y: number;\n+  value: number;\n+  radius?: number;\n+}\n+\n+const reduce = (data: HeatData[], reducer: (v1: number, v2: number) => number) =>\n+  data.length > 0 ? data.map(d => d.value).reduce((d1, d2) => reducer(d1, d2)) : 0;\n+\n+function createHeatmap(parent: HTMLElement, heatData: HeatData[]) {\n+  return heatmap\n+    .create({\n+      container: parent\n+    })\n+    .setData({\n+      max: reduce(heatData, Math.max),\n+      min: reduce(heatData, Math.min),\n+      data: heatData\n+    });\n+}\n+\n+const getNodeInfo = (el: HTMLElement): NodeInfo => {\n+  const bounds = el.getBoundingClientRect();\n+  const radius = Math.sqrt((bounds.width * bounds.height) / 4);\n+  return {\n+    x: (bounds.left + bounds.right) / 2,\n+    y: (bounds.top + bounds.bottom) / 2,\n+    size: radius\n+  };\n+};\n+\n+export interface SVGHeatmapProps {\n+  svgNodesValues: SVGNodeValue[];\n+  svgContent: string;\n+  width?: string;\n+  height?: string;\n+}\n+\n+export function SVGHeatmap(props: SVGHeatmapProps) {\n+  const parentRef = createRef<HTMLDivElement>();\n+  const [svgHeatmap, setSvgHeatmap] = useState<Heatmap<any, any, any>>();\n+  const [ repaint, setRepaint ] = useState(false);\n+\n+  useEffect(() => {\n+    if (props.svgContent) {\n+      const heatMapContainer = parentRef.current!;\n+      heatMapContainer.innerHTML = props.svgContent;\n+      const svg = heatMapContainer.querySelector(\"svg\")!;\n+      svg.style.width = \"100%\";\n+      svg.style.height = \"auto\";\n+      setSvgHeatmap(createHeatmap(heatMapContainer, []));\n+    }\n+  }, [props.svgContent]);\n+\n+  useEffect(() => {\n+    if (svgHeatmap && props.svgNodesValues && props.svgNodesValues.length > 0) {\n+      const values = props.svgNodesValues\n+        .filter(n => document.getElementById(n.nodeId))\n+        .map(nodeValue => {\n+          const node = document.getElementById(nodeValue.nodeId);\n+          const nodeInfo = getNodeInfo(node!);\n+          return {\n+            x: Math.ceil(nodeInfo.x),\n+            y: Math.ceil(nodeInfo.y),\n+            radius: nodeInfo.size,\n+            value: nodeValue.value\n+          };\n+        });\n+\n+      if (values.length > 0) {\n+        svgHeatmap.setData({\n+          min: values.map(d => d.value).reduce((d1, d2) => Math.min(d1, d2)),\n+          max: values.map(d => d.value).reduce((d1, d2) => Math.max(d1, d2)),\n+          data: values\n+        });\n+      }\n+      svgHeatmap.repaint();\n+    }\n+  }, [svgHeatmap, props.svgNodesValues, repaint]);\n+\n+  window.onresize = (e: any) => setRepaint(previous => !previous);", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg1NDc5Mg==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537854792", "bodyText": "This is nit-picking, but on kogito-tooling we avoid having acronyms all-caps. We would name this file SvgHeatmap.", "author": "tiagobento", "createdAt": "2020-12-07T21:43:49Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-js/packages/heatmap-base/src/index.tsx", "diffHunk": "@@ -0,0 +1,17 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+export * from \"./SVGHeatmap\";", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg1NDkyOQ==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537854929", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  const heatMapContainer = parentRef.current!;\n          \n          \n            \n                  const heatmapContainer = parentRef.current!;\n          \n      \n    \n    \n  \n\n\ud83d\ude4a", "author": "tiagobento", "createdAt": "2020-12-07T21:44:05Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-js/packages/heatmap-base/src/SVGHeatmap.tsx", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import { Heatmap } from \"heatmap.js\";\n+import * as React from \"react\";\n+import { useEffect, createRef, useState } from \"react\";\n+import * as heatmap from \"heatmap.js\";\n+\n+export interface SVGNodeValue {\n+  nodeId: string;\n+  value: number;\n+}\n+\n+interface NodeInfo {\n+  x: number;\n+  y: number;\n+  size: number;\n+}\n+\n+interface HeatData {\n+  x: number;\n+  y: number;\n+  value: number;\n+  radius?: number;\n+}\n+\n+const reduce = (data: HeatData[], reducer: (v1: number, v2: number) => number) =>\n+  data.length > 0 ? data.map(d => d.value).reduce((d1, d2) => reducer(d1, d2)) : 0;\n+\n+function createHeatmap(parent: HTMLElement, heatData: HeatData[]) {\n+  return heatmap\n+    .create({\n+      container: parent\n+    })\n+    .setData({\n+      max: reduce(heatData, Math.max),\n+      min: reduce(heatData, Math.min),\n+      data: heatData\n+    });\n+}\n+\n+const getNodeInfo = (el: HTMLElement): NodeInfo => {\n+  const bounds = el.getBoundingClientRect();\n+  const radius = Math.sqrt((bounds.width * bounds.height) / 4);\n+  return {\n+    x: (bounds.left + bounds.right) / 2,\n+    y: (bounds.top + bounds.bottom) / 2,\n+    size: radius\n+  };\n+};\n+\n+export interface SVGHeatmapProps {\n+  svgNodesValues: SVGNodeValue[];\n+  svgContent: string;\n+  width?: string;\n+  height?: string;\n+}\n+\n+export function SVGHeatmap(props: SVGHeatmapProps) {\n+  const parentRef = createRef<HTMLDivElement>();\n+  const [svgHeatmap, setSvgHeatmap] = useState<Heatmap<any, any, any>>();\n+  const [ repaint, setRepaint ] = useState(false);\n+\n+  useEffect(() => {\n+    if (props.svgContent) {\n+      const heatMapContainer = parentRef.current!;", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg1Njc1NQ==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537856755", "bodyText": "As you know, I'm not the biggest fan of static stuff. This has the potential of making our lives much harder in the future. If you could remove the static calls to \"ComponentAPI\", this would be awesome. Since the other one is related to the development environment, I don't think it's that urgent, but it would be great if you could refactor the two \\o/", "author": "tiagobento", "createdAt": "2020-12-07T21:47:09Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-js/packages/heatmap-component/src/index.tsx", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import * as React from \"react\";\n+import * as ReactDOM from \"react-dom\";\n+\n+import * as ComponentDev from \"@dashbuilder-js/component-dev\";\n+import * as ComponentAPI from \"@dashbuilder-js/component-api\";\n+import { SVGHeatmapComponent } from \"./SVGHeatmapComponent\";\n+\n+ReactDOM.render(\n+  <SVGHeatmapComponent controller={ComponentAPI.getComponentController()} />,\n+  document.getElementById(\"app\")!\n+);\n+\n+if (ComponentDev) {\n+  ComponentDev.start();\n+}", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYwNzAwMg==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r538607002", "bodyText": "Hello Tiago!\nThanks for the suggestion. Would you please provide an example of how it could look like? We can refactor for this PR if the change is small.\nThanks!", "author": "jesuino", "createdAt": "2020-12-08T17:03:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg1Njc1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ2NzQyMg==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r539467422", "bodyText": "Well, instead of ComponentAPI.getComponentController() you could have something like const componentApi = new ComponentApi() and then componentApi.getController()", "author": "tiagobento", "createdAt": "2020-12-09T16:43:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg1Njc1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg1NzMyMQ==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537857321", "bodyText": "Shouldn't this be import { ComponentController } from \"@dashbuilder-js/component-api\"; ?", "author": "tiagobento", "createdAt": "2020-12-07T21:48:01Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-js/packages/logo-component/src/LogoComponent.tsx", "diffHunk": "@@ -15,32 +15,29 @@\n  */\n \n import * as React from \"react\";\n-import { useEffect, useState } from \"react\";\n+import { useState } from \"react\";\n import { Logo, LogoProps } from \"./Logo\";\n-import * as ComponentAPI from \"@dashbuilder-js/component-api\";\n+import { ComponentController } from \"@dashbuilder-js/component-api/dist/controller/ComponentController\";", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2MDQ3MQ==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537860471", "bodyText": "This is a side effect, should be wrapped in a useEffect call.", "author": "tiagobento", "createdAt": "2020-12-07T21:53:25Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-js/packages/logo-component/src/LogoComponent.tsx", "diffHunk": "@@ -15,32 +15,29 @@\n  */\n \n import * as React from \"react\";\n-import { useEffect, useState } from \"react\";\n+import { useState } from \"react\";\n import { Logo, LogoProps } from \"./Logo\";\n-import * as ComponentAPI from \"@dashbuilder-js/component-api\";\n+import { ComponentController } from \"@dashbuilder-js/component-api/dist/controller/ComponentController\";\n const DEFAULT_SRC = \"./images/dashbuilder-logo.png\";\n const SRC_PROP = \"src\";\n const WIDTH_PROP = \"width\";\n const HEIGHT_PROP = \"height\";\n \n-export function App() {\n+interface Props {\n+  controller: ComponentController;\n+}\n+export function LogoComponent(props: Props) {\n   const [logoProps, setLogoProps] = useState<LogoProps>({\n     src: DEFAULT_SRC\n   });\n \n-  const handleInit = (componentProps: Map<string, any>) => {\n+  props.controller.setOnInit(componentProps => {\n     setLogoProps({\n       src: (componentProps.get(SRC_PROP) as string) || DEFAULT_SRC,\n       width: componentProps.get(WIDTH_PROP) as string,\n       height: componentProps.get(HEIGHT_PROP) as string\n     });\n-  };\n+  });", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2Mjg0MA==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537862840", "bodyText": "I think moving that to the \"else\" part makes for better code, since you're essentially removing mutabilityl :)", "author": "tiagobento", "createdAt": "2020-12-07T21:56:42Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-js/packages/logo-component/webpack.config.js", "diffHunk": "@@ -20,18 +20,23 @@ const { merge } = require(\"webpack-merge\");\n const common = require(\"../../webpack.common.config\");\n \n module.exports = async (env, argv) => {\n+  let entryPoint = \"./src/index.tsx\";", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcyOTY0NQ==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r538729645", "bodyText": "Could you please elaborate what should I added in the else part? In prod build it should use the index without the component dev API, in the dev build it uses index-dev.tsx", "author": "jesuino", "createdAt": "2020-12-08T19:02:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2Mjg0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NDY2Mw==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r537864663", "bodyText": "Effect.", "author": "tiagobento", "createdAt": "2020-12-07T21:59:48Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-js/packages/process-heatmap-component/src/ProcessHeatmapComponent.tsx", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import * as React from \"react\";\n+import { useEffect, useState, useCallback } from \"react\";\n+import { ColumnType, DataSet, FunctionCallRequest } from \"@dashbuilder-js/component-api\";\n+import { ComponentController } from \"@dashbuilder-js/component-api/dist/controller/ComponentController\";\n+import { SVGNodeValue, SVGHeatmap } from \"@dashbuilder-js/heatmap-base\";\n+\n+const NOT_ENOUGH_COLUMNS_MSG = \"Process Heatmap expects 2 columns: Node Id(LABEL or TEXT),Value (NUMBER).\";\n+const FIRST_COLUMN_INVALID_MSG = \"Wrong type for first column, it should be either LABEL or TEXT.\";\n+const SECOND_COLUMN_INVALID_MSG = \"Wrong type for second column, it should be NUMBER.\";\n+\n+enum Params {\n+  SERVER_TEMPLATE = \"serverTemplate\",\n+  CONTAINER_ID = \"containerId\",\n+  PROCESS_ID = \"processId\"\n+}\n+\n+enum AppStateType {\n+  ERROR = \"Error\",\n+  INIT = \"Initializing\",\n+  LOADING_SVG = \"Loading SVG\",\n+  LOADED_SVG = \"Loaded SVG\",\n+  FINISHED = \"Finished loading\"\n+}\n+\n+interface AppState {\n+  state: AppStateType;\n+  processesNodesValues: SVGNodeValue[];\n+  svgRequest?: FunctionCallRequest;\n+  processSVG?: string;\n+  configurationIssue: string;\n+  message?: string;\n+}\n+\n+const isEmpty = (param?: string) => param === undefined || param.trim() === \"\";\n+\n+const validateParams = (params: Map<string, any>): string | undefined => {\n+  if (isEmpty(params.get(Params.SERVER_TEMPLATE))) {\n+    return \"Server template is required.\";\n+  }\n+  if (isEmpty(params.get(Params.CONTAINER_ID))) {\n+    return \"Container ID is required.\";\n+  }\n+  if (isEmpty(params.get(Params.PROCESS_ID))) {\n+    return \"Process ID is required.\";\n+  }\n+};\n+\n+const validateDataSet = (ds: DataSet): string | undefined => {\n+  if (ds.columns.length < 2) {\n+    return NOT_ENOUGH_COLUMNS_MSG;\n+  }\n+  if (ds.columns[0].type !== ColumnType.LABEL && ds.columns[0].type !== ColumnType.TEXT) {\n+    return FIRST_COLUMN_INVALID_MSG;\n+  }\n+  if (ds.columns[1].type !== ColumnType.NUMBER) {\n+    return SECOND_COLUMN_INVALID_MSG;\n+  }\n+};\n+\n+interface Props {\n+  controller: ComponentController;\n+}\n+\n+export function ProcessHeatmapComponent(props: Props) {\n+  const [appState, setAppState] = useState<AppState>({\n+    state: AppStateType.INIT,\n+    processesNodesValues: [],\n+    configurationIssue: \"\"\n+  });\n+\n+  props.controller.setOnInit((params: Map<string, string>) => {\n+    const validationMessage = validateParams(params);\n+    if (validationMessage) {\n+      setAppState(previousAppState => ({\n+        ...previousAppState,\n+        state: AppStateType.ERROR,\n+        message: validationMessage,\n+        configurationIssue: validationMessage\n+      }));\n+    } else {\n+      setAppState(previousAppState => ({\n+        ...previousAppState,\n+        state: AppStateType.LOADING_SVG,\n+        svgRequest: {\n+          functionName: \"ProcessSVGFunction\",\n+          parameters: params\n+        },\n+        configurationIssue: \"\"\n+      }));\n+    }\n+  });", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "de1683e62498d0ea561bdbc798f5c888aeea3a4d", "url": "https://github.com/kiegroup/appformer/commit/de1683e62498d0ea561bdbc798f5c888aeea3a4d", "message": "Review changes", "committedDate": "2020-12-08T19:55:17Z", "type": "commit"}, {"oid": "ea974ce46f11013b4d8950e8c56b1b1454d61a66", "url": "https://github.com/kiegroup/appformer/commit/ea974ce46f11013b4d8950e8c56b1b1454d61a66", "message": "Adding test for listAllComponents", "committedDate": "2020-12-08T20:07:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ2NTE3Mg==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r539465172", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              let entryPoint = \"./src/index.tsx\";\n          \n          \n            \n              let entryPoint;", "author": "tiagobento", "createdAt": "2020-12-09T16:41:04Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-js/packages/logo-component/webpack.config.js", "diffHunk": "@@ -20,18 +20,23 @@ const { merge } = require(\"webpack-merge\");\n const common = require(\"../../webpack.common.config\");\n \n module.exports = async (env, argv) => {\n+  let entryPoint = \"./src/index.tsx\";", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ2NTYwMA==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r539465600", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              if (process.env.WEBPACK_DEV_SERVER) {\n          \n          \n            \n                entryPoint = \"./src/index-dev.tsx\";\n          \n          \n            \n                copyResources.push({ from: \"./static/manifest.dev.json\", to: \"./manifest.dev.json\" });\n          \n          \n            \n              }\n          \n          \n            \n              if (process.env.WEBPACK_DEV_SERVER) {\n          \n          \n            \n                entryPoint = \"./src/index-dev.tsx\";\n          \n          \n            \n                copyResources.push({ from: \"./static/manifest.dev.json\", to: \"./manifest.dev.json\" });\n          \n          \n            \n              } else {\n          \n          \n            \n                 entryPoint = \"./src/index.tsx\";\n          \n          \n            \n              }", "author": "tiagobento", "createdAt": "2020-12-09T16:41:32Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-js/packages/logo-component/webpack.config.js", "diffHunk": "@@ -20,18 +20,23 @@ const { merge } = require(\"webpack-merge\");\n const common = require(\"../../webpack.common.config\");\n \n module.exports = async (env, argv) => {\n+  let entryPoint = \"./src/index.tsx\";\n+  const copyResources = [\n+    { from: \"./static/images\", to: \"./images\" },\n+    { from: \"./static/index.html\", to: \"./index.html\" },\n+    { from: \"./static/manifest.json\", to: \"./manifest.json\" }\n+  ];\n+\n+  if (process.env.WEBPACK_DEV_SERVER) {\n+    entryPoint = \"./src/index-dev.tsx\";\n+    copyResources.push({ from: \"./static/manifest.dev.json\", to: \"./manifest.dev.json\" });\n+  }", "originalCommit": "8cab46510c60eb5e4df4eea107d24d1d5f46ae17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ2NjgxNQ==", "url": "https://github.com/kiegroup/appformer/pull/1080#discussion_r539466815", "bodyText": "That's what I meant.. nothing required, though, just a matter of style, probably.", "author": "tiagobento", "createdAt": "2020-12-09T16:42:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ2NTYwMA=="}], "type": "inlineReview"}, {"oid": "070a9aa3220249234066899d60a9442740660579", "url": "https://github.com/kiegroup/appformer/commit/070a9aa3220249234066899d60a9442740660579", "message": "Removing static functions and using a class for component Api", "committedDate": "2020-12-09T17:30:59Z", "type": "commit"}, {"oid": "bcbc832e6d178e5fe0f97ccdbb0102e3ff138f4c", "url": "https://github.com/kiegroup/appformer/commit/bcbc832e6d178e5fe0f97ccdbb0102e3ff138f4c", "message": "improving process selector", "committedDate": "2020-12-10T14:03:03Z", "type": "commit"}, {"oid": "5e23b58540391ac86e2468c0616d4286dc870599", "url": "https://github.com/kiegroup/appformer/commit/5e23b58540391ac86e2468c0616d4286dc870599", "message": "Making process selector expanded again", "committedDate": "2020-12-10T16:39:55Z", "type": "commit"}, {"oid": "014ca570caff2894f61d9f069a16a378f0d54b8f", "url": "https://github.com/kiegroup/appformer/commit/014ca570caff2894f61d9f069a16a378f0d54b8f", "message": "increasing version and removing sample logo", "committedDate": "2020-12-11T12:49:35Z", "type": "commit"}]}