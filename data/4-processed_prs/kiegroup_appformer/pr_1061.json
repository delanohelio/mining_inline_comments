{"pr_number": 1061, "pr_title": "AF-2636: Dashbuilder Pluggable Service Interface", "pr_createdAt": "2020-10-09T21:36:47Z", "pr_url": "https://github.com/kiegroup/appformer/pull/1061", "timeline": [{"oid": "bd0387eb0f91a28cd6b51de072a49f2952f9e233", "url": "https://github.com/kiegroup/appformer/commit/bd0387eb0f91a28cd6b51de072a49f2952f9e233", "message": "AF-2636: Dashbuilder Pluggable Service Interface", "committedDate": "2020-10-11T01:20:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg5NTcxNA==", "url": "https://github.com/kiegroup/appformer/pull/1061#discussion_r503895714", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Defines a contract for classes that wants to listen for components messages.\n          \n          \n            \n             * Defines a contract for classes that want to listen for components messages.", "author": "caponetto", "createdAt": "2020-10-13T12:06:00Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/component/ExternalComponentListener.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.displayer.client.component;\n+\n+import org.dashbuilder.displayer.external.ExternalComponentMessage;\n+import org.dashbuilder.displayer.external.ExternalFilterRequest;\n+\n+/**\n+ * Defines a contract for classes that wants to listen for components messages.", "originalCommit": "bd0387eb0f91a28cd6b51de072a49f2952f9e233", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkxMTU5Nw==", "url": "https://github.com/kiegroup/appformer/pull/1061#discussion_r503911597", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void makeReady();\n          \n          \n            \n                void prepare();", "author": "caponetto", "createdAt": "2020-10-13T12:32:15Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/component/ExternalComponentListener.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.displayer.client.component;\n+\n+import org.dashbuilder.displayer.external.ExternalComponentMessage;\n+import org.dashbuilder.displayer.external.ExternalFilterRequest;\n+\n+/**\n+ * Defines a contract for classes that wants to listen for components messages.\n+ *\n+ */\n+public interface ExternalComponentListener {\n+\n+    String getId();\n+\n+    void sendMessage(ExternalComponentMessage message);\n+    \n+    void onFilter(ExternalFilterRequest filterRequest);\n+    \n+    void onConfigurationIssue(String message);\n+    \n+    void makeReady();", "originalCommit": "bd0387eb0f91a28cd6b51de072a49f2952f9e233", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkyMzAxNg==", "url": "https://github.com/kiegroup/appformer/pull/1061#discussion_r503923016", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    void makeReady();\n          \n          \n            \n                    void prepare();", "author": "caponetto", "createdAt": "2020-10-13T12:49:42Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/ExternalComponentPresenter.java", "diffHunk": "@@ -19,45 +19,91 @@\n import java.util.function.Consumer;\n \n import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n import javax.enterprise.context.Dependent;\n import javax.inject.Inject;\n \n import com.google.gwt.core.client.GWT;\n import com.google.gwt.user.client.DOM;\n+import org.dashbuilder.displayer.client.component.ExternalComponentDispatcher;\n+import org.dashbuilder.displayer.client.component.ExternalComponentListener;\n import org.dashbuilder.displayer.external.ExternalComponentMessage;\n+import org.dashbuilder.displayer.external.ExternalComponentMessageHelper;\n+import org.dashbuilder.displayer.external.ExternalFilterRequest;\n import org.uberfire.client.mvp.UberView;\n \n @Dependent\n-public class ExternalComponentPresenter {\n+public class ExternalComponentPresenter implements ExternalComponentListener {\n \n     /**\n      * The base URL for components server. It should match the \n      */\n     private static final String COMPONENT_SERVER_PATH = \"dashbuilder/component\";\n-    /**\n-     * The property that should be used by components to find its unique ID during Runtime.\n-     */\n-    private static final String COMPONENT_RUNTIME_ID_PROP = \"component_id\";\n     /**\n      * Unique Runtime ID for the component. It is used to identify messages coming from the component.\n      */\n     final String componentRuntimeId = DOM.createUniqueId();\n \n-    private Consumer<ExternalComponentMessage> messageConsumer;\n+    private Consumer<ExternalFilterRequest> filterConsumer;\n \n     public interface View extends UberView<ExternalComponentPresenter> {\n \n         void setComponentURL(String url);\n \n         void postMessage(ExternalComponentMessage message);\n+\n+        void makeReady();", "originalCommit": "bd0387eb0f91a28cd6b51de072a49f2952f9e233", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkzNDc1NQ==", "url": "https://github.com/kiegroup/appformer/pull/1061#discussion_r503934755", "bodyText": "Can we use BeforeAll instead?", "author": "caponetto", "createdAt": "2020-10-13T13:07:23Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-displayer-api/src/test/java/org/dashbuilder/displayer/external/ExternalComponentMessageHelperTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.displayer.external;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+\n+import com.google.gwtmockito.GwtMockitoTestRunner;\n+import elemental2.core.JsMap;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+\n+import static org.dashbuilder.displayer.external.ExternalComponentMessageHelper.COMPONENT_RUNTIME_ID_PROP;\n+import static org.dashbuilder.displayer.external.ExternalComponentMessageHelper.FILTER_PROP;\n+import static org.dashbuilder.displayer.external.ExternalComponentMessageType.DATASET;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(GwtMockitoTestRunner.class)\n+public class ExternalComponentMessageHelperTest {\n+\n+    @Mock\n+    JsMap<String, Object> properties;\n+\n+    @InjectMocks\n+    ExternalComponentMessage message;\n+\n+    private ExternalComponentMessageHelper helper;\n+\n+    @Before", "originalCommit": "bd0387eb0f91a28cd6b51de072a49f2952f9e233", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkzOTI1Mg==", "url": "https://github.com/kiegroup/appformer/pull/1061#discussion_r503939252", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static final CommonConstants i18n = CommonConstants.INSTANCE;\n          \n          \n            \n                private static final CommonConstants i18n = CommonConstants.INSTANCE;", "author": "caponetto", "createdAt": "2020-10-13T13:14:00Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/component/ExternalComponentDispatcher.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.displayer.client.component;\n+\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import elemental2.dom.DomGlobal;\n+import elemental2.dom.MessageEvent;\n+import jsinterop.base.Js;\n+import org.dashbuilder.displayer.client.component.function.ComponentFunctionLocator;\n+import org.dashbuilder.displayer.client.component.function.ExternalComponentFunction;\n+import org.dashbuilder.displayer.client.resources.i18n.CommonConstants;\n+import org.dashbuilder.displayer.external.ExternalComponentMessage;\n+import org.dashbuilder.displayer.external.ExternalComponentMessageHelper;\n+import org.dashbuilder.displayer.external.ExternalComponentMessageType;\n+import org.dashbuilder.displayer.external.FunctionCallRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Listen to all component messages and find the destination.\n+ *\n+ */\n+@ApplicationScoped\n+public class ExternalComponentDispatcher {\n+\n+    static final CommonConstants i18n = CommonConstants.INSTANCE;", "originalCommit": "bd0387eb0f91a28cd6b51de072a49f2952f9e233", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2Mzg0NQ==", "url": "https://github.com/kiegroup/appformer/pull/1061#discussion_r503963845", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Check if the given message is a INIT message.\n          \n          \n            \n                 * Check if the given message is an INIT message.", "author": "caponetto", "createdAt": "2020-10-13T13:44:39Z", "path": "dashbuilder/dashbuilder-shared/dashbuilder-displayer-api/src/main/java/org/dashbuilder/displayer/external/ExternalComponentMessageHelper.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.displayer.external;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import jsinterop.base.Js;\n+\n+/**\n+ * Helper to deal with External Component Messages.\n+ *\n+ */\n+public class ExternalComponentMessageHelper {\n+\n+    /**\n+     * Message when a requested function is not found\n+     */\n+    public static final String FUNCTION_NOT_FOUND = \"Function not found.\";\n+\n+    /**\n+     * Message when a function is executed with success\n+     */\n+    public static final String FUNCTION_CALL_SUCESS = \"Function called with success\";\n+\n+    /**\n+     * Message when a message is of type FUNCTION_CALL, but the request to call the function is not found.\n+     */\n+    public static final String FUNCTION_CALL_REQUEST_NOT_FOUND = \"You must provide a function request to call a function.\";\n+\n+    /**\n+     * Default message when there was an error executing the function.\n+     */\n+    public static final String FUNCTION_EXECUTION_ERROR_FOUND = \"There was an error executing the function\";\n+\n+    /**\n+     * The property that should be used by components to find its unique ID during Runtime.\n+     */\n+    static final String COMPONENT_RUNTIME_ID_PROP = \"component_id\";\n+\n+    /**\n+     * Inbound property to define the dataset to be consumed by components.\n+     */\n+    static final String DATA_SET_PROP = \"dataSet\";\n+\n+    /**\n+     * Outbound property to define the filter request. Should be used with messages of type Filter Request.\n+     */\n+    static final String FILTER_PROP = \"filter\";\n+\n+    /**\n+     * Outbound property to define the name of a function to be invoked.\n+     */\n+    static final String FUNCTION_CALL_PROP = \"functionCallRequest\";\n+\n+    /**\n+     * Inbound property to define the result of a function call.\n+     */\n+    static final String FUNCTION_RESPONSE_PROP = \"functionResponse\";\n+    \n+    /**\n+     * Inbound property to define the result of a function call.\n+     */\n+    static final String CONFIGURATION_ISSUE_PROP = \"configurationIssue\";\n+\n+    /**\n+     * Extract filter request from messages coming from the component.\n+     * \n+     * @param message\n+     * The message sent by the component.\n+     * @return\n+     * An optional containing the filter extracted from the message.\n+     */\n+    public Optional<ExternalFilterRequest> filterRequest(ExternalComponentMessage message) {\n+        Object filterProp = message.getProperty(FILTER_PROP);\n+        if (filterProp != null) {\n+            ExternalFilterRequest filterRequest = Js.cast(filterProp);\n+            return Optional.ofNullable(filterRequest);\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * \n+     * Retrieves a function call object from a message.\n+     * \n+     * @param message\n+     */\n+    public Optional<FunctionCallRequest> functionCallRequest(ExternalComponentMessage message) {\n+        Object functionCallObj = message.getProperty(FUNCTION_CALL_PROP);\n+        if (functionCallObj != null) {\n+            FunctionCallRequest functionCallRequest = Js.cast(functionCallObj);\n+            return Optional.ofNullable(functionCallRequest);\n+        }\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Builds a message that contains dataset and component properties.\n+     * @param ds\n+     * The dataset that will be sent to client\n+     * @param componentProperties\n+     * All the component properties\n+     * @return\n+     * The message ready to be sent to the user.\n+     */\n+    public ExternalComponentMessage newDataSetMessage(ExternalDataSet ds, Map<String, Object> componentProperties) {\n+        ExternalComponentMessage message = ExternalComponentMessage.create(ExternalComponentMessageType.DATASET.name(), componentProperties);\n+        message.setProperty(DATA_SET_PROP, ds);\n+        return message;\n+    }\n+\n+    /**\n+     * Creates a message of type INIT, which is the first message sent to the component.\n+     * @param componentProperties\n+     * The initial properties.\n+     * @return\n+     * The message ready to be sent.\n+     */\n+    public ExternalComponentMessage newInitMessage(Map<String, Object> componentProperties) {\n+        return ExternalComponentMessage.create(ExternalComponentMessageType.INIT.name(), componentProperties);\n+    }\n+\n+    public ExternalComponentMessage newFunctionError(FunctionCallRequest functionCallRequest, Exception exception) {\n+        Map<String, Object> props = Collections.singletonMap(FUNCTION_RESPONSE_PROP,\n+                                                             FunctionResponse.create(functionCallRequest,\n+                                                                                     FunctionResultType.ERROR.name(),\n+                                                                                     FUNCTION_EXECUTION_ERROR_FOUND,\n+                                                                                     exception.getMessage()));\n+        return ExternalComponentMessage.create(ExternalComponentMessageType.FUNCTION_RESPONSE.name(), props);\n+    }\n+\n+    /**\n+     * \n+     * Produces a message to respond function call requests here the function could not be found.\n+     * @param functionCallRequest\n+     * @return\n+     */\n+    public ExternalComponentMessage newFunctionNotFound(FunctionCallRequest functionCallRequest) {\n+        Map<String, Object> props = Collections.singletonMap(FUNCTION_RESPONSE_PROP,\n+                                                             FunctionResponse.create(functionCallRequest,\n+                                                                                     FunctionResultType.NOT_FOUND.name(),\n+                                                                                     FUNCTION_NOT_FOUND,\n+                                                                                     null));\n+        return ExternalComponentMessage.create(ExternalComponentMessageType.FUNCTION_RESPONSE.name(), props);\n+    }\n+\n+    /**\n+     * Generate messages for function call message types that does not specify a function call request.\n+     * @return\n+     */\n+    public ExternalComponentMessage newFunctionRequestNotFound() {\n+        Map<String, Object> props = Collections.singletonMap(FUNCTION_RESPONSE_PROP,\n+                                                             FunctionResponse.create(null,\n+                                                                                     FunctionResultType.ERROR.name(),\n+                                                                                     FUNCTION_CALL_REQUEST_NOT_FOUND,\n+                                                                                     null));\n+        return ExternalComponentMessage.create(ExternalComponentMessageType.FUNCTION_RESPONSE.name(), props);\n+    }\n+\n+    /**\n+     * \n+     * Messages to sent when a function is called with success\n+     * \n+     * @param functionCallRequest\n+     * @param result\n+     * The function execution result.\n+     * @return\n+     */\n+    public ExternalComponentMessage newFunctionSuccess(FunctionCallRequest functionCallRequest, Object result) {\n+        Map<String, Object> props = Collections.singletonMap(FUNCTION_RESPONSE_PROP,\n+                                                             FunctionResponse.create(functionCallRequest,\n+                                                                                     FunctionResultType.SUCCESS.name(),\n+                                                                                     FUNCTION_CALL_SUCESS,\n+                                                                                     result));\n+        return ExternalComponentMessage.create(ExternalComponentMessageType.FUNCTION_RESPONSE.name(), props);\n+    }\n+\n+    /**\n+     * \n+     * Add the component runtime ID to a message\n+     * @param message\n+     * The message which the ID should be set\n+     * @param componentId\n+     * The component unique ID. It should be used by components to send messages to DB.\n+     */\n+    public void withId(ExternalComponentMessage message, String componentId) {\n+        message.setProperty(COMPONENT_RUNTIME_ID_PROP, componentId);\n+    }\n+\n+    /**\n+     * Extract the component Id from a message.\n+     * @param message\n+     * The target message to have the component id removed.\n+     * @return\n+     * An optional containing the component id.\n+     */\n+    public Optional<String> getComponentId(ExternalComponentMessage message) {\n+        return getValue(COMPONENT_RUNTIME_ID_PROP, message);\n+    }\n+\n+    public Optional<String> getConfigurationIssue(ExternalComponentMessage message) {\n+        return getValue(CONFIGURATION_ISSUE_PROP, message);\n+    }\n+\n+    /**\n+     * \n+     * Check if the given message is a INIT message.", "originalCommit": "bd0387eb0f91a28cd6b51de072a49f2952f9e233", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "57c57c608e88f59afeac14da324d0c20b6d02fbb", "url": "https://github.com/kiegroup/appformer/commit/57c57c608e88f59afeac14da324d0c20b6d02fbb", "message": "AF-2636: Dashbuilder Pluggable Service Interface", "committedDate": "2020-10-20T14:08:55Z", "type": "commit"}, {"oid": "e8ff2ce9c37b6f816670be44dc856d20c0344243", "url": "https://github.com/kiegroup/appformer/commit/e8ff2ce9c37b6f816670be44dc856d20c0344243", "message": "Improvements", "committedDate": "2020-10-20T14:51:21Z", "type": "commit"}, {"oid": "e8ff2ce9c37b6f816670be44dc856d20c0344243", "url": "https://github.com/kiegroup/appformer/commit/e8ff2ce9c37b6f816670be44dc856d20c0344243", "message": "Improvements", "committedDate": "2020-10-20T14:51:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMyNjgxMw==", "url": "https://github.com/kiegroup/appformer/pull/1061#discussion_r509326813", "bodyText": "I would prefer to use the capability of optional instead of specific if else statement.\nWe could reduce this in a single line of code:\nmessageHelper.getConfigurationIssue(message)\n.ifPresent(x-> destination.onConfigurationIssue(configurationIssue.get()))\norElse(x-> destination.onConfigurationIssue(i18n.componentConfigDefaultMessage());", "author": "sthundat", "createdAt": "2020-10-21T14:17:28Z", "path": "dashbuilder/dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/component/ExternalComponentDispatcher.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.displayer.client.component;\n+\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import elemental2.dom.DomGlobal;\n+import elemental2.dom.MessageEvent;\n+import jsinterop.base.Js;\n+import org.dashbuilder.displayer.client.component.function.ComponentFunctionLocator;\n+import org.dashbuilder.displayer.client.component.function.ExternalComponentFunction;\n+import org.dashbuilder.displayer.client.resources.i18n.CommonConstants;\n+import org.dashbuilder.displayer.external.ExternalComponentMessage;\n+import org.dashbuilder.displayer.external.ExternalComponentMessageHelper;\n+import org.dashbuilder.displayer.external.ExternalComponentMessageType;\n+import org.dashbuilder.displayer.external.FunctionCallRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Listen to all component messages and find the destination.\n+ *\n+ */\n+@ApplicationScoped\n+public class ExternalComponentDispatcher {\n+\n+    private static final CommonConstants i18n = CommonConstants.INSTANCE;\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExternalComponentDispatcher.class);\n+\n+    @Inject\n+    ExternalComponentMessageHelper messageHelper;\n+\n+    @Inject\n+    ComponentFunctionLocator functionLocator;\n+\n+    Set<ExternalComponentListener> listeners;\n+\n+    @PostConstruct\n+    public void setup() {\n+        listeners = new HashSet<>();\n+        startListening();\n+    }\n+\n+    public void register(ExternalComponentListener listener) {\n+        // make the component listener ready by default\n+        listener.prepare();\n+        listeners.add(listener);\n+    }\n+\n+    public void unregister(ExternalComponentListener listener) {\n+        listeners.remove(listener);\n+    }\n+\n+    public void onMessage(ExternalComponentMessage message) {\n+\n+        ExternalComponentMessageType type = messageHelper.messageType(message);\n+\n+        switch (type) {\n+            case FILTER:\n+                handleFilter(message);\n+                break;\n+\n+            case FUNCTION_CALL:\n+                handleFunction(message);\n+                break;\n+\n+            case READY:\n+                handleReady(message);\n+                break;\n+\n+            case FIX_CONFIGURATION:\n+                handleConfiguration(message);\n+                break;\n+\n+            case CONFIGURATION_OK:\n+                handleOkConfiguration(message);\n+                break;\n+\n+            default:\n+                break;\n+        }\n+\n+    }\n+\n+    private void handleOkConfiguration(ExternalComponentMessage message) {\n+        findDestination(message, ExternalComponentListener::configurationOk);\n+    }\n+\n+    private void handleConfiguration(ExternalComponentMessage message) {\n+        findDestination(message, destination -> {\n+            Optional<String> configurationIssue = messageHelper.getConfigurationIssue(message);", "originalCommit": "e8ff2ce9c37b6f816670be44dc856d20c0344243", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMyOTIyMQ==", "url": "https://github.com/kiegroup/appformer/pull/1061#discussion_r509329221", "bodyText": "same implementation could apply in multiple places", "author": "sthundat", "createdAt": "2020-10-21T14:20:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMyNjgxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYyODczMA==", "url": "https://github.com/kiegroup/appformer/pull/1061#discussion_r509628730", "bodyText": "Hello Savitha,\nThanks for the feedback. I modified this part to be an one liner. However, in other parts it does not apply because when the result is not present I have to do operations with other object.\nWhen we support Java 11 I wish I could refactor to use ifPresentOrElse!", "author": "jesuino", "createdAt": "2020-10-21T19:53:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMyNjgxMw=="}], "type": "inlineReview"}]}