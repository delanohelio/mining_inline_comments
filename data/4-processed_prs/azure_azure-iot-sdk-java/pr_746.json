{"pr_number": 746, "pr_title": "refactor(prov-dev, deps): Add better logging to provisioning device client", "pr_createdAt": "2020-03-27T20:20:55Z", "pr_url": "https://github.com/Azure/azure-iot-sdk-java/pull/746", "timeline": [{"oid": "ff2bae9c7f6835545cfa4e0037437da66421c7bc", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/ff2bae9c7f6835545cfa4e0037437da66421c7bc", "message": "refactor(prov-dev, deps): Add better logging to provisioning device client\n\nAlso fixing an issue where provisioning device client didn't propagate up the error code if an http exception was returned from service\n\nAlso fixing a bug where if the provisioning device client ignored amqp messages getting rejected from service. Now the sdk responds and throws appropriately", "committedDate": "2020-03-27T21:48:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1NTM5NA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/746#discussion_r399555394", "bodyText": "Previously, we ignored if our sent message was accepted or not. Now we fire a callback up to the listener to notify it if any message that was sent was rejected/abandoned/released/etc by the service so that it can stop waiting and propagate up the exception to the user", "author": "timtay-microsoft", "createdAt": "2020-03-27T21:53:09Z", "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/transport/amqp/AmqpsConnection.java", "diffHunk": "@@ -494,31 +463,45 @@ public boolean sendAmqpMessage(AmqpMessage message) throws Exception\n     @Override\n     public void onDelivery(Event event)\n     {\n-        logger.LogDebug(\"Entered in method %s\", logger.getMethodName());\n+        Link link = event.getLink();\n \n-        AmqpMessage message = amqpDeviceOperations.receiverMessageFromLink(event.getLink().getName());\n-        if (message == null)\n+        if (link instanceof Sender)\n         {\n-            //Sender specific section for dispositions it receives\n-            if (event.getType() == Event.Type.DELIVERY)\n+            // Codes_SRS_AMQPSIOTHUBCONNECTION_15_038: [If this link is the Sender link and the event type is DELIVERY, the event handler shall get the Delivery (Proton) object from the event.]\n+            Delivery d = event.getDelivery();\n+            DeliveryState remoteState = d.getRemoteState();\n+\n+            // Codes_SRS_AMQPSIOTHUBCONNECTION_15_039: [The event handler shall note the remote delivery state and use it and the Delivery (Proton) hash code to inform the AmqpsIotHubConnection of the message receipt.]\n+            boolean messageAcknowledgedAsSuccess = remoteState.equals(Accepted.getInstance());", "originalCommit": "ff2bae9c7f6835545cfa4e0037437da66421c7bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1NjEzMg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/746#discussion_r399556132", "bodyText": "There is no reason for us to parse the error message considering it will just be a string to the exception we give it to. Parsing this error message may even filter out important information from the service, so we're better off just giving the full error payload string to the user", "author": "timtay-microsoft", "createdAt": "2020-03-27T21:55:09Z", "path": "provisioning/provisioning-device-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/device/internal/exceptions/ProvisioningDeviceClientExceptionManager.java", "diffHunk": "@@ -18,38 +18,30 @@ public static void verifyHttpResponse(HttpResponse httpResponse) throws Provisio\n     {\n         int responseStatus = httpResponse.getStatus();\n \n-        String errorMessage = ErrorMessageParser.bestErrorMessage(new String(httpResponse.getErrorReason(), StandardCharsets.UTF_8));", "originalCommit": "ff2bae9c7f6835545cfa4e0037437da66421c7bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1NjI4MA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/746#discussion_r399556280", "bodyText": "Previously, we didn't include the status code in this error message, but we should as it helps debug customer issues", "author": "timtay-microsoft", "createdAt": "2020-03-27T21:55:38Z", "path": "provisioning/provisioning-device-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/device/internal/exceptions/ProvisioningDeviceClientExceptionManager.java", "diffHunk": "@@ -18,38 +18,30 @@ public static void verifyHttpResponse(HttpResponse httpResponse) throws Provisio\n     {\n         int responseStatus = httpResponse.getStatus();\n \n-        String errorMessage = ErrorMessageParser.bestErrorMessage(new String(httpResponse.getErrorReason(), StandardCharsets.UTF_8));\n+        byte[] errorReason = httpResponse.getErrorReason();\n+\n+        String errorMessage = httpResponse.getStatus() + \" : \" + new String(errorReason, StandardCharsets.UTF_8);", "originalCommit": "ff2bae9c7f6835545cfa4e0037437da66421c7bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1NjQ1Nw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/746#discussion_r399556457", "bodyText": "This was a strange switch case where almost all cases did the exact same thing. Just using a fall through to simplify it a bit", "author": "timtay-microsoft", "createdAt": "2020-03-27T21:56:08Z", "path": "provisioning/provisioning-device-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/device/internal/exceptions/ProvisioningDeviceClientExceptionManager.java", "diffHunk": "@@ -18,38 +18,30 @@ public static void verifyHttpResponse(HttpResponse httpResponse) throws Provisio\n     {\n         int responseStatus = httpResponse.getStatus();\n \n-        String errorMessage = ErrorMessageParser.bestErrorMessage(new String(httpResponse.getErrorReason(), StandardCharsets.UTF_8));\n+        byte[] errorReason = httpResponse.getErrorReason();\n+\n+        String errorMessage = httpResponse.getStatus() + \" : \" + new String(errorReason, StandardCharsets.UTF_8);\n \n         switch (responseStatus)\n         {\n             case 400:\n-                throw new ProvisioningDeviceHubException(errorMessage);\n             case 401:\n-                throw new ProvisioningDeviceHubException(errorMessage);\n             case 403:\n-                throw new ProvisioningDeviceHubException(errorMessage);\n             case 404:\n-                throw new ProvisioningDeviceHubException(errorMessage);\n             case 412:\n-                throw new ProvisioningDeviceHubException(errorMessage);\n             case 429:\n-                throw new ProvisioningDeviceHubException(errorMessage);\n             case 500:\n-                throw new ProvisioningDeviceHubException(errorMessage);\n             case 502:\n-                throw new ProvisioningDeviceHubException(errorMessage);\n             case 503:", "originalCommit": "ff2bae9c7f6835545cfa4e0037437da66421c7bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MTA5NA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/746#discussion_r399581094", "bodyText": "Is this to prevent re-wrapping the IOException inside another IOException?", "author": "abhipsaMisra", "createdAt": "2020-03-27T23:25:52Z", "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/transport/amqp/AmqpsConnection.java", "diffHunk": "@@ -95,24 +94,16 @@ public AmqpsConnection(String hostName, AmqpDeviceOperations amqpDeviceOperation\n         this.closeLock  = new ObjectLock();\n \n         this.sslContext = sslContext;\n-        this.isOpen  = false;\n+        this.isOpen = false;\n         this.fullHostAddress = String.format(\"%s:%d\", hostName, this.useWebSockets ? AMQP_WEB_SOCKET_PORT : AMQP_PORT );\n         this.hostName = hostName;\n \n         add(new Handshaker());\n         add(new FlowController());\n \n-        try\n-        {\n-            ReactorOptions options = new ReactorOptions();\n-            options.setEnableSaslByDefault(false);\n-            reactor = Proton.reactor(options, this);\n-        }\n-        catch (IOException e)", "originalCommit": "ff2bae9c7f6835545cfa4e0037437da66421c7bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MzkzOA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/746#discussion_r400373938", "bodyText": "exactly, catching this exception wasn't very necessary, so I simplified it", "author": "timtay-microsoft", "createdAt": "2020-03-30T17:39:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MTA5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4Mjg2NA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/746#discussion_r399582864", "bodyText": "Wouldn't onConnectionInit() be a better place for this check?", "author": "abhipsaMisra", "createdAt": "2020-03-27T23:33:38Z", "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/transport/amqp/AmqpsConnection.java", "diffHunk": "@@ -139,6 +130,11 @@ public boolean isConnected() throws Exception\n             throw this.saslListener.getSavedException();\n         }\n \n+        if (this.protonJExceptionParser != null && this.protonJExceptionParser.getError() != null)", "originalCommit": "ff2bae9c7f6835545cfa4e0037437da66421c7bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3NDYxMA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/746#discussion_r400374610", "bodyText": "isConnected() is called from a user thread whereas onConnectionInit() is a reactor thread. We only want to throw exceptions from a user thread, so I'd prefer to keep this saved exception check here.", "author": "timtay-microsoft", "createdAt": "2020-03-30T17:40:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4Mjg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MTMwMw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/746#discussion_r400381303", "bodyText": "I see, maybe add a comment to that effect?", "author": "abhipsaMisra", "createdAt": "2020-03-30T17:50:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4Mjg2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MzcwOQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/746#discussion_r399583709", "bodyText": "method name is not passed to the logger.", "author": "abhipsaMisra", "createdAt": "2020-03-27T23:37:37Z", "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/transport/amqp/AmqpsConnection.java", "diffHunk": "@@ -168,18 +165,23 @@ public void open() throws IOException\n             }\n             catch (InterruptedException e)\n             {\n-                logger.LogError(e);\n+                String errorMessage = \"Amqp connection was interrupted while opening.\";\n+                log.error(errorMessage, e);\n                 this.close();\n-                throw new IOException(\"Waited too long for the connection to open.\");\n+                throw new IOException(errorMessage, e);\n             }\n         }\n+        else\n+        {\n+            log.trace(\"Open called while amqp connection was already open\");\n+        }\n \n         if (!this.isOpen)\n         {\n-            throw new IOException(\"Failed to open the connection\");\n+            throw new IOException(\"Timed out  to open the amqp connection\");\n         }\n \n-        logger.LogDebug(\"Exited from method %s\", logger.getMethodName());\n+        log.debug(\"Exited from method %s\");", "originalCommit": "ff2bae9c7f6835545cfa4e0037437da66421c7bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3NTE0NA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/746#discussion_r400375144", "bodyText": "Actually, I tried to get rid of all these \"entered into method\" logs since they are not very helpful, so I'll delete this one, too", "author": "timtay-microsoft", "createdAt": "2020-03-30T17:41:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4MzcwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NDQ1OQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/746#discussion_r399584459", "bodyText": "Should we be swallowing these exceptions? Is this retried?", "author": "abhipsaMisra", "createdAt": "2020-03-27T23:41:12Z", "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/transport/amqp/AmqpsConnection.java", "diffHunk": "@@ -315,16 +307,15 @@ public void onConnectionInit(Event event)\n         }\n         catch (Exception e)\n         {\n-            logger.LogDebug(\"openLinks has thrown exception: %s\", e.getMessage());\n+            log.error(\"Encountered an exception while opening amqp links\", e);", "originalCommit": "ff2bae9c7f6835545cfa4e0037437da66421c7bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3ODMyOA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/746#discussion_r400378328", "bodyText": "It turns out the above try block only throws IllegalArgumentExceptions if the provided session is null (which it never will be), so we don't need this catch statement at all", "author": "timtay-microsoft", "createdAt": "2020-03-30T17:46:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NDQ1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NDYyMA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/746#discussion_r399584620", "bodyText": "Same, should we silently swallow these exceptions?", "author": "abhipsaMisra", "createdAt": "2020-03-27T23:41:59Z", "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/transport/amqp/AmqpsConnection.java", "diffHunk": "@@ -383,17 +365,15 @@ public void onConnectionUnbound(Event event)\n     @Override\n     public void onLinkInit(Event event)\n     {\n-        logger.LogDebug(\"Entered in method %s\", logger.getMethodName());\n         try\n         {\n             Link link = event.getLink();\n             amqpDeviceOperations.initLink(link);\n         }\n         catch (Exception e)\n         {\n-            logger.LogDebug(\"Exception in onLinkInit: %s\", e.getMessage());\n+            log.error(\"Amqp exception encountered during onLinkInit\", e);", "originalCommit": "ff2bae9c7f6835545cfa4e0037437da66421c7bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3ODc2Mw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/746#discussion_r400378763", "bodyText": "Like the above comment, this catch is never executed, some I'll remove the try catch altogether", "author": "timtay-microsoft", "createdAt": "2020-03-30T17:46:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NDYyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk3ODcxMA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/746#discussion_r399978710", "bodyText": "q - what does sendStatusMessage do? when/ how is it triggered?", "author": "abhipsaMisra", "createdAt": "2020-03-30T07:28:02Z", "path": "provisioning/provisioning-device-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/device/internal/contract/amqp/ProvisioningAmqpOperations.java", "diffHunk": "@@ -226,12 +227,18 @@ public void sendStatusMessage(String operationId, ResponseCallback responseCallb\n             {\n                 this.receiveLock.waitLock(MAX_WAIT_TO_SEND_MSG);\n             }\n+\n+            if (this.messageSendFailedExceptionMessage != null)", "originalCommit": "ff2bae9c7f6835545cfa4e0037437da66421c7bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MDM5Nw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/746#discussion_r400380397", "bodyText": "It is the periodic polling we do against DPS to see if our provisioning is complete yet or not. I'll clarify the header for this message to make that more clear", "author": "timtay-microsoft", "createdAt": "2020-03-30T17:49:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk3ODcxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk4MDQyNg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/746#discussion_r399980426", "bodyText": "so we were propagating the exception message before and now we are propagating the http error response? what was the exception message before?", "author": "abhipsaMisra", "createdAt": "2020-03-30T07:31:17Z", "path": "provisioning/provisioning-device-client/src/main/java/com/microsoft/azure/sdk/iot/provisioning/device/internal/contract/http/ContractAPIHttp.java", "diffHunk": "@@ -211,7 +217,8 @@ public synchronized void requestNonceForTPM(RequestData requestData, ResponseCal\n                 //SRS_ContractAPIHttp_25_008: [If service return a status as 404 then this method shall trigger the callback to the user with the response message.]\n                 if (httpResponse.getStatus() == ACCEPTABLE_NONCE_HTTP_STATUS)\n                 {\n-                    TpmRegistrationResultParser registerResponseTPMParser = TpmRegistrationResultParser.createFromJson(new String(e.getMessage()));\n+                    String tpmRegistrationResultJson = new String(httpResponse.getErrorReason(), StandardCharsets.UTF_8);", "originalCommit": "ff2bae9c7f6835545cfa4e0037437da66421c7bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4MjEwOA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/746#discussion_r400382108", "bodyText": "The exception message that we used to throw and that we gave to this parser object was just the http response error reason payload. This parser still gets that same error reason, but now our thrown exception has the status code as well. If I left this line as e.GetMessage(), the tpm parser would throw because it doesn't expect a status code", "author": "timtay-microsoft", "createdAt": "2020-03-30T17:52:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk4MDQyNg=="}], "type": "inlineReview"}, {"oid": "0fc4c8be02428ed51a3d7efb71161c0cc994d8b3", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/0fc4c8be02428ed51a3d7efb71161c0cc994d8b3", "message": "refactor(prov-dev, deps): Add better logging to provisioning device client\n\nAlso fixing an issue where provisioning device client didn't propagate up the error code if an http exception was returned from service\n\nAlso fixing a bug where if the provisioning device client ignored amqp messages getting rejected from service. Now the sdk responds and throws appropriately", "committedDate": "2020-03-30T17:53:13Z", "type": "commit"}, {"oid": "0fc4c8be02428ed51a3d7efb71161c0cc994d8b3", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/0fc4c8be02428ed51a3d7efb71161c0cc994d8b3", "message": "refactor(prov-dev, deps): Add better logging to provisioning device client\n\nAlso fixing an issue where provisioning device client didn't propagate up the error code if an http exception was returned from service\n\nAlso fixing a bug where if the provisioning device client ignored amqp messages getting rejected from service. Now the sdk responds and throws appropriately", "committedDate": "2020-03-30T17:53:13Z", "type": "forcePushed"}, {"oid": "39c8b993fb330a5c92a0d4994a73b1fdbeac8ae9", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/39c8b993fb330a5c92a0d4994a73b1fdbeac8ae9", "message": "squash", "committedDate": "2020-03-30T18:03:25Z", "type": "commit"}]}