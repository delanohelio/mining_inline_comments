{"pr_number": 743, "pr_title": "fix(iot-device): Fix issue where SDK didn't validate application properties correctly", "pr_createdAt": "2020-03-25T19:33:28Z", "pr_url": "https://github.com/Azure/azure-iot-sdk-java/pull/743", "timeline": [{"oid": "7ed36c722104562cb9905d7e6e4c1981c84e0304", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/7ed36c722104562cb9905d7e6e4c1981c84e0304", "message": "fix(iot-device): Fix issue where SDK didn't validate application properties correctly\n\nNormally the SDK wouldn't validate something like this, but if a user tries to send an application property with an invalid character in it, the different protocols behave differently in unintuitive ways. MQTT will sever the connection with no error message while AMQPS and HTTPS will allow it.\n\nI'm also taking this opportunity to fix a hack tied to URL encoding. URLEncoder doesn't handle encoding spaces correctly, but URIUtil from apache commons does", "committedDate": "2020-03-25T21:21:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4NjIzNw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/743#discussion_r398186237", "bodyText": "URIUtil encodePath handles spaces correctly for our purposes, whereas URLEncoder did not, hence the switch", "author": "timtay-microsoft", "createdAt": "2020-03-25T21:38:32Z", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/mqtt/MqttIotHubConnection.java", "diffHunk": "@@ -138,10 +140,8 @@ else if (this.config.getAuthenticationType() == DeviceClientConfig.AuthType.X509\n                     this.iotHubUserPassword = null;\n                 }\n \n-                //URLEncoder follows HTML spec for encoding urls, which includes substituting space characters with '+'\n-                // We want \"%20\" for spaces, not '+', however, so replace them manually after utf-8 encoding\n                 String userAgentString = this.config.getProductInfo().getUserAgentString();\n-                String clientUserAgentIdentifier = \"DeviceClientType=\" + URLEncoder.encode(userAgentString, \"UTF-8\").replaceAll(\"\\\\+\", \"%20\");\n+                String clientUserAgentIdentifier = \"DeviceClientType=\" + URIUtil.encodePath(userAgentString, StandardCharsets.UTF_8.name());", "originalCommit": "7ed36c722104562cb9905d7e6e4c1981c84e0304", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4NjY3NQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/743#discussion_r398186675", "bodyText": "We weren't encoding the application property keys, which could be an issue. If a customer gives us a key with odd characters in it, we need to encode in order to keep the mqtt topic string valid", "author": "timtay-microsoft", "createdAt": "2020-03-25T21:39:23Z", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/mqtt/MqttMessaging.java", "diffHunk": "@@ -152,18 +154,18 @@ private boolean appendPropertyIfPresent(StringBuilder stringBuilder, boolean sep\n                     stringBuilder.append(MESSAGE_PROPERTY_SEPARATOR);\n                 }\n \n-                stringBuilder.append(propertyKey);\n+                stringBuilder.append(URIUtil.encodePath(propertyKey, StandardCharsets.UTF_8.name()));", "originalCommit": "7ed36c722104562cb9905d7e6e4c1981c84e0304", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4NjczNA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/743#discussion_r398186734", "bodyText": "Is this a final set of characters? where did you get them from? is it defined somewhere? can we have a link as a comment?", "author": "azabbasi", "createdAt": "2020-03-25T21:39:32Z", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/MessageProperty.java", "diffHunk": "@@ -31,6 +31,11 @@\n     public static final String IOTHUB_SECURITY_INTERFACE_ID = \"iothub-interface-id\";\n     public static final String IOTHUB_SECURITY_INTERFACE_ID_VALUE = \"urn:azureiot:Security:SecurityAgent:1\";\n \n+    //Note this list includes the characters for tab and space.\n+    private static final String BANNED_NON_ALPHANUMERIC_CHARACTERS = \"()<>@,;:\\\"/[]?={} \\t\";", "originalCommit": "7ed36c722104562cb9905d7e6e4c1981c84e0304", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwMTMwMQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/743#discussion_r398201301", "bodyText": "I got this requirement from our own documentation here: https://azure.github.io/azure-iot-sdk-java/device/com/microsoft/azure/iothub/MessageProperty.html", "author": "timtay-microsoft", "createdAt": "2020-03-25T22:10:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4NjczNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4Njk1Nw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/743#discussion_r398186957", "bodyText": "These tests were incorrect, as '/' characters are not allowed in application properties", "author": "timtay-microsoft", "createdAt": "2020-03-25T21:39:58Z", "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/MessagePropertyTest.java", "diffHunk": "@@ -46,32 +46,6 @@ public void constructorSavesPropertyValue()\n \t\t\n     }\n \n-\t @Test\n-    public void constructorSavesPropertyValueSlash()", "originalCommit": "7ed36c722104562cb9905d7e6e4c1981c84e0304", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4NzEyMw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/743#discussion_r398187123", "bodyText": "Same here. Tab is an illegal character, so we shouldn't have had a test like this", "author": "timtay-microsoft", "createdAt": "2020-03-25T21:40:20Z", "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/MessagePropertyTest.java", "diffHunk": "@@ -46,32 +46,6 @@ public void constructorSavesPropertyValue()\n \t\t\n     }\n \n-\t @Test\n-    public void constructorSavesPropertyValueSlash()\n-    {\n-        final String name = \"topic\";\n-        final String value = \"/news/sports\";\n-\n-        MessageProperty property = new MessageProperty(name, value);\n-        String testValue = property.getValue();\n-\n-        final String expectedValue = value;\n-        assertThat(testValue, is(expectedValue));\n-    }\n-    \n-    @Test\n-    public void constructorSavesPropertyValueTab()\n-    {", "originalCommit": "7ed36c722104562cb9905d7e6e4c1981c84e0304", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4NzMyOA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/743#discussion_r398187328", "bodyText": "How huge is this dependency>", "author": "prmathur-microsoft", "createdAt": "2020-03-25T21:40:48Z", "path": "device/iot-device-client/pom.xml", "diffHunk": "@@ -107,6 +107,11 @@\n             <artifactId>slf4j-api</artifactId>\n             <version>1.7.25</version>\n         </dependency>\n+        <dependency>\n+            <groupId>commons-httpclient</groupId>\n+            <artifactId>commons-httpclient</artifactId>\n+            <version>3.1</version>", "originalCommit": "7ed36c722104562cb9905d7e6e4c1981c84e0304", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4NzU5Mw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/743#discussion_r398187593", "bodyText": "Does it work on android?", "author": "prmathur-microsoft", "createdAt": "2020-03-25T21:41:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4NzMyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE5OTc1Mg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/743#discussion_r398199752", "bodyText": "300kb, so it's not that bad. The gate will let us know if android will be an issue, but I don't expect it will be", "author": "timtay-microsoft", "createdAt": "2020-03-25T22:07:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4NzMyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4NzY2Nw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/743#discussion_r398187667", "bodyText": "The userId wasn't being mocked properly, and it was hitting the codepath in MessageProperty.java that complains about the contents of the userId not being valid. Without this change, it was using a memory address with several illegal characters", "author": "timtay-microsoft", "createdAt": "2020-03-25T21:41:27Z", "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsDeviceTelemetryTest.java", "diffHunk": "@@ -544,6 +549,15 @@ public void protonMessageToIoTHubMessageWithInputName(@Mocked final MessageImpl\n                 mockMessage.getMessageAnnotations();\n                 result = mockedAnnotations;\n \n+                mockMessage.getProperties();\n+                result = mockProperties;\n+\n+                mockProperties.getUserId();\n+                result = mockBinary;\n+\n+                mockBinary.toString();\n+                result = \"someUserId\";", "originalCommit": "7ed36c722104562cb9905d7e6e4c1981c84e0304", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4ODIzNw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/743#discussion_r398188237", "bodyText": "This test was bad because these characters should never appear in an application property", "author": "timtay-microsoft", "createdAt": "2020-03-25T21:42:32Z", "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/transport/mqtt/MqttTest.java", "diffHunk": "@@ -1253,8 +1253,8 @@ public void receiveSuccessCustomPropertyHasUnusualCharacters() throws TransportE\n         assertEquals(\"$\", receivedMessage.getProperties()[0].getValue());\n         assertEquals(\"&\", receivedMessage.getProperties()[1].getValue());\n         assertEquals(\"%\", receivedMessage.getProperties()[2].getName());\n-        assertEquals(\"\\\"\", receivedMessage.getProperties()[2].getValue());", "originalCommit": "7ed36c722104562cb9905d7e6e4c1981c84e0304", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4OTExMg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/743#discussion_r398189112", "bodyText": "is this still needed?", "author": "barustum", "createdAt": "2020-03-25T21:44:14Z", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/mqtt/MqttIotHubConnection.java", "diffHunk": "@@ -7,10 +7,12 @@\n import com.microsoft.azure.sdk.iot.device.exceptions.TransportException;\n import com.microsoft.azure.sdk.iot.device.transport.*;\n import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.httpclient.util.URIUtil;\n \n import javax.net.ssl.SSLContext;\n import java.io.IOException;\n import java.net.URLEncoder;", "originalCommit": "7ed36c722104562cb9905d7e6e4c1981c84e0304", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwMjM2Mg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/743#discussion_r398202362", "bodyText": "Yes, we need to use the URIUtil to encode some strings in this class", "author": "timtay-microsoft", "createdAt": "2020-03-25T22:13:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4OTExMg=="}], "type": "inlineReview"}, {"oid": "f3cc35d421e4dc8896a0732bbce7b916265ee5e7", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/f3cc35d421e4dc8896a0732bbce7b916265ee5e7", "message": "fix(iot-device): Fix issue where SDK didn't validate application properties correctly\n\nNormally the SDK wouldn't validate something like this, but if a user tries to send an application property with an invalid character in it, the different protocols behave differently in unintuitive ways. MQTT will sever the connection with no error message while AMQPS and HTTPS will allow it.\n\nI'm also taking this opportunity to fix a hack tied to URL encoding. URLEncoder doesn't handle encoding spaces correctly, but URIUtil from apache commons does", "committedDate": "2020-03-25T23:51:36Z", "type": "forcePushed"}, {"oid": "2071dd934579dc5b2723c96fbd1006c8f4da1283", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/2071dd934579dc5b2723c96fbd1006c8f4da1283", "message": "fix(iot-device): Fix issue where SDK didn't validate application properties correctly\n\nNormally the SDK wouldn't validate something like this, but if a user tries to send an application property with an invalid character in it, the different protocols behave differently in unintuitive ways. MQTT will sever the connection with no error message while AMQPS and HTTPS will allow it.\n\nI'm also taking this opportunity to fix a hack tied to URL encoding. URLEncoder doesn't handle encoding spaces correctly, but URIUtil from apache commons does", "committedDate": "2020-03-26T18:05:19Z", "type": "commit"}, {"oid": "2071dd934579dc5b2723c96fbd1006c8f4da1283", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/2071dd934579dc5b2723c96fbd1006c8f4da1283", "message": "fix(iot-device): Fix issue where SDK didn't validate application properties correctly\n\nNormally the SDK wouldn't validate something like this, but if a user tries to send an application property with an invalid character in it, the different protocols behave differently in unintuitive ways. MQTT will sever the connection with no error message while AMQPS and HTTPS will allow it.\n\nI'm also taking this opportunity to fix a hack tied to URL encoding. URLEncoder doesn't handle encoding spaces correctly, but URIUtil from apache commons does", "committedDate": "2020-03-26T18:05:19Z", "type": "forcePushed"}]}