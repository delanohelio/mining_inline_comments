{"pr_number": 713, "pr_title": "refactor(deps, iot-service): Refactor amqp service client implementation", "pr_createdAt": "2020-02-24T20:28:36Z", "pr_url": "https://github.com/Azure/azure-iot-sdk-java/pull/713", "timeline": [{"oid": "0e3e7a235794479dcde8f2f42e7ee1d2fac5cedb", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/0e3e7a235794479dcde8f2f42e7ee1d2fac5cedb", "message": "refactor(deps, iot-service): Refactor amqp service client implementation\n\n-Add substantial logging to service client operations over amqp including happy path and error path\n-Abstract some common amqp logic from each of file upload notification receiver, feedback message receiver, and cloud to device sender", "committedDate": "2020-02-24T20:28:53Z", "type": "forcePushed"}, {"oid": "f2a91f794e6f00515a65d8a188e3a6dbcffe246b", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/f2a91f794e6f00515a65d8a188e3a6dbcffe246b", "message": "refactor(deps, iot-service): Refactor amqp service client implementation\n\n-Add substantial logging to service client operations over amqp including happy path and error path\n-Abstract some common amqp logic from each of file upload notification receiver, feedback message receiver, and cloud to device sender", "committedDate": "2020-02-24T20:48:37Z", "type": "forcePushed"}, {"oid": "31b5e419c72d18e3c88431c0a59ab3a9338b8168", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/31b5e419c72d18e3c88431c0a59ab3a9338b8168", "message": "refactor(deps, iot-service): Refactor amqp service client implementation\n\n-Add substantial logging to service client operations over amqp including happy path and error path\n-Abstract some common amqp logic from each of file upload notification receiver, feedback message receiver, and cloud to device sender", "committedDate": "2020-02-24T22:19:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2MzkxOA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r383563918", "bodyText": "I would rename this to  something along the lines of BaseHandlerWithErrorLogging, since this now does more than simple error logging", "author": "abhipsaMisra", "createdAt": "2020-02-24T22:56:05Z", "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/transport/amqp/ErrorLoggingBaseHandler.java", "diffHunk": "@@ -8,6 +8,7 @@\n import lombok.extern.slf4j.Slf4j;\n import org.apache.qpid.proton.engine.BaseHandler;\n import org.apache.qpid.proton.engine.Event;\n+import org.apache.qpid.proton.engine.Link;\n \n @Slf4j\n public class ErrorLoggingBaseHandler extends BaseHandler", "originalCommit": "31b5e419c72d18e3c88431c0a59ab3a9338b8168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY3NTA3OA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r384675078", "bodyText": "I think I'll just take this new logic I'm adding and make it into a new class that extends ErrorLoggingBaseHandler. I want the device client amqp layer to use the existing error logging base handler, but I want provisioning device client and iot service client to use this new cleanup logic as well as the error logging base handler", "author": "timtay-microsoft", "createdAt": "2020-02-26T18:18:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2MzkxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2NDcyMg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r383564722", "bodyText": "do we ever expect onLinkRemoteOpen to be called but event.getLink() to be null?", "author": "abhipsaMisra", "createdAt": "2020-02-24T22:58:01Z", "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/transport/amqp/ErrorLoggingBaseHandler.java", "diffHunk": "@@ -69,11 +79,65 @@ public void onTransportError(Event event)\n         protonJExceptionParser = new ProtonJExceptionParser(event);\n         if (protonJExceptionParser.getError() == null)\n         {\n-            log.warn(\"Amqp transport closed with an unknown exception\");\n+            log.warn(\"Amqp transport threw an unknown exception\");\n         }\n         else\n         {\n-            log.warn(\"Amqp transport closed due to exception {} with description {}\", protonJExceptionParser.getError(), protonJExceptionParser.getErrorDescription());\n+            log.warn(\"Amqp transport threw exception {} with description {}\", protonJExceptionParser.getError(), protonJExceptionParser.getErrorDescription());\n+        }\n+\n+        log.debug(\"Closing amqp connection locally since amqp transport error was thrown\");\n+        event.getConnection().close();\n+    }\n+\n+    @Override\n+    public void onLinkRemoteOpen(Event event)\n+    {\n+        if (event.getLink() != null)", "originalCommit": "31b5e419c72d18e3c88431c0a59ab3a9338b8168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5OTgwOQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r384199809", "bodyText": "It should never be null, no. I'll remove this check", "author": "timtay-microsoft", "createdAt": "2020-02-25T23:57:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2NDcyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2NTExMw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r383565113", "bodyText": "Do we have multiple sessions on a single connection?", "author": "abhipsaMisra", "createdAt": "2020-02-24T22:58:58Z", "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/transport/amqp/ErrorLoggingBaseHandler.java", "diffHunk": "@@ -69,11 +79,65 @@ public void onTransportError(Event event)\n         protonJExceptionParser = new ProtonJExceptionParser(event);\n         if (protonJExceptionParser.getError() == null)\n         {\n-            log.warn(\"Amqp transport closed with an unknown exception\");\n+            log.warn(\"Amqp transport threw an unknown exception\");\n         }\n         else\n         {\n-            log.warn(\"Amqp transport closed due to exception {} with description {}\", protonJExceptionParser.getError(), protonJExceptionParser.getErrorDescription());\n+            log.warn(\"Amqp transport threw exception {} with description {}\", protonJExceptionParser.getError(), protonJExceptionParser.getErrorDescription());\n+        }\n+\n+        log.debug(\"Closing amqp connection locally since amqp transport error was thrown\");\n+        event.getConnection().close();\n+    }\n+\n+    @Override\n+    public void onLinkRemoteOpen(Event event)\n+    {\n+        if (event.getLink() != null)\n+        {\n+            log.debug(\"Amqp Link with name {} opened remotely\", event.getLink().getName());\n+        }\n+    }\n+\n+    @Override\n+    public void onConnectionRemoteOpen(Event event)\n+    {\n+        log.debug(\"Amqp Connection opened remotely\");\n+    }\n+\n+    @Override\n+    public void onSessionRemoteOpen(Event event)\n+    {\n+        log.debug(\"Amqp Session opened remotely\");\n+    }\n+\n+    @Override\n+    public void onLinkLocalClose(Event event)\n+    {\n+        //Reactor should respond to this session close with onSessionLocalClose call, where we close the connection.\n+        // Cannot close the connection here because it can only be done when all of its sessions have closed", "originalCommit": "31b5e419c72d18e3c88431c0a59ab3a9338b8168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIwMDEzOQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r384200139", "bodyText": "Not for provisioning or service client. I'll factor this logic out so that it isn't used by device client though", "author": "timtay-microsoft", "createdAt": "2020-02-25T23:58:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2NTExMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2NTg2NQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r383565865", "bodyText": "What is this change for?", "author": "abhipsaMisra", "createdAt": "2020-02-24T23:01:00Z", "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsIotHubConnectionTest.java", "diffHunk": "@@ -2226,17 +2226,17 @@ public void OnLinkRemoteCloseReportsErrorCodeIfPresent() throws TransportExcepti\n                 mockEvent.getReceiver();\n                 result = null;\n                 mockEvent.getTransport();\n-                result = mockTransport;\n+                result = null;", "originalCommit": "31b5e419c72d18e3c88431c0a59ab3a9338b8168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIwMDQyNQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r384200425", "bodyText": "This test is for checking the link for an error condition. If the transport is not null, it will try to check the transport for an error condition instead.", "author": "timtay-microsoft", "createdAt": "2020-02-25T23:59:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2NTg2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2NjE5MQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r383566191", "bodyText": "changing signature?", "author": "abhipsaMisra", "createdAt": "2020-02-24T23:01:50Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/FileUploadNotification.java", "diffHunk": "@@ -27,7 +27,7 @@\n     private Long blobSizeInBytes;\n     private Date enqueuedTimeUtcDate;\n \n-    public FileUploadNotification(String deviceId, String blobUri, String blobName, Date lastUpdatedTimeDate, Long blobSizeInBytes, Date enqueuedTimeUtcDate) throws IOException\n+    public FileUploadNotification(String deviceId, String blobUri, String blobName, Date lastUpdatedTimeDate, Long blobSizeInBytes, Date enqueuedTimeUtcDate)", "originalCommit": "31b5e419c72d18e3c88431c0a59ab3a9338b8168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIwMDY0NA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r384200644", "bodyText": "I'll revert this, I just realized that this is considered a public API", "author": "timtay-microsoft", "createdAt": "2020-02-26T00:00:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2NjE5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYzNTM2OQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r383635369", "bodyText": "This doesn't really give any context about why the connection/session/link wasn't opened. I am not sure if simply throwing an IOException here without an inner exception is of any value here. I would expect that if connection/session/links were not opened successfully, then there would be a savedException saved.\nThese lines should be simplified accordingly.", "author": "abhipsaMisra", "createdAt": "2020-02-25T03:05:34Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/transport/amqps/AmqpConnectionHandler.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ *  Copyright (c) Microsoft. All rights reserved.\n+ *  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+ */\n+\n+package com.microsoft.azure.sdk.iot.service.transport.amqps;\n+\n+import com.microsoft.azure.sdk.iot.deps.auth.IotHubSSLContext;\n+import com.microsoft.azure.sdk.iot.deps.transport.amqp.ErrorLoggingBaseHandler;\n+import com.microsoft.azure.sdk.iot.deps.ws.impl.WebSocketImpl;\n+import com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol;\n+import com.microsoft.azure.sdk.iot.service.Tools;\n+import org.apache.qpid.proton.Proton;\n+import org.apache.qpid.proton.engine.*;\n+import org.apache.qpid.proton.engine.impl.TransportInternal;\n+\n+import java.io.IOException;\n+\n+public class AmqpConnectionHandler extends ErrorLoggingBaseHandler\n+{\n+    public static final String WEBSOCKET_PATH = \"/$iothub/websocket\";\n+    public static final String WEBSOCKET_SUB_PROTOCOL = \"AMQPWSB10\";\n+    public static final String AMQPS_PORT = \":5671\";\n+    public static final String AMQPS_WS_PORT = \":443\";\n+\n+    protected Exception savedException;\n+    protected boolean connectionOpenedRemotely;\n+    protected boolean sessionOpenedRemotely;\n+    protected boolean linkOpenedRemotely;\n+\n+    protected final String hostName;\n+    protected final String userName;\n+    protected final String sasToken;\n+    protected final IotHubServiceClientProtocol iotHubServiceClientProtocol;\n+    protected final String webSocketHostName;\n+\n+    protected AmqpConnectionHandler(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol)\n+    {\n+        if (Tools.isNullOrEmpty(hostName))\n+        {\n+            throw new IllegalArgumentException(\"hostName can not be null or empty\");\n+        }\n+        if (Tools.isNullOrEmpty(userName))\n+        {\n+            throw new IllegalArgumentException(\"userName can not be null or empty\");\n+        }\n+        if (Tools.isNullOrEmpty(sasToken))\n+        {\n+            throw new IllegalArgumentException(\"sasToken can not be null or empty\");\n+        }\n+\n+        if (iotHubServiceClientProtocol == null)\n+        {\n+            throw new IllegalArgumentException(\"iotHubServiceClientProtocol cannot be null\");\n+        }\n+\n+        this.savedException = null;\n+        this.connectionOpenedRemotely = false;\n+        this.sessionOpenedRemotely = false;\n+        this.linkOpenedRemotely = false;\n+\n+        this.iotHubServiceClientProtocol = iotHubServiceClientProtocol;\n+        this.webSocketHostName = hostName;\n+        if (this.iotHubServiceClientProtocol == IotHubServiceClientProtocol.AMQPS_WS)\n+        {\n+            this.hostName = hostName + AMQPS_WS_PORT;\n+        }\n+        else\n+        {\n+            this.hostName = hostName + AMQPS_PORT;\n+        }\n+\n+        this.userName = userName;\n+        this.sasToken = sasToken;\n+    }\n+\n+    @Override\n+    public void onReactorInit(Event event)\n+    {\n+        event.getReactor().connection(this);\n+    }\n+\n+    /**\n+     * Event handler for the connection bound event\n+     * @param event The proton event object\n+     */\n+    @Override\n+    public void onConnectionBound(Event event)\n+    {\n+        Transport transport = event.getConnection().getTransport();\n+        if (transport != null)\n+        {\n+            if (this.iotHubServiceClientProtocol == IotHubServiceClientProtocol.AMQPS_WS)\n+            {\n+                WebSocketImpl webSocket = new WebSocketImpl();\n+                webSocket.configure(this.webSocketHostName, WEBSOCKET_PATH, 0, WEBSOCKET_SUB_PROTOCOL, null, null);\n+                ((TransportInternal)transport).addTransportLayer(webSocket);\n+            }\n+            Sasl sasl = transport.sasl();\n+            sasl.plain(this.userName, this.sasToken);\n+\n+            SslDomain domain = makeDomain(SslDomain.Mode.CLIENT);\n+            domain.setPeerAuthentication(SslDomain.VerifyMode.VERIFY_PEER);\n+            Ssl ssl = transport.ssl(domain);\n+        }\n+    }\n+\n+    @Override\n+    public void onLinkRemoteOpen(Event event)\n+    {\n+        super.onLinkRemoteOpen(event);\n+        this.linkOpenedRemotely = true;\n+    }\n+\n+    @Override\n+    public void onSessionRemoteOpen(Event event)\n+    {\n+        super.onSessionRemoteOpen(event);\n+        this.sessionOpenedRemotely = true;\n+    }\n+\n+    @Override\n+    public void onConnectionRemoteOpen(Event event)\n+    {\n+        super.onConnectionRemoteOpen(event);\n+        this.connectionOpenedRemotely = true;\n+    }\n+\n+    /**\n+     * If an exception was encountered while opening the AMQP connection, this function shall throw that saved exception\n+     * @throws IOException if an exception was encountered while openinging the AMQP connection. The encountered\n+     * exception will be the inner exception\n+     */\n+    protected void verifyConnectionOpened() throws IOException\n+    {\n+        if (this.protonJExceptionParser != null)\n+        {\n+            throw new IOException(\"Encountered exception during amqp connection: \" + protonJExceptionParser.getError() + \" with description \" + protonJExceptionParser.getErrorDescription());\n+        }\n+\n+        if (this.savedException != null)\n+        {\n+            throw new IOException(\"Connection failed to be established\", this.savedException);\n+        }\n+\n+        if (!this.connectionOpenedRemotely)\n+        {\n+            throw new IOException(\"Amqp Connection failed to open\");\n+        }\n+\n+        if (!this.sessionOpenedRemotely)\n+        {\n+            throw new IOException(\"Amqp Session failed to open\");\n+        }\n+\n+        if (!this.linkOpenedRemotely)\n+        {\n+            throw new IOException(\"Amqp link never opened\");\n+        }", "originalCommit": "31b5e419c72d18e3c88431c0a59ab3a9338b8168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY3NjQ4OA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r384676488", "bodyText": "The problem here is that there isn't necessarily an exception thrown by this point in the code. If protonJExceptionParser and savedException are both null, then we have no extra context to give here. All we know is that the connection/session/link did not open remotely, but that no transport error seemed to happen", "author": "timtay-microsoft", "createdAt": "2020-02-26T18:20:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYzNTM2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYzNjE4MQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r383636181", "bodyText": "Are we relying on link closure closing the session and associate connection? If yes, we should add appropriate comment here.", "author": "abhipsaMisra", "createdAt": "2020-02-25T03:09:12Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/transport/amqps/AmqpFeedbackReceivedHandler.java", "diffHunk": "@@ -126,10 +89,9 @@ public void onDelivery(Event event)\n             // Codes_SRS_SERVICE_SDK_JAVA_AMQPFEEDBACKRECEIVEDHANDLER_12_007: [The event handler shall settle the Delivery with the Accepted outcome]\n             delivery.disposition(Accepted.getInstance());\n             delivery.settle();\n-          \n-            // Codes_SRS_SERVICE_SDK_JAVA_AMQPFEEDBACKRECEIVEDHANDLER_12_008: [The event handler shall close the Session and Connection (Proton)]\n-            recv.getSession().close();\n-            recv.getSession().getConnection().close();\n+\n+            log.debug(\"Closing amqp feedback receiver link since a feedback message was received\");\n+            recv.close();", "originalCommit": "31b5e419c72d18e3c88431c0a59ab3a9338b8168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY3NzAzNA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r384677034", "bodyText": "Sure thing", "author": "timtay-microsoft", "createdAt": "2020-02-26T18:21:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYzNjE4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYzOTk5Mg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r383639992", "bodyText": "what happens if timeoutMs > REACTOR_TIMEOUT", "author": "abhipsaMisra", "createdAt": "2020-02-25T03:26:13Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/transport/amqps/ReactorRunner.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *  Copyright (c) Microsoft. All rights reserved.\n+ *  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+ */\n+\n+package com.microsoft.azure.sdk.iot.service.transport.amqps;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.qpid.proton.Proton;\n+import org.apache.qpid.proton.engine.BaseHandler;\n+import org.apache.qpid.proton.engine.HandlerException;\n+import org.apache.qpid.proton.reactor.Reactor;\n+\n+import java.io.IOException;\n+\n+@Slf4j\n+public class ReactorRunner\n+{\n+    private final static String THREAD_NAME_PREFIX = \"azure-iot-sdk-ReactorRunner-\";\n+    private final String threadName;\n+    private final Reactor reactor;\n+    public static final int REACTOR_TIMEOUT = 3141; // reactor timeout in milliseconds\n+\n+    public ReactorRunner(BaseHandler baseHandler, String threadNamePostfix) throws IOException\n+    {\n+        this.reactor = Proton.reactor(baseHandler);\n+        this.threadName = THREAD_NAME_PREFIX + threadNamePostfix;\n+    }\n+\n+    public void run(long timeoutMs)\n+    {\n+        Thread.currentThread().setName(this.threadName);\n+\n+        try\n+        {\n+            log.trace(\"Starting reactor thread {}\", this.threadName);\n+            this.reactor.setTimeout(REACTOR_TIMEOUT);", "originalCommit": "31b5e419c72d18e3c88431c0a59ab3a9338b8168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4MjM5MA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r384682390", "bodyText": "Oddly, the reactor timeout doesn't have any bearing on how long the reactor will run for. If REACTOR_TIMEOUT < timeoutMs, timeoutMs still determines how long the reactor will run for. I would remove the call reactor.setTimeout() but when I do, no connection/session/link open remotely for some reason.", "author": "timtay-microsoft", "createdAt": "2020-02-26T18:31:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYzOTk5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0MDcyMg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r383640722", "bodyText": "At this point, the reactor has stopped running and the reactor thread has been freed. Are the links/session/connection still open?", "author": "abhipsaMisra", "createdAt": "2020-02-25T03:29:39Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/transport/amqps/AmqpReceive.java", "diffHunk": "@@ -95,26 +75,14 @@ public synchronized FeedbackBatch receive(long timeoutMs) throws IOException, In\n         feedbackBatch = null;\n         if  (amqpReceiveHandler != null)\n         {\n-            // Codes_SRS_SERVICE_SDK_JAVA_AMQPRECEIVE_12_005: [The function shall initialize the Proton reactor object]\n-            this.reactor = Proton.reactor(this);\n-            // Codes_SRS_SERVICE_SDK_JAVA_AMQPRECEIVE_12_006: [The function shall start the Proton reactor object]\n-            this.reactor.setTimeout(REACTOR_TIMEOUT);\n-            this.reactor.start();\n-            \n+            log.info(\"Receiving on feedback receiver for up to {} milliseconds\", timeoutMs);\n+\n             // Codes_SRS_SERVICE_SDK_JAVA_AMQPRECEIVE_12_007: [The function shall wait for specified timeout to check for any feedback message]\n-            long startTime = System.currentTimeMillis();\n-            long endTime = startTime + timeoutMs;\n-            \n-            while(this.reactor.process())\n-            {\n-                if (System.currentTimeMillis() > endTime) break;\n-            }\n-            \n-            // Codes_SRS_SERVICE_SDK_JAVA_AMQPRECEIVE_12_008: [The function shall stop and free the Proton reactor object]\n-            this.reactor.stop();\n-            this.reactor.process();\n-            this.reactor.free();   \n-            this.amqpReceiveHandler.receiveComplete();\n+            new ReactorRunner(this.amqpReceiveHandler, \"AmqpFeedbackReceiver\").run(timeoutMs);\n+\n+            log.trace(\"Feedback receiver reactor finished running, verifying that the connection opened correctly\");\n+            this.amqpReceiveHandler.verifyConnectionOpened();", "originalCommit": "31b5e419c72d18e3c88431c0a59ab3a9338b8168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxNzgwNQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r384717805", "bodyText": "In this implementation, yes, the links/session/connection were never closed. I've fixed this in the next iteration though. From the reactor runner, we need to signal to close the links first before we stop the reactor.", "author": "timtay-microsoft", "createdAt": "2020-02-26T19:36:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0MDcyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0MTIwMw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r383641203", "bodyText": "Why are we removing this?", "author": "abhipsaMisra", "createdAt": "2020-02-25T03:31:51Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/transport/amqps/AmqpFileUploadNotificationReceive.java", "diffHunk": "@@ -167,14 +129,10 @@ public synchronized void onFeedbackReceived(String feedbackJson)\n \n             fileUploadNotificationQueue.add(fileUploadNotification);\n         }\n-        catch (IOException e)", "originalCommit": "31b5e419c72d18e3c88431c0a59ab3a9338b8168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxOTI2MQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r384719261", "bodyText": "I've refactored this a bit for the next iteration. Originally, no IOException was ever being thrown in that try block even though one was declared. In the next iteration, this will just catch any exception instead of an IOException in particular.", "author": "timtay-microsoft", "createdAt": "2020-02-26T19:38:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0MTIwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0MTMzMQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r383641331", "bodyText": "Why are we removing this?", "author": "abhipsaMisra", "createdAt": "2020-02-25T03:32:35Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/transport/amqps/AmqpFileUploadNotificationReceivedHandler.java", "diffHunk": "@@ -227,39 +149,9 @@ public void onLinkInit(Event event)\n         Link link = event.getLink();\n         if (event.getLink().getName().equals(FILE_NOTIFICATION_RECEIVE_TAG))\n         {\n-\n-            Target t = new Target();", "originalCommit": "31b5e419c72d18e3c88431c0a59ab3a9338b8168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxOTg3OA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r384719878", "bodyText": "A link only needs a target if it is a sender link. Receiver links only need a source. It didn't hurt to give a sender link a source or a receiver link a target, but it would be confusing to keep that code", "author": "timtay-microsoft", "createdAt": "2020-02-26T19:39:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0MTMzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0MjQ5MQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r383642491", "bodyText": "Was the length of messagesToBeSent always one, or did we support some sort of queuing mechanism?", "author": "abhipsaMisra", "createdAt": "2020-02-25T03:37:55Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/transport/amqps/AmqpSendHandler.java", "diffHunk": "@@ -292,21 +181,22 @@ public void onLinkInit(Event event)\n     @Override\n     public void onLinkFlow(Event event)\n     {\n-        if (!messagesToBeSent.isEmpty())\n+        if (messageToBeSent != null)\n         {\n-            org.apache.qpid.proton.message.Message protonMessage = messagesToBeSent.remove();", "originalCommit": "31b5e419c72d18e3c88431c0a59ab3a9338b8168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyMDMyMg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r384720322", "bodyText": "It was always a queue of at most 1 value, weirdly. Since the sender uses one connection per message sent, there was no reason to have a queue here", "author": "timtay-microsoft", "createdAt": "2020-02-26T19:40:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0MjQ5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0MjczMw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r383642733", "bodyText": "Are multiple messages sent over a single connection? Isn't there a 1:1 connection:operation mapping as in others?", "author": "abhipsaMisra", "createdAt": "2020-02-25T03:39:02Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/transport/amqps/AmqpSendHandler.java", "diffHunk": "@@ -331,75 +221,61 @@ public void onLinkFlow(Event event)\n                 snd.send(msgData, 0, length);\n \n                 snd.advance();\n+\n+                this.messageToBeSent = null;", "originalCommit": "31b5e419c72d18e3c88431c0a59ab3a9338b8168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyMTE4OA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r384721188", "bodyText": "There is a 1:1 mapping of amqp connection to c2d message here, yes. By setting the messageToBeSent to null, I am signalling that the message doesn't need to be sent anymore if the onLinkFlow() event happens again for whatever reason", "author": "timtay-microsoft", "createdAt": "2020-02-26T19:41:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0MjczMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0MjkyOA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r383642928", "bodyText": "How long does this run for?", "author": "abhipsaMisra", "createdAt": "2020-02-25T03:39:55Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/transport/amqps/ReactorRunner.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *  Copyright (c) Microsoft. All rights reserved.\n+ *  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+ */\n+\n+package com.microsoft.azure.sdk.iot.service.transport.amqps;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.qpid.proton.Proton;\n+import org.apache.qpid.proton.engine.BaseHandler;\n+import org.apache.qpid.proton.engine.HandlerException;\n+import org.apache.qpid.proton.reactor.Reactor;\n+\n+import java.io.IOException;\n+\n+@Slf4j\n+public class ReactorRunner\n+{\n+    private final static String THREAD_NAME_PREFIX = \"azure-iot-sdk-ReactorRunner-\";\n+    private final String threadName;\n+    private final Reactor reactor;\n+    public static final int REACTOR_TIMEOUT = 3141; // reactor timeout in milliseconds\n+\n+    public ReactorRunner(BaseHandler baseHandler, String threadNamePostfix) throws IOException\n+    {\n+        this.reactor = Proton.reactor(baseHandler);\n+        this.threadName = THREAD_NAME_PREFIX + threadNamePostfix;\n+    }\n+\n+    public void run(long timeoutMs)\n+    {\n+        Thread.currentThread().setName(this.threadName);\n+\n+        try\n+        {\n+            log.trace(\"Starting reactor thread {}\", this.threadName);\n+            this.reactor.setTimeout(REACTOR_TIMEOUT);\n+\n+            long startTime = System.currentTimeMillis();\n+            long endTime = startTime + timeoutMs;\n+\n+            this.reactor.start();\n+            while (this.reactor.process())\n+            {\n+                if (System.currentTimeMillis() > endTime) break;\n+            }\n+\n+            this.reactor.stop();\n+            this.reactor.process();\n+        }\n+        catch (HandlerException e)\n+        {\n+            log.debug(\"Encountered an exception while running reactor on thread {}\", threadName, e);\n+        }\n+        finally\n+        {\n+            log.trace(\"Freeing reactor now that reactor thread is done\");\n+            this.reactor.free();\n+        }\n+\n+        log.trace(\"Finished reactor thread {}\", this.threadName);\n+    }\n+\n+    public void run()\n+    {\n+        Thread.currentThread().setName(this.threadName);\n+\n+        try\n+        {\n+            log.trace(\"Starting reactor thread {}\", this.threadName);\n+            this.reactor.setTimeout(REACTOR_TIMEOUT);\n+            this.reactor.run();", "originalCommit": "31b5e419c72d18e3c88431c0a59ab3a9338b8168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyMTQ5Mg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r384721492", "bodyText": "It runs until the message is sent, or an exception occurs while opening the connection", "author": "timtay-microsoft", "createdAt": "2020-02-26T19:41:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0MjkyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0MzEwNw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r383643107", "bodyText": "So the channel is open for operations until timeoutMs?", "author": "abhipsaMisra", "createdAt": "2020-02-25T03:40:42Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/transport/amqps/ReactorRunner.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *  Copyright (c) Microsoft. All rights reserved.\n+ *  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+ */\n+\n+package com.microsoft.azure.sdk.iot.service.transport.amqps;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.qpid.proton.Proton;\n+import org.apache.qpid.proton.engine.BaseHandler;\n+import org.apache.qpid.proton.engine.HandlerException;\n+import org.apache.qpid.proton.reactor.Reactor;\n+\n+import java.io.IOException;\n+\n+@Slf4j\n+public class ReactorRunner\n+{\n+    private final static String THREAD_NAME_PREFIX = \"azure-iot-sdk-ReactorRunner-\";\n+    private final String threadName;\n+    private final Reactor reactor;\n+    public static final int REACTOR_TIMEOUT = 3141; // reactor timeout in milliseconds\n+\n+    public ReactorRunner(BaseHandler baseHandler, String threadNamePostfix) throws IOException\n+    {\n+        this.reactor = Proton.reactor(baseHandler);\n+        this.threadName = THREAD_NAME_PREFIX + threadNamePostfix;\n+    }\n+\n+    public void run(long timeoutMs)\n+    {\n+        Thread.currentThread().setName(this.threadName);\n+\n+        try\n+        {\n+            log.trace(\"Starting reactor thread {}\", this.threadName);\n+            this.reactor.setTimeout(REACTOR_TIMEOUT);\n+\n+            long startTime = System.currentTimeMillis();\n+            long endTime = startTime + timeoutMs;\n+\n+            this.reactor.start();\n+            while (this.reactor.process())", "originalCommit": "31b5e419c72d18e3c88431c0a59ab3a9338b8168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyMjAyMA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r384722020", "bodyText": "Yes, this is for use cases like when the customer want's to receive file upload notifications for X number of seconds", "author": "timtay-microsoft", "createdAt": "2020-02-26T19:42:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0MzEwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0MzI4MA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r383643280", "bodyText": "No verifyConnectionWasOpened here?", "author": "abhipsaMisra", "createdAt": "2020-02-25T03:41:23Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/transport/amqps/AmqpSend.java", "diffHunk": "@@ -121,17 +105,19 @@ public void send(String deviceId, String moduleId, Message message) throws IOExc\n                 {\n                     // Codes_SRS_SERVICE_SDK_JAVA_AMQPSEND_28_006: [The function shall create a binary message with the given content with deviceId only if moduleId is null]\n                     amqpSendHandler.createProtonMessage(deviceId, message);\n+                    log.info(\"Sending cloud to device message\");\n                 }\n                 else\n                 {\n                     // Codes_SRS_SERVICE_SDK_JAVA_AMQPSEND_28_001: [The function shall create a binary message with the given content with moduleId]\n                     amqpSendHandler.createProtonMessage(deviceId, moduleId, message);\n+                    log.info(\"Sending cloud to device module message\");\n                 }\n-                // Codes_SRS_SERVICE_SDK_JAVA_AMQPSEND_28_002: [The function shall initialize the Proton reactor object]\n-                this.reactor = Proton.reactor(this);\n-                // Codes_SRS_SERVICE_SDK_JAVA_AMQPSEND_28_003: [The function shall start the Proton reactor object]\n-                this.reactor.run();\n-                this.reactor.free();\n+\n+                new ReactorRunner(amqpSendHandler, \"AmqpSend\").run();\n+", "originalCommit": "31b5e419c72d18e3c88431c0a59ab3a9338b8168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyMzI2MQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r384723261", "bodyText": "It does call sendComplete() which calls verifyConnectionWasOpened, while also checking the amqp ack code that the sent message got. I've renamed sendComplete() to verifySendSucceeded() to make this more clear", "author": "timtay-microsoft", "createdAt": "2020-02-26T19:44:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0MzI4MA=="}], "type": "inlineReview"}, {"oid": "45b855ffeaaf4fa3deb253b0c69f0c2231882d2e", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/45b855ffeaaf4fa3deb253b0c69f0c2231882d2e", "message": "refactor(deps, iot-service): Refactor amqp service client implementation\n\n-Add substantial logging to service client operations over amqp including happy path and error path\n-Abstract some common amqp logic from each of file upload notification receiver, feedback message receiver, and cloud to device sender", "committedDate": "2020-02-26T20:12:37Z", "type": "forcePushed"}, {"oid": "fc88edd70101a9ea2a680f51f5f4e654203a6270", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/fc88edd70101a9ea2a680f51f5f4e654203a6270", "message": "refactor(deps, iot-service): Refactor amqp service client implementation\n\n-Add substantial logging to service client operations over amqp including happy path and error path\n-Abstract some common amqp logic from each of file upload notification receiver, feedback message receiver, and cloud to device sender", "committedDate": "2020-02-26T21:16:58Z", "type": "forcePushed"}, {"oid": "7dc9baccd82285de9bee36ec6329c33cf54afc9d", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/7dc9baccd82285de9bee36ec6329c33cf54afc9d", "message": "refactor(deps, iot-service): Refactor amqp service client implementation\n\n-Add substantial logging to service client operations over amqp including happy path and error path\n-Abstract some common amqp logic from each of file upload notification receiver, feedback message receiver, and cloud to device sender", "committedDate": "2020-02-26T21:43:04Z", "type": "forcePushed"}, {"oid": "bba7a6f2d03a33195e3eb020002d5c2b61b4d690", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/bba7a6f2d03a33195e3eb020002d5c2b61b4d690", "message": "refactor(deps, iot-service): Refactor amqp service client implementation\n\n-Add substantial logging to service client operations over amqp including happy path and error path\n-Abstract some common amqp logic from each of file upload notification receiver, feedback message receiver, and cloud to device sender", "committedDate": "2020-02-26T21:44:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzOTg2NQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r385439865", "bodyText": "Does this mean error? for link this is written into debug log", "author": "abhipsaMisra", "createdAt": "2020-02-28T00:01:15Z", "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/transport/amqp/ErrorLoggingBaseHandler.java", "diffHunk": "@@ -17,49 +19,73 @@\n     @Override\n     public void onLinkRemoteClose(Event event)\n     {\n-        protonJExceptionParser = new ProtonJExceptionParser(event);\n-        if (protonJExceptionParser.getError() == null)\n-        {\n-            log.debug(\"Amqp link {} was closed remotely\", event.getLink().getName());\n-        }\n-        else\n+        if (event.getLink().getLocalState().equals(EndpointState.ACTIVE))\n         {\n-            if (event.getLink() != null && event.getLink().getName() != null)\n+            protonJExceptionParser = new ProtonJExceptionParser(event);\n+            if (protonJExceptionParser.getError() == null)\n             {\n-                log.warn(\"Amqp link {} was closed remotely with exception {} with description {}\", event.getLink().getName(), protonJExceptionParser.getError(), protonJExceptionParser.getErrorDescription());\n+                log.debug(\"Amqp link {} was closed remotely\", event.getLink().getName());\n             }\n             else\n             {\n-                log.warn(\"Unknown amqp link was closed remotely with exception {} with description {}\", protonJExceptionParser.getError(), protonJExceptionParser.getErrorDescription());\n+                if (event.getLink() != null && event.getLink().getName() != null)\n+                {\n+                    log.warn(\"Amqp link {} was closed remotely with exception {} with description {}\", event.getLink().getName(), protonJExceptionParser.getError(), protonJExceptionParser.getErrorDescription());\n+                }\n+                else\n+                {\n+                    log.warn(\"Unknown amqp link was closed remotely with exception {} with description {}\", protonJExceptionParser.getError(), protonJExceptionParser.getErrorDescription());\n+                }\n             }\n         }\n+        else\n+        {\n+            // If the link closes remotely, but local state is already closed, then no error occurred.\n+            log.trace(\"Amqp link {} closed remotely after being closed locally\", event.getLink().getName());\n+        }\n     }\n \n     @Override\n     public void onSessionRemoteClose(Event event)\n     {\n-        protonJExceptionParser = new ProtonJExceptionParser(event);\n-        if (protonJExceptionParser.getError() == null)\n+        if (event.getSession().getLocalState().equals(EndpointState.ACTIVE))\n         {\n-            log.warn(\"Amqp session was closed remotely with an unknown exception\");\n+            protonJExceptionParser = new ProtonJExceptionParser(event);\n+            if (protonJExceptionParser.getError() == null)\n+            {\n+                log.warn(\"Amqp session was closed remotely with an unknown exception\");", "originalCommit": "bba7a6f2d03a33195e3eb020002d5c2b61b4d690", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg3NjU4Mw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r385876583", "bodyText": "I can make these log to error, sure", "author": "timtay-microsoft", "createdAt": "2020-02-28T19:19:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzOTg2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0MDAyMQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r385440021", "bodyText": "would this ever be null? event.getLink()", "author": "abhipsaMisra", "createdAt": "2020-02-28T00:01:45Z", "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/transport/amqp/ErrorLoggingBaseHandler.java", "diffHunk": "@@ -17,49 +19,73 @@\n     @Override\n     public void onLinkRemoteClose(Event event)\n     {\n-        protonJExceptionParser = new ProtonJExceptionParser(event);\n-        if (protonJExceptionParser.getError() == null)\n-        {\n-            log.debug(\"Amqp link {} was closed remotely\", event.getLink().getName());\n-        }\n-        else\n+        if (event.getLink().getLocalState().equals(EndpointState.ACTIVE))\n         {\n-            if (event.getLink() != null && event.getLink().getName() != null)\n+            protonJExceptionParser = new ProtonJExceptionParser(event);\n+            if (protonJExceptionParser.getError() == null)\n             {\n-                log.warn(\"Amqp link {} was closed remotely with exception {} with description {}\", event.getLink().getName(), protonJExceptionParser.getError(), protonJExceptionParser.getErrorDescription());\n+                log.debug(\"Amqp link {} was closed remotely\", event.getLink().getName());\n             }\n             else\n             {\n-                log.warn(\"Unknown amqp link was closed remotely with exception {} with description {}\", protonJExceptionParser.getError(), protonJExceptionParser.getErrorDescription());\n+                if (event.getLink() != null && event.getLink().getName() != null)", "originalCommit": "bba7a6f2d03a33195e3eb020002d5c2b61b4d690", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0MDcwMg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r385440702", "bodyText": "The new reactor runner is not in deps, is the reactor implementation same for provisioning and service client? Is the reactor stopping mechanism valid for both?", "author": "abhipsaMisra", "createdAt": "2020-02-28T00:04:16Z", "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/transport/amqp/ErrorLoggingBaseHandlerWithCleanup.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ *  Copyright (c) Microsoft. All rights reserved.\n+ *  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+ */\n+\n+package com.microsoft.azure.sdk.iot.deps.transport.amqp;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.qpid.proton.engine.BaseHandler;\n+import org.apache.qpid.proton.engine.EndpointState;\n+import org.apache.qpid.proton.engine.Event;\n+\n+/**\n+ * Base Handler that logs connection/session/link opening. It also has logic to tear down the connection/session/link and\n+ * stop the reactor if the connection, session, and/or link is closed remotely. This base handler assumes a single link", "originalCommit": "bba7a6f2d03a33195e3eb020002d5c2b61b4d690", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0MTM1NA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r385441354", "bodyText": "if the remote state is not closed, is reactor closure handled by the reactor runner? what about for the provisioning client?", "author": "abhipsaMisra", "createdAt": "2020-02-28T00:06:27Z", "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/transport/amqp/ErrorLoggingBaseHandlerWithCleanup.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ *  Copyright (c) Microsoft. All rights reserved.\n+ *  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+ */\n+\n+package com.microsoft.azure.sdk.iot.deps.transport.amqp;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.qpid.proton.engine.BaseHandler;\n+import org.apache.qpid.proton.engine.EndpointState;\n+import org.apache.qpid.proton.engine.Event;\n+\n+/**\n+ * Base Handler that logs connection/session/link opening. It also has logic to tear down the connection/session/link and\n+ * stop the reactor if the connection, session, and/or link is closed remotely. This base handler assumes a single link\n+ * in a single session in a single connection.\n+ */\n+@Slf4j\n+public class ErrorLoggingBaseHandlerWithCleanup extends ErrorLoggingBaseHandler\n+{\n+    @Override\n+    public void onLinkRemoteClose(Event event)\n+    {\n+        super.onLinkRemoteClose(event);\n+\n+        if (event.getLink().getLocalState() == EndpointState.ACTIVE)\n+        {\n+            log.debug(\"Closing amqp link locally since amqp link was closed remotely\");\n+            event.getLink().close();\n+        }\n+    }\n+\n+    @Override\n+    public void onSessionRemoteClose(Event event)\n+    {\n+        super.onSessionRemoteClose(event);\n+\n+        if (event.getSession().getLocalState() == EndpointState.ACTIVE)\n+        {\n+            log.debug(\"Closing amqp session locally since amqp session was closed remotely\");\n+            event.getSession().close();\n+        }\n+    }\n+\n+    @Override\n+    public void onConnectionRemoteClose(Event event)\n+    {\n+        super.onConnectionRemoteClose(event);\n+\n+        if (event.getConnection().getLocalState() == EndpointState.CLOSED)\n+        {\n+            log.trace(\"Stopping reactor now that connection is closed locally and remotely\");\n+            event.getReactor().stop();\n+        }\n+        else\n+        {\n+            log.debug(\"Closing amqp connection locally since amqp connection was closed remotely\");\n+            event.getConnection().close();\n+        }\n+    }\n+\n+    @Override\n+    public void onTransportError(Event event)\n+    {\n+        super.onTransportError(event);\n+\n+        if (event.getConnection() != null)\n+        {\n+            log.debug(\"Closing amqp connection locally since amqp transport error was thrown\");\n+            event.getConnection().close();\n+        }\n+    }\n+\n+    @Override\n+    public void onLinkRemoteOpen(Event event)\n+    {\n+        super.onLinkRemoteOpen(event);\n+        log.debug(\"Amqp Link with name {} opened remotely\", event.getLink().getName());\n+    }\n+\n+    @Override\n+    public void onConnectionRemoteOpen(Event event)\n+    {\n+        super.onConnectionRemoteOpen(event);\n+        log.debug(\"Amqp Connection opened remotely\");\n+    }\n+\n+    @Override\n+    public void onSessionRemoteOpen(Event event)\n+    {\n+        super.onSessionRemoteOpen(event);\n+        log.debug(\"Amqp Session opened remotely\");\n+    }\n+\n+    @Override\n+    public void onLinkLocalOpen(Event event)\n+    {\n+        super.onLinkLocalOpen(event);\n+        log.trace(\"Amqp Link with name {} opened locally\", event.getLink().getName());\n+    }\n+\n+    @Override\n+    public void onConnectionLocalOpen(Event event)\n+    {\n+        super.onConnectionLocalOpen(event);\n+        log.trace(\"Amqp Connection opened locally\");\n+    }\n+\n+    @Override\n+    public void onSessionLocalOpen(Event event)\n+    {\n+        super.onSessionLocalOpen(event);\n+        log.trace(\"Amqp Session opened locally\");\n+    }\n+\n+    @Override\n+    public void onLinkLocalClose(Event event)\n+    {\n+        super.onLinkLocalClose(event);\n+\n+        //Reactor should respond to this session close with onSessionLocalClose call, where we close the connection.\n+        // Cannot close the connection here because it can only be done when all of its sessions have closed\n+        log.debug(\"Closing amqp session locally since amqp link was closed locally\");\n+        event.getSession().close();\n+    }\n+\n+    @Override\n+    public void onSessionLocalClose(Event event)\n+    {\n+        super.onSessionLocalClose(event);\n+\n+        //Reactor should respond to this connection close with onConnectionLocalClose call, where we close the reactor.\n+        // Cannot close the reactor here because it can only be done when all of its connections have closed\n+        log.debug(\"Closing amqp connection locally since amqp session was closed locally\");\n+        event.getConnection().close();\n+    }\n+\n+    @Override\n+    public void onConnectionLocalClose(Event event)\n+    {\n+        super.onConnectionLocalClose(event);\n+\n+        if (event.getConnection().getRemoteState() == EndpointState.CLOSED)", "originalCommit": "bba7a6f2d03a33195e3eb020002d5c2b61b4d690", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0MTUwMQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r385441501", "bodyText": "sysout here?", "author": "abhipsaMisra", "createdAt": "2020-02-28T00:06:52Z", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsIotHubConnection.java", "diffHunk": "@@ -919,6 +919,8 @@ public void onTransportError(Event event)\n         super.onTransportError(event);\n         this.state = IotHubConnectionStatus.DISCONNECTED;\n \n+        System.out.println(\"!!!!!!!!!!!!!!!!!!!!!!!!!!onTransportError!!!!!!!!!!!!!!!!!!!!!!!!!!\");", "originalCommit": "bba7a6f2d03a33195e3eb020002d5c2b61b4d690", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg3MzI5NQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r385873295", "bodyText": "Removed", "author": "timtay-microsoft", "createdAt": "2020-02-28T19:12:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0MTUwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0MzE0Mw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r385443143", "bodyText": "Q - do we get some error if we try to close a link which is not in active state?", "author": "abhipsaMisra", "createdAt": "2020-02-28T00:12:31Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/transport/amqps/AmqpFeedbackReceivedHandler.java", "diffHunk": "@@ -126,50 +101,20 @@ public void onDelivery(Event event)\n             // Codes_SRS_SERVICE_SDK_JAVA_AMQPFEEDBACKRECEIVEDHANDLER_12_007: [The event handler shall settle the Delivery with the Accepted outcome]\n             delivery.disposition(Accepted.getInstance());\n             delivery.settle();\n-          \n-            // Codes_SRS_SERVICE_SDK_JAVA_AMQPFEEDBACKRECEIVEDHANDLER_12_008: [The event handler shall close the Session and Connection (Proton)]\n-            recv.getSession().close();\n-            recv.getSession().getConnection().close();\n \n-            // Codes_SRS_SERVICE_SDK_JAVA_AMQPFEEDBACKRECEIVEDHANDLER_12_009: [The event handler shall call the FeedbackReceived callback if it has been initialized]\n-            if (amqpFeedbackReceivedEvent != null)\n-            {\n-                amqpFeedbackReceivedEvent.onFeedbackReceived(msg.getBody().toString());\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void onConnectionBound(Event event)\n-    {\n-        // Codes_SRS_SERVICE_SDK_JAVA_AMQPFEEDBACKRECEIVEDHANDLER_12_009: [The event handler shall set the SASL PLAIN authentication on the Transport using the given user name and sas token]\n-        // Codes_SRS_SERVICE_SDK_JAVA_AMQPFEEDBACKRECEIVEDHANDLER_12_010: [The event handler shall set VERIFY_PEER authentication mode on the domain of the Transport]\n-        Transport transport = event.getConnection().getTransport();\n-        if (transport != null)\n-        {\n-            if (this.iotHubServiceClientProtocol == IotHubServiceClientProtocol.AMQPS_WS)\n+            //By closing the link locally, proton-j will fire an event onLinkLocalClose. Within ErrorLoggingBaseHandlerWithCleanup,\n+            // onLinkLocalClose closes the session locally and eventually the connection and reactor\n+            if (recv.getLocalState() == EndpointState.ACTIVE)", "originalCommit": "a4b0cd5b39d3216ed0ef3a20d55a58468d369c09", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0NTYzMA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r385445630", "bodyText": "it might be worth print the queue size or something as well", "author": "abhipsaMisra", "createdAt": "2020-02-28T00:20:55Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/transport/amqps/AmqpFileUploadNotificationReceive.java", "diffHunk": "@@ -89,8 +67,9 @@ public synchronized void close()\n     {\n         // Codes_SRS_SERVICE_SDK_JAVA_AMQPFILEUPLOADNOTIFICATIONRECEIVE_25_004: [The function shall invalidate the member AmqpsReceiveHandler object]\n         amqpReceiveHandler = null;\n-        if ( fileUploadNotificationQueue!= null && !fileUploadNotificationQueue.isEmpty())\n+        if ( fileUploadNotificationQueue != null && !fileUploadNotificationQueue.isEmpty())\n         {\n+            log.warn(\"Close was called while the file upload notification queue was not empty, clearing the file upload notification queue\");", "originalCommit": "a4b0cd5b39d3216ed0ef3a20d55a58468d369c09", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0ODI2NQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r385448265", "bodyText": "savedException is set only in makeDomain; what happens if onConnectionInit or onLinkInit throws an exception? would that call onTransportError?should we also set savedException in there?", "author": "abhipsaMisra", "createdAt": "2020-02-28T00:30:23Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/transport/amqps/AmqpConnectionHandler.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ *  Copyright (c) Microsoft. All rights reserved.\n+ *  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+ */\n+\n+package com.microsoft.azure.sdk.iot.service.transport.amqps;\n+\n+import com.microsoft.azure.sdk.iot.deps.auth.IotHubSSLContext;\n+import com.microsoft.azure.sdk.iot.deps.transport.amqp.ErrorLoggingBaseHandlerWithCleanup;\n+import com.microsoft.azure.sdk.iot.deps.ws.impl.WebSocketImpl;\n+import com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol;\n+import com.microsoft.azure.sdk.iot.service.Tools;\n+import org.apache.qpid.proton.Proton;\n+import org.apache.qpid.proton.engine.*;\n+import org.apache.qpid.proton.engine.impl.TransportInternal;\n+\n+import java.io.IOException;\n+\n+public class AmqpConnectionHandler extends ErrorLoggingBaseHandlerWithCleanup\n+{\n+    public static final String WEBSOCKET_PATH = \"/$iothub/websocket\";\n+    public static final String WEBSOCKET_SUB_PROTOCOL = \"AMQPWSB10\";\n+    public static final String AMQPS_PORT = \":5671\";\n+    public static final String AMQPS_WS_PORT = \":443\";\n+\n+    protected Exception savedException;\n+    protected boolean connectionOpenedRemotely;\n+    protected boolean sessionOpenedRemotely;\n+    protected boolean linkOpenedRemotely;\n+\n+    protected final String hostName;\n+    protected final String userName;\n+    protected final String sasToken;\n+    protected final IotHubServiceClientProtocol iotHubServiceClientProtocol;\n+    protected final String webSocketHostName;\n+\n+    protected AmqpConnectionHandler(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol)\n+    {\n+        if (Tools.isNullOrEmpty(hostName))\n+        {\n+            throw new IllegalArgumentException(\"hostName can not be null or empty\");\n+        }\n+        if (Tools.isNullOrEmpty(userName))\n+        {\n+            throw new IllegalArgumentException(\"userName can not be null or empty\");\n+        }\n+        if (Tools.isNullOrEmpty(sasToken))\n+        {\n+            throw new IllegalArgumentException(\"sasToken can not be null or empty\");\n+        }\n+\n+        if (iotHubServiceClientProtocol == null)\n+        {\n+            throw new IllegalArgumentException(\"iotHubServiceClientProtocol cannot be null\");\n+        }\n+\n+        this.savedException = null;\n+        this.connectionOpenedRemotely = false;\n+        this.sessionOpenedRemotely = false;\n+        this.linkOpenedRemotely = false;\n+\n+        this.iotHubServiceClientProtocol = iotHubServiceClientProtocol;\n+        this.webSocketHostName = hostName;\n+        if (this.iotHubServiceClientProtocol == IotHubServiceClientProtocol.AMQPS_WS)\n+        {\n+            this.hostName = hostName + AMQPS_WS_PORT;\n+        }\n+        else\n+        {\n+            this.hostName = hostName + AMQPS_PORT;\n+        }\n+\n+        this.userName = userName;\n+        this.sasToken = sasToken;\n+    }\n+\n+    @Override\n+    public void onReactorInit(Event event)\n+    {\n+        event.getReactor().connection(this);\n+    }\n+\n+    /**\n+     * Event handler for the connection bound event\n+     * @param event The proton event object\n+     */\n+    @Override\n+    public void onConnectionBound(Event event)\n+    {\n+        Transport transport = event.getConnection().getTransport();\n+        if (transport != null)\n+        {\n+            if (this.iotHubServiceClientProtocol == IotHubServiceClientProtocol.AMQPS_WS)\n+            {\n+                WebSocketImpl webSocket = new WebSocketImpl();\n+                webSocket.configure(this.webSocketHostName, WEBSOCKET_PATH, 0, WEBSOCKET_SUB_PROTOCOL, null, null);\n+                ((TransportInternal)transport).addTransportLayer(webSocket);\n+            }\n+            Sasl sasl = transport.sasl();\n+            sasl.plain(this.userName, this.sasToken);\n+\n+            SslDomain domain = makeDomain(SslDomain.Mode.CLIENT);\n+            domain.setPeerAuthentication(SslDomain.VerifyMode.VERIFY_PEER);\n+            Ssl ssl = transport.ssl(domain);\n+        }\n+    }\n+\n+    @Override\n+    public void onLinkRemoteOpen(Event event)\n+    {\n+        super.onLinkRemoteOpen(event);\n+        this.linkOpenedRemotely = true;\n+    }\n+\n+    @Override\n+    public void onSessionRemoteOpen(Event event)\n+    {\n+        super.onSessionRemoteOpen(event);\n+        this.sessionOpenedRemotely = true;\n+    }\n+\n+    @Override\n+    public void onConnectionRemoteOpen(Event event)\n+    {\n+        super.onConnectionRemoteOpen(event);\n+        this.connectionOpenedRemotely = true;\n+    }\n+\n+    /**\n+     * If an exception was encountered while opening the AMQP connection, this function shall throw that saved exception\n+     * @throws IOException if an exception was encountered while openinging the AMQP connection. The encountered\n+     * exception will be the inner exception\n+     */\n+    protected void verifyConnectionWasOpened() throws IOException\n+    {\n+        if (this.protonJExceptionParser != null)\n+        {\n+            throw new IOException(\"Encountered exception during amqp connection: \" + protonJExceptionParser.getError() + \" with description \" + protonJExceptionParser.getErrorDescription());\n+        }\n+\n+        if (this.savedException != null)", "originalCommit": "a4b0cd5b39d3216ed0ef3a20d55a58468d369c09", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3OTEyMw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r385479123", "bodyText": "this is not required", "author": "abhipsaMisra", "createdAt": "2020-02-28T02:31:01Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/transport/amqps/ReactorRunner.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ *  Copyright (c) Microsoft. All rights reserved.\n+ *  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+ */\n+\n+package com.microsoft.azure.sdk.iot.service.transport.amqps;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.qpid.proton.Proton;\n+import org.apache.qpid.proton.engine.BaseHandler;\n+import org.apache.qpid.proton.engine.HandlerException;\n+import org.apache.qpid.proton.reactor.Reactor;\n+\n+import java.io.IOException;\n+\n+@Slf4j\n+public class ReactorRunner\n+{\n+    private final static String THREAD_NAME_PREFIX = \"azure-iot-sdk-ReactorRunner-\";\n+    private final String threadName;\n+    private final Reactor reactor;\n+    public static final int REACTOR_TIMEOUT = 3141; // reactor timeout in milliseconds\n+    public static final int CLOSE_REACTOR_GRACEFULLY_TIMEOUT = 10 * 1000;\n+\n+    public ReactorRunner(BaseHandler baseHandler, String threadNamePostfix) throws IOException\n+    {\n+        this.reactor = Proton.reactor(baseHandler);\n+        this.threadName = THREAD_NAME_PREFIX + threadNamePostfix;\n+    }\n+\n+    public void run(long timeoutMs)\n+    {\n+        Thread.currentThread().setName(this.threadName);\n+\n+        try\n+        {\n+            log.trace(\"Starting reactor thread {}\", this.threadName);\n+            this.reactor.setTimeout(REACTOR_TIMEOUT);\n+\n+            long startTime = System.currentTimeMillis();\n+            long endTime = startTime + timeoutMs;\n+\n+            this.reactor.start();\n+            while (this.reactor.process())\n+            {\n+                if (System.currentTimeMillis() > endTime) break;\n+            }\n+\n+            // onTimerTask event will fire immediately in the basehandler being run. It is the responsibility of that handler\n+            // to close it's link/session/connection and stop this reactor. This runner will allow some time for the amqp connection\n+            // to be closed gracefully, but will forcefully free the resources if the graceful close takes too long\n+            log.trace(\"Scheduling shutdown event for reactor for thread {}\", threadName);\n+            this.reactor.schedule(0, this.reactor.getHandler());\n+\n+            startTime = System.currentTimeMillis();\n+            while (this.reactor.process())\n+            {\n+                if (System.currentTimeMillis() - startTime > CLOSE_REACTOR_GRACEFULLY_TIMEOUT)\n+                {\n+                    // The connection/session/link may not have been closed from the service's perspective, but we can free up the socket at least\n+                    log.trace(\"Amqp reactor in thread {} failed to close gracefully in expected time frame, forcefully closing it now\", this.threadName);\n+                    break;\n+                }\n+            }\n+            this.reactor.process();", "originalCommit": "a4b0cd5b39d3216ed0ef3a20d55a58468d369c09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg3MjY5OA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r385872698", "bodyText": "Removed", "author": "timtay-microsoft", "createdAt": "2020-02-28T19:11:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3OTEyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ4MzIzNQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r385483235", "bodyText": "q - For receiver handlers, we close the local link -> session -> connection as soon as we receive an event. local connection closure stops the reactor from running, and then process() returns false and we exit. We can then free up the reactor thread.\nShouldn't the onTimerTask be optional then? It should be called only if the link/session/connection is still open.", "author": "abhipsaMisra", "createdAt": "2020-02-28T02:49:52Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/transport/amqps/ReactorRunner.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ *  Copyright (c) Microsoft. All rights reserved.\n+ *  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+ */\n+\n+package com.microsoft.azure.sdk.iot.service.transport.amqps;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.qpid.proton.Proton;\n+import org.apache.qpid.proton.engine.BaseHandler;\n+import org.apache.qpid.proton.engine.HandlerException;\n+import org.apache.qpid.proton.reactor.Reactor;\n+\n+import java.io.IOException;\n+\n+@Slf4j\n+public class ReactorRunner\n+{\n+    private final static String THREAD_NAME_PREFIX = \"azure-iot-sdk-ReactorRunner-\";\n+    private final String threadName;\n+    private final Reactor reactor;\n+    public static final int REACTOR_TIMEOUT = 3141; // reactor timeout in milliseconds\n+    public static final int CLOSE_REACTOR_GRACEFULLY_TIMEOUT = 10 * 1000;\n+\n+    public ReactorRunner(BaseHandler baseHandler, String threadNamePostfix) throws IOException\n+    {\n+        this.reactor = Proton.reactor(baseHandler);\n+        this.threadName = THREAD_NAME_PREFIX + threadNamePostfix;\n+    }\n+\n+    public void run(long timeoutMs)\n+    {\n+        Thread.currentThread().setName(this.threadName);\n+\n+        try\n+        {\n+            log.trace(\"Starting reactor thread {}\", this.threadName);\n+            this.reactor.setTimeout(REACTOR_TIMEOUT);\n+\n+            long startTime = System.currentTimeMillis();\n+            long endTime = startTime + timeoutMs;\n+\n+            this.reactor.start();\n+            while (this.reactor.process())\n+            {\n+                if (System.currentTimeMillis() > endTime) break;\n+            }\n+\n+            // onTimerTask event will fire immediately in the basehandler being run. It is the responsibility of that handler\n+            // to close it's link/session/connection and stop this reactor. This runner will allow some time for the amqp connection\n+            // to be closed gracefully, but will forcefully free the resources if the graceful close takes too long\n+            log.trace(\"Scheduling shutdown event for reactor for thread {}\", threadName);\n+            this.reactor.schedule(0, this.reactor.getHandler());\n+\n+            startTime = System.currentTimeMillis();\n+            while (this.reactor.process())", "originalCommit": "a4b0cd5b39d3216ed0ef3a20d55a58468d369c09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg3Mjk4MA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/713#discussion_r385872980", "bodyText": "You are right. If the reactor closes itself after receiving a message, there is no need to do the timerTask. I'll edit this", "author": "timtay-microsoft", "createdAt": "2020-02-28T19:11:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ4MzIzNQ=="}], "type": "inlineReview"}, {"oid": "c254e2f2dc496ed4a7491866b34124f81de87811", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/c254e2f2dc496ed4a7491866b34124f81de87811", "message": "refactor(deps, iot-service): Refactor amqp service client implementation\n\n-Add substantial logging to service client operations over amqp including happy path and error path\n-Abstract some common amqp logic from each of file upload notification receiver, feedback message receiver, and cloud to device sender", "committedDate": "2020-02-28T19:20:45Z", "type": "commit"}, {"oid": "7663abd273dd27bf1f77a959c1a01cbd3288217c", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/7663abd273dd27bf1f77a959c1a01cbd3288217c", "message": "Address cr comments", "committedDate": "2020-02-28T19:20:45Z", "type": "commit"}, {"oid": "f220b062388e431b948a8fe2770963ce1c01256f", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/f220b062388e431b948a8fe2770963ce1c01256f", "message": "address cr comments", "committedDate": "2020-02-28T19:20:45Z", "type": "commit"}, {"oid": "f220b062388e431b948a8fe2770963ce1c01256f", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/f220b062388e431b948a8fe2770963ce1c01256f", "message": "address cr comments", "committedDate": "2020-02-28T19:20:45Z", "type": "forcePushed"}]}