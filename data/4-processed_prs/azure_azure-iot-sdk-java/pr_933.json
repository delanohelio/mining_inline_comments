{"pr_number": 933, "pr_title": "Adding support for BasicDigitalTwin", "pr_createdAt": "2020-09-24T23:10:39Z", "pr_url": "https://github.com/Azure/azure-iot-sdk-java/pull/933", "timeline": [{"oid": "71e6880c57ee3678e30d8f81c68e840ed1f25acd", "url": "https://github.com/Azure/azure-iot-sdk-java/commit/71e6880c57ee3678e30d8f81c68e840ed1f25acd", "message": "Adding support for BasicDigitalTwin", "committedDate": "2020-09-24T23:04:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY2MDk0OA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/933#discussion_r494660948", "bodyText": "conform?", "author": "bikamani", "createdAt": "2020-09-24T23:16:31Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/models/BasicDigitalTwin.java", "diffHunk": "@@ -0,0 +1,84 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.models;\n+\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * An optional, helper class for deserializing a digital twin.\n+ * Only properties with non-null values are included.\n+ */\n+public final class BasicDigitalTwin {\n+    @JsonProperty(value = \"$dtId\", required = true)\n+    private String id;\n+\n+    @JsonProperty(value = \"$metadata\", required = true)\n+    private DigitalTwinMetadata metadata;\n+\n+    @JsonIgnore\n+    private final Map<String, Object> customProperties = new HashMap<>();\n+\n+    /**\n+     * Gets the unique Id of the digital twin in a digital twins instance. This field is present on every digital twin.\n+     * @return The unique Id of the digital twin in a digital twins instance. This field is present on every digital twin.\n+     */\n+    public String getId() {\n+        return id;\n+    }\n+\n+    /**\n+     * Sets the unique Id of the digital twin in a digital twins instance. This field is present on every digital twin.\n+     * @param id The unique Id of the digital twin in a digital twins instance. This field is present on every digital twin.\n+     * @return The BasicDigitalTwin object itself.\n+     */\n+    private BasicDigitalTwin setId(String id) {\n+        this.id =id;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the information about the model a digital twin conforms to. This field is present on every digital twin.\n+     * @return The information about the model a digital twin conforms to. This field is present on every digital twin.\n+     */\n+    public DigitalTwinMetadata getMetadata() {\n+        return metadata;\n+    }\n+\n+    /**\n+     * Sets the information about the model a digital twin conforms to. This field is present on every digital twin.\n+     * @param metadata The information about the model a digital twin conforms to. This field is present on every digital twin.", "originalCommit": "71e6880c57ee3678e30d8f81c68e840ed1f25acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY2Mjg0NQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/933#discussion_r494662845", "bodyText": "Conforms (with an s) is grammatically correct.", "author": "drwill-ms", "createdAt": "2020-09-24T23:22:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY2MDk0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY2Mzc2OA==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/933#discussion_r494663768", "bodyText": "copyright", "author": "bikamani", "createdAt": "2020-09-24T23:25:35Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/models/DigitalTwinMetadata.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.models;", "originalCommit": "71e6880c57ee3678e30d8f81c68e840ed1f25acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3MDI0Nw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/933#discussion_r494670247", "bodyText": "Fixed in next PR.", "author": "vinagesh", "createdAt": "2020-09-24T23:47:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY2Mzc2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY2NDE4Mg==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/933#discussion_r494664182", "bodyText": "This and other classes should be in helper directory now that I think more about it.", "author": "bikamani", "createdAt": "2020-09-24T23:27:02Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/models/DigitalTwinMetadata.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.models;\n+\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;", "originalCommit": "71e6880c57ee3678e30d8f81c68e840ed1f25acd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3MTAzNw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/933#discussion_r494671037", "bodyText": "we should check if other models in our repo are fluent, if not, then these shouldn't have fluent setters either. We'd need to be consistent across this library.", "author": "abhipsaMisra", "createdAt": "2020-09-24T23:50:15Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/models/BasicDigitalTwin.java", "diffHunk": "@@ -0,0 +1,84 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.models;\n+\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * An optional, helper class for deserializing a digital twin.\n+ * Only properties with non-null values are included.\n+ */\n+public final class BasicDigitalTwin {\n+    @JsonProperty(value = \"$dtId\", required = true)\n+    private String id;\n+\n+    @JsonProperty(value = \"$metadata\", required = true)\n+    private DigitalTwinMetadata metadata;\n+\n+    @JsonIgnore\n+    private final Map<String, Object> customProperties = new HashMap<>();\n+\n+    /**\n+     * Gets the unique Id of the digital twin in a digital twins instance. This field is present on every digital twin.\n+     * @return The unique Id of the digital twin in a digital twins instance. This field is present on every digital twin.\n+     */\n+    public String getId() {\n+        return id;\n+    }\n+\n+    /**\n+     * Sets the unique Id of the digital twin in a digital twins instance. This field is present on every digital twin.\n+     * @param id The unique Id of the digital twin in a digital twins instance. This field is present on every digital twin.\n+     * @return The BasicDigitalTwin object itself.\n+     */\n+    private BasicDigitalTwin setId(String id) {\n+        this.id =id;\n+        return this;", "originalCommit": "71e6880c57ee3678e30d8f81c68e840ed1f25acd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3MTQ4Nw==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/933#discussion_r494671487", "bodyText": "public class is missing xml comments", "author": "abhipsaMisra", "createdAt": "2020-09-24T23:51:59Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/models/DigitalTwinCommandResponse.java", "diffHunk": "@@ -5,7 +5,7 @@\n import lombok.Getter;\n import lombok.Setter;\n \n-public class DigitalTwinCommandResponse {\n+public final class DigitalTwinCommandResponse {\n     @Getter\n     @Setter\n     Integer status;", "originalCommit": "71e6880c57ee3678e30d8f81c68e840ed1f25acd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3MTU4MQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/933#discussion_r494671581", "bodyText": "copyright", "author": "abhipsaMisra", "createdAt": "2020-09-24T23:52:20Z", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/models/DigitalTwinMetadata.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.models;", "originalCommit": "71e6880c57ee3678e30d8f81c68e840ed1f25acd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3MTc1OQ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/933#discussion_r494671759", "bodyText": "nit: this could take in a generic json object", "author": "abhipsaMisra", "createdAt": "2020-09-24T23:53:06Z", "path": "service/iot-service-samples/digitaltwin-service-samples/thermostat-service-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/Thermostat.java", "diffHunk": "@@ -103,7 +104,13 @@ private static void InvokeMethodOnRootLevel()\n \n         // Invoke a method on root level.\n         DigitalTwinCommandResponse response = client.invokeCommand(digitalTwinid, commandName, commandInput);\n-        System.out.println(\"Invoked Command \" + commandName + \" response: \" + response.getPayload());\n+        System.out.println(\"Invoked Command \" + commandName + \" response: \" + prettyString(response.getPayload()));\n+    }\n+\n+    private static String prettyBasicDigitalTwin(BasicDigitalTwin basicDigitalTwin)", "originalCommit": "71e6880c57ee3678e30d8f81c68e840ed1f25acd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}