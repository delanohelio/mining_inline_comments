{"pr_number": 651, "pr_title": "PLANNER-1684 Implement the remaining bi grouping operations", "pr_createdAt": "2020-01-07T15:19:45Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/651", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMDQ3MA==", "url": "https://github.com/kiegroup/optaplanner/pull/651#discussion_r363800470", "bodyText": "\"the value\" is too broad. Everything's a value. Can we be more specific?\nCan we do something like this?\nThe first fact is the return value of the first group key mapping function, applied on the incoming tuple.\nThe second fact is the result value of ...", "author": "ge0ffrey", "createdAt": "2020-01-07T15:23:44Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/score/stream/bi/BiConstraintStream.java", "diffHunk": "@@ -209,19 +209,36 @@\n      */\n     <GroupKey_> UniConstraintStream<GroupKey_> groupBy(BiFunction<A, B, GroupKey_> groupKeyMapping);\n \n-    /*\n-    // TODO implement this\n+    /**\n+     * Convert the {@link BiConstraintStream} to a different {@link BiConstraintStream}, consisting of unique tuples.\n+     * <p>\n+     * The first fact is the value resulting from applying the group key mapping function on the original tuple.\n+     * The second fact is the value of applying a given {@link BiConstraintCollector} on all the tuples with the same", "originalCommit": "9bc5e1edb62f8054db54a3b9839a3d7e022f33d6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMTI2NA==", "url": "https://github.com/kiegroup/optaplanner/pull/651#discussion_r363801264", "bodyText": "If Drools supports these, don't we want to put the UnsupportedOperationException throwing in the Bavet impl?", "author": "ge0ffrey", "createdAt": "2020-01-07T15:25:11Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/bavet/bi/BavetAbstractBiConstraintStream.java", "diffHunk": "@@ -111,6 +113,19 @@ protected void addChildStream(BavetAbstractBiConstraintStream<Solution_, A, B> c\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n+    public <GroupKey_, ResultContainer_, Result_> BiConstraintStream<GroupKey_, Result_> groupBy(\n+            BiFunction<A, B, GroupKey_> groupKeyMapping,\n+            BiConstraintCollector<A, B, ResultContainer_, Result_> collector) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public <GroupKeyA_, GroupKeyB_> BiConstraintStream<GroupKeyA_, GroupKeyB_> groupBy(\n+            BiFunction<A, B, GroupKeyA_> groupKeyAMapping, BiFunction<A, B, GroupKeyB_> groupKeyBMapping) {\n+        throw new UnsupportedOperationException();", "originalCommit": "9bc5e1edb62f8054db54a3b9839a3d7e022f33d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMTY0NQ==", "url": "https://github.com/kiegroup/optaplanner/pull/651#discussion_r363801645", "bodyText": "Not sure what you mean. It is in Bavet impl.", "author": "triceo", "createdAt": "2020-01-07T15:25:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMTI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwNTQ3Mg==", "url": "https://github.com/kiegroup/optaplanner/pull/651#discussion_r363805472", "bodyText": "Good point :)", "author": "ge0ffrey", "createdAt": "2020-01-07T15:33:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMTI2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMjIyNQ==", "url": "https://github.com/kiegroup/optaplanner/pull/651#discussion_r363802225", "bodyText": "nitpick code consistently: when optaplanner code captures the return value of map.put() or list.add(), it's typically called old*, not previous*. => Runnable oldUndo.", "author": "ge0ffrey", "createdAt": "2020-01-07T15:26:57Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/bi/DroolsBiGroupBy.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.drools.bi;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+\n+import org.drools.core.common.InternalFactHandle;\n+import org.optaplanner.core.api.score.stream.bi.BiConstraintCollector;\n+import org.optaplanner.core.impl.score.stream.drools.common.BiTuple;\n+\n+final class DroolsBiGroupBy<A, B, ResultContainer, NewA, NewB> implements Serializable {\n+\n+    private static final long serialVersionUID = 510l;\n+    private final Map<Long, Runnable> undoMap = new HashMap<>(0);\n+    private final BiFunction<A, B, NewA> groupKeyMapping;\n+    private final BiConstraintCollector<A, B, ResultContainer, NewB> collector;\n+    private DroolsBiGroupByAccumulator<A, B, ResultContainer, NewA, NewB> acc;\n+\n+    public DroolsBiGroupBy(BiFunction<A, B, NewA> groupKeyMapping,\n+            BiConstraintCollector<A, B, ResultContainer, NewB> collector) {\n+        this.groupKeyMapping = groupKeyMapping;\n+        this.collector = collector;\n+    }\n+\n+    public void init() {\n+        acc = new DroolsBiGroupByAccumulator<>(groupKeyMapping, collector);\n+        undoMap.clear();\n+    }\n+\n+    public void accumulate(InternalFactHandle handle, A a, B b) {\n+        Runnable undo = acc.accumulate(a, b);\n+        Runnable previousUndo = this.undoMap.put(handle.getId(), undo);", "originalCommit": "9bc5e1edb62f8054db54a3b9839a3d7e022f33d6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgwMjg4MA==", "url": "https://github.com/kiegroup/optaplanner/pull/651#discussion_r363802880", "bodyText": "code style: map variable should end with Map.\ncontainers -> containerMap", "author": "ge0ffrey", "createdAt": "2020-01-07T15:28:13Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/drools/bi/DroolsBiGroupByAccumulator.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.score.stream.drools.bi;\n+\n+import java.io.Serializable;\n+import java.util.IdentityHashMap;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.optaplanner.core.api.function.TriFunction;\n+import org.optaplanner.core.api.score.stream.bi.BiConstraintCollector;\n+import org.optaplanner.core.impl.score.stream.drools.common.BiTuple;\n+\n+final class DroolsBiGroupByAccumulator<A, B, ResultContainer, NewA, NewB> implements Serializable {\n+\n+    // Containers may be identical in type and contents, yet they should still not count as the same container.\n+    private final Map<ResultContainer, Long> containersInUse = new IdentityHashMap<>(0);\n+    // LinkedHashMap to maintain a consistent iteration order of resulting pairs.\n+    private final Map<NewA, ResultContainer> containers = new LinkedHashMap<>(0);", "originalCommit": "9bc5e1edb62f8054db54a3b9839a3d7e022f33d6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "02e8de11447d6920a9881f19acef8f93dc54cf49", "url": "https://github.com/kiegroup/optaplanner/commit/02e8de11447d6920a9881f19acef8f93dc54cf49", "message": "GroupBy invoker gets renamed to Uni...", "committedDate": "2020-01-07T18:10:00Z", "type": "commit"}, {"oid": "ef1d86d2de2463873180dd502c641461208b66d7", "url": "https://github.com/kiegroup/optaplanner/commit/ef1d86d2de2463873180dd502c641461208b66d7", "message": "Implement a second groupBy()", "committedDate": "2020-01-07T18:10:00Z", "type": "commit"}, {"oid": "c352894f546c074ce6a7e8eb900f52fad18af813", "url": "https://github.com/kiegroup/optaplanner/commit/c352894f546c074ce6a7e8eb900f52fad18af813", "message": "Implement a final bi groupBy()", "committedDate": "2020-01-07T18:10:00Z", "type": "commit"}, {"oid": "be5513f55d1b21c59d158cefc2ebbf74f3f6805e", "url": "https://github.com/kiegroup/optaplanner/commit/be5513f55d1b21c59d158cefc2ebbf74f3f6805e", "message": "Add a forgotten operation", "committedDate": "2020-01-07T18:10:01Z", "type": "commit"}, {"oid": "7ab31d885dd7a987d76be7e10b35ed08ac0c9588", "url": "https://github.com/kiegroup/optaplanner/commit/7ab31d885dd7a987d76be7e10b35ed08ac0c9588", "message": "Resolve code review comments", "committedDate": "2020-01-07T18:10:01Z", "type": "commit"}, {"oid": "045a5fe8ae9a23bb541fcab37c607a65a18ad884", "url": "https://github.com/kiegroup/optaplanner/commit/045a5fe8ae9a23bb541fcab37c607a65a18ad884", "message": "Revapi fix", "committedDate": "2020-01-07T18:17:01Z", "type": "commit"}, {"oid": "045a5fe8ae9a23bb541fcab37c607a65a18ad884", "url": "https://github.com/kiegroup/optaplanner/commit/045a5fe8ae9a23bb541fcab37c607a65a18ad884", "message": "Revapi fix", "committedDate": "2020-01-07T18:17:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg4Mjg4Ng==", "url": "https://github.com/kiegroup/optaplanner/pull/651#discussion_r363882886", "bodyText": "@ge0ffrey It appears to me that these Revapi changes make no sense.\nThis one complains I changed something about TriStreams. I reviewed the history for both this PR and the previous (merged) PR and there is nothing that does anything with TriStreams.\nDo you have any idea of what this could mean? Something I'm missing?", "author": "triceo", "createdAt": "2020-01-07T18:19:23Z", "path": "optaplanner-core/src/build/revapi-config.json", "diffHunk": "@@ -224,6 +224,70 @@\n           \"elementKind\": \"method\",\n           \"justification\": \"Introduced QuadStreams\"\n         },\n+        {\n+          \"code\": \"java.method.numberOfParametersChanged\",\n+          \"old\": \"method <GroupKeyA_, GroupKeyB_, ResultContainer_, Result_> org.optaplanner.core.api.score.stream.tri.TriConstraintStream<GroupKeyA_, GroupKeyB_, Result_> org.optaplanner.core.api.score.stream.bi.BiConstraintStream<A, B>::groupBy(java.util.function.BiFunction<A, B, GroupKeyA_>, java.util.function.BiFunction<A, B, GroupKeyB_>, org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A, B, ResultContainer_, Result_>)\",\n+          \"new\": \"method <GroupKey_, ResultContainer_, Result_> org.optaplanner.core.api.score.stream.bi.BiConstraintStream<GroupKey_, Result_> org.optaplanner.core.api.score.stream.bi.BiConstraintStream<A, B>::groupBy(java.util.function.BiFunction<A, B, GroupKey_>, org.optaplanner.core.api.score.stream.bi.BiConstraintCollector<A, B, ResultContainer_, Result_>)\",", "originalCommit": "045a5fe8ae9a23bb541fcab37c607a65a18ad884", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDExNzg1Nw==", "url": "https://github.com/kiegroup/optaplanner/pull/651#discussion_r364117857", "bodyText": "No, this entire behavior looks strange to me", "author": "ge0ffrey", "createdAt": "2020-01-08T08:47:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg4Mjg4Ng=="}], "type": "inlineReview"}, {"oid": "65836e0ffaa510b5dfc300f09f037300482a28e4", "url": "https://github.com/kiegroup/optaplanner/commit/65836e0ffaa510b5dfc300f09f037300482a28e4", "message": "Fix cloud balancing benchmark", "committedDate": "2020-01-08T08:02:54Z", "type": "commit"}]}