{"pr_number": 967, "pr_title": "PLANNER-2204 Make VariableListener a public API", "pr_createdAt": "2020-10-13T07:37:28Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/967", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMzIzNQ==", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r503733235", "bodyText": "Supply is not a public API, so I removed it. Which forced me to do this:\nhttps://github.com/kiegroup/optaplanner/pull/967/files#diff-1915332f290b70fd6c30cb1b442821c7b9fd64423386942e3e73c817707b5205R77", "author": "triceo", "createdAt": "2020-10-13T07:41:02Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/variable/VariableListener.java", "diffHunk": "@@ -29,8 +28,11 @@\n  * <p>\n  * Each {@link ScoreDirector} has a different {@link VariableListener} instance, so it can be stateful.\n  * If it is stateful, it must implement {@link StatefulVariableListener}.\n+ * <p>\n+ * Implementation note: if/when any new method is added to this interface, make sure that\n+ * {@link SupplyVariableListener} overrides it and delegates to it.\n  */\n-public interface VariableListener<Solution_, Entity_> extends Supply {\n+public interface VariableListener<Solution_, Entity_> {", "originalCommit": "51a4777024dcd3d6648e81aed3b3da392c5fd0aa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMzk5NQ==", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r503733995", "bodyText": "This will make VariableDescriptor leak to public API.\n(It leaked anyway, since people were using StatefulVariableListener anyway. This just makes it more \"official\".)", "author": "triceo", "createdAt": "2020-10-13T07:42:16Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/variable/StatefulVariableListener.java", "diffHunk": "@@ -14,15 +14,19 @@\n  * limitations under the License.\n  */\n \n-package org.optaplanner.core.impl.domain.variable.listener;\n+package org.optaplanner.core.api.domain.variable;\n \n+import org.optaplanner.core.api.domain.variable.VariableListener;\n import org.optaplanner.core.api.score.director.ScoreDirector;\n import org.optaplanner.core.impl.domain.variable.descriptor.VariableDescriptor;\n import org.optaplanner.core.impl.domain.variable.supply.Supply;\n \n /**\n  * A stateful {@link VariableListener},\n  * often used to externalize data for a {@link Supply} from the domain model itself.\n+ * <p>\n+ * Implementation note: if/when any new method is added to this interface, make sure that\n+ * {@link SupplyVariableListener} overrides it and delegates to it.\n  */\n public interface StatefulVariableListener<Solution_, Entity_> extends VariableListener<Solution_, Entity_> {", "originalCommit": "51a4777024dcd3d6648e81aed3b3da392c5fd0aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc1OTY2Mg==", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r503759662", "bodyText": "Are many users using StatefulVariableListener? I don't think so. Let's not move StatefulVariableListener into the api package yet? When in doubt, leave it out?", "author": "ge0ffrey", "createdAt": "2020-10-13T08:22:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMzk5NQ=="}], "type": "inlineReview"}, {"oid": "8040af0d651617c3d16749e8ffd8af2dca2c4cc5", "url": "https://github.com/kiegroup/optaplanner/commit/8040af0d651617c3d16749e8ffd8af2dca2c4cc5", "message": "PLANNER-2204 Make VariableListener a public API", "committedDate": "2020-10-13T07:45:50Z", "type": "forcePushed"}, {"oid": "9db3e27b367c39f0deef2daf29b75fec0e534b9a", "url": "https://github.com/kiegroup/optaplanner/commit/9db3e27b367c39f0deef2daf29b75fec0e534b9a", "message": "PLANNER-2204 Make VariableListener a public API", "committedDate": "2020-10-13T08:20:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2MTIzMw==", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r503761233", "bodyText": "nitpick: Let's cast it once in the constructor instead of every method?", "author": "ge0ffrey", "createdAt": "2020-10-13T08:25:01Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/domain/variable/listener/support/SupplyStatefulVariableListener.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.domain.variable.listener.support;\n+\n+import org.optaplanner.core.api.domain.variable.StatefulVariableListener;\n+import org.optaplanner.core.api.score.director.ScoreDirector;\n+import org.optaplanner.core.impl.domain.variable.descriptor.VariableDescriptor;\n+\n+public class SupplyStatefulVariableListener<Solution_, Entity_> extends SupplyVariableListener<Solution_, Entity_>\n+        implements StatefulVariableListener<Solution_, Entity_> {\n+\n+    public SupplyStatefulVariableListener(StatefulVariableListener<Solution_, Entity_> variableListener) {\n+        super(variableListener);\n+    }\n+\n+    @Override\n+    public VariableDescriptor<Solution_> getSourceVariableDescriptor() {\n+        return ((StatefulVariableListener<Solution_, Entity_>) variableListener).getSourceVariableDescriptor();", "originalCommit": "9db3e27b367c39f0deef2daf29b75fec0e534b9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2MjExMA==", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r503762110", "bodyText": "Naming wise, it seems more sense to call it VariableListenerSupply?", "author": "ge0ffrey", "createdAt": "2020-10-13T08:26:15Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/domain/variable/listener/support/SupplyVariableListener.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.domain.variable.listener.support;\n+\n+import java.util.Objects;\n+\n+import org.optaplanner.core.api.domain.variable.VariableListener;\n+import org.optaplanner.core.api.score.director.ScoreDirector;\n+import org.optaplanner.core.impl.domain.variable.supply.Supply;\n+\n+public class SupplyVariableListener<Solution_, Entity_> implements Supply, VariableListener<Solution_, Entity_> {", "originalCommit": "9db3e27b367c39f0deef2daf29b75fec0e534b9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2Mjc2Nw==", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r503762767", "bodyText": "Thinking aloud: Supply is an empty interface. Is it worth being an interface?", "author": "ge0ffrey", "createdAt": "2020-10-13T08:27:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2MjExMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2MzI4MA==", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r503763280", "bodyText": "Btw I guess this is an Adaptor or Bridge pattern (GoF), so we should probably name it accordingly.", "author": "ge0ffrey", "createdAt": "2020-10-13T08:27:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2MjExMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2Mzc0NQ==", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r503763745", "bodyText": "If we get rid of the Supply interface, we don't need to do this. Not sure if we want to though. (Discuss during meeting)", "author": "ge0ffrey", "createdAt": "2020-10-13T08:28:34Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/domain/variable/listener/support/VariableListenerSupport.java", "diffHunk": "@@ -60,6 +60,21 @@ public VariableListenerSupport(InnerScoreDirector<Solution_, ?> scoreDirector) {\n         supplyMap = new LinkedHashMap<>();\n     }\n \n+    private VariableListener<Solution_, ?>\n+            getVariableListenerAsSupply(ShadowVariableDescriptor<Solution_> shadowVariableDescriptor) {\n+        VariableListener<Solution_, ?> variableListener = shadowVariableDescriptor.buildVariableListener(scoreDirector);\n+        if (variableListener instanceof Supply) {\n+            // Many internal implementations already provide the Supply interface; we need to keep those.\n+            return variableListener;\n+        }\n+        // Otherwise wrap the variable listener to implement Supply.\n+        if (variableListener instanceof StatefulVariableListener) {\n+            return new SupplyStatefulVariableListener<>((StatefulVariableListener<Solution_, ?>) variableListener);\n+        } else {\n+            return new SupplyVariableListener<>(variableListener);\n+        }\n+    }", "originalCommit": "9db3e27b367c39f0deef2daf29b75fec0e534b9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7001df2a69e321f70eaabba09cfd870f251ec246", "url": "https://github.com/kiegroup/optaplanner/commit/7001df2a69e321f70eaabba09cfd870f251ec246", "message": "VariableListener becomes closable", "committedDate": "2020-10-13T13:10:26Z", "type": "commit"}, {"oid": "34b71ac5a3836ab016873865db0ca774203dc071", "url": "https://github.com/kiegroup/optaplanner/commit/34b71ac5a3836ab016873865db0ca774203dc071", "message": "VariableListener becomes optionally stateful", "committedDate": "2020-10-13T13:28:08Z", "type": "commit"}, {"oid": "da142546880a1ea5fd1d05ba84430ce35695d77a", "url": "https://github.com/kiegroup/optaplanner/commit/da142546880a1ea5fd1d05ba84430ce35695d77a", "message": "VariableListener becomes public API", "committedDate": "2020-10-13T13:29:17Z", "type": "commit"}, {"oid": "f1efa923114f911cd58d02d04261f89b70314ee3", "url": "https://github.com/kiegroup/optaplanner/commit/f1efa923114f911cd58d02d04261f89b70314ee3", "message": "VariableListenerAdapter is removed", "committedDate": "2020-10-13T13:44:47Z", "type": "commit"}, {"oid": "a65c718c82be454132ebbc468a91dceb99fa4f70", "url": "https://github.com/kiegroup/optaplanner/commit/a65c718c82be454132ebbc468a91dceb99fa4f70", "message": "Fix CI", "committedDate": "2020-10-13T13:50:33Z", "type": "commit"}, {"oid": "6bc4c1b4f6e1d0b1b6e44c88f773ff5c48668108", "url": "https://github.com/kiegroup/optaplanner/commit/6bc4c1b4f6e1d0b1b6e44c88f773ff5c48668108", "message": "Update docs", "committedDate": "2020-10-13T13:54:55Z", "type": "commit"}, {"oid": "6bc4c1b4f6e1d0b1b6e44c88f773ff5c48668108", "url": "https://github.com/kiegroup/optaplanner/commit/6bc4c1b4f6e1d0b1b6e44c88f773ff5c48668108", "message": "Update docs", "committedDate": "2020-10-13T13:54:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA4NzUzOQ==", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r504087539", "bodyText": "Not AutoClosable, as I don't intend this API to be used in try (...). It makes no sense.", "author": "triceo", "createdAt": "2020-10-13T16:22:14Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/variable/VariableListener.java", "diffHunk": "@@ -27,10 +30,14 @@\n  * It can change its shadow variable(s) on multiple entity instances\n  * (for example: an arrivalTime change affects all trailing entities too).\n  * <p>\n- * Each {@link ScoreDirector} has a different {@link VariableListener} instance, so it can be stateful.\n- * If it is stateful, it must implement {@link StatefulVariableListener}.\n+ * It is recommended that implementations be kept stateless.\n+ * If state must be implemented, implementations may need to override the default methods\n+ * ({@link #resetWorkingSolution(ScoreDirector)}, {@link #close()}).\n+ *\n+ * @param <Solution_> @{@link PlanningSolution} holding the @{@link PlanningEntity} on which the variable is declared\n+ * @param <Entity_> @{@link PlanningEntity} on which the variable is declared\n  */\n-public interface VariableListener<Solution_, Entity_> extends Supply {\n+public interface VariableListener<Solution_, Entity_> extends Closeable {", "originalCommit": "6bc4c1b4f6e1d0b1b6e44c88f773ff5c48668108", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI4NTUyOQ==", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r505285529", "bodyText": "+1 good idea - this indeed belongs next to the CustomVariable annotation", "author": "ge0ffrey", "createdAt": "2020-10-15T07:46:20Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/variable/VariableListener.java", "diffHunk": "@@ -14,10 +14,13 @@\n  * limitations under the License.\n  */\n \n-package org.optaplanner.core.impl.domain.variable.listener;\n+package org.optaplanner.core.api.domain.variable;", "originalCommit": "6bc4c1b4f6e1d0b1b6e44c88f773ff5c48668108", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI4ODQ2OA==", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r505288468", "bodyText": "This \"the PlanningEntity\" kinda implies there there is only one planning entity class and only one planning entity.\nAlso, I suggest we standarize the javadoc sentence for this generic parameter across all javadocs. Most use this sentence (that we might want to improve):\n* @param <Solution_> the solution type, the class with the {@link PlanningSolution} annotation", "author": "ge0ffrey", "createdAt": "2020-10-15T07:49:24Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/variable/VariableListener.java", "diffHunk": "@@ -27,10 +30,14 @@\n  * It can change its shadow variable(s) on multiple entity instances\n  * (for example: an arrivalTime change affects all trailing entities too).\n  * <p>\n- * Each {@link ScoreDirector} has a different {@link VariableListener} instance, so it can be stateful.\n- * If it is stateful, it must implement {@link StatefulVariableListener}.\n+ * It is recommended that implementations be kept stateless.\n+ * If state must be implemented, implementations may need to override the default methods\n+ * ({@link #resetWorkingSolution(ScoreDirector)}, {@link #close()}).\n+ *\n+ * @param <Solution_> @{@link PlanningSolution} holding the @{@link PlanningEntity} on which the variable is declared", "originalCommit": "6bc4c1b4f6e1d0b1b6e44c88f773ff5c48668108", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwMjc5NQ==", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r505302795", "bodyText": "This should specify if beforeEntityAdded(), afterEnityAdded() and/or beforeEntityRemoved()/afterEntityRemoved() are called too in such an event on the new entities and the old entities.\nI don't recall if they actually are or aren't.", "author": "ge0ffrey", "createdAt": "2020-10-15T08:00:41Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/api/domain/variable/VariableListener.java", "diffHunk": "@@ -79,4 +86,21 @@ default boolean requiresUniqueEntityEvents() {\n      */\n     void afterEntityRemoved(ScoreDirector<Solution_> scoreDirector, Entity_ entity);\n \n+    /**\n+     * Called when the entire working solution changes.\n+     * At this point, implementations should clear state, if any.\n+     * ", "originalCommit": "6bc4c1b4f6e1d0b1b6e44c88f773ff5c48668108", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwNDYzNg==", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r505304636", "bodyText": "upgrade recipe of course", "author": "ge0ffrey", "createdAt": "2020-10-15T08:02:01Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/domain/variable/listener/VariableListenerAdapter.java", "diffHunk": "@@ -1,53 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.optaplanner.core.impl.domain.variable.listener;\n-\n-import org.optaplanner.core.api.score.director.ScoreDirector;\n-\n-public abstract class VariableListenerAdapter<Solution_, Entity_> implements VariableListener<Solution_, Entity_> {", "originalCommit": "6bc4c1b4f6e1d0b1b6e44c88f773ff5c48668108", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwODc1Mg==", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r505308752", "bodyText": "It's wierd that this doesn't trigger a fail-fast because it's not a concrete class it can instantiate. We probably want such a fail fast (can be separate issue)?\nFor this reason, we might want to keep VariableListenerAdapter in src/test/java as DummyVariableListener", "author": "ge0ffrey", "createdAt": "2020-10-15T08:05:10Z", "path": "optaplanner-core/src/test/java/org/optaplanner/core/impl/testdata/domain/shadow/cyclic/TestdataSevenNonCyclicShadowedEntity.java", "diffHunk": "@@ -73,7 +73,7 @@ public void setValue(TestdataValue value) {\n         this.value = value;\n     }\n \n-    @CustomShadowVariable(variableListenerClass = VariableListenerAdapter.class, sources = {\n+    @CustomShadowVariable(variableListenerClass = VariableListener.class, sources = {", "originalCommit": "6bc4c1b4f6e1d0b1b6e44c88f773ff5c48668108", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMxNDM5OQ==", "url": "https://github.com/kiegroup/optaplanner/pull/967#discussion_r505314399", "bodyText": "VariableListenerAdapter used to be abstract, so there's no direct instances of that either. Status quo does not change.", "author": "triceo", "createdAt": "2020-10-15T08:10:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwODc1Mg=="}], "type": "inlineReview"}, {"oid": "83b410587d9d1274d50b5a76de10e3742161a51f", "url": "https://github.com/kiegroup/optaplanner/commit/83b410587d9d1274d50b5a76de10e3742161a51f", "message": "Code review", "committedDate": "2020-10-15T08:19:17Z", "type": "commit"}, {"oid": "5d8e73e6f089cccb9208dc3bbeb22a931e7cdfab", "url": "https://github.com/kiegroup/optaplanner/commit/5d8e73e6f089cccb9208dc3bbeb22a931e7cdfab", "message": "Abstract", "committedDate": "2020-10-15T08:20:33Z", "type": "commit"}]}