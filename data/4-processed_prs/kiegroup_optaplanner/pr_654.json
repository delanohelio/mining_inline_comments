{"pr_number": 654, "pr_title": "PLANNER-1777 bugfix when using java generics or kotlin open classes", "pr_createdAt": "2020-01-10T19:51:06Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/654", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0NzEzOA==", "url": "https://github.com/kiegroup/optaplanner/pull/654#discussion_r365547138", "bodyText": "Our code style prescribes a space after if, and no whitespace before the closing parenthesis.\nAlso, it would be nice if you could provide a reproducing test.", "author": "triceo", "createdAt": "2020-01-11T23:18:09Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/domain/valuerange/descriptor/AbstractFromPropertyValueRangeDescriptor.java", "diffHunk": "@@ -108,6 +109,11 @@ private void processValueRangeProviderAnnotation(ValueRangeProvider valueRangePr\n                 // with the variableDescriptor's generic type's type arguments\n                 typeArgument = ((ParameterizedType) typeArgument).getRawType();\n             }\n+\n+            if(typeArgument instanceof WildcardType ) {", "originalCommit": "8933a3afd8723b5a52f7d895631b26d00ddec69a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY1MzM3NA==", "url": "https://github.com/kiegroup/optaplanner/pull/654#discussion_r365653374", "bodyText": "I have fixed the whitespace feedback on the if block. Please let me know if it needs any changes. Will it be possible to share code style guidelines or IDE formatter config if they are publically available, it will help any future commits from me.\nI have also added a failing test case that passes after applying the fix. Please let me know if it helps.", "author": "divyakumarjain", "createdAt": "2020-01-13T05:50:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0NzEzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ1MDAwNw==", "url": "https://github.com/kiegroup/optaplanner/pull/654#discussion_r366450007", "bodyText": "Are there any test methods using this?", "author": "ge0ffrey", "createdAt": "2020-01-14T16:44:38Z", "path": "optaplanner-core/src/test/java/org/optaplanner/core/impl/testdata/domain/reflect/generic/TestdataGenericEntity.java", "diffHunk": "@@ -59,10 +60,19 @@ public TestdataGenericEntity(String code, TestdataGenericValue value) {\n         return value;\n     }\n \n+    @PlanningVariable(valueRangeProviderRefs = \"subTypeValueRange\")\n+    public TestdataGenericValue<T> getSubTypeValue() {\n+        return subTypeValue;\n+    }\n+\n     public void setValue(TestdataGenericValue<T> value) {\n         this.value = value;\n     }\n \n+    public void setSubTypeValue(TestdataGenericValue<T> subTypeValue) {", "originalCommit": "736bb01b4251328ec1b5d3a94eb82dbaa0bc41a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAyMjE5MA==", "url": "https://github.com/kiegroup/optaplanner/pull/654#discussion_r367022190", "bodyText": "Maybe I need some help in understanding the ask here.\nAs per my understanding, the use of Java Generic in solution is tested in the following test method org.optaplanner.core.impl.domain.solution.descriptor.SolutionDescriptorTest#generic.\nWhen setSubTypeValue setter is removed this test case fails with the following error.\njava.lang.IllegalStateException: The class (class org.optaplanner.core.impl.testdata.domain.reflect.generic.TestdataGenericEntity) has a PlanningVariable annotated getter method (public org.optaplanner.core.impl.testdata.domain.reflect.generic.TestdataGenericValue org.optaplanner.core.impl.testdata.domain.reflect.generic.TestdataGenericEntity.getSubTypeValue()), but lacks a setter for that property (subTypeValue).\nThus what I understand here is that this setter is not directly used in the test cases but fails because of existing getter and setter validation for Planning Variables at Planning Entity level.\nTo make the asserts better in this generic test method, I have tried to add additional asserts in this test method to validate Value Range Providers at the solution and Planning Variable at entity level. Let me know if that helps.", "author": "divyakumarjain", "createdAt": "2020-01-15T17:57:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ1MDAwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQyNTE5OQ==", "url": "https://github.com/kiegroup/optaplanner/pull/654#discussion_r368425199", "bodyText": "Let me know if I can help to resolve this conversation? So that we can merge the PR. Will be good to see this fix in next release.", "author": "divyakumarjain", "createdAt": "2020-01-20T08:49:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ1MDAwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQyNjAzNg==", "url": "https://github.com/kiegroup/optaplanner/pull/654#discussion_r369426036", "bodyText": "My apologies, I didn't notice that the SolutionDescriptorTest did use this new class. https://github.com/kiegroup/optaplanner/pull/654/files#diff-5b1d1d2d1eaa460524ed6b58b40365b9R166\nYes, this PR is perfect. Merging now. Sorry for the delay. The bad news it just missed 7.32.0.Final... (it got branches on monday, release is baking now) but it will be in 7.33.0.Final (normally 3-4 weeks later but that's not a promise).", "author": "ge0ffrey", "createdAt": "2020-01-22T08:36:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ1MDAwNw=="}], "type": "inlineReview"}, {"oid": "30026e771d98074ae4e1d2dd1c84f1310d46c84c", "url": "https://github.com/kiegroup/optaplanner/commit/30026e771d98074ae4e1d2dd1c84f1310d46c84c", "message": "bugfix when using java generics or kotlin open classes", "committedDate": "2020-01-15T17:51:34Z", "type": "commit"}]}