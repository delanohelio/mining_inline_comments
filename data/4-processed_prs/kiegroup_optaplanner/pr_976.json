{"pr_number": 976, "pr_title": "PLANNER-2142 Make OptaPlanner 8 a part of kogito release pipeline", "pr_createdAt": "2020-10-19T12:17:12Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/976", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcwMDU1Mw==", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r507700553", "bodyText": "May be worth moving to a shared library (after parametrization).", "author": "rsynek", "createdAt": "2020-10-19T12:20:21Z", "path": "Jenkinsfile.deploy", "diffHunk": "@@ -129,6 +247,55 @@ void runMaven(String goals, String directory, boolean skipTests = false, List pr\n         mvnCmd += \" ${extraArgs}\"\n     }\n     dir(directory) {\n-        maven.runMavenWithSubmarineSettings(mvnCmd, skipTests)\n+        if(isRelease()){\n+            // In case of release, we already have the settings.xml\n+            maven.runMaven(mvnCmd, skipTests, ['-fae'])\n+        } else {\n+            maven.runMavenWithSubmarineSettings(mvnCmd, skipTests)\n+        }\n+    }\n+}\n+\n+void updateKogitoVersion(String newVersion) {\n+    sh \"mvn versions:set-property -Dproperty=version.org.kie.kogito -DnewVersion=$newVersion -DallowSnapshots=true -DgenerateBackupPoms=false\"", "originalCommit": "e9ed3729a02067197bff2e4f6bf4457dfa159ad8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMTk3NQ==", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r507711975", "bodyText": "I do agree", "author": "radtriste", "createdAt": "2020-10-19T12:38:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcwMDU1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcwMjI0NQ==", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r507702245", "bodyText": "Required just for testing the pipeline. Enforcer fails the build due to the http:// protocol of the testing Nexus server (https:// required).", "author": "rsynek", "createdAt": "2020-10-19T12:23:02Z", "path": "pom.xml", "diffHunk": "@@ -34,6 +34,8 @@\n   </licenses>\n \n   <properties>\n+    <!-- TODO: remove before merging -->\n+    <enforcer.skip>true</enforcer.skip>", "originalCommit": "e9ed3729a02067197bff2e4f6bf4457dfa159ad8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYwMDUzNg==", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r508600536", "bodyText": "Yes, this must not make it to master.", "author": "ge0ffrey", "createdAt": "2020-10-20T15:20:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcwMjI0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYwMTI1Mw==", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r508601253", "bodyText": "Maybe you can use -Denforcer.skip=true in the pipeline instead?", "author": "ge0ffrey", "createdAt": "2020-10-20T15:20:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcwMjI0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYwMzIwMQ==", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r508603201", "bodyText": "this would be something similar to: https://github.com/kiegroup/kogito-runtimes/pull/835/files#diff-102df37262fd32095c3c8ccc12daad8face4939c97eb4a207fba25c1aa0be4a1R274", "author": "radtriste", "createdAt": "2020-10-20T15:22:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcwMjI0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY1NjU4MA==", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r508656580", "bodyText": "That's an option too, thanks.", "author": "rsynek", "createdAt": "2020-10-20T16:09:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcwMjI0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIwNjM4MQ==", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r509206381", "bodyText": "+1 for doing it in the pipeline which also adds the http:// url, instead of doing it in the pom.xml and affecting local builds too.", "author": "ge0ffrey", "createdAt": "2020-10-21T11:39:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcwMjI0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMDE3NA==", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r507710174", "bodyText": "maybe add KOGITO_VERSION as well in deployment.properties, as you will need it in promote pipeline", "author": "radtriste", "createdAt": "2020-10-19T12:35:50Z", "path": "Jenkinsfile.deploy", "diffHunk": "@@ -42,37 +56,118 @@ pipeline {\n                     if (params.DISPLAY_NAME != '') {\n                         currentBuild.displayName = params.DISPLAY_NAME\n                     }\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n                 }\n             }\n             post {\n                 success {\n                     script {\n                         setDeployPropertyIfNeeded('git.branch', getBuildBranch())\n                         setDeployPropertyIfNeeded('git.author', getGitAuthor())\n+                        setDeployPropertyIfNeeded('project.version', getProjectVersion())\n+                        setDeployPropertyIfNeeded('release', isRelease())", "originalCommit": "71611aedb229a76f3b2d66d547518483b42c6171", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcyNDUzOQ==", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r507724539", "bodyText": "I get the version there via a parameter, I suppose. But +1 to make it consistent.", "author": "rsynek", "createdAt": "2020-10-19T12:58:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMDE3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMDg3MQ==", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r507710871", "bodyText": "this parameter should not be mandatory. runtimes could have been released already. thus this pipeline would not need any MAVEN_DEPENDENCIES_REPOSITORY", "author": "radtriste", "createdAt": "2020-10-19T12:36:52Z", "path": "Jenkinsfile.deploy", "diffHunk": "@@ -42,37 +56,118 @@ pipeline {\n                     if (params.DISPLAY_NAME != '') {\n                         currentBuild.displayName = params.DISPLAY_NAME\n                     }\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n                 }\n             }\n             post {\n                 success {\n                     script {\n                         setDeployPropertyIfNeeded('git.branch', getBuildBranch())\n                         setDeployPropertyIfNeeded('git.author', getGitAuthor())\n+                        setDeployPropertyIfNeeded('project.version', getProjectVersion())\n+                        setDeployPropertyIfNeeded('release', isRelease())\n                     }\n                 }\n             }\n         }\n+\n         stage('Clone repositories') {\n             steps {\n                 checkoutRepo('optaplanner')\n             }\n         }\n+\n+        stage('Prepare for PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                prepareForPR('optaplanner')\n+            }\n+        }\n+\n+        stage('Setup Maven release config'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                echo 'Setup Maven release config'\n+                configFileProvider([configFile(fileId: maven.getSubmarineSettingsXmlId(), targetLocation: 'maven-settings.xml', variable: 'MAVEN_SETTINGS_FILE')]){\n+                    sh \"echo '-B -s ${MAVEN_SETTINGS_FILE}' | tee optaplanner/.mvn/maven.config\"\n+                    // TODO: figure out why the assert does not work\n+                    // assert params.MAVEN_DEPENDENCIES_REPOSITORY != '' // OptaPlanner depends on Kogito Runtimes", "originalCommit": "71611aedb229a76f3b2d66d547518483b42c6171", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMTM4Mg==", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r507711382", "bodyText": "just thinking I need to update that as well on examples that we should check params.MAVEN_DEPENDENCIES_REPOSITORY is not empty before doing the change ...", "author": "radtriste", "createdAt": "2020-10-19T12:37:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMDg3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxODkzMQ==", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r507718931", "bodyText": "already implemented in fact on examples.See https://github.com/kiegroup/kogito-examples/blob/master/Jenkinsfile.deploy#L97", "author": "radtriste", "createdAt": "2020-10-19T12:49:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMDg3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcyOTA0Mg==", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r507729042", "bodyText": "Good point, will remove the assert and add a condition.", "author": "rsynek", "createdAt": "2020-10-19T13:05:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMDg3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMTY0MQ==", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r507711641", "bodyText": "what happen if KOGITO_VERSION is empty ?", "author": "radtriste", "createdAt": "2020-10-19T12:38:05Z", "path": "Jenkinsfile.deploy", "diffHunk": "@@ -42,37 +56,118 @@ pipeline {\n                     if (params.DISPLAY_NAME != '') {\n                         currentBuild.displayName = params.DISPLAY_NAME\n                     }\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n                 }\n             }\n             post {\n                 success {\n                     script {\n                         setDeployPropertyIfNeeded('git.branch', getBuildBranch())\n                         setDeployPropertyIfNeeded('git.author', getGitAuthor())\n+                        setDeployPropertyIfNeeded('project.version', getProjectVersion())\n+                        setDeployPropertyIfNeeded('release', isRelease())\n                     }\n                 }\n             }\n         }\n+\n         stage('Clone repositories') {\n             steps {\n                 checkoutRepo('optaplanner')\n             }\n         }\n+\n+        stage('Prepare for PR'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                prepareForPR('optaplanner')\n+            }\n+        }\n+\n+        stage('Setup Maven release config'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                echo 'Setup Maven release config'\n+                configFileProvider([configFile(fileId: maven.getSubmarineSettingsXmlId(), targetLocation: 'maven-settings.xml', variable: 'MAVEN_SETTINGS_FILE')]){\n+                    sh \"echo '-B -s ${MAVEN_SETTINGS_FILE}' | tee optaplanner/.mvn/maven.config\"\n+                    // TODO: figure out why the assert does not work\n+                    // assert params.MAVEN_DEPENDENCIES_REPOSITORY != '' // OptaPlanner depends on Kogito Runtimes\n+                    echo \"MAVEN_DEPENDENCIES_REPOSITORY passed: ${params.MAVEN_DEPENDENCIES_REPOSITORY}\"\n+                    sh \"sed -i 's|<repositories>|<repositories><repository><id>staging</id><name>Staging Repository</name><url>${params.MAVEN_DEPENDENCIES_REPOSITORY}</url><layout>default</layout><snapshots><enabled>true</enabled></snapshots><releases><enabled>true</enabled></releases></repository>|g' ${MAVEN_SETTINGS_FILE}\"\n+                    sh \"sed -i 's|<pluginRepositories>|<pluginRepositories><pluginRepository><id>staging</id><name>Staging Repository</name><url>${params.MAVEN_DEPENDENCIES_REPOSITORY}</url><layout>default</layout><snapshots><enabled>true</enabled></snapshots><releases><enabled>true</enabled></releases></pluginRepository>|g' ${MAVEN_SETTINGS_FILE}\"\n+                    sh \"sed -i 's|external:\\\\*|external:*,!staging|g' ${MAVEN_SETTINGS_FILE}\" // Done to allow Maven to download release artifacts from MAVEN_DEPENDENCIES_REPOSITORY\n+\n+                    echo 'Resulting maven settings.xml:'\n+                    sh \"cat ${MAVEN_SETTINGS_FILE}\"\n+                }\n+            }\n+        }\n+\n+        stage('Update project version'){\n+            when {\n+                expression { return getProjectVersion() != '' }\n+            }\n+            steps {\n+                script {\n+                    // To make sure that the project will resolve during version upgrade.\n+                    mavenCleanInstall('optaplanner', true, [], '-U')\n+                    dir('optaplanner') {\n+                        maven.mvnVersionsSet(getProjectVersion())\n+                        updateKogitoVersion(getKogitoVersion())", "originalCommit": "71611aedb229a76f3b2d66d547518483b42c6171", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY1NTkwOQ==", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r508655909", "bodyText": "Already fixed by making the parameter mandatory.", "author": "rsynek", "createdAt": "2020-10-20T16:08:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMTY0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMzIzMA==", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r507713230", "bodyText": "here is the needed kogito.version from deployment.properties", "author": "radtriste", "createdAt": "2020-10-19T12:40:47Z", "path": "Jenkinsfile.promote", "diffHunk": "@@ -0,0 +1,282 @@\n+import org.jenkinsci.plugins.workflow.libs.Library\n+@Library('jenkins-pipeline-shared-libraries')_\n+\n+deployProperties = [:]\n+pipelineProperties = [:]\n+\n+pipeline {\n+    agent {\n+        label 'kie-rhel7'\n+    }\n+\n+    tools {\n+        maven 'kie-maven-3.6.2'\n+        jdk 'kie-jdk11'\n+    }\n+    \n+    options {\n+        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')\n+    }\n+\n+    parameters {\n+        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')\n+        \n+        // Deploy job url to retrieve deployment.properties\n+        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')\n+        \n+        // Git information which can override `deployment.properties`\n+        string(name: 'BUILD_BRANCH_NAME', defaultValue: '', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')\n+        string(name: 'GIT_AUTHOR', defaultValue: '', description: 'Override `deployment.properties`. Which Git author repository ?')\n+        \n+        // Release information which can override `deployment.properties`\n+        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')\n+\n+        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')\n+        string(name: 'KOGITO_VERSION', defaultValue: '', description: 'Optional if not RELEASE. If RELEASE, cannot be empty.')\n+\n+        string(name: 'STAGING_REPO_URL', defaultValue: '', description: 'Override `deployment.properties`.')\n+        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')\n+\n+        // Bot author information. Set as params for easy testing.\n+        string(name: 'BOT_CREDENTIALS_ID', defaultValue: 'bsig-gh-bot', description: 'Credentials for PR creation')\n+\n+        // Main author creds\n+        string(name: 'AUTHOR_CREDS_ID', defaultValue: 'kie-ci', description: 'Credentials for PR merge')\n+        string(name: 'GITHUB_TOKEN_CREDS_ID', defaultValue: 'kie-ci2-token', description: 'GH token to be used with GH CLI')\n+    }\n+\n+    environment {\n+        PROPERTIES_FILE_NAME = 'deployment.properties'\n+        BOT_BRANCH_HASH = \"${util.generateHash(10)}\"\n+        GITHUB_CLI_VERSION = '0.11.1'\n+    }\n+\n+    stages {\n+        stage('Initialization') {\n+            steps {\n+                script {\n+                    cleanWs()\n+                    \n+                    if (params.DISPLAY_NAME != '') {\n+                        currentBuild.displayName = params.DISPLAY_NAME\n+                    }\n+\n+                    readDeployProperties()\n+\n+                    if (isRelease()) {\n+                        assert getProjectVersion() != ''\n+                    }\n+\n+                    installGithubCLI()\n+                }\n+            }\n+        }\n+\n+        stage('Merge OptaPlanner deploy PR and tag') {\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps{\n+                script {\n+                    dir('optaplanner') {\n+                        checkoutRepo('optaplanner')\n+                        mergeAndPush('optaplanner', getDeployPrLink('optaplanner'))\n+                        tagLatest()\n+                    }\n+                }\n+            }\n+        }\n+\n+        stage('Set OptaPlanner next snapshot version'){\n+            when {\n+                expression { return isRelease() }\n+            }\n+            steps {\n+                script {\n+                    dir('optaplanner-bot') {\n+                        prepareForPR('optaplanner')\n+\n+                        maven.mvnVersionsSet(getNextSnapshotVersion(getProjectVersion()), true)\n+                        updateKogitoVersion(getNextSnapshotVersion(getKogitoVersion()))\n+\n+                        commitAndCreatePR('optaplanner')\n+                    }\n+                    dir('optaplanner') {\n+                        sh \"git checkout ${getBuildBranch()}\"\n+                        mergeAndPush('optaplanner', getPipelinePrLink('optaplanner'))\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    post {\n+        always {\n+            cleanWs()\n+        }\n+    }\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Deployment properties\n+//////////////////////////////////////////////////////////////////////////////\n+\n+void readDeployProperties(){\n+    String deployUrl = params.DEPLOY_BUILD_URL\n+    if (deployUrl != ''){\n+        if(!deployUrl.endsWith('/')){\n+            deployUrl += '/'\n+        }\n+        sh \"wget ${deployUrl}artifact/${PROPERTIES_FILE_NAME} -O ${PROPERTIES_FILE_NAME}\"\n+        deployProperties = readProperties file: PROPERTIES_FILE_NAME\n+        // echo all properties\n+        echo deployProperties.collect{ entry -> \"${entry.key}=${entry.value}\" }.join('\\n')\n+    }\n+}\n+\n+boolean hasDeployProperty(String key){\n+    return deployProperties[key] != null\n+}\n+\n+String getDeployProperty(String key){\n+    if(hasDeployProperty(key)){\n+        return deployProperties[key]\n+    }\n+    return ''\n+}\n+\n+String getParamOrDeployProperty(String paramKey, String deployPropertyKey){\n+    if (params[paramKey] != ''){\n+        return params[paramKey]\n+    }\n+    return getDeployProperty(deployPropertyKey)\n+}\n+\n+//////////////////////////////////////////////////////////////////////////////\n+// Getter / Setter\n+//////////////////////////////////////////////////////////////////////////////\n+\n+boolean isRelease() {\n+    return params.RELEASE || (getDeployProperty('release') == 'true')\n+}\n+\n+String getProjectVersion() {\n+    return getParamOrDeployProperty('PROJECT_VERSION', 'project.version')\n+}\n+\n+String getKogitoVersion() {\n+    return getParamOrDeployProperty('KOGITO_VERSION', 'kogito.version')", "originalCommit": "71611aedb229a76f3b2d66d547518483b42c6171", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ad6e0f17301a12d2b6056aeccf4c7cb10fb4e29b", "url": "https://github.com/kiegroup/optaplanner/commit/ad6e0f17301a12d2b6056aeccf4c7cb10fb4e29b", "message": "Create a first draft of release pipeline", "committedDate": "2020-10-20T08:57:56Z", "type": "commit"}, {"oid": "57de985291154225a5ee79cef8c39d4b8b43c4ba", "url": "https://github.com/kiegroup/optaplanner/commit/57de985291154225a5ee79cef8c39d4b8b43c4ba", "message": "Update the promote pipeline", "committedDate": "2020-10-20T08:57:56Z", "type": "commit"}, {"oid": "f40dbd8a54582297c4030671d4d0971ff6dbc40a", "url": "https://github.com/kiegroup/optaplanner/commit/f40dbd8a54582297c4030671d4d0971ff6dbc40a", "message": "Fix the maven setup step", "committedDate": "2020-10-20T08:57:56Z", "type": "commit"}, {"oid": "9feb30c1f077d1c7084bc135c5db001de6ea7fa5", "url": "https://github.com/kiegroup/optaplanner/commit/9feb30c1f077d1c7084bc135c5db001de6ea7fa5", "message": "Accept version with suffix", "committedDate": "2020-10-20T08:57:56Z", "type": "commit"}, {"oid": "7880dea72ac1c6e7af2f45af8146548399d30bf2", "url": "https://github.com/kiegroup/optaplanner/commit/7880dea72ac1c6e7af2f45af8146548399d30bf2", "message": "Print the dependencies repository", "committedDate": "2020-10-20T08:57:56Z", "type": "commit"}, {"oid": "b29410adb4fc2b8bbff151aba29699433ee362a5", "url": "https://github.com/kiegroup/optaplanner/commit/b29410adb4fc2b8bbff151aba29699433ee362a5", "message": "Fix path", "committedDate": "2020-10-20T08:57:56Z", "type": "commit"}, {"oid": "e3d952516d05c40e6210bf058ff0f47d6d18f98d", "url": "https://github.com/kiegroup/optaplanner/commit/e3d952516d05c40e6210bf058ff0f47d6d18f98d", "message": "Print content of the merged settings.xml", "committedDate": "2020-10-20T08:57:56Z", "type": "commit"}, {"oid": "1ca56dabde51651c9341ba9e425b34008d595d09", "url": "https://github.com/kiegroup/optaplanner/commit/1ca56dabde51651c9341ba9e425b34008d595d09", "message": "Use submarine settings.xml", "committedDate": "2020-10-20T08:57:56Z", "type": "commit"}, {"oid": "ae2481cb7a445ff1647a708ee1bec722b1e8f2fb", "url": "https://github.com/kiegroup/optaplanner/commit/ae2481cb7a445ff1647a708ee1bec722b1e8f2fb", "message": "Unify settings.xml", "committedDate": "2020-10-20T08:57:56Z", "type": "commit"}, {"oid": "bd46d5ac980c61476788a9c21ec3e81eeb226307", "url": "https://github.com/kiegroup/optaplanner/commit/bd46d5ac980c61476788a9c21ec3e81eeb226307", "message": "Don't save junit reports if tests are skipped", "committedDate": "2020-10-20T08:57:56Z", "type": "commit"}, {"oid": "88cfad39239543ab02cbc7886d950c2b48cdf0d8", "url": "https://github.com/kiegroup/optaplanner/commit/88cfad39239543ab02cbc7886d950c2b48cdf0d8", "message": "Comment out unnecessary build", "committedDate": "2020-10-20T08:57:56Z", "type": "commit"}, {"oid": "702f2dfb993748b9a223ba9a9efe92f554653771", "url": "https://github.com/kiegroup/optaplanner/commit/702f2dfb993748b9a223ba9a9efe92f554653771", "message": "Skip enforcer", "committedDate": "2020-10-20T08:57:56Z", "type": "commit"}, {"oid": "85704daa45ea3ce2fb8e192ce32390088ddea939", "url": "https://github.com/kiegroup/optaplanner/commit/85704daa45ea3ce2fb8e192ce32390088ddea939", "message": "Remove unnecessary maven build", "committedDate": "2020-10-20T08:57:56Z", "type": "commit"}, {"oid": "f37bb2503e23bea26327613e6151d5a8236b56dd", "url": "https://github.com/kiegroup/optaplanner/commit/f37bb2503e23bea26327613e6151d5a8236b56dd", "message": "Use set-property instead of update", "committedDate": "2020-10-20T08:57:56Z", "type": "commit"}, {"oid": "bf3accaff8333533fc82cd8e14ccb267aef5678e", "url": "https://github.com/kiegroup/optaplanner/commit/bf3accaff8333533fc82cd8e14ccb267aef5678e", "message": "Parametrize git credentials", "committedDate": "2020-10-20T08:57:56Z", "type": "commit"}, {"oid": "0a8b4a9c60770a70fdbbd2908491cb0416ebe5eb", "url": "https://github.com/kiegroup/optaplanner/commit/0a8b4a9c60770a70fdbbd2908491cb0416ebe5eb", "message": "Put back the enforcer plugin", "committedDate": "2020-10-20T08:57:56Z", "type": "commit"}, {"oid": "cf350954f3d2491ae9b73bee719f2a6a7ffe7199", "url": "https://github.com/kiegroup/optaplanner/commit/cf350954f3d2491ae9b73bee719f2a6a7ffe7199", "message": "Remove a workaround for parsing versions", "committedDate": "2020-10-20T08:57:56Z", "type": "commit"}, {"oid": "697e0db06e1dd390cfee6acdaa0796a135dfc229", "url": "https://github.com/kiegroup/optaplanner/commit/697e0db06e1dd390cfee6acdaa0796a135dfc229", "message": "Remove obsolete TODO note", "committedDate": "2020-10-20T08:57:56Z", "type": "commit"}, {"oid": "815b5e4704d3d43b3efa2abe5ac691ef32e0fa59", "url": "https://github.com/kiegroup/optaplanner/commit/815b5e4704d3d43b3efa2abe5ac691ef32e0fa59", "message": "Address review comments", "committedDate": "2020-10-20T08:57:56Z", "type": "commit"}, {"oid": "c9f40c64eef8a810eb165564193800c39e737c5f", "url": "https://github.com/kiegroup/optaplanner/commit/c9f40c64eef8a810eb165564193800c39e737c5f", "message": "Wrap step content in a script", "committedDate": "2020-10-20T08:57:56Z", "type": "commit"}, {"oid": "c9f40c64eef8a810eb165564193800c39e737c5f", "url": "https://github.com/kiegroup/optaplanner/commit/c9f40c64eef8a810eb165564193800c39e737c5f", "message": "Wrap step content in a script", "committedDate": "2020-10-20T08:57:56Z", "type": "forcePushed"}, {"oid": "670f1f186bafbeb9a1fa2591a36fd354cb914e6a", "url": "https://github.com/kiegroup/optaplanner/commit/670f1f186bafbeb9a1fa2591a36fd354cb914e6a", "message": "Make sure kogito version is not empty", "committedDate": "2020-10-20T09:24:04Z", "type": "commit"}, {"oid": "670f1f186bafbeb9a1fa2591a36fd354cb914e6a", "url": "https://github.com/kiegroup/optaplanner/commit/670f1f186bafbeb9a1fa2591a36fd354cb914e6a", "message": "Make sure kogito version is not empty", "committedDate": "2020-10-20T09:24:04Z", "type": "forcePushed"}, {"oid": "859944a644e72731f6e7e4122479dad9ae52fefe", "url": "https://github.com/kiegroup/optaplanner/commit/859944a644e72731f6e7e4122479dad9ae52fefe", "message": "Update versions maven plugin", "committedDate": "2020-10-20T13:46:39Z", "type": "commit"}, {"oid": "227c484cabfe3bdec55b1cb9e7c266158cc92c61", "url": "https://github.com/kiegroup/optaplanner/commit/227c484cabfe3bdec55b1cb9e7c266158cc92c61", "message": "Deploy new OptaPlanner snapshots", "committedDate": "2020-10-22T10:08:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA5MTIzOQ==", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r510091239", "bodyText": "should add also here the sh \"echo '\\n-Denforcer.skip=true' | tee -a .mvn/maven.config\" command or ?", "author": "radtriste", "createdAt": "2020-10-22T11:39:10Z", "path": "Jenkinsfile.deploy", "diffHunk": "@@ -99,7 +99,7 @@ pipeline {\n                 script {\n                     echo 'Setup Maven release config'\n                     configFileProvider([configFile(fileId: maven.getSubmarineSettingsXmlId(), targetLocation: 'maven-settings.xml', variable: 'MAVEN_SETTINGS_FILE')]) {\n-                        sh \"echo '-B -s ${MAVEN_SETTINGS_FILE}' | tee optaplanner/.mvn/maven.config\"\n+                        sh \"echo '\\n-B -s ${MAVEN_SETTINGS_FILE}' | tee -a optaplanner/.mvn/maven.config\"", "originalCommit": "227c484cabfe3bdec55b1cb9e7c266158cc92c61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b9d65f17ea1aa0f4338064b278d8c1fcb2f0cfe9", "url": "https://github.com/kiegroup/optaplanner/commit/b9d65f17ea1aa0f4338064b278d8c1fcb2f0cfe9", "message": "Add enforcer.skip to maven setup", "committedDate": "2020-10-22T15:20:53Z", "type": "commit"}, {"oid": "b9d65f17ea1aa0f4338064b278d8c1fcb2f0cfe9", "url": "https://github.com/kiegroup/optaplanner/commit/b9d65f17ea1aa0f4338064b278d8c1fcb2f0cfe9", "message": "Add enforcer.skip to maven setup", "committedDate": "2020-10-22T15:20:53Z", "type": "forcePushed"}, {"oid": "09fa83625304198106cea3f5cc91a92d6aaa4117", "url": "https://github.com/kiegroup/optaplanner/commit/09fa83625304198106cea3f5cc91a92d6aaa4117", "message": "Setup maven config for nightly build", "committedDate": "2020-10-23T06:45:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY2Nzc3NA==", "url": "https://github.com/kiegroup/optaplanner/pull/976#discussion_r510667774", "bodyText": "similar here for the change. See https://github.com/kiegroup/kogito-examples/pull/416/files#diff-102df37262fd32095c3c8ccc12daad8face4939c97eb4a207fba25c1aa0be4a1L285-R284", "author": "radtriste", "createdAt": "2020-10-23T06:43:58Z", "path": "Jenkinsfile.deploy", "diffHunk": "@@ -129,6 +249,55 @@ void runMaven(String goals, String directory, boolean skipTests = false, List pr\n         mvnCmd += \" ${extraArgs}\"\n     }\n     dir(directory) {\n-        maven.runMavenWithSubmarineSettings(mvnCmd, skipTests)\n+        if(isRelease()){\n+            // In case of release, we already have the settings.xml\n+            maven.runMaven(mvnCmd, skipTests, ['-fae'])", "originalCommit": "b9d65f17ea1aa0f4338064b278d8c1fcb2f0cfe9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "566a72aa96af8ab34b8821c2f611357ffe5c215d", "url": "https://github.com/kiegroup/optaplanner/commit/566a72aa96af8ab34b8821c2f611357ffe5c215d", "message": "Remove the enforcer skip", "committedDate": "2020-10-23T07:11:36Z", "type": "commit"}, {"oid": "aa17a9286c9203a7769be3fa5d59505971953fda", "url": "https://github.com/kiegroup/optaplanner/commit/aa17a9286c9203a7769be3fa5d59505971953fda", "message": "Use correct maven settings", "committedDate": "2020-10-23T07:12:43Z", "type": "commit"}]}