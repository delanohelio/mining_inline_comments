{"pr_number": 913, "pr_title": "Multi-stage planning: docs", "pr_createdAt": "2020-09-04T14:28:58Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/913", "timeline": [{"oid": "2ee998f8db0ed2609bad7cf1013e33ef5a03ad6b", "url": "https://github.com/kiegroup/optaplanner/commit/2ee998f8db0ed2609bad7cf1013e33ef5a03ad6b", "message": "Multi-stage planning: docs + website", "committedDate": "2020-09-04T14:27:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxNzIyNQ==", "url": "https://github.com/kiegroup/optaplanner/pull/913#discussion_r486517225", "bodyText": "planning", "author": "emmurphy1", "createdAt": "2020-09-10T17:35:16Z", "path": "optaplanner-docs/src/main/asciidoc/RepeatedPlanning/RepeatedPlanning-chapter.adoc", "diffHunk": "@@ -488,3 +488,24 @@ A `BestSolutionChangedEvent` does not guarantee that every `ProblemFactChange` h\n ----\n \n . Use `Score.isSolutionInitialized()` instead of `Score.isFeasible()` to only ignore uninitialized solutions, but do accept infeasible solutions too.\n+\n+[[multiStagePlanning]]\n+== Multi-stage Planning", "originalCommit": "2ee998f8db0ed2609bad7cf1013e33ef5a03ad6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxNzQ1Mw==", "url": "https://github.com/kiegroup/optaplanner/pull/913#discussion_r486517453", "bodyText": "Remove comma after depart.", "author": "emmurphy1", "createdAt": "2020-09-10T17:35:38Z", "path": "optaplanner-docs/src/main/asciidoc/RepeatedPlanning/RepeatedPlanning-chapter.adoc", "diffHunk": "@@ -488,3 +488,24 @@ A `BestSolutionChangedEvent` does not guarantee that every `ProblemFactChange` h\n ----\n \n . Use `Score.isSolutionInitialized()` instead of `Score.isFeasible()` to only ignore uninitialized solutions, but do accept infeasible solutions too.\n+\n+[[multiStagePlanning]]\n+== Multi-stage Planning\n+\n+In multi-stage planning, complex planning problems are broken down in multiple stages.\n+A typical example is train scheduling, where one department decides where and when a train will arrive or depart,", "originalCommit": "2ee998f8db0ed2609bad7cf1013e33ef5a03ad6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxODcwNQ==", "url": "https://github.com/kiegroup/optaplanner/pull/913#discussion_r486518705", "bodyText": "replace / with and or or:\ncars and locamotives\ncars or locamotives.", "author": "emmurphy1", "createdAt": "2020-09-10T17:37:40Z", "path": "optaplanner-docs/src/main/asciidoc/RepeatedPlanning/RepeatedPlanning-chapter.adoc", "diffHunk": "@@ -488,3 +488,24 @@ A `BestSolutionChangedEvent` does not guarantee that every `ProblemFactChange` h\n ----\n \n . Use `Score.isSolutionInitialized()` instead of `Score.isFeasible()` to only ignore uninitialized solutions, but do accept infeasible solutions too.\n+\n+[[multiStagePlanning]]\n+== Multi-stage Planning\n+\n+In multi-stage planning, complex planning problems are broken down in multiple stages.\n+A typical example is train scheduling, where one department decides where and when a train will arrive or depart,\n+and another department assigns the operators to the actual train cars/locomotives.", "originalCommit": "2ee998f8db0ed2609bad7cf1013e33ef5a03ad6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUyMDY3MQ==", "url": "https://github.com/kiegroup/optaplanner/pull/913#discussion_r486520671", "bodyText": "But problems with the same publication deadline, solved by different organizational groups\nare also initially better off with multi-stage planning, because to Conway's law\nand the high risk associated with unifying such groups.\nIBM SG:\nbecause of prep\nUse \u201cbecause of,\u201d not \u201cdue to,\u201d in adverbial clauses.\nAlthough the use of \u201cdue to\u201d as a synonym of \u201cbecause of\u201d has some acceptance in modern English usage, it\nis imprecise and, therefore, not suited to technical writing. Incorrect: \u201cDue to the power failure, the update\nstopped.\u201d Correct: \u201cBecause of the power failure, the update stopped.\u201d", "author": "emmurphy1", "createdAt": "2020-09-10T17:41:02Z", "path": "optaplanner-docs/src/main/asciidoc/RepeatedPlanning/RepeatedPlanning-chapter.adoc", "diffHunk": "@@ -488,3 +488,24 @@ A `BestSolutionChangedEvent` does not guarantee that every `ProblemFactChange` h\n ----\n \n . Use `Score.isSolutionInitialized()` instead of `Score.isFeasible()` to only ignore uninitialized solutions, but do accept infeasible solutions too.\n+\n+[[multiStagePlanning]]\n+== Multi-stage Planning\n+\n+In multi-stage planning, complex planning problems are broken down in multiple stages.\n+A typical example is train scheduling, where one department decides where and when a train will arrive or depart,\n+and another department assigns the operators to the actual train cars/locomotives.\n+\n+Each stage has its own solver configuration (and therefore its own ``SolverFactory``):\n+\n+image::RepeatedPlanning/multiStagePlanning.png[align=\"center\"]\n+\n+Planning problems with different publication deadlines must use multi-stage planning.\n+But also problems with the same publication deadline, solved by different organizational groups", "originalCommit": "2ee998f8db0ed2609bad7cf1013e33ef5a03ad6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUyMjEwNw==", "url": "https://github.com/kiegroup/optaplanner/pull/913#discussion_r486522107", "bodyText": "it might be\nmay implies permission, might possibility\nNevertheless, it might be beneficial in order to simplify  maintenance and ownership and help to start a project.", "author": "emmurphy1", "createdAt": "2020-09-10T17:43:34Z", "path": "optaplanner-docs/src/main/asciidoc/RepeatedPlanning/RepeatedPlanning-chapter.adoc", "diffHunk": "@@ -488,3 +488,24 @@ A `BestSolutionChangedEvent` does not guarantee that every `ProblemFactChange` h\n ----\n \n . Use `Score.isSolutionInitialized()` instead of `Score.isFeasible()` to only ignore uninitialized solutions, but do accept infeasible solutions too.\n+\n+[[multiStagePlanning]]\n+== Multi-stage Planning\n+\n+In multi-stage planning, complex planning problems are broken down in multiple stages.\n+A typical example is train scheduling, where one department decides where and when a train will arrive or depart,\n+and another department assigns the operators to the actual train cars/locomotives.\n+\n+Each stage has its own solver configuration (and therefore its own ``SolverFactory``):\n+\n+image::RepeatedPlanning/multiStagePlanning.png[align=\"center\"]\n+\n+Planning problems with different publication deadlines must use multi-stage planning.\n+But also problems with the same publication deadline, solved by different organizational groups\n+are - at first - better off with multi-stage planning, due to Conway's law\n+and the high risk associated with unifying such groups.\n+\n+Similarly to <<partitionedSearch,Partitioned Search>>, multi-stage planning leads to suboptimal results.\n+Nevertheless, it may be beneficial in order to simplify the maintenance, ownership, and help to start a project.", "originalCommit": "2ee998f8db0ed2609bad7cf1013e33ef5a03ad6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}