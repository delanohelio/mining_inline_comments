{"pr_number": 722, "pr_title": "PLANNER-1894 SolverManager.terminateEarly() fix", "pr_createdAt": "2020-03-17T14:11:10Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/722", "timeline": [{"oid": "fe5bccee0a7d37f0e643aaa5e3d752c613b6b130", "url": "https://github.com/kiegroup/optaplanner/commit/fe5bccee0a7d37f0e643aaa5e3d752c613b6b130", "message": "PLANNER-1894 SolverManager.terminateEarly() fix", "committedDate": "2020-03-17T14:10:23Z", "type": "commit"}, {"oid": "d1b027f12b8a2225a9a07d9039c5105c4dba23e6", "url": "https://github.com/kiegroup/optaplanner/commit/d1b027f12b8a2225a9a07d9039c5105c4dba23e6", "message": "PLANNER-1894 Clean up SolverManager map (memory leak)", "committedDate": "2020-03-17T14:15:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgxNTM3NQ==", "url": "https://github.com/kiegroup/optaplanner/pull/722#discussion_r393815375", "bodyText": "@triceo I actually originally tried an AtomicRefence, for the reasons you mentioned.\nTrouble was the code above versus the terminateEarly() code.\nThat latter did change drastically, so maybe there's a way to reintroduce the AtomicReference, let me try.", "author": "ge0ffrey", "createdAt": "2020-03-17T16:38:05Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/DefaultSolverJob.java", "diffHunk": "@@ -77,13 +78,19 @@ public ProblemId_ getProblemId() {\n     }\n \n     @Override\n-    public SolverStatus getSolverStatus() {\n+    public synchronized SolverStatus getSolverStatus() {\n         return solverStatus;\n     }\n \n     @Override\n     public Solution_ call() {\n-        solverStatus = SolverStatus.SOLVING_ACTIVE;\n+        synchronized (this) {\n+            if (solverStatus != SolverStatus.SOLVING_SCHEDULED) {\n+                // This job has been canceled before it started\n+                return problemFinder.apply(problemId);\n+            }\n+            solverStatus = SolverStatus.SOLVING_ACTIVE;\n+        }", "originalCommit": "d1b027f12b8a2225a9a07d9039c5105c4dba23e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNjk5Ng==", "url": "https://github.com/kiegroup/optaplanner/pull/722#discussion_r393836996", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    synchronized (this) {\n          \n          \n            \n                        if (solverStatus != SolverStatus.SOLVING_SCHEDULED) {\n          \n          \n            \n                            // This job has been canceled before it started\n          \n          \n            \n                            return problemFinder.apply(problemId);\n          \n          \n            \n                        }\n          \n          \n            \n                        solverStatus = SolverStatus.SOLVING_ACTIVE;\n          \n          \n            \n                    }\n          \n          \n            \n                        SolverStatus previousSolverStatus = solverStatus.getAndSet(SOLVING_ACTIVE);\n          \n          \n            \n                        if (previousSolverStatus != SolverStatus.SOLVING_SCHEDULED) {\n          \n          \n            \n                            // This job has been canceled before it started\n          \n          \n            \n                            return problemFinder.apply(problemId);\n          \n          \n            \n                        }", "author": "triceo", "createdAt": "2020-03-17T17:09:35Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/DefaultSolverJob.java", "diffHunk": "@@ -77,13 +78,19 @@ public ProblemId_ getProblemId() {\n     }\n \n     @Override\n-    public SolverStatus getSolverStatus() {\n+    public synchronized SolverStatus getSolverStatus() {\n         return solverStatus;\n     }\n \n     @Override\n     public Solution_ call() {\n-        solverStatus = SolverStatus.SOLVING_ACTIVE;\n+        synchronized (this) {\n+            if (solverStatus != SolverStatus.SOLVING_SCHEDULED) {\n+                // This job has been canceled before it started\n+                return problemFinder.apply(problemId);\n+            }\n+            solverStatus = SolverStatus.SOLVING_ACTIVE;\n+        }", "originalCommit": "d1b027f12b8a2225a9a07d9039c5105c4dba23e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNzkwMw==", "url": "https://github.com/kiegroup/optaplanner/pull/722#discussion_r393837903", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    solverManager.getProblemIdToSolverJobMap().remove(problemId);\n          \n          \n            \n                    solverStatus = SolverStatus.NOT_SOLVING;\n          \n          \n            \n                    terminatedLatch.countDown();\n          \n          \n            \n                    SolverStatus previousSolverStatus = solverStatus.getAndSet(NOT_SOLVING);\n          \n          \n            \n                    if (previousSolverStatus != NOT_SOLVING) {\n          \n          \n            \n                        solverManager.getProblemIdToSolverJobMap().remove(problemId);\n          \n          \n            \n                        terminatedLatch.countDown();\n          \n          \n            \n                    }", "author": "triceo", "createdAt": "2020-03-17T17:10:58Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/DefaultSolverJob.java", "diffHunk": "@@ -96,12 +103,16 @@ public Solution_ call() {\n             exceptionHandler.accept(problemId, e);\n             throw new IllegalStateException(\"Solving failed for problemId (\" + problemId + \").\", e);\n         } finally {\n-            solverManager.getProblemIdToSolverJobMap().remove(problemId);\n-            solverStatus = SolverStatus.NOT_SOLVING;\n-            terminatedLatch.countDown();\n+            solvingTerminated();\n         }\n     }\n \n+    private synchronized void solvingTerminated() {\n+        solverManager.getProblemIdToSolverJobMap().remove(problemId);\n+        solverStatus = SolverStatus.NOT_SOLVING;\n+        terminatedLatch.countDown();", "originalCommit": "d1b027f12b8a2225a9a07d9039c5105c4dba23e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzOTE5Nw==", "url": "https://github.com/kiegroup/optaplanner/pull/722#discussion_r393839197", "bodyText": "This should be replacable by switch (solverStatus.get()), as all the actual state mutation happens in solvingTerminated()/solver.terminateEarly() as I've suggested above.", "author": "triceo", "createdAt": "2020-03-17T17:13:06Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/DefaultSolverJob.java", "diffHunk": "@@ -116,20 +127,26 @@ public Solution_ call() {\n \n     @Override\n     public void terminateEarly() {\n-        boolean cancelled = future.cancel(false);\n-        if (cancelled) {\n-            solverStatus = SolverStatus.NOT_SOLVING;\n-        } else {\n-            // The solver is either actively solving or has already terminated\n-            solver.terminateEarly();\n-            try {\n-                // Don't return until bestSolutionConsumer won't be called any more\n-                terminatedLatch.await();\n-            } catch (InterruptedException e) {\n-                Thread.currentThread().interrupt();\n-                logger.warn(\"The terminateEarly() call is interrupted.\", e);\n+        future.cancel(false);\n+        synchronized (this) {\n+            if (solverStatus == SolverStatus.SOLVING_SCHEDULED) {\n+                solvingTerminated();\n+            } else if (solverStatus == SolverStatus.SOLVING_ACTIVE) {\n+                // Indirectly triggers solvingTerminated()\n+                solver.terminateEarly();\n+            } else if (solverStatus == SolverStatus.NOT_SOLVING) {\n+                // Do nothing, solvingTerminated() already called\n+            } else {\n+                throw new IllegalStateException(\"Unsupported solverStatus (\" + solverStatus + \").\");\n             }", "originalCommit": "d1b027f12b8a2225a9a07d9039c5105c4dba23e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4bb3d0d882bd830ecdd5eadfef93dee9c5e554ad", "url": "https://github.com/kiegroup/optaplanner/commit/4bb3d0d882bd830ecdd5eadfef93dee9c5e554ad", "message": "Use AtomicReference for solverStatus", "committedDate": "2020-03-18T12:41:13Z", "type": "commit"}, {"oid": "4bb3d0d882bd830ecdd5eadfef93dee9c5e554ad", "url": "https://github.com/kiegroup/optaplanner/commit/4bb3d0d882bd830ecdd5eadfef93dee9c5e554ad", "message": "Use AtomicReference for solverStatus", "committedDate": "2020-03-18T12:41:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyMTkwNw==", "url": "https://github.com/kiegroup/optaplanner/pull/722#discussion_r394321907", "bodyText": "Looks like this one could be final.", "author": "triceo", "createdAt": "2020-03-18T12:51:36Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/DefaultSolverJob.java", "diffHunk": "@@ -47,8 +48,9 @@\n     private final Consumer<? super Solution_> finalBestSolutionConsumer;\n     private final BiConsumer<? super ProblemId_, ? super Throwable> exceptionHandler;\n \n-    private volatile SolverStatus solverStatus;\n+    private AtomicReference<SolverStatus> solverStatusReference;", "originalCommit": "4bb3d0d882bd830ecdd5eadfef93dee9c5e554ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1c2c8515e9ede2ae2433088478ca717ce5d1188f", "url": "https://github.com/kiegroup/optaplanner/commit/1c2c8515e9ede2ae2433088478ca717ce5d1188f", "message": "Make AtomicReference final", "committedDate": "2020-03-18T12:56:13Z", "type": "commit"}]}