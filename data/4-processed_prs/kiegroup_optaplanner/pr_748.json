{"pr_number": 748, "pr_title": "PLANNER-1861 Prioritizing CS in docs and Javadocs", "pr_createdAt": "2020-04-15T08:40:13Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/748", "timeline": [{"oid": "3f50cf51ec5cc57bd41050cf7920207f1950dc70", "url": "https://github.com/kiegroup/optaplanner/commit/3f50cf51ec5cc57bd41050cf7920207f1950dc70", "message": "PLANNER-1861 Prioritizing CS in docs and Javadocs", "committedDate": "2020-04-15T08:39:16Z", "type": "commit"}, {"oid": "385ecadddea84337cfad1c25e2141ac677914bc1", "url": "https://github.com/kiegroup/optaplanner/commit/385ecadddea84337cfad1c25e2141ac677914bc1", "message": "Less duplication", "committedDate": "2020-04-15T08:47:32Z", "type": "commit"}, {"oid": "5dca3c83183dfcf359c7ea8d94665491fffcb130", "url": "https://github.com/kiegroup/optaplanner/commit/5dca3c83183dfcf359c7ea8d94665491fffcb130", "message": "Don't use \"we\"", "committedDate": "2020-04-15T08:49:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NDkxMA==", "url": "https://github.com/kiegroup/optaplanner/pull/748#discussion_r408694910", "bodyText": "\"we\"", "author": "ge0ffrey", "createdAt": "2020-04-15T09:10:23Z", "path": "optaplanner-docs/src/main/asciidoc/DroolsScoreCalculation/DroolsScoreCalculation-chapter.adoc", "diffHunk": "@@ -301,3 +301,98 @@ end\n Notice how `addSoftConstraintMatch()` specifies that it's a soft constraint,\n and needs a negative number to penalize each match. Otherwise it would reward such matches.\n The parameter `($capacity - $studentSize)` always results in a negative number because `studentSize > $capacity`.\n+\n+\n+[[testingDroolsConstraints]]\n+== Testing Drools-based constraints\n+\n+Drools-based constraints come with a unit testing harness.\n+To use it, first add a test scoped dependency to the `optaplanner-test` jar to take advantage of the JUnit integration\n+and use the `ScoreVerifier` classes to test score rules in DRL (or a constraint match aware incremental score calculator).\n+For example, suppose we want to test these score rules:", "originalCommit": "5dca3c83183dfcf359c7ea8d94665491fffcb130", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NTcyOA==", "url": "https://github.com/kiegroup/optaplanner/pull/748#discussion_r408695728", "bodyText": "ah, it's in my old writing. In any case, if you could replace it with \"you\", that would be nice :)", "author": "ge0ffrey", "createdAt": "2020-04-15T09:11:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NDkxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NjEyMQ==", "url": "https://github.com/kiegroup/optaplanner/pull/748#discussion_r408696121", "bodyText": "\"we have a ...\" -> \"create a ...\"", "author": "ge0ffrey", "createdAt": "2020-04-15T09:12:28Z", "path": "optaplanner-docs/src/main/asciidoc/DroolsScoreCalculation/DroolsScoreCalculation-chapter.adoc", "diffHunk": "@@ -301,3 +301,98 @@ end\n Notice how `addSoftConstraintMatch()` specifies that it's a soft constraint,\n and needs a negative number to penalize each match. Otherwise it would reward such matches.\n The parameter `($capacity - $studentSize)` always results in a negative number because `studentSize > $capacity`.\n+\n+\n+[[testingDroolsConstraints]]\n+== Testing Drools-based constraints\n+\n+Drools-based constraints come with a unit testing harness.\n+To use it, first add a test scoped dependency to the `optaplanner-test` jar to take advantage of the JUnit integration\n+and use the `ScoreVerifier` classes to test score rules in DRL (or a constraint match aware incremental score calculator).\n+For example, suppose we want to test these score rules:\n+\n+[source,options=\"nowrap\"]\n+----\n+global HardSoftScoreHolder scoreHolder;\n+\n+rule \"requiredCpuPowerTotal\"\n+    when\n+        ...\n+    then\n+        scoreHolder.addHardConstraintMatch(...);\n+end\n+\n+...\n+\n+rule \"computerCost\"\n+    when\n+        ...\n+    then\n+        scoreHolder.addSoftConstraintMatch(...);\n+end\n+----\n+\n+For each score rule, we have a separate `@Test` that only tests the effect of that score rule on the score:", "originalCommit": "5dca3c83183dfcf359c7ea8d94665491fffcb130", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1f9edbf4c15b8194bd2a0c59bdeddb1ed61acba3", "url": "https://github.com/kiegroup/optaplanner/commit/1f9edbf4c15b8194bd2a0c59bdeddb1ed61acba3", "message": "Code review comments", "committedDate": "2020-04-15T11:48:52Z", "type": "commit"}]}