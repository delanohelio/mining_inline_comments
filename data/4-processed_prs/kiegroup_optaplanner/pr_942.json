{"pr_number": 942, "pr_title": "PLANNER-1817 Finish the Conference Scheduling constraint provider", "pr_createdAt": "2020-09-22T12:22:32Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/942", "timeline": [{"oid": "769ba915b1ec306e1730bc6bfbf01a7730c36aeb", "url": "https://github.com/kiegroup/optaplanner/commit/769ba915b1ec306e1730bc6bfbf01a7730c36aeb", "message": "Fix some TODOs", "committedDate": "2020-09-23T06:56:18Z", "type": "commit"}, {"oid": "4f7b19e3505f17167388582e537b6a2be30697ef", "url": "https://github.com/kiegroup/optaplanner/commit/4f7b19e3505f17167388582e537b6a2be30697ef", "message": "WIP", "committedDate": "2020-09-23T06:57:29Z", "type": "commit"}, {"oid": "cf528c0029471ffa759cd9ebf7afb74910ec7a28", "url": "https://github.com/kiegroup/optaplanner/commit/cf528c0029471ffa759cd9ebf7afb74910ec7a28", "message": "More", "committedDate": "2020-09-23T06:57:32Z", "type": "commit"}, {"oid": "293d64e3c246810f696ced552429c4c0ac9e7f31", "url": "https://github.com/kiegroup/optaplanner/commit/293d64e3c246810f696ced552429c4c0ac9e7f31", "message": "Enable more examples", "committedDate": "2020-09-23T06:57:35Z", "type": "commit"}, {"oid": "747289da8120392e782d101d2d0b8cf2e99365ab", "url": "https://github.com/kiegroup/optaplanner/commit/747289da8120392e782d101d2d0b8cf2e99365ab", "message": "Finished", "committedDate": "2020-09-23T08:06:39Z", "type": "commit"}, {"oid": "747289da8120392e782d101d2d0b8cf2e99365ab", "url": "https://github.com/kiegroup/optaplanner/commit/747289da8120392e782d101d2d0b8cf2e99365ab", "message": "Finished", "committedDate": "2020-09-23T08:06:39Z", "type": "forcePushed"}, {"oid": "1ffb0277d6e03cd5404543f628004059141067c6", "url": "https://github.com/kiegroup/optaplanner/commit/1ffb0277d6e03cd5404543f628004059141067c6", "message": "Formatting", "committedDate": "2020-09-23T08:09:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI5MjcwNQ==", "url": "https://github.com/kiegroup/optaplanner/pull/942#discussion_r493292705", "bodyText": "Nitpick: ideally the with methods are in the same order as the fields (and the getter/setters), so tagSet after withUnavailableTimeslotSet. It's just a bit nicer to read, and some OCD example users love such detail :)", "author": "ge0ffrey", "createdAt": "2020-09-23T08:13:23Z", "path": "optaplanner-examples/src/main/java/org/optaplanner/examples/conferencescheduling/domain/Room.java", "diffHunk": "@@ -93,6 +93,16 @@ public void setTagSet(Set<String> tagSet) {\n     // With methods\n     // ************************************************************************\n \n+    public Room withCapacity(int capacity) {\n+        this.capacity = capacity;\n+        return this;\n+    }\n+\n+    public Room withTagSet(Set<String> tagSet) {\n+        this.tagSet = tagSet;\n+        return this;\n+    }", "originalCommit": "1ffb0277d6e03cd5404543f628004059141067c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI5MzA2MQ==", "url": "https://github.com/kiegroup/optaplanner/pull/942#discussion_r493293061", "bodyText": "Btw, a bit below in this class, there is a parameter named unavailableTimeslotTest instead of ...Set incorrectly.", "author": "ge0ffrey", "createdAt": "2020-09-23T08:13:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI5MjcwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMwMDcwNQ==", "url": "https://github.com/kiegroup/optaplanner/pull/942#discussion_r493300705", "bodyText": "A variable name like TIMESLOT1 etc makes the tests harder to understand.\nNow I first have to build a mental mapping of timeslot 1, 2, 3 and 4 on how they overlap and they gaps, and then read the constraint test to validate if the assertions are asserting the right thing.\nAlso, a conference starting at midnight 1 jan 1970 isn't a realistic test I'd argue.\nProposal: instead of TIMESLOT_1 can we make it MONDAY_9_TO_10 and use \"1-Feb 2000 9:00\" as a value?\nIf a constraint test then checks if a speaker assigned to talks on MONDAY_9_TO_10 and MONDAY_9_TO_11 overlap, that's much easier to read.", "author": "ge0ffrey", "createdAt": "2020-09-23T08:21:27Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/conferencescheduling/optional/score/ConferenceSchedulingConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,919 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.conferencescheduling.optional.score;\n+\n+import static java.util.Collections.emptySet;\n+import static java.util.Collections.singleton;\n+import static java.util.Collections.singletonList;\n+\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+import org.junit.jupiter.api.Test;\n+import org.optaplanner.examples.conferencescheduling.domain.ConferenceConstraintConfiguration;\n+import org.optaplanner.examples.conferencescheduling.domain.ConferenceSolution;\n+import org.optaplanner.examples.conferencescheduling.domain.Room;\n+import org.optaplanner.examples.conferencescheduling.domain.Speaker;\n+import org.optaplanner.examples.conferencescheduling.domain.Talk;\n+import org.optaplanner.examples.conferencescheduling.domain.Timeslot;\n+import org.optaplanner.test.api.score.stream.ConstraintVerifier;\n+\n+public class ConferenceSchedulingConstraintProviderTest {\n+\n+    private final ConstraintVerifier<ConferenceSchedulingConstraintProvider, ConferenceSolution> constraintVerifier =\n+            ConstraintVerifier.build(new ConferenceSchedulingConstraintProvider(), ConferenceSolution.class,\n+                    Talk.class);\n+\n+    private static final LocalDateTime START = LocalDateTime.ofInstant(Instant.EPOCH, ZoneId.systemDefault());\n+\n+    private static final Timeslot TIMESLOT1 = new Timeslot(1)\n+            .withStartDateTime(START)\n+            .withEndDateTime(START.plusHours(1))\n+            .withTagSet(singleton(\"a\"));", "originalCommit": "1ffb0277d6e03cd5404543f628004059141067c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMwNDg0Nw==", "url": "https://github.com/kiegroup/optaplanner/pull/942#discussion_r493304847", "bodyText": "Potential missing test coverage:\nThe conf scheduling example allows for this:\n\nTimeslot A is from 9:00 to 10:00 with talk type \"breakout\".\nTimeslot B is from 9:20 to 11:20 with talk type \"lab\".\nNotice how the first is 60 minutes, the second 120 minutes and they overlap for 40 minutes.\n\nI don't see that kind of complexity in these timeslots as far as I call tell.\nSome of the constraints will penalize based on the overlapping time, so by a factor of 40.\nIn that case it should be asserted that the matchPenality is 40, not 60 or 120 or 160 or 180.\nOther constraints will penalize on the union time, so 160, or the summed time, so 180.", "author": "ge0ffrey", "createdAt": "2020-09-23T08:25:43Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/conferencescheduling/optional/score/ConferenceSchedulingConstraintProviderTest.java", "diffHunk": "@@ -0,0 +1,919 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.examples.conferencescheduling.optional.score;\n+\n+import static java.util.Collections.emptySet;\n+import static java.util.Collections.singleton;\n+import static java.util.Collections.singletonList;\n+\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+import org.junit.jupiter.api.Test;\n+import org.optaplanner.examples.conferencescheduling.domain.ConferenceConstraintConfiguration;\n+import org.optaplanner.examples.conferencescheduling.domain.ConferenceSolution;\n+import org.optaplanner.examples.conferencescheduling.domain.Room;\n+import org.optaplanner.examples.conferencescheduling.domain.Speaker;\n+import org.optaplanner.examples.conferencescheduling.domain.Talk;\n+import org.optaplanner.examples.conferencescheduling.domain.Timeslot;\n+import org.optaplanner.test.api.score.stream.ConstraintVerifier;\n+\n+public class ConferenceSchedulingConstraintProviderTest {\n+\n+    private final ConstraintVerifier<ConferenceSchedulingConstraintProvider, ConferenceSolution> constraintVerifier =\n+            ConstraintVerifier.build(new ConferenceSchedulingConstraintProvider(), ConferenceSolution.class,\n+                    Talk.class);\n+\n+    private static final LocalDateTime START = LocalDateTime.ofInstant(Instant.EPOCH, ZoneId.systemDefault());\n+\n+    private static final Timeslot TIMESLOT1 = new Timeslot(1)\n+            .withStartDateTime(START)\n+            .withEndDateTime(START.plusHours(1))\n+            .withTagSet(singleton(\"a\"));\n+    private static final Timeslot TIMESLOT2 = new Timeslot(2)\n+            .withStartDateTime(TIMESLOT1.getEndDateTime())\n+            .withEndDateTime(TIMESLOT1.getEndDateTime().plusHours(1))\n+            .withTagSet(singleton(\"b\"));\n+    private static final Timeslot TIMESLOT3 = new Timeslot(3)\n+            .withStartDateTime(TIMESLOT2.getEndDateTime())\n+            .withEndDateTime(TIMESLOT2.getEndDateTime().plusHours(1))\n+            .withTagSet(singleton(\"c\"));\n+    private static final Timeslot TIMESLOT_ANOTHER_DAY = new Timeslot(3)\n+            .withStartDateTime(TIMESLOT1.getStartDateTime().plusDays(1))\n+            .withEndDateTime(TIMESLOT1.getStartDateTime().plusDays(1).plusHours(1))\n+            .withTagSet(singleton(\"c\"));", "originalCommit": "1ffb0277d6e03cd5404543f628004059141067c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "53c7f272337c509edc4b285936e3a3c54af2527b", "url": "https://github.com/kiegroup/optaplanner/commit/53c7f272337c509edc4b285936e3a3c54af2527b", "message": "Address code review comments", "committedDate": "2020-09-23T08:43:20Z", "type": "commit"}]}