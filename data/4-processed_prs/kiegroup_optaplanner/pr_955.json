{"pr_number": 955, "pr_title": "Implemented a JsonSolutionFileIO for benchmark input solution files", "pr_createdAt": "2020-10-02T21:33:59Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/955", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE1MjM2Mg==", "url": "https://github.com/kiegroup/optaplanner/pull/955#discussion_r499152362", "bodyText": "Naming wise, let's use the word Jackson in here, in case we build a Jsonb version too.", "author": "ge0ffrey", "createdAt": "2020-10-03T14:27:07Z", "path": "optaplanner-persistence/optaplanner-persistence-jackson/src/main/java/org/optaplanner/persistence/jackson/impl/domain/solution/JsonSolutionFileIO.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.optaplanner.persistence.jackson.impl.domain.solution;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.persistence.common.api.domain.solution.SolutionFileIO;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n+\n+/**\n+ *\n+ * @param <Solution_> the solution type, the class with the {@link PlanningSolution} annotation\n+ */\n+public class JsonSolutionFileIO<Solution_> implements SolutionFileIO<Solution_> {", "originalCommit": "5f54e3081b0aaba03ee83fbbe32c3a5884522bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE1MjU2Mg==", "url": "https://github.com/kiegroup/optaplanner/pull/955#discussion_r499152562", "bodyText": "So JacksonSolutionFileIO? And ...Test.", "author": "ge0ffrey", "createdAt": "2020-10-03T14:29:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE1MjM2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE2NTIyMQ==", "url": "https://github.com/kiegroup/optaplanner/pull/955#discussion_r499165221", "bodyText": "I changed the class JsonSolutionFileIO to JacksonSolutionFileIO which is much more appropriate.", "author": "cemnura", "createdAt": "2020-10-03T17:14:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE1MjM2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2MDgxNg==", "url": "https://github.com/kiegroup/optaplanner/pull/955#discussion_r499060816", "bodyText": "This was the only assertion that this SolutionFileIO unit test had.\nI am not sure how to make these the same objects with Jackson", "author": "cemnura", "createdAt": "2020-10-02T21:36:33Z", "path": "optaplanner-persistence/optaplanner-persistence-jackson/src/test/java/org/optaplanner/persistence/jackson/impl/domain/solution/JsonSolutionFileIOTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jackson.impl.domain.solution;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.optaplanner.core.impl.testdata.util.PlannerAssert.assertAllCodesOfIterator;\n+import static org.optaplanner.core.impl.testdata.util.PlannerAssert.assertCode;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.persistence.jackson.impl.testdata.domain.JacksonTestdataEntity;\n+import org.optaplanner.persistence.jackson.impl.testdata.domain.JacksonTestdataSolution;\n+import org.optaplanner.persistence.jackson.impl.testdata.domain.JacksonTestdataValue;\n+\n+public class JsonSolutionFileIOTest {\n+\n+    private static File solutionTestDir;\n+\n+    @BeforeAll\n+    public static void setup() {\n+        solutionTestDir = new File(\"target/solutionTest/\");\n+        solutionTestDir.mkdirs();\n+    }\n+\n+    @Test\n+    public void readAndWrite() {\n+        JsonSolutionFileIO<JacksonTestdataSolution> solutionFileIO = new JsonSolutionFileIO<>();\n+        File file = new File(solutionTestDir, \"testdataSolution.json\");\n+\n+        JacksonTestdataSolution original = new JacksonTestdataSolution(\"s1\");\n+        JacksonTestdataValue originalV1 = new JacksonTestdataValue(\"v1\");\n+        original.setValueList(Arrays.asList(originalV1, new JacksonTestdataValue(\"v2\")));\n+        original.setEntityList(Arrays.asList(\n+                new JacksonTestdataEntity(\"e1\"), new JacksonTestdataEntity(\"e2\", originalV1), new JacksonTestdataEntity(\"e3\")));\n+        original.setScore(SimpleScore.of(-321));\n+        solutionFileIO.write(original, file);\n+        JacksonTestdataSolution copy = solutionFileIO.read(file);\n+\n+        assertThat(copy).isNotSameAs(original);\n+        assertCode(\"s1\", copy);\n+        assertAllCodesOfIterator(copy.getValueList().iterator(), \"v1\", \"v2\");\n+        assertAllCodesOfIterator(copy.getEntityList().iterator(), \"e1\", \"e2\", \"e3\");\n+        JacksonTestdataValue copyV1 = copy.getValueList().get(0);\n+        JacksonTestdataEntity copyE2 = copy.getEntityList().get(1);\n+        assertCode(\"v1\", copyE2.getValue());\n+        //        assertThat(copyE2.getValue()).isSameAs(copyV1);", "originalCommit": "5f54e3081b0aaba03ee83fbbe32c3a5884522bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE2MzQyMA==", "url": "https://github.com/kiegroup/optaplanner/pull/955#discussion_r499163420", "bodyText": "@ge0ffrey would this assertion in the unit test be of any importance?", "author": "cemnura", "createdAt": "2020-10-03T16:50:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2MDgxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2MTA3Nw==", "url": "https://github.com/kiegroup/optaplanner/pull/955#discussion_r499061077", "bodyText": "Could provide more documentation to explain the construction with Jackson ObjectMapper", "author": "cemnura", "createdAt": "2020-10-02T21:37:22Z", "path": "optaplanner-persistence/optaplanner-persistence-jackson/src/main/java/org/optaplanner/persistence/jackson/impl/domain/solution/JsonSolutionFileIO.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.optaplanner.persistence.jackson.impl.domain.solution;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.persistence.common.api.domain.solution.SolutionFileIO;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n+\n+/**\n+ *\n+ * @param <Solution_> the solution type, the class with the {@link PlanningSolution} annotation", "originalCommit": "5f54e3081b0aaba03ee83fbbe32c3a5884522bc9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8905596ed1828f919fde7da21fd2984a5315e265", "url": "https://github.com/kiegroup/optaplanner/commit/8905596ed1828f919fde7da21fd2984a5315e265", "message": "Implemented a JsonSolutionFileIO for benchmark input solution files\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>", "committedDate": "2020-10-03T16:56:19Z", "type": "commit"}, {"oid": "8905596ed1828f919fde7da21fd2984a5315e265", "url": "https://github.com/kiegroup/optaplanner/commit/8905596ed1828f919fde7da21fd2984a5315e265", "message": "Implemented a JsonSolutionFileIO for benchmark input solution files\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>", "committedDate": "2020-10-03T16:56:19Z", "type": "forcePushed"}, {"oid": "6cff1607e627e3096f5bdfcb730afdd99fe45143", "url": "https://github.com/kiegroup/optaplanner/commit/6cff1607e627e3096f5bdfcb730afdd99fe45143", "message": "Added usage documentation for JsonSolutionFileIO\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>", "committedDate": "2020-10-03T17:40:57Z", "type": "commit"}, {"oid": "50343139a3069c6412d2e08809f6862a41812685", "url": "https://github.com/kiegroup/optaplanner/commit/50343139a3069c6412d2e08809f6862a41812685", "message": "Fixed format violation\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>", "committedDate": "2020-10-03T17:52:09Z", "type": "commit"}, {"oid": "e0bc62e916d5d21265676fc25e11d70975d5477f", "url": "https://github.com/kiegroup/optaplanner/commit/e0bc62e916d5d21265676fc25e11d70975d5477f", "message": "Removed redundant cast\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>", "committedDate": "2020-10-03T18:44:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM3ODQ1Mg==", "url": "https://github.com/kiegroup/optaplanner/pull/955#discussion_r499378452", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the JSON file requires specific Jackson modules and features to be enabled/disabled.\n          \n          \n            \n            You could create your desired object mapper as an dependency to the JacksonSolutionFileIO as the following.\n          \n          \n            \n            \n          \n          \n            \n            If the JSON file requires specific Jackson modules and features to be enabled/disabled.\n          \n          \n            \n            You could create your desired object mapper as a dependency to the JacksonSolutionFileIO as follows:", "author": "triceo", "createdAt": "2020-10-05T06:57:52Z", "path": "optaplanner-docs/src/main/asciidoc/BenchmarkingAndTweaking/BenchmarkingAndTweaking-chapter.adoc", "diffHunk": "@@ -240,6 +240,47 @@ Regardless, XML is still a very verbose format.\n Reading or writing large datasets in this format can cause an `OutOfMemoryError`, `StackOverflowError`\n or large performance degradation.\n \n+[[JacksonSolutionFileIO]]\n+==== `JacksonSolutionFileIO`: serialize to and from an JSON format\n+\n+To read and write solutions in JSON format via Jackson, extend the `JacksonSolutionFileIO`:\n+\n+[source,java,options=\"nowrap\"]\n+----\n+public class NQueensJsonSolutionFileIO extends JacksonSolutionFileIO<NQueens> {\n+    public NQueensJsonSolutionFileIO() {\n+        // NQueens is the @PlanningSolution class.\n+        super(NQueens.class);\n+    }\n+}\n+----\n+If the JSON file requires specific Jackson modules and features to be enabled/disabled.\n+You could create your desired object mapper as an dependency to the JacksonSolutionFileIO as the following.", "originalCommit": "e0bc62e916d5d21265676fc25e11d70975d5477f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM3ODU3OA==", "url": "https://github.com/kiegroup/optaplanner/pull/955#discussion_r499378578", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            and use it in the benchmark configuration:\n          \n          \n            \n            Then use it in the benchmark configuration like so:", "author": "triceo", "createdAt": "2020-10-05T06:58:11Z", "path": "optaplanner-docs/src/main/asciidoc/BenchmarkingAndTweaking/BenchmarkingAndTweaking-chapter.adoc", "diffHunk": "@@ -240,6 +240,47 @@ Regardless, XML is still a very verbose format.\n Reading or writing large datasets in this format can cause an `OutOfMemoryError`, `StackOverflowError`\n or large performance degradation.\n \n+[[JacksonSolutionFileIO]]\n+==== `JacksonSolutionFileIO`: serialize to and from an JSON format\n+\n+To read and write solutions in JSON format via Jackson, extend the `JacksonSolutionFileIO`:\n+\n+[source,java,options=\"nowrap\"]\n+----\n+public class NQueensJsonSolutionFileIO extends JacksonSolutionFileIO<NQueens> {\n+    public NQueensJsonSolutionFileIO() {\n+        // NQueens is the @PlanningSolution class.\n+        super(NQueens.class);\n+    }\n+}\n+----\n+If the JSON file requires specific Jackson modules and features to be enabled/disabled.\n+You could create your desired object mapper as an dependency to the JacksonSolutionFileIO as the following.\n+[source,java,options=\"nowrap\"]\n+----\n+public class NQueensJsonSolutionFileIO extends JacksonSolutionFileIO<NQueens> {\n+    public NQueensJsonSolutionFileIO() {\n+        // NQueens is the @PlanningSolution class.\n+        super(NQueens.class,\n+                new ObjectMapper()\n+                        .registerModule(new JavaTimeModule())\n+                        .disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)\n+        );\n+    }\n+\n+}\n+----\n+\n+and use it in the benchmark configuration:", "originalCommit": "e0bc62e916d5d21265676fc25e11d70975d5477f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4MDU2MA==", "url": "https://github.com/kiegroup/optaplanner/pull/955#discussion_r499380560", "bodyText": "Please make the class final, the fields private final.", "author": "triceo", "createdAt": "2020-10-05T07:03:01Z", "path": "optaplanner-persistence/optaplanner-persistence-jackson/src/main/java/org/optaplanner/persistence/jackson/impl/domain/solution/JacksonSolutionFileIO.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.optaplanner.persistence.jackson.impl.domain.solution;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.persistence.common.api.domain.solution.SolutionFileIO;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ *\n+ * @param <Solution_> the solution type, the class with the {@link PlanningSolution} annotation\n+ */\n+public class JacksonSolutionFileIO<Solution_> implements SolutionFileIO<Solution_> {\n+\n+    protected Class<Solution_> clazz;\n+    protected ObjectMapper mapper;", "originalCommit": "e0bc62e916d5d21265676fc25e11d70975d5477f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMDk5Mw==", "url": "https://github.com/kiegroup/optaplanner/pull/955#discussion_r499820993", "bodyText": "Sure thing i could convert the fields to be private final. Since the clazz and the mapper should never be changed after initialization.\nHowever, wouldn't making the class final prevent clients from extending this SolutionFileIO implementation for there own planning solution.\nTherefore, clients would not be able to use the SolutionFileIO as explained in the documentation similar to XStreamSolutionFIleIO.\nI made fields private final and waiting for your feedback on making the class final.", "author": "cemnura", "createdAt": "2020-10-05T19:25:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4MDU2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyNDM4Ng==", "url": "https://github.com/kiegroup/optaplanner/pull/955#discussion_r499824386", "bodyText": "Good point on the class. I forgot we would be extending it. Nevermind then.", "author": "triceo", "createdAt": "2020-10-05T19:32:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4MDU2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyNTAwNQ==", "url": "https://github.com/kiegroup/optaplanner/pull/955#discussion_r499825005", "bodyText": "Great! Should I mark as resolved?", "author": "cemnura", "createdAt": "2020-10-05T19:33:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4MDU2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyNjE0OA==", "url": "https://github.com/kiegroup/optaplanner/pull/955#discussion_r499826148", "bodyText": "Resolving.", "author": "triceo", "createdAt": "2020-10-05T19:35:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4MDU2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4MTE2OQ==", "url": "https://github.com/kiegroup/optaplanner/pull/955#discussion_r499381169", "bodyText": "I would like to see a proof of concept that this actually works. The following article suggests that it is possible with some extra annotations on the data model:\nhttps://stackoverflow.com/questions/18306040/jackson-deserialize-jsonidentityreference-alwaysasid-true/29742035#29742035\nYou may need to adapt JacksonTestdataSolution to get it done.", "author": "triceo", "createdAt": "2020-10-05T07:04:35Z", "path": "optaplanner-persistence/optaplanner-persistence-jackson/src/test/java/org/optaplanner/persistence/jackson/impl/domain/solution/JacksonSolutionFileIOTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.persistence.jackson.impl.domain.solution;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.optaplanner.core.impl.testdata.util.PlannerAssert.assertAllCodesOfIterator;\n+import static org.optaplanner.core.impl.testdata.util.PlannerAssert.assertCode;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.optaplanner.core.api.score.buildin.simple.SimpleScore;\n+import org.optaplanner.persistence.jackson.impl.testdata.domain.JacksonTestdataEntity;\n+import org.optaplanner.persistence.jackson.impl.testdata.domain.JacksonTestdataSolution;\n+import org.optaplanner.persistence.jackson.impl.testdata.domain.JacksonTestdataValue;\n+\n+public class JacksonSolutionFileIOTest {\n+\n+    private static File solutionTestDir;\n+\n+    @BeforeAll\n+    public static void setup() {\n+        solutionTestDir = new File(\"target/solutionTest/\");\n+        solutionTestDir.mkdirs();\n+    }\n+\n+    @Test\n+    public void readAndWrite() {\n+        JacksonSolutionFileIO<JacksonTestdataSolution> solutionFileIO =\n+                new JacksonSolutionFileIO<>(JacksonTestdataSolution.class);\n+        File file = new File(solutionTestDir, \"testdataSolution.json\");\n+\n+        JacksonTestdataSolution original = new JacksonTestdataSolution(\"s1\");\n+        JacksonTestdataValue originalV1 = new JacksonTestdataValue(\"v1\");\n+        original.setValueList(Arrays.asList(originalV1, new JacksonTestdataValue(\"v2\")));\n+        original.setEntityList(Arrays.asList(\n+                new JacksonTestdataEntity(\"e1\"), new JacksonTestdataEntity(\"e2\", originalV1), new JacksonTestdataEntity(\"e3\")));\n+        original.setScore(SimpleScore.of(-321));\n+        solutionFileIO.write(original, file);\n+        JacksonTestdataSolution copy = solutionFileIO.read(file);\n+\n+        assertThat(copy).isNotSameAs(original);\n+        assertCode(\"s1\", copy);\n+        assertAllCodesOfIterator(copy.getValueList().iterator(), \"v1\", \"v2\");\n+        assertAllCodesOfIterator(copy.getEntityList().iterator(), \"e1\", \"e2\", \"e3\");\n+        JacksonTestdataValue copyV1 = copy.getValueList().get(0);\n+        JacksonTestdataEntity copyE2 = copy.getEntityList().get(1);\n+        assertCode(\"v1\", copyE2.getValue());\n+        //        assertThat(copyE2.getValue()).isSameAs(copyV1);", "originalCommit": "e0bc62e916d5d21265676fc25e11d70975d5477f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0MjEwNQ==", "url": "https://github.com/kiegroup/optaplanner/pull/955#discussion_r499842105", "bodyText": "I tried the article you provided. However, I was unable to find any success.\nI stumbled upon the following suggestion:\nhttps://stackoverflow.com/questions/37640985/jackson-referencing-the-same-object\nThis way I was able de-serialize the objects string values as one object. Therefore, assertion that theJacksonTestdataValue code field are the same objects.\nHowever, this assertion seems to be a Jackson feature rather then enabling loading an JSON input solution file with jackson.\nI added the the code to enable this assertion to be successful so you could observe. Would reorganize upon your approval.", "author": "cemnura", "createdAt": "2020-10-05T20:06:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4MTE2OQ=="}], "type": "inlineReview"}, {"oid": "3dd1b55335e3071a263da8884841bfbdd6b4ba0d", "url": "https://github.com/kiegroup/optaplanner/commit/3dd1b55335e3071a263da8884841bfbdd6b4ba0d", "message": "Update optaplanner-docs/src/main/asciidoc/BenchmarkingAndTweaking/BenchmarkingAndTweaking-chapter.adoc\n\nCo-authored-by: Luk\u00e1\u0161 Petrovick\u00fd <lukas@petrovicky.net>", "committedDate": "2020-10-05T18:51:02Z", "type": "commit"}, {"oid": "2558d61149a0257015751c78fe5585f9f429c92a", "url": "https://github.com/kiegroup/optaplanner/commit/2558d61149a0257015751c78fe5585f9f429c92a", "message": "Update optaplanner-docs/src/main/asciidoc/BenchmarkingAndTweaking/BenchmarkingAndTweaking-chapter.adoc\n\nCo-authored-by: Luk\u00e1\u0161 Petrovick\u00fd <lukas@petrovicky.net>", "committedDate": "2020-10-05T18:51:12Z", "type": "commit"}, {"oid": "76033b3d0de78212dfbffd0ab50dc964d1b047e4", "url": "https://github.com/kiegroup/optaplanner/commit/76033b3d0de78212dfbffd0ab50dc964d1b047e4", "message": "Converted fields to private final\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>", "committedDate": "2020-10-05T19:27:21Z", "type": "commit"}, {"oid": "7d425e8dda5c561c4d6c9b371c9293f61e2d09b8", "url": "https://github.com/kiegroup/optaplanner/commit/7d425e8dda5c561c4d6c9b371c9293f61e2d09b8", "message": "Enabled same string values to be the same object when Jackson deserialization\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>", "committedDate": "2020-10-05T20:06:18Z", "type": "commit"}, {"oid": "a32aa83dc9054c753c5be63e7dccdcbfa77c4254", "url": "https://github.com/kiegroup/optaplanner/commit/a32aa83dc9054c753c5be63e7dccdcbfa77c4254", "message": "Fixed format violation\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>", "committedDate": "2020-10-06T09:38:51Z", "type": "commit"}, {"oid": "e647e6df84f8474c836e4e4f1ddd1773b0b098a1", "url": "https://github.com/kiegroup/optaplanner/commit/e647e6df84f8474c836e4e4f1ddd1773b0b098a1", "message": "Enabled jackson-annotations dependency to be test scoped\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>", "committedDate": "2020-10-06T15:41:53Z", "type": "commit"}]}