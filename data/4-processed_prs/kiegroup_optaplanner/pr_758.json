{"pr_number": 758, "pr_title": "Machine reassignment snapshot test", "pr_createdAt": "2020-04-27T12:22:27Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/758", "timeline": [{"oid": "d33874165526f094b6bcfd157844307de931b214", "url": "https://github.com/kiegroup/optaplanner/commit/d33874165526f094b6bcfd157844307de931b214", "message": "Remove unnecessary facts from balanceCost tests", "committedDate": "2020-04-27T12:15:43Z", "type": "commit"}, {"oid": "cf2831e5734f843e67f6ea658da084639fe61926", "url": "https://github.com/kiegroup/optaplanner/commit/cf2831e5734f843e67f6ea658da084639fe61926", "message": "Add a snapshot test of machine reassignment CSP", "committedDate": "2020-04-27T12:15:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk4Nzc5OA==", "url": "https://github.com/kiegroup/optaplanner/pull/758#discussion_r415987798", "bodyText": "It's good to have a givenSolution() test here, and in a few other examples. But it also increases the maintenance burden: when refactoring domain classes of these examples, the xml changes (I've seen that a lot).\n@triceo I recommend to use givenSolution() test sparingly, not for all examples. But all examples must have a ConstraintProvider and every constraint must be tested in isolation with a ConstraintVerifier. Wdyt?", "author": "ge0ffrey", "createdAt": "2020-04-27T17:01:10Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/machinereassignment/solver/score/MachineReassignmentConstraintProviderTest.java", "diffHunk": "@@ -347,8 +350,21 @@ public void balanceCostSingleMachine() {\n \n         constraintVerifier.verifyThat(MachineReassignmentConstraintProvider::balanceCost)\n                 .given(cpu, mem, disk, balancePenaltyCpuMem, machine, machineCapacityCpu, machineCapacityMem,\n-                        machineCapacityDisk,\n-                        process, processRequirementCpu, processRequirementMem, processRequirementDisk, processAssignment)\n+                        machineCapacityDisk, process, processAssignment)\n                 .penalizesBy(2L);\n     }\n+    \n+    @Test\n+    public void solutionWithMultipleConstraints() throws IOException {\n+        constraintVerifier.verifyThat()\n+                .givenSolution(readSolution(\"model-a1-1-0hard-44306501soft.xml\"))\n+                .scores(HardSoftLongScore.of(-0, -44306501));\n+    }", "originalCommit": "cf2831e5734f843e67f6ea658da084639fe61926", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}