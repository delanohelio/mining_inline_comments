{"pr_number": 764, "pr_title": "PLANNER-1003 Migrate tests to JUnit 5 API", "pr_createdAt": "2020-04-28T20:32:45Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/764", "timeline": [{"oid": "9e19fe794771747af4d9efcaad4b937c5b0d66cb", "url": "https://github.com/kiegroup/optaplanner/commit/9e19fe794771747af4d9efcaad4b937c5b0d66cb", "message": "Upgrade Mockito to 3.1.0", "committedDate": "2020-04-28T09:50:31Z", "type": "commit"}, {"oid": "77498ce32a044aa0f87fe22587f9e789954d5907", "url": "https://github.com/kiegroup/optaplanner/commit/77498ce32a044aa0f87fe22587f9e789954d5907", "message": "Add JUnit 5 dependencies (API, engine)", "committedDate": "2020-04-28T09:50:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwOTY4MQ==", "url": "https://github.com/kiegroup/optaplanner/pull/764#discussion_r416909681", "bodyText": "How could this be possible? If both had to throw, then the original test would never have reached the second one.", "author": "triceo", "createdAt": "2020-04-28T20:43:49Z", "path": "optaplanner-core/src/test/java/org/optaplanner/core/api/score/buildin/hardmediumsoftbigdecimal/HardMediumSoftBigDecimalScoreTest.java", "diffHunk": "@@ -73,10 +74,12 @@ public void testToString() {\n                 HardMediumSoftBigDecimalScore.ofUninitialized(-7, new BigDecimal(\"-147.2\"), new BigDecimal(\"-3.20\"), new BigDecimal(\"-258.3\")).toString());\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n     public void parseScoreIllegalArgument() {\n-        HardMediumSoftBigDecimalScore.parseScore(\"-147.2\");\n-        HardMediumSoftBigDecimalScore.parseScore(\"-147.2hard/-258.3soft\");\n+        assertThatIllegalArgumentException()\n+                .isThrownBy(() -> HardMediumSoftBigDecimalScore.parseScore(\"-147.2\"));\n+        assertThatIllegalArgumentException()\n+                .isThrownBy(() -> HardMediumSoftBigDecimalScore.parseScore(\"-147.2hard/-258.3soft\"));", "originalCommit": "af74fc106c737d3a283145b90ef789491e5b1e63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyMDQ4OQ==", "url": "https://github.com/kiegroup/optaplanner/pull/764#discussion_r417120489", "bodyText": "jUnit4 does not care - if at least one of the expressions throws an exception, the test passes. Now the test can actually work.", "author": "rsynek", "createdAt": "2020-04-29T07:34:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwOTY4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0MDk2MA==", "url": "https://github.com/kiegroup/optaplanner/pull/764#discussion_r417140960", "bodyText": "Yes that is the drawback of the JUnit 4 approach. The test will pass no matter the line at which the exception is thrown. In this case, both statements throw but the second one was never reached.", "author": "yurloc", "createdAt": "2020-04-29T08:13:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwOTY4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkxNDYwNA==", "url": "https://github.com/kiegroup/optaplanner/pull/764#discussion_r416914604", "bodyText": "Wouldn't it be easier to just fix it, instead of adding the FIXME? :-)", "author": "triceo", "createdAt": "2020-04-28T20:52:25Z", "path": "optaplanner-core/src/test/java/org/optaplanner/core/impl/localsearch/decider/acceptor/simulatedannealing/SimulatedAnnealingAcceptorTest.java", "diffHunk": "@@ -102,11 +103,12 @@ public void lateAcceptanceSize() {\n         acceptor.phaseEnded(phaseScope);\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n     public void negativeSimulatedAnnealingSize() {\n         SimulatedAnnealingAcceptor acceptor = new SimulatedAnnealingAcceptor();\n-        acceptor.setStartingTemperature(HardMediumSoftScore.parseScore(\"1, -1, 2\"));\n-        acceptor.phaseStarted(null);\n+        // FIXME this tests score parsing\n+        assertThatIllegalArgumentException()\n+                .isThrownBy(() -> acceptor.setStartingTemperature(HardMediumSoftScore.parseScore(\"1, -1, 2\")));", "originalCommit": "af74fc106c737d3a283145b90ef789491e5b1e63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0OTIxNw==", "url": "https://github.com/kiegroup/optaplanner/pull/764#discussion_r417149217", "bodyText": "It was easier to add the fixme note than to make a decision immediately.\nI've just reviewed the test and I think I can fix it. Thanks for pointing it out!", "author": "yurloc", "createdAt": "2020-04-29T08:29:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkxNDYwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyMDg1NQ==", "url": "https://github.com/kiegroup/optaplanner/pull/764#discussion_r416920855", "bodyText": "Ideally, the @Rules that require this to be included would be gone, too.\nSome are easier to replace than others.", "author": "triceo", "createdAt": "2020-04-28T21:03:27Z", "path": "optaplanner-core/pom.xml", "diffHunk": "@@ -93,6 +93,27 @@\n       <groupId>com.thoughtworks.xstream</groupId>\n       <artifactId>xstream</artifactId>\n     </dependency>\n+    <!-- Testing -->\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-api</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-migrationsupport</artifactId>\n+      <scope>test</scope>\n+    </dependency>", "originalCommit": "af74fc106c737d3a283145b90ef789491e5b1e63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExNzQ3NQ==", "url": "https://github.com/kiegroup/optaplanner/pull/764#discussion_r417117475", "bodyText": "I think it can be addressed in a separate PR to avoid holding this one open for too long.", "author": "rsynek", "createdAt": "2020-04-29T07:28:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyMDg1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUzMDI0NA==", "url": "https://github.com/kiegroup/optaplanner/pull/764#discussion_r417530244", "bodyText": "Done.", "author": "yurloc", "createdAt": "2020-04-29T18:39:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyMDg1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE2MTc5NQ==", "url": "https://github.com/kiegroup/optaplanner/pull/764#discussion_r417161795", "bodyText": "Should this be rather org.junit.jupiter.api.Assertions (or Assertions from the AssertJ library)? There are more such imports in other test classes.", "author": "rsynek", "createdAt": "2020-04-29T08:51:10Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/nqueens/solver/tracking/NQueensConstructionHeuristicTrackingTest.java", "diffHunk": "@@ -37,27 +36,15 @@\n import org.optaplanner.examples.nqueens.domain.NQueens;\n import org.optaplanner.examples.nqueens.persistence.NQueensGenerator;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertNotNull;", "originalCommit": "af74fc106c737d3a283145b90ef789491e5b1e63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE4MDI1Ng==", "url": "https://github.com/kiegroup/optaplanner/pull/764#discussion_r417180256", "bodyText": "I may be wrong here, but I ran into something similar elsewhere. JUnit 5, in combination with Surefire, would just silently skip some tests.\nSee https://stackoverflow.com/questions/36970384/surefire-is-not-picking-up-junit-5-tests for more.", "author": "triceo", "createdAt": "2020-04-29T09:23:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE2MTc5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1NDQyNA==", "url": "https://github.com/kiegroup/optaplanner/pull/764#discussion_r417454424", "bodyText": "Assertions are out of scope of this PR although it makes sense to completely drop dependency on JUnit 4. Maybe a simple regex on the import statement would solve that but I really want to avoid scope creep.\nJUnit 5 migration tip:\n\nNote that you may continue to use assertion methods from org.junit.Assert or any other assertion library ...", "author": "yurloc", "createdAt": "2020-04-29T16:37:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE2MTc5NQ=="}], "type": "inlineReview"}, {"oid": "dfe0654d2a850cfa30f19fa3acc72c24f6d922dd", "url": "https://github.com/kiegroup/optaplanner/commit/dfe0654d2a850cfa30f19fa3acc72c24f6d922dd", "message": "Fix AbstractPhaseTest names and group them using dynamicContainer()", "committedDate": "2020-04-29T09:25:42Z", "type": "forcePushed"}, {"oid": "7c22ebb079cf4d9155c54ca2a2e863f110f5253d", "url": "https://github.com/kiegroup/optaplanner/commit/7c22ebb079cf4d9155c54ca2a2e863f110f5253d", "message": "Fix AbstractPhaseTest names and group them using dynamicContainer()", "committedDate": "2020-04-29T09:44:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI2NzE2Mg==", "url": "https://github.com/kiegroup/optaplanner/pull/764#discussion_r417267162", "bodyText": "Since the check is made here in the factory method, we have 1 skipped test for each turtle test class instead of skipping individual dynamic tests.\nI just realized we can improve this even further by simply returning an empty stream from the test factory if turtle tests are not enabled. I think this is a nice use of the dynamic test feature.", "author": "yurloc", "createdAt": "2020-04-29T12:12:47Z", "path": "optaplanner-examples/src/test/java/org/optaplanner/examples/common/app/SolveAllTurtleTest.java", "diffHunk": "@@ -32,24 +36,36 @@\n /**\n  * @param <Solution_> the solution type, the class with the {@link PlanningSolution} annotation\n  */\n-@RunWith(Parameterized.class)\n public abstract class SolveAllTurtleTest<Solution_> extends AbstractTurtleTest {\n \n+    interface ProblemFactory<Solution_> extends Function<File, Solution_> {\n+\n+        default Solution_ loadProblem(File f) {\n+            return apply(f);\n+        }\n+    }\n+\n     private static final String MOVE_THREAD_COUNT_OVERRIDE = System.getProperty(TestSystemProperties.MOVE_THREAD_COUNT);\n \n-    private final String solverConfigResource;\n+    protected abstract List<File> getSolutionFiles(CommonApp<Solution_> commonApp);\n \n-    public SolveAllTurtleTest(String solverConfigResource) {\n-        this.solverConfigResource = solverConfigResource;\n-    }\n+    protected abstract CommonApp<Solution_> createCommonApp();\n \n-    protected abstract Solution_ readProblem();\n+    protected abstract ProblemFactory<Solution_> createProblemFactory(CommonApp<Solution_> commonApp);\n \n-    @Test\n-    public void runFastAndFullAssert() {\n+    @TestFactory\n+    Stream<DynamicTest> runFastAndFullAssert() {\n         checkRunTurtleTests();", "originalCommit": "7c22ebb079cf4d9155c54ca2a2e863f110f5253d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM1ODE5MA==", "url": "https://github.com/kiegroup/optaplanner/pull/764#discussion_r417358190", "bodyText": "Thank you for pointing out. Makes sense.\nMake sure that the skipped tests count comparison take this into account and ignores that difference - that's fine.", "author": "ge0ffrey", "createdAt": "2020-04-29T14:26:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI2NzE2Mg=="}], "type": "inlineReview"}, {"oid": "03705a397d0c45ce65ef10c6aa55546992c0c16e", "url": "https://github.com/kiegroup/optaplanner/commit/03705a397d0c45ce65ef10c6aa55546992c0c16e", "message": "Use TurtleTest annotation to skip/enable turtle tests", "committedDate": "2020-04-29T14:20:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM1NDQxNg==", "url": "https://github.com/kiegroup/optaplanner/pull/764#discussion_r417354416", "bodyText": "In a different PR, later on, we'll want to moved into kie-parent", "author": "ge0ffrey", "createdAt": "2020-04-29T14:22:14Z", "path": "pom.xml", "diffHunk": "@@ -32,6 +32,7 @@\n     <impsort.goal>sort</impsort.goal>\n     <jacoco.agent.argLine/>\n     <spotbugs.failOnViolation>true</spotbugs.failOnViolation>\n+    <version.org.mockito>3.1.0</version.org.mockito>", "originalCommit": "03705a397d0c45ce65ef10c6aa55546992c0c16e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUzMDgxMg==", "url": "https://github.com/kiegroup/optaplanner/pull/764#discussion_r417530812", "bodyText": "Yes but upgrading the whole KIE to Mockito 3.x is a completely different story \ud83d\ude42", "author": "yurloc", "createdAt": "2020-04-29T18:40:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM1NDQxNg=="}], "type": "inlineReview"}, {"oid": "d80dabd3bbddb795b49ec074ae108a5728222c5e", "url": "https://github.com/kiegroup/optaplanner/commit/d80dabd3bbddb795b49ec074ae108a5728222c5e", "message": "Import Test annotation from JUnit 5", "committedDate": "2020-04-29T18:33:46Z", "type": "commit"}, {"oid": "5c55180c00688344f2d2640272dc46c924b3edbe", "url": "https://github.com/kiegroup/optaplanner/commit/5c55180c00688344f2d2640272dc46c924b3edbe", "message": "Replace Ignore annotation with Disabled", "committedDate": "2020-04-29T18:34:51Z", "type": "commit"}, {"oid": "bde409126496c4c6e62ae8a5e39c29311dea210f", "url": "https://github.com/kiegroup/optaplanner/commit/bde409126496c4c6e62ae8a5e39c29311dea210f", "message": "Replace Before/After with BeforeEach/AfterEach", "committedDate": "2020-04-29T18:35:06Z", "type": "commit"}, {"oid": "c3f0a776d9172d396961981f78dc143aec16442d", "url": "https://github.com/kiegroup/optaplanner/commit/c3f0a776d9172d396961981f78dc143aec16442d", "message": "Replace BeforeClass with BeforeAll", "committedDate": "2020-04-29T18:35:23Z", "type": "commit"}, {"oid": "7d7c372b5d94ef591ee194c9aa950eafacb0176d", "url": "https://github.com/kiegroup/optaplanner/commit/7d7c372b5d94ef591ee194c9aa950eafacb0176d", "message": "Use Timeout annotation", "committedDate": "2020-04-29T18:35:33Z", "type": "commit"}, {"oid": "7910c823a073a6b0df3d53ab4547061c750c30a4", "url": "https://github.com/kiegroup/optaplanner/commit/7910c823a073a6b0df3d53ab4547061c750c30a4", "message": "Replace Test(expected = *Exception.class) with assertion", "committedDate": "2020-04-29T18:35:45Z", "type": "commit"}, {"oid": "4c81f510e34076bff9af89e0afec2f00d98ba1d1", "url": "https://github.com/kiegroup/optaplanner/commit/4c81f510e34076bff9af89e0afec2f00d98ba1d1", "message": "Add missing Test annotation", "committedDate": "2020-04-29T18:36:04Z", "type": "commit"}, {"oid": "7b3dc58f917f9705bd895051f01996edae630e36", "url": "https://github.com/kiegroup/optaplanner/commit/7b3dc58f917f9705bd895051f01996edae630e36", "message": "Enable migration support for ExpectedException rule", "committedDate": "2020-04-29T18:36:09Z", "type": "commit"}, {"oid": "281e9d434c4f09f6dd4b530607abf2df932e9767", "url": "https://github.com/kiegroup/optaplanner/commit/281e9d434c4f09f6dd4b530607abf2df932e9767", "message": "Parameterized tests in core", "committedDate": "2020-04-29T18:36:09Z", "type": "commit"}, {"oid": "443cb38c3ec8240222ebc6c7724b1c712911031b", "url": "https://github.com/kiegroup/optaplanner/commit/443cb38c3ec8240222ebc6c7724b1c712911031b", "message": "Use DynamicTest for benchmark config tests", "committedDate": "2020-04-29T18:36:09Z", "type": "commit"}, {"oid": "d25ad490a227ee06e850d6606db7cc0ee2fb430e", "url": "https://github.com/kiegroup/optaplanner/commit/d25ad490a227ee06e850d6606db7cc0ee2fb430e", "message": "Use DynamicTest for examples performance tests", "committedDate": "2020-04-29T18:36:09Z", "type": "commit"}, {"oid": "126a6d5d1cc9d05f502249d2273f1c8f4423c3f1", "url": "https://github.com/kiegroup/optaplanner/commit/126a6d5d1cc9d05f502249d2273f1c8f4423c3f1", "message": "Fix constraint stream tests", "committedDate": "2020-04-29T18:36:25Z", "type": "commit"}, {"oid": "4ebb5706b9668096c62439110a1f720ac663a115", "url": "https://github.com/kiegroup/optaplanner/commit/4ebb5706b9668096c62439110a1f720ac663a115", "message": "Fix TestGen test", "committedDate": "2020-04-29T18:36:25Z", "type": "commit"}, {"oid": "1865f477409dd36d1f750c27cf63d7cbdc5b3beb", "url": "https://github.com/kiegroup/optaplanner/commit/1865f477409dd36d1f750c27cf63d7cbdc5b3beb", "message": "Fix duplicateConstraintId", "committedDate": "2020-04-29T18:36:25Z", "type": "commit"}, {"oid": "149f2b832038b04c6aa1b7c68163a36283292ecc", "url": "https://github.com/kiegroup/optaplanner/commit/149f2b832038b04c6aa1b7c68163a36283292ecc", "message": "Use DynamicTest for OpenDataFilesTests", "committedDate": "2020-04-29T18:36:26Z", "type": "commit"}, {"oid": "05f67669fec4b8c499aacfbe0696c2769d1ce641", "url": "https://github.com/kiegroup/optaplanner/commit/05f67669fec4b8c499aacfbe0696c2769d1ce641", "message": "Use DynamicTest for importer tests", "committedDate": "2020-04-29T18:36:36Z", "type": "commit"}, {"oid": "6fc0b1afe1915d524d828f3a8074a3c01ec11093", "url": "https://github.com/kiegroup/optaplanner/commit/6fc0b1afe1915d524d828f3a8074a3c01ec11093", "message": "Use DynamicTest for turtle tests", "committedDate": "2020-04-29T18:36:59Z", "type": "commit"}, {"oid": "c8e4dfbee38a6193dd78111ad3b2f0ac248871a3", "url": "https://github.com/kiegroup/optaplanner/commit/c8e4dfbee38a6193dd78111ad3b2f0ac248871a3", "message": "Use DynamicTest for construction heuristic and exhaustive search tests", "committedDate": "2020-04-29T18:37:09Z", "type": "commit"}, {"oid": "be24bce058b1f218ed92e514a4d550ae6aa503e7", "url": "https://github.com/kiegroup/optaplanner/commit/be24bce058b1f218ed92e514a4d550ae6aa503e7", "message": "Convert parameterized tests in examples", "committedDate": "2020-04-29T18:37:38Z", "type": "commit"}, {"oid": "1584428f8eab31044283ef03be9eb34cc8d3745c", "url": "https://github.com/kiegroup/optaplanner/commit/1584428f8eab31044283ef03be9eb34cc8d3745c", "message": "Fix LookUpManagerTest", "committedDate": "2020-04-29T18:37:38Z", "type": "commit"}, {"oid": "7fa0f82961e1902281bf16286d2b32b731c403ae", "url": "https://github.com/kiegroup/optaplanner/commit/7fa0f82961e1902281bf16286d2b32b731c403ae", "message": "Fix SimulatedAnnealingAcceptorTest", "committedDate": "2020-04-29T18:37:38Z", "type": "commit"}, {"oid": "7e78478249e7e8c898cf95f9d5c800c48666e506", "url": "https://github.com/kiegroup/optaplanner/commit/7e78478249e7e8c898cf95f9d5c800c48666e506", "message": "Fix AbstractPhaseTest names and group them using dynamicContainer()", "committedDate": "2020-04-29T18:37:39Z", "type": "commit"}, {"oid": "373c09eb5fd0e01d62d11ecc66d383cf60c13bc5", "url": "https://github.com/kiegroup/optaplanner/commit/373c09eb5fd0e01d62d11ecc66d383cf60c13bc5", "message": "Use TurtleTest annotation to skip/enable turtle tests", "committedDate": "2020-04-29T18:37:39Z", "type": "commit"}, {"oid": "9b3bb14b19c4b4c5637b16445c4d7034fd38bdd9", "url": "https://github.com/kiegroup/optaplanner/commit/9b3bb14b19c4b4c5637b16445c4d7034fd38bdd9", "message": "Replace ExpectedException rule with an assert", "committedDate": "2020-04-29T18:37:39Z", "type": "commit"}, {"oid": "9b3bb14b19c4b4c5637b16445c4d7034fd38bdd9", "url": "https://github.com/kiegroup/optaplanner/commit/9b3bb14b19c4b4c5637b16445c4d7034fd38bdd9", "message": "Replace ExpectedException rule with an assert", "committedDate": "2020-04-29T18:37:39Z", "type": "forcePushed"}]}