{"pr_number": 716, "pr_title": "PLANNER-1871 Merge consecutive filter()s into a single predicate", "pr_createdAt": "2020-03-09T12:56:22Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/716", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY0NDUwNA==", "url": "https://github.com/kiegroup/optaplanner/pull/716#discussion_r389644504", "bodyText": "There is a problem here.\nOriginally, the order of joiners in this code was joiner, lessThan(planningIdGetter). However, that breaks if the user wants to do:\nfromUniquePair(..., Joiners.filtering(...))\n\nBecause we fail fast when filtering() joiner is anything but last. This could be considered a bug that I only just now found out about.\nHowever, the other way around (putting lessThan() before filtering()) breaks Bavet, as Bavet only supports lessThan() when it's the last joiner.\nThe fail-fasts of filtering() and lessThan() in Bavet are mutually incompatible. Drools is fine.\nWhat do we want to do about this?", "author": "triceo", "createdAt": "2020-03-09T13:01:08Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/score/stream/InnerConstraintFactory.java", "diffHunk": "@@ -41,6 +49,19 @@\n         return stream;\n     }\n \n+    @Override\n+    default <A> BiConstraintStream<A, A> fromUniquePair(Class<A> fromClass, BiJoiner<A, A> joiner) {\n+        MemberAccessor planningIdMemberAccessor = ConfigUtils.findPlanningIdMemberAccessor(fromClass);\n+        if (planningIdMemberAccessor == null) {\n+            throw new IllegalArgumentException(\"The fromClass (\" + fromClass + \") has no member with a @\"\n+                    + PlanningId.class.getSimpleName() + \" annotation,\"\n+                    + \" so the pairs can not be made unique ([A,B] vs [B,A]).\");\n+        }\n+        // TODO In Bavet breaks node sharing + involves unneeded indirection\n+        Function<A, Comparable> planningIdGetter = (fact) -> (Comparable<?>) planningIdMemberAccessor.executeGetter(fact);\n+        return from(fromClass).join(fromClass, lessThan(planningIdGetter), joiner);", "originalCommit": "1e6fa10c90c65de7188a75d64b0b6926a1ce23c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY0NzkyOA==", "url": "https://github.com/kiegroup/optaplanner/pull/716#discussion_r389647928", "bodyText": "I see 3 proposals:\nA) Leave as is (bad idea, fromUniquePair(..., Joiners.filtering(...)) doesn't work for CS-D and CS-B)\nB) Put lessThan() before filtering() - Is it a regression for Bavet? does this break any of the existing Bavet working examples?\nC) Like B), but add Bavet syntactic sugar to support filtering() to avoid any regressions of B.", "author": "ge0ffrey", "createdAt": "2020-03-09T13:08:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY0NDUwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY0OTYwMA==", "url": "https://github.com/kiegroup/optaplanner/pull/716#discussion_r389649600", "bodyText": "B) Yes, it actually breaks many tests.\nC) Could be doable.", "author": "triceo", "createdAt": "2020-03-09T13:11:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY0NDUwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1MDc3NA==", "url": "https://github.com/kiegroup/optaplanner/pull/716#discussion_r389650774", "bodyText": "I am -1 for B if and only if B has regressions. Otherwise I am ok with all.", "author": "ge0ffrey", "createdAt": "2020-03-09T13:13:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY0NDUwNA=="}], "type": "inlineReview"}, {"oid": "fda6d55f3ea16786316b44a0c0610706ae3680c3", "url": "https://github.com/kiegroup/optaplanner/commit/fda6d55f3ea16786316b44a0c0610706ae3680c3", "message": "Implement filter reuse", "committedDate": "2020-03-09T14:13:02Z", "type": "commit"}, {"oid": "247fb3d5b597f2a694aa61c47fad3ac9fbd8960c", "url": "https://github.com/kiegroup/optaplanner/commit/247fb3d5b597f2a694aa61c47fad3ac9fbd8960c", "message": "Naming", "committedDate": "2020-03-09T14:13:02Z", "type": "commit"}, {"oid": "764412505e00f26d01872f062cb71564bc525a08", "url": "https://github.com/kiegroup/optaplanner/commit/764412505e00f26d01872f062cb71564bc525a08", "message": "Add test coverage", "committedDate": "2020-03-09T14:13:02Z", "type": "commit"}, {"oid": "392db9ea01ab5c109cd71224d2d29d9b6a8502a2", "url": "https://github.com/kiegroup/optaplanner/commit/392db9ea01ab5c109cd71224d2d29d9b6a8502a2", "message": "Share some code", "committedDate": "2020-03-09T14:13:02Z", "type": "commit"}, {"oid": "d65cc190626756b207a58a19d762ea6b77738ee9", "url": "https://github.com/kiegroup/optaplanner/commit/d65cc190626756b207a58a19d762ea6b77738ee9", "message": "Address Bavet and Drools incompatibility", "committedDate": "2020-03-09T14:13:03Z", "type": "commit"}, {"oid": "9e8c040163462de7bec5e3b0ad874312092fb182", "url": "https://github.com/kiegroup/optaplanner/commit/9e8c040163462de7bec5e3b0ad874312092fb182", "message": "Address Sonar issue", "committedDate": "2020-03-09T14:13:03Z", "type": "commit"}, {"oid": "9e8c040163462de7bec5e3b0ad874312092fb182", "url": "https://github.com/kiegroup/optaplanner/commit/9e8c040163462de7bec5e3b0ad874312092fb182", "message": "Address Sonar issue", "committedDate": "2020-03-09T14:13:03Z", "type": "forcePushed"}]}