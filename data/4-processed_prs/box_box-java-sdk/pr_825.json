{"pr_number": 825, "pr_title": "Add zip functionality", "pr_createdAt": "2020-07-09T17:25:53Z", "pr_url": "https://github.com/box/box-java-sdk/pull/825", "timeline": [{"oid": "81a6dc58815a63469302309981bb0f4d1fce1d35", "url": "https://github.com/box/box-java-sdk/commit/81a6dc58815a63469302309981bb0f4d1fce1d35", "message": "zip working with tests", "committedDate": "2020-07-09T17:23:17Z", "type": "commit"}, {"oid": "ececb415379c35457ca5d9cd197aac5b55d4addd", "url": "https://github.com/box/box-java-sdk/commit/ececb415379c35457ca5d9cd197aac5b55d4addd", "message": "clean up code", "committedDate": "2020-07-09T17:38:00Z", "type": "commit"}, {"oid": "66ca0a596cec5a3f68bd46f7c1f7b158d4f2d355", "url": "https://github.com/box/box-java-sdk/commit/66ca0a596cec5a3f68bd46f7c1f7b158d4f2d355", "message": "tests passing and add proper documentation", "committedDate": "2020-07-10T18:17:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5NTcyNA==", "url": "https://github.com/box/box-java-sdk/pull/825#discussion_r452995724", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Allows you to create a zip file of Box files and folders and download them.\n          \n          \n            \n            Allows you to create a temporary zip file of Box files and folders and download them.", "author": "PJSimon", "createdAt": "2020-07-10T18:07:45Z", "path": "doc/zip_download.md", "diffHunk": "@@ -0,0 +1,64 @@\n+Zip Download\n+======\n+\n+Allows you to create a zip file of Box files and folders and download them.", "originalCommit": "ececb415379c35457ca5d9cd197aac5b55d4addd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5NjA1OQ==", "url": "https://github.com/box/box-java-sdk/pull/825#discussion_r452996059", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            with the specified items and will return a `BoxZipInfo` object with the download link. This file does not show up in your Box account, but will be available for \n          \n          \n            \n            with the specified items and will return a `BoxZipInfo` object with the download link. This file does not show up in your Box account, but will be temporarily", "author": "PJSimon", "createdAt": "2020-07-10T18:08:25Z", "path": "doc/zip_download.md", "diffHunk": "@@ -0,0 +1,64 @@\n+Zip Download\n+======\n+\n+Allows you to create a zip file of Box files and folders and download them.\n+\n+<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n+<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n+\n+\n+- [Create a Zip File](#create-a-zip-file)\n+- [Download a Zip File](#download-a-zip-file)\n+\n+<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n+\n+Create a Zip File\n+---------------\n+\n+Calling [`BoxZip.create(String name, List<JsonObject> items)`][create-a-zip-file] will let you create a new zip file with the specified name and \n+with the specified items and will return a `BoxZipInfo` object with the download link. This file does not show up in your Box account, but will be available for ", "originalCommit": "ececb415379c35457ca5d9cd197aac5b55d4addd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5NjMyMQ==", "url": "https://github.com/box/box-java-sdk/pull/825#discussion_r452996321", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            for download.\n          \n          \n            \n            available for download.", "author": "PJSimon", "createdAt": "2020-07-10T18:08:47Z", "path": "doc/zip_download.md", "diffHunk": "@@ -0,0 +1,64 @@\n+Zip Download\n+======\n+\n+Allows you to create a zip file of Box files and folders and download them.\n+\n+<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n+<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n+\n+\n+- [Create a Zip File](#create-a-zip-file)\n+- [Download a Zip File](#download-a-zip-file)\n+\n+<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n+\n+Create a Zip File\n+---------------\n+\n+Calling [`BoxZip.create(String name, List<JsonObject> items)`][create-a-zip-file] will let you create a new zip file with the specified name and \n+with the specified items and will return a `BoxZipInfo` object with the download link. This file does not show up in your Box account, but will be available for \n+for download.", "originalCommit": "ececb415379c35457ca5d9cd197aac5b55d4addd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "21bf25b81d9449aaad49682787e0903abf62e635", "url": "https://github.com/box/box-java-sdk/commit/21bf25b81d9449aaad49682787e0903abf62e635", "message": "Update doc/zip_download.md\n\nCo-authored-by: Patrick Simon <patrick@box.com>", "committedDate": "2020-07-10T18:19:24Z", "type": "commit"}, {"oid": "a52b2f17b5d8533c7bd969c677356f0f1018e220", "url": "https://github.com/box/box-java-sdk/commit/a52b2f17b5d8533c7bd969c677356f0f1018e220", "message": "Apply suggestions from code review\n\nCo-authored-by: Patrick Simon <patrick@box.com>", "committedDate": "2020-07-10T18:19:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAyMjk2MQ==", "url": "https://github.com/box/box-java-sdk/pull/825#discussion_r453022961", "bodyText": "Can we create a new model for this parameter instead of using JsonObject?  Obviously it would only need type and id, but it might make things more clear.", "author": "PJSimon", "createdAt": "2020-07-10T18:55:56Z", "path": "src/main/java/com/box/sdk/BoxZip.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.box.sdk;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URL;\n+import java.util.List;\n+\n+import com.eclipsesource.json.JsonArray;\n+import com.eclipsesource.json.JsonObject;\n+\n+/**\n+ * Provides methods to allow users to download multiple files and folders as a single zip file. Users can download\n+ * up to either 32GB or 10,000 files in one batch (whichever limitation is hit first) as a single zip file.\n+ */\n+public class BoxZip {\n+    /**\n+     * Zip URL Template.\n+     */\n+    public static final URLTemplate ZIP_URL_TEMPLATE = new URLTemplate(\"zip_downloads\");\n+    /**\n+     * Zip Download URL Template.\n+     */\n+    public static final URLTemplate ZIP_DOWNLOAD_URL_TEMPLATE = new URLTemplate(\"zip_downloads/%s/content\");\n+    private static final int BUFFER_SIZE = 8192;\n+    private final BoxAPIConnection api;\n+\n+    /**\n+     * Constructs a Zip to be used by everything.\n+     *\n+     * @param api the API connection to be used by the Zip.\n+     */\n+    public BoxZip(BoxAPIConnection api) {\n+        this.api = api;\n+    }\n+\n+    /**\n+     * Creates a zip of multiple files and folders.\n+     *\n+     * @param name  the name of the zip file to be created\n+     * @param items list of files or folders to be part of the created zip\n+     * @return      information about the created zip file\n+     */\n+    public BoxZipInfo create(String name, List<JsonObject> items) {", "originalCommit": "66ca0a596cec5a3f68bd46f7c1f7b158d4f2d355", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAyNTEyNg==", "url": "https://github.com/box/box-java-sdk/pull/825#discussion_r453025126", "bodyText": "Can we create a BoxZipNameConflicts object and change this to a List<BoxZipNameConflicts>?  Then BoxZipNameConflicts can be a List<BoxZipNameConflictFiles> (another new object to create).  It's more overhead, but it avoids tasking the user with looking at the JSON to understand the expected structure.", "author": "PJSimon", "createdAt": "2020-07-10T18:58:56Z", "path": "src/main/java/com/box/sdk/BoxZipInfo.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package com.box.sdk;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+import com.eclipsesource.json.JsonArray;\n+import com.eclipsesource.json.JsonObject;\n+import com.eclipsesource.json.JsonValue;\n+\n+/**\n+ * Represents items that have naming conflicts when creating a zip file.\n+ */\n+public class BoxZipInfo extends BoxJSONObject {\n+    private URL downloadURL;\n+    private URL statusURL;\n+    private Date expiresAt;\n+    private List<List<BoxZipNameConflict>> nameConflicts;", "originalCommit": "66ca0a596cec5a3f68bd46f7c1f7b158d4f2d355", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b7fb42f100c53e1f85cc1d1c744818c1b4a24fe9", "url": "https://github.com/box/box-java-sdk/commit/b7fb42f100c53e1f85cc1d1c744818c1b4a24fe9", "message": "add conflict model and item model", "committedDate": "2020-07-10T22:39:04Z", "type": "commit"}, {"oid": "c8f813306f4f780260e85e4497fec275267fbf7d", "url": "https://github.com/box/box-java-sdk/commit/c8f813306f4f780260e85e4497fec275267fbf7d", "message": "Merge branch 'zip-download' of github.com:box/box-java-sdk into zip-download", "committedDate": "2020-07-10T22:39:11Z", "type": "commit"}, {"oid": "97003860b6fc42ced0c26cc5d6fe4bfd80636a82", "url": "https://github.com/box/box-java-sdk/commit/97003860b6fc42ced0c26cc5d6fe4bfd80636a82", "message": "Update zip_download.md", "committedDate": "2020-07-10T22:41:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1NDU4Nw==", "url": "https://github.com/box/box-java-sdk/pull/825#discussion_r453154587", "bodyText": "?", "author": "PJSimon", "createdAt": "2020-07-11T04:39:20Z", "path": "src/main/java/com/box/sdk/BoxZipItem.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.box.sdk;\n+\n+/**\n+ * Represents a Box item to be included when creating a zip file.\n+ */\n+public class BoxZipItem extends BoxJSONObject {\n+    private String type;\n+    private String id;\n+\n+    /**\n+     * Constructs a base BoxZipItem object.\n+     *\n+     * @param type item type, \"file\" or \"folder\".\n+     * @param id   id of the the item.\n+     */\n+    public BoxZipItem(String type, String id) {\n+        super();\n+        this.type = type;\n+        this.id = id;\n+        this.addPendingChange(\"type\", type);\n+        this.addPendingChange(\"id\", id);", "originalCommit": "b7fb42f100c53e1f85cc1d1c744818c1b4a24fe9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzMzg2Mg==", "url": "https://github.com/box/box-java-sdk/pull/825#discussion_r453833862", "bodyText": "Let's remove extends BoxJSONObject and instead add a custom method to return a jsonObject.  Thanks!", "author": "PJSimon", "createdAt": "2020-07-13T18:05:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1NDU4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1NDYwMA==", "url": "https://github.com/box/box-java-sdk/pull/825#discussion_r453154600", "bodyText": "?", "author": "PJSimon", "createdAt": "2020-07-11T04:39:29Z", "path": "src/test/java/com/box/sdk/BoxZipTest.java", "diffHunk": "@@ -82,14 +82,13 @@ public void createZipSucceeds() throws IOException, ParseException {\n         final String statusURL = \"https://api.box.com/zip_downloads/124hfiowk3fa8kmrwh/status\";\n         final Date expiresAt = BoxDateFormat.parse(\"2018-04-25T11:00:18-07:00\");\n \n-        ArrayList<JsonObject> items = new ArrayList<JsonObject>();\n+        ArrayList<BoxZipItem> items = new ArrayList<BoxZipItem>();\n         JsonArray itemsBody = new JsonArray();\n-        JsonObject file = new JsonObject().add(\"id\", fileID).add(\"type\", \"file\");\n-        JsonObject folder = new JsonObject().add(\"id\", folderID).add(\"type\",\n-            \"folder\");\n+        BoxZipItem file = new BoxZipItem(\"file\", fileID);\n+        BoxZipItem folder = new BoxZipItem(\"folder\", folderID);\n         items.add(file);\n         items.add(folder);\n-        itemsBody.add(file).add(folder);\n+        itemsBody.add(file.getPendingChangesAsJsonObject()).add(folder.getPendingChangesAsJsonObject());", "originalCommit": "b7fb42f100c53e1f85cc1d1c744818c1b4a24fe9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1NDYwNA==", "url": "https://github.com/box/box-java-sdk/pull/825#discussion_r453154604", "bodyText": "?", "author": "PJSimon", "createdAt": "2020-07-11T04:39:37Z", "path": "src/main/java/com/box/sdk/BoxZipInfo.java", "diffHunk": "@@ -103,15 +103,13 @@ void parseJSONMember(JsonObject.Member member) {\n         }\n     }\n \n-    private List<List<BoxZipNameConflict>> parseNameConflicts(JsonArray jsonArray) {\n-        List<List<BoxZipNameConflict>> nameConflicts = new ArrayList<List<BoxZipNameConflict>>(jsonArray.size());\n+    private List<BoxZipConflict> parseNameConflicts(JsonArray jsonArray) {\n+        List<BoxZipConflict> nameConflicts = new ArrayList<BoxZipConflict>(jsonArray.size());\n         for (JsonValue conflict : jsonArray) {\n-            List<BoxZipNameConflict> conflictList = new ArrayList<BoxZipNameConflict>();\n-            for (JsonValue conflictItem: conflict.asArray()) {\n-                JsonObject conflictObj = conflictItem.asObject();\n-                conflictList.add(new BoxZipNameConflict(conflictObj));\n-            }\n-            nameConflicts.add(conflictList);\n+            // Must create a conflict object with an arbitrary key like \"conflict\" to allow BoxZipConflict\n+            // to read the object\n+            JsonObject conflictObj = new JsonObject().add(\"conflict\", conflict);", "originalCommit": "b7fb42f100c53e1f85cc1d1c744818c1b4a24fe9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1NDYzMg==", "url": "https://github.com/box/box-java-sdk/pull/825#discussion_r453154632", "bodyText": "?", "author": "PJSimon", "createdAt": "2020-07-11T04:39:56Z", "path": "src/main/java/com/box/sdk/BoxZip.java", "diffHunk": "@@ -41,10 +41,10 @@ public BoxZip(BoxAPIConnection api) {\n      * @param items list of files or folders to be part of the created zip\n      * @return      information about the created zip file\n      */\n-    public BoxZipInfo create(String name, List<JsonObject> items) {\n+    public BoxZipInfo create(String name, List<BoxZipItem> items) {\n         JsonArray itemsArray = new JsonArray();\n-        for (JsonObject item : items) {\n-            itemsArray.add(item);\n+        for (BoxZipItem item : items) {\n+            itemsArray.add(item.getPendingChangesAsJsonObject());", "originalCommit": "b7fb42f100c53e1f85cc1d1c744818c1b4a24fe9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0ODkxOA==", "url": "https://github.com/box/box-java-sdk/pull/825#discussion_r453848918", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Must create a conflict object with an arbitrary key like \"conflict\" to allow BoxZipConflict\n          \n          \n            \n                        // to read the object\n          \n          \n            \n                        // We create a \"conflictObj\"  with the arbitrary key name \"conflict\" in order to allow BoxZipConflict\n          \n          \n            \n                        // to later parse the object to create `List<BoxZipConflictItem> items` (since it can't take in an array)", "author": "PJSimon", "createdAt": "2020-07-13T18:31:31Z", "path": "src/main/java/com/box/sdk/BoxZipInfo.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package com.box.sdk;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+import com.eclipsesource.json.JsonArray;\n+import com.eclipsesource.json.JsonObject;\n+import com.eclipsesource.json.JsonValue;\n+\n+/**\n+ * Represents items that have naming conflicts when creating a zip file.\n+ */\n+public class BoxZipInfo extends BoxJSONObject {\n+    private URL downloadURL;\n+    private URL statusURL;\n+    private Date expiresAt;\n+    private List<BoxZipConflict> nameConflicts;\n+\n+    /**\n+     * Constructs a BoxZipDownloadStatus with default settings.\n+     */\n+    public BoxZipInfo() {\n+    }\n+\n+    /**\n+     * Constructs a BoxZipDownloadStatus from a JSON string.\n+     *\n+     * @param json the JSON encoded enterprise.\n+     */\n+    public BoxZipInfo(String json) {\n+        super(json);\n+    }\n+\n+    BoxZipInfo(JsonObject jsonObject) {\n+        super(jsonObject);\n+    }\n+\n+    /**\n+     * Gets the ID of the item that has the conflict.\n+     *\n+     * @return the ID of the item that has the conflict.\n+     */\n+    public URL getDownloadURL() {\n+        return this.downloadURL;\n+    }\n+\n+    /**\n+     * Gets the type of the item that has the conflict.\n+     *\n+     * @return the type of the item that has the conflict.\n+     */\n+    public URL getStatusURL() {\n+        return this.statusURL;\n+    }\n+\n+    /**\n+     * Gets the original name of the item that has the conflict.\n+     *\n+     * @return the original name of the item that has the conflict.\n+     */\n+    public Date getExpiresAt() {\n+        return this.expiresAt;\n+    }\n+\n+    /**\n+     * Gets the new name of the item when it downloads that resolves the conflict.\n+     *\n+     * @return the new name of the item when it downloads that resolves the conflict.\n+     */\n+    public List<BoxZipConflict> getNameConflicts() {\n+        return this.nameConflicts;\n+    }\n+\n+    @Override\n+    void parseJSONMember(JsonObject.Member member) {\n+        JsonValue value = member.getValue();\n+        String memberName = member.getName();\n+        try {\n+            if (memberName.equals(\"download_url\")) {\n+                try {\n+                    String urlString = value.asString();\n+                    this.downloadURL = new URL(urlString);\n+                } catch (MalformedURLException e) {\n+                    throw new BoxAPIException(\"Couldn't parse download url for zip\", e);\n+                }\n+            } else if (memberName.equals(\"status_url\")) {\n+                try {\n+                    String urlString = value.asString();\n+                    this.statusURL = new URL(urlString);\n+                } catch (MalformedURLException e) {\n+                    throw new BoxAPIException(\"Couldn't parse status url for zip\", e);\n+                }\n+            } else if (memberName.equals(\"expires_at\")) {\n+                this.expiresAt = BoxDateFormat.parse(value.asString());\n+            } else if (memberName.equals(\"name_conflicts\")) {\n+                this.nameConflicts = this.parseNameConflicts(value.asArray());\n+            }\n+        } catch (Exception e) {\n+            throw new BoxDeserializationException(memberName, value.toString(), e);\n+        }\n+    }\n+\n+    private List<BoxZipConflict> parseNameConflicts(JsonArray jsonArray) {\n+        List<BoxZipConflict> nameConflicts = new ArrayList<BoxZipConflict>(jsonArray.size());\n+        for (JsonValue conflict : jsonArray) {\n+            // Must create a conflict object with an arbitrary key like \"conflict\" to allow BoxZipConflict\n+            // to read the object", "originalCommit": "97003860b6fc42ced0c26cc5d6fe4bfd80636a82", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "93199137b2773f581a6886a391e841bf6d8cb468", "url": "https://github.com/box/box-java-sdk/commit/93199137b2773f581a6886a391e841bf6d8cb468", "message": "Update src/main/java/com/box/sdk/BoxZipInfo.java\n\nCo-authored-by: Patrick Simon <patrick@box.com>", "committedDate": "2020-07-13T18:34:19Z", "type": "commit"}, {"oid": "781f3b7505924d532a1baf18e7232726128ffc35", "url": "https://github.com/box/box-java-sdk/commit/781f3b7505924d532a1baf18e7232726128ffc35", "message": "remove BoxJSONObject extension fro BoxZipItem", "committedDate": "2020-07-13T19:27:44Z", "type": "commit"}]}