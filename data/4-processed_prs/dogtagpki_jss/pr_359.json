{"pr_number": 359, "pr_title": "Add KBKDF Documentation", "pr_createdAt": "2020-01-14T17:09:53Z", "pr_url": "https://github.com/dogtagpki/jss/pull/359", "timeline": [{"oid": "7d3bfe77934955106a6c57232887ebb1bb31886c", "url": "https://github.com/dogtagpki/jss/commit/7d3bfe77934955106a6c57232887ebb1bb31886c", "message": "Add KBKDF Usage Documentation\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-01-14T17:10:48Z", "type": "forcePushed"}, {"oid": "cd969ed13a49730216d7ff1b20cae025ec3f0f6b", "url": "https://github.com/dogtagpki/jss/commit/cd969ed13a49730216d7ff1b20cae025ec3f0f6b", "message": "Add KBKDF Usage Documentation\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-01-14T17:11:52Z", "type": "forcePushed"}, {"oid": "2334f09d0d08e300d018bd8235c40b222c9bd53d", "url": "https://github.com/dogtagpki/jss/commit/2334f09d0d08e300d018bd8235c40b222c9bd53d", "message": "Add KBKDF Usage Documentation\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-01-14T18:55:36Z", "type": "forcePushed"}, {"oid": "2b29a384f0b27adbd17445a0ec32de2977489eaf", "url": "https://github.com/dogtagpki/jss/commit/2b29a384f0b27adbd17445a0ec32de2977489eaf", "message": "Add KBKDF Usage Documentation\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-01-14T19:22:52Z", "type": "forcePushed"}, {"oid": "c07d5062c5795f1a686fa3c6923d53413e6007bb", "url": "https://github.com/dogtagpki/jss/commit/c07d5062c5795f1a686fa3c6923d53413e6007bb", "message": "Add KBKDF Usage Documentation\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-01-14T19:23:14Z", "type": "forcePushed"}, {"oid": "84529bce164e138aba3fbcc56fa099bb7b14ea56", "url": "https://github.com/dogtagpki/jss/commit/84529bce164e138aba3fbcc56fa099bb7b14ea56", "message": "Add KBKDF design documentation\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-01-14T19:46:40Z", "type": "forcePushed"}, {"oid": "5d7bf71a362cf98670acd8870fd8b8e6be1697d1", "url": "https://github.com/dogtagpki/jss/commit/5d7bf71a362cf98670acd8870fd8b8e6be1697d1", "message": "Add KBKDF design documentation\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-01-14T20:36:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA4NjY3NQ==", "url": "https://github.com/dogtagpki/jss/pull/359#discussion_r368086675", "bodyText": "I suppose the <name> needs to be quoted (since it's a string instead of a constant), so this might be better:\nKeyGenerator kg = KeyGenerator.getInstance(\"<name>\", \"Mozilla-JSS\");", "author": "edewata", "createdAt": "2020-01-17T18:57:20Z", "path": "docs/usage/kbkdf.md", "diffHunk": "@@ -0,0 +1,237 @@\n+# KBKDF - Documentation\n+\n+## About KBKDF\n+\n+KBKDF is defined in [NIST's SP800-108][sp800-108]: Key Based Key Derivation\n+Functions. These are a collection of three KDFs based on MACing primitives:\n+\n+ 1. Counter Mode in 5.1,\n+ 2. Feedback Mode in 5.2, and\n+ 3. Double Pipeline Mode in 5.3.\n+\n+These KDFs see usage in GlobalPlatform's Secure Channel Protocol 03, Kerberos,\n+and other places. This KDF is implemented using [PKCS#11 v3.0][pkcs11-kbkdf];\n+refer to that document for additional information about using this KDF.\n+\n+## Using KBKDF\n+\n+KBKDF usage is available from the `Mozilla-JSS` provider through the javax\n+[`KeyGenerator`][key-generator] interface. There are two categories of KDF\n+implementations:\n+\n+ 1. `CKO_SECRET_KEY` keys, which cannot be extracted when the system is\n+    running in FIPS mode or when the key lives on an HSM, and\n+ 2. `CKO_DATA_OBJECT` keys, which can always be extract.\n+\n+The latter category is suitable for generating SCP03 challenges, but shouldn't\n+be used with cryptographic operations. They have the \"Data\" suffix in the\n+provider list.\n+\n+### Constructing a KBKDF `KeyGenerator`\n+\n+To construct a KBKDF generator, get the instance via the provider interface:\n+\n+```java\n+import javax.crypto.KeyGenerator;\n+\n+KeyGenerator kg = KeyGenerator.getInstance(<name>, \"Mozilla-JSS\");", "originalCommit": "5d7bf71a362cf98670acd8870fd8b8e6be1697d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA4NzMyOQ==", "url": "https://github.com/dogtagpki/jss/pull/359#discussion_r368087329", "bodyText": "These lines are too wide so it's a bit difficult to read. Could you add line breaks?", "author": "edewata", "createdAt": "2020-01-17T18:58:59Z", "path": "docs/usage/kbkdf.md", "diffHunk": "@@ -0,0 +1,237 @@\n+# KBKDF - Documentation\n+\n+## About KBKDF\n+\n+KBKDF is defined in [NIST's SP800-108][sp800-108]: Key Based Key Derivation\n+Functions. These are a collection of three KDFs based on MACing primitives:\n+\n+ 1. Counter Mode in 5.1,\n+ 2. Feedback Mode in 5.2, and\n+ 3. Double Pipeline Mode in 5.3.\n+\n+These KDFs see usage in GlobalPlatform's Secure Channel Protocol 03, Kerberos,\n+and other places. This KDF is implemented using [PKCS#11 v3.0][pkcs11-kbkdf];\n+refer to that document for additional information about using this KDF.\n+\n+## Using KBKDF\n+\n+KBKDF usage is available from the `Mozilla-JSS` provider through the javax\n+[`KeyGenerator`][key-generator] interface. There are two categories of KDF\n+implementations:\n+\n+ 1. `CKO_SECRET_KEY` keys, which cannot be extracted when the system is\n+    running in FIPS mode or when the key lives on an HSM, and\n+ 2. `CKO_DATA_OBJECT` keys, which can always be extract.\n+\n+The latter category is suitable for generating SCP03 challenges, but shouldn't\n+be used with cryptographic operations. They have the \"Data\" suffix in the\n+provider list.\n+\n+### Constructing a KBKDF `KeyGenerator`\n+\n+To construct a KBKDF generator, get the instance via the provider interface:\n+\n+```java\n+import javax.crypto.KeyGenerator;\n+\n+KeyGenerator kg = KeyGenerator.getInstance(<name>, \"Mozilla-JSS\");\n+```\n+\n+Where name depends on the choice of KBKDF:\n+\n+| KeyGenerator Name | Mode     | Data | Parameter Class                              |\n+|-------------------|----------|------|----------------------------------------------|\n+| KbkdfCounter      | Counter  | no   | [KBKDFCounterParams][kbkdf-counter-params]   |\n+| KbkdfCounterData  | Counter  | yes  | [KBKDFCounterParams][kbkdf-counter-params]   |\n+| KbkdfFeedback     | Feedback | no   | [KBKDFFeedbackParams][kbkdf-feedback-params] |\n+| KbkdfFeedbackData | Feedback | yes  | [KBKDFFeedbackParams][kbkdf-feedback-params] |\n+| KbkdfPipeline     | Pipeline | no   | [KBKDFPipelineParams][kbkdf-pipeline-params] |\n+| KbkdfPipelineData | Pipeline | yes  | [KBKDFPipelineParams][kbkdf-pipeline-params] |\n+\n+Various aliases for these KeyGenerators also exist; this allows for greater\n+compatibility with existing systems which implement this KDF. These exist\n+because the [Java Cryptography Architecture][jca] doesn't specify canonical\n+names for these KDFs.\n+\n+### Construct a KBKDF Parameter Specification\n+\n+Each KBKDF mode has its own parameter specification class, which must be used\n+with a `KeyGenerator` of only that type. These classes are given in the above\n+table and exist in the [`org.mozilla.jss.crypto`][jss-crypto] package. Each\n+parameter spec derives from [`KBKDFParameterSpec`][kbkdf-spec] and has\n+constructors taking all arguments or a subset of arguments. This allows either\n+constructing the entire parameter specification at once, or incrementally\n+constructing it from available data.\n+\n+These arguments are:\n+\n+| Name                    | Description                          | Modes    | Setter                                                                                              |\n+|-------------------------|--------------------------------------|----------|-----------------------------------------------------------------------------------------------------|\n+| PRF                     | PRF used during KBKDF (HMAC or CMAC) | All      | [`setPRF`][kbkdf-spec-set-prf]                                                                      |\n+| PRF Key                 | Key used for the PRF                 | All      | [`setPRFKey`][kbkdf-spec-set-prf-key]                                                               |\n+| Derived Algorithm       | Algorithm of the primary derived key | All      | [`setDerivedKeyAlgorithm`][kbkdf-spec-set-derived-algo]                                             |\n+| Key Size                | Size of the primary derived key      | All      | [`setKeySize`][kbkdf-spec-set-key-size]                                                             |\n+| Initial Value           | Initial chaining value               | Feedback | [`setInitialValue`][kbkdf-spec-set-iv]                                                              |\n+| PRF Data Parameters     | Parameters to control PRF input      | All      | [`setParameters`][kbkdf-spec-set-params] / [`addParameters`][kbkdf-spec-add-param]                  |\n+| Additional Derived Keys | Additional keys to derive            | All      | [`setAdditionalDerivedKeys`][kbkdf-spec-set-keys] / [`addAdditionalDerivedKey`][kbkdf-spec-add-key] |\n+\n+Note: the methods and fields inherited from `NativeEnclosure` shouldn't be\n+called by the KBKDF user during normal usage.\n+\n+#### Using Algorithms\n+\n+When using this KBKDF, both the PRF and the derived key's algorithm must be\n+specified. In both cases, the user has a choice: either use the \n+[PKCS#11 Constant][jss-pkcs11-constants] for the algorithm, or use the\n+algorithm as specified in the [PKCS#11 Algorithm][jss-pkcs11-algorithm]\n+enumeration. \n+\n+For example, the following are equivalent:\n+\n+```java\n+import org.mozilla.jss.pkcs11.PKCS11Constants;\n+\n+KBKDFCounterParams params = new KBDKFCounterParams();\n+params.setPRF(PKCS11Constants.CKM_AES_CMAC);\n+```\n+\n+and\n+\n+```java\n+import org.mozilla.jss.crypto.PKCS11Algorithm;\n+\n+KBKDFCounterParams params = new KBKDFCounterParams();\n+params.setPRF(PKCS11Algorithm.CKM_AES_CMAC);\n+```\n+\n+The latter gives a little more type safety and ensures that the specified\n+algorithm is understood and implemented by JSS; otherwise, they're equivalent.\n+\n+#### Constructing KDF PRF Input Stream (Data) Parameters\n+\n+The core of PKCS#11's KBKDF implementation allows great flexibility in\n+crafting the input stream to the underlying PRF invocation. This allows for\n+a wide range of usages (including in SCP03), assuming some care is taken in\n+ensuring the resulting KBKDF is secure from length extension attacks. See\n+NIST S800-108 for more details regarding concerns.\n+\n+PKCS#11 v3.0 defines four types of input parameters:\n+\n+| Name                        | Description                                                |\n+|-----------------------------|------------------------------------------------------------|\n+| KBKDFByteArrayParam         | A static array of bytes to add to the PRF input stream     |\n+| KBKDFDKMLengthParam         | A structure for encoding and calculating KDF output length |\n+| KBKDFIterationVariableParam | Either an incrementing counter or a chaining value         |\n+| KBKDFOptionalCounterParam   | (In Feedback and Pipeline Modes); an optional counter      |\n+\n+Please refer to [section 2.42.2 Mechanism Parameters](pkcs11-kbkdf-params)\n+for more information about correct usage of each parameter, how they correlate\n+to names in NIST SP800-108, and with which KDF modes each parameter can be\n+used.\n+\n+#### Deriving Additional Keys\n+\n+PKCS#11 v3.0 defines a way of extracting additional keys from the derived key\n+material. See [section 2.42.6 Deriving Additional Keys](pkcs11-kbkdf-adk) for\n+a comprehensive reference.\n+\n+The `CK_DERIVED_KEY` PKCS#11 structure is mirrored in the `KBKDFDerivedKey`\n+class. Add PKCS#11 Attributes to the derived key, specify it in the KDF\n+parameter. After `kg.generateKey(...)` has been called, `getKey(...)` will\n+return the additional key.\n+\n+### Example KBKDF Usage\n+\n+Putting this all together, the following is a short example of how to use the\n+KBKDF to derive a single key for the SCP03 protocol.\n+\n+```java\n+public SymmetricKey kbkdfDeriveSCP03Key(SymmetricKey master,\n+                                        byte[] context,\n+                                        byte kdfConstant,\n+                                        int kdfOutputSizeBytes) {\n+    KeyGenerator kg = KeyGenerator.getInstance(\"KbkdfCounter\", \"Mozilla-JSS\");\n+    KBKDFCounterParams kcp = new KBKDFCounterParams();\n+\n+    kcp.setPRF(PKCS11Algorithm.CKM_AES_CMAC);\n+    kcp.setPRFKey(master);\n+\n+    kcp.setKeySize(kdfOutputSizeBytes);\n+\n+    kcp.addParameter(new KBKDFByteArrayParam(new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, kdfConstant }));\n+    kcp.addParameter(new KBKDFByteArrayParam(new byte[] { 0x00 }));\n+    kcp.addParameter(new KBKDFDKMLengthParam(PKCS11Constants.CK_SP800_108_DKM_LENGTH_SUM_OF_SEGMENTS, true, 2*8));", "originalCommit": "5d7bf71a362cf98670acd8870fd8b8e6be1697d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "05de58e479e2ce436da2536244d13e645d3437ca", "url": "https://github.com/dogtagpki/jss/commit/05de58e479e2ce436da2536244d13e645d3437ca", "message": "Add KBKDF design documentation\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-01-19T23:55:34Z", "type": "forcePushed"}, {"oid": "625c9423847dae4010929777ea5fce2c7311c10b", "url": "https://github.com/dogtagpki/jss/commit/625c9423847dae4010929777ea5fce2c7311c10b", "message": "Add KBKDF design documentation\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-02-12T19:06:08Z", "type": "forcePushed"}, {"oid": "5f7e8fa081210ca749673b9269051dd1fa85e134", "url": "https://github.com/dogtagpki/jss/commit/5f7e8fa081210ca749673b9269051dd1fa85e134", "message": "Add KBKDF Usage Documentation\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-02-12T19:10:32Z", "type": "commit"}, {"oid": "f43ccb4355b7138560a259b84a851abc2f96ec0f", "url": "https://github.com/dogtagpki/jss/commit/f43ccb4355b7138560a259b84a851abc2f96ec0f", "message": "Add KBKDF design documentation\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-02-12T19:10:41Z", "type": "commit"}, {"oid": "f43ccb4355b7138560a259b84a851abc2f96ec0f", "url": "https://github.com/dogtagpki/jss/commit/f43ccb4355b7138560a259b84a851abc2f96ec0f", "message": "Add KBKDF design documentation\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-02-12T19:10:41Z", "type": "forcePushed"}]}