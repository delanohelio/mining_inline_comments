{"pr_number": 419, "pr_title": "Query and Set Default SSL configuration", "pr_createdAt": "2020-03-05T17:37:15Z", "pr_url": "https://github.com/dogtagpki/jss/pull/419", "timeline": [{"oid": "b49b9f06b58d1a5471aae3212855ea9ab4a0bebb", "url": "https://github.com/dogtagpki/jss/commit/b49b9f06b58d1a5471aae3212855ea9ab4a0bebb", "message": "Add CipherPrefSetDefault, CipherPrefGetDefault\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-03-05T17:30:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3ODE0NQ==", "url": "https://github.com/dogtagpki/jss/pull/419#discussion_r388478145", "bodyText": "Is this the exact length of the current string? I'd give it a larger size (e.g. 200) to accommodate the variables and the possibilities of someone updating the text without updating the buffer size.", "author": "edewata", "createdAt": "2020-03-05T18:25:09Z", "path": "org/mozilla/jss/nss/SSL.c", "diffHunk": "@@ -278,6 +278,66 @@ Java_org_mozilla_jss_nss_SSL_VersionRangeGet(JNIEnv *env, jclass clazz,\n     return JSS_SSL_wrapVersionRange(env, vrange);\n }\n \n+JNIEXPORT int JNICALL\n+Java_org_mozilla_jss_nss_SSL_VersionRangeSetDefaultNative(JNIEnv *env, jclass clazz,\n+    jint variant_ssl, jint min_ssl, jint max_ssl)\n+{\n+    SSLVersionRange vrange;\n+    SSLProtocolVariant variant;\n+\n+    PR_ASSERT(env != NULL);\n+    PR_SetError(0, 0);\n+\n+    if (min_ssl < 0 || min_ssl >= JSSL_enums_size ||\n+            max_ssl < 0 || max_ssl >= JSSL_enums_size ||\n+            variant_ssl < 0 || variant_ssl >= JSSL_enums_size)\n+    {\n+        char buf[148];\n+        snprintf(buf, 148,", "originalCommit": "b3ed17093950e72941050e3045dd70ef07c37ecf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwMjA0Mg==", "url": "https://github.com/dogtagpki/jss/pull/419#discussion_r388502042", "bodyText": "The length of the string is 108 without digit placeholders. Each number can be at most 11 digits (since it is a 32-bit signed integer), which means the result fits in 108 + 4*11 = 152 characters. So when numbers were negative, it was actually too small!\nI've fixed this to 200 as suggested. However, note that this is unlikely, as it mostly connotes a mismatch between JSS Java and JSS Native components. (Or reflection).", "author": "cipherboy", "createdAt": "2020-03-05T19:09:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3ODE0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4MjgyMQ==", "url": "https://github.com/dogtagpki/jss/pull/419#discussion_r388482821", "bodyText": "If we want to mimic Java Enum style, we probably can add a value() that returns _enum.", "author": "edewata", "createdAt": "2020-03-05T18:33:46Z", "path": "org/mozilla/jss/ssl/SSLProtocolVariant.java", "diffHunk": "@@ -16,5 +16,5 @@\n \n     private SSLProtocolVariant(int val) { _enum = val; }\n \n-    int getEnum() { return _enum; }\n+    public int getEnum() { return _enum; }", "originalCommit": "b3ed17093950e72941050e3045dd70ef07c37ecf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwNjI2Nw==", "url": "https://github.com/dogtagpki/jss/pull/419#discussion_r388506267", "bodyText": "Yeah, a future improvement would be to make these actual enums, but for the time being, I think we'll leave it as-is.", "author": "cipherboy", "createdAt": "2020-03-05T19:16:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4MjgyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4MzgwMQ==", "url": "https://github.com/dogtagpki/jss/pull/419#discussion_r388483801", "bodyText": "Is there any error code/message from NSS that we can include?", "author": "edewata", "createdAt": "2020-03-05T18:35:45Z", "path": "org/mozilla/jss/nss/SSL.c", "diffHunk": "@@ -192,6 +192,34 @@ Java_org_mozilla_jss_nss_SSL_CipherPrefGet(JNIEnv *env, jclass clazz,\n     return enabled;\n }\n \n+JNIEXPORT int JNICALL\n+Java_org_mozilla_jss_nss_SSL_CipherPrefSetDefault(JNIEnv *env, jclass clazz,\n+    jint cipher, jboolean enabled)\n+{\n+    PR_ASSERT(env != NULL);\n+    PR_SetError(0, 0);\n+\n+    return SSL_CipherPrefSetDefault(cipher, enabled);\n+}\n+\n+JNIEXPORT jboolean JNICALL\n+Java_org_mozilla_jss_nss_SSL_CipherPrefGetDefault(JNIEnv *env, jclass clazz,\n+    jint cipher)\n+{\n+    int enabled = false;\n+\n+    PR_ASSERT(env != NULL);\n+    PR_SetError(0, 0);\n+\n+    if (SSL_CipherPrefGetDefault(cipher, &enabled) != SECSuccess) {\n+        JSS_throwMsg(env, ILLEGAL_ARGUMENT_EXCEPTION,\n+            \"Unknown cipher suite to get or getting its value failed\");", "originalCommit": "b49b9f06b58d1a5471aae3212855ea9ab4a0bebb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4ODA3NA==", "url": "https://github.com/dogtagpki/jss/pull/419#discussion_r388488074", "bodyText": "Yes and no:\nSECStatus\nSSL_CipherPrefGetDefault(PRInt32 which, PRBool *enabled)\n{\n    SECStatus rv;\n\n    if (!enabled) {\n        PORT_SetError(SEC_ERROR_INVALID_ARGS);\n        return SECFailure;\n    }\n    if (ssl_IsRemovedCipherSuite(which)) {\n        *enabled = PR_FALSE;\n        rv = SECSuccess;\n    } else {\n        rv = ssl3_CipherPrefGetDefault((ssl3CipherSuite)which, enabled);\n    }\n    return rv;\n}\n\n/* return the user preference for this suite */\nSECStatus\nssl3_CipherPrefGetDefault(ssl3CipherSuite which, PRBool *enabled)\n{\n    const ssl3CipherSuiteCfg *suite;\n    PRBool pref;\n    SECStatus rv;\n\n    suite = ssl_LookupCipherSuiteCfg(which, cipherSuites);\n    if (suite) {\n        pref = suite->enabled;\n        rv = SECSuccess;\n    } else {\n        pref = SSL_NOT_ALLOWED;\n        rv = SECFailure; /* err code was set by Lookup. */\n    }\n    *enabled = pref;\n    return rv;\n}\n\n/* Find the cipher configuration struct associate with suite */\n/* XXX This does a linear search.  A binary search would be better. */\nstatic ssl3CipherSuiteCfg *\nssl_LookupCipherSuiteCfgMutable(ssl3CipherSuite suite,\n                                ssl3CipherSuiteCfg *suites)\n{\n    int i;\n\n    for (i = 0; i < ssl_V3_SUITES_IMPLEMENTED; i++) {\n        if (suites[i].cipher_suite == suite)\n            return &suites[i];\n    }\n    /* return NULL and let the caller handle it.  */\n    PORT_SetError(SSL_ERROR_UNKNOWN_CIPHER_SUITE);\n    return NULL;\n}\n\nconst ssl3CipherSuiteCfg *\nssl_LookupCipherSuiteCfg(ssl3CipherSuite suite, const ssl3CipherSuiteCfg *suites)\n{\n    return ssl_LookupCipherSuiteCfgMutable(suite,\n                                           CONST_CAST(ssl3CipherSuiteCfg, suites));\n}\nFailure case in SSL_CipherPrefGetDefault won't get hit unless something hits the fan and C passes a NULL value for a stack variable reference. Should never happen.\nThe only other remaining failure case is SSL_ERROR_UNKNOWN_CIPHER_SUITE -- that means the NSS version doesn't know our given cipher suite. Should rarely happen and is safe to ignore on the aggregate (like we do in JSSEngine).", "author": "cipherboy", "createdAt": "2020-03-05T18:44:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4MzgwMQ=="}], "type": "inlineReview"}, {"oid": "18529ab98b4a5f572ad5e896228c6a77d404396c", "url": "https://github.com/dogtagpki/jss/commit/18529ab98b4a5f572ad5e896228c6a77d404396c", "message": "Add VersionRangeGetDefault, VersionRangeSetDefault\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-03-05T19:13:53Z", "type": "commit"}, {"oid": "18529ab98b4a5f572ad5e896228c6a77d404396c", "url": "https://github.com/dogtagpki/jss/commit/18529ab98b4a5f572ad5e896228c6a77d404396c", "message": "Add VersionRangeGetDefault, VersionRangeSetDefault\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-03-05T19:13:53Z", "type": "forcePushed"}]}