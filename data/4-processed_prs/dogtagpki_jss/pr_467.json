{"pr_number": 467, "pr_title": "Support RSA-PSS Signature scheme", "pr_createdAt": "2020-04-02T15:05:22Z", "pr_url": "https://github.com/dogtagpki/jss/pull/467", "timeline": [{"oid": "b1191fc011dde08bcc9093743669a8404a7cc2e7", "url": "https://github.com/dogtagpki/jss/commit/b1191fc011dde08bcc9093743669a8404a7cc2e7", "message": "Refactor JCASigTest\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-04-02T15:29:28Z", "type": "forcePushed"}, {"oid": "8eda7bd9324cd02fea1d32b5182972b4f9db1657", "url": "https://github.com/dogtagpki/jss/commit/8eda7bd9324cd02fea1d32b5182972b4f9db1657", "message": "Refactor SigTest\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-04-02T16:33:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1MjQ5NA==", "url": "https://github.com/dogtagpki/jss/pull/467#discussion_r402452494", "bodyText": "@jmagne While this is still fresh, do you have better descriptions here? I'm not sure I've fully grasped this DER decoding business here and its relevance.\nThis applies to lines 148 also.", "author": "cipherboy", "createdAt": "2020-04-02T16:37:03Z", "path": "org/mozilla/jss/provider/java/security/RSAPSSAlgorithmParameters.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/* This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n+\n+package org.mozilla.jss.provider.java.security;\n+\n+import java.security.*;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidParameterSpecException;\n+import java.security.spec.PSSParameterSpec;\n+import java.security.spec.MGF1ParameterSpec;\n+import java.io.IOException;\n+import org.mozilla.jss.util.Assert;\n+import org.mozilla.jss.netscape.security.util.BigInt;\n+import org.mozilla.jss.netscape.security.x509.AlgorithmId;\n+import org.mozilla.jss.netscape.security.util.DerOutputStream;\n+import org.mozilla.jss.netscape.security.util.DerInputStream;\n+import org.mozilla.jss.netscape.security.util.DerValue;\n+import org.mozilla.jss.netscape.security.util.ObjectIdentifier;\n+import org.mozilla.jss.asn1.ASN1Template;\n+import org.mozilla.jss.asn1.ASN1Value;\n+import org.mozilla.jss.asn1.INTEGER;\n+import org.mozilla.jss.asn1.InvalidBERException;\n+import org.mozilla.jss.asn1.OBJECT_IDENTIFIER;\n+import org.mozilla.jss.asn1.OCTET_STRING;\n+import org.mozilla.jss.asn1.SEQUENCE;\n+import org.mozilla.jss.asn1.Tag;\n+\n+/**\n+ * A RSAPSSAlgorithmParameter implements the trandcoding between a\n+ * PSSAlgorithmSpec instance and the DER-encoded form.\n+ *\n+ * RSASSA-PSS-params ::= SEQUENCE {\n+ *  hashAlgorithm      [0] OAEP-PSSDigestAlgorithms  DEFAULT sha1,\n+ * maskGenAlgorithm   [1] PKCS1MGFAlgorithms  DEFAULT mgf1SHA1,\n+ * saltLength         [2] INTEGER  DEFAULT 20,\n+ *  trailerField       [3] INTEGER  DEFAULT 1\n+ * }\n+ *\n+ * where\n+ *\n+ *  OAEP-PSSDigestAlgorithms    ALGORITHM-IDENTIFIER ::= {\n+ *    { OID id-sha1 PARAMETERS NULL   }|\n+ *    { OID id-sha224 PARAMETERS NULL   }|\n+ *    { OID id-sha256 PARAMETERS NULL }|\n+ *    { OID id-sha384 PARAMETERS NULL }|\n+ *    { OID id-sha512 PARAMETERS NULL },\n+ *    ...  -- Allows for future expansion --\n+ *  }\n+ *\n+ *  PKCS1MGFAlgorithms    ALGORITHM-IDENTIFIER ::= {\n+ *    { OID id-mgf1 PARAMETERS OAEP-PSSDigestAlgorithms },\n+ *    ...  -- Allows for future expansion --\n+ *  }\n+ */\n+public class RSAPSSAlgorithmParameters extends AlgorithmParametersSpi {\n+    public final static AlgorithmId defaultHashAlg = new AlgorithmId(AlgorithmId.SHA_oid);\n+    public final static AlgorithmId defaultMaskGenFunc  = new AlgorithmId(AlgorithmId.MGF1_oid);\n+    public final static BigInt          defaultSaltLen = new BigInt(20);\n+    public final static BigInt          defaultTrailerField = new BigInt(1);\n+\n+    private PSSParameterSpec spec = PSSParameterSpec.DEFAULT;\n+    private AlgorithmId hashAlg = defaultHashAlg;\n+    private AlgorithmId maskGenFunc = defaultMaskGenFunc;\n+    private BigInt saltLen = defaultSaltLen;\n+    private BigInt trailerField = defaultTrailerField;\n+\n+    public RSAPSSAlgorithmParameters() {}\n+\n+    @Override\n+    protected void engineInit(AlgorithmParameterSpec paramSpec)\n+            throws InvalidParameterSpecException {\n+        spec = (PSSParameterSpec) paramSpec;\n+        populateFromSpec();\n+    }\n+\n+    @Override\n+    protected <T extends AlgorithmParameterSpec> T engineGetParameterSpec(Class<T> paramSpec)\n+            throws InvalidParameterSpecException  {\n+        if (paramSpec.isAssignableFrom(PSSParameterSpec.class)) {\n+            return paramSpec.cast(spec);\n+        }\n+\n+        throw new InvalidParameterSpecException(\"Unknown parameter spec passed to PSS parameters object: \" + paramSpec.getName());\n+    }\n+\n+    @Override\n+    protected void engineInit(byte[] params) throws IOException {\n+        decode(new DerInputStream(params), params);\n+    }\n+\n+    @Override\n+    protected void engineInit(byte[] params, String format) throws IOException {\n+        // Assume Der for now.\n+        Assert.notReached(\"engineInit(byte[],String) not supported\");\n+        throw new IOException(\"engineInit(byte[],String) not supported\");\n+    }\n+\n+    @Override\n+    protected byte[] engineGetEncoded() throws IOException {\n+        DerOutputStream out = new DerOutputStream();\n+        encode(out);\n+        return out.toByteArray();\n+\n+    }\n+\n+    @Override\n+    protected byte[] engineGetEncoded(String format) throws IOException {\n+        //Assume Der for now.\n+        Assert.notReached(\"engineGetEncoded(String format)) not supported\");\n+        throw new IOException(\"engineGetEncoded(String format)) not supported\");\n+    }\n+\n+    @Override\n+    protected String engineToString() {\n+        String str = new String(\"Mozilla-JSS PSSAlgorithmParameters \" +  getClass().getName() + \" HashAlg: \" + spec.getDigestAlgorithm() + \" MaskGenAlg: \" + spec.getMGFAlgorithm() );\n+        return str;\n+    }\n+\n+    private void decode(DerInputStream in , byte[] encoded) throws IOException {\n+        if (in == null) {\n+            throw new IOException(\"Invalid input: got null DerInputStream\");\n+        }\n+\n+        // Sequence has 3 members, trailer field ignored\n+        DerValue seq[] = in.getSequence(3);\n+        if (seq.length != 3) {\n+            throw new IOException(\"Invalid data! Expected a sequence of at least 3 members.\");\n+        }\n+\n+        if (seq[0].isContextSpecific((byte)0)) {\n+            seq[0] = seq[0].data.getDerValue();\n+        } else {\n+             throw new IOException(\"Invalid encoded data!\");", "originalCommit": "8eda7bd9324cd02fea1d32b5182972b4f9db1657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NDc0OA==", "url": "https://github.com/dogtagpki/jss/pull/467#discussion_r402684748", "bodyText": "OK this context stuff has to do with the sequence of this thing, here is the blob again:\nRSASSA-PSS-params ::= SEQUENCE {\nhashAlgorithm      [0] OAEP-PSSDigestAlgorithms  DEFAULT sha1,\nmaskGenAlgorithm   [1] PKCS1MGFAlgorithms  DEFAULT mgf1SHA1,\nsaltLength         [2] INTEGER  DEFAULT 20,\ntrailerField       [3] INTEGER  DEFAULT 1\nSee, the 0,1,2, and 3 ?? This stuff goes into the encoding and is read out when decoding.. It took me many failures of constructing a legal blob before I looked into the context tags like here...", "author": "jmagne", "createdAt": "2020-04-03T01:19:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1MjQ5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1MjYwOQ==", "url": "https://github.com/dogtagpki/jss/pull/467#discussion_r402452609", "bodyText": "of exactly 3 members.", "author": "cipherboy", "createdAt": "2020-04-02T16:37:14Z", "path": "org/mozilla/jss/provider/java/security/RSAPSSAlgorithmParameters.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/* This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n+\n+package org.mozilla.jss.provider.java.security;\n+\n+import java.security.*;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidParameterSpecException;\n+import java.security.spec.PSSParameterSpec;\n+import java.security.spec.MGF1ParameterSpec;\n+import java.io.IOException;\n+import org.mozilla.jss.util.Assert;\n+import org.mozilla.jss.netscape.security.util.BigInt;\n+import org.mozilla.jss.netscape.security.x509.AlgorithmId;\n+import org.mozilla.jss.netscape.security.util.DerOutputStream;\n+import org.mozilla.jss.netscape.security.util.DerInputStream;\n+import org.mozilla.jss.netscape.security.util.DerValue;\n+import org.mozilla.jss.netscape.security.util.ObjectIdentifier;\n+import org.mozilla.jss.asn1.ASN1Template;\n+import org.mozilla.jss.asn1.ASN1Value;\n+import org.mozilla.jss.asn1.INTEGER;\n+import org.mozilla.jss.asn1.InvalidBERException;\n+import org.mozilla.jss.asn1.OBJECT_IDENTIFIER;\n+import org.mozilla.jss.asn1.OCTET_STRING;\n+import org.mozilla.jss.asn1.SEQUENCE;\n+import org.mozilla.jss.asn1.Tag;\n+\n+/**\n+ * A RSAPSSAlgorithmParameter implements the trandcoding between a\n+ * PSSAlgorithmSpec instance and the DER-encoded form.\n+ *\n+ * RSASSA-PSS-params ::= SEQUENCE {\n+ *  hashAlgorithm      [0] OAEP-PSSDigestAlgorithms  DEFAULT sha1,\n+ * maskGenAlgorithm   [1] PKCS1MGFAlgorithms  DEFAULT mgf1SHA1,\n+ * saltLength         [2] INTEGER  DEFAULT 20,\n+ *  trailerField       [3] INTEGER  DEFAULT 1\n+ * }\n+ *\n+ * where\n+ *\n+ *  OAEP-PSSDigestAlgorithms    ALGORITHM-IDENTIFIER ::= {\n+ *    { OID id-sha1 PARAMETERS NULL   }|\n+ *    { OID id-sha224 PARAMETERS NULL   }|\n+ *    { OID id-sha256 PARAMETERS NULL }|\n+ *    { OID id-sha384 PARAMETERS NULL }|\n+ *    { OID id-sha512 PARAMETERS NULL },\n+ *    ...  -- Allows for future expansion --\n+ *  }\n+ *\n+ *  PKCS1MGFAlgorithms    ALGORITHM-IDENTIFIER ::= {\n+ *    { OID id-mgf1 PARAMETERS OAEP-PSSDigestAlgorithms },\n+ *    ...  -- Allows for future expansion --\n+ *  }\n+ */\n+public class RSAPSSAlgorithmParameters extends AlgorithmParametersSpi {\n+    public final static AlgorithmId defaultHashAlg = new AlgorithmId(AlgorithmId.SHA_oid);\n+    public final static AlgorithmId defaultMaskGenFunc  = new AlgorithmId(AlgorithmId.MGF1_oid);\n+    public final static BigInt          defaultSaltLen = new BigInt(20);\n+    public final static BigInt          defaultTrailerField = new BigInt(1);\n+\n+    private PSSParameterSpec spec = PSSParameterSpec.DEFAULT;\n+    private AlgorithmId hashAlg = defaultHashAlg;\n+    private AlgorithmId maskGenFunc = defaultMaskGenFunc;\n+    private BigInt saltLen = defaultSaltLen;\n+    private BigInt trailerField = defaultTrailerField;\n+\n+    public RSAPSSAlgorithmParameters() {}\n+\n+    @Override\n+    protected void engineInit(AlgorithmParameterSpec paramSpec)\n+            throws InvalidParameterSpecException {\n+        spec = (PSSParameterSpec) paramSpec;\n+        populateFromSpec();\n+    }\n+\n+    @Override\n+    protected <T extends AlgorithmParameterSpec> T engineGetParameterSpec(Class<T> paramSpec)\n+            throws InvalidParameterSpecException  {\n+        if (paramSpec.isAssignableFrom(PSSParameterSpec.class)) {\n+            return paramSpec.cast(spec);\n+        }\n+\n+        throw new InvalidParameterSpecException(\"Unknown parameter spec passed to PSS parameters object: \" + paramSpec.getName());\n+    }\n+\n+    @Override\n+    protected void engineInit(byte[] params) throws IOException {\n+        decode(new DerInputStream(params), params);\n+    }\n+\n+    @Override\n+    protected void engineInit(byte[] params, String format) throws IOException {\n+        // Assume Der for now.\n+        Assert.notReached(\"engineInit(byte[],String) not supported\");\n+        throw new IOException(\"engineInit(byte[],String) not supported\");\n+    }\n+\n+    @Override\n+    protected byte[] engineGetEncoded() throws IOException {\n+        DerOutputStream out = new DerOutputStream();\n+        encode(out);\n+        return out.toByteArray();\n+\n+    }\n+\n+    @Override\n+    protected byte[] engineGetEncoded(String format) throws IOException {\n+        //Assume Der for now.\n+        Assert.notReached(\"engineGetEncoded(String format)) not supported\");\n+        throw new IOException(\"engineGetEncoded(String format)) not supported\");\n+    }\n+\n+    @Override\n+    protected String engineToString() {\n+        String str = new String(\"Mozilla-JSS PSSAlgorithmParameters \" +  getClass().getName() + \" HashAlg: \" + spec.getDigestAlgorithm() + \" MaskGenAlg: \" + spec.getMGFAlgorithm() );\n+        return str;\n+    }\n+\n+    private void decode(DerInputStream in , byte[] encoded) throws IOException {\n+        if (in == null) {\n+            throw new IOException(\"Invalid input: got null DerInputStream\");\n+        }\n+\n+        // Sequence has 3 members, trailer field ignored\n+        DerValue seq[] = in.getSequence(3);\n+        if (seq.length != 3) {\n+            throw new IOException(\"Invalid data! Expected a sequence of at least 3 members.\");", "originalCommit": "8eda7bd9324cd02fea1d32b5182972b4f9db1657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0MzQ5MQ==", "url": "https://github.com/dogtagpki/jss/pull/467#discussion_r403143491", "bodyText": "Pending resolution of above.", "author": "cipherboy", "createdAt": "2020-04-03T16:54:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1MjYwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1MzAzMQ==", "url": "https://github.com/dogtagpki/jss/pull/467#discussion_r402453031", "bodyText": "@jmagne Why do we fallback to SHA1 here? Is there a relevant portion of the spec somewhere?", "author": "cipherboy", "createdAt": "2020-04-02T16:37:49Z", "path": "org/mozilla/jss/provider/java/security/RSAPSSAlgorithmParameters.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/* This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n+\n+package org.mozilla.jss.provider.java.security;\n+\n+import java.security.*;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidParameterSpecException;\n+import java.security.spec.PSSParameterSpec;\n+import java.security.spec.MGF1ParameterSpec;\n+import java.io.IOException;\n+import org.mozilla.jss.util.Assert;\n+import org.mozilla.jss.netscape.security.util.BigInt;\n+import org.mozilla.jss.netscape.security.x509.AlgorithmId;\n+import org.mozilla.jss.netscape.security.util.DerOutputStream;\n+import org.mozilla.jss.netscape.security.util.DerInputStream;\n+import org.mozilla.jss.netscape.security.util.DerValue;\n+import org.mozilla.jss.netscape.security.util.ObjectIdentifier;\n+import org.mozilla.jss.asn1.ASN1Template;\n+import org.mozilla.jss.asn1.ASN1Value;\n+import org.mozilla.jss.asn1.INTEGER;\n+import org.mozilla.jss.asn1.InvalidBERException;\n+import org.mozilla.jss.asn1.OBJECT_IDENTIFIER;\n+import org.mozilla.jss.asn1.OCTET_STRING;\n+import org.mozilla.jss.asn1.SEQUENCE;\n+import org.mozilla.jss.asn1.Tag;\n+\n+/**\n+ * A RSAPSSAlgorithmParameter implements the trandcoding between a\n+ * PSSAlgorithmSpec instance and the DER-encoded form.\n+ *\n+ * RSASSA-PSS-params ::= SEQUENCE {\n+ *  hashAlgorithm      [0] OAEP-PSSDigestAlgorithms  DEFAULT sha1,\n+ * maskGenAlgorithm   [1] PKCS1MGFAlgorithms  DEFAULT mgf1SHA1,\n+ * saltLength         [2] INTEGER  DEFAULT 20,\n+ *  trailerField       [3] INTEGER  DEFAULT 1\n+ * }\n+ *\n+ * where\n+ *\n+ *  OAEP-PSSDigestAlgorithms    ALGORITHM-IDENTIFIER ::= {\n+ *    { OID id-sha1 PARAMETERS NULL   }|\n+ *    { OID id-sha224 PARAMETERS NULL   }|\n+ *    { OID id-sha256 PARAMETERS NULL }|\n+ *    { OID id-sha384 PARAMETERS NULL }|\n+ *    { OID id-sha512 PARAMETERS NULL },\n+ *    ...  -- Allows for future expansion --\n+ *  }\n+ *\n+ *  PKCS1MGFAlgorithms    ALGORITHM-IDENTIFIER ::= {\n+ *    { OID id-mgf1 PARAMETERS OAEP-PSSDigestAlgorithms },\n+ *    ...  -- Allows for future expansion --\n+ *  }\n+ */\n+public class RSAPSSAlgorithmParameters extends AlgorithmParametersSpi {\n+    public final static AlgorithmId defaultHashAlg = new AlgorithmId(AlgorithmId.SHA_oid);\n+    public final static AlgorithmId defaultMaskGenFunc  = new AlgorithmId(AlgorithmId.MGF1_oid);\n+    public final static BigInt          defaultSaltLen = new BigInt(20);\n+    public final static BigInt          defaultTrailerField = new BigInt(1);\n+\n+    private PSSParameterSpec spec = PSSParameterSpec.DEFAULT;\n+    private AlgorithmId hashAlg = defaultHashAlg;\n+    private AlgorithmId maskGenFunc = defaultMaskGenFunc;\n+    private BigInt saltLen = defaultSaltLen;\n+    private BigInt trailerField = defaultTrailerField;\n+\n+    public RSAPSSAlgorithmParameters() {}\n+\n+    @Override\n+    protected void engineInit(AlgorithmParameterSpec paramSpec)\n+            throws InvalidParameterSpecException {\n+        spec = (PSSParameterSpec) paramSpec;\n+        populateFromSpec();\n+    }\n+\n+    @Override\n+    protected <T extends AlgorithmParameterSpec> T engineGetParameterSpec(Class<T> paramSpec)\n+            throws InvalidParameterSpecException  {\n+        if (paramSpec.isAssignableFrom(PSSParameterSpec.class)) {\n+            return paramSpec.cast(spec);\n+        }\n+\n+        throw new InvalidParameterSpecException(\"Unknown parameter spec passed to PSS parameters object: \" + paramSpec.getName());\n+    }\n+\n+    @Override\n+    protected void engineInit(byte[] params) throws IOException {\n+        decode(new DerInputStream(params), params);\n+    }\n+\n+    @Override\n+    protected void engineInit(byte[] params, String format) throws IOException {\n+        // Assume Der for now.\n+        Assert.notReached(\"engineInit(byte[],String) not supported\");\n+        throw new IOException(\"engineInit(byte[],String) not supported\");\n+    }\n+\n+    @Override\n+    protected byte[] engineGetEncoded() throws IOException {\n+        DerOutputStream out = new DerOutputStream();\n+        encode(out);\n+        return out.toByteArray();\n+\n+    }\n+\n+    @Override\n+    protected byte[] engineGetEncoded(String format) throws IOException {\n+        //Assume Der for now.\n+        Assert.notReached(\"engineGetEncoded(String format)) not supported\");\n+        throw new IOException(\"engineGetEncoded(String format)) not supported\");\n+    }\n+\n+    @Override\n+    protected String engineToString() {\n+        String str = new String(\"Mozilla-JSS PSSAlgorithmParameters \" +  getClass().getName() + \" HashAlg: \" + spec.getDigestAlgorithm() + \" MaskGenAlg: \" + spec.getMGFAlgorithm() );\n+        return str;\n+    }\n+\n+    private void decode(DerInputStream in , byte[] encoded) throws IOException {\n+        if (in == null) {\n+            throw new IOException(\"Invalid input: got null DerInputStream\");\n+        }\n+\n+        // Sequence has 3 members, trailer field ignored\n+        DerValue seq[] = in.getSequence(3);\n+        if (seq.length != 3) {\n+            throw new IOException(\"Invalid data! Expected a sequence of at least 3 members.\");\n+        }\n+\n+        if (seq[0].isContextSpecific((byte)0)) {\n+            seq[0] = seq[0].data.getDerValue();\n+        } else {\n+             throw new IOException(\"Invalid encoded data!\");\n+        }\n+\n+        AlgorithmId algid = AlgorithmId.parse(seq[0]);\n+\n+        String specAlgName = getSpecAlgName(algid.getName());\n+\n+        String specMGF1Name = \"\";\n+        // Now the MFG1 parameter hash fun is the same as the main hash func.\n+        MGF1ParameterSpec specMFG1ParamSpec = new MGF1ParameterSpec(specAlgName);\n+\n+        if (seq[1].isContextSpecific((byte)1)) {\n+            seq[1] = seq[1].data.getDerValue();\n+        } else {\n+            throw new IOException(\"Invalid encoded data.\");\n+        }\n+\n+        DerInputStream mgf1Str = new DerInputStream(seq[1].toByteArray());\n+        DerValue[] seqMgf1 = mgf1Str.getSequence(2);\n+\n+        ObjectIdentifier mgf1OID = seqMgf1[0].getOID();\n+\n+        if (!mgf1OID.equals(AlgorithmId.MGF1_oid)) {\n+           throw new IOException(\"Invalid encoded data: expected MGF1 OID but got: \" + mgf1OID.toString());\n+        } else {\n+           specMGF1Name = \"MGF1\";\n+        }\n+\n+        if (seq[2].isContextSpecific((byte)2)) {\n+            seq[2]  = seq[2].data.getDerValue();\n+        } else {\n+            throw new IOException(\"Invalid encoded data.\");\n+        }\n+\n+        BigInt sLength = seq[2].getInteger();\n+\n+        this.spec = new PSSParameterSpec(specAlgName, specMGF1Name, specMFG1ParamSpec,\n+                                         sLength.toInt(), 1 /* always default trailer */);\n+\n+        populateFromSpec();\n+    }\n+\n+    private void encode(DerOutputStream out) throws IOException {\n+        try (\n+            DerOutputStream tmp = new DerOutputStream();\n+            DerOutputStream mgf = new DerOutputStream();\n+            DerOutputStream seq1 = new DerOutputStream();\n+            DerOutputStream intStream = new DerOutputStream();\n+        ) {\n+            // Hash algorithm\n+            hashAlg.derEncodeWithContext(tmp,0);\n+\n+            // Mask Gen Function Sequence\n+            mgf.putOID(maskGenFunc.getOID());\n+\n+            // MGF hash alg is the same as the hash Alg at this point.\n+            hashAlg.encode(mgf);\n+            seq1.write(DerValue.tag_Sequence,mgf);\n+            tmp.write(DerValue.createTag(DerValue.TAG_CONTEXT,\n+                                             true, (byte) 1), seq1);\n+\n+            // Salt Length\n+            intStream.putInteger(saltLen);\n+\n+            tmp.write(DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte) 2),\n+                    intStream);\n+\n+            // Ignore trailer field, it never changes over all sequence tags\n+            out.write(DerValue.tag_Sequence, tmp);\n+\n+            byte[] data = out.toByteArray();\n+        }\n+    }\n+\n+    private void populateFromSpec() {\n+        if (spec == null || hashAlg == null) {\n+            return;\n+        }\n+\n+        String hashAlgName = spec.getDigestAlgorithm();\n+        String maskGenName = spec.getMGFAlgorithm();\n+\n+        int saltLen = spec.getSaltLength();\n+        this.saltLen = new BigInt(saltLen);\n+        int trailer = spec.getTrailerField();\n+\n+        // Create the hash alg and mask gen func objects\n+        if (hashAlgName.equals(\"SHA-256\")) {\n+           hashAlg = new AlgorithmId(AlgorithmId.SHA256_oid);\n+        }  else if(hashAlgName.equals(\"SHA-512\")) {\n+           hashAlg = new AlgorithmId(AlgorithmId.SHA512_oid);\n+        }  else if(hashAlgName.equals(\"SHA-384\")) {\n+           hashAlg = new AlgorithmId(AlgorithmId.SHA384_oid);\n+        } else {\n+           hashAlg = new AlgorithmId(AlgorithmId.SHA_oid);", "originalCommit": "8eda7bd9324cd02fea1d32b5182972b4f9db1657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NTIzMQ==", "url": "https://github.com/dogtagpki/jss/pull/467#discussion_r402685231", "bodyText": "I just put that there cause other implementations of this thing I observed that being the default value. I can see throwing an exception could be appropriate here..", "author": "jmagne", "createdAt": "2020-04-03T01:21:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1MzAzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1MzIzNA==", "url": "https://github.com/dogtagpki/jss/pull/467#discussion_r402453234", "bodyText": "@jmagne Same here?", "author": "cipherboy", "createdAt": "2020-04-02T16:38:10Z", "path": "org/mozilla/jss/provider/java/security/RSAPSSAlgorithmParameters.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/* This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n+\n+package org.mozilla.jss.provider.java.security;\n+\n+import java.security.*;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidParameterSpecException;\n+import java.security.spec.PSSParameterSpec;\n+import java.security.spec.MGF1ParameterSpec;\n+import java.io.IOException;\n+import org.mozilla.jss.util.Assert;\n+import org.mozilla.jss.netscape.security.util.BigInt;\n+import org.mozilla.jss.netscape.security.x509.AlgorithmId;\n+import org.mozilla.jss.netscape.security.util.DerOutputStream;\n+import org.mozilla.jss.netscape.security.util.DerInputStream;\n+import org.mozilla.jss.netscape.security.util.DerValue;\n+import org.mozilla.jss.netscape.security.util.ObjectIdentifier;\n+import org.mozilla.jss.asn1.ASN1Template;\n+import org.mozilla.jss.asn1.ASN1Value;\n+import org.mozilla.jss.asn1.INTEGER;\n+import org.mozilla.jss.asn1.InvalidBERException;\n+import org.mozilla.jss.asn1.OBJECT_IDENTIFIER;\n+import org.mozilla.jss.asn1.OCTET_STRING;\n+import org.mozilla.jss.asn1.SEQUENCE;\n+import org.mozilla.jss.asn1.Tag;\n+\n+/**\n+ * A RSAPSSAlgorithmParameter implements the trandcoding between a\n+ * PSSAlgorithmSpec instance and the DER-encoded form.\n+ *\n+ * RSASSA-PSS-params ::= SEQUENCE {\n+ *  hashAlgorithm      [0] OAEP-PSSDigestAlgorithms  DEFAULT sha1,\n+ * maskGenAlgorithm   [1] PKCS1MGFAlgorithms  DEFAULT mgf1SHA1,\n+ * saltLength         [2] INTEGER  DEFAULT 20,\n+ *  trailerField       [3] INTEGER  DEFAULT 1\n+ * }\n+ *\n+ * where\n+ *\n+ *  OAEP-PSSDigestAlgorithms    ALGORITHM-IDENTIFIER ::= {\n+ *    { OID id-sha1 PARAMETERS NULL   }|\n+ *    { OID id-sha224 PARAMETERS NULL   }|\n+ *    { OID id-sha256 PARAMETERS NULL }|\n+ *    { OID id-sha384 PARAMETERS NULL }|\n+ *    { OID id-sha512 PARAMETERS NULL },\n+ *    ...  -- Allows for future expansion --\n+ *  }\n+ *\n+ *  PKCS1MGFAlgorithms    ALGORITHM-IDENTIFIER ::= {\n+ *    { OID id-mgf1 PARAMETERS OAEP-PSSDigestAlgorithms },\n+ *    ...  -- Allows for future expansion --\n+ *  }\n+ */\n+public class RSAPSSAlgorithmParameters extends AlgorithmParametersSpi {\n+    public final static AlgorithmId defaultHashAlg = new AlgorithmId(AlgorithmId.SHA_oid);\n+    public final static AlgorithmId defaultMaskGenFunc  = new AlgorithmId(AlgorithmId.MGF1_oid);\n+    public final static BigInt          defaultSaltLen = new BigInt(20);\n+    public final static BigInt          defaultTrailerField = new BigInt(1);\n+\n+    private PSSParameterSpec spec = PSSParameterSpec.DEFAULT;\n+    private AlgorithmId hashAlg = defaultHashAlg;\n+    private AlgorithmId maskGenFunc = defaultMaskGenFunc;\n+    private BigInt saltLen = defaultSaltLen;\n+    private BigInt trailerField = defaultTrailerField;\n+\n+    public RSAPSSAlgorithmParameters() {}\n+\n+    @Override\n+    protected void engineInit(AlgorithmParameterSpec paramSpec)\n+            throws InvalidParameterSpecException {\n+        spec = (PSSParameterSpec) paramSpec;\n+        populateFromSpec();\n+    }\n+\n+    @Override\n+    protected <T extends AlgorithmParameterSpec> T engineGetParameterSpec(Class<T> paramSpec)\n+            throws InvalidParameterSpecException  {\n+        if (paramSpec.isAssignableFrom(PSSParameterSpec.class)) {\n+            return paramSpec.cast(spec);\n+        }\n+\n+        throw new InvalidParameterSpecException(\"Unknown parameter spec passed to PSS parameters object: \" + paramSpec.getName());\n+    }\n+\n+    @Override\n+    protected void engineInit(byte[] params) throws IOException {\n+        decode(new DerInputStream(params), params);\n+    }\n+\n+    @Override\n+    protected void engineInit(byte[] params, String format) throws IOException {\n+        // Assume Der for now.\n+        Assert.notReached(\"engineInit(byte[],String) not supported\");\n+        throw new IOException(\"engineInit(byte[],String) not supported\");\n+    }\n+\n+    @Override\n+    protected byte[] engineGetEncoded() throws IOException {\n+        DerOutputStream out = new DerOutputStream();\n+        encode(out);\n+        return out.toByteArray();\n+\n+    }\n+\n+    @Override\n+    protected byte[] engineGetEncoded(String format) throws IOException {\n+        //Assume Der for now.\n+        Assert.notReached(\"engineGetEncoded(String format)) not supported\");\n+        throw new IOException(\"engineGetEncoded(String format)) not supported\");\n+    }\n+\n+    @Override\n+    protected String engineToString() {\n+        String str = new String(\"Mozilla-JSS PSSAlgorithmParameters \" +  getClass().getName() + \" HashAlg: \" + spec.getDigestAlgorithm() + \" MaskGenAlg: \" + spec.getMGFAlgorithm() );\n+        return str;\n+    }\n+\n+    private void decode(DerInputStream in , byte[] encoded) throws IOException {\n+        if (in == null) {\n+            throw new IOException(\"Invalid input: got null DerInputStream\");\n+        }\n+\n+        // Sequence has 3 members, trailer field ignored\n+        DerValue seq[] = in.getSequence(3);\n+        if (seq.length != 3) {\n+            throw new IOException(\"Invalid data! Expected a sequence of at least 3 members.\");\n+        }\n+\n+        if (seq[0].isContextSpecific((byte)0)) {\n+            seq[0] = seq[0].data.getDerValue();\n+        } else {\n+             throw new IOException(\"Invalid encoded data!\");\n+        }\n+\n+        AlgorithmId algid = AlgorithmId.parse(seq[0]);\n+\n+        String specAlgName = getSpecAlgName(algid.getName());\n+\n+        String specMGF1Name = \"\";\n+        // Now the MFG1 parameter hash fun is the same as the main hash func.\n+        MGF1ParameterSpec specMFG1ParamSpec = new MGF1ParameterSpec(specAlgName);\n+\n+        if (seq[1].isContextSpecific((byte)1)) {\n+            seq[1] = seq[1].data.getDerValue();\n+        } else {\n+            throw new IOException(\"Invalid encoded data.\");\n+        }\n+\n+        DerInputStream mgf1Str = new DerInputStream(seq[1].toByteArray());\n+        DerValue[] seqMgf1 = mgf1Str.getSequence(2);\n+\n+        ObjectIdentifier mgf1OID = seqMgf1[0].getOID();\n+\n+        if (!mgf1OID.equals(AlgorithmId.MGF1_oid)) {\n+           throw new IOException(\"Invalid encoded data: expected MGF1 OID but got: \" + mgf1OID.toString());\n+        } else {\n+           specMGF1Name = \"MGF1\";\n+        }\n+\n+        if (seq[2].isContextSpecific((byte)2)) {\n+            seq[2]  = seq[2].data.getDerValue();\n+        } else {\n+            throw new IOException(\"Invalid encoded data.\");\n+        }\n+\n+        BigInt sLength = seq[2].getInteger();\n+\n+        this.spec = new PSSParameterSpec(specAlgName, specMGF1Name, specMFG1ParamSpec,\n+                                         sLength.toInt(), 1 /* always default trailer */);\n+\n+        populateFromSpec();\n+    }\n+\n+    private void encode(DerOutputStream out) throws IOException {\n+        try (\n+            DerOutputStream tmp = new DerOutputStream();\n+            DerOutputStream mgf = new DerOutputStream();\n+            DerOutputStream seq1 = new DerOutputStream();\n+            DerOutputStream intStream = new DerOutputStream();\n+        ) {\n+            // Hash algorithm\n+            hashAlg.derEncodeWithContext(tmp,0);\n+\n+            // Mask Gen Function Sequence\n+            mgf.putOID(maskGenFunc.getOID());\n+\n+            // MGF hash alg is the same as the hash Alg at this point.\n+            hashAlg.encode(mgf);\n+            seq1.write(DerValue.tag_Sequence,mgf);\n+            tmp.write(DerValue.createTag(DerValue.TAG_CONTEXT,\n+                                             true, (byte) 1), seq1);\n+\n+            // Salt Length\n+            intStream.putInteger(saltLen);\n+\n+            tmp.write(DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte) 2),\n+                    intStream);\n+\n+            // Ignore trailer field, it never changes over all sequence tags\n+            out.write(DerValue.tag_Sequence, tmp);\n+\n+            byte[] data = out.toByteArray();\n+        }\n+    }\n+\n+    private void populateFromSpec() {\n+        if (spec == null || hashAlg == null) {\n+            return;\n+        }\n+\n+        String hashAlgName = spec.getDigestAlgorithm();\n+        String maskGenName = spec.getMGFAlgorithm();\n+\n+        int saltLen = spec.getSaltLength();\n+        this.saltLen = new BigInt(saltLen);\n+        int trailer = spec.getTrailerField();\n+\n+        // Create the hash alg and mask gen func objects\n+        if (hashAlgName.equals(\"SHA-256\")) {\n+           hashAlg = new AlgorithmId(AlgorithmId.SHA256_oid);\n+        }  else if(hashAlgName.equals(\"SHA-512\")) {\n+           hashAlg = new AlgorithmId(AlgorithmId.SHA512_oid);\n+        }  else if(hashAlgName.equals(\"SHA-384\")) {\n+           hashAlg = new AlgorithmId(AlgorithmId.SHA384_oid);\n+        } else {\n+           hashAlg = new AlgorithmId(AlgorithmId.SHA_oid);\n+        }\n+    }\n+\n+    private String getSpecAlgName(String algName) {\n+        if (\"SHA256\".equals(algName)) {\n+            return \"SHA-256\";\n+        } else if(\"SHA384\".equals(algName)) {\n+            return \"SHA-384\";\n+        } else if(\"SHA512\".equals(algName)) {\n+            return \"SHA-512\";\n+        } else {\n+            // Default to SHA-1\n+            return \"SHA-1\";", "originalCommit": "8eda7bd9324cd02fea1d32b5182972b4f9db1657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NTMwMA==", "url": "https://github.com/dogtagpki/jss/pull/467#discussion_r402685300", "bodyText": "Same as above, but of course this should never happen. but ...", "author": "jmagne", "createdAt": "2020-04-03T01:21:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1MzIzNA=="}], "type": "inlineReview"}, {"oid": "bee0f862f2ca892ebce0f752570dcb3551bf9396", "url": "https://github.com/dogtagpki/jss/commit/bee0f862f2ca892ebce0f752570dcb3551bf9396", "message": "Refactor SigTest\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-04-02T16:42:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3OTczNw==", "url": "https://github.com/dogtagpki/jss/pull/467#discussion_r402479737", "bodyText": "remove", "author": "cipherboy", "createdAt": "2020-04-02T17:19:53Z", "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -45,87 +53,168 @@ JNIEXPORT void JNICALL\n Java_org_mozilla_jss_pkcs11_PK11Signature_initSigContext\n   (JNIEnv *env, jobject this)\n {\n-    SGNContext *ctxt=NULL;\n-    jobject contextProxy=NULL;\n-    SECKEYPrivateKey *privk;\n+    SGNContext *ctxt = NULL;\n+    jobject contextProxy = NULL;\n+    SECKEYPrivateKey *privk = NULL;\n+    SECAlgorithmID *signAlg = NULL;\n+    SECStatus rv = SECFailure;\n+    PRArenaPool *arena = NULL;\n+    SECOidTag signingAlg = SEC_OID_UNKNOWN;\n \n     /* Extract the private key from the PK11Signature */\n-    if( getPrivateKey(env, this, &privk) != PR_SUCCESS) {\n-        PR_ASSERT( (*env)->ExceptionOccurred(env) != NULL);\n+    if (getPrivateKey(env, this, &privk) != PR_SUCCESS) {\n+        PR_ASSERT((*env)->ExceptionOccurred(env) != NULL);\n         goto finish;\n     }\n \n-    /* Start the signing operation */\n-    ctxt = SGN_NewContext(getAlgorithm(env, this), privk);\n-\tif(ctxt == NULL) {\n-\t\tJSS_throwMsg(env, TOKEN_EXCEPTION, \"Unable to create signing context\");\n-\t\tgoto finish;\n-\t}\n-    if( SGN_Begin(ctxt) != SECSuccess ) {\n+    signingAlg = getAlgorithm(env,this);\n+    if (signingAlg == SEC_OID_PKCS1_RSA_PSS_SIGNATURE) {\n+        arena = PORT_NewArena(DER_DEFAULT_CHUNKSIZE);\n+        if (!arena) {\n+           JSS_throw(env, OUT_OF_MEMORY_ERROR);\n+           goto finish;\n+        }\n+\n+        rv = getRSAPSSParamsAndSigningAlg(env, this, arena, &signAlg, privk);\n+        if (rv == SECFailure) {\n+            goto finish;\n+        }\n+\n+        /* Start the signing operation */\n+        ctxt = SGN_NewContextWithAlgorithmID(signAlg, privk);\n+    } else {\n+        ctxt = SGN_NewContext(signingAlg, privk);\n+    }\n+\n+    if (ctxt == NULL) {\n+        if (arena != NULL) {\n+            PORT_FreeArena(arena, PR_TRUE /* zero */);\n+        }\n+\n+        JSS_throwMsg(env, TOKEN_EXCEPTION, \"Unable to create signing context\");\n+        goto finish;\n+    }\n+\n+    if (SGN_Begin(ctxt) != SECSuccess) {\n         JSS_throwMsg(env, TOKEN_EXCEPTION, \"Unable to begin signing context\");\n         goto finish;\n     }\n \n     /* Create a contextProxy and stick it in the PK11Signature object */\n-    contextProxy = JSS_PK11_wrapSigContextProxy(env,\n-\t\t\t\t\t\t\t\t\t\t\t\t(void**)&ctxt,\n-\t\t\t\t\t\t\t\t\t\t\t\tSGN_CONTEXT);\n-    if(contextProxy == NULL) {\n-        PR_ASSERT( (*env)->ExceptionOccurred(env) != NULL);\n+    contextProxy = JSS_PK11_wrapSigContextProxy(env, (void**)&ctxt,\n+                                                SGN_CONTEXT, arena);\n+\n+    if (contextProxy == NULL) {\n+        PR_ASSERT((*env)->ExceptionOccurred(env) != NULL);\n         goto finish;\n     }\n+\n+    // Signature algorithm for RSA PSS allocated in the arena,\n+    // which is destroyed on exit.\n     setSigContext(env, this, contextProxy);\n \n finish:\n-    if(contextProxy==NULL && ctxt!=NULL) {\n+    if (contextProxy == NULL && ctxt != NULL) {\n         /* we created a context but not the Java wrapper, so we need to\n          * delete the context here. */\n         SGN_DestroyContext(ctxt, PR_TRUE /*freeit*/);\n+        if (arena != NULL) {\n+            PORT_FreeArena(arena, PR_TRUE /* zero */);\n+        }\n     }\n }\n \n JNIEXPORT void JNICALL\n Java_org_mozilla_jss_pkcs11_PK11Signature_initVfyContext\n-\t(JNIEnv *env, jobject this)\n+    (JNIEnv *env, jobject this)\n {\n-\tVFYContext *ctxt=NULL;\n-\tjobject contextProxy=NULL;\n-\tSECKEYPublicKey *pubk;\n+    VFYContext *ctxt = NULL;\n+    jobject contextProxy = NULL;\n+    SECKEYPublicKey *pubk = NULL;\n+    SECKEYPrivateKey *privk = NULL;\n+    SECKEYPublicKey *tempPubKey = NULL;\n+\n+    PRArenaPool *arena = NULL;\n+    SECAlgorithmID *signAlg = NULL;\n+    SECStatus rv = SECFailure;\n+    SECOidTag signingAlg = SEC_OID_UNKNOWN;\n+\n+    if (getPublicKey(env, this, &pubk) != PR_SUCCESS) {\n+        PR_ASSERT((*env)->ExceptionOccurred(env) != NULL);\n+        goto finish;\n+    }\n \n-\tif( getPublicKey(env, this, &pubk) != PR_SUCCESS ) {\n-\t\tPR_ASSERT( (*env)->ExceptionOccurred(env) != NULL);\n-\t\tgoto finish;\n-\t}\n-\t\n-\tctxt = VFY_CreateContext(pubk, NULL /*sig*/, getAlgorithm(env, this),\n-                NULL /*wincx*/);\n-\tif( ctxt == NULL) {\n-\t\tJSS_throwMsg(env, TOKEN_EXCEPTION,\n-\t\t\t\"Unable to create verification context\");\n-\t\tgoto finish;\n-\t}\n-\tif( VFY_Begin(ctxt) != SECSuccess) {\n-\t\tJSS_throwMsg(env, TOKEN_EXCEPTION,\n-\t\t\t\"Unable to begin verification context\");\n-\t\tgoto finish;\n-\t}\n+    signingAlg = getAlgorithm(env,this);\n+    if (signingAlg == SEC_OID_PKCS1_RSA_PSS_SIGNATURE) {\n+        /* Create place holder private key, just to create the PSS Params. */\n+        unsigned key_bits = SECKEY_PublicKeyStrengthInBits(pubk);\n+        privk = SECKEY_CreateRSAPrivateKey(key_bits, &tempPubKey, NULL);\n+        if (privk == NULL) {\n+            PR_ASSERT((*env)->ExceptionOccurred(env) != NULL);\n+            goto finish;\n+        }\n \n-\t/* create a ContextProxy and stick it in the PK11Signature object */\n-\tcontextProxy = JSS_PK11_wrapSigContextProxy(env,\n-\t\t\t\t\t\t\t\t\t\t\t\t(void**)&ctxt,\n-\t\t\t\t\t\t\t\t\t\t\t\tVFY_CONTEXT);\n-\tif(contextProxy == NULL) {\n-\t\tPR_ASSERT( (*env)->ExceptionOccurred(env) != NULL);\n-\t\tgoto finish;\n-\t}\n-\tsetSigContext(env, this, contextProxy);\n+        arena = PORT_NewArena(DER_DEFAULT_CHUNKSIZE);\n+        if (arena == NULL) {\n+            JSS_throw(env, OUT_OF_MEMORY_ERROR);\n+            goto finish;\n+        }\n+\n+        rv = getRSAPSSParamsAndSigningAlg(env, this, arena, &signAlg, privk);\n+        if (rv == SECFailure) {\n+            goto finish;\n+        }\n+\n+        SECOidTag digestAlg = SEC_OID_UNKNOWN;\n+        digestAlg = getDigestAlgorithm(env, this);\n+        ctxt = VFY_CreateContextWithAlgorithmID(pubk, NULL, signAlg,\n+                                                &digestAlg, NULL);\n+    } else {\n+        ctxt = VFY_CreateContext(pubk, NULL /*sig*/, signingAlg,\n+                                 NULL /*wincx*/);\n+    }\n+\n+    if (ctxt == NULL) {\n+        if (arena != NULL) {\n+            PORT_FreeArena(arena, PR_TRUE /* zero */);\n+        }\n+\n+        JSS_throwMsg(env, TOKEN_EXCEPTION, \"Unable to create vfy context\");\n+        goto finish;\n+    }\n+\n+    if (VFY_Begin(ctxt) != SECSuccess) {\n+        JSS_throwMsg(env, TOKEN_EXCEPTION,\n+                     \"Unable to begin verification context\");\n+        goto finish;\n+    }\n+\n+    /* create a ContextProxy and stick it in the PK11Signature object */\n+    contextProxy = JSS_PK11_wrapSigContextProxy(env, (void**)&ctxt,\n+                                                VFY_CONTEXT, NULL);\n+    if (contextProxy == NULL) {\n+        PR_ASSERT((*env)->ExceptionOccurred(env) != NULL);\n+        goto finish;\n+    }\n+\n+    setSigContext(env, this, contextProxy);\n \n finish:\n-\tif(contextProxy==NULL && ctxt!=NULL) {\n-\t\t/* we created a context but not the Java wrapper, so we need to\n-\t \t * delete the context here */\n-\t\tVFY_DestroyContext(ctxt, PR_TRUE /*freeit*/);\n-\t}\n+    if (contextProxy == NULL && ctxt != NULL) {\n+        /* we created a context but not the Java wrapper, so we need to\n+         * delete the context here */\n+        VFY_DestroyContext(ctxt, PR_TRUE /*freeit*/);\n+    }\n+\n+    if (tempPubKey != NULL) {\n+        SECKEY_DestroyPublicKey(tempPubKey);\n+        tempPubKey = NULL;", "originalCommit": "bee0f862f2ca892ebce0f752570dcb3551bf9396", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3OTk4NQ==", "url": "https://github.com/dogtagpki/jss/pull/467#discussion_r402479985", "bodyText": "return, don't goto.", "author": "cipherboy", "createdAt": "2020-04-02T17:20:17Z", "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -332,6 +421,73 @@ getAlgorithm(JNIEnv *env, jobject sig)\n     return retval;\n }\n \n+static SECOidTag\n+getDigestAlgorithm(JNIEnv *env, jobject sig)\n+{\n+    jclass sigClass;\n+    jfieldID algField;\n+    jobject alg;\n+    SECOidTag retval = SEC_OID_UNKNOWN;\n+\n+    PR_ASSERT(env != NULL && sig != NULL);\n+\n+    sigClass = (*env)->GetObjectClass(env, sig);\n+    PR_ASSERT(sigClass != NULL);\n+\n+    algField = (*env)->GetFieldID(env, sigClass, SIG_DIGEST_ALGORITHM_FIELD,\n+                                  SIG_ALGORITHM_SIG);\n+    if (algField == NULL) {\n+        ASSERT_OUTOFMEM(env);\n+        goto finish;", "originalCommit": "bee0f862f2ca892ebce0f752570dcb3551bf9396", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4MzI1OA==", "url": "https://github.com/dogtagpki/jss/pull/467#discussion_r402483258", "bodyText": "When ctx == NULL and we're in an error case from getRSAPSSParamsAndSigningAlg, we leak arena, meaning signAlg gets leaked.", "author": "cipherboy", "createdAt": "2020-04-02T17:24:57Z", "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -45,87 +53,168 @@ JNIEXPORT void JNICALL\n Java_org_mozilla_jss_pkcs11_PK11Signature_initSigContext\n   (JNIEnv *env, jobject this)\n {\n-    SGNContext *ctxt=NULL;\n-    jobject contextProxy=NULL;\n-    SECKEYPrivateKey *privk;\n+    SGNContext *ctxt = NULL;\n+    jobject contextProxy = NULL;\n+    SECKEYPrivateKey *privk = NULL;\n+    SECAlgorithmID *signAlg = NULL;\n+    SECStatus rv = SECFailure;\n+    PRArenaPool *arena = NULL;\n+    SECOidTag signingAlg = SEC_OID_UNKNOWN;\n \n     /* Extract the private key from the PK11Signature */\n-    if( getPrivateKey(env, this, &privk) != PR_SUCCESS) {\n-        PR_ASSERT( (*env)->ExceptionOccurred(env) != NULL);\n+    if (getPrivateKey(env, this, &privk) != PR_SUCCESS) {\n+        PR_ASSERT((*env)->ExceptionOccurred(env) != NULL);\n         goto finish;\n     }\n \n-    /* Start the signing operation */\n-    ctxt = SGN_NewContext(getAlgorithm(env, this), privk);\n-\tif(ctxt == NULL) {\n-\t\tJSS_throwMsg(env, TOKEN_EXCEPTION, \"Unable to create signing context\");\n-\t\tgoto finish;\n-\t}\n-    if( SGN_Begin(ctxt) != SECSuccess ) {\n+    signingAlg = getAlgorithm(env,this);\n+    if (signingAlg == SEC_OID_PKCS1_RSA_PSS_SIGNATURE) {\n+        arena = PORT_NewArena(DER_DEFAULT_CHUNKSIZE);\n+        if (!arena) {\n+           JSS_throw(env, OUT_OF_MEMORY_ERROR);\n+           goto finish;\n+        }\n+\n+        rv = getRSAPSSParamsAndSigningAlg(env, this, arena, &signAlg, privk);\n+        if (rv == SECFailure) {\n+            goto finish;\n+        }\n+\n+        /* Start the signing operation */\n+        ctxt = SGN_NewContextWithAlgorithmID(signAlg, privk);\n+    } else {\n+        ctxt = SGN_NewContext(signingAlg, privk);\n+    }\n+\n+    if (ctxt == NULL) {\n+        if (arena != NULL) {\n+            PORT_FreeArena(arena, PR_TRUE /* zero */);\n+        }\n+\n+        JSS_throwMsg(env, TOKEN_EXCEPTION, \"Unable to create signing context\");\n+        goto finish;\n+    }\n+\n+    if (SGN_Begin(ctxt) != SECSuccess) {\n         JSS_throwMsg(env, TOKEN_EXCEPTION, \"Unable to begin signing context\");\n         goto finish;\n     }\n \n     /* Create a contextProxy and stick it in the PK11Signature object */\n-    contextProxy = JSS_PK11_wrapSigContextProxy(env,\n-\t\t\t\t\t\t\t\t\t\t\t\t(void**)&ctxt,\n-\t\t\t\t\t\t\t\t\t\t\t\tSGN_CONTEXT);\n-    if(contextProxy == NULL) {\n-        PR_ASSERT( (*env)->ExceptionOccurred(env) != NULL);\n+    contextProxy = JSS_PK11_wrapSigContextProxy(env, (void**)&ctxt,\n+                                                SGN_CONTEXT, arena);\n+\n+    if (contextProxy == NULL) {\n+        PR_ASSERT((*env)->ExceptionOccurred(env) != NULL);\n         goto finish;\n     }\n+\n+    // Signature algorithm for RSA PSS allocated in the arena,\n+    // which is destroyed on exit.\n     setSigContext(env, this, contextProxy);\n \n finish:\n-    if(contextProxy==NULL && ctxt!=NULL) {\n+    if (contextProxy == NULL && ctxt != NULL) {\n         /* we created a context but not the Java wrapper, so we need to\n          * delete the context here. */\n         SGN_DestroyContext(ctxt, PR_TRUE /*freeit*/);\n+        if (arena != NULL) {\n+            PORT_FreeArena(arena, PR_TRUE /* zero */);", "originalCommit": "bee0f862f2ca892ebce0f752570dcb3551bf9396", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NjY5Nw==", "url": "https://github.com/dogtagpki/jss/pull/467#discussion_r402686697", "bodyText": "Yep, looks to be true.", "author": "jmagne", "createdAt": "2020-04-03T01:27:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ4MzI1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0MzMyMA==", "url": "https://github.com/dogtagpki/jss/pull/467#discussion_r403143320", "bodyText": "@jmagne So I'm confused here. The comment above says \"trailer field ignored\". I'm not entirely clear on how getSequence works, but if there was a trailer field, wouldn't it return an array of 4 DerValue elements?\nIn particular readVector(...) uses startLen as the initialize size of the vector, but it'll grow if there are four fields.\nShouldn't this read if (seq.length < 3 || seq.length > 4)?", "author": "cipherboy", "createdAt": "2020-04-03T16:54:21Z", "path": "org/mozilla/jss/provider/java/security/RSAPSSAlgorithmParameters.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/* This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n+\n+package org.mozilla.jss.provider.java.security;\n+\n+import java.security.*;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidParameterSpecException;\n+import java.security.spec.PSSParameterSpec;\n+import java.security.spec.MGF1ParameterSpec;\n+import java.io.IOException;\n+import org.mozilla.jss.util.Assert;\n+import org.mozilla.jss.netscape.security.util.BigInt;\n+import org.mozilla.jss.netscape.security.x509.AlgorithmId;\n+import org.mozilla.jss.netscape.security.util.DerOutputStream;\n+import org.mozilla.jss.netscape.security.util.DerInputStream;\n+import org.mozilla.jss.netscape.security.util.DerValue;\n+import org.mozilla.jss.netscape.security.util.ObjectIdentifier;\n+import org.mozilla.jss.asn1.ASN1Template;\n+import org.mozilla.jss.asn1.ASN1Value;\n+import org.mozilla.jss.asn1.INTEGER;\n+import org.mozilla.jss.asn1.InvalidBERException;\n+import org.mozilla.jss.asn1.OBJECT_IDENTIFIER;\n+import org.mozilla.jss.asn1.OCTET_STRING;\n+import org.mozilla.jss.asn1.SEQUENCE;\n+import org.mozilla.jss.asn1.Tag;\n+\n+/**\n+ * A RSAPSSAlgorithmParameter implements the trandcoding between a\n+ * PSSAlgorithmSpec instance and the DER-encoded form.\n+ *\n+ * RSASSA-PSS-params ::= SEQUENCE {\n+ *  hashAlgorithm      [0] OAEP-PSSDigestAlgorithms  DEFAULT sha1,\n+ * maskGenAlgorithm   [1] PKCS1MGFAlgorithms  DEFAULT mgf1SHA1,\n+ * saltLength         [2] INTEGER  DEFAULT 20,\n+ *  trailerField       [3] INTEGER  DEFAULT 1\n+ * }\n+ *\n+ * where\n+ *\n+ *  OAEP-PSSDigestAlgorithms    ALGORITHM-IDENTIFIER ::= {\n+ *    { OID id-sha1 PARAMETERS NULL   }|\n+ *    { OID id-sha224 PARAMETERS NULL   }|\n+ *    { OID id-sha256 PARAMETERS NULL }|\n+ *    { OID id-sha384 PARAMETERS NULL }|\n+ *    { OID id-sha512 PARAMETERS NULL },\n+ *    ...  -- Allows for future expansion --\n+ *  }\n+ *\n+ *  PKCS1MGFAlgorithms    ALGORITHM-IDENTIFIER ::= {\n+ *    { OID id-mgf1 PARAMETERS OAEP-PSSDigestAlgorithms },\n+ *    ...  -- Allows for future expansion --\n+ *  }\n+ */\n+public class RSAPSSAlgorithmParameters extends AlgorithmParametersSpi {\n+    public final static AlgorithmId defaultHashAlg = new AlgorithmId(AlgorithmId.SHA_oid);\n+    public final static AlgorithmId defaultMaskGenFunc  = new AlgorithmId(AlgorithmId.MGF1_oid);\n+    public final static BigInt          defaultSaltLen = new BigInt(20);\n+    public final static BigInt          defaultTrailerField = new BigInt(1);\n+\n+    private PSSParameterSpec spec = PSSParameterSpec.DEFAULT;\n+    private AlgorithmId hashAlg = defaultHashAlg;\n+    private AlgorithmId maskGenFunc = defaultMaskGenFunc;\n+    private BigInt saltLen = defaultSaltLen;\n+    private BigInt trailerField = defaultTrailerField;\n+\n+    public RSAPSSAlgorithmParameters() {}\n+\n+    @Override\n+    protected void engineInit(AlgorithmParameterSpec paramSpec)\n+            throws InvalidParameterSpecException {\n+        spec = (PSSParameterSpec) paramSpec;\n+        populateFromSpec();\n+    }\n+\n+    @Override\n+    protected <T extends AlgorithmParameterSpec> T engineGetParameterSpec(Class<T> paramSpec)\n+            throws InvalidParameterSpecException  {\n+        if (paramSpec.isAssignableFrom(PSSParameterSpec.class)) {\n+            return paramSpec.cast(spec);\n+        }\n+\n+        throw new InvalidParameterSpecException(\"Unknown parameter spec passed to PSS parameters object: \" + paramSpec.getName());\n+    }\n+\n+    @Override\n+    protected void engineInit(byte[] params) throws IOException {\n+        decode(new DerInputStream(params), params);\n+    }\n+\n+    @Override\n+    protected void engineInit(byte[] params, String format) throws IOException {\n+        // Assume Der for now.\n+        Assert.notReached(\"engineInit(byte[],String) not supported\");\n+        throw new IOException(\"engineInit(byte[],String) not supported\");\n+    }\n+\n+    @Override\n+    protected byte[] engineGetEncoded() throws IOException {\n+        DerOutputStream out = new DerOutputStream();\n+        encode(out);\n+        return out.toByteArray();\n+\n+    }\n+\n+    @Override\n+    protected byte[] engineGetEncoded(String format) throws IOException {\n+        //Assume Der for now.\n+        Assert.notReached(\"engineGetEncoded(String format)) not supported\");\n+        throw new IOException(\"engineGetEncoded(String format)) not supported\");\n+    }\n+\n+    @Override\n+    protected String engineToString() {\n+        String str = new String(\"Mozilla-JSS PSSAlgorithmParameters \" +  getClass().getName() + \" HashAlg: \" + spec.getDigestAlgorithm() + \" MaskGenAlg: \" + spec.getMGFAlgorithm() );\n+        return str;\n+    }\n+\n+    private void decode(DerInputStream in , byte[] encoded) throws IOException {\n+        if (in == null) {\n+            throw new IOException(\"Invalid input: got null DerInputStream\");\n+        }\n+\n+        // Sequence has 3 members, trailer field ignored\n+        DerValue seq[] = in.getSequence(3);\n+        if (seq.length != 3) {", "originalCommit": "bee0f862f2ca892ebce0f752570dcb3551bf9396", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIyNDI2Ng==", "url": "https://github.com/dogtagpki/jss/pull/467#discussion_r403224266", "bodyText": "OK, I did this because the default of 1 is the only supported value, and I think at the time it was apparent that due to this , that no one ever put the trailer field in the stream..  But I think this is a good catch, and for safety I believe this should be changed as you stated to allow just in case someone puts that in there...", "author": "jmagne", "createdAt": "2020-04-03T18:28:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0MzMyMA=="}], "type": "inlineReview"}, {"oid": "a6703f7ec99aab0a2905f2a5cd47b1e242e025f4", "url": "https://github.com/dogtagpki/jss/commit/a6703f7ec99aab0a2905f2a5cd47b1e242e025f4", "message": "Refactor SigTest\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-04-03T19:57:18Z", "type": "forcePushed"}, {"oid": "d886356ab57ab8dc5a5f3032e2af37dce3151889", "url": "https://github.com/dogtagpki/jss/commit/d886356ab57ab8dc5a5f3032e2af37dce3151889", "message": "Refactor SigTest\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-04-03T20:18:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMwNDQxNA==", "url": "https://github.com/dogtagpki/jss/pull/467#discussion_r403304414", "bodyText": "This will never assert.", "author": "cipherboy", "createdAt": "2020-04-03T20:22:00Z", "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -45,87 +53,160 @@ JNIEXPORT void JNICALL\n Java_org_mozilla_jss_pkcs11_PK11Signature_initSigContext\n   (JNIEnv *env, jobject this)\n {\n-    SGNContext *ctxt=NULL;\n-    jobject contextProxy=NULL;\n-    SECKEYPrivateKey *privk;\n+    SGNContext *ctxt = NULL;\n+    jobject contextProxy = NULL;\n+    SECKEYPrivateKey *privk = NULL;\n+    SECAlgorithmID *signAlg = NULL;\n+    SECStatus rv = SECFailure;\n+    PRArenaPool *arena = NULL;\n+    SECOidTag signingAlg = SEC_OID_UNKNOWN;\n \n     /* Extract the private key from the PK11Signature */\n-    if( getPrivateKey(env, this, &privk) != PR_SUCCESS) {\n-        PR_ASSERT( (*env)->ExceptionOccurred(env) != NULL);\n+    if (getPrivateKey(env, this, &privk) != PR_SUCCESS) {\n+        PR_ASSERT((*env)->ExceptionOccurred(env) != NULL);\n         goto finish;\n     }\n \n-    /* Start the signing operation */\n-    ctxt = SGN_NewContext(getAlgorithm(env, this), privk);\n-\tif(ctxt == NULL) {\n-\t\tJSS_throwMsg(env, TOKEN_EXCEPTION, \"Unable to create signing context\");\n-\t\tgoto finish;\n-\t}\n-    if( SGN_Begin(ctxt) != SECSuccess ) {\n+    signingAlg = getAlgorithm(env,this);\n+    if (signingAlg == SEC_OID_PKCS1_RSA_PSS_SIGNATURE) {\n+        arena = PORT_NewArena(DER_DEFAULT_CHUNKSIZE);\n+        if (!arena) {\n+           JSS_throw(env, OUT_OF_MEMORY_ERROR);\n+           goto finish;\n+        }\n+\n+        rv = getRSAPSSParamsAndSigningAlg(env, this, arena, &signAlg, privk);\n+        if (rv == SECFailure) {\n+            goto finish;\n+        }\n+\n+        /* Start the signing operation */\n+        ctxt = SGN_NewContextWithAlgorithmID(signAlg, privk);\n+    } else {\n+        ctxt = SGN_NewContext(signingAlg, privk);\n+    }\n+\n+    if (ctxt == NULL) {\n+        JSS_throwMsg(env, TOKEN_EXCEPTION, \"Unable to create signing context\");\n+        goto finish;\n+    }\n+\n+    if (SGN_Begin(ctxt) != SECSuccess) {\n         JSS_throwMsg(env, TOKEN_EXCEPTION, \"Unable to begin signing context\");\n         goto finish;\n     }\n \n     /* Create a contextProxy and stick it in the PK11Signature object */\n-    contextProxy = JSS_PK11_wrapSigContextProxy(env,\n-\t\t\t\t\t\t\t\t\t\t\t\t(void**)&ctxt,\n-\t\t\t\t\t\t\t\t\t\t\t\tSGN_CONTEXT);\n-    if(contextProxy == NULL) {\n-        PR_ASSERT( (*env)->ExceptionOccurred(env) != NULL);\n+    contextProxy = JSS_PK11_wrapSigContextProxy(env, (void**)&ctxt,\n+                                                SGN_CONTEXT, &arena);\n+\n+    if (contextProxy == NULL) {\n+        PR_ASSERT((*env)->ExceptionOccurred(env) != NULL);\n         goto finish;\n     }\n+\n+    // Signature algorithm for RSA PSS allocated in the arena,\n+    // which is destroyed on exit.\n     setSigContext(env, this, contextProxy);\n \n finish:\n-    if(contextProxy==NULL && ctxt!=NULL) {\n+    if (contextProxy == NULL && ctxt != NULL) {\n         /* we created a context but not the Java wrapper, so we need to\n          * delete the context here. */\n         SGN_DestroyContext(ctxt, PR_TRUE /*freeit*/);\n     }\n+\n+    /* When contentProxy is created, arena will be NULLed and contentProxy\n+     * takes ownership of it. Otherwise, when arena still exists, we must\n+     * free it now. */\n+    PORT_FreeArena(arena, PR_TRUE /* zero */);\n }\n \n JNIEXPORT void JNICALL\n Java_org_mozilla_jss_pkcs11_PK11Signature_initVfyContext\n-\t(JNIEnv *env, jobject this)\n+    (JNIEnv *env, jobject this)\n {\n-\tVFYContext *ctxt=NULL;\n-\tjobject contextProxy=NULL;\n-\tSECKEYPublicKey *pubk;\n+    VFYContext *ctxt = NULL;\n+    jobject contextProxy = NULL;\n+    SECKEYPublicKey *pubk = NULL;\n+    SECKEYPrivateKey *privk = NULL;\n+    SECKEYPublicKey *tempPubKey = NULL;\n+\n+    PRArenaPool *arena = NULL;\n+    SECAlgorithmID *signAlg = NULL;\n+    SECStatus rv = SECFailure;\n+    SECOidTag signingAlg = SEC_OID_UNKNOWN;\n+\n+    if (getPublicKey(env, this, &pubk) != PR_SUCCESS) {\n+        PR_ASSERT((*env)->ExceptionOccurred(env) != NULL);\n+        goto finish;\n+    }\n \n-\tif( getPublicKey(env, this, &pubk) != PR_SUCCESS ) {\n-\t\tPR_ASSERT( (*env)->ExceptionOccurred(env) != NULL);\n-\t\tgoto finish;\n-\t}\n-\t\n-\tctxt = VFY_CreateContext(pubk, NULL /*sig*/, getAlgorithm(env, this),\n-                NULL /*wincx*/);\n-\tif( ctxt == NULL) {\n-\t\tJSS_throwMsg(env, TOKEN_EXCEPTION,\n-\t\t\t\"Unable to create verification context\");\n-\t\tgoto finish;\n-\t}\n-\tif( VFY_Begin(ctxt) != SECSuccess) {\n-\t\tJSS_throwMsg(env, TOKEN_EXCEPTION,\n-\t\t\t\"Unable to begin verification context\");\n-\t\tgoto finish;\n-\t}\n+    signingAlg = getAlgorithm(env,this);\n+    if (signingAlg == SEC_OID_PKCS1_RSA_PSS_SIGNATURE) {\n+        /* Create place holder private key, just to create the PSS Params. */\n+        unsigned key_bits = SECKEY_PublicKeyStrengthInBits(pubk);\n+        privk = SECKEY_CreateRSAPrivateKey(key_bits, &tempPubKey, NULL);\n+        if (privk == NULL) {\n+            PR_ASSERT((*env)->ExceptionOccurred(env) != NULL);", "originalCommit": "d886356ab57ab8dc5a5f3032e2af37dce3151889", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMwNTE0MQ==", "url": "https://github.com/dogtagpki/jss/pull/467#discussion_r403305141", "bodyText": "Throw OUTOFMEM", "author": "cipherboy", "createdAt": "2020-04-03T20:23:01Z", "path": "org/mozilla/jss/pkcs11/PK11Signature.c", "diffHunk": "@@ -304,32 +385,95 @@ getAlgorithm(JNIEnv *env, jobject sig)\n     jclass sigClass;\n     jfieldID algField;\n     jobject alg;\n-    SECOidTag retval=SEC_OID_UNKNOWN;\n \n-    PR_ASSERT(env!=NULL && sig!=NULL);\n+    PR_ASSERT(env != NULL && sig != NULL);\n \n     sigClass = (*env)->GetObjectClass(env, sig);\n-    PR_ASSERT(sigClass != NULL);\n+    if (sigClass == NULL) {\n+        ASSERT_OUTOFMEM(env);\n+        return SEC_OID_UNKNOWN;\n+    }\n \n-    algField = (*env)->GetFieldID(  env,\n-                                    sigClass,\n-                                    SIG_ALGORITHM_FIELD,\n-                                    SIG_ALGORITHM_SIG);\n-    if(algField == NULL) {\n+    algField = (*env)->GetFieldID(env, sigClass, SIG_ALGORITHM_FIELD,\n+                                  SIG_ALGORITHM_SIG);\n+    if (algField == NULL) {\n         ASSERT_OUTOFMEM(env);\n-        goto finish;\n+        return SEC_OID_UNKNOWN;\n     }\n \n     alg = (*env)->GetObjectField(env, sig, algField);\n-    if(alg == NULL) {\n+    if (alg == NULL) {\n         ASSERT_OUTOFMEM(env);\n-        goto finish;\n+        return SEC_OID_UNKNOWN;\n     }\n \n-    retval = JSS_getOidTagFromAlg(env, alg);\n+    return JSS_getOidTagFromAlg(env, alg);\n+}\n \n-finish:\n-    return retval;\n+static SECOidTag\n+getDigestAlgorithm(JNIEnv *env, jobject sig)\n+{\n+    jclass sigClass;\n+    jfieldID algField;\n+    jobject alg;\n+\n+    PR_ASSERT(env != NULL && sig != NULL);\n+\n+    sigClass = (*env)->GetObjectClass(env, sig);\n+    if (sigClass == NULL) {\n+        ASSERT_OUTOFMEM(env);\n+        return SEC_OID_UNKNOWN;\n+    }\n+\n+    algField = (*env)->GetFieldID(env, sigClass, SIG_DIGEST_ALGORITHM_FIELD,\n+                                  SIG_ALGORITHM_SIG);\n+    if (algField == NULL) {\n+        ASSERT_OUTOFMEM(env);\n+        return SEC_OID_UNKNOWN;\n+    }\n+\n+    alg = (*env)->GetObjectField(env, sig, algField);\n+    if (alg == NULL) {\n+        /* Do not ASSERT_OUTOFMEM: it is possible for digestAlgorithm to be\n+         * NULL in sig and thus alg will be NULL here; no exception will be\n+         * raised. */\n+        return SEC_OID_UNKNOWN;\n+    }\n+\n+    return JSS_getOidTagFromAlg(env, alg);\n+}\n+\n+static SECStatus\n+getRSAPSSParamsAndSigningAlg(JNIEnv *env, jobject this, PRArenaPool *arena,\n+    SECAlgorithmID **alg, SECKEYPrivateKey *privk)\n+{\n+    SECItem *sigAlgParams = NULL;\n+    SECAlgorithmID *signAlg = NULL;\n+    SECOidTag digestAlg = SEC_OID_UNKNOWN;\n+    SECStatus rv = SECFailure;\n+\n+    if (alg == NULL) {\n+        return rv;\n+    }\n+\n+    signAlg = (SECAlgorithmID *)PORT_ArenaZAlloc(arena, sizeof(SECAlgorithmID));\n+    if (signAlg == NULL) {\n+        return rv;", "originalCommit": "d886356ab57ab8dc5a5f3032e2af37dce3151889", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ad6f762860b3e0ec6db70398783276b74630d799", "url": "https://github.com/dogtagpki/jss/commit/ad6f762860b3e0ec6db70398783276b74630d799", "message": "Support RSA-PSS Signature scheme\n\nProvide support for the various SHAxxxwithRSAPSS algorithms, including\nSHA-256, SHA-384, and SHA-512 variants.\n\nAuthored by Jack Magne; revised patch forwarded ported from v4.4.x by\nAlexander Scheel.\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-04-06T12:51:09Z", "type": "commit"}, {"oid": "0e3542894d9951ccb910341544cb6e3f54ab3e62", "url": "https://github.com/dogtagpki/jss/commit/0e3542894d9951ccb910341544cb6e3f54ab3e62", "message": "Refactor JCASigTest\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-04-06T12:51:09Z", "type": "commit"}, {"oid": "7d0ca73848a8e997e7d1306c82772cc520cdeb9b", "url": "https://github.com/dogtagpki/jss/commit/7d0ca73848a8e997e7d1306c82772cc520cdeb9b", "message": "Refactor SigTest\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-04-06T12:51:10Z", "type": "commit"}, {"oid": "7d0ca73848a8e997e7d1306c82772cc520cdeb9b", "url": "https://github.com/dogtagpki/jss/commit/7d0ca73848a8e997e7d1306c82772cc520cdeb9b", "message": "Refactor SigTest\n\nSigned-off-by: Alexander Scheel <ascheel@redhat.com>", "committedDate": "2020-04-06T12:51:10Z", "type": "forcePushed"}]}