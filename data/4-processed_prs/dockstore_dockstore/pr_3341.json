{"pr_number": 3341, "pr_title": "dockerHub Checksums for workflows", "pr_createdAt": "2020-03-24T16:51:04Z", "pr_url": "https://github.com/dockstore/dockstore/pull/3341", "timeline": [{"oid": "1f22d5bdd4001cb98fdf150e818b72d508f70870", "url": "https://github.com/dockstore/dockstore/commit/1f22d5bdd4001cb98fdf150e818b72d508f70870", "message": "workflow, dockerhub checksums", "committedDate": "2020-03-24T16:39:20Z", "type": "commit"}, {"oid": "06e33dafe9c508d52dd5224c0343c9d9a8951c44", "url": "https://github.com/dockstore/dockstore/commit/06e33dafe9c508d52dd5224c0343c9d9a8951c44", "message": "codacy changes, delete commented code, change to dockstore-testing repo", "committedDate": "2020-03-24T18:32:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxMDY3NA==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r397410674", "bodyText": "This is not necessary -- doing the addAll on line 377 will work with an empty set.", "author": "coverbeck", "createdAt": "2020-03-24T19:34:04Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -340,90 +347,188 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n     default Set<Image> getImagesFromRegistry(String toolsJSONTable) {\n         List<Map<String, String>> dockerTools = new ArrayList<>();\n         dockerTools = (ArrayList<Map<String, String>>)GSON.fromJson(toolsJSONTable, dockerTools.getClass());\n+        Pattern amazonECRPattern = Pattern.compile(\"(.*\\\\.)(drk\\\\.ecr\\\\.)(.*\\\\.)(amazonaws.com)\");\n+        Pattern googlePattern = Pattern.compile(\"(.*)(gcr\\\\.io)(.*)\");\n \n         // Eliminate duplicate docker strings\n         Set<String> dockerStrings = dockerTools.stream().map(dockertool -> dockertool.get(\"docker\")).filter(Objects::nonNull).collect(Collectors.toSet());\n \n         Set<Image> dockerImages = new HashSet<>();\n-        String errorKey = \"error_message\";\n+\n         for (String image : dockerStrings) {\n             String[] parts = image.split(\"/\");\n+            String[] splitDocker;\n+            String[] splitTag;\n \n-            Optional<String> response;\n             if (image.startsWith(\"quay.io/\")) {\n-                String[] splitDocker;\n-                String[] splitTag;\n-\n                 try {\n                     splitDocker = image.split(\"/\");\n                     splitTag = splitDocker[2].split(\":\");\n                 } catch (ArrayIndexOutOfBoundsException ex) {\n                     LOG.error(\"URL to image on Quay incomplete\", ex);\n-                    break;\n+                    continue;\n                 }\n \n                 if (splitTag.length > 1) {\n                     String repo = splitDocker[1] + \"/\" + splitTag[0];\n                     String tagName = splitTag[1];\n-                    response = getImageResponseFromQuay(repo, tagName);\n-\n-                    if (response.isPresent()) {\n-                        Map<String, ArrayList<Map<String, String>>> map = new HashMap<>();\n-                        Map<String, String> errorMap = new HashMap<>();\n-                        map = (Map<String, ArrayList<Map<String, String>>>)GSON.fromJson(response.get(), map.getClass());\n-                        errorMap = (Map<String, String>)GSON.fromJson(response.get(), errorMap.getClass());\n-                        if (errorMap.get(errorKey) != null) {\n-                            LOG.error(\"Error response from Quay: \" + errorMap.get(errorKey));\n-                        } else {\n-                            try {\n-                                final List<Map<String, String>> array = map.get(\"tags\");\n-\n-                                for (Map<String, String> tag : array) {\n-                                    final String digest = tag.get(\"manifest_digest\");\n-                                    final String imageID = tag.get(\"image_id\");\n-                                    List<Checksum> checksums = new ArrayList<>();\n-                                    checksums.add(new Checksum(digest.split(\":\")[0], digest.split(\":\")[1]));\n-                                    dockerImages.add(new Image(checksums, repo, tagName, imageID, Registry.QUAY_IO));\n-                                }\n-\n-                            } catch (IndexOutOfBoundsException | NullPointerException ex) {\n-                                LOG.error(\"Could not get checksum information for \" + splitDocker[1], ex);\n-                            }\n-                        }\n-                    } else {\n-                        LOG.error(\"Could not get response from Quay for \" + repo);\n+                    Set<Image> quayImages = getImageResponseFromQuay(repo, tagName);\n+                    if (!quayImages.isEmpty()) {", "originalCommit": "06e33dafe9c508d52dd5224c0343c9d9a8951c44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxMjAwMw==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r397412003", "bodyText": "Hmm, there could be other registries that we don't know about or don't yet exist. Without knowing the format, is there a distinct pattern you could check for to see if it's DockerHub?", "author": "coverbeck", "createdAt": "2020-03-24T19:36:39Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -340,90 +347,188 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n     default Set<Image> getImagesFromRegistry(String toolsJSONTable) {\n         List<Map<String, String>> dockerTools = new ArrayList<>();\n         dockerTools = (ArrayList<Map<String, String>>)GSON.fromJson(toolsJSONTable, dockerTools.getClass());\n+        Pattern amazonECRPattern = Pattern.compile(\"(.*\\\\.)(drk\\\\.ecr\\\\.)(.*\\\\.)(amazonaws.com)\");\n+        Pattern googlePattern = Pattern.compile(\"(.*)(gcr\\\\.io)(.*)\");\n \n         // Eliminate duplicate docker strings\n         Set<String> dockerStrings = dockerTools.stream().map(dockertool -> dockertool.get(\"docker\")).filter(Objects::nonNull).collect(Collectors.toSet());\n \n         Set<Image> dockerImages = new HashSet<>();\n-        String errorKey = \"error_message\";\n+\n         for (String image : dockerStrings) {\n             String[] parts = image.split(\"/\");\n+            String[] splitDocker;\n+            String[] splitTag;\n \n-            Optional<String> response;\n             if (image.startsWith(\"quay.io/\")) {\n-                String[] splitDocker;\n-                String[] splitTag;\n-\n                 try {\n                     splitDocker = image.split(\"/\");\n                     splitTag = splitDocker[2].split(\":\");\n                 } catch (ArrayIndexOutOfBoundsException ex) {\n                     LOG.error(\"URL to image on Quay incomplete\", ex);\n-                    break;\n+                    continue;\n                 }\n \n                 if (splitTag.length > 1) {\n                     String repo = splitDocker[1] + \"/\" + splitTag[0];\n                     String tagName = splitTag[1];\n-                    response = getImageResponseFromQuay(repo, tagName);\n-\n-                    if (response.isPresent()) {\n-                        Map<String, ArrayList<Map<String, String>>> map = new HashMap<>();\n-                        Map<String, String> errorMap = new HashMap<>();\n-                        map = (Map<String, ArrayList<Map<String, String>>>)GSON.fromJson(response.get(), map.getClass());\n-                        errorMap = (Map<String, String>)GSON.fromJson(response.get(), errorMap.getClass());\n-                        if (errorMap.get(errorKey) != null) {\n-                            LOG.error(\"Error response from Quay: \" + errorMap.get(errorKey));\n-                        } else {\n-                            try {\n-                                final List<Map<String, String>> array = map.get(\"tags\");\n-\n-                                for (Map<String, String> tag : array) {\n-                                    final String digest = tag.get(\"manifest_digest\");\n-                                    final String imageID = tag.get(\"image_id\");\n-                                    List<Checksum> checksums = new ArrayList<>();\n-                                    checksums.add(new Checksum(digest.split(\":\")[0], digest.split(\":\")[1]));\n-                                    dockerImages.add(new Image(checksums, repo, tagName, imageID, Registry.QUAY_IO));\n-                                }\n-\n-                            } catch (IndexOutOfBoundsException | NullPointerException ex) {\n-                                LOG.error(\"Could not get checksum information for \" + splitDocker[1], ex);\n-                            }\n-                        }\n-                    } else {\n-                        LOG.error(\"Could not get response from Quay for \" + repo);\n+                    Set<Image> quayImages = getImageResponseFromQuay(repo, tagName);\n+                    if (!quayImages.isEmpty()) {\n+                        dockerImages.addAll(quayImages);\n                     }\n                 } else {\n                     LOG.error(\"Could not find image version specified for \" + splitDocker[1]);\n                 }\n-\n             } else if (image.startsWith(\"images.sbgenomics\")) {\n-                return dockerImages;\n-\n+                continue;\n             } else if (image.startsWith(\"registry.gitlab.com\")) {\n-                return dockerImages;\n+                continue;\n+            } else if (googlePattern.matcher(image).matches()) {\n+                continue;\n+            } else if (amazonECRPattern.matcher(image).matches()) {\n+                continue;\n+            } else {\n+                // DockerHub by process of elimination.", "originalCommit": "06e33dafe9c508d52dd5224c0343c9d9a8951c44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxNDYzMQ==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r397414631", "bodyText": "Comment for line 346 -- you can remove DockerHub from the TODO", "author": "coverbeck", "createdAt": "2020-03-24T19:41:16Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -340,90 +347,188 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n     default Set<Image> getImagesFromRegistry(String toolsJSONTable) {", "originalCommit": "06e33dafe9c508d52dd5224c0343c9d9a8951c44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxNTk0Mg==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r397415942", "bodyText": "You may not be able to do this in an interface (I don't know if it's allowed), but if possible these would exist as final statics outside of the method, so that you the regexes aren't complied every time the method is invoked. But if it's not easily doable, then don't worry.", "author": "coverbeck", "createdAt": "2020-03-24T19:43:41Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -340,90 +347,188 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n     default Set<Image> getImagesFromRegistry(String toolsJSONTable) {\n         List<Map<String, String>> dockerTools = new ArrayList<>();\n         dockerTools = (ArrayList<Map<String, String>>)GSON.fromJson(toolsJSONTable, dockerTools.getClass());\n+        Pattern amazonECRPattern = Pattern.compile(\"(.*\\\\.)(drk\\\\.ecr\\\\.)(.*\\\\.)(amazonaws.com)\");", "originalCommit": "06e33dafe9c508d52dd5224c0343c9d9a8951c44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxNzExOQ==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r397417119", "bodyText": "Do you need this commented line?", "author": "coverbeck", "createdAt": "2020-03-24T19:45:51Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -340,90 +347,188 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n     default Set<Image> getImagesFromRegistry(String toolsJSONTable) {\n         List<Map<String, String>> dockerTools = new ArrayList<>();\n         dockerTools = (ArrayList<Map<String, String>>)GSON.fromJson(toolsJSONTable, dockerTools.getClass());\n+        Pattern amazonECRPattern = Pattern.compile(\"(.*\\\\.)(drk\\\\.ecr\\\\.)(.*\\\\.)(amazonaws.com)\");\n+        Pattern googlePattern = Pattern.compile(\"(.*)(gcr\\\\.io)(.*)\");\n \n         // Eliminate duplicate docker strings\n         Set<String> dockerStrings = dockerTools.stream().map(dockertool -> dockertool.get(\"docker\")).filter(Objects::nonNull).collect(Collectors.toSet());\n \n         Set<Image> dockerImages = new HashSet<>();\n-        String errorKey = \"error_message\";\n+\n         for (String image : dockerStrings) {\n             String[] parts = image.split(\"/\");\n+            String[] splitDocker;\n+            String[] splitTag;\n \n-            Optional<String> response;\n             if (image.startsWith(\"quay.io/\")) {\n-                String[] splitDocker;\n-                String[] splitTag;\n-\n                 try {\n                     splitDocker = image.split(\"/\");\n                     splitTag = splitDocker[2].split(\":\");\n                 } catch (ArrayIndexOutOfBoundsException ex) {\n                     LOG.error(\"URL to image on Quay incomplete\", ex);\n-                    break;\n+                    continue;\n                 }\n \n                 if (splitTag.length > 1) {\n                     String repo = splitDocker[1] + \"/\" + splitTag[0];\n                     String tagName = splitTag[1];\n-                    response = getImageResponseFromQuay(repo, tagName);\n-\n-                    if (response.isPresent()) {\n-                        Map<String, ArrayList<Map<String, String>>> map = new HashMap<>();\n-                        Map<String, String> errorMap = new HashMap<>();\n-                        map = (Map<String, ArrayList<Map<String, String>>>)GSON.fromJson(response.get(), map.getClass());\n-                        errorMap = (Map<String, String>)GSON.fromJson(response.get(), errorMap.getClass());\n-                        if (errorMap.get(errorKey) != null) {\n-                            LOG.error(\"Error response from Quay: \" + errorMap.get(errorKey));\n-                        } else {\n-                            try {\n-                                final List<Map<String, String>> array = map.get(\"tags\");\n-\n-                                for (Map<String, String> tag : array) {\n-                                    final String digest = tag.get(\"manifest_digest\");\n-                                    final String imageID = tag.get(\"image_id\");\n-                                    List<Checksum> checksums = new ArrayList<>();\n-                                    checksums.add(new Checksum(digest.split(\":\")[0], digest.split(\":\")[1]));\n-                                    dockerImages.add(new Image(checksums, repo, tagName, imageID, Registry.QUAY_IO));\n-                                }\n-\n-                            } catch (IndexOutOfBoundsException | NullPointerException ex) {\n-                                LOG.error(\"Could not get checksum information for \" + splitDocker[1], ex);\n-                            }\n-                        }\n-                    } else {\n-                        LOG.error(\"Could not get response from Quay for \" + repo);\n+                    Set<Image> quayImages = getImageResponseFromQuay(repo, tagName);\n+                    if (!quayImages.isEmpty()) {\n+                        dockerImages.addAll(quayImages);\n                     }\n                 } else {\n                     LOG.error(\"Could not find image version specified for \" + splitDocker[1]);\n                 }\n-\n             } else if (image.startsWith(\"images.sbgenomics\")) {\n-                return dockerImages;\n-\n+                continue;\n             } else if (image.startsWith(\"registry.gitlab.com\")) {\n-                return dockerImages;\n+                continue;\n+            } else if (googlePattern.matcher(image).matches()) {\n+                continue;\n+            } else if (amazonECRPattern.matcher(image).matches()) {\n+                continue;\n+            } else {\n+                // DockerHub by process of elimination.\n+                if (parts.length == 2) {\n+                    try {\n+                        splitDocker = image.split(\"/\");\n+                        splitTag = splitDocker[1].split(\":\");\n+                    } catch (ArrayIndexOutOfBoundsException ex) {\n+                        LOG.error(\"URL to image on DockerHub incomplete\", ex);\n+                        continue;\n+                    }\n+\n+                    String repo = splitDocker[0] + \"/\" + splitTag[0];\n+                    String tagName = splitTag[1];\n \n-            } else if (parts.length == 2) {\n-                //dockerhub\n-                return dockerImages;\n+                    Set<Image> dockerHubImages = getImagesFromDockerHub(repo, tagName);\n+                    if (!dockerHubImages.isEmpty()) {\n+                        dockerImages.addAll(dockerHubImages);\n+                    }\n+                } else {\n+                    // if the path looks like debian:8 or debian (which are official DockerHub images)\n+                    try {\n+                        splitDocker = image.split(\":\");\n+                    } catch (ArrayIndexOutOfBoundsException ex) {\n+                        LOG.error(\"URL to image on DockerHub incomplete\", ex);\n+                        continue;\n+                    }\n+\n+                    String repo = \"library\" + \"/\" + splitDocker[0];\n+                    String tagName = splitDocker[1];\n+\n+                    Set<Image> dockerHubImages = getImagesFromDockerHub(repo, tagName);\n+                    if (!dockerHubImages.isEmpty()) {\n+                        dockerImages.addAll(dockerHubImages);\n+                    }\n+                }\n             }\n         }\n         return dockerImages;\n     }\n \n-    default Optional<String> getImageResponseFromQuay(String repo, String tag) {\n-        final String tagUrl = QUAY_URL + \"repository/\" + repo + \"/tag/\" + \"?specificTag=\" + tag;\n+    default Set<Image> getImagesFromDockerHub(final String repo, final String tagName) {\n+        Set<Image> dockerHubImages = new HashSet<>();\n+        Map<String, String> errorMap = new HashMap<>();\n         Optional<String> response;\n+        boolean versionFound = false;\n+        String repoUrl = DOCKERHUB_URL + \"repositories/\" + repo + \"/tags?name=\" + tagName;\n+        DockerHubTag dockerHubTag = new DockerHubTag();\n+        do {\n+            try {\n+                URL url = new URL(repoUrl);\n+                response = Optional.of(IOUtils.toString(url, StandardCharsets.UTF_8));\n+            } catch (IOException ex) {\n+                LOG.error(\"Unable to get DockerHub response for \" + repo);\n+                response = Optional.empty();\n+            }\n+\n+            if (response.isPresent()) {\n+                Gson gson = new Gson();\n+\n+                final String json = response.get();\n+                errorMap = (Map<String, String>)gson.fromJson(json, errorMap.getClass());\n+                if (errorMap.get(\"message\") != null) {\n+                    LOG.error(\"Error response from DockerHub: \" + errorMap.get(\"message\"));\n+                    return dockerHubImages;\n+                }\n+\n+                // DockerHub seems to give empty results if something is not found, other fields are marked as null\n+                dockerHubTag = gson.fromJson(json, DockerHubTag.class);\n+                List<Results> results = Arrays.asList(dockerHubTag.getResults());\n+                if (results.isEmpty()) {\n+                    LOG.error(\"Could not find any results for \" + repo);\n+                    break;\n+                }\n+\n+                for (Results r : results) {\n+                    if (r.getName().equals(tagName)) {\n+                        List<DockerHubImage> images = Arrays.asList(r.getImages());\n+                        // For every version, DockerHub can provide multiple images, one for each architecture\n+                        images.stream().forEach(dockerHubImage -> {\n+                            final String manifestDigest = dockerHubImage.getDigest();\n+                            Checksum checksum = new Checksum(manifestDigest.split(\":\")[0], manifestDigest.split(\":\")[1]);\n+                            List<Checksum> checksums = Collections.singletonList(checksum);\n+                            Image archImage = new Image(checksums, repo, tagName, r.getImageID(), Registry.DOCKER_HUB);\n+                            archImage.setArchitecture(dockerHubImage.getArchitecture());\n+                            dockerHubImages.add(archImage);\n+                        });\n+                        versionFound = true;\n+                        break;\n+                    }\n+                }\n+                if (!versionFound) {\n+                    repoUrl = dockerHubTag.getNext();\n+                }\n+            }\n+        } while (response.isPresent() && !versionFound && dockerHubTag.getNext() != null);\n+        return dockerHubImages;\n+    }\n+\n+    //default Optional<String> getImageResponseFromQuay(String repo, String tag) {", "originalCommit": "06e33dafe9c508d52dd5224c0343c9d9a8951c44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyMjc1MA==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r397422750", "bodyText": "Redundant", "author": "coverbeck", "createdAt": "2020-03-24T19:56:06Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -340,90 +347,188 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n     default Set<Image> getImagesFromRegistry(String toolsJSONTable) {\n         List<Map<String, String>> dockerTools = new ArrayList<>();\n         dockerTools = (ArrayList<Map<String, String>>)GSON.fromJson(toolsJSONTable, dockerTools.getClass());\n+        Pattern amazonECRPattern = Pattern.compile(\"(.*\\\\.)(drk\\\\.ecr\\\\.)(.*\\\\.)(amazonaws.com)\");\n+        Pattern googlePattern = Pattern.compile(\"(.*)(gcr\\\\.io)(.*)\");\n \n         // Eliminate duplicate docker strings\n         Set<String> dockerStrings = dockerTools.stream().map(dockertool -> dockertool.get(\"docker\")).filter(Objects::nonNull).collect(Collectors.toSet());\n \n         Set<Image> dockerImages = new HashSet<>();\n-        String errorKey = \"error_message\";\n+\n         for (String image : dockerStrings) {\n             String[] parts = image.split(\"/\");\n+            String[] splitDocker;\n+            String[] splitTag;\n \n-            Optional<String> response;\n             if (image.startsWith(\"quay.io/\")) {\n-                String[] splitDocker;\n-                String[] splitTag;\n-\n                 try {\n                     splitDocker = image.split(\"/\");\n                     splitTag = splitDocker[2].split(\":\");\n                 } catch (ArrayIndexOutOfBoundsException ex) {\n                     LOG.error(\"URL to image on Quay incomplete\", ex);\n-                    break;\n+                    continue;\n                 }\n \n                 if (splitTag.length > 1) {\n                     String repo = splitDocker[1] + \"/\" + splitTag[0];\n                     String tagName = splitTag[1];\n-                    response = getImageResponseFromQuay(repo, tagName);\n-\n-                    if (response.isPresent()) {\n-                        Map<String, ArrayList<Map<String, String>>> map = new HashMap<>();\n-                        Map<String, String> errorMap = new HashMap<>();\n-                        map = (Map<String, ArrayList<Map<String, String>>>)GSON.fromJson(response.get(), map.getClass());\n-                        errorMap = (Map<String, String>)GSON.fromJson(response.get(), errorMap.getClass());\n-                        if (errorMap.get(errorKey) != null) {\n-                            LOG.error(\"Error response from Quay: \" + errorMap.get(errorKey));\n-                        } else {\n-                            try {\n-                                final List<Map<String, String>> array = map.get(\"tags\");\n-\n-                                for (Map<String, String> tag : array) {\n-                                    final String digest = tag.get(\"manifest_digest\");\n-                                    final String imageID = tag.get(\"image_id\");\n-                                    List<Checksum> checksums = new ArrayList<>();\n-                                    checksums.add(new Checksum(digest.split(\":\")[0], digest.split(\":\")[1]));\n-                                    dockerImages.add(new Image(checksums, repo, tagName, imageID, Registry.QUAY_IO));\n-                                }\n-\n-                            } catch (IndexOutOfBoundsException | NullPointerException ex) {\n-                                LOG.error(\"Could not get checksum information for \" + splitDocker[1], ex);\n-                            }\n-                        }\n-                    } else {\n-                        LOG.error(\"Could not get response from Quay for \" + repo);\n+                    Set<Image> quayImages = getImageResponseFromQuay(repo, tagName);\n+                    if (!quayImages.isEmpty()) {\n+                        dockerImages.addAll(quayImages);\n                     }\n                 } else {\n                     LOG.error(\"Could not find image version specified for \" + splitDocker[1]);\n                 }\n-\n             } else if (image.startsWith(\"images.sbgenomics\")) {\n-                return dockerImages;\n-\n+                continue;\n             } else if (image.startsWith(\"registry.gitlab.com\")) {\n-                return dockerImages;\n+                continue;\n+            } else if (googlePattern.matcher(image).matches()) {\n+                continue;\n+            } else if (amazonECRPattern.matcher(image).matches()) {\n+                continue;\n+            } else {\n+                // DockerHub by process of elimination.\n+                if (parts.length == 2) {\n+                    try {\n+                        splitDocker = image.split(\"/\");\n+                        splitTag = splitDocker[1].split(\":\");\n+                    } catch (ArrayIndexOutOfBoundsException ex) {\n+                        LOG.error(\"URL to image on DockerHub incomplete\", ex);\n+                        continue;\n+                    }\n+\n+                    String repo = splitDocker[0] + \"/\" + splitTag[0];\n+                    String tagName = splitTag[1];\n \n-            } else if (parts.length == 2) {\n-                //dockerhub\n-                return dockerImages;\n+                    Set<Image> dockerHubImages = getImagesFromDockerHub(repo, tagName);\n+                    if (!dockerHubImages.isEmpty()) {\n+                        dockerImages.addAll(dockerHubImages);\n+                    }\n+                } else {\n+                    // if the path looks like debian:8 or debian (which are official DockerHub images)\n+                    try {\n+                        splitDocker = image.split(\":\");\n+                    } catch (ArrayIndexOutOfBoundsException ex) {\n+                        LOG.error(\"URL to image on DockerHub incomplete\", ex);\n+                        continue;\n+                    }\n+\n+                    String repo = \"library\" + \"/\" + splitDocker[0];\n+                    String tagName = splitDocker[1];\n+\n+                    Set<Image> dockerHubImages = getImagesFromDockerHub(repo, tagName);\n+                    if (!dockerHubImages.isEmpty()) {", "originalCommit": "06e33dafe9c508d52dd5224c0343c9d9a8951c44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyMjgyNw==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r397422827", "bodyText": "Redundant", "author": "coverbeck", "createdAt": "2020-03-24T19:56:14Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -340,90 +347,188 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n     default Set<Image> getImagesFromRegistry(String toolsJSONTable) {\n         List<Map<String, String>> dockerTools = new ArrayList<>();\n         dockerTools = (ArrayList<Map<String, String>>)GSON.fromJson(toolsJSONTable, dockerTools.getClass());\n+        Pattern amazonECRPattern = Pattern.compile(\"(.*\\\\.)(drk\\\\.ecr\\\\.)(.*\\\\.)(amazonaws.com)\");\n+        Pattern googlePattern = Pattern.compile(\"(.*)(gcr\\\\.io)(.*)\");\n \n         // Eliminate duplicate docker strings\n         Set<String> dockerStrings = dockerTools.stream().map(dockertool -> dockertool.get(\"docker\")).filter(Objects::nonNull).collect(Collectors.toSet());\n \n         Set<Image> dockerImages = new HashSet<>();\n-        String errorKey = \"error_message\";\n+\n         for (String image : dockerStrings) {\n             String[] parts = image.split(\"/\");\n+            String[] splitDocker;\n+            String[] splitTag;\n \n-            Optional<String> response;\n             if (image.startsWith(\"quay.io/\")) {\n-                String[] splitDocker;\n-                String[] splitTag;\n-\n                 try {\n                     splitDocker = image.split(\"/\");\n                     splitTag = splitDocker[2].split(\":\");\n                 } catch (ArrayIndexOutOfBoundsException ex) {\n                     LOG.error(\"URL to image on Quay incomplete\", ex);\n-                    break;\n+                    continue;\n                 }\n \n                 if (splitTag.length > 1) {\n                     String repo = splitDocker[1] + \"/\" + splitTag[0];\n                     String tagName = splitTag[1];\n-                    response = getImageResponseFromQuay(repo, tagName);\n-\n-                    if (response.isPresent()) {\n-                        Map<String, ArrayList<Map<String, String>>> map = new HashMap<>();\n-                        Map<String, String> errorMap = new HashMap<>();\n-                        map = (Map<String, ArrayList<Map<String, String>>>)GSON.fromJson(response.get(), map.getClass());\n-                        errorMap = (Map<String, String>)GSON.fromJson(response.get(), errorMap.getClass());\n-                        if (errorMap.get(errorKey) != null) {\n-                            LOG.error(\"Error response from Quay: \" + errorMap.get(errorKey));\n-                        } else {\n-                            try {\n-                                final List<Map<String, String>> array = map.get(\"tags\");\n-\n-                                for (Map<String, String> tag : array) {\n-                                    final String digest = tag.get(\"manifest_digest\");\n-                                    final String imageID = tag.get(\"image_id\");\n-                                    List<Checksum> checksums = new ArrayList<>();\n-                                    checksums.add(new Checksum(digest.split(\":\")[0], digest.split(\":\")[1]));\n-                                    dockerImages.add(new Image(checksums, repo, tagName, imageID, Registry.QUAY_IO));\n-                                }\n-\n-                            } catch (IndexOutOfBoundsException | NullPointerException ex) {\n-                                LOG.error(\"Could not get checksum information for \" + splitDocker[1], ex);\n-                            }\n-                        }\n-                    } else {\n-                        LOG.error(\"Could not get response from Quay for \" + repo);\n+                    Set<Image> quayImages = getImageResponseFromQuay(repo, tagName);\n+                    if (!quayImages.isEmpty()) {\n+                        dockerImages.addAll(quayImages);\n                     }\n                 } else {\n                     LOG.error(\"Could not find image version specified for \" + splitDocker[1]);\n                 }\n-\n             } else if (image.startsWith(\"images.sbgenomics\")) {\n-                return dockerImages;\n-\n+                continue;\n             } else if (image.startsWith(\"registry.gitlab.com\")) {\n-                return dockerImages;\n+                continue;\n+            } else if (googlePattern.matcher(image).matches()) {\n+                continue;\n+            } else if (amazonECRPattern.matcher(image).matches()) {\n+                continue;\n+            } else {\n+                // DockerHub by process of elimination.\n+                if (parts.length == 2) {\n+                    try {\n+                        splitDocker = image.split(\"/\");\n+                        splitTag = splitDocker[1].split(\":\");\n+                    } catch (ArrayIndexOutOfBoundsException ex) {\n+                        LOG.error(\"URL to image on DockerHub incomplete\", ex);\n+                        continue;\n+                    }\n+\n+                    String repo = splitDocker[0] + \"/\" + splitTag[0];\n+                    String tagName = splitTag[1];\n \n-            } else if (parts.length == 2) {\n-                //dockerhub\n-                return dockerImages;\n+                    Set<Image> dockerHubImages = getImagesFromDockerHub(repo, tagName);\n+                    if (!dockerHubImages.isEmpty()) {", "originalCommit": "06e33dafe9c508d52dd5224c0343c9d9a8951c44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyNDU4NA==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r397424584", "bodyText": "This whole block of code is hard to follow if you're coming in without in-depth knowledge of Docker image tag names, like me. Suggestions to make it easier to read and modify if any issues come up:\n\nHave example Docker tags in code comments, e.g.,\n\n// image is something like \"postgres:latest\"\nsplitDocker = image.split(\"/\");\nsplitTag = splitDocker[1].split(\":\");\n\n\nBreak the method up into smaller functions. May be hard, because this is an interface, and also because you've got http calls peppered throughout.\nWrite unit tests (not integration tests) so you can test the different formats.\n\nThese suggestions are not mutually exclusive. :)\nYou don't want to over-engineer this, so use your discretion on this one.", "author": "coverbeck", "createdAt": "2020-03-24T19:59:20Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -340,90 +347,188 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n     default Set<Image> getImagesFromRegistry(String toolsJSONTable) {\n         List<Map<String, String>> dockerTools = new ArrayList<>();\n         dockerTools = (ArrayList<Map<String, String>>)GSON.fromJson(toolsJSONTable, dockerTools.getClass());\n+        Pattern amazonECRPattern = Pattern.compile(\"(.*\\\\.)(drk\\\\.ecr\\\\.)(.*\\\\.)(amazonaws.com)\");\n+        Pattern googlePattern = Pattern.compile(\"(.*)(gcr\\\\.io)(.*)\");\n \n         // Eliminate duplicate docker strings\n         Set<String> dockerStrings = dockerTools.stream().map(dockertool -> dockertool.get(\"docker\")).filter(Objects::nonNull).collect(Collectors.toSet());\n \n         Set<Image> dockerImages = new HashSet<>();\n-        String errorKey = \"error_message\";\n+\n         for (String image : dockerStrings) {\n             String[] parts = image.split(\"/\");\n+            String[] splitDocker;\n+            String[] splitTag;\n \n-            Optional<String> response;\n             if (image.startsWith(\"quay.io/\")) {\n-                String[] splitDocker;\n-                String[] splitTag;\n-\n                 try {\n                     splitDocker = image.split(\"/\");\n                     splitTag = splitDocker[2].split(\":\");\n                 } catch (ArrayIndexOutOfBoundsException ex) {\n                     LOG.error(\"URL to image on Quay incomplete\", ex);\n-                    break;\n+                    continue;\n                 }\n \n                 if (splitTag.length > 1) {\n                     String repo = splitDocker[1] + \"/\" + splitTag[0];\n                     String tagName = splitTag[1];\n-                    response = getImageResponseFromQuay(repo, tagName);\n-\n-                    if (response.isPresent()) {\n-                        Map<String, ArrayList<Map<String, String>>> map = new HashMap<>();\n-                        Map<String, String> errorMap = new HashMap<>();\n-                        map = (Map<String, ArrayList<Map<String, String>>>)GSON.fromJson(response.get(), map.getClass());\n-                        errorMap = (Map<String, String>)GSON.fromJson(response.get(), errorMap.getClass());\n-                        if (errorMap.get(errorKey) != null) {\n-                            LOG.error(\"Error response from Quay: \" + errorMap.get(errorKey));\n-                        } else {\n-                            try {\n-                                final List<Map<String, String>> array = map.get(\"tags\");\n-\n-                                for (Map<String, String> tag : array) {\n-                                    final String digest = tag.get(\"manifest_digest\");\n-                                    final String imageID = tag.get(\"image_id\");\n-                                    List<Checksum> checksums = new ArrayList<>();\n-                                    checksums.add(new Checksum(digest.split(\":\")[0], digest.split(\":\")[1]));\n-                                    dockerImages.add(new Image(checksums, repo, tagName, imageID, Registry.QUAY_IO));\n-                                }\n-\n-                            } catch (IndexOutOfBoundsException | NullPointerException ex) {\n-                                LOG.error(\"Could not get checksum information for \" + splitDocker[1], ex);\n-                            }\n-                        }\n-                    } else {\n-                        LOG.error(\"Could not get response from Quay for \" + repo);\n+                    Set<Image> quayImages = getImageResponseFromQuay(repo, tagName);\n+                    if (!quayImages.isEmpty()) {\n+                        dockerImages.addAll(quayImages);\n                     }\n                 } else {\n                     LOG.error(\"Could not find image version specified for \" + splitDocker[1]);\n                 }\n-\n             } else if (image.startsWith(\"images.sbgenomics\")) {\n-                return dockerImages;\n-\n+                continue;\n             } else if (image.startsWith(\"registry.gitlab.com\")) {\n-                return dockerImages;\n+                continue;\n+            } else if (googlePattern.matcher(image).matches()) {\n+                continue;\n+            } else if (amazonECRPattern.matcher(image).matches()) {\n+                continue;\n+            } else {\n+                // DockerHub by process of elimination.\n+                if (parts.length == 2) {\n+                    try {\n+                        splitDocker = image.split(\"/\");\n+                        splitTag = splitDocker[1].split(\":\");\n+                    } catch (ArrayIndexOutOfBoundsException ex) {\n+                        LOG.error(\"URL to image on DockerHub incomplete\", ex);\n+                        continue;\n+                    }\n+\n+                    String repo = splitDocker[0] + \"/\" + splitTag[0];", "originalCommit": "06e33dafe9c508d52dd5224c0343c9d9a8951c44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyNTk4Mg==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r397425982", "bodyText": "does \"CWL\" work? If it does, change to that or use an enum to string", "author": "garyluu", "createdAt": "2020-03-24T20:02:01Z", "path": "dockstore-integration-testing/src/test/java/io/dockstore/client/cli/WorkflowIT.java", "diffHunk": "@@ -869,19 +869,19 @@ public void testGettingImagesFromQuay() {\n         Ga4Ghv20Api ga4Ghv20Api = new Ga4Ghv20Api(openAPIClient);\n \n         // Check image info is grabbed\n-        WorkflowVersion version = snapshotWorkflowVersion(workflowsApi, \"dockstore-testing/hello_world\", \"/hello_world.cwl\", \"1.0.1\");\n+        WorkflowVersion version = snapshotWorkflowVersion(workflowsApi, \"dockstore-testing/hello_world\", \"cwl\", \"/hello_world.cwl\", \"1.0.1\");", "originalCommit": "06e33dafe9c508d52dd5224c0343c9d9a8951c44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyOTkxOA==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r397429918", "bodyText": "Docker Hub", "author": "garyluu", "createdAt": "2020-03-24T20:09:42Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Image.java", "diffHunk": "@@ -69,6 +69,10 @@\n     @ApiModelProperty(value = \"Registry the image belongs to\", position = 5)\n     private Registry imageRegistry;\n \n+    @Column()\n+    @ApiModelProperty(value = \"For each image version, DockerHub can provide multiple images depending on the architecture/OS\", position = 6)", "originalCommit": "06e33dafe9c508d52dd5224c0343c9d9a8951c44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5MDQ2OQ==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r397390469", "bodyText": "Might be worth a constraint.\ni.e. DB only allows the same tag and imageRegistry multiple times if architecture is unique", "author": "denis-yuen", "createdAt": "2020-03-24T18:57:50Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Image.java", "diffHunk": "@@ -69,6 +69,10 @@\n     @ApiModelProperty(value = \"Registry the image belongs to\", position = 5)\n     private Registry imageRegistry;\n \n+    @Column()", "originalCommit": "06e33dafe9c508d52dd5224c0343c9d9a8951c44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA2MjUzMw==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r401062533", "bodyText": "Did not put a constraint. Other workflow/tool versions could contain the same docker image. Did not think it was worth guaranteeing uniqueness per entry version. I think I'd have to write a trigger since I used an extra table to map images to their versions (although maybe that should change..)", "author": "NatalieEO", "createdAt": "2020-03-31T16:47:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5MDQ2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NjE1OQ==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r401176159", "bodyText": "Fair enough (was referring to uniqueness per version, but the additional table would make it a pain)", "author": "denis-yuen", "createdAt": "2020-03-31T19:56:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5MDQ2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ1OTQ5NA==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r397459494", "bodyText": "Can be re-used", "author": "denis-yuen", "createdAt": "2020-03-24T21:03:42Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -340,90 +347,188 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n     default Set<Image> getImagesFromRegistry(String toolsJSONTable) {\n         List<Map<String, String>> dockerTools = new ArrayList<>();\n         dockerTools = (ArrayList<Map<String, String>>)GSON.fromJson(toolsJSONTable, dockerTools.getClass());\n+        Pattern amazonECRPattern = Pattern.compile(\"(.*\\\\.)(drk\\\\.ecr\\\\.)(.*\\\\.)(amazonaws.com)\");\n+        Pattern googlePattern = Pattern.compile(\"(.*)(gcr\\\\.io)(.*)\");\n \n         // Eliminate duplicate docker strings\n         Set<String> dockerStrings = dockerTools.stream().map(dockertool -> dockertool.get(\"docker\")).filter(Objects::nonNull).collect(Collectors.toSet());\n \n         Set<Image> dockerImages = new HashSet<>();\n-        String errorKey = \"error_message\";\n+\n         for (String image : dockerStrings) {\n             String[] parts = image.split(\"/\");\n+            String[] splitDocker;\n+            String[] splitTag;\n \n-            Optional<String> response;\n             if (image.startsWith(\"quay.io/\")) {\n-                String[] splitDocker;\n-                String[] splitTag;\n-\n                 try {\n                     splitDocker = image.split(\"/\");\n                     splitTag = splitDocker[2].split(\":\");\n                 } catch (ArrayIndexOutOfBoundsException ex) {\n                     LOG.error(\"URL to image on Quay incomplete\", ex);\n-                    break;\n+                    continue;\n                 }\n \n                 if (splitTag.length > 1) {\n                     String repo = splitDocker[1] + \"/\" + splitTag[0];\n                     String tagName = splitTag[1];\n-                    response = getImageResponseFromQuay(repo, tagName);\n-\n-                    if (response.isPresent()) {\n-                        Map<String, ArrayList<Map<String, String>>> map = new HashMap<>();\n-                        Map<String, String> errorMap = new HashMap<>();\n-                        map = (Map<String, ArrayList<Map<String, String>>>)GSON.fromJson(response.get(), map.getClass());\n-                        errorMap = (Map<String, String>)GSON.fromJson(response.get(), errorMap.getClass());\n-                        if (errorMap.get(errorKey) != null) {\n-                            LOG.error(\"Error response from Quay: \" + errorMap.get(errorKey));\n-                        } else {\n-                            try {\n-                                final List<Map<String, String>> array = map.get(\"tags\");\n-\n-                                for (Map<String, String> tag : array) {\n-                                    final String digest = tag.get(\"manifest_digest\");\n-                                    final String imageID = tag.get(\"image_id\");\n-                                    List<Checksum> checksums = new ArrayList<>();\n-                                    checksums.add(new Checksum(digest.split(\":\")[0], digest.split(\":\")[1]));\n-                                    dockerImages.add(new Image(checksums, repo, tagName, imageID, Registry.QUAY_IO));\n-                                }\n-\n-                            } catch (IndexOutOfBoundsException | NullPointerException ex) {\n-                                LOG.error(\"Could not get checksum information for \" + splitDocker[1], ex);\n-                            }\n-                        }\n-                    } else {\n-                        LOG.error(\"Could not get response from Quay for \" + repo);\n+                    Set<Image> quayImages = getImageResponseFromQuay(repo, tagName);\n+                    if (!quayImages.isEmpty()) {\n+                        dockerImages.addAll(quayImages);\n                     }\n                 } else {\n                     LOG.error(\"Could not find image version specified for \" + splitDocker[1]);\n                 }\n-\n             } else if (image.startsWith(\"images.sbgenomics\")) {\n-                return dockerImages;\n-\n+                continue;\n             } else if (image.startsWith(\"registry.gitlab.com\")) {\n-                return dockerImages;\n+                continue;\n+            } else if (googlePattern.matcher(image).matches()) {\n+                continue;\n+            } else if (amazonECRPattern.matcher(image).matches()) {\n+                continue;\n+            } else {\n+                // DockerHub by process of elimination.\n+                if (parts.length == 2) {\n+                    try {\n+                        splitDocker = image.split(\"/\");\n+                        splitTag = splitDocker[1].split(\":\");\n+                    } catch (ArrayIndexOutOfBoundsException ex) {\n+                        LOG.error(\"URL to image on DockerHub incomplete\", ex);\n+                        continue;\n+                    }\n+\n+                    String repo = splitDocker[0] + \"/\" + splitTag[0];\n+                    String tagName = splitTag[1];\n \n-            } else if (parts.length == 2) {\n-                //dockerhub\n-                return dockerImages;\n+                    Set<Image> dockerHubImages = getImagesFromDockerHub(repo, tagName);\n+                    if (!dockerHubImages.isEmpty()) {\n+                        dockerImages.addAll(dockerHubImages);\n+                    }\n+                } else {\n+                    // if the path looks like debian:8 or debian (which are official DockerHub images)\n+                    try {\n+                        splitDocker = image.split(\":\");\n+                    } catch (ArrayIndexOutOfBoundsException ex) {\n+                        LOG.error(\"URL to image on DockerHub incomplete\", ex);\n+                        continue;\n+                    }\n+\n+                    String repo = \"library\" + \"/\" + splitDocker[0];\n+                    String tagName = splitDocker[1];\n+\n+                    Set<Image> dockerHubImages = getImagesFromDockerHub(repo, tagName);\n+                    if (!dockerHubImages.isEmpty()) {\n+                        dockerImages.addAll(dockerHubImages);\n+                    }\n+                }\n             }\n         }\n         return dockerImages;\n     }\n \n-    default Optional<String> getImageResponseFromQuay(String repo, String tag) {\n-        final String tagUrl = QUAY_URL + \"repository/\" + repo + \"/tag/\" + \"?specificTag=\" + tag;\n+    default Set<Image> getImagesFromDockerHub(final String repo, final String tagName) {\n+        Set<Image> dockerHubImages = new HashSet<>();\n+        Map<String, String> errorMap = new HashMap<>();\n         Optional<String> response;\n+        boolean versionFound = false;\n+        String repoUrl = DOCKERHUB_URL + \"repositories/\" + repo + \"/tags?name=\" + tagName;\n+        DockerHubTag dockerHubTag = new DockerHubTag();\n+        do {\n+            try {\n+                URL url = new URL(repoUrl);\n+                response = Optional.of(IOUtils.toString(url, StandardCharsets.UTF_8));\n+            } catch (IOException ex) {\n+                LOG.error(\"Unable to get DockerHub response for \" + repo);\n+                response = Optional.empty();\n+            }\n+\n+            if (response.isPresent()) {\n+                Gson gson = new Gson();", "originalCommit": "06e33dafe9c508d52dd5224c0343c9d9a8951c44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2MDI3NQ==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r397460275", "bodyText": "Would be more readable using swagger-java-quay-client.\nCan take a look at the series of PRs ending with #3273 to demo how to use it.", "author": "denis-yuen", "createdAt": "2020-03-24T21:05:08Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -340,90 +347,188 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n     default Set<Image> getImagesFromRegistry(String toolsJSONTable) {\n         List<Map<String, String>> dockerTools = new ArrayList<>();\n         dockerTools = (ArrayList<Map<String, String>>)GSON.fromJson(toolsJSONTable, dockerTools.getClass());\n+        Pattern amazonECRPattern = Pattern.compile(\"(.*\\\\.)(drk\\\\.ecr\\\\.)(.*\\\\.)(amazonaws.com)\");\n+        Pattern googlePattern = Pattern.compile(\"(.*)(gcr\\\\.io)(.*)\");\n \n         // Eliminate duplicate docker strings\n         Set<String> dockerStrings = dockerTools.stream().map(dockertool -> dockertool.get(\"docker\")).filter(Objects::nonNull).collect(Collectors.toSet());\n \n         Set<Image> dockerImages = new HashSet<>();\n-        String errorKey = \"error_message\";\n+\n         for (String image : dockerStrings) {\n             String[] parts = image.split(\"/\");\n+            String[] splitDocker;\n+            String[] splitTag;\n \n-            Optional<String> response;\n             if (image.startsWith(\"quay.io/\")) {\n-                String[] splitDocker;\n-                String[] splitTag;\n-\n                 try {\n                     splitDocker = image.split(\"/\");\n                     splitTag = splitDocker[2].split(\":\");\n                 } catch (ArrayIndexOutOfBoundsException ex) {\n                     LOG.error(\"URL to image on Quay incomplete\", ex);\n-                    break;\n+                    continue;\n                 }\n \n                 if (splitTag.length > 1) {\n                     String repo = splitDocker[1] + \"/\" + splitTag[0];\n                     String tagName = splitTag[1];\n-                    response = getImageResponseFromQuay(repo, tagName);\n-\n-                    if (response.isPresent()) {\n-                        Map<String, ArrayList<Map<String, String>>> map = new HashMap<>();\n-                        Map<String, String> errorMap = new HashMap<>();\n-                        map = (Map<String, ArrayList<Map<String, String>>>)GSON.fromJson(response.get(), map.getClass());\n-                        errorMap = (Map<String, String>)GSON.fromJson(response.get(), errorMap.getClass());\n-                        if (errorMap.get(errorKey) != null) {\n-                            LOG.error(\"Error response from Quay: \" + errorMap.get(errorKey));\n-                        } else {\n-                            try {\n-                                final List<Map<String, String>> array = map.get(\"tags\");\n-\n-                                for (Map<String, String> tag : array) {\n-                                    final String digest = tag.get(\"manifest_digest\");\n-                                    final String imageID = tag.get(\"image_id\");\n-                                    List<Checksum> checksums = new ArrayList<>();\n-                                    checksums.add(new Checksum(digest.split(\":\")[0], digest.split(\":\")[1]));\n-                                    dockerImages.add(new Image(checksums, repo, tagName, imageID, Registry.QUAY_IO));\n-                                }\n-\n-                            } catch (IndexOutOfBoundsException | NullPointerException ex) {\n-                                LOG.error(\"Could not get checksum information for \" + splitDocker[1], ex);\n-                            }\n-                        }\n-                    } else {\n-                        LOG.error(\"Could not get response from Quay for \" + repo);\n+                    Set<Image> quayImages = getImageResponseFromQuay(repo, tagName);\n+                    if (!quayImages.isEmpty()) {\n+                        dockerImages.addAll(quayImages);\n                     }\n                 } else {\n                     LOG.error(\"Could not find image version specified for \" + splitDocker[1]);\n                 }\n-\n             } else if (image.startsWith(\"images.sbgenomics\")) {\n-                return dockerImages;\n-\n+                continue;\n             } else if (image.startsWith(\"registry.gitlab.com\")) {\n-                return dockerImages;\n+                continue;\n+            } else if (googlePattern.matcher(image).matches()) {\n+                continue;\n+            } else if (amazonECRPattern.matcher(image).matches()) {\n+                continue;\n+            } else {\n+                // DockerHub by process of elimination.\n+                if (parts.length == 2) {\n+                    try {\n+                        splitDocker = image.split(\"/\");\n+                        splitTag = splitDocker[1].split(\":\");\n+                    } catch (ArrayIndexOutOfBoundsException ex) {\n+                        LOG.error(\"URL to image on DockerHub incomplete\", ex);\n+                        continue;\n+                    }\n+\n+                    String repo = splitDocker[0] + \"/\" + splitTag[0];\n+                    String tagName = splitTag[1];\n \n-            } else if (parts.length == 2) {\n-                //dockerhub\n-                return dockerImages;\n+                    Set<Image> dockerHubImages = getImagesFromDockerHub(repo, tagName);\n+                    if (!dockerHubImages.isEmpty()) {\n+                        dockerImages.addAll(dockerHubImages);\n+                    }\n+                } else {\n+                    // if the path looks like debian:8 or debian (which are official DockerHub images)\n+                    try {\n+                        splitDocker = image.split(\":\");\n+                    } catch (ArrayIndexOutOfBoundsException ex) {\n+                        LOG.error(\"URL to image on DockerHub incomplete\", ex);\n+                        continue;\n+                    }\n+\n+                    String repo = \"library\" + \"/\" + splitDocker[0];\n+                    String tagName = splitDocker[1];\n+\n+                    Set<Image> dockerHubImages = getImagesFromDockerHub(repo, tagName);\n+                    if (!dockerHubImages.isEmpty()) {\n+                        dockerImages.addAll(dockerHubImages);\n+                    }\n+                }\n             }\n         }\n         return dockerImages;\n     }\n \n-    default Optional<String> getImageResponseFromQuay(String repo, String tag) {\n-        final String tagUrl = QUAY_URL + \"repository/\" + repo + \"/tag/\" + \"?specificTag=\" + tag;\n+    default Set<Image> getImagesFromDockerHub(final String repo, final String tagName) {\n+        Set<Image> dockerHubImages = new HashSet<>();\n+        Map<String, String> errorMap = new HashMap<>();\n         Optional<String> response;\n+        boolean versionFound = false;\n+        String repoUrl = DOCKERHUB_URL + \"repositories/\" + repo + \"/tags?name=\" + tagName;\n+        DockerHubTag dockerHubTag = new DockerHubTag();\n+        do {\n+            try {\n+                URL url = new URL(repoUrl);\n+                response = Optional.of(IOUtils.toString(url, StandardCharsets.UTF_8));\n+            } catch (IOException ex) {\n+                LOG.error(\"Unable to get DockerHub response for \" + repo);\n+                response = Optional.empty();\n+            }\n+\n+            if (response.isPresent()) {\n+                Gson gson = new Gson();\n+\n+                final String json = response.get();\n+                errorMap = (Map<String, String>)gson.fromJson(json, errorMap.getClass());\n+                if (errorMap.get(\"message\") != null) {\n+                    LOG.error(\"Error response from DockerHub: \" + errorMap.get(\"message\"));\n+                    return dockerHubImages;\n+                }\n+\n+                // DockerHub seems to give empty results if something is not found, other fields are marked as null\n+                dockerHubTag = gson.fromJson(json, DockerHubTag.class);\n+                List<Results> results = Arrays.asList(dockerHubTag.getResults());\n+                if (results.isEmpty()) {\n+                    LOG.error(\"Could not find any results for \" + repo);\n+                    break;\n+                }\n+\n+                for (Results r : results) {\n+                    if (r.getName().equals(tagName)) {\n+                        List<DockerHubImage> images = Arrays.asList(r.getImages());\n+                        // For every version, DockerHub can provide multiple images, one for each architecture\n+                        images.stream().forEach(dockerHubImage -> {\n+                            final String manifestDigest = dockerHubImage.getDigest();\n+                            Checksum checksum = new Checksum(manifestDigest.split(\":\")[0], manifestDigest.split(\":\")[1]);\n+                            List<Checksum> checksums = Collections.singletonList(checksum);\n+                            Image archImage = new Image(checksums, repo, tagName, r.getImageID(), Registry.DOCKER_HUB);\n+                            archImage.setArchitecture(dockerHubImage.getArchitecture());\n+                            dockerHubImages.add(archImage);\n+                        });\n+                        versionFound = true;\n+                        break;\n+                    }\n+                }\n+                if (!versionFound) {\n+                    repoUrl = dockerHubTag.getNext();\n+                }\n+            }\n+        } while (response.isPresent() && !versionFound && dockerHubTag.getNext() != null);\n+        return dockerHubImages;\n+    }\n+\n+    //default Optional<String> getImageResponseFromQuay(String repo, String tag) {\n+    default Set<Image> getImageResponseFromQuay(String repo, String tagName) {\n+        final String tagUrl = QUAY_URL + \"repository/\" + repo + \"/tag/\" + \"?specificTag=\" + tagName;", "originalCommit": "06e33dafe9c508d52dd5224c0343c9d9a8951c44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzNzEwOA==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r401237108", "bodyText": "ended up being way easier than I thought.", "author": "NatalieEO", "createdAt": "2020-03-31T21:51:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2MDI3NQ=="}], "type": "inlineReview"}, {"oid": "2004bc19f43e09f91bd1adc5d4f0ce0696b0e9f7", "url": "https://github.com/dockstore/dockstore/commit/2004bc19f43e09f91bd1adc5d4f0ce0696b0e9f7", "message": "hope this is somewhat more readable", "committedDate": "2020-03-31T16:43:11Z", "type": "commit"}, {"oid": "14735ed49a968d9161552380f64e74c8e746e5bc", "url": "https://github.com/dockstore/dockstore/commit/14735ed49a968d9161552380f64e74c8e746e5bc", "message": "checkstyle", "committedDate": "2020-03-31T16:59:45Z", "type": "commit"}, {"oid": "9edfc2b17996048c65130c1b8993fa598938a01e", "url": "https://github.com/dockstore/dockstore/commit/9edfc2b17996048c65130c1b8993fa598938a01e", "message": "fixing swagger easier than I thought it'd be", "committedDate": "2020-03-31T21:50:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5NDM1MQ==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r401294351", "bodyText": "This line doesn't do anything, does it? You're ignoring the return value.", "author": "coverbeck", "createdAt": "2020-04-01T00:44:09Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -485,48 +507,20 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n         return dockerHubImages;\n     }\n \n-    //default Optional<String> getImageResponseFromQuay(String repo, String tag) {\n     default Set<Image> getImageResponseFromQuay(String repo, String tagName) {\n-        final String tagUrl = QUAY_URL + \"repository/\" + repo + \"/tag/\" + \"?specificTag=\" + tagName;\n-        Optional<String> response;\n-        Map<String, String> errorMap = new HashMap<>();\n-\n-        try {\n-            URL url = new URL(tagUrl);\n-            response = Optional.of(IOUtils.toString(url, StandardCharsets.UTF_8));\n-\n-        } catch (IOException ex) {\n-            LOG.error(\"Unable to get response from Quay\", ex);\n-            response = Optional.empty();\n-        }\n-\n         Set<Image> quayImages = new HashSet<>();\n-        if (response.isPresent()) {\n-            Map<String, ArrayList<Map<String, String>>> map = new HashMap<>();\n-            String errorKey = \"error_message\";\n-\n-            map = (Map<String, ArrayList<Map<String, String>>>)GSON.fromJson(response.get(), map.getClass());\n-            errorMap = (Map<String, String>)GSON.fromJson(response.get(), errorMap.getClass());\n-            if (errorMap.get(errorKey) != null) {\n-                LOG.error(\"Error response from Quay: \" + errorMap.get(errorKey));\n-            } else {\n-                try {\n-                    final List<Map<String, String>> array = map.get(\"tags\");\n-\n-                    for (Map<String, String> tag : array) {\n-                        final String digest = tag.get(\"manifest_digest\");\n-                        final String imageID = tag.get(\"image_id\");\n-                        List<Checksum> checksums = new ArrayList<>();\n-                        checksums.add(new Checksum(digest.split(\":\")[0], digest.split(\":\")[1]));\n-                        quayImages.add(new Image(checksums, repo, tagName, imageID, Registry.QUAY_IO));\n-                    }\n+        RepositoryApi api = new RepositoryApi(API_CLIENT);\n+        try {\n \n-                } catch (IndexOutOfBoundsException | NullPointerException ex) {\n-                    LOG.error(\"Could not get checksum information for \" + repo, ex);\n-                }\n-            }\n-        } else {\n-            LOG.error(\"Could not get response from Quay for \" + repo);\n+            final QuayRepo quayRepo = api.getRepo(repo, false);\n+            quayRepo.getTags().values().stream();", "originalCommit": "9edfc2b17996048c65130c1b8993fa598938a01e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg5OTA1NA==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r401899054", "bodyText": "removed, accidentally left in", "author": "NatalieEO", "createdAt": "2020-04-01T20:46:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5NDM1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5NDk3NA==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r401294974", "bodyText": "Can tag be null? If yes, you need a check here.", "author": "coverbeck", "createdAt": "2020-04-01T00:46:32Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -485,48 +507,20 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n         return dockerHubImages;\n     }\n \n-    //default Optional<String> getImageResponseFromQuay(String repo, String tag) {\n     default Set<Image> getImageResponseFromQuay(String repo, String tagName) {\n-        final String tagUrl = QUAY_URL + \"repository/\" + repo + \"/tag/\" + \"?specificTag=\" + tagName;\n-        Optional<String> response;\n-        Map<String, String> errorMap = new HashMap<>();\n-\n-        try {\n-            URL url = new URL(tagUrl);\n-            response = Optional.of(IOUtils.toString(url, StandardCharsets.UTF_8));\n-\n-        } catch (IOException ex) {\n-            LOG.error(\"Unable to get response from Quay\", ex);\n-            response = Optional.empty();\n-        }\n-\n         Set<Image> quayImages = new HashSet<>();\n-        if (response.isPresent()) {\n-            Map<String, ArrayList<Map<String, String>>> map = new HashMap<>();\n-            String errorKey = \"error_message\";\n-\n-            map = (Map<String, ArrayList<Map<String, String>>>)GSON.fromJson(response.get(), map.getClass());\n-            errorMap = (Map<String, String>)GSON.fromJson(response.get(), errorMap.getClass());\n-            if (errorMap.get(errorKey) != null) {\n-                LOG.error(\"Error response from Quay: \" + errorMap.get(errorKey));\n-            } else {\n-                try {\n-                    final List<Map<String, String>> array = map.get(\"tags\");\n-\n-                    for (Map<String, String> tag : array) {\n-                        final String digest = tag.get(\"manifest_digest\");\n-                        final String imageID = tag.get(\"image_id\");\n-                        List<Checksum> checksums = new ArrayList<>();\n-                        checksums.add(new Checksum(digest.split(\":\")[0], digest.split(\":\")[1]));\n-                        quayImages.add(new Image(checksums, repo, tagName, imageID, Registry.QUAY_IO));\n-                    }\n+        RepositoryApi api = new RepositoryApi(API_CLIENT);\n+        try {\n \n-                } catch (IndexOutOfBoundsException | NullPointerException ex) {\n-                    LOG.error(\"Could not get checksum information for \" + repo, ex);\n-                }\n-            }\n-        } else {\n-            LOG.error(\"Could not get response from Quay for \" + repo);\n+            final QuayRepo quayRepo = api.getRepo(repo, false);\n+            quayRepo.getTags().values().stream();\n+            QuayTag tag = quayRepo.getTags().get(tagName);\n+            final String digest = tag.getManifestDigest();", "originalCommit": "9edfc2b17996048c65130c1b8993fa598938a01e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5NTU5NQ==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r401295595", "bodyText": "If os and osVersion are empty strings, you'll end up with / as the OS. Do you want that (I don't know)?", "author": "coverbeck", "createdAt": "2020-04-01T00:48:38Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -470,7 +487,12 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n                             Checksum checksum = new Checksum(manifestDigest.split(\":\")[0], manifestDigest.split(\":\")[1]);\n                             List<Checksum> checksums = Collections.singletonList(checksum);\n                             Image archImage = new Image(checksums, repo, tagName, r.getImageID(), Registry.DOCKER_HUB);\n-                            archImage.setArchitecture(dockerHubImage.getArchitecture());\n+                            String os = dockerHubImage.getOs() == null ? \"\" : dockerHubImage.getOs();\n+                            String osVersion = dockerHubImage.getOsVersion() == null ? \"\" : dockerHubImage.getOsVersion();\n+                            String architecture = dockerHubImage.getArchitecture() == null ? \"\" : dockerHubImage.getArchitecture();\n+                            String variant = dockerHubImage.getVariant() == null ? \"\" : dockerHubImage.getVariant();\n+                            archImage.setArchitecture(architecture + \"/\" + variant);\n+                            archImage.setOs(os + \"/\" + osVersion);", "originalCommit": "9edfc2b17996048c65130c1b8993fa598938a01e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5NzEzMQ==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r401297131", "bodyText": "Just a small style thing, but on the previous line you go to the trouble of setting registryFound to null, but then you don't check against it; you check against registry, so that if statement checks against two different variables for sort of the same value.", "author": "coverbeck", "createdAt": "2020-04-01T00:54:28Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -343,24 +356,43 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n         return url;\n     }\n \n-    // TODO: Implement for DockerHub, then gitlab and seven bridges;\n+    default Optional<Registry> determineImageRegistry(String image) {\n+        if (image.startsWith(\"quay.io/\")) {\n+            return Optional.of(Registry.QUAY_IO);\n+        } else if (image.startsWith(\"images.sbgenomics\")) {\n+            return Optional.of(Registry.SEVEN_BRIDGES);\n+        } else if (image.startsWith(\"registry.gitlab.com\")) {\n+            return Optional.of(Registry.GITLAB);\n+        } else if (GOOGLE_PATTERN.matcher(image).matches()) {\n+            return Optional.empty();\n+        } else if (AMAZON_ECR_PATTERN.matcher(image).matches()) {\n+            return Optional.of(Registry.AMAZON_ECR);\n+        } else if ((DOCKER_HUB.matcher(image).matches() || OFFICIAL_DOCKER_HUB_IMAGE.matcher(image).matches())) {\n+            return Optional.of(Registry.DOCKER_HUB);\n+        } else {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    // TODO: Implement then gitlab, seven bridges, amazon, google if possible;\n     default Set<Image> getImagesFromRegistry(String toolsJSONTable) {\n         List<Map<String, String>> dockerTools = new ArrayList<>();\n         dockerTools = (ArrayList<Map<String, String>>)GSON.fromJson(toolsJSONTable, dockerTools.getClass());\n-        Pattern amazonECRPattern = Pattern.compile(\"(.*\\\\.)(drk\\\\.ecr\\\\.)(.*\\\\.)(amazonaws.com)\");\n-        Pattern googlePattern = Pattern.compile(\"(.*)(gcr\\\\.io)(.*)\");\n \n         // Eliminate duplicate docker strings\n         Set<String> dockerStrings = dockerTools.stream().map(dockertool -> dockertool.get(\"docker\")).filter(Objects::nonNull).collect(Collectors.toSet());\n \n         Set<Image> dockerImages = new HashSet<>();\n \n         for (String image : dockerStrings) {\n-            String[] parts = image.split(\"/\");\n             String[] splitDocker;\n             String[] splitTag;\n \n-            if (image.startsWith(\"quay.io/\")) {\n+            Optional<Registry> registry = determineImageRegistry(image);\n+            Registry registryFound = registry.isEmpty() ? null : registry.get();\n+            if (registry.isEmpty() || registryFound == Registry.AMAZON_ECR || registryFound == Registry.GITLAB) {", "originalCommit": "9edfc2b17996048c65130c1b8993fa598938a01e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5ODQ1OQ==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r401298459", "bodyText": "Double double slashes :)", "author": "coverbeck", "createdAt": "2020-04-01T00:59:06Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -69,6 +75,13 @@\n     String DOCKERHUB_URL = AbstractImageRegistry.DOCKERHUB_URL;\n     Logger LOG = LoggerFactory.getLogger(LanguageHandlerInterface.class);\n     Gson GSON = new Gson();\n+    ApiClient API_CLIENT = Configuration.getDefaultApiClient();\n+    Pattern AMAZON_ECR_PATTERN = Pattern.compile(\"(.+)(\\\\.dkr\\\\.ecr\\\\.)(.+)(\\\\.amazonaws.com/)(.+)\");\n+    Pattern GOOGLE_PATTERN = Pattern.compile(\"((us|eu|asia)(.))?(gcr\\\\.io)(.+)\");\n+    // <org>/<repository>:<version> -> broadinstitute/gatk:4.0.1.1\n+    Pattern DOCKER_HUB = Pattern.compile(\"(\\\\w)+/(.*):(.+)\");\n+    //    // <repo>:<version> -> postgres:9.6 Official Docker Hub images belong to the org \"library\", but that's not included when pulling the image", "originalCommit": "9edfc2b17996048c65130c1b8993fa598938a01e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5NTAwNg==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r401695006", "bodyText": "Consider putting this into dockstore-testing", "author": "denis-yuen", "createdAt": "2020-04-01T15:15:28Z", "path": "dockstore-integration-testing/src/test/java/io/dockstore/client/cli/WorkflowIT.java", "diffHunk": "@@ -995,6 +995,25 @@ private void verifyImageChecksumsAreSaved(WorkflowVersion version) {\n         );\n     }\n \n+    @Test\n+    public void testGettingImagesFromDockerHub() {\n+        final ApiClient webClient = getWebClient(USER_2_USERNAME, testingPostgres);\n+        WorkflowsApi workflowsApi = new WorkflowsApi(webClient);\n+        final io.dockstore.openapi.client.ApiClient openAPIClient = getOpenAPIWebClient(USER_2_USERNAME, testingPostgres);\n+        Ga4Ghv20Api ga4Ghv20Api = new Ga4Ghv20Api(openAPIClient);\n+\n+        // Test that a version of an official dockerhub image will get an image per architecture. (python 2.7) Also check that regular\n+        // DockerHub images are grabbed correctly broadinstitute/gatk:4.0.1.1\n+        WorkflowVersion version = snapshotWorkflowVersion(workflowsApi, \"dockstore-testing/broad-prod-wgs-germline-snps-indels\", DescriptorType.WDL.toString(), \"/JointGenotypingWf.wdl\", \"1.1.2\");\n+        WorkflowVersion version2 = snapshotWorkflowVersion(workflowsApi, \"NatalieEO/broad-prod-wgs-germline-snps-indels\", DescriptorType.WDL.toString(), \"/JointGenotypingWf.wdl\", \"1.1.2\");", "originalCommit": "9edfc2b17996048c65130c1b8993fa598938a01e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg5OTM0OA==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r401899348", "bodyText": "deleted, shouldn't be there", "author": "NatalieEO", "createdAt": "2020-04-01T20:47:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5NTAwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwNzAyNQ==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r401707025", "bodyText": "Changing on purpose?", "author": "denis-yuen", "createdAt": "2020-04-01T15:31:32Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Image.java", "diffHunk": "@@ -38,7 +37,6 @@\n \n @Entity\n @ApiModel(value = \"Image\", description = \"Image(s) associated with tags and workflow versions\")\n-@Table(name = \"image\")", "originalCommit": "9edfc2b17996048c65130c1b8993fa598938a01e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg5OTEzMw==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r401899133", "bodyText": "oops", "author": "NatalieEO", "createdAt": "2020-04-01T20:46:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwNzAyNQ=="}], "type": "inlineReview"}, {"oid": "628b27ff0fdf0bed4ce84bd5be51529b51a8eb05", "url": "https://github.com/dockstore/dockstore/commit/628b27ff0fdf0bed4ce84bd5be51529b51a8eb05", "message": "PR feedback", "committedDate": "2020-04-01T22:58:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk2NjYxMw==", "url": "https://github.com/dockstore/dockstore/pull/3341#discussion_r401966613", "bodyText": "Sorry, I think this is wrong; registry will never be null. I meant have registryFound == null, so that you're using the same variable throughout the if statement. Sorry for the confusion.", "author": "coverbeck", "createdAt": "2020-04-01T23:23:36Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/LanguageHandlerInterface.java", "diffHunk": "@@ -390,7 +390,7 @@ default String getURLFromEntry(String dockerEntry, ToolDAO toolDAO) {\n \n             Optional<Registry> registry = determineImageRegistry(image);\n             Registry registryFound = registry.isEmpty() ? null : registry.get();\n-            if (registry.isEmpty() || registryFound == Registry.AMAZON_ECR || registryFound == Registry.GITLAB) {\n+            if (registry == null || registryFound == Registry.AMAZON_ECR || registryFound == Registry.GITLAB) {", "originalCommit": "628b27ff0fdf0bed4ce84bd5be51529b51a8eb05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b988f702ae3e41a79812d47160ddc57afad0177d", "url": "https://github.com/dockstore/dockstore/commit/b988f702ae3e41a79812d47160ddc57afad0177d", "message": "registryFound", "committedDate": "2020-04-02T21:43:26Z", "type": "commit"}]}