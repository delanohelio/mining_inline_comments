{"pr_number": 3343, "pr_title": "Feature/3301/refresh individual version", "pr_createdAt": "2020-03-24T18:58:40Z", "pr_url": "https://github.com/dockstore/dockstore/pull/3343", "timeline": [{"oid": "080f6cccf90433d0b9e295fdb9ab6399df8d6875", "url": "https://github.com/dockstore/dockstore/commit/080f6cccf90433d0b9e295fdb9ab6399df8d6875", "message": "add ability to refresh an individual version", "committedDate": "2020-03-23T16:07:32Z", "type": "commit"}, {"oid": "3f019a6d06168ef0f138e998420a317ff6ed3b1e", "url": "https://github.com/dockstore/dockstore/commit/3f019a6d06168ef0f138e998420a317ff6ed3b1e", "message": "added tests for refresh workflow", "committedDate": "2020-03-23T17:00:05Z", "type": "commit"}, {"oid": "3dcc29d46420c6b9236d5c5bd18701bd0ea466f3", "url": "https://github.com/dockstore/dockstore/commit/3dcc29d46420c6b9236d5c5bd18701bd0ea466f3", "message": "support for refreshing legacy versions within a github app workflow; also some test", "committedDate": "2020-03-23T20:15:56Z", "type": "commit"}, {"oid": "0b96c2ca8d37c7eb36d451a90784f3a5364b287d", "url": "https://github.com/dockstore/dockstore/commit/0b96c2ca8d37c7eb36d451a90784f3a5364b287d", "message": "some comments and cleanup", "committedDate": "2020-03-24T14:30:01Z", "type": "commit"}, {"oid": "6bb1725a62fa6f7613c05a8f12e77c6f9e3de0b5", "url": "https://github.com/dockstore/dockstore/commit/6bb1725a62fa6f7613c05a8f12e77c6f9e3de0b5", "message": "refresh all will not throw an error for dockstore.yml workflows", "committedDate": "2020-03-24T16:10:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY5NzIyNg==", "url": "https://github.com/dockstore/dockstore/pull/3343#discussion_r398697226", "bodyText": "What happens if versionName is not empty and the version got deleted on GitHub?", "author": "coverbeck", "createdAt": "2020-03-26T16:10:10Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/AbstractWorkflowResource.java", "diffHunk": "@@ -151,20 +151,24 @@ private String getToken(List<Token> tokens, TokenType tokenType) {\n      * workflow verions.\n      * @param workflow    workflow to be updated\n      * @param newWorkflow workflow to grab new content from\n+     * @param user\n+     * @param versionName\n      */\n-    protected void updateDBWorkflowWithSourceControlWorkflow(Workflow workflow, Workflow newWorkflow, final User user) {\n+    protected void updateDBWorkflowWithSourceControlWorkflow(Workflow workflow, Workflow newWorkflow, final User user, Optional<String> versionName) {\n         // update root workflow\n         workflow.update(newWorkflow);\n         // update workflow versions\n         Map<String, WorkflowVersion> existingVersionMap = new HashMap<>();\n         workflow.getWorkflowVersions().forEach(version -> existingVersionMap.put(version.getName(), version));\n \n-        // delete versions that exist in old workflow but do not exist in newWorkflow\n-        Map<String, WorkflowVersion> newVersionMap = new HashMap<>();\n-        newWorkflow.getWorkflowVersions().forEach(version -> newVersionMap.put(version.getName(), version));\n-        Sets.SetView<String> removedVersions = Sets.difference(existingVersionMap.keySet(), newVersionMap.keySet());\n-        for (String version : removedVersions) {\n-            workflow.removeWorkflowVersion(existingVersionMap.get(version));\n+        // delete versions that exist in old workflow but do not exist in newWorkflow (only for whole refresh)\n+        if (versionName.isEmpty()) {", "originalCommit": "6bb1725a62fa6f7613c05a8f12e77c6f9e3de0b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1ODUwMQ==", "url": "https://github.com/dockstore/dockstore/pull/3343#discussion_r399258501", "bodyText": "Good call. Looks like the endpoint will do nothing and not throw an error. I'll update it so that it throws an error if the branch does not exist.", "author": "agduncan94", "createdAt": "2020-03-27T13:21:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY5NzIyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI4NDczOQ==", "url": "https://github.com/dockstore/dockstore/pull/3343#discussion_r399284739", "bodyText": "Actually think I misunderstood. Do you mean if the refresh is of a version that doesn't exist on GitHub but exists on Dockstore, it should be deleted on Dockstore?", "author": "agduncan94", "createdAt": "2020-03-27T14:00:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY5NzIyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwNDUyOA==", "url": "https://github.com/dockstore/dockstore/pull/3343#discussion_r399304528", "bodyText": "After discussing with Denis, we've decided that on refresh of a version, if that version does not exist, throw an error. This is different from the current refresh workflow logic, which would delete a version on Dockstore if it doesn't exist on the Git repo anymore. We decided on this difference because of how we expect the users to use this refresh in the UI. If they are refreshing a version, then likely they expect it to still exist and are not trying to delete it. A delete version button may be present in the future, pending archive/delete/life cycle discussions.", "author": "agduncan94", "createdAt": "2020-03-27T14:28:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY5NzIyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwODE5NQ==", "url": "https://github.com/dockstore/dockstore/pull/3343#discussion_r400308195", "bodyText": "Actually think I misunderstood. Do you mean if the refresh is of a version that doesn't exist on GitHub but exists on Dockstore, it should be deleted on Dockstore?\n\nYes, I meant that. :) Although I think I missed the larger context, and was just assuming it was a deleted version in general, as opposed to the specific version you are refreshing. You have it covered with the other ticket in any case.", "author": "coverbeck", "createdAt": "2020-03-30T16:00:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY5NzIyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY5ODQ0Ng==", "url": "https://github.com/dockstore/dockstore/pull/3343#discussion_r398698446", "bodyText": "Shouldn't remove frozen versions. While database shouldn't let you, I think the whole transaction may fail, so other changes that happened will get lost.", "author": "coverbeck", "createdAt": "2020-03-26T16:11:41Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/AbstractWorkflowResource.java", "diffHunk": "@@ -151,20 +151,24 @@ private String getToken(List<Token> tokens, TokenType tokenType) {\n      * workflow verions.\n      * @param workflow    workflow to be updated\n      * @param newWorkflow workflow to grab new content from\n+     * @param user\n+     * @param versionName\n      */\n-    protected void updateDBWorkflowWithSourceControlWorkflow(Workflow workflow, Workflow newWorkflow, final User user) {\n+    protected void updateDBWorkflowWithSourceControlWorkflow(Workflow workflow, Workflow newWorkflow, final User user, Optional<String> versionName) {\n         // update root workflow\n         workflow.update(newWorkflow);\n         // update workflow versions\n         Map<String, WorkflowVersion> existingVersionMap = new HashMap<>();\n         workflow.getWorkflowVersions().forEach(version -> existingVersionMap.put(version.getName(), version));\n \n-        // delete versions that exist in old workflow but do not exist in newWorkflow\n-        Map<String, WorkflowVersion> newVersionMap = new HashMap<>();\n-        newWorkflow.getWorkflowVersions().forEach(version -> newVersionMap.put(version.getName(), version));\n-        Sets.SetView<String> removedVersions = Sets.difference(existingVersionMap.keySet(), newVersionMap.keySet());\n-        for (String version : removedVersions) {\n-            workflow.removeWorkflowVersion(existingVersionMap.get(version));\n+        // delete versions that exist in old workflow but do not exist in newWorkflow (only for whole refresh)\n+        if (versionName.isEmpty()) {\n+            Map<String, WorkflowVersion> newVersionMap = new HashMap<>();\n+            newWorkflow.getWorkflowVersions().forEach(version -> newVersionMap.put(version.getName(), version));\n+            Sets.SetView<String> removedVersions = Sets.difference(existingVersionMap.keySet(), newVersionMap.keySet());\n+            for (String version : removedVersions) {\n+                workflow.removeWorkflowVersion(existingVersionMap.get(version));", "originalCommit": "6bb1725a62fa6f7613c05a8f12e77c6f9e3de0b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc3OTI5Mg==", "url": "https://github.com/dockstore/dockstore/pull/3343#discussion_r398779292", "bodyText": "boo", "author": "denis-yuen", "createdAt": "2020-03-26T17:59:50Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/GitHubSourceCodeRepo.java", "diffHunk": "@@ -473,10 +476,12 @@ public GHRepository getRepository(String repositoryId) {\n      * @param existingDefaults Optional mapping of existing versions\n      * @param repository GitHub repository object\n      * @param dockstoreYml Dockstore YML sourcefile\n+     * @param versionName Optional version name to refresh\n      * @return WorkflowVersion for the given reference\n      */\n+    @SuppressWarnings(\"checkstyle:ParameterNumber\")", "originalCommit": "6bb1725a62fa6f7613c05a8f12e77c6f9e3de0b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0MDgxMA==", "url": "https://github.com/dockstore/dockstore/pull/3343#discussion_r399340810", "bodyText": "\ud83d\ude22", "author": "agduncan94", "createdAt": "2020-03-27T15:18:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc3OTI5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4MDI3MQ==", "url": "https://github.com/dockstore/dockstore/pull/3343#discussion_r398780271", "bodyText": "Paging @garyluu\nDoes a shared prefix with @Path(\"/{workflowId}/refresh\") cause issues with ELK?", "author": "denis-yuen", "createdAt": "2020-03-26T18:01:17Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/WorkflowResource.java", "diffHunk": "@@ -380,61 +380,109 @@ private void logFullWorkflowRefresh(final Workflow workflow) {\n         }\n     }\n \n+    /**\n+     * Logs a version refresh statement with the workflow's descriptor language if workflow is a FULL workflow .\n+     * These logs will be monitored by CloudWatch and displayed on Grafana.\n+     * @param workflow\n+     * @param workflowVersion\n+     */\n+    private void logWorkflowVersionRefresh(final Workflow workflow, final String workflowVersion) {\n+        if (workflow.getMode() == WorkflowMode.FULL) {\n+            LOG.info(String.format(\"%s: Refreshing version %s for %s workflow named %s\", dashboardPrefix, workflowVersion, workflow.getDescriptorType(), workflow.getEntryPath()));\n+        }\n+    }\n+\n     @GET\n     @Path(\"/{workflowId}/refresh\")\n     @Timed\n     @UnitOfWork\n+    @Operation(operationId = \"refresh\", description = \"Refresh one particular workflow.\", security = @SecurityRequirement(name = \"bearer\"))\n     @ApiOperation(nickname = \"refresh\", value = \"Refresh one particular workflow.\", notes = \"Full refresh\", authorizations = {\n         @Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, response = Workflow.class)\n     public Workflow refresh(@ApiParam(hidden = true) @Auth User user,\n         @ApiParam(value = \"workflow ID\", required = true) @PathParam(\"workflowId\") Long workflowId) {\n-        Workflow workflow = workflowDAO.findById(workflowId);\n-        checkEntry(workflow);\n-        checkUser(user, workflow);\n-        checkNotHosted(workflow);\n+        return refreshWorkflow(user, workflowId, Optional.empty());\n+    }\n+\n+    @GET\n+    @Path(\"/{workflowId}/refresh/{version}\")", "originalCommit": "6bb1725a62fa6f7613c05a8f12e77c6f9e3de0b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1MTQyMw==", "url": "https://github.com/dockstore/dockstore/pull/3343#discussion_r399251423", "bodyText": "No, there's a slash, it should be fine.  but as always, the script to generate the patterns should always be ran.", "author": "garyluu", "createdAt": "2020-03-27T13:09:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4MDI3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1MjcyMw==", "url": "https://github.com/dockstore/dockstore/pull/3343#discussion_r399252723", "bodyText": "use constant for \"bearer\" here and below", "author": "garyluu", "createdAt": "2020-03-27T13:11:49Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/WorkflowResource.java", "diffHunk": "@@ -380,61 +380,109 @@ private void logFullWorkflowRefresh(final Workflow workflow) {\n         }\n     }\n \n+    /**\n+     * Logs a version refresh statement with the workflow's descriptor language if workflow is a FULL workflow .\n+     * These logs will be monitored by CloudWatch and displayed on Grafana.\n+     * @param workflow\n+     * @param workflowVersion\n+     */\n+    private void logWorkflowVersionRefresh(final Workflow workflow, final String workflowVersion) {\n+        if (workflow.getMode() == WorkflowMode.FULL) {\n+            LOG.info(String.format(\"%s: Refreshing version %s for %s workflow named %s\", dashboardPrefix, workflowVersion, workflow.getDescriptorType(), workflow.getEntryPath()));\n+        }\n+    }\n+\n     @GET\n     @Path(\"/{workflowId}/refresh\")\n     @Timed\n     @UnitOfWork\n+    @Operation(operationId = \"refresh\", description = \"Refresh one particular workflow.\", security = @SecurityRequirement(name = \"bearer\"))", "originalCommit": "6bb1725a62fa6f7613c05a8f12e77c6f9e3de0b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1MjkzNg==", "url": "https://github.com/dockstore/dockstore/pull/3343#discussion_r399252936", "bodyText": "user not hidden for both endpoints", "author": "garyluu", "createdAt": "2020-03-27T13:12:09Z", "path": "dockstore-webservice/src/main/resources/openapi3/openapi.yaml", "diffHunk": "@@ -4115,6 +4115,65 @@ paths:\n       - bearer: []\n       tags:\n       - workflows\n+  /workflows/{workflowId}/refresh:\n+    get:\n+      description: Refresh one particular workflow.\n+      operationId: refresh\n+      parameters:\n+      - in: path\n+        name: workflowId\n+        required: true\n+        schema:\n+          format: int64\n+          type: integer\n+      requestBody:\n+        content:\n+          '*/*':\n+            schema:\n+              $ref: '#/components/schemas/User'\n+      responses:\n+        default:\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/Workflow'\n+          description: default response\n+      security:\n+      - bearer: []\n+      tags:\n+      - workflows\n+  /workflows/{workflowId}/refresh/{version}:\n+    get:\n+      description: Refresh one particular workflow version.\n+      operationId: refreshVersion\n+      parameters:\n+      - in: path\n+        name: workflowId\n+        required: true\n+        schema:\n+          format: int64\n+          type: integer\n+      - in: path\n+        name: version\n+        required: true\n+        schema:\n+          type: string\n+      requestBody:", "originalCommit": "6bb1725a62fa6f7613c05a8f12e77c6f9e3de0b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyMjYwNQ==", "url": "https://github.com/dockstore/dockstore/pull/3343#discussion_r399322605", "bodyText": "How do you hide with openapi?", "author": "agduncan94", "createdAt": "2020-03-27T14:53:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1MjkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyNDc0Ng==", "url": "https://github.com/dockstore/dockstore/pull/3343#discussion_r399324746", "bodyText": "@Parameter(hidden = true, name = \"user\", in = ParameterIn.HEADER)", "author": "garyluu", "createdAt": "2020-03-27T14:56:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1MjkzNg=="}], "type": "inlineReview"}, {"oid": "8ddd7272ff8d7d2b7fe585381bd5dd384cf1c921", "url": "https://github.com/dockstore/dockstore/commit/8ddd7272ff8d7d2b7fe585381bd5dd384cf1c921", "message": "changes from PR", "committedDate": "2020-03-27T15:23:22Z", "type": "commit"}, {"oid": "c12cb57b0958fd8fd67667627babcd379374636d", "url": "https://github.com/dockstore/dockstore/commit/c12cb57b0958fd8fd67667627babcd379374636d", "message": "remove parameter count issue", "committedDate": "2020-03-27T16:58:59Z", "type": "commit"}, {"oid": "b1ea056067b66b41593cedd5bb7ce91e698823fe", "url": "https://github.com/dockstore/dockstore/commit/b1ea056067b66b41593cedd5bb7ce91e698823fe", "message": "Merge branch 'develop' into feature/3301/refresh-individual-version", "committedDate": "2020-03-27T17:06:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4NTAzMA==", "url": "https://github.com/dockstore/dockstore/pull/3343#discussion_r399485030", "bodyText": "Could use a test for refresh version on a frozen version", "author": "denis-yuen", "createdAt": "2020-03-27T19:12:11Z", "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/WebhookIT.java", "diffHunk": "@@ -117,6 +120,30 @@ public void testWorkflowMigration() throws Exception {\n             assertEquals(\"Should not be able to refresh a dockstore.yml workflow.\", HttpStatus.SC_BAD_REQUEST, ex.getCode());\n         }\n \n+        // Should be able to refresh a legacy version", "originalCommit": "b1ea056067b66b41593cedd5bb7ce91e698823fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUxMzkyNQ==", "url": "https://github.com/dockstore/dockstore/pull/3343#discussion_r399513925", "bodyText": "Actually this is hard to test, since we would be testing that a frozen version is not removed when the corresponding Git repo branch is deleted. I don't think our current testing framework supports this.", "author": "agduncan94", "createdAt": "2020-03-27T20:11:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4NTAzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MjAwNQ==", "url": "https://github.com/dockstore/dockstore/pull/3343#discussion_r399542005", "bodyText": "That would be hard.  How about testing that a frozen version is not updated when the corresponding Git repo branch is newer?", "author": "denis-yuen", "createdAt": "2020-03-27T21:16:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4NTAzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE5MDQ1MA==", "url": "https://github.com/dockstore/dockstore/pull/3343#discussion_r400190450", "bodyText": "Wouldn't that also require making a push to the Git repo?", "author": "agduncan94", "createdAt": "2020-03-30T13:28:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4NTAzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE5Mzg3Mw==", "url": "https://github.com/dockstore/dockstore/pull/3343#discussion_r400193873", "bodyText": "What if I do a refresh and check the dbupdatetime?", "author": "agduncan94", "createdAt": "2020-03-30T13:33:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4NTAzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI0MDI3NA==", "url": "https://github.com/dockstore/dockstore/pull/3343#discussion_r400240274", "bodyText": "Was more thinking that you could start the database off with different content, freeze it, do a fake call to the new endpoint, and just verify that the new endpoint respects the frozen status and doesn't update to whats in GitHub", "author": "denis-yuen", "createdAt": "2020-03-30T14:33:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ4NTAzMA=="}], "type": "inlineReview"}, {"oid": "c00aa1a3c48b7d0cc88d4a6dcdd9edc5ad06454b", "url": "https://github.com/dockstore/dockstore/commit/c00aa1a3c48b7d0cc88d4a6dcdd9edc5ad06454b", "message": "update test to try refreshing a workflow with a frozen version, should not throw an error", "committedDate": "2020-03-27T20:12:53Z", "type": "commit"}, {"oid": "188ffe55b79e0406e3004e72ee05855440c4b317", "url": "https://github.com/dockstore/dockstore/commit/188ffe55b79e0406e3004e72ee05855440c4b317", "message": "Merge branch 'develop' into feature/3301/refresh-individual-version", "committedDate": "2020-04-02T13:13:46Z", "type": "commit"}, {"oid": "2a8e272421174498e48cb9d64af6ad476ccdab33", "url": "https://github.com/dockstore/dockstore/commit/2a8e272421174498e48cb9d64af6ad476ccdab33", "message": "add frozen version test", "committedDate": "2020-04-02T14:50:41Z", "type": "commit"}]}