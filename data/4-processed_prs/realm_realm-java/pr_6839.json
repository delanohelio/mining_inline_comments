{"pr_number": 6839, "pr_title": " Merge Stitch and Realm SDKs - 3: remote collection count, insert, delete and findOne", "pr_createdAt": "2020-05-06T08:23:49Z", "pr_url": "https://github.com/realm/realm-java/pull/6839", "timeline": [{"oid": "4311dbfe5ddc7ef7d0c22e256a9a6f0093c3c265", "url": "https://github.com/realm/realm-java/commit/4311dbfe5ddc7ef7d0c22e256a9a6f0093c3c265", "message": "First iteration: added GMS library (possibly temporarily) to avoid introducing immediate breaking changes in how we process asynchronous operations with AsyncRealmTask. All original Stitch interfaces and proxies have been discarded in favour of Java classes (although this approach might be changed). Some interfaces connected to the collection's iterables have been omitted as it is unclear whether they will be needed or not for the time being.", "committedDate": "2020-04-16T12:48:37Z", "type": "commit"}, {"oid": "12a6ea4ce101c9448d84ec1793f93457cf22a48a", "url": "https://github.com/realm/realm-java/commit/12a6ea4ce101c9448d84ec1793f93457cf22a48a", "message": "Added licences to class headers plus a bit of cleanup", "committedDate": "2020-04-17T11:20:56Z", "type": "commit"}, {"oid": "9d69273176733c69855147230e841597a5e33ee1", "url": "https://github.com/realm/realm-java/commit/9d69273176733c69855147230e841597a5e33ee1", "message": "Added latest API methods and necessary classes", "committedDate": "2020-04-17T13:35:47Z", "type": "commit"}, {"oid": "11dcd85ade762ec524a4adf5cb7ffd22f1c8ae0b", "url": "https://github.com/realm/realm-java/commit/11dcd85ade762ec524a4adf5cb7ffd22f1c8ae0b", "message": "Added remote mongo client and remote database, their respective Os files and part of the native logic", "committedDate": "2020-04-24T12:24:06Z", "type": "commit"}, {"oid": "c6c92e992267d693e9916e7a82c886f2eac4bf6b", "url": "https://github.com/realm/realm-java/commit/c6c92e992267d693e9916e7a82c886f2eac4bf6b", "message": "Moved JNI callbacks outside RealmApp and added more remote collection classes", "committedDate": "2020-04-27T13:27:41Z", "type": "commit"}, {"oid": "f09c10397bd271a6b9e757ae5e2074c313f88ef3", "url": "https://github.com/realm/realm-java/commit/f09c10397bd271a6b9e757ae5e2074c313f88ef3", "message": "Updated object store branch to v10 and fixed wrong use of count call", "committedDate": "2020-04-27T14:33:15Z", "type": "commit"}, {"oid": "a3988dee91afd1aea6d692d768b691265c3d41d2", "url": "https://github.com/realm/realm-java/commit/a3988dee91afd1aea6d692d768b691265c3d41d2", "message": "Merge branch 'el/remote-mongodb-client' into el/remote-mongodb-client-scaffold\n\n# Conflicts:\n#\trealm/realm-library/src/main/cpp/object-store\n#\trealm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "committedDate": "2020-04-28T09:58:09Z", "type": "commit"}, {"oid": "c3936bf7734d617ae9f313d360b6af9a4f7d5e1d", "url": "https://github.com/realm/realm-java/commit/c3936bf7734d617ae9f313d360b6af9a4f7d5e1d", "message": "Cleanup", "committedDate": "2020-04-28T10:04:46Z", "type": "commit"}, {"oid": "a10c2ee24b1e4868c44c4a7d130f2d300c60cc68", "url": "https://github.com/realm/realm-java/commit/a10c2ee24b1e4868c44c4a7d130f2d300c60cc68", "message": "Added task-related classes from Stitch", "committedDate": "2020-04-28T14:09:45Z", "type": "commit"}, {"oid": "1c2933f6aea4bd2bae967bda5f397e01cec71827", "url": "https://github.com/realm/realm-java/commit/1c2933f6aea4bd2bae967bda5f397e01cec71827", "message": "First steps towards using tasks for the count operation", "committedDate": "2020-04-28T14:15:10Z", "type": "commit"}, {"oid": "082070dd755f28baa1075eef2aeb655a2c087f90", "url": "https://github.com/realm/realm-java/commit/082070dd755f28baa1075eef2aeb655a2c087f90", "message": "Added preliminary collection test, only with scaffolding for \"count\", but still not working as the OS code isn't fully ready yet. Moved Realm initialisation in test cases outside TestRealmApp to setUp method as agreed internally, plus fixed some wrong implementation in the interop layer. Also updated dependencies list to fetch sync version 10 alpha 9 instead of 8.", "committedDate": "2020-05-01T12:06:02Z", "type": "commit"}, {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593", "url": "https://github.com/realm/realm-java/commit/0d1b58cc5c0c067b2c1afb0331b6633ff11b8593", "message": "Fixed wrong finalizer methods and cleanup to interop files", "committedDate": "2020-05-01T12:17:52Z", "type": "commit"}, {"oid": "ecc7963da89e24dd128f4723b144a7a0a4aa2f0f", "url": "https://github.com/realm/realm-java/commit/ecc7963da89e24dd128f4723b144a7a0a4aa2f0f", "message": "Merge branch 'el/remote-mongodb-client-scaffold' into el/remote-mongodb-client-gms-tasks", "committedDate": "2020-05-01T12:30:03Z", "type": "commit"}, {"oid": "540bdf5b6d5a9a5c96a80d08d3592cccf19de756", "url": "https://github.com/realm/realm-java/commit/540bdf5b6d5a9a5c96a80d08d3592cccf19de756", "message": "Merge branch 'el/remote-mongodb-client-gms-tasks' into el/remote-mongodb-client-collection-count", "committedDate": "2020-05-01T12:33:07Z", "type": "commit"}, {"oid": "a184dc7026c12bd8a296a7d885f0e3d53a2369dc", "url": "https://github.com/realm/realm-java/commit/a184dc7026c12bd8a296a7d885f0e3d53a2369dc", "message": "Moved TaskUtils to tests", "committedDate": "2020-05-01T12:58:27Z", "type": "commit"}, {"oid": "c8d8574e3016fa72fe6beabcf025600b3725e9d7", "url": "https://github.com/realm/realm-java/commit/c8d8574e3016fa72fe6beabcf025600b3725e9d7", "message": "test", "committedDate": "2020-05-01T13:06:53Z", "type": "commit"}, {"oid": "f347df54dc6d792b70cb39a006a01346ee4c7665", "url": "https://github.com/realm/realm-java/commit/f347df54dc6d792b70cb39a006a01346ee4c7665", "message": "cleanup", "committedDate": "2020-05-01T13:07:23Z", "type": "commit"}, {"oid": "55416d01adab692b3c258c8555cf2dd1d4435815", "url": "https://github.com/realm/realm-java/commit/55416d01adab692b3c258c8555cf2dd1d4435815", "message": "Moved classes", "committedDate": "2020-05-01T16:19:57Z", "type": "commit"}, {"oid": "df8f51161bc9b2a13bf70c3d07392c1e7086fdb6", "url": "https://github.com/realm/realm-java/commit/df8f51161bc9b2a13bf70c3d07392c1e7086fdb6", "message": "Merge branch 'v10' into el/remote-mongodb-client-gms-tasks\n\n# Conflicts:\n#\trealm/realm-library/build.gradle\n#\trealm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoClient.cpp\n#\trealm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoCollection.cpp\n#\trealm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoDatabase.cpp\n#\trealm/realm-library/src/main/cpp/object-store\n#\trealm/realm-library/src/objectServer/java/io/realm/RealmUser.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/common/AsyncAdapter.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/common/Callback.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/common/CallbackAsyncAdapter.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/jni/OsJNIVoidResultCallback.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoClient.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoCollection.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoDatabase.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/MongoNamespace.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/RealmMongoDBCollection.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/RealmMongoDBDatabase.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/RealmMongoDBService.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/RemoteMongoClient.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/RemoteMongoCollection.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/RemoteMongoDatabase.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/remote/RemoteDeleteResult.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/remote/aggregate/RemoteAggregateIterable.java", "committedDate": "2020-05-01T16:31:00Z", "type": "commit"}, {"oid": "ae9950ea40c4850eb94c2ab104f37a783977f3b1", "url": "https://github.com/realm/realm-java/commit/ae9950ea40c4850eb94c2ab104f37a783977f3b1", "message": "Updated OS pointer", "committedDate": "2020-05-01T16:43:21Z", "type": "commit"}, {"oid": "b96e4b1a9e279c7f1e31ea352ac5ff914e7915a6", "url": "https://github.com/realm/realm-java/commit/b96e4b1a9e279c7f1e31ea352ac5ff914e7915a6", "message": "Moved classes", "committedDate": "2020-05-01T16:46:23Z", "type": "commit"}, {"oid": "a12be02fce6e3eca375b67b08580e985d70744cd", "url": "https://github.com/realm/realm-java/commit/a12be02fce6e3eca375b67b08580e985d70744cd", "message": "Merge branch 'el/remote-mongodb-client-gms-tasks' into el/remote-mongodb-client-collection-count\n\n# Conflicts:\n#\tdependencies.list\n#\trealm/realm-library/src/main/cpp/object-store\n#\trealm/realm-library/src/objectServer/java/io/realm/RealmUser.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoCollection.java", "committedDate": "2020-05-01T16:50:23Z", "type": "commit"}, {"oid": "7695d14936b5bcb8f7b24ac465554042bed9f3ae", "url": "https://github.com/realm/realm-java/commit/7695d14936b5bcb8f7b24ac465554042bed9f3ae", "message": "Removed duplicate entries in CMakeLists", "committedDate": "2020-05-01T16:53:21Z", "type": "commit"}, {"oid": "81bfca1053ff6daf554c2fbc751a54a104df68d3", "url": "https://github.com/realm/realm-java/commit/81bfca1053ff6daf554c2fbc751a54a104df68d3", "message": "Merge branch 'el/remote-mongodb-client-gms-tasks' into el/remote-mongodb-client-collection-count", "committedDate": "2020-05-01T16:53:39Z", "type": "commit"}, {"oid": "51f5c649456a181b5249828a447228c33c8ff176", "url": "https://github.com/realm/realm-java/commit/51f5c649456a181b5249828a447228c33c8ff176", "message": "Added documentClass property to internal collection class", "committedDate": "2020-05-04T08:29:57Z", "type": "commit"}, {"oid": "9187479f2565e28561c06f1ee79cece5c5f225f6", "url": "https://github.com/realm/realm-java/commit/9187479f2565e28561c06f1ee79cece5c5f225f6", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-count", "committedDate": "2020-05-04T08:38:37Z", "type": "commit"}, {"oid": "0ea57d11adc2f94db41f5defe53e4ad8438d4ed3", "url": "https://github.com/realm/realm-java/commit/0ea57d11adc2f94db41f5defe53e4ad8438d4ed3", "message": "updated OS pointer", "committedDate": "2020-05-04T08:39:05Z", "type": "commit"}, {"oid": "7ef4c7a8bfbd33215a7b5158b349dceb550516d2", "url": "https://github.com/realm/realm-java/commit/7ef4c7a8bfbd33215a7b5158b349dceb550516d2", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-count", "committedDate": "2020-05-04T09:36:53Z", "type": "commit"}, {"oid": "d47441a087d4264f632b57613eb22190e53a0149", "url": "https://github.com/realm/realm-java/commit/d47441a087d4264f632b57613eb22190e53a0149", "message": "Merge branch 'v10' into el/remote-mongodb-client-gms-tasks", "committedDate": "2020-05-04T12:35:18Z", "type": "commit"}, {"oid": "7918f41d494d4d95840a545ef927a3917bee7414", "url": "https://github.com/realm/realm-java/commit/7918f41d494d4d95840a545ef927a3917bee7414", "message": "Merge branch 'el/remote-mongodb-client-gms-tasks' into el/remote-mongodb-client-collection-count", "committedDate": "2020-05-04T12:44:12Z", "type": "commit"}, {"oid": "30aba6dcffafc164c2f02cf332e499b7a91d6de2", "url": "https://github.com/realm/realm-java/commit/30aba6dcffafc164c2f02cf332e499b7a91d6de2", "message": "updated OS pointer", "committedDate": "2020-05-04T12:44:50Z", "type": "commit"}, {"oid": "417b7cbe0e7c36ae2a89413b2d7aecb1c3521979", "url": "https://github.com/realm/realm-java/commit/417b7cbe0e7c36ae2a89413b2d7aecb1c3521979", "message": "added suppresswarnings for ignored futures - issue inherited from Stitch's task framework - test to see if Jenkins swallows it", "committedDate": "2020-05-04T16:49:31Z", "type": "commit"}, {"oid": "47f96ebb5e652c0cf18cc9e9e73ef35860f8bfa6", "url": "https://github.com/realm/realm-java/commit/47f96ebb5e652c0cf18cc9e9e73ef35860f8bfa6", "message": "Merge branch 'el/remote-mongodb-client-gms-tasks' into el/remote-mongodb-client-collection-count", "committedDate": "2020-05-05T07:11:41Z", "type": "commit"}, {"oid": "d71835a06bfc864b3f031f60c3bde42ca509c251", "url": "https://github.com/realm/realm-java/commit/d71835a06bfc864b3f031f60c3bde42ca509c251", "message": "wip", "committedDate": "2020-05-05T07:11:49Z", "type": "commit"}, {"oid": "bc45ce48350914fcae97eb4c48b120e0fc5788df", "url": "https://github.com/realm/realm-java/commit/bc45ce48350914fcae97eb4c48b120e0fc5788df", "message": "Added test for Task.blockingGet and wip on insertOne", "committedDate": "2020-05-05T10:55:57Z", "type": "commit"}, {"oid": "0f673e499070a9c32e4906ddb61dd5556f9c040e", "url": "https://github.com/realm/realm-java/commit/0f673e499070a9c32e4906ddb61dd5556f9c040e", "message": "Added insertmany", "committedDate": "2020-05-05T12:01:48Z", "type": "commit"}, {"oid": "35195b752bb70cae7653f466e33470150ab57a5c", "url": "https://github.com/realm/realm-java/commit/35195b752bb70cae7653f466e33470150ab57a5c", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-insert-one", "committedDate": "2020-05-05T13:14:20Z", "type": "commit"}, {"oid": "fb4d199c46f16b828ae8f4d5aa67a02e170c28e3", "url": "https://github.com/realm/realm-java/commit/fb4d199c46f16b828ae8f4d5aa67a02e170c28e3", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-insert-one\n\n# Conflicts:\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/common/ThreadDispatcher.java", "committedDate": "2020-05-06T08:02:52Z", "type": "commit"}, {"oid": "e7677cf35902f1bf5323dfcffcbcb1b48c233eb1", "url": "https://github.com/realm/realm-java/commit/e7677cf35902f1bf5323dfcffcbcb1b48c233eb1", "message": "Added more meaningful tests for count and insert. Temporarily commented out some code in EmailPasswordAuth.cpp after updating OS to v10. Now the remoteMongoClient is fetched as a shared_ptr in our interop layer. Added codec handling for RemoteMongoDatabase and document class for RemoteMongoCollection", "committedDate": "2020-05-07T15:12:19Z", "type": "commit"}, {"oid": "224276f08a4dabb05f64c6fa2cc05ec6282b4a66", "url": "https://github.com/realm/realm-java/commit/224276f08a4dabb05f64c6fa2cc05ec6282b4a66", "message": "Work in progress - insertMany and interop", "committedDate": "2020-05-08T15:12:58Z", "type": "commit"}, {"oid": "136387f30adc886a5686a7108df0a46d6a8dab89", "url": "https://github.com/realm/realm-java/commit/136387f30adc886a5686a7108df0a46d6a8dab89", "message": "Added deleteOne", "committedDate": "2020-05-08T16:58:24Z", "type": "commit"}, {"oid": "f24af3dd2dda132fe86c1fbc7ca525c1b1593869", "url": "https://github.com/realm/realm-java/commit/f24af3dd2dda132fe86c1fbc7ca525c1b1593869", "message": "Added deleteMany and adjusted visibility of OS constructors", "committedDate": "2020-05-08T21:50:52Z", "type": "commit"}, {"oid": "c39ac1167251cb98ab3d36e164ad870829794ffa", "url": "https://github.com/realm/realm-java/commit/c39ac1167251cb98ab3d36e164ad870829794ffa", "message": "wip", "committedDate": "2020-05-08T22:15:33Z", "type": "commit"}, {"oid": "9978855ef3f4c4817daccf7d287e8961337586d5", "url": "https://github.com/realm/realm-java/commit/9978855ef3f4c4817daccf7d287e8961337586d5", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-insert-one\n\n# Conflicts:\n#\trealm/realm-library/src/main/cpp/io_realm_EmailPasswordAuth.cpp\n#\trealm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoCollection.cpp\n#\trealm/realm-library/src/main/cpp/jni_util/bson_util.cpp\n#\trealm/realm-library/src/main/cpp/jni_util/bson_util.hpp\n#\trealm/realm-library/src/objectServer/java/io/realm/EmailPasswordAuth.java\n#\trealm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "committedDate": "2020-05-11T10:00:33Z", "type": "commit"}, {"oid": "650169f3a2630dca8d8e6504891685209fbcb034", "url": "https://github.com/realm/realm-java/commit/650169f3a2630dca8d8e6504891685209fbcb034", "message": "Updated pointer to OS", "committedDate": "2020-05-11T10:01:06Z", "type": "commit"}, {"oid": "8e3b991bf188d689871862df7e704d27dbfa0f69", "url": "https://github.com/realm/realm-java/commit/8e3b991bf188d689871862df7e704d27dbfa0f69", "message": "Restored curly braces", "committedDate": "2020-05-11T10:03:27Z", "type": "commit"}, {"oid": "68c098ea7b200fbaebfbfd4f6400c64f7199d544", "url": "https://github.com/realm/realm-java/commit/68c098ea7b200fbaebfbfd4f6400c64f7199d544", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-insert-one", "committedDate": "2020-05-11T10:03:54Z", "type": "commit"}, {"oid": "62f29e92c38f89ae720d51d04eaa1a177732bc2e", "url": "https://github.com/realm/realm-java/commit/62f29e92c38f89ae720d51d04eaa1a177732bc2e", "message": "Removed unnecessary codec parameter in getDatabase", "committedDate": "2020-05-11T10:09:16Z", "type": "commit"}, {"oid": "5d2fe8b25c1d36be50b3dcc2efdd90c24fb9c047", "url": "https://github.com/realm/realm-java/commit/5d2fe8b25c1d36be50b3dcc2efdd90c24fb9c047", "message": "Added findOne and proper use of the BSON parsing protocol for handling, delivering and decoding results from the JNI", "committedDate": "2020-05-13T10:41:21Z", "type": "commit"}, {"oid": "e03e8d389075223c8b2b466fdf28f0238e2abb1c", "url": "https://github.com/realm/realm-java/commit/e03e8d389075223c8b2b466fdf28f0238e2abb1c", "message": "Updated OS pointer to branch that contains parsing fixes - update to OS v10 as soon as it is merged", "committedDate": "2020-05-13T10:41:50Z", "type": "commit"}, {"oid": "783dc6d7f474355fde2dde87433058034190f55e", "url": "https://github.com/realm/realm-java/commit/783dc6d7f474355fde2dde87433058034190f55e", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-insert-one", "committedDate": "2020-05-13T10:43:09Z", "type": "commit"}, {"oid": "1b443d7a877a5f6d5e09605235d50be9e34dd9d1", "url": "https://github.com/realm/realm-java/commit/1b443d7a877a5f6d5e09605235d50be9e34dd9d1", "message": "Added missing findOne implementations and updated OS pointer", "committedDate": "2020-05-13T16:23:17Z", "type": "commit"}, {"oid": "46eaaa91a8b4c8f07972e489c0904f199cc1401e", "url": "https://github.com/realm/realm-java/commit/46eaaa91a8b4c8f07972e489c0904f199cc1401e", "message": "fixed unboxing that caused findbugs to complain", "committedDate": "2020-05-14T06:32:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4NzkyNg==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r424887926", "bodyText": "This is useful for working on tests, but should normally not be part of the test. It will affect all other tests as well unless you reset it in tearDown", "author": "cmelchior", "createdAt": "2020-05-14T05:59:41Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/RemoteMongoCollectionTest.kt", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.mongodb\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.*\n+import io.realm.log.LogLevel\n+import io.realm.log.RealmLog\n+import io.realm.mongodb.remote.RemoteCountOptions\n+import io.realm.util.blockingGetResult\n+import org.bson.Document\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import kotlin.test.assertEquals\n+import kotlin.test.assertNull\n+\n+@RunWith(AndroidJUnit4::class)\n+class RemoteMongoCollectionTest {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var user: RealmUser\n+    private lateinit var client: RemoteMongoClient\n+    private lateinit var database: RemoteMongoDatabase\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        RealmLog.setLevel(LogLevel.DEBUG)", "originalCommit": "1b443d7a877a5f6d5e09605235d50be9e34dd9d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4OTAxMA==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r424889010", "bodyText": "Nitpick, I would normally place the companion object at the top as I see it as static functions used by most of the class, so first finding the definition for them at the bottom makes reading the code from top -> bottom a bit hard.", "author": "cmelchior", "createdAt": "2020-05-14T06:02:54Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/RemoteMongoCollectionTest.kt", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.mongodb\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.*\n+import io.realm.log.LogLevel\n+import io.realm.log.RealmLog\n+import io.realm.mongodb.remote.RemoteCountOptions\n+import io.realm.util.blockingGetResult\n+import org.bson.Document\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import kotlin.test.assertEquals\n+import kotlin.test.assertNull\n+\n+@RunWith(AndroidJUnit4::class)\n+class RemoteMongoCollectionTest {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var user: RealmUser\n+    private lateinit var client: RemoteMongoClient\n+    private lateinit var database: RemoteMongoDatabase\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        RealmLog.setLevel(LogLevel.DEBUG)\n+        app = TestRealmApp()\n+        user = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+        client = user.getRemoteMongoClient(SERVICE_NAME)\n+        database = client.getDatabase(DATABASE_NAME)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        // FIXME: probably not the best way to \"reset\" the state\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            deleteMany(Document()).blockingGetResult()\n+        }\n+\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun insertMany() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)\n+            val doc1 = Document(rawDoc)\n+            val doc2 = Document(rawDoc)\n+            val doc3 = Document(rawDoc)\n+            val doc4 = Document(\"foo\", \"bar\")\n+            val manyDocuments = listOf(doc1, doc2, doc3, doc4)\n+\n+            insertMany(manyDocuments)\n+                    .blockingGetResult()\n+                    .let { assertEquals(manyDocuments.size, it!!.insertedIds.size) }\n+\n+            assertEquals(manyDocuments.size.toLong(), count().blockingGetResult())\n+            assertEquals(3, count(rawDoc).blockingGetResult())\n+            assertEquals(2, count(rawDoc, RemoteCountOptions().limit(2)).blockingGetResult())\n+            assertEquals(1, count(Document(\"foo\", \"bar\")).blockingGetResult())\n+            assertEquals(0, count(Document(\"bar\", \"foo\")).blockingGetResult())\n+        }\n+    }\n+\n+    @Test\n+    fun count() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)//.withId()\n+            val doc1 = Document(rawDoc)\n+//            val doc1withId = Document(rawDoc.withId())\n+            val doc2 = Document(rawDoc)\n+\n+            // FIXME: check feasibility of this assertion, otherwise, just make a plain insert\n+//            insertOne(doc1withId).blockingGetResult().let {\n+//                assertTrue(ObjectId.isValid(it!!.insertedId.toString()))\n+//                assertEquals(doc1withId[\"_id\"], it.insertedId)\n+//            }\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+            insertOne(doc2).blockingGetResult()\n+            assertEquals(2, count().blockingGetResult())\n+\n+            assertEquals(2, count(rawDoc).blockingGetResult())\n+            assertEquals(0, count(Document(\"foo\", \"bar\")).blockingGetResult())\n+            assertEquals(1, count(rawDoc, RemoteCountOptions().limit(1)).blockingGetResult())\n+\n+            // FIXME: investigate error handling for malformed payloads\n+//            assertFailsWith(ExecutionException::class) {\n+//                this.count(Document(\"\\$who\", 1)).blockingGetResult()\n+//                fail(\"Should not reach this!\")\n+//            }\n+        }\n+    }\n+\n+    @Test\n+    fun deleteOne() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)//.withId()\n+            val doc1 = Document(rawDoc)\n+\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+            assertEquals(1, deleteOne(doc1).blockingGetResult()!!.deletedCount)\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val doc1b = Document(rawDoc)\n+            val doc2 = Document(\"foo\", \"bar\")\n+            val doc3 = Document(\"42\", \"666\")\n+            insertMany(listOf(doc1, doc1b, doc2, doc3)).blockingGetResult()\n+            assertEquals(1, deleteOne(rawDoc).blockingGetResult()!!.deletedCount)\n+            assertEquals(1, deleteOne(Document()).blockingGetResult()!!.deletedCount)\n+        }\n+    }\n+\n+    @Test\n+    fun deleteMany() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)//.withId()\n+            val doc1 = Document(rawDoc)\n+\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+            assertEquals(1, deleteMany(doc1).blockingGetResult()!!.deletedCount)\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val doc1b = Document(rawDoc)\n+            val doc2 = Document(\"foo\", \"bar\")\n+            val doc3 = Document(\"42\", \"666\")\n+            insertMany(listOf(doc1, doc1b, doc2, doc3)).blockingGetResult()\n+            assertEquals(2, deleteMany(rawDoc).blockingGetResult()!!.deletedCount)                 // two docs will be deleted\n+            assertEquals(2, count().blockingGetResult())                                           // two docs still present\n+            assertEquals(2, deleteMany(Document()).blockingGetResult()!!.deletedCount)             // delete all\n+            assertEquals(0, count().blockingGetResult())\n+\n+            insertMany(listOf(doc1, doc1b, doc2, doc3)).blockingGetResult()\n+            assertEquals(4, deleteMany(Document()).blockingGetResult()!!.deletedCount)             // delete all\n+            assertEquals(0, count().blockingGetResult())\n+        }\n+    }\n+\n+    @Test\n+    fun findOne() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            val doc1 = Document(\"hello\", \"world1\")\n+            val doc2 = Document(\"hello\", \"world2\")\n+            val doc3 = Document(\"hello\", \"world3\")\n+\n+            // Test findOne() on empty collection with no filter and no options\n+            assertNull(findOne().blockingGetResult())\n+\n+            // Insert a document into the collection\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+\n+            // Test findOne() with no filter and no options\n+            assertEquals(doc1, findOne().blockingGetResult()!!.withoutId())\n+\n+            // Test findOne() with filter that does not match any documents and no options\n+            assertNull(findOne(Document(\"hello\", \"worldDNE\")).blockingGetResult())\n+\n+            // Insert 2 more documents into the collection\n+            insertMany(listOf(doc2, doc3)).blockingGetResult()\n+            assertEquals(3, count().blockingGetResult())\n+\n+            // FIXME: add these when all findOne methods are ready and the parser works\n+            // test findOne() with projection and sort options\n+//            val projection = Document(\"hello\", \"1\")\n+//            projection[\"_id\"] = 0\n+//            val options = RemoteFindOptions()\n+//                    .limit(2)\n+//                    .projection(projection)\n+//                    .sort(Document(\"hello\", \"1\"))\n+//            assertEquals(findOne(Document(), options).blockingGetResult(), doc1.withoutId())\n+\n+            // FIXME: adapt to our framework\n+//            val result3 = Tasks.await(coll.findOne(Document(), RemoteFindOptions()\n+//                    .limit(2)\n+//                    .projection(projection)\n+//                    .sort(Document(\"hello\", -1))))\n+//            Assert.assertEquals(result3, withoutId(doc3))\n+//\n+//            // test findOne() properly fails\n+//            try {\n+//                Tasks.await(coll.findOne(Document(\"\\$who\", 1)))\n+//                Assert.fail()\n+//            } catch (ex: ExecutionException) {\n+//                Assert.assertTrue(ex.cause is StitchServiceException)\n+//                val svcEx = ex.cause as StitchServiceException\n+//                assertEquals(StitchServiceErrorCode.MONGODB_ERROR, svcEx.errorCode)\n+//            }\n+        }\n+    }\n+\n+    // FIXME: more to come\n+\n+    private fun getCollectionInternal(collectionName: String, javaClass: Class<Document>? = null): RemoteMongoCollection<Document> {\n+        return when (javaClass) {\n+            null -> database.getCollection(collectionName)\n+            else -> database.getCollection(collectionName, javaClass)\n+        }\n+    }\n+\n+    private fun Document.withId(objectId: ObjectId? = null): Document {\n+        return apply { this[\"_id\"] = objectId ?: ObjectId() }\n+    }\n+\n+    private fun Document.withoutId(): Document {\n+        return apply { remove(\"_id\") }\n+    }\n+\n+    private companion object {", "originalCommit": "1b443d7a877a5f6d5e09605235d50be9e34dd9d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA1ODY4Mw==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425058683", "bodyText": "True, and that's how I would normally do it for Java classes, but I am following Kotlin's style guide on companion objects: https://kotlinlang.org/docs/reference/coding-conventions.html#source-code-organization", "author": "edualonso", "createdAt": "2020-05-14T11:15:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4OTAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA2MDc5MA==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425060790", "bodyText": "Fair enough. I wonder if we should have these in companion objects in that case or if it would make sense to convert them to const vals at the top of the file?", "author": "cmelchior", "createdAt": "2020-05-14T11:18:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4OTAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3ODA3NA==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425078074", "bodyText": "The rule is companion objects should be used if the constants declared in them are class-scoped, and top-level constants should be used if they have a wider scope. I could see some of these might be used in the future elsewhere outside this test, but for now, they belong in this test. This could easily piggyback on using base classes for certain tests and such.", "author": "edualonso", "createdAt": "2020-05-14T11:52:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4OTAxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MTA5MA==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r424891090", "bodyText": "This seems to be a test for RemoteCountOptions instead of insertMany, so I would probably move this to its own test.", "author": "cmelchior", "createdAt": "2020-05-14T06:09:32Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/RemoteMongoCollectionTest.kt", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.mongodb\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.*\n+import io.realm.log.LogLevel\n+import io.realm.log.RealmLog\n+import io.realm.mongodb.remote.RemoteCountOptions\n+import io.realm.util.blockingGetResult\n+import org.bson.Document\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import kotlin.test.assertEquals\n+import kotlin.test.assertNull\n+\n+@RunWith(AndroidJUnit4::class)\n+class RemoteMongoCollectionTest {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var user: RealmUser\n+    private lateinit var client: RemoteMongoClient\n+    private lateinit var database: RemoteMongoDatabase\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        RealmLog.setLevel(LogLevel.DEBUG)\n+        app = TestRealmApp()\n+        user = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+        client = user.getRemoteMongoClient(SERVICE_NAME)\n+        database = client.getDatabase(DATABASE_NAME)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        // FIXME: probably not the best way to \"reset\" the state\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            deleteMany(Document()).blockingGetResult()\n+        }\n+\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun insertMany() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)\n+            val doc1 = Document(rawDoc)\n+            val doc2 = Document(rawDoc)\n+            val doc3 = Document(rawDoc)\n+            val doc4 = Document(\"foo\", \"bar\")\n+            val manyDocuments = listOf(doc1, doc2, doc3, doc4)\n+\n+            insertMany(manyDocuments)\n+                    .blockingGetResult()\n+                    .let { assertEquals(manyDocuments.size, it!!.insertedIds.size) }\n+\n+            assertEquals(manyDocuments.size.toLong(), count().blockingGetResult())\n+            assertEquals(3, count(rawDoc).blockingGetResult())\n+            assertEquals(2, count(rawDoc, RemoteCountOptions().limit(2)).blockingGetResult())", "originalCommit": "1b443d7a877a5f6d5e09605235d50be9e34dd9d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA2OTkzMg==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425069932", "bodyText": "I think the best options is to do it as a part of testing count - see comment below.", "author": "edualonso", "createdAt": "2020-05-14T11:37:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MTA5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MTMyNw==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r424891327", "bodyText": "I'm missing tests for error scenarios, not 100% sure which ones exist, but we should not only test the happy path. This is true for most of the tests in this class.", "author": "cmelchior", "createdAt": "2020-05-14T06:10:11Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/RemoteMongoCollectionTest.kt", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.mongodb\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.*\n+import io.realm.log.LogLevel\n+import io.realm.log.RealmLog\n+import io.realm.mongodb.remote.RemoteCountOptions\n+import io.realm.util.blockingGetResult\n+import org.bson.Document\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import kotlin.test.assertEquals\n+import kotlin.test.assertNull\n+\n+@RunWith(AndroidJUnit4::class)\n+class RemoteMongoCollectionTest {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var user: RealmUser\n+    private lateinit var client: RemoteMongoClient\n+    private lateinit var database: RemoteMongoDatabase\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        RealmLog.setLevel(LogLevel.DEBUG)\n+        app = TestRealmApp()\n+        user = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+        client = user.getRemoteMongoClient(SERVICE_NAME)\n+        database = client.getDatabase(DATABASE_NAME)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        // FIXME: probably not the best way to \"reset\" the state\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            deleteMany(Document()).blockingGetResult()\n+        }\n+\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun insertMany() {", "originalCommit": "1b443d7a877a5f6d5e09605235d50be9e34dd9d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA2MDg2OQ==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425060869", "bodyText": "Yeah, this is the first iteration. It has been a bit hard to produce exception scenarios given that the parser isn't 100% ready yet. Also, my approach to this is to port the existing tests on collections from the Stitch SDK. I guess it will be clearer once the parser is fully fixed.", "author": "edualonso", "createdAt": "2020-05-14T11:19:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MTMyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MTc0OA==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r424891748", "bodyText": "Same as before. Not sure this test belongs here.", "author": "cmelchior", "createdAt": "2020-05-14T06:11:21Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/RemoteMongoCollectionTest.kt", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.mongodb\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.*\n+import io.realm.log.LogLevel\n+import io.realm.log.RealmLog\n+import io.realm.mongodb.remote.RemoteCountOptions\n+import io.realm.util.blockingGetResult\n+import org.bson.Document\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import kotlin.test.assertEquals\n+import kotlin.test.assertNull\n+\n+@RunWith(AndroidJUnit4::class)\n+class RemoteMongoCollectionTest {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var user: RealmUser\n+    private lateinit var client: RemoteMongoClient\n+    private lateinit var database: RemoteMongoDatabase\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        RealmLog.setLevel(LogLevel.DEBUG)\n+        app = TestRealmApp()\n+        user = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+        client = user.getRemoteMongoClient(SERVICE_NAME)\n+        database = client.getDatabase(DATABASE_NAME)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        // FIXME: probably not the best way to \"reset\" the state\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            deleteMany(Document()).blockingGetResult()\n+        }\n+\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun insertMany() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)\n+            val doc1 = Document(rawDoc)\n+            val doc2 = Document(rawDoc)\n+            val doc3 = Document(rawDoc)\n+            val doc4 = Document(\"foo\", \"bar\")\n+            val manyDocuments = listOf(doc1, doc2, doc3, doc4)\n+\n+            insertMany(manyDocuments)\n+                    .blockingGetResult()\n+                    .let { assertEquals(manyDocuments.size, it!!.insertedIds.size) }\n+\n+            assertEquals(manyDocuments.size.toLong(), count().blockingGetResult())\n+            assertEquals(3, count(rawDoc).blockingGetResult())\n+            assertEquals(2, count(rawDoc, RemoteCountOptions().limit(2)).blockingGetResult())\n+            assertEquals(1, count(Document(\"foo\", \"bar\")).blockingGetResult())\n+            assertEquals(0, count(Document(\"bar\", \"foo\")).blockingGetResult())\n+        }\n+    }\n+\n+    @Test\n+    fun count() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)//.withId()\n+            val doc1 = Document(rawDoc)\n+//            val doc1withId = Document(rawDoc.withId())\n+            val doc2 = Document(rawDoc)\n+\n+            // FIXME: check feasibility of this assertion, otherwise, just make a plain insert\n+//            insertOne(doc1withId).blockingGetResult().let {\n+//                assertTrue(ObjectId.isValid(it!!.insertedId.toString()))\n+//                assertEquals(doc1withId[\"_id\"], it.insertedId)\n+//            }\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+            insertOne(doc2).blockingGetResult()\n+            assertEquals(2, count().blockingGetResult())\n+\n+            assertEquals(2, count(rawDoc).blockingGetResult())\n+            assertEquals(0, count(Document(\"foo\", \"bar\")).blockingGetResult())\n+            assertEquals(1, count(rawDoc, RemoteCountOptions().limit(1)).blockingGetResult())", "originalCommit": "1b443d7a877a5f6d5e09605235d50be9e34dd9d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA2NDc0Ng==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425064746", "bodyText": "Here it's more a question on perspective. They are an optional parameter in a count operation, so given that I'm testing count, I thought I should also test that count works fine given some options.", "author": "edualonso", "createdAt": "2020-05-14T11:26:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MTc0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA2NTQyMQ==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425065421", "bodyText": "Ah yeah, sorry. You are right. Here it makes sense", "author": "cmelchior", "createdAt": "2020-05-14T11:28:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MTc0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MjA3OQ==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r424892079", "bodyText": "I would split this into two tests deleteOne_singleDocument and deleteOne_listOfDocuments", "author": "cmelchior", "createdAt": "2020-05-14T06:12:21Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/RemoteMongoCollectionTest.kt", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.mongodb\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.*\n+import io.realm.log.LogLevel\n+import io.realm.log.RealmLog\n+import io.realm.mongodb.remote.RemoteCountOptions\n+import io.realm.util.blockingGetResult\n+import org.bson.Document\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import kotlin.test.assertEquals\n+import kotlin.test.assertNull\n+\n+@RunWith(AndroidJUnit4::class)\n+class RemoteMongoCollectionTest {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var user: RealmUser\n+    private lateinit var client: RemoteMongoClient\n+    private lateinit var database: RemoteMongoDatabase\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        RealmLog.setLevel(LogLevel.DEBUG)\n+        app = TestRealmApp()\n+        user = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+        client = user.getRemoteMongoClient(SERVICE_NAME)\n+        database = client.getDatabase(DATABASE_NAME)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        // FIXME: probably not the best way to \"reset\" the state\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            deleteMany(Document()).blockingGetResult()\n+        }\n+\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun insertMany() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)\n+            val doc1 = Document(rawDoc)\n+            val doc2 = Document(rawDoc)\n+            val doc3 = Document(rawDoc)\n+            val doc4 = Document(\"foo\", \"bar\")\n+            val manyDocuments = listOf(doc1, doc2, doc3, doc4)\n+\n+            insertMany(manyDocuments)\n+                    .blockingGetResult()\n+                    .let { assertEquals(manyDocuments.size, it!!.insertedIds.size) }\n+\n+            assertEquals(manyDocuments.size.toLong(), count().blockingGetResult())\n+            assertEquals(3, count(rawDoc).blockingGetResult())\n+            assertEquals(2, count(rawDoc, RemoteCountOptions().limit(2)).blockingGetResult())\n+            assertEquals(1, count(Document(\"foo\", \"bar\")).blockingGetResult())\n+            assertEquals(0, count(Document(\"bar\", \"foo\")).blockingGetResult())\n+        }\n+    }\n+\n+    @Test\n+    fun count() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)//.withId()\n+            val doc1 = Document(rawDoc)\n+//            val doc1withId = Document(rawDoc.withId())\n+            val doc2 = Document(rawDoc)\n+\n+            // FIXME: check feasibility of this assertion, otherwise, just make a plain insert\n+//            insertOne(doc1withId).blockingGetResult().let {\n+//                assertTrue(ObjectId.isValid(it!!.insertedId.toString()))\n+//                assertEquals(doc1withId[\"_id\"], it.insertedId)\n+//            }\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+            insertOne(doc2).blockingGetResult()\n+            assertEquals(2, count().blockingGetResult())\n+\n+            assertEquals(2, count(rawDoc).blockingGetResult())\n+            assertEquals(0, count(Document(\"foo\", \"bar\")).blockingGetResult())\n+            assertEquals(1, count(rawDoc, RemoteCountOptions().limit(1)).blockingGetResult())\n+\n+            // FIXME: investigate error handling for malformed payloads\n+//            assertFailsWith(ExecutionException::class) {\n+//                this.count(Document(\"\\$who\", 1)).blockingGetResult()\n+//                fail(\"Should not reach this!\")\n+//            }\n+        }\n+    }\n+\n+    @Test\n+    fun deleteOne() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)//.withId()\n+            val doc1 = Document(rawDoc)\n+\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+            assertEquals(1, deleteOne(doc1).blockingGetResult()!!.deletedCount)\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val doc1b = Document(rawDoc)", "originalCommit": "1b443d7a877a5f6d5e09605235d50be9e34dd9d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MjM1OQ==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r424892359", "bodyText": "I need to get more used to reading Kotlin. Had to think a bit about what with did, but using it is fine I think \ud83d\udc4d", "author": "cmelchior", "createdAt": "2020-05-14T06:13:07Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/RemoteMongoCollectionTest.kt", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.mongodb\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.*\n+import io.realm.log.LogLevel\n+import io.realm.log.RealmLog\n+import io.realm.mongodb.remote.RemoteCountOptions\n+import io.realm.util.blockingGetResult\n+import org.bson.Document\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import kotlin.test.assertEquals\n+import kotlin.test.assertNull\n+\n+@RunWith(AndroidJUnit4::class)\n+class RemoteMongoCollectionTest {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var user: RealmUser\n+    private lateinit var client: RemoteMongoClient\n+    private lateinit var database: RemoteMongoDatabase\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        RealmLog.setLevel(LogLevel.DEBUG)\n+        app = TestRealmApp()\n+        user = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+        client = user.getRemoteMongoClient(SERVICE_NAME)\n+        database = client.getDatabase(DATABASE_NAME)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        // FIXME: probably not the best way to \"reset\" the state\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            deleteMany(Document()).blockingGetResult()\n+        }\n+\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun insertMany() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {", "originalCommit": "1b443d7a877a5f6d5e09605235d50be9e34dd9d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5Mjc1MQ==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r424892751", "bodyText": "Same as above. Would split into multiple tests.", "author": "cmelchior", "createdAt": "2020-05-14T06:14:15Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/RemoteMongoCollectionTest.kt", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.mongodb\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.*\n+import io.realm.log.LogLevel\n+import io.realm.log.RealmLog\n+import io.realm.mongodb.remote.RemoteCountOptions\n+import io.realm.util.blockingGetResult\n+import org.bson.Document\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import kotlin.test.assertEquals\n+import kotlin.test.assertNull\n+\n+@RunWith(AndroidJUnit4::class)\n+class RemoteMongoCollectionTest {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var user: RealmUser\n+    private lateinit var client: RemoteMongoClient\n+    private lateinit var database: RemoteMongoDatabase\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        RealmLog.setLevel(LogLevel.DEBUG)\n+        app = TestRealmApp()\n+        user = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+        client = user.getRemoteMongoClient(SERVICE_NAME)\n+        database = client.getDatabase(DATABASE_NAME)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        // FIXME: probably not the best way to \"reset\" the state\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            deleteMany(Document()).blockingGetResult()\n+        }\n+\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun insertMany() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)\n+            val doc1 = Document(rawDoc)\n+            val doc2 = Document(rawDoc)\n+            val doc3 = Document(rawDoc)\n+            val doc4 = Document(\"foo\", \"bar\")\n+            val manyDocuments = listOf(doc1, doc2, doc3, doc4)\n+\n+            insertMany(manyDocuments)\n+                    .blockingGetResult()\n+                    .let { assertEquals(manyDocuments.size, it!!.insertedIds.size) }\n+\n+            assertEquals(manyDocuments.size.toLong(), count().blockingGetResult())\n+            assertEquals(3, count(rawDoc).blockingGetResult())\n+            assertEquals(2, count(rawDoc, RemoteCountOptions().limit(2)).blockingGetResult())\n+            assertEquals(1, count(Document(\"foo\", \"bar\")).blockingGetResult())\n+            assertEquals(0, count(Document(\"bar\", \"foo\")).blockingGetResult())\n+        }\n+    }\n+\n+    @Test\n+    fun count() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)//.withId()\n+            val doc1 = Document(rawDoc)\n+//            val doc1withId = Document(rawDoc.withId())\n+            val doc2 = Document(rawDoc)\n+\n+            // FIXME: check feasibility of this assertion, otherwise, just make a plain insert\n+//            insertOne(doc1withId).blockingGetResult().let {\n+//                assertTrue(ObjectId.isValid(it!!.insertedId.toString()))\n+//                assertEquals(doc1withId[\"_id\"], it.insertedId)\n+//            }\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+            insertOne(doc2).blockingGetResult()\n+            assertEquals(2, count().blockingGetResult())\n+\n+            assertEquals(2, count(rawDoc).blockingGetResult())\n+            assertEquals(0, count(Document(\"foo\", \"bar\")).blockingGetResult())\n+            assertEquals(1, count(rawDoc, RemoteCountOptions().limit(1)).blockingGetResult())\n+\n+            // FIXME: investigate error handling for malformed payloads\n+//            assertFailsWith(ExecutionException::class) {\n+//                this.count(Document(\"\\$who\", 1)).blockingGetResult()\n+//                fail(\"Should not reach this!\")\n+//            }\n+        }\n+    }\n+\n+    @Test\n+    fun deleteOne() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)//.withId()\n+            val doc1 = Document(rawDoc)\n+\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+            assertEquals(1, deleteOne(doc1).blockingGetResult()!!.deletedCount)\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val doc1b = Document(rawDoc)\n+            val doc2 = Document(\"foo\", \"bar\")\n+            val doc3 = Document(\"42\", \"666\")\n+            insertMany(listOf(doc1, doc1b, doc2, doc3)).blockingGetResult()\n+            assertEquals(1, deleteOne(rawDoc).blockingGetResult()!!.deletedCount)\n+            assertEquals(1, deleteOne(Document()).blockingGetResult()!!.deletedCount)\n+        }\n+    }\n+\n+    @Test\n+    fun deleteMany() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)//.withId()\n+            val doc1 = Document(rawDoc)\n+\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+            assertEquals(1, deleteMany(doc1).blockingGetResult()!!.deletedCount)\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val doc1b = Document(rawDoc)\n+            val doc2 = Document(\"foo\", \"bar\")\n+            val doc3 = Document(\"42\", \"666\")\n+            insertMany(listOf(doc1, doc1b, doc2, doc3)).blockingGetResult()\n+            assertEquals(2, deleteMany(rawDoc).blockingGetResult()!!.deletedCount)                 // two docs will be deleted\n+            assertEquals(2, count().blockingGetResult())                                           // two docs still present\n+            assertEquals(2, deleteMany(Document()).blockingGetResult()!!.deletedCount)             // delete all\n+            assertEquals(0, count().blockingGetResult())\n+\n+            insertMany(listOf(doc1, doc1b, doc2, doc3)).blockingGetResult()", "originalCommit": "1b443d7a877a5f6d5e09605235d50be9e34dd9d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MzQxOA==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r424893418", "bodyText": "Generally, a unit test should only test one aspect. This test seems to test at least 5...Sometimes we do combine multiple behaviors into the same test if there is a lot of overhead in setting up a test, but I'm not sure this is one of them.", "author": "cmelchior", "createdAt": "2020-05-14T06:15:58Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/RemoteMongoCollectionTest.kt", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.mongodb\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.*\n+import io.realm.log.LogLevel\n+import io.realm.log.RealmLog\n+import io.realm.mongodb.remote.RemoteCountOptions\n+import io.realm.util.blockingGetResult\n+import org.bson.Document\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import kotlin.test.assertEquals\n+import kotlin.test.assertNull\n+\n+@RunWith(AndroidJUnit4::class)\n+class RemoteMongoCollectionTest {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var user: RealmUser\n+    private lateinit var client: RemoteMongoClient\n+    private lateinit var database: RemoteMongoDatabase\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        RealmLog.setLevel(LogLevel.DEBUG)\n+        app = TestRealmApp()\n+        user = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+        client = user.getRemoteMongoClient(SERVICE_NAME)\n+        database = client.getDatabase(DATABASE_NAME)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        // FIXME: probably not the best way to \"reset\" the state\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            deleteMany(Document()).blockingGetResult()\n+        }\n+\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun insertMany() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)\n+            val doc1 = Document(rawDoc)\n+            val doc2 = Document(rawDoc)\n+            val doc3 = Document(rawDoc)\n+            val doc4 = Document(\"foo\", \"bar\")\n+            val manyDocuments = listOf(doc1, doc2, doc3, doc4)\n+\n+            insertMany(manyDocuments)\n+                    .blockingGetResult()\n+                    .let { assertEquals(manyDocuments.size, it!!.insertedIds.size) }\n+\n+            assertEquals(manyDocuments.size.toLong(), count().blockingGetResult())\n+            assertEquals(3, count(rawDoc).blockingGetResult())\n+            assertEquals(2, count(rawDoc, RemoteCountOptions().limit(2)).blockingGetResult())\n+            assertEquals(1, count(Document(\"foo\", \"bar\")).blockingGetResult())\n+            assertEquals(0, count(Document(\"bar\", \"foo\")).blockingGetResult())\n+        }\n+    }\n+\n+    @Test\n+    fun count() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)//.withId()\n+            val doc1 = Document(rawDoc)\n+//            val doc1withId = Document(rawDoc.withId())\n+            val doc2 = Document(rawDoc)\n+\n+            // FIXME: check feasibility of this assertion, otherwise, just make a plain insert\n+//            insertOne(doc1withId).blockingGetResult().let {\n+//                assertTrue(ObjectId.isValid(it!!.insertedId.toString()))\n+//                assertEquals(doc1withId[\"_id\"], it.insertedId)\n+//            }\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+            insertOne(doc2).blockingGetResult()\n+            assertEquals(2, count().blockingGetResult())\n+\n+            assertEquals(2, count(rawDoc).blockingGetResult())\n+            assertEquals(0, count(Document(\"foo\", \"bar\")).blockingGetResult())\n+            assertEquals(1, count(rawDoc, RemoteCountOptions().limit(1)).blockingGetResult())\n+\n+            // FIXME: investigate error handling for malformed payloads\n+//            assertFailsWith(ExecutionException::class) {\n+//                this.count(Document(\"\\$who\", 1)).blockingGetResult()\n+//                fail(\"Should not reach this!\")\n+//            }\n+        }\n+    }\n+\n+    @Test\n+    fun deleteOne() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)//.withId()\n+            val doc1 = Document(rawDoc)\n+\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+            assertEquals(1, deleteOne(doc1).blockingGetResult()!!.deletedCount)\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val doc1b = Document(rawDoc)\n+            val doc2 = Document(\"foo\", \"bar\")\n+            val doc3 = Document(\"42\", \"666\")\n+            insertMany(listOf(doc1, doc1b, doc2, doc3)).blockingGetResult()\n+            assertEquals(1, deleteOne(rawDoc).blockingGetResult()!!.deletedCount)\n+            assertEquals(1, deleteOne(Document()).blockingGetResult()!!.deletedCount)\n+        }\n+    }\n+\n+    @Test\n+    fun deleteMany() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)//.withId()\n+            val doc1 = Document(rawDoc)\n+\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+            assertEquals(1, deleteMany(doc1).blockingGetResult()!!.deletedCount)\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val doc1b = Document(rawDoc)\n+            val doc2 = Document(\"foo\", \"bar\")\n+            val doc3 = Document(\"42\", \"666\")\n+            insertMany(listOf(doc1, doc1b, doc2, doc3)).blockingGetResult()\n+            assertEquals(2, deleteMany(rawDoc).blockingGetResult()!!.deletedCount)                 // two docs will be deleted\n+            assertEquals(2, count().blockingGetResult())                                           // two docs still present\n+            assertEquals(2, deleteMany(Document()).blockingGetResult()!!.deletedCount)             // delete all\n+            assertEquals(0, count().blockingGetResult())\n+\n+            insertMany(listOf(doc1, doc1b, doc2, doc3)).blockingGetResult()\n+            assertEquals(4, deleteMany(Document()).blockingGetResult()!!.deletedCount)             // delete all\n+            assertEquals(0, count().blockingGetResult())\n+        }\n+    }\n+\n+    @Test\n+    fun findOne() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            val doc1 = Document(\"hello\", \"world1\")\n+            val doc2 = Document(\"hello\", \"world2\")\n+            val doc3 = Document(\"hello\", \"world3\")\n+\n+            // Test findOne() on empty collection with no filter and no options", "originalCommit": "1b443d7a877a5f6d5e09605235d50be9e34dd9d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5NDI0Ng==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r424894246", "bodyText": "We should probably find a common pattern for how to implement extension methods for classes. Personally I'm in favor of using <ClassName>Ext so TaskExt.kt. We have done that elsewhere. But I don't have strong preferences, so if you or @rorbech feels strongly about a specific approach we should probably align on it.", "author": "cmelchior", "createdAt": "2020-05-14T06:18:23Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/util/TaskUtils.kt", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.util\n+\n+import com.google.android.gms.tasks.Task\n+import java.util.concurrent.CountDownLatch\n+\n+/**\n+ * Returns the result of a [Task] in a synchronous way or will throw an exception if a failure is\n+ * detected. This operation blocks the thread on which it is called.\n+ *\n+ * @return the [T] result emitted by the task\n+ */\n+fun <T> Task<T>.blockingGetResult(): T? {", "originalCommit": "1b443d7a877a5f6d5e09605235d50be9e34dd9d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3ODQ4MA==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425078480", "bodyText": "I think it's a fair point. I will change the file name.", "author": "edualonso", "createdAt": "2020-05-14T11:53:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5NDI0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3OTgyOQ==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425079829", "bodyText": "Also, just noticed this implementation might be moot. There is a Task.await method in the GMS library, which does basically this, although it wraps any possible exceptions inside ExecutionException. Whatever it is, I still think having a handy extension function is better than writing Task.await(myTask) every time.", "author": "edualonso", "createdAt": "2020-05-14T11:56:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5NDI0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5NDkzOQ==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r424894939", "bodyText": "Great that you are testing the extension method specifically. Normally we don't have unit tests of internal helper methods as we assume they are being tested by the tests actually using them. But if you think it is valuable enough to have this, we can just keep it.", "author": "cmelchior", "createdAt": "2020-05-14T06:20:18Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/util/TaskUtilsKtTest.kt", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.util\n+\n+import io.realm.internal.common.TaskDispatcher\n+import org.junit.Test\n+import kotlin.test.assertEquals\n+import kotlin.test.assertFailsWith\n+import kotlin.test.assertNull\n+import kotlin.test.fail\n+\n+class TaskUtilsKtTest {", "originalCommit": "1b443d7a877a5f6d5e09605235d50be9e34dd9d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4MDk5OQ==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425080999", "bodyText": "I thought it would be nice to do it as it's using the task dispatching framework from Stitch internally.", "author": "edualonso", "createdAt": "2020-05-14T11:58:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5NDkzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5NTk0MA==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r424895940", "bodyText": "Does this also works if object_id is none (i.e. no value)?", "author": "cmelchior", "createdAt": "2020-05-14T06:22:52Z", "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoCollection.cpp", "diffHunk": "@@ -33,13 +33,36 @@\n \n using namespace realm;\n using namespace realm::app;\n+using namespace realm::bson;\n using namespace realm::jni_util;\n using namespace realm::_impl;\n \n-static std::function<jobject(JNIEnv*, uint64_t)> collection_mapper = [](JNIEnv* env, uint64_t result) {\n+// This mapper works for both count and delete operations\n+static std::function<jobject(JNIEnv*, uint64_t)> collection_mapper_count = [](JNIEnv* env, uint64_t result) {\n     return JavaClassGlobalDef::new_long(env, result);\n };\n \n+static std::function<jobject(JNIEnv*, util::Optional<bson::BsonDocument>)> collection_mapper_find_one = [](JNIEnv* env, util::Optional<bson::BsonDocument> document) {\n+    return document ? JniBsonProtocol::bson_to_jstring(env, *document) : NULL;\n+};\n+\n+static std::function<jobject(JNIEnv*, util::Optional<ObjectId>)> collection_mapper_insert_one = [](JNIEnv* env, util::Optional<ObjectId> object_id) {\n+    return JavaClassGlobalDef::new_object_id(env, object_id.value());", "originalCommit": "1b443d7a877a5f6d5e09605235d50be9e34dd9d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE1MTA1OA==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425151058", "bodyText": "Though technically possible, I doubt we can ever reach it. I'm guessing the only way object_id has no value is because there has been an error inserting the Bson, in which case the error callback will be triggered, e.g. inserting the same document with the same ID twice. I will make it throw an exception from here just in case:\n    if (object_id) {\n        return JavaClassGlobalDef::new_object_id(env, object_id.value());\n    }\n    throw util::invalid_argument(\"Error in 'insert_one', parameter 'object_id' has no value.\");", "author": "edualonso", "createdAt": "2020-05-14T13:48:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5NTk0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI1MzA5NQ==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425253095", "bodyText": "Fixed using suggestion from the comment below.", "author": "edualonso", "createdAt": "2020-05-14T16:03:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5NTk0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5Njg4NA==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r424896884", "bodyText": "Nitpick...normally we would use auto collection here since the type is inside the reinterpret_cast ... just like Kotlin val name = Type(). Both here and in a lot of other places", "author": "cmelchior", "createdAt": "2020-05-14T06:25:28Z", "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoCollection.cpp", "diffHunk": "@@ -58,9 +81,110 @@ Java_io_realm_internal_objectstore_OsRemoteMongoCollection_nativeCount(JNIEnv* e\n                                                                        jobject j_callback) {\n     try {\n         RemoteMongoCollection* collection = reinterpret_cast<RemoteMongoCollection*>(j_collection_ptr);\n-        bson::BsonDocument filter(JniBsonProtocol::jstring_to_bson(env, j_filter));\n+        bson::BsonDocument bson_filter(JniBsonProtocol::jstring_to_bson(env, j_filter));\n         uint64_t limit = std::uint64_t(j_limit);\n-        collection->count(filter, limit, JavaNetworkTransport::create_result_callback(env, j_callback, collection_mapper));\n+        collection->count(bson_filter, limit, JavaNetworkTransport::create_result_callback(env, j_callback, collection_mapper_count));\n+    }\n+    CATCH_STD()\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_io_realm_internal_objectstore_OsRemoteMongoCollection_nativeFindOne(JNIEnv* env,\n+                                                                         jclass,\n+                                                                         jlong j_collection_ptr,\n+                                                                         jstring j_document,\n+                                                                         jobject j_callback) {\n+    try {\n+        RemoteMongoCollection* collection = reinterpret_cast<RemoteMongoCollection*>(j_collection_ptr);", "originalCommit": "1b443d7a877a5f6d5e09605235d50be9e34dd9d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk0MTgwMw==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r424941803", "bodyText": "Looks like this can be fixed now?", "author": "cmelchior", "createdAt": "2020-05-14T07:58:11Z", "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoCollection.cpp", "diffHunk": "@@ -58,9 +81,110 @@ Java_io_realm_internal_objectstore_OsRemoteMongoCollection_nativeCount(JNIEnv* e\n                                                                        jobject j_callback) {\n     try {\n         RemoteMongoCollection* collection = reinterpret_cast<RemoteMongoCollection*>(j_collection_ptr);\n-        bson::BsonDocument filter(JniBsonProtocol::jstring_to_bson(env, j_filter));\n+        bson::BsonDocument bson_filter(JniBsonProtocol::jstring_to_bson(env, j_filter));\n         uint64_t limit = std::uint64_t(j_limit);\n-        collection->count(filter, limit, JavaNetworkTransport::create_result_callback(env, j_callback, collection_mapper));\n+        collection->count(bson_filter, limit, JavaNetworkTransport::create_result_callback(env, j_callback, collection_mapper_count));\n+    }\n+    CATCH_STD()\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_io_realm_internal_objectstore_OsRemoteMongoCollection_nativeFindOne(JNIEnv* env,\n+                                                                         jclass,\n+                                                                         jlong j_collection_ptr,\n+                                                                         jstring j_document,\n+                                                                         jobject j_callback) {\n+    try {\n+        RemoteMongoCollection* collection = reinterpret_cast<RemoteMongoCollection*>(j_collection_ptr);\n+        bson::BsonDocument bson_filter(JniBsonProtocol::jstring_to_bson(env, j_document));\n+        collection->find_one(bson_filter, JavaNetworkTransport::create_result_callback(env, j_callback, collection_mapper_find_one));\n+    }\n+    CATCH_STD()\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_io_realm_internal_objectstore_OsRemoteMongoCollection_nativeFindOneWithOptions(JNIEnv* env,\n+                                                                         jclass,\n+                                                                         jlong j_collection_ptr,\n+                                                                         jstring j_filter,\n+                                                                         jstring j_projection,\n+                                                                         jstring j_sort,\n+                                                                         jlong j_limit,\n+                                                                         jobject j_callback) {\n+    try {\n+        RemoteMongoCollection* collection = reinterpret_cast<RemoteMongoCollection*>(j_collection_ptr);\n+        uint64_t limit = std::uint64_t(j_limit);\n+\n+        // FIXME: remove redundant variables", "originalCommit": "46eaaa91a8b4c8f07972e489c0904f199cc1401e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk0NDU1Ng==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r424944556", "bodyText": "I would suggest moving this to io.realm.internal.network. It would make it more clear what the class is used for. The name ResultHandler is very generic when living directly in io.realm.internal", "author": "cmelchior", "createdAt": "2020-05-14T08:02:53Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/ResultHandler.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.internal;", "originalCommit": "46eaaa91a8b4c8f07972e489c0904f199cc1401e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk0NzU5MQ==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r424947591", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String filterString = filter == null ?\n          \n          \n            \n                    String filterString = (filter == null) ?", "author": "cmelchior", "createdAt": "2020-05-14T08:08:23Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoCollection.java", "diffHunk": "@@ -38,12 +65,231 @@ public long getNativeFinalizerPtr() {\n         return nativeFinalizerPtr;\n     }\n \n-    public void count(String filter) {\n-        throw new UnsupportedOperationException(\"Not Implemented\");\n+    public Long count() {\n+        return count(null);\n+    }\n+\n+    public Long count(@Nullable final Bson filter) {\n+        return count(filter, null);\n+    }\n+\n+    public Long count(@Nullable final Bson filter, @Nullable final RemoteCountOptions options) {\n+        AtomicReference<Long> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        OsJNIResultCallback<Long> callback = new OsJNIResultCallback<Long>(success, error) {\n+            @Override\n+            protected Long mapSuccess(Object result) {\n+                return (Long) result;\n+            }\n+        };\n+\n+        // no filter means count all\n+        String filterString = filter == null ?", "originalCommit": "46eaaa91a8b4c8f07972e489c0904f199cc1401e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk0Nzc2Mg==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r424947762", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int limit = options == null ? 0 : options.getLimit();\n          \n          \n            \n                    int limit = (options == null) ? 0 : options.getLimit();", "author": "cmelchior", "createdAt": "2020-05-14T08:08:42Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoCollection.java", "diffHunk": "@@ -38,12 +65,231 @@ public long getNativeFinalizerPtr() {\n         return nativeFinalizerPtr;\n     }\n \n-    public void count(String filter) {\n-        throw new UnsupportedOperationException(\"Not Implemented\");\n+    public Long count() {\n+        return count(null);\n+    }\n+\n+    public Long count(@Nullable final Bson filter) {\n+        return count(filter, null);\n+    }\n+\n+    public Long count(@Nullable final Bson filter, @Nullable final RemoteCountOptions options) {\n+        AtomicReference<Long> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        OsJNIResultCallback<Long> callback = new OsJNIResultCallback<Long>(success, error) {\n+            @Override\n+            protected Long mapSuccess(Object result) {\n+                return (Long) result;\n+            }\n+        };\n+\n+        // no filter means count all\n+        String filterString = filter == null ?\n+                JniBsonProtocol.encode(new Document(), codecRegistry) :\n+                JniBsonProtocol.encode(filter, codecRegistry);\n+        int limit = options == null ? 0 : options.getLimit();", "originalCommit": "46eaaa91a8b4c8f07972e489c0904f199cc1401e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk0ODI1OA==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r424948258", "bodyText": "This looks wrong? DocumentT can be any type, so what ensures this cast is correct?", "author": "cmelchior", "createdAt": "2020-05-14T08:09:36Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoCollection.java", "diffHunk": "@@ -38,12 +65,231 @@ public long getNativeFinalizerPtr() {\n         return nativeFinalizerPtr;\n     }\n \n-    public void count(String filter) {\n-        throw new UnsupportedOperationException(\"Not Implemented\");\n+    public Long count() {\n+        return count(null);\n+    }\n+\n+    public Long count(@Nullable final Bson filter) {\n+        return count(filter, null);\n+    }\n+\n+    public Long count(@Nullable final Bson filter, @Nullable final RemoteCountOptions options) {\n+        AtomicReference<Long> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        OsJNIResultCallback<Long> callback = new OsJNIResultCallback<Long>(success, error) {\n+            @Override\n+            protected Long mapSuccess(Object result) {\n+                return (Long) result;\n+            }\n+        };\n+\n+        // no filter means count all\n+        String filterString = filter == null ?\n+                JniBsonProtocol.encode(new Document(), codecRegistry) :\n+                JniBsonProtocol.encode(filter, codecRegistry);\n+        int limit = options == null ? 0 : options.getLimit();\n+\n+        nativeCount(nativePtr, filterString, limit, callback);\n+\n+        return ResultHandler.handleResult(success, error);\n+    }\n+\n+    public DocumentT findOne() {\n+        return findOne(new Document());\n+    }\n+\n+    public <ResultT> ResultT findOne(final Class<ResultT> resultClass) {\n+        AtomicReference<ResultT> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        OsJNIResultCallback<ResultT> callback = new OsJNIResultCallback<ResultT>(success, error) {\n+            @Override\n+            protected ResultT mapSuccess(Object result) {\n+                return (ResultT) findOneSuccessMapper(result, resultClass);\n+            }\n+        };\n+\n+        nativeFindOne(nativePtr, JniBsonProtocol.encode(new Document(), codecRegistry), callback);\n+\n+        return ResultHandler.handleResult(success, error);\n+    }\n+\n+    public DocumentT findOne(final Bson filter) {\n+        AtomicReference<DocumentT> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        OsJNIResultCallback<DocumentT> callback = new OsJNIResultCallback<DocumentT>(success, error) {\n+            @Override\n+            protected DocumentT mapSuccess(Object result) {\n+                return (DocumentT) findOneSuccessMapper(result, Document.class);", "originalCommit": "46eaaa91a8b4c8f07972e489c0904f199cc1401e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4NjU2Mw==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425086563", "bodyText": "That's right. The return type in findOneSuccessMapper was wrongly specified. I've fixed it there so the typecasting isn't necessary anymore.", "author": "edualonso", "createdAt": "2020-05-14T12:09:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk0ODI1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk0OTg0OQ==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r424949849", "bodyText": "If this constructor is going to be part of the public API we probably need to consider to make the CodecRegistry optional?\nBut didn't we talk about making the class abstract so we can hide the constructors?", "author": "cmelchior", "createdAt": "2020-05-14T08:12:21Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/RemoteMongoClient.java", "diffHunk": "@@ -26,8 +28,10 @@\n public class RemoteMongoClient {\n \n     private OsRemoteMongoClient osRemoteMongoClient;\n+    private CodecRegistry codecRegistry;\n \n-    public RemoteMongoClient(RealmUser realmUser, String serviceName) {\n+    public RemoteMongoClient(final RealmUser realmUser, final String serviceName, final CodecRegistry codecRegistry) {", "originalCommit": "46eaaa91a8b4c8f07972e489c0904f199cc1401e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI4OTgxOQ==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425289819", "bodyText": "Let's keep the constructors public for now and revisit this in the future as agreed.", "author": "edualonso", "createdAt": "2020-05-14T16:56:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk0OTg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI5MTc2OA==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425291768", "bodyText": "Regarding the codec registry, I think I would like to wait until the functions PR is merged. I think we might have to use a codec registry factory instead of (if I remember it right) having it as a static member inside one of the configuration classes in case we want to give the option of defaulting to a certain registry in here.", "author": "edualonso", "createdAt": "2020-05-14T16:59:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk0OTg0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkzODE1NA==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r424938154", "bodyText": "Remember to handle if the object_id is not set", "author": "rorbech", "createdAt": "2020-05-14T07:51:59Z", "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoCollection.cpp", "diffHunk": "@@ -33,13 +33,36 @@\n \n using namespace realm;\n using namespace realm::app;\n+using namespace realm::bson;\n using namespace realm::jni_util;\n using namespace realm::_impl;\n \n-static std::function<jobject(JNIEnv*, uint64_t)> collection_mapper = [](JNIEnv* env, uint64_t result) {\n+// This mapper works for both count and delete operations\n+static std::function<jobject(JNIEnv*, uint64_t)> collection_mapper_count = [](JNIEnv* env, uint64_t result) {\n     return JavaClassGlobalDef::new_long(env, result);\n };\n \n+static std::function<jobject(JNIEnv*, util::Optional<bson::BsonDocument>)> collection_mapper_find_one = [](JNIEnv* env, util::Optional<bson::BsonDocument> document) {\n+    return document ? JniBsonProtocol::bson_to_jstring(env, *document) : NULL;\n+};\n+\n+static std::function<jobject(JNIEnv*, util::Optional<ObjectId>)> collection_mapper_insert_one = [](JNIEnv* env, util::Optional<ObjectId> object_id) {\n+    return JavaClassGlobalDef::new_object_id(env, object_id.value());", "originalCommit": "46eaaa91a8b4c8f07972e489c0904f199cc1401e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE1MTQxMQ==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425151411", "bodyText": "See comment above - would this error handling be correct?", "author": "edualonso", "createdAt": "2020-05-14T13:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkzODE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE1OTY3Ng==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425159676", "bodyText": "Yes, conceptually, though IllegalArgumentException is probably not the right one. I did it like this https://github.com/realm/realm-java/pull/6810/files#diff-7e3f4a991bb3d13d71a4a8e0103745ecR32 in the Function PR.\nThe mapping of C++ exceptions to Java exceptions when using the CATCH_STD() can be found in https://github.com/realm/realm-java/blob/master/realm/realm-library/src/main/cpp/util.cpp#L49", "author": "rorbech", "createdAt": "2020-05-14T14:00:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkzODE1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkzODU3Mw==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r424938573", "bodyText": "Remember to handle if the object_id is not set", "author": "rorbech", "createdAt": "2020-05-14T07:52:44Z", "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoCollection.cpp", "diffHunk": "@@ -33,13 +33,36 @@\n \n using namespace realm;\n using namespace realm::app;\n+using namespace realm::bson;\n using namespace realm::jni_util;\n using namespace realm::_impl;\n \n-static std::function<jobject(JNIEnv*, uint64_t)> collection_mapper = [](JNIEnv* env, uint64_t result) {\n+// This mapper works for both count and delete operations\n+static std::function<jobject(JNIEnv*, uint64_t)> collection_mapper_count = [](JNIEnv* env, uint64_t result) {\n     return JavaClassGlobalDef::new_long(env, result);\n };\n \n+static std::function<jobject(JNIEnv*, util::Optional<bson::BsonDocument>)> collection_mapper_find_one = [](JNIEnv* env, util::Optional<bson::BsonDocument> document) {\n+    return document ? JniBsonProtocol::bson_to_jstring(env, *document) : NULL;\n+};\n+\n+static std::function<jobject(JNIEnv*, util::Optional<ObjectId>)> collection_mapper_insert_one = [](JNIEnv* env, util::Optional<ObjectId> object_id) {\n+    return JavaClassGlobalDef::new_object_id(env, object_id.value());\n+};\n+\n+static std::function<jobject(JNIEnv*, std::vector<ObjectId>)> collection_mapper_insert_many = [](JNIEnv* env, std::vector<ObjectId> object_ids) {\n+    jobjectArray arr = (jobjectArray)env->NewObjectArray(static_cast<jsize>(object_ids.size()), JavaClassGlobalDef::java_lang_object(), NULL);", "originalCommit": "46eaaa91a8b4c8f07972e489c0904f199cc1401e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE1NTA1Mg==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425155052", "bodyText": "This isn't an Optional. What I could do instead is to check whether the array is empty or not. In case it's empty then we can throw an exception, although it should never reach that point in here, as the only scenario I can think of would generate an empty array is a failure in inserting the documents, which would trigger an error callback.", "author": "edualonso", "createdAt": "2020-05-14T13:54:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkzODU3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk1NTk0NA==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r424955944", "bodyText": "We should probably add checks on the actual type even though we have quite good control on the input side in Java, as people could use a codec registry that encodes object unexpectedly.\nif (args.type() != bson::Bson::Type::Array) {\n       throw util::invalid_argument(\"Function arguments must be a BSON array\");\n}\n\nwhich will throw an IllegalArgumentException to Java.\nThen it should be safe to cast it with static_cast<bson::BsonArray>(args) to get the right type without hitting the assertions.", "author": "rorbech", "createdAt": "2020-05-14T08:22:34Z", "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoCollection.cpp", "diffHunk": "@@ -58,9 +81,110 @@ Java_io_realm_internal_objectstore_OsRemoteMongoCollection_nativeCount(JNIEnv* e\n                                                                        jobject j_callback) {\n     try {\n         RemoteMongoCollection* collection = reinterpret_cast<RemoteMongoCollection*>(j_collection_ptr);\n-        bson::BsonDocument filter(JniBsonProtocol::jstring_to_bson(env, j_filter));\n+        bson::BsonDocument bson_filter(JniBsonProtocol::jstring_to_bson(env, j_filter));", "originalCommit": "46eaaa91a8b4c8f07972e489c0904f199cc1401e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk2NzIzMg==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r424967232", "bodyText": "We should probably do a <T> JniBsonProtocol::checked_jstring_to_bson(...). To ease it, but my template programming is a bit rusty, so I cannot write from the top of my head. I can do it as part of the functions PR, then you can await the implementation and guard the arguments later.", "author": "rorbech", "createdAt": "2020-05-14T08:40:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk1NTk0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEzMzg4OQ==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425133889", "bodyText": "I will add a FIXME to remind me of that.", "author": "edualonso", "createdAt": "2020-05-14T13:25:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk1NTk0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk1NjI4MA==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r424956280", "bodyText": "Same check as above.", "author": "rorbech", "createdAt": "2020-05-14T08:23:04Z", "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoCollection.cpp", "diffHunk": "@@ -58,9 +81,110 @@ Java_io_realm_internal_objectstore_OsRemoteMongoCollection_nativeCount(JNIEnv* e\n                                                                        jobject j_callback) {\n     try {\n         RemoteMongoCollection* collection = reinterpret_cast<RemoteMongoCollection*>(j_collection_ptr);\n-        bson::BsonDocument filter(JniBsonProtocol::jstring_to_bson(env, j_filter));\n+        bson::BsonDocument bson_filter(JniBsonProtocol::jstring_to_bson(env, j_filter));\n         uint64_t limit = std::uint64_t(j_limit);\n-        collection->count(filter, limit, JavaNetworkTransport::create_result_callback(env, j_callback, collection_mapper));\n+        collection->count(bson_filter, limit, JavaNetworkTransport::create_result_callback(env, j_callback, collection_mapper_count));\n+    }\n+    CATCH_STD()\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_io_realm_internal_objectstore_OsRemoteMongoCollection_nativeFindOne(JNIEnv* env,\n+                                                                         jclass,\n+                                                                         jlong j_collection_ptr,\n+                                                                         jstring j_document,\n+                                                                         jobject j_callback) {\n+    try {\n+        RemoteMongoCollection* collection = reinterpret_cast<RemoteMongoCollection*>(j_collection_ptr);\n+        bson::BsonDocument bson_filter(JniBsonProtocol::jstring_to_bson(env, j_document));", "originalCommit": "46eaaa91a8b4c8f07972e489c0904f199cc1401e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk3MDc2NQ==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r424970765", "bodyText": "As discussed be aware of the special BsonNull type. Do not know whether it is used in the OS layer or we can rely on standard null pointers.", "author": "rorbech", "createdAt": "2020-05-14T08:45:43Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoCollection.java", "diffHunk": "@@ -38,12 +65,231 @@ public long getNativeFinalizerPtr() {\n         return nativeFinalizerPtr;\n     }\n \n-    public void count(String filter) {\n-        throw new UnsupportedOperationException(\"Not Implemented\");\n+    public Long count() {\n+        return count(null);\n+    }\n+\n+    public Long count(@Nullable final Bson filter) {\n+        return count(filter, null);\n+    }\n+\n+    public Long count(@Nullable final Bson filter, @Nullable final RemoteCountOptions options) {\n+        AtomicReference<Long> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        OsJNIResultCallback<Long> callback = new OsJNIResultCallback<Long>(success, error) {\n+            @Override\n+            protected Long mapSuccess(Object result) {\n+                return (Long) result;\n+            }\n+        };\n+\n+        // no filter means count all\n+        String filterString = filter == null ?\n+                JniBsonProtocol.encode(new Document(), codecRegistry) :\n+                JniBsonProtocol.encode(filter, codecRegistry);\n+        int limit = options == null ? 0 : options.getLimit();\n+\n+        nativeCount(nativePtr, filterString, limit, callback);\n+\n+        return ResultHandler.handleResult(success, error);\n+    }\n+\n+    public DocumentT findOne() {\n+        return findOne(new Document());\n+    }\n+\n+    public <ResultT> ResultT findOne(final Class<ResultT> resultClass) {\n+        AtomicReference<ResultT> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        OsJNIResultCallback<ResultT> callback = new OsJNIResultCallback<ResultT>(success, error) {\n+            @Override\n+            protected ResultT mapSuccess(Object result) {\n+                return (ResultT) findOneSuccessMapper(result, resultClass);\n+            }\n+        };\n+\n+        nativeFindOne(nativePtr, JniBsonProtocol.encode(new Document(), codecRegistry), callback);\n+\n+        return ResultHandler.handleResult(success, error);\n+    }\n+\n+    public DocumentT findOne(final Bson filter) {\n+        AtomicReference<DocumentT> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        OsJNIResultCallback<DocumentT> callback = new OsJNIResultCallback<DocumentT>(success, error) {\n+            @Override\n+            protected DocumentT mapSuccess(Object result) {\n+                return (DocumentT) findOneSuccessMapper(result, Document.class);\n+            }\n+        };\n+\n+        String encodedFilter = JniBsonProtocol.encode(filter, codecRegistry);\n+        nativeFindOne(nativePtr, encodedFilter, callback);\n+\n+        return ResultHandler.handleResult(success, error);\n+    }\n+\n+    public <ResultT> ResultT findOne(final @Nullable Bson filter, final Class<ResultT> resultClass) {\n+        AtomicReference<ResultT> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        OsJNIResultCallback<ResultT> callback = new OsJNIResultCallback<ResultT>(success, error) {\n+            @Override\n+            protected ResultT mapSuccess(Object result) {\n+                return (ResultT) findOneSuccessMapper(result, resultClass);\n+            }\n+        };\n+\n+        String encodedFilter = filter == null ?\n+                JniBsonProtocol.encode(new Document(), codecRegistry) :\n+                JniBsonProtocol.encode(filter, codecRegistry);\n+        nativeFindOne(nativePtr, encodedFilter, callback);\n+\n+        return ResultHandler.handleResult(success, error);\n+    }\n+\n+    public DocumentT findOne(@Nullable final Bson filter, final RemoteFindOptions options) {\n+        AtomicReference<DocumentT> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        OsJNIResultCallback<DocumentT> callback = new OsJNIResultCallback<DocumentT>(success, error) {\n+            @Override\n+            protected DocumentT mapSuccess(Object result) {\n+                return (DocumentT) findOneSuccessMapper(result, documentClass);\n+            }\n+        };\n+\n+        String encodedFilter = filter == null ?\n+                JniBsonProtocol.encode(new Document(), codecRegistry) :\n+                JniBsonProtocol.encode(filter, codecRegistry);\n+        String projectionString = JniBsonProtocol.encode(options.getProjection(), codecRegistry);\n+        String sortString = JniBsonProtocol.encode(options.getSort(), codecRegistry);\n+        nativeFindOneWithOptions(nativePtr, encodedFilter, projectionString, sortString, options.getLimit(), callback);\n+\n+        return ResultHandler.handleResult(success, error);\n+    }\n+\n+    public <ResultT> ResultT findOne(\n+            final Bson filter,\n+            final RemoteFindOptions options,\n+            final Class<ResultT> resultClass) {\n+        AtomicReference<ResultT> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        OsJNIResultCallback<ResultT> callback = new OsJNIResultCallback<ResultT>(success, error) {\n+            @Override\n+            protected ResultT mapSuccess(Object result) {\n+                return (ResultT) findOneSuccessMapper(result, resultClass);\n+            }\n+        };\n+\n+        String encodedFilter = filter == null ?\n+                JniBsonProtocol.encode(new Document(), codecRegistry) :\n+                JniBsonProtocol.encode(filter, codecRegistry);\n+        String projectionString = JniBsonProtocol.encode(options.getProjection(), codecRegistry);\n+        String sortString = JniBsonProtocol.encode(options.getSort(), codecRegistry);\n+        nativeFindOneWithOptions(nativePtr, encodedFilter, projectionString, sortString, options.getLimit(), callback);\n+\n+        return ResultHandler.handleResult(success, error);\n+    }\n+\n+    public RemoteInsertOneResult insertOne(final DocumentT document) {\n+        AtomicReference<RemoteInsertOneResult> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        OsJNIResultCallback<RemoteInsertOneResult> callback = new OsJNIResultCallback<RemoteInsertOneResult>(success, error) {\n+            @Override\n+            protected RemoteInsertOneResult mapSuccess(Object result) {\n+                BsonValue bsonObjectId = new BsonObjectId((ObjectId) result);\n+                return new RemoteInsertOneResult(bsonObjectId);\n+            }\n+        };\n+\n+        String encodedDocument = JniBsonProtocol.encode(document, codecRegistry);\n+        nativeInsertOne(nativePtr, encodedDocument, callback);\n+        return ResultHandler.handleResult(success, error);\n+    }\n+\n+    public RemoteInsertManyResult insertMany(final List<? extends DocumentT> documents) {\n+        AtomicReference<RemoteInsertManyResult> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        OsJNIResultCallback<RemoteInsertManyResult> callback = new OsJNIResultCallback<RemoteInsertManyResult>(success, error) {\n+            @Override\n+            protected RemoteInsertManyResult mapSuccess(Object result) {\n+                Object[] objects = (Object[]) result;\n+                Map<Long, BsonValue> insertedIdsMap = new HashMap<>();\n+                for (int i = 0; i < objects.length; i++) {\n+                    ObjectId objectId = (ObjectId) objects[i];\n+                    BsonValue bsonObjectId = new BsonObjectId(objectId);\n+                    insertedIdsMap.put((long) i, bsonObjectId);\n+                }\n+                return new RemoteInsertManyResult(insertedIdsMap);\n+            }\n+        };\n+\n+        String encodedDocumentArray = JniBsonProtocol.encode(documents, codecRegistry);\n+        nativeInsertMany(nativePtr, encodedDocumentArray, callback);\n+        return ResultHandler.handleResult(success, error);\n+    }\n+\n+    public RemoteDeleteResult deleteOne(final Bson filter) {\n+        AtomicReference<RemoteDeleteResult> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        OsJNIResultCallback<RemoteDeleteResult> callback = new OsJNIResultCallback<RemoteDeleteResult>(success, error) {\n+            @Override\n+            protected RemoteDeleteResult mapSuccess(Object result) {\n+                return new RemoteDeleteResult((Long) result);\n+            }\n+        };\n+\n+        String jsonDocument = JniBsonProtocol.encode(filter, codecRegistry);\n+        nativeDeleteOne(nativePtr, jsonDocument, callback);\n+        return ResultHandler.handleResult(success, error);\n+    }\n+\n+    public RemoteDeleteResult deleteMany(final Bson filter) {\n+        AtomicReference<RemoteDeleteResult> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        OsJNIResultCallback<RemoteDeleteResult> callback = new OsJNIResultCallback<RemoteDeleteResult>(success, error) {\n+            @Override\n+            protected RemoteDeleteResult mapSuccess(Object result) {\n+                return new RemoteDeleteResult((Long) result);\n+            }\n+        };\n+\n+        String jsonDocument = JniBsonProtocol.encode(filter, codecRegistry);\n+        nativeDeleteMany(nativePtr, jsonDocument, callback);\n+        return ResultHandler.handleResult(success, error);\n+    }\n+\n+    private Object findOneSuccessMapper(@Nullable Object result, Class<?> resultClass) {\n+        if (result == null) {", "originalCommit": "46eaaa91a8b4c8f07972e489c0904f199cc1401e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4ODE5NA==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425088194", "bodyText": "I've done a quick search and it doesn't seem to exist in the object server. Null is returned in some operations from the Stitch SDK, so my guess is to stick to null to ensure continuity.", "author": "edualonso", "createdAt": "2020-05-14T12:12:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk3MDc2NQ=="}], "type": "inlineReview"}, {"oid": "bb2d17318bbd967a99b8897e554d278f1c74b7ce", "url": "https://github.com/realm/realm-java/commit/bb2d17318bbd967a99b8897e554d278f1c74b7ce", "message": "First batch of cleanup", "committedDate": "2020-05-14T13:21:09Z", "type": "commit"}, {"oid": "22ae2589de45f2f5d0682dd177de9c11c53162fc", "url": "https://github.com/realm/realm-java/commit/22ae2589de45f2f5d0682dd177de9c11c53162fc", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-insert-one", "committedDate": "2020-05-14T13:22:13Z", "type": "commit"}, {"oid": "d59fba6b51796079fa95a2f924db710044e9de84", "url": "https://github.com/realm/realm-java/commit/d59fba6b51796079fa95a2f924db710044e9de84", "message": "Addressed error handling in interop layer plus more cleanup", "committedDate": "2020-05-14T16:07:42Z", "type": "commit"}, {"oid": "e8872a980a551fd773ec9aeabe246a423f2ffa7e", "url": "https://github.com/realm/realm-java/commit/e8872a980a551fd773ec9aeabe246a423f2ffa7e", "message": "Moved classes to new packages and removed \"remote\" prefix from class names", "committedDate": "2020-05-14T16:56:05Z", "type": "commit"}, {"oid": "6bd91b647bf817ff8bb4a13627bde9b8262fed23", "url": "https://github.com/realm/realm-java/commit/6bd91b647bf817ff8bb4a13627bde9b8262fed23", "message": "Restored wrongly removed public modifier to method", "committedDate": "2020-05-14T17:03:48Z", "type": "commit"}, {"oid": "0d7c5907386577dc8439438af12b453f083ca8ff", "url": "https://github.com/realm/realm-java/commit/0d7c5907386577dc8439438af12b453f083ca8ff", "message": "Renamed OS interop classes", "committedDate": "2020-05-14T17:14:36Z", "type": "commit"}, {"oid": "2266cd0e20e00a932b1190432e5cfc18919a9f20", "url": "https://github.com/realm/realm-java/commit/2266cd0e20e00a932b1190432e5cfc18919a9f20", "message": "Cleanup", "committedDate": "2020-05-15T09:10:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwMzQ0MA==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425703440", "bodyText": "Add a FIXME if these are still here for a reason or delete them", "author": "cmelchior", "createdAt": "2020-05-15T10:13:06Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/MongoCollectionTest.kt", "diffHunk": "@@ -0,0 +1,279 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.mongodb\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.*\n+import io.realm.mongodb.mongo.MongoClient\n+import io.realm.mongodb.mongo.MongoCollection\n+import io.realm.mongodb.mongo.MongoDatabase\n+import io.realm.mongodb.mongo.options.RemoteCountOptions\n+import io.realm.util.blockingGetResult\n+import org.bson.Document\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import kotlin.test.assertEquals\n+import kotlin.test.assertNull\n+\n+@RunWith(AndroidJUnit4::class)\n+class MongoCollectionTest {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var user: RealmUser\n+    private lateinit var client: MongoClient\n+    private lateinit var database: MongoDatabase\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        app = TestRealmApp()\n+        user = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+        client = user.getRemoteMongoClient(SERVICE_NAME)\n+        database = client.getDatabase(DATABASE_NAME)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        // FIXME: probably not the best way to \"reset\" the state\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            deleteMany(Document()).blockingGetResult()\n+        }\n+\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun insertOne() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+            val doc = Document(mapOf(\"KEY_1\" to \"WORLD_1\", \"KEY_2\" to \"WORLD_2\"))\n+            insertOne(doc).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+\n+//            val doc = Document(\"hello\", \"world\")", "originalCommit": "2266cd0e20e00a932b1190432e5cfc18919a9f20", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwNDAzOA==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425704038", "bodyText": "Add FIXME or delete them", "author": "cmelchior", "createdAt": "2020-05-15T10:14:18Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/MongoCollectionTest.kt", "diffHunk": "@@ -0,0 +1,279 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.mongodb\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.*\n+import io.realm.mongodb.mongo.MongoClient\n+import io.realm.mongodb.mongo.MongoCollection\n+import io.realm.mongodb.mongo.MongoDatabase\n+import io.realm.mongodb.mongo.options.RemoteCountOptions\n+import io.realm.util.blockingGetResult\n+import org.bson.Document\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import kotlin.test.assertEquals\n+import kotlin.test.assertNull\n+\n+@RunWith(AndroidJUnit4::class)\n+class MongoCollectionTest {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var user: RealmUser\n+    private lateinit var client: MongoClient\n+    private lateinit var database: MongoDatabase\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        app = TestRealmApp()\n+        user = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+        client = user.getRemoteMongoClient(SERVICE_NAME)\n+        database = client.getDatabase(DATABASE_NAME)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        // FIXME: probably not the best way to \"reset\" the state\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            deleteMany(Document()).blockingGetResult()\n+        }\n+\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun insertOne() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+            val doc = Document(mapOf(\"KEY_1\" to \"WORLD_1\", \"KEY_2\" to \"WORLD_2\"))\n+            insertOne(doc).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+\n+//            val doc = Document(\"hello\", \"world\")\n+//            doc[\"_id\"] = ObjectId()\n+//\n+//            assertEquals(doc.getObjectId(\"_id\"), insertOne(doc).blockingGetResult()!!.insertedId.asObjectId().value)\n+//            assertFailsWith(ObjectServerError::class) { insertOne(doc).blockingGetResult() }\n+//\n+//            val doc2 = Document(\"hello\", \"world\")\n+//            assertNotEquals(doc.getObjectId(\"_id\"), insertOne(doc2).blockingGetResult()!!.insertedId.asObjectId().value)\n+        }\n+    }\n+\n+    @Test\n+    fun insertMany() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)\n+            val doc1 = Document(rawDoc)\n+            val doc2 = Document(rawDoc)\n+            val doc3 = Document(rawDoc)\n+            val doc4 = Document(\"foo\", \"bar\")\n+            val manyDocuments = listOf(doc1, doc2, doc3, doc4)\n+\n+            insertMany(manyDocuments)\n+                    .blockingGetResult()\n+                    .let { assertEquals(manyDocuments.size, it!!.insertedIds.size) }\n+\n+            assertEquals(manyDocuments.size.toLong(), count().blockingGetResult())\n+            assertEquals(3, count(rawDoc).blockingGetResult())\n+            assertEquals(1, count(Document(\"foo\", \"bar\")).blockingGetResult())\n+            assertEquals(0, count(Document(\"bar\", \"foo\")).blockingGetResult())\n+        }\n+    }\n+\n+    @Test\n+    fun count() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(\"hello\", \"world\")\n+            val doc1 = Document(rawDoc)\n+            val doc2 = Document(rawDoc)\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+            insertOne(doc2).blockingGetResult()\n+            assertEquals(2, count().blockingGetResult())\n+\n+            assertEquals(2, count(rawDoc).blockingGetResult())\n+            assertEquals(0, count(Document(\"hello\", \"Friend\")).blockingGetResult())\n+            assertEquals(1,count(rawDoc, RemoteCountOptions().limit(1)).blockingGetResult())\n+\n+//            try {", "originalCommit": "2266cd0e20e00a932b1190432e5cfc18919a9f20", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwNTQwMA==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425705400", "bodyText": "Add FIXME or delete", "author": "cmelchior", "createdAt": "2020-05-15T10:17:02Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/MongoCollectionTest.kt", "diffHunk": "@@ -0,0 +1,279 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.mongodb\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.*\n+import io.realm.mongodb.mongo.MongoClient\n+import io.realm.mongodb.mongo.MongoCollection\n+import io.realm.mongodb.mongo.MongoDatabase\n+import io.realm.mongodb.mongo.options.RemoteCountOptions\n+import io.realm.util.blockingGetResult\n+import org.bson.Document\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import kotlin.test.assertEquals\n+import kotlin.test.assertNull\n+\n+@RunWith(AndroidJUnit4::class)\n+class MongoCollectionTest {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var user: RealmUser\n+    private lateinit var client: MongoClient\n+    private lateinit var database: MongoDatabase\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        app = TestRealmApp()\n+        user = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+        client = user.getRemoteMongoClient(SERVICE_NAME)\n+        database = client.getDatabase(DATABASE_NAME)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        // FIXME: probably not the best way to \"reset\" the state\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            deleteMany(Document()).blockingGetResult()\n+        }\n+\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun insertOne() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+            val doc = Document(mapOf(\"KEY_1\" to \"WORLD_1\", \"KEY_2\" to \"WORLD_2\"))\n+            insertOne(doc).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+\n+//            val doc = Document(\"hello\", \"world\")\n+//            doc[\"_id\"] = ObjectId()\n+//\n+//            assertEquals(doc.getObjectId(\"_id\"), insertOne(doc).blockingGetResult()!!.insertedId.asObjectId().value)\n+//            assertFailsWith(ObjectServerError::class) { insertOne(doc).blockingGetResult() }\n+//\n+//            val doc2 = Document(\"hello\", \"world\")\n+//            assertNotEquals(doc.getObjectId(\"_id\"), insertOne(doc2).blockingGetResult()!!.insertedId.asObjectId().value)\n+        }\n+    }\n+\n+    @Test\n+    fun insertMany() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)\n+            val doc1 = Document(rawDoc)\n+            val doc2 = Document(rawDoc)\n+            val doc3 = Document(rawDoc)\n+            val doc4 = Document(\"foo\", \"bar\")\n+            val manyDocuments = listOf(doc1, doc2, doc3, doc4)\n+\n+            insertMany(manyDocuments)\n+                    .blockingGetResult()\n+                    .let { assertEquals(manyDocuments.size, it!!.insertedIds.size) }\n+\n+            assertEquals(manyDocuments.size.toLong(), count().blockingGetResult())\n+            assertEquals(3, count(rawDoc).blockingGetResult())\n+            assertEquals(1, count(Document(\"foo\", \"bar\")).blockingGetResult())\n+            assertEquals(0, count(Document(\"bar\", \"foo\")).blockingGetResult())\n+        }\n+    }\n+\n+    @Test\n+    fun count() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(\"hello\", \"world\")\n+            val doc1 = Document(rawDoc)\n+            val doc2 = Document(rawDoc)\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+            insertOne(doc2).blockingGetResult()\n+            assertEquals(2, count().blockingGetResult())\n+\n+            assertEquals(2, count(rawDoc).blockingGetResult())\n+            assertEquals(0, count(Document(\"hello\", \"Friend\")).blockingGetResult())\n+            assertEquals(1,count(rawDoc, RemoteCountOptions().limit(1)).blockingGetResult())\n+\n+//            try {\n+//                count(Document(\"\\$who\", 1)).blockingGetResult()\n+//                Assert.fail()\n+//            } catch (ex: ExecutionException) {\n+//                // FIXME: add assertion\n+//                val a = 0\n+//            }\n+        }\n+    }\n+\n+    @Test\n+    fun deleteOne_singleDocument() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)\n+            val doc1 = Document(rawDoc)\n+\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+            assertEquals(1, deleteOne(doc1).blockingGetResult()!!.deletedCount)\n+            assertEquals(0, count().blockingGetResult())\n+        }\n+    }\n+\n+    @Test\n+    fun deleteOne_listOfDocuments() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)\n+            val doc1 = Document(rawDoc)\n+            val doc1b = Document(rawDoc)\n+            val doc2 = Document(\"foo\", \"bar\")\n+            val doc3 = Document(\"42\", \"666\")\n+            insertMany(listOf(doc1, doc1b, doc2, doc3)).blockingGetResult()\n+            assertEquals(1, deleteOne(rawDoc).blockingGetResult()!!.deletedCount)\n+            assertEquals(1, deleteOne(Document()).blockingGetResult()!!.deletedCount)\n+        }\n+    }\n+\n+    @Test\n+    fun deleteMany_singleDocument() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)\n+            val doc1 = Document(rawDoc)\n+\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+            assertEquals(1, deleteMany(doc1).blockingGetResult()!!.deletedCount)\n+            assertEquals(0, count().blockingGetResult())\n+        }\n+    }\n+\n+    @Test\n+    fun deleteMany_listOfDocuments() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)\n+            val doc1 = Document(rawDoc)\n+            val doc1b = Document(rawDoc)\n+            val doc2 = Document(\"foo\", \"bar\")\n+            val doc3 = Document(\"42\", \"666\")\n+            insertMany(listOf(doc1, doc1b, doc2, doc3)).blockingGetResult()\n+            assertEquals(2, deleteMany(rawDoc).blockingGetResult()!!.deletedCount)                 // two docs will be deleted\n+            assertEquals(2, count().blockingGetResult())                                           // two docs still present\n+            assertEquals(2, deleteMany(Document()).blockingGetResult()!!.deletedCount)             // delete all\n+            assertEquals(0, count().blockingGetResult())\n+\n+            insertMany(listOf(doc1, doc1b, doc2, doc3)).blockingGetResult()\n+            assertEquals(4, deleteMany(Document()).blockingGetResult()!!.deletedCount)             // delete all\n+            assertEquals(0, count().blockingGetResult())\n+        }\n+    }\n+\n+    @Test\n+    fun findOne() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            val doc1 = Document(\"hello\", \"world1\")\n+            val doc2 = Document(\"hello\", \"world2\")\n+            val doc3 = Document(\"hello\", \"world3\")\n+\n+            // Test findOne() on empty collection with no filter and no options\n+            assertNull(findOne().blockingGetResult())\n+\n+            // Insert a document into the collection\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+\n+            // Test findOne() with no filter and no options\n+            assertEquals(doc1, findOne().blockingGetResult()!!.withoutId())\n+\n+            // Test findOne() with filter that does not match any documents and no options\n+            assertNull(findOne(Document(\"hello\", \"worldDNE\")).blockingGetResult())\n+\n+//            // Insert 2 more documents into the collection", "originalCommit": "2266cd0e20e00a932b1190432e5cfc18919a9f20", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwNjI4Mw==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425706283", "bodyText": "Not entirely sure what is best practise here, but should these just be defined at the top of the file instead of in the companion object. I have a feeling that we are just putting them in Companion objects because that would make them static like in Java, but it might not be Kotlin best practise?", "author": "cmelchior", "createdAt": "2020-05-15T10:18:45Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/MongoCollectionTest.kt", "diffHunk": "@@ -0,0 +1,279 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.mongodb\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.*\n+import io.realm.mongodb.mongo.MongoClient\n+import io.realm.mongodb.mongo.MongoCollection\n+import io.realm.mongodb.mongo.MongoDatabase\n+import io.realm.mongodb.mongo.options.RemoteCountOptions\n+import io.realm.util.blockingGetResult\n+import org.bson.Document\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import kotlin.test.assertEquals\n+import kotlin.test.assertNull\n+\n+@RunWith(AndroidJUnit4::class)\n+class MongoCollectionTest {\n+\n+    private lateinit var app: TestRealmApp\n+    private lateinit var user: RealmUser\n+    private lateinit var client: MongoClient\n+    private lateinit var database: MongoDatabase\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        app = TestRealmApp()\n+        user = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+        client = user.getRemoteMongoClient(SERVICE_NAME)\n+        database = client.getDatabase(DATABASE_NAME)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        // FIXME: probably not the best way to \"reset\" the state\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            deleteMany(Document()).blockingGetResult()\n+        }\n+\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun insertOne() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+            val doc = Document(mapOf(\"KEY_1\" to \"WORLD_1\", \"KEY_2\" to \"WORLD_2\"))\n+            insertOne(doc).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+\n+//            val doc = Document(\"hello\", \"world\")\n+//            doc[\"_id\"] = ObjectId()\n+//\n+//            assertEquals(doc.getObjectId(\"_id\"), insertOne(doc).blockingGetResult()!!.insertedId.asObjectId().value)\n+//            assertFailsWith(ObjectServerError::class) { insertOne(doc).blockingGetResult() }\n+//\n+//            val doc2 = Document(\"hello\", \"world\")\n+//            assertNotEquals(doc.getObjectId(\"_id\"), insertOne(doc2).blockingGetResult()!!.insertedId.asObjectId().value)\n+        }\n+    }\n+\n+    @Test\n+    fun insertMany() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)\n+            val doc1 = Document(rawDoc)\n+            val doc2 = Document(rawDoc)\n+            val doc3 = Document(rawDoc)\n+            val doc4 = Document(\"foo\", \"bar\")\n+            val manyDocuments = listOf(doc1, doc2, doc3, doc4)\n+\n+            insertMany(manyDocuments)\n+                    .blockingGetResult()\n+                    .let { assertEquals(manyDocuments.size, it!!.insertedIds.size) }\n+\n+            assertEquals(manyDocuments.size.toLong(), count().blockingGetResult())\n+            assertEquals(3, count(rawDoc).blockingGetResult())\n+            assertEquals(1, count(Document(\"foo\", \"bar\")).blockingGetResult())\n+            assertEquals(0, count(Document(\"bar\", \"foo\")).blockingGetResult())\n+        }\n+    }\n+\n+    @Test\n+    fun count() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(\"hello\", \"world\")\n+            val doc1 = Document(rawDoc)\n+            val doc2 = Document(rawDoc)\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+            insertOne(doc2).blockingGetResult()\n+            assertEquals(2, count().blockingGetResult())\n+\n+            assertEquals(2, count(rawDoc).blockingGetResult())\n+            assertEquals(0, count(Document(\"hello\", \"Friend\")).blockingGetResult())\n+            assertEquals(1,count(rawDoc, RemoteCountOptions().limit(1)).blockingGetResult())\n+\n+//            try {\n+//                count(Document(\"\\$who\", 1)).blockingGetResult()\n+//                Assert.fail()\n+//            } catch (ex: ExecutionException) {\n+//                // FIXME: add assertion\n+//                val a = 0\n+//            }\n+        }\n+    }\n+\n+    @Test\n+    fun deleteOne_singleDocument() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)\n+            val doc1 = Document(rawDoc)\n+\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+            assertEquals(1, deleteOne(doc1).blockingGetResult()!!.deletedCount)\n+            assertEquals(0, count().blockingGetResult())\n+        }\n+    }\n+\n+    @Test\n+    fun deleteOne_listOfDocuments() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)\n+            val doc1 = Document(rawDoc)\n+            val doc1b = Document(rawDoc)\n+            val doc2 = Document(\"foo\", \"bar\")\n+            val doc3 = Document(\"42\", \"666\")\n+            insertMany(listOf(doc1, doc1b, doc2, doc3)).blockingGetResult()\n+            assertEquals(1, deleteOne(rawDoc).blockingGetResult()!!.deletedCount)\n+            assertEquals(1, deleteOne(Document()).blockingGetResult()!!.deletedCount)\n+        }\n+    }\n+\n+    @Test\n+    fun deleteMany_singleDocument() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)\n+            val doc1 = Document(rawDoc)\n+\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+            assertEquals(1, deleteMany(doc1).blockingGetResult()!!.deletedCount)\n+            assertEquals(0, count().blockingGetResult())\n+        }\n+    }\n+\n+    @Test\n+    fun deleteMany_listOfDocuments() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(KEY_1, VALUE_1)\n+            val doc1 = Document(rawDoc)\n+            val doc1b = Document(rawDoc)\n+            val doc2 = Document(\"foo\", \"bar\")\n+            val doc3 = Document(\"42\", \"666\")\n+            insertMany(listOf(doc1, doc1b, doc2, doc3)).blockingGetResult()\n+            assertEquals(2, deleteMany(rawDoc).blockingGetResult()!!.deletedCount)                 // two docs will be deleted\n+            assertEquals(2, count().blockingGetResult())                                           // two docs still present\n+            assertEquals(2, deleteMany(Document()).blockingGetResult()!!.deletedCount)             // delete all\n+            assertEquals(0, count().blockingGetResult())\n+\n+            insertMany(listOf(doc1, doc1b, doc2, doc3)).blockingGetResult()\n+            assertEquals(4, deleteMany(Document()).blockingGetResult()!!.deletedCount)             // delete all\n+            assertEquals(0, count().blockingGetResult())\n+        }\n+    }\n+\n+    @Test\n+    fun findOne() {\n+        with(getCollectionInternal(COLLECTION_NAME)) {\n+            val doc1 = Document(\"hello\", \"world1\")\n+            val doc2 = Document(\"hello\", \"world2\")\n+            val doc3 = Document(\"hello\", \"world3\")\n+\n+            // Test findOne() on empty collection with no filter and no options\n+            assertNull(findOne().blockingGetResult())\n+\n+            // Insert a document into the collection\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+\n+            // Test findOne() with no filter and no options\n+            assertEquals(doc1, findOne().blockingGetResult()!!.withoutId())\n+\n+            // Test findOne() with filter that does not match any documents and no options\n+            assertNull(findOne(Document(\"hello\", \"worldDNE\")).blockingGetResult())\n+\n+//            // Insert 2 more documents into the collection\n+////            insertMany(listOf(doc2, doc3)).blockingGetResult()    // use insertOne for now\n+//            insertOne(doc2).blockingGetResult()\n+//            insertOne(doc3).blockingGetResult()\n+//            assertEquals(3, count().blockingGetResult())\n+//\n+//            // test findOne() with projection and sort options\n+//            val projection = Document(\"hello\", 1)\n+//            projection[\"_id\"] = 0\n+//            val options1 = RemoteFindOptions()\n+//                    .limit(2)\n+//                    .projection(projection)\n+//                    .sort(Document(\"hello\", 1))\n+//            assertEquals(doc1, findOne(Document(), options1).blockingGetResult()!!.withoutId())\n+//\n+//            val options2 = RemoteFindOptions()\n+//                    .limit(2)\n+//                    .projection(projection)\n+//                    .sort(Document(\"hello\", -1))\n+//            assertEquals(doc3.withoutId(), findOne(Document(), options2).blockingGetResult()!!.withoutId())\n+//\n+//            // test findOne() properly fails\n+//            try {\n+//                Tasks.await(coll.findOne(Document(\"\\$who\", 1)))\n+//                Assert.fail()\n+//            } catch (ex: ExecutionException) {\n+//                Assert.assertTrue(ex.cause is StitchServiceException)\n+//                val svcEx = ex.cause as StitchServiceException\n+//                assertEquals(StitchServiceErrorCode.MONGODB_ERROR, svcEx.errorCode)\n+//            }\n+        }\n+    }\n+\n+    // FIXME: more to come\n+\n+    private fun getCollectionInternal(collectionName: String, javaClass: Class<Document>? = null): MongoCollection<Document> {\n+        return when (javaClass) {\n+            null -> database.getCollection(collectionName)\n+            else -> database.getCollection(collectionName, javaClass)\n+        }\n+    }\n+\n+    private fun Document.withId(objectId: ObjectId? = null): Document {\n+        return apply { this[\"_id\"] = objectId ?: ObjectId() }\n+    }\n+\n+    private fun Document.withoutId(): Document {\n+        return apply { remove(\"_id\") }\n+    }\n+\n+    private companion object {\n+        const val SERVICE_NAME = \"BackingDB\"    // it comes from the test server's BackingDB/config.json", "originalCommit": "2266cd0e20e00a932b1190432e5cfc18919a9f20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcxMTU1MA==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425711550", "bodyText": "Some say that if the scope of the constants is constrained to this class, it should be a companion object, whereas if its scope is wider, then it should be a top-of-the-file definition.", "author": "edualonso", "createdAt": "2020-05-15T10:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwNjI4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcxMzEwOQ==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425713109", "bodyText": "You can still make it private in the top of the file, which limits the scope more or less to the class.", "author": "rorbech", "createdAt": "2020-05-15T10:32:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwNjI4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcyNjU2NA==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425726564", "bodyText": "That's right too. I don't know either which is considered the standard though.", "author": "edualonso", "createdAt": "2020-05-15T11:01:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwNjI4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcyNzU1Mw==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425727553", "bodyText": "I will put them as top-level definitions. It always is nice to try something new :-)", "author": "edualonso", "createdAt": "2020-05-15T11:03:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwNjI4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwNzkzNQ==", "url": "https://github.com/realm/realm-java/pull/6839#discussion_r425707935", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public MongoClient getRemoteMongoClient(String serviceName) {\n          \n          \n            \n                public MongoClient getMongoClient(String serviceName) {", "author": "cmelchior", "createdAt": "2020-05-15T10:21:49Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "diffHunk": "@@ -441,12 +440,11 @@ public RealmPushNotifications getPushNotifications() {\n     /**\n      * FIXME Add support for the MongoDB wrapper. Name of Class and method still TBD.\n      */\n-    public RemoteMongoClient getRemoteMongoClient() {\n-        if (remoteMongoClient == null) {\n-            // FIXME: serviceName?\n-            remoteMongoClient = new RemoteMongoClient(this, \"serviceName\");\n+    public MongoClient getRemoteMongoClient(String serviceName) {", "originalCommit": "2266cd0e20e00a932b1190432e5cfc18919a9f20", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "89cb56acffdd8867c27a7c3836d76bffd3e6a8bc", "url": "https://github.com/realm/realm-java/commit/89cb56acffdd8867c27a7c3836d76bffd3e6a8bc", "message": "Final round of cleanup and updated pointer to OS that allegedly fixes failing stress test", "committedDate": "2020-05-15T11:04:34Z", "type": "commit"}, {"oid": "3be7dadd3882307ff18523ab821efe046a17e305", "url": "https://github.com/realm/realm-java/commit/3be7dadd3882307ff18523ab821efe046a17e305", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-insert-one", "committedDate": "2020-05-15T14:02:04Z", "type": "commit"}, {"oid": "ef991caf20c61dfbf64bda99553a144782783acf", "url": "https://github.com/realm/realm-java/commit/ef991caf20c61dfbf64bda99553a144782783acf", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-insert-one", "committedDate": "2020-05-15T18:10:48Z", "type": "commit"}, {"oid": "e82a72f4970f4a2a593d386e69ea2815d3732c02", "url": "https://github.com/realm/realm-java/commit/e82a72f4970f4a2a593d386e69ea2815d3732c02", "message": "Fixed broken tests", "committedDate": "2020-05-15T18:54:57Z", "type": "commit"}]}