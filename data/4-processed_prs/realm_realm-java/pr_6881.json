{"pr_number": 6881, "pr_title": "Merge Stitch and Realm SDKs - 5: remote collection, added iterables and preliminary support for find and aggregate", "pr_createdAt": "2020-05-26T16:50:51Z", "pr_url": "https://github.com/realm/realm-java/pull/6881", "timeline": [{"oid": "99ce0f700110224f2cfaa831ae910a80220336a9", "url": "https://github.com/realm/realm-java/commit/99ce0f700110224f2cfaa831ae910a80220336a9", "message": "Updated javadoc", "committedDate": "2020-05-28T15:01:17Z", "type": "commit"}, {"oid": "fd9ac50409035ca8d2b1e7f5b5e3cfab36780236", "url": "https://github.com/realm/realm-java/commit/fd9ac50409035ca8d2b1e7f5b5e3cfab36780236", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-find", "committedDate": "2020-05-28T15:54:12Z", "type": "commit"}, {"oid": "7cb3bbf33f6f9892af8da0107f1eb5496eec247b", "url": "https://github.com/realm/realm-java/commit/7cb3bbf33f6f9892af8da0107f1eb5496eec247b", "message": "Added namespace assertions to collection test", "committedDate": "2020-05-28T16:08:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3OTY0Ng==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r432279646", "bodyText": "We have Util.checkNull(val, args) for this kind of common checks", "author": "cmelchior", "createdAt": "2020-05-29T06:26:43Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsMongoCollection.java", "diffHunk": "@@ -221,42 +306,114 @@ protected InsertManyResult mapSuccess(Object result) {\n         return ResultHandler.handleResult(success, error);\n     }\n \n+    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n     public DeleteResult deleteOne(final Bson filter) {\n-        return deleteInternal(DeleteType.ONE, filter);\n+        return deleteInternal(DELETE_ONE, filter);\n     }\n \n     public DeleteResult deleteMany(final Bson filter) {\n-        return deleteInternal(DeleteType.MANY, filter);\n+        return deleteInternal(DELETE_MANY, filter);\n     }\n \n+    private DeleteResult deleteInternal(final int type, final Bson filter) {\n+        AtomicReference<DeleteResult> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        OsJNIResultCallback<DeleteResult> callback = new OsJNIResultCallback<DeleteResult>(success, error) {\n+            @Override\n+            protected DeleteResult mapSuccess(Object result) {\n+                return new DeleteResult((Long) result);\n+            }\n+        };\n+\n+        String jsonDocument = JniBsonProtocol.encode(filter, codecRegistry);\n+        switch (type) {\n+            case DELETE_ONE:\n+                nativeDelete(DELETE_ONE, nativePtr, jsonDocument, callback);\n+                break;\n+            case DELETE_MANY:\n+                nativeDelete(DELETE_MANY, nativePtr, jsonDocument, callback);\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Invalid delete type: \" + type);\n+        }\n+        return ResultHandler.handleResult(success, error);\n+    }\n+\n+    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n     public UpdateResult updateOne(final Bson filter, final Bson update) {\n-        return updateOne(filter, update, null);\n+        return updateInternal(UPDATE_ONE, filter, update, null);\n     }\n \n     public UpdateResult updateOne(final Bson filter,\n                                   final Bson update,\n-                                  @Nullable final UpdateOptions options) {\n-        return updateInternal(UpdateType.ONE, filter, update, options);\n+                                  final UpdateOptions options) {\n+        return updateInternal(UPDATE_ONE_WITH_OPTIONS, filter, update, options);\n     }\n \n     public UpdateResult updateMany(final Bson filter, final Bson update) {\n-        return updateMany(filter, update, null);\n+        return updateInternal(UPDATE_MANY, filter, update, null);\n     }\n \n     public UpdateResult updateMany(final Bson filter,\n                                    final Bson update,\n-                                   @Nullable final UpdateOptions options) {\n-        return updateInternal(UpdateType.MANY, filter, update, options);\n+                                   final UpdateOptions options) {\n+        return updateInternal(UPDATE_MANY_WITH_OPTIONS, filter, update, options);\n     }\n \n+    private UpdateResult updateInternal(final int type,\n+                                        final Bson filter,\n+                                        final Bson update,\n+                                        @Nullable final UpdateOptions options) {\n+        AtomicReference<UpdateResult> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        OsJNIResultCallback<UpdateResult> callback = new OsJNIResultCallback<UpdateResult>(success, error) {\n+            @Override\n+            protected UpdateResult mapSuccess(Object result) {\n+                BsonArray array = JniBsonProtocol.decode((String) result, BsonArray.class, codecRegistry);\n+                long matchedCount = array.get(0).asInt32().getValue();\n+                long modifiedCount = array.get(1).asInt32().getValue();\n+                BsonValue upsertedId = array.get(2);\n+\n+                if (upsertedId instanceof BsonNull) {\n+                    upsertedId = null;\n+                }\n+                return new UpdateResult(matchedCount, modifiedCount, upsertedId);\n+            }\n+        };\n+\n+        String jsonFilter = JniBsonProtocol.encode(filter, codecRegistry);\n+        String jsonUpdate = JniBsonProtocol.encode(update, codecRegistry);\n+\n+        switch (type) {\n+            case UPDATE_ONE:\n+            case UPDATE_MANY:\n+                nativeUpdate(type, nativePtr, jsonFilter, jsonUpdate, false, callback);\n+                break;\n+            case UPDATE_ONE_WITH_OPTIONS:\n+            case UPDATE_MANY_WITH_OPTIONS:\n+                if (options == null) {", "originalCommit": "7cb3bbf33f6f9892af8da0107f1eb5496eec247b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4MjU0NQ==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r432282545", "bodyText": "Wrapping looks wrong here", "author": "cmelchior", "createdAt": "2020-05-29T06:35:26Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/mongo/MongoCollection.java", "diffHunk": "@@ -62,7 +66,30 @@\n      * @return the namespace\n      */\n     public MongoNamespace getNamespace() {\n-        throw new RuntimeException(\"Not Implemented\");\n+        return nameSpace;\n+    }\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     * <p>\n+     * If you used the simple {@link MongoDatabase#getCollection(String)} to get\n+     * this collection,\n+     * this is {@link org.bson.Document}.", "originalCommit": "7cb3bbf33f6f9892af8da0107f1eb5496eec247b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4MjY1OQ==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r432282659", "bodyText": "This description doesn't say much. Should probably be expanded a bit.", "author": "cmelchior", "createdAt": "2020-05-29T06:35:44Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/mongo/MongoCollection.java", "diffHunk": "@@ -62,7 +66,30 @@\n      * @return the namespace\n      */\n     public MongoNamespace getNamespace() {\n-        throw new RuntimeException(\"Not Implemented\");\n+        return nameSpace;\n+    }\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     * <p>\n+     * If you used the simple {@link MongoDatabase#getCollection(String)} to get\n+     * this collection,\n+     * this is {@link org.bson.Document}.\n+     * </p>\n+     *\n+     * @return the class", "originalCommit": "7cb3bbf33f6f9892af8da0107f1eb5496eec247b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4MzIwMA==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r432283200", "bodyText": "This kind of JavaDoc doesn't really say anything the types dont already. I would probably rephrase to @return the {@link CodecRegistry}  for this collection.", "author": "cmelchior", "createdAt": "2020-05-29T06:37:21Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/mongo/MongoCollection.java", "diffHunk": "@@ -62,7 +66,30 @@\n      * @return the namespace\n      */\n     public MongoNamespace getNamespace() {\n-        throw new RuntimeException(\"Not Implemented\");\n+        return nameSpace;\n+    }\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     * <p>\n+     * If you used the simple {@link MongoDatabase#getCollection(String)} to get\n+     * this collection,\n+     * this is {@link org.bson.Document}.\n+     * </p>\n+     *\n+     * @return the class\n+     */\n+    public Class<DocumentT> getDocumentClass() {\n+        return osMongoCollection.getDocumentClass();\n+    }\n+\n+    /**\n+     * Get the codec registry for the RemoteMongoCollection.\n+     *\n+     * @return the {@link CodecRegistry}", "originalCommit": "7cb3bbf33f6f9892af8da0107f1eb5496eec247b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4MzM5Mw==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r432283393", "bodyText": "Not sure what this means?", "author": "cmelchior", "createdAt": "2020-05-29T06:37:53Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/mongo/MongoCollection.java", "diffHunk": "@@ -212,18 +234,18 @@ public MongoNamespace getNamespace() {\n      *\n      * @return the find iterable interface\n      */\n-    // FIXME: fix find implementation - ignore this code for code review\n-    public Task<Iterable<DocumentT>> find() {\n-        return dispatcher.dispatchTask(() ->\n-                osMongoCollection.find()\n-        );\n+    public FindIterable<DocumentT> find() {\n+        return new FindIterable<>(dispatcher, osMongoCollection.find());\n     }\n \n-    // FIXME: fix find implementation - ignore this code for code review\n-    public Task<Iterable<DocumentT>> find(final FindOptions options) {\n-        return dispatcher.dispatchTask(() ->\n-                osMongoCollection.find(options)\n-        );\n+    /**\n+     * Finds all documents in the collection that match the given filter.\n+     *\n+     * @param options a {@link FindOptions} struct\n+     * @return the find iterable interface", "originalCommit": "7cb3bbf33f6f9892af8da0107f1eb5496eec247b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3MjYzMQ==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r432372631", "bodyText": "It is the wrong description, it should specify that it uses options to build the query.", "author": "edualonso", "createdAt": "2020-05-29T09:40:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4MzM5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4MzQ0OA==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r432283448", "bodyText": "Same for this and most other JavaDoc....this description doesn't say much.", "author": "cmelchior", "createdAt": "2020-05-29T06:38:05Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/mongo/MongoCollection.java", "diffHunk": "@@ -233,18 +255,21 @@ public MongoNamespace getNamespace() {\n      * @param <ResultT>   the target document type of the iterable.\n      * @return the find iterable interface\n      */\n-    // FIXME: fix find implementation - ignore this code for code review\n-    public <ResultT> Task<Iterable<ResultT>> find(final Class<ResultT> resultClass) {\n-        return dispatcher.dispatchTask(() ->\n-                osMongoCollection.find(resultClass)\n-        );\n+    public <ResultT> FindIterable<ResultT> find(final Class<ResultT> resultClass) {\n+        return new FindIterable<>(dispatcher, osMongoCollection.find(resultClass));\n     }\n \n-    // FIXME: fix find implementation - ignore this code for code review\n-    public <ResultT> Task<Iterable<ResultT>> find(final Class<ResultT> resultClass, final FindOptions options) {\n-        return dispatcher.dispatchTask(() ->\n-                osMongoCollection.find(resultClass, options)\n-        );\n+    /**\n+     * Finds all documents in the collection that match the given filter.\n+     *\n+     * @param resultClass the class to decode each document into\n+     * @param options a {@link FindOptions} struct\n+     * @param <ResultT>   the target document type of the iterable.\n+     * @return the find iterable interface", "originalCommit": "7cb3bbf33f6f9892af8da0107f1eb5496eec247b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4NDg3Mg==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r432284872", "bodyText": "Missing Javadoc", "author": "cmelchior", "createdAt": "2020-05-29T06:42:21Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/mongo/iterable/AggregateIterable.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.mongo.iterable;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import io.realm.internal.common.TaskDispatcher;\n+import io.realm.internal.objectstore.OsAggregateIterable;\n+import io.realm.mongodb.mongo.MongoCollection;\n+\n+/**\n+ * Specific iterable for {@link MongoCollection#aggregate(List)} operations.\n+ *\n+ * @param <ResultT> The type to which this iterable will decode documents.\n+ */\n+public class AggregateIterable<ResultT> extends MongoIterable<ResultT> {\n+\n+    private OsAggregateIterable<ResultT> osAggregateIterable;\n+\n+    public AggregateIterable(final TaskDispatcher dispatcher,\n+                             final OsAggregateIterable<ResultT> osAggregateIterable) {\n+        super(dispatcher);\n+        this.osAggregateIterable = osAggregateIterable;\n+    }\n+\n+    @Override", "originalCommit": "7cb3bbf33f6f9892af8da0107f1eb5496eec247b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4MzY2Ng==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r432383666", "bodyText": "Becomes a private method after removing the unnecessary OS classes.", "author": "edualonso", "createdAt": "2020-05-29T10:01:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4NDg3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4NDkxMw==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r432284913", "bodyText": "Same", "author": "cmelchior", "createdAt": "2020-05-29T06:42:26Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/mongo/iterable/AggregateIterable.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.mongo.iterable;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import io.realm.internal.common.TaskDispatcher;\n+import io.realm.internal.objectstore.OsAggregateIterable;\n+import io.realm.mongodb.mongo.MongoCollection;\n+\n+/**\n+ * Specific iterable for {@link MongoCollection#aggregate(List)} operations.\n+ *\n+ * @param <ResultT> The type to which this iterable will decode documents.\n+ */\n+public class AggregateIterable<ResultT> extends MongoIterable<ResultT> {\n+\n+    private OsAggregateIterable<ResultT> osAggregateIterable;\n+\n+    public AggregateIterable(final TaskDispatcher dispatcher,\n+                             final OsAggregateIterable<ResultT> osAggregateIterable) {\n+        super(dispatcher);\n+        this.osAggregateIterable = osAggregateIterable;\n+    }\n+\n+    @Override\n+    Collection<ResultT> getCollection() {\n+        return osAggregateIterable.getCollection();\n+    }\n+\n+    @Override", "originalCommit": "7cb3bbf33f6f9892af8da0107f1eb5496eec247b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4MzczNg==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r432383736", "bodyText": "Same as above.", "author": "edualonso", "createdAt": "2020-05-29T10:01:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4NDkxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4NTAxNA==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r432285014", "bodyText": "Javadoc", "author": "cmelchior", "createdAt": "2020-05-29T06:42:41Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/mongo/iterable/FindIterable.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.mongo.iterable;\n+\n+import org.bson.conversions.Bson;\n+\n+import java.util.Collection;\n+\n+import javax.annotation.Nullable;\n+\n+import io.realm.internal.common.TaskDispatcher;\n+import io.realm.internal.objectstore.OsFindIterable;\n+import io.realm.mongodb.mongo.MongoCollection;\n+\n+/**\n+ * Specific iterable for {@link MongoCollection#find()} operations.\n+ *\n+ * @param <ResultT> The type to which this iterable will decode documents.\n+ */\n+public class FindIterable<ResultT> extends MongoIterable<ResultT> {\n+\n+    private final OsFindIterable<ResultT> osFindIterable;\n+\n+    public FindIterable(final TaskDispatcher dispatcher,\n+                        final OsFindIterable<ResultT> osFindIterable) {\n+        super(dispatcher);\n+        this.osFindIterable = osFindIterable;\n+    }\n+\n+    @Override", "originalCommit": "7cb3bbf33f6f9892af8da0107f1eb5496eec247b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4Mzg1Ng==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r432383856", "bodyText": "Same as above.", "author": "edualonso", "createdAt": "2020-05-29T10:02:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4NTAxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4NTA0NA==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r432285044", "bodyText": "Javadoc", "author": "cmelchior", "createdAt": "2020-05-29T06:42:46Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/mongo/iterable/FindIterable.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.mongo.iterable;\n+\n+import org.bson.conversions.Bson;\n+\n+import java.util.Collection;\n+\n+import javax.annotation.Nullable;\n+\n+import io.realm.internal.common.TaskDispatcher;\n+import io.realm.internal.objectstore.OsFindIterable;\n+import io.realm.mongodb.mongo.MongoCollection;\n+\n+/**\n+ * Specific iterable for {@link MongoCollection#find()} operations.\n+ *\n+ * @param <ResultT> The type to which this iterable will decode documents.\n+ */\n+public class FindIterable<ResultT> extends MongoIterable<ResultT> {\n+\n+    private final OsFindIterable<ResultT> osFindIterable;\n+\n+    public FindIterable(final TaskDispatcher dispatcher,\n+                        final OsFindIterable<ResultT> osFindIterable) {\n+        super(dispatcher);\n+        this.osFindIterable = osFindIterable;\n+    }\n+\n+    @Override\n+    Collection<ResultT> getCollection() {\n+        return osFindIterable.getCollection();\n+    }\n+\n+    @Override", "originalCommit": "7cb3bbf33f6f9892af8da0107f1eb5496eec247b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4NTI4NA==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r432285284", "bodyText": "This doesn't say anything the name of the class doesn't. Maybe expand on what the class actually is for?", "author": "cmelchior", "createdAt": "2020-05-29T06:43:24Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/mongo/iterable/MongoCursor.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.mongo.iterable;\n+\n+import com.google.android.gms.tasks.Task;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Mongo Cursor class.", "originalCommit": "7cb3bbf33f6f9892af8da0107f1eb5496eec247b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4NTQ3Mg==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r432285472", "bodyText": "This doesn't look right, it returns a ResultT?", "author": "cmelchior", "createdAt": "2020-05-29T06:44:01Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/mongo/iterable/MongoCursor.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.mongo.iterable;\n+\n+import com.google.android.gms.tasks.Task;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The Mongo Cursor class.\n+ * <p>\n+ * An application should ensure that a cursor is closed in all circumstances, e.g. using a\n+ * try-with-resources statement.\n+ *\n+ * @param <ResultT> The type of documents the cursor contains\n+ */\n+public class MongoCursor<ResultT> implements Iterator<ResultT> {\n+\n+    private final Iterator<ResultT> iterator;\n+\n+    MongoCursor(Iterator<ResultT> iterator) {\n+        this.iterator = iterator;\n+    }\n+\n+    /**\n+     * Returns whether or not there is a next document to retrieve with {@code next()}.\n+     *\n+     * @return A {@link Task} containing whether or not there is a next document to\n+     * retrieve with {@code next()}.\n+     */\n+    @Override\n+    public boolean hasNext() {\n+        return iterator.hasNext();\n+    }\n+\n+    /**\n+     * Returns the next document.\n+     *\n+     * @return A {@link Task} containing the next document if available or a failed task with", "originalCommit": "7cb3bbf33f6f9892af8da0107f1eb5496eec247b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI5OTk5OA==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r432299998", "bodyText": "Possible paste error when took the description from Stitch.", "author": "edualonso", "createdAt": "2020-05-29T07:20:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4NTQ3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4NTczNg==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r432285736", "bodyText": "Good description \ud83d\udc4d", "author": "cmelchior", "createdAt": "2020-05-29T06:44:47Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/mongo/iterable/MongoIterable.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.mongo.iterable;\n+\n+import com.google.android.gms.tasks.Task;\n+\n+import java.util.Collection;\n+\n+import io.realm.internal.common.TaskDispatcher;\n+\n+/**\n+ * The MongoIterable is the results from an operation, such as a query.", "originalCommit": "7cb3bbf33f6f9892af8da0107f1eb5496eec247b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3ed62b02c00a6c0f461110513fb9bb0a1ffd4c98", "url": "https://github.com/realm/realm-java/commit/3ed62b02c00a6c0f461110513fb9bb0a1ffd4c98", "message": "Removed unnecessary OS classes for the iterables and added missing and fixed wrong documentation", "committedDate": "2020-05-29T10:32:56Z", "type": "commit"}, {"oid": "2a8baa0917ddf9a103cf1723cbe6cf9fbd63f2e5", "url": "https://github.com/realm/realm-java/commit/2a8baa0917ddf9a103cf1723cbe6cf9fbd63f2e5", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-find", "committedDate": "2020-06-02T10:58:30Z", "type": "commit"}, {"oid": "297b1b728716a52dc8d16c4c503d3ddab12d4024", "url": "https://github.com/realm/realm-java/commit/297b1b728716a52dc8d16c4c503d3ddab12d4024", "message": "Renamed test and update pointer to OS latest v10", "committedDate": "2020-06-02T11:41:09Z", "type": "commit"}, {"oid": "deb4b520c1c04af872b26ffcbdfc406f6ce212de", "url": "https://github.com/realm/realm-java/commit/deb4b520c1c04af872b26ffcbdfc406f6ce212de", "message": "Added error handling for encoding/decoding Bsons directly in the protocol rather than in the callers.", "committedDate": "2020-06-02T13:58:14Z", "type": "commit"}, {"oid": "17a173761452546109626a111fff28da5ab2bfe4", "url": "https://github.com/realm/realm-java/commit/17a173761452546109626a111fff28da5ab2bfe4", "message": "Updated OS and added missing callback to findOneAndDelete after update", "committedDate": "2020-06-02T14:05:36Z", "type": "commit"}, {"oid": "aa224407678a6d9fcfadd68ecfac1b6ac0b6153b", "url": "https://github.com/realm/realm-java/commit/aa224407678a6d9fcfadd68ecfac1b6ac0b6153b", "message": "Cleanup", "committedDate": "2020-06-02T21:18:55Z", "type": "commit"}, {"oid": "538cf0ed511bb7fdd4c1af6dfe3f7d10b171a7a7", "url": "https://github.com/realm/realm-java/commit/538cf0ed511bb7fdd4c1af6dfe3f7d10b171a7a7", "message": "Fixed bogus logic in bson protocol guards", "committedDate": "2020-06-03T08:30:09Z", "type": "commit"}, {"oid": "715aa149cf52c29c7860014dc1abfd298d49bb15", "url": "https://github.com/realm/realm-java/commit/715aa149cf52c29c7860014dc1abfd298d49bb15", "message": "Removed redundant method", "committedDate": "2020-06-03T08:35:55Z", "type": "commit"}, {"oid": "a1fc1dbde28933fa3b7738b81942ea820a5e1b4b", "url": "https://github.com/realm/realm-java/commit/a1fc1dbde28933fa3b7738b81942ea820a5e1b4b", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-find\n\n# Conflicts:\n#\trealm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/MongoCollectionTest.kt\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsMongoClient.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsMongoCollection.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/functions/Functions.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/mongo/MongoClient.java", "committedDate": "2020-06-03T10:44:20Z", "type": "commit"}, {"oid": "cedf0a03dbcdc1fa715c83a4249864ac21e5c998", "url": "https://github.com/realm/realm-java/commit/cedf0a03dbcdc1fa715c83a4249864ac21e5c998", "message": "Updated OS pointer", "committedDate": "2020-06-03T11:07:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUwNDAzNQ==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r434504035", "bodyText": "I recall adding getters for App and User on Functions for convenience. But can't recall the use case...maybe something like functions.getApp().getConfiguration().getDefaultCodecRegistry().\nMaybe we should consider adding these for consistency. @cmelchior can you remember the use case?", "author": "rorbech", "createdAt": "2020-06-03T11:42:03Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/mongo/MongoClient.java", "diffHunk": "@@ -18,21 +18,25 @@\n \n import org.bson.codecs.configuration.CodecRegistry;\n \n-import io.realm.mongodb.User;\n import io.realm.internal.Util;\n+import io.realm.internal.common.TaskDispatcher;\n import io.realm.internal.objectstore.OsMongoClient;\n \n /**\n  * The remote MongoClient used for working with data in MongoDB remotely via Realm.\n  */\n abstract public class MongoClient {", "originalCommit": "cedf0a03dbcdc1fa715c83a4249864ac21e5c998", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUwNzc2OQ==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r434507769", "bodyText": "There is already a assertFailsWithErrorCode(expectedCode: ErrorCode, method: () -> Unit) in KotlinTestUtils.kt maybe build on top of that. Could be changes in to a chain'able construct, so you could assert further details like you do.", "author": "rorbech", "createdAt": "2020-06-03T11:49:30Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/MongoClientTest.kt", "diffHunk": "@@ -0,0 +1,1076 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.mongodb\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.Realm\n+import io.realm.TestApp\n+import io.realm.TestHelper\n+import io.realm.mongodb.mongo.MongoClient\n+import io.realm.mongodb.mongo.MongoCollection\n+import io.realm.mongodb.mongo.MongoNamespace\n+import io.realm.mongodb.mongo.options.CountOptions\n+import io.realm.mongodb.mongo.options.FindOneAndModifyOptions\n+import io.realm.mongodb.mongo.options.FindOptions\n+import io.realm.mongodb.mongo.options.UpdateOptions\n+import io.realm.util.blockingGetResult\n+import io.realm.util.mongodb.CustomType\n+import org.bson.Document\n+import org.bson.codecs.configuration.CodecRegistries\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Ignore\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import kotlin.test.*\n+\n+private const val SERVICE_NAME = \"BackingDB\"    // it comes from the test server's BackingDB/config.json\n+private const val DATABASE_NAME = \"test_data\"   // same as above\n+private const val COLLECTION_NAME = \"test_data\"\n+\n+@RunWith(AndroidJUnit4::class)\n+class MongoClientTest {\n+\n+    private lateinit var app: TestApp\n+    private lateinit var user: User\n+    private lateinit var client: MongoClient\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        app = TestApp()\n+        user = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+        client = user.getMongoClient(SERVICE_NAME)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        with(getCollectionInternal()) {\n+            deleteMany(Document()).blockingGetResult()\n+        }\n+\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun count() {\n+        with(getCollectionInternal()) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(\"hello\", \"world\")\n+            val doc1 = Document(rawDoc)\n+            val doc2 = Document(rawDoc)\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+            insertOne(doc2).blockingGetResult()\n+            assertEquals(2, count().blockingGetResult())\n+\n+            assertEquals(2, count(rawDoc).blockingGetResult())\n+            assertEquals(0, count(Document(\"hello\", \"Friend\")).blockingGetResult())\n+            assertEquals(1, count(rawDoc, CountOptions().limit(1)).blockingGetResult())\n+\n+            assertFailsWith(ObjectServerError::class) {\n+                count(Document(\"\\$who\", 1)).blockingGetResult()\n+            }.also { e ->\n+                assertEquals(ErrorCode.MONGODB_ERROR, e.errorCode)\n+                assertNotNull(e.errorMessage)\n+                assertTrue(e.errorMessage!!.contains(\"operator\", true))\n+            }\n+        }\n+    }\n+\n+    @Test\n+    fun count_fails() {\n+        with(getCollectionInternal()) {\n+            assertFailsWith(ObjectServerError::class) {\n+                count(Document(\"\\$who\", 1)).blockingGetResult()\n+            }.also { e ->\n+                assertEquals(ErrorCode.MONGODB_ERROR, e.errorCode)\n+                assertNotNull(e.errorMessage)\n+                assertTrue(e.errorMessage!!.contains(\"operator\", true))\n+            }\n+        }\n+    }\n+\n+    @Test\n+    fun findOne_nullResult() {\n+        with(getCollectionInternal()) {\n+            // Test findOne() on empty collection with no filter and no options\n+            assertNull(findOne().blockingGetResult())\n+\n+            // Test findOne() with filter that does not match any documents and no options\n+            assertNull(findOne(Document(\"hello\", \"worldDNE\")).blockingGetResult())\n+\n+            val doc1 = Document(\"hello\", \"world1\")\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+\n+            // Test findOne() with filter that does not match any documents and no options\n+            assertNull(findOne(Document(\"hello\", \"worldDNE\")).blockingGetResult())\n+        }\n+    }\n+\n+    @Test\n+    fun findOne_singleDocument() {\n+        with(getCollectionInternal()) {\n+            val doc1 = Document(\"hello\", \"world1\")\n+\n+            // Insert one document\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+\n+            // No filter and no options\n+            assertEquals(doc1, findOne().blockingGetResult()!!.withoutId())\n+\n+            // Projection (remove \"_id\") options\n+            val projection = Document(\"hello\", 1).apply { this[\"_id\"] = 0 }\n+            var options = FindOptions()\n+                    .limit(2)\n+                    .projection(projection)\n+            assertEquals(doc1, findOne(Document(), options).blockingGetResult()!!)\n+\n+            // Projection (remove \"_id\") and sort (by desc \"hello\") options\n+            options = FindOptions()\n+                    .limit(2)\n+                    .projection(projection)\n+                    .sort(Document(\"hello\", -1))\n+            assertEquals(doc1, findOne(Document(), options).blockingGetResult()!!)\n+        }\n+    }\n+\n+    @Test\n+    fun findOne_multipleDocuments() {\n+        with(getCollectionInternal()) {\n+            val doc1 = Document(\"hello\", \"world1\")\n+            val doc2 = Document(\"hello\", \"world2\")\n+            val doc3 = Document(\"hello\", \"world3\")\n+\n+            // Insert 3 documents\n+            insertMany(listOf(doc1, doc2, doc3)).blockingGetResult()\n+            assertEquals(3, count().blockingGetResult())\n+\n+            // Projection (remove \"_id\") and sort (by asc \"hello\") options\n+            val projection = Document(\"hello\", 1).apply { this[\"_id\"] = 0 }\n+            var options = FindOptions()\n+                    .limit(2)\n+                    .projection(projection)\n+                    .sort(Document(\"hello\", 1))\n+            assertEquals(doc1, findOne(Document(), options).blockingGetResult()!!)\n+\n+            // Projection (remove \"_id\") and sort (by desc \"hello\") options\n+            options = FindOptions()\n+                    .limit(2)\n+                    .projection(projection)\n+                    .sort(Document(\"hello\", -1))\n+            assertEquals(doc3, findOne(Document(), options).blockingGetResult()!!)\n+        }\n+    }\n+\n+    @Test\n+    fun findOne_fails() {\n+        with(getCollectionInternal()) {\n+            assertFailsWith(ObjectServerError::class) {\n+                findOne(Document(\"\\$who\", 1)).blockingGetResult()\n+            }.also { e ->\n+                assertEquals(ErrorCode.MONGODB_ERROR, e.errorCode)\n+                assertNotNull(e.errorMessage)\n+                assertTrue(e.errorMessage!!.contains(\"operator\", true))\n+            }\n+        }\n+    }\n+\n+    @Test\n+    fun find() {\n+        with(getCollectionInternal()) {\n+            // Find on an empty collection returns false on hasNext and null on first\n+            var iter = find()\n+            assertFalse(iter.iterator().blockingGetResult()!!.hasNext())\n+            assertNull(iter.first().blockingGetResult())\n+\n+            val doc1 = Document(\"hello\", \"world\")\n+            val doc2 = Document(\"hello\", \"friend\")\n+            doc2[\"proj\"] = \"field\"\n+            insertMany(listOf(doc1, doc2)).blockingGetResult()\n+\n+            // Iterate after inserting two documents\n+            assertTrue(iter.iterator().blockingGetResult()!!.hasNext())\n+            assertEquals(doc1, iter.first().blockingGetResult()!!.withoutId())\n+\n+            // Get next with sort by desc \"_id\" and limit to 1 document\n+            assertEquals(doc2,\n+                    iter.limit(1)\n+                            .sort(Document(\"_id\", -1))\n+                            .iterator().blockingGetResult()!!\n+                            .next().withoutId())\n+\n+            // Find first document\n+            iter = find(doc1)\n+            assertTrue(iter.iterator().blockingGetResult()!!.hasNext())\n+            assertEquals(doc1,\n+                    iter.iterator().blockingGetResult()!!\n+                            .next().withoutId())\n+\n+            // Find with filter for first document\n+            iter = find().filter(doc1)\n+            assertTrue(iter.iterator().blockingGetResult()!!.hasNext())\n+            assertEquals(doc1,\n+                    iter.iterator().blockingGetResult()!!\n+                            .next().withoutId())\n+\n+            // Find with projection shows \"proj\" in result\n+            val expected = Document(\"proj\", \"field\")\n+            assertEquals(expected,\n+                    find(doc2)\n+                            .projection(Document(\"proj\", 1))\n+                            .iterator().blockingGetResult()!!\n+                            .next().withoutId())\n+\n+            // Getting a new iterator returns first element on tryNext\n+            val asyncIter = iter.iterator().blockingGetResult()!!\n+            assertEquals(doc1, asyncIter.tryNext().withoutId())\n+        }\n+    }\n+\n+    @Test\n+    fun find_fails() {\n+        with(getCollectionInternal()) {\n+            assertFailsWith(ObjectServerError::class) {", "originalCommit": "cedf0a03dbcdc1fa715c83a4249864ac21e5c998", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUwODA2NQ==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r434508065", "bodyText": "Same", "author": "rorbech", "createdAt": "2020-06-03T11:50:05Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/MongoClientTest.kt", "diffHunk": "@@ -0,0 +1,1076 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm.mongodb\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.Realm\n+import io.realm.TestApp\n+import io.realm.TestHelper\n+import io.realm.mongodb.mongo.MongoClient\n+import io.realm.mongodb.mongo.MongoCollection\n+import io.realm.mongodb.mongo.MongoNamespace\n+import io.realm.mongodb.mongo.options.CountOptions\n+import io.realm.mongodb.mongo.options.FindOneAndModifyOptions\n+import io.realm.mongodb.mongo.options.FindOptions\n+import io.realm.mongodb.mongo.options.UpdateOptions\n+import io.realm.util.blockingGetResult\n+import io.realm.util.mongodb.CustomType\n+import org.bson.Document\n+import org.bson.codecs.configuration.CodecRegistries\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Before\n+import org.junit.Ignore\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import kotlin.test.*\n+\n+private const val SERVICE_NAME = \"BackingDB\"    // it comes from the test server's BackingDB/config.json\n+private const val DATABASE_NAME = \"test_data\"   // same as above\n+private const val COLLECTION_NAME = \"test_data\"\n+\n+@RunWith(AndroidJUnit4::class)\n+class MongoClientTest {\n+\n+    private lateinit var app: TestApp\n+    private lateinit var user: User\n+    private lateinit var client: MongoClient\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+        app = TestApp()\n+        user = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+        client = user.getMongoClient(SERVICE_NAME)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        with(getCollectionInternal()) {\n+            deleteMany(Document()).blockingGetResult()\n+        }\n+\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun count() {\n+        with(getCollectionInternal()) {\n+            assertEquals(0, count().blockingGetResult())\n+\n+            val rawDoc = Document(\"hello\", \"world\")\n+            val doc1 = Document(rawDoc)\n+            val doc2 = Document(rawDoc)\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+            insertOne(doc2).blockingGetResult()\n+            assertEquals(2, count().blockingGetResult())\n+\n+            assertEquals(2, count(rawDoc).blockingGetResult())\n+            assertEquals(0, count(Document(\"hello\", \"Friend\")).blockingGetResult())\n+            assertEquals(1, count(rawDoc, CountOptions().limit(1)).blockingGetResult())\n+\n+            assertFailsWith(ObjectServerError::class) {\n+                count(Document(\"\\$who\", 1)).blockingGetResult()\n+            }.also { e ->\n+                assertEquals(ErrorCode.MONGODB_ERROR, e.errorCode)\n+                assertNotNull(e.errorMessage)\n+                assertTrue(e.errorMessage!!.contains(\"operator\", true))\n+            }\n+        }\n+    }\n+\n+    @Test\n+    fun count_fails() {\n+        with(getCollectionInternal()) {\n+            assertFailsWith(ObjectServerError::class) {\n+                count(Document(\"\\$who\", 1)).blockingGetResult()\n+            }.also { e ->\n+                assertEquals(ErrorCode.MONGODB_ERROR, e.errorCode)\n+                assertNotNull(e.errorMessage)\n+                assertTrue(e.errorMessage!!.contains(\"operator\", true))\n+            }\n+        }\n+    }\n+\n+    @Test\n+    fun findOne_nullResult() {\n+        with(getCollectionInternal()) {\n+            // Test findOne() on empty collection with no filter and no options\n+            assertNull(findOne().blockingGetResult())\n+\n+            // Test findOne() with filter that does not match any documents and no options\n+            assertNull(findOne(Document(\"hello\", \"worldDNE\")).blockingGetResult())\n+\n+            val doc1 = Document(\"hello\", \"world1\")\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+\n+            // Test findOne() with filter that does not match any documents and no options\n+            assertNull(findOne(Document(\"hello\", \"worldDNE\")).blockingGetResult())\n+        }\n+    }\n+\n+    @Test\n+    fun findOne_singleDocument() {\n+        with(getCollectionInternal()) {\n+            val doc1 = Document(\"hello\", \"world1\")\n+\n+            // Insert one document\n+            insertOne(doc1).blockingGetResult()\n+            assertEquals(1, count().blockingGetResult())\n+\n+            // No filter and no options\n+            assertEquals(doc1, findOne().blockingGetResult()!!.withoutId())\n+\n+            // Projection (remove \"_id\") options\n+            val projection = Document(\"hello\", 1).apply { this[\"_id\"] = 0 }\n+            var options = FindOptions()\n+                    .limit(2)\n+                    .projection(projection)\n+            assertEquals(doc1, findOne(Document(), options).blockingGetResult()!!)\n+\n+            // Projection (remove \"_id\") and sort (by desc \"hello\") options\n+            options = FindOptions()\n+                    .limit(2)\n+                    .projection(projection)\n+                    .sort(Document(\"hello\", -1))\n+            assertEquals(doc1, findOne(Document(), options).blockingGetResult()!!)\n+        }\n+    }\n+\n+    @Test\n+    fun findOne_multipleDocuments() {\n+        with(getCollectionInternal()) {\n+            val doc1 = Document(\"hello\", \"world1\")\n+            val doc2 = Document(\"hello\", \"world2\")\n+            val doc3 = Document(\"hello\", \"world3\")\n+\n+            // Insert 3 documents\n+            insertMany(listOf(doc1, doc2, doc3)).blockingGetResult()\n+            assertEquals(3, count().blockingGetResult())\n+\n+            // Projection (remove \"_id\") and sort (by asc \"hello\") options\n+            val projection = Document(\"hello\", 1).apply { this[\"_id\"] = 0 }\n+            var options = FindOptions()\n+                    .limit(2)\n+                    .projection(projection)\n+                    .sort(Document(\"hello\", 1))\n+            assertEquals(doc1, findOne(Document(), options).blockingGetResult()!!)\n+\n+            // Projection (remove \"_id\") and sort (by desc \"hello\") options\n+            options = FindOptions()\n+                    .limit(2)\n+                    .projection(projection)\n+                    .sort(Document(\"hello\", -1))\n+            assertEquals(doc3, findOne(Document(), options).blockingGetResult()!!)\n+        }\n+    }\n+\n+    @Test\n+    fun findOne_fails() {\n+        with(getCollectionInternal()) {\n+            assertFailsWith(ObjectServerError::class) {\n+                findOne(Document(\"\\$who\", 1)).blockingGetResult()\n+            }.also { e ->\n+                assertEquals(ErrorCode.MONGODB_ERROR, e.errorCode)\n+                assertNotNull(e.errorMessage)\n+                assertTrue(e.errorMessage!!.contains(\"operator\", true))\n+            }\n+        }\n+    }\n+\n+    @Test\n+    fun find() {\n+        with(getCollectionInternal()) {\n+            // Find on an empty collection returns false on hasNext and null on first\n+            var iter = find()\n+            assertFalse(iter.iterator().blockingGetResult()!!.hasNext())\n+            assertNull(iter.first().blockingGetResult())\n+\n+            val doc1 = Document(\"hello\", \"world\")\n+            val doc2 = Document(\"hello\", \"friend\")\n+            doc2[\"proj\"] = \"field\"\n+            insertMany(listOf(doc1, doc2)).blockingGetResult()\n+\n+            // Iterate after inserting two documents\n+            assertTrue(iter.iterator().blockingGetResult()!!.hasNext())\n+            assertEquals(doc1, iter.first().blockingGetResult()!!.withoutId())\n+\n+            // Get next with sort by desc \"_id\" and limit to 1 document\n+            assertEquals(doc2,\n+                    iter.limit(1)\n+                            .sort(Document(\"_id\", -1))\n+                            .iterator().blockingGetResult()!!\n+                            .next().withoutId())\n+\n+            // Find first document\n+            iter = find(doc1)\n+            assertTrue(iter.iterator().blockingGetResult()!!.hasNext())\n+            assertEquals(doc1,\n+                    iter.iterator().blockingGetResult()!!\n+                            .next().withoutId())\n+\n+            // Find with filter for first document\n+            iter = find().filter(doc1)\n+            assertTrue(iter.iterator().blockingGetResult()!!.hasNext())\n+            assertEquals(doc1,\n+                    iter.iterator().blockingGetResult()!!\n+                            .next().withoutId())\n+\n+            // Find with projection shows \"proj\" in result\n+            val expected = Document(\"proj\", \"field\")\n+            assertEquals(expected,\n+                    find(doc2)\n+                            .projection(Document(\"proj\", 1))\n+                            .iterator().blockingGetResult()!!\n+                            .next().withoutId())\n+\n+            // Getting a new iterator returns first element on tryNext\n+            val asyncIter = iter.iterator().blockingGetResult()!!\n+            assertEquals(doc1, asyncIter.tryNext().withoutId())\n+        }\n+    }\n+\n+    @Test\n+    fun find_fails() {\n+        with(getCollectionInternal()) {\n+            assertFailsWith(ObjectServerError::class) {\n+                find(Document(\"\\$who\", 1)).first().blockingGetResult()\n+            }.also { e ->\n+                assertEquals(ErrorCode.MONGODB_ERROR, e.errorCode)\n+                assertNotNull(e.errorMessage)\n+                assertTrue(e.errorMessage!!.contains(\"operator\", true))\n+            }\n+        }\n+    }\n+\n+    @Test\n+    fun aggregate() {\n+        with(getCollectionInternal()) {\n+            // Aggregate on an empty collection returns false on hasNext and null on first\n+            var iter = aggregate(listOf())\n+            assertFalse(iter.iterator().blockingGetResult()!!.hasNext())\n+            assertNull(iter.first().blockingGetResult())\n+\n+            // Iterate after inserting two documents\n+            val doc1 = Document(\"hello\", \"world\")\n+            val doc2 = Document(\"hello\", \"friend\")\n+            insertMany(listOf(doc1, doc2)).blockingGetResult()\n+            assertTrue(iter.iterator().blockingGetResult()!!.hasNext())\n+            assertEquals(doc1.withoutId(), iter.first().blockingGetResult()!!.withoutId())\n+\n+            // Aggregate with pipeline, sort by desc \"_id\" and limit to 1 document\n+            iter = aggregate(listOf(Document(\"\\$sort\", Document(\"_id\", -1)), Document(\"\\$limit\", 1)))\n+            assertEquals(doc2.withoutId(),\n+                    iter.iterator().blockingGetResult()!!\n+                            .next().withoutId())\n+\n+            // Aggregate with pipeline, match first document\n+            iter = aggregate(listOf(Document(\"\\$match\", doc1)))\n+            assertTrue(iter.iterator().blockingGetResult()!!.hasNext())\n+            assertEquals(doc1.withoutId(), iter.iterator().blockingGetResult()!!.next().withoutId())\n+        }\n+    }\n+\n+    @Test\n+    fun aggregate_fails() {\n+        with(getCollectionInternal()) {\n+            assertFailsWith(ObjectServerError::class) {", "originalCommit": "cedf0a03dbcdc1fa715c83a4249864ac21e5c998", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "66eb16dec6189aa889fd84622a41ea27910a094f", "url": "https://github.com/realm/realm-java/commit/66eb16dec6189aa889fd84622a41ea27910a094f", "message": "Implemented suggestions for handling ObjectServer exceptions more generically and some more cleanup in test", "committedDate": "2020-06-03T13:06:13Z", "type": "commit"}, {"oid": "607f8180448cde4c3716dfa32c83d074b1909ed4", "url": "https://github.com/realm/realm-java/commit/607f8180448cde4c3716dfa32c83d074b1909ed4", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-find", "committedDate": "2020-06-03T13:06:49Z", "type": "commit"}, {"oid": "62242335489716b00889ef7c325beea287ddce66", "url": "https://github.com/realm/realm-java/commit/62242335489716b00889ef7c325beea287ddce66", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-find", "committedDate": "2020-06-03T18:53:43Z", "type": "commit"}, {"oid": "6cff069be55c354857b9afecbab68d402f629457", "url": "https://github.com/realm/realm-java/commit/6cff069be55c354857b9afecbab68d402f629457", "message": "Changed to Kotlin's foreach", "committedDate": "2020-06-03T19:41:01Z", "type": "commit"}, {"oid": "dfe4f6b91d9019e8f70371ea24c78dd59cb4a606", "url": "https://github.com/realm/realm-java/commit/dfe4f6b91d9019e8f70371ea24c78dd59cb4a606", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-find\n\n# Conflicts:\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/User.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/mongo/MongoClient.java", "committedDate": "2020-06-04T07:12:21Z", "type": "commit"}, {"oid": "4311dbfe5ddc7ef7d0c22e256a9a6f0093c3c265", "url": "https://github.com/realm/realm-java/commit/4311dbfe5ddc7ef7d0c22e256a9a6f0093c3c265", "message": "First iteration: added GMS library (possibly temporarily) to avoid introducing immediate breaking changes in how we process asynchronous operations with AsyncRealmTask. All original Stitch interfaces and proxies have been discarded in favour of Java classes (although this approach might be changed). Some interfaces connected to the collection's iterables have been omitted as it is unclear whether they will be needed or not for the time being.", "committedDate": "2020-04-16T12:48:37Z", "type": "commit"}, {"oid": "12a6ea4ce101c9448d84ec1793f93457cf22a48a", "url": "https://github.com/realm/realm-java/commit/12a6ea4ce101c9448d84ec1793f93457cf22a48a", "message": "Added licences to class headers plus a bit of cleanup", "committedDate": "2020-04-17T11:20:56Z", "type": "commit"}, {"oid": "9d69273176733c69855147230e841597a5e33ee1", "url": "https://github.com/realm/realm-java/commit/9d69273176733c69855147230e841597a5e33ee1", "message": "Added latest API methods and necessary classes", "committedDate": "2020-04-17T13:35:47Z", "type": "commit"}, {"oid": "11dcd85ade762ec524a4adf5cb7ffd22f1c8ae0b", "url": "https://github.com/realm/realm-java/commit/11dcd85ade762ec524a4adf5cb7ffd22f1c8ae0b", "message": "Added remote mongo client and remote database, their respective Os files and part of the native logic", "committedDate": "2020-04-24T12:24:06Z", "type": "commit"}, {"oid": "c6c92e992267d693e9916e7a82c886f2eac4bf6b", "url": "https://github.com/realm/realm-java/commit/c6c92e992267d693e9916e7a82c886f2eac4bf6b", "message": "Moved JNI callbacks outside RealmApp and added more remote collection classes", "committedDate": "2020-04-27T13:27:41Z", "type": "commit"}, {"oid": "f09c10397bd271a6b9e757ae5e2074c313f88ef3", "url": "https://github.com/realm/realm-java/commit/f09c10397bd271a6b9e757ae5e2074c313f88ef3", "message": "Updated object store branch to v10 and fixed wrong use of count call", "committedDate": "2020-04-27T14:33:15Z", "type": "commit"}, {"oid": "a3988dee91afd1aea6d692d768b691265c3d41d2", "url": "https://github.com/realm/realm-java/commit/a3988dee91afd1aea6d692d768b691265c3d41d2", "message": "Merge branch 'el/remote-mongodb-client' into el/remote-mongodb-client-scaffold\n\n# Conflicts:\n#\trealm/realm-library/src/main/cpp/object-store\n#\trealm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "committedDate": "2020-04-28T09:58:09Z", "type": "commit"}, {"oid": "c3936bf7734d617ae9f313d360b6af9a4f7d5e1d", "url": "https://github.com/realm/realm-java/commit/c3936bf7734d617ae9f313d360b6af9a4f7d5e1d", "message": "Cleanup", "committedDate": "2020-04-28T10:04:46Z", "type": "commit"}, {"oid": "a10c2ee24b1e4868c44c4a7d130f2d300c60cc68", "url": "https://github.com/realm/realm-java/commit/a10c2ee24b1e4868c44c4a7d130f2d300c60cc68", "message": "Added task-related classes from Stitch", "committedDate": "2020-04-28T14:09:45Z", "type": "commit"}, {"oid": "1c2933f6aea4bd2bae967bda5f397e01cec71827", "url": "https://github.com/realm/realm-java/commit/1c2933f6aea4bd2bae967bda5f397e01cec71827", "message": "First steps towards using tasks for the count operation", "committedDate": "2020-04-28T14:15:10Z", "type": "commit"}, {"oid": "082070dd755f28baa1075eef2aeb655a2c087f90", "url": "https://github.com/realm/realm-java/commit/082070dd755f28baa1075eef2aeb655a2c087f90", "message": "Added preliminary collection test, only with scaffolding for \"count\", but still not working as the OS code isn't fully ready yet. Moved Realm initialisation in test cases outside TestRealmApp to setUp method as agreed internally, plus fixed some wrong implementation in the interop layer. Also updated dependencies list to fetch sync version 10 alpha 9 instead of 8.", "committedDate": "2020-05-01T12:06:02Z", "type": "commit"}, {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593", "url": "https://github.com/realm/realm-java/commit/0d1b58cc5c0c067b2c1afb0331b6633ff11b8593", "message": "Fixed wrong finalizer methods and cleanup to interop files", "committedDate": "2020-05-01T12:17:52Z", "type": "commit"}, {"oid": "ecc7963da89e24dd128f4723b144a7a0a4aa2f0f", "url": "https://github.com/realm/realm-java/commit/ecc7963da89e24dd128f4723b144a7a0a4aa2f0f", "message": "Merge branch 'el/remote-mongodb-client-scaffold' into el/remote-mongodb-client-gms-tasks", "committedDate": "2020-05-01T12:30:03Z", "type": "commit"}, {"oid": "540bdf5b6d5a9a5c96a80d08d3592cccf19de756", "url": "https://github.com/realm/realm-java/commit/540bdf5b6d5a9a5c96a80d08d3592cccf19de756", "message": "Merge branch 'el/remote-mongodb-client-gms-tasks' into el/remote-mongodb-client-collection-count", "committedDate": "2020-05-01T12:33:07Z", "type": "commit"}, {"oid": "a184dc7026c12bd8a296a7d885f0e3d53a2369dc", "url": "https://github.com/realm/realm-java/commit/a184dc7026c12bd8a296a7d885f0e3d53a2369dc", "message": "Moved TaskUtils to tests", "committedDate": "2020-05-01T12:58:27Z", "type": "commit"}, {"oid": "c8d8574e3016fa72fe6beabcf025600b3725e9d7", "url": "https://github.com/realm/realm-java/commit/c8d8574e3016fa72fe6beabcf025600b3725e9d7", "message": "test", "committedDate": "2020-05-01T13:06:53Z", "type": "commit"}, {"oid": "f347df54dc6d792b70cb39a006a01346ee4c7665", "url": "https://github.com/realm/realm-java/commit/f347df54dc6d792b70cb39a006a01346ee4c7665", "message": "cleanup", "committedDate": "2020-05-01T13:07:23Z", "type": "commit"}, {"oid": "55416d01adab692b3c258c8555cf2dd1d4435815", "url": "https://github.com/realm/realm-java/commit/55416d01adab692b3c258c8555cf2dd1d4435815", "message": "Moved classes", "committedDate": "2020-05-01T16:19:57Z", "type": "commit"}, {"oid": "df8f51161bc9b2a13bf70c3d07392c1e7086fdb6", "url": "https://github.com/realm/realm-java/commit/df8f51161bc9b2a13bf70c3d07392c1e7086fdb6", "message": "Merge branch 'v10' into el/remote-mongodb-client-gms-tasks\n\n# Conflicts:\n#\trealm/realm-library/build.gradle\n#\trealm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoClient.cpp\n#\trealm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoCollection.cpp\n#\trealm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoDatabase.cpp\n#\trealm/realm-library/src/main/cpp/object-store\n#\trealm/realm-library/src/objectServer/java/io/realm/RealmUser.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/common/AsyncAdapter.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/common/Callback.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/common/CallbackAsyncAdapter.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/jni/OsJNIVoidResultCallback.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoClient.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoCollection.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoDatabase.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/MongoNamespace.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/RealmMongoDBCollection.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/RealmMongoDBDatabase.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/RealmMongoDBService.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/RemoteMongoClient.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/RemoteMongoCollection.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/RemoteMongoDatabase.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/remote/RemoteDeleteResult.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/remote/aggregate/RemoteAggregateIterable.java", "committedDate": "2020-05-01T16:31:00Z", "type": "commit"}, {"oid": "ae9950ea40c4850eb94c2ab104f37a783977f3b1", "url": "https://github.com/realm/realm-java/commit/ae9950ea40c4850eb94c2ab104f37a783977f3b1", "message": "Updated OS pointer", "committedDate": "2020-05-01T16:43:21Z", "type": "commit"}, {"oid": "b96e4b1a9e279c7f1e31ea352ac5ff914e7915a6", "url": "https://github.com/realm/realm-java/commit/b96e4b1a9e279c7f1e31ea352ac5ff914e7915a6", "message": "Moved classes", "committedDate": "2020-05-01T16:46:23Z", "type": "commit"}, {"oid": "a12be02fce6e3eca375b67b08580e985d70744cd", "url": "https://github.com/realm/realm-java/commit/a12be02fce6e3eca375b67b08580e985d70744cd", "message": "Merge branch 'el/remote-mongodb-client-gms-tasks' into el/remote-mongodb-client-collection-count\n\n# Conflicts:\n#\tdependencies.list\n#\trealm/realm-library/src/main/cpp/object-store\n#\trealm/realm-library/src/objectServer/java/io/realm/RealmUser.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoCollection.java", "committedDate": "2020-05-01T16:50:23Z", "type": "commit"}, {"oid": "7695d14936b5bcb8f7b24ac465554042bed9f3ae", "url": "https://github.com/realm/realm-java/commit/7695d14936b5bcb8f7b24ac465554042bed9f3ae", "message": "Removed duplicate entries in CMakeLists", "committedDate": "2020-05-01T16:53:21Z", "type": "commit"}, {"oid": "81bfca1053ff6daf554c2fbc751a54a104df68d3", "url": "https://github.com/realm/realm-java/commit/81bfca1053ff6daf554c2fbc751a54a104df68d3", "message": "Merge branch 'el/remote-mongodb-client-gms-tasks' into el/remote-mongodb-client-collection-count", "committedDate": "2020-05-01T16:53:39Z", "type": "commit"}, {"oid": "51f5c649456a181b5249828a447228c33c8ff176", "url": "https://github.com/realm/realm-java/commit/51f5c649456a181b5249828a447228c33c8ff176", "message": "Added documentClass property to internal collection class", "committedDate": "2020-05-04T08:29:57Z", "type": "commit"}, {"oid": "9187479f2565e28561c06f1ee79cece5c5f225f6", "url": "https://github.com/realm/realm-java/commit/9187479f2565e28561c06f1ee79cece5c5f225f6", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-count", "committedDate": "2020-05-04T08:38:37Z", "type": "commit"}, {"oid": "0ea57d11adc2f94db41f5defe53e4ad8438d4ed3", "url": "https://github.com/realm/realm-java/commit/0ea57d11adc2f94db41f5defe53e4ad8438d4ed3", "message": "updated OS pointer", "committedDate": "2020-05-04T08:39:05Z", "type": "commit"}, {"oid": "7ef4c7a8bfbd33215a7b5158b349dceb550516d2", "url": "https://github.com/realm/realm-java/commit/7ef4c7a8bfbd33215a7b5158b349dceb550516d2", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-count", "committedDate": "2020-05-04T09:36:53Z", "type": "commit"}, {"oid": "d47441a087d4264f632b57613eb22190e53a0149", "url": "https://github.com/realm/realm-java/commit/d47441a087d4264f632b57613eb22190e53a0149", "message": "Merge branch 'v10' into el/remote-mongodb-client-gms-tasks", "committedDate": "2020-05-04T12:35:18Z", "type": "commit"}, {"oid": "7918f41d494d4d95840a545ef927a3917bee7414", "url": "https://github.com/realm/realm-java/commit/7918f41d494d4d95840a545ef927a3917bee7414", "message": "Merge branch 'el/remote-mongodb-client-gms-tasks' into el/remote-mongodb-client-collection-count", "committedDate": "2020-05-04T12:44:12Z", "type": "commit"}, {"oid": "30aba6dcffafc164c2f02cf332e499b7a91d6de2", "url": "https://github.com/realm/realm-java/commit/30aba6dcffafc164c2f02cf332e499b7a91d6de2", "message": "updated OS pointer", "committedDate": "2020-05-04T12:44:50Z", "type": "commit"}, {"oid": "417b7cbe0e7c36ae2a89413b2d7aecb1c3521979", "url": "https://github.com/realm/realm-java/commit/417b7cbe0e7c36ae2a89413b2d7aecb1c3521979", "message": "added suppresswarnings for ignored futures - issue inherited from Stitch's task framework - test to see if Jenkins swallows it", "committedDate": "2020-05-04T16:49:31Z", "type": "commit"}, {"oid": "47f96ebb5e652c0cf18cc9e9e73ef35860f8bfa6", "url": "https://github.com/realm/realm-java/commit/47f96ebb5e652c0cf18cc9e9e73ef35860f8bfa6", "message": "Merge branch 'el/remote-mongodb-client-gms-tasks' into el/remote-mongodb-client-collection-count", "committedDate": "2020-05-05T07:11:41Z", "type": "commit"}, {"oid": "d71835a06bfc864b3f031f60c3bde42ca509c251", "url": "https://github.com/realm/realm-java/commit/d71835a06bfc864b3f031f60c3bde42ca509c251", "message": "wip", "committedDate": "2020-05-05T07:11:49Z", "type": "commit"}, {"oid": "bc45ce48350914fcae97eb4c48b120e0fc5788df", "url": "https://github.com/realm/realm-java/commit/bc45ce48350914fcae97eb4c48b120e0fc5788df", "message": "Added test for Task.blockingGet and wip on insertOne", "committedDate": "2020-05-05T10:55:57Z", "type": "commit"}, {"oid": "0f673e499070a9c32e4906ddb61dd5556f9c040e", "url": "https://github.com/realm/realm-java/commit/0f673e499070a9c32e4906ddb61dd5556f9c040e", "message": "Added insertmany", "committedDate": "2020-05-05T12:01:48Z", "type": "commit"}, {"oid": "35195b752bb70cae7653f466e33470150ab57a5c", "url": "https://github.com/realm/realm-java/commit/35195b752bb70cae7653f466e33470150ab57a5c", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-insert-one", "committedDate": "2020-05-05T13:14:20Z", "type": "commit"}, {"oid": "fb4d199c46f16b828ae8f4d5aa67a02e170c28e3", "url": "https://github.com/realm/realm-java/commit/fb4d199c46f16b828ae8f4d5aa67a02e170c28e3", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-insert-one\n\n# Conflicts:\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/common/ThreadDispatcher.java", "committedDate": "2020-05-06T08:02:52Z", "type": "commit"}, {"oid": "e7677cf35902f1bf5323dfcffcbcb1b48c233eb1", "url": "https://github.com/realm/realm-java/commit/e7677cf35902f1bf5323dfcffcbcb1b48c233eb1", "message": "Added more meaningful tests for count and insert. Temporarily commented out some code in EmailPasswordAuth.cpp after updating OS to v10. Now the remoteMongoClient is fetched as a shared_ptr in our interop layer. Added codec handling for RemoteMongoDatabase and document class for RemoteMongoCollection", "committedDate": "2020-05-07T15:12:19Z", "type": "commit"}, {"oid": "224276f08a4dabb05f64c6fa2cc05ec6282b4a66", "url": "https://github.com/realm/realm-java/commit/224276f08a4dabb05f64c6fa2cc05ec6282b4a66", "message": "Work in progress - insertMany and interop", "committedDate": "2020-05-08T15:12:58Z", "type": "commit"}, {"oid": "136387f30adc886a5686a7108df0a46d6a8dab89", "url": "https://github.com/realm/realm-java/commit/136387f30adc886a5686a7108df0a46d6a8dab89", "message": "Added deleteOne", "committedDate": "2020-05-08T16:58:24Z", "type": "commit"}, {"oid": "f24af3dd2dda132fe86c1fbc7ca525c1b1593869", "url": "https://github.com/realm/realm-java/commit/f24af3dd2dda132fe86c1fbc7ca525c1b1593869", "message": "Added deleteMany and adjusted visibility of OS constructors", "committedDate": "2020-05-08T21:50:52Z", "type": "commit"}, {"oid": "c39ac1167251cb98ab3d36e164ad870829794ffa", "url": "https://github.com/realm/realm-java/commit/c39ac1167251cb98ab3d36e164ad870829794ffa", "message": "wip", "committedDate": "2020-05-08T22:15:33Z", "type": "commit"}, {"oid": "9978855ef3f4c4817daccf7d287e8961337586d5", "url": "https://github.com/realm/realm-java/commit/9978855ef3f4c4817daccf7d287e8961337586d5", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-insert-one\n\n# Conflicts:\n#\trealm/realm-library/src/main/cpp/io_realm_EmailPasswordAuth.cpp\n#\trealm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoCollection.cpp\n#\trealm/realm-library/src/main/cpp/jni_util/bson_util.cpp\n#\trealm/realm-library/src/main/cpp/jni_util/bson_util.hpp\n#\trealm/realm-library/src/objectServer/java/io/realm/EmailPasswordAuth.java\n#\trealm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "committedDate": "2020-05-11T10:00:33Z", "type": "commit"}, {"oid": "650169f3a2630dca8d8e6504891685209fbcb034", "url": "https://github.com/realm/realm-java/commit/650169f3a2630dca8d8e6504891685209fbcb034", "message": "Updated pointer to OS", "committedDate": "2020-05-11T10:01:06Z", "type": "commit"}, {"oid": "8e3b991bf188d689871862df7e704d27dbfa0f69", "url": "https://github.com/realm/realm-java/commit/8e3b991bf188d689871862df7e704d27dbfa0f69", "message": "Restored curly braces", "committedDate": "2020-05-11T10:03:27Z", "type": "commit"}, {"oid": "68c098ea7b200fbaebfbfd4f6400c64f7199d544", "url": "https://github.com/realm/realm-java/commit/68c098ea7b200fbaebfbfd4f6400c64f7199d544", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-insert-one", "committedDate": "2020-05-11T10:03:54Z", "type": "commit"}, {"oid": "62f29e92c38f89ae720d51d04eaa1a177732bc2e", "url": "https://github.com/realm/realm-java/commit/62f29e92c38f89ae720d51d04eaa1a177732bc2e", "message": "Removed unnecessary codec parameter in getDatabase", "committedDate": "2020-05-11T10:09:16Z", "type": "commit"}, {"oid": "5d2fe8b25c1d36be50b3dcc2efdd90c24fb9c047", "url": "https://github.com/realm/realm-java/commit/5d2fe8b25c1d36be50b3dcc2efdd90c24fb9c047", "message": "Added findOne and proper use of the BSON parsing protocol for handling, delivering and decoding results from the JNI", "committedDate": "2020-05-13T10:41:21Z", "type": "commit"}, {"oid": "e03e8d389075223c8b2b466fdf28f0238e2abb1c", "url": "https://github.com/realm/realm-java/commit/e03e8d389075223c8b2b466fdf28f0238e2abb1c", "message": "Updated OS pointer to branch that contains parsing fixes - update to OS v10 as soon as it is merged", "committedDate": "2020-05-13T10:41:50Z", "type": "commit"}, {"oid": "783dc6d7f474355fde2dde87433058034190f55e", "url": "https://github.com/realm/realm-java/commit/783dc6d7f474355fde2dde87433058034190f55e", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-insert-one", "committedDate": "2020-05-13T10:43:09Z", "type": "commit"}, {"oid": "1b443d7a877a5f6d5e09605235d50be9e34dd9d1", "url": "https://github.com/realm/realm-java/commit/1b443d7a877a5f6d5e09605235d50be9e34dd9d1", "message": "Added missing findOne implementations and updated OS pointer", "committedDate": "2020-05-13T16:23:17Z", "type": "commit"}, {"oid": "46eaaa91a8b4c8f07972e489c0904f199cc1401e", "url": "https://github.com/realm/realm-java/commit/46eaaa91a8b4c8f07972e489c0904f199cc1401e", "message": "fixed unboxing that caused findbugs to complain", "committedDate": "2020-05-14T06:32:45Z", "type": "commit"}, {"oid": "bb2d17318bbd967a99b8897e554d278f1c74b7ce", "url": "https://github.com/realm/realm-java/commit/bb2d17318bbd967a99b8897e554d278f1c74b7ce", "message": "First batch of cleanup", "committedDate": "2020-05-14T13:21:09Z", "type": "commit"}, {"oid": "22ae2589de45f2f5d0682dd177de9c11c53162fc", "url": "https://github.com/realm/realm-java/commit/22ae2589de45f2f5d0682dd177de9c11c53162fc", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-insert-one", "committedDate": "2020-05-14T13:22:13Z", "type": "commit"}, {"oid": "d59fba6b51796079fa95a2f924db710044e9de84", "url": "https://github.com/realm/realm-java/commit/d59fba6b51796079fa95a2f924db710044e9de84", "message": "Addressed error handling in interop layer plus more cleanup", "committedDate": "2020-05-14T16:07:42Z", "type": "commit"}, {"oid": "e8872a980a551fd773ec9aeabe246a423f2ffa7e", "url": "https://github.com/realm/realm-java/commit/e8872a980a551fd773ec9aeabe246a423f2ffa7e", "message": "Moved classes to new packages and removed \"remote\" prefix from class names", "committedDate": "2020-05-14T16:56:05Z", "type": "commit"}, {"oid": "6bd91b647bf817ff8bb4a13627bde9b8262fed23", "url": "https://github.com/realm/realm-java/commit/6bd91b647bf817ff8bb4a13627bde9b8262fed23", "message": "Restored wrongly removed public modifier to method", "committedDate": "2020-05-14T17:03:48Z", "type": "commit"}, {"oid": "0d7c5907386577dc8439438af12b453f083ca8ff", "url": "https://github.com/realm/realm-java/commit/0d7c5907386577dc8439438af12b453f083ca8ff", "message": "Renamed OS interop classes", "committedDate": "2020-05-14T17:14:36Z", "type": "commit"}, {"oid": "2266cd0e20e00a932b1190432e5cfc18919a9f20", "url": "https://github.com/realm/realm-java/commit/2266cd0e20e00a932b1190432e5cfc18919a9f20", "message": "Cleanup", "committedDate": "2020-05-15T09:10:09Z", "type": "commit"}, {"oid": "89cb56acffdd8867c27a7c3836d76bffd3e6a8bc", "url": "https://github.com/realm/realm-java/commit/89cb56acffdd8867c27a7c3836d76bffd3e6a8bc", "message": "Final round of cleanup and updated pointer to OS that allegedly fixes failing stress test", "committedDate": "2020-05-15T11:04:34Z", "type": "commit"}, {"oid": "3be7dadd3882307ff18523ab821efe046a17e305", "url": "https://github.com/realm/realm-java/commit/3be7dadd3882307ff18523ab821efe046a17e305", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-insert-one", "committedDate": "2020-05-15T14:02:04Z", "type": "commit"}, {"oid": "ef991caf20c61dfbf64bda99553a144782783acf", "url": "https://github.com/realm/realm-java/commit/ef991caf20c61dfbf64bda99553a144782783acf", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-insert-one", "committedDate": "2020-05-15T18:10:48Z", "type": "commit"}, {"oid": "e82a72f4970f4a2a593d386e69ea2815d3732c02", "url": "https://github.com/realm/realm-java/commit/e82a72f4970f4a2a593d386e69ea2815d3732c02", "message": "Fixed broken tests", "committedDate": "2020-05-15T18:54:57Z", "type": "commit"}, {"oid": "2fb6cf997cb7e305e04419f3c67f66692374cb48", "url": "https://github.com/realm/realm-java/commit/2fb6cf997cb7e305e04419f3c67f66692374cb48", "message": "Added updateOne", "committedDate": "2020-05-15T18:55:05Z", "type": "commit"}, {"oid": "8ff048edba1f8605ff0f5ae1b13c35dabf282279", "url": "https://github.com/realm/realm-java/commit/8ff048edba1f8605ff0f5ae1b13c35dabf282279", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-update\n\n# Conflicts:\n#\trealm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/MongoCollectionTest.kt\n#\trealm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsMongoCollection.cpp\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsMongoCollection.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/mongo/MongoCollection.java", "committedDate": "2020-05-18T07:59:54Z", "type": "commit"}, {"oid": "5d11442b2a8ceee5da6ba745e6acba324776ef3a", "url": "https://github.com/realm/realm-java/commit/5d11442b2a8ceee5da6ba745e6acba324776ef3a", "message": "Renamed missing \"remote\" options and remote classes and added updateMany", "committedDate": "2020-05-18T12:55:32Z", "type": "commit"}, {"oid": "683db0d7706239f753cc3d4d5d0a96075648452c", "url": "https://github.com/realm/realm-java/commit/683db0d7706239f753cc3d4d5d0a96075648452c", "message": "Added findOneAndUpdate", "committedDate": "2020-05-18T13:57:20Z", "type": "commit"}, {"oid": "244510322e6ebf57a339f930a2defc328d169052", "url": "https://github.com/realm/realm-java/commit/244510322e6ebf57a339f930a2defc328d169052", "message": "Added another findOneAndUpdate variant", "committedDate": "2020-05-18T20:59:17Z", "type": "commit"}, {"oid": "1b147e92f33ce054a69191ec6e41f34dcc29ec3f", "url": "https://github.com/realm/realm-java/commit/1b147e92f33ce054a69191ec6e41f34dcc29ec3f", "message": "Removed duplicated code and added findOneAndReplace and Delete variants", "committedDate": "2020-05-19T07:28:23Z", "type": "commit"}, {"oid": "6662cfb226c5faf7a4e1e4958a7898fc11ea2b0b", "url": "https://github.com/realm/realm-java/commit/6662cfb226c5faf7a4e1e4958a7898fc11ea2b0b", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-update", "committedDate": "2020-05-19T07:29:49Z", "type": "commit"}, {"oid": "6355b0558624a849fc3d06ccf6d7ea6bf894cb2f", "url": "https://github.com/realm/realm-java/commit/6355b0558624a849fc3d06ccf6d7ea6bf894cb2f", "message": "Updated OS pointer", "committedDate": "2020-05-19T08:10:37Z", "type": "commit"}, {"oid": "ab17e182c25491df674bb8d3985ff8153696fd6c", "url": "https://github.com/realm/realm-java/commit/ab17e182c25491df674bb8d3985ff8153696fd6c", "message": "Reverted OS pointer", "committedDate": "2020-05-19T16:55:05Z", "type": "commit"}, {"oid": "55a8089cb69a6b515e894df5998082aed52b5344", "url": "https://github.com/realm/realm-java/commit/55a8089cb69a6b515e894df5998082aed52b5344", "message": "Added find", "committedDate": "2020-05-20T10:01:58Z", "type": "commit"}, {"oid": "88f24f2fb25d5de14d81824d95210aa380e4e912", "url": "https://github.com/realm/realm-java/commit/88f24f2fb25d5de14d81824d95210aa380e4e912", "message": "Removed unnecessary classes plus added options to find", "committedDate": "2020-05-20T13:03:02Z", "type": "commit"}, {"oid": "0861c8ff2d04d7fe9d64161750e8e94c58e42260", "url": "https://github.com/realm/realm-java/commit/0861c8ff2d04d7fe9d64161750e8e94c58e42260", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-update", "committedDate": "2020-05-20T13:07:50Z", "type": "commit"}, {"oid": "56a0f3ec1b0f457466941ebf1fd7b59a89ada2a9", "url": "https://github.com/realm/realm-java/commit/56a0f3ec1b0f457466941ebf1fd7b59a89ada2a9", "message": "A bit more cleanup", "committedDate": "2020-05-25T07:13:16Z", "type": "commit"}, {"oid": "4dac29de42cfcba636b22bb68747c168d50f4222", "url": "https://github.com/realm/realm-java/commit/4dac29de42cfcba636b22bb68747c168d50f4222", "message": "Removed unnecessary roundtrip to parser to decode a collection, added parsing guards in native code, added more visible fixmes in test file", "committedDate": "2020-05-25T13:36:43Z", "type": "commit"}, {"oid": "c678462c53eefec49b9bddb175056038389c8db4", "url": "https://github.com/realm/realm-java/commit/c678462c53eefec49b9bddb175056038389c8db4", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-update", "committedDate": "2020-05-25T13:55:06Z", "type": "commit"}, {"oid": "e51979195f95cc48cd9c787ce258be5bc9ac622b", "url": "https://github.com/realm/realm-java/commit/e51979195f95cc48cd9c787ce258be5bc9ac622b", "message": "Fixing find", "committedDate": "2020-05-25T14:55:01Z", "type": "commit"}, {"oid": "dbeb276e53df6a49f2511e4689c19626f60401a9", "url": "https://github.com/realm/realm-java/commit/dbeb276e53df6a49f2511e4689c19626f60401a9", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-find\n\n# Conflicts:\n#\trealm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/MongoCollectionTest.kt\n#\trealm/realm-library/src/main/cpp/CMakeLists.txt\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsMongoCollection.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/mongo/MongoCollection.java", "committedDate": "2020-05-25T15:00:09Z", "type": "commit"}, {"oid": "c48dc7d96641f57ea2f51fddd238fbb5e3528ffe", "url": "https://github.com/realm/realm-java/commit/c48dc7d96641f57ea2f51fddd238fbb5e3528ffe", "message": "Simplified code for update operations", "committedDate": "2020-05-25T15:33:43Z", "type": "commit"}, {"oid": "a47b9569f7876c2bc6d84e0bbc01f40c63b4fed6", "url": "https://github.com/realm/realm-java/commit/a47b9569f7876c2bc6d84e0bbc01f40c63b4fed6", "message": "More cleanup", "committedDate": "2020-05-25T21:13:28Z", "type": "commit"}, {"oid": "df30322aeabf9bbb8786c30d22a897491ceb7db4", "url": "https://github.com/realm/realm-java/commit/df30322aeabf9bbb8786c30d22a897491ceb7db4", "message": "More cleanup. Added comments on failing tests for debugging them with the OS folks", "committedDate": "2020-05-26T07:47:48Z", "type": "commit"}, {"oid": "9e7e2b80d3f2395a85dbee8fb8231a94d525d680", "url": "https://github.com/realm/realm-java/commit/9e7e2b80d3f2395a85dbee8fb8231a94d525d680", "message": "Renamed iterables", "committedDate": "2020-05-26T10:33:26Z", "type": "commit"}, {"oid": "7e17b894fe137f54717cea30a034ce97797ba078", "url": "https://github.com/realm/realm-java/commit/7e17b894fe137f54717cea30a034ce97797ba078", "message": "More cleanup for find iterable. Tweaks on how to pass options for find operations", "committedDate": "2020-05-26T16:42:03Z", "type": "commit"}, {"oid": "37bac90d4bc8ee3c279db865316ede8651193fc0", "url": "https://github.com/realm/realm-java/commit/37bac90d4bc8ee3c279db865316ede8651193fc0", "message": "First steps towards adding aggregate", "committedDate": "2020-05-26T16:54:54Z", "type": "commit"}, {"oid": "479cc8dfe47b6822f050f20c8b5ec748fb76f756", "url": "https://github.com/realm/realm-java/commit/479cc8dfe47b6822f050f20c8b5ec748fb76f756", "message": "Added aggregate and improved passing of filter to find iterable", "committedDate": "2020-05-26T22:11:47Z", "type": "commit"}, {"oid": "2c0a9b00fb4571bc460247d8aee25307192fd799", "url": "https://github.com/realm/realm-java/commit/2c0a9b00fb4571bc460247d8aee25307192fd799", "message": "Added defaults to switch statements handling operation types for collections and fixed static analysis issues", "committedDate": "2020-05-27T07:06:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg5NzQ2OQ==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r430897469", "bodyText": "There is an assertFailsWith<> in Kotlin to test that it fails with a specific exception. There are also some other variants in KotlinTestUtils.kt for testing ObjectServerError's error code and a matcher to test actual message of exceptions.", "author": "rorbech", "createdAt": "2020-05-27T07:00:29Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/MongoCollectionTest.kt", "diffHunk": "@@ -228,37 +224,26 @@ class MongoCollectionTest {\n             // Test findOne() with filter that does not match any documents and no options\n             assertNull(findOne(Document(\"hello\", \"worldDNE\")).blockingGetResult())\n \n-            // FIXME: revisit when parser is fully operational\n             // Insert 2 more documents into the collection\n-//            insertMany(listOf(doc2, doc3)).blockingGetResult()    // use insertOne for now\n-            insertOne(doc2).blockingGetResult()\n-            insertOne(doc3).blockingGetResult()\n+            insertMany(listOf(doc2, doc3)).blockingGetResult()\n             assertEquals(3, count().blockingGetResult())\n \n-//            // test findOne() with projection and sort options\n-//            val projection = Document(\"hello\", 1)\n-//            projection[\"_id\"] = 0\n-//            val options1 = FindOptions()\n-//                    .limit(2)\n-//                    .projection(projection)\n-//                    .sort(Document(\"hello\", 1))\n-//            assertEquals(doc1, findOne(Document(), options1).blockingGetResult()!!.withoutId())\n-//\n-//            val options2 = FindOptions()\n-//                    .limit(2)\n-//                    .projection(projection)\n-//                    .sort(Document(\"hello\", -1))\n-//            assertEquals(doc3.withoutId(), findOne(Document(), options2).blockingGetResult()!!.withoutId())\n-//\n-//            // test findOne() properly fails\n-//            try {\n-//                Tasks.await(coll.findOne(Document(\"\\$who\", 1)))\n-//                Assert.fail()\n-//            } catch (ex: ExecutionException) {\n-//                Assert.assertTrue(ex.cause is StitchServiceException)\n-//                val svcEx = ex.cause as StitchServiceException\n-//                assertEquals(StitchServiceErrorCode.MONGODB_ERROR, svcEx.errorCode)\n-//            }\n+            // test findOne() with projection and sort options\n+            val projection = Document(\"hello\", 1)\n+            projection[\"_id\"] = 0\n+            val options1 = FindOptions()\n+                    .limit(2)\n+                    .projection(projection)\n+                    .sort(Document(\"hello\", 1))\n+            assertEquals(doc1, findOne(Document(), options1).blockingGetResult()!!.withoutId())\n+\n+            val options2 = FindOptions()\n+                    .limit(2)\n+                    .projection(projection)\n+                    .sort(Document(\"hello\", -1))\n+            assertEquals(doc3.withoutId(), findOne(Document(), options2).blockingGetResult()!!.withoutId())\n+\n+            assertFails { findOne(Document(\"\\$who\", 1)).blockingGetResult() }", "originalCommit": "479cc8dfe47b6822f050f20c8b5ec748fb76f756", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk2MjkwNg==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r430962906", "bodyText": "Yes, that exception handling is part of my next commit.", "author": "edualonso", "createdAt": "2020-05-27T08:57:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg5NzQ2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwMjk3Mw==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r430902973", "bodyText": "\ud83d\udc4d", "author": "rorbech", "createdAt": "2020-05-27T07:12:52Z", "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsAggregateIterable.cpp", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+#include \"io_realm_internal_objectstore_OsAggregateIterable.h\"\n+\n+#include \"java_class_global_def.hpp\"\n+#include \"java_network_transport.hpp\"\n+#include \"util.hpp\"\n+#include \"jni_util/java_method.hpp\"\n+#include \"jni_util/jni_utils.hpp\"\n+#include \"jni_util/bson_util.hpp\"\n+#include \"object-store/src/util/bson/bson.hpp\"\n+\n+#include <realm/util/optional.hpp>\n+#include <sync/app.hpp>\n+#include <sync/sync_user.hpp>\n+#include <sync/remote_mongo_database.hpp>\n+#include <sync/remote_mongo_collection.hpp>\n+#include <jni_util/bson_util.hpp>\n+#include <jni.h>\n+\n+using namespace realm;\n+using namespace realm::app;\n+using namespace realm::bson;\n+using namespace realm::jni_util;\n+using namespace realm::_impl;\n+\n+static std::function<jobject(JNIEnv*, util::Optional<bson::BsonArray>)> collection_mapper_aggregate = [](JNIEnv* env, util::Optional<bson::BsonArray> array) {\n+    return array ? JniBsonProtocol::bson_to_jstring(env, *array) : NULL;\n+};\n+\n+JNIEXPORT void JNICALL\n+Java_io_realm_internal_objectstore_OsAggregateIterable_nativeAggregate(JNIEnv* env,\n+                                                                       jclass,\n+                                                                       jlong j_collection_ptr,\n+                                                                       jstring j_pipeline,\n+                                                                       jobject j_callback) {\n+    try {\n+        auto collection = reinterpret_cast<RemoteMongoCollection *>(j_collection_ptr);\n+\n+        BsonArray bson_array(JniBsonProtocol::parse_checked(env, j_pipeline, Bson::Type::Array, \"BSON pipeline must be a BsonArray\"));", "originalCommit": "479cc8dfe47b6822f050f20c8b5ec748fb76f756", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxNjEwOA==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r430916108", "bodyText": "Should the new iterator refetch the collection? From the Javadoc of the class it sounds a bit like the class is encapsulating a specific query result.", "author": "rorbech", "createdAt": "2020-05-27T07:38:13Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/mongo/iterable/MongoIterable.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.mongo.iterable;\n+\n+import com.google.android.gms.tasks.Task;\n+\n+import java.util.Collection;\n+\n+import io.realm.internal.common.TaskDispatcher;\n+\n+/**\n+ * The MongoIterable is the results from an operation, such as a query.\n+ *\n+ * @param <ResultT> The type that this iterable will decode documents to.\n+ */\n+public abstract class MongoIterable<ResultT> {\n+\n+    private final TaskDispatcher dispatcher;\n+\n+    MongoIterable(final TaskDispatcher dispatcher) {\n+        this.dispatcher = dispatcher;\n+    }\n+\n+    /**\n+     * Gets the collection from the Object Store.\n+     * @return collection with the results from the Object Store.\n+     */\n+    abstract Collection<ResultT> getCollection();\n+\n+    /**\n+     * Gets the first entry in the result collection\n+     * @return first entry in the collection.\n+     */\n+    abstract ResultT getFirst();\n+\n+    /**\n+     * Returns a cursor of the operation represented by this iterable.\n+     *\n+     * @return a cursor of the operation represented by this iterable.\n+     */\n+    public Task<MongoCursor<ResultT>> iterator() {", "originalCommit": "479cc8dfe47b6822f050f20c8b5ec748fb76f756", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4MDQzOA==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r430980438", "bodyText": "The Javadoc might not be the best. I should probably rewrite it. This class is not a Java Iterable, although it tries to mimic its behaviour. The results need to be delivered as Tasks though. This also affects the MongoCursor class, whose implementation I've changed for the next commit. It didn't need the second level of asynchronicity.", "author": "edualonso", "createdAt": "2020-05-27T09:24:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxNjEwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ5ODg2NA==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r434498864", "bodyText": "Is it intended that calling this multiple times should trigger multiple remote operations? Maybe I am still a bit confused with the various collection/iterable terms.", "author": "rorbech", "createdAt": "2020-06-03T11:31:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxNjEwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxNzQ1OQ==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r430917459", "bodyText": "Inconsistent Javadoc formattting here and there.\nFirst line should end with a period and subsequent paragraphs should be separated by <p>.", "author": "rorbech", "createdAt": "2020-05-27T07:40:49Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/mongo/iterable/MongoCursor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.mongodb.mongo.iterable;\n+\n+import com.google.android.gms.tasks.Task;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+import io.realm.internal.common.TaskDispatcher;\n+\n+/**\n+ * The Mongo Cursor interface.", "originalCommit": "479cc8dfe47b6822f050f20c8b5ec748fb76f756", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyNzk3OQ==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r430927979", "bodyText": "Remember to verify that encode works with null", "author": "rorbech", "createdAt": "2020-05-27T07:59:08Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsMongoCollection.java", "diffHunk": "@@ -406,61 +467,51 @@ protected ResultT mapSuccess(Object result) {\n \n         String encodedFilter = JniBsonProtocol.encode(filter, codecRegistry);\n         String encodedUpdate = JniBsonProtocol.encode(update, codecRegistry);", "originalCommit": "479cc8dfe47b6822f050f20c8b5ec748fb76f756", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA2NTYyMQ==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r431065621", "bodyText": "Doesn't apply any longer.", "author": "edualonso", "createdAt": "2020-05-27T12:05:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyNzk3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyOTMzNg==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r430929336", "bodyText": "Shouldn't this be IllegalArgumentException? Here and other places", "author": "rorbech", "createdAt": "2020-05-27T08:01:28Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsMongoCollection.java", "diffHunk": "@@ -406,61 +467,51 @@ protected ResultT mapSuccess(Object result) {\n \n         String encodedFilter = JniBsonProtocol.encode(filter, codecRegistry);\n         String encodedUpdate = JniBsonProtocol.encode(update, codecRegistry);\n-        String encodedProjection = null;\n-        String encodedSort = null;\n+        String encodedProjection = encodedEmptyDocument;\n+        String encodedSort = encodedEmptyDocument;\n         if (options != null) {\n-            encodedProjection = JniBsonProtocol.encode(options.getProjection(), codecRegistry);\n-            encodedSort = JniBsonProtocol.encode(options.getSort(), codecRegistry);\n+            if (options.getProjection() != null) {\n+                encodedProjection = JniBsonProtocol.encode(options.getProjection(), codecRegistry);\n+            }\n+            if (options.getSort() != null) {\n+                encodedSort = JniBsonProtocol.encode(options.getSort(), codecRegistry);\n+            }\n         }\n \n         switch (type) {\n-            case UPDATE:\n+            case FIND_ONE_AND_UPDATE:\n+                nativeFindOneAndUpdate(type, nativePtr, encodedFilter, encodedUpdate, encodedProjection, encodedSort, false, false, callback);\n+                break;\n+            case FIND_ONE_AND_UPDATE_WITH_OPTIONS:\n                 if (options == null) {\n-                    nativeFindOneAndUpdate(nativePtr, encodedFilter, encodedUpdate, callback);\n-                } else {\n-                    nativeFindOneAndUpdateWithOptions(nativePtr, encodedFilter, encodedUpdate, encodedProjection, encodedSort, options.isUpsert(), options.isReturnNewDocument(), callback);\n+                    throw new IllegalStateException(\"FindOneAndModifyOptions must not be null\");\n                 }\n+                nativeFindOneAndUpdate(type, nativePtr, encodedFilter, encodedUpdate, encodedProjection, encodedSort, options.isUpsert(), options.isReturnNewDocument(), callback);\n+                break;\n+            case FIND_ONE_AND_REPLACE:\n+                nativeFindOneAndReplace(type, nativePtr, encodedFilter, encodedUpdate, encodedProjection, encodedSort, false, false,callback);\n                 break;\n-            case REPLACE:\n+            case FIND_ONE_AND_REPLACE_WITH_OPTIONS:\n                 if (options == null) {\n-                    nativeFindOneAndReplace(nativePtr, encodedFilter, encodedUpdate, callback);\n-                } else {\n-                    nativeFindOneAndReplaceWithOptions(nativePtr, encodedFilter, encodedUpdate, encodedProjection, encodedSort, options.isUpsert(), options.isReturnNewDocument(), callback);\n+                    throw new IllegalStateException(\"FindOneAndModifyOptions must not be null\");", "originalCommit": "479cc8dfe47b6822f050f20c8b5ec748fb76f756", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzMTczNQ==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r430931735", "bodyText": "Did you intentionally remove the public possibility to call count with options without filter?", "author": "rorbech", "createdAt": "2020-05-27T08:05:52Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsMongoCollection.java", "diffHunk": "@@ -73,14 +90,18 @@ public long getNativeFinalizerPtr() {\n     }\n \n     public Long count() {\n-        return count(null);\n+        return countInternal(new Document(), null);\n+    }\n+\n+    public Long count(final Bson filter) {\n+        return countInternal(filter, null);\n     }\n \n-    public Long count(@Nullable final Bson filter) {\n-        return count(filter, null);\n+    public Long count(final Bson filter, final CountOptions options) {\n+        return countInternal(filter, options);\n     }\n \n-    public Long count(@Nullable final Bson filter, @Nullable final CountOptions options) {\n+    private Long countInternal(final Bson filter, @Nullable final CountOptions options) {", "originalCommit": "479cc8dfe47b6822f050f20c8b5ec748fb76f756", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk5MjQ4NA==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r430992484", "bodyText": "It was a mistake, it never was part of the original API.", "author": "edualonso", "createdAt": "2020-05-27T09:45:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzMTczNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzNTc0Mw==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r430935743", "bodyText": "Maybe throw an error if it is an unexpected type, as you do in some of the other similar methods.", "author": "rorbech", "createdAt": "2020-05-27T08:12:53Z", "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsMongoCollection.cpp", "diffHunk": "@@ -116,41 +116,36 @@ Java_io_realm_internal_objectstore_OsMongoCollection_nativeCount(JNIEnv* env,\n JNIEXPORT void JNICALL\n Java_io_realm_internal_objectstore_OsMongoCollection_nativeFindOne(JNIEnv* env,\n                                                                    jclass,\n+                                                                   jint j_find_one_type,\n                                                                    jlong j_collection_ptr,\n                                                                    jstring j_filter,\n+                                                                   jstring j_projection,\n+                                                                   jstring j_sort,\n+                                                                   jlong j_limit,\n                                                                    jobject j_callback) {\n     try {\n         auto collection = reinterpret_cast<RemoteMongoCollection*>(j_collection_ptr);\n \n         bson::BsonDocument filter(JniBsonProtocol::parse_checked(env, j_filter, Bson::Type::Document, \"BSON filter must be a Document\"));\n-        collection->find_one(filter, JavaNetworkTransport::create_result_callback(env, j_callback, collection_mapper_find_one));\n-    }\n-    CATCH_STD()\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_io_realm_internal_objectstore_OsMongoCollection_nativeFindOneWithOptions(JNIEnv* env,\n-                                                                              jclass,\n-                                                                              jlong j_collection_ptr,\n-                                                                              jstring j_filter,\n-                                                                              jstring j_projection,\n-                                                                              jstring j_sort,\n-                                                                              jlong j_limit,\n-                                                                              jobject j_callback) {\n-    try {\n-        auto collection = reinterpret_cast<RemoteMongoCollection*>(j_collection_ptr);\n-        uint64_t limit = std::uint64_t(j_limit);\n \n-        bson::BsonDocument filter(JniBsonProtocol::parse_checked(env, j_filter, Bson::Type::Document, \"BSON filter must be a Document\"));\n-        bson::BsonDocument projection(JniBsonProtocol::parse_checked(env, j_projection, Bson::Type::Document, \"BSON projection must be a Document\"));\n-        bson::BsonDocument sort(JniBsonProtocol::parse_checked(env, j_sort, Bson::Type::Document, \"BSON sort must be a Document\"));\n-        RemoteMongoCollection::RemoteFindOptions options = {\n-                limit,\n-                projection,\n-                sort\n-        };\n-\n-        collection->find_one(filter, options, JavaNetworkTransport::create_result_callback(env, j_callback, collection_mapper_find_one));\n+        switch (j_find_one_type) {\n+            case io_realm_internal_objectstore_OsMongoCollection_FIND_ONE:\n+                collection->find_one(filter, JavaNetworkTransport::create_result_callback(env, j_callback, collection_mapper_find_one));\n+                break;\n+            case io_realm_internal_objectstore_OsMongoCollection_FIND_ONE_WITH_OPTIONS:\n+                uint64_t limit = std::uint64_t(j_limit);\n+\n+                bson::BsonDocument projection(JniBsonProtocol::parse_checked(env, j_projection, Bson::Type::Document, \"BSON projection must be a Document\"));\n+                bson::BsonDocument sort(JniBsonProtocol::parse_checked(env, j_sort, Bson::Type::Document, \"BSON sort must be a Document\"));\n+                RemoteMongoCollection::RemoteFindOptions options = {\n+                        limit,\n+                        projection,\n+                        sort\n+                };\n+\n+                collection->find_one(filter, options, JavaNetworkTransport::create_result_callback(env, j_callback, collection_mapper_find_one));\n+                break;\n+        }", "originalCommit": "2c0a9b00fb4571bc460247d8aee25307192fd799", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4OTA2Ng==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r430989066", "bodyText": "Yes, totally forgot about it.", "author": "edualonso", "createdAt": "2020-05-27T09:39:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzNTc0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzOTQ0MA==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r430939440", "bodyText": "Seems to remember some comment about only using Os-prefix if it actually wrapped an underlying OS object.", "author": "rorbech", "createdAt": "2020-05-27T08:19:16Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsMongoIterable.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.internal.objectstore;\n+\n+import org.bson.codecs.configuration.CodecRegistry;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.realm.ObjectServerError;\n+import io.realm.internal.jni.JniBsonProtocol;\n+import io.realm.internal.jni.OsJNIResultCallback;\n+import io.realm.internal.network.ResultHandler;\n+\n+public abstract class OsMongoIterable<ResultT> {", "originalCommit": "2c0a9b00fb4571bc460247d8aee25307192fd799", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4MTYzNg==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r430981636", "bodyText": "I talked about it with @cmelchior and it's OK to use it for helper classes which don't instantiate objects - unless I misunderstood it @cmelchior?", "author": "edualonso", "createdAt": "2020-05-27T09:27:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzOTQ0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4MjI1Nw==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r432282257", "bodyText": "I think there was a bit of a misunderstanding then. Normally we only use Os<X> for classes wrapping some ObjectStore class. I believe we chatted about finalizers? \ud83e\udd14\nSo, in this case, it should probably be merged with the public MongoIterable", "author": "cmelchior", "createdAt": "2020-05-29T06:34:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzOTQ0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4ODkzMA==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r432288930", "bodyText": "Sure, I'll get it done.", "author": "edualonso", "createdAt": "2020-05-29T06:53:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzOTQ0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk0MzAyMg==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r430943022", "bodyText": "Does this double asynchronicity make sense? Doesn't it only involve one remote call?", "author": "rorbech", "createdAt": "2020-05-27T08:25:10Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/MongoCollectionTest.kt", "diffHunk": "@@ -389,66 +363,151 @@ class MongoCollectionTest {\n             doc3[\"num\"] = 3\n \n             // Test the upsert option where it should not actually be invoked\n-            val result2 = findOneAndUpdate(Document(\"hello\", \"hellothere\"), Document(\"\\$set\", doc1), FindOneAndModifyOptions().returnNewDocument(true).upsert(true)).blockingGetResult()\n+            val options2 = FindOneAndModifyOptions()\n+                    .returnNewDocument(true)\n+                    .upsert(true)\n+            val result2 = findOneAndUpdate(\n+                    Document(\"hello\", \"hellothere\"),\n+                    Document(\"\\$set\", doc1),\n+                    options2\n+            ).blockingGetResult()\n             assertEquals(doc1, result2!!.withoutId())\n             assertEquals(1, count().blockingGetResult())\n-//            assertEquals(doc1.withoutId(), withoutId(Tasks.await(coll.find().first())))\n+            assertEquals(doc1.withoutId(),\n+                    find().first().blockingGetResult()!!.withoutId())\n \n             // Test the upsert option where the server should perform upsert and return new document\n-            val result3 = findOneAndUpdate(Document(\"hello\", \"hellothere\"), Document(\"\\$set\", doc2), FindOneAndModifyOptions().returnNewDocument(true).upsert(true)).blockingGetResult()\n+            val options3 = FindOneAndModifyOptions()\n+                    .returnNewDocument(true)\n+                    .upsert(true)\n+            val result3 = findOneAndUpdate(\n+                    Document(\"hello\", \"hellothere\"),\n+                    Document(\"\\$set\", doc2),\n+                    options3\n+            ).blockingGetResult()\n             assertEquals(doc2, result3!!.withoutId())\n             assertEquals(2, count().blockingGetResult())\n \n             // Test the upsert option where the server should perform upsert and return old document\n             // The old document should be empty\n-            val result4 = findOneAndUpdate(Document(\"hello\", \"hellothere\"), Document(\"\\$set\", doc3), FindOneAndModifyOptions().upsert(true)).blockingGetResult()\n+            val options4 = FindOneAndModifyOptions()\n+                    .upsert(true)\n+            val result4= findOneAndUpdate(\n+                    Document(\"hello\", \"hellothere\"),\n+                    Document(\"\\$set\", doc3),\n+                    options4\n+            ).blockingGetResult()\n             assertNull(result4)\n             assertEquals(3, count().blockingGetResult())\n \n-            // Test sort and project\n-//            assertEquals(listOf(doc1, doc2, doc3),\n-//                    withoutIds(Tasks.await<MutableList<Document>>(coll.find().into(mutableListOf()))))\n-\n-            val sampleProject = Document(\"hello\", 1)\n-            sampleProject[\"_id\"] = 0\n-\n-            val result5 = findOneAndUpdate(Document(), sampleUpdate, FindOneAndModifyOptions().projection(sampleProject).sort(Document(\"num\", 1))).blockingGetResult()\n-            assertEquals(Document(\"hello\", \"world1\"), result5!!.withoutId())\n-            assertEquals(3, count().blockingGetResult())\n-\n-            val result6 = findOneAndUpdate(Document(), sampleUpdate, FindOneAndModifyOptions().projection(sampleProject).sort(Document(\"num\", -1))).blockingGetResult()\n-            assertEquals(Document(\"hello\", \"world3\"), result6!!.withoutId())\n-            assertEquals(3, count().blockingGetResult())\n+            // FIXME: projections and sort aren't currently working due to a bug in Stitch: https://jira.mongodb.org/browse/REALMC-5787\n+//            // Test sort and project\n+//            val sampleProject = Document(\"hello\", 1)\n+//            sampleProject[\"_id\"] = 0\n+//\n+//            val options5 = FindOneAndModifyOptions()\n+//                    .projection(sampleProject)\n+//                    .sort(Document(\"num\", 1))\n+//            val result5 = findOneAndUpdate(\n+//                    Document(),\n+//                    sampleUpdate,\n+//                    options5\n+//            ).blockingGetResult()\n+//            assertEquals(Document(\"hello\", \"world1\"), result5!!.withoutId())\n+//            assertEquals(3, count().blockingGetResult())\n+//\n+//            val options6 = FindOneAndModifyOptions()\n+//                    .projection(sampleProject)\n+//                    .sort(Document(\"num\", -1))\n+//            val result6 = findOneAndUpdate(\n+//                    Document(),\n+//                    sampleUpdate,\n+//                    options6\n+//            ).blockingGetResult()\n+//            assertEquals(Document(\"hello\", \"world3\"), result6!!.withoutId())\n+//            assertEquals(3, count().blockingGetResult())\n \n             // Test proper failure\n-//            try {\n-//                Tasks.await(coll.findOneAndUpdate(Document(), Document(\"\\$who\", 1)))\n-//                fail()\n-//            } catch (ex: ExecutionException) {\n-//                assertTrue(ex.cause is StitchServiceException)\n-//                val svcEx = ex.cause as StitchServiceException\n-//                assertEquals(StitchServiceErrorCode.MONGODB_ERROR, svcEx.errorCode)\n-//            }\n-//\n-//            try {\n-//                Tasks.await(coll.findOneAndUpdate(Document(), Document(\"\\$who\", 1),\n-//                        FindOneAndModifyOptions().upsert(true)))\n-//                fail()\n-//            } catch (ex: ExecutionException) {\n-//                assertTrue(ex.cause is StitchServiceException)\n-//                val svcEx = ex.cause as StitchServiceException\n-//                assertEquals(StitchServiceErrorCode.MONGODB_ERROR, svcEx.errorCode)\n-//            }\n+            assertFails { findOneAndUpdate(Document(), Document(\"\\$who\", 1)).blockingGetResult() }\n+            assertFails { findOneAndUpdate(Document(), Document(\"\\$who\", 1), FindOneAndModifyOptions().upsert(true)).blockingGetResult() }\n         }\n     }\n \n     @Test\n     fun find() {\n         with(getCollectionInternal(COLLECTION_NAME)) {\n-            // FIXME: fix find implementation - ignore this code for code review\n-            val iter = find().blockingGetResult()!!\n-            assertFalse(iter.iterator().hasNext())\n-            assertFailsWith<NoSuchElementException> { iter.first() }\n+            var iter = find()\n+            assertFalse(iter.iterator().blockingGetResult()!!.hasNext().blockingGetResult()!!)\n+            assertNull(iter.first().blockingGetResult())\n+\n+            val doc1 = Document(\"hello\", \"world\")\n+            val doc2 = Document(\"hello\", \"friend\")\n+            doc2[\"proj\"] = \"field\"\n+            insertMany(listOf(doc1, doc2)).blockingGetResult()\n+\n+            assertTrue(iter.iterator().blockingGetResult()!!\n+                    .hasNext().blockingGetResult()!!)\n+            assertEquals(doc1.withoutId(), iter.first().blockingGetResult()!!.withoutId())\n+            assertEquals(doc2.withoutId(),\n+                    iter.limit(1)\n+                            .sort(Document(\"_id\", -1))\n+                            .iterator().blockingGetResult()!!\n+                            .next().blockingGetResult()!!", "originalCommit": "2c0a9b00fb4571bc460247d8aee25307192fd799", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4MzUwMA==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r430983500", "bodyText": "That's right. I have changed it for the next commit - see https://github.com/realm/realm-java/pull/6881/files#r430916108", "author": "edualonso", "createdAt": "2020-05-27T09:30:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk0MzAyMg=="}], "type": "inlineReview"}, {"oid": "11dc092f1661008d020ff52689dd43f9f40177fc", "url": "https://github.com/realm/realm-java/commit/11dc092f1661008d020ff52689dd43f9f40177fc", "message": "Added missing tests, but there are still bugs in the OS so some had to be ignored and sections of others commented out", "committedDate": "2020-05-27T08:53:06Z", "type": "commit"}, {"oid": "a15eb8d43df6751f8c77a89710b8f57588352a94", "url": "https://github.com/realm/realm-java/commit/a15eb8d43df6751f8c77a89710b8f57588352a94", "message": "Removed unnecessary asynchronicity in cursors, added default branches to switch cases in C++ collection for error handling, added javadoc, cleanup", "committedDate": "2020-05-27T10:00:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAwNTU1OQ==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r431005559", "bodyText": "I will remove this, it stays for now until all the OS bugs are fixed.", "author": "edualonso", "createdAt": "2020-05-27T10:08:01Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/MongoCollectionTest.kt", "diffHunk": "@@ -51,6 +54,9 @@ class MongoCollectionTest {\n     @Before\n     fun setUp() {\n         Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+\n+        RealmLog.setLevel(LogLevel.DEBUG)", "originalCommit": "a15eb8d43df6751f8c77a89710b8f57588352a94", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAwNTg0Mg==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r431005842", "bodyText": "I will also break down some of the tests into smaller, more meaningful cases in the upcoming commits.", "author": "edualonso", "createdAt": "2020-05-27T10:08:34Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/MongoCollectionTest.kt", "diffHunk": "@@ -51,6 +54,9 @@ class MongoCollectionTest {\n     @Before\n     fun setUp() {\n         Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+\n+        RealmLog.setLevel(LogLevel.DEBUG)\n+", "originalCommit": "a15eb8d43df6751f8c77a89710b8f57588352a94", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxMDUzMw==", "url": "https://github.com/realm/realm-java/pull/6881#discussion_r431010533", "bodyText": "I will remove these separators. I added them for temporary convenience to quickly see the different operation blocks.", "author": "edualonso", "createdAt": "2020-05-27T10:17:20Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsMongoCollection.java", "diffHunk": "@@ -90,99 +111,142 @@ protected Long mapSuccess(Object result) {\n             }\n         };\n \n-        // no filter means count all\n-        String filterString = (filter == null) ?\n-                JniBsonProtocol.encode(new Document(), codecRegistry) :\n-                JniBsonProtocol.encode(filter, codecRegistry);\n+        String filterString = JniBsonProtocol.encode(filter, codecRegistry);\n         int limit = (options == null) ? 0 : options.getLimit();\n \n         nativeCount(nativePtr, filterString, limit, callback);\n \n         return ResultHandler.handleResult(success, error);\n     }\n \n-    public Collection<DocumentT> find() {\n-        return find(new Document());\n-    }\n+    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////", "originalCommit": "a15eb8d43df6751f8c77a89710b8f57588352a94", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a230ed30be4aab207def0f0b4f96fdafec1435f1", "url": "https://github.com/realm/realm-java/commit/a230ed30be4aab207def0f0b4f96fdafec1435f1", "message": "Removed unwanted nullable parameters from some functions and a bit more cleanup", "committedDate": "2020-05-27T10:58:44Z", "type": "commit"}, {"oid": "c365f609512d5067df2274a6df8e5d22e0c62a41", "url": "https://github.com/realm/realm-java/commit/c365f609512d5067df2274a6df8e5d22e0c62a41", "message": "Added missing operations for document class, codec registry and namespace", "committedDate": "2020-05-27T11:28:54Z", "type": "commit"}, {"oid": "50891997c300000ec70965528b8eee3751bcce84", "url": "https://github.com/realm/realm-java/commit/50891997c300000ec70965528b8eee3751bcce84", "message": "Added test for withDocument", "committedDate": "2020-05-27T14:13:13Z", "type": "commit"}, {"oid": "ca4ee640bd0eea062727b24a8848bb62a092b0b8", "url": "https://github.com/realm/realm-java/commit/ca4ee640bd0eea062727b24a8848bb62a092b0b8", "message": "Fixed wrong type constant used for findOneAndReplace and Update options", "committedDate": "2020-05-27T14:26:56Z", "type": "commit"}, {"oid": "16ec0cfd85fc3e407b868d19c320d147d75856b0", "url": "https://github.com/realm/realm-java/commit/16ec0cfd85fc3e407b868d19c320d147d75856b0", "message": "Test breakdown into smaller cases and loooooots of cleanup", "committedDate": "2020-05-28T14:52:44Z", "type": "commit"}]}