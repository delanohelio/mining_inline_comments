{"pr_number": 7206, "pr_title": "Update coroutines example to be the new newsreader example", "pr_createdAt": "2020-11-17T08:52:14Z", "pr_url": "https://github.com/realm/realm-java/pull/7206", "timeline": [{"oid": "3cdc22d3b414a40729341325d629210115d9f93a", "url": "https://github.com/realm/realm-java/commit/3cdc22d3b414a40729341325d629210115d9f93a", "message": "Enabled viewbinding", "committedDate": "2020-10-20T12:26:21Z", "type": "commit"}, {"oid": "a522ea668b859665840317d79abb48c95cdf06a9", "url": "https://github.com/realm/realm-java/commit/a522ea668b859665840317d79abb48c95cdf06a9", "message": "Polished example: added databinding and listen to db changes from the UI", "committedDate": "2020-10-26T14:31:41Z", "type": "commit"}, {"oid": "4bdf5daa034ff9b79eead86b16072b29a7126455", "url": "https://github.com/realm/realm-java/commit/4bdf5daa034ff9b79eead86b16072b29a7126455", "message": "wip - adapted example to using store", "committedDate": "2020-10-28T15:30:30Z", "type": "commit"}, {"oid": "a6a2c92a3ff858207b7e7d7bfc41cd740cff5205", "url": "https://github.com/realm/realm-java/commit/a6a2c92a3ff858207b7e7d7bfc41cd740cff5205", "message": "Made DAO thread-safe for opening/closing realm instances in suspend functions. Updated OS pointer.", "committedDate": "2020-10-29T14:38:24Z", "type": "commit"}, {"oid": "f0e02f4886407940aaae0462507933a06aa60e3b", "url": "https://github.com/realm/realm-java/commit/f0e02f4886407940aaae0462507933a06aa60e3b", "message": "Added recyclerview and monothreaded dispatcher", "committedDate": "2020-10-29T17:07:39Z", "type": "commit"}, {"oid": "bc61c62750d2cc5cfaa385dbde2531b3e9b75f9d", "url": "https://github.com/realm/realm-java/commit/bc61c62750d2cc5cfaa385dbde2531b3e9b75f9d", "message": "Rearranged package structure, improved event handling and cleanup", "committedDate": "2020-10-30T10:46:26Z", "type": "commit"}, {"oid": "5b952d58c6785fa451a0cb7b00bf23ac06fe14fd", "url": "https://github.com/realm/realm-java/commit/5b952d58c6785fa451a0cb7b00bf23ac06fe14fd", "message": "Added newsreader functionality", "committedDate": "2020-11-02T11:28:58Z", "type": "commit"}, {"oid": "15db5dae512499b5baefb48a2251d2d3d71f10ed", "url": "https://github.com/realm/realm-java/commit/15db5dae512499b5baefb48a2251d2d3d71f10ed", "message": "Functional news list", "committedDate": "2020-11-02T13:05:14Z", "type": "commit"}, {"oid": "8224213dea025f87d5ce7d6c2d94025cff054fb3", "url": "https://github.com/realm/realm-java/commit/8224213dea025f87d5ce7d6c2d94025cff054fb3", "message": "Added a Room DAO to concept-proof the solution but still doesn't work", "committedDate": "2020-11-03T16:18:38Z", "type": "commit"}, {"oid": "7db9baa92685ff0f18dd282f55ce9ff7ae1ca161", "url": "https://github.com/realm/realm-java/commit/7db9baa92685ff0f18dd282f55ce9ff7ae1ca161", "message": "Simplified logic for loading sections, now we always refresh", "committedDate": "2020-11-03T16:22:19Z", "type": "commit"}, {"oid": "d391e7378d34137e16f85feadb28e1b2ec944b0c", "url": "https://github.com/realm/realm-java/commit/d391e7378d34137e16f85feadb28e1b2ec944b0c", "message": "Removed old dog-related stuff", "committedDate": "2020-11-04T10:48:33Z", "type": "commit"}, {"oid": "61ad13fcc4ce14d24c9f805f1428a1a65f404b00", "url": "https://github.com/realm/realm-java/commit/61ad13fcc4ce14d24c9f805f1428a1a65f404b00", "message": "Separated realm and room implementations with an awful lot of code repetition", "committedDate": "2020-11-04T12:30:00Z", "type": "commit"}, {"oid": "6f18fd4b474a92238e4f4e2dccc9dc86eb11efb6", "url": "https://github.com/realm/realm-java/commit/6f18fd4b474a92238e4f4e2dccc9dc86eb11efb6", "message": "wip", "committedDate": "2020-11-05T09:30:05Z", "type": "commit"}, {"oid": "e67a6b4da4a4aefe3cf88ada8bc642b005bb5aef", "url": "https://github.com/realm/realm-java/commit/e67a6b4da4a4aefe3cf88ada8bc642b005bb5aef", "message": "Cleanup and finally grokked how to use Store", "committedDate": "2020-11-05T15:25:15Z", "type": "commit"}, {"oid": "659929dbfbc42a9b5471a9d6ca5bd4202556c009", "url": "https://github.com/realm/realm-java/commit/659929dbfbc42a9b5471a9d6ca5bd4202556c009", "message": "Merge branch 'master' into el/store-coroutines-example", "committedDate": "2020-11-05T15:39:57Z", "type": "commit"}, {"oid": "5dceb67c77e4abaf29393a3e39f49796d56f4243", "url": "https://github.com/realm/realm-java/commit/5dceb67c77e4abaf29393a3e39f49796d56f4243", "message": "Removed alternative implementation", "committedDate": "2020-11-05T16:00:43Z", "type": "commit"}, {"oid": "519af3133d333729163a3118bed602ca13085b7f", "url": "https://github.com/realm/realm-java/commit/519af3133d333729163a3118bed602ca13085b7f", "message": "wip", "committedDate": "2020-11-06T15:03:56Z", "type": "commit"}, {"oid": "a2557b6349e0eea4cc8ee43cee5d56d0d03e40ed", "url": "https://github.com/realm/realm-java/commit/a2557b6349e0eea4cc8ee43cee5d56d0d03e40ed", "message": "First steps towards having a coroutines factory", "committedDate": "2020-11-06T15:06:24Z", "type": "commit"}, {"oid": "e0728b79fbe65f3e83d0e95061099bf8c4ab7628", "url": "https://github.com/realm/realm-java/commit/e0728b79fbe65f3e83d0e95061099bf8c4ab7628", "message": "Hid Kotlin dependencies from artifact, only for compile time", "committedDate": "2020-11-06T16:31:02Z", "type": "commit"}, {"oid": "c7156b30f2257e3b81757e2d992f9aba73d0504a", "url": "https://github.com/realm/realm-java/commit/c7156b30f2257e3b81757e2d992f9aba73d0504a", "message": "Added dependencies for testing, added missing toFlow methods and tests for config and syncconfig", "committedDate": "2020-11-09T11:40:33Z", "type": "commit"}, {"oid": "4efc7147d3e2b4ca6092aa7f0dccda6101dca10f", "url": "https://github.com/realm/realm-java/commit/4efc7147d3e2b4ca6092aa7f0dccda6101dca10f", "message": "Corrected signatures", "committedDate": "2020-11-09T11:56:12Z", "type": "commit"}, {"oid": "aa67c34f1321f582208df616dc040a435caddae2", "url": "https://github.com/realm/realm-java/commit/aa67c34f1321f582208df616dc040a435caddae2", "message": "Added missing realm instance flow methods to factory and tests", "committedDate": "2020-11-09T15:46:40Z", "type": "commit"}, {"oid": "dbfd23d50809a755686da6df3d222eb8a88f6e1b", "url": "https://github.com/realm/realm-java/commit/dbfd23d50809a755686da6df3d222eb8a88f6e1b", "message": "Made realm property in RealmResults and RealmList public so that it can be accessed from extension functions (the existing getRealm method cannot be used for DynamicRealms so that would break the API), added missing flow methods for dynamic realms and tests, and added docs and beta annotations to factory methods", "committedDate": "2020-11-10T12:47:52Z", "type": "commit"}, {"oid": "29d15d070c602e4083386cf9e0270048caabd9bd", "url": "https://github.com/realm/realm-java/commit/29d15d070c602e4083386cf9e0270048caabd9bd", "message": "Added missing documentation and renamed builder method to flowFactory instead", "committedDate": "2020-11-10T13:11:24Z", "type": "commit"}, {"oid": "e14d72296c6f6c2aadcc2423efaa2b0e8cfb226c", "url": "https://github.com/realm/realm-java/commit/e14d72296c6f6c2aadcc2423efaa2b0e8cfb226c", "message": "Added support for Flows with no results when using findFirst", "committedDate": "2020-11-11T10:21:10Z", "type": "commit"}, {"oid": "29abccae77f9f0e37f278080bfbf791a73448051", "url": "https://github.com/realm/realm-java/commit/29abccae77f9f0e37f278080bfbf791a73448051", "message": "Added exclusion of Kotlin files for javadoc generation", "committedDate": "2020-11-11T10:31:24Z", "type": "commit"}, {"oid": "65feabb11ab4021d80d44a32ab19988c2f639e3d", "url": "https://github.com/realm/realm-java/commit/65feabb11ab4021d80d44a32ab19988c2f639e3d", "message": "Added test for null object to flow", "committedDate": "2020-11-11T13:34:03Z", "type": "commit"}, {"oid": "fc71055cd4eba2099b340784927ecac540c00e73", "url": "https://github.com/realm/realm-java/commit/fc71055cd4eba2099b340784927ecac540c00e73", "message": "Added missing collect to trigger thread violation", "committedDate": "2020-11-11T14:06:16Z", "type": "commit"}, {"oid": "c969c4e3e58daa7b9ea8721edb133f647deb7d52", "url": "https://github.com/realm/realm-java/commit/c969c4e3e58daa7b9ea8721edb133f647deb7d52", "message": "Merge branch 'el/coroutines-factory' into el/store-coroutines-example", "committedDate": "2020-11-11T14:08:53Z", "type": "commit"}, {"oid": "481a0bdd4fdb8a7fae6d7f71f7bc8ae6eb75fd8c", "url": "https://github.com/realm/realm-java/commit/481a0bdd4fdb8a7fae6d7f71f7bc8ae6eb75fd8c", "message": "Fixed test factories", "committedDate": "2020-11-11T14:32:32Z", "type": "commit"}, {"oid": "880f3d356be8276045a692e6e58a7c9feb904f35", "url": "https://github.com/realm/realm-java/commit/880f3d356be8276045a692e6e58a7c9feb904f35", "message": "Merge branch 'el/coroutines-factory' into el/store-coroutines-example", "committedDate": "2020-11-11T14:33:19Z", "type": "commit"}, {"oid": "1ab8aa36731a84eb2de777561e93e7f4aee34f45", "url": "https://github.com/realm/realm-java/commit/1ab8aa36731a84eb2de777561e93e7f4aee34f45", "message": "Cleanup. Added 30 min expiration time in between network requests", "committedDate": "2020-11-12T17:05:28Z", "type": "commit"}, {"oid": "fe9fd64231c1aeb639f8b83311003eb2ce856868", "url": "https://github.com/realm/realm-java/commit/fe9fd64231c1aeb639f8b83311003eb2ce856868", "message": "Added check for null rx and flow factories in config builder, added check for flows present in classpath, added missing null factory checks, added missing docs and cleaned up a bit", "committedDate": "2020-11-13T11:05:06Z", "type": "commit"}, {"oid": "3064a573189ba45f4b115deb1ab8b5685d947226", "url": "https://github.com/realm/realm-java/commit/3064a573189ba45f4b115deb1ab8b5685d947226", "message": "Created internal factory in Kotlin and left the default implementation in Java to avoid issues with javadoc, plus added invalid object tests", "committedDate": "2020-11-13T13:56:38Z", "type": "commit"}, {"oid": "be61d91aa2f10f031f2cb8c62b4b3b542e94515d", "url": "https://github.com/realm/realm-java/commit/be61d91aa2f10f031f2cb8c62b4b3b542e94515d", "message": "Removed conceptually-wrong test, it passed before due not having added the awaitClose to the callbackFlow blocks when invalid results/objects are detected (which was the case, as the realm instance had been closed right before starting collection of the flow for the second time)", "committedDate": "2020-11-13T14:13:34Z", "type": "commit"}, {"oid": "39dc648bda9f102501af7d90375f4f4f7fc8a133", "url": "https://github.com/realm/realm-java/commit/39dc648bda9f102501af7d90375f4f4f7fc8a133", "message": "Added changeset methods and tests", "committedDate": "2020-11-13T15:47:24Z", "type": "commit"}, {"oid": "462a04b17c2803f9e8ab4cb77029b82b80aaed7b", "url": "https://github.com/realm/realm-java/commit/462a04b17c2803f9e8ab4cb77029b82b80aaed7b", "message": "Added final missing tests plus renamed two wrongly-named ones", "committedDate": "2020-11-16T09:38:39Z", "type": "commit"}, {"oid": "0ef5a99fe075ed61eadcd24ef7c9a1e3c54abe9c", "url": "https://github.com/realm/realm-java/commit/0ef5a99fe075ed61eadcd24ef7c9a1e3c54abe9c", "message": "Merge branch 'el/coroutines-factory' into el/store-coroutines-example", "committedDate": "2020-11-16T09:41:51Z", "type": "commit"}, {"oid": "cdb3c5ba35b14601f56d299d7f6309819e033de4", "url": "https://github.com/realm/realm-java/commit/cdb3c5ba35b14601f56d299d7f6309819e033de4", "message": "Added missing methods in test factory", "committedDate": "2020-11-16T10:33:45Z", "type": "commit"}, {"oid": "99496fe91ba04a3948a606cbe3d72aeae5c8faca", "url": "https://github.com/realm/realm-java/commit/99496fe91ba04a3948a606cbe3d72aeae5c8faca", "message": "Merge branch 'el/coroutines-factory' into el/store-coroutines-example", "committedDate": "2020-11-16T10:35:04Z", "type": "commit"}, {"oid": "e17eb63583b991da5d30a79bb597f5fb76f121ee", "url": "https://github.com/realm/realm-java/commit/e17eb63583b991da5d30a79bb597f5fb76f121ee", "message": "wip towards adding a details screen", "committedDate": "2020-11-16T11:31:03Z", "type": "commit"}, {"oid": "e525c24b41d67adcc47cf58c9a6e48562dbda75d", "url": "https://github.com/realm/realm-java/commit/e525c24b41d67adcc47cf58c9a6e48562dbda75d", "message": "Added missing methods in test factory", "committedDate": "2020-11-16T11:31:26Z", "type": "commit"}, {"oid": "1ccfc2c96a94fc3972df91ffb6a9d589e84777ac", "url": "https://github.com/realm/realm-java/commit/1ccfc2c96a94fc3972df91ffb6a9d589e84777ac", "message": "Merge branch 'el/coroutines-factory' into el/store-coroutines-example", "committedDate": "2020-11-16T11:31:46Z", "type": "commit"}, {"oid": "5c6531f1df1dcf59f2375cf4fe70f429dd1e2231", "url": "https://github.com/realm/realm-java/commit/5c6531f1df1dcf59f2375cf4fe70f429dd1e2231", "message": "Fixed wrong parsing with moshi and added details screen", "committedDate": "2020-11-16T18:26:20Z", "type": "commit"}, {"oid": "7d59993e4dac2cb4e3a5bdd94c9f3b0c3bd8d8eb", "url": "https://github.com/realm/realm-java/commit/7d59993e4dac2cb4e3a5bdd94c9f3b0c3bd8d8eb", "message": "Changed check for a closed realm instead of invalid object since findFirstAsync always returns \"invalid object\" right away, so we can't use isValid", "committedDate": "2020-11-16T21:14:01Z", "type": "commit"}, {"oid": "ced297efbe1b503b46ec4994f6c795bc70d52909", "url": "https://github.com/realm/realm-java/commit/ced297efbe1b503b46ec4994f6c795bc70d52909", "message": "Merge branch 'el/coroutines-factory' into el/store-coroutines-example", "committedDate": "2020-11-16T21:19:13Z", "type": "commit"}, {"oid": "4b68e069c961a7d0b52f3dd8adcc90fa16dec76a", "url": "https://github.com/realm/realm-java/commit/4b68e069c961a7d0b52f3dd8adcc90fa16dec76a", "message": "Cleanup", "committedDate": "2020-11-16T22:24:06Z", "type": "commit"}, {"oid": "8d08f4733ff1c002c91f7f4d282570c5afb3e95c", "url": "https://github.com/realm/realm-java/commit/8d08f4733ff1c002c91f7f4d282570c5afb3e95c", "message": "Added api key interceptor", "committedDate": "2020-11-16T22:49:14Z", "type": "commit"}, {"oid": "5457ee2cad8afeca0305fbc89276387ea97ee096", "url": "https://github.com/realm/realm-java/commit/5457ee2cad8afeca0305fbc89276387ea97ee096", "message": "More cleanup", "committedDate": "2020-11-16T22:59:49Z", "type": "commit"}, {"oid": "3c7c3168d330cb0b1bc9c75ba85f287d5f232f2f", "url": "https://github.com/realm/realm-java/commit/3c7c3168d330cb0b1bc9c75ba85f287d5f232f2f", "message": "Cleanup", "committedDate": "2020-11-16T23:04:41Z", "type": "commit"}, {"oid": "7625da0130ebb1bc097915de50cbd66f50a69006", "url": "https://github.com/realm/realm-java/commit/7625da0130ebb1bc097915de50cbd66f50a69006", "message": "Layout cleanup", "committedDate": "2020-11-16T23:07:29Z", "type": "commit"}, {"oid": "ce910287f972655093e013ae0e4f7365b0427e66", "url": "https://github.com/realm/realm-java/commit/ce910287f972655093e013ae0e4f7365b0427e66", "message": "Merge branch 'master' into el/store-coroutines-example\n\n# Conflicts:\n#\trealm/kotlin-extensions/src/androidTest/kotlin/io/realm/CoroutinesTests.kt\n#\trealm/kotlin-extensions/src/main/kotlin/io/realm/kotlin/RealmExtensions.kt\n#\trealm/kotlin-extensions/src/main/kotlin/io/realm/kotlin/RealmListExtensions.kt\n#\trealm/kotlin-extensions/src/main/kotlin/io/realm/kotlin/RealmObjectExtensions.kt\n#\trealm/kotlin-extensions/src/main/kotlin/io/realm/kotlin/RealmResultsExtensions.kt\n#\trealm/realm-library/src/androidTest/java/io/realm/RealmConfigurationTests.java\n#\trealm/realm-library/src/main/java/io/realm/RealmConfiguration.java\n#\trealm/realm-library/src/main/java/io/realm/coroutines/RealmFlowFactory.java\n#\trealm/realm-library/src/main/java/io/realm/internal/coroutines/InternalFlowFactory.kt\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/sync/SyncConfiguration.java", "committedDate": "2020-11-27T14:55:22Z", "type": "commit"}, {"oid": "12104b63ad10c9070e617aa56e63d3375331b54f", "url": "https://github.com/realm/realm-java/commit/12104b63ad10c9070e617aa56e63d3375331b54f", "message": "Merge branch 'master' into el/store-coroutines-example\n\n# Conflicts:\n#\trealm/realm-library/src/main/cpp/object-store", "committedDate": "2020-12-14T10:39:45Z", "type": "commit"}, {"oid": "8bbac49fa88a17f21892f7ec8a3d22d94b9f917a", "url": "https://github.com/realm/realm-java/commit/8bbac49fa88a17f21892f7ec8a3d22d94b9f917a", "message": "Merge branch 'master' into el/store-coroutines-example", "committedDate": "2020-12-22T10:58:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0MzIyNw==", "url": "https://github.com/realm/realm-java/pull/7206#discussion_r551943227", "bodyText": "They are out of BETA now, so we should use the proper release: https://search.maven.org/artifact/com.dropbox.mobile.store/store4/4.0.0/jar", "author": "cmelchior", "createdAt": "2021-01-05T13:50:52Z", "path": "examples/coroutinesExample/build.gradle", "diffHunk": "@@ -54,18 +59,37 @@ dependencies {\n     implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\n     implementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\n \n-    implementation \"androidx.constraintlayout:constraintlayout:2.0.1\"\n-\n     implementation \"androidx.activity:activity-ktx:1.1.0\"\n-    implementation \"androidx.fragment:fragment-ktx:1.2.5\"\n \n     implementation \"androidx.appcompat:appcompat:1.2.0\"\n \n+    implementation \"androidx.constraintlayout:constraintlayout:2.0.4\"\n+    implementation \"androidx.coordinatorlayout:coordinatorlayout:1.1.0\"\n+\n+    implementation \"androidx.fragment:fragment-ktx:1.2.5\"\n+\n     implementation \"androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0\"\n     implementation \"androidx.lifecycle:lifecycle-runtime-ktx:2.2.0\"\n     implementation \"androidx.lifecycle:lifecycle-livedata-ktx:2.2.0\"\n     implementation \"androidx.lifecycle:lifecycle-common-java8:2.2.0\"\n \n+    implementation \"androidx.legacy:legacy-support-v4:1.0.0\"\n+\n+    implementation \"androidx.multidex:multidex:2.0.1\"\n+\n+    implementation \"androidx.recyclerview:recyclerview:1.1.0\"\n+\n+    implementation \"com.dropbox.mobile.store:store4:4.0.0-beta01\"", "originalCommit": "8bbac49fa88a17f21892f7ec8a3d22d94b9f917a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MTQ2Mw==", "url": "https://github.com/realm/realm-java/pull/7206#discussion_r552441463", "bodyText": "I would add some comments to why this is Closable", "author": "cmelchior", "createdAt": "2021-01-06T08:47:32Z", "path": "examples/coroutinesExample/src/main/java/io/realm/examples/coroutinesexample/data/newsreader/local/RealmNYTDao.kt", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.examples.coroutinesexample.data.newsreader.local\n+\n+import io.realm.Realm\n+import io.realm.RealmConfiguration\n+import io.realm.RealmList\n+import io.realm.RealmResults\n+import io.realm.examples.coroutinesexample.data.newsreader.network.model.NYTMultimedium\n+import io.realm.examples.coroutinesexample.data.newsreader.network.model.NYTimesArticle\n+import io.realm.kotlin.executeTransactionAwait\n+import io.realm.kotlin.toFlow\n+import io.realm.kotlin.where\n+import kotlinx.coroutines.asCoroutineDispatcher\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.withContext\n+import java.io.Closeable\n+import java.util.concurrent.Executors\n+\n+interface RealmNYTDao : Closeable {", "originalCommit": "8bbac49fa88a17f21892f7ec8a3d22d94b9f917a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MTczNA==", "url": "https://github.com/realm/realm-java/pull/7206#discussion_r552441734", "bodyText": "Maybe just realm? Calling it closableRealm would, to me, indicate that you can also have nonclosableRealm which isn't true.", "author": "cmelchior", "createdAt": "2021-01-06T08:48:09Z", "path": "examples/coroutinesExample/src/main/java/io/realm/examples/coroutinesexample/data/newsreader/local/RealmNYTDao.kt", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.examples.coroutinesexample.data.newsreader.local\n+\n+import io.realm.Realm\n+import io.realm.RealmConfiguration\n+import io.realm.RealmList\n+import io.realm.RealmResults\n+import io.realm.examples.coroutinesexample.data.newsreader.network.model.NYTMultimedium\n+import io.realm.examples.coroutinesexample.data.newsreader.network.model.NYTimesArticle\n+import io.realm.kotlin.executeTransactionAwait\n+import io.realm.kotlin.toFlow\n+import io.realm.kotlin.where\n+import kotlinx.coroutines.asCoroutineDispatcher\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.withContext\n+import java.io.Closeable\n+import java.util.concurrent.Executors\n+\n+interface RealmNYTDao : Closeable {\n+    suspend fun insertArticles(articles: List<RealmNYTimesArticle>)\n+    suspend fun updateArticle(id: String)\n+    suspend fun deleteArticles(section: String)\n+    suspend fun deleteAllArticles()\n+    fun getArticlesBlocking(section: String): RealmResults<RealmNYTimesArticle>\n+    fun getArticles(section: String): Flow<List<RealmNYTimesArticle>>\n+    fun getArticleBlocking(id: String): RealmNYTimesArticle?\n+    fun getArticle(id: String): Flow<RealmNYTimesArticle?>\n+    fun countArticles(section: String): Long\n+}\n+\n+class RealmNYTDaoImpl(\n+        private val realmConfiguration: RealmConfiguration\n+) : RealmNYTDao {\n+\n+    private val monoThreadDispatcher = Executors.newFixedThreadPool(1).asCoroutineDispatcher()\n+    private val closeableRealm = Realm.getInstance(realmConfiguration)", "originalCommit": "8bbac49fa88a17f21892f7ec8a3d22d94b9f917a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MTg5OQ==", "url": "https://github.com/realm/realm-java/pull/7206#discussion_r552441899", "bodyText": "Maybe add a comment as to why we need this?", "author": "cmelchior", "createdAt": "2021-01-06T08:48:33Z", "path": "examples/coroutinesExample/src/main/java/io/realm/examples/coroutinesexample/data/newsreader/local/RealmNYTDao.kt", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.examples.coroutinesexample.data.newsreader.local\n+\n+import io.realm.Realm\n+import io.realm.RealmConfiguration\n+import io.realm.RealmList\n+import io.realm.RealmResults\n+import io.realm.examples.coroutinesexample.data.newsreader.network.model.NYTMultimedium\n+import io.realm.examples.coroutinesexample.data.newsreader.network.model.NYTimesArticle\n+import io.realm.kotlin.executeTransactionAwait\n+import io.realm.kotlin.toFlow\n+import io.realm.kotlin.where\n+import kotlinx.coroutines.asCoroutineDispatcher\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.withContext\n+import java.io.Closeable\n+import java.util.concurrent.Executors\n+\n+interface RealmNYTDao : Closeable {\n+    suspend fun insertArticles(articles: List<RealmNYTimesArticle>)\n+    suspend fun updateArticle(id: String)\n+    suspend fun deleteArticles(section: String)\n+    suspend fun deleteAllArticles()\n+    fun getArticlesBlocking(section: String): RealmResults<RealmNYTimesArticle>\n+    fun getArticles(section: String): Flow<List<RealmNYTimesArticle>>\n+    fun getArticleBlocking(id: String): RealmNYTimesArticle?\n+    fun getArticle(id: String): Flow<RealmNYTimesArticle?>\n+    fun countArticles(section: String): Long\n+}\n+\n+class RealmNYTDaoImpl(\n+        private val realmConfiguration: RealmConfiguration\n+) : RealmNYTDao {\n+\n+    private val monoThreadDispatcher = Executors.newFixedThreadPool(1).asCoroutineDispatcher()", "originalCommit": "8bbac49fa88a17f21892f7ec8a3d22d94b9f917a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ1MTAyNw==", "url": "https://github.com/realm/realm-java/pull/7206#discussion_r552451027", "bodyText": "Maybe just add a comment that this is our own DI solution for the sake of keeping the example simple?", "author": "cmelchior", "createdAt": "2021-01-06T09:08:22Z", "path": "examples/coroutinesExample/src/main/java/io/realm/examples/coroutinesexample/di/DependencyGraph.kt", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.examples.coroutinesexample.di\n+\n+import com.dropbox.android.external.store4.Fetcher\n+import com.dropbox.android.external.store4.SourceOfTruth\n+import com.dropbox.android.external.store4.Store\n+import com.dropbox.android.external.store4.StoreBuilder\n+import io.realm.RealmConfiguration\n+import io.realm.examples.coroutinesexample.data.newsreader.local.RealmNYTDao\n+import io.realm.examples.coroutinesexample.data.newsreader.local.RealmNYTDaoImpl\n+import io.realm.examples.coroutinesexample.data.newsreader.local.RealmNYTimesArticle\n+import io.realm.examples.coroutinesexample.data.newsreader.local.insertArticles\n+import io.realm.examples.coroutinesexample.data.newsreader.local.repository.NewsReaderRepository\n+import io.realm.examples.coroutinesexample.data.newsreader.network.NYTimesApiClient\n+import io.realm.examples.coroutinesexample.data.newsreader.network.NYTimesApiClientImpl\n+import io.realm.examples.coroutinesexample.data.newsreader.network.model.NYTimesArticle\n+import io.realm.examples.coroutinesexample.util.NewsReaderFlowFactory\n+import kotlinx.coroutines.flow.map\n+\n+object DependencyGraph {", "originalCommit": "8bbac49fa88a17f21892f7ec8a3d22d94b9f917a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ2NTA3Nw==", "url": "https://github.com/realm/realm-java/pull/7206#discussion_r552465077", "bodyText": "Is this check needed? I thought that delay would abort in a clean way if the coroutine is closed?", "author": "cmelchior", "createdAt": "2021-01-06T09:35:15Z", "path": "examples/coroutinesExample/src/main/java/io/realm/examples/coroutinesexample/ui/details/DetailsViewModel.kt", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.examples.coroutinesexample.ui.details\n+\n+import androidx.lifecycle.*\n+import io.realm.examples.coroutinesexample.data.newsreader.local.RealmNYTimesArticle\n+import io.realm.examples.coroutinesexample.di.DependencyGraph\n+import kotlinx.coroutines.currentCoroutineContext\n+import kotlinx.coroutines.delay\n+import kotlinx.coroutines.flow.flow\n+import kotlinx.coroutines.flow.launchIn\n+import kotlinx.coroutines.flow.onEach\n+import kotlinx.coroutines.isActive\n+import kotlin.time.ExperimentalTime\n+import kotlin.time.seconds\n+\n+@ExperimentalTime\n+class DetailsViewModel : ViewModel() {\n+\n+    private val repository = DependencyGraph.provideNewsReaderRepository()\n+\n+    private val article = MutableLiveData<RealmNYTimesArticle>()\n+\n+    private val _read = MutableLiveData<Boolean>()\n+    val read: LiveData<Boolean>\n+        get() = _read\n+\n+    val date = article.map { it.updatedDate.toString() }\n+    val title = article.map { it.title }\n+    val articleText = article.map { it.abstractText }\n+\n+    override fun onCleared() {\n+        repository.close()\n+    }\n+\n+    fun loadDetails(id: String) {\n+        repository.getStory(id)\n+                .onEach { realmArticle ->\n+                    checkNotNull(realmArticle)\n+                            .also {\n+                                if (article.value == null) {\n+                                    article.postValue(it)\n+\n+                                    if (!it.read) {\n+                                        markAsRead(it)\n+                                    } else {\n+                                        markAsRead(it, true)\n+                                    }\n+                                }\n+                            }\n+                }.launchIn(viewModelScope)\n+    }\n+\n+    private fun markAsRead(article: RealmNYTimesArticle, immediately: Boolean = false) {\n+        if (immediately) {\n+            _read.postValue(true)\n+        } else {\n+            flow<Unit> {\n+                delay(2.seconds)\n+                if (currentCoroutineContext().isActive) {", "originalCommit": "8bbac49fa88a17f21892f7ec8a3d22d94b9f917a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjU4OTY0Ng==", "url": "https://github.com/realm/realm-java/pull/7206#discussion_r552589646", "bodyText": "That's correct, I forgot the flow is launched used viewModelScope.", "author": "edualonso", "createdAt": "2021-01-06T13:05:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ2NTA3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ2NzQ5OQ==", "url": "https://github.com/realm/realm-java/pull/7206#discussion_r552467499", "bodyText": "Any reason we need both ErrorException and ErrorMessage as states? Doesn't that just complicate things since we are just reading the error message from the exception anyway?", "author": "cmelchior", "createdAt": "2021-01-06T09:37:56Z", "path": "examples/coroutinesExample/src/main/java/io/realm/examples/coroutinesexample/ui/main/MainFragment.kt", "diffHunk": "@@ -21,76 +21,175 @@ import android.util.Log\n import android.view.LayoutInflater\n import android.view.View\n import android.view.ViewGroup\n-import android.widget.Button\n+import android.widget.AdapterView\n+import android.widget.ArrayAdapter\n+import android.widget.SpinnerAdapter\n+import android.widget.Toast\n import androidx.fragment.app.Fragment\n import androidx.fragment.app.viewModels\n import androidx.lifecycle.Observer\n+import androidx.recyclerview.widget.LinearLayoutManager\n import io.realm.examples.coroutinesexample.R\n-import io.realm.examples.coroutinesexample.TAG\n-import io.realm.examples.coroutinesexample.model.Dog\n+import io.realm.examples.coroutinesexample.data.newsreader.local.RealmNYTimesArticle\n+import io.realm.examples.coroutinesexample.data.newsreader.network.sectionsToNames\n+import io.realm.examples.coroutinesexample.databinding.FragmentMainBinding\n+import java.util.*\n+import kotlin.Comparator\n \n class MainFragment : Fragment() {\n \n-    companion object {\n-        fun newInstance() = MainFragment()\n+    interface OnItemClicked {\n+        fun onItemClicked(id: String)\n     }\n \n-    private val viewModel: MainViewModel by viewModels()\n+    internal lateinit var onItemclickedCallback: OnItemClicked\n \n-    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n-                              savedInstanceState: Bundle?): View {\n-        return inflater.inflate(R.layout.main_fragment, container, false)\n-                .also { view -> addClickListeners(view) }\n+    private val viewModel: MainViewModel by viewModels()\n+    private val newsReaderAdapter = MainAdapter { id ->\n+        onItemclickedCallback.onItemClicked(id)\n     }\n \n-    override fun onResume() {\n-        super.onResume()\n-        addObservers()\n-    }\n+    private lateinit var binding: FragmentMainBinding\n \n-    override fun onPause() {\n-        super.onPause()\n-        removeObservers()\n-    }\n+    override fun onCreateView(\n+            inflater: LayoutInflater,\n+            container: ViewGroup?,\n+            savedInstanceState: Bundle?\n+    ): View? = FragmentMainBinding.inflate(inflater, container, false)\n+            .also { binding ->\n+                binding.lifecycleOwner = viewLifecycleOwner\n+                this.binding = binding\n+                setupSpinner()\n+                setupRecyclerView()\n+                setupLiveData()\n+            }.root\n \n-    private fun addClickListeners(view: View) {\n-        view.findViewById<Button>(R.id.buttonHeavyTransaction).setOnClickListener {\n-            // Calling this multiple times before each transaction is done will not\n-            // freeze the UI\n-            viewModel.insertDogs(100000)\n-        }\n-        view.findViewById<Button>(R.id.buttonTransaction).setOnClickListener {\n-            // Calling this multiple times before each transaction is done will not\n-            // freeze the UI\n-            viewModel.insertDogs()\n+    private fun setupSpinner() {\n+        with(binding.spinner) {\n+            adapter = ArrayAdapter<CharSequence>(\n+                    context,\n+                    android.R.layout.simple_spinner_dropdown_item,\n+                    sectionsToNames.keys.sortedWith(\n+                            Comparator { o1, o2 ->\n+                                if (o1.toLowerCase(Locale.ROOT) == \"home\") return@Comparator -1\n+                                if (o2.toLowerCase(Locale.ROOT) == \"home\") return@Comparator 1\n+                                return@Comparator o1.compareTo(o2, ignoreCase = true)\n+                            }\n+                    )\n+            )\n+            onItemSelectedListener = object : AdapterView.OnItemSelectedListener {\n+                override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {\n+                    viewModel.getTopStories(getApiSection(adapter, position))\n+                }\n+\n+                override fun onNothingSelected(parent: AdapterView<*>?) {\n+                    // No-op\n+                }\n+            }\n         }\n-        view.findViewById<Button>(R.id.buttonCount).setOnClickListener {\n-            viewModel.countDogs()\n+    }\n+\n+    private fun setupRecyclerView() {\n+        with(binding.list) {\n+            layoutManager = LinearLayoutManager(context)\n+            adapter = newsReaderAdapter\n         }\n-        view.findViewById<Button>(R.id.buttonDelete).setOnClickListener {\n-            // Calling this while bulk-inserting will not freeze the UI\n-            viewModel.deleteAll()\n+\n+        with(binding.refresh) {\n+            setOnRefreshListener {\n+                with(binding.spinner) {\n+                    viewModel.getTopStories(getApiSection(adapter, selectedItemPosition), true)\n+                }\n+            }\n         }\n-        view.findViewById<Button>(R.id.buttonCancelCoroutine).setOnClickListener {\n-            viewModel.cancel()\n+    }\n+\n+    private fun setupLiveData() {\n+        viewModel.newsReaderState.observe(viewLifecycleOwner, Observer { viewState ->\n+            when (viewState) {\n+                is NewsReaderState.Loading -> {\n+                    Log.d(TAG, \"--- origin: ${viewState.origin}, loading\")\n+                    RealmStateHelper.loading(binding)\n+                }\n+                is NewsReaderState.Data -> {\n+                    Log.d(TAG, \"--- origin: ${viewState.origin}, elements: ${viewState.data.size}\")\n+                    RealmStateHelper.data(binding, viewState.data, newsReaderAdapter)\n+                }\n+                is NewsReaderState.NoNewData -> {\n+                    Log.d(TAG, \"--- origin: ${viewState.origin}, no new data\")\n+                    RealmStateHelper.noNewData(binding)\n+                }\n+                is NewsReaderState.ErrorException -> {\n+                    val stacktrace = viewState.throwable.cause?.stackTrace?.joinToString { \"$it\\n\" }\n+                    Log.e(TAG, \"--- error (exception): ${viewState.throwable.message} - ${viewState.throwable.cause?.message}: $stacktrace\")\n+                    RealmStateHelper.error(binding)\n+                }\n+                is NewsReaderState.ErrorMessage -> {\n+                    Log.e(TAG, \"--- error (message): ${viewState.message}\")\n+                    RealmStateHelper.error(binding)\n+                }\n+            }\n+        })\n+    }\n+\n+    private fun getApiSection(adapter: SpinnerAdapter, position: Int): String {\n+        val apiSection = adapter.getItem(position) as String\n+        return requireNotNull(sectionsToNames[apiSection])\n+    }\n+\n+    companion object {\n+\n+        const val TAG = \"MainFragment\"\n+\n+        fun newInstance() = MainFragment()\n+    }\n+}\n+\n+sealed class NewsReaderState {\n+\n+    abstract val origin: String\n+\n+    data class Loading(override val origin: String) : NewsReaderState()\n+    data class Data(override val origin: String, val data: List<RealmNYTimesArticle>) : NewsReaderState()\n+    data class NoNewData(override val origin: String) : NewsReaderState()\n+    data class ErrorException(override val origin: String, val throwable: Throwable) : NewsReaderState()", "originalCommit": "8bbac49fa88a17f21892f7ec8a3d22d94b9f917a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjU4OTg3NA==", "url": "https://github.com/realm/realm-java/pull/7206#discussion_r552589874", "bodyText": "IIRC this is because Store can emit either an \"error exception\" or an \"error message\". I decided to leave it the same way for consistency.", "author": "edualonso", "createdAt": "2021-01-06T13:05:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ2NzQ5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ2ODM3Nw==", "url": "https://github.com/realm/realm-java/pull/7206#discussion_r552468377", "bodyText": "Wouldn't a much cleaner solution be to just call the super methods and then drop or filter out the first element emitted?\nCopying the entire internal implementation seems very error-prone in terms of maintaining it?", "author": "cmelchior", "createdAt": "2021-01-06T09:39:34Z", "path": "examples/coroutinesExample/src/main/java/io/realm/examples/coroutinesexample/util/NewsReaderFlowFactory.kt", "diffHunk": "@@ -0,0 +1,500 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.examples.coroutinesexample.util\n+\n+import io.realm.*\n+import io.realm.coroutines.FlowFactory\n+import io.realm.rx.CollectionChange\n+import io.realm.rx.ObjectChange\n+import kotlinx.coroutines.channels.awaitClose\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.callbackFlow\n+import kotlinx.coroutines.flow.flowOf\n+\n+/**\n+ * Similar to [io.realm.coroutines.RealmFlowFactory] but it will not emit the current value\n+ * immediately. This is needed by Store to function properly or else it will receive updates with\n+ * empty [RealmResults] that will make it think existing values for the current key are present.\n+ */\n+class NewsReaderFlowFactory : FlowFactory {", "originalCommit": "8bbac49fa88a17f21892f7ec8a3d22d94b9f917a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjU5MDA0MA==", "url": "https://github.com/realm/realm-java/pull/7206#discussion_r552590040", "bodyText": "Well spotted. I also thought about doing that but when I did this the updated factory (with the latest changes and such) wasn't in the source branch for this branch, so I copied it entirely from the flow factory branch I was simultaneously working on as temporary solution. It seems I forgot to clean it up \ud83d\ude4a", "author": "edualonso", "createdAt": "2021-01-06T13:05:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ2ODM3Nw=="}], "type": "inlineReview"}, {"oid": "37e2c15dab2e081508909a52505f378c12ea0626", "url": "https://github.com/realm/realm-java/commit/37e2c15dab2e081508909a52505f378c12ea0626", "message": "Updated OS pointer to master's", "committedDate": "2021-01-06T09:58:15Z", "type": "commit"}, {"oid": "ad4c7dd72c3dc5d9178c015f668925e228423cac", "url": "https://github.com/realm/realm-java/commit/ad4c7dd72c3dc5d9178c015f668925e228423cac", "message": "Removed old newsreader example, updated Store library dependency, cleaned up flow factory, added documentation, removed unnecessary coroutine context check", "committedDate": "2021-01-06T13:10:10Z", "type": "commit"}]}