{"pr_number": 6722, "pr_title": "Add support for MongoDB datatypes: Decimal128 and ObjectId", "pr_createdAt": "2020-01-14T13:45:25Z", "pr_url": "https://github.com/realm/realm-java/pull/6722", "timeline": [{"oid": "28bdd4299d32df0c0b269c359fbe9b5fa93b6b68", "url": "https://github.com/realm/realm-java/commit/28bdd4299d32df0c0b269c359fbe9b5fa93b6b68", "message": "Preliminary support for ObjectId and Decimal128", "committedDate": "2020-01-14T12:55:29Z", "type": "commit"}, {"oid": "ff0ca74b1f164c628ea0caf196c71ad0867bbf70", "url": "https://github.com/realm/realm-java/commit/ff0ca74b1f164c628ea0caf196c71ad0867bbf70", "message": "Initial Row and Annotation processor support", "committedDate": "2020-01-14T23:33:46Z", "type": "commit"}, {"oid": "fda6bcea1cb1e3725d8a0c98be1873b3bf6b4ee9", "url": "https://github.com/realm/realm-java/commit/fda6bcea1cb1e3725d8a0c98be1873b3bf6b4ee9", "message": "Add more missing API pieces used by the annotation processor", "committedDate": "2020-01-15T21:25:05Z", "type": "commit"}, {"oid": "228d4691fc55db0c926be71e8e210b43c08df06d", "url": "https://github.com/realm/realm-java/commit/228d4691fc55db0c926be71e8e210b43c08df06d", "message": "Add annotation processor tests", "committedDate": "2020-01-15T22:32:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0ODU3Mg==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r367148572", "bodyText": "You could do JAVA_TO_REALM_TYPES = mapOf(\"byte\" to RealmFieldType.INTEGER, ...) and so on to make it more Kotlin-y", "author": "Zhuinden", "createdAt": "2020-01-15T22:49:06Z", "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/Constants.kt", "diffHunk": "@@ -70,34 +74,42 @@ object Constants {\n     }\n \n     init {\n-        JAVA_TO_REALM_TYPES[\"byte\"] = RealmFieldType.INTEGER\n-        JAVA_TO_REALM_TYPES[\"short\"] = RealmFieldType.INTEGER\n-        JAVA_TO_REALM_TYPES[\"int\"] = RealmFieldType.INTEGER\n-        JAVA_TO_REALM_TYPES[\"long\"] = RealmFieldType.INTEGER\n-        JAVA_TO_REALM_TYPES[\"float\"] = RealmFieldType.FLOAT\n-        JAVA_TO_REALM_TYPES[\"double\"] = RealmFieldType.DOUBLE\n-        JAVA_TO_REALM_TYPES[\"boolean\"] = RealmFieldType.BOOLEAN\n-        JAVA_TO_REALM_TYPES[\"java.lang.Byte\"] = RealmFieldType.INTEGER\n-        JAVA_TO_REALM_TYPES[\"java.lang.Short\"] = RealmFieldType.INTEGER\n-        JAVA_TO_REALM_TYPES[\"java.lang.Integer\"] = RealmFieldType.INTEGER\n-        JAVA_TO_REALM_TYPES[\"java.lang.Long\"] = RealmFieldType.INTEGER\n-        JAVA_TO_REALM_TYPES[\"java.lang.Float\"] = RealmFieldType.FLOAT\n-        JAVA_TO_REALM_TYPES[\"java.lang.Double\"] = RealmFieldType.DOUBLE\n-        JAVA_TO_REALM_TYPES[\"java.lang.Boolean\"] = RealmFieldType.BOOLEAN\n-        JAVA_TO_REALM_TYPES[\"java.lang.String\"] = RealmFieldType.STRING\n-        JAVA_TO_REALM_TYPES[\"java.util.Date\"] = RealmFieldType.DATE\n-        JAVA_TO_REALM_TYPES[\"byte[]\"] = RealmFieldType.BINARY\n-        // TODO: add support for char and Char\n+        JAVA_TO_REALM_TYPES.apply {\n+            this[\"byte\"] = RealmFieldType.INTEGER", "originalCommit": "fda6bcea1cb1e3725d8a0c98be1873b3bf6b4ee9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8eabcd289ee70380391e8cecbb9dd5bd8a34fb78", "url": "https://github.com/realm/realm-java/commit/8eabcd289ee70380391e8cecbb9dd5bd8a34fb78", "message": "Add query methods", "committedDate": "2020-01-16T08:40:09Z", "type": "commit"}, {"oid": "d21e887893c8ab8a568750bc5bc839966f8bc522", "url": "https://github.com/realm/realm-java/commit/d21e887893c8ab8a568750bc5bc839966f8bc522", "message": "Add Java query API", "committedDate": "2020-01-16T12:54:42Z", "type": "commit"}, {"oid": "e0f371c105f6048df26c19690b3abbb33e46d47e", "url": "https://github.com/realm/realm-java/commit/e0f371c105f6048df26c19690b3abbb33e46d47e", "message": "Add stubs for query primitives", "committedDate": "2020-01-16T15:25:16Z", "type": "commit"}, {"oid": "c13d5d8bbb6622f49d08099d4b1a086804604f92", "url": "https://github.com/realm/realm-java/commit/c13d5d8bbb6622f49d08099d4b1a086804604f92", "message": "Add preliminary support to RealmResults batch updates and DynamicRealmObject", "committedDate": "2020-01-17T16:47:03Z", "type": "commit"}, {"oid": "47eead7c4ac4d6fbb3592a68c5df06a2572abf67", "url": "https://github.com/realm/realm-java/commit/47eead7c4ac4d6fbb3592a68c5df06a2572abf67", "message": "Add missing methods for Realm.create(Class, ObjectId)", "committedDate": "2020-01-17T21:00:21Z", "type": "commit"}, {"oid": "1e5eea7d3cce528a30da56b5d09a573060f69991", "url": "https://github.com/realm/realm-java/commit/1e5eea7d3cce528a30da56b5d09a573060f69991", "message": "Fix compiler errors", "committedDate": "2020-01-29T07:45:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEzNDAxOA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r377134018", "bodyText": "You can use the dependency coordinate to download the file directly using\nfile(DOWNLOAD \"https://repo1.maven.org/maven2/org/mongodb/bson/3.12.1/bson-3.12.1.jar\" \"${PROJECT_BINARY_DIR}/\")", "author": "nhachicha", "createdAt": "2020-02-10T15:30:31Z", "path": "realm/realm-library/cmake-libs/README", "diffHunk": "@@ -0,0 +1,6 @@\n+The files in this directory are only being used by CMake during the build process in order to", "originalCommit": "1e5eea7d3cce528a30da56b5d09a573060f69991", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxOTQ2NA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r378219464", "bodyText": "maybe suffix these methods with Decimale128/ObjectId to make them easy to navigate/less ambiguous", "author": "nhachicha", "createdAt": "2020-02-12T12:26:29Z", "path": "realm/realm-library/src/main/java/io/realm/internal/TableQuery.java", "diffHunk": "@@ -638,6 +718,30 @@ public void alwaysFalse() {\n \n     private native void nativeContains(long nativeQueryPtr, long[] columnKeys, long[] tablePtrs, String value, boolean caseSensitive);\n \n+    private native void nativeEqual(long nativeQueryPtr, long[] columnIndex, long[] tablePtrs, long high, long low);", "originalCommit": "1e5eea7d3cce528a30da56b5d09a573060f69991", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyMjIzNw==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r378222237", "bodyText": "missed throwing IllegalStateException", "author": "nhachicha", "createdAt": "2020-02-12T12:32:53Z", "path": "realm/realm-library/src/main/java/io/realm/internal/PendingRow.java", "diffHunk": "@@ -198,6 +211,16 @@ public void setNull(long columnKey) {\n         throw new IllegalStateException(QUERY_NOT_RETURNED_MESSAGE);\n     }\n \n+    @Override\n+    public void setDecimal128(long columnKey, Decimal128 value) {\n+", "originalCommit": "1e5eea7d3cce528a30da56b5d09a573060f69991", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyMDQyOQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r378320429", "bodyText": "formatting", "author": "nhachicha", "createdAt": "2020-02-12T15:23:00Z", "path": "realm/realm-library/src/main/java/io/realm/internal/InvalidRow.java", "diffHunk": "@@ -94,6 +97,15 @@ public String getString(long columnKey) {\n         throw getStubException();\n     }\n \n+    @Override\n+    public Decimal128 getDecimal128(long columnKey) {\n+        throw getStubException();    }", "originalCommit": "1e5eea7d3cce528a30da56b5d09a573060f69991", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMzODQ5OA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r378338498", "bodyText": "why not use Decimal123.parse instead of the BigDecimal?", "author": "nhachicha", "createdAt": "2020-02-12T15:49:23Z", "path": "realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java", "diffHunk": "@@ -514,6 +518,12 @@ public void set(String fieldName, Object value) {\n                 case DATE:\n                     value = JsonUtils.stringToDate(strValue);\n                     break;\n+                case DECIMAL128:\n+                    value = new Decimal128(new BigDecimal(strValue));", "originalCommit": "1e5eea7d3cce528a30da56b5d09a573060f69991", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1MjIxMw==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r378352213", "bodyText": "why adding this, realm-library already includes implementation 'org.mongodb:bson:3.12.0' ?", "author": "nhachicha", "createdAt": "2020-02-12T16:09:21Z", "path": "realm/kotlin-extensions/build.gradle", "diffHunk": "@@ -70,6 +70,7 @@ android {\n }\n \n dependencies {\n+    compileOnly 'org.mongodb:bson:3.12.0'", "originalCommit": "1e5eea7d3cce528a30da56b5d09a573060f69991", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1Mjc3MQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r378352771", "bodyText": "I'm not sure about this comment, you added the Bson deps in the library gradle implementation 'org.mongodb:bson:3.12.0'", "author": "nhachicha", "createdAt": "2020-02-12T16:10:14Z", "path": "realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java", "diffHunk": "@@ -558,6 +568,13 @@ private void setValue(String fieldName, Object value) {\n             RealmList<?> list = (RealmList<?>) value;\n             setList(fieldName, list);\n         } else {\n+            // Handle Decimal128 and ObjectId in a special way since they might not be on the\n+            // classpath", "originalCommit": "1e5eea7d3cce528a30da56b5d09a573060f69991", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b99c011d0c2285f94d2ea791b3a994de12f84a93", "url": "https://github.com/realm/realm-java/commit/b99c011d0c2285f94d2ea791b3a994de12f84a93", "message": "Merge branch 'v10' into cm/new-types\n\n# Conflicts:\n#\trealm/realm-annotations-processor/build.gradle\n#\trealm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java\n#\trealm/realm-library/src/main/cpp/CMakeLists.txt\n#\trealm/realm-library/src/main/java/io/realm/RealmQuery.java", "committedDate": "2020-03-08T21:22:09Z", "type": "commit"}, {"oid": "4a497119c99206cd7f24b0f4f0dc1b7cae3a752b", "url": "https://github.com/realm/realm-java/commit/4a497119c99206cd7f24b0f4f0dc1b7cae3a752b", "message": "Merge remote-tracking branch 'origin/v10' into cm/new-types", "committedDate": "2020-03-11T19:29:11Z", "type": "commit"}, {"oid": "6b7d136ecaf16ea4c04537763fe39b7befa48a8d", "url": "https://github.com/realm/realm-java/commit/6b7d136ecaf16ea4c04537763fe39b7befa48a8d", "message": "Add JNI support and update tests", "committedDate": "2020-03-30T23:03:10Z", "type": "commit"}, {"oid": "8167f6eed95259c358e766b7e6bb75d799cb142f", "url": "https://github.com/realm/realm-java/commit/8167f6eed95259c358e766b7e6bb75d799cb142f", "message": "Fixing the Annotation processor", "committedDate": "2020-04-01T05:16:55Z", "type": "commit"}, {"oid": "7e2371160d85cf96e1556e93843f655c550167cf", "url": "https://github.com/realm/realm-java/commit/7e2371160d85cf96e1556e93843f655c550167cf", "message": "update to latest Sync release", "committedDate": "2020-04-03T01:20:41Z", "type": "commit"}, {"oid": "cfd2d4f911c7b0e9ae71d16c1b1181925c8d4e33", "url": "https://github.com/realm/realm-java/commit/cfd2d4f911c7b0e9ae71d16c1b1181925c8d4e33", "message": "Merge remote-tracking branch 'origin/v10' into cm/new-types", "committedDate": "2020-04-03T01:39:46Z", "type": "commit"}, {"oid": "fa18e877cc8225e7fcd5fb19effd53a731c0f74d", "url": "https://github.com/realm/realm-java/commit/fa18e877cc8225e7fcd5fb19effd53a731c0f74d", "message": "JNI fix", "committedDate": "2020-04-03T14:24:13Z", "type": "commit"}, {"oid": "db7df7203ed30e8868d55de3d08454d41e939a50", "url": "https://github.com/realm/realm-java/commit/db7df7203ed30e8868d55de3d08454d41e939a50", "message": "Merge remote-tracking branch 'origin/v10' into cm/new-types", "committedDate": "2020-04-03T15:12:31Z", "type": "commit"}, {"oid": "a82a9bbc8a30a0a3581f7dfccc126e7f8651879d", "url": "https://github.com/realm/realm-java/commit/a82a9bbc8a30a0a3581f7dfccc126e7f8651879d", "message": "- Add external BSON dependencies\n- Add test for Decimal\n- Enabling query based test for new types", "committedDate": "2020-04-04T03:44:21Z", "type": "commit"}, {"oid": "a83f884789e9e5561c5f584ba04639c4735853a0", "url": "https://github.com/realm/realm-java/commit/a83f884789e9e5561c5f584ba04639c4735853a0", "message": "- Adding Dynamic Realm Tests\n- Adding more Decimal128 tests\n- Updating some nullability tests", "committedDate": "2020-04-06T17:49:03Z", "type": "commit"}, {"oid": "080453095abb78516bdc867c55a26e9bd4cd5d38", "url": "https://github.com/realm/realm-java/commit/080453095abb78516bdc867c55a26e9bd4cd5d38", "message": "- Updating ObjectId tests\n- Adding JSON tests", "committedDate": "2020-04-09T18:25:06Z", "type": "commit"}, {"oid": "2d77dbb8a54e913d42efdc007a1ed86bc94be7c5", "url": "https://github.com/realm/realm-java/commit/2d77dbb8a54e913d42efdc007a1ed86bc94be7c5", "message": "Update Annotation Processor Tests", "committedDate": "2020-04-09T18:49:12Z", "type": "commit"}, {"oid": "54c2a23ea307fdcc15e51784e1956fc300437a81", "url": "https://github.com/realm/realm-java/commit/54c2a23ea307fdcc15e51784e1956fc300437a81", "message": "- Add support for min/max/average between query for Decimal128\n- Update to latest Core", "committedDate": "2020-04-14T19:49:52Z", "type": "commit"}, {"oid": "70a5da692612b6eaaabdb93e0bd07e626763c9da", "url": "https://github.com/realm/realm-java/commit/70a5da692612b6eaaabdb93e0bd07e626763c9da", "message": "adding bson dependency for kotlin-extnsion", "committedDate": "2020-04-15T15:32:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwODE5Mw==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408708193", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Added `Realm.freeze()`, `RealmObject.freeze()`, `RealmResults.freeze()` and `RealmList.freeze()`. These methods will return a frozen version of the current Realm data. This data can be read from any thread without throwing an `IllegalStateException`, but will never change. All frozen Realms and data can be closed by calling `Realm.close()` on the frozen Realm, but fully closing all live Realms will also close the frozen ones. Frozen data can be queried as normal, but trying to mutate it in any way will throw an `IllegalStateException`. This includes all methods that attempt to refresh or add change listeners. (Issue [#6590](https://github.com/realm/realm-java/pull/6590))\n          \n          \n            \n            * Add support for `org.bson.types.ObjectId` as a primary key.\n          \n          \n            \n            * Added `Realm.freeze()`, `RealmObject.freeze()`, `RealmResults.freeze()` and `RealmList.freeze()`. These methods will return a frozen version of the current Realm data. This data can be read from any thread without throwing an `IllegalStateException`, but will never change. All frozen Realms and data can be closed by calling `Realm.close()` on the frozen Realm, but fully closing all live Realms will also close the frozen ones. Frozen data can be queried as normal, but trying to mutate it in any way will throw an `IllegalStateException`. This includes all methods that attempt to refresh or add change listeners. (Issue [#6590](https://github.com/realm/realm-java/pull/6590))", "author": "cmelchior", "createdAt": "2020-04-15T09:32:47Z", "path": "CHANGELOG.md", "diffHunk": "@@ -40,6 +40,7 @@ NOTE: This version bumps the Realm file format to version 10. It is not possible\n * [ObjectServer] `IncompatibleSyncedFileException` is removed and no longer thrown.\n \n ### Enhancements\n+* Added support for `org.bson.types.Decimal128` and `org.bson.types.ObjectId` as supported fields in model classes.\n * Added `Realm.freeze()`, `RealmObject.freeze()`, `RealmResults.freeze()` and `RealmList.freeze()`. These methods will return a frozen version of the current Realm data. This data can be read from any thread without throwing an `IllegalStateException`, but will never change. All frozen Realms and data can be closed by calling `Realm.close()` on the frozen Realm, but fully closing all live Realms will also close the frozen ones. Frozen data can be queried as normal, but trying to mutate it in any way will throw an `IllegalStateException`. This includes all methods that attempt to refresh or add change listeners. (Issue [#6590](https://github.com/realm/realm-java/pull/6590))", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwOTg3MQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408709871", "bodyText": "This should use the version from dependencies.list. They can be loaded using something like\ndef properties = new Properties()\nproperties.load(new FileInputStream(\"${projectDir}/../../dependencies.list\"))", "author": "cmelchior", "createdAt": "2020-04-15T09:35:37Z", "path": "realm/realm-annotations-processor/build.gradle", "diffHunk": "@@ -8,15 +8,15 @@ sourceCompatibility = '1.8'\n targetCompatibility = '1.8'\n \n dependencies {\n-    compile \"com.squareup:javawriter:2.5.1\"\n-    compile \"io.realm:realm-annotations:${version}\"\n-\n-    testCompile files('../realm-library/build/intermediates/aar_main_jar/objectServerRelease/classes.jar') // Java projects cannot depend on AAR files\n-    testCompile files(\"${System.properties['java.home']}/../lib/tools.jar\") // This is needed otherwise compile-testing won't be able to find it\n-    testCompile group:'junit', name:'junit', version:'4.12'\n-    testCompile group:'com.google.testing.compile', name:'compile-testing', version:'0.6'\n-    testCompile files(file(\"${System.env.ANDROID_HOME}/platforms/android-27/android.jar\"))\n+    implementation \"com.squareup:javawriter:2.5.1\"\n+    implementation \"io.realm:realm-annotations:${version}\"\n+    implementation \"org.mongodb:bson:3.12.0\"", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyMzA1MA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408723050", "bodyText": "Two questions:\n\nWhy getLong() instead of casting decimal to long?\nWouldn't it be more accurate to both test for double and long?", "author": "cmelchior", "createdAt": "2020-04-15T09:57:08Z", "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmJsonTypeHelper.kt", "diffHunk": "@@ -318,6 +317,97 @@ object RealmJsonTypeHelper {\n         }\n     }\n \n+    private class Decimal128TypeConverter : JsonToRealmFieldTypeConverter {\n+        @Throws(IOException::class)\n+        override fun emitTypeConversion(varName: String, accessor: String, fieldName: String, fieldType: QualifiedClassName, writer: JavaWriter) {\n+            writer.apply {\n+                beginControlFlow(\"if (json.has(\\\"%s\\\"))\", fieldName)\n+                beginControlFlow(\"if (json.isNull(\\\"%s\\\"))\", fieldName)\n+                emitStatement(\"%s.%s(null)\", varName, accessor)\n+                nextControlFlow(\"else\")\n+                emitStatement(\"Object decimal = json.get(\\\"%s\\\")\", fieldName)\n+                beginControlFlow(\"if (decimal instanceof org.bson.types.Decimal128)\")\n+                emitStatement(\"%s.%s((org.bson.types.Decimal128) decimal)\", varName, accessor)\n+                nextControlFlow(\"else if (decimal instanceof String)\")\n+                emitStatement(\"%s.%s(org.bson.types.Decimal128.parse((String)decimal))\", varName, accessor)\n+                nextControlFlow(\"else\")\n+                emitStatement(\"%s.%s(new org.bson.types.Decimal128(json.getLong(\\\"%s\\\")))\", varName, accessor, fieldName)", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyNTA5Mw==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408725093", "bodyText": "Same, why long instead of double?", "author": "cmelchior", "createdAt": "2020-04-15T10:00:33Z", "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmJsonTypeHelper.kt", "diffHunk": "@@ -318,6 +317,97 @@ object RealmJsonTypeHelper {\n         }\n     }\n \n+    private class Decimal128TypeConverter : JsonToRealmFieldTypeConverter {\n+        @Throws(IOException::class)\n+        override fun emitTypeConversion(varName: String, accessor: String, fieldName: String, fieldType: QualifiedClassName, writer: JavaWriter) {\n+            writer.apply {\n+                beginControlFlow(\"if (json.has(\\\"%s\\\"))\", fieldName)\n+                beginControlFlow(\"if (json.isNull(\\\"%s\\\"))\", fieldName)\n+                emitStatement(\"%s.%s(null)\", varName, accessor)\n+                nextControlFlow(\"else\")\n+                emitStatement(\"Object decimal = json.get(\\\"%s\\\")\", fieldName)\n+                beginControlFlow(\"if (decimal instanceof org.bson.types.Decimal128)\")\n+                emitStatement(\"%s.%s((org.bson.types.Decimal128) decimal)\", varName, accessor)\n+                nextControlFlow(\"else if (decimal instanceof String)\")\n+                emitStatement(\"%s.%s(org.bson.types.Decimal128.parse((String)decimal))\", varName, accessor)\n+                nextControlFlow(\"else\")\n+                emitStatement(\"%s.%s(new org.bson.types.Decimal128(json.getLong(\\\"%s\\\")))\", varName, accessor, fieldName)\n+                endControlFlow()\n+                endControlFlow()\n+                endControlFlow()\n+            }\n+        }\n+\n+        @Throws(IOException::class)\n+        override fun emitStreamTypeConversion(varName: String, accessor: String, fieldName: String, fieldType: QualifiedClassName, writer: JavaWriter, isPrimaryKey: Boolean) {\n+            writer.apply {\n+                beginControlFlow(\"if (reader.peek() == JsonToken.NULL)\")\n+                emitStatement(\"reader.skipValue()\")\n+                emitStatement(\"%s.%s(null)\", varName, accessor)\n+                nextControlFlow(\"else if (reader.peek() == JsonToken.NUMBER)\")\n+                emitStatement(\"%s.%s(new org.bson.types.Decimal128(reader.nextLong()))\", varName, accessor)", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyNTM0Ng==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408725346", "bodyText": "Will this cast ever succeed?", "author": "cmelchior", "createdAt": "2020-04-15T10:01:00Z", "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmJsonTypeHelper.kt", "diffHunk": "@@ -318,6 +317,97 @@ object RealmJsonTypeHelper {\n         }\n     }\n \n+    private class Decimal128TypeConverter : JsonToRealmFieldTypeConverter {\n+        @Throws(IOException::class)\n+        override fun emitTypeConversion(varName: String, accessor: String, fieldName: String, fieldType: QualifiedClassName, writer: JavaWriter) {\n+            writer.apply {\n+                beginControlFlow(\"if (json.has(\\\"%s\\\"))\", fieldName)\n+                beginControlFlow(\"if (json.isNull(\\\"%s\\\"))\", fieldName)\n+                emitStatement(\"%s.%s(null)\", varName, accessor)\n+                nextControlFlow(\"else\")\n+                emitStatement(\"Object decimal = json.get(\\\"%s\\\")\", fieldName)\n+                beginControlFlow(\"if (decimal instanceof org.bson.types.Decimal128)\")", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc2NDAwNQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r409764005", "bodyText": "yes it's tested in createUsingJsonStream_decimal128", "author": "nhachicha", "createdAt": "2020-04-16T18:28:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyNTM0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODczMzc1Nw==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408733757", "bodyText": "I don't think this cast will ever succeed?", "author": "cmelchior", "createdAt": "2020-04-15T10:15:50Z", "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmJsonTypeHelper.kt", "diffHunk": "@@ -318,6 +317,97 @@ object RealmJsonTypeHelper {\n         }\n     }\n \n+    private class Decimal128TypeConverter : JsonToRealmFieldTypeConverter {\n+        @Throws(IOException::class)\n+        override fun emitTypeConversion(varName: String, accessor: String, fieldName: String, fieldType: QualifiedClassName, writer: JavaWriter) {\n+            writer.apply {\n+                beginControlFlow(\"if (json.has(\\\"%s\\\"))\", fieldName)\n+                beginControlFlow(\"if (json.isNull(\\\"%s\\\"))\", fieldName)\n+                emitStatement(\"%s.%s(null)\", varName, accessor)\n+                nextControlFlow(\"else\")\n+                emitStatement(\"Object decimal = json.get(\\\"%s\\\")\", fieldName)\n+                beginControlFlow(\"if (decimal instanceof org.bson.types.Decimal128)\")\n+                emitStatement(\"%s.%s((org.bson.types.Decimal128) decimal)\", varName, accessor)\n+                nextControlFlow(\"else if (decimal instanceof String)\")\n+                emitStatement(\"%s.%s(org.bson.types.Decimal128.parse((String)decimal))\", varName, accessor)\n+                nextControlFlow(\"else\")\n+                emitStatement(\"%s.%s(new org.bson.types.Decimal128(json.getLong(\\\"%s\\\")))\", varName, accessor, fieldName)\n+                endControlFlow()\n+                endControlFlow()\n+                endControlFlow()\n+            }\n+        }\n+\n+        @Throws(IOException::class)\n+        override fun emitStreamTypeConversion(varName: String, accessor: String, fieldName: String, fieldType: QualifiedClassName, writer: JavaWriter, isPrimaryKey: Boolean) {\n+            writer.apply {\n+                beginControlFlow(\"if (reader.peek() == JsonToken.NULL)\")\n+                emitStatement(\"reader.skipValue()\")\n+                emitStatement(\"%s.%s(null)\", varName, accessor)\n+                nextControlFlow(\"else if (reader.peek() == JsonToken.NUMBER)\")\n+                emitStatement(\"%s.%s(new org.bson.types.Decimal128(reader.nextLong()))\", varName, accessor)\n+                nextControlFlow(\"else\")\n+                emitStatement(\"%s.%s(org.bson.types.Decimal128.parse(reader.nextString()))\", varName, accessor)\n+                endControlFlow()\n+            }\n+        }\n+\n+        @Throws(IOException::class)\n+        override fun emitGetObjectWithPrimaryKeyValue(realmObjectClass: QualifiedClassName, realmObjectProxyClass: QualifiedClassName, fieldName: String, writer: JavaWriter) {\n+            throw IllegalArgumentException(\"'Decimal128' is not allowed as a primary key value.\")\n+        }\n+    }\n+\n+    private class ObjectIdTypeConverter() : JsonToRealmFieldTypeConverter {\n+        @Throws(IOException::class)\n+        override fun emitTypeConversion(varName: String, accessor: String, fieldName: String, fieldType: QualifiedClassName, writer: JavaWriter) {\n+            writer.apply {\n+                beginControlFlow(\"if (json.has(\\\"%s\\\"))\", fieldName)\n+                beginControlFlow(\"if (json.isNull(\\\"%s\\\"))\", fieldName)\n+                emitStatement(\"%s.%s(null)\", varName, accessor)\n+                nextControlFlow(\"else\")\n+                emitStatement(\"Object id = json.get(\\\"%s\\\")\", fieldName)\n+                beginControlFlow(\"if (id instanceof org.bson.types.ObjectId)\")", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc2NDY5MQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r409764691", "bodyText": "it is tested in createObjectFromJson_objectId", "author": "nhachicha", "createdAt": "2020-04-16T18:29:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODczMzc1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODczODg5Ng==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408738896", "bodyText": "Maybe add an else clause throwing an exception if no type matches?", "author": "cmelchior", "createdAt": "2020-04-15T10:25:23Z", "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt", "diffHunk": "@@ -1731,28 +1781,38 @@ class RealmProxyClassGenerator(private val processingEnvironment: ProcessingEnvi\n                 buildExcludeFieldsList(writer, metadata.fields)\n                 emitStatement(\"%s obj = realm.createObjectInternal(%s.class, true, excludeFields)\", qualifiedJavaClassName, qualifiedJavaClassName)\n             } else {\n-                val pkType = if (Utils.isString(metadata.primaryKey)) \"String\" else \"Long\"\n+                var pkType = \"Long\"\n+                var jsonAccessorMethodSuffix = \"Long\"\n+                var findFirstCast = \"\"\n+                if (Utils.isString(metadata.primaryKey)) {\n+                    pkType = \"String\"\n+                    jsonAccessorMethodSuffix=  \"String\"\n+                } else if (Utils.isObjectId(metadata.primaryKey)) {\n+                    pkType = \"ObjectId\"\n+                    findFirstCast = \"(org.bson.types.ObjectId)\"\n+                    jsonAccessorMethodSuffix = \"\"\n+                }", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkxNzE0Ng==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r409917146", "bodyText": "The else case is actually the Long use case, so we shouldn't throw here", "author": "nhachicha", "createdAt": "2020-04-17T00:03:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODczODg5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0MTM3Nw==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408741377", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "author": "cmelchior", "createdAt": "2020-04-15T10:30:06Z", "path": "realm/realm-annotations-processor/src/test/resources/io/realm/some_test_BooleansRealmProxy.java", "diffHunk": "@@ -520,4 +520,4 @@ public boolean equals(Object o) {\n \n         return true;\n     }\n-}\n+}", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0NDA5Mg==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408744092", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    android:minSdkVersion=\"21\"\n          \n          \n            \n                    android:minSdkVersion=\"16\"", "author": "cmelchior", "createdAt": "2020-04-15T10:35:15Z", "path": "realm/realm-library/src/androidTest/AndroidManifest.xml", "diffHunk": "@@ -10,8 +10,8 @@\n     <uses-permission android:name=\"android.permission.SET_DEBUG_APP\"/>\n \n     <uses-sdk\n-        android:minSdkVersion=\"16\"\n-        android:targetSdkVersion=\"22\"/>\n+        android:minSdkVersion=\"21\"", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0NDQ3Ng==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408744476", "bodyText": "We probably need a double test as well", "author": "cmelchior", "createdAt": "2020-04-15T10:35:58Z", "path": "realm/realm-library/src/androidTest/assets/decimal128_as_long.json", "diffHunk": "@@ -0,0 +1,3 @@\n+{\n+    \"columnDecimal128\" : -32361122672259149", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1NjgyMQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408756821", "bodyText": "I'm a but unsure about these tests that add the type directly. I know the API theoretically allows it but, but according to the doc, it isn't legal: https://android.googlesource.com/platform/libcore/+/f0d4a04/json/src/main/java/org/json/JSONObject.java#258\nBut maybe this is the reason you added the instanceof check in the annotation processor?", "author": "cmelchior", "createdAt": "2020-04-15T11:00:07Z", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java", "diffHunk": "@@ -247,6 +251,86 @@ public void createObjectFromJson_dateAsString() throws JSONException {\n         assertEquals(new Date(1000), obj.getColumnDate());\n     }\n \n+    @Test\n+    public void createObjectFromJson_decimal128() throws JSONException {\n+        JSONObject json = new JSONObject();\n+        json.put(\"columnDecimal128\", new Decimal128(BigDecimal.TEN));", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc3MjczOQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r409772739", "bodyText": "Well you could write your own parser which produces a JSONObject/array it could be useful to add directly the Bson types if you know that the underlying consumer system can consume (parse them)", "author": "nhachicha", "createdAt": "2020-04-16T18:43:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1NjgyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1NzUwOA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408757508", "bodyText": "Same concern as for Decimal128", "author": "cmelchior", "createdAt": "2020-04-15T11:01:26Z", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java", "diffHunk": "@@ -247,6 +251,86 @@ public void createObjectFromJson_dateAsString() throws JSONException {\n         assertEquals(new Date(1000), obj.getColumnDate());\n     }\n \n+    @Test\n+    public void createObjectFromJson_decimal128() throws JSONException {\n+        JSONObject json = new JSONObject();\n+        json.put(\"columnDecimal128\", new Decimal128(BigDecimal.TEN));\n+\n+        realm.beginTransaction();\n+        realm.createObjectFromJson(AllTypes.class, json);\n+        realm.commitTransaction();\n+\n+        AllTypes obj = realm.where(AllTypes.class).findFirst();\n+        assertEquals(new Decimal128(BigDecimal.TEN), obj.getColumnDecimal128());\n+    }\n+\n+    @Test\n+    public void createUsingJsonStream_decimal128() throws JSONException {\n+        JSONObject json = new JSONObject();\n+        json.put(\"columnDecimal128\", new Decimal128(BigDecimal.TEN));\n+\n+        realm.beginTransaction();\n+        realm.createObjectFromJson(AllTypes.class, json);\n+        realm.commitTransaction();\n+\n+        AllTypes obj = realm.where(AllTypes.class).findFirst();\n+        assertEquals(new Decimal128(BigDecimal.TEN), obj.getColumnDecimal128());\n+    }\n+\n+    @Test\n+    public void createObjectFromJson_decimal128AsLong() throws JSONException {\n+        JSONObject json = new JSONObject();\n+        json.put(\"columnDecimal128\", -32361122672259149L);\n+\n+        realm.beginTransaction();\n+        realm.createObjectFromJson(AllTypes.class, json);\n+        realm.commitTransaction();\n+\n+        AllTypes obj = realm.where(AllTypes.class).findFirst();\n+        assertEquals(new Decimal128(-32361122672259149L), obj.getColumnDecimal128());\n+    }\n+\n+    @Test\n+    public void createObjectFromJson_decimal128AsString() throws JSONException {\n+        JSONObject json = new JSONObject();\n+        json.put(\"columnDecimal128\", \"32361122672259149\");\n+\n+        realm.beginTransaction();\n+        realm.createObjectFromJson(AllTypes.class, json);\n+        realm.commitTransaction();\n+\n+        AllTypes obj = realm.where(AllTypes.class).findFirst();\n+        assertEquals(Decimal128.parse(\"32361122672259149\"), obj.getColumnDecimal128());\n+    }\n+\n+    @Test\n+    public void createObjectFromJson_objectId() throws JSONException {\n+        JSONObject json = new JSONObject();\n+        String idHex = TestHelper.generateObjectIdHexString(7);\n+        json.put(\"columnObjectId\", new ObjectId(idHex));", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkxMDM4Nw==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r409910387", "bodyText": "see previous response\n\nyou could write your own parser which produces a JSONObject/array it could be useful to add directly the Bson types if you know that the underlying consumer system can consume (parse them)", "author": "nhachicha", "createdAt": "2020-04-16T23:41:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1NzUwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1ODg1MA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408758850", "bodyText": "These tests seem to be missing", "author": "cmelchior", "createdAt": "2020-04-15T11:03:52Z", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java", "diffHunk": "@@ -652,6 +659,83 @@ public void equalTo() {\n         assertEquals(0, resultList.size());\n     }\n \n+    @Test\n+    public void equalTo_decimal128() {\n+        populateTestRealm(realm, 10);\n+        RealmResults<AllTypes> resultList = realm.where(AllTypes.class).sort(AllTypes.FIELD_DECIMAL128, Sort.ASCENDING).findAll();\n+        for (int i = 0; i < 10; i++) {\n+            assertEquals(new Decimal128(new BigDecimal(i + \".23456789\")), resultList.get(i).getColumnDecimal128());\n+        }\n+    }\n+\n+    @Test\n+    public void equalTo_objectId() {\n+        populateTestRealm(realm, 10);\n+        RealmResults<AllTypes> resultList = realm.where(AllTypes.class).sort(AllTypes.FIELD_OBJECT_ID, Sort.ASCENDING).findAll();\n+        for (int i = 0; i < 10; i++) {\n+            assertEquals(new ObjectId(TestHelper.generateObjectIdHexString(i)), resultList.get(i).getColumnObjectId());\n+        }\n+    }\n+\n+    @Test\n+    public void notEqualTo_decimal128() {\n+        populateTestRealm(realm, 10);\n+        // FIXME", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkyMDAxOA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r409920018", "bodyText": "These are covered in Decimal128Tests and ObjectIdTests respectively", "author": "nhachicha", "createdAt": "2020-04-17T00:13:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1ODg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEwOTI1MA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r410109250", "bodyText": "True, so they should just be removed from here?", "author": "cmelchior", "createdAt": "2020-04-17T09:36:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1ODg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5NTcxOQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r410295719", "bodyText": "yes", "author": "nhachicha", "createdAt": "2020-04-17T15:23:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1ODg1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1OTY0Ng==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408759646", "bodyText": "Do you really need the index here?", "author": "cmelchior", "createdAt": "2020-04-15T11:05:27Z", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmTests.java", "diffHunk": "@@ -146,18 +150,19 @@\n \n     private Context context;\n     private Realm realm;\n-    private List<String> columnData = new ArrayList<String>();\n+    private List<String> columnData = new ArrayList<String>() {{\n+        add(0, AllTypes.FIELD_BOOLEAN);", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2MDY1Ng==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408760656", "bodyText": "Do we need this anymore? It seems all these properties were added to other classes?", "author": "cmelchior", "createdAt": "2020-04-15T11:07:30Z", "path": "realm/realm-library/src/androidTest/java/io/realm/entities/MongoDBTypes.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.realm.entities;\n+\n+import org.bson.types.Decimal128;\n+import org.bson.types.ObjectId;\n+\n+import io.realm.RealmList;\n+import io.realm.RealmObject;\n+import io.realm.annotations.PrimaryKey;\n+\n+public class MongoDBTypes extends RealmObject {", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxMTI2NQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408811265", "bodyText": "Style guide question. It looks a bit weird to me to have the base class on a separate line?", "author": "cmelchior", "createdAt": "2020-04-15T12:42:30Z", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/Decimal128Tests.kt", "diffHunk": "@@ -0,0 +1,437 @@\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.annotations.PrimaryKey\n+import io.realm.annotations.Required\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import org.bson.types.Decimal128\n+import org.junit.After\n+import org.junit.Assert.*\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.rules.TemporaryFolder\n+import org.junit.runner.RunWith\n+import java.math.BigDecimal\n+\n+open class Decimal128Required\n+ : RealmObject() {", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxMTYwMA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408811600", "bodyText": "Do we still need the @field prefix?", "author": "cmelchior", "createdAt": "2020-04-15T12:43:00Z", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/Decimal128Tests.kt", "diffHunk": "@@ -0,0 +1,437 @@\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.annotations.PrimaryKey\n+import io.realm.annotations.Required\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import org.bson.types.Decimal128\n+import org.junit.After\n+import org.junit.Assert.*\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.rules.TemporaryFolder\n+import org.junit.runner.RunWith\n+import java.math.BigDecimal\n+\n+open class Decimal128Required\n+ : RealmObject() {\n+    @field:PrimaryKey", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkyNjQwOA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r409926408", "bodyText": "It's not required just to limit the scope of the annotation", "author": "nhachicha", "createdAt": "2020-04-17T00:35:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxMTYwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxMjY3Ng==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408812676", "bodyText": "Spacing between properties is a bit inconsistent in these classes, maybe just all the empty lines since these classes are so small anyway?", "author": "cmelchior", "createdAt": "2020-04-15T12:44:42Z", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/Decimal128Tests.kt", "diffHunk": "@@ -0,0 +1,437 @@\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.annotations.PrimaryKey\n+import io.realm.annotations.Required\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import org.bson.types.Decimal128\n+import org.junit.After\n+import org.junit.Assert.*\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.rules.TemporaryFolder\n+import org.junit.runner.RunWith\n+import java.math.BigDecimal\n+\n+open class Decimal128Required\n+ : RealmObject() {\n+    @field:PrimaryKey\n+    var id: Long = 0\n+", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxNzE4NQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408817185", "bodyText": "I cannot find insert tests anywhere?", "author": "cmelchior", "createdAt": "2020-04-15T12:52:16Z", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/Decimal128Tests.kt", "diffHunk": "@@ -0,0 +1,437 @@\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.annotations.PrimaryKey\n+import io.realm.annotations.Required\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import org.bson.types.Decimal128\n+import org.junit.After\n+import org.junit.Assert.*\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.rules.TemporaryFolder\n+import org.junit.runner.RunWith\n+import java.math.BigDecimal\n+\n+open class Decimal128Required\n+ : RealmObject() {\n+    @field:PrimaryKey\n+    var id: Long = 0\n+\n+    @field:Required\n+    var decimal : Decimal128? = null\n+\n+    var name : String = \"\"\n+\n+}\n+\n+open class Decimal128NotRequired\n+    : RealmObject() {\n+    @field:PrimaryKey\n+    var id: Long = 0\n+\n+    var decimal : Decimal128? = null\n+\n+    var name : String = \"\"\n+}\n+\n+open class Decimal128RequiredRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    @field:Required\n+    var decimals : RealmList<Decimal128> = RealmList()\n+    var name : String = \"\"\n+}\n+\n+open class Decimal128OptionalRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    var decimals : RealmList<Decimal128> = RealmList()\n+    var name : String = \"\"\n+}\n+\n+@RunWith(AndroidJUnit4::class)\n+class Decimal128Tests {\n+    private lateinit var realmConfiguration: RealmConfiguration\n+    private lateinit var realm: Realm\n+\n+    @Rule\n+    @JvmField val folder = TemporaryFolder()\n+\n+    init {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        realmConfiguration = RealmConfiguration\n+                .Builder(InstrumentationRegistry.getInstrumentation().targetContext)\n+                .directory(folder.newFolder())\n+                .schema(Decimal128Required::class.java,\n+                        Decimal128NotRequired::class.java,\n+                        Decimal128RequiredRealmList::class.java,\n+                        Decimal128OptionalRealmList::class.java)\n+                .build()\n+        realm = Realm.getInstance(realmConfiguration)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        realm.close()\n+    }\n+\n+    @Test\n+    fun copyToAndFromRealm() {", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzNTc2OQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r409935769", "bodyText": "updated", "author": "nhachicha", "createdAt": "2020-04-17T01:10:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxNzE4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxNzc1Mg==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408817752", "bodyText": "Catch the appropriate exception. I would assume IllegalArgumentException?", "author": "cmelchior", "createdAt": "2020-04-15T12:53:11Z", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/Decimal128Tests.kt", "diffHunk": "@@ -0,0 +1,437 @@\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.annotations.PrimaryKey\n+import io.realm.annotations.Required\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import org.bson.types.Decimal128\n+import org.junit.After\n+import org.junit.Assert.*\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.rules.TemporaryFolder\n+import org.junit.runner.RunWith\n+import java.math.BigDecimal\n+\n+open class Decimal128Required\n+ : RealmObject() {\n+    @field:PrimaryKey\n+    var id: Long = 0\n+\n+    @field:Required\n+    var decimal : Decimal128? = null\n+\n+    var name : String = \"\"\n+\n+}\n+\n+open class Decimal128NotRequired\n+    : RealmObject() {\n+    @field:PrimaryKey\n+    var id: Long = 0\n+\n+    var decimal : Decimal128? = null\n+\n+    var name : String = \"\"\n+}\n+\n+open class Decimal128RequiredRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    @field:Required\n+    var decimals : RealmList<Decimal128> = RealmList()\n+    var name : String = \"\"\n+}\n+\n+open class Decimal128OptionalRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    var decimals : RealmList<Decimal128> = RealmList()\n+    var name : String = \"\"\n+}\n+\n+@RunWith(AndroidJUnit4::class)\n+class Decimal128Tests {\n+    private lateinit var realmConfiguration: RealmConfiguration\n+    private lateinit var realm: Realm\n+\n+    @Rule\n+    @JvmField val folder = TemporaryFolder()\n+\n+    init {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        realmConfiguration = RealmConfiguration\n+                .Builder(InstrumentationRegistry.getInstrumentation().targetContext)\n+                .directory(folder.newFolder())\n+                .schema(Decimal128Required::class.java,\n+                        Decimal128NotRequired::class.java,\n+                        Decimal128RequiredRealmList::class.java,\n+                        Decimal128OptionalRealmList::class.java)\n+                .build()\n+        realm = Realm.getInstance(realmConfiguration)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        realm.close()\n+    }\n+\n+    @Test\n+    fun copyToAndFromRealm() {\n+        val value = Decimal128NotRequired()\n+        value.decimal = Decimal128(BigDecimal.TEN)\n+        value.id = 42\n+        value.name = \"Foo\"\n+\n+        // copyToRealm\n+        realm.beginTransaction()\n+        val obj = realm.copyToRealm(value)\n+        realm.commitTransaction()\n+        assertEquals(Decimal128(BigDecimal.TEN), obj.decimal)\n+        assertEquals(42L, obj.id)\n+        assertEquals(\"Foo\", obj.name)\n+\n+        // copyFromRealm\n+        realm.beginTransaction()\n+        obj.decimal = Decimal128(BigDecimal.ONE)\n+        obj.name = \"Bar\"\n+        realm.commitTransaction()\n+\n+        val copy = realm.copyFromRealm(obj)\n+        assertEquals(Decimal128(BigDecimal.ONE), copy.decimal)\n+        assertEquals(42L, copy.id)\n+        assertEquals(\"Bar\", copy.name)\n+    }\n+\n+    @Test\n+    fun frozen() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128Required>(42)\n+        obj.name = \"foo\"\n+        obj.decimal = (Decimal128(BigDecimal.TEN))\n+        realm.commitTransaction()\n+\n+        val frozen = obj.freeze<Decimal128Required>()\n+        assertEquals(Decimal128(BigDecimal.TEN), frozen.decimal)\n+        assertEquals(\"foo\", frozen.name)\n+        assertEquals(42L, frozen.id)\n+    }\n+\n+    @Test\n+    fun requiredField() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128Required>(42)\n+        obj.name = \"foo\"\n+        obj.decimal = (Decimal128(BigDecimal.TEN))\n+        realm.commitTransaction()\n+\n+        val result = realm.where<Decimal128Required>().equalTo(\"decimal\", Decimal128(BigDecimal.TEN)).findFirst()\n+        assertNotNull(result)\n+        assertEquals(42L, result?.id)\n+        assertEquals(\"foo\", result?.name)\n+\n+        realm.beginTransaction()\n+        try {\n+            result?.decimal = null\n+            fail(\"It should not be possible to set null value for the required decimal field\")\n+        } catch (expected: Exception) {}", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxODI2NA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408818264", "bodyText": "Maybe use !! instead of ?. for the remaining asserts? I think that would convey the desired results better?", "author": "cmelchior", "createdAt": "2020-04-15T12:54:02Z", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/Decimal128Tests.kt", "diffHunk": "@@ -0,0 +1,437 @@\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.annotations.PrimaryKey\n+import io.realm.annotations.Required\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import org.bson.types.Decimal128\n+import org.junit.After\n+import org.junit.Assert.*\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.rules.TemporaryFolder\n+import org.junit.runner.RunWith\n+import java.math.BigDecimal\n+\n+open class Decimal128Required\n+ : RealmObject() {\n+    @field:PrimaryKey\n+    var id: Long = 0\n+\n+    @field:Required\n+    var decimal : Decimal128? = null\n+\n+    var name : String = \"\"\n+\n+}\n+\n+open class Decimal128NotRequired\n+    : RealmObject() {\n+    @field:PrimaryKey\n+    var id: Long = 0\n+\n+    var decimal : Decimal128? = null\n+\n+    var name : String = \"\"\n+}\n+\n+open class Decimal128RequiredRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    @field:Required\n+    var decimals : RealmList<Decimal128> = RealmList()\n+    var name : String = \"\"\n+}\n+\n+open class Decimal128OptionalRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    var decimals : RealmList<Decimal128> = RealmList()\n+    var name : String = \"\"\n+}\n+\n+@RunWith(AndroidJUnit4::class)\n+class Decimal128Tests {\n+    private lateinit var realmConfiguration: RealmConfiguration\n+    private lateinit var realm: Realm\n+\n+    @Rule\n+    @JvmField val folder = TemporaryFolder()\n+\n+    init {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        realmConfiguration = RealmConfiguration\n+                .Builder(InstrumentationRegistry.getInstrumentation().targetContext)\n+                .directory(folder.newFolder())\n+                .schema(Decimal128Required::class.java,\n+                        Decimal128NotRequired::class.java,\n+                        Decimal128RequiredRealmList::class.java,\n+                        Decimal128OptionalRealmList::class.java)\n+                .build()\n+        realm = Realm.getInstance(realmConfiguration)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        realm.close()\n+    }\n+\n+    @Test\n+    fun copyToAndFromRealm() {\n+        val value = Decimal128NotRequired()\n+        value.decimal = Decimal128(BigDecimal.TEN)\n+        value.id = 42\n+        value.name = \"Foo\"\n+\n+        // copyToRealm\n+        realm.beginTransaction()\n+        val obj = realm.copyToRealm(value)\n+        realm.commitTransaction()\n+        assertEquals(Decimal128(BigDecimal.TEN), obj.decimal)\n+        assertEquals(42L, obj.id)\n+        assertEquals(\"Foo\", obj.name)\n+\n+        // copyFromRealm\n+        realm.beginTransaction()\n+        obj.decimal = Decimal128(BigDecimal.ONE)\n+        obj.name = \"Bar\"\n+        realm.commitTransaction()\n+\n+        val copy = realm.copyFromRealm(obj)\n+        assertEquals(Decimal128(BigDecimal.ONE), copy.decimal)\n+        assertEquals(42L, copy.id)\n+        assertEquals(\"Bar\", copy.name)\n+    }\n+\n+    @Test\n+    fun frozen() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128Required>(42)\n+        obj.name = \"foo\"\n+        obj.decimal = (Decimal128(BigDecimal.TEN))\n+        realm.commitTransaction()\n+\n+        val frozen = obj.freeze<Decimal128Required>()\n+        assertEquals(Decimal128(BigDecimal.TEN), frozen.decimal)\n+        assertEquals(\"foo\", frozen.name)\n+        assertEquals(42L, frozen.id)\n+    }\n+\n+    @Test\n+    fun requiredField() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128Required>(42)\n+        obj.name = \"foo\"\n+        obj.decimal = (Decimal128(BigDecimal.TEN))\n+        realm.commitTransaction()\n+\n+        val result = realm.where<Decimal128Required>().equalTo(\"decimal\", Decimal128(BigDecimal.TEN)).findFirst()\n+        assertNotNull(result)\n+        assertEquals(42L, result?.id)\n+        assertEquals(\"foo\", result?.name)\n+\n+        realm.beginTransaction()\n+        try {\n+            result?.decimal = null\n+            fail(\"It should not be possible to set null value for the required decimal field\")\n+        } catch (expected: Exception) {}\n+        realm.commitTransaction()\n+    }\n+\n+    @Test\n+    fun nullableFiled() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128NotRequired>(42)\n+        obj.name = \"foo\"\n+        obj.decimal = null\n+        realm.commitTransaction()\n+\n+        val result = realm.where<Decimal128NotRequired>().isNull(\"decimal\").findFirst()", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxODQyMw==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408818423", "bodyText": "Same as above", "author": "cmelchior", "createdAt": "2020-04-15T12:54:15Z", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/Decimal128Tests.kt", "diffHunk": "@@ -0,0 +1,437 @@\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.annotations.PrimaryKey\n+import io.realm.annotations.Required\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import org.bson.types.Decimal128\n+import org.junit.After\n+import org.junit.Assert.*\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.rules.TemporaryFolder\n+import org.junit.runner.RunWith\n+import java.math.BigDecimal\n+\n+open class Decimal128Required\n+ : RealmObject() {\n+    @field:PrimaryKey\n+    var id: Long = 0\n+\n+    @field:Required\n+    var decimal : Decimal128? = null\n+\n+    var name : String = \"\"\n+\n+}\n+\n+open class Decimal128NotRequired\n+    : RealmObject() {\n+    @field:PrimaryKey\n+    var id: Long = 0\n+\n+    var decimal : Decimal128? = null\n+\n+    var name : String = \"\"\n+}\n+\n+open class Decimal128RequiredRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    @field:Required\n+    var decimals : RealmList<Decimal128> = RealmList()\n+    var name : String = \"\"\n+}\n+\n+open class Decimal128OptionalRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    var decimals : RealmList<Decimal128> = RealmList()\n+    var name : String = \"\"\n+}\n+\n+@RunWith(AndroidJUnit4::class)\n+class Decimal128Tests {\n+    private lateinit var realmConfiguration: RealmConfiguration\n+    private lateinit var realm: Realm\n+\n+    @Rule\n+    @JvmField val folder = TemporaryFolder()\n+\n+    init {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        realmConfiguration = RealmConfiguration\n+                .Builder(InstrumentationRegistry.getInstrumentation().targetContext)\n+                .directory(folder.newFolder())\n+                .schema(Decimal128Required::class.java,\n+                        Decimal128NotRequired::class.java,\n+                        Decimal128RequiredRealmList::class.java,\n+                        Decimal128OptionalRealmList::class.java)\n+                .build()\n+        realm = Realm.getInstance(realmConfiguration)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        realm.close()\n+    }\n+\n+    @Test\n+    fun copyToAndFromRealm() {\n+        val value = Decimal128NotRequired()\n+        value.decimal = Decimal128(BigDecimal.TEN)\n+        value.id = 42\n+        value.name = \"Foo\"\n+\n+        // copyToRealm\n+        realm.beginTransaction()\n+        val obj = realm.copyToRealm(value)\n+        realm.commitTransaction()\n+        assertEquals(Decimal128(BigDecimal.TEN), obj.decimal)\n+        assertEquals(42L, obj.id)\n+        assertEquals(\"Foo\", obj.name)\n+\n+        // copyFromRealm\n+        realm.beginTransaction()\n+        obj.decimal = Decimal128(BigDecimal.ONE)\n+        obj.name = \"Bar\"\n+        realm.commitTransaction()\n+\n+        val copy = realm.copyFromRealm(obj)\n+        assertEquals(Decimal128(BigDecimal.ONE), copy.decimal)\n+        assertEquals(42L, copy.id)\n+        assertEquals(\"Bar\", copy.name)\n+    }\n+\n+    @Test\n+    fun frozen() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128Required>(42)\n+        obj.name = \"foo\"\n+        obj.decimal = (Decimal128(BigDecimal.TEN))\n+        realm.commitTransaction()\n+\n+        val frozen = obj.freeze<Decimal128Required>()\n+        assertEquals(Decimal128(BigDecimal.TEN), frozen.decimal)\n+        assertEquals(\"foo\", frozen.name)\n+        assertEquals(42L, frozen.id)\n+    }\n+\n+    @Test\n+    fun requiredField() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128Required>(42)\n+        obj.name = \"foo\"\n+        obj.decimal = (Decimal128(BigDecimal.TEN))\n+        realm.commitTransaction()\n+\n+        val result = realm.where<Decimal128Required>().equalTo(\"decimal\", Decimal128(BigDecimal.TEN)).findFirst()\n+        assertNotNull(result)\n+        assertEquals(42L, result?.id)\n+        assertEquals(\"foo\", result?.name)\n+\n+        realm.beginTransaction()\n+        try {\n+            result?.decimal = null\n+            fail(\"It should not be possible to set null value for the required decimal field\")\n+        } catch (expected: Exception) {}\n+        realm.commitTransaction()\n+    }\n+\n+    @Test\n+    fun nullableFiled() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128NotRequired>(42)\n+        obj.name = \"foo\"\n+        obj.decimal = null\n+        realm.commitTransaction()\n+\n+        val result = realm.where<Decimal128NotRequired>().isNull(\"decimal\").findFirst()\n+        assertNotNull(result)\n+        assertEquals(42L, result?.id)\n+        assertEquals(\"foo\", result?.name)\n+\n+        realm.beginTransaction()\n+        result?.decimal = Decimal128(BigDecimal.TEN)\n+        realm.commitTransaction()\n+\n+        val result2 = realm.where<Decimal128NotRequired>().equalTo(\"decimal\", Decimal128(BigDecimal.TEN)).findFirst()", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxODkxNw==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408818917", "bodyText": "Really? Why not?", "author": "cmelchior", "createdAt": "2020-04-15T12:55:03Z", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/Decimal128Tests.kt", "diffHunk": "@@ -0,0 +1,437 @@\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.annotations.PrimaryKey\n+import io.realm.annotations.Required\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import org.bson.types.Decimal128\n+import org.junit.After\n+import org.junit.Assert.*\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.rules.TemporaryFolder\n+import org.junit.runner.RunWith\n+import java.math.BigDecimal\n+\n+open class Decimal128Required\n+ : RealmObject() {\n+    @field:PrimaryKey\n+    var id: Long = 0\n+\n+    @field:Required\n+    var decimal : Decimal128? = null\n+\n+    var name : String = \"\"\n+\n+}\n+\n+open class Decimal128NotRequired\n+    : RealmObject() {\n+    @field:PrimaryKey\n+    var id: Long = 0\n+\n+    var decimal : Decimal128? = null\n+\n+    var name : String = \"\"\n+}\n+\n+open class Decimal128RequiredRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    @field:Required\n+    var decimals : RealmList<Decimal128> = RealmList()\n+    var name : String = \"\"\n+}\n+\n+open class Decimal128OptionalRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    var decimals : RealmList<Decimal128> = RealmList()\n+    var name : String = \"\"\n+}\n+\n+@RunWith(AndroidJUnit4::class)\n+class Decimal128Tests {\n+    private lateinit var realmConfiguration: RealmConfiguration\n+    private lateinit var realm: Realm\n+\n+    @Rule\n+    @JvmField val folder = TemporaryFolder()\n+\n+    init {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        realmConfiguration = RealmConfiguration\n+                .Builder(InstrumentationRegistry.getInstrumentation().targetContext)\n+                .directory(folder.newFolder())\n+                .schema(Decimal128Required::class.java,\n+                        Decimal128NotRequired::class.java,\n+                        Decimal128RequiredRealmList::class.java,\n+                        Decimal128OptionalRealmList::class.java)\n+                .build()\n+        realm = Realm.getInstance(realmConfiguration)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        realm.close()\n+    }\n+\n+    @Test\n+    fun copyToAndFromRealm() {\n+        val value = Decimal128NotRequired()\n+        value.decimal = Decimal128(BigDecimal.TEN)\n+        value.id = 42\n+        value.name = \"Foo\"\n+\n+        // copyToRealm\n+        realm.beginTransaction()\n+        val obj = realm.copyToRealm(value)\n+        realm.commitTransaction()\n+        assertEquals(Decimal128(BigDecimal.TEN), obj.decimal)\n+        assertEquals(42L, obj.id)\n+        assertEquals(\"Foo\", obj.name)\n+\n+        // copyFromRealm\n+        realm.beginTransaction()\n+        obj.decimal = Decimal128(BigDecimal.ONE)\n+        obj.name = \"Bar\"\n+        realm.commitTransaction()\n+\n+        val copy = realm.copyFromRealm(obj)\n+        assertEquals(Decimal128(BigDecimal.ONE), copy.decimal)\n+        assertEquals(42L, copy.id)\n+        assertEquals(\"Bar\", copy.name)\n+    }\n+\n+    @Test\n+    fun frozen() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128Required>(42)\n+        obj.name = \"foo\"\n+        obj.decimal = (Decimal128(BigDecimal.TEN))\n+        realm.commitTransaction()\n+\n+        val frozen = obj.freeze<Decimal128Required>()\n+        assertEquals(Decimal128(BigDecimal.TEN), frozen.decimal)\n+        assertEquals(\"foo\", frozen.name)\n+        assertEquals(42L, frozen.id)\n+    }\n+\n+    @Test\n+    fun requiredField() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128Required>(42)\n+        obj.name = \"foo\"\n+        obj.decimal = (Decimal128(BigDecimal.TEN))\n+        realm.commitTransaction()\n+\n+        val result = realm.where<Decimal128Required>().equalTo(\"decimal\", Decimal128(BigDecimal.TEN)).findFirst()\n+        assertNotNull(result)\n+        assertEquals(42L, result?.id)\n+        assertEquals(\"foo\", result?.name)\n+\n+        realm.beginTransaction()\n+        try {\n+            result?.decimal = null\n+            fail(\"It should not be possible to set null value for the required decimal field\")\n+        } catch (expected: Exception) {}\n+        realm.commitTransaction()\n+    }\n+\n+    @Test\n+    fun nullableFiled() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128NotRequired>(42)\n+        obj.name = \"foo\"\n+        obj.decimal = null\n+        realm.commitTransaction()\n+\n+        val result = realm.where<Decimal128NotRequired>().isNull(\"decimal\").findFirst()\n+        assertNotNull(result)\n+        assertEquals(42L, result?.id)\n+        assertEquals(\"foo\", result?.name)\n+\n+        realm.beginTransaction()\n+        result?.decimal = Decimal128(BigDecimal.TEN)\n+        realm.commitTransaction()\n+\n+        val result2 = realm.where<Decimal128NotRequired>().equalTo(\"decimal\", Decimal128(BigDecimal.TEN)).findFirst()\n+        assertEquals(42L, result2?.id)\n+        assertEquals(\"foo\", result2?.name)\n+    }\n+\n+    @Test\n+    fun requiredRealmList() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128RequiredRealmList>()\n+        try {\n+            obj.decimals.add(null)\n+            fail(\"It should not be possible to add nullable elements to a required RealmList<Decimal128>\")\n+        } catch (expected: Exception) {\n+        }\n+    }\n+\n+    @Test\n+    fun optionalRealmList() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128OptionalRealmList>()\n+        obj.decimals.add(null)\n+        obj.decimals.add(Decimal128(BigDecimal.ZERO))\n+        realm.commitTransaction()\n+\n+        assertEquals(2, realm.where<Decimal128OptionalRealmList>().findFirst()?.decimals?.size)\n+    }\n+\n+    @Test\n+    fun linkQueryNotSupported() {\n+        try {\n+            realm.where<Decimal128RequiredRealmList>().greaterThan(\"decimals\", Decimal128(BigDecimal.ZERO)).findAll()\n+            fail(\"It should not be possible to perform link query on Decimal128\")", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0Mjc0Ng==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r409942746", "bodyText": "We don't support querying RealmList  yet (that's the case also for Date for example)", "author": "nhachicha", "createdAt": "2020-04-17T01:36:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxODkxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxOTU1OQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408819559", "bodyText": "Maybe also a test with the minimum value defined by Decimal128 instead of the ones defined by other types?", "author": "cmelchior", "createdAt": "2020-04-15T12:56:09Z", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/Decimal128Tests.kt", "diffHunk": "@@ -0,0 +1,437 @@\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.annotations.PrimaryKey\n+import io.realm.annotations.Required\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import org.bson.types.Decimal128\n+import org.junit.After\n+import org.junit.Assert.*\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.rules.TemporaryFolder\n+import org.junit.runner.RunWith\n+import java.math.BigDecimal\n+\n+open class Decimal128Required\n+ : RealmObject() {\n+    @field:PrimaryKey\n+    var id: Long = 0\n+\n+    @field:Required\n+    var decimal : Decimal128? = null\n+\n+    var name : String = \"\"\n+\n+}\n+\n+open class Decimal128NotRequired\n+    : RealmObject() {\n+    @field:PrimaryKey\n+    var id: Long = 0\n+\n+    var decimal : Decimal128? = null\n+\n+    var name : String = \"\"\n+}\n+\n+open class Decimal128RequiredRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    @field:Required\n+    var decimals : RealmList<Decimal128> = RealmList()\n+    var name : String = \"\"\n+}\n+\n+open class Decimal128OptionalRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    var decimals : RealmList<Decimal128> = RealmList()\n+    var name : String = \"\"\n+}\n+\n+@RunWith(AndroidJUnit4::class)\n+class Decimal128Tests {\n+    private lateinit var realmConfiguration: RealmConfiguration\n+    private lateinit var realm: Realm\n+\n+    @Rule\n+    @JvmField val folder = TemporaryFolder()\n+\n+    init {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        realmConfiguration = RealmConfiguration\n+                .Builder(InstrumentationRegistry.getInstrumentation().targetContext)\n+                .directory(folder.newFolder())\n+                .schema(Decimal128Required::class.java,\n+                        Decimal128NotRequired::class.java,\n+                        Decimal128RequiredRealmList::class.java,\n+                        Decimal128OptionalRealmList::class.java)\n+                .build()\n+        realm = Realm.getInstance(realmConfiguration)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        realm.close()\n+    }\n+\n+    @Test\n+    fun copyToAndFromRealm() {\n+        val value = Decimal128NotRequired()\n+        value.decimal = Decimal128(BigDecimal.TEN)\n+        value.id = 42\n+        value.name = \"Foo\"\n+\n+        // copyToRealm\n+        realm.beginTransaction()\n+        val obj = realm.copyToRealm(value)\n+        realm.commitTransaction()\n+        assertEquals(Decimal128(BigDecimal.TEN), obj.decimal)\n+        assertEquals(42L, obj.id)\n+        assertEquals(\"Foo\", obj.name)\n+\n+        // copyFromRealm\n+        realm.beginTransaction()\n+        obj.decimal = Decimal128(BigDecimal.ONE)\n+        obj.name = \"Bar\"\n+        realm.commitTransaction()\n+\n+        val copy = realm.copyFromRealm(obj)\n+        assertEquals(Decimal128(BigDecimal.ONE), copy.decimal)\n+        assertEquals(42L, copy.id)\n+        assertEquals(\"Bar\", copy.name)\n+    }\n+\n+    @Test\n+    fun frozen() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128Required>(42)\n+        obj.name = \"foo\"\n+        obj.decimal = (Decimal128(BigDecimal.TEN))\n+        realm.commitTransaction()\n+\n+        val frozen = obj.freeze<Decimal128Required>()\n+        assertEquals(Decimal128(BigDecimal.TEN), frozen.decimal)\n+        assertEquals(\"foo\", frozen.name)\n+        assertEquals(42L, frozen.id)\n+    }\n+\n+    @Test\n+    fun requiredField() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128Required>(42)\n+        obj.name = \"foo\"\n+        obj.decimal = (Decimal128(BigDecimal.TEN))\n+        realm.commitTransaction()\n+\n+        val result = realm.where<Decimal128Required>().equalTo(\"decimal\", Decimal128(BigDecimal.TEN)).findFirst()\n+        assertNotNull(result)\n+        assertEquals(42L, result?.id)\n+        assertEquals(\"foo\", result?.name)\n+\n+        realm.beginTransaction()\n+        try {\n+            result?.decimal = null\n+            fail(\"It should not be possible to set null value for the required decimal field\")\n+        } catch (expected: Exception) {}\n+        realm.commitTransaction()\n+    }\n+\n+    @Test\n+    fun nullableFiled() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128NotRequired>(42)\n+        obj.name = \"foo\"\n+        obj.decimal = null\n+        realm.commitTransaction()\n+\n+        val result = realm.where<Decimal128NotRequired>().isNull(\"decimal\").findFirst()\n+        assertNotNull(result)\n+        assertEquals(42L, result?.id)\n+        assertEquals(\"foo\", result?.name)\n+\n+        realm.beginTransaction()\n+        result?.decimal = Decimal128(BigDecimal.TEN)\n+        realm.commitTransaction()\n+\n+        val result2 = realm.where<Decimal128NotRequired>().equalTo(\"decimal\", Decimal128(BigDecimal.TEN)).findFirst()\n+        assertEquals(42L, result2?.id)\n+        assertEquals(\"foo\", result2?.name)\n+    }\n+\n+    @Test\n+    fun requiredRealmList() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128RequiredRealmList>()\n+        try {\n+            obj.decimals.add(null)\n+            fail(\"It should not be possible to add nullable elements to a required RealmList<Decimal128>\")\n+        } catch (expected: Exception) {\n+        }\n+    }\n+\n+    @Test\n+    fun optionalRealmList() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128OptionalRealmList>()\n+        obj.decimals.add(null)\n+        obj.decimals.add(Decimal128(BigDecimal.ZERO))\n+        realm.commitTransaction()\n+\n+        assertEquals(2, realm.where<Decimal128OptionalRealmList>().findFirst()?.decimals?.size)\n+    }\n+\n+    @Test\n+    fun linkQueryNotSupported() {\n+        try {\n+            realm.where<Decimal128RequiredRealmList>().greaterThan(\"decimals\", Decimal128(BigDecimal.ZERO)).findAll()\n+            fail(\"It should not be possible to perform link query on Decimal128\")\n+        } catch (expected: IllegalArgumentException) {}\n+\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128RequiredRealmList>()\n+        realm.cancelTransaction()\n+\n+        try {\n+            obj.decimals.where().equalTo(\"decimals\", Decimal128(BigDecimal.ZERO)).findAll()\n+        } catch (expected: UnsupportedOperationException) {}\n+    }\n+\n+    @Test\n+    fun NaN() {\n+        realm.beginTransaction()\n+        realm.createObject<Decimal128Required>(1).decimal = Decimal128(BigDecimal(Float.NaN.toLong()))\n+        realm.createObject<Decimal128Required>(2).decimal = Decimal128(Float.NaN.toLong())\n+        realm.createObject<Decimal128Required>(3).decimal = Decimal128(Double.NaN.toLong())\n+        realm.commitTransaction()\n+\n+        val all = realm.where<Decimal128Required>().equalTo(\"decimal\", Decimal128(Float.NaN.toLong())).findAll()\n+        assertEquals(3, all.size)\n+    }\n+\n+    @Test\n+    fun minValue() {", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyNTczOQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408825739", "bodyText": "Same as for minValue?", "author": "cmelchior", "createdAt": "2020-04-15T13:05:59Z", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/Decimal128Tests.kt", "diffHunk": "@@ -0,0 +1,437 @@\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.annotations.PrimaryKey\n+import io.realm.annotations.Required\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import org.bson.types.Decimal128\n+import org.junit.After\n+import org.junit.Assert.*\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.rules.TemporaryFolder\n+import org.junit.runner.RunWith\n+import java.math.BigDecimal\n+\n+open class Decimal128Required\n+ : RealmObject() {\n+    @field:PrimaryKey\n+    var id: Long = 0\n+\n+    @field:Required\n+    var decimal : Decimal128? = null\n+\n+    var name : String = \"\"\n+\n+}\n+\n+open class Decimal128NotRequired\n+    : RealmObject() {\n+    @field:PrimaryKey\n+    var id: Long = 0\n+\n+    var decimal : Decimal128? = null\n+\n+    var name : String = \"\"\n+}\n+\n+open class Decimal128RequiredRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    @field:Required\n+    var decimals : RealmList<Decimal128> = RealmList()\n+    var name : String = \"\"\n+}\n+\n+open class Decimal128OptionalRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    var decimals : RealmList<Decimal128> = RealmList()\n+    var name : String = \"\"\n+}\n+\n+@RunWith(AndroidJUnit4::class)\n+class Decimal128Tests {\n+    private lateinit var realmConfiguration: RealmConfiguration\n+    private lateinit var realm: Realm\n+\n+    @Rule\n+    @JvmField val folder = TemporaryFolder()\n+\n+    init {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        realmConfiguration = RealmConfiguration\n+                .Builder(InstrumentationRegistry.getInstrumentation().targetContext)\n+                .directory(folder.newFolder())\n+                .schema(Decimal128Required::class.java,\n+                        Decimal128NotRequired::class.java,\n+                        Decimal128RequiredRealmList::class.java,\n+                        Decimal128OptionalRealmList::class.java)\n+                .build()\n+        realm = Realm.getInstance(realmConfiguration)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        realm.close()\n+    }\n+\n+    @Test\n+    fun copyToAndFromRealm() {\n+        val value = Decimal128NotRequired()\n+        value.decimal = Decimal128(BigDecimal.TEN)\n+        value.id = 42\n+        value.name = \"Foo\"\n+\n+        // copyToRealm\n+        realm.beginTransaction()\n+        val obj = realm.copyToRealm(value)\n+        realm.commitTransaction()\n+        assertEquals(Decimal128(BigDecimal.TEN), obj.decimal)\n+        assertEquals(42L, obj.id)\n+        assertEquals(\"Foo\", obj.name)\n+\n+        // copyFromRealm\n+        realm.beginTransaction()\n+        obj.decimal = Decimal128(BigDecimal.ONE)\n+        obj.name = \"Bar\"\n+        realm.commitTransaction()\n+\n+        val copy = realm.copyFromRealm(obj)\n+        assertEquals(Decimal128(BigDecimal.ONE), copy.decimal)\n+        assertEquals(42L, copy.id)\n+        assertEquals(\"Bar\", copy.name)\n+    }\n+\n+    @Test\n+    fun frozen() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128Required>(42)\n+        obj.name = \"foo\"\n+        obj.decimal = (Decimal128(BigDecimal.TEN))\n+        realm.commitTransaction()\n+\n+        val frozen = obj.freeze<Decimal128Required>()\n+        assertEquals(Decimal128(BigDecimal.TEN), frozen.decimal)\n+        assertEquals(\"foo\", frozen.name)\n+        assertEquals(42L, frozen.id)\n+    }\n+\n+    @Test\n+    fun requiredField() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128Required>(42)\n+        obj.name = \"foo\"\n+        obj.decimal = (Decimal128(BigDecimal.TEN))\n+        realm.commitTransaction()\n+\n+        val result = realm.where<Decimal128Required>().equalTo(\"decimal\", Decimal128(BigDecimal.TEN)).findFirst()\n+        assertNotNull(result)\n+        assertEquals(42L, result?.id)\n+        assertEquals(\"foo\", result?.name)\n+\n+        realm.beginTransaction()\n+        try {\n+            result?.decimal = null\n+            fail(\"It should not be possible to set null value for the required decimal field\")\n+        } catch (expected: Exception) {}\n+        realm.commitTransaction()\n+    }\n+\n+    @Test\n+    fun nullableFiled() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128NotRequired>(42)\n+        obj.name = \"foo\"\n+        obj.decimal = null\n+        realm.commitTransaction()\n+\n+        val result = realm.where<Decimal128NotRequired>().isNull(\"decimal\").findFirst()\n+        assertNotNull(result)\n+        assertEquals(42L, result?.id)\n+        assertEquals(\"foo\", result?.name)\n+\n+        realm.beginTransaction()\n+        result?.decimal = Decimal128(BigDecimal.TEN)\n+        realm.commitTransaction()\n+\n+        val result2 = realm.where<Decimal128NotRequired>().equalTo(\"decimal\", Decimal128(BigDecimal.TEN)).findFirst()\n+        assertEquals(42L, result2?.id)\n+        assertEquals(\"foo\", result2?.name)\n+    }\n+\n+    @Test\n+    fun requiredRealmList() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128RequiredRealmList>()\n+        try {\n+            obj.decimals.add(null)\n+            fail(\"It should not be possible to add nullable elements to a required RealmList<Decimal128>\")\n+        } catch (expected: Exception) {\n+        }\n+    }\n+\n+    @Test\n+    fun optionalRealmList() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128OptionalRealmList>()\n+        obj.decimals.add(null)\n+        obj.decimals.add(Decimal128(BigDecimal.ZERO))\n+        realm.commitTransaction()\n+\n+        assertEquals(2, realm.where<Decimal128OptionalRealmList>().findFirst()?.decimals?.size)\n+    }\n+\n+    @Test\n+    fun linkQueryNotSupported() {\n+        try {\n+            realm.where<Decimal128RequiredRealmList>().greaterThan(\"decimals\", Decimal128(BigDecimal.ZERO)).findAll()\n+            fail(\"It should not be possible to perform link query on Decimal128\")\n+        } catch (expected: IllegalArgumentException) {}\n+\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128RequiredRealmList>()\n+        realm.cancelTransaction()\n+\n+        try {\n+            obj.decimals.where().equalTo(\"decimals\", Decimal128(BigDecimal.ZERO)).findAll()\n+        } catch (expected: UnsupportedOperationException) {}\n+    }\n+\n+    @Test\n+    fun NaN() {\n+        realm.beginTransaction()\n+        realm.createObject<Decimal128Required>(1).decimal = Decimal128(BigDecimal(Float.NaN.toLong()))\n+        realm.createObject<Decimal128Required>(2).decimal = Decimal128(Float.NaN.toLong())\n+        realm.createObject<Decimal128Required>(3).decimal = Decimal128(Double.NaN.toLong())\n+        realm.commitTransaction()\n+\n+        val all = realm.where<Decimal128Required>().equalTo(\"decimal\", Decimal128(Float.NaN.toLong())).findAll()\n+        assertEquals(3, all.size)\n+    }\n+\n+    @Test\n+    fun minValue() {\n+        realm.beginTransaction()\n+        realm.createObject<Decimal128Required>(1).decimal = Decimal128(BigDecimal(Float.MIN_VALUE.toLong()))\n+        realm.createObject<Decimal128Required>(2).decimal = Decimal128(Float.MIN_VALUE.toLong())\n+        realm.createObject<Decimal128Required>(3).decimal = Decimal128(Double.MIN_VALUE.toLong())\n+        realm.commitTransaction()\n+\n+        val all = realm.where<Decimal128Required>().equalTo(\"decimal\", Decimal128(Float.MIN_VALUE.toLong())).findAll()\n+        assertEquals(3, all.size)\n+    }\n+\n+    @Test\n+    fun minQuery() {\n+        realm.beginTransaction()\n+        realm.createObject<Decimal128Required>(1).decimal = Decimal128(BigDecimal.TEN)\n+        realm.createObject<Decimal128Required>(2).decimal = Decimal128(BigDecimal.ONE)\n+        realm.createObject<Decimal128Required>(3).decimal = Decimal128(BigDecimal.ZERO)\n+        realm.commitTransaction()\n+\n+        val min: Number? = realm.where<Decimal128Required>().min(\"decimal\")\n+        assertNotNull(min)\n+        assertTrue(min is Decimal128)\n+        assertEquals(Decimal128(BigDecimal.ZERO), min)\n+    }\n+\n+\n+    @Test\n+    fun maxValue() {", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyNjI4OA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408826288", "bodyText": "Suggested change", "author": "cmelchior", "createdAt": "2020-04-15T13:06:53Z", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/ObjectIdTests.kt", "diffHunk": "@@ -0,0 +1,352 @@\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.TestHelper.generateObjectIdHexString\n+import io.realm.annotations.PrimaryKey\n+import io.realm.annotations.Required\n+import io.realm.exceptions.RealmException\n+import io.realm.exceptions.RealmPrimaryKeyConstraintException\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Assert.*\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.rules.TemporaryFolder\n+import org.junit.runner.RunWith\n+\n+open class ObjectIdPrimaryKeyRequired\n+ : RealmObject() {\n+    @field:PrimaryKey\n+    @field:Required\n+    var id : ObjectId? = null\n+    var name : String = \"\"\n+\n+}\n+\n+open class ObjectIdPrimaryKeyNotRequired\n+    : RealmObject() {\n+    @field:PrimaryKey\n+    var id : ObjectId? = null\n+    var name : String = \"\"\n+\n+}\n+\n+open class ObjectIdAndString\n+    : RealmObject() {\n+    var id : ObjectId? = null\n+    var name : String = \"\"\n+", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyOTA5Mg==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408829092", "bodyText": "Also missing insert tests", "author": "cmelchior", "createdAt": "2020-04-15T13:11:21Z", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/ObjectIdTests.kt", "diffHunk": "@@ -0,0 +1,352 @@\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.TestHelper.generateObjectIdHexString\n+import io.realm.annotations.PrimaryKey\n+import io.realm.annotations.Required\n+import io.realm.exceptions.RealmException\n+import io.realm.exceptions.RealmPrimaryKeyConstraintException\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Assert.*\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.rules.TemporaryFolder\n+import org.junit.runner.RunWith\n+\n+open class ObjectIdPrimaryKeyRequired\n+ : RealmObject() {\n+    @field:PrimaryKey\n+    @field:Required\n+    var id : ObjectId? = null\n+    var name : String = \"\"\n+\n+}\n+\n+open class ObjectIdPrimaryKeyNotRequired\n+    : RealmObject() {\n+    @field:PrimaryKey\n+    var id : ObjectId? = null\n+    var name : String = \"\"\n+\n+}\n+\n+open class ObjectIdAndString\n+    : RealmObject() {\n+    var id : ObjectId? = null\n+    var name : String = \"\"\n+\n+}\n+\n+open class ObjectIdRequiredRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    @field:Required\n+    var ids : RealmList<ObjectId> = RealmList()\n+    var name : String = \"\"\n+}\n+\n+open class ObjectIdOptionalRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    var ids : RealmList<ObjectId> = RealmList()\n+    var name : String = \"\"\n+}\n+\n+@RunWith(AndroidJUnit4::class)\n+class ObjectIdTests {\n+    private lateinit var realmConfiguration: RealmConfiguration\n+    private lateinit var realm: Realm\n+\n+    @Rule\n+    @JvmField val folder = TemporaryFolder()\n+\n+    init {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        realmConfiguration = RealmConfiguration\n+                .Builder(InstrumentationRegistry.getInstrumentation().targetContext)\n+                .directory(folder.newFolder())\n+                .schema(ObjectIdPrimaryKeyRequired::class.java,\n+                        ObjectIdPrimaryKeyNotRequired::class.java,\n+                        ObjectIdAndString::class.java,\n+                        ObjectIdRequiredRealmList::class.java,\n+                        ObjectIdOptionalRealmList::class.java)\n+                .build()\n+        realm = Realm.getInstance(realmConfiguration)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        realm.close()\n+    }\n+\n+    @Test\n+    fun copyToAndFromRealm() {", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyOTcyMg==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408829722", "bodyText": "Same, a bit weird that this isn't supported by Core. Is there an issue tracking it?", "author": "cmelchior", "createdAt": "2020-04-15T13:12:18Z", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/ObjectIdTests.kt", "diffHunk": "@@ -0,0 +1,352 @@\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.TestHelper.generateObjectIdHexString\n+import io.realm.annotations.PrimaryKey\n+import io.realm.annotations.Required\n+import io.realm.exceptions.RealmException\n+import io.realm.exceptions.RealmPrimaryKeyConstraintException\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Assert.*\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.rules.TemporaryFolder\n+import org.junit.runner.RunWith\n+\n+open class ObjectIdPrimaryKeyRequired\n+ : RealmObject() {\n+    @field:PrimaryKey\n+    @field:Required\n+    var id : ObjectId? = null\n+    var name : String = \"\"\n+\n+}\n+\n+open class ObjectIdPrimaryKeyNotRequired\n+    : RealmObject() {\n+    @field:PrimaryKey\n+    var id : ObjectId? = null\n+    var name : String = \"\"\n+\n+}\n+\n+open class ObjectIdAndString\n+    : RealmObject() {\n+    var id : ObjectId? = null\n+    var name : String = \"\"\n+\n+}\n+\n+open class ObjectIdRequiredRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    @field:Required\n+    var ids : RealmList<ObjectId> = RealmList()\n+    var name : String = \"\"\n+}\n+\n+open class ObjectIdOptionalRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    var ids : RealmList<ObjectId> = RealmList()\n+    var name : String = \"\"\n+}\n+\n+@RunWith(AndroidJUnit4::class)\n+class ObjectIdTests {\n+    private lateinit var realmConfiguration: RealmConfiguration\n+    private lateinit var realm: Realm\n+\n+    @Rule\n+    @JvmField val folder = TemporaryFolder()\n+\n+    init {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        realmConfiguration = RealmConfiguration\n+                .Builder(InstrumentationRegistry.getInstrumentation().targetContext)\n+                .directory(folder.newFolder())\n+                .schema(ObjectIdPrimaryKeyRequired::class.java,\n+                        ObjectIdPrimaryKeyNotRequired::class.java,\n+                        ObjectIdAndString::class.java,\n+                        ObjectIdRequiredRealmList::class.java,\n+                        ObjectIdOptionalRealmList::class.java)\n+                .build()\n+        realm = Realm.getInstance(realmConfiguration)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        realm.close()\n+    }\n+\n+    @Test\n+    fun copyToAndFromRealm() {\n+        val value = ObjectIdAndString()\n+        val objectIdHex = generateObjectIdHexString(0)\n+        value.id = ObjectId(objectIdHex)\n+        value.name = \"Foo\"\n+\n+        // copyToRealm\n+        realm.beginTransaction()\n+        val obj = realm.copyToRealm(value)\n+        realm.commitTransaction()\n+        assertEquals(ObjectId(objectIdHex), obj.id)\n+        assertEquals(\"Foo\", obj.name)\n+\n+        // copyFromRealm\n+        realm.beginTransaction()\n+        val objectIdHex2 = generateObjectIdHexString(1)\n+        obj.id = ObjectId(objectIdHex2)\n+        obj.name = \"Bar\"\n+        realm.commitTransaction()\n+\n+        val copy = realm.copyFromRealm(obj)\n+        assertEquals(ObjectId(objectIdHex2), copy.id)\n+        assertEquals(\"Bar\", copy.name)\n+    }\n+\n+    @Test\n+    fun frozen() {\n+        realm.beginTransaction()\n+        val hex = generateObjectIdHexString(7)\n+        val obj = realm.createObject<ObjectIdPrimaryKeyRequired>(ObjectId(hex))\n+        obj.name = \"foo\"\n+        realm.commitTransaction()\n+\n+        val frozen = obj.freeze<ObjectIdPrimaryKeyRequired>()\n+        assertEquals(ObjectId(hex), frozen.id)\n+        assertEquals(\"foo\", frozen.name)\n+    }\n+\n+\n+    @Test\n+    fun requiredPK() {\n+        realm.beginTransaction()\n+        try {\n+            realm.createObject<ObjectIdPrimaryKeyRequired>()\n+            fail()\n+        } catch (ignore: RealmException) {\n+        }\n+\n+        val obj = realm.createObject<ObjectIdPrimaryKeyRequired>(ObjectId(generateObjectIdHexString(42)))\n+        obj.name = \"foo\"\n+\n+        realm.commitTransaction()\n+\n+        val result = realm.where<ObjectIdPrimaryKeyRequired>().equalTo(\"id\", ObjectId(generateObjectIdHexString(42))).findFirst()\n+        assertNotNull(result)\n+        assertEquals(\"foo\", result?.name)\n+    }\n+\n+    @Test\n+    fun nullablePK() {\n+        try {\n+            realm.createObject<ObjectIdPrimaryKeyNotRequired>()\n+            fail()\n+        } catch (ignore: RealmException) {\n+        }\n+\n+        realm.beginTransaction()\n+        val obj = realm.createObject<ObjectIdPrimaryKeyNotRequired>(null)\n+        obj.name = \"foo\"\n+        realm.commitTransaction()\n+\n+        val result = realm.where<ObjectIdPrimaryKeyNotRequired>().equalTo(\"id\", null as ObjectId?).findFirst()\n+        assertNotNull(result)\n+        assertEquals(\"foo\", result!!.name)\n+    }\n+\n+\n+    @Test\n+    fun requiredRealmList() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<ObjectIdRequiredRealmList>()\n+        try {\n+            obj.ids.add(null)\n+            fail(\"It should not be possible to add nullable elements to a required RealmList<ObjectId>\")\n+        } catch (expected: Exception) {\n+        }\n+    }\n+\n+    @Test\n+    fun optionalRealmList() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<ObjectIdOptionalRealmList>()\n+        obj.ids.add(null)\n+        obj.ids.add(ObjectId(generateObjectIdHexString(0)))\n+        realm.commitTransaction()\n+\n+        assertEquals(2, realm.where<ObjectIdOptionalRealmList>().findFirst()?.ids?.size)\n+    }\n+\n+    @Test\n+    fun linkQueryNotSupported() {\n+        try {\n+            realm.where<ObjectIdRequiredRealmList>().greaterThan(\"ids\", ObjectId(generateObjectIdHexString(0))).findAll()\n+            fail(\"It should not be possible to perform link query on ObjectId\")", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk1MjkxNw==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r409952917", "bodyText": "This is the current case for Date for instance and other native types are not supported or WIP. I'm not sure where this is tracked in Core/OS", "author": "nhachicha", "createdAt": "2020-04-17T02:16:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyOTcyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzMDM2NQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408830365", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "author": "cmelchior", "createdAt": "2020-04-15T13:13:18Z", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/ObjectIdTests.kt", "diffHunk": "@@ -0,0 +1,352 @@\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.TestHelper.generateObjectIdHexString\n+import io.realm.annotations.PrimaryKey\n+import io.realm.annotations.Required\n+import io.realm.exceptions.RealmException\n+import io.realm.exceptions.RealmPrimaryKeyConstraintException\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import org.bson.types.ObjectId\n+import org.junit.After\n+import org.junit.Assert.*\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.rules.TemporaryFolder\n+import org.junit.runner.RunWith\n+\n+open class ObjectIdPrimaryKeyRequired\n+ : RealmObject() {\n+    @field:PrimaryKey\n+    @field:Required\n+    var id : ObjectId? = null\n+    var name : String = \"\"\n+\n+}\n+\n+open class ObjectIdPrimaryKeyNotRequired\n+    : RealmObject() {\n+    @field:PrimaryKey\n+    var id : ObjectId? = null\n+    var name : String = \"\"\n+\n+}\n+\n+open class ObjectIdAndString\n+    : RealmObject() {\n+    var id : ObjectId? = null\n+    var name : String = \"\"\n+\n+}\n+\n+open class ObjectIdRequiredRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    @field:Required\n+    var ids : RealmList<ObjectId> = RealmList()\n+    var name : String = \"\"\n+}\n+\n+open class ObjectIdOptionalRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    var ids : RealmList<ObjectId> = RealmList()\n+    var name : String = \"\"\n+}\n+\n+@RunWith(AndroidJUnit4::class)\n+class ObjectIdTests {\n+    private lateinit var realmConfiguration: RealmConfiguration\n+    private lateinit var realm: Realm\n+\n+    @Rule\n+    @JvmField val folder = TemporaryFolder()\n+\n+    init {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        realmConfiguration = RealmConfiguration\n+                .Builder(InstrumentationRegistry.getInstrumentation().targetContext)\n+                .directory(folder.newFolder())\n+                .schema(ObjectIdPrimaryKeyRequired::class.java,\n+                        ObjectIdPrimaryKeyNotRequired::class.java,\n+                        ObjectIdAndString::class.java,\n+                        ObjectIdRequiredRealmList::class.java,\n+                        ObjectIdOptionalRealmList::class.java)\n+                .build()\n+        realm = Realm.getInstance(realmConfiguration)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        realm.close()\n+    }\n+\n+    @Test\n+    fun copyToAndFromRealm() {\n+        val value = ObjectIdAndString()\n+        val objectIdHex = generateObjectIdHexString(0)\n+        value.id = ObjectId(objectIdHex)\n+        value.name = \"Foo\"\n+\n+        // copyToRealm\n+        realm.beginTransaction()\n+        val obj = realm.copyToRealm(value)\n+        realm.commitTransaction()\n+        assertEquals(ObjectId(objectIdHex), obj.id)\n+        assertEquals(\"Foo\", obj.name)\n+\n+        // copyFromRealm\n+        realm.beginTransaction()\n+        val objectIdHex2 = generateObjectIdHexString(1)\n+        obj.id = ObjectId(objectIdHex2)\n+        obj.name = \"Bar\"\n+        realm.commitTransaction()\n+\n+        val copy = realm.copyFromRealm(obj)\n+        assertEquals(ObjectId(objectIdHex2), copy.id)\n+        assertEquals(\"Bar\", copy.name)\n+    }\n+\n+    @Test\n+    fun frozen() {\n+        realm.beginTransaction()\n+        val hex = generateObjectIdHexString(7)\n+        val obj = realm.createObject<ObjectIdPrimaryKeyRequired>(ObjectId(hex))\n+        obj.name = \"foo\"\n+        realm.commitTransaction()\n+\n+        val frozen = obj.freeze<ObjectIdPrimaryKeyRequired>()\n+        assertEquals(ObjectId(hex), frozen.id)\n+        assertEquals(\"foo\", frozen.name)\n+    }\n+\n+\n+    @Test\n+    fun requiredPK() {\n+        realm.beginTransaction()\n+        try {\n+            realm.createObject<ObjectIdPrimaryKeyRequired>()\n+            fail()\n+        } catch (ignore: RealmException) {\n+        }\n+\n+        val obj = realm.createObject<ObjectIdPrimaryKeyRequired>(ObjectId(generateObjectIdHexString(42)))\n+        obj.name = \"foo\"\n+\n+        realm.commitTransaction()\n+\n+        val result = realm.where<ObjectIdPrimaryKeyRequired>().equalTo(\"id\", ObjectId(generateObjectIdHexString(42))).findFirst()\n+        assertNotNull(result)\n+        assertEquals(\"foo\", result?.name)\n+    }\n+\n+    @Test\n+    fun nullablePK() {\n+        try {\n+            realm.createObject<ObjectIdPrimaryKeyNotRequired>()\n+            fail()\n+        } catch (ignore: RealmException) {\n+        }\n+\n+        realm.beginTransaction()\n+        val obj = realm.createObject<ObjectIdPrimaryKeyNotRequired>(null)\n+        obj.name = \"foo\"\n+        realm.commitTransaction()\n+\n+        val result = realm.where<ObjectIdPrimaryKeyNotRequired>().equalTo(\"id\", null as ObjectId?).findFirst()\n+        assertNotNull(result)\n+        assertEquals(\"foo\", result!!.name)\n+    }\n+\n+\n+    @Test\n+    fun requiredRealmList() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<ObjectIdRequiredRealmList>()\n+        try {\n+            obj.ids.add(null)\n+            fail(\"It should not be possible to add nullable elements to a required RealmList<ObjectId>\")\n+        } catch (expected: Exception) {\n+        }\n+    }\n+\n+    @Test\n+    fun optionalRealmList() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<ObjectIdOptionalRealmList>()\n+        obj.ids.add(null)\n+        obj.ids.add(ObjectId(generateObjectIdHexString(0)))\n+        realm.commitTransaction()\n+\n+        assertEquals(2, realm.where<ObjectIdOptionalRealmList>().findFirst()?.ids?.size)\n+    }\n+\n+    @Test\n+    fun linkQueryNotSupported() {\n+        try {\n+            realm.where<ObjectIdRequiredRealmList>().greaterThan(\"ids\", ObjectId(generateObjectIdHexString(0))).findAll()\n+            fail(\"It should not be possible to perform link query on ObjectId\")\n+        } catch (expected: IllegalArgumentException) {}\n+\n+        realm.beginTransaction()\n+        val obj = realm.createObject<ObjectIdRequiredRealmList>()\n+        realm.cancelTransaction()\n+\n+        try {\n+            obj.ids.where().equalTo(\"ids\", ObjectId(generateObjectIdHexString(0))).findAll()\n+        } catch (expected: UnsupportedOperationException) {}\n+    }\n+\n+    @Test\n+    fun duplicatePK() {\n+        realm.beginTransaction()\n+        realm.createObject<ObjectIdPrimaryKeyRequired>(ObjectId(generateObjectIdHexString(0)))\n+        try {\n+            realm.createObject<ObjectIdPrimaryKeyRequired>(ObjectId(generateObjectIdHexString(0)))\n+            fail(\"It should throw for duplicate PK usage\")\n+        } catch (expected: RealmPrimaryKeyConstraintException) {}\n+\n+        realm.cancelTransaction()\n+    }\n+\n+    @Test\n+    fun sort() {\n+        realm.beginTransaction()\n+        realm.createObject<ObjectIdAndString>().id = ObjectId(generateObjectIdHexString(10))\n+        realm.createObject<ObjectIdAndString>().id = ObjectId(generateObjectIdHexString(0))\n+        realm.createObject<ObjectIdAndString>().id = ObjectId(generateObjectIdHexString(1))\n+        realm.commitTransaction()\n+\n+        var all = realm.where<ObjectIdAndString>().sort(\"id\", Sort.ASCENDING).findAll()\n+        assertEquals(3, all.size)\n+        assertEquals(ObjectId(generateObjectIdHexString(0)), all[0]!!.id)\n+        assertEquals(ObjectId(generateObjectIdHexString(1)), all[1]!!.id)\n+        assertEquals(ObjectId(generateObjectIdHexString(10)), all[2]!!.id)\n+\n+        all = realm.where<ObjectIdAndString>().sort(\"id\", Sort.DESCENDING).findAll()\n+        assertEquals(3, all.size)\n+        assertEquals(ObjectId(generateObjectIdHexString(10)), all[0]!!.id)\n+        assertEquals(ObjectId(generateObjectIdHexString(1)), all[1]!!.id)\n+        assertEquals(ObjectId(generateObjectIdHexString(0)), all[2]!!.id)\n+    }\n+\n+    @Test\n+    fun distinct() {\n+        realm.beginTransaction()\n+        realm.createObject<ObjectIdAndString>().id = ObjectId(generateObjectIdHexString(1))\n+        realm.createObject<ObjectIdAndString>().id = ObjectId(generateObjectIdHexString(1))\n+        realm.createObject<ObjectIdAndString>().id = null\n+        realm.createObject<ObjectIdAndString>().id = ObjectId(generateObjectIdHexString(0))\n+        realm.createObject<ObjectIdAndString>().id = ObjectId(generateObjectIdHexString(0))\n+        realm.createObject<ObjectIdAndString>().id = null\n+        realm.createObject<ObjectIdAndString>().id = ObjectId(generateObjectIdHexString(10))\n+        realm.createObject<ObjectIdAndString>().id = ObjectId(generateObjectIdHexString(10))\n+        realm.createObject<ObjectIdAndString>().id = null\n+        realm.commitTransaction()\n+\n+        val all = realm.where<ObjectIdAndString>().distinct(\"id\").sort(\"id\", Sort.ASCENDING).findAll()\n+        assertEquals(4, all.size)\n+        assertNull(all[0]!!.id)\n+        assertEquals(ObjectId(generateObjectIdHexString(0)), all[1]!!.id)\n+        assertEquals(ObjectId(generateObjectIdHexString(1)), all[2]!!.id)\n+        assertEquals(ObjectId(generateObjectIdHexString(10)), all[3]!!.id)\n+\n+    }\n+\n+    @Test\n+    fun queries() {\n+        realm.beginTransaction()\n+        realm.createObject<ObjectIdAndString>().id = ObjectId(generateObjectIdHexString(1))\n+        realm.createObject<ObjectIdAndString>().id = null\n+        realm.createObject<ObjectIdAndString>().id = ObjectId(generateObjectIdHexString(10))\n+        realm.createObject<ObjectIdAndString>().id = ObjectId(generateObjectIdHexString(0))\n+        realm.commitTransaction()\n+\n+        // count\n+        assertEquals(4, realm.where<ObjectIdAndString>().count())\n+\n+        // notEqualTo\n+        var all = realm.where<ObjectIdAndString>()\n+                .notEqualTo(\"id\", ObjectId(generateObjectIdHexString(1)))\n+                .sort(\"id\", Sort.ASCENDING)\n+                .findAll()\n+        assertEquals(3, all.size)\n+        assertNull(all[0]!!.id)\n+        assertEquals(ObjectId(generateObjectIdHexString(0)), all[1]!!.id)\n+        assertEquals(ObjectId(generateObjectIdHexString(10)), all[2]!!.id)\n+\n+        // greaterThanOrEqualTo\n+        all = realm.where<ObjectIdAndString>()\n+                .greaterThanOrEqualTo(\"id\", ObjectId(generateObjectIdHexString(1)))\n+                .sort(\"id\", Sort.ASCENDING)\n+                .findAll()\n+        assertEquals(2, all.size)\n+        assertEquals(ObjectId(generateObjectIdHexString(1)), all[0]!!.id)\n+        assertEquals(ObjectId(generateObjectIdHexString(10)), all[1]!!.id)\n+\n+        // greaterThan\n+        all = realm.where<ObjectIdAndString>()\n+                .greaterThan(\"id\", ObjectId(generateObjectIdHexString(1)))\n+                .sort(\"id\", Sort.ASCENDING)\n+                .findAll()\n+        assertEquals(1, all.size)\n+        assertEquals(ObjectId(generateObjectIdHexString(10)), all[0]!!.id)\n+\n+\n+        // lessThanOrEqualTo\n+        all = realm.where<ObjectIdAndString>()\n+                .lessThanOrEqualTo(\"id\", ObjectId(generateObjectIdHexString(1)))\n+                .sort(\"id\", Sort.ASCENDING)\n+                .findAll()\n+        assertEquals(2, all.size)\n+        assertEquals(ObjectId(generateObjectIdHexString(0)), all[0]!!.id)\n+        assertEquals(ObjectId(generateObjectIdHexString(1)), all[1]!!.id)\n+\n+        // lessThan\n+        all = realm.where<ObjectIdAndString>()\n+                .lessThan(\"id\", ObjectId(generateObjectIdHexString(1)))\n+                .sort(\"id\", Sort.ASCENDING)\n+                .findAll()\n+        assertEquals(1, all.size)\n+        assertEquals(ObjectId(generateObjectIdHexString(0)), all[0]!!.id)\n+\n+        // isNull\n+        all = realm.where<ObjectIdAndString>()\n+                .isNull(\"id\")\n+                .findAll()\n+        assertEquals(1, all.size)\n+        assertNull(all[0]!!.id)\n+\n+        // isNotNull\n+        all = realm.where<ObjectIdAndString>()\n+                .isNotNull(\"id\")\n+                .sort(\"id\", Sort.ASCENDING)\n+                .findAll()\n+        assertEquals(3, all.size)\n+        assertEquals(ObjectId(generateObjectIdHexString(0)), all[0]!!.id)\n+        assertEquals(ObjectId(generateObjectIdHexString(1)), all[1]!!.id)\n+        assertEquals(ObjectId(generateObjectIdHexString(10)), all[2]!!.id)\n+\n+        // average\n+        try {\n+            realm.where<ObjectIdAndString>().average(\"id\") // FIXME should we support avergae queries in Core?\n+            fail(\"Average is not supported for ObjectId\")\n+        } catch (expected: IllegalArgumentException) {}\n+\n+        // isEmpty\n+        try {\n+            realm.where<ObjectIdAndString>().isEmpty(\"id\")\n+            fail(\"isEmpty is not supported for ObjectId\")\n+        } catch (expected: IllegalArgumentException) {}\n+    }\n+\n+}", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzMDU1MQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408830551", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "author": "cmelchior", "createdAt": "2020-04-15T13:13:34Z", "path": "realm/realm-library/src/androidTest/kotlin/io/realm/Decimal128Tests.kt", "diffHunk": "@@ -0,0 +1,437 @@\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.annotations.PrimaryKey\n+import io.realm.annotations.Required\n+import io.realm.kotlin.createObject\n+import io.realm.kotlin.where\n+import org.bson.types.Decimal128\n+import org.junit.After\n+import org.junit.Assert.*\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.rules.TemporaryFolder\n+import org.junit.runner.RunWith\n+import java.math.BigDecimal\n+\n+open class Decimal128Required\n+ : RealmObject() {\n+    @field:PrimaryKey\n+    var id: Long = 0\n+\n+    @field:Required\n+    var decimal : Decimal128? = null\n+\n+    var name : String = \"\"\n+\n+}\n+\n+open class Decimal128NotRequired\n+    : RealmObject() {\n+    @field:PrimaryKey\n+    var id: Long = 0\n+\n+    var decimal : Decimal128? = null\n+\n+    var name : String = \"\"\n+}\n+\n+open class Decimal128RequiredRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    @field:Required\n+    var decimals : RealmList<Decimal128> = RealmList()\n+    var name : String = \"\"\n+}\n+\n+open class Decimal128OptionalRealmList\n+    : RealmObject() {\n+    var id: Long = 0\n+\n+    var decimals : RealmList<Decimal128> = RealmList()\n+    var name : String = \"\"\n+}\n+\n+@RunWith(AndroidJUnit4::class)\n+class Decimal128Tests {\n+    private lateinit var realmConfiguration: RealmConfiguration\n+    private lateinit var realm: Realm\n+\n+    @Rule\n+    @JvmField val folder = TemporaryFolder()\n+\n+    init {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+    }\n+\n+    @Before\n+    fun setUp() {\n+        realmConfiguration = RealmConfiguration\n+                .Builder(InstrumentationRegistry.getInstrumentation().targetContext)\n+                .directory(folder.newFolder())\n+                .schema(Decimal128Required::class.java,\n+                        Decimal128NotRequired::class.java,\n+                        Decimal128RequiredRealmList::class.java,\n+                        Decimal128OptionalRealmList::class.java)\n+                .build()\n+        realm = Realm.getInstance(realmConfiguration)\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        realm.close()\n+    }\n+\n+    @Test\n+    fun copyToAndFromRealm() {\n+        val value = Decimal128NotRequired()\n+        value.decimal = Decimal128(BigDecimal.TEN)\n+        value.id = 42\n+        value.name = \"Foo\"\n+\n+        // copyToRealm\n+        realm.beginTransaction()\n+        val obj = realm.copyToRealm(value)\n+        realm.commitTransaction()\n+        assertEquals(Decimal128(BigDecimal.TEN), obj.decimal)\n+        assertEquals(42L, obj.id)\n+        assertEquals(\"Foo\", obj.name)\n+\n+        // copyFromRealm\n+        realm.beginTransaction()\n+        obj.decimal = Decimal128(BigDecimal.ONE)\n+        obj.name = \"Bar\"\n+        realm.commitTransaction()\n+\n+        val copy = realm.copyFromRealm(obj)\n+        assertEquals(Decimal128(BigDecimal.ONE), copy.decimal)\n+        assertEquals(42L, copy.id)\n+        assertEquals(\"Bar\", copy.name)\n+    }\n+\n+    @Test\n+    fun frozen() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128Required>(42)\n+        obj.name = \"foo\"\n+        obj.decimal = (Decimal128(BigDecimal.TEN))\n+        realm.commitTransaction()\n+\n+        val frozen = obj.freeze<Decimal128Required>()\n+        assertEquals(Decimal128(BigDecimal.TEN), frozen.decimal)\n+        assertEquals(\"foo\", frozen.name)\n+        assertEquals(42L, frozen.id)\n+    }\n+\n+    @Test\n+    fun requiredField() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128Required>(42)\n+        obj.name = \"foo\"\n+        obj.decimal = (Decimal128(BigDecimal.TEN))\n+        realm.commitTransaction()\n+\n+        val result = realm.where<Decimal128Required>().equalTo(\"decimal\", Decimal128(BigDecimal.TEN)).findFirst()\n+        assertNotNull(result)\n+        assertEquals(42L, result?.id)\n+        assertEquals(\"foo\", result?.name)\n+\n+        realm.beginTransaction()\n+        try {\n+            result?.decimal = null\n+            fail(\"It should not be possible to set null value for the required decimal field\")\n+        } catch (expected: Exception) {}\n+        realm.commitTransaction()\n+    }\n+\n+    @Test\n+    fun nullableFiled() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128NotRequired>(42)\n+        obj.name = \"foo\"\n+        obj.decimal = null\n+        realm.commitTransaction()\n+\n+        val result = realm.where<Decimal128NotRequired>().isNull(\"decimal\").findFirst()\n+        assertNotNull(result)\n+        assertEquals(42L, result?.id)\n+        assertEquals(\"foo\", result?.name)\n+\n+        realm.beginTransaction()\n+        result?.decimal = Decimal128(BigDecimal.TEN)\n+        realm.commitTransaction()\n+\n+        val result2 = realm.where<Decimal128NotRequired>().equalTo(\"decimal\", Decimal128(BigDecimal.TEN)).findFirst()\n+        assertEquals(42L, result2?.id)\n+        assertEquals(\"foo\", result2?.name)\n+    }\n+\n+    @Test\n+    fun requiredRealmList() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128RequiredRealmList>()\n+        try {\n+            obj.decimals.add(null)\n+            fail(\"It should not be possible to add nullable elements to a required RealmList<Decimal128>\")\n+        } catch (expected: Exception) {\n+        }\n+    }\n+\n+    @Test\n+    fun optionalRealmList() {\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128OptionalRealmList>()\n+        obj.decimals.add(null)\n+        obj.decimals.add(Decimal128(BigDecimal.ZERO))\n+        realm.commitTransaction()\n+\n+        assertEquals(2, realm.where<Decimal128OptionalRealmList>().findFirst()?.decimals?.size)\n+    }\n+\n+    @Test\n+    fun linkQueryNotSupported() {\n+        try {\n+            realm.where<Decimal128RequiredRealmList>().greaterThan(\"decimals\", Decimal128(BigDecimal.ZERO)).findAll()\n+            fail(\"It should not be possible to perform link query on Decimal128\")\n+        } catch (expected: IllegalArgumentException) {}\n+\n+        realm.beginTransaction()\n+        val obj = realm.createObject<Decimal128RequiredRealmList>()\n+        realm.cancelTransaction()\n+\n+        try {\n+            obj.decimals.where().equalTo(\"decimals\", Decimal128(BigDecimal.ZERO)).findAll()\n+        } catch (expected: UnsupportedOperationException) {}\n+    }\n+\n+    @Test\n+    fun NaN() {\n+        realm.beginTransaction()\n+        realm.createObject<Decimal128Required>(1).decimal = Decimal128(BigDecimal(Float.NaN.toLong()))\n+        realm.createObject<Decimal128Required>(2).decimal = Decimal128(Float.NaN.toLong())\n+        realm.createObject<Decimal128Required>(3).decimal = Decimal128(Double.NaN.toLong())\n+        realm.commitTransaction()\n+\n+        val all = realm.where<Decimal128Required>().equalTo(\"decimal\", Decimal128(Float.NaN.toLong())).findAll()\n+        assertEquals(3, all.size)\n+    }\n+\n+    @Test\n+    fun minValue() {\n+        realm.beginTransaction()\n+        realm.createObject<Decimal128Required>(1).decimal = Decimal128(BigDecimal(Float.MIN_VALUE.toLong()))\n+        realm.createObject<Decimal128Required>(2).decimal = Decimal128(Float.MIN_VALUE.toLong())\n+        realm.createObject<Decimal128Required>(3).decimal = Decimal128(Double.MIN_VALUE.toLong())\n+        realm.commitTransaction()\n+\n+        val all = realm.where<Decimal128Required>().equalTo(\"decimal\", Decimal128(Float.MIN_VALUE.toLong())).findAll()\n+        assertEquals(3, all.size)\n+    }\n+\n+    @Test\n+    fun minQuery() {\n+        realm.beginTransaction()\n+        realm.createObject<Decimal128Required>(1).decimal = Decimal128(BigDecimal.TEN)\n+        realm.createObject<Decimal128Required>(2).decimal = Decimal128(BigDecimal.ONE)\n+        realm.createObject<Decimal128Required>(3).decimal = Decimal128(BigDecimal.ZERO)\n+        realm.commitTransaction()\n+\n+        val min: Number? = realm.where<Decimal128Required>().min(\"decimal\")\n+        assertNotNull(min)\n+        assertTrue(min is Decimal128)\n+        assertEquals(Decimal128(BigDecimal.ZERO), min)\n+    }\n+\n+\n+    @Test\n+    fun maxValue() {\n+        realm.beginTransaction()\n+        realm.createObject<Decimal128Required>(1).decimal = Decimal128(BigDecimal(Float.MAX_VALUE.toLong()))\n+        realm.createObject<Decimal128Required>(2).decimal = Decimal128(Float.MAX_VALUE.toLong())\n+        realm.createObject<Decimal128Required>(3).decimal = Decimal128(Double.MAX_VALUE.toLong())\n+        realm.commitTransaction()\n+\n+        val all = realm.where<Decimal128Required>().equalTo(\"decimal\", Decimal128(Float.MAX_VALUE.toLong())).findAll()\n+        assertEquals(3, all.size)\n+    }\n+\n+    @Test\n+    fun maxQuery() {\n+        realm.beginTransaction()\n+        realm.createObject<Decimal128Required>(1).decimal = Decimal128(BigDecimal.TEN)\n+        realm.createObject<Decimal128Required>(2).decimal = Decimal128(BigDecimal.ONE)\n+        realm.createObject<Decimal128Required>(3).decimal = Decimal128(BigDecimal.ZERO)\n+        realm.commitTransaction()\n+\n+        val max: Number? = realm.where<Decimal128Required>().max(\"decimal\")\n+        assertNotNull(max)\n+        assertTrue(max is Decimal128)\n+        assertEquals(Decimal128(BigDecimal.TEN), max)\n+    }\n+\n+    @Test\n+    fun betweenQuery() {\n+        realm.beginTransaction()\n+        realm.createObject<Decimal128Required>(1).decimal = Decimal128(BigDecimal.TEN)\n+        realm.createObject<Decimal128Required>(2).decimal = Decimal128(BigDecimal.ONE)\n+        realm.createObject<Decimal128Required>(3).decimal = Decimal128(BigDecimal.ZERO)\n+        realm.commitTransaction()\n+\n+        val between = realm.where<Decimal128Required>().between(\"decimal\", Decimal128(-1L), Decimal128(11L)).findAll()\n+        assertEquals(3, between.size)\n+        assertEquals(Decimal128(BigDecimal.TEN), between[0]!!.decimal)\n+        assertEquals(Decimal128(BigDecimal.ONE), between[1]!!.decimal)\n+        assertEquals(Decimal128(BigDecimal.ZERO), between[2]!!.decimal)\n+    }\n+\n+    @Test\n+    fun averageQuery() {\n+        var average = realm.where<Decimal128Required>().averageDecimal128(\"decimal\")\n+        assertEquals(Decimal128(0), average)\n+\n+        realm.beginTransaction()\n+        realm.createObject<Decimal128Required>(1).decimal = Decimal128(3)\n+        realm.createObject<Decimal128Required>(2).decimal = Decimal128(7)\n+        realm.createObject<Decimal128Required>(3).decimal = Decimal128(5)\n+        realm.commitTransaction()\n+\n+        average = realm.where<Decimal128Required>().averageDecimal128(\"decimal\")\n+        assertEquals(Decimal128(5), average)\n+    }\n+\n+    @Test\n+    fun sort() {\n+        realm.beginTransaction()\n+        realm.createObject<Decimal128Required>(1).decimal = Decimal128(BigDecimal.ONE)\n+        realm.createObject<Decimal128Required>(2).decimal = Decimal128(BigDecimal.ZERO)\n+        realm.createObject<Decimal128Required>(3).decimal = Decimal128(BigDecimal.TEN)\n+        realm.commitTransaction()\n+\n+        var all = realm.where<Decimal128Required>().sort(\"decimal\", Sort.ASCENDING).findAll()\n+        assertEquals(3, all.size)\n+        assertEquals(Decimal128(BigDecimal.ZERO), all[0]!!.decimal)\n+        assertEquals(Decimal128(BigDecimal.ONE), all[1]!!.decimal)\n+        assertEquals(Decimal128(BigDecimal.TEN), all[2]!!.decimal)\n+\n+        all = realm.where<Decimal128Required>().sort(\"decimal\", Sort.DESCENDING).findAll()\n+        assertEquals(3, all.size)\n+        assertEquals(Decimal128(BigDecimal.TEN), all[0]!!.decimal)\n+        assertEquals(Decimal128(BigDecimal.ONE), all[1]!!.decimal)\n+        assertEquals(Decimal128(BigDecimal.ZERO), all[2]!!.decimal)\n+    }\n+\n+    @Test\n+    fun distinct() {\n+        realm.beginTransaction()\n+        realm.createObject<Decimal128NotRequired>(1).decimal = Decimal128(BigDecimal.ONE)\n+        realm.createObject<Decimal128NotRequired>(2).decimal = Decimal128(BigDecimal.ONE)\n+        realm.createObject<Decimal128NotRequired>(3).decimal = null\n+        realm.createObject<Decimal128NotRequired>(4).decimal = Decimal128(BigDecimal.ZERO)\n+        realm.createObject<Decimal128NotRequired>(5).decimal = Decimal128(BigDecimal.ZERO)\n+        realm.createObject<Decimal128NotRequired>(6).decimal = null\n+        realm.createObject<Decimal128NotRequired>(7).decimal = Decimal128(BigDecimal.TEN)\n+        realm.createObject<Decimal128NotRequired>(8).decimal = Decimal128(BigDecimal.TEN)\n+        realm.createObject<Decimal128NotRequired>(9).decimal = null\n+        realm.commitTransaction()\n+\n+        val all = realm.where<Decimal128NotRequired>().distinct(\"decimal\").sort(\"decimal\", Sort.ASCENDING).findAll()\n+        assertEquals(4, all.size)\n+        assertNull(all[0]!!.decimal)\n+        assertEquals(Decimal128(BigDecimal.ZERO), all[1]!!.decimal)\n+        assertEquals(Decimal128(BigDecimal.ONE), all[2]!!.decimal)\n+        assertEquals(Decimal128(BigDecimal.TEN), all[3]!!.decimal)\n+\n+    }\n+\n+    @Test\n+    fun queries() {\n+        realm.beginTransaction()\n+        realm.createObject<Decimal128NotRequired>(1).decimal = Decimal128(BigDecimal.ONE)\n+        realm.createObject<Decimal128NotRequired>(2).decimal = null\n+        realm.createObject<Decimal128NotRequired>(3).decimal = Decimal128(BigDecimal.TEN)\n+        realm.createObject<Decimal128NotRequired>(4).decimal = Decimal128(BigDecimal.ZERO)\n+        realm.commitTransaction()\n+\n+        // count\n+        assertEquals(4, realm.where<Decimal128NotRequired>().count())\n+\n+        // notEqualTo\n+        var all = realm.where<Decimal128NotRequired>()\n+                .notEqualTo(\"decimal\", Decimal128(BigDecimal.ONE))\n+                .sort(\"decimal\", Sort.ASCENDING)\n+                .findAll()\n+        assertEquals(3, all.size)\n+        assertNull(all[0]!!.decimal)\n+        assertEquals(Decimal128(BigDecimal.ZERO), all[1]!!.decimal)\n+        assertEquals(Decimal128(BigDecimal.TEN), all[2]!!.decimal)\n+\n+        // greaterThanOrEqualTo\n+        all = realm.where<Decimal128NotRequired>()\n+                .greaterThanOrEqualTo(\"decimal\", Decimal128(BigDecimal.ONE))\n+                .sort(\"decimal\", Sort.ASCENDING)\n+                .findAll()\n+        assertEquals(2, all.size)\n+        assertEquals(Decimal128(BigDecimal.ONE), all[0]!!.decimal)\n+        assertEquals(Decimal128(BigDecimal.TEN), all[1]!!.decimal)\n+\n+        // greaterThan\n+        all = realm.where<Decimal128NotRequired>()\n+                .greaterThan(\"decimal\", Decimal128(BigDecimal.ONE))\n+                .sort(\"decimal\", Sort.ASCENDING)\n+                .findAll()\n+        assertEquals(1, all.size)\n+        assertEquals(Decimal128(BigDecimal.TEN), all[0]!!.decimal)\n+\n+\n+        // lessThanOrEqualTo\n+        all = realm.where<Decimal128NotRequired>()\n+                .lessThanOrEqualTo(\"decimal\", Decimal128(BigDecimal.ONE))\n+                .sort(\"decimal\", Sort.ASCENDING)\n+                .findAll()\n+        assertEquals(2, all.size)\n+        assertEquals(Decimal128(BigDecimal.ZERO), all[0]!!.decimal)\n+        assertEquals(Decimal128(BigDecimal.ONE), all[1]!!.decimal)\n+\n+        // lessThan\n+        all = realm.where<Decimal128NotRequired>()\n+                .lessThan(\"decimal\", Decimal128(BigDecimal.ONE))\n+                .sort(\"decimal\", Sort.ASCENDING)\n+                .findAll()\n+        assertEquals(1, all.size)\n+        assertEquals(Decimal128(BigDecimal.ZERO), all[0]!!.decimal)\n+\n+        // isNull\n+        all = realm.where<Decimal128NotRequired>()\n+                .isNull(\"decimal\")\n+                .findAll()\n+        assertEquals(1, all.size)\n+        assertNull(all[0]!!.decimal)\n+        assertEquals(2L, all[0]!!.id)\n+\n+        // isNotNull\n+        all = realm.where<Decimal128NotRequired>()\n+                .isNotNull(\"decimal\")\n+                .sort(\"decimal\", Sort.ASCENDING)\n+                .findAll()\n+        assertEquals(3, all.size)\n+        assertEquals(Decimal128(BigDecimal.ZERO), all[0]!!.decimal)\n+        assertEquals(Decimal128(BigDecimal.ONE), all[1]!!.decimal)\n+        assertEquals(Decimal128(BigDecimal.TEN), all[2]!!.decimal)\n+\n+        // average\n+        try {\n+            realm.where<Decimal128NotRequired>().average(\"decimal\") // FIXME should we support avergae queries in Core?\n+            fail(\"Average is not supported for Decimal128\")\n+        } catch (expected: IllegalArgumentException) {}\n+\n+        // isEmpty\n+        try {\n+            realm.where<Decimal128NotRequired>().isEmpty(\"decimal\")\n+            fail(\"isEmpty is not supported for Decimal128\")\n+        } catch (expected: IllegalArgumentException) {}\n+    }\n+\n+}", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzMjE5OQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408832199", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "author": "cmelchior", "createdAt": "2020-04-15T13:16:02Z", "path": "realm/realm-library/src/main/cpp/io_realm_internal_CheckedRow.cpp", "diffHunk": "@@ -235,3 +235,44 @@ JNIEXPORT void JNICALL Java_io_realm_internal_CheckedRow_nativeNullifyLink(JNIEn\n \n     Java_io_realm_internal_UncheckedRow_nativeNullifyLink(env, obj, nativeRowPtr, columnKey);\n }\n+\n+\n+JNIEXPORT jlongArray JNICALL Java_io_realm_internal_CheckedRow_nativeGetDecimal128(JNIEnv* env, jobject obj, jlong nativeRowPtr, jlong columnKey)\n+{\n+    if (!TYPE_VALID(env, OBJ(nativeRowPtr)->get_table(), columnKey, type_Decimal)) {\n+        return nullptr;\n+    }\n+\n+    return Java_io_realm_internal_UncheckedRow_nativeGetDecimal128(env, obj, nativeRowPtr, columnKey);\n+}\n+\n+JNIEXPORT void JNICALL Java_io_realm_internal_CheckedRow_nativeSetDecimal128(JNIEnv* env, jobject obj, jlong nativeRowPtr, jlong columnKey, jlong low, jlong high)\n+{\n+    if (!TYPE_VALID(env, OBJ(nativeRowPtr)->get_table(), columnKey, type_Decimal)) {\n+        return;\n+    }\n+\n+    Java_io_realm_internal_UncheckedRow_nativeSetDecimal128(env, obj, nativeRowPtr, columnKey, low, high);\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_CheckedRow_nativeGetObjectId(JNIEnv* env, jobject obj,\n+                                                                                    jlong nativeRowPtr,\n+                                                                                    jlong columnKey)\n+{\n+    if (!TYPE_VALID(env, OBJ(nativeRowPtr)->get_table(), columnKey, type_ObjectId)) {\n+        return nullptr;\n+    }\n+\n+    return Java_io_realm_internal_UncheckedRow_nativeGetObjectId(env, obj, nativeRowPtr, columnKey);\n+}\n+\n+JNIEXPORT void JNICALL Java_io_realm_internal_CheckedRow_nativeSetObjectId(JNIEnv* env, jobject obj,\n+                                                                              jlong nativeRowPtr, jlong columnKey,\n+                                                                              jstring j_value)\n+{\n+    if (!TYPE_VALID(env, OBJ(nativeRowPtr)->get_table(), columnKey, type_ObjectId)) {\n+        return;\n+    }\n+\n+    Java_io_realm_internal_UncheckedRow_nativeSetObjectId(env, obj, nativeRowPtr, columnKey, j_value);\n+}", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzMjcwNg==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408832706", "bodyText": "Suggested change", "author": "cmelchior", "createdAt": "2020-04-15T13:16:48Z", "path": "realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp", "diffHunk": "@@ -214,6 +214,37 @@ static inline Obj do_create_row_with_primary_key(JNIEnv* env, jlong shared_realm\n     return table->create_object_with_primary_key(StringData(str_accessor));\n }\n \n+static inline Obj do_create_row_with_object_id_primary_key(JNIEnv* env, jlong shared_realm_ptr, jlong table_ref_ptr,\n+                                                 jlong pk_column_key, jstring pk_value)\n+{\n+    auto& shared_realm = *(reinterpret_cast<SharedRealm*>(shared_realm_ptr));\n+    TableRef table = TBL_REF(table_ref_ptr);\n+    ColKey col_key(pk_column_key);\n+    shared_realm->verify_in_write(); // throws\n+    JStringAccessor str_accessor(env, pk_value); // throws\n+    if (!pk_value && !COL_NULLABLE(env, table, pk_column_key)) {\n+        return Obj();\n+    }\n+\n+", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzMzQ5Mw==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408833493", "bodyText": "Don't you need to return here, otherwise the code will continue and attempt to create the primary key (and probably crash)?", "author": "cmelchior", "createdAt": "2020-04-15T13:17:58Z", "path": "realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp", "diffHunk": "@@ -214,6 +214,37 @@ static inline Obj do_create_row_with_primary_key(JNIEnv* env, jlong shared_realm\n     return table->create_object_with_primary_key(StringData(str_accessor));\n }\n \n+static inline Obj do_create_row_with_object_id_primary_key(JNIEnv* env, jlong shared_realm_ptr, jlong table_ref_ptr,\n+                                                 jlong pk_column_key, jstring pk_value)\n+{\n+    auto& shared_realm = *(reinterpret_cast<SharedRealm*>(shared_realm_ptr));\n+    TableRef table = TBL_REF(table_ref_ptr);\n+    ColKey col_key(pk_column_key);\n+    shared_realm->verify_in_write(); // throws\n+    JStringAccessor str_accessor(env, pk_value); // throws\n+    if (!pk_value && !COL_NULLABLE(env, table, pk_column_key)) {\n+        return Obj();\n+    }\n+\n+\n+    if (pk_value) {\n+        auto objectId = ObjectId(StringData(str_accessor).data());\n+        if (bool(table->find_first_object_id(col_key, objectId))) {\n+            THROW_JAVA_EXCEPTION(env, PK_CONSTRAINT_EXCEPTION_CLASS,", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk2MzgzMA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r409963830", "bodyText": "It's unreachable code beyond this since it throws a std::runtime_error exception", "author": "nhachicha", "createdAt": "2020-04-17T02:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzMzQ5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzMzYxOQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408833619", "bodyText": "Same, return after this?", "author": "cmelchior", "createdAt": "2020-04-15T13:18:10Z", "path": "realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp", "diffHunk": "@@ -214,6 +214,37 @@ static inline Obj do_create_row_with_primary_key(JNIEnv* env, jlong shared_realm\n     return table->create_object_with_primary_key(StringData(str_accessor));\n }\n \n+static inline Obj do_create_row_with_object_id_primary_key(JNIEnv* env, jlong shared_realm_ptr, jlong table_ref_ptr,\n+                                                 jlong pk_column_key, jstring pk_value)\n+{\n+    auto& shared_realm = *(reinterpret_cast<SharedRealm*>(shared_realm_ptr));\n+    TableRef table = TBL_REF(table_ref_ptr);\n+    ColKey col_key(pk_column_key);\n+    shared_realm->verify_in_write(); // throws\n+    JStringAccessor str_accessor(env, pk_value); // throws\n+    if (!pk_value && !COL_NULLABLE(env, table, pk_column_key)) {\n+        return Obj();\n+    }\n+\n+\n+    if (pk_value) {\n+        auto objectId = ObjectId(StringData(str_accessor).data());\n+        if (bool(table->find_first_object_id(col_key, objectId))) {\n+            THROW_JAVA_EXCEPTION(env, PK_CONSTRAINT_EXCEPTION_CLASS,\n+                                 format(PK_EXCEPTION_MSG_FORMAT, str_accessor.operator std::string()));\n+        }\n+\n+        return table->create_object_with_primary_key(objectId);\n+    }\n+    else {\n+        if (bool(table->find_first_null(col_key))) {\n+            THROW_JAVA_EXCEPTION(env, PK_CONSTRAINT_EXCEPTION_CLASS, format(PK_EXCEPTION_MSG_FORMAT, \"'null'\"));", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk2Mzg4Mg==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r409963882", "bodyText": "It's unreachable code beyond this since it throws a std::runtime_error exception", "author": "nhachicha", "createdAt": "2020-04-17T02:57:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzMzYxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzNDA5Mw==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408834093", "bodyText": "Shouldn't we throw an exception if this doesn't succeed?", "author": "cmelchior", "createdAt": "2020-04-15T13:18:54Z", "path": "realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp", "diffHunk": "@@ -334,3 +364,27 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_OsObject_nativeCreateRowWithStrin\n     CATCH_STD()\n     return realm::npos;\n }\n+\n+JNIEXPORT jlong JNICALL Java_io_realm_internal_OsObject_nativeCreateRowWithObjectIdPrimaryKey(\n+    JNIEnv* env, jclass, jlong shared_realm_ptr, jlong table_ref_ptr, jlong pk_column_ndx, jstring pk_value)\n+{\n+    try {\n+        Obj obj = do_create_row_with_object_id_primary_key(env, shared_realm_ptr, table_ref_ptr, pk_column_ndx, pk_value);\n+        return (jlong)(obj.get_key().value);\n+    }\n+    CATCH_STD()\n+    return realm::npos;\n+}\n+\n+JNIEXPORT jlong JNICALL Java_io_realm_internal_OsObject_nativeCreateNewObjectWithObjectIdPrimaryKey(\n+    JNIEnv* env, jclass, jlong shared_realm_ptr, jlong table_ref_ptr, jlong pk_column_ndx, jstring pk_value)\n+{\n+    try {\n+        Obj obj = do_create_row_with_object_id_primary_key(env, shared_realm_ptr, table_ref_ptr, pk_column_ndx, pk_value);\n+        if (bool(obj)) {", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg0MDE4MA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408840180", "bodyText": "Delete this code?", "author": "cmelchior", "createdAt": "2020-04-15T13:27:40Z", "path": "realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp", "diffHunk": "@@ -540,6 +582,50 @@ JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeSetByteArray(JNIEnv* e\n     CATCH_STD()\n }\n \n+JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeSetDecimal128(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                    jlong columnKey, jlong rowKey, jlong low,\n+                                                                    jlong high, jboolean isDefault)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Decimal)) {\n+        return;\n+    }\n+    try {\n+        Decimal128::Bid128 raw {static_cast<uint64_t>(low), static_cast<uint64_t>(high)};\n+        table->get_object(ObjKey(rowKey)).set(ColKey(columnKey), Decimal128(raw), B(isDefault));\n+    }\n+    CATCH_STD()\n+}\n+\n+//JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeSetDecimal128Null(JNIEnv* env, jclass, jlong nativeTableRefPtr,", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg0MDY4OQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408840689", "bodyText": "Is the B macro new?", "author": "cmelchior", "createdAt": "2020-04-15T13:28:25Z", "path": "realm/realm-library/src/main/cpp/io_realm_internal_Table.cpp", "diffHunk": "@@ -540,6 +582,50 @@ JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeSetByteArray(JNIEnv* e\n     CATCH_STD()\n }\n \n+JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeSetDecimal128(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                    jlong columnKey, jlong rowKey, jlong low,\n+                                                                    jlong high, jboolean isDefault)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_Decimal)) {\n+        return;\n+    }\n+    try {\n+        Decimal128::Bid128 raw {static_cast<uint64_t>(low), static_cast<uint64_t>(high)};\n+        table->get_object(ObjKey(rowKey)).set(ColKey(columnKey), Decimal128(raw), B(isDefault));\n+    }\n+    CATCH_STD()\n+}\n+\n+//JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeSetDecimal128Null(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+//                                                                        jlong columnKey, jlong rowKey, jboolean isDefault)\n+//{\n+//    TableRef table = TBL_REF(nativeTableRefPtr);\n+//    if (!TYPE_VALID(env, table, columnKey, type_Decimal)) {\n+//        return;\n+//    }\n+//    try {\n+//        table->get_object(ObjKey(rowKey)).set(ColKey(columnKey), Decimal128(), B(isDefault));\n+//    }\n+//    CATCH_STD()\n+//}\n+\n+JNIEXPORT void JNICALL Java_io_realm_internal_Table_nativeSetObjectId(JNIEnv* env, jclass, jlong nativeTableRefPtr,\n+                                                                    jlong columnKey, jlong rowKey, jstring j_value,\n+                                                                    jboolean isDefault)\n+{\n+    TableRef table = TBL_REF(nativeTableRefPtr);\n+    if (!TYPE_VALID(env, table, columnKey, type_ObjectId)) {\n+        return;\n+    }\n+    try {\n+        JStringAccessor value(env, j_value);\n+        table->get_object(ObjKey(rowKey)).set(ColKey(columnKey), ObjectId(StringData(value).data()), B(isDefault));", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk2NTY0OQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r409965649", "bodyText": "no, it predates my era :)", "author": "nhachicha", "createdAt": "2020-04-17T03:03:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg0MDY4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExMDg5MA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r410110890", "bodyText": "Huh, never seen it before. Oh well \ud83d\ude04", "author": "cmelchior", "createdAt": "2020-04-17T09:39:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg0MDY4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg0NDExMg==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408844112", "bodyText": "We are doing this in a bunch of places, maybe extract to a common shared function?", "author": "cmelchior", "createdAt": "2020-04-15T13:33:11Z", "path": "realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp", "diffHunk": "@@ -1320,6 +1675,36 @@ JNIEXPORT jdouble JNICALL Java_io_realm_internal_TableQuery_nativeAverageDouble(\n     return 0;\n }\n \n+JNIEXPORT jlongArray JNICALL Java_io_realm_internal_TableQuery_nativeAverageDecimal128(JNIEnv* env, jobject,\n+                                                                                jlong nativeQueryPtr,\n+                                                                                jlong columnKey)\n+{\n+    Query* pQuery = Q(nativeQueryPtr);\n+    ConstTableRef pTable = pQuery->get_table();\n+    if (!TYPE_VALID(env, pTable, columnKey, type_Decimal)) {\n+        return nullptr;\n+    }\n+    try {\n+        Decimal128 decimal128 = pQuery->average_decimal128(ColKey(columnKey));\n+        if (!decimal128.is_null()) {", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk3MTI5OA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r409971298", "bodyText": "replaced with RETURN_DECIMAL128_AS_JLONG_ARRAY__OR_NULL macro", "author": "nhachicha", "createdAt": "2020-04-17T03:27:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg0NDExMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3MDMzMw==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408870333", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "author": "cmelchior", "createdAt": "2020-04-15T14:07:48Z", "path": "realm/realm-library/src/main/cpp/io_realm_internal_UncheckedRow.cpp", "diffHunk": "@@ -412,3 +413,80 @@ JNIEXPORT jlong JNICALL Java_io_realm_internal_UncheckedRow_nativeGetFinalizerPt\n {\n     return reinterpret_cast<jlong>(&finalize_unchecked_row);\n }\n+\n+JNIEXPORT jlongArray JNICALL Java_io_realm_internal_UncheckedRow_nativeGetDecimal128(JNIEnv* env, jobject,\n+                                                                                    jlong nativeRowPtr,\n+                                                                                    jlong columnKey)\n+{\n+    if (!ROW_VALID(env, OBJ(nativeRowPtr))) {\n+        return nullptr;\n+    }\n+\n+    try {\n+        Decimal128 decimal128 = OBJ(nativeRowPtr)->get<Decimal128>(ColKey(columnKey));\n+        if (!decimal128.is_null()) {\n+            uint64_t* raw = decimal128.raw()->w;\n+\n+            jlongArray ret_array = env->NewLongArray(2);\n+            if (!ret_array) {\n+                ThrowException(env, OutOfMemory, \"Could not allocate memory to return decimal128 value.\");\n+                return nullptr;\n+            }\n+\n+            jlong ret[2] = { jlong(raw[0])/*low*/, jlong(raw[1]) /*high*/};\n+            env->SetLongArrayRegion(ret_array, 0, 2, ret);\n+            return ret_array;\n+        } else {\n+            return nullptr;\n+        }\n+    }\n+    CATCH_STD()\n+    return nullptr;\n+}\n+\n+JNIEXPORT void JNICALL Java_io_realm_internal_UncheckedRow_nativeSetDecimal128(JNIEnv* env, jobject,\n+                                                                              jlong nativeRowPtr, jlong columnKey,\n+                                                                              jlong low, jlong high)\n+{\n+    if (!ROW_VALID(env, OBJ(nativeRowPtr))) {\n+        return;\n+    }\n+\n+    try {\n+        ColKey col_key(columnKey);\n+        Decimal128::Bid128 raw {static_cast<uint64_t>(low), static_cast<uint64_t>(high)};\n+        OBJ(nativeRowPtr)->set(col_key, Decimal128(raw));\n+    }\n+    CATCH_STD()\n+}\n+\n+JNIEXPORT jstring JNICALL Java_io_realm_internal_UncheckedRow_nativeGetObjectId(JNIEnv* env, jobject,\n+                                                                                    jlong nativeRowPtr,\n+                                                                                    jlong columnKey)\n+{\n+    if (!ROW_VALID(env, OBJ(nativeRowPtr))) {\n+        return nullptr;\n+    }\n+\n+    try {\n+        ObjectId objectId = OBJ(nativeRowPtr)->get<ObjectId>(ColKey(columnKey));\n+        return to_jstring(env, objectId.to_string().data());\n+    }\n+    CATCH_STD()\n+    return nullptr;\n+}\n+\n+JNIEXPORT void JNICALL Java_io_realm_internal_UncheckedRow_nativeSetObjectId(JNIEnv* env, jobject,\n+                                                                              jlong nativeRowPtr, jlong columnKey,\n+                                                                              jstring j_value)\n+{\n+    if (!ROW_VALID(env, OBJ(nativeRowPtr))) {\n+        return;\n+    }\n+\n+    try {\n+        JStringAccessor value(env, j_value);\n+        OBJ(nativeRowPtr)->set(ColKey(columnKey), ObjectId(StringData(value).data()));\n+    }\n+    CATCH_STD()\n+}", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3MDU3Mw==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408870573", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "author": "cmelchior", "createdAt": "2020-04-15T14:08:08Z", "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsObjectBuilder.cpp", "diffHunk": "@@ -318,4 +341,28 @@ JNIEXPORT void JNICALL Java_io_realm_internal_objectstore_OsObjectBuilder_native\n         add_list_element(list_ptr, value);\n     }\n     CATCH_STD()\n+}\n+\n+JNIEXPORT void JNICALL Java_io_realm_internal_objectstore_OsObjectBuilder_nativeAddDecimal128ListItem\n+        (JNIEnv* env, jclass, jlong list_ptr, jlong j_low_value, jlong j_high_value)\n+{\n+    try {\n+        Decimal128::Bid128 raw {static_cast<uint64_t>(j_low_value), static_cast<uint64_t>(j_high_value)};\n+        Decimal128 decimal128 = Decimal128(raw);\n+        const JavaValue value(decimal128);\n+        add_list_element(list_ptr, value);\n+    }\n+    CATCH_STD()\n+}\n+\n+JNIEXPORT void JNICALL Java_io_realm_internal_objectstore_OsObjectBuilder_nativeAddObjectIdListItem\n+        (JNIEnv* env, jclass, jlong list_ptr, jstring j_data)\n+{\n+    try {\n+        JStringAccessor data(env, j_data);\n+        ObjectId objectId = ObjectId(StringData(data).data());\n+        const JavaValue value(objectId);\n+        add_list_element(list_ptr, value);\n+    }\n+    CATCH_STD()\n }", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3MDk5OQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408870999", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "author": "cmelchior", "createdAt": "2020-04-15T14:08:40Z", "path": "realm/realm-library/src/main/cpp/java_class_global_def.cpp", "diffHunk": "@@ -41,3 +41,20 @@ jbyteArray JavaClassGlobalDef::new_byte_array(JNIEnv* env, const BinaryData& bin\n     env->SetByteArrayRegion(ret, 0, size, reinterpret_cast<const jbyte*>(binary_data.data()));\n     return ret;\n }\n+\n+\n+jobject JavaClassGlobalDef::new_decimal128(JNIEnv* env, const Decimal128& decimal128)\n+{\n+    if (decimal128.is_null()) {\n+        return nullptr;\n+    }\n+    static jni_util::JavaMethod fromIEEE754BIDEncoding(env, instance()->m_bson_decimal128, \"fromIEEE754BIDEncoding\", \"(JJ)Lorg/bson/types/Decimal128;\", true);\n+    const Decimal128::Bid128* raw = decimal128.raw();\n+    return env->CallStaticObjectMethod(instance()->m_bson_decimal128, fromIEEE754BIDEncoding, static_cast<jlong>(raw->w[1]), static_cast<jlong>(raw->w[0]));\n+}\n+\n+jobject JavaClassGlobalDef::new_object_id(JNIEnv* env, const ObjectId& objectId)\n+{\n+    static jni_util::JavaMethod init(env, instance()->m_bson_object_id, \"<init>\", \"(Ljava/lang/String;)V\");\n+    return env->NewObject(instance()->m_bson_object_id, init, to_jstring(env, objectId.to_string().data()));\n+}", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3NDA0Mw==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408874043", "bodyText": "I think this approach will cause a ClassNotFoundException for non-sync builds. If by accident you try to add an unsupported type, it will try to go through all these if-statements before reaching the last else statement and then you cannot find the class for Decimal128 because it is not on the classpath.", "author": "cmelchior", "createdAt": "2020-04-15T14:12:53Z", "path": "realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java", "diffHunk": "@@ -406,6 +451,10 @@ public DynamicRealmObject getObject(String fieldName) {\n             return RealmFieldType.FLOAT_LIST;\n         } else if (primitiveType.equals(Double.class)) {\n             return RealmFieldType.DOUBLE_LIST;\n+        } else if (primitiveType.equals(Decimal128.class)) {", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNTIzNA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r411125234", "bodyText": "As discussed, let's add the bson dependency for this PR and optimise later a mechanism to make it optional. I think the method count and size will not affect apps not using these types (because of R8 tree shaking)", "author": "nhachicha", "createdAt": "2020-04-20T06:30:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3NDA0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3NDIzMw==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408874233", "bodyText": "Same as above", "author": "cmelchior", "createdAt": "2020-04-15T14:13:09Z", "path": "realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java", "diffHunk": "@@ -557,6 +616,10 @@ private void setValue(String fieldName, Object value) {\n         } else if (valueClass == RealmList.class) {\n             RealmList<?> list = (RealmList<?>) value;\n             setList(fieldName, list);\n+        } else if (valueClass == Decimal128.class) {", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNTMwMA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r411125300", "bodyText": "As discussed, let's add the bson dependency for this PR and optimise later a mechanism to make it optional. I think the method count and size will not affect apps not using these types (because of R8 tree shaking)", "author": "nhachicha", "createdAt": "2020-04-20T06:30:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3NDIzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4OTUyNQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408989525", "bodyText": "This looks wrong. I think this is the case for Object links not ObjectID?", "author": "cmelchior", "createdAt": "2020-04-15T16:51:40Z", "path": "realm/realm-library/src/main/java/io/realm/RealmFieldType.java", "diffHunk": "@@ -140,25 +145,21 @@ public boolean isValid(Object obj) {\n                 return (obj instanceof Float);\n             case CORE_TYPE_VALUE_DOUBLE:\n                 return (obj instanceof Double);\n+            case CORE_TYPE_VALUE_DECIMAL128:\n+                return (obj instanceof Decimal128);\n             case CORE_TYPE_VALUE_OBJECT:\n-                return false;", "originalCommit": "70a5da692612b6eaaabdb93e0bd07e626763c9da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk3NDE0NA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r409974144", "bodyText": "nice catch!", "author": "nhachicha", "createdAt": "2020-04-17T03:38:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4OTUyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MDAyMg==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408990022", "bodyText": "Pretty sure this will crash with ClassNotFound if bson is not on the classpath?", "author": "cmelchior", "createdAt": "2020-04-15T16:52:30Z", "path": "realm/realm-library/src/main/java/io/realm/RealmList.java", "diffHunk": "@@ -1328,6 +1331,14 @@ private static boolean isClassForRealmModel(Class<?> clazz) {\n             //noinspection unchecked\n             return (ManagedListOperator<E>) new DateListOperator(realm, osList, (Class<Date>) clazz);\n         }\n+        if (clazz == Decimal128.class) {", "originalCommit": "70a5da692612b6eaaabdb93e0bd07e626763c9da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNTE3NQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r411125175", "bodyText": "As discussed, let's add the bson dependency for this PR and optimise later a mechanism to make it optional. I think the method count and size will not affect apps not using these types (because of R8 tree shaking)", "author": "nhachicha", "createdAt": "2020-04-20T06:29:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MDAyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MDQzOQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408990439", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "author": "cmelchior", "createdAt": "2020-04-15T16:53:04Z", "path": "realm/realm-library/src/main/java/io/realm/RealmList.java", "diffHunk": "@@ -1955,3 +1966,103 @@ protected void setValue(int index, Object value) {\n         osList.setDate(index, (Date) value);\n     }\n }\n+\n+/**\n+ * A subclass of {@link ManagedListOperator} that deal with {@link Decimal128} list field.\n+ */\n+final class Decimal128ListOperator extends ManagedListOperator<Decimal128> {\n+\n+    Decimal128ListOperator(BaseRealm realm, OsList osList, Class<Decimal128> clazz) {\n+        super(realm, osList, clazz);\n+    }\n+\n+    @Override\n+    public boolean forRealmModel() {\n+        return false;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public Decimal128 get(int index) {\n+        return (Decimal128) osList.getValue(index);\n+    }\n+\n+    @Override\n+    protected void checkValidValue(@Nullable Object value) {\n+        if (value == null) {\n+            // null is always valid (but schema may reject null on insertion).\n+            return;\n+        }\n+        if (!(value instanceof Decimal128)) {\n+            throw new IllegalArgumentException(\n+                    String.format(Locale.ENGLISH, INVALID_OBJECT_TYPE_MESSAGE,\n+                            \"org.bson.types.Decimal128\",\n+                            value.getClass().getName()));\n+        }\n+    }\n+\n+    @Override\n+    public void appendValue(Object value) {\n+        osList.addDecimal128((Decimal128)value);\n+    }\n+\n+    @Override\n+    public void insertValue(int index, Object value) {\n+        osList.insertDecimal128(index, (Decimal128) value);\n+    }\n+\n+    @Override\n+    protected void setValue(int index, Object value) {\n+        osList.setDecimal128(index, (Decimal128) value);\n+    }\n+}\n+\n+/**\n+ * A subclass of {@link ManagedListOperator} that deal with {@link ObjectId} list field.\n+ */\n+final class ObjectIdListOperator extends ManagedListOperator<ObjectId> {\n+\n+    ObjectIdListOperator(BaseRealm realm, OsList osList, Class<ObjectId> clazz) {\n+        super(realm, osList, clazz);\n+    }\n+\n+    @Override\n+    public boolean forRealmModel() {\n+        return false;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public ObjectId get(int index) {\n+        return (ObjectId) osList.getValue(index);\n+    }\n+\n+    @Override\n+    protected void checkValidValue(@Nullable Object value) {\n+        if (value == null) {\n+            // null is always valid (but schema may reject null on insertion).\n+            return;\n+        }\n+        if (!(value instanceof ObjectId)) {\n+            throw new IllegalArgumentException(\n+                    String.format(Locale.ENGLISH, INVALID_OBJECT_TYPE_MESSAGE,\n+                            \"org.bson.types.ObjectId\",\n+                            value.getClass().getName()));\n+        }\n+    }\n+\n+    @Override\n+    public void appendValue(Object value) {\n+        osList.addObjectId((ObjectId)value);\n+    }\n+\n+    @Override\n+    public void insertValue(int index, Object value) {\n+        osList.insertObjectId(index, (ObjectId) value);\n+    }\n+\n+    @Override\n+    protected void setValue(int index, Object value) {\n+        osList.setObjectId(index, (ObjectId) value);\n+    }\n+}", "originalCommit": "70a5da692612b6eaaabdb93e0bd07e626763c9da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MjI4Nw==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408992287", "bodyText": "What about support for Decimal128 in Sum?", "author": "cmelchior", "createdAt": "2020-04-15T16:56:11Z", "path": "realm/realm-library/src/main/java/io/realm/RealmQuery.java", "diffHunk": "@@ -1645,10 +1866,24 @@ public double average(String fieldName) {\n                 return query.averageFloat(columnIndex);\n             default:\n                 throw new IllegalArgumentException(String.format(Locale.US,\n-                        TYPE_MISMATCH, fieldName, \"int, float or double\"));\n+                        TYPE_MISMATCH, fieldName, \"int, float or double. For Decimal128 use `averageDecimal128` method.\"));\n         }\n     }\n+    /**\n+     * Returns the average of a given field.\n+     * Does not support dotted field notation.\n+     *\n+     * @param fieldName the field to calculate average on. Only Decimal128 fields is supported. For other number types consider using {@link #average(String)}.\n+     * @return the average for the given field amongst objects in query results. This will be of type Decimal128. If no objects exist or they all have {@code null}\n+     * as the value for the given field {@code 0} will be returned. When computing the average, objects with {@code null} values are ignored.\n+     * @throws java.lang.IllegalArgumentException if the field is not a Decimal128 type.\n+     */\n+    public @Nullable Decimal128 averageDecimal128(String fieldName) {", "originalCommit": "70a5da692612b6eaaabdb93e0bd07e626763c9da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3MTU3OA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r410271578", "bodyText": "Good catch, this is still missing from Core", "author": "nhachicha", "createdAt": "2020-04-17T14:45:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MjI4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3ODY5Ng==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r410278696", "bodyText": "Ok. No reason to hold this PR waiting for that. We can always add later.", "author": "cmelchior", "createdAt": "2020-04-17T14:56:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MjI4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MjYxMQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408992611", "bodyText": "Fix these", "author": "cmelchior", "createdAt": "2020-04-15T16:56:43Z", "path": "realm/realm-library/src/main/java/io/realm/RealmResults.java", "diffHunk": "@@ -418,6 +421,34 @@ public void setObject(String fieldName, @Nullable RealmModel value) {\n         osResults.setObject(fieldName, row);\n     }\n \n+    /**\n+     * FIXME", "originalCommit": "70a5da692612b6eaaabdb93e0bd07e626763c9da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MzI5OA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408993298", "bodyText": "I think you need to apply the same pattern used here to the other places where you are referencing the bson types, since they might not be available.", "author": "cmelchior", "createdAt": "2020-04-15T16:57:47Z", "path": "realm/realm-library/src/main/java/io/realm/RealmResults.java", "diffHunk": "@@ -516,8 +547,18 @@ private Row checkRealmObjectConstraints(String fieldName, @Nullable RealmModel v\n                 checkTypeOfListElements(list, Double.class);\n                 osResults.setDoubleList(fieldName, (RealmList<Double>) list);\n                 break;\n-            default:\n+            default: {\n+                // Handle Decimal128 and ObjectId in a special way since they might not be on the\n+                // classpath\n+                if (columnType == RealmFieldType.DECIMAL128_LIST) {", "originalCommit": "70a5da692612b6eaaabdb93e0bd07e626763c9da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNDcxMQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r411124711", "bodyText": "As discussed, let's add the bson dependency for this PR and optimise later a mechanism to make it optional. I think the method count and size will not affect apps not using these types (because of R8 tree shaking)", "author": "nhachicha", "createdAt": "2020-04-20T06:28:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MzI5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NTY1Nw==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408995657", "bodyText": "Suggested change", "author": "cmelchior", "createdAt": "2020-04-15T17:01:25Z", "path": "realm/realm-library/src/testUtils/java/io/realm/TestHelper.java", "diffHunk": "@@ -1304,4 +1306,26 @@ public static void waitForNetworkThreadExecutorToFinish() {\n     public static <T> T getNull() {\n         return null;\n     }\n+\n+    public static String randomObjectIdHexString() {\n+        char[] hex = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E' , 'F'};\n+\n+        StringBuilder randomId = new StringBuilder(24);\n+        for (int i = 0; i < 24; i++) {\n+            randomId.append(hex[RANDOM.nextInt(16)]);\n+        }\n+        return randomId.toString();\n+    }\n+\n+    public static String generateObjectIdHexString(int i) {\n+        char[] hex = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E' , 'F'};\n+\n+        StringBuilder randomId = new StringBuilder(24);\n+        for (int j = 0; j < 24; j++) {\n+            randomId.append(hex[(i + j) % 16]);\n+        }\n+        return randomId.toString();\n+    }\n+\n+", "originalCommit": "70a5da692612b6eaaabdb93e0bd07e626763c9da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NTg0NQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408995845", "bodyText": "Is SecureRandom more random than Random?", "author": "cmelchior", "createdAt": "2020-04-15T17:01:43Z", "path": "realm/realm-library/src/testUtils/java/io/realm/TestHelper.java", "diffHunk": "@@ -76,7 +78,7 @@\n     public static final int STANDARD_WAIT_SECS = 200;\n \n     private static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n-    private static final Random RANDOM = new Random();\n+    private static final SecureRandom RANDOM = new SecureRandom();", "originalCommit": "70a5da692612b6eaaabdb93e0bd07e626763c9da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3NjI3Ng==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r410276276", "bodyText": "According to the documentation it's more secure when used in the context of cryptography, which is the case with encryptionKey parameter of the RealmConfiguration. This is more to set the example for developers", "author": "nhachicha", "createdAt": "2020-04-17T14:53:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NTg0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEwMDM3NA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r409100374", "bodyText": "Unrelated to the PR, I just happened to notice: Why are we having \"default:\" here (and many other places) - it's better not to to ensure the compiler throws a warning when we are missing the handling of a new enum.", "author": "bmunkholm", "createdAt": "2020-04-15T20:02:30Z", "path": "realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp", "diffHunk": "@@ -1503,6 +1896,8 @@ JNIEXPORT void JNICALL Java_io_realm_internal_TableQuery_nativeIsNotNull(JNIEnv*\n                 case type_Float:\n                 case type_Double:\n                 case type_Timestamp:\n+                case type_Decimal:\n+                case type_ObjectId:\n                     pQuery->not_equal(ColKey(column_idx), realm::null());\n                     break;\n                 default:", "originalCommit": "70a5da692612b6eaaabdb93e0bd07e626763c9da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI4MDM3Ng==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r410280376", "bodyText": "Historically this (i.e REALM_UNREACHABLE) has been used by Core, it could be interesting in some use case to use an extensive switch statement to ensure we're covering all branches, which in this example will be a fall through for 'type_OldTable', 'type_OldMixed', and 'type_OldDateTime", "author": "nhachicha", "createdAt": "2020-04-17T14:59:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEwMDM3NA=="}], "type": "inlineReview"}, {"oid": "43fb00ada0f40ea60ea0da580d55e2e87c7d15ae", "url": "https://github.com/realm/realm-java/commit/43fb00ada0f40ea60ea0da580d55e2e87c7d15ae", "message": "Update CHANGELOG.md\n\nCo-Authored-By: Christian Melchior <christian@ilios.dk>", "committedDate": "2020-04-16T14:55:40Z", "type": "commit"}, {"oid": "6462e3b11f5b3ba2b3cbbdac8ddbfa0b6337d0b5", "url": "https://github.com/realm/realm-java/commit/6462e3b11f5b3ba2b3cbbdac8ddbfa0b6337d0b5", "message": "Update realm/realm-annotations-processor/src/test/resources/io/realm/some_test_BooleansRealmProxy.java\n\nCo-Authored-By: Christian Melchior <christian@ilios.dk>", "committedDate": "2020-04-16T18:32:46Z", "type": "commit"}, {"oid": "1f5b215cc1d8baa3396b3420b5f59dd19d9d1b84", "url": "https://github.com/realm/realm-java/commit/1f5b215cc1d8baa3396b3420b5f59dd19d9d1b84", "message": "Update realm/realm-library/src/androidTest/AndroidManifest.xml\n\nCo-Authored-By: Christian Melchior <christian@ilios.dk>", "committedDate": "2020-04-16T18:33:29Z", "type": "commit"}, {"oid": "0264202812824bc5bde59ec0f8a648353fca7fa0", "url": "https://github.com/realm/realm-java/commit/0264202812824bc5bde59ec0f8a648353fca7fa0", "message": "PR feedback", "committedDate": "2020-04-17T15:17:28Z", "type": "commit"}, {"oid": "63440d38f40a1f07794932db358a73ca31012786", "url": "https://github.com/realm/realm-java/commit/63440d38f40a1f07794932db358a73ca31012786", "message": "Update realm/realm-library/src/testUtils/java/io/realm/TestHelper.java\n\nCo-Authored-By: Christian Melchior <christian@ilios.dk>", "committedDate": "2020-04-17T15:21:29Z", "type": "commit"}, {"oid": "1f16a773bb6a0fffac4ed18c18d133e92887097f", "url": "https://github.com/realm/realm-java/commit/1f16a773bb6a0fffac4ed18c18d133e92887097f", "message": "Update realm/realm-library/src/androidTest/kotlin/io/realm/ObjectIdTests.kt\n\nCo-Authored-By: Christian Melchior <christian@ilios.dk>", "committedDate": "2020-04-17T15:24:03Z", "type": "commit"}, {"oid": "7aa80702b99e62176af66897c2c87e3016dbab54", "url": "https://github.com/realm/realm-java/commit/7aa80702b99e62176af66897c2c87e3016dbab54", "message": "Update realm/realm-library/src/androidTest/kotlin/io/realm/Decimal128Tests.kt\n\nCo-Authored-By: Christian Melchior <christian@ilios.dk>", "committedDate": "2020-04-17T15:24:57Z", "type": "commit"}, {"oid": "cc6609ff50d46db28264c953cee7f760833e0c98", "url": "https://github.com/realm/realm-java/commit/cc6609ff50d46db28264c953cee7f760833e0c98", "message": "Update realm/realm-library/src/main/cpp/io_realm_internal_CheckedRow.cpp\n\nCo-Authored-By: Christian Melchior <christian@ilios.dk>", "committedDate": "2020-04-17T15:25:23Z", "type": "commit"}, {"oid": "e8fbe3096f3d1b646945465f33e889c6ccfd1704", "url": "https://github.com/realm/realm-java/commit/e8fbe3096f3d1b646945465f33e889c6ccfd1704", "message": "Update realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp\n\nCo-Authored-By: Christian Melchior <christian@ilios.dk>", "committedDate": "2020-04-17T15:25:49Z", "type": "commit"}, {"oid": "51782ff76b6c29d5557952f98da95c75e8bc8d52", "url": "https://github.com/realm/realm-java/commit/51782ff76b6c29d5557952f98da95c75e8bc8d52", "message": "Update realm/realm-library/src/main/cpp/io_realm_internal_UncheckedRow.cpp\n\nCo-Authored-By: Christian Melchior <christian@ilios.dk>", "committedDate": "2020-04-17T15:26:37Z", "type": "commit"}, {"oid": "9c1e710ec742a1487b6340c697fe75aa472e11ae", "url": "https://github.com/realm/realm-java/commit/9c1e710ec742a1487b6340c697fe75aa472e11ae", "message": "Update realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsObjectBuilder.cpp\n\nCo-Authored-By: Christian Melchior <christian@ilios.dk>", "committedDate": "2020-04-17T15:27:04Z", "type": "commit"}, {"oid": "4f8e6f42da9afb60a1da43e5d0cce745b42bbce5", "url": "https://github.com/realm/realm-java/commit/4f8e6f42da9afb60a1da43e5d0cce745b42bbce5", "message": "Update realm/realm-library/src/main/cpp/java_class_global_def.cpp\n\nCo-Authored-By: Christian Melchior <christian@ilios.dk>", "committedDate": "2020-04-17T15:27:28Z", "type": "commit"}, {"oid": "534eea4b8acc710c2bd8c6e8ffedc24ffb09ae1d", "url": "https://github.com/realm/realm-java/commit/534eea4b8acc710c2bd8c6e8ffedc24ffb09ae1d", "message": "Merge branch 'cm/new-types' of https://github.com/realm/realm-java into cm/new-types", "committedDate": "2020-04-17T15:29:22Z", "type": "commit"}, {"oid": "2dc5bf43dc49086a67a8dffbfaf4927d7e8161de", "url": "https://github.com/realm/realm-java/commit/2dc5bf43dc49086a67a8dffbfaf4927d7e8161de", "message": "Fixing JNI method signature", "committedDate": "2020-04-17T15:46:02Z", "type": "commit"}, {"oid": "3399a9cf6906d377c9b6b231d723bcf036a4ee12", "url": "https://github.com/realm/realm-java/commit/3399a9cf6906d377c9b6b231d723bcf036a4ee12", "message": "Fixing annotation processor tests", "committedDate": "2020-04-17T18:05:45Z", "type": "commit"}, {"oid": "33aee33279076d49993a3ddb6e4306739e91fd63", "url": "https://github.com/realm/realm-java/commit/33aee33279076d49993a3ddb6e4306739e91fd63", "message": "adding more tests", "committedDate": "2020-04-20T06:11:10Z", "type": "commit"}]}