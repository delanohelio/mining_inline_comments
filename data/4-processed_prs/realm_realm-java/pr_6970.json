{"pr_number": 6970, "pr_title": "Add encryption key to sync metadata + tests", "pr_createdAt": "2020-06-26T09:22:08Z", "pr_url": "https://github.com/realm/realm-java/pull/6970", "timeline": [{"oid": "8da08139439cbc9c5eb671478de5fd4d2fc405ad", "url": "https://github.com/realm/realm-java/commit/8da08139439cbc9c5eb671478de5fd4d2fc405ad", "message": "Add encryption key to sync metadata + tests", "committedDate": "2020-06-26T09:13:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4NTI3NA==", "url": "https://github.com/realm/realm-java/pull/6970#discussion_r446085274", "bodyText": "To be sure that we actually throws on the encryption key parameter. It should probably be:\nval builder = AppConfiguration.Builder(\"app-id\")\nassertFailsWith<IllegalArgumentException> { builder.encryptionKey(...) }", "author": "cmelchior", "createdAt": "2020-06-26T09:51:16Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/AppConfigurationTests.kt", "diffHunk": "@@ -218,15 +217,27 @@ class AppConfigurationTests {\n     }\n \n     @Test\n-    @Ignore(\"FIXME\")\n     fun encryptionKey() {\n-        TODO()\n+        val key = TestHelper.getRandomKey()\n+\n+        val config = AppConfiguration.Builder(\"app-id\")\n+                .encryptionKey(key)\n+                .build()\n+\n+        assertArrayEquals(key, config.encryptionKey)\n     }\n \n     @Test\n-    @Ignore(\"FIXME\")\n     fun encryptionKey_invalidValuesThrows() {\n-        TODO()\n+        assertFailsWith<IllegalArgumentException> {\n+            AppConfiguration.Builder(\"app-id\")", "originalCommit": "8da08139439cbc9c5eb671478de5fd4d2fc405ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4NTM0NA==", "url": "https://github.com/realm/realm-java/pull/6970#discussion_r446085344", "bodyText": "Same", "author": "cmelchior", "createdAt": "2020-06-26T09:51:25Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/AppConfigurationTests.kt", "diffHunk": "@@ -218,15 +217,27 @@ class AppConfigurationTests {\n     }\n \n     @Test\n-    @Ignore(\"FIXME\")\n     fun encryptionKey() {\n-        TODO()\n+        val key = TestHelper.getRandomKey()\n+\n+        val config = AppConfiguration.Builder(\"app-id\")\n+                .encryptionKey(key)\n+                .build()\n+\n+        assertArrayEquals(key, config.encryptionKey)\n     }\n \n     @Test\n-    @Ignore(\"FIXME\")\n     fun encryptionKey_invalidValuesThrows() {\n-        TODO()\n+        assertFailsWith<IllegalArgumentException> {\n+            AppConfiguration.Builder(\"app-id\")\n+                    .encryptionKey(null)\n+        }\n+\n+        assertFailsWith<IllegalArgumentException> {\n+            AppConfiguration.Builder(\"app-id\")", "originalCommit": "8da08139439cbc9c5eb671478de5fd4d2fc405ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4NjUyMg==", "url": "https://github.com/realm/realm-java/pull/6970#discussion_r446086522", "bodyText": "It looks like we have a wrong nullability defined if you are allowed to pass in null directly. It looks like we forgot to add something like https://github.com/realm/realm-java/blob/v10/realm/realm-library/src/main/java/io/realm/package-info.java to the io.realm.app package.\nIn other places like this we use TestHelper.getNull() to \"cheat\" the Kotlin type system.", "author": "cmelchior", "createdAt": "2020-06-26T09:53:53Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/AppConfigurationTests.kt", "diffHunk": "@@ -218,15 +217,27 @@ class AppConfigurationTests {\n     }\n \n     @Test\n-    @Ignore(\"FIXME\")\n     fun encryptionKey() {\n-        TODO()\n+        val key = TestHelper.getRandomKey()\n+\n+        val config = AppConfiguration.Builder(\"app-id\")\n+                .encryptionKey(key)\n+                .build()\n+\n+        assertArrayEquals(key, config.encryptionKey)\n     }\n \n     @Test\n-    @Ignore(\"FIXME\")\n     fun encryptionKey_invalidValuesThrows() {\n-        TODO()\n+        assertFailsWith<IllegalArgumentException> {\n+            AppConfiguration.Builder(\"app-id\")\n+                    .encryptionKey(null)", "originalCommit": "8da08139439cbc9c5eb671478de5fd4d2fc405ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4NjcwNQ==", "url": "https://github.com/realm/realm-java/pull/6970#discussion_r446086705", "bodyText": "This shouldn't be needed?", "author": "cmelchior", "createdAt": "2020-06-26T09:54:17Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/AppTests.kt", "diffHunk": "@@ -265,4 +267,25 @@ class AppTests {\n         assertEquals(registry, app.getFunctions(user, registry).defaultCodecRegistry)\n     }\n \n+    @Test()\n+    fun encryption() {\n+        tearDown()", "originalCommit": "8da08139439cbc9c5eb671478de5fd4d2fc405ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEwOTEzNw==", "url": "https://github.com/realm/realm-java/pull/6970#discussion_r446109137", "bodyText": "We need it, only one App instance is allowed and setUp() is already creating one, if we don't remove we would not be able to create an App with an encryption key.\nI don't like it neither, but because of we cannot control if setUp is applied or not (I didn't find a solution), we need to do this.\nWe could although move the test case into another test class.", "author": "clementetb", "createdAt": "2020-06-26T10:44:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4NjcwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjExMTA2Ng==", "url": "https://github.com/realm/realm-java/pull/6970#discussion_r446111066", "bodyText": "Ah yeah. That make sense. We are setting one up in the setUp method already \ud83d\udc4d", "author": "cmelchior", "createdAt": "2020-06-26T10:49:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4NjcwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4Njk1MQ==", "url": "https://github.com/realm/realm-java/pull/6970#discussion_r446086951", "bodyText": "Should and the Realm.init should be done in setUp already?", "author": "cmelchior", "createdAt": "2020-06-26T09:54:47Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/AppTests.kt", "diffHunk": "@@ -265,4 +267,25 @@ class AppTests {\n         assertEquals(registry, app.getFunctions(user, registry).defaultCodecRegistry)\n     }\n \n+    @Test()\n+    fun encryption() {\n+        tearDown()\n+\n+        val context = InstrumentationRegistry.getInstrumentation().targetContext", "originalCommit": "8da08139439cbc9c5eb671478de5fd4d2fc405ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjExMTM3Nw==", "url": "https://github.com/realm/realm-java/pull/6970#discussion_r446111377", "bodyText": "Given the above. It would probably make sense to add a comment about why this is needed", "author": "cmelchior", "createdAt": "2020-06-26T10:49:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4Njk1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4NzQ4NQ==", "url": "https://github.com/realm/realm-java/pull/6970#discussion_r446087485", "bodyText": "Didn't know you could do this. Nice \ud83d\udc4d", "author": "cmelchior", "createdAt": "2020-06-26T09:55:49Z", "path": "realm/realm-library/src/main/cpp/io_realm_mongodb_App.cpp", "diffHunk": "@@ -133,10 +135,16 @@ JNIEXPORT jlong JNICALL Java_io_realm_mongodb_App_nativeCreate(JNIEnv* env, jobj\n \n         SyncClientConfig client_config;\n         client_config.base_file_path = base_file_path;\n-        client_config.metadata_mode = SyncManager::MetadataMode::NoEncryption;\n         client_config.user_agent_binding_info = user_agent_binding_info;\n         client_config.user_agent_application_info = user_agent_application_info;\n \n+        if(j_encryption_key == nullptr){\n+            client_config.metadata_mode = SyncManager::MetadataMode::NoEncryption;\n+        } else {\n+            client_config.metadata_mode = SyncManager::MetadataMode::Encryption;\n+            client_config.custom_encryption_key = encryption_key.transform<std::vector<char>>();", "originalCommit": "8da08139439cbc9c5eb671478de5fd4d2fc405ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4OTExNQ==", "url": "https://github.com/realm/realm-java/pull/6970#discussion_r446089115", "bodyText": "I would also add a check to ensure the file already exists: assertTrue(File(config.path).exists())", "author": "cmelchior", "createdAt": "2020-06-26T09:59:15Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/AppTests.kt", "diffHunk": "@@ -265,4 +267,25 @@ class AppTests {\n         assertEquals(registry, app.getFunctions(user, registry).defaultCodecRegistry)\n     }\n \n+    @Test()\n+    fun encryption() {\n+        tearDown()\n+\n+        val context = InstrumentationRegistry.getInstrumentation().targetContext\n+\n+        Realm.init(context)\n+        app = TestApp(customizeConfig = {\n+            it.encryptionKey(TestHelper.getRandomKey())\n+        })\n+\n+        val metadataDir = File(context.filesDir, \"realm-object-server/io.realm.object-server-utility/metadata/\")\n+        val config = RealmConfiguration.Builder()\n+                .name(\"sync_metadata.realm\")\n+                .directory(metadataDir)\n+                .build()\n+", "originalCommit": "8da08139439cbc9c5eb671478de5fd4d2fc405ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "513e5b9af7fccbbef954317ee55526ebef5dffd3", "url": "https://github.com/realm/realm-java/commit/513e5b9af7fccbbef954317ee55526ebef5dffd3", "message": "Add modifications as suggested in PR", "committedDate": "2020-06-26T10:54:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI1MjUwOQ==", "url": "https://github.com/realm/realm-java/pull/6970#discussion_r446252509", "bodyText": "We should create an issue about moving this to a package level annotation instead of only here. Generally all our public API should be non-null by default to play nicer with Kotlin.\nThis is fine for this PR though.", "author": "cmelchior", "createdAt": "2020-06-26T15:26:24Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/AppConfiguration.java", "diffHunk": "@@ -294,7 +295,7 @@ public Builder(String appId) {\n          * @param key a 64 byte encryption key.\n          * @throws IllegalArgumentException if the key is not 64 bytes long.\n          */\n-        public Builder encryptionKey(byte[] key) {\n+        public Builder encryptionKey(@ParametersAreNonnullByDefault byte[] key) {", "originalCommit": "513e5b9af7fccbbef954317ee55526ebef5dffd3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}