{"pr_number": 7220, "pr_title": "Fixing annotation processor to safely check for embedded classes", "pr_createdAt": "2020-11-27T16:58:51Z", "pr_url": "https://github.com/realm/realm-java/pull/7220", "timeline": [{"oid": "100d8d0e4355593062721e425fc0efcc0870e3c9", "url": "https://github.com/realm/realm-java/commit/100d8d0e4355593062721e425fc0efcc0870e3c9", "message": "Fixes https://github.com/realm/realm-java/issues/7213", "committedDate": "2020-11-27T16:51:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcyMzcwNw==", "url": "https://github.com/realm/realm-java/pull/7220#discussion_r531723707", "bodyText": "Suggested change", "author": "rorbech", "createdAt": "2020-11-27T18:18:10Z", "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt", "diffHunk": "@@ -2410,5 +2407,39 @@ class RealmProxyClassGenerator(private val processingEnvironment: ProcessingEnvi\n             }\n             return count\n         }\n+\n+    }\n+\n+    // Returns whether a type of a  Realm field is embedded or not.\n+    // If the type class is part of this processing round then lookup the class metadata from 'classCollection'\n+    // then invoke 'embedded' property, Otherwise the class might not be present within the 'classCollection' because it was\n+    // processed from another module for example, then use the compiler tool api to find out if it was annotated with 'embedded'\n+    // the second method could be slightly slower this is why we default to the first appraoch.\n+    private fun isFieldTypeEmbedded(type: TypeMirror) : Boolean  {\n+        val fieldType = QualifiedClassName(type)\n+        val fieldTypeMetaData: ClassMetaData? = classCollection.getClassFromQualifiedNameOrNull(fieldType)\n+        return fieldTypeMetaData?.embedded ?: type.isEmbedded()\n+    }\n+", "originalCommit": "100d8d0e4355593062721e425fc0efcc0870e3c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcyNjIzNg==", "url": "https://github.com/realm/realm-java/pull/7220#discussion_r531726236", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Returns whether a type of a  Realm field is embedded or not.\n          \n          \n            \n                // If the type class is part of this processing round then lookup the class metadata from 'classCollection'\n          \n          \n            \n                // then invoke 'embedded' property, Otherwise the class might not be present within the 'classCollection' because it was\n          \n          \n            \n                // processed from another module for example, then use the compiler tool api to find out if it was annotated with 'embedded'\n          \n          \n            \n                // the second method could be slightly slower this is why we default to the first appraoch.\n          \n          \n            \n                // Returns whether a type of a Realm field is embedded or not.\n          \n          \n            \n                // For types which are part of this processing round we can look it up immediately from \n          \n          \n            \n                // the metadata in the `classCollection`. For types defined in other modules we will \n          \n          \n            \n                // have to use the slower approach of inspecting the `embedded` property of the\n          \n          \n            \n                // RealmClass annotation using the compiler tool api.", "author": "rorbech", "createdAt": "2020-11-27T18:27:52Z", "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt", "diffHunk": "@@ -2410,5 +2407,39 @@ class RealmProxyClassGenerator(private val processingEnvironment: ProcessingEnvi\n             }\n             return count\n         }\n+\n+    }\n+\n+    // Returns whether a type of a  Realm field is embedded or not.\n+    // If the type class is part of this processing round then lookup the class metadata from 'classCollection'\n+    // then invoke 'embedded' property, Otherwise the class might not be present within the 'classCollection' because it was\n+    // processed from another module for example, then use the compiler tool api to find out if it was annotated with 'embedded'\n+    // the second method could be slightly slower this is why we default to the first appraoch.", "originalCommit": "100d8d0e4355593062721e425fc0efcc0870e3c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcyNjQwMQ==", "url": "https://github.com/realm/realm-java/pull/7220#discussion_r531726401", "bodyText": "Suggested change", "author": "rorbech", "createdAt": "2020-11-27T18:28:36Z", "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt", "diffHunk": "@@ -2032,9 +2030,9 @@ class RealmProxyClassGenerator(private val processingEnvironment: ProcessingEnvi\n             emitEmptyLine()\n         }\n     }\n-   \n \n-   \n+\n+", "originalCommit": "100d8d0e4355593062721e425fc0efcc0870e3c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTczMDk2Mw==", "url": "https://github.com/realm/realm-java/pull/7220#discussion_r531730963", "bodyText": "Nice \ud83d\udc4d", "author": "cmelchior", "createdAt": "2020-11-27T18:46:53Z", "path": "realm/realm-annotations-processor/build.gradle", "diffHunk": "@@ -15,15 +15,16 @@ dependencies {\n     implementation \"io.realm:realm-annotations:${version}\"\n     implementation \"org.mongodb:bson:${properties.getProperty('BSON_DEPENDENCY')}\"\n     implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version\"\n+    implementation files(Jvm.current().toolsJar)", "originalCommit": "100d8d0e4355593062721e425fc0efcc0870e3c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTczMTUzMQ==", "url": "https://github.com/realm/realm-java/pull/7220#discussion_r531731531", "bodyText": "Should we break after this?", "author": "cmelchior", "createdAt": "2020-11-27T18:49:20Z", "path": "realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt", "diffHunk": "@@ -2410,5 +2407,39 @@ class RealmProxyClassGenerator(private val processingEnvironment: ProcessingEnvi\n             }\n             return count\n         }\n+\n+    }\n+\n+    // Returns whether a type of a  Realm field is embedded or not.\n+    // If the type class is part of this processing round then lookup the class metadata from 'classCollection'\n+    // then invoke 'embedded' property, Otherwise the class might not be present within the 'classCollection' because it was\n+    // processed from another module for example, then use the compiler tool api to find out if it was annotated with 'embedded'\n+    // the second method could be slightly slower this is why we default to the first appraoch.\n+    private fun isFieldTypeEmbedded(type: TypeMirror) : Boolean  {\n+        val fieldType = QualifiedClassName(type)\n+        val fieldTypeMetaData: ClassMetaData? = classCollection.getClassFromQualifiedNameOrNull(fieldType)\n+        return fieldTypeMetaData?.embedded ?: type.isEmbedded()\n+    }\n+\n+\n+    private fun TypeMirror.isEmbedded() : Boolean {\n+        var isEmbedded = false\n+\n+        if (this is Type.ClassType) {\n+            val declarationAttributes: com.sun.tools.javac.util.List<Attribute.Compound>? = tsym.metadata?.declarationAttributes\n+            if (declarationAttributes != null) {\n+                for (attribute: Attribute.Compound in declarationAttributes) {\n+                    if (attribute.type.tsym.qualifiedName.toString() == \"io.realm.annotations.RealmClass\") {\n+                        for (pair: Pair<Symbol.MethodSymbol, Attribute> in attribute.values) {\n+                            if (pair.fst.name.toString() == \"embedded\") {\n+                                isEmbedded = pair.snd.value as Boolean", "originalCommit": "100d8d0e4355593062721e425fc0efcc0870e3c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTczOTQ5Mw==", "url": "https://github.com/realm/realm-java/pull/7220#discussion_r531739493", "bodyText": "yes good catch", "author": "nhachicha", "createdAt": "2020-11-27T19:23:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTczMTUzMQ=="}], "type": "inlineReview"}, {"oid": "5cd08db64ea6299da6882054bd0b87e72987582c", "url": "https://github.com/realm/realm-java/commit/5cd08db64ea6299da6882054bd0b87e72987582c", "message": "Update realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt\n\nCo-authored-by: Claus R\u00f8rbech <claus.rorbech@gmail.com>", "committedDate": "2020-11-27T19:22:31Z", "type": "commit"}, {"oid": "286fa7f34da3a48ae06fed42634cbd912371e01e", "url": "https://github.com/realm/realm-java/commit/286fa7f34da3a48ae06fed42634cbd912371e01e", "message": "Update realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt\n\nCo-authored-by: Claus R\u00f8rbech <claus.rorbech@gmail.com>", "committedDate": "2020-11-27T19:23:02Z", "type": "commit"}, {"oid": "f8cbd1186b5ec5ec404af0255a2305dfd77c705b", "url": "https://github.com/realm/realm-java/commit/f8cbd1186b5ec5ec404af0255a2305dfd77c705b", "message": "Update realm/realm-annotations-processor/src/main/java/io/realm/processor/RealmProxyClassGenerator.kt\n\nCo-authored-by: Claus R\u00f8rbech <claus.rorbech@gmail.com>", "committedDate": "2020-11-27T19:23:08Z", "type": "commit"}, {"oid": "e2a76cfc0dd8972da7d9d8a685a16a334d269fa3", "url": "https://github.com/realm/realm-java/commit/e2a76cfc0dd8972da7d9d8a685a16a334d269fa3", "message": "PR feedback", "committedDate": "2020-11-27T19:28:33Z", "type": "commit"}]}