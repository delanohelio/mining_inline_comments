{"pr_number": 6953, "pr_title": "Add server API key and custom function credentials for user authentication", "pr_createdAt": "2020-06-17T16:23:47Z", "pr_url": "https://github.com/realm/realm-java/pull/6953", "timeline": [{"oid": "0423969216cde1b9bc28a6dac2dcedfa0cb875ef", "url": "https://github.com/realm/realm-java/commit/0423969216cde1b9bc28a6dac2dcedfa0cb875ef", "message": "Added support for server api keys and custom functions as valid credentials", "committedDate": "2020-06-17T13:25:36Z", "type": "commit"}, {"oid": "979ede201c7c3f280b07bb2fd8737f509fc0cba7", "url": "https://github.com/realm/realm-java/commit/979ede201c7c3f280b07bb2fd8737f509fc0cba7", "message": "Updated OS pointer", "committedDate": "2020-06-17T13:39:21Z", "type": "commit"}, {"oid": "1ebebd897c1147102201981ffb112c6ddfcc4979", "url": "https://github.com/realm/realm-java/commit/1ebebd897c1147102201981ffb112c6ddfcc4979", "message": "Fixed breaking changes after updating with v10", "committedDate": "2020-06-17T13:53:26Z", "type": "commit"}, {"oid": "1e289c7ed328275b75cce0beea81424bf494e09c", "url": "https://github.com/realm/realm-java/commit/1e289c7ed328275b75cce0beea81424bf494e09c", "message": "Updated OS pointer", "committedDate": "2020-06-17T16:07:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5NDI5NQ==", "url": "https://github.com/realm/realm-java/pull/6953#discussion_r441994295", "bodyText": "This should probably be removed unless you reset it to WARN in tearDown. Otherwise it will impact all other tests running after this.", "author": "cmelchior", "createdAt": "2020-06-18T06:25:11Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/CredentialsTests.kt", "diffHunk": "@@ -30,13 +35,15 @@ import kotlin.test.assertFailsWith\n class CredentialsTests {\n \n     private lateinit var app: App\n-\n+    private lateinit var admin: ServerAdmin\n \n     companion object {\n+\n         @BeforeClass\n         @JvmStatic\n         fun setUp() {\n             Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+            RealmLog.setLevel(LogLevel.DEBUG)", "originalCommit": "1e289c7ed328275b75cce0beea81424bf494e09c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwNTg1MQ==", "url": "https://github.com/realm/realm-java/pull/6953#discussion_r442005851", "bodyText": "I always forget to remove this sucker... :-(", "author": "edualonso", "createdAt": "2020-06-18T06:53:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5NDI5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA1NDk1Ng==", "url": "https://github.com/realm/realm-java/pull/6953#discussion_r442054956", "bodyText": "Maybe we could clear it in app.close() but I do not know if there would be a need to set it across all tests. If so you have to set it back to the level that was before.", "author": "rorbech", "createdAt": "2020-06-18T08:25:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5NDI5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5NDg3MQ==", "url": "https://github.com/realm/realm-java/pull/6953#discussion_r441994871", "bodyText": "This looks wrong... SERVER_API_KEY should be the test below. This should be API_KEY. A bit concerning if the test actually pass? \ud83e\udd14", "author": "cmelchior", "createdAt": "2020-06-18T06:26:39Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/CredentialsTests.kt", "diffHunk": "@@ -51,15 +58,21 @@ class CredentialsTests {\n     @Test\n     fun anonymous() {\n         val creds = Credentials.anonymous()\n-        assertEquals(\"anon-user\", creds.identityProvider.id)\n+        assertEquals(Credentials.IdentityProvider.ANONYMOUS.id, creds.identityProvider.id)\n         assertTrue(creds.asJson().contains(\"anon-user\")) // Treat the JSON as an opaque value.\n     }\n \n-    @Ignore(\"FIXME: Awaiting ObjectStore support\")\n     @Test\n     fun apiKey() {\n         val creds = Credentials.apiKey(\"token\")\n-        assertEquals(\"anon-user\", creds.identityProvider.id)\n+        assertEquals(Credentials.IdentityProvider.SERVER_API_KEY.id, creds.identityProvider.id)", "originalCommit": "1e289c7ed328275b75cce0beea81424bf494e09c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwNjQ1Nw==", "url": "https://github.com/realm/realm-java/pull/6953#discussion_r442006457", "bodyText": "Hmmm, this smells like a copy-paste error to me, but you're right, looks odd. I'll investigate further.", "author": "edualonso", "createdAt": "2020-06-18T06:54:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5NDg3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAxMTk4Ng==", "url": "https://github.com/realm/realm-java/pull/6953#discussion_r442011986", "bodyText": "Ahhh, I know why. It's because API_KEY and SERVER_API_KEY have the same id value as per the OS implementation:\nIdentityProvider const IdentityProviderUserAPIKey = \"api-key\";\nIdentityProvider const IdentityProviderServerAPIKey = \"api-key\";\n\n\ud83e\udd37\nI remember I mentioned it and we agreed it was a bit silly, but we needed to keep it separate because of the OS implementation, although being technically the same thing, treats them as two different identity providers. That's why the test passes.", "author": "edualonso", "createdAt": "2020-06-18T07:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5NDg3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5NTY1Ng==", "url": "https://github.com/realm/realm-java/pull/6953#discussion_r441995656", "bodyText": "While this is much better. Is there a reason we need the id? Couldn't we just compare directly against the identityProvider since it is an enum. The same is true in a lot of other places", "author": "cmelchior", "createdAt": "2020-06-18T06:28:33Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/CredentialsTests.kt", "diffHunk": "@@ -82,22 +101,28 @@ class CredentialsTests {\n         assertFailsWith<IllegalArgumentException> { Credentials.apple(TestHelper.getNull()) }\n     }\n \n-    @Ignore(\"FIXME: Awaiting ObjectStore support\")\n     @Test\n     fun customFunction() {\n-        TODO()\n+        val mail = \"myfakemail@mongodb.com\"\n+        val id = 666\n+        val creds = mapOf(\n+                \"mail\" to \"myfakemail@mongodb.com\",\n+                \"id\" to 666\n+        ).let { Credentials.customFunction(Document(it)) }\n+        assertEquals(Credentials.IdentityProvider.CUSTOM_FUNCTION.id, creds.identityProvider.id)\n+        assertTrue(creds.asJson().contains(mail))\n+        assertTrue(creds.asJson().contains(id.toString()))\n     }\n \n-    @Ignore(\"FIXME: Awaiting ObjectStore support\")\n     @Test\n     fun customFunction_invalidInput() {\n-        TODO()\n+        assertFailsWith<IllegalArgumentException> { Credentials.customFunction(null) }\n     }\n \n     @Test\n     fun emailPassword() {\n         val creds = Credentials.emailPassword(\"foo@bar.com\", \"secret\")\n-        assertEquals(\"local-userpass\", creds.identityProvider.id)\n+        assertEquals(Credentials.IdentityProvider.EMAIL_PASSWORD.id, creds.identityProvider.id)", "originalCommit": "1e289c7ed328275b75cce0beea81424bf494e09c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5Njg5MA==", "url": "https://github.com/realm/realm-java/pull/6953#discussion_r441996890", "bodyText": "Not sure how our equals method works, but it seems a bit weird that a logged out user is equals to a logged in user... So we probably need to revist that equals method... Comparing the user id should work though", "author": "cmelchior", "createdAt": "2020-06-18T06:31:37Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/CredentialsTests.kt", "diffHunk": "@@ -151,33 +176,43 @@ class CredentialsTests {\n         assertFailsWith<IllegalArgumentException> { Credentials.jwt(TestHelper.getNull()) }\n     }\n \n-    fun expectErrorCode(app: App, expectedCode: ErrorCode, credentials: Credentials) {\n-        try {\n-            app.login(credentials)\n-            fail()\n-        } catch (error: AppException) {\n-            assertEquals(expectedCode, error.errorCode)\n-        }\n-    }\n-\n     @Test\n     fun loginUsingCredentials() {\n         app = TestApp()\n+        admin = ServerAdmin()\n+\n         Credentials.IdentityProvider.values().forEach { provider ->\n-            when(provider) {\n+            when (provider) {\n                 Credentials.IdentityProvider.ANONYMOUS -> {\n                     val user = app.login(Credentials.anonymous())\n                     assertNotNull(user)\n                 }\n                 Credentials.IdentityProvider.API_KEY -> {\n-                    // FIXME: Wait for API Key support in OS\n-//                        val user: User = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n-//                        val key: UserApiKey = app.apiKeyAuthProvider.createApiKey(\"my-key\");\n-//                        val apiKeyUser = app.login(Credentials.apiKey(key.value!!))\n-//                        assertNotNull(apiKeyUser)\n+                    // Log in, create an API key, log out, log in with the key, compare users\n+                    val user: User = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+                    val key: UserApiKey = user.apiKeyAuth.createApiKey(\"my-key\");\n+                    user.logOut()\n+                    val apiKeyUser = app.login(Credentials.apiKey(key.value!!))\n+                    assertEquals(user, apiKeyUser)", "originalCommit": "1e289c7ed328275b75cce0beea81424bf494e09c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMzQ1Ng==", "url": "https://github.com/realm/realm-java/pull/6953#discussion_r442003456", "bodyText": "Looks like something is missing here.", "author": "cmelchior", "createdAt": "2020-06-18T06:48:27Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/Credentials.java", "diffHunk": "@@ -99,23 +116,25 @@ public static Credentials apple(String idToken) {\n     }\n \n     /**\n-     * FIXME\n+     * Creates credentials representing a remote function previously added to MongoDB Realm. The\n+     * input parameters", "originalCommit": "1e289c7ed328275b75cce0beea81424bf494e09c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwNDY3MA==", "url": "https://github.com/realm/realm-java/pull/6953#discussion_r442004670", "bodyText": "This is a bit confusing to me. I would consider either removing it completely or rewording it. Maybe to something like The document will be parsed as an argument to the remote function, so the keys must match the format the function expects.", "author": "cmelchior", "createdAt": "2020-06-18T06:51:04Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/Credentials.java", "diffHunk": "@@ -99,23 +116,25 @@ public static Credentials apple(String idToken) {\n     }\n \n     /**\n-     * FIXME\n+     * Creates credentials representing a remote function previously added to MongoDB Realm. The\n+     * input parameters\n      * <p>\n      * This provider must be enabled on MongoDB Realm to work.\n      *\n+     * @param arguments {@link Document} containing the values passed to the remote function. The\n+     *                  keys must match the names given to the remote function parameters.", "originalCommit": "1e289c7ed328275b75cce0beea81424bf494e09c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3ac946045c9a5e01c752b453dbb97d198433af18", "url": "https://github.com/realm/realm-java/commit/3ac946045c9a5e01c752b453dbb97d198433af18", "message": "Added identity provider to OsAppCredential to distinguish between user and server API keys, as the value is the same for both in the OS but are treated as separate providers. Cleaned up some comments. Removed unnecessary log in tests plus added comparison at enum level", "committedDate": "2020-06-18T08:46:04Z", "type": "commit"}, {"oid": "d314637f4c55db690b2f43926ba29db3ec4a65f4", "url": "https://github.com/realm/realm-java/commit/d314637f4c55db690b2f43926ba29db3ec4a65f4", "message": "Fixed typo in jwt creds test and changed comparison of users to their ids instead of the whole object", "committedDate": "2020-06-18T09:00:31Z", "type": "commit"}, {"oid": "f48170a3501be8cfc5bc7fb1940acdcc366836d4", "url": "https://github.com/realm/realm-java/commit/f48170a3501be8cfc5bc7fb1940acdcc366836d4", "message": "Updated OS pointer to latest v10", "committedDate": "2020-06-18T09:15:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5NDM3Nw==", "url": "https://github.com/realm/realm-java/pull/6953#discussion_r442294377", "bodyText": "Good idea \ud83d\udc4d , but this checking should IMO be moved to AppCredentials. The Os<X> classes should generally just expose the Os interface and then we do the mapping on the \"upper\" layer, i.e. AppCredentials", "author": "cmelchior", "createdAt": "2020-06-18T15:00:44Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsAppCredentials.java", "diffHunk": "@@ -24,54 +30,70 @@\n \n     private static final int TYPE_ANONYMOUS = 1;\n     private static final int TYPE_API_KEY = 2;\n-    private static final int TYPE_APPLE = 3;\n-    private static final int TYPE_CUSTOM_FUNCTION = 4;\n-    private static final int TYPE_EMAIL_PASSWORD = 5;\n-    private static final int TYPE_FACEBOOK = 6;\n-    private static final int TYPE_GOOGLE = 7;\n-    private static final int TYPE_JWT = 8;\n+    private static final int TYPE_SERVER_API_KEY = 3;\n+    private static final int TYPE_APPLE = 4;\n+    private static final int TYPE_CUSTOM_FUNCTION = 5;\n+    private static final int TYPE_EMAIL_PASSWORD = 6;\n+    private static final int TYPE_FACEBOOK = 7;\n+    private static final int TYPE_GOOGLE = 8;\n+    private static final int TYPE_JWT = 9;\n     private static final long finalizerPtr = nativeGetFinalizerMethodPtr();\n \n     public static OsAppCredentials anonymous() {\n-        return new OsAppCredentials(nativeCreate(TYPE_ANONYMOUS));\n+        return new OsAppCredentials(nativeCreate(TYPE_ANONYMOUS), Credentials.IdentityProvider.ANONYMOUS);\n     }\n \n     public static OsAppCredentials apiKey(String key) {\n-        return new OsAppCredentials(nativeCreate(TYPE_API_KEY, key));\n+        return new OsAppCredentials(nativeCreate(TYPE_API_KEY, key), Credentials.IdentityProvider.API_KEY);\n+    }\n+\n+    public static OsAppCredentials serverApiKey(String key) {\n+        return new OsAppCredentials(nativeCreate(TYPE_SERVER_API_KEY, key), Credentials.IdentityProvider.SERVER_API_KEY);\n     }\n \n     public static OsAppCredentials apple(String idToken) {\n-        return new OsAppCredentials(nativeCreate(TYPE_APPLE, idToken));\n+        return new OsAppCredentials(nativeCreate(TYPE_APPLE, idToken), Credentials.IdentityProvider.APPLE);\n     }\n \n-    public static OsAppCredentials customFunction(String functionName, Object... args) {\n-        return new OsAppCredentials(nativeCreate(TYPE_CUSTOM_FUNCTION, functionName, args));\n+    public static OsAppCredentials customFunction(Document args) {\n+        String encodedArgs = JniBsonProtocol.encode(args, AppConfiguration.DEFAULT_BSON_CODEC_REGISTRY);\n+        return new OsAppCredentials(nativeCreate(TYPE_CUSTOM_FUNCTION, encodedArgs), Credentials.IdentityProvider.CUSTOM_FUNCTION);\n     }\n \n     public static OsAppCredentials emailPassword(String email, String password) {\n-        return new OsAppCredentials(nativeCreate(TYPE_EMAIL_PASSWORD, email, password));\n+        return new OsAppCredentials(nativeCreate(TYPE_EMAIL_PASSWORD, email, password), Credentials.IdentityProvider.EMAIL_PASSWORD);\n     }\n \n     public static OsAppCredentials facebook(String accessToken) {\n-        return new OsAppCredentials(nativeCreate(TYPE_FACEBOOK, accessToken));\n+        return new OsAppCredentials(nativeCreate(TYPE_FACEBOOK, accessToken), Credentials.IdentityProvider.FACEBOOK);\n     }\n \n     public static OsAppCredentials google(String whatToCallThisToken) {\n-        return new OsAppCredentials(nativeCreate(TYPE_GOOGLE, whatToCallThisToken));\n+        return new OsAppCredentials(nativeCreate(TYPE_GOOGLE, whatToCallThisToken), Credentials.IdentityProvider.GOOGLE);\n     }\n \n     public static OsAppCredentials jwt(String jwtToken) {\n-        return new OsAppCredentials(nativeCreate(TYPE_JWT, jwtToken));\n+        return new OsAppCredentials(nativeCreate(TYPE_JWT, jwtToken), Credentials.IdentityProvider.JWT);\n     }\n \n     private final long nativePtr;\n+    private final Credentials.IdentityProvider identityProvider;\n \n-    private OsAppCredentials(long nativePtr) {\n+    private OsAppCredentials(long nativePtr, Credentials.IdentityProvider identityProvider) {\n         this.nativePtr = nativePtr;\n+        this.identityProvider = identityProvider;\n     }\n \n-    public String getProvider() {\n-        return nativeGetProvider(nativePtr);\n+    public Credentials.IdentityProvider getProvider() {\n+        String nativeProvider = nativeGetProvider(nativePtr);\n+        String id = identityProvider.getId();\n+\n+        // Sanity check - ensure nothing changed in the OS\n+        if (nativeProvider.equals(id)) {\n+            return identityProvider;\n+        } else {\n+            throw new AssertionError(\"The provider from the Object Store differs from the one in Realm.\");", "originalCommit": "f48170a3501be8cfc5bc7fb1940acdcc366836d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5NDQyMQ==", "url": "https://github.com/realm/realm-java/pull/6953#discussion_r442294421", "bodyText": "I think it would be cleaner if Credentials.IdentityProvider.ANONYMOUS was defined in the factory constructor of AppCredentials. OsAppCredentials is there to map to the underlying type, but us making a shortcut is not the responsibility of the Os class but our own AppCredentials. The same everywhere else.", "author": "cmelchior", "createdAt": "2020-06-18T15:00:48Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsAppCredentials.java", "diffHunk": "@@ -24,54 +30,70 @@\n \n     private static final int TYPE_ANONYMOUS = 1;\n     private static final int TYPE_API_KEY = 2;\n-    private static final int TYPE_APPLE = 3;\n-    private static final int TYPE_CUSTOM_FUNCTION = 4;\n-    private static final int TYPE_EMAIL_PASSWORD = 5;\n-    private static final int TYPE_FACEBOOK = 6;\n-    private static final int TYPE_GOOGLE = 7;\n-    private static final int TYPE_JWT = 8;\n+    private static final int TYPE_SERVER_API_KEY = 3;\n+    private static final int TYPE_APPLE = 4;\n+    private static final int TYPE_CUSTOM_FUNCTION = 5;\n+    private static final int TYPE_EMAIL_PASSWORD = 6;\n+    private static final int TYPE_FACEBOOK = 7;\n+    private static final int TYPE_GOOGLE = 8;\n+    private static final int TYPE_JWT = 9;\n     private static final long finalizerPtr = nativeGetFinalizerMethodPtr();\n \n     public static OsAppCredentials anonymous() {\n-        return new OsAppCredentials(nativeCreate(TYPE_ANONYMOUS));\n+        return new OsAppCredentials(nativeCreate(TYPE_ANONYMOUS), Credentials.IdentityProvider.ANONYMOUS);", "originalCommit": "f48170a3501be8cfc5bc7fb1940acdcc366836d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d2ba5cc80ebf2d24d69b6c8735313c4d8ee58a8b", "url": "https://github.com/realm/realm-java/commit/d2ba5cc80ebf2d24d69b6c8735313c4d8ee58a8b", "message": "Move identity provider from OS to API level", "committedDate": "2020-06-19T10:15:45Z", "type": "commit"}, {"oid": "269dd00e01d892ccbf53360fa9b78fbac4dfb31e", "url": "https://github.com/realm/realm-java/commit/269dd00e01d892ccbf53360fa9b78fbac4dfb31e", "message": "Merge branch 'v10' into el/credentials-api-key", "committedDate": "2020-06-19T10:47:01Z", "type": "commit"}]}