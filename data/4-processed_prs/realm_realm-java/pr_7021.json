{"pr_number": 7021, "pr_title": "Finish RealmUser, Javadoc and tests", "pr_createdAt": "2020-08-11T08:20:48Z", "pr_url": "https://github.com/realm/realm-java/pull/7021", "timeline": [{"oid": "3c20da69240da49988c89ce606e6d1afd5ec71e2", "url": "https://github.com/realm/realm-java/commit/3c20da69240da49988c89ce606e6d1afd5ec71e2", "message": "Add missing tests for RealmUser.", "committedDate": "2020-08-11T08:12:44Z", "type": "commit"}, {"oid": "99634d4e728163db29c00847444797e01eba58ec", "url": "https://github.com/realm/realm-java/commit/99634d4e728163db29c00847444797e01eba58ec", "message": "Remove unused attribute", "committedDate": "2020-08-11T08:14:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQyMDc1MQ==", "url": "https://github.com/realm/realm-java/pull/7021#discussion_r468420751", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws IllegalStateException if no user is currently logged in.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @throws IllegalStateException if no user is currently logged in.", "author": "rorbech", "createdAt": "2020-08-11T08:41:20Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/User.java", "diffHunk": "@@ -362,8 +367,8 @@ public boolean isLoggedIn() {\n      * must not have been used by another user.\n      *\n      * @param credentials the credentials to link with the current user.\n-     * @throws IllegalStateException if no user is currently logged in.\n      * @return the {@link User} the credentials were linked to.\n+     * @throws IllegalStateException if no user is currently logged in.", "originalCommit": "99634d4e728163db29c00847444797e01eba58ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQyMTAwMA==", "url": "https://github.com/realm/realm-java/pull/7021#discussion_r468421000", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                    always happen on the same thread as this method is called on.\n          \n          \n            \n                 *                    always happen on the same thread as this method is called on.\n          \n          \n            \n                 *", "author": "rorbech", "createdAt": "2020-08-11T08:41:44Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/User.java", "diffHunk": "@@ -399,8 +404,8 @@ protected User mapSuccess(Object result) {\n      * must not have been used by another user.\n      *\n      * @param credentials the credentials to link with the current user.\n-     * @param callback callback when user identities has been linked or it failed. The callback will\n-     * always happen on the same thread as this method is called on.\n+     * @param callback    callback when user identities has been linked or it failed. The callback will\n+     *                    always happen on the same thread as this method is called on.", "originalCommit": "99634d4e728163db29c00847444797e01eba58ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQyMTM4NA==", "url": "https://github.com/realm/realm-java/pull/7021#discussion_r468421384", "bodyText": "Does it anything to test with multiple users?", "author": "rorbech", "createdAt": "2020-08-11T08:42:24Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/UserTests.kt", "diffHunk": "@@ -412,9 +390,20 @@ class UserTests {\n         user.logOut()\n     }\n \n-    // FIXME\n-    @Ignore(\"Not implemented yet\")\n+    @Test\n     fun isLoggedIn() {\n+        var anonUser = app.login(Credentials.anonymous())\n+        assertTrue(anonUser.isLoggedIn)\n+\n+        anonUser.logOut()\n+        assertFalse(anonUser.isLoggedIn)\n+\n+\n+        val user: User = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")", "originalCommit": "99634d4e728163db29c00847444797e01eba58ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ5ODU4Mg==", "url": "https://github.com/realm/realm-java/pull/7021#discussion_r468498582", "bodyText": "Have modified the test case so we test with multiple users too", "author": "clementetb", "createdAt": "2020-08-11T11:03:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQyMTM4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUwNDQzMQ==", "url": "https://github.com/realm/realm-java/pull/7021#discussion_r468504431", "bodyText": "Sorry for not being precise. I was just wondering why you both tested with anonymous and ordinary user. Isn't it redundant. But I guess does not hurt. Testing that the state is correct for overlapping session sounds like a good test case thought, so please keep it.", "author": "rorbech", "createdAt": "2020-08-11T11:16:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQyMTM4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQyMjUwNA==", "url": "https://github.com/realm/realm-java/pull/7021#discussion_r468422504", "bodyText": "Consider using variables for all these constants that you need to reference for assertion in the tests.", "author": "rorbech", "createdAt": "2020-08-11T08:44:12Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/UserMetadataTests.kt", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.internal.objectstore.OsJavaNetworkTransport\n+import io.realm.mongodb.*\n+import io.realm.rule.BlockingLooperThread\n+import org.junit.After\n+import org.junit.Assert.assertEquals\n+import org.junit.Assert.fail\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+class UserMetadataTests {\n+\n+    val looperThread = BlockingLooperThread()\n+\n+    private lateinit var app: App\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+\n+        val successHeaders: Map<String, String> = mapOf(Pair(\"Content-Type\", \"application/json\"))\n+        app = TestApp(object : OsJavaNetworkTransport() {\n+            override fun sendRequest(method: String, url: String, timeoutMs: Long, headers: MutableMap<String, String>, body: String): Response {\n+                var result = \"\"\n+                if (url.endsWith(\"/providers/${Credentials.IdentityProvider.EMAIL_PASSWORD.id}/login\")) {\n+                    result = \"\"\"\n+                        {\n+                            \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjVlNjk2M2RmYWZlYTYzMjU0NTgxYzAyNiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1ODM5NjcyMDgsImlhdCI6MTU4Mzk2NTQwOCwiaXNzIjoiNWU2OTY0ZTBhZmVhNjMyNTQ1ODFjMWEzIiwic3RpdGNoX2RldklkIjoiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwIiwic3RpdGNoX2RvbWFpbklkIjoiNWU2OTYzZGVhZmVhNjMyNTQ1ODFjMDI1Iiwic3ViIjoiNWU2OTY0ZTBhZmVhNjMyNTQ1ODFjMWExIiwidHlwIjoiYWNjZXNzIn0.J4mp8LnlsxTQRV_7W2Er4qY0tptR76PJGG1k6HSMmUYqgfpJC2Fnbcf1VCoebzoNolH2-sr8AHDVBBCyjxRjqoY9OudFHmWZKmhDV1ysxPP4XmID0nUuN45qJSO8QEAqoOmP1crXjrUZWedFw8aaCZE-bxYfvcDHyjBcbNKZqzawwUw2PyTOlrNjgs01k2J4o5a5XzYkEsJuzr4_8UqKW6zXvYj24UtqnqoYatW5EzpX63m2qig8AcBwPK4ZHb5wEEUdf4QZxkRY5QmTgRHP8SSqVUB_mkHgKaizC_tSB3E0BekaDfLyWVC1taAstXJNfzgFtLI86AzuXS2dCiCfqQ\",", "originalCommit": "99634d4e728163db29c00847444797e01eba58ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQyNTY1Mw==", "url": "https://github.com/realm/realm-java/pull/7021#discussion_r468425653", "bodyText": "All of these are @Nullable, we should probably also test that case?", "author": "cmelchior", "createdAt": "2020-08-11T08:49:38Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/UserMetadataTests.kt", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.internal.objectstore.OsJavaNetworkTransport\n+import io.realm.mongodb.*\n+import io.realm.rule.BlockingLooperThread\n+import org.junit.After\n+import org.junit.Assert.assertEquals\n+import org.junit.Assert.fail\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+class UserMetadataTests {\n+\n+    val looperThread = BlockingLooperThread()\n+\n+    private lateinit var app: App\n+\n+    @Before\n+    fun setUp() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+\n+        val successHeaders: Map<String, String> = mapOf(Pair(\"Content-Type\", \"application/json\"))\n+        app = TestApp(object : OsJavaNetworkTransport() {\n+            override fun sendRequest(method: String, url: String, timeoutMs: Long, headers: MutableMap<String, String>, body: String): Response {\n+                var result = \"\"\n+                if (url.endsWith(\"/providers/${Credentials.IdentityProvider.EMAIL_PASSWORD.id}/login\")) {\n+                    result = \"\"\"\n+                        {\n+                            \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjVlNjk2M2RmYWZlYTYzMjU0NTgxYzAyNiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1ODM5NjcyMDgsImlhdCI6MTU4Mzk2NTQwOCwiaXNzIjoiNWU2OTY0ZTBhZmVhNjMyNTQ1ODFjMWEzIiwic3RpdGNoX2RldklkIjoiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwIiwic3RpdGNoX2RvbWFpbklkIjoiNWU2OTYzZGVhZmVhNjMyNTQ1ODFjMDI1Iiwic3ViIjoiNWU2OTY0ZTBhZmVhNjMyNTQ1ODFjMWExIiwidHlwIjoiYWNjZXNzIn0.J4mp8LnlsxTQRV_7W2Er4qY0tptR76PJGG1k6HSMmUYqgfpJC2Fnbcf1VCoebzoNolH2-sr8AHDVBBCyjxRjqoY9OudFHmWZKmhDV1ysxPP4XmID0nUuN45qJSO8QEAqoOmP1crXjrUZWedFw8aaCZE-bxYfvcDHyjBcbNKZqzawwUw2PyTOlrNjgs01k2J4o5a5XzYkEsJuzr4_8UqKW6zXvYj24UtqnqoYatW5EzpX63m2qig8AcBwPK4ZHb5wEEUdf4QZxkRY5QmTgRHP8SSqVUB_mkHgKaizC_tSB3E0BekaDfLyWVC1taAstXJNfzgFtLI86AzuXS2dCiCfqQ\",\n+                            \"refresh_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjVlNjk2M2RmYWZlYTYzMjU0NTgxYzAyNiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1ODkxNDk0MDgsImlhdCI6MTU4Mzk2NTQwOCwic3RpdGNoX2RhdGEiOm51bGwsInN0aXRjaF9kZXZJZCI6IjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCIsInN0aXRjaF9kb21haW5JZCI6IjVlNjk2M2RlYWZlYTYzMjU0NTgxYzAyNSIsInN0aXRjaF9pZCI6IjVlNjk2NGUwYWZlYTYzMjU0NTgxYzFhMyIsInN0aXRjaF9pZGVudCI6eyJpZCI6IjVlNjk2NGUwYWZlYTYzMjU0NTgxYzFhMC1oaWF2b3ZkbmJxbGNsYXBwYnl1cmJpaW8iLCJwcm92aWRlcl90eXBlIjoiYW5vbi11c2VyIiwicHJvdmlkZXJfaWQiOiI1ZTY5NjNlMGFmZWE2MzI1NDU4MWMwNGEifSwic3ViIjoiNWU2OTY0ZTBhZmVhNjMyNTQ1ODFjMWExIiwidHlwIjoicmVmcmVzaCJ9.FhLdpmL48Mw0SyUKWuaplz3wfeS8TCO8S7I9pIJenQww9nPqQ7lIvykQxjCCtinGvsZIJKt_7R31xYCq4Jp53Nw81By79IwkXtO7VXHPsXXZG5_2xV-s0u44e85sYD5su_H-xnx03sU2piJbWJLSB8dKu3rMD4mO-S0HNXCCAty-JkYKSaM2-d_nS8MNb6k7Vfm7y69iz_uwHc-bb_1rPg7r827K6DEeEMF41Hy3Nx1kCdAUOM9-6nYv3pZSU1PFrGYi2uyTXPJ7R7HigY5IGHWd0hwONb_NUr4An2omqfvlkLEd77ut4V9m6mExFkoKzRz7shzn-IGkh3e4h7ECGA\",\n+                            \"user_id\": \"5e6964e0afea63254581c1a1\",\n+                            \"device_id\": \"000000000000000000000000\"\n+                        }            \n+                    \"\"\".trimIndent()\n+                } else if (url.endsWith(\"/auth/profile\")) {\n+                    result = \"\"\"\n+                        {\n+                            \"user_id\": \"5e6964e0afea63254581c1a1\",\n+                            \"domain_id\": \"000000000000000000000000\",\n+                            \"identities\": [\n+                                {\n+                                    \"id\": \"5e68f51ade5ba998bb17500d\",\n+                                    \"provider_type\": \"local-userpass\",\n+                                    \"provider_id\": \"000000000000000000000003\",\n+                                    \"provider_data\": {\n+                                        \"email\": \"unique_user@domain.com\"\n+                                    }\n+                                }\n+                            ],\n+                            \"data\": {\n+                                \"name\": \"NAME\",\n+                                \"email\": \"unique_user@domain.com\",\n+                                \"picture_url\": \"PICTURE_URL\",\n+                                \"first_name\": \"FIRST_NAME\",\n+                                \"last_name\": \"LAST_NAME\",\n+                                \"gender\": \"GENDER\",\n+                                \"birthday\": \"BIRTHDAY\",\n+                                \"min_age\": \"1\",\n+                                \"max_age\": \"99\"\n+                            },\n+                            \"type\": \"normal\",\n+                            \"roles\": [\n+                                {\n+                                    \"role_name\": \"GROUP_OWNER\",\n+                                    \"group_id\": \"5e68f51e087b1b33a53f56d5\"\n+                                }\n+                            ]\n+                        }\n+                    \"\"\".trimIndent()\n+                } else if (url.endsWith(\"/location\")) {\n+                    return Response.httpResponse(200, mapOf(), \"\"\"\n+                        { \"deployment_model\" : \"GLOBAL\",\n+                          \"location\": \"US-VA\", \n+                          \"hostname\": \"http://localhost:9090\",\n+                          \"ws_hostname\": \"ws://localhost:9090\"\n+                        }\n+                        \"\"\".trimIndent())\n+                } else if (url.endsWith(\"/providers/${Credentials.IdentityProvider.EMAIL_PASSWORD.id}/register\")) {\n+                    result = \"\"\n+                } else {\n+                    fail(\"Unexpected request url: $url\")\n+                }\n+                return Response.httpResponse(200, successHeaders, result)\n+            }\n+        })\n+    }\n+\n+    @After\n+    fun tearDown() {\n+        if (this::app.isInitialized) {\n+            app.close()\n+        }\n+    }\n+\n+    @Test\n+    fun getUserId() {\n+        val user: User = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+        assertEquals(\"5e6964e0afea63254581c1a1\", user.id)\n+    }\n+\n+    @Test\n+    fun getDeviceId() {\n+        val user: User = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+        assertEquals(\"000000000000000000000000\", user.deviceId)\n+    }\n+\n+    @Test\n+    fun accessToken() {\n+        val user: User = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+        assertEquals(\"eyJhbGciOiJSUzI1NiIsImtpZCI6IjVlNjk2M2RmYWZlYTYzMjU0NTgxYzAyNiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1ODM5NjcyMDgsImlhdCI6MTU4Mzk2NTQwOCwiaXNzIjoiNWU2OTY0ZTBhZmVhNjMyNTQ1ODFjMWEzIiwic3RpdGNoX2RldklkIjoiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwIiwic3RpdGNoX2RvbWFpbklkIjoiNWU2OTYzZGVhZmVhNjMyNTQ1ODFjMDI1Iiwic3ViIjoiNWU2OTY0ZTBhZmVhNjMyNTQ1ODFjMWExIiwidHlwIjoiYWNjZXNzIn0.J4mp8LnlsxTQRV_7W2Er4qY0tptR76PJGG1k6HSMmUYqgfpJC2Fnbcf1VCoebzoNolH2-sr8AHDVBBCyjxRjqoY9OudFHmWZKmhDV1ysxPP4XmID0nUuN45qJSO8QEAqoOmP1crXjrUZWedFw8aaCZE-bxYfvcDHyjBcbNKZqzawwUw2PyTOlrNjgs01k2J4o5a5XzYkEsJuzr4_8UqKW6zXvYj24UtqnqoYatW5EzpX63m2qig8AcBwPK4ZHb5wEEUdf4QZxkRY5QmTgRHP8SSqVUB_mkHgKaizC_tSB3E0BekaDfLyWVC1taAstXJNfzgFtLI86AzuXS2dCiCfqQ\",\n+                user.accessToken)\n+    }\n+\n+    @Test\n+    fun refreshToken() {\n+        val user: User = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+        assertEquals(\"eyJhbGciOiJSUzI1NiIsImtpZCI6IjVlNjk2M2RmYWZlYTYzMjU0NTgxYzAyNiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1ODkxNDk0MDgsImlhdCI6MTU4Mzk2NTQwOCwic3RpdGNoX2RhdGEiOm51bGwsInN0aXRjaF9kZXZJZCI6IjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCIsInN0aXRjaF9kb21haW5JZCI6IjVlNjk2M2RlYWZlYTYzMjU0NTgxYzAyNSIsInN0aXRjaF9pZCI6IjVlNjk2NGUwYWZlYTYzMjU0NTgxYzFhMyIsInN0aXRjaF9pZGVudCI6eyJpZCI6IjVlNjk2NGUwYWZlYTYzMjU0NTgxYzFhMC1oaWF2b3ZkbmJxbGNsYXBwYnl1cmJpaW8iLCJwcm92aWRlcl90eXBlIjoiYW5vbi11c2VyIiwicHJvdmlkZXJfaWQiOiI1ZTY5NjNlMGFmZWE2MzI1NDU4MWMwNGEifSwic3ViIjoiNWU2OTY0ZTBhZmVhNjMyNTQ1ODFjMWExIiwidHlwIjoicmVmcmVzaCJ9.FhLdpmL48Mw0SyUKWuaplz3wfeS8TCO8S7I9pIJenQww9nPqQ7lIvykQxjCCtinGvsZIJKt_7R31xYCq4Jp53Nw81By79IwkXtO7VXHPsXXZG5_2xV-s0u44e85sYD5su_H-xnx03sU2piJbWJLSB8dKu3rMD4mO-S0HNXCCAty-JkYKSaM2-d_nS8MNb6k7Vfm7y69iz_uwHc-bb_1rPg7r827K6DEeEMF41Hy3Nx1kCdAUOM9-6nYv3pZSU1PFrGYi2uyTXPJ7R7HigY5IGHWd0hwONb_NUr4An2omqfvlkLEd77ut4V9m6mExFkoKzRz7shzn-IGkh3e4h7ECGA\",\n+                user.refreshToken)\n+    }\n+\n+    @Test\n+    fun getName() {", "originalCommit": "99634d4e728163db29c00847444797e01eba58ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUwMjUwNg==", "url": "https://github.com/realm/realm-java/pull/7021#discussion_r468502506", "bodyText": "Have added those cases \ud83d\udc4c", "author": "clementetb", "createdAt": "2020-08-11T11:12:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQyNTY1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQyNzMyNw==", "url": "https://github.com/realm/realm-java/pull/7021#discussion_r468427327", "bodyText": "We should return the Credentials.IdentityProvider enum here instead of the underlying String.", "author": "cmelchior", "createdAt": "2020-08-11T08:52:27Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/User.java", "diffHunk": "@@ -237,6 +235,15 @@ public Long getMaxAge() {\n         return identities;\n     }\n \n+    /**\n+     * Returns the provider type used to log the user\n+     *\n+     * @return the provider type of the user\n+     */\n+    public String getProviderType() {", "originalCommit": "99634d4e728163db29c00847444797e01eba58ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "690a518b4393260fd4a3df0afb2b458d1b98ae3d", "url": "https://github.com/realm/realm-java/commit/690a518b4393260fd4a3df0afb2b458d1b98ae3d", "message": "Update realm/realm-library/src/objectServer/java/io/realm/mongodb/User.java\n\nCo-authored-by: Claus R\u00f8rbech <claus.rorbech@gmail.com>", "committedDate": "2020-08-11T10:35:07Z", "type": "commit"}, {"oid": "a6f33cca06c3871b2380bae775cbe02206c90989", "url": "https://github.com/realm/realm-java/commit/a6f33cca06c3871b2380bae775cbe02206c90989", "message": "Update realm/realm-library/src/objectServer/java/io/realm/mongodb/User.java\n\nCo-authored-by: Claus R\u00f8rbech <claus.rorbech@gmail.com>", "committedDate": "2020-08-11T10:35:13Z", "type": "commit"}, {"oid": "5036e655e40b2501fbd47b6f084645a5019519c4", "url": "https://github.com/realm/realm-java/commit/5036e655e40b2501fbd47b6f084645a5019519c4", "message": "Implement PR CR", "committedDate": "2020-08-11T11:12:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUzMjUwOA==", "url": "https://github.com/realm/realm-java/pull/7021#discussion_r468532508", "bodyText": "Since testing the overlapping session explicitly I would say that you should include an\nassertTrue(user.isLoggedIn)\n\nhere - After logging out one user, but before logging the other one out).", "author": "rorbech", "createdAt": "2020-08-11T12:11:17Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/UserTests.kt", "diffHunk": "@@ -412,9 +390,19 @@ class UserTests {\n         user.logOut()\n     }\n \n-    // FIXME\n-    @Ignore(\"Not implemented yet\")\n+    @Test\n     fun isLoggedIn() {\n+        var anonUser = app.login(Credentials.anonymous())\n+        val user: User = app.registerUserAndLogin(TestHelper.getRandomEmail(), \"123456\")\n+\n+        assertTrue(anonUser.isLoggedIn)\n+        assertTrue(user.isLoggedIn)\n+\n+        anonUser.logOut()\n+        assertFalse(anonUser.isLoggedIn)", "originalCommit": "5036e655e40b2501fbd47b6f084645a5019519c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5de852754fd5f03d040d3496ccd6a76896f90a43", "url": "https://github.com/realm/realm-java/commit/5de852754fd5f03d040d3496ccd6a76896f90a43", "message": "Ensure that a user doesn't get logged out", "committedDate": "2020-08-11T13:21:02Z", "type": "commit"}]}