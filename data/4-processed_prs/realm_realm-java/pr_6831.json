{"pr_number": 6831, "pr_title": "JNI BSON Protocol", "pr_createdAt": "2020-05-04T12:22:33Z", "pr_url": "https://github.com/realm/realm-java/pull/6831", "timeline": [{"oid": "2ccf6fecab37b31370bc2e68ba91729efb7e393c", "url": "https://github.com/realm/realm-java/commit/2ccf6fecab37b31370bc2e68ba91729efb7e393c", "message": "Initial prototype of JNI BSON passing", "committedDate": "2020-05-04T12:26:25Z", "type": "commit"}, {"oid": "ba8da74f3243cc57508a657fc553930f98d0e0d7", "url": "https://github.com/realm/realm-java/commit/ba8da74f3243cc57508a657fc553930f98d0e0d7", "message": "Remove BSON utility functions from basic flavor library", "committedDate": "2020-05-04T12:59:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQyMDk1MA==", "url": "https://github.com/realm/realm-java/pull/6831#discussion_r419420950", "bodyText": "Is this the best approach? Why not return the BsonDocument instance instead? You could have an additional method that provides a Bson too. There are multiple methods receiving a document in remote_mongo_collection.hpp, e.g.\nvoid count(const bson::BsonDocument& filter_bson ...", "author": "edualonso", "createdAt": "2020-05-04T13:07:03Z", "path": "realm/realm-library/src/main/cpp/util_sync.cpp", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+#include \"util.hpp\"\n+#include \"util_sync.hpp\"\n+\n+// Must match OSJNIBsonProtocol.VALUE\n+static const std::string VALUE(\"value\");\n+\n+using namespace realm::bson;\n+\n+Bson jstring_to_bson(JNIEnv* env, jstring arg) {\n+    JStringAccessor args_json(env, arg);\n+    BsonDocument document(parse(args_json));\n+    return document[VALUE];", "originalCommit": "ba8da74f3243cc57508a657fc553930f98d0e0d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQyOTkxNg==", "url": "https://github.com/realm/realm-java/pull/6831#discussion_r419429916", "bodyText": "The reason for wrapping them is that I cannot find a proper way to parse non-document values, which is also argument/response to a number of the C++ calls. The BsonDocument is however itself a BsonValue so there should be no problem embedding these in the convention (besides the problem that current C++ parser yields different types than the original document and I cannot pass BsonArray...but I am working on resolving those issues)", "author": "rorbech", "createdAt": "2020-05-04T13:20:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQyMDk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzMjY5Mw==", "url": "https://github.com/realm/realm-java/pull/6831#discussion_r419432693", "bodyText": "The idea is also to provide a wrapper for easier wrapping/unwrapping correctly typed values, as in https://github.com/realm/realm-java/pull/6810/files#diff-84db7612944e18ff25865af1cb6daa17", "author": "rorbech", "createdAt": "2020-05-04T13:24:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQyMDk1MA=="}], "type": "inlineReview"}, {"oid": "bba3e5cdf2256ca47ec21c487c538f19af41d4f3", "url": "https://github.com/realm/realm-java/commit/bba3e5cdf2256ca47ec21c487c538f19af41d4f3", "message": "Add BsonConverted from cr/functions", "committedDate": "2020-05-04T15:54:59Z", "type": "commit"}, {"oid": "a8594bd609877cb8563ddb56f440efa12d01b193", "url": "https://github.com/realm/realm-java/commit/a8594bd609877cb8563ddb56f440efa12d01b193", "message": "Use canonical extended json for serializing BSON to JNI", "committedDate": "2020-05-04T16:00:31Z", "type": "commit"}, {"oid": "869ef78e89a8a2c903326de64e6be2d8c590863a", "url": "https://github.com/realm/realm-java/commit/869ef78e89a8a2c903326de64e6be2d8c590863a", "message": "Collect JVM unit test results", "committedDate": "2020-05-04T19:08:06Z", "type": "commit"}, {"oid": "cb3e607c037c4dfd62bb66715439d76e41f72011", "url": "https://github.com/realm/realm-java/commit/cb3e607c037c4dfd62bb66715439d76e41f72011", "message": "Use const value instead of hardcoded values", "committedDate": "2020-05-04T19:08:23Z", "type": "commit"}, {"oid": "8310b7c568765350f991146dfcfae17a5c31f97f", "url": "https://github.com/realm/realm-java/commit/8310b7c568765350f991146dfcfae17a5c31f97f", "message": "Add test of convertion of all primitive values", "committedDate": "2020-05-04T20:34:03Z", "type": "commit"}, {"oid": "c02894fc92d544a87a788f58a92d325b949789b3", "url": "https://github.com/realm/realm-java/commit/c02894fc92d544a87a788f58a92d325b949789b3", "message": "Add conversion of fload/double to BSON conversion", "committedDate": "2020-05-05T06:33:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg4ODcxOA==", "url": "https://github.com/realm/realm-java/pull/6831#discussion_r419888718", "bodyText": "Normally this would be in the setup method:\n@Before\npublic void setUp() {\n  Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n}", "author": "cmelchior", "createdAt": "2020-05-05T06:27:59Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmFunctionsTest.kt", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.internal.util.BsonConverter\n+import org.bson.*\n+import org.junit.Test\n+import java.util.stream.Collectors\n+import kotlin.test.assertEquals\n+\n+class RealmFunctionsTest {\n+\n+    @Test\n+    operator fun invoke() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)", "originalCommit": "8310b7c568765350f991146dfcfae17a5c31f97f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkwMjU0NQ==", "url": "https://github.com/realm/realm-java/pull/6831#discussion_r419902545", "bodyText": "\ud83d\udc4d", "author": "rorbech", "createdAt": "2020-05-05T07:03:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg4ODcxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg4OTIwNw==", "url": "https://github.com/realm/realm-java/pull/6831#discussion_r419889207", "bodyText": "In other tests of this kind we normally either create a custom enum or switch on an existing one. That way it becomes really clear if you are missing tests for a specific type. In this case there is already a BsonType enum, right?", "author": "cmelchior", "createdAt": "2020-05-05T06:29:16Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmFunctionsTest.kt", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.internal.util.BsonConverter\n+import org.bson.*\n+import org.junit.Test\n+import java.util.stream.Collectors\n+import kotlin.test.assertEquals\n+\n+class RealmFunctionsTest {\n+\n+    @Test\n+    operator fun invoke() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+\n+        val functions = RealmFunctions()\n+        val i32 = 42", "originalCommit": "8310b7c568765350f991146dfcfae17a5c31f97f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5OTA4Ng==", "url": "https://github.com/realm/realm-java/pull/6831#discussion_r419899086", "bodyText": "Yep. You commented earlier on another PR, and just before pushing I got the point :)", "author": "rorbech", "createdAt": "2020-05-05T06:54:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg4OTIwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5MDI4NQ==", "url": "https://github.com/realm/realm-java/pull/6831#discussion_r419890285", "bodyText": "Normally we use the Os name to signal that the class is wrapping an existing C++ class, so using that name here is a bit confusing. I would probably just rename to JniBsonProtocol", "author": "cmelchior", "createdAt": "2020-05-05T06:31:50Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/jni/OSJNIBsonProtocol.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.internal.jni;\n+\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonMode;\n+import org.bson.json.JsonWriterSettings;\n+\n+/**\n+ * Protocol for passing {@link BsonValue}s to JNI.\n+ *\n+ * For now this just encapsulated the BSON value in a document with key {@value VALUE}. This\n+ * overcomes the shortcoming of {@code org.bson.JsonWrite} not being able to serialize single values.\n+ */\n+public class OSJNIBsonProtocol {", "originalCommit": "8310b7c568765350f991146dfcfae17a5c31f97f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkwMjA5OA==", "url": "https://github.com/realm/realm-java/pull/6831#discussion_r419902098", "bodyText": "\ud83d\udc4d", "author": "rorbech", "createdAt": "2020-05-05T07:02:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5MDI4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5MTczNw==", "url": "https://github.com/realm/realm-java/pull/6831#discussion_r419891737", "bodyText": "Isn't there a specific null type in Bson? If yes, we should disallow null IMO, otherwise we should allow it.", "author": "cmelchior", "createdAt": "2020-05-05T06:35:42Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/util/BsonConverter.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.internal.util;\n+\n+import org.bson.BsonArray;\n+import org.bson.BsonBinary;\n+import org.bson.BsonBoolean;\n+import org.bson.BsonDateTime;\n+import org.bson.BsonDecimal128;\n+import org.bson.BsonInt32;\n+import org.bson.BsonInt64;\n+import org.bson.BsonObjectId;\n+import org.bson.BsonString;\n+import org.bson.BsonType;\n+import org.bson.BsonValue;\n+import org.bson.conversions.Bson;\n+import org.bson.types.Decimal128;\n+import org.bson.types.ObjectId;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * A <i>BSON converter</i> to handle conversion between native Java types and BSON values.\n+ */\n+public class BsonConverter {\n+\n+    /**\n+     * Converts value object to BSON value based on type.\n+     *\n+     * Converts primitive boxed types to the equivalent BSON equivalent value object and {@link List}\n+     * of values into {@link BsonArray} of converted values.\n+     *\n+     * {@link BsonValue} objects are left as is.\n+     *\n+     * @param value The object to convert.\n+     * @return BSON value representation of the origin value object.\n+     *\n+     * @throws IllegalArgumentException If the object could not be mapped to a BSON type.\n+     */\n+    // FIXME Review supported types...any obvious types missing?\n+    public static BsonValue to(Object value) {\n+        if (value instanceof BsonValue) {\n+            return (BsonValue) value;\n+        }\n+        // Convert list to BsonArray\n+        else if (value instanceof List) {\n+            return BsonConverter.to(((List) value).toArray());\n+        }\n+        // Native types\n+        else if (value instanceof Integer) {\n+            return new BsonInt32((Integer) value);\n+        } else if (value instanceof Long) {\n+            return new BsonInt64((Long) value);\n+        } else if (value instanceof Boolean) {\n+            return new BsonBoolean((Boolean) value);\n+        } else if (value instanceof String){\n+            return new BsonString((String) value);\n+        } else if (value instanceof byte[]) {\n+            return new BsonBinary((byte[]) value);\n+        }\n+        // Bson values\n+        else if (value instanceof ObjectId) {\n+            return new BsonObjectId((ObjectId) value);\n+        }\n+        else if (value instanceof Decimal128) {\n+            return new BsonDecimal128((Decimal128) value);\n+        }\n+        // FIXME Missing Realm types\n+        // Date\n+        // Float\n+        // Double\n+        // Object\n+        // List\n+        // LinkingObject\n+        // FIXME Missing Bson value\n+        throw new IllegalArgumentException(\"Conversion to BSON value not supported for \" + value.getClass().getName());\n+    }\n+\n+    /**\n+     * Converts a list of objects to BSON values.\n+     *\n+     * @param value List of value objects to convert.\n+     * @return A list of BSON values of the converted input arguments.\n+     *\n+     * @throws IllegalArgumentException If any of the value objects could not be converted to a\n+     * BSON type.\n+     *\n+     * @see #to(Object)\n+     */\n+    public static BsonArray to(Object... value) {\n+        ArrayList result = new ArrayList();\n+        for (Object o1 : value) {\n+            result.add(to(o1));\n+        }\n+        return new BsonArray(result);\n+    }\n+\n+    /**\n+     *\n+     *\n+     * @param clz\n+     * @param value\n+     * @param <T>\n+     * @return\n+     *\n+     */\n+    // FIXME Would we rather return null? Would maybe make it cleaner to use with", "originalCommit": "8310b7c568765350f991146dfcfae17a5c31f97f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkwMTE5Nw==", "url": "https://github.com/realm/realm-java/pull/6831#discussion_r419901197", "bodyText": "Yes, there is a BSONNull. Removing FIXME.", "author": "rorbech", "createdAt": "2020-05-05T07:00:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5MTczNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5MTkyNA==", "url": "https://github.com/realm/realm-java/pull/6831#discussion_r419891924", "bodyText": "Not sure I understand the naming of this method?", "author": "cmelchior", "createdAt": "2020-05-05T06:36:08Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/util/BsonConverter.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.internal.util;\n+\n+import org.bson.BsonArray;\n+import org.bson.BsonBinary;\n+import org.bson.BsonBoolean;\n+import org.bson.BsonDateTime;\n+import org.bson.BsonDecimal128;\n+import org.bson.BsonInt32;\n+import org.bson.BsonInt64;\n+import org.bson.BsonObjectId;\n+import org.bson.BsonString;\n+import org.bson.BsonType;\n+import org.bson.BsonValue;\n+import org.bson.conversions.Bson;\n+import org.bson.types.Decimal128;\n+import org.bson.types.ObjectId;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * A <i>BSON converter</i> to handle conversion between native Java types and BSON values.\n+ */\n+public class BsonConverter {\n+\n+    /**\n+     * Converts value object to BSON value based on type.\n+     *\n+     * Converts primitive boxed types to the equivalent BSON equivalent value object and {@link List}\n+     * of values into {@link BsonArray} of converted values.\n+     *\n+     * {@link BsonValue} objects are left as is.\n+     *\n+     * @param value The object to convert.\n+     * @return BSON value representation of the origin value object.\n+     *\n+     * @throws IllegalArgumentException If the object could not be mapped to a BSON type.\n+     */\n+    // FIXME Review supported types...any obvious types missing?\n+    public static BsonValue to(Object value) {\n+        if (value instanceof BsonValue) {\n+            return (BsonValue) value;\n+        }\n+        // Convert list to BsonArray\n+        else if (value instanceof List) {\n+            return BsonConverter.to(((List) value).toArray());\n+        }\n+        // Native types\n+        else if (value instanceof Integer) {\n+            return new BsonInt32((Integer) value);\n+        } else if (value instanceof Long) {\n+            return new BsonInt64((Long) value);\n+        } else if (value instanceof Boolean) {\n+            return new BsonBoolean((Boolean) value);\n+        } else if (value instanceof String){\n+            return new BsonString((String) value);\n+        } else if (value instanceof byte[]) {\n+            return new BsonBinary((byte[]) value);\n+        }\n+        // Bson values\n+        else if (value instanceof ObjectId) {\n+            return new BsonObjectId((ObjectId) value);\n+        }\n+        else if (value instanceof Decimal128) {\n+            return new BsonDecimal128((Decimal128) value);\n+        }\n+        // FIXME Missing Realm types\n+        // Date\n+        // Float\n+        // Double\n+        // Object\n+        // List\n+        // LinkingObject\n+        // FIXME Missing Bson value\n+        throw new IllegalArgumentException(\"Conversion to BSON value not supported for \" + value.getClass().getName());\n+    }\n+\n+    /**\n+     * Converts a list of objects to BSON values.\n+     *\n+     * @param value List of value objects to convert.\n+     * @return A list of BSON values of the converted input arguments.\n+     *\n+     * @throws IllegalArgumentException If any of the value objects could not be converted to a\n+     * BSON type.\n+     *\n+     * @see #to(Object)\n+     */\n+    public static BsonArray to(Object... value) {\n+        ArrayList result = new ArrayList();\n+        for (Object o1 : value) {\n+            result.add(to(o1));\n+        }\n+        return new BsonArray(result);\n+    }\n+\n+    /**\n+     *\n+     *\n+     * @param clz\n+     * @param value\n+     * @param <T>\n+     * @return\n+     *\n+     */\n+    // FIXME Would we rather return null? Would maybe make it cleaner to use with\n+    //  functions.callFunctionTyped(\"sum\", BsonString::class.java, \"Realm\")?.value\n+    //  but would also silently hide if expectations of type is wrong\n+    private static <T extends BsonValue> T fromToBson(Class<T> clz, BsonValue value) {", "originalCommit": "8310b7c568765350f991146dfcfae17a5c31f97f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkwMjAwNg==", "url": "https://github.com/realm/realm-java/pull/6831#discussion_r419902006", "bodyText": "No. Leftover from before the interface settled. Removing it completely, as from now handles it.", "author": "rorbech", "createdAt": "2020-05-05T07:02:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5MTkyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5MjEwNw==", "url": "https://github.com/realm/realm-java/pull/6831#discussion_r419892107", "bodyText": "Why ignore it?", "author": "cmelchior", "createdAt": "2020-05-05T06:36:41Z", "path": "realm/realm-library/src/testObjectServer/kotlin/io/realm/BsonTest.kt", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm\n+\n+import io.realm.internal.util.BsonConverter\n+import org.bson.*\n+import org.bson.types.Decimal128\n+import org.bson.types.ObjectId\n+import org.junit.Assert.assertEquals\n+import org.junit.Ignore\n+import org.junit.Test\n+import kotlin.test.assertFailsWith\n+\n+class BsonTest {\n+\n+    /**\n+     * Simple test to verify semantics of org.bson JSON encoding and decoding.\n+     */\n+    @Ignore(\"Only for Bson API evaluation, not testing Realm functionality\")", "originalCommit": "8310b7c568765350f991146dfcfae17a5c31f97f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkxMTUxOA==", "url": "https://github.com/realm/realm-java/pull/6831#discussion_r419911518", "bodyText": "I wasn't even sure if it ends up representing the way we use their API, so did not really see a reason for having it. But I can included it.", "author": "rorbech", "createdAt": "2020-05-05T07:24:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5MjEwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkxMjQwNg==", "url": "https://github.com/realm/realm-java/pull/6831#discussion_r419912406", "bodyText": "I was just wondering. I didn't look closely at the implementation. If it isn't going to be used it should probably just be removed instead.", "author": "cmelchior", "createdAt": "2020-05-05T07:26:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5MjEwNw=="}], "type": "inlineReview"}, {"oid": "512e69ebb0f884aafdb06a12e72fe3e8a3eb6a11", "url": "https://github.com/realm/realm-java/commit/512e69ebb0f884aafdb06a12e72fe3e8a3eb6a11", "message": "Remamed OSJNIBsonProtocol to JniBsonProtocol", "committedDate": "2020-05-05T06:55:48Z", "type": "commit"}, {"oid": "789d5f8c88260cce2d7b7dc2a06104f982fdf58a", "url": "https://github.com/realm/realm-java/commit/789d5f8c88260cce2d7b7dc2a06104f982fdf58a", "message": "Cleaned up tests", "committedDate": "2020-05-05T07:22:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzNDAwMw==", "url": "https://github.com/realm/realm-java/pull/6831#discussion_r419934003", "bodyText": "These functions are currently free functions. I would probably put them inside a class. BsonUtil perhaps.", "author": "cmelchior", "createdAt": "2020-05-05T08:09:50Z", "path": "realm/realm-library/src/main/cpp/util_sync.hpp", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+#ifndef REALM_UTIL_SYNC_HPP\n+#define REALM_UTIL_SYNC_HPP\n+\n+#include <jni.h>\n+#include <util/bson/bson.hpp>\n+\n+realm::bson::Bson jstring_to_bson(JNIEnv* env, jstring arg);", "originalCommit": "789d5f8c88260cce2d7b7dc2a06104f982fdf58a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2ODc4OA==", "url": "https://github.com/realm/realm-java/pull/6831#discussion_r419968788", "bodyText": "Ok. Will take it into account for later updates.", "author": "rorbech", "createdAt": "2020-05-05T09:12:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzNDAwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzNDc3NQ==", "url": "https://github.com/realm/realm-java/pull/6831#discussion_r419934775", "bodyText": "Good with this kind of explanation \ud83d\udc4f", "author": "cmelchior", "createdAt": "2020-05-05T08:11:11Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/jni/JniBsonProtocol.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.internal.jni;\n+\n+import org.bson.BsonDocument;\n+import org.bson.BsonValue;\n+import org.bson.json.JsonMode;\n+import org.bson.json.JsonWriterSettings;\n+\n+/**\n+ * Protocol for passing {@link BsonValue}s to JNI.\n+ *\n+ * For now this just encapsulated the BSON value in a document with key {@value VALUE}. This", "originalCommit": "789d5f8c88260cce2d7b7dc2a06104f982fdf58a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzNjkzNA==", "url": "https://github.com/realm/realm-java/pull/6831#discussion_r419936934", "bodyText": "This test seems to cover a lot, both to/from/exceptions. Isn't it possible to split it apart. I can see why to/from are in the same test, but the exception could be moved to its own test", "author": "cmelchior", "createdAt": "2020-05-05T08:15:18Z", "path": "realm/realm-library/src/testObjectServer/kotlin/io/realm/BsonTest.kt", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm\n+\n+import io.realm.internal.util.BsonConverter\n+import org.bson.*\n+import org.bson.types.Decimal128\n+import org.bson.types.ObjectId\n+import org.junit.Assert.assertEquals\n+import org.junit.Assert.assertTrue\n+import org.junit.Ignore\n+import org.junit.Test\n+import kotlin.test.assertFailsWith\n+\n+class BsonTest {\n+\n+    /**\n+     * Simple test to verify semantics of org.bson JSON encoding and decoding.\n+     */\n+    // Only for Bson API evaluation, not testing Realm functionality\n+    @Test\n+    fun bsonRoundtrip() {\n+        val valueInt32   = 42\n+        val valueInt64   = 42L\n+        val valueString  = \"Realm\"\n+        val valueBoolean = true\n+        val valueOid     = ObjectId()\n+\n+        val document = BsonDocument.parse(\"{}\")\n+\n+        document.append(\"arg1\", BsonInt32(valueInt32))\n+        document.append(\"arg2\", BsonInt64(valueInt64))\n+        document.append(\"arg3\", BsonString(valueString))\n+        document.append(\"arg4\", BsonBoolean(valueBoolean))\n+        document.append(\"arg5\", BsonObjectId(valueOid))\n+\n+        val roundtrip = BsonDocument.parse(document.toJson())\n+        assertEquals(valueInt32,   roundtrip.get(\"arg1\")?.asInt32()?.value)\n+        assertEquals(valueInt64,   roundtrip.get(\"arg2\")?.asInt64()?.value)\n+        assertEquals(valueString,  roundtrip.get(\"arg3\")?.asString()?.value)\n+        assertEquals(valueBoolean, roundtrip.get(\"arg4\")?.asBoolean()?.value)\n+        assertEquals(valueOid,     roundtrip.get(\"arg5\")?.asObjectId()?.value)\n+\n+        // We cannot retrieve bson values differently type, not even if it could fit in the type\n+        assertFailsWith<RuntimeException> {\n+            roundtrip.getInt32(\"arg2\");\n+        }\n+        assertFailsWith<RuntimeException> {\n+            roundtrip.getInt64(\"arg1\");\n+        }\n+    }\n+\n+    /**\n+     * Simple test of type conversion between native Java object types and BSON types.\n+     */\n+    @Test\n+    fun bsonConversion() {", "originalCommit": "789d5f8c88260cce2d7b7dc2a06104f982fdf58a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk3MjU5MA==", "url": "https://github.com/realm/realm-java/pull/6831#discussion_r419972590", "bodyText": "Will separate on future updates.", "author": "rorbech", "createdAt": "2020-05-05T09:19:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzNjkzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzNzcyMw==", "url": "https://github.com/realm/realm-java/pull/6831#discussion_r419937723", "bodyText": "Add FIXME for the Javadoc", "author": "cmelchior", "createdAt": "2020-05-05T08:16:49Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java", "diffHunk": "@@ -15,5 +15,18 @@\n  */\n package io.realm;\n \n-class RealmFunctions {\n+import org.bson.BsonValue;\n+\n+import io.realm.internal.jni.JniBsonProtocol;\n+\n+public class RealmFunctions {", "originalCommit": "789d5f8c88260cce2d7b7dc2a06104f982fdf58a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2OTM0Nw==", "url": "https://github.com/realm/realm-java/pull/6831#discussion_r419969347", "bodyText": "Same a for the test. This was only included to have some place for doing a round trip test to JNI. This will be superseeded by #6810.", "author": "rorbech", "createdAt": "2020-05-05T09:13:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkzNzcyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk0MjM4Mw==", "url": "https://github.com/realm/realm-java/pull/6831#discussion_r419942383", "bodyText": "This test is currently a bit weird.\nNormally we would test all cases through the public API, e.g. all the BsonTest cases would be expressed in terms of the public API.\nThis is a bit different though as the helper class is supposed to be used elsewhere. So, in this case, it is probably acceptable to just smoke test the public API that the serialization works.", "author": "cmelchior", "createdAt": "2020-05-05T08:25:34Z", "path": "realm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmFunctionsTest.kt", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm\n+\n+import androidx.test.platform.app.InstrumentationRegistry\n+import io.realm.internal.util.BsonConverter\n+import org.bson.*\n+import org.junit.Before\n+import org.junit.Test\n+import java.util.stream.Collectors\n+import kotlin.test.assertEquals\n+\n+class RealmFunctionsTest {\n+\n+    @Before\n+    fun setup() {\n+        Realm.init(InstrumentationRegistry.getInstrumentation().targetContext)\n+    }\n+\n+    @Test\n+    fun jniBsonOnlyRoundtrip() {", "originalCommit": "789d5f8c88260cce2d7b7dc2a06104f982fdf58a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk0ODM3MQ==", "url": "https://github.com/realm/realm-java/pull/6831#discussion_r419948371", "bodyText": "Yep. This is a spinout from #6810, as we suddently needed the BSON passing across multiple PRs. As we did not have a mechanism for doing JNI methods for test only, I had to put a round trip somewhere in the actual code. It will be superseeded by tests in #6810. Should of course have noted that.", "author": "rorbech", "createdAt": "2020-05-05T08:36:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk0MjM4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk1MTc5MQ==", "url": "https://github.com/realm/realm-java/pull/6831#discussion_r419951791", "bodyText": "Ok \ud83d\udc4d", "author": "cmelchior", "createdAt": "2020-05-05T08:42:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk0MjM4Mw=="}], "type": "inlineReview"}]}