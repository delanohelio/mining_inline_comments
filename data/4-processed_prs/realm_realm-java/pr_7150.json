{"pr_number": 7150, "pr_title": "Preparing v10 RC2", "pr_createdAt": "2020-10-08T15:05:44Z", "pr_url": "https://github.com/realm/realm-java/pull/7150", "timeline": [{"oid": "0417d4110cea599475664fdf9d852a9481b8ff25", "url": "https://github.com/realm/realm-java/commit/0417d4110cea599475664fdf9d852a9481b8ff25", "message": "Updated OS pointer and fixed all breaking changes in OS MongoClient-related classes", "committedDate": "2020-10-08T12:07:53Z", "type": "commit"}, {"oid": "26fa897930b247f7237c6f8057174a22b46c5f48", "url": "https://github.com/realm/realm-java/commit/26fa897930b247f7237c6f8057174a22b46c5f48", "message": "Updated changelog in preparation for v10 RC2", "committedDate": "2020-10-08T12:24:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg5MDgwOA==", "url": "https://github.com/realm/realm-java/pull/7150#discussion_r501890808", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## 10.0.0-RC.2 (2020-10-13)\n          \n          \n            \n            ## 10.0.0-RC.2 (YYYY-MM-DD)\n          \n      \n    \n    \n  \n\nWe shouldn't fill out the date until the actual release", "author": "cmelchior", "createdAt": "2020-10-08T17:29:15Z", "path": "CHANGELOG.md", "diffHunk": "@@ -1,3 +1,33 @@\n+## 10.0.0-RC.2 (2020-10-13)", "originalCommit": "26fa897930b247f7237c6f8057174a22b46c5f48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg5MTcxMA==", "url": "https://github.com/realm/realm-java/pull/7150#discussion_r501891710", "bodyText": "Copy from RC.1. Should be removed", "author": "cmelchior", "createdAt": "2020-10-08T17:30:37Z", "path": "CHANGELOG.md", "diffHunk": "@@ -1,3 +1,33 @@\n+## 10.0.0-RC.2 (2020-10-13)\n+\n+We no longer support Realm Cloud (legacy), but instead the new MongoDB Realm Cloud. MongoDB Realm is a serverless platform that enables developers to quickly build applications without having to set up server infrastructure. MongoDB Realm is built on top of MongoDB Atlas, automatically integrating the connection to your database.\n+\n+The old Realm Cloud legacy APIs have undergone significant refactoring. The new APIs are all located in the `io.realm.mongodb` package with `io.realm.mongodb.App` as the entry point.\n+\n+### Breaking Changes", "originalCommit": "26fa897930b247f7237c6f8057174a22b46c5f48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg5MjA5Mw==", "url": "https://github.com/realm/realm-java/pull/7150#discussion_r501892093", "bodyText": "Copy from RC.1. Remove and replace with None. if there are no enhancements.", "author": "cmelchior", "createdAt": "2020-10-08T17:31:07Z", "path": "CHANGELOG.md", "diffHunk": "@@ -1,3 +1,33 @@\n+## 10.0.0-RC.2 (2020-10-13)\n+\n+We no longer support Realm Cloud (legacy), but instead the new MongoDB Realm Cloud. MongoDB Realm is a serverless platform that enables developers to quickly build applications without having to set up server infrastructure. MongoDB Realm is built on top of MongoDB Atlas, automatically integrating the connection to your database.\n+\n+The old Realm Cloud legacy APIs have undergone significant refactoring. The new APIs are all located in the `io.realm.mongodb` package with `io.realm.mongodb.App` as the entry point.\n+\n+### Breaking Changes\n+* From now on it is not allowed by default to run transactions with either `Realm.executeTransaction()` or `DynamicRealm.executeTransaction()` from the UI thread. Doing so will yield a `RealmException`. Users can override this behavior by using `RealmConfiguration.Builder.allowWritesOnUiThread(true)` when building a `RealmConfiguration` to obtain a Realm or DynamicRealm instance, though we do not recommend doing so. Instead, we recommend using `executeTransactionAsync()` or, alternatively, using non-UI threads when calling `executeTransaction()` for both `Realm`s and `DynamicRealm`s.\n+\n+### Enhancements", "originalCommit": "26fa897930b247f7237c6f8057174a22b46c5f48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg5Mjk3Mg==", "url": "https://github.com/realm/realm-java/pull/7150#discussion_r501892972", "bodyText": "Also from RC.1. We should replace with the fixes merged in ObjectStore, even if they have no issues. We don't need to mention the internal refactors, but we do need to mention the public bug fixes.", "author": "cmelchior", "createdAt": "2020-10-08T17:32:34Z", "path": "CHANGELOG.md", "diffHunk": "@@ -1,3 +1,33 @@\n+## 10.0.0-RC.2 (2020-10-13)\n+\n+We no longer support Realm Cloud (legacy), but instead the new MongoDB Realm Cloud. MongoDB Realm is a serverless platform that enables developers to quickly build applications without having to set up server infrastructure. MongoDB Realm is built on top of MongoDB Atlas, automatically integrating the connection to your database.\n+\n+The old Realm Cloud legacy APIs have undergone significant refactoring. The new APIs are all located in the `io.realm.mongodb` package with `io.realm.mongodb.App` as the entry point.\n+\n+### Breaking Changes\n+* From now on it is not allowed by default to run transactions with either `Realm.executeTransaction()` or `DynamicRealm.executeTransaction()` from the UI thread. Doing so will yield a `RealmException`. Users can override this behavior by using `RealmConfiguration.Builder.allowWritesOnUiThread(true)` when building a `RealmConfiguration` to obtain a Realm or DynamicRealm instance, though we do not recommend doing so. Instead, we recommend using `executeTransactionAsync()` or, alternatively, using non-UI threads when calling `executeTransaction()` for both `Realm`s and `DynamicRealm`s.\n+\n+### Enhancements\n+* Users can now opt out from allowing queries to be launched from the UI thread by using `RealmConfiguration.Builder.allowQueriesOnUiThread(false)`. A `RealmException` will be thrown when calling `RealmQuery.findAll()`, `RealmQuery.findFirst()`, `RealmQuery.minimumDate()`, `RealmQuery.maximumDate()`, `RealmQuery.count()`, `RealmQuery.sum()`, `RealmQuery.max()`, `RealmQuery.min()`, `RealmQuery.average()` and `RealmQuery.averageDecimal128()` from the UI thread after having used `allowQueriesOnUiThread(false)`. Queries will be allowed from the thread from which the Realm instance was obtained as it always has been by default, although we recommend using `RealmQuery.findAllAsync()` or `RealmQuery.findFirstAsync()`, or, alternatively, using a non-UI thread to launch them.\n+* `BaseRealm.refresh()` will throw a `RealmException` if it is being called from the UI thread if `allowQueriesOnUiThread` is set to `false`, though it will be allowed by default.\n+* Added `DynamicRealm.executeTransactionAsync()`.\n+* Added Kotlin extension suspend function `Realm.executeTransactionAwait()` which runs transactions inside coroutines.\n+* Added Kotlin extension function `RealmResults.toFlow()` which returns a Kotlin flow, similar to our RxJava convenience method `asFlowable()`.\n+* Added Kotlin extension function `RealmList.toFlow()` which returns a Kotlin flow, similar to our RxJava convenience method `asFlowable()`.\n+* Added Kotlin extension function `RealmModel.toFlow()` which returns a Kotlin flow, similar to our RxJava convenience method `asFlowable()`.\n+\n+### Fixed\n+* Using `Realm.copyToRealmOrUpdate()` and `Realm.insertOrUpdate()` did not correctly update objects if they contained lists of embedded objets. Instead of replacing the original list, list items was appended to the original list. Note, some corner cases are still not supported. See [#7138](https://github.com/realm/realm-java/issues/7138) for more information. (Issue [#7131](https://github.com/realm/realm-java/issues/7131), since 10.0.0-BETA.1).", "originalCommit": "26fa897930b247f7237c6f8057174a22b46c5f48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg5MzI3Ng==", "url": "https://github.com/realm/realm-java/pull/7150#discussion_r501893276", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Updated to Object Store commit: da02579eea7b36eb84d2c9f88988b7f32c83eb83\n          \n          \n            \n            * Updated to Object Store commit: da02579eea7b36eb84d2c9f88988b7f32c83eb83.", "author": "cmelchior", "createdAt": "2020-10-08T17:33:02Z", "path": "CHANGELOG.md", "diffHunk": "@@ -1,3 +1,33 @@\n+## 10.0.0-RC.2 (2020-10-13)\n+\n+We no longer support Realm Cloud (legacy), but instead the new MongoDB Realm Cloud. MongoDB Realm is a serverless platform that enables developers to quickly build applications without having to set up server infrastructure. MongoDB Realm is built on top of MongoDB Atlas, automatically integrating the connection to your database.\n+\n+The old Realm Cloud legacy APIs have undergone significant refactoring. The new APIs are all located in the `io.realm.mongodb` package with `io.realm.mongodb.App` as the entry point.\n+\n+### Breaking Changes\n+* From now on it is not allowed by default to run transactions with either `Realm.executeTransaction()` or `DynamicRealm.executeTransaction()` from the UI thread. Doing so will yield a `RealmException`. Users can override this behavior by using `RealmConfiguration.Builder.allowWritesOnUiThread(true)` when building a `RealmConfiguration` to obtain a Realm or DynamicRealm instance, though we do not recommend doing so. Instead, we recommend using `executeTransactionAsync()` or, alternatively, using non-UI threads when calling `executeTransaction()` for both `Realm`s and `DynamicRealm`s.\n+\n+### Enhancements\n+* Users can now opt out from allowing queries to be launched from the UI thread by using `RealmConfiguration.Builder.allowQueriesOnUiThread(false)`. A `RealmException` will be thrown when calling `RealmQuery.findAll()`, `RealmQuery.findFirst()`, `RealmQuery.minimumDate()`, `RealmQuery.maximumDate()`, `RealmQuery.count()`, `RealmQuery.sum()`, `RealmQuery.max()`, `RealmQuery.min()`, `RealmQuery.average()` and `RealmQuery.averageDecimal128()` from the UI thread after having used `allowQueriesOnUiThread(false)`. Queries will be allowed from the thread from which the Realm instance was obtained as it always has been by default, although we recommend using `RealmQuery.findAllAsync()` or `RealmQuery.findFirstAsync()`, or, alternatively, using a non-UI thread to launch them.\n+* `BaseRealm.refresh()` will throw a `RealmException` if it is being called from the UI thread if `allowQueriesOnUiThread` is set to `false`, though it will be allowed by default.\n+* Added `DynamicRealm.executeTransactionAsync()`.\n+* Added Kotlin extension suspend function `Realm.executeTransactionAwait()` which runs transactions inside coroutines.\n+* Added Kotlin extension function `RealmResults.toFlow()` which returns a Kotlin flow, similar to our RxJava convenience method `asFlowable()`.\n+* Added Kotlin extension function `RealmList.toFlow()` which returns a Kotlin flow, similar to our RxJava convenience method `asFlowable()`.\n+* Added Kotlin extension function `RealmModel.toFlow()` which returns a Kotlin flow, similar to our RxJava convenience method `asFlowable()`.\n+\n+### Fixed\n+* Using `Realm.copyToRealmOrUpdate()` and `Realm.insertOrUpdate()` did not correctly update objects if they contained lists of embedded objets. Instead of replacing the original list, list items was appended to the original list. Note, some corner cases are still not supported. See [#7138](https://github.com/realm/realm-java/issues/7138) for more information. (Issue [#7131](https://github.com/realm/realm-java/issues/7131), since 10.0.0-BETA.1).\n+\n+### Compatibility\n+* File format: Generates Realms with format v20. Unsynced Realms will be upgraded from Realm Java 2.0 and later. Synced Realms can only be read and upgraded if created with Realm Java 10.0.0-BETA.1.\n+* APIs are backwards compatible with all previous release of realm-java in the 10.x.y series.\n+* Realm Studio 10.0.0 and above is required to open Realms created by this version.\n+\n+### Internal\n+* Updated to Object Store commit: da02579eea7b36eb84d2c9f88988b7f32c83eb83", "originalCommit": "26fa897930b247f7237c6f8057174a22b46c5f48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg5NDIxOQ==", "url": "https://github.com/realm/realm-java/pull/7150#discussion_r501894219", "bodyText": "I thought the change in ObjectStore was that this returns the primary key, which might not be an ObjectId?", "author": "cmelchior", "createdAt": "2020-10-08T17:34:35Z", "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsMongoCollection.cpp", "diffHunk": "@@ -43,47 +43,48 @@ static std::function<jobject(JNIEnv*, uint64_t)> collection_mapper_count = [](JN\n \n // This mapper works for both findOne and findOneAndUpdate/Replace functions\n static std::function<jobject(JNIEnv*, util::Optional<bson::BsonDocument>)> collection_mapper_find_one = [](JNIEnv* env, util::Optional<bson::BsonDocument> document) {\n-    return document ? JniBsonProtocol::bson_to_jstring(env, *document) : NULL;\n+    return document ? JniBsonProtocol::bson_to_jstring(env, *document) : nullptr;\n };\n \n-static std::function<jobject(JNIEnv*, util::Optional<ObjectId>)> collection_mapper_insert_one = [](JNIEnv* env, util::Optional<ObjectId> object_id) {\n-    if (object_id) {\n-        return JavaClassGlobalDef::new_object_id(env, object_id.value());\n+static std::function<jobject(JNIEnv*, util::Optional<Bson>)> collection_mapper_insert_one = [](JNIEnv* env, util::Optional<Bson> bson_object_id) {\n+    if (bson_object_id) {\n+        auto object_id = static_cast<ObjectId>(bson_object_id.value());", "originalCommit": "26fa897930b247f7237c6f8057174a22b46c5f48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg5NDQzMg==", "url": "https://github.com/realm/realm-java/pull/7150#discussion_r501894432", "bodyText": "Same, are we sure this is always objectId.s", "author": "cmelchior", "createdAt": "2020-10-08T17:34:53Z", "path": "realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsMongoCollection.cpp", "diffHunk": "@@ -43,47 +43,48 @@ static std::function<jobject(JNIEnv*, uint64_t)> collection_mapper_count = [](JN\n \n // This mapper works for both findOne and findOneAndUpdate/Replace functions\n static std::function<jobject(JNIEnv*, util::Optional<bson::BsonDocument>)> collection_mapper_find_one = [](JNIEnv* env, util::Optional<bson::BsonDocument> document) {\n-    return document ? JniBsonProtocol::bson_to_jstring(env, *document) : NULL;\n+    return document ? JniBsonProtocol::bson_to_jstring(env, *document) : nullptr;\n };\n \n-static std::function<jobject(JNIEnv*, util::Optional<ObjectId>)> collection_mapper_insert_one = [](JNIEnv* env, util::Optional<ObjectId> object_id) {\n-    if (object_id) {\n-        return JavaClassGlobalDef::new_object_id(env, object_id.value());\n+static std::function<jobject(JNIEnv*, util::Optional<Bson>)> collection_mapper_insert_one = [](JNIEnv* env, util::Optional<Bson> bson_object_id) {\n+    if (bson_object_id) {\n+        auto object_id = static_cast<ObjectId>(bson_object_id.value());\n+        return JavaClassGlobalDef::new_object_id(env, object_id);\n     }\n     throw std::logic_error(\"Error in 'insert_one', parameter 'object_id' has no value.\");\n };\n \n-static std::function<jobject(JNIEnv*, std::vector<ObjectId>)> collection_mapper_insert_many = [](JNIEnv* env, std::vector<ObjectId> object_ids) {\n-    if (object_ids.size() == 0) {\n+static std::function<jobject(JNIEnv*, std::vector<Bson>)> collection_mapper_insert_many = [](JNIEnv* env, std::vector<Bson> bson_object_ids) {\n+    if (bson_object_ids.empty()) {\n         throw std::logic_error(\"Error in 'insert_many', parameter 'object_ids' is empty.\");\n     }\n-    jobjectArray arr = (jobjectArray)env->NewObjectArray(static_cast<jsize>(object_ids.size()), JavaClassGlobalDef::java_lang_object(), NULL);\n-    if (arr == NULL) {\n+    auto arr = (jobjectArray)env->NewObjectArray(static_cast<jsize>(bson_object_ids.size()), JavaClassGlobalDef::java_lang_object(), nullptr);\n+    if (arr == nullptr) {\n         ThrowException(env, OutOfMemory, \"Could not allocate memory to return list of ObjectIds of inserted documents.\");\n         return arr;\n     }\n-    for (size_t i = 0; i < object_ids.size(); ++i) {\n-        jobject j_object_id = JavaClassGlobalDef::new_object_id(env, object_ids[i]);\n+    for (size_t i = 0; i < bson_object_ids.size(); ++i) {\n+        auto object_id = static_cast<ObjectId>(bson_object_ids[i]);", "originalCommit": "26fa897930b247f7237c6f8057174a22b46c5f48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "af2c63550d14d60b3752c0834e2049ec6be45406", "url": "https://github.com/realm/realm-java/commit/af2c63550d14d60b3752c0834e2049ec6be45406", "message": "Added functionality to allow that the \"_id\" field may not solely be type ObjectId. Added new configuration that defines \"_id\" as integer to test other types and updated tests. Also updated OS pointer to the latest v10 commit.", "committedDate": "2020-10-09T09:43:07Z", "type": "commit"}, {"oid": "f588805f80444cd21fae818f861bc1195ae45ebe", "url": "https://github.com/realm/realm-java/commit/f588805f80444cd21fae818f861bc1195ae45ebe", "message": "Removed illegal classes that contained embedded object cycles. Fixed EmbeddedTreeNode so that it doesn't contain cycles. Removed tests for the affected classes", "committedDate": "2020-10-09T13:36:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA1MDQ2NQ==", "url": "https://github.com/realm/realm-java/pull/7150#discussion_r503050465", "bodyText": "We normally remove this section if empty.", "author": "cmelchior", "createdAt": "2020-10-12T05:45:05Z", "path": "CHANGELOG.md", "diffHunk": "@@ -1,3 +1,23 @@\n+## 10.0.0-RC.2 (YYYY-MM-DD)\n+\n+### Breaking Changes", "originalCommit": "f588805f80444cd21fae818f861bc1195ae45ebe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA1MDU3NQ==", "url": "https://github.com/realm/realm-java/pull/7150#discussion_r503050575", "bodyText": "Should also list the changes to realm/realm-object-store#1116", "author": "cmelchior", "createdAt": "2020-10-12T05:45:27Z", "path": "CHANGELOG.md", "diffHunk": "@@ -1,3 +1,23 @@\n+## 10.0.0-RC.2 (YYYY-MM-DD)\n+\n+### Breaking Changes\n+* None.\n+\n+### Enhancements\n+* None.\n+\n+### Fixed\n+* It is now possible to use types different than `ObjectId` for the `_id` field in documents inserted with `MongoCollection.insertOne` and `MongoCollection.insertMany`.", "originalCommit": "f588805f80444cd21fae818f861bc1195ae45ebe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6148ebb8d5e284553f4a63fa8ef88512dd2207a2", "url": "https://github.com/realm/realm-java/commit/6148ebb8d5e284553f4a63fa8ef88512dd2207a2", "message": "Fix test and changelog", "committedDate": "2020-10-12T18:30:40Z", "type": "commit"}]}