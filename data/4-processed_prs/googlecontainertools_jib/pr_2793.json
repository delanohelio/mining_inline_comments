{"pr_number": 2793, "pr_title": "Check configured platforms for single image building", "pr_createdAt": "2020-09-30T19:42:36Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2793", "timeline": [{"oid": "ceb6e290cd954634ee3ba7292c3ce6247df2de58", "url": "https://github.com/GoogleContainerTools/jib/commit/ceb6e290cd954634ee3ba7292c3ce6247df2de58", "message": "Check configured platforms for single image building", "committedDate": "2020-09-30T19:27:01Z", "type": "commit"}, {"oid": "d64ba0fecb4881363efd45237327664933702167", "url": "https://github.com/GoogleContainerTools/jib/commit/d64ba0fecb4881363efd45237327664933702167", "message": "Fix copyright header", "committedDate": "2020-09-30T19:41:46Z", "type": "commit"}, {"oid": "29196821dbc9b8ccc4ed4065195e9b9d2d99f190", "url": "https://github.com/GoogleContainerTools/jib/commit/29196821dbc9b8ccc4ed4065195e9b9d2d99f190", "message": "Check cached manifest too", "committedDate": "2020-10-01T14:16:27Z", "type": "commit"}, {"oid": "e89e511b917f4d0fd80c2b90c83e02ffc60cc056", "url": "https://github.com/GoogleContainerTools/jib/commit/e89e511b917f4d0fd80c2b90c83e02ffc60cc056", "message": "Log when using cached local image too", "committedDate": "2020-10-01T16:09:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2NDQ5Mg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2793#discussion_r498364492", "bodyText": "This is when a local docker:// base image is cached.", "author": "chanseokoh", "createdAt": "2020-10-01T16:14:45Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/LocalBaseImageSteps.java", "diffHunk": "@@ -111,6 +111,8 @@ static boolean isGzipped(Path path) throws IOException {\n         Optional<LocalImage> cachedImage =\n             getCachedDockerImage(buildContext.getBaseImageLayersCache(), dockerImageDetails);\n         if (cachedImage.isPresent()) {\n+          PlatformChecker.checkManifestPlatform(\n+              buildContext, cachedImage.get().configurationTemplate);", "originalCommit": "e89e511b917f4d0fd80c2b90c83e02ffc60cc056", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2NDgwNg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2793#discussion_r498364806", "bodyText": "When using a local docker:// image that has not been cached.", "author": "chanseokoh", "createdAt": "2020-10-01T16:15:15Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/LocalBaseImageSteps.java", "diffHunk": "@@ -125,11 +127,14 @@ static boolean isGzipped(Path path) throws IOException {\n           dockerClient.save(imageReference, tarPath, throttledProgressReporter);\n         }\n \n-        return cacheDockerImageTar(\n-            buildContext,\n-            tarPath,\n-            progressEventDispatcher.newChildProducer(),\n-            tempDirectoryProvider);\n+        LocalImage localImage =\n+            cacheDockerImageTar(\n+                buildContext,\n+                tarPath,\n+                progressEventDispatcher.newChildProducer(),\n+                tempDirectoryProvider);\n+        PlatformChecker.checkManifestPlatform(buildContext, localImage.configurationTemplate);\n+        return localImage;", "originalCommit": "e89e511b917f4d0fd80c2b90c83e02ffc60cc056", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2NTIxOA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2793#discussion_r498365218", "bodyText": "When tar:// (covers both cached and fresh cases).", "author": "chanseokoh", "createdAt": "2020-10-01T16:15:51Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/LocalBaseImageSteps.java", "diffHunk": "@@ -139,9 +144,13 @@ static boolean isGzipped(Path path) throws IOException {\n       ProgressEventDispatcher.Factory progressEventDispatcherFactory,\n       Path tarPath,\n       TempDirectoryProvider tempDirectoryProvider) {\n-    return () ->\n-        cacheDockerImageTar(\n-            buildContext, tarPath, progressEventDispatcherFactory, tempDirectoryProvider);\n+    return () -> {\n+      LocalImage localImage =\n+          cacheDockerImageTar(\n+              buildContext, tarPath, progressEventDispatcherFactory, tempDirectoryProvider);\n+      PlatformChecker.checkManifestPlatform(buildContext, localImage.configurationTemplate);\n+      return localImage;", "originalCommit": "e89e511b917f4d0fd80c2b90c83e02ffc60cc056", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2NTU3MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2793#discussion_r498365571", "bodyText": "When pulling a remote manifest (not cached).", "author": "chanseokoh", "createdAt": "2020-10-01T16:16:26Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -233,6 +233,7 @@ public ImagesAndRegistryClient call()\n       BuildableManifestTemplate imageManifest = (BuildableManifestTemplate) manifestTemplate;\n       ContainerConfigurationTemplate containerConfig =\n           pullContainerConfigJson(manifestAndDigest, registryClient, progressEventDispatcher);\n+      PlatformChecker.checkManifestPlatform(buildContext, containerConfig);", "originalCommit": "e89e511b917f4d0fd80c2b90c83e02ffc60cc056", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2NTcxMg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2793#discussion_r498365712", "bodyText": "When using a cached manifest for a remote base image.", "author": "chanseokoh", "createdAt": "2020-10-01T16:16:39Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -379,10 +380,14 @@ private ContainerConfigurationTemplate pullContainerConfigJson(\n         return Collections.singletonList(\n             JsonToImageTranslator.toImage((V21ManifestTemplate) manifest));\n       }\n+\n+      ContainerConfigurationTemplate containerConfig =\n+          Verify.verifyNotNull(manifestsAndConfigs.get(0).getConfig());\n+      PlatformChecker.checkManifestPlatform(buildContext, containerConfig);", "originalCommit": "e89e511b917f4d0fd80c2b90c83e02ffc60cc056", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "70a3897d3af47db4fae5e918522c74201a9f4b64", "url": "https://github.com/GoogleContainerTools/jib/commit/70a3897d3af47db4fae5e918522c74201a9f4b64", "message": "Fix style violation", "committedDate": "2020-10-01T16:18:17Z", "type": "commit"}, {"oid": "5ed7661cd1ced00f7792b0826e8590b01c01fe47", "url": "https://github.com/GoogleContainerTools/jib/commit/5ed7661cd1ced00f7792b0826e8590b01c01fe47", "message": "Fix path separater issue in tests on Windows", "committedDate": "2020-10-01T16:26:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1MDI5NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2793#discussion_r498450294", "bodyText": "Just making sure I'm understanding this correctly, so this check needs to be included because we don't have a way to differentiate between implicitly or explicitly configured platforms?", "author": "mpeddada1", "createdAt": "2020-10-01T18:52:20Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PlatformChecker.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.builder.steps;\n+\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.api.buildplan.Platform;\n+import com.google.cloud.tools.jib.configuration.BuildContext;\n+import com.google.cloud.tools.jib.event.EventHandlers;\n+import com.google.cloud.tools.jib.image.json.ContainerConfigurationTemplate;\n+import com.google.common.base.Verify;\n+import java.util.Set;\n+\n+/** Provides helper methods to check platforms. */\n+public class PlatformChecker {\n+\n+  /**\n+   * Assuming the base image is not a manifest list, checks and warns misconfigured platforms.\n+   *\n+   * @param buildContext the {@link BuildContext}\n+   * @param containerConfig container configuration JSON of the base image\n+   */\n+  static void checkManifestPlatform(\n+      BuildContext buildContext, ContainerConfigurationTemplate containerConfig) {\n+    EventHandlers eventHandlers = buildContext.getEventHandlers();\n+    String baseImageName =\n+        buildContext.getBaseImageConfiguration().getTarPath().isPresent()\n+            ? buildContext.getBaseImageConfiguration().getTarPath().get().toString()\n+            : buildContext.getBaseImageConfiguration().getImage().toString();\n+\n+    Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();\n+    Verify.verify(!platforms.isEmpty());\n+\n+    if (platforms.size() != 1) {\n+      eventHandlers.dispatch(\n+          LogEvent.warn(\n+              \"platforms configured, but '\" + baseImageName + \"' is not a manifest list\"));\n+    } else {\n+      Platform platform = platforms.iterator().next();\n+      if (!platform.getArchitecture().equals(containerConfig.getArchitecture())\n+          || !platform.getOs().equals(containerConfig.getOs())) {\n+\n+        // Unfortunately, \"platforms\" has amd64/linux by default even if the user didn't explicitly\n+        // configure it. Skip reporting to suppress false alarm.\n+        if (!(platform.getArchitecture().equals(\"amd64\") && platform.getOs().equals(\"linux\"))) {", "originalCommit": "5ed7661cd1ced00f7792b0826e8590b01c01fe47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1MjQ2OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2793#discussion_r498452468", "bodyText": "Yes, when it's a single platform of amd64/linux. That is, even if the user doesn't configure anything, platforms is a singleton set with amd64/linux. If you think the code comment on line 56-57 can be improved, feel free to suggest an edit.", "author": "chanseokoh", "createdAt": "2020-10-01T18:56:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1MDI5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1NTU5NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2793#discussion_r498455594", "bodyText": "Is there a way to check that the base image is in fact not a manifest list in this method, before we proceed to doing the other checks?", "author": "mpeddada1", "createdAt": "2020-10-01T19:02:40Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PlatformChecker.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.cloud.tools.jib.builder.steps;\n+\n+import com.google.cloud.tools.jib.api.LogEvent;\n+import com.google.cloud.tools.jib.api.buildplan.Platform;\n+import com.google.cloud.tools.jib.configuration.BuildContext;\n+import com.google.cloud.tools.jib.event.EventHandlers;\n+import com.google.cloud.tools.jib.image.json.ContainerConfigurationTemplate;\n+import com.google.common.base.Verify;\n+import java.util.Set;\n+\n+/** Provides helper methods to check platforms. */\n+public class PlatformChecker {\n+\n+  /**\n+   * Assuming the base image is not a manifest list, checks and warns misconfigured platforms.\n+   *\n+   * @param buildContext the {@link BuildContext}\n+   * @param containerConfig container configuration JSON of the base image\n+   */", "originalCommit": "5ed7661cd1ced00f7792b0826e8590b01c01fe47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ3ODk4Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2793#discussion_r498478987", "bodyText": "Yeah, I had the same question. I know this is a bit weird. It's mainly the consequence of factoring out some portion of code to reuse that in multiple places under certain conditions. But I think it's also weird to just pass something unnecessary to the method only to check the argument.", "author": "chanseokoh", "createdAt": "2020-10-01T19:52:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1NTU5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMzgwMg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2793#discussion_r498513802", "bodyText": "Yup, that's a valid point since it's meant to serve as a helper. As long as we check the condition before calling this method, we should be good.", "author": "mpeddada1", "createdAt": "2020-10-01T21:07:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1NTU5NA=="}], "type": "inlineReview"}]}