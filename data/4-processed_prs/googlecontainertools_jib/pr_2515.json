{"pr_number": 2515, "pr_title": "Proposal for jib cli buildfile", "pr_createdAt": "2020-06-08T17:54:55Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2515", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNTUyMg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r437035522", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # file properties only applied to layer this layer \"scripts and classes\"\n          \n          \n            \n                # file properties only applied to this layer \"scripts and classes\"", "author": "chanseokoh", "createdAt": "2020-06-08T22:27:05Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,118 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```\n+# \"FROM\" with option to use os/architecture for manifest lists\n+baseImage: \"gcr.io/distroless/java:8\"\n+osHint: linux\n+architectureHint: amd64\n+\n+creationTime: 0 # millis since epoch or iso8601 creation time\n+format: Docker # Docker or OCI\n+\n+environment:\n+  \"MY_KEY1\": \"value\"\n+  \"MY_KEY2\": \"value\"\n+labels:\n+  \"com.example.owner\": \"person\"\n+  \"com.example.mode\": \"dev\"\n+volumes:\n+  - \"/myvolume\"\n+  - \"/youvolume\"\n+\n+exposedPorts:\n+  - \"123/udp\"\n+  - \"456\"\n+  - \"789/tcp\"\n+\n+user: root\n+workingDirectory: \"/somewhere\"\n+entrypoint:\n+  - \"java\"\n+  - \"-jar\"\n+cmd:\n+  - \"myjar.jar\"\n+\n+# global file properties applied to all layers\n+fileProperties:\n+  filePermissions: \"644\"\n+  directoryPermissions: \"755\"\n+  user: \"0\"\n+  group: \"0\"\n+  timestamp: \"0\"\n+layers:\n+  - name: \"scripts and classes\"\n+    # file properties only applied to layer this layer \"scripts and classes\"", "originalCommit": "c4ea7ac28a69b56e3b917c2aa735ebef18c2efa7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNzY4NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r437037684", "bodyText": "TBH, I don't like this option. The Jib plugins deliberately exclude this option, as this completely nullifies caching and reproducibility almost all the time.", "author": "chanseokoh", "createdAt": "2020-06-08T22:32:50Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,118 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```\n+# \"FROM\" with option to use os/architecture for manifest lists\n+baseImage: \"gcr.io/distroless/java:8\"\n+osHint: linux\n+architectureHint: amd64\n+\n+creationTime: 0 # millis since epoch or iso8601 creation time\n+format: Docker # Docker or OCI\n+\n+environment:\n+  \"MY_KEY1\": \"value\"\n+  \"MY_KEY2\": \"value\"\n+labels:\n+  \"com.example.owner\": \"person\"\n+  \"com.example.mode\": \"dev\"\n+volumes:\n+  - \"/myvolume\"\n+  - \"/youvolume\"\n+\n+exposedPorts:\n+  - \"123/udp\"\n+  - \"456\"\n+  - \"789/tcp\"\n+\n+user: root\n+workingDirectory: \"/somewhere\"\n+entrypoint:\n+  - \"java\"\n+  - \"-jar\"\n+cmd:\n+  - \"myjar.jar\"\n+\n+# global file properties applied to all layers\n+fileProperties:\n+  filePermissions: \"644\"\n+  directoryPermissions: \"755\"\n+  user: \"0\"\n+  group: \"0\"\n+  timestamp: \"0\"\n+layers:\n+  - name: \"scripts and classes\"\n+    # file properties only applied to layer this layer \"scripts and classes\"\n+    fileProperties:\n+      filePermissions: \"333\"\n+      directoryPermissions: \"777\"\n+      user: \"goose\"\n+      group: \"3\"\n+      timestamp: \"2020-06-03T19:31:50+00:00\"\n+    files:\n+      - from: \"target/scripts\"\n+        to: \"/app/scripts\"\n+        # file properties only applied to this copy directive\n+        fileProperties:\n+          filePermissions: \"777\"\n+        # another copy for the same layer, with includes and excludes\n+      - from: \"target/classes\"\n+        to: \"/app/classes\"\n+        excludes:\n+          - \"**/goose.class\"\n+          - \"**/moose.class\"\n+        includes:\n+          - \"**/*.class\"\n+    # another layer, only globally defined file permissions are applied here\n+  - name: \"other\"\n+    files:\n+      - from: \"build/other\"\n+        to: \"/app\"\n+```\n+\n+## Layers\n+\n+`layers` are a list of layer directives, each directive consisting of 3 parts\n+* `name`: the name of the layer (metadata)\n+* `filesProperites`: on disk metadata for all files in the layer\n+* `files`: a list of copy directies\n+\n+`files` are a list of copy directives that consist of 2 required and 3 optional parts\n+* `to` *required*: an absolute path to copy the files to on the container\n+* `from` *required*: a file, or directory on disk to copy from\n+* `includes`: only includes the patterns matched in this parameter\n+* `exludes`: excludes all files (higher prescendence than `includes`) matched in this parameter\n+* `fileproperties`: on disk metadata for all files in this copy directive\n+\n+### FileProperties\n+\n+File properties are available at 3 levels\n+* Global: applies to all layers\n+* Layer: applies to a single layer\n+* Copy: applies to a single copy directive\n+\n+Properties can be defined at any level and are applied in a cascading fashion.\n+- All properties in `Copy` are applied first\n+- Any property not in `Copy` are applied from `Layer`\n+- Any property not in `Copy` or `Layer` are applied from `Global`\n+- Any property not defined anywhere use jib system defaults.\n+\n+\n+## Extented features (not included in this build)\n+\n+### Other time options\n+* `actual`: use timestamp from file on disk", "originalCommit": "c4ea7ac28a69b56e3b917c2aa735ebef18c2efa7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyOTE3OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r437129179", "bodyText": "There are use-cases for this.  It shouldn't be the default, and these reasons can be expressed.  But we shouldn't prevent it.", "author": "briandealwis", "createdAt": "2020-06-09T04:21:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNzY4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU1ODgxMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r437558811", "bodyText": "Ah, yeah, I remembered our last discussion on this. Let's keep this.", "author": "chanseokoh", "createdAt": "2020-06-09T16:22:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNzY4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzOTQ5OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r437039499", "bodyText": "As we discussed, I imagine eventually we will end up implementing this, but I think we would keep this as a low priority for some time. I guess there are numerous templating solutions, and I think people will have no issue using them with a script considering that this is a CLI tool.\nBTW, templating is like a feature that tools like Jib CLI can support independent of this spec; it doesn't need to be part of this buildfile spec.", "author": "chanseokoh", "createdAt": "2020-06-08T22:37:58Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,118 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```\n+# \"FROM\" with option to use os/architecture for manifest lists\n+baseImage: \"gcr.io/distroless/java:8\"\n+osHint: linux\n+architectureHint: amd64\n+\n+creationTime: 0 # millis since epoch or iso8601 creation time\n+format: Docker # Docker or OCI\n+\n+environment:\n+  \"MY_KEY1\": \"value\"\n+  \"MY_KEY2\": \"value\"\n+labels:\n+  \"com.example.owner\": \"person\"\n+  \"com.example.mode\": \"dev\"\n+volumes:\n+  - \"/myvolume\"\n+  - \"/youvolume\"\n+\n+exposedPorts:\n+  - \"123/udp\"\n+  - \"456\"\n+  - \"789/tcp\"\n+\n+user: root\n+workingDirectory: \"/somewhere\"\n+entrypoint:\n+  - \"java\"\n+  - \"-jar\"\n+cmd:\n+  - \"myjar.jar\"\n+\n+# global file properties applied to all layers\n+fileProperties:\n+  filePermissions: \"644\"\n+  directoryPermissions: \"755\"\n+  user: \"0\"\n+  group: \"0\"\n+  timestamp: \"0\"\n+layers:\n+  - name: \"scripts and classes\"\n+    # file properties only applied to layer this layer \"scripts and classes\"\n+    fileProperties:\n+      filePermissions: \"333\"\n+      directoryPermissions: \"777\"\n+      user: \"goose\"\n+      group: \"3\"\n+      timestamp: \"2020-06-03T19:31:50+00:00\"\n+    files:\n+      - from: \"target/scripts\"\n+        to: \"/app/scripts\"\n+        # file properties only applied to this copy directive\n+        fileProperties:\n+          filePermissions: \"777\"\n+        # another copy for the same layer, with includes and excludes\n+      - from: \"target/classes\"\n+        to: \"/app/classes\"\n+        excludes:\n+          - \"**/goose.class\"\n+          - \"**/moose.class\"\n+        includes:\n+          - \"**/*.class\"\n+    # another layer, only globally defined file permissions are applied here\n+  - name: \"other\"\n+    files:\n+      - from: \"build/other\"\n+        to: \"/app\"\n+```\n+\n+## Layers\n+\n+`layers` are a list of layer directives, each directive consisting of 3 parts\n+* `name`: the name of the layer (metadata)\n+* `filesProperites`: on disk metadata for all files in the layer\n+* `files`: a list of copy directies\n+\n+`files` are a list of copy directives that consist of 2 required and 3 optional parts\n+* `to` *required*: an absolute path to copy the files to on the container\n+* `from` *required*: a file, or directory on disk to copy from\n+* `includes`: only includes the patterns matched in this parameter\n+* `exludes`: excludes all files (higher prescendence than `includes`) matched in this parameter\n+* `fileproperties`: on disk metadata for all files in this copy directive\n+\n+### FileProperties\n+\n+File properties are available at 3 levels\n+* Global: applies to all layers\n+* Layer: applies to a single layer\n+* Copy: applies to a single copy directive\n+\n+Properties can be defined at any level and are applied in a cascading fashion.\n+- All properties in `Copy` are applied first\n+- Any property not in `Copy` are applied from `Layer`\n+- Any property not in `Copy` or `Layer` are applied from `Global`\n+- Any property not defined anywhere use jib system defaults.\n+\n+\n+## Extented features (not included in this build)\n+\n+### Other time options\n+* `actual`: use timestamp from file on disk\n+* `now`: use time of build\n+\n+### Templating\n+Allow passing of values into build to be replaced in buildfile", "originalCommit": "c4ea7ac28a69b56e3b917c2aa735ebef18c2efa7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEyMDk1Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r438120956", "bodyText": "removed for now", "author": "loosebazooka", "createdAt": "2020-06-10T13:27:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzOTQ5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0MTgzMA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r437041830", "bodyText": "The build plan allows adding a layer archive tarball. Perhaps Jib CLI can support that too?", "author": "chanseokoh", "createdAt": "2020-06-08T22:44:58Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,118 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```\n+# \"FROM\" with option to use os/architecture for manifest lists\n+baseImage: \"gcr.io/distroless/java:8\"\n+osHint: linux\n+architectureHint: amd64\n+\n+creationTime: 0 # millis since epoch or iso8601 creation time\n+format: Docker # Docker or OCI\n+\n+environment:\n+  \"MY_KEY1\": \"value\"\n+  \"MY_KEY2\": \"value\"\n+labels:\n+  \"com.example.owner\": \"person\"\n+  \"com.example.mode\": \"dev\"\n+volumes:\n+  - \"/myvolume\"\n+  - \"/youvolume\"\n+\n+exposedPorts:\n+  - \"123/udp\"\n+  - \"456\"\n+  - \"789/tcp\"\n+\n+user: root\n+workingDirectory: \"/somewhere\"\n+entrypoint:\n+  - \"java\"\n+  - \"-jar\"\n+cmd:\n+  - \"myjar.jar\"\n+\n+# global file properties applied to all layers\n+fileProperties:\n+  filePermissions: \"644\"\n+  directoryPermissions: \"755\"\n+  user: \"0\"\n+  group: \"0\"\n+  timestamp: \"0\"\n+layers:", "originalCommit": "c4ea7ac28a69b56e3b917c2aa735ebef18c2efa7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY0OTE2Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r437649167", "bodyText": "yeah i'm looking into how to support that parsing with the yaml parser I'm using", "author": "loosebazooka", "createdAt": "2020-06-09T18:55:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0MTgzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExMTI3OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r438111279", "bodyText": "So yeah with a custom parser, this is possible, I've implemented in prototype and I think this should work. I do want to ask you some questions later today about mediatype and file which I don't have a great grasp on.", "author": "loosebazooka", "createdAt": "2020-06-10T13:14:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0MTgzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2MjQyMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r438362421", "bodyText": "I think specifying mediaType is pretty common and standard to specify the type (.tar, .tgz/.tar.gz, .zip, .xz, etc.). I am not sure if any compression format is allowed in the image spec or used in practice, but the OCI Image Spec does list some interesting types for a layer tar archive: .tar, .tar.gz, and .tar.zstd. I think Jib CLI can accept either .tar or .tgz/.tar.gz at least; either way, it has to either compress or decompress the archive to compute a digest.", "author": "chanseokoh", "createdAt": "2020-06-10T19:35:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0MTgzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyODQ5Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r437128493", "bodyText": "Why Hint?  It could signify something optional that could be ignored?  Why not os and arch?", "author": "briandealwis", "createdAt": "2020-06-09T04:18:42Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,118 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```\n+# \"FROM\" with option to use os/architecture for manifest lists\n+baseImage: \"gcr.io/distroless/java:8\"\n+osHint: linux\n+architectureHint: amd64", "originalCommit": "c4ea7ac28a69b56e3b917c2aa735ebef18c2efa7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY0OTU1Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r437649553", "bodyText": "I just copied this part from the buildplan. @chanseokoh why did we use hint there?", "author": "loosebazooka", "createdAt": "2020-06-09T18:56:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyODQ5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1NzU2OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r437657568", "bodyText": "The user must provide a value to this field when the given base image is a manifest list. However, when the base image is an image, a tool must inherit the value from the base image while ignoring this field (or the tool may decided to throw an error).\nAs a general spec describing a plan to build an image in a declarative manner, I wanted to avoid possible confusion that someone mistakenly assumes that by specifying os: arm64, they will create an ARM64 image. Before you can actually check the base image reference at runtime, you won't know the final outcome.", "author": "chanseokoh", "createdAt": "2020-06-09T19:10:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyODQ5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY2NzI0OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r437667248", "bodyText": "However, when the base image is an image, a tool must inherit the value from the base image while ignoring this field (or the tool may decided to throw an error).\n\nWhere is this requirement come from?\nGiven that the os/arch is normally inherited, most users should never need to use this unless they're either creating a scratch image or if they mean to override the settings from a different image.  There are (were?) some ARM images on Docker Hub that identified as being amd64.  I believe distroless/base has no actual machine-specific code.", "author": "briandealwis", "createdAt": "2020-06-09T19:28:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyODQ5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY4NzkzNw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r437687937", "bodyText": "if they mean to override the settings from a different image.\n\nSomeone doing this doesn't make sense to me. It means an image has wrong metadata, which should be fixed. I don't know if some Docker Hub images had wrong image metadata, but that's an error from the image creator.\nIn any case, this is a spec, and for this part, I think it doesn't have to mandate a certain interpretation in an implementation. A tool may provide an option like --force-os-arch (which I think is really unnecessary in practice). But for the reason of the potential confusion I explained, I think osHint (or something else if there's a better term than Hint) is better than os.", "author": "chanseokoh", "createdAt": "2020-06-09T20:08:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyODQ5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY5NTk0OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r437695948", "bodyText": "Yeah I agree that correcting someone else's error is really our problem. But yeah I remember now that using hint here implies that you're not setting anything.", "author": "loosebazooka", "createdAt": "2020-06-09T20:23:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyODQ5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExMTgzOA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r438111838", "bodyText": "I changed this to baseImageOs, baseImageArchitecture to make it more obvious what it is doing.\nWe can\n\nverify a base image matches expectations\nchose an image from a manifest list", "author": "loosebazooka", "createdAt": "2020-06-10T13:15:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyODQ5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyODYxNA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r437128614", "bodyText": "Is this YAML?  Should be explicit.", "author": "briandealwis", "createdAt": "2020-06-09T04:19:17Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,118 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.", "originalCommit": "c4ea7ac28a69b56e3b917c2aa735ebef18c2efa7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyOTMzNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r437129335", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * `files`: a list of copy directies\n          \n          \n            \n            * `files`: a list of _copy directives_ (see below)", "author": "briandealwis", "createdAt": "2020-06-09T04:22:32Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,118 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```\n+# \"FROM\" with option to use os/architecture for manifest lists\n+baseImage: \"gcr.io/distroless/java:8\"\n+osHint: linux\n+architectureHint: amd64\n+\n+creationTime: 0 # millis since epoch or iso8601 creation time\n+format: Docker # Docker or OCI\n+\n+environment:\n+  \"MY_KEY1\": \"value\"\n+  \"MY_KEY2\": \"value\"\n+labels:\n+  \"com.example.owner\": \"person\"\n+  \"com.example.mode\": \"dev\"\n+volumes:\n+  - \"/myvolume\"\n+  - \"/youvolume\"\n+\n+exposedPorts:\n+  - \"123/udp\"\n+  - \"456\"\n+  - \"789/tcp\"\n+\n+user: root\n+workingDirectory: \"/somewhere\"\n+entrypoint:\n+  - \"java\"\n+  - \"-jar\"\n+cmd:\n+  - \"myjar.jar\"\n+\n+# global file properties applied to all layers\n+fileProperties:\n+  filePermissions: \"644\"\n+  directoryPermissions: \"755\"\n+  user: \"0\"\n+  group: \"0\"\n+  timestamp: \"0\"\n+layers:\n+  - name: \"scripts and classes\"\n+    # file properties only applied to layer this layer \"scripts and classes\"\n+    fileProperties:\n+      filePermissions: \"333\"\n+      directoryPermissions: \"777\"\n+      user: \"goose\"\n+      group: \"3\"\n+      timestamp: \"2020-06-03T19:31:50+00:00\"\n+    files:\n+      - from: \"target/scripts\"\n+        to: \"/app/scripts\"\n+        # file properties only applied to this copy directive\n+        fileProperties:\n+          filePermissions: \"777\"\n+        # another copy for the same layer, with includes and excludes\n+      - from: \"target/classes\"\n+        to: \"/app/classes\"\n+        excludes:\n+          - \"**/goose.class\"\n+          - \"**/moose.class\"\n+        includes:\n+          - \"**/*.class\"\n+    # another layer, only globally defined file permissions are applied here\n+  - name: \"other\"\n+    files:\n+      - from: \"build/other\"\n+        to: \"/app\"\n+```\n+\n+## Layers\n+\n+`layers` are a list of layer directives, each directive consisting of 3 parts\n+* `name`: the name of the layer (metadata)\n+* `filesProperites`: on disk metadata for all files in the layer\n+* `files`: a list of copy directies", "originalCommit": "c4ea7ac28a69b56e3b917c2aa735ebef18c2efa7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyOTgwOA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r437129808", "bodyText": "Seems odd to have \"fileProperties\" contain \"directoryPermissions\"?  Could this be named \"properties\"?", "author": "briandealwis", "createdAt": "2020-06-09T04:24:58Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,118 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```\n+# \"FROM\" with option to use os/architecture for manifest lists\n+baseImage: \"gcr.io/distroless/java:8\"\n+osHint: linux\n+architectureHint: amd64\n+\n+creationTime: 0 # millis since epoch or iso8601 creation time\n+format: Docker # Docker or OCI\n+\n+environment:\n+  \"MY_KEY1\": \"value\"\n+  \"MY_KEY2\": \"value\"\n+labels:\n+  \"com.example.owner\": \"person\"\n+  \"com.example.mode\": \"dev\"\n+volumes:\n+  - \"/myvolume\"\n+  - \"/youvolume\"\n+\n+exposedPorts:\n+  - \"123/udp\"\n+  - \"456\"\n+  - \"789/tcp\"\n+\n+user: root\n+workingDirectory: \"/somewhere\"\n+entrypoint:\n+  - \"java\"\n+  - \"-jar\"\n+cmd:\n+  - \"myjar.jar\"\n+\n+# global file properties applied to all layers\n+fileProperties:\n+  filePermissions: \"644\"\n+  directoryPermissions: \"755\"\n+  user: \"0\"\n+  group: \"0\"\n+  timestamp: \"0\"\n+layers:\n+  - name: \"scripts and classes\"\n+    # file properties only applied to layer this layer \"scripts and classes\"\n+    fileProperties:", "originalCommit": "c4ea7ac28a69b56e3b917c2aa735ebef18c2efa7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1MDAxMw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r437650013", "bodyText": "yeah that was weird. but directories are files no? I don't know exactly how this part should be named.", "author": "loosebazooka", "createdAt": "2020-06-09T18:56:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyOTgwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExNzk2MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r438117960", "bodyText": "renamed global level to layerProperties and sublevels to properties", "author": "loosebazooka", "createdAt": "2020-06-10T13:23:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyOTgwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEzMDI1MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r437130251", "bodyText": "Might it be clearer to say that each property (permission, owner, group, timestamp) is resolved in the following order?", "author": "briandealwis", "createdAt": "2020-06-09T04:26:40Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,118 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```\n+# \"FROM\" with option to use os/architecture for manifest lists\n+baseImage: \"gcr.io/distroless/java:8\"\n+osHint: linux\n+architectureHint: amd64\n+\n+creationTime: 0 # millis since epoch or iso8601 creation time\n+format: Docker # Docker or OCI\n+\n+environment:\n+  \"MY_KEY1\": \"value\"\n+  \"MY_KEY2\": \"value\"\n+labels:\n+  \"com.example.owner\": \"person\"\n+  \"com.example.mode\": \"dev\"\n+volumes:\n+  - \"/myvolume\"\n+  - \"/youvolume\"\n+\n+exposedPorts:\n+  - \"123/udp\"\n+  - \"456\"\n+  - \"789/tcp\"\n+\n+user: root\n+workingDirectory: \"/somewhere\"\n+entrypoint:\n+  - \"java\"\n+  - \"-jar\"\n+cmd:\n+  - \"myjar.jar\"\n+\n+# global file properties applied to all layers\n+fileProperties:\n+  filePermissions: \"644\"\n+  directoryPermissions: \"755\"\n+  user: \"0\"\n+  group: \"0\"\n+  timestamp: \"0\"\n+layers:\n+  - name: \"scripts and classes\"\n+    # file properties only applied to layer this layer \"scripts and classes\"\n+    fileProperties:\n+      filePermissions: \"333\"\n+      directoryPermissions: \"777\"\n+      user: \"goose\"\n+      group: \"3\"\n+      timestamp: \"2020-06-03T19:31:50+00:00\"\n+    files:\n+      - from: \"target/scripts\"\n+        to: \"/app/scripts\"\n+        # file properties only applied to this copy directive\n+        fileProperties:\n+          filePermissions: \"777\"\n+        # another copy for the same layer, with includes and excludes\n+      - from: \"target/classes\"\n+        to: \"/app/classes\"\n+        excludes:\n+          - \"**/goose.class\"\n+          - \"**/moose.class\"\n+        includes:\n+          - \"**/*.class\"\n+    # another layer, only globally defined file permissions are applied here\n+  - name: \"other\"\n+    files:\n+      - from: \"build/other\"\n+        to: \"/app\"\n+```\n+\n+## Layers\n+\n+`layers` are a list of layer directives, each directive consisting of 3 parts\n+* `name`: the name of the layer (metadata)\n+* `filesProperites`: on disk metadata for all files in the layer\n+* `files`: a list of copy directies\n+\n+`files` are a list of copy directives that consist of 2 required and 3 optional parts\n+* `to` *required*: an absolute path to copy the files to on the container\n+* `from` *required*: a file, or directory on disk to copy from\n+* `includes`: only includes the patterns matched in this parameter\n+* `exludes`: excludes all files (higher prescendence than `includes`) matched in this parameter\n+* `fileproperties`: on disk metadata for all files in this copy directive\n+\n+### FileProperties\n+\n+File properties are available at 3 levels\n+* Global: applies to all layers\n+* Layer: applies to a single layer\n+* Copy: applies to a single copy directive\n+\n+Properties can be defined at any level and are applied in a cascading fashion.", "originalCommit": "c4ea7ac28a69b56e3b917c2aa735ebef18c2efa7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "15051291dc2b50fad22ac5f27e41ebf5374ae831", "url": "https://github.com/GoogleContainerTools/jib/commit/15051291dc2b50fad22ac5f27e41ebf5374ae831", "message": "review changes", "committedDate": "2020-06-10T13:22:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM1OTM1NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r438359355", "bodyText": "When implementing this, keep in mind what exactly you want jib-cli to do when\n\nentrypoint is missing\nentrypoint: null (built-in null)\nentrypoint: ~ (ditto)\nentrypoint: (ditto. A parser may incorrectly auto-convert it into an empty array?)\nentrypoint: [] (an empty array?)\n\nespecially when considering that people may auto-generate the file or use templates. I guess most of the time, you'll just want to inherit the entrypoint from the base image, as it doesn't make sense to clear an entrypoint. (The behavior is spelled out in the Build Plan.)\nThis also applies to other fields.", "author": "chanseokoh", "createdAt": "2020-06-10T19:29:51Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,128 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a YAML buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```\n+# \"FROM\" with option to use os/architecture for manifest lists\n+baseImage: \"gcr.io/distroless/java:8\"\n+baseImageOs: linux\n+baseImageArchitecture: amd64\n+\n+creationTime: 0 # millis since epoch or iso8601 creation time\n+format: Docker # Docker or OCI\n+\n+environment:\n+  \"MY_KEY1\": \"value\"\n+  \"MY_KEY2\": \"value\"\n+labels:\n+  \"com.example.owner\": \"person\"\n+  \"com.example.mode\": \"dev\"\n+volumes:\n+  - \"/myvolume\"\n+  - \"/youvolume\"\n+\n+exposedPorts:\n+  - \"123/udp\"\n+  - \"456\"\n+  - \"789/tcp\"\n+\n+user: root\n+workingDirectory: \"/somewhere\"\n+entrypoint:\n+  - \"java\"\n+  - \"-jar\"\n+cmd:\n+  - \"myjar.jar\"", "originalCommit": "15051291dc2b50fad22ac5f27e41ebf5374ae831", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwOTAyNg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r438909026", "bodyText": "The parser itself doesn't do much, it allows lists of strings and that's it. Validation (beyond simple type validation) will probably happen at a different level.", "author": "loosebazooka", "createdAt": "2020-06-11T16:16:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM1OTM1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2MDMxNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r438360315", "bodyText": "Also keep in mind these should always be \"additions.\" It probably doesn't have to provide a way to reset or delete values coming from the base image. (The behavior is spelled out in the Build Plan.)", "author": "chanseokoh", "createdAt": "2020-06-10T19:31:46Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,128 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a YAML buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```\n+# \"FROM\" with option to use os/architecture for manifest lists\n+baseImage: \"gcr.io/distroless/java:8\"\n+baseImageOs: linux\n+baseImageArchitecture: amd64\n+\n+creationTime: 0 # millis since epoch or iso8601 creation time\n+format: Docker # Docker or OCI\n+\n+environment:\n+  \"MY_KEY1\": \"value\"\n+  \"MY_KEY2\": \"value\"\n+labels:\n+  \"com.example.owner\": \"person\"\n+  \"com.example.mode\": \"dev\"\n+volumes:\n+  - \"/myvolume\"\n+  - \"/youvolume\"\n+\n+exposedPorts:", "originalCommit": "15051291dc2b50fad22ac5f27e41ebf5374ae831", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2MzMyNw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r438363327", "bodyText": "mediatype --> mediaType\nSo, considering the different media types, probably it's safer to name this field differently rather than tar. Theoretically Jib CLI could accept all sorts of forms like .zip and convert it to a .tar for convenience, but I don't know if that's a good idea.", "author": "chanseokoh", "createdAt": "2020-06-10T19:37:37Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,128 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a YAML buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```\n+# \"FROM\" with option to use os/architecture for manifest lists\n+baseImage: \"gcr.io/distroless/java:8\"\n+baseImageOs: linux\n+baseImageArchitecture: amd64\n+\n+creationTime: 0 # millis since epoch or iso8601 creation time\n+format: Docker # Docker or OCI\n+\n+environment:\n+  \"MY_KEY1\": \"value\"\n+  \"MY_KEY2\": \"value\"\n+labels:\n+  \"com.example.owner\": \"person\"\n+  \"com.example.mode\": \"dev\"\n+volumes:\n+  - \"/myvolume\"\n+  - \"/youvolume\"\n+\n+exposedPorts:\n+  - \"123/udp\"\n+  - \"456\"\n+  - \"789/tcp\"\n+\n+user: root\n+workingDirectory: \"/somewhere\"\n+entrypoint:\n+  - \"java\"\n+  - \"-jar\"\n+cmd:\n+  - \"myjar.jar\"\n+\n+# global file properties applied to all layers\n+layerProperties:\n+  filePermissions: \"644\"\n+  directoryPermissions: \"755\"\n+  user: \"0\"\n+  group: \"0\"\n+  timestamp: \"0\"\n+layers:\n+  - name: \"scripts and classes\"\n+    # file properties only applied to this layer \"scripts and classes\"\n+    properties:\n+      filePermissions: \"333\"\n+      directoryPermissions: \"777\"\n+      user: \"goose\"\n+      group: \"3\"\n+      timestamp: \"2020-06-03T19:31:50+00:00\"\n+    files:\n+      - from: \"target/scripts\"\n+        to: \"/app/scripts\"\n+        # file properties only applied to this copy directive\n+        properties:\n+          filePermissions: \"777\"\n+        # another copy for the same layer, with includes and excludes\n+      - from: \"target/classes\"\n+        to: \"/app/classes\"\n+        excludes:\n+          - \"**/goose.class\"\n+          - \"**/moose.class\"\n+        includes:\n+          - \"**/*.class\"\n+    # another layer, only globally defined file permissions are applied here\n+  - name: \"other\"\n+    files:\n+      - from: \"build/other\"\n+        to: \"/app\"\n+    # a tar layer \n+  - name: \"some tar layer\"\n+    mediatype: \"some/mediatype\"\n+    tar: \"build/generated.tar\"", "originalCommit": "15051291dc2b50fad22ac5f27e41ebf5374ae831", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgwNTg0OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r438805848", "bodyText": "gotcha, maybe archive?", "author": "loosebazooka", "createdAt": "2020-06-11T13:56:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2MzMyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0MTYxNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r438841615", "bodyText": "That works.", "author": "chanseokoh", "createdAt": "2020-06-11T14:47:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2MzMyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzMDE3OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r438830179", "bodyText": "It'd be nice to support a foreign-layer and/or URL.  Ideally in such a way that it doesn't need to change to switch between format: Docker and format: OCI.", "author": "briandealwis", "createdAt": "2020-06-11T14:30:52Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,128 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a YAML buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```\n+# \"FROM\" with option to use os/architecture for manifest lists\n+baseImage: \"gcr.io/distroless/java:8\"\n+baseImageOs: linux\n+baseImageArchitecture: amd64\n+\n+creationTime: 0 # millis since epoch or iso8601 creation time\n+format: Docker # Docker or OCI\n+\n+environment:\n+  \"MY_KEY1\": \"value\"\n+  \"MY_KEY2\": \"value\"\n+labels:\n+  \"com.example.owner\": \"person\"\n+  \"com.example.mode\": \"dev\"\n+volumes:\n+  - \"/myvolume\"\n+  - \"/youvolume\"\n+\n+exposedPorts:\n+  - \"123/udp\"\n+  - \"456\"\n+  - \"789/tcp\"\n+\n+user: root\n+workingDirectory: \"/somewhere\"\n+entrypoint:\n+  - \"java\"\n+  - \"-jar\"\n+cmd:\n+  - \"myjar.jar\"\n+\n+# global file properties applied to all layers\n+layerProperties:\n+  filePermissions: \"644\"\n+  directoryPermissions: \"755\"\n+  user: \"0\"\n+  group: \"0\"\n+  timestamp: \"0\"\n+layers:\n+  - name: \"scripts and classes\"\n+    # file properties only applied to this layer \"scripts and classes\"\n+    properties:\n+      filePermissions: \"333\"\n+      directoryPermissions: \"777\"\n+      user: \"goose\"\n+      group: \"3\"\n+      timestamp: \"2020-06-03T19:31:50+00:00\"\n+    files:\n+      - from: \"target/scripts\"\n+        to: \"/app/scripts\"\n+        # file properties only applied to this copy directive\n+        properties:\n+          filePermissions: \"777\"\n+        # another copy for the same layer, with includes and excludes\n+      - from: \"target/classes\"\n+        to: \"/app/classes\"\n+        excludes:\n+          - \"**/goose.class\"\n+          - \"**/moose.class\"\n+        includes:\n+          - \"**/*.class\"\n+    # another layer, only globally defined file permissions are applied here\n+  - name: \"other\"\n+    files:\n+      - from: \"build/other\"\n+        to: \"/app\"\n+    # a tar layer \n+  - name: \"some tar layer\"", "originalCommit": "15051291dc2b50fad22ac5f27e41ebf5374ae831", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzMjcxNg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r438832716", "bodyText": "Ideally in such a way that it doesn't need to change to switch between format: Docker and format: OCI.\n\nAssuming that is a goal.  I'm not sure it makes sense, especially if you're looking to explicitly support mediaTypes.", "author": "briandealwis", "createdAt": "2020-06-11T14:34:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzMDE3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzNjk2Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r438836967", "bodyText": "ah yes, forgot about this. Will add that in too.", "author": "loosebazooka", "createdAt": "2020-06-11T14:40:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzMDE3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0MTMzOA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r438841338", "bodyText": "For a foreign layer (which must use a URL), I think mediaType already covers that?\n\"mediaType\": \"application/vnd.docker.image.rootfs.foreign.diff.tar.gzip\"\n\nAnd a tool could just support URL in the archive (or archiveFile) field if they want?", "author": "chanseokoh", "createdAt": "2020-06-11T14:46:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzMDE3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwOTU5MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r438909590", "bodyText": "maybe url is the right name vs archive", "author": "loosebazooka", "createdAt": "2020-06-11T16:17:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzMDE3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxMjk1Nw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r438912957", "bodyText": "actually archive seems fine for now.", "author": "loosebazooka", "createdAt": "2020-06-11T16:22:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzMDE3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0MTI1MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r438841251", "bodyText": "There are other properties to select an image from a manifest list / image index.  Maybe this can be made more explicit as an map.  Something like:\nfrom:\n  image: \"gcr.io/distroless/java:8\"\n  platform:\n    os: linux\n    arch: arm\n    variant:  v6\n\nIt would be very useful to try expressing your format as a JSON schema so that it can be used to provide auto-complete support by IDEs.  @dgageot wrote some scripts for Skaffold to turn Go-based structures into JSON schema.", "author": "briandealwis", "createdAt": "2020-06-11T14:46:46Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,128 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a YAML buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```\n+# \"FROM\" with option to use os/architecture for manifest lists\n+baseImage: \"gcr.io/distroless/java:8\"\n+baseImageOs: linux", "originalCommit": "15051291dc2b50fad22ac5f27e41ebf5374ae831", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg1MjQ0Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r438852443", "bodyText": "Today a user filed an issue about building and pushing multi-platform images, so now I think perhaps we should accept a list of architectures/OSes (also in Build Plan).\nI'm definitely thinking of making Jib accept multiple values inside jib.from.", "author": "chanseokoh", "createdAt": "2020-06-11T15:02:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0MTI1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4OTg0Mg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445089842", "bodyText": "reworked this section.", "author": "loosebazooka", "createdAt": "2020-06-24T18:29:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0MTI1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0ODE0NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r438848145", "bodyText": "Including existing layers?  Maybe layerDefaults?\nBut maybe this is better handled by YAML aliases/anchors?  (Here's a nice overview)", "author": "briandealwis", "createdAt": "2020-06-11T14:56:32Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,128 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a YAML buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```\n+# \"FROM\" with option to use os/architecture for manifest lists\n+baseImage: \"gcr.io/distroless/java:8\"\n+baseImageOs: linux\n+baseImageArchitecture: amd64\n+\n+creationTime: 0 # millis since epoch or iso8601 creation time\n+format: Docker # Docker or OCI\n+\n+environment:\n+  \"MY_KEY1\": \"value\"\n+  \"MY_KEY2\": \"value\"\n+labels:\n+  \"com.example.owner\": \"person\"\n+  \"com.example.mode\": \"dev\"\n+volumes:\n+  - \"/myvolume\"\n+  - \"/youvolume\"\n+\n+exposedPorts:\n+  - \"123/udp\"\n+  - \"456\"\n+  - \"789/tcp\"\n+\n+user: root\n+workingDirectory: \"/somewhere\"\n+entrypoint:\n+  - \"java\"\n+  - \"-jar\"\n+cmd:\n+  - \"myjar.jar\"\n+\n+# global file properties applied to all layers", "originalCommit": "15051291dc2b50fad22ac5f27e41ebf5374ae831", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxNTY2MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r438915660", "bodyText": "It looks like anchors are kind of a \"UI\" thing, the parser should support it? This isn't something we have to implement in our data model?", "author": "loosebazooka", "createdAt": "2020-06-11T16:26:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0ODE0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4OTk0NQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445089945", "bodyText": "reworked this section", "author": "loosebazooka", "createdAt": "2020-06-24T18:29:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0ODE0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5NzI2OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r442397269", "bodyText": "kind: for type and versioning", "author": "loosebazooka", "createdAt": "2020-06-18T17:44:03Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,187 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a YAML buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```yaml\n+# \"FROM\" with option to use os/architecture for manifest lists", "originalCommit": "fe3e2d79426510d5cea8f367a982d379f77f9e9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwMzMyNg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r442403326", "bodyText": "Platform specific layers?\nplatforms:\n  - os:\n    architecture:", "author": "loosebazooka", "createdAt": "2020-06-18T17:54:49Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,187 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a YAML buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```yaml\n+# \"FROM\" with option to use os/architecture for manifest lists\n+from: \"gcr.io/distroless/java:8\"\n+\n+# \"FROM\" with detail for manifest lists or multiple architectures\n+from:\n+  image: \"gcr.io/distroless/java:8\"\n+  platforms:\n+    - architecture: \"arm\"\n+      os: \"linux\"\n+      os.version: \"a\"\n+      os.features:\n+        - \"b1\"\n+        - \"b2\"\n+      variant: \"c\"\n+      features:\n+        - \"d1\"\n+        - \"d2\"\n+    - architecutre: amd64\n+      os: darwin\n+\n+creationTime: 0 # millis since epoch or iso8601 creation time\n+format: Docker # Docker or OCI\n+\n+environment:\n+  \"MY_KEY1\": \"value\"\n+  \"MY_KEY2\": \"value\"\n+labels:\n+  \"com.example.owner\": \"person\"\n+  \"com.example.mode\": \"dev\"\n+volumes:\n+  - \"/myvolume\"\n+  - \"/youvolume\"\n+\n+exposedPorts:\n+  - \"123/udp\"\n+  - \"456\"\n+  - \"789/tcp\"\n+\n+user: root\n+workingDirectory: \"/somewhere\"\n+entrypoint:\n+  - \"java\"\n+  - \"-jar\"\n+cmd:\n+  - \"myjar.jar\"\n+\n+# global file properties applied to all layers\n+layerProperties:\n+  filePermissions: \"644\"\n+  directoryPermissions: \"755\"\n+  user: \"0\"\n+  group: \"0\"\n+  timestamp: \"0\"\n+layers:\n+  - name: \"scripts and classes\"", "originalCommit": "fe3e2d79426510d5cea8f367a982d379f77f9e9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA5MDA3Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445090076", "bodyText": "added section for supporting this", "author": "loosebazooka", "createdAt": "2020-06-24T18:29:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwMzMyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwNjM3OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r442406378", "bodyText": "alternative is to configure things for removal\nstrip:\n\nenvironment\nvolumes", "author": "loosebazooka", "createdAt": "2020-06-18T18:00:27Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,187 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a YAML buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```yaml\n+# \"FROM\" with option to use os/architecture for manifest lists\n+from: \"gcr.io/distroless/java:8\"\n+\n+# \"FROM\" with detail for manifest lists or multiple architectures\n+from:\n+  image: \"gcr.io/distroless/java:8\"\n+  platforms:\n+    - architecture: \"arm\"\n+      os: \"linux\"\n+      os.version: \"a\"\n+      os.features:\n+        - \"b1\"\n+        - \"b2\"\n+      variant: \"c\"\n+      features:\n+        - \"d1\"\n+        - \"d2\"\n+    - architecutre: amd64\n+      os: darwin\n+\n+creationTime: 0 # millis since epoch or iso8601 creation time\n+format: Docker # Docker or OCI\n+\n+environment:\n+  \"MY_KEY1\": \"value\"\n+  \"MY_KEY2\": \"value\"\n+labels:\n+  \"com.example.owner\": \"person\"\n+  \"com.example.mode\": \"dev\"\n+volumes:\n+  - \"/myvolume\"\n+  - \"/youvolume\"\n+\n+exposedPorts:\n+  - \"123/udp\"\n+  - \"456\"\n+  - \"789/tcp\"\n+\n+user: root\n+workingDirectory: \"/somewhere\"\n+entrypoint:\n+  - \"java\"\n+  - \"-jar\"\n+cmd:\n+  - \"myjar.jar\"\n+\n+# global file properties applied to all layers\n+layerProperties:\n+  filePermissions: \"644\"\n+  directoryPermissions: \"755\"\n+  user: \"0\"\n+  group: \"0\"\n+  timestamp: \"0\"\n+layers:\n+  - name: \"scripts and classes\"\n+    # file properties only applied to this layer \"scripts and classes\"\n+    properties:\n+      filePermissions: \"333\"\n+      directoryPermissions: \"777\"\n+      user: \"goose\"\n+      group: \"3\"\n+      timestamp: \"2020-06-03T19:31:50+00:00\"\n+    files:\n+      - from: \"target/scripts\"\n+        to: \"/app/scripts\"\n+        # file properties only applied to this copy directive\n+        properties:\n+          filePermissions: \"777\"\n+        # another copy for the same layer, with includes and excludes\n+      - from: \"target/classes\"\n+        to: \"/app/classes\"\n+        excludes:\n+          - \"**/goose.class\"\n+          - \"**/moose.class\"\n+        includes:\n+          - \"**/*.class\"\n+\n+    # another layer, only globally defined file permissions are applied here\n+  - name: \"other\"\n+    files:\n+      - from: \"build/other\"\n+        to: \"/app\"\n+\n+    # a archive layer using a tar, default mediaType\n+  - name: \"some tar layer\"\n+    archive: \"build/generated.tar\"\n+\n+    # a foreign layer using the optional mediatype for archive layers\n+  - name: \"some foreign layer\"\n+    mediaType: \"application/vnd.docker.image.rootfs.foreign.diff.tar.gzip\"\n+    archive: \"https://somewhere.com/layer\"\n+    # should we include size and digest here? I guess we can always ad tings\n+```\n+\n+## Layers\n+\n+`layers` are a list of `layer` directives\n+\n+`layer` directives can be `archive` or `file` layers\n+\n+a `archive` layer consists of 3 parts\n+* `name`: the name/description of the layer (metadata)\n+* `archive`: a tar file to include as a layer\n+* `mediatype`: the mediatype of archive\n+\n+a `file` layer consists of 3 parts\n+* `name`: the name of the layer (metadata)\n+* `properties`: on disk metadata for all files in the layer\n+* `files`: a list of *copy directies* (see below)\n+\n+`files` are a list of *copy directives* that consist of 2 required and 3 optional parts\n+* `to` *required*: an absolute path to copy the files to on the container\n+* `from` *required*: a file, or directory on disk to copy from\n+* `includes`: only includes the patterns matched in this parameter\n+* `exludes`: excludes all files (higher prescendence than `includes`) matched in this parameter\n+* `properties`: FilesProperties to represent on disk metadata for all files in this copy directive\n+\n+### FileProperties\n+\n+A list of properties that can be user specified for each file in a file layer\n+* filePermissions: An octal representing permissions for files\n+* directoryPermissions: An octal representing permissions for directories\n+* user: The ownership user property\n+* group: The ownership group property\n+* timestamp: millis since epoch or iso8601 creation time\n+\n+File properties are available at 3 levels\n+* Global (`layerProperties`): applies to all layers\n+* Layer (`properties`): applies to a single layer\n+* Copy (`properties`): applies to a single copy directive\n+\n+Each property (`filePermissions`, `directoryPermissions`, etc) can be defined at any level and are resolved in the follow order\n+- All properties in `Copy` are applied first\n+- Any properties not in `Copy` are applied from `Layer`\n+- Any properties not in `Copy` or `Layer` are applied from `Global`\n+- Any properties not defined anywhere use jib system defaults.\n+\n+\n+## Extented features (not included in this build)\n+\n+### Other time options\n+* `actual`: use timestamp from file on disk\n+* `now`: use time of build\n+\n+### Configurable base image value inheritance\n+Jib has some default behavior on inheritance of config parameters from the base image.\n+Perhaps this needs to be configurable\n+\n+(this is just an exploration, open to some ideas here)\n+\n+For all values in config of the base image, allow inheritance.\n+```\n+baseImage:\n+  from: \"gcr.io/birds/goose\"\n+  inherit:", "originalCommit": "fe3e2d79426510d5cea8f367a982d379f77f9e9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwODg3OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r442408878", "bodyText": "file copy behavior needs to be defined", "author": "loosebazooka", "createdAt": "2020-06-18T18:05:02Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,187 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a YAML buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```yaml\n+# \"FROM\" with option to use os/architecture for manifest lists\n+from: \"gcr.io/distroless/java:8\"\n+\n+# \"FROM\" with detail for manifest lists or multiple architectures\n+from:\n+  image: \"gcr.io/distroless/java:8\"\n+  platforms:\n+    - architecture: \"arm\"\n+      os: \"linux\"\n+      os.version: \"a\"\n+      os.features:\n+        - \"b1\"\n+        - \"b2\"\n+      variant: \"c\"\n+      features:\n+        - \"d1\"\n+        - \"d2\"\n+    - architecutre: amd64\n+      os: darwin\n+\n+creationTime: 0 # millis since epoch or iso8601 creation time\n+format: Docker # Docker or OCI\n+\n+environment:\n+  \"MY_KEY1\": \"value\"\n+  \"MY_KEY2\": \"value\"\n+labels:\n+  \"com.example.owner\": \"person\"\n+  \"com.example.mode\": \"dev\"\n+volumes:\n+  - \"/myvolume\"\n+  - \"/youvolume\"\n+\n+exposedPorts:\n+  - \"123/udp\"\n+  - \"456\"\n+  - \"789/tcp\"\n+\n+user: root\n+workingDirectory: \"/somewhere\"\n+entrypoint:\n+  - \"java\"\n+  - \"-jar\"\n+cmd:\n+  - \"myjar.jar\"\n+\n+# global file properties applied to all layers\n+layerProperties:\n+  filePermissions: \"644\"\n+  directoryPermissions: \"755\"\n+  user: \"0\"\n+  group: \"0\"\n+  timestamp: \"0\"\n+layers:\n+  - name: \"scripts and classes\"\n+    # file properties only applied to this layer \"scripts and classes\"\n+    properties:\n+      filePermissions: \"333\"\n+      directoryPermissions: \"777\"\n+      user: \"goose\"\n+      group: \"3\"\n+      timestamp: \"2020-06-03T19:31:50+00:00\"\n+    files:\n+      - from: \"target/scripts\"", "originalCommit": "fe3e2d79426510d5cea8f367a982d379f77f9e9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMDMwNw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r442410307", "bodyText": "target/bin/script.amd64\n->\n/app/bin/script (script is a file)", "author": "loosebazooka", "createdAt": "2020-06-18T18:07:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwODg3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMDgyNA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r442410824", "bodyText": "/app/bin/script/ is a directory\n/app/bin/script is a file, if from is a file\n/app/bin/script is a directory, if from is a directory", "author": "loosebazooka", "createdAt": "2020-06-18T18:08:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwODg3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMzg2Mg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r442413862", "bodyText": "what about the behavior of docker add/copy?", "author": "loosebazooka", "createdAt": "2020-06-18T18:14:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwODg3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMTE3Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r442421173", "bodyText": "symlinks?\n\nexpand out symlinks, they will be regular files on destination.\npreserve if contained within the layer\n\nalternatives\n\npreserve and hope the file exists on the destination system?\n\nsymlink features: expand, preserve (check rsync behavior)", "author": "loosebazooka", "createdAt": "2020-06-18T18:27:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwODg3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyNjM4OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r442426388", "bodyText": "can this just be keyword \"foreign?\"\nshould we remove mediatype", "author": "loosebazooka", "createdAt": "2020-06-18T18:37:25Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,187 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a YAML buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```yaml\n+# \"FROM\" with option to use os/architecture for manifest lists\n+from: \"gcr.io/distroless/java:8\"\n+\n+# \"FROM\" with detail for manifest lists or multiple architectures\n+from:\n+  image: \"gcr.io/distroless/java:8\"\n+  platforms:\n+    - architecture: \"arm\"\n+      os: \"linux\"\n+      os.version: \"a\"\n+      os.features:\n+        - \"b1\"\n+        - \"b2\"\n+      variant: \"c\"\n+      features:\n+        - \"d1\"\n+        - \"d2\"\n+    - architecutre: amd64\n+      os: darwin\n+\n+creationTime: 0 # millis since epoch or iso8601 creation time\n+format: Docker # Docker or OCI\n+\n+environment:\n+  \"MY_KEY1\": \"value\"\n+  \"MY_KEY2\": \"value\"\n+labels:\n+  \"com.example.owner\": \"person\"\n+  \"com.example.mode\": \"dev\"\n+volumes:\n+  - \"/myvolume\"\n+  - \"/youvolume\"\n+\n+exposedPorts:\n+  - \"123/udp\"\n+  - \"456\"\n+  - \"789/tcp\"\n+\n+user: root\n+workingDirectory: \"/somewhere\"\n+entrypoint:\n+  - \"java\"\n+  - \"-jar\"\n+cmd:\n+  - \"myjar.jar\"\n+\n+# global file properties applied to all layers\n+layerProperties:\n+  filePermissions: \"644\"\n+  directoryPermissions: \"755\"\n+  user: \"0\"\n+  group: \"0\"\n+  timestamp: \"0\"\n+layers:\n+  - name: \"scripts and classes\"\n+    # file properties only applied to this layer \"scripts and classes\"\n+    properties:\n+      filePermissions: \"333\"\n+      directoryPermissions: \"777\"\n+      user: \"goose\"\n+      group: \"3\"\n+      timestamp: \"2020-06-03T19:31:50+00:00\"\n+    files:\n+      - from: \"target/scripts\"\n+        to: \"/app/scripts\"\n+        # file properties only applied to this copy directive\n+        properties:\n+          filePermissions: \"777\"\n+        # another copy for the same layer, with includes and excludes\n+      - from: \"target/classes\"\n+        to: \"/app/classes\"\n+        excludes:\n+          - \"**/goose.class\"\n+          - \"**/moose.class\"\n+        includes:\n+          - \"**/*.class\"\n+\n+    # another layer, only globally defined file permissions are applied here\n+  - name: \"other\"\n+    files:\n+      - from: \"build/other\"\n+        to: \"/app\"\n+\n+    # a archive layer using a tar, default mediaType\n+  - name: \"some tar layer\"\n+    archive: \"build/generated.tar\"\n+\n+    # a foreign layer using the optional mediatype for archive layers\n+  - name: \"some foreign layer\"\n+    mediaType: \"application/vnd.docker.image.rootfs.foreign.diff.tar.gzip\"", "originalCommit": "fe3e2d79426510d5cea8f367a982d379f77f9e9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyNjcxNg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r442426716", "bodyText": "what about history entry?", "author": "loosebazooka", "createdAt": "2020-06-18T18:38:04Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,187 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a YAML buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```yaml\n+# \"FROM\" with option to use os/architecture for manifest lists\n+from: \"gcr.io/distroless/java:8\"\n+\n+# \"FROM\" with detail for manifest lists or multiple architectures\n+from:\n+  image: \"gcr.io/distroless/java:8\"\n+  platforms:\n+    - architecture: \"arm\"\n+      os: \"linux\"\n+      os.version: \"a\"\n+      os.features:\n+        - \"b1\"\n+        - \"b2\"\n+      variant: \"c\"\n+      features:\n+        - \"d1\"\n+        - \"d2\"\n+    - architecutre: amd64\n+      os: darwin\n+\n+creationTime: 0 # millis since epoch or iso8601 creation time\n+format: Docker # Docker or OCI\n+\n+environment:\n+  \"MY_KEY1\": \"value\"\n+  \"MY_KEY2\": \"value\"\n+labels:\n+  \"com.example.owner\": \"person\"\n+  \"com.example.mode\": \"dev\"\n+volumes:\n+  - \"/myvolume\"\n+  - \"/youvolume\"\n+\n+exposedPorts:\n+  - \"123/udp\"\n+  - \"456\"\n+  - \"789/tcp\"\n+\n+user: root\n+workingDirectory: \"/somewhere\"\n+entrypoint:\n+  - \"java\"\n+  - \"-jar\"\n+cmd:\n+  - \"myjar.jar\"\n+\n+# global file properties applied to all layers\n+layerProperties:\n+  filePermissions: \"644\"\n+  directoryPermissions: \"755\"\n+  user: \"0\"\n+  group: \"0\"\n+  timestamp: \"0\"\n+layers:\n+  - name: \"scripts and classes\"\n+    # file properties only applied to this layer \"scripts and classes\"\n+    properties:\n+      filePermissions: \"333\"\n+      directoryPermissions: \"777\"\n+      user: \"goose\"\n+      group: \"3\"\n+      timestamp: \"2020-06-03T19:31:50+00:00\"\n+    files:\n+      - from: \"target/scripts\"\n+        to: \"/app/scripts\"\n+        # file properties only applied to this copy directive\n+        properties:\n+          filePermissions: \"777\"\n+        # another copy for the same layer, with includes and excludes\n+      - from: \"target/classes\"\n+        to: \"/app/classes\"\n+        excludes:\n+          - \"**/goose.class\"\n+          - \"**/moose.class\"\n+        includes:\n+          - \"**/*.class\"\n+\n+    # another layer, only globally defined file permissions are applied here\n+  - name: \"other\"\n+    files:\n+      - from: \"build/other\"\n+        to: \"/app\"\n+\n+    # a archive layer using a tar, default mediaType\n+  - name: \"some tar layer\"\n+    archive: \"build/generated.tar\"\n+\n+    # a foreign layer using the optional mediatype for archive layers\n+  - name: \"some foreign layer\"", "originalCommit": "fe3e2d79426510d5cea8f367a982d379f77f9e9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "92daefc9433cc7ddb5d4dda30d7df0e6f2acaf98", "url": "https://github.com/GoogleContainerTools/jib/commit/92daefc9433cc7ddb5d4dda30d7df0e6f2acaf98", "message": "more buildfile stuff", "committedDate": "2020-06-24T18:28:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNDU0MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445124540", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            apiVersion: jib/v0alpha1\n          \n          \n            \n            apiVersion: jib/v1alpha1\n          \n      \n    \n    \n  \n\nalpha and beta are like Maven -SNAPSHOT: v1alphaX \u2192 v1betaX \u2192 v1.\nOtherwise you're saying when this is complete then it becomes v0.", "author": "briandealwis", "createdAt": "2020-06-24T19:34:21Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,186 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a YAML buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```yaml\n+apiVersion: jib/v0alpha1", "originalCommit": "92daefc9433cc7ddb5d4dda30d7df0e6f2acaf98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI4OTkyNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445289925", "bodyText": "oh yeah this was just filler. I'll update.", "author": "loosebazooka", "createdAt": "2020-06-25T03:43:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNDU0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNTM1MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445125351", "bodyText": "Buildfile seems more apt?", "author": "briandealwis", "createdAt": "2020-06-24T19:35:56Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,186 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a YAML buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```yaml\n+apiVersion: jib/v0alpha1\n+kind: Config", "originalCommit": "92daefc9433cc7ddb5d4dda30d7df0e6f2acaf98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI4OTk1NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445289954", "bodyText": "\ud83d\udc4d", "author": "loosebazooka", "createdAt": "2020-06-25T03:43:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNTM1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNjAxMw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445126013", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                - architecutre: amd64\n          \n          \n            \n                - architecture: amd64", "author": "briandealwis", "createdAt": "2020-06-24T19:37:13Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,186 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a YAML buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```yaml\n+apiVersion: jib/v0alpha1\n+kind: Config\n+\n+# \"FROM\" with detail for manifest lists or multiple architectures\n+from:\n+  image: \"gcr.io/distroless/java:8\"\n+  platforms:\n+    - architecture: \"arm\"\n+      os: \"linux\"\n+      os.version: \"a\"\n+      os.features:\n+        - \"b1\"\n+        - \"b2\"\n+      variant: \"c\"\n+      features:\n+        - \"d1\"\n+        - \"d2\"\n+    - architecutre: amd64", "originalCommit": "92daefc9433cc7ddb5d4dda30d7df0e6f2acaf98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNjU0OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445126548", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              platforms:\n          \n          \n            \n              # optional: if missing, then defaults to `linux/amd64`\n          \n          \n            \n              platforms:", "author": "briandealwis", "createdAt": "2020-06-24T19:38:12Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,186 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a YAML buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```yaml\n+apiVersion: jib/v0alpha1\n+kind: Config\n+\n+# \"FROM\" with detail for manifest lists or multiple architectures\n+from:\n+  image: \"gcr.io/distroless/java:8\"\n+  platforms:", "originalCommit": "92daefc9433cc7ddb5d4dda30d7df0e6f2acaf98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyODI5NA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445128294", "bodyText": "So what happens if the user does jib build ./buildplan.yaml gcr.io/project/image and gcr.io/project/image has never existed?  Do we always create a manifest list with a single image?  Do we only create a manifest list if there is > 1 platform specified?\nWhat happens if gcr.io/project/image does exist and it's a manifest for a different platform (not a manifest list)?  Do we replace it?  Do we \"promote\" the existing image to a component of a manifest list?", "author": "briandealwis", "createdAt": "2020-06-24T19:41:35Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,186 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a YAML buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```yaml\n+apiVersion: jib/v0alpha1\n+kind: Config\n+\n+# \"FROM\" with detail for manifest lists or multiple architectures", "originalCommit": "92daefc9433cc7ddb5d4dda30d7df0e6f2acaf98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI5MjUyNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445292525", "bodyText": "While this behavior will be determined by the underlying jib system, but yeah, it makes sense to at least document behavior here. I would think that each build with multiple platforms will create a new manifest list. It will not append.", "author": "loosebazooka", "createdAt": "2020-06-25T03:55:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyODI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTczNTkxMg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445735912", "bodyText": "and all writes are overwrites", "author": "loosebazooka", "createdAt": "2020-06-25T17:53:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyODI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxMDkzMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r448010931", "bodyText": "added a section about multiple platforms.", "author": "loosebazooka", "createdAt": "2020-06-30T22:18:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyODI5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyOTQ4Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445129486", "bodyText": "It would seem like os.version and os.features should be subitems of os:\nos:\n  id: \"linux\"\n  version: \"a\"\n  features: [\"b1\", \"b2\"]", "author": "briandealwis", "createdAt": "2020-06-24T19:44:10Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,186 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a YAML buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```yaml\n+apiVersion: jib/v0alpha1\n+kind: Config\n+\n+# \"FROM\" with detail for manifest lists or multiple architectures\n+from:\n+  image: \"gcr.io/distroless/java:8\"\n+  platforms:\n+    - architecture: \"arm\"\n+      os: \"linux\"\n+      os.version: \"a\"\n+      os.features:", "originalCommit": "92daefc9433cc7ddb5d4dda30d7df0e6f2acaf98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI5MDE2MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445290160", "bodyText": "yeah that's just how they're represented in the specs, so I was mirroring them. not sure what the right thing in here, leaning to keep os.version", "author": "loosebazooka", "createdAt": "2020-06-25T03:44:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyOTQ4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI5MjcwNA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445292704", "bodyText": "https://docs.docker.com/registry/spec/manifest-v2-2/#manifest-list-field-descriptions", "author": "loosebazooka", "createdAt": "2020-06-25T03:56:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyOTQ4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwODM3Mg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r448008372", "bodyText": "added section about behavior for builds with multiple platforms", "author": "loosebazooka", "createdAt": "2020-06-30T22:11:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyOTQ4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzMTg2OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445131868", "bodyText": "I haven't done an exhaustive search but it feels to me most other environments use an array of strings:\nenvironment:\n  - \"MYKEY1=value\"\nThat said, map-style allows using aliases and anchors so \ud83e\udd37", "author": "briandealwis", "createdAt": "2020-06-24T19:48:26Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,186 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a YAML buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```yaml\n+apiVersion: jib/v0alpha1\n+kind: Config\n+\n+# \"FROM\" with detail for manifest lists or multiple architectures\n+from:\n+  image: \"gcr.io/distroless/java:8\"\n+  platforms:\n+    - architecture: \"arm\"\n+      os: \"linux\"\n+      os.version: \"a\"\n+      os.features:\n+        - \"b1\"\n+        - \"b2\"\n+      variant: \"c\"\n+      features:\n+        - \"d1\"\n+        - \"d2\"\n+    - architecutre: amd64\n+      os: darwin\n+\n+# potentially simple form of \"FROM\" (based on ability to define schema)\n+from: \"gcr.io/distroless/java:8\"\n+\n+creationTime: 0 # millis since epoch or iso8601 creation time\n+format: Docker # Docker or OCI\n+\n+environment:\n+  \"MY_KEY1\": \"value\"", "originalCommit": "92daefc9433cc7ddb5d4dda30d7df0e6f2acaf98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI5MDUzMw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445290533", "bodyText": "Yeah I dunno, I have this parsing correctly like this, and it seems to make sense. I would prefer to keep it this way, unless the ecosystem has decided otherwise.", "author": "loosebazooka", "createdAt": "2020-06-25T03:46:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzMTg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxMDc5MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r448010791", "bodyText": "Jib currently uses a map style config. Will leave like this for now.", "author": "loosebazooka", "createdAt": "2020-06-30T22:18:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzMTg2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzMzA3OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445133078", "bodyText": "I was thrown off by this: I thought the from was referring to a base image.  WDYT about source and destination?", "author": "briandealwis", "createdAt": "2020-06-24T19:50:42Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,186 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a YAML buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```yaml\n+apiVersion: jib/v0alpha1\n+kind: Config\n+\n+# \"FROM\" with detail for manifest lists or multiple architectures\n+from:\n+  image: \"gcr.io/distroless/java:8\"\n+  platforms:\n+    - architecture: \"arm\"\n+      os: \"linux\"\n+      os.version: \"a\"\n+      os.features:\n+        - \"b1\"\n+        - \"b2\"\n+      variant: \"c\"\n+      features:\n+        - \"d1\"\n+        - \"d2\"\n+    - architecutre: amd64\n+      os: darwin\n+\n+# potentially simple form of \"FROM\" (based on ability to define schema)\n+from: \"gcr.io/distroless/java:8\"\n+\n+creationTime: 0 # millis since epoch or iso8601 creation time\n+format: Docker # Docker or OCI\n+\n+environment:\n+  \"MY_KEY1\": \"value\"\n+  \"MY_KEY2\": \"value\"\n+labels:\n+  \"com.example.owner\": \"person\"\n+  \"com.example.mode\": \"dev\"\n+volumes:\n+  - \"/myvolume\"\n+  - \"/youvolume\"\n+\n+exposedPorts:\n+  - \"123/udp\"\n+  - \"456\"\n+  - \"789/tcp\"\n+\n+user: root\n+workingDirectory: \"/somewhere\"\n+entrypoint:\n+  - \"java\"\n+  - \"-jar\"\n+cmd:\n+  - \"myjar.jar\"\n+\n+layers:\n+  properties:\n+    # file properties applied to all layers\n+    filePermissions: \"644\"\n+    directoryPermissions: \"755\"\n+    user: \"0\"\n+    group: \"0\"\n+    timestamp: \"0\"\n+  entries:\n+    - name: \"scripts and classes\"\n+      # file properties only applied to this layer \"scripts and classes\"\n+      properties:\n+        filePermissions: \"333\"\n+        directoryPermissions: \"777\"\n+        user: \"goose\"\n+        group: \"3\"\n+        timestamp: \"2020-06-03T19:31:50+00:00\"\n+      files:\n+        - from: \"target/scripts\"\n+          to: \"/app/scripts\"\n+          # file properties only applied to this copy directive\n+          properties:\n+            filePermissions: \"777\"\n+          # another copy for the same layer, with includes and excludes\n+        - from: \"target/classes\"\n+          to: \"/app/classes\"\n+          excludes:\n+            - \"**/goose.class\"\n+            - \"**/moose.class\"\n+          includes:\n+            - \"**/*.class\"\n+\n+      # another layer, only globally defined file permissions are applied here\n+    - name: \"other\"\n+      files:\n+        - from: \"build/other\"", "originalCommit": "92daefc9433cc7ddb5d4dda30d7df0e6f2acaf98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI5MDU4MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445290581", "bodyText": "src, dest makes sense", "author": "loosebazooka", "createdAt": "2020-06-25T03:46:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzMzA3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzNTkxMg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445135912", "bodyText": "Note that YAML has native support for representing hex and octal numbers  (https://yaml.org/refcard.html)", "author": "briandealwis", "createdAt": "2020-06-24T19:56:11Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,186 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a YAML buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```yaml\n+apiVersion: jib/v0alpha1\n+kind: Config\n+\n+# \"FROM\" with detail for manifest lists or multiple architectures\n+from:\n+  image: \"gcr.io/distroless/java:8\"\n+  platforms:\n+    - architecture: \"arm\"\n+      os: \"linux\"\n+      os.version: \"a\"\n+      os.features:\n+        - \"b1\"\n+        - \"b2\"\n+      variant: \"c\"\n+      features:\n+        - \"d1\"\n+        - \"d2\"\n+    - architecutre: amd64\n+      os: darwin\n+\n+# potentially simple form of \"FROM\" (based on ability to define schema)\n+from: \"gcr.io/distroless/java:8\"\n+\n+creationTime: 0 # millis since epoch or iso8601 creation time\n+format: Docker # Docker or OCI\n+\n+environment:\n+  \"MY_KEY1\": \"value\"\n+  \"MY_KEY2\": \"value\"\n+labels:\n+  \"com.example.owner\": \"person\"\n+  \"com.example.mode\": \"dev\"\n+volumes:\n+  - \"/myvolume\"\n+  - \"/youvolume\"\n+\n+exposedPorts:\n+  - \"123/udp\"\n+  - \"456\"\n+  - \"789/tcp\"\n+\n+user: root\n+workingDirectory: \"/somewhere\"\n+entrypoint:\n+  - \"java\"\n+  - \"-jar\"\n+cmd:\n+  - \"myjar.jar\"\n+\n+layers:\n+  properties:\n+    # file properties applied to all layers\n+    filePermissions: \"644\"\n+    directoryPermissions: \"755\"\n+    user: \"0\"\n+    group: \"0\"\n+    timestamp: \"0\"\n+  entries:\n+    - name: \"scripts and classes\"\n+      # file properties only applied to this layer \"scripts and classes\"\n+      properties:\n+        filePermissions: \"333\"\n+        directoryPermissions: \"777\"\n+        user: \"goose\"\n+        group: \"3\"\n+        timestamp: \"2020-06-03T19:31:50+00:00\"\n+      files:\n+        - from: \"target/scripts\"\n+          to: \"/app/scripts\"\n+          # file properties only applied to this copy directive\n+          properties:\n+            filePermissions: \"777\"\n+          # another copy for the same layer, with includes and excludes\n+        - from: \"target/classes\"\n+          to: \"/app/classes\"\n+          excludes:\n+            - \"**/goose.class\"\n+            - \"**/moose.class\"\n+          includes:\n+            - \"**/*.class\"\n+\n+      # another layer, only globally defined file permissions are applied here\n+    - name: \"other\"\n+      files:\n+        - from: \"build/other\"\n+          to: \"/app\"\n+\n+      # a archive layer using a tar, default mediaType\n+    - name: \"some tar layer\"\n+      archive: \"build/generated.tar\"\n+\n+      # a foreign layer using the optional mediatype for archive layers\n+    - name: \"some foreign layer\"\n+      mediaType: \"application/vnd.docker.image.rootfs.foreign.diff.tar.gzip\"\n+      archive: \"https://somewhere.com/layer\"\n+      # should we include size and digest here? I guess we can always ad tings\n+```\n+\n+## Layers\n+\n+`layers.entries` are a list of `layer` directives\n+\n+`layer` directives can be `archive` or `file` layers\n+\n+a `archive` layer consists of 3 parts\n+* `name`: the name/description of the layer (metadata)\n+* `archive`: a tar file to include as a layer\n+* `mediatype`: the mediatype of archive\n+\n+a `file` layer consists of 3 parts\n+* `name`: the name of the layer (metadata)\n+* `properties`: on disk metadata for all files in the layer\n+* `files`: a list of *copy directies* (see below)\n+\n+`files` are a list of *copy directives* that consist of 2 required and 3 optional parts\n+* `to` *required*: an absolute path to copy the files to on the container\n+* `from` *required*: a file, or directory on disk to copy from\n+* `includes`: only includes the patterns matched in this parameter\n+* `exludes`: excludes all files (higher prescendence than `includes`) matched in this parameter\n+* `properties`: FilesProperties to represent on disk metadata for all files in this copy directive\n+\n+### FileProperties\n+\n+A list of properties that can be user specified for each file in a file layer\n+* filePermissions: An octal representing permissions for files\n+* directoryPermissions: An octal representing permissions for directories", "originalCommit": "92daefc9433cc7ddb5d4dda30d7df0e6f2acaf98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI4OTY3Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445289673", "bodyText": "Currently parsing as string in my prototype, but I'll see what the parser allows.", "author": "loosebazooka", "createdAt": "2020-06-25T03:41:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzNTkxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY4NDY0OQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445684649", "bodyText": "Thinking about it, sure we can accept 0777 instead of 777, but I think we already have parsing logic to handle this. And 777 feels like a better UX to me even if not technically a correct octal match.", "author": "loosebazooka", "createdAt": "2020-06-25T16:26:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzNTkxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY4NzE2OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445687168", "bodyText": "Hmm... yeah I think the string type is better. 0777 can look ambiguous, because you can actually do things like chmod 4755 setCtrls.sh and in this context the leading 0 could be interpreted as that you want to clear the first digit.", "author": "chanseokoh", "createdAt": "2020-06-25T16:30:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzNTkxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzNjU0Mw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445136543", "bodyText": "?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Extented features (not included in this build)\n          \n          \n            \n            ## Extended features (not included in this build)", "author": "briandealwis", "createdAt": "2020-06-24T19:57:23Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,186 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a YAML buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```yaml\n+apiVersion: jib/v0alpha1\n+kind: Config\n+\n+# \"FROM\" with detail for manifest lists or multiple architectures\n+from:\n+  image: \"gcr.io/distroless/java:8\"\n+  platforms:\n+    - architecture: \"arm\"\n+      os: \"linux\"\n+      os.version: \"a\"\n+      os.features:\n+        - \"b1\"\n+        - \"b2\"\n+      variant: \"c\"\n+      features:\n+        - \"d1\"\n+        - \"d2\"\n+    - architecutre: amd64\n+      os: darwin\n+\n+# potentially simple form of \"FROM\" (based on ability to define schema)\n+from: \"gcr.io/distroless/java:8\"\n+\n+creationTime: 0 # millis since epoch or iso8601 creation time\n+format: Docker # Docker or OCI\n+\n+environment:\n+  \"MY_KEY1\": \"value\"\n+  \"MY_KEY2\": \"value\"\n+labels:\n+  \"com.example.owner\": \"person\"\n+  \"com.example.mode\": \"dev\"\n+volumes:\n+  - \"/myvolume\"\n+  - \"/youvolume\"\n+\n+exposedPorts:\n+  - \"123/udp\"\n+  - \"456\"\n+  - \"789/tcp\"\n+\n+user: root\n+workingDirectory: \"/somewhere\"\n+entrypoint:\n+  - \"java\"\n+  - \"-jar\"\n+cmd:\n+  - \"myjar.jar\"\n+\n+layers:\n+  properties:\n+    # file properties applied to all layers\n+    filePermissions: \"644\"\n+    directoryPermissions: \"755\"\n+    user: \"0\"\n+    group: \"0\"\n+    timestamp: \"0\"\n+  entries:\n+    - name: \"scripts and classes\"\n+      # file properties only applied to this layer \"scripts and classes\"\n+      properties:\n+        filePermissions: \"333\"\n+        directoryPermissions: \"777\"\n+        user: \"goose\"\n+        group: \"3\"\n+        timestamp: \"2020-06-03T19:31:50+00:00\"\n+      files:\n+        - from: \"target/scripts\"\n+          to: \"/app/scripts\"\n+          # file properties only applied to this copy directive\n+          properties:\n+            filePermissions: \"777\"\n+          # another copy for the same layer, with includes and excludes\n+        - from: \"target/classes\"\n+          to: \"/app/classes\"\n+          excludes:\n+            - \"**/goose.class\"\n+            - \"**/moose.class\"\n+          includes:\n+            - \"**/*.class\"\n+\n+      # another layer, only globally defined file permissions are applied here\n+    - name: \"other\"\n+      files:\n+        - from: \"build/other\"\n+          to: \"/app\"\n+\n+      # a archive layer using a tar, default mediaType\n+    - name: \"some tar layer\"\n+      archive: \"build/generated.tar\"\n+\n+      # a foreign layer using the optional mediatype for archive layers\n+    - name: \"some foreign layer\"\n+      mediaType: \"application/vnd.docker.image.rootfs.foreign.diff.tar.gzip\"\n+      archive: \"https://somewhere.com/layer\"\n+      # should we include size and digest here? I guess we can always ad tings\n+```\n+\n+## Layers\n+\n+`layers.entries` are a list of `layer` directives\n+\n+`layer` directives can be `archive` or `file` layers\n+\n+a `archive` layer consists of 3 parts\n+* `name`: the name/description of the layer (metadata)\n+* `archive`: a tar file to include as a layer\n+* `mediatype`: the mediatype of archive\n+\n+a `file` layer consists of 3 parts\n+* `name`: the name of the layer (metadata)\n+* `properties`: on disk metadata for all files in the layer\n+* `files`: a list of *copy directies* (see below)\n+\n+`files` are a list of *copy directives* that consist of 2 required and 3 optional parts\n+* `to` *required*: an absolute path to copy the files to on the container\n+* `from` *required*: a file, or directory on disk to copy from\n+* `includes`: only includes the patterns matched in this parameter\n+* `exludes`: excludes all files (higher prescendence than `includes`) matched in this parameter\n+* `properties`: FilesProperties to represent on disk metadata for all files in this copy directive\n+\n+### FileProperties\n+\n+A list of properties that can be user specified for each file in a file layer\n+* filePermissions: An octal representing permissions for files\n+* directoryPermissions: An octal representing permissions for directories\n+* user: The ownership user property\n+* group: The ownership group property\n+* timestamp: millis since epoch or iso8601 creation time\n+\n+File properties are available at 3 levels\n+* Global (`layers.properties`): applies to all layers\n+* Layer (`layers.<entry>.properties`): applies to a single layer\n+* Copy (`layers.<entry>.<copy>.properties`): applies to a single copy directive\n+\n+Each property (`filePermissions`, `directoryPermissions`, etc) can be defined at any level and are resolved in the follow order\n+- All properties in `Copy` are applied first\n+- Any properties not in `Copy` are applied from `Layer`\n+- Any properties not in `Copy` or `Layer` are applied from `Global`\n+- Any properties not defined anywhere use jib system defaults.\n+\n+### Base image value inheritance\n+The value(s) defined in the base image are preserved and propogated into the\n+config of the new container.\n+\n+The behavior of the buildfile values post-inheritance must be considered\n+\n+These parameters will allow appending to the base image value:\n+- `environment`\n+- `volumes`\n+- `labels`\n+- `exposedPorts`\n+\n+The paratmeters will be overwritten:\n+- `user`\n+- `workingDirectory`\n+- `entrypoint`\n+- `cmd`\n+\n+If we start getting specific user requests to control this, we can explore\n+inheritance control in the future.\n+\n+## Extented features (not included in this build)", "originalCommit": "92daefc9433cc7ddb5d4dda30d7df0e6f2acaf98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzNzc5OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445137798", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The paratmeters will be overwritten:\n          \n          \n            \n            These parameters will be overwritten:", "author": "briandealwis", "createdAt": "2020-06-24T19:59:41Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,186 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a YAML buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```yaml\n+apiVersion: jib/v0alpha1\n+kind: Config\n+\n+# \"FROM\" with detail for manifest lists or multiple architectures\n+from:\n+  image: \"gcr.io/distroless/java:8\"\n+  platforms:\n+    - architecture: \"arm\"\n+      os: \"linux\"\n+      os.version: \"a\"\n+      os.features:\n+        - \"b1\"\n+        - \"b2\"\n+      variant: \"c\"\n+      features:\n+        - \"d1\"\n+        - \"d2\"\n+    - architecutre: amd64\n+      os: darwin\n+\n+# potentially simple form of \"FROM\" (based on ability to define schema)\n+from: \"gcr.io/distroless/java:8\"\n+\n+creationTime: 0 # millis since epoch or iso8601 creation time\n+format: Docker # Docker or OCI\n+\n+environment:\n+  \"MY_KEY1\": \"value\"\n+  \"MY_KEY2\": \"value\"\n+labels:\n+  \"com.example.owner\": \"person\"\n+  \"com.example.mode\": \"dev\"\n+volumes:\n+  - \"/myvolume\"\n+  - \"/youvolume\"\n+\n+exposedPorts:\n+  - \"123/udp\"\n+  - \"456\"\n+  - \"789/tcp\"\n+\n+user: root\n+workingDirectory: \"/somewhere\"\n+entrypoint:\n+  - \"java\"\n+  - \"-jar\"\n+cmd:\n+  - \"myjar.jar\"\n+\n+layers:\n+  properties:\n+    # file properties applied to all layers\n+    filePermissions: \"644\"\n+    directoryPermissions: \"755\"\n+    user: \"0\"\n+    group: \"0\"\n+    timestamp: \"0\"\n+  entries:\n+    - name: \"scripts and classes\"\n+      # file properties only applied to this layer \"scripts and classes\"\n+      properties:\n+        filePermissions: \"333\"\n+        directoryPermissions: \"777\"\n+        user: \"goose\"\n+        group: \"3\"\n+        timestamp: \"2020-06-03T19:31:50+00:00\"\n+      files:\n+        - from: \"target/scripts\"\n+          to: \"/app/scripts\"\n+          # file properties only applied to this copy directive\n+          properties:\n+            filePermissions: \"777\"\n+          # another copy for the same layer, with includes and excludes\n+        - from: \"target/classes\"\n+          to: \"/app/classes\"\n+          excludes:\n+            - \"**/goose.class\"\n+            - \"**/moose.class\"\n+          includes:\n+            - \"**/*.class\"\n+\n+      # another layer, only globally defined file permissions are applied here\n+    - name: \"other\"\n+      files:\n+        - from: \"build/other\"\n+          to: \"/app\"\n+\n+      # a archive layer using a tar, default mediaType\n+    - name: \"some tar layer\"\n+      archive: \"build/generated.tar\"\n+\n+      # a foreign layer using the optional mediatype for archive layers\n+    - name: \"some foreign layer\"\n+      mediaType: \"application/vnd.docker.image.rootfs.foreign.diff.tar.gzip\"\n+      archive: \"https://somewhere.com/layer\"\n+      # should we include size and digest here? I guess we can always ad tings\n+```\n+\n+## Layers\n+\n+`layers.entries` are a list of `layer` directives\n+\n+`layer` directives can be `archive` or `file` layers\n+\n+a `archive` layer consists of 3 parts\n+* `name`: the name/description of the layer (metadata)\n+* `archive`: a tar file to include as a layer\n+* `mediatype`: the mediatype of archive\n+\n+a `file` layer consists of 3 parts\n+* `name`: the name of the layer (metadata)\n+* `properties`: on disk metadata for all files in the layer\n+* `files`: a list of *copy directies* (see below)\n+\n+`files` are a list of *copy directives* that consist of 2 required and 3 optional parts\n+* `to` *required*: an absolute path to copy the files to on the container\n+* `from` *required*: a file, or directory on disk to copy from\n+* `includes`: only includes the patterns matched in this parameter\n+* `exludes`: excludes all files (higher prescendence than `includes`) matched in this parameter\n+* `properties`: FilesProperties to represent on disk metadata for all files in this copy directive\n+\n+### FileProperties\n+\n+A list of properties that can be user specified for each file in a file layer\n+* filePermissions: An octal representing permissions for files\n+* directoryPermissions: An octal representing permissions for directories\n+* user: The ownership user property\n+* group: The ownership group property\n+* timestamp: millis since epoch or iso8601 creation time\n+\n+File properties are available at 3 levels\n+* Global (`layers.properties`): applies to all layers\n+* Layer (`layers.<entry>.properties`): applies to a single layer\n+* Copy (`layers.<entry>.<copy>.properties`): applies to a single copy directive\n+\n+Each property (`filePermissions`, `directoryPermissions`, etc) can be defined at any level and are resolved in the follow order\n+- All properties in `Copy` are applied first\n+- Any properties not in `Copy` are applied from `Layer`\n+- Any properties not in `Copy` or `Layer` are applied from `Global`\n+- Any properties not defined anywhere use jib system defaults.\n+\n+### Base image value inheritance\n+The value(s) defined in the base image are preserved and propogated into the\n+config of the new container.\n+\n+The behavior of the buildfile values post-inheritance must be considered\n+\n+These parameters will allow appending to the base image value:\n+- `environment`\n+- `volumes`\n+- `labels`\n+- `exposedPorts`\n+\n+The paratmeters will be overwritten:", "originalCommit": "92daefc9433cc7ddb5d4dda30d7df0e6f2acaf98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzNzgxNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445137815", "bodyText": "Separate out environment and labels: they will override values with the same key.", "author": "briandealwis", "createdAt": "2020-06-24T19:59:44Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,186 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a YAML buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and\n+passed to the builder.\n+\n+```yaml\n+apiVersion: jib/v0alpha1\n+kind: Config\n+\n+# \"FROM\" with detail for manifest lists or multiple architectures\n+from:\n+  image: \"gcr.io/distroless/java:8\"\n+  platforms:\n+    - architecture: \"arm\"\n+      os: \"linux\"\n+      os.version: \"a\"\n+      os.features:\n+        - \"b1\"\n+        - \"b2\"\n+      variant: \"c\"\n+      features:\n+        - \"d1\"\n+        - \"d2\"\n+    - architecutre: amd64\n+      os: darwin\n+\n+# potentially simple form of \"FROM\" (based on ability to define schema)\n+from: \"gcr.io/distroless/java:8\"\n+\n+creationTime: 0 # millis since epoch or iso8601 creation time\n+format: Docker # Docker or OCI\n+\n+environment:\n+  \"MY_KEY1\": \"value\"\n+  \"MY_KEY2\": \"value\"\n+labels:\n+  \"com.example.owner\": \"person\"\n+  \"com.example.mode\": \"dev\"\n+volumes:\n+  - \"/myvolume\"\n+  - \"/youvolume\"\n+\n+exposedPorts:\n+  - \"123/udp\"\n+  - \"456\"\n+  - \"789/tcp\"\n+\n+user: root\n+workingDirectory: \"/somewhere\"\n+entrypoint:\n+  - \"java\"\n+  - \"-jar\"\n+cmd:\n+  - \"myjar.jar\"\n+\n+layers:\n+  properties:\n+    # file properties applied to all layers\n+    filePermissions: \"644\"\n+    directoryPermissions: \"755\"\n+    user: \"0\"\n+    group: \"0\"\n+    timestamp: \"0\"\n+  entries:\n+    - name: \"scripts and classes\"\n+      # file properties only applied to this layer \"scripts and classes\"\n+      properties:\n+        filePermissions: \"333\"\n+        directoryPermissions: \"777\"\n+        user: \"goose\"\n+        group: \"3\"\n+        timestamp: \"2020-06-03T19:31:50+00:00\"\n+      files:\n+        - from: \"target/scripts\"\n+          to: \"/app/scripts\"\n+          # file properties only applied to this copy directive\n+          properties:\n+            filePermissions: \"777\"\n+          # another copy for the same layer, with includes and excludes\n+        - from: \"target/classes\"\n+          to: \"/app/classes\"\n+          excludes:\n+            - \"**/goose.class\"\n+            - \"**/moose.class\"\n+          includes:\n+            - \"**/*.class\"\n+\n+      # another layer, only globally defined file permissions are applied here\n+    - name: \"other\"\n+      files:\n+        - from: \"build/other\"\n+          to: \"/app\"\n+\n+      # a archive layer using a tar, default mediaType\n+    - name: \"some tar layer\"\n+      archive: \"build/generated.tar\"\n+\n+      # a foreign layer using the optional mediatype for archive layers\n+    - name: \"some foreign layer\"\n+      mediaType: \"application/vnd.docker.image.rootfs.foreign.diff.tar.gzip\"\n+      archive: \"https://somewhere.com/layer\"\n+      # should we include size and digest here? I guess we can always ad tings\n+```\n+\n+## Layers\n+\n+`layers.entries` are a list of `layer` directives\n+\n+`layer` directives can be `archive` or `file` layers\n+\n+a `archive` layer consists of 3 parts\n+* `name`: the name/description of the layer (metadata)\n+* `archive`: a tar file to include as a layer\n+* `mediatype`: the mediatype of archive\n+\n+a `file` layer consists of 3 parts\n+* `name`: the name of the layer (metadata)\n+* `properties`: on disk metadata for all files in the layer\n+* `files`: a list of *copy directies* (see below)\n+\n+`files` are a list of *copy directives* that consist of 2 required and 3 optional parts\n+* `to` *required*: an absolute path to copy the files to on the container\n+* `from` *required*: a file, or directory on disk to copy from\n+* `includes`: only includes the patterns matched in this parameter\n+* `exludes`: excludes all files (higher prescendence than `includes`) matched in this parameter\n+* `properties`: FilesProperties to represent on disk metadata for all files in this copy directive\n+\n+### FileProperties\n+\n+A list of properties that can be user specified for each file in a file layer\n+* filePermissions: An octal representing permissions for files\n+* directoryPermissions: An octal representing permissions for directories\n+* user: The ownership user property\n+* group: The ownership group property\n+* timestamp: millis since epoch or iso8601 creation time\n+\n+File properties are available at 3 levels\n+* Global (`layers.properties`): applies to all layers\n+* Layer (`layers.<entry>.properties`): applies to a single layer\n+* Copy (`layers.<entry>.<copy>.properties`): applies to a single copy directive\n+\n+Each property (`filePermissions`, `directoryPermissions`, etc) can be defined at any level and are resolved in the follow order\n+- All properties in `Copy` are applied first\n+- Any properties not in `Copy` are applied from `Layer`\n+- Any properties not in `Copy` or `Layer` are applied from `Global`\n+- Any properties not defined anywhere use jib system defaults.\n+\n+### Base image value inheritance\n+The value(s) defined in the base image are preserved and propogated into the\n+config of the new container.\n+\n+The behavior of the buildfile values post-inheritance must be considered\n+\n+These parameters will allow appending to the base image value:", "originalCommit": "92daefc9433cc7ddb5d4dda30d7df0e6f2acaf98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI4OTI4OA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r445289288", "bodyText": "ah good call.", "author": "loosebazooka", "createdAt": "2020-06-25T03:39:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzNzgxNQ=="}], "type": "inlineReview"}, {"oid": "8a2a2bb875cfa8d5555f1e7ba13fbcb0fa96bd2a", "url": "https://github.com/GoogleContainerTools/jib/commit/8a2a2bb875cfa8d5555f1e7ba13fbcb0fa96bd2a", "message": "more changes, adds file copy behavior", "committedDate": "2020-06-25T03:50:27Z", "type": "forcePushed"}, {"oid": "bf21897c784ebd33626c613b2c6e9655377720e3", "url": "https://github.com/GoogleContainerTools/jib/commit/bf21897c784ebd33626c613b2c6e9655377720e3", "message": "Proposal for jib cli buildfile", "committedDate": "2020-06-30T22:11:27Z", "type": "commit"}, {"oid": "b322e33f453caf0160ac24363635cd5bf8d4d646", "url": "https://github.com/GoogleContainerTools/jib/commit/b322e33f453caf0160ac24363635cd5bf8d4d646", "message": "review changes", "committedDate": "2020-06-30T22:11:27Z", "type": "commit"}, {"oid": "ea2554140ece87be79e7c7ed133fbcd99cc69511", "url": "https://github.com/GoogleContainerTools/jib/commit/ea2554140ece87be79e7c7ed133fbcd99cc69511", "message": "some more changes", "committedDate": "2020-06-30T22:11:27Z", "type": "commit"}, {"oid": "7436f57d6148b1b6d864c2ab5a87e92adc540a90", "url": "https://github.com/GoogleContainerTools/jib/commit/7436f57d6148b1b6d864c2ab5a87e92adc540a90", "message": "more stuff", "committedDate": "2020-06-30T22:11:27Z", "type": "commit"}, {"oid": "aa09c2e75bda44c895df99a876c5c7c3889522d4", "url": "https://github.com/GoogleContainerTools/jib/commit/aa09c2e75bda44c895df99a876c5c7c3889522d4", "message": "clean up inherit section", "committedDate": "2020-06-30T22:11:27Z", "type": "commit"}, {"oid": "ea5b13c794c113aa8f2bab560733b5e5fce527d2", "url": "https://github.com/GoogleContainerTools/jib/commit/ea5b13c794c113aa8f2bab560733b5e5fce527d2", "message": "more buildfile stuff", "committedDate": "2020-06-30T22:11:27Z", "type": "commit"}, {"oid": "f34f628160136eb34315cfab91831aab074d8011", "url": "https://github.com/GoogleContainerTools/jib/commit/f34f628160136eb34315cfab91831aab074d8011", "message": "more changes, adds file copy behavior", "committedDate": "2020-06-30T22:11:27Z", "type": "commit"}, {"oid": "d2565355e866af76be8e038a614683228c68548f", "url": "https://github.com/GoogleContainerTools/jib/commit/d2565355e866af76be8e038a614683228c68548f", "message": "history, apiVersion", "committedDate": "2020-06-30T22:11:27Z", "type": "commit"}, {"oid": "36dde4031795d1ff85c917c9bb39bf2f05b9151e", "url": "https://github.com/GoogleContainerTools/jib/commit/36dde4031795d1ff85c917c9bb39bf2f05b9151e", "message": "section about manifest lists", "committedDate": "2020-06-30T22:11:27Z", "type": "commit"}, {"oid": "36dde4031795d1ff85c917c9bb39bf2f05b9151e", "url": "https://github.com/GoogleContainerTools/jib/commit/36dde4031795d1ff85c917c9bb39bf2f05b9151e", "message": "section about manifest lists", "committedDate": "2020-06-30T22:11:27Z", "type": "forcePushed"}, {"oid": "09bb28c0adc265186af47aee199d16ae6c17fc7d", "url": "https://github.com/GoogleContainerTools/jib/commit/09bb28c0adc265186af47aee199d16ae6c17fc7d", "message": "minor cleanup", "committedDate": "2020-09-24T12:24:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk3NzcwNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2515#discussion_r503977705", "bodyText": "\"translating directly into a buildplan\" is misleading, isn't it?", "author": "chanseokoh", "createdAt": "2020-10-13T14:01:53Z", "path": "proposals/buildfile.md", "diffHunk": "@@ -0,0 +1,211 @@\n+# Jib CLI Buildfile Specification\n+\n+Specification for a YAML buildfile describing building a container image. This buildfile can be\n+used by the jib-cli to generate a container. It is translated directly into a buildplan and", "originalCommit": "09bb28c0adc265186af47aee199d16ae6c17fc7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8ff9f8d32bb0b1143cdcc44b8c69183846ab0ffe", "url": "https://github.com/GoogleContainerTools/jib/commit/8ff9f8d32bb0b1143cdcc44b8c69183846ab0ffe", "message": "reword heading", "committedDate": "2020-10-13T16:12:44Z", "type": "commit"}]}