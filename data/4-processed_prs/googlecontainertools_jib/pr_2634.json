{"pr_number": 2634, "pr_title": "Allowing PullBaseImageStep to pull multiple images corresponding to the platforms specified by the user", "pr_createdAt": "2020-07-28T00:07:37Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2634", "timeline": [{"oid": "b79a4203ea9b2272997b06223844230fab6ae649", "url": "https://github.com/GoogleContainerTools/jib/commit/b79a4203ea9b2272997b06223844230fab6ae649", "message": "Adding Support for multi-arch building", "committedDate": "2020-07-27T22:53:06Z", "type": "commit"}, {"oid": "6e8f7bf283aa45cdddab3c66622d97a7a1c91ae7", "url": "https://github.com/GoogleContainerTools/jib/commit/6e8f7bf283aa45cdddab3c66622d97a7a1c91ae7", "message": "Fixing Failing Tests", "committedDate": "2020-07-28T00:04:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzODMwMg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2634#discussion_r461638302", "bodyText": "This can be\nfor (Platform platform : platforms) {\n   ...\n}", "author": "chanseokoh", "createdAt": "2020-07-28T14:44:02Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -187,76 +188,94 @@ public ImageAndRegistryClient call()\n    * @throws BadContainerConfigurationFormatException if the container configuration is in a bad\n    *     format\n    */\n-  private Image pullBaseImage(\n+  private List<ImageAndRegistryClient> pullBaseImage(\n       RegistryClient registryClient, ProgressEventDispatcher progressEventDispatcher)\n       throws IOException, RegistryException, LayerPropertyNotFoundException,\n           LayerCountMismatchException, BadContainerConfigurationFormatException {\n     EventHandlers eventHandlers = buildContext.getEventHandlers();\n+    List<ManifestAndDigest<?>> manifestsAndDigests = new ArrayList<>();\n+    List<ImageAndRegistryClient> imagesAndRegistryClient = new ArrayList<>();\n \n     ManifestAndDigest<?> manifestAndDigest =\n         registryClient.pullManifest(buildContext.getBaseImageConfiguration().getImageQualifier());\n     ManifestTemplate manifestTemplate = manifestAndDigest.getManifest();\n \n-    // special handling if we happen upon a manifest list, redirect to a manifest and continue\n-    // handling it normally\n+    // special handling if we happen upon a manifest list, extract manifests handle them normally\n     if (manifestTemplate instanceof V22ManifestListTemplate) {\n-      manifestAndDigest =\n-          obtainPlatformSpecificImageManifest(\n-              registryClient, (V22ManifestListTemplate) manifestTemplate);\n-      manifestTemplate = manifestAndDigest.getManifest();\n+      Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();\n+      Iterator<Platform> platformsIterator = platforms.iterator();\n+      while (platformsIterator.hasNext()) {", "originalCommit": "6e8f7bf283aa45cdddab3c66622d97a7a1c91ae7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MTc4Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2634#discussion_r461641786", "bodyText": "I'll assume this PR is not ready and you'll fix this.", "author": "chanseokoh", "createdAt": "2020-07-28T14:48:09Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -187,76 +188,94 @@ public ImageAndRegistryClient call()\n    * @throws BadContainerConfigurationFormatException if the container configuration is in a bad\n    *     format\n    */\n-  private Image pullBaseImage(\n+  private List<ImageAndRegistryClient> pullBaseImage(\n       RegistryClient registryClient, ProgressEventDispatcher progressEventDispatcher)\n       throws IOException, RegistryException, LayerPropertyNotFoundException,\n           LayerCountMismatchException, BadContainerConfigurationFormatException {\n     EventHandlers eventHandlers = buildContext.getEventHandlers();\n+    List<ManifestAndDigest<?>> manifestsAndDigests = new ArrayList<>();\n+    List<ImageAndRegistryClient> imagesAndRegistryClient = new ArrayList<>();\n \n     ManifestAndDigest<?> manifestAndDigest =\n         registryClient.pullManifest(buildContext.getBaseImageConfiguration().getImageQualifier());\n     ManifestTemplate manifestTemplate = manifestAndDigest.getManifest();\n \n-    // special handling if we happen upon a manifest list, redirect to a manifest and continue\n-    // handling it normally\n+    // special handling if we happen upon a manifest list, extract manifests handle them normally\n     if (manifestTemplate instanceof V22ManifestListTemplate) {\n-      manifestAndDigest =\n-          obtainPlatformSpecificImageManifest(\n-              registryClient, (V22ManifestListTemplate) manifestTemplate);\n-      manifestTemplate = manifestAndDigest.getManifest();\n+      Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();\n+      Iterator<Platform> platformsIterator = platforms.iterator();\n+      while (platformsIterator.hasNext()) {\n+        manifestsAndDigests.add(\n+            obtainPlatformSpecificImageManifest(\n+                registryClient,\n+                (V22ManifestListTemplate) manifestTemplate,\n+                platformsIterator.next()));\n+      }\n+    } else {\n+      manifestsAndDigests.add(manifestAndDigest);\n     }\n \n-    switch (manifestTemplate.getSchemaVersion()) {\n-      case 1:\n-        V21ManifestTemplate v21ManifestTemplate = (V21ManifestTemplate) manifestTemplate;\n-        buildContext\n-            .getBaseImageLayersCache()\n-            .writeMetadata(\n-                buildContext.getBaseImageConfiguration().getImage(), v21ManifestTemplate);\n-        return JsonToImageTranslator.toImage(v21ManifestTemplate);\n-\n-      case 2:\n-        eventHandlers.dispatch(\n-            LogEvent.lifecycle(\"Using base image with digest: \" + manifestAndDigest.getDigest()));\n-        BuildableManifestTemplate buildableManifestTemplate =\n-            (BuildableManifestTemplate) manifestTemplate;\n-        if (buildableManifestTemplate.getContainerConfiguration() == null\n-            || buildableManifestTemplate.getContainerConfiguration().getDigest() == null) {\n-          throw new UnknownManifestFormatException(\n-              \"Invalid container configuration in Docker V2.2/OCI manifest: \\n\"\n-                  + JsonTemplateMapper.toUtf8String(buildableManifestTemplate));\n-        }\n-\n-        DescriptorDigest containerConfigurationDigest =\n-            buildableManifestTemplate.getContainerConfiguration().getDigest();\n-\n-        try (ThrottledProgressEventDispatcherWrapper progressEventDispatcherWrapper =\n-            new ThrottledProgressEventDispatcherWrapper(\n-                progressEventDispatcher.newChildProducer(),\n-                \"pull container configuration \" + containerConfigurationDigest)) {\n-          String containerConfigurationString =\n-              Blobs.writeToString(\n-                  registryClient.pullBlob(\n-                      containerConfigurationDigest,\n-                      progressEventDispatcherWrapper::setProgressTarget,\n-                      progressEventDispatcherWrapper::dispatchProgress));\n-\n-          ContainerConfigurationTemplate containerConfigurationTemplate =\n-              JsonTemplateMapper.readJson(\n-                  containerConfigurationString, ContainerConfigurationTemplate.class);\n+    for (ManifestAndDigest<?> manifestAndDigestInstance : manifestsAndDigests) {\n+      manifestTemplate = manifestAndDigestInstance.getManifest();\n+      switch (manifestTemplate.getSchemaVersion()) {\n+        case 1:\n+          V21ManifestTemplate v21ManifestTemplate = (V21ManifestTemplate) manifestTemplate;\n           buildContext\n               .getBaseImageLayersCache()\n               .writeMetadata(\n-                  buildContext.getBaseImageConfiguration().getImage(),\n-                  buildableManifestTemplate,\n-                  containerConfigurationTemplate);\n-          return JsonToImageTranslator.toImage(\n-              buildableManifestTemplate, containerConfigurationTemplate);\n-        }\n-      default:\n-        throw new IllegalStateException(\n-            \"Unknown manifest schema version: \" + manifestTemplate.getSchemaVersion());\n+                  buildContext.getBaseImageConfiguration().getImage(), v21ManifestTemplate);\n+          imagesAndRegistryClient.add(\n+              new ImageAndRegistryClient(\n+                  JsonToImageTranslator.toImage(v21ManifestTemplate), registryClient));\n+          // fall through", "originalCommit": "6e8f7bf283aa45cdddab3c66622d97a7a1c91ae7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY3NDQ5MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2634#discussion_r461674490", "bodyText": "Yes I was reading some content on cases and I ended up putting break statements", "author": "louismurerwa", "createdAt": "2020-07-28T15:31:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MTc4Ng=="}], "type": "inlineReview"}, {"oid": "a4167556c527f6b59655f1914257cb3d6968b6eb", "url": "https://github.com/GoogleContainerTools/jib/commit/a4167556c527f6b59655f1914257cb3d6968b6eb", "message": "Style Fixes", "committedDate": "2020-07-28T15:27:51Z", "type": "commit"}, {"oid": "5d4f04bb42b93f6ccfeffb544bf0a2162f263631", "url": "https://github.com/GoogleContainerTools/jib/commit/5d4f04bb42b93f6ccfeffb544bf0a2162f263631", "message": "Updating the coding style", "committedDate": "2020-07-28T15:36:23Z", "type": "commit"}, {"oid": "e32d33e73979f63b6d8d19653d23e90f47382e42", "url": "https://github.com/GoogleContainerTools/jib/commit/e32d33e73979f63b6d8d19653d23e90f47382e42", "message": "Adding BaseImagesAndRegistryClient datastructure", "committedDate": "2020-07-28T17:39:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4NjQ4Ng==", "url": "https://github.com/GoogleContainerTools/jib/pull/2634#discussion_r461786486", "bodyText": "Although the new name works, I think we can keep this general by ImagesAndRegistryClient. It's just a tuple of two things (an Image list and a RegistryClient) only required in Java to return multiple objects. If we give the name \"Base\", then other people who don't look into the implementation of this tuple will assume that there must be something specific in the class that has to be tied to base images. As a class, I think the name should just reflect what the class actually represents, not how it must be used with only a subset of semantics. For example, a (bad) analogy would be that I rename a general Integer class to PositiveInteger while not changing anything about the class implementation only because I will never use the class to store a non-positive integer throughout my application lifecycle. Rather, I should give the positiveInteger name to an instance of the Integer class (e.g., Integer positiveInteger = 30;). Does that make sense?", "author": "chanseokoh", "createdAt": "2020-07-28T18:29:06Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -58,18 +58,18 @@\n import javax.annotation.Nullable;\n \n /** Pulls the base image manifests for the specified platforms. */\n-class PullBaseImageStep implements Callable<List<ImageAndRegistryClient>> {\n+class PullBaseImageStep implements Callable<BaseImagesAndRegistryClient> {\n \n   private static final String DESCRIPTION = \"Pulling base image manifest\";\n \n   /** Structure for the result returned by this step. */\n-  static class ImageAndRegistryClient {\n+  static class BaseImagesAndRegistryClient {\n \n-    final Image image;\n+    final List<Image> baseImages;\n     @Nullable final RegistryClient registryClient;\n \n-    ImageAndRegistryClient(Image image, @Nullable RegistryClient registryClient) {\n-      this.image = image;\n+    BaseImagesAndRegistryClient(List<Image> baseImages, @Nullable RegistryClient registryClient) {", "originalCommit": "e32d33e73979f63b6d8d19653d23e90f47382e42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg1MzE3MA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2634#discussion_r461853170", "bodyText": "Yep I get what you mean.The images stored in this class are no different from regular images so there is no need to rename the class.", "author": "louismurerwa", "createdAt": "2020-07-28T20:18:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4NjQ4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4OTgzOA==", "url": "https://github.com/GoogleContainerTools/jib/pull/2634#discussion_r461789838", "bodyText": "As we discussed yesterday, I think now it makes sense to factor out the code inside the loop as a separate method.", "author": "chanseokoh", "createdAt": "2020-07-28T18:34:50Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -187,76 +187,88 @@ public ImageAndRegistryClient call()\n    * @throws BadContainerConfigurationFormatException if the container configuration is in a bad\n    *     format\n    */\n-  private Image pullBaseImage(\n+  private BaseImagesAndRegistryClient pullBaseImage(\n       RegistryClient registryClient, ProgressEventDispatcher progressEventDispatcher)\n       throws IOException, RegistryException, LayerPropertyNotFoundException,\n           LayerCountMismatchException, BadContainerConfigurationFormatException {\n     EventHandlers eventHandlers = buildContext.getEventHandlers();\n+    List<ManifestAndDigest<?>> manifestAndDigestList = new ArrayList<>();\n+    List<Image> baseImages = new ArrayList<>();\n \n     ManifestAndDigest<?> manifestAndDigest =\n         registryClient.pullManifest(buildContext.getBaseImageConfiguration().getImageQualifier());\n     ManifestTemplate manifestTemplate = manifestAndDigest.getManifest();\n \n-    // special handling if we happen upon a manifest list, redirect to a manifest and continue\n-    // handling it normally\n+    // special handling if we happen upon a manifest list, extract manifests handle them normally\n     if (manifestTemplate instanceof V22ManifestListTemplate) {\n-      manifestAndDigest =\n-          obtainPlatformSpecificImageManifest(\n-              registryClient, (V22ManifestListTemplate) manifestTemplate);\n-      manifestTemplate = manifestAndDigest.getManifest();\n+      Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();\n+      for (Platform platform : platforms) {\n+        manifestAndDigestList.add(\n+            obtainPlatformSpecificImageManifest(\n+                registryClient, (V22ManifestListTemplate) manifestTemplate, platform));\n+      }\n+    } else {\n+      manifestAndDigestList.add(manifestAndDigest);\n     }\n \n-    switch (manifestTemplate.getSchemaVersion()) {\n-      case 1:\n-        V21ManifestTemplate v21ManifestTemplate = (V21ManifestTemplate) manifestTemplate;\n-        buildContext\n-            .getBaseImageLayersCache()\n-            .writeMetadata(\n-                buildContext.getBaseImageConfiguration().getImage(), v21ManifestTemplate);\n-        return JsonToImageTranslator.toImage(v21ManifestTemplate);\n-\n-      case 2:\n-        eventHandlers.dispatch(\n-            LogEvent.lifecycle(\"Using base image with digest: \" + manifestAndDigest.getDigest()));\n-        BuildableManifestTemplate buildableManifestTemplate =\n-            (BuildableManifestTemplate) manifestTemplate;\n-        if (buildableManifestTemplate.getContainerConfiguration() == null\n-            || buildableManifestTemplate.getContainerConfiguration().getDigest() == null) {\n-          throw new UnknownManifestFormatException(\n-              \"Invalid container configuration in Docker V2.2/OCI manifest: \\n\"\n-                  + JsonTemplateMapper.toUtf8String(buildableManifestTemplate));\n-        }\n-\n-        DescriptorDigest containerConfigurationDigest =\n-            buildableManifestTemplate.getContainerConfiguration().getDigest();\n-\n-        try (ThrottledProgressEventDispatcherWrapper progressEventDispatcherWrapper =\n-            new ThrottledProgressEventDispatcherWrapper(\n-                progressEventDispatcher.newChildProducer(),\n-                \"pull container configuration \" + containerConfigurationDigest)) {\n-          String containerConfigurationString =\n-              Blobs.writeToString(\n-                  registryClient.pullBlob(\n-                      containerConfigurationDigest,\n-                      progressEventDispatcherWrapper::setProgressTarget,\n-                      progressEventDispatcherWrapper::dispatchProgress));\n-\n-          ContainerConfigurationTemplate containerConfigurationTemplate =\n-              JsonTemplateMapper.readJson(\n-                  containerConfigurationString, ContainerConfigurationTemplate.class);\n+    for (ManifestAndDigest<?> manifestAndDigestInstance : manifestAndDigestList) {\n+      manifestTemplate = manifestAndDigestInstance.getManifest();", "originalCommit": "e32d33e73979f63b6d8d19653d23e90f47382e42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4NDYyOQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2634#discussion_r461884629", "bodyText": "Refactoring Done", "author": "louismurerwa", "createdAt": "2020-07-28T21:16:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4OTgzOA=="}], "type": "inlineReview"}, {"oid": "3d1893f98091eaf76edecc8e60c7e414fd87d45a", "url": "https://github.com/GoogleContainerTools/jib/commit/3d1893f98091eaf76edecc8e60c7e414fd87d45a", "message": "Refactoring Code", "committedDate": "2020-07-28T20:38:47Z", "type": "commit"}, {"oid": "703c7be5258d4e7cc10c22bf5c996f4285b3ae7a", "url": "https://github.com/GoogleContainerTools/jib/commit/703c7be5258d4e7cc10c22bf5c996f4285b3ae7a", "message": "Style Fixes", "committedDate": "2020-07-28T21:11:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkwNDIwMw==", "url": "https://github.com/GoogleContainerTools/jib/pull/2634#discussion_r461904203", "bodyText": "So in this case, we should name it baseImages... as an instance that belongs to the ImagesAndRegistryClient \"class.\" All the images in this instance will be base images.", "author": "chanseokoh", "createdAt": "2020-07-28T21:50:41Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java", "diffHunk": "@@ -63,7 +63,7 @@\n           new IllegalStateException(\"invalid usage; required step not configured\"));\n     }\n \n-    private Future<ImageAndRegistryClient> baseImageAndRegistryClient = failedFuture();\n+    private Future<ImagesAndRegistryClient> imagesAndRegistryClient = failedFuture();", "originalCommit": "703c7be5258d4e7cc10c22bf5c996f4285b3ae7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkwOTU3MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2634#discussion_r461909571", "bodyText": "I think it makes sense for this method to return List<Image>. Basically, not slipping the responsibilty of returning ImagesAndRegistryClient to this \"helper\" method, which can only have a local focus on downloading base images if viewed in isolation.", "author": "chanseokoh", "createdAt": "2020-07-28T21:57:21Z", "path": "jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java", "diffHunk": "@@ -187,25 +187,97 @@ public ImageAndRegistryClient call()\n    * @throws BadContainerConfigurationFormatException if the container configuration is in a bad\n    *     format\n    */\n-  private Image pullBaseImage(\n+  private ImagesAndRegistryClient pullBaseImages(", "originalCommit": "703c7be5258d4e7cc10c22bf5c996f4285b3ae7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "463b2e8734f658f46271a2b1cdfaac75b98c1582", "url": "https://github.com/GoogleContainerTools/jib/commit/463b2e8734f658f46271a2b1cdfaac75b98c1582", "message": "Update code (#2639)\n\nCo-authored-by: Chanseok Oh <chanseok@google.com>", "committedDate": "2020-07-28T22:19:02Z", "type": "commit"}, {"oid": "be2fad96d79c6526f59bea1166d73573e4b983a5", "url": "https://github.com/GoogleContainerTools/jib/commit/be2fad96d79c6526f59bea1166d73573e4b983a5", "message": "Refactoring Code", "committedDate": "2020-07-28T22:31:27Z", "type": "commit"}]}