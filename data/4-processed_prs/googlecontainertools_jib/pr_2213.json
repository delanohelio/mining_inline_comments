{"pr_number": 2213, "pr_title": "Update faq for class not found / method not found", "pr_createdAt": "2020-01-06T22:11:05Z", "pr_url": "https://github.com/GoogleContainerTools/jib/pull/2213", "timeline": [{"oid": "6a18aac2cb0acf24b84f2c688023998537550d1c", "url": "https://github.com/GoogleContainerTools/jib/commit/6a18aac2cb0acf24b84f2c688023998537550d1c", "message": "Update faq for class not found / method not found", "committedDate": "2020-01-06T22:10:47Z", "type": "commit"}, {"oid": "0ad9855563f538541b357edbb5c17e75a0a5fb94", "url": "https://github.com/GoogleContainerTools/jib/commit/0ad9855563f538541b357edbb5c17e75a0a5fb94", "message": "Update faq.md", "committedDate": "2020-01-06T22:14:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUwOTMwNg==", "url": "https://github.com/GoogleContainerTools/jib/pull/2213#discussion_r363509306", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This commonly appears in multi module gradle projects. A solution to this problem is to define all your plugins in the base project and apply them selectively in your subprojects as needed. This should help alleviate the problem of the buildscript classpath using older versions of a library.\n          \n          \n            \n            This commonly appears in multi module gradle projects. A solution to this problem is to define all of your plugins in the base project and apply them selectively in your subprojects as needed. This should help alleviate the problem of the buildscript classpath using older versions of a library.", "author": "TadCordle", "createdAt": "2020-01-06T22:16:05Z", "path": "docs/faq.md", "diffHunk": "@@ -537,6 +538,26 @@ kubectl patch serviceaccount default \\\n \n See more at [Using Google Container Registry (GCR) with Minikube](https://ryaneschinger.com/blog/using-google-container-registry-gcr-with-minikube/).\n \n+### I am seeing `Method Not Found` or `Class Not Found` when building\n+\n+Sometimes when upgrading your gradle build plugin versions, you may experience errors due to mismatching versions of dependencies pulled in. For example: [issues/2183](https://github.com/GoogleContainerTools/jib/issues/2183). This can be due to the buildscript classpath loading behavior described [on gradle forums](https://discuss.gradle.org/t/version-is-root-build-gradle-buildscript-is-overriding-subproject-buildscript-dependency-versions/20746/3). \n+\n+This commonly appears in multi module gradle projects. A solution to this problem is to define all your plugins in the base project and apply them selectively in your subprojects as needed. This should help alleviate the problem of the buildscript classpath using older versions of a library.", "originalCommit": "6a18aac2cb0acf24b84f2c688023998537550d1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUwOTcwMQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2213#discussion_r363509701", "bodyText": "I think the example part flows better if it's not in a separate sentence.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Sometimes when upgrading your gradle build plugin versions, you may experience errors due to mismatching versions of dependencies pulled in. For example: [issues/2183](https://github.com/GoogleContainerTools/jib/issues/2183). This can be due to the buildscript classpath loading behavior described [on gradle forums](https://discuss.gradle.org/t/version-is-root-build-gradle-buildscript-is-overriding-subproject-buildscript-dependency-versions/20746/3). \n          \n          \n            \n            Sometimes when upgrading your gradle build plugin versions, you may experience errors due to mismatching versions of dependencies pulled in (for example: [issues/2183](https://github.com/GoogleContainerTools/jib/issues/2183)). This can be due to the buildscript classpath loading behavior described [on gradle forums](https://discuss.gradle.org/t/version-is-root-build-gradle-buildscript-is-overriding-subproject-buildscript-dependency-versions/20746/3).", "author": "TadCordle", "createdAt": "2020-01-06T22:17:10Z", "path": "docs/faq.md", "diffHunk": "@@ -537,6 +538,26 @@ kubectl patch serviceaccount default \\\n \n See more at [Using Google Container Registry (GCR) with Minikube](https://ryaneschinger.com/blog/using-google-container-registry-gcr-with-minikube/).\n \n+### I am seeing `Method Not Found` or `Class Not Found` when building\n+\n+Sometimes when upgrading your gradle build plugin versions, you may experience errors due to mismatching versions of dependencies pulled in. For example: [issues/2183](https://github.com/GoogleContainerTools/jib/issues/2183). This can be due to the buildscript classpath loading behavior described [on gradle forums](https://discuss.gradle.org/t/version-is-root-build-gradle-buildscript-is-overriding-subproject-buildscript-dependency-versions/20746/3). ", "originalCommit": "6a18aac2cb0acf24b84f2c688023998537550d1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "801cc0ca909d688f0b492a1ee477f5e667ef0534", "url": "https://github.com/GoogleContainerTools/jib/commit/801cc0ca909d688f0b492a1ee477f5e667ef0534", "message": "Update docs/faq.md\n\nCo-Authored-By: Tad Cordle <tcordle@google.com>", "committedDate": "2020-01-06T22:19:29Z", "type": "commit"}, {"oid": "b924911d731e8e3397e76a99ce422a0403e90cce", "url": "https://github.com/GoogleContainerTools/jib/commit/b924911d731e8e3397e76a99ce422a0403e90cce", "message": "Update docs/faq.md\n\nCo-Authored-By: Tad Cordle <tcordle@google.com>", "committedDate": "2020-01-06T22:19:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk1Nzc5MQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2213#discussion_r363957791", "bodyText": "Actually, we should use quotes instead of backticks.", "author": "chanseokoh", "createdAt": "2020-01-07T21:24:31Z", "path": "docs/faq.md", "diffHunk": "@@ -537,6 +538,26 @@ kubectl patch serviceaccount default \\\n \n See more at [Using Google Container Registry (GCR) with Minikube](https://ryaneschinger.com/blog/using-google-container-registry-gcr-with-minikube/).\n \n+### I am seeing `Method Not Found` or `Class Not Found` errors when building.\n+\n+Sometimes when upgrading your gradle build plugin versions, you may experience errors due to mismatching versions of dependencies pulled in (for example: [issues/2183](https://github.com/GoogleContainerTools/jib/issues/2183)). This can be due to the buildscript classpath loading behavior described [on gradle forums](https://discuss.gradle.org/t/version-is-root-build-gradle-buildscript-is-overriding-subproject-buildscript-dependency-versions/20746/3). \n+\n+This commonly appears in multi module gradle projects. A solution to this problem is to define all of your plugins in the base project and apply them selectively in your subprojects as needed. This should help alleviate the problem of the buildscript classpath using older versions of a library.\n+\n+`build.gradle` (root)\n+```\n+plugins {\n+  id `com.google.cloud.tools.jib` version `x.y.z` apply false", "originalCommit": "b924911d731e8e3397e76a99ce422a0403e90cce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk1NzgyNQ==", "url": "https://github.com/GoogleContainerTools/jib/pull/2213#discussion_r363957825", "bodyText": "ditto", "author": "chanseokoh", "createdAt": "2020-01-07T21:24:37Z", "path": "docs/faq.md", "diffHunk": "@@ -537,6 +538,26 @@ kubectl patch serviceaccount default \\\n \n See more at [Using Google Container Registry (GCR) with Minikube](https://ryaneschinger.com/blog/using-google-container-registry-gcr-with-minikube/).\n \n+### I am seeing `Method Not Found` or `Class Not Found` errors when building.\n+\n+Sometimes when upgrading your gradle build plugin versions, you may experience errors due to mismatching versions of dependencies pulled in (for example: [issues/2183](https://github.com/GoogleContainerTools/jib/issues/2183)). This can be due to the buildscript classpath loading behavior described [on gradle forums](https://discuss.gradle.org/t/version-is-root-build-gradle-buildscript-is-overriding-subproject-buildscript-dependency-versions/20746/3). \n+\n+This commonly appears in multi module gradle projects. A solution to this problem is to define all of your plugins in the base project and apply them selectively in your subprojects as needed. This should help alleviate the problem of the buildscript classpath using older versions of a library.\n+\n+`build.gradle` (root)\n+```\n+plugins {\n+  id `com.google.cloud.tools.jib` version `x.y.z` apply false\n+  ...\n+}\n+```\n+\n+`build.gradle` (sub-project)\n+```\n+plugins {\n+  id `com.google.cloud.tools.jib`", "originalCommit": "b924911d731e8e3397e76a99ce422a0403e90cce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "70597f810c5353f6b11d803fd536bbbee91399c3", "url": "https://github.com/GoogleContainerTools/jib/commit/70597f810c5353f6b11d803fd536bbbee91399c3", "message": "Update faq.md", "committedDate": "2020-01-09T22:32:12Z", "type": "commit"}, {"oid": "e125e1a95cbd9898903105e289791ee103aeb7d1", "url": "https://github.com/GoogleContainerTools/jib/commit/e125e1a95cbd9898903105e289791ee103aeb7d1", "message": "Update faq.md", "committedDate": "2020-01-09T22:34:09Z", "type": "commit"}]}