{"pr_number": 8406, "pr_title": "Rest resource changes", "pr_createdAt": "2020-05-29T13:40:10Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8406", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5MzQ0Mg==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432493442", "bodyText": "For trivial formats like this I would just use String concatenation.", "author": "wburns", "createdAt": "2020-05-29T13:47:03Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/ServerResource.java", "diffHunk": "@@ -40,7 +40,7 @@\n  */\n public class ServerResource implements ResourceHandler {\n    private final InvocationHelper invocationHelper;\n-   private static final ServerInfo SERVER_INFO = new ServerInfo();\n+   private static final byte[] SERVER_INFO = String.format(\"{\\\"version\\\": \\\"%s\\\"}\", Version.printVersion()).getBytes();", "originalCommit": "045d7ac535c25766fbab8e689ceeaed886512133", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwOTA1Mw==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432509053", "bodyText": "I would keep this as is, unless there is a noticeable performance difference.\nServerInfo is a holder that happens to have only the version now, but the idea is to expand it in the future", "author": "gustavonalle", "createdAt": "2020-05-29T14:12:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5MzQ0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxMDY4MQ==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432510681", "bodyText": "String.format is considerably slower than a StringBuilder (which concatenation is replaced with). However since this is a static final the performance is negligible.\nAnd by \"keep this as is\" you mean to revert this change completely?\nTo be honest using reflection for our responses to me would be considerably slower than if we registered mappers, which is what Quarkus will need to do anyways.", "author": "wburns", "createdAt": "2020-05-29T14:14:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5MzQ0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUyMjY3Mg==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432522672", "bodyText": "And by \"keep this as is\" you mean to revert this change completely?\n\nI mean, keep ServerInfo holder", "author": "gustavonalle", "createdAt": "2020-05-29T14:27:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5MzQ0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4NjI3NQ==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432586275", "bodyText": "I've added a manual Serializer implementation to avoid reflection.", "author": "ryanemerson", "createdAt": "2020-05-29T16:04:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5MzQ0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432494471", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               static CompletableFuture<RestResponse> notFoundRspFuture() {\n          \n          \n            \n               static CompletableFuture<RestResponse> notFoundResponseFuture() {", "author": "wburns", "createdAt": "2020-05-29T13:48:41Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {", "originalCommit": "c6f9e85015fffafbe60fff987428945c0ea87236", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDkyMw==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432494923", "bodyText": "And actually shouldn't this method store a cached response object to not allocate it every time? And this should probably return a CompletionStage ?", "author": "wburns", "createdAt": "2020-05-29T13:49:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NTYxOA==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432495618", "bodyText": "Actually looking further all of the methods here have the reduced Rsp wording. It personally feels a bit weird to me, but if you think it makes the methods too long I  guess I am fine with it. Also all of the methods should return CompletionStage<..>", "author": "wburns", "createdAt": "2020-05-29T13:50:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwNTczNA==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432505734", "bodyText": "RestResponses should not be reused as they contain a netty byte buffer inside", "author": "gustavonalle", "createdAt": "2020-05-29T14:06:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwNzk1OQ==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432507959", "bodyText": "Ah, that is a shame because this response to me should be completely stateles...", "author": "wburns", "createdAt": "2020-05-29T14:10:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUyOTcxMQ==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432529711", "bodyText": "We tried it a while ago and the result was not good :)", "author": "gustavonalle", "createdAt": "2020-05-29T14:35:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzMjEwMw==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432532103", "bodyText": "I don't mind if we use Rsp or Response. Originally it was the latter and then I changed it.", "author": "ryanemerson", "createdAt": "2020-05-29T14:39:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzMzI2OQ==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432533269", "bodyText": "#7121", "author": "gustavonalle", "createdAt": "2020-05-29T14:41:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzNDE3Ng==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432534176", "bodyText": "Response is more expressive. Rsp seems like a JGroups protocol  :)", "author": "gustavonalle", "createdAt": "2020-05-29T14:42:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzNDQ5MA==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432534490", "bodyText": "Ah, you could always just increment the refCount once and then it would never be collected though. I have to admit I am surprised that the buffer would contain anything anyways.", "author": "wburns", "createdAt": "2020-05-29T14:43:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0NDE5Nw==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432544197", "bodyText": "Ah, you could always just increment the refCount once and then it would never be collected though\n\nI can't remember if I tried that or not, I remember it was tricky to track it down. Maybe you can give a try sometime?", "author": "gustavonalle", "createdAt": "2020-05-29T14:57:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU1ODAwOQ==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432558009", "bodyText": "It probably isn't worth it.", "author": "wburns", "createdAt": "2020-05-29T15:19:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDQ3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NjYzNw==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432496637", "bodyText": "I am not sure if @gustavonalle was trying to hide the cause of the server error or not before. I know it can sometimes be frowned upon exposing some stuff to clients.", "author": "wburns", "createdAt": "2020-05-29T13:52:02Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {\n+      return CompletableFuture.completedFuture(\n+            new NettyRestResponse.Builder()\n+                  .status(HttpResponseStatus.NOT_FOUND)\n+                  .build()\n+      );\n+   }\n+\n+   static RestResponse objToJsonRsp(Object o, InvocationHelper invocationHelper) {\n+      return addJsonToRspBuilder(o, new NettyRestResponse.Builder(), invocationHelper).build();\n+   }\n+\n+   static CompletableFuture<RestResponse> objToJsonRspFuture(Object o, InvocationHelper invocationHelper) {\n+      return completedFuture(objToJsonRsp(o, invocationHelper));\n+   }\n+\n+   static CompletableFuture<RestResponse> objToJsonRspFuture(Object o, NettyRestResponse.Builder responseBuilder, InvocationHelper invocationHelper) {\n+      RestResponse response = addJsonToRspBuilder(o, responseBuilder, invocationHelper).build();\n+      return completedFuture(response);\n+   }\n+\n+   static NettyRestResponse.Builder addJsonToRspBuilder(Object o, NettyRestResponse.Builder responseBuilder, InvocationHelper invocationHelper) {\n+      try {\n+         byte[] bytes = invocationHelper.getMapper().writeValueAsBytes(o);\n+         responseBuilder.contentType(APPLICATION_JSON).entity(bytes).status(OK);\n+      } catch (JsonProcessingException e) {\n+         logger.error(e);\n+         responseBuilder.status(HttpResponseStatus.INTERNAL_SERVER_ERROR).entity(e.getMessage());", "originalCommit": "c6f9e85015fffafbe60fff987428945c0ea87236", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwNzg0NA==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432507844", "bodyText": "The idea is to expose the error in a structured way, like query is doing, in JSON with a message and the cause: \n  \n    \n      infinispan/remote-query/remote-query-server/src/main/java/org/infinispan/query/remote/json/JsonQueryErrorResult.java\n    \n    \n         Line 15\n      in\n      a922cc2\n    \n    \n    \n    \n\n        \n          \n           public class JsonQueryErrorResult extends JsonQueryResponse { \n        \n    \n  \n\n\nLooks like it is a good time to do it @ryanemerson", "author": "gustavonalle", "createdAt": "2020-05-29T14:10:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NjYzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzNDMxOA==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432534318", "bodyText": "Makes sense, I'll add a JsonErrorResult class.", "author": "ryanemerson", "createdAt": "2020-05-29T14:42:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NjYzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxNTcyMA==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432515720", "bodyText": "Signature suggestion:\nRestResponse asJsonResponse(Object o, InvocationHelper invocationHelper)", "author": "gustavonalle", "createdAt": "2020-05-29T14:20:06Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {\n+      return CompletableFuture.completedFuture(\n+            new NettyRestResponse.Builder()\n+                  .status(HttpResponseStatus.NOT_FOUND)\n+                  .build()\n+      );\n+   }\n+\n+   static RestResponse objToJsonRsp(Object o, InvocationHelper invocationHelper) {", "originalCommit": "c6f9e85015fffafbe60fff987428945c0ea87236", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxNjIyMw==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432516223", "bodyText": "asJsonResponseFuture()", "author": "gustavonalle", "createdAt": "2020-05-29T14:20:36Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {\n+      return CompletableFuture.completedFuture(\n+            new NettyRestResponse.Builder()\n+                  .status(HttpResponseStatus.NOT_FOUND)\n+                  .build()\n+      );\n+   }\n+\n+   static RestResponse objToJsonRsp(Object o, InvocationHelper invocationHelper) {\n+      return addJsonToRspBuilder(o, new NettyRestResponse.Builder(), invocationHelper).build();\n+   }\n+\n+   static CompletableFuture<RestResponse> objToJsonRspFuture(Object o, InvocationHelper invocationHelper) {", "originalCommit": "c6f9e85015fffafbe60fff987428945c0ea87236", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxNjQ0OA==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432516448", "bodyText": "idem", "author": "gustavonalle", "createdAt": "2020-05-29T14:20:49Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {\n+      return CompletableFuture.completedFuture(\n+            new NettyRestResponse.Builder()\n+                  .status(HttpResponseStatus.NOT_FOUND)\n+                  .build()\n+      );\n+   }\n+\n+   static RestResponse objToJsonRsp(Object o, InvocationHelper invocationHelper) {\n+      return addJsonToRspBuilder(o, new NettyRestResponse.Builder(), invocationHelper).build();\n+   }\n+\n+   static CompletableFuture<RestResponse> objToJsonRspFuture(Object o, InvocationHelper invocationHelper) {\n+      return completedFuture(objToJsonRsp(o, invocationHelper));\n+   }\n+\n+   static CompletableFuture<RestResponse> objToJsonRspFuture(Object o, NettyRestResponse.Builder responseBuilder, InvocationHelper invocationHelper) {", "originalCommit": "c6f9e85015fffafbe60fff987428945c0ea87236", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxNzk0OA==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r432517948", "bodyText": "addEntityAsJson(Object entity, NettyRestResponse.Builder responseBuilder, InvocationHelper invocationHelper)", "author": "gustavonalle", "createdAt": "2020-05-29T14:22:24Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.infinispan.rest.resources;\n+\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static java.util.concurrent.CompletableFuture.completedFuture;\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_JSON;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.infinispan.rest.InvocationHelper;\n+import org.infinispan.rest.NettyRestResponse;\n+import org.infinispan.rest.framework.RestResponse;\n+import org.infinispan.rest.logging.Log;\n+import org.infinispan.util.logging.LogFactory;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Util class for REST resources.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+class ResourceUtil {\n+   private final static Log logger = LogFactory.getLog(ResourceUtil.class, Log.class);\n+\n+   static CompletableFuture<RestResponse> notFoundRspFuture() {\n+      return CompletableFuture.completedFuture(\n+            new NettyRestResponse.Builder()\n+                  .status(HttpResponseStatus.NOT_FOUND)\n+                  .build()\n+      );\n+   }\n+\n+   static RestResponse objToJsonRsp(Object o, InvocationHelper invocationHelper) {\n+      return addJsonToRspBuilder(o, new NettyRestResponse.Builder(), invocationHelper).build();\n+   }\n+\n+   static CompletableFuture<RestResponse> objToJsonRspFuture(Object o, InvocationHelper invocationHelper) {\n+      return completedFuture(objToJsonRsp(o, invocationHelper));\n+   }\n+\n+   static CompletableFuture<RestResponse> objToJsonRspFuture(Object o, NettyRestResponse.Builder responseBuilder, InvocationHelper invocationHelper) {\n+      RestResponse response = addJsonToRspBuilder(o, responseBuilder, invocationHelper).build();\n+      return completedFuture(response);\n+   }\n+\n+   static NettyRestResponse.Builder addJsonToRspBuilder(Object o, NettyRestResponse.Builder responseBuilder, InvocationHelper invocationHelper) {", "originalCommit": "c6f9e85015fffafbe60fff987428945c0ea87236", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cabd53fc1c1631be193e937c8e21c796ba8fc4ba", "url": "https://github.com/infinispan/infinispan/commit/cabd53fc1c1631be193e937c8e21c796ba8fc4ba", "message": "ISPN-11935 Add REST resource util class", "committedDate": "2020-05-29T15:19:34Z", "type": "forcePushed"}, {"oid": "d4c20442b8da55130e8644358383ce6a466a0911", "url": "https://github.com/infinispan/infinispan/commit/d4c20442b8da55130e8644358383ce6a466a0911", "message": "ISPN-11934 Add ServerResource.ServerInfo serializer to avoid unnecessary reflection", "committedDate": "2020-05-29T15:45:19Z", "type": "forcePushed"}, {"oid": "539b932df40307c91858e7292be00bcb107ad3f2", "url": "https://github.com/infinispan/infinispan/commit/539b932df40307c91858e7292be00bcb107ad3f2", "message": "ISPN-11927 Remove Util#threadDump java.lang.management dependencies", "committedDate": "2020-06-02T14:44:57Z", "type": "commit"}, {"oid": "c57fd6651aee7c062609803495c687d22a8d4cea", "url": "https://github.com/infinispan/infinispan/commit/c57fd6651aee7c062609803495c687d22a8d4cea", "message": "ISPN-11928 Rest /v2/server/env should utilise System.getProperties()", "committedDate": "2020-06-02T14:44:57Z", "type": "commit"}, {"oid": "6eb41f09e54b53b48d7980a2dfb8c13defa38247", "url": "https://github.com/infinispan/infinispan/commit/6eb41f09e54b53b48d7980a2dfb8c13defa38247", "message": "ISPN-11935 Add REST resource util class", "committedDate": "2020-06-02T14:48:24Z", "type": "commit"}, {"oid": "f9058306bae8213a9dd34030b29ab34b816f325e", "url": "https://github.com/infinispan/infinispan/commit/f9058306bae8213a9dd34030b29ab34b816f325e", "message": "ISPN-11934 Add ServerResource.ServerInfo serializer to avoid unnecessary reflection", "committedDate": "2020-06-02T14:48:44Z", "type": "commit"}, {"oid": "f9058306bae8213a9dd34030b29ab34b816f325e", "url": "https://github.com/infinispan/infinispan/commit/f9058306bae8213a9dd34030b29ab34b816f325e", "message": "ISPN-11934 Add ServerResource.ServerInfo serializer to avoid unnecessary reflection", "committedDate": "2020-06-02T14:48:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc4MDk1OA==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r436780958", "bodyText": "This needs to be wrapped in a SecurityAction", "author": "tristantarrant", "createdAt": "2020-06-08T15:07:18Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/ServerResource.java", "diffHunk": "@@ -89,34 +97,27 @@ public Invocations getInvocations() {\n    private CompletionStage<RestResponse> listIgnored(RestRequest restRequest) {\n       String cacheManagerName = restRequest.variables().get(\"cache-manager\");\n       DefaultCacheManager cacheManager = invocationHelper.getServer().getCacheManager(cacheManagerName);\n-      NettyRestResponse.Builder builder = new NettyRestResponse.Builder();\n \n-      if (cacheManager == null) return completedFuture(builder.status(NOT_FOUND).build());\n+      if (cacheManager == null) return notFoundResponseFuture();\n       CacheIgnoreManager ignoreManager = invocationHelper.getServer().getIgnoreManager(cacheManagerName);\n       Set<String> ignored = ignoreManager.getIgnoredCaches();\n-      try {\n-         byte[] resultBytes = invocationHelper.getMapper().writeValueAsBytes(ignored);\n-         builder.contentType(APPLICATION_JSON_TYPE).entity(resultBytes);\n-      } catch (JsonProcessingException e) {\n-         builder.status(HttpResponseStatus.INTERNAL_SERVER_ERROR).entity(e.getMessage());\n-      }\n-      return completedFuture(builder.build());\n+      return asJsonResponseFuture(ignored, invocationHelper);\n    }\n \n    private CompletionStage<RestResponse> cacheManagers(RestRequest restRequest) {\n-      return serializeObject(invocationHelper.getServer().cacheManagerNames());\n+      return asJsonResponseFuture(invocationHelper.getServer().cacheManagerNames(), invocationHelper);\n    }\n \n    private CompletionStage<RestResponse> memory(RestRequest restRequest) {\n-      return serializeObject(new JVMMemoryInfoInfo());\n+      return asJsonResponseFuture(new JVMMemoryInfoInfo(), invocationHelper);\n    }\n \n    private CompletionStage<RestResponse> env(RestRequest restRequest) {\n-      return serializeObject(ManagementFactory.getRuntimeMXBean().getSystemProperties());\n+      return asJsonResponseFuture(System.getProperties(), invocationHelper);", "originalCommit": "f9058306bae8213a9dd34030b29ab34b816f325e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc4NDgxNA==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r436784814", "bodyText": "Right, unfortunately this was never caught by the Rest tests (that enable security) since the ServerResource is only tested in the server module...", "author": "gustavonalle", "createdAt": "2020-06-08T15:13:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc4MDk1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc4NzkxNg==", "url": "https://github.com/infinispan/infinispan/pull/8406#discussion_r436787916", "bodyText": "https://issues.redhat.com/browse/ISPN-11979", "author": "gustavonalle", "createdAt": "2020-06-08T15:17:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc4MDk1OA=="}], "type": "inlineReview"}]}