{"pr_number": 8319, "pr_title": "[10.1.x] ISPN-11825 update procedure to register schemas with CLI", "pr_createdAt": "2020-05-14T13:58:28Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8319", "timeline": [{"oid": "bb31926d6417e46f2ca80a7d1cc7da54ddc72052", "url": "https://github.com/infinispan/infinispan/commit/bb31926d6417e46f2ca80a7d1cc7da54ddc72052", "message": "ISPN-11825 update procedure to register schemas with CLI", "committedDate": "2020-05-19T10:23:15Z", "type": "forcePushed"}, {"oid": "271d34118794c23bc26bc55dcc6eedff94c5cc63", "url": "https://github.com/infinispan/infinispan/commit/271d34118794c23bc26bc55dcc6eedff94c5cc63", "message": "ISPN-11825 update procedure to register schemas with CLI", "committedDate": "2020-05-21T08:19:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3NjgyOQ==", "url": "https://github.com/infinispan/infinispan/pull/8319#discussion_r432376829", "bodyText": "this is only needed for write access. might want to add 2 words here to make it clear what you mean by 'access the...'", "author": "anistor", "createdAt": "2020-05-29T09:48:39Z", "path": "documentation/src/main/asciidoc/topics/query.adoc", "diffHunk": "@@ -1489,26 +1489,63 @@ marshaller. This is _key_ for the search capability to work. But it's also possi\n gaining the benefit of platform independence and not enable indexing if you do not need it.\n \n [[enable_indexing]]\n-=== Indexing of Protobuf encoded entries\n-After configuring the client as described in the previous section you can start configuring indexing for your caches on\n-the server side. Activating indexing and the various indexing specific configurations is identical to embedded mode and\n-is detailed in the link:#query_configuration_api[Querying {brandname}] chapter.\n-\n-There is however an extra configuration step involved. While in embedded mode the indexing metadata is obtained via Java\n-reflection by analyzing the presence of various Hibernate Search annotations on the entry's class, this is obviously not\n-possible if the entry is protobuf encoded.\n-The server needs to obtain the relevant metadata from the same descriptor (.proto file) as the client.\n-The descriptors are stored in a dedicated cache on the server named _'___protobuf_metadata'_. Both keys and values in\n-this cache are plain strings. Registering a new schema is therefore as simple as performing a _put_ operation on this\n-cache using the schema's name as key and the schema file itself as the value.\n-Alternatively you can use the CLI (via the cache-container=*:register-proto-schemas() operation), the Management Console\n-or the _ProtobufMetadataManager_ MBean via JMX.\n-Be aware that, when security is enabled, access to the schema cache via the remote protocols requires\n-that the user belongs to the pass:['___schema_manager'] role.\n-\n-NOTE: Even if indexing is enabled for a cache no fields of Protobuf encoded entries will be indexed unless you use\n-the _@Indexed_ and _@Field_ protobuf schema documentation annotations in order to specify what fields need to get\n-indexed.\n+=== Indexing Protobuf-encoded entries\n+After configuring the client as described in the previous section you can start\n+configuring indexing for your caches on the server side. Activating indexing\n+and the various indexing specific configurations is identical to embedded mode\n+and is explained in link:#query_configuration_api[Querying {brandname}].\n+\n+[NOTE]\n+====\n+{brandname} does not index fields in Protobuf-encoded entries unless you use\n+the _@Indexed_ and _@Field_ annotations to specify which fields are indexed.\n+====\n+\n+==== Registering Protobuf Schemas on {brandname} Servers\n+{brandname} servers need to access indexing metadata from the same descriptor,\n+`.proto` file, as clients. For this reason, {brandname} servers store `.proto`\n+files in a dedicated cache, `___protobuf_metadata`, that stores both keys and\n+values as plain strings.\n+\n+.Prerequisites\n+\n+* If you use cache authorization to control access, assign users the", "originalCommit": "271d34118794c23bc26bc55dcc6eedff94c5cc63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4MDczNw==", "url": "https://github.com/infinispan/infinispan/pull/8319#discussion_r432380737", "bodyText": "thanks Adrian", "author": "oraNod", "createdAt": "2020-05-29T09:55:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3NjgyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3Nzc1OQ==", "url": "https://github.com/infinispan/infinispan/pull/8319#discussion_r432377759", "bodyText": "the PUT operation is hidden behind the schema command.", "author": "anistor", "createdAt": "2020-05-29T09:50:24Z", "path": "documentation/src/main/asciidoc/topics/query.adoc", "diffHunk": "@@ -1489,26 +1489,63 @@ marshaller. This is _key_ for the search capability to work. But it's also possi\n gaining the benefit of platform independence and not enable indexing if you do not need it.\n \n [[enable_indexing]]\n-=== Indexing of Protobuf encoded entries\n-After configuring the client as described in the previous section you can start configuring indexing for your caches on\n-the server side. Activating indexing and the various indexing specific configurations is identical to embedded mode and\n-is detailed in the link:#query_configuration_api[Querying {brandname}] chapter.\n-\n-There is however an extra configuration step involved. While in embedded mode the indexing metadata is obtained via Java\n-reflection by analyzing the presence of various Hibernate Search annotations on the entry's class, this is obviously not\n-possible if the entry is protobuf encoded.\n-The server needs to obtain the relevant metadata from the same descriptor (.proto file) as the client.\n-The descriptors are stored in a dedicated cache on the server named _'___protobuf_metadata'_. Both keys and values in\n-this cache are plain strings. Registering a new schema is therefore as simple as performing a _put_ operation on this\n-cache using the schema's name as key and the schema file itself as the value.\n-Alternatively you can use the CLI (via the cache-container=*:register-proto-schemas() operation), the Management Console\n-or the _ProtobufMetadataManager_ MBean via JMX.\n-Be aware that, when security is enabled, access to the schema cache via the remote protocols requires\n-that the user belongs to the pass:['___schema_manager'] role.\n-\n-NOTE: Even if indexing is enabled for a cache no fields of Protobuf encoded entries will be indexed unless you use\n-the _@Indexed_ and _@Field_ protobuf schema documentation annotations in order to specify what fields need to get\n-indexed.\n+=== Indexing Protobuf-encoded entries\n+After configuring the client as described in the previous section you can start\n+configuring indexing for your caches on the server side. Activating indexing\n+and the various indexing specific configurations is identical to embedded mode\n+and is explained in link:#query_configuration_api[Querying {brandname}].\n+\n+[NOTE]\n+====\n+{brandname} does not index fields in Protobuf-encoded entries unless you use\n+the _@Indexed_ and _@Field_ annotations to specify which fields are indexed.\n+====\n+\n+==== Registering Protobuf Schemas on {brandname} Servers\n+{brandname} servers need to access indexing metadata from the same descriptor,\n+`.proto` file, as clients. For this reason, {brandname} servers store `.proto`\n+files in a dedicated cache, `___protobuf_metadata`, that stores both keys and\n+values as plain strings.\n+\n+.Prerequisites\n+\n+* If you use cache authorization to control access, assign users the\n+pass:['___schema_manager'] role to access the `___protobuf_metadata` cache.\n+\n+.Procedure\n+\n+To register a schema with {brandname} server, perform a _put_ operation on the", "originalCommit": "271d34118794c23bc26bc55dcc6eedff94c5cc63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4MTIxOA==", "url": "https://github.com/infinispan/infinispan/pull/8319#discussion_r432381218", "bodyText": "yeah, good point. we can trim some of the fat here.", "author": "oraNod", "createdAt": "2020-05-29T09:56:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3Nzc1OQ=="}], "type": "inlineReview"}, {"oid": "cf01f19c480d9aea3f9d2b18228fd9adc735c844", "url": "https://github.com/infinispan/infinispan/commit/cf01f19c480d9aea3f9d2b18228fd9adc735c844", "message": "ISPN-11825 update procedure to register schemas with CLI", "committedDate": "2020-05-29T09:55:31Z", "type": "forcePushed"}, {"oid": "7bf7ec40261fba362ee5539ab9f6215448c0a6d2", "url": "https://github.com/infinispan/infinispan/commit/7bf7ec40261fba362ee5539ab9f6215448c0a6d2", "message": "ISPN-11825 update procedure to register schemas with CLI", "committedDate": "2020-05-29T09:59:59Z", "type": "commit"}, {"oid": "7bf7ec40261fba362ee5539ab9f6215448c0a6d2", "url": "https://github.com/infinispan/infinispan/commit/7bf7ec40261fba362ee5539ab9f6215448c0a6d2", "message": "ISPN-11825 update procedure to register schemas with CLI", "committedDate": "2020-05-29T09:59:59Z", "type": "forcePushed"}]}