{"pr_number": 8107, "pr_title": "ISPN-11512 The mass indexer should iterate over the cache only once", "pr_createdAt": "2020-03-26T11:11:07Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8107", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUzNDA2Mw==", "url": "https://github.com/infinispan/infinispan/pull/8107#discussion_r398534063", "bodyText": "This types is used only to count them ? And then writeObject + convertToLegacy again? surely a mistake", "author": "anistor", "createdAt": "2020-03-26T12:30:39Z", "path": "query/src/main/java/org/infinispan/query/impl/massindex/IndexWorker.java", "diffHunk": "@@ -151,7 +153,15 @@ private Object extractValue(Object storageValue, DataConversion valueDataConvers\n       @Override\n       public void writeObject(ObjectOutput output, IndexWorker worker) throws IOException {\n          output.writeObject(worker.cacheName);\n-         output.writeObject(PojoIndexedTypeIdentifier.convertToLegacy(worker.indexedType));\n+         if (worker.indexedTypes == null) {\n+            output.writeInt(0);\n+         } else {\n+            Set<? extends Class<?>> types = worker.indexedTypes.stream().map(PojoIndexedTypeIdentifier::convertToLegacy).collect(Collectors.toSet());", "originalCommit": "c2c6751b97d1c98497b384b8f6ab90c59b283773", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYzMzk3NQ==", "url": "https://github.com/infinispan/infinispan/pull/8107#discussion_r398633975", "bodyText": "ops...", "author": "gustavonalle", "createdAt": "2020-03-26T14:51:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUzNDA2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUzNTM2OA==", "url": "https://github.com/infinispan/infinispan/pull/8107#discussion_r398535368", "bodyText": "Is the initial capacity really helping ?", "author": "anistor", "createdAt": "2020-03-26T12:32:55Z", "path": "query/src/main/java/org/infinispan/query/impl/massindex/IndexWorker.java", "diffHunk": "@@ -162,14 +172,19 @@ public void writeObject(ObjectOutput output, IndexWorker worker) throws IOExcept\n       @Override\n       public IndexWorker readObject(ObjectInput input) throws IOException, ClassNotFoundException {\n          String cacheName = (String) input.readObject();\n-         Class indexedClass = (Class) input.readObject();\n+         int typesSize = input.readInt();\n+         Set<IndexedTypeIdentifier> types = new HashSet<>(typesSize);", "originalCommit": "c2c6751b97d1c98497b384b8f6ab90c59b283773", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY0OTQ1Mg==", "url": "https://github.com/infinispan/infinispan/pull/8107#discussion_r398649452", "bodyText": "TBH using or not initial capacity here is irrelevant: this Set will be generally small (< 10), and instances will  be created almost never", "author": "gustavonalle", "createdAt": "2020-03-26T15:10:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUzNTM2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUzNjE2Mw==", "url": "https://github.com/infinispan/infinispan/pull/8107#discussion_r398536163", "bodyText": "The if (typesSize > 0)  is not needed, the for already guards against that.", "author": "anistor", "createdAt": "2020-03-26T12:34:18Z", "path": "query/src/main/java/org/infinispan/query/impl/massindex/IndexWorker.java", "diffHunk": "@@ -162,14 +172,19 @@ public void writeObject(ObjectOutput output, IndexWorker worker) throws IOExcept\n       @Override\n       public IndexWorker readObject(ObjectInput input) throws IOException, ClassNotFoundException {\n          String cacheName = (String) input.readObject();\n-         Class indexedClass = (Class) input.readObject();\n+         int typesSize = input.readInt();\n+         Set<IndexedTypeIdentifier> types = new HashSet<>(typesSize);\n+         if (typesSize > 0) {", "originalCommit": "c2c6751b97d1c98497b384b8f6ab90c59b283773", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUzNzc0OQ==", "url": "https://github.com/infinispan/infinispan/pull/8107#discussion_r398537749", "bodyText": "Perfect timing to also sort out the TODO on line 76", "author": "anistor", "createdAt": "2020-03-26T12:37:04Z", "path": "query/src/main/java/org/infinispan/query/impl/massindex/IndexWorker.java", "diffHunk": "@@ -46,17 +47,17 @@\n public final class IndexWorker implements Function<EmbeddedCacheManager, Void> {\n \n    private final String cacheName;\n-   private final IndexedTypeIdentifier indexedType;\n+   private final Set<IndexedTypeIdentifier> indexedTypes;\n    private final boolean flush;\n    private final boolean clean;\n    private final boolean skipIndex;\n    private final boolean primaryOwner;\n    private final Set<Object> keys;\n \n-   IndexWorker(String cacheName, IndexedTypeIdentifier indexedType, boolean flush, boolean clean, boolean skipIndex,\n+   IndexWorker(String cacheName, Set<IndexedTypeIdentifier> indexedTypes, boolean flush, boolean clean, boolean skipIndex,", "originalCommit": "c2c6751b97d1c98497b384b8f6ab90c59b283773", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYzODUwOA==", "url": "https://github.com/infinispan/infinispan/pull/8107#discussion_r398638508", "bodyText": "I have upcoming PRs that will get rid of most of that cache decoration", "author": "gustavonalle", "createdAt": "2020-03-26T14:56:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUzNzc0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUzODk4NA==", "url": "https://github.com/infinispan/infinispan/pull/8107#discussion_r398538984", "bodyText": "When reading, this silently leads to null being transformed into empty set. Do we care?", "author": "anistor", "createdAt": "2020-03-26T12:39:07Z", "path": "query/src/main/java/org/infinispan/query/impl/massindex/IndexWorker.java", "diffHunk": "@@ -151,7 +153,15 @@ private Object extractValue(Object storageValue, DataConversion valueDataConvers\n       @Override\n       public void writeObject(ObjectOutput output, IndexWorker worker) throws IOException {\n          output.writeObject(worker.cacheName);\n-         output.writeObject(PojoIndexedTypeIdentifier.convertToLegacy(worker.indexedType));\n+         if (worker.indexedTypes == null) {\n+            output.writeInt(0);", "originalCommit": "c2c6751b97d1c98497b384b8f6ab90c59b283773", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYzOTI4NA==", "url": "https://github.com/infinispan/infinispan/pull/8107#discussion_r398639284", "bodyText": "not really, when Re-indexing only a set of keys using the MassIndexer, the types are ignored", "author": "gustavonalle", "createdAt": "2020-03-26T14:57:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODUzODk4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU0MTM0OQ==", "url": "https://github.com/infinispan/infinispan/pull/8107#discussion_r398541349", "bodyText": "I think this TODO was just resolved \ud83d\ude01", "author": "anistor", "createdAt": "2020-03-26T12:42:59Z", "path": "query/src/main/java/org/infinispan/query/impl/massindex/IndexWorker.java", "diffHunk": "@@ -103,8 +104,9 @@ public Void apply(EmbeddedCacheManager embeddedCacheManager) {\n                      value = wrapper.wrap(value);\n                   }\n                   //TODO do not use Class equality but refactor to type equality:", "originalCommit": "c2c6751b97d1c98497b384b8f6ab90c59b283773", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU0Njg3Mg==", "url": "https://github.com/infinispan/infinispan/pull/8107#discussion_r398546872", "bodyText": "This compositeFuture could be declared directly where it is used.", "author": "anistor", "createdAt": "2020-03-26T12:51:42Z", "path": "query/src/main/java/org/infinispan/query/impl/massindex/DistributedExecutorMassIndexer.java", "diffHunk": "@@ -186,33 +186,32 @@ public boolean isRunning() {\n \n          BiConsumer<Void, Throwable> flushIfNeeded = (v, t) -> {\n             try {\n-               for (IndexedTypeIdentifier type : toFlush) {\n-                  indexUpdater.flush(type);\n-               }\n+               indexUpdater.flush(toFlush);\n             } finally {\n                lock.unlock();\n             }\n          };\n          CompletableFuture<Void> compositeFuture;", "originalCommit": "c2c6751b97d1c98497b384b8f6ab90c59b283773", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2d1cfe6d8c8a514d050f92b8dd720154afb21e2e", "url": "https://github.com/infinispan/infinispan/commit/2d1cfe6d8c8a514d050f92b8dd720154afb21e2e", "message": "ISPN-11512 Group indexing operations by shared/not-shared index type", "committedDate": "2020-03-27T07:55:11Z", "type": "commit"}, {"oid": "2d1cfe6d8c8a514d050f92b8dd720154afb21e2e", "url": "https://github.com/infinispan/infinispan/commit/2d1cfe6d8c8a514d050f92b8dd720154afb21e2e", "message": "ISPN-11512 Group indexing operations by shared/not-shared index type", "committedDate": "2020-03-27T07:55:11Z", "type": "forcePushed"}]}