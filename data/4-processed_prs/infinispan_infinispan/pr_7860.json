{"pr_number": 7860, "pr_title": "ISPN-11292 Add in (non)blocking thread pools", "pr_createdAt": "2020-02-07T16:49:23Z", "pr_url": "https://github.com/infinispan/infinispan/pull/7860", "timeline": [{"oid": "16172b6018a70076bf5d5a7edc4b92b3295de80a", "url": "https://github.com/infinispan/infinispan/commit/16172b6018a70076bf5d5a7edc4b92b3295de80a", "message": "ISPN-11292 Add in (non)blocking thread pools", "committedDate": "2020-02-07T16:52:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2ODQ1Mw==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r377068453", "bodyText": "I think the execution needs to stay on a non-blocking thread here, and only needs a new thread so that the thread that unlocked the keys can continue executing (possibly unlocking other keys, or sending back a response).\nSame thing in PerKeyLockContainer and StripedLockContainer.", "author": "danberindei", "createdAt": "2020-02-10T13:42:20Z", "path": "core/src/main/java/org/infinispan/util/concurrent/locks/impl/DefaultLockManager.java", "diffHunk": "@@ -120,7 +120,7 @@ public KeyAwareLockPromise lockAll(Collection<?> keys, Object lockOwner, long ti\n                unit);\n       }\n \n-      final CompositeLockPromise compositeLockPromise = new CompositeLockPromise(uniqueKeys.size(), executor);\n+      final CompositeLockPromise compositeLockPromise = new CompositeLockPromise(uniqueKeys.size(), blockingExecutor);", "originalCommit": "16172b6018a70076bf5d5a7edc4b92b3295de80a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQzNTQ4NQ==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379435485", "bodyText": "I created https://issues.redhat.com/browse/ISPN-11295 to handle this a week ago. It will be on the plan moving forward, I just didn't want to get into that in this PR. If you want I can revert the use of blockingExecutor for now though.", "author": "wburns", "createdAt": "2020-02-14T13:42:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2ODQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQzNTkxMg==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379435912", "bodyText": "Unless you are thinking of something else? Need to somehow get CompletionStages#continueOnExecutor in there.", "author": "wburns", "createdAt": "2020-02-14T13:43:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2ODQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUwNDEzNQ==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379504135", "bodyText": "The problem is that the InfinispanLock#lock method can invoke await. I have reverted back to non blocking thread and the JIRA I logged can move that await block into continuteExecutor it looks like.", "author": "wburns", "createdAt": "2020-02-14T15:49:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2ODQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIzMTIwNA==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r381231204", "bodyText": "@wburns Ok. I was pretty certain that LockPlaceholder#lock would never be called while the lock is still in the WAITING state, but that code is pretty complex so can't be 100% sure until we remove that code path completely.", "author": "danberindei", "createdAt": "2020-02-19T11:21:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2ODQ1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3Mjg0Mg==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r377072842", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               @Message(value = \"Thread Pool Factory %s is blocking, but the pool %s requires non blocking threads\", id = 566)\n          \n          \n            \n               @Message(value = \"Thread Pool Factory %s is blocking, but pool %s requires non blocking threads\", id = 566)", "author": "danberindei", "createdAt": "2020-02-10T13:50:06Z", "path": "core/src/main/java/org/infinispan/util/logging/Log.java", "diffHunk": "@@ -1921,8 +1921,8 @@ CacheConfigurationException offHeapMemoryEvictionSizeNotLargeEnoughForAddresses(\n    @Message(value = \"Index.LOCAL is no longer supported since version 10.0. Deprecated usages are automatically converted to Index.PRIMARY_OWNER. Please update your configuration!\", id = 565)\n    void indexLocalIsNotSupported();\n \n-   @Message(value = \"Thread Pool Factory %s is blocking, but this pool requires non blocking threads\", id = 566)\n-   CacheConfigurationException threadPoolFactoryIsBlocking(String name);\n+   @Message(value = \"Thread Pool Factory %s is blocking, but the pool %s requires non blocking threads\", id = 566)", "originalCommit": "16172b6018a70076bf5d5a7edc4b92b3295de80a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQzNjAxMQ==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379436011", "bodyText": "Sure", "author": "wburns", "createdAt": "2020-02-14T13:43:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3Mjg0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MzY5Mw==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r377073693", "bodyText": "keepalive-time is an attribute, not an element", "author": "danberindei", "createdAt": "2020-02-10T13:51:42Z", "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -177,6 +177,37 @@\n           <xs:attribute name=\"queue-length\" type=\"xs:string\"/>\n         </xs:complexType>\n       </xs:element>\n+      <xs:element name=\"non-blocking-bounded-queue-thread-pool\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+        <xs:complexType>\n+          <xs:annotation>\n+            <xs:documentation>\n+              <![CDATA[\n+                A thread pool executor with a bounded queue which should only run non blocking operations.  Such a\n+                thread pool has a core size and a queue with an\n+                upper bound.  When a task is submitted, if the number of running threads is less than the core size,\n+                a new thread is created.  Otherwise, the task is placed in queue.  If too many tasks are allowed to be\n+                submitted to this type of executor, an out of memory condition may occur.\n+\n+                The \"name\" attribute is the bean name of the created executor.\n+\n+                The \"max-threads\" attribute must be used to specify the maximum thread pool size.\n+                The \"core-threads\" attribute defines the number of threads to keep in the pool.\n+\n+                The nested \"keepalive-time\" element may used to specify the amount of time that pool threads should", "originalCommit": "16172b6018a70076bf5d5a7edc4b92b3295de80a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQzNzE4Nw==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379437187", "bodyText": "Yeah, I just copied from the existing comments, I can fix it in all the places though.", "author": "wburns", "createdAt": "2020-02-14T13:46:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MzY5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3NjU2OA==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r377076568", "bodyText": "Maybe you should add a warning about having a queue that's too short as well?\nIMO it's pretty hard, if not impossible, to find the ideal queue size when core-threads < max-threads so that threads are created soon enough but tasks aren't rejected for no reason. In fact, before embracing the WildFly thread subsystem, we used to have a single setting for the number of threads and set core-threads == max-threads automatically when the executor had a queue.", "author": "danberindei", "createdAt": "2020-02-10T13:56:48Z", "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -177,6 +177,37 @@\n           <xs:attribute name=\"queue-length\" type=\"xs:string\"/>\n         </xs:complexType>\n       </xs:element>\n+      <xs:element name=\"non-blocking-bounded-queue-thread-pool\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n+        <xs:complexType>\n+          <xs:annotation>\n+            <xs:documentation>\n+              <![CDATA[\n+                A thread pool executor with a bounded queue which should only run non blocking operations.  Such a\n+                thread pool has a core size and a queue with an\n+                upper bound.  When a task is submitted, if the number of running threads is less than the core size,\n+                a new thread is created.  Otherwise, the task is placed in queue.  If too many tasks are allowed to be\n+                submitted to this type of executor, an out of memory condition may occur.", "originalCommit": "16172b6018a70076bf5d5a7edc4b92b3295de80a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ0MDI1OQ==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379440259", "bodyText": "This was what was here before, I only copied it. But we can update this section as well :)\nI can add something about saying what happens if the queue is too small in both cases.", "author": "wburns", "createdAt": "2020-02-14T13:53:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3NjU2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMTA1MQ==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379411051", "bodyText": "I think the previous version was more accurate, because the definition is elsewhere.\nI suggest something more direct, like \"The name of the executor used for non-blocking operations. Must be non-blocking and must have a queue\" (how big?)", "author": "danberindei", "createdAt": "2020-02-14T12:42:59Z", "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -322,37 +350,25 @@\n     <xs:attribute name=\"start\">\n       <xs:annotation><xs:documentation>Unused XML attribute</xs:documentation></xs:annotation>\n     </xs:attribute>\n-    <xs:attribute name=\"async-executor\" type=\"xs:string\">\n-      <xs:annotation>\n-        <xs:documentation>Defines the executor used for asynchronous cache operations.\n-        </xs:documentation>\n-      </xs:annotation>\n-    </xs:attribute>\n     <xs:attribute name=\"listener-executor\" type=\"xs:string\">\n       <xs:annotation>\n         <xs:documentation>Defines the executor used for asynchronous cache listener notifications.\n         </xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n-    <xs:attribute name=\"eviction-executor\" type=\"xs:string\">\n-      <xs:annotation>\n-        <xs:documentation>DEPRECATED Defines the scheduled executor used for evictions.  The expiration-executor type should be used instead.</xs:documentation>\n-      </xs:annotation>\n-    </xs:attribute>\n     <xs:attribute name=\"expiration-executor\" type=\"xs:string\">\n       <xs:annotation>\n         <xs:documentation>Defines the scheduled executor used for expirations.</xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n-    <xs:attribute name=\"persistence-executor\" type=\"xs:string\">\n+    <xs:attribute name=\"non-blocking-executor\" type=\"xs:string\">\n       <xs:annotation>\n-        <xs:documentation>Configuration for the executor service used when interacting with the persistent store.</xs:documentation>\n+        <xs:documentation>Defines the executor used for non blocking operations. This is required to reference a non blocking queued executor.</xs:documentation>", "originalCommit": "7ef5c12f64fb29329c799c7b0131b4c1512f581f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQzOTg4MA==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379439880", "bodyText": "Technically they could configure a cached thread pool without a queue ;) Unless we want to add validations in config to ensure they used a bounded thread pool with a queue of non zero size.", "author": "wburns", "createdAt": "2020-02-14T13:52:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMTA1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUxNzc2MQ==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379517761", "bodyText": "And I was keeping the wording similar to all the other ones.", "author": "wburns", "createdAt": "2020-02-14T16:14:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMTA1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIzOTc2NA==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r381239764", "bodyText": "The comments were probably copy/paste from an old age when the executors were defined inline.\nPlease change the blocking-executor documentation the same way.", "author": "danberindei", "createdAt": "2020-02-19T11:41:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMTA1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI4Mzk5OA==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r381283998", "bodyText": "Updated", "author": "wburns", "createdAt": "2020-02-19T13:19:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMTA1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMTMxNA==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379411314", "bodyText": "No assert for the new executors?", "author": "danberindei", "createdAt": "2020-02-14T12:43:35Z", "path": "core/src/test/java/org/infinispan/configuration/JsonSerializationTest.java", "diffHunk": "@@ -299,9 +299,9 @@ public void testFullConfig() throws Exception {\n       assertEquals(\"REGISTER\", cacheContainer.get(\"shutdown-hook\").asText());\n       assertTrue(cacheContainer.get(\"statistics\").asBoolean());\n       assertEquals(\"listener\", cacheContainer.get(\"listener-executor\").asText());\n-      assertEquals(\"persistence\", cacheContainer.get(\"persistence-executor\").asText());\n+      assertNull(cacheContainer.get(\"persistence-executor\"));\n       assertNull(cacheContainer.get(\"state-transfer-executor\"));\n-      assertEquals(\"async\", cacheContainer.get(\"async-executor\").asText());\n+      assertNull(cacheContainer.get(\"async-executor\"));", "originalCommit": "7ef5c12f64fb29329c799c7b0131b4c1512f581f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ0MDM1MQ==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379440351", "bodyText": "I can add something.", "author": "wburns", "createdAt": "2020-02-14T13:53:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMTMxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMjI4Ng==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379412286", "bodyText": "Should check the new executors instead", "author": "danberindei", "createdAt": "2020-02-14T12:45:57Z", "path": "core/src/test/java/org/infinispan/configuration/XmlFileParsingTest.java", "diffHunk": "@@ -364,20 +364,11 @@ private void assertNamedCacheFile(ConfigurationBuilderHolder holder, boolean dep\n \n       BlockingThreadPoolExecutorFactory persistenceThreadPool =\n          gc.persistenceThreadPool().threadPoolFactory();\n-      assertEquals(6, persistenceThreadPool.maxThreads());\n-      assertEquals(10001, persistenceThreadPool.queueLength());\n-      DefaultThreadFactory persistenceThreadFactory =\n-         gc.persistenceThreadPool().threadFactory();\n-      assertEquals(\"PersistenceThread\", persistenceThreadFactory.threadNamePattern());\n+      assertNull(persistenceThreadPool);\n \n       BlockingThreadPoolExecutorFactory asyncThreadPool =\n          gc.asyncThreadPool().threadPoolFactory();\n-      assertEquals(5, asyncThreadPool.coreThreads());\n-      assertEquals(5, asyncThreadPool.maxThreads());\n-      assertEquals(10000, asyncThreadPool.queueLength());\n-      assertEquals(0, asyncThreadPool.keepAlive());\n-      DefaultThreadFactory asyncThreadFactory = gc.asyncThreadPool().threadFactory();\n-      assertEquals(\"AsyncOperationsThread\", asyncThreadFactory.threadNamePattern());\n+      assertNull(asyncThreadPool);", "originalCommit": "a6f8304d969cad04d4381cae839a4a9c70522b3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ0MDM5Ng==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379440396", "bodyText": "I can add something.", "author": "wburns", "createdAt": "2020-02-14T13:53:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMjI4Ng=="}], "type": "inlineReview"}, {"oid": "80d7159f2c86b876841c8988742540aebd70b701", "url": "https://github.com/infinispan/infinispan/commit/80d7159f2c86b876841c8988742540aebd70b701", "message": "Review comments", "committedDate": "2020-02-14T18:38:10Z", "type": "forcePushed"}, {"oid": "f703736f41b67a3f4c3dbb89356234de17b7125d", "url": "https://github.com/infinispan/infinispan/commit/f703736f41b67a3f4c3dbb89356234de17b7125d", "message": "Review comments", "committedDate": "2020-02-18T17:53:42Z", "type": "forcePushed"}, {"oid": "a34526a96e42d23a962673854a3376b88bfb1030", "url": "https://github.com/infinispan/infinispan/commit/a34526a96e42d23a962673854a3376b88bfb1030", "message": "ISPN-11292 Add in (non)blocking thread pools", "committedDate": "2020-02-19T13:19:16Z", "type": "forcePushed"}, {"oid": "3635464e11d189b85e8757284edc1d973639b0b3", "url": "https://github.com/infinispan/infinispan/commit/3635464e11d189b85e8757284edc1d973639b0b3", "message": "ISPN-11292 Add in (non)blocking thread pools", "committedDate": "2020-02-19T13:27:42Z", "type": "commit"}, {"oid": "3635464e11d189b85e8757284edc1d973639b0b3", "url": "https://github.com/infinispan/infinispan/commit/3635464e11d189b85e8757284edc1d973639b0b3", "message": "ISPN-11292 Add in (non)blocking thread pools", "committedDate": "2020-02-19T13:27:42Z", "type": "forcePushed"}]}