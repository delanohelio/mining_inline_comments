{"pr_number": 7979, "pr_title": "ISPN-11393 statistics, metrics, jmx", "pr_createdAt": "2020-03-02T20:26:56Z", "pr_url": "https://github.com/infinispan/infinispan/pull/7979", "timeline": [{"oid": "51738ca1626f03f7672c88c90ef04ca1a1c2278d", "url": "https://github.com/infinispan/infinispan/commit/51738ca1626f03f7672c88c90ef04ca1a1c2278d", "message": "ISPN-11393 statistics, metrics, jmx", "committedDate": "2020-03-03T12:09:08Z", "type": "forcePushed"}, {"oid": "e53c2359a280d9d3c5047e134743154e0f28e912", "url": "https://github.com/infinispan/infinispan/commit/e53c2359a280d9d3c5047e134743154e0f28e912", "message": "ISPN-11393 statistics, metrics, jmx", "committedDate": "2020-03-03T19:26:35Z", "type": "forcePushed"}, {"oid": "386b225c0ba2fc2139b1cc51e912e96ed668d30c", "url": "https://github.com/infinispan/infinispan/commit/386b225c0ba2fc2139b1cc51e912e96ed668d30c", "message": "ISPN-11393 statistics, metrics, jmx", "committedDate": "2020-03-10T09:46:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2MDg5NQ==", "url": "https://github.com/infinispan/infinispan/pull/7979#discussion_r390960895", "bodyText": ".metrics().gauges(true).histograms(true)", "author": "anistor", "createdAt": "2020-03-11T13:16:06Z", "path": "documentation/src/main/asciidoc/topics/code_examples/ConfigStats.java", "diffHunk": "@@ -0,0 +1,5 @@\n+GlobalConfiguration globalConfig = new GlobalConfigurationBuilder()\n+  .statistics().enable()\n+  .metrics().gauges().histograms()", "originalCommit": "386b225c0ba2fc2139b1cc51e912e96ed668d30c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2MjUxOA==", "url": "https://github.com/infinispan/infinispan/pull/7979#discussion_r390962518", "bodyText": "exports to a metrics endpoint  -->  exports to a MicroProfile Metrics endpoint", "author": "anistor", "createdAt": "2020-03-11T13:18:31Z", "path": "documentation/src/main/asciidoc/stories/assembly_server_statistics.adoc", "diffHunk": "@@ -0,0 +1,17 @@\n+[id='statistics']\n+:context: server\n+= Configuring Statistics, Metrics, and JMX\n+Enable statistics that {brandname} exports to a metrics endpoint or via JMX", "originalCommit": "386b225c0ba2fc2139b1cc51e912e96ed668d30c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk3NDE2MQ==", "url": "https://github.com/infinispan/infinispan/pull/7979#discussion_r390974161", "bodyText": "jmxDomain is not deprecated in HR client. This line can be kept, but maybe I would use something different than \"org.infinispan\", which is the default anyway, so it's not useful.", "author": "anistor", "createdAt": "2020-03-11T13:36:45Z", "path": "documentation/src/main/asciidoc/topics/code_examples/HotRodClientInstance.java", "diffHunk": "@@ -3,7 +3,6 @@\n cb.marshaller(new org.infinispan.commons.marshall.ProtoStreamMarshaller())\n   .statistics()\n       .enable()\n-      .jmxDomain(\"org.infinispan\")", "originalCommit": "386b225c0ba2fc2139b1cc51e912e96ed668d30c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk3NTE3MA==", "url": "https://github.com/infinispan/infinispan/pull/7979#discussion_r390975170", "bodyText": "monitoring and management", "author": "anistor", "createdAt": "2020-03-11T13:38:24Z", "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -270,12 +270,16 @@\n       </xs:element>\n       <xs:element name=\"metrics\" type=\"tns:metrics\" minOccurs=\"0\">\n         <xs:annotation>\n-          <xs:documentation>Defines microprofile metrics configuration.</xs:documentation>\n+          <xs:documentation>\n+            Configures MicroProfile metrics.\n+          </xs:documentation>\n         </xs:annotation>\n       </xs:element>\n       <xs:element name=\"jmx\" type=\"tns:jmx\" minOccurs=\"0\">\n         <xs:annotation>\n-          <xs:documentation>Defines JMX management details.</xs:documentation>\n+          <xs:documentation>\n+            Enables and configures JMX monitoring.", "originalCommit": "386b225c0ba2fc2139b1cc51e912e96ed668d30c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk3Njg2NA==", "url": "https://github.com/infinispan/infinispan/pull/7979#discussion_r390976864", "bodyText": "exports statistics about ... --> computes and collects statistics about ...", "author": "anistor", "createdAt": "2020-03-11T13:40:59Z", "path": "documentation/src/main/asciidoc/topics/proc_enabling_metrics.adoc", "diffHunk": "@@ -0,0 +1,44 @@\n+[id='configure_metrics']\n+= Enabling {brandname} Metrics\n+{brandname} is compatible with the Eclipse MicroProfile Metrics API and can\n+generate gauge and histogram metrics.\n+\n+* {brandname} metrics are provided at the `/base` and `/vendor` scopes and are\n+not configurable.\n+* Gauges provide values such as the average number of nanoseconds for write\n+operations or JVM uptime. Gauges are enabled by default. If you enable\n+statistics, {brandname} automatically generates gauges.\n+* Histograms provide details about operation execution times such as read,\n+write, and remove times. {brandname} does not enable histograms by default\n+because they require additional computation.\n+\n+.Procedure\n+\n+* Configure metrics declaratively or programmatically.\n+\n+.Declaratively\n+\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+<cache-container statistics=\"true\"> <1>\n+  <metrics gauges=\"true\" histograms=\"true\" /> <2>\n+</cache-container>\n+----\n+\n+.Programmatically\n+\n+[source,java]\n+----\n+GlobalConfiguration globalConfig = new GlobalConfigurationBuilder()\n+  .statistics().enable() <1>\n+  .metrics().gauges().histograms() <2>\n+  .build();\n+----\n+\n+<1> exports statistics about the Cache Manager.", "originalCommit": "386b225c0ba2fc2139b1cc51e912e96ed668d30c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk3NzUzNQ==", "url": "https://github.com/infinispan/infinispan/pull/7979#discussion_r390977535", "bodyText": "generates gauge and histogram metrics  --> exports the collected statistics as gauge and histogram metrics", "author": "anistor", "createdAt": "2020-03-11T13:41:57Z", "path": "documentation/src/main/asciidoc/topics/proc_enabling_metrics.adoc", "diffHunk": "@@ -0,0 +1,44 @@\n+[id='configure_metrics']\n+= Enabling {brandname} Metrics\n+{brandname} is compatible with the Eclipse MicroProfile Metrics API and can\n+generate gauge and histogram metrics.\n+\n+* {brandname} metrics are provided at the `/base` and `/vendor` scopes and are\n+not configurable.\n+* Gauges provide values such as the average number of nanoseconds for write\n+operations or JVM uptime. Gauges are enabled by default. If you enable\n+statistics, {brandname} automatically generates gauges.\n+* Histograms provide details about operation execution times such as read,\n+write, and remove times. {brandname} does not enable histograms by default\n+because they require additional computation.\n+\n+.Procedure\n+\n+* Configure metrics declaratively or programmatically.\n+\n+.Declaratively\n+\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+<cache-container statistics=\"true\"> <1>\n+  <metrics gauges=\"true\" histograms=\"true\" /> <2>\n+</cache-container>\n+----\n+\n+.Programmatically\n+\n+[source,java]\n+----\n+GlobalConfiguration globalConfig = new GlobalConfigurationBuilder()\n+  .statistics().enable() <1>\n+  .metrics().gauges().histograms() <2>\n+  .build();\n+----\n+\n+<1> exports statistics about the Cache Manager.\n+<2> generates gauge and histogram metrics.", "originalCommit": "386b225c0ba2fc2139b1cc51e912e96ed668d30c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAxODI1MA==", "url": "https://github.com/infinispan/infinispan/pull/7979#discussion_r391018250", "bodyText": ".metrics().gauges(true).histograms(true)", "author": "anistor", "createdAt": "2020-03-11T14:38:10Z", "path": "documentation/src/main/asciidoc/topics/proc_enabling_metrics.adoc", "diffHunk": "@@ -0,0 +1,44 @@\n+[id='configure_metrics']\n+= Enabling {brandname} Metrics\n+{brandname} is compatible with the Eclipse MicroProfile Metrics API and can\n+generate gauge and histogram metrics.\n+\n+* {brandname} metrics are provided at the `/base` and `/vendor` scopes and are\n+not configurable.\n+* Gauges provide values such as the average number of nanoseconds for write\n+operations or JVM uptime. Gauges are enabled by default. If you enable\n+statistics, {brandname} automatically generates gauges.\n+* Histograms provide details about operation execution times such as read,\n+write, and remove times. {brandname} does not enable histograms by default\n+because they require additional computation.\n+\n+.Procedure\n+\n+* Configure metrics declaratively or programmatically.\n+\n+.Declaratively\n+\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+<cache-container statistics=\"true\"> <1>\n+  <metrics gauges=\"true\" histograms=\"true\" /> <2>\n+</cache-container>\n+----\n+\n+.Programmatically\n+\n+[source,java]\n+----\n+GlobalConfiguration globalConfig = new GlobalConfigurationBuilder()\n+  .statistics().enable() <1>\n+  .metrics().gauges().histograms() <2>", "originalCommit": "386b225c0ba2fc2139b1cc51e912e96ed668d30c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAyODEyMw==", "url": "https://github.com/infinispan/infinispan/pull/7979#discussion_r391028123", "bodyText": "again, 'collects' instead of 'exports', here and on next line", "author": "anistor", "createdAt": "2020-03-11T14:51:08Z", "path": "documentation/src/main/asciidoc/topics/proc_enabling_statistics.adoc", "diffHunk": "@@ -0,0 +1,48 @@\n+[id='enable_statistics']\n+= Enabling {brandname} Statistics\n+{brandname} lets you enable statistics for Cache Managers and specific cache\n+instances.\n+\n+[NOTE]\n+====\n+{brandname} servers provide default `infinispan.xml` configuration files that\n+enable statistics for Cache Managers. If you use the default {brandname} server\n+configuration, you only need to enable statistics when you configure caches.\n+====\n+\n+.Procedure\n+\n+* Enable statistics declaratively or programmatically.\n+\n+.Declaratively\n+\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+<cache-container statistics=\"true\"> <1>\n+  <local-cache name=\"mycache\" statistics=\"true\"/> <2>\n+</cache-container>\n+----\n+\n+.Programmatically\n+\n+[source,java]\n+----\n+GlobalConfiguration globalConfig = new GlobalConfigurationBuilder()\n+  .statistics().enable() <1>\n+  .build();\n+\n+ ...\n+\n+Configuration config = new ConfigurationBuilder()\n+\u00a0 .statistics().enable() <2>\n+  .build();\n+----\n+\n+<1> exports statistics about the Cache Manager.", "originalCommit": "386b225c0ba2fc2139b1cc51e912e96ed668d30c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAyODczMw==", "url": "https://github.com/infinispan/infinispan/pull/7979#discussion_r391028733", "bodyText": "collects statistics", "author": "anistor", "createdAt": "2020-03-11T14:51:57Z", "path": "documentation/src/main/asciidoc/topics/proc_enabling_statistics.adoc", "diffHunk": "@@ -0,0 +1,48 @@\n+[id='enable_statistics']\n+= Enabling {brandname} Statistics\n+{brandname} lets you enable statistics for Cache Managers and specific cache\n+instances.\n+\n+[NOTE]\n+====\n+{brandname} servers provide default `infinispan.xml` configuration files that\n+enable statistics for Cache Managers. If you use the default {brandname} server\n+configuration, you only need to enable statistics when you configure caches.\n+====\n+\n+.Procedure\n+\n+* Enable statistics declaratively or programmatically.\n+\n+.Declaratively\n+\n+[source,xml,options=\"nowrap\",subs=attributes+]\n+----\n+<cache-container statistics=\"true\"> <1>\n+  <local-cache name=\"mycache\" statistics=\"true\"/> <2>\n+</cache-container>\n+----\n+\n+.Programmatically\n+\n+[source,java]\n+----\n+GlobalConfiguration globalConfig = new GlobalConfigurationBuilder()\n+  .statistics().enable() <1>\n+  .build();\n+\n+ ...\n+\n+Configuration config = new ConfigurationBuilder()\n+\u00a0 .statistics().enable() <2>\n+  .build();\n+----\n+\n+<1> exports statistics about the Cache Manager.\n+<2> exports statistics about the named cache.\n+\n+[NOTE]\n+====\n+Enabling statistics for Cache Managers does not globally enable statistics for\n+caches. This configuration only exports statistics for the Cache Manager.", "originalCommit": "386b225c0ba2fc2139b1cc51e912e96ed668d30c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzMDc1Mw==", "url": "https://github.com/infinispan/infinispan/pull/7979#discussion_r391030753", "bodyText": "0 or in some cases -1", "author": "anistor", "createdAt": "2020-03-11T14:54:34Z", "path": "documentation/src/main/asciidoc/topics/proc_collecting_metrics.adoc", "diffHunk": "@@ -1,45 +1,37 @@\n-[id='metric_endpoint']\n+[id='collect_metrics']\n = Collecting {brandname} Metrics\n-{brandname} servers provide monitoring data through an HTTP `metrics` endpoint\n-that exposes OS, JVM, and application-level statistics.\n+Collect {brandname} metrics with monitoring tools such as Prometheus.\n+\n+.Prerequisites\n+\n+* Enable statistics. If you do not enable statistics, {brandname} provides `0` values for all metrics.", "originalCommit": "386b225c0ba2fc2139b1cc51e912e96ed668d30c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzMzEzMg==", "url": "https://github.com/infinispan/infinispan/pull/7979#discussion_r391033132", "bodyText": "{brandname} metrics are provided at the 'vendor' scope. Also, JVM-related metrics are provided in the 'base' scope in server mode, but not in embedded mode.", "author": "anistor", "createdAt": "2020-03-11T14:57:45Z", "path": "documentation/src/main/asciidoc/topics/proc_enabling_metrics.adoc", "diffHunk": "@@ -0,0 +1,44 @@\n+[id='configure_metrics']\n+= Enabling {brandname} Metrics\n+{brandname} is compatible with the Eclipse MicroProfile Metrics API and can\n+generate gauge and histogram metrics.\n+\n+* {brandname} metrics are provided at the `/base` and `/vendor` scopes and are", "originalCommit": "386b225c0ba2fc2139b1cc51e912e96ed668d30c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5MzU0NA==", "url": "https://github.com/infinispan/infinispan/pull/7979#discussion_r391093544", "bodyText": "I would rephrase Exports gauge metrics. Gauges are enabled by default. Statistics must also be enabled or else no metrics will actually be exported.", "author": "anistor", "createdAt": "2020-03-11T16:18:31Z", "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -641,21 +645,21 @@\n     <xs:attribute name=\"gauges\" type=\"xs:boolean\" default=\"${GlobalMetrics.gauges}\">\n       <xs:annotation>\n         <xs:documentation>\n-          Enables exporting of gauge metrics. These are exported by default if statistics are enabled.\n+          Exports gauge metrics. If you enable statistics, gauges are exported by default.", "originalCommit": "386b225c0ba2fc2139b1cc51e912e96ed668d30c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5Nzk0MA==", "url": "https://github.com/infinispan/infinispan/pull/7979#discussion_r391097940", "bodyText": "I would rephrase Exports histogram metrics. Histograms are not enabled by default because they require additional computation. Statistics must also be enabled or else no metrics will actually be exported.", "author": "anistor", "createdAt": "2020-03-11T16:24:51Z", "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -641,21 +645,21 @@\n     <xs:attribute name=\"gauges\" type=\"xs:boolean\" default=\"${GlobalMetrics.gauges}\">\n       <xs:annotation>\n         <xs:documentation>\n-          Enables exporting of gauge metrics. These are exported by default if statistics are enabled.\n+          Exports gauge metrics. If you enable statistics, gauges are exported by default.\n         </xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n     <xs:attribute name=\"histograms\" type=\"xs:boolean\" default=\"${GlobalMetrics.histograms}\">\n       <xs:annotation>\n         <xs:documentation>\n-          Enables exporting of histograms. These are costly to compute so are not enabled by default.\n+          Exports histograms. Disabled by default because histograms require additional computation.", "originalCommit": "386b225c0ba2fc2139b1cc51e912e96ed668d30c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5OTQzOQ==", "url": "https://github.com/infinispan/infinispan/pull/7979#discussion_r391099439", "bodyText": "If JMX statistics are enabled then all 'published' JMX objects appear under this domain. Optional, if not specified it defaults to \"org.infinispan\".", "author": "anistor", "createdAt": "2020-03-11T16:26:59Z", "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -672,28 +676,30 @@\n     <xs:sequence>\n       <xs:element name=\"property\" type=\"tns:property\" minOccurs=\"0\" maxOccurs=\"unbounded\">\n         <xs:annotation>\n-          <xs:documentation>A jmx property with name and value to be passed to the MBean Server lookup instance.</xs:documentation>\n+          <xs:documentation>\n+            Specifies a JMX property with a name and value that is passed to the MBean Server lookup instance.\n+          </xs:documentation>\n         </xs:annotation>\n       </xs:element>\n     </xs:sequence>\n     <xs:attribute name=\"domain\" type=\"xs:string\" default=\"${GlobalJmx.domain}\">\n       <xs:annotation>\n         <xs:documentation>\n-          If JMX statistics are enabled then all 'published' JMX objects will appear under this name. This is optional, if not specified an object name will be created for you by default.\n+          If JMX statistics are enabled then all 'published' JMX objects  appear under this name. Optional, if not specified a default object name is created.", "originalCommit": "386b225c0ba2fc2139b1cc51e912e96ed668d30c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "aa07e363f1a382b759d1b25aa112a68815eb8af4", "url": "https://github.com/infinispan/infinispan/commit/aa07e363f1a382b759d1b25aa112a68815eb8af4", "message": "ISPN-11393 statistics, metrics, jmx", "committedDate": "2020-03-11T16:41:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzMDQwOA==", "url": "https://github.com/infinispan/infinispan/pull/7979#discussion_r391130408", "bodyText": "Get metrics in Prometheus (OpenMetrics) format:", "author": "anistor", "createdAt": "2020-03-11T17:13:06Z", "path": "documentation/src/main/asciidoc/topics/proc_collecting_metrics.adoc", "diffHunk": "@@ -1,45 +1,38 @@\n-[id='metric_endpoint']\n+[id='collect_metrics']\n = Collecting {brandname} Metrics\n-{brandname} servers provide monitoring data through an HTTP `metrics` endpoint\n-that exposes OS, JVM, and application-level statistics.\n+Collect {brandname} metrics with monitoring tools such as Prometheus.\n+\n+.Prerequisites\n+\n+* Enable statistics. If you do not enable statistics, {brandname} provides `0`\n+and `-1` values for metrics.\n+* Optionally enable histograms. By default {brandname} generates gauges but not histograms.\n \n .Procedure\n \n-. Start at least one {brandname} server.\n-. Test the metrics endpoint with any HTTP client, as in the following examples:\n-+\n-To get metrics in Prometheus or OpenMetrics format:\n+* Get metrics in Prometheus or OpenMetrics format:", "originalCommit": "aa07e363f1a382b759d1b25aa112a68815eb8af4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2MzY1Nw==", "url": "https://github.com/infinispan/infinispan/pull/7979#discussion_r391163657", "bodyText": "replace jmx().enable() with jmxEnable()", "author": "anistor", "createdAt": "2020-03-11T18:03:18Z", "path": "documentation/src/main/asciidoc/topics/proc_configuring_hotrod_jmx.adoc", "diffHunk": "@@ -13,8 +10,19 @@ Rod client statistics.\n \n [source,java]\n ----\n-include::code_examples/HotRodJmx.java[]\n+ConfigurationBuilder clientBuilder = new ConfigurationBuilder();\n+clientBuilder\n+   .statistics()\n+    .enable() <1>\n+   .jmx()", "originalCommit": "aa07e363f1a382b759d1b25aa112a68815eb8af4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2NTYxMg==", "url": "https://github.com/infinispan/infinispan/pull/7979#discussion_r391165612", "bodyText": "An import org.infinispan.client.hotrod.configuration.ConfigurationBuilder; should make it clear we're not referring to the ConfigurationBuilder from core", "author": "anistor", "createdAt": "2020-03-11T18:06:45Z", "path": "documentation/src/main/asciidoc/topics/proc_configuring_hotrod_jmx.adoc", "diffHunk": "@@ -13,8 +10,19 @@ Rod client statistics.\n \n [source,java]\n ----\n-include::code_examples/HotRodJmx.java[]\n+ConfigurationBuilder clientBuilder = new ConfigurationBuilder();", "originalCommit": "aa07e363f1a382b759d1b25aa112a68815eb8af4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2NzYyMg==", "url": "https://github.com/infinispan/infinispan/pull/7979#discussion_r391167622", "bodyText": "Lines 30 should be before 29 or it won't compile.", "author": "anistor", "createdAt": "2020-03-11T18:10:28Z", "path": "documentation/src/main/asciidoc/topics/proc_naming_cache_managers.adoc", "diffHunk": "@@ -14,15 +14,21 @@ name, which results in a JMX MBean named `org.infinispan:type=CacheManager,name=\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-include::config_examples/jmx_statistics_cache_manager.xml[]\n+<cache-container name=\"Hibernate2LC\">\n+  <jmx enabled=\"true\" />\n+  ...\n+</cache-container>\n ----\n \n \n .Programmatically\n \n [source,java]\n ----\n-include::code_examples/JmxStatisticsCacheManager.java[]\n+GlobalConfiguration globalConfig = new GlobalConfigurationBuilder()\n+  .jmx().enable()", "originalCommit": "aa07e363f1a382b759d1b25aa112a68815eb8af4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "13938c4c19c5c3e7cdb29b7b876f918d6291b56e", "url": "https://github.com/infinispan/infinispan/commit/13938c4c19c5c3e7cdb29b7b876f918d6291b56e", "message": "ISPN-11393 statistics, metrics, jmx", "committedDate": "2020-03-11T19:34:48Z", "type": "commit"}, {"oid": "13938c4c19c5c3e7cdb29b7b876f918d6291b56e", "url": "https://github.com/infinispan/infinispan/commit/13938c4c19c5c3e7cdb29b7b876f918d6291b56e", "message": "ISPN-11393 statistics, metrics, jmx", "committedDate": "2020-03-11T19:34:48Z", "type": "forcePushed"}]}