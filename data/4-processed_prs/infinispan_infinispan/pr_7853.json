{"pr_number": 7853, "pr_title": " ISPN-11280 ConcurrentModificationException in ConditionFuture", "pr_createdAt": "2020-02-07T08:09:21Z", "pr_url": "https://github.com/infinispan/infinispan/pull/7853", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU4MDQ1OA==", "url": "https://github.com/infinispan/infinispan/pull/7853#discussion_r377580458", "bodyText": "doesn't need to be synchronized as well? futures.values()", "author": "pruivo", "createdAt": "2020-02-11T11:32:54Z", "path": "core/src/main/java/org/infinispan/util/concurrent/ConditionFuture.java", "diffHunk": "@@ -96,24 +99,31 @@ public void updateAsync(T value, Executor executor) {\n \n       try {\n          executor.execute(() -> checkConditions(value));\n-      } catch (Exception e) {\n+      } catch (Throwable t) {\n          for (Data data : futures.values()) {", "originalCommit": "0136e8627521ac2008cfc31696823142e0bec225", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU4MTMxNw==", "url": "https://github.com/infinispan/infinispan/pull/7853#discussion_r377581317", "bodyText": "ps. same for stop()", "author": "pruivo", "createdAt": "2020-02-11T11:34:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU4MDQ1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQyNTI1OA==", "url": "https://github.com/infinispan/infinispan/pull/7853#discussion_r379425258", "bodyText": "Done, good eyes Pedro!", "author": "danberindei", "createdAt": "2020-02-14T13:19:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU4MDQ1OA=="}], "type": "inlineReview"}, {"oid": "2de0196c8f71b15c2a586535270089173616d946", "url": "https://github.com/infinispan/infinispan/commit/2de0196c8f71b15c2a586535270089173616d946", "message": "ISPN-11296 StateResponseOrderingTest uncaught IllegalArgumentException", "committedDate": "2020-02-14T09:06:31Z", "type": "commit"}, {"oid": "1055267e6693e45bf9cd491458158e7a9a417f31", "url": "https://github.com/infinispan/infinispan/commit/1055267e6693e45bf9cd491458158e7a9a417f31", "message": "ISPN-11280 ConcurrentModificationException in ConditionFuture", "committedDate": "2020-02-14T13:18:47Z", "type": "commit"}, {"oid": "1055267e6693e45bf9cd491458158e7a9a417f31", "url": "https://github.com/infinispan/infinispan/commit/1055267e6693e45bf9cd491458158e7a9a417f31", "message": "ISPN-11280 ConcurrentModificationException in ConditionFuture", "committedDate": "2020-02-14T13:18:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUwNTk5NQ==", "url": "https://github.com/infinispan/infinispan/pull/7853#discussion_r379505995", "bodyText": "@danberindei how about something like this to cut down on the sync scope?\n        final List<Data> copy;\n        synchronized (futures) {\n            copy = new ArrayList<>(futures.values());\n            futures.clear();\n        }\n        for (Data data : copy) {\n            data.cancelFuture.cancel(false);\n        }", "author": "johnou", "createdAt": "2020-02-14T15:53:02Z", "path": "core/src/main/java/org/infinispan/util/concurrent/ConditionFuture.java", "diffHunk": "@@ -96,35 +99,58 @@ public void updateAsync(T value, Executor executor) {\n \n       try {\n          executor.execute(() -> checkConditions(value));\n-      } catch (Exception e) {\n-         for (Data data : futures.values()) {\n-            data.cancelFuture.cancel(false);\n-            data.completeExceptionally(e);\n+      } catch (Throwable t) {\n+         List<CompletableFuture<?>> completed;\n+         synchronized (futures) {\n+            completed = new ArrayList<>(futures.size());\n+            for (Data data : futures.values()) {\n+               data.cancelFuture.cancel(false);\n+               completed.add(data);\n+            }\n+         }\n+         for (CompletableFuture<?> future : completed) {\n+            future.completeExceptionally(t);\n          }\n       }\n    }\n \n    private void checkConditions(T value) {\n-      for (Iterator<Map.Entry<Predicate<T>, Data>> iterator = futures.entrySet().iterator(); iterator.hasNext(); ) {\n-         Map.Entry<Predicate<T>, Data> e = iterator.next();\n-         if (e.getKey().test(value)) {\n-            Data data = e.getValue();\n-            data.cancelFuture.cancel(false);\n-            data.complete(null);\n-            iterator.remove();\n+      List<Data> completed;\n+      synchronized (futures) {\n+         completed = new ArrayList<>(futures.size());\n+         for (Iterator<Map.Entry<Predicate<T>, Data>> iterator = futures.entrySet().iterator(); iterator.hasNext(); ) {\n+            Map.Entry<Predicate<T>, Data> e = iterator.next();\n+            if (e.getKey().test(value)) {\n+               Data data = e.getValue();\n+               data.cancelFuture.cancel(false);\n+               completed.add(data);\n+               iterator.remove();\n+            }\n          }\n       }\n+      for (Data data : completed) {\n+         data.complete(null);\n+      }\n    }\n \n    public void stop() {\n       running = false;\n       lastValue = null;\n+\n+      List<CompletableFuture<?>> completed;", "originalCommit": "1055267e6693e45bf9cd491458158e7a9a417f31", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUwNjgyNw==", "url": "https://github.com/infinispan/infinispan/pull/7853#discussion_r379506827", "bodyText": "same sync optimisation can be applied here too.", "author": "johnou", "createdAt": "2020-02-14T15:54:28Z", "path": "core/src/main/java/org/infinispan/util/concurrent/ConditionFuture.java", "diffHunk": "@@ -96,35 +99,58 @@ public void updateAsync(T value, Executor executor) {\n \n       try {\n          executor.execute(() -> checkConditions(value));\n-      } catch (Exception e) {\n-         for (Data data : futures.values()) {\n-            data.cancelFuture.cancel(false);\n-            data.completeExceptionally(e);\n+      } catch (Throwable t) {\n+         List<CompletableFuture<?>> completed;\n+         synchronized (futures) {", "originalCommit": "1055267e6693e45bf9cd491458158e7a9a417f31", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}