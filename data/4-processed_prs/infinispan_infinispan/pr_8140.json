{"pr_number": 8140, "pr_title": "ISPN-11576 doc fixes for dev guide content", "pr_createdAt": "2020-04-01T10:57:34Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8140", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUzMTgxOA==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401531818", "bodyText": "@ryanemerson Can you please double check this change? There are a few other changes to the marshalling content.", "author": "oraNod", "createdAt": "2020-04-01T11:02:21Z", "path": "documentation/src/main/asciidoc/topics/code_examples/AuthorMarshaller.java", "diffHunk": "@@ -13,7 +13,7 @@ public String getTypeName() {\n    }\n \n    @Override\n-   public void writeTo(ProtoStreamWriter writer, Author author) throws IOException {\n+   public void writeTo(MessageMarshaller.ProtoStreamWriter writer, Author author) throws IOException {", "originalCommit": "d48dc17c85aa49ee2b0fdd4f586359d0727c7e06", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUzMTkyMg==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401531922", "bodyText": "@ryanemerson", "author": "oraNod", "createdAt": "2020-04-01T11:02:33Z", "path": "documentation/src/main/asciidoc/topics/code_examples/BookMarshaller.java", "diffHunk": "@@ -13,7 +13,7 @@ public String getTypeName() {\n    }\n \n    @Override\n-   public void writeTo(ProtoStreamWriter writer, Book book) throws IOException {\n+   public void writeTo(MessageMarshaller.ProtoStreamWriter writer, Book book) throws IOException {", "originalCommit": "d48dc17c85aa49ee2b0fdd4f586359d0727c7e06", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUzMjA3NA==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401532074", "bodyText": "@ryanemerson", "author": "oraNod", "createdAt": "2020-04-01T11:02:51Z", "path": "documentation/src/main/asciidoc/topics/code_examples/CustomMarshaller.java", "diffHunk": "@@ -1,3 +1,4 @@\n GlobalConfigurationBuilder builder = new GlobalConfigurationBuilder();\n-      builder.serialization().marshaller(org.infinispan.example.marshall.CustomMarshaller.class)\n-      .addJavaSerialWhiteList(\"org.infinispan.example.*\");\n+builder.serialization()\n+      .marshaller(new org.infinispan.example.marshall.CustomMarshaller()).whiteList()\n+      .addRegexp(\"org.infinispan.example.*\");", "originalCommit": "d48dc17c85aa49ee2b0fdd4f586359d0727c7e06", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUzMjIwMw==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401532203", "bodyText": "@ryanemerson", "author": "oraNod", "createdAt": "2020-04-01T11:03:07Z", "path": "documentation/src/main/asciidoc/topics/code_examples/JBossUserMarshaller.java", "diffHunk": "@@ -1,2 +1,2 @@\n GlobalConfigurationBuilder builder = new GlobalConfigurationBuilder();\n-      builder.serialization().marshaller(JBossUserMarshaller.class);\n+builder.serialization().marshaller(new JBossUserMarshaller());", "originalCommit": "d48dc17c85aa49ee2b0fdd4f586359d0727c7e06", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUzMjMyNQ==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401532325", "bodyText": "@ryanemerson", "author": "oraNod", "createdAt": "2020-04-01T11:03:23Z", "path": "documentation/src/main/asciidoc/topics/code_examples/ProtoStreamMarshaller.java", "diffHunk": "@@ -1,2 +1,3 @@\n GlobalConfigurationBuilder builder = new GlobalConfigurationBuilder();\n-builder.addContextInitializers(new LibraryInitializerImpl(), new SCIImpl())\n+builder.serialization()\n+       .addContextInitializers(new LibraryInitializerImpl(), new SCIImpl());", "originalCommit": "d48dc17c85aa49ee2b0fdd4f586359d0727c7e06", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUzMjQzMg==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401532432", "bodyText": "@ryanemerson", "author": "oraNod", "createdAt": "2020-04-01T11:03:35Z", "path": "documentation/src/main/asciidoc/topics/code_examples/SerializationMarshaller.java", "diffHunk": "@@ -1,3 +1,5 @@\n GlobalConfigurationBuilder builder = new GlobalConfigurationBuilder();\n-builder.serialization().marshaller(new JavaSerializationMarshaller())\n-      .addJavaSerialWhiteList(\"org.infinispan.example.*\", \"org.infinispan.concrete.SomeClass\");\n+builder.serialization()\n+       .marshaller(new JavaSerializationMarshaller())\n+       .whiteList()\n+       .addRegexps(\"org.infinispan.example.\", \"org.infinispan.concrete.SomeClass\");", "originalCommit": "d48dc17c85aa49ee2b0fdd4f586359d0727c7e06", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUzMjY1MQ==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401532651", "bodyText": "@ryanemerson", "author": "oraNod", "createdAt": "2020-04-01T11:04:02Z", "path": "documentation/src/main/asciidoc/topics/proc_using_custom_marshallers.adoc", "diffHunk": "@@ -19,7 +19,7 @@ include::config_examples/custom_marshaller.xml[]\n [TIP]\n ====\n Custom marshaller implementations can access a configured white list via the\n-link:{javadocroot}/org/infinispan/commons/marshall/Marshaller.html#initialize[initialize()] method, which is called during startup.\n+link:{javadocroot}org/infinispan/commons/marshall/Marshaller.html#initialize(org.infinispan.commons.configuration.ClassWhiteList)[initialize()] method, which is called during startup.\n ====", "originalCommit": "d48dc17c85aa49ee2b0fdd4f586359d0727c7e06", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bbd12006bebb983db98a7a4dc2deec1b406fc734", "url": "https://github.com/infinispan/infinispan/commit/bbd12006bebb983db98a7a4dc2deec1b406fc734", "message": "ISPN-11576 doc fixes for dev guide content", "committedDate": "2020-04-01T11:21:01Z", "type": "forcePushed"}, {"oid": "779595b4a6b2f225784c64d523b8262f3b4d1f68", "url": "https://github.com/infinispan/infinispan/commit/779595b4a6b2f225784c64d523b8262f3b4d1f68", "message": "ISPN-11576 doc fixes for dev guide content", "committedDate": "2020-04-01T11:30:52Z", "type": "forcePushed"}, {"oid": "e033e974ffc933e86618818a3a2b29822b7c77b6", "url": "https://github.com/infinispan/infinispan/commit/e033e974ffc933e86618818a3a2b29822b7c77b6", "message": "ISPN-11576 doc fixes for dev guide content", "committedDate": "2020-04-01T12:23:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MDc0Nw==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401570747", "bodyText": "add the html file to the link?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To tune the thread pool used to dispatch such asynchronous notifications, use the link:{configdocroot}[`<listener-executor />`] XML element in your configuration file.\n          \n          \n            \n            To tune the thread pool used to dispatch such asynchronous notifications, use the link:{configdocroot}/infinispan-config-{infinispanversion}.html[`<listener-executor />`] XML element in your configuration file.", "author": "pruivo", "createdAt": "2020-04-01T12:18:57Z", "path": "documentation/src/main/asciidoc/topics/cache_api.adoc", "diffHunk": "@@ -164,7 +164,7 @@ include::code_examples/ListenerMyNonBlocking.java[]\n ----\n \n ==== Asynchronous thread pool\n-To tune the thread pool used to dispatch such asynchronous notifications, use the link:http://docs.jboss.org/infinispan/{infinispanversion}/configdocs/infinispan-config-{infinispanversion}.html[`<listener-executor />`] XML element in your configuration file.\n+To tune the thread pool used to dispatch such asynchronous notifications, use the link:{configdocroot}[`<listener-executor />`] XML element in your configuration file.", "originalCommit": "779595b4a6b2f225784c64d523b8262f3b4d1f68", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MzA5MA==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401573090", "bodyText": "this section can be removed IMO. We return CompletableFuture (a JDK class) and the users can use any of the methods available to register listeners.", "author": "pruivo", "createdAt": "2020-04-01T12:23:04Z", "path": "documentation/src/main/asciidoc/topics/cache_api.adoc", "diffHunk": "@@ -192,26 +195,25 @@ These are, in order of cost:\n * writing to a cache store (optional)\n * locking\n \n-As of {brandname} 4.0, using the async methods will take the network calls and marshalling off the critical path.\u00a0 For various technical reasons, writing to a cache store and acquiring locks, however, still happens in the caller's thread.\u00a0 In future, we plan to take these offline as well.\u00a0 See link:http://lists.jboss.org/pipermail/infinispan-dev/2010-January/002219.html[this developer mail list thread] about this topic.\n+Using the async methods will take the network calls and marshalling off the critical path.\u00a0 For various technical reasons, writing to a cache store and acquiring locks, however, still happens in the caller's thread.\n \n+//dnaro: ISPN-11577\n+ifndef::productized[]\n === Notifying futures", "originalCommit": "779595b4a6b2f225784c64d523b8262f3b4d1f68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NzY0Mw==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401577643", "bodyText": "removed. thanks @pruivo", "author": "oraNod", "createdAt": "2020-04-01T12:31:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MzA5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NDI0Nw==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401574247", "bodyText": "is this section supposed to be out of prod?\nyou open ifndef::productized[] in the section before.", "author": "pruivo", "createdAt": "2020-04-01T12:25:09Z", "path": "documentation/src/main/asciidoc/topics/cache_api.adoc", "diffHunk": "@@ -192,26 +195,25 @@ These are, in order of cost:\n * writing to a cache store (optional)\n * locking\n \n-As of {brandname} 4.0, using the async methods will take the network calls and marshalling off the critical path.\u00a0 For various technical reasons, writing to a cache store and acquiring locks, however, still happens in the caller's thread.\u00a0 In future, we plan to take these offline as well.\u00a0 See link:http://lists.jboss.org/pipermail/infinispan-dev/2010-January/002219.html[this developer mail list thread] about this topic.\n+Using the async methods will take the network calls and marshalling off the critical path.\u00a0 For various technical reasons, writing to a cache store and acquiring locks, however, still happens in the caller's thread.\n \n+//dnaro: ISPN-11577\n+ifndef::productized[]\n === Notifying futures\n-Strictly, these methods do not return JDK Futures, but rather a sub-interface known as a link:{javadocroot}/org/infinispan/commons/util/concurrent/NotifyingFuture.html[NotifyingFuture] .\u00a0 The main difference is that you can attach a listener to a NotifyingFuture such that you could be notified when the future completes.\u00a0 Here is an example of making use of a notifying future:\n+Strictly, these methods do not return JDK Futures, but rather a sub-interface known as a link:{javadocroot}/org/infinispan/commons/util/concurrent/NotifyingFuture.html[NotifyingFuture].\u00a0The main difference is that you can attach a listener to a NotifyingFuture such that you could be notified when the future completes.\u00a0 Here is an example of making use of a notifying future:\n \n [source,java]\n ----\n include::code_examples/ListenerFuture.java[]\n ----\n \n-=== Further reading\n-The Javadocs on the link:{javadocroot}/org/infinispan/Cache.html[Cache] interface has some examples on using the asynchronous API, as does link:http://infinispan.blogspot.com/2009/05/whats-so-cool-about-asynchronous-api.html[this article] by Manik Surtani introducing the API.\n-\n-==  Invocation Flags\n-An important aspect of getting the most of {brandname} is the use of per-invocation flags in order to provide specific behaviour to each particular cache call. By doing this, some important optimizations can be implemented potentially saving precious time and network resources. One of the most popular usages of flags can be found right in Cache API, underneath the link:{javadocroot}/org/infinispan/Cache.html#putForExternalRead-K-V-[putForExternalRead()] method which is used to load an {brandname} cache with data read from an external resource. In order to make this call efficient, {brandname} basically calls a normal put operation passing the following flags: link:{javadocroot}/org/infinispan/context/Flag.html#FAIL_SILENTLY[FAIL_SILENTLY] , link:{javadocroot}/org/infinispan/context/Flag.html#FORCE_ASYNCHRONOUS[FORCE_ASYNCHRONOUS] , link:{javadocroot}/org/infinispan/context/Flag.html#ZERO_LOCK_ACQUISITION_TIMEOUT[ZERO_LOCK_ACQUISITION_TIMEOUT]\n+== Invocation Flags", "originalCommit": "e033e974ffc933e86618818a3a2b29822b7c77b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b0df04f1759ed44941228743686d24aa1650a16e", "url": "https://github.com/infinispan/infinispan/commit/b0df04f1759ed44941228743686d24aa1650a16e", "message": "ISPN-11576 doc fixes for dev guide content", "committedDate": "2020-04-01T12:30:18Z", "type": "forcePushed"}, {"oid": "2f04ceea1325c14b424ec2fda745599fe9f73a57", "url": "https://github.com/infinispan/infinispan/commit/2f04ceea1325c14b424ec2fda745599fe9f73a57", "message": "ISPN-11576 doc fixes for dev guide content", "committedDate": "2020-04-01T12:44:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4MTg1NQ==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401581855", "bodyText": "link to the method that uses the cache name as parameter\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Invoke the link:{javadocroot}/org/infinispan/manager/EmbeddedCacheManager.html#getCache()[`getCache()`] method to obtain caches, as follows:\n          \n          \n            \n            Invoke the link:{javadocroot}/org/infinispan/manager/EmbeddedCacheManager.html#getCache(java.lang.String)[`getCache(String)`] method to obtain caches, as follows:", "author": "pruivo", "createdAt": "2020-04-01T12:38:24Z", "path": "documentation/src/main/asciidoc/topics/cache_manager.adoc", "diffHunk": "@@ -38,7 +38,7 @@ clustered it will also leave the cluster gracefully.\n == Obtaining caches\n After you configure the `CacheManager`, you can obtain and control caches.\n \n-Invoke the link:{javadocroot}/org/infinispan/manager/EmbeddedCacheManager.html#getCache--[`getCache()`] method to obtain caches, as follows:\n+Invoke the link:{javadocroot}/org/infinispan/manager/EmbeddedCacheManager.html#getCache()[`getCache()`] method to obtain caches, as follows:", "originalCommit": "b0df04f1759ed44941228743686d24aa1650a16e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4NTY5Mw==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401585693", "bodyText": "Link to the same method used in the example:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Invoke the link:{javadocroot}/org/infinispan/manager/EmbeddedCacheManagerAdmin.html#createCache()[`createCache()`] method to create caches dynamically across the entire cluster, as follows:\n          \n          \n            \n            Invoke the link:{javadocroot}/org/infinispan/manager/EmbeddedCacheManagerAdmin.html#createCache(java.lang.String,java.lang.String)[`createCache()`] method to create caches dynamically across the entire cluster, as follows:", "author": "pruivo", "createdAt": "2020-04-01T12:44:46Z", "path": "documentation/src/main/asciidoc/topics/cache_manager.adoc", "diffHunk": "@@ -49,7 +49,7 @@ The preceding operation creates a cache named `myCache`, if it does not already\n \n Using the `getCache()` method creates the cache only on the node where you invoke the method. In other words, it performs a local operation that must be invoked on each node across the cluster. Typically, applications deployed across multiple nodes obtain caches during initialization to ensure that caches are _symmetric_ and exist on each node.\n \n-Invoke the link:{javadocroot}/org/infinispan/manager/EmbeddedCacheManagerAdmin.html#createCache--[`createCache()`] method to create caches dynamically across the entire cluster, as follows:\n+Invoke the link:{javadocroot}/org/infinispan/manager/EmbeddedCacheManagerAdmin.html#createCache()[`createCache()`] method to create caches dynamically across the entire cluster, as follows:", "originalCommit": "b0df04f1759ed44941228743686d24aa1650a16e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4NzM2MA==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401587360", "bodyText": "both methods are deprecated in 10.x. This section can be removed IMO.", "author": "pruivo", "createdAt": "2020-04-01T12:47:33Z", "path": "documentation/src/main/asciidoc/topics/cache_manager.adoc", "diffHunk": "@@ -81,24 +81,24 @@ is configured).\n When you are using a cluster it is very important to be able to find information\n about membership in the cluster including who is the owner of the cluster.\n \n-.link:{javadocroot}/org/infinispan/manager/EmbeddedCacheManager.html#getMembers--[getMembers()]\n+.link:{javadocroot}/org/infinispan/manager/EmbeddedCacheManager.html#getMembers()[getMembers()]\n The +getMembers()+ method returns all of the nodes in the current cluster.\n \n-.link:{javadocroot}/org/infinispan/manager/EmbeddedCacheManager.html#getCoordinator--[getCoordinator()]\n+.link:{javadocroot}/org/infinispan/manager/EmbeddedCacheManager.html#getCoordinator()[getCoordinator()]\n The +getCoordinator()+ method will tell you which one of the members is the coordinator\n of the cluster.  For most intents you shouldn't need to care who the coordinator is.\n-You can use link:{javadocroot}/org/infinispan/manager/EmbeddedCacheManager.html#isCoordinator--[isCoordinator()]\n+You can use link:{javadocroot}/org/infinispan/manager/EmbeddedCacheManager.html#isCoordinator()[isCoordinator()]\n method directly to see if the local node is the coordinator as well.\n \n == Other methods", "originalCommit": "2f04ceea1325c14b424ec2fda745599fe9f73a57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4ODUyMQ==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401588521", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  .marshaller(new org.infinispan.example.marshall.CustomMarshaller()).whiteList()\n          \n          \n            \n                  .addRegexp(\"org.infinispan.example.*\");\n          \n          \n            \n                  .marshaller(new org.infinispan.example.marshall.CustomMarshaller())\n          \n          \n            \n                  .whiteList().addRegexp(\"org.infinispan.example.*\");", "author": "pruivo", "createdAt": "2020-04-01T12:49:22Z", "path": "documentation/src/main/asciidoc/topics/code_examples/CustomMarshaller.java", "diffHunk": "@@ -1,3 +1,4 @@\n GlobalConfigurationBuilder builder = new GlobalConfigurationBuilder();\n-      builder.serialization().marshaller(org.infinispan.example.marshall.CustomMarshaller.class)\n-      .addJavaSerialWhiteList(\"org.infinispan.example.*\");\n+builder.serialization()\n+      .marshaller(new org.infinispan.example.marshall.CustomMarshaller()).whiteList()\n+      .addRegexp(\"org.infinispan.example.*\");", "originalCommit": "2f04ceea1325c14b424ec2fda745599fe9f73a57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5MDcxOA==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401590718", "bodyText": "too many spaces?", "author": "pruivo", "createdAt": "2020-04-01T12:52:56Z", "path": "documentation/src/main/asciidoc/topics/code_examples/EncoderScrambler.java", "diffHunk": "@@ -1,15 +1,24 @@\n-public class Scrambler implements Encoder {\n+class Scrambler implements Encoder {\n \n-   Object toStorage(Object content) {\n-      // Encrypt data\n-   }\n+        public Object toStorage(Object content) {", "originalCommit": "2f04ceea1325c14b424ec2fda745599fe9f73a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyOTE1OQ==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401629159", "bodyText": "fixed. thanks @pruivo", "author": "oraNod", "createdAt": "2020-04-01T13:48:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5MDcxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5NDM3NQ==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401594375", "bodyText": "I would have added the 3 missing methods and kept the name.\nCompletableFuture<Optional<CacheEntry<K, Collection<V>>>> getEntry(K key);\nCompletableFuture<Void> remove(Predicate<? super V> p);\nCompletableFuture<Void> remove(SerializablePredicate<? super V> p);", "author": "pruivo", "createdAt": "2020-04-01T12:58:23Z", "path": "documentation/src/main/asciidoc/topics/code_examples/MultiMapCache.java", "diffHunk": "@@ -1,4 +1,4 @@\n-public interface MultimapCache<K, V> {\n+public interface BasicMultimapCache<K, V> {", "originalCommit": "2f04ceea1325c14b424ec2fda745599fe9f73a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyODk4Nw==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401628987", "bodyText": "@pruivo CompletableFuture<Void> remove(Predicate<? super V> p); is already there but I've added the other two and reverted the name change.", "author": "oraNod", "createdAt": "2020-04-01T13:48:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5NDM3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5NjYxNg==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401596616", "bodyText": "I'm not sure about this...\ncache-api must be in the classpath if JCache is being used, independently of the provider used.", "author": "pruivo", "createdAt": "2020-04-01T13:01:53Z", "path": "documentation/src/main/asciidoc/topics/dependencies_maven/jcache.xml", "diffHunk": "@@ -3,3 +3,7 @@\n   <artifactId>infinispan-jcache</artifactId>\n   <version>${version.infinispan}</version>\n </dependency>\n+<dependency>", "originalCommit": "2f04ceea1325c14b424ec2fda745599fe9f73a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyODUwMQ==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401628501", "bodyText": "removed this from the pom example and added details about putting cache-api on the classpath.", "author": "oraNod", "createdAt": "2020-04-01T13:47:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5NjYxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwMDczNg==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401600736", "bodyText": "change the link to point to github? that package is private and it isn't in javadocs.", "author": "pruivo", "createdAt": "2020-04-01T13:08:25Z", "path": "documentation/src/main/asciidoc/topics/proc_using_custom_marshallers.adoc", "diffHunk": "@@ -19,7 +19,7 @@ include::config_examples/custom_marshaller.xml[]\n [TIP]\n ====\n Custom marshaller implementations can access a configured white list via the\n-link:{javadocroot}/org/infinispan/commons/marshall/Marshaller.html#initialize[initialize()] method, which is called during startup.\n+link:{javadocroot}org/infinispan/commons/marshall/Marshaller.html#initialize(org.infinispan.commons.configuration.ClassWhiteList)[initialize()] method, which is called during startup.", "originalCommit": "2f04ceea1325c14b424ec2fda745599fe9f73a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyNzczNA==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401627734", "bodyText": "let's remove this and the pointer to the Marshaller docs beneath it. I think we want to discourage custom marshallers if possible, right? maybe this should even just be community only.", "author": "oraNod", "createdAt": "2020-04-01T13:46:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwMDczNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY2NjIyMA==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401666220", "bodyText": "for Marshaller question, I'll invoke @ryanemerson  :)", "author": "pruivo", "createdAt": "2020-04-01T14:37:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwMDczNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4NDk1NQ==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401684955", "bodyText": "@pruivo The package is public https://github.com/infinispan/infinispan/blob/4139c97c1a34c65bbd28b1e24467a543af9aa04f/commons/all/src/main/java/org/infinispan/commons/marshall/package-info.java#L7-L6\nI don't think we should dissuade the use of custom marshallers. On the client they can be very useful and have been used in the past by users.", "author": "ryanemerson", "createdAt": "2020-04-01T15:02:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwMDczNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4OTAyNQ==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401689025", "bodyText": "@pruivo I've reverted the changes and verified that it's available in javadocs. https://docs.jboss.org/infinispan/11.0/apidocs/org/infinispan/commons/marshall/Marshaller.html#initialize(org.infinispan.commons.configuration.ClassWhiteList)", "author": "oraNod", "createdAt": "2020-04-01T15:07:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwMDczNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5MTY4NQ==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401691685", "bodyText": "no idea what link I used xD eh eh", "author": "pruivo", "createdAt": "2020-04-01T15:11:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwMDczNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwMzI1Ng==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401603256", "bodyText": "this collector doesn't exist.\nI think you can use .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));", "author": "pruivo", "createdAt": "2020-04-01T13:12:21Z", "path": "documentation/src/main/asciidoc/topics/streams.adoc", "diffHunk": "@@ -214,7 +212,7 @@ payload size even further.\n \n [source,java]\n ----\n-   Map<Object, String> jbossValues = cache.entrySet().stream()\n+Map<Object, String> map = (Map<Object, String>) cache.entrySet().stream()\n               .filter(new ContainsFilter(\"Jboss\"))\n               .collect(ToMapCollectorSupplier.INSTANCE);", "originalCommit": "2f04ceea1325c14b424ec2fda745599fe9f73a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyODAwNQ==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401628005", "bodyText": "fixed. thanks @pruivo", "author": "oraNod", "createdAt": "2020-04-01T13:47:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwMzI1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwNDQzNA==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401604434", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            CacheStream<Object> stream = cache.entrySet().stream();\n          \n          \n            \n            CacheStream<Map.Entry<Object, String>> stream = cache.entrySet().stream();", "author": "pruivo", "createdAt": "2020-04-01T13:14:06Z", "path": "documentation/src/main/asciidoc/topics/streams.adoc", "diffHunk": "@@ -292,7 +290,7 @@ replication timeout as a default timeout. You can set the timeout in your task b\n \n [source,java]\n ----\n-CacheStream<Object, String> stream = cache.entrySet().stream();\n+CacheStream<Object> stream = cache.entrySet().stream();", "originalCommit": "2f04ceea1325c14b424ec2fda745599fe9f73a57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7d2d6f191095963bf2cd441b10eb59f7762939b6", "url": "https://github.com/infinispan/infinispan/commit/7d2d6f191095963bf2cd441b10eb59f7762939b6", "message": "ISPN-11576 doc fixes for dev guide content", "committedDate": "2020-04-01T13:49:35Z", "type": "forcePushed"}, {"oid": "d431d0712dfabf49aa1555f2c187a56fc719e0a6", "url": "https://github.com/infinispan/infinispan/commit/d431d0712dfabf49aa1555f2c187a56fc719e0a6", "message": "ISPN-11576 doc fixes for dev guide content", "committedDate": "2020-04-01T15:05:32Z", "type": "commit"}, {"oid": "d431d0712dfabf49aa1555f2c187a56fc719e0a6", "url": "https://github.com/infinispan/infinispan/commit/d431d0712dfabf49aa1555f2c187a56fc719e0a6", "message": "ISPN-11576 doc fixes for dev guide content", "committedDate": "2020-04-01T15:05:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3MzA0MQ==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401673041", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * link:{javadocroot}/org/infinispan/functional/EntryView.ReadEntryView.html#key--[`key()`]\n          \n          \n            \n            * link:{javadocroot}/org/infinispan/functional/EntryView.ReadEntryView.html#key()[`key()`]", "author": "pruivo", "createdAt": "2020-04-01T14:46:54Z", "path": "documentation/src/main/asciidoc/topics/functional_api.adoc", "diffHunk": "@@ -92,23 +83,23 @@ as entries, which include both key and value information.\n === Read-Only Entry View\n \n The function parameters for read-only maps provide the user with a\n-link:{javadocroot}/org/infinispan/commons/api/functional/EntryView.ReadEntryView.html[read-only entry view]\n+link:{javadocroot}/org/infinispan/functional/EntryView.ReadEntryView.html[read-only entry view]\n to interact with the data in the cache, which include these operations:\n \n-* link:{javadocroot}/org/infinispan/commons/api/functional/EntryView.ReadEntryView.html#key--[`key()`]\n+* link:{javadocroot}/org/infinispan/functional/EntryView.ReadEntryView.html#key--[`key()`]", "originalCommit": "7d2d6f191095963bf2cd441b10eb59f7762939b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3MzMyOA==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401673328", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * link:{javadocroot}/org/infinispan/functional/EntryView.ReadEntryView.html#find--[`find()`]\n          \n          \n            \n            * link:{javadocroot}/org/infinispan/functional/EntryView.ReadEntryView.html#find()[`find()`]", "author": "pruivo", "createdAt": "2020-04-01T14:47:15Z", "path": "documentation/src/main/asciidoc/topics/functional_api.adoc", "diffHunk": "@@ -92,23 +83,23 @@ as entries, which include both key and value information.\n === Read-Only Entry View\n \n The function parameters for read-only maps provide the user with a\n-link:{javadocroot}/org/infinispan/commons/api/functional/EntryView.ReadEntryView.html[read-only entry view]\n+link:{javadocroot}/org/infinispan/functional/EntryView.ReadEntryView.html[read-only entry view]\n to interact with the data in the cache, which include these operations:\n \n-* link:{javadocroot}/org/infinispan/commons/api/functional/EntryView.ReadEntryView.html#key--[`key()`]\n+* link:{javadocroot}/org/infinispan/functional/EntryView.ReadEntryView.html#key--[`key()`]\n method returns the key for which this function is being executed.\n-* link:{javadocroot}/org/infinispan/commons/api/functional/EntryView.ReadEntryView.html#find--[`find()`]\n+* link:{javadocroot}/org/infinispan/functional/EntryView.ReadEntryView.html#find--[`find()`]", "originalCommit": "7d2d6f191095963bf2cd441b10eb59f7762939b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3MzQ4Mg==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401673482", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * link:{javadocroot}/org/infinispan/functional/EntryView.ReadEntryView.html#get--[`get()`]\n          \n          \n            \n            * link:{javadocroot}/org/infinispan/functional/EntryView.ReadEntryView.html#get()[`get()`]", "author": "pruivo", "createdAt": "2020-04-01T14:47:25Z", "path": "documentation/src/main/asciidoc/topics/functional_api.adoc", "diffHunk": "@@ -92,23 +83,23 @@ as entries, which include both key and value information.\n === Read-Only Entry View\n \n The function parameters for read-only maps provide the user with a\n-link:{javadocroot}/org/infinispan/commons/api/functional/EntryView.ReadEntryView.html[read-only entry view]\n+link:{javadocroot}/org/infinispan/functional/EntryView.ReadEntryView.html[read-only entry view]\n to interact with the data in the cache, which include these operations:\n \n-* link:{javadocroot}/org/infinispan/commons/api/functional/EntryView.ReadEntryView.html#key--[`key()`]\n+* link:{javadocroot}/org/infinispan/functional/EntryView.ReadEntryView.html#key--[`key()`]\n method returns the key for which this function is being executed.\n-* link:{javadocroot}/org/infinispan/commons/api/functional/EntryView.ReadEntryView.html#find--[`find()`]\n+* link:{javadocroot}/org/infinispan/functional/EntryView.ReadEntryView.html#find--[`find()`]\n returns a Java 8 `Optional` wrapping the value if present,\n otherwise it returns an empty optional. Unless the value is guaranteed to\n be associated with the key, it's recommended to use `find()` to verify\n whether there's a value associated with the key.\n-* link:{javadocroot}/org/infinispan/commons/api/functional/EntryView.ReadEntryView.html#get--[`get()`]\n+* link:{javadocroot}/org/infinispan/functional/EntryView.ReadEntryView.html#get--[`get()`]", "originalCommit": "7d2d6f191095963bf2cd441b10eb59f7762939b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3NDQ2Mw==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401674463", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * link:{javadocroot}/org/infinispan/functional/MetaParam.Lookup.html#findMetaParam-java.lang.Class-[`findMetaParam(Class<T> type)`]\n          \n          \n            \n            * link:{javadocroot}/org/infinispan/functional/MetaParam.Lookup.html#findMetaParam(java.lang.Class)[`findMetaParam(Class<T> type)`]", "author": "pruivo", "createdAt": "2020-04-01T14:48:41Z", "path": "documentation/src/main/asciidoc/topics/functional_api.adoc", "diffHunk": "@@ -92,23 +83,23 @@ as entries, which include both key and value information.\n === Read-Only Entry View\n \n The function parameters for read-only maps provide the user with a\n-link:{javadocroot}/org/infinispan/commons/api/functional/EntryView.ReadEntryView.html[read-only entry view]\n+link:{javadocroot}/org/infinispan/functional/EntryView.ReadEntryView.html[read-only entry view]\n to interact with the data in the cache, which include these operations:\n \n-* link:{javadocroot}/org/infinispan/commons/api/functional/EntryView.ReadEntryView.html#key--[`key()`]\n+* link:{javadocroot}/org/infinispan/functional/EntryView.ReadEntryView.html#key--[`key()`]\n method returns the key for which this function is being executed.\n-* link:{javadocroot}/org/infinispan/commons/api/functional/EntryView.ReadEntryView.html#find--[`find()`]\n+* link:{javadocroot}/org/infinispan/functional/EntryView.ReadEntryView.html#find--[`find()`]\n returns a Java 8 `Optional` wrapping the value if present,\n otherwise it returns an empty optional. Unless the value is guaranteed to\n be associated with the key, it's recommended to use `find()` to verify\n whether there's a value associated with the key.\n-* link:{javadocroot}/org/infinispan/commons/api/functional/EntryView.ReadEntryView.html#get--[`get()`]\n+* link:{javadocroot}/org/infinispan/functional/EntryView.ReadEntryView.html#get--[`get()`]\n returns the value associated with the key. If the key has no value\n associated with it, calling `get()` throws a `NoSuchElementException`.\n `get()` can be considered as a shortcut of `ReadEntryView.find().get()`\n which should be used only when the caller has guarantees that there's\n definitely a value associated with the key.\n-* link:{javadocroot}/org/infinispan/commons/api/functional/MetaParam.Lookup.html#findMetaParam-java.lang.Class-[`findMetaParam(Class<T> type)`]\n+* link:{javadocroot}/org/infinispan/functional/MetaParam.Lookup.html#findMetaParam-java.lang.Class-[`findMetaParam(Class<T> type)`]", "originalCommit": "7d2d6f191095963bf2cd441b10eb59f7762939b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3NTkwOA==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401675908", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            {javadocroot}/org/infinispan/functional/FunctionalMap.WriteOnlyMap.html#evalMany-java.util.Map-java.util.function.BiConsumer-[`evalMany`]\n          \n          \n            \n            {javadocroot}/org/infinispan/functional/FunctionalMap.WriteOnlyMap.html#evalMany(java.util.Map,java.util.function.BiConsumer)[`evalMany`]", "author": "pruivo", "createdAt": "2020-04-01T14:50:31Z", "path": "documentation/src/main/asciidoc/topics/functional_api.adoc", "diffHunk": "@@ -140,7 +131,7 @@ include::code_examples/WriteOnlyMap.java[]\n ----\n \n Multiple key/value pairs can be stored in one go using\n-{javadocroot}/org/infinispan/commons/api/functional/FunctionalMap.WriteOnlyMap.html#evalMany-java.util.Map-java.util.function.BiConsumer-[`evalMany`]\n+{javadocroot}/org/infinispan/functional/FunctionalMap.WriteOnlyMap.html#evalMany-java.util.Map-java.util.function.BiConsumer-[`evalMany`]", "originalCommit": "7d2d6f191095963bf2cd441b10eb59f7762939b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3Njk5OA==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401676998", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            link:{javadocroot}/org/infinispan/functional/FunctionalMap.WriteOnlyMap.html#truncate--[`truncate`]\n          \n          \n            \n            link:{javadocroot}/org/infinispan/functional/FunctionalMap.WriteOnlyMap.html#truncate()[`truncate`]", "author": "pruivo", "createdAt": "2020-04-01T14:52:01Z", "path": "documentation/src/main/asciidoc/topics/functional_api.adoc", "diffHunk": "@@ -160,7 +151,7 @@ include::code_examples/WriteOnlyMapRemoveAll.java[]\n ----\n \n The alternative way to remove all entries is to call\n-link:{javadocroot}/org/infinispan/commons/api/functional/FunctionalMap.WriteOnlyMap.html#truncate--[`truncate`]\n+link:{javadocroot}/org/infinispan/functional/FunctionalMap.WriteOnlyMap.html#truncate--[`truncate`]", "originalCommit": "7d2d6f191095963bf2cd441b10eb59f7762939b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3NzU2OA==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401677568", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            link:{javadocroot}/org/infinispan/functional/FunctionalMap.WriteOnlyMap.html#evalAll-java.util.function.Consumer-[`evalAll`]\n          \n          \n            \n            link:{javadocroot}/org/infinispan/functional/FunctionalMap.WriteOnlyMap.html#evalAll(java.util.function.Consumer)[`evalAll`]", "author": "pruivo", "createdAt": "2020-04-01T14:52:49Z", "path": "documentation/src/main/asciidoc/topics/functional_api.adoc", "diffHunk": "@@ -150,7 +141,7 @@ include::code_examples/WriteOnlyMapStoreKeys.java[]\n \n To remove all contents of the cache, there are two possibilities with\n different semantics. If using\n-link:{javadocroot}/org/infinispan/commons/api/functional/FunctionalMap.WriteOnlyMap.html#evalAll-java.util.function.Consumer-[`evalAll`]\n+link:{javadocroot}/org/infinispan/functional/FunctionalMap.WriteOnlyMap.html#evalAll-java.util.function.Consumer-[`evalAll`]", "originalCommit": "7d2d6f191095963bf2cd441b10eb59f7762939b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3ODQyNw==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401678427", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * link:{javadocroot}/org/infinispan/functional/EntryView.WriteEntryView.html#set-V-org.infinispan.commons.api.functional.MetaParam.Writable...-[`set(V, MetaParam.Writable...)`]\n          \n          \n            \n            * link:{javadocroot}/org/infinispan/functional/EntryView.WriteEntryView.html#set(V,org.infinispan.functional.MetaParam.Writable...)[`set(V, MetaParam.Writable...)`]", "author": "pruivo", "createdAt": "2020-04-01T14:53:54Z", "path": "documentation/src/main/asciidoc/topics/functional_api.adoc", "diffHunk": "@@ -172,16 +163,16 @@ include::code_examples/WriteOnlyMapTruncate.java[]\n [[write_only_entry_view]]\n === Write-Only Entry View\n The function parameters for write-only maps provide the user with a\n-link:{javadocroot}/org/infinispan/commons/api/functional/EntryView.WriteEntryView.html[write-only entry view]\n+link:{javadocroot}/org/infinispan/functional/EntryView.WriteEntryView.html[write-only entry view]\n to modify the data in the cache, which include these\n operations:\n \n-* link:{javadocroot}/org/infinispan/commons/api/functional/EntryView.WriteEntryView.html#set-V-org.infinispan.commons.api.functional.MetaParam.Writable...-[`set(V, MetaParam.Writable...)`]\n+* link:{javadocroot}/org/infinispan/functional/EntryView.WriteEntryView.html#set-V-org.infinispan.commons.api.functional.MetaParam.Writable...-[`set(V, MetaParam.Writable...)`]", "originalCommit": "7d2d6f191095963bf2cd441b10eb59f7762939b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3ODc0MQ==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401678741", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * link:{javadocroot}/org/infinispan/functional/EntryView.WriteEntryView.html#remove--[`remove()`]\n          \n          \n            \n            * link:{javadocroot}/org/infinispan/functional/EntryView.WriteEntryView.html#remove()[`remove()`]", "author": "pruivo", "createdAt": "2020-04-01T14:54:17Z", "path": "documentation/src/main/asciidoc/topics/functional_api.adoc", "diffHunk": "@@ -172,16 +163,16 @@ include::code_examples/WriteOnlyMapTruncate.java[]\n [[write_only_entry_view]]\n === Write-Only Entry View\n The function parameters for write-only maps provide the user with a\n-link:{javadocroot}/org/infinispan/commons/api/functional/EntryView.WriteEntryView.html[write-only entry view]\n+link:{javadocroot}/org/infinispan/functional/EntryView.WriteEntryView.html[write-only entry view]\n to modify the data in the cache, which include these\n operations:\n \n-* link:{javadocroot}/org/infinispan/commons/api/functional/EntryView.WriteEntryView.html#set-V-org.infinispan.commons.api.functional.MetaParam.Writable...-[`set(V, MetaParam.Writable...)`]\n+* link:{javadocroot}/org/infinispan/functional/EntryView.WriteEntryView.html#set-V-org.infinispan.commons.api.functional.MetaParam.Writable...-[`set(V, MetaParam.Writable...)`]\n method allows for a new value to be\n associated with the cache entry for which this function is executed, and it\n optionally takes zero or more metadata parameters to be stored along with\n the value. See link:#meta_parameter[Metadata Parameter Handling] for more information.\n-* link:{javadocroot}/org/infinispan/commons/api/functional/EntryView.WriteEntryView.html#remove--[`remove()`]\n+* link:{javadocroot}/org/infinispan/functional/EntryView.WriteEntryView.html#remove--[`remove()`]", "originalCommit": "7d2d6f191095963bf2cd441b10eb59f7762939b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4MDIzOQ==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401680239", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            link:{javadocroot}/org/infinispan/functional/MetaParam.Lookup.html#findMetaParam-java.lang.Class-[`findMetaParam(Class)`]\n          \n          \n            \n            link:{javadocroot}/org/infinispan/functional/MetaParam.Lookup.html#findMetaParam(java.lang.Class)[`findMetaParam(Class)`]", "author": "pruivo", "createdAt": "2020-04-01T14:56:15Z", "path": "documentation/src/main/asciidoc/topics/functional_api.adoc", "diffHunk": "@@ -255,13 +246,13 @@ accessed/used time.\n The functional map API provides a flexible way to store metadata parameters\n along with an cache entry. To be able to store a metadata parameter, it must\n extend\n-link:{javadocroot}/org/infinispan/commons/api/functional/MetaParam.Lookup.html[`MetaParam.Writable`]\n+link:{javadocroot}/org/infinispan/functional/MetaParam.Lookup.html[`MetaParam.Writable`]\n interface, and implement the methods to allow the\n internal logic to extra the data. Storing is done via the\n `set(V, MetaParam.Writable...)` method in the link:#write_only_entry_view[write-only entry view] or link:#read_write_entry_view[read-write entry view] function parameters.\n \n Querying metadata parameters is available via the\n-link:{javadocroot}/org/infinispan/commons/api/functional/MetaParam.Lookup.html#findMetaParam-java.lang.Class-[`findMetaParam(Class)`]\n+link:{javadocroot}/org/infinispan/functional/MetaParam.Lookup.html#findMetaParam-java.lang.Class-[`findMetaParam(Class)`]", "originalCommit": "7d2d6f191095963bf2cd441b10eb59f7762939b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4MTIxNA==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401681214", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            link:{javadocroot}/org/infinispan/functional/FunctionalMap.html#withParams-org.infinispan.commons.api.functional.Param...-[`withParams(Param<?>...)`]\n          \n          \n            \n            link:{javadocroot}/org/infinispan/functional/FunctionalMap.html#withParams(org.infinispan.functional.Param...)[`withParams(Param<?>...)`]", "author": "pruivo", "createdAt": "2020-04-01T14:57:31Z", "path": "documentation/src/main/asciidoc/topics/functional_api.adoc", "diffHunk": "@@ -301,14 +292,14 @@ for the metadata parameters already provided by the functional map API.\n \n [[_invocation_parameter]]\n == Invocation Parameter\n-link:{javadocroot}/org/infinispan/commons/api/functional/Param.html[Per-invocation parameters]\n+link:{javadocroot}/org/infinispan/functional/Param.html[Per-invocation parameters]\n are applied to regular functional map API calls to\n alter the behaviour of certain aspects. Adding per invocation parameters is\n done using the\n-link:{javadocroot}/org/infinispan/commons/api/functional/FunctionalMap.html#withParams-org.infinispan.commons.api.functional.Param...-[`withParams(Param<?>...)`]\n+link:{javadocroot}/org/infinispan/functional/FunctionalMap.html#withParams-org.infinispan.commons.api.functional.Param...-[`withParams(Param<?>...)`]", "originalCommit": "7d2d6f191095963bf2cd441b10eb59f7762939b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4Mzg0OA==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401683848", "bodyText": "FutureMode has been removed. Paragraph and example can be removed.", "author": "pruivo", "createdAt": "2020-04-01T15:00:45Z", "path": "documentation/src/main/asciidoc/topics/functional_api.adoc", "diffHunk": "@@ -301,14 +292,14 @@ for the metadata parameters already provided by the functional map API.\n \n [[_invocation_parameter]]\n == Invocation Parameter\n-link:{javadocroot}/org/infinispan/commons/api/functional/Param.html[Per-invocation parameters]\n+link:{javadocroot}/org/infinispan/functional/Param.html[Per-invocation parameters]\n are applied to regular functional map API calls to\n alter the behaviour of certain aspects. Adding per invocation parameters is\n done using the\n-link:{javadocroot}/org/infinispan/commons/api/functional/FunctionalMap.html#withParams-org.infinispan.commons.api.functional.Param...-[`withParams(Param<?>...)`]\n+link:{javadocroot}/org/infinispan/functional/FunctionalMap.html#withParams-org.infinispan.commons.api.functional.Param...-[`withParams(Param<?>...)`]\n method.\n \n-link:{javadocroot}/org/infinispan/commons/api/functional/Param.FutureMode.html[`Param.FutureMode`]\n+link:{javadocroot}/org/infinispan/functional/Param.FutureMode.html[`Param.FutureMode`]", "originalCommit": "7d2d6f191095963bf2cd441b10eb59f7762939b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4NTA4OQ==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401685089", "bodyText": "The next paragraph (about Param.PersistenceMode) needs to be revisited (package and links need to be updated)", "author": "pruivo", "createdAt": "2020-04-01T15:02:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4Mzg0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4NTcyMw==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401685723", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            link:{javadocroot}/org/infinispan/functional/EntryView.ReadEntryView.html#find--[`ReadEntryView.find()`]\n          \n          \n            \n            link:{javadocroot}/org/infinispan/functional/EntryView.ReadEntryView.html#find()[`ReadEntryView.find()`]", "author": "pruivo", "createdAt": "2020-04-01T15:03:13Z", "path": "documentation/src/main/asciidoc/topics/functional_api.adoc", "diffHunk": "@@ -378,22 +369,22 @@ entry has been written.\n However, write event listeners can distinguish between entry removals\n and cache entry create/modify-update events because they can query\n what the new entry's value via\n-link:{javadocroot}/org/infinispan/commons/api/functional/EntryView.ReadEntryView.html#find--[`ReadEntryView.find()`]\n+link:{javadocroot}/org/infinispan/functional/EntryView.ReadEntryView.html#find--[`ReadEntryView.find()`]", "originalCommit": "7d2d6f191095963bf2cd441b10eb59f7762939b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4NTg2NA==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401685864", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            link:{javadocroot}/org/infinispan/functional/FunctionalMap.ReadWriteMap.html#listeners--[`ReadWriteMap.listeners()`]\n          \n          \n            \n            link:{javadocroot}/org/infinispan/functional/FunctionalMap.ReadWriteMap.html#listeners()[`ReadWriteMap.listeners()`]", "author": "pruivo", "createdAt": "2020-04-01T15:03:24Z", "path": "documentation/src/main/asciidoc/topics/functional_api.adoc", "diffHunk": "@@ -378,22 +369,22 @@ entry has been written.\n However, write event listeners can distinguish between entry removals\n and cache entry create/modify-update events because they can query\n what the new entry's value via\n-link:{javadocroot}/org/infinispan/commons/api/functional/EntryView.ReadEntryView.html#find--[`ReadEntryView.find()`]\n+link:{javadocroot}/org/infinispan/functional/EntryView.ReadEntryView.html#find--[`ReadEntryView.find()`]\n method.\n \n Adding a write listener is done via the WriteListeners interface\n which is accessible via both\n-link:{javadocroot}/org/infinispan/commons/api/functional/FunctionalMap.ReadWriteMap.html#listeners--[`ReadWriteMap.listeners()`]\n+link:{javadocroot}/org/infinispan/functional/FunctionalMap.ReadWriteMap.html#listeners--[`ReadWriteMap.listeners()`]", "originalCommit": "7d2d6f191095963bf2cd441b10eb59f7762939b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4NjAwMw==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401686003", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            link:{javadocroot}/org/infinispan/functional/FunctionalMap.WriteOnlyMap.html#listeners--[`WriteOnlyMap.listeners()`]\n          \n          \n            \n            link:{javadocroot}/org/infinispan/functional/FunctionalMap.WriteOnlyMap.html#listeners()[`WriteOnlyMap.listeners()`]", "author": "pruivo", "createdAt": "2020-04-01T15:03:34Z", "path": "documentation/src/main/asciidoc/topics/functional_api.adoc", "diffHunk": "@@ -378,22 +369,22 @@ entry has been written.\n However, write event listeners can distinguish between entry removals\n and cache entry create/modify-update events because they can query\n what the new entry's value via\n-link:{javadocroot}/org/infinispan/commons/api/functional/EntryView.ReadEntryView.html#find--[`ReadEntryView.find()`]\n+link:{javadocroot}/org/infinispan/functional/EntryView.ReadEntryView.html#find--[`ReadEntryView.find()`]\n method.\n \n Adding a write listener is done via the WriteListeners interface\n which is accessible via both\n-link:{javadocroot}/org/infinispan/commons/api/functional/FunctionalMap.ReadWriteMap.html#listeners--[`ReadWriteMap.listeners()`]\n+link:{javadocroot}/org/infinispan/functional/FunctionalMap.ReadWriteMap.html#listeners--[`ReadWriteMap.listeners()`]\n and\n-link:{javadocroot}/org/infinispan/commons/api/functional/FunctionalMap.WriteOnlyMap.html#listeners--[`WriteOnlyMap.listeners()`]\n+link:{javadocroot}/org/infinispan/functional/FunctionalMap.WriteOnlyMap.html#listeners--[`WriteOnlyMap.listeners()`]", "originalCommit": "7d2d6f191095963bf2cd441b10eb59f7762939b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4Njg5Nw==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401686897", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            link:{javadocroot}/org/infinispan/functional/Listeners.WriteListeners.html#onWrite-java.util.function.Consumer-[`onWrite(Consumer<ReadEntryView<K, V>>)`]\n          \n          \n            \n            link:{javadocroot}/org/infinispan/functional/Listeners.WriteListeners.html#onWrite(java.util.function.Consumer)[`onWrite(Consumer<ReadEntryView<K, V>>)`]", "author": "pruivo", "createdAt": "2020-04-01T15:04:41Z", "path": "documentation/src/main/asciidoc/topics/functional_api.adoc", "diffHunk": "@@ -378,22 +369,22 @@ entry has been written.\n However, write event listeners can distinguish between entry removals\n and cache entry create/modify-update events because they can query\n what the new entry's value via\n-link:{javadocroot}/org/infinispan/commons/api/functional/EntryView.ReadEntryView.html#find--[`ReadEntryView.find()`]\n+link:{javadocroot}/org/infinispan/functional/EntryView.ReadEntryView.html#find--[`ReadEntryView.find()`]\n method.\n \n Adding a write listener is done via the WriteListeners interface\n which is accessible via both\n-link:{javadocroot}/org/infinispan/commons/api/functional/FunctionalMap.ReadWriteMap.html#listeners--[`ReadWriteMap.listeners()`]\n+link:{javadocroot}/org/infinispan/functional/FunctionalMap.ReadWriteMap.html#listeners--[`ReadWriteMap.listeners()`]\n and\n-link:{javadocroot}/org/infinispan/commons/api/functional/FunctionalMap.WriteOnlyMap.html#listeners--[`WriteOnlyMap.listeners()`]\n+link:{javadocroot}/org/infinispan/functional/FunctionalMap.WriteOnlyMap.html#listeners--[`WriteOnlyMap.listeners()`]\n  method.\n \n A write listener implementation can be defined either passing a function\n to\n-link:{javadocroot}/org/infinispan/commons/api/functional/Listeners.WriteListeners.html#onWrite-java.util.function.Consumer-[`onWrite(Consumer<ReadEntryView<K, V>>)`]\n+link:{javadocroot}/org/infinispan/functional/Listeners.WriteListeners.html#onWrite-java.util.function.Consumer-[`onWrite(Consumer<ReadEntryView<K, V>>)`]", "originalCommit": "7d2d6f191095963bf2cd441b10eb59f7762939b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4NzMxMQ==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401687311", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            link:{javadocroot}/org/infinispan/functional/Listeners.WriteListeners.html#add-org.infinispan.commons.api.functional.Listeners.WriteListeners.WriteListener-[`add(WriteListener<K, V>)`]\n          \n          \n            \n            link:{javadocroot}/org/infinispan/functional/Listeners.WriteListeners.html#add(org.infinispan.functional.Listeners.WriteListeners.WriteListener)[`add(WriteListener<K, V>)`]", "author": "pruivo", "createdAt": "2020-04-01T15:05:14Z", "path": "documentation/src/main/asciidoc/topics/functional_api.adoc", "diffHunk": "@@ -378,22 +369,22 @@ entry has been written.\n However, write event listeners can distinguish between entry removals\n and cache entry create/modify-update events because they can query\n what the new entry's value via\n-link:{javadocroot}/org/infinispan/commons/api/functional/EntryView.ReadEntryView.html#find--[`ReadEntryView.find()`]\n+link:{javadocroot}/org/infinispan/functional/EntryView.ReadEntryView.html#find--[`ReadEntryView.find()`]\n method.\n \n Adding a write listener is done via the WriteListeners interface\n which is accessible via both\n-link:{javadocroot}/org/infinispan/commons/api/functional/FunctionalMap.ReadWriteMap.html#listeners--[`ReadWriteMap.listeners()`]\n+link:{javadocroot}/org/infinispan/functional/FunctionalMap.ReadWriteMap.html#listeners--[`ReadWriteMap.listeners()`]\n and\n-link:{javadocroot}/org/infinispan/commons/api/functional/FunctionalMap.WriteOnlyMap.html#listeners--[`WriteOnlyMap.listeners()`]\n+link:{javadocroot}/org/infinispan/functional/FunctionalMap.WriteOnlyMap.html#listeners--[`WriteOnlyMap.listeners()`]\n  method.\n \n A write listener implementation can be defined either passing a function\n to\n-link:{javadocroot}/org/infinispan/commons/api/functional/Listeners.WriteListeners.html#onWrite-java.util.function.Consumer-[`onWrite(Consumer<ReadEntryView<K, V>>)`]\n+link:{javadocroot}/org/infinispan/functional/Listeners.WriteListeners.html#onWrite-java.util.function.Consumer-[`onWrite(Consumer<ReadEntryView<K, V>>)`]\n method, or passing a\n WriteListener implementation to\n-link:{javadocroot}/org/infinispan/commons/api/functional/Listeners.WriteListeners.html#add-org.infinispan.commons.api.functional.Listeners.WriteListeners.WriteListener-[`add(WriteListener<K, V>)`]\n+link:{javadocroot}/org/infinispan/functional/Listeners.WriteListeners.html#add-org.infinispan.commons.api.functional.Listeners.WriteListeners.WriteListener-[`add(WriteListener<K, V>)`]", "originalCommit": "7d2d6f191095963bf2cd441b10eb59f7762939b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4NzUyNg==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401687526", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            link:{javadocroot}/org/infinispan/functional/FunctionalMap.ReadWriteMap.html#listeners--[`ReadWriteMap.listeners()`]\n          \n          \n            \n            link:{javadocroot}/org/infinispan/functional/FunctionalMap.ReadWriteMap.html#listeners()[`ReadWriteMap.listeners()`]", "author": "pruivo", "createdAt": "2020-04-01T15:05:32Z", "path": "documentation/src/main/asciidoc/topics/functional_api.adoc", "diffHunk": "@@ -417,18 +408,18 @@ differentiation between create, modified and removed can be fully\n guaranteed.\n \n Adding a read-write listener is done via the\n-link:{javadocroot}/org/infinispan/commons/api/functional/Listeners.ReadWriteListeners.html[`ReadWriteListeners`]\n+link:{javadocroot}/org/infinispan/functional/Listeners.ReadWriteListeners.html[`ReadWriteListeners`]\n interface which is accessible via\n-link:{javadocroot}/org/infinispan/commons/api/functional/FunctionalMap.ReadWriteMap.html#listeners--[`ReadWriteMap.listeners()`]\n+link:{javadocroot}/org/infinispan/functional/FunctionalMap.ReadWriteMap.html#listeners--[`ReadWriteMap.listeners()`]", "originalCommit": "7d2d6f191095963bf2cd441b10eb59f7762939b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4ODc4Mw==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401688783", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            link:{javadocroot}/org/infinispan/functional/Listeners.ReadWriteListeners.ReadWriteListener.html#onCreate-org.infinispan.commons.api.functional.EntryView.ReadEntryView-[`onCreate`]\n          \n          \n            \n            link:{javadocroot}/org/infinispan/functional/Listeners.ReadWriteListeners.ReadWriteListener.html#onCreate(java.util.function.Consumer)[`onCreate`]", "author": "pruivo", "createdAt": "2020-04-01T15:07:14Z", "path": "documentation/src/main/asciidoc/topics/functional_api.adoc", "diffHunk": "@@ -417,18 +408,18 @@ differentiation between create, modified and removed can be fully\n guaranteed.\n \n Adding a read-write listener is done via the\n-link:{javadocroot}/org/infinispan/commons/api/functional/Listeners.ReadWriteListeners.html[`ReadWriteListeners`]\n+link:{javadocroot}/org/infinispan/functional/Listeners.ReadWriteListeners.html[`ReadWriteListeners`]\n interface which is accessible via\n-link:{javadocroot}/org/infinispan/commons/api/functional/FunctionalMap.ReadWriteMap.html#listeners--[`ReadWriteMap.listeners()`]\n+link:{javadocroot}/org/infinispan/functional/FunctionalMap.ReadWriteMap.html#listeners--[`ReadWriteMap.listeners()`]\n method.\n \n If interested in only one of the event types, the simplest way to add a\n listener is to pass a function to either\n-link:{javadocroot}/org/infinispan/commons/api/functional/Listeners.ReadWriteListeners.ReadWriteListener.html#onCreate-org.infinispan.commons.api.functional.EntryView.ReadEntryView-[`onCreate`]\n+link:{javadocroot}/org/infinispan/functional/Listeners.ReadWriteListeners.ReadWriteListener.html#onCreate-org.infinispan.commons.api.functional.EntryView.ReadEntryView-[`onCreate`]", "originalCommit": "d431d0712dfabf49aa1555f2c187a56fc719e0a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4OTI4Nw==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401689287", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            link:{javadocroot}/org/infinispan/functional/Listeners.ReadWriteListeners.ReadWriteListener.html#onModify-org.infinispan.commons.api.functional.EntryView.ReadEntryView-org.infinispan.commons.api.functional.EntryView.ReadEntryView-[`onModify`]\n          \n          \n            \n            link:{javadocroot}/org/infinispan/functional/Listeners.ReadWriteListeners.ReadWriteListener.html#onModify(java.util.function.BiConsumer)[`onModify`]", "author": "pruivo", "createdAt": "2020-04-01T15:07:50Z", "path": "documentation/src/main/asciidoc/topics/functional_api.adoc", "diffHunk": "@@ -417,18 +408,18 @@ differentiation between create, modified and removed can be fully\n guaranteed.\n \n Adding a read-write listener is done via the\n-link:{javadocroot}/org/infinispan/commons/api/functional/Listeners.ReadWriteListeners.html[`ReadWriteListeners`]\n+link:{javadocroot}/org/infinispan/functional/Listeners.ReadWriteListeners.html[`ReadWriteListeners`]\n interface which is accessible via\n-link:{javadocroot}/org/infinispan/commons/api/functional/FunctionalMap.ReadWriteMap.html#listeners--[`ReadWriteMap.listeners()`]\n+link:{javadocroot}/org/infinispan/functional/FunctionalMap.ReadWriteMap.html#listeners--[`ReadWriteMap.listeners()`]\n method.\n \n If interested in only one of the event types, the simplest way to add a\n listener is to pass a function to either\n-link:{javadocroot}/org/infinispan/commons/api/functional/Listeners.ReadWriteListeners.ReadWriteListener.html#onCreate-org.infinispan.commons.api.functional.EntryView.ReadEntryView-[`onCreate`]\n+link:{javadocroot}/org/infinispan/functional/Listeners.ReadWriteListeners.ReadWriteListener.html#onCreate-org.infinispan.commons.api.functional.EntryView.ReadEntryView-[`onCreate`]\n ,\n-link:{javadocroot}/org/infinispan/commons/api/functional/Listeners.ReadWriteListeners.ReadWriteListener.html#onModify-org.infinispan.commons.api.functional.EntryView.ReadEntryView-org.infinispan.commons.api.functional.EntryView.ReadEntryView-[`onModify`]\n+link:{javadocroot}/org/infinispan/functional/Listeners.ReadWriteListeners.ReadWriteListener.html#onModify-org.infinispan.commons.api.functional.EntryView.ReadEntryView-org.infinispan.commons.api.functional.EntryView.ReadEntryView-[`onModify`]", "originalCommit": "d431d0712dfabf49aa1555f2c187a56fc719e0a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4OTYxNg==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401689616", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            link:{javadocroot}/org/infinispan/functional/Listeners.ReadWriteListeners.ReadWriteListener.html#onRemove-org.infinispan.commons.api.functional.EntryView.ReadEntryView-[`onRemove`]\n          \n          \n            \n            link:{javadocroot}/org/infinispan/functional/Listeners.ReadWriteListeners.ReadWriteListener.html#onRemove(java.util.function.Consumer)[`onRemove`]", "author": "pruivo", "createdAt": "2020-04-01T15:08:15Z", "path": "documentation/src/main/asciidoc/topics/functional_api.adoc", "diffHunk": "@@ -417,18 +408,18 @@ differentiation between create, modified and removed can be fully\n guaranteed.\n \n Adding a read-write listener is done via the\n-link:{javadocroot}/org/infinispan/commons/api/functional/Listeners.ReadWriteListeners.html[`ReadWriteListeners`]\n+link:{javadocroot}/org/infinispan/functional/Listeners.ReadWriteListeners.html[`ReadWriteListeners`]\n interface which is accessible via\n-link:{javadocroot}/org/infinispan/commons/api/functional/FunctionalMap.ReadWriteMap.html#listeners--[`ReadWriteMap.listeners()`]\n+link:{javadocroot}/org/infinispan/functional/FunctionalMap.ReadWriteMap.html#listeners--[`ReadWriteMap.listeners()`]\n method.\n \n If interested in only one of the event types, the simplest way to add a\n listener is to pass a function to either\n-link:{javadocroot}/org/infinispan/commons/api/functional/Listeners.ReadWriteListeners.ReadWriteListener.html#onCreate-org.infinispan.commons.api.functional.EntryView.ReadEntryView-[`onCreate`]\n+link:{javadocroot}/org/infinispan/functional/Listeners.ReadWriteListeners.ReadWriteListener.html#onCreate-org.infinispan.commons.api.functional.EntryView.ReadEntryView-[`onCreate`]\n ,\n-link:{javadocroot}/org/infinispan/commons/api/functional/Listeners.ReadWriteListeners.ReadWriteListener.html#onModify-org.infinispan.commons.api.functional.EntryView.ReadEntryView-org.infinispan.commons.api.functional.EntryView.ReadEntryView-[`onModify`]\n+link:{javadocroot}/org/infinispan/functional/Listeners.ReadWriteListeners.ReadWriteListener.html#onModify-org.infinispan.commons.api.functional.EntryView.ReadEntryView-org.infinispan.commons.api.functional.EntryView.ReadEntryView-[`onModify`]\n or\n-link:{javadocroot}/org/infinispan/commons/api/functional/Listeners.ReadWriteListeners.ReadWriteListener.html#onRemove-org.infinispan.commons.api.functional.EntryView.ReadEntryView-[`onRemove`]\n+link:{javadocroot}/org/infinispan/functional/Listeners.ReadWriteListeners.ReadWriteListener.html#onRemove-org.infinispan.commons.api.functional.EntryView.ReadEntryView-[`onRemove`]", "originalCommit": "d431d0712dfabf49aa1555f2c187a56fc719e0a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4OTg3Nw==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401689877", "bodyText": "ps. examples need to be updated", "author": "pruivo", "createdAt": "2020-04-01T15:08:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4OTYxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5MDQzMA==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401690430", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            link:{javadocroot}/org/infinispan/functional/Listeners.ReadWriteListeners.html#add-org.infinispan.commons.api.functional.Listeners.ReadWriteListeners.ReadWriteListener-[`ReadWriteListeners.add()`]\n          \n          \n            \n            link:{javadocroot}/org/infinispan/functional/Listeners.ReadWriteListeners.html#add(org.infinispan.functional.Listeners.ReadWriteListeners.ReadWriteListener)[`ReadWriteListeners.add()`]", "author": "pruivo", "createdAt": "2020-04-01T15:09:17Z", "path": "documentation/src/main/asciidoc/topics/functional_api.adoc", "diffHunk": "@@ -439,9 +430,9 @@ include::code_examples/ReadWriteMapAutoCloseable.java[]\n \n If listening for two or more event types, it's better to pass in an\n implementation of\n-link:{javadocroot}/org/infinispan/commons/api/functional/Listeners.WriteListeners.WriteListener.html[`ReadWriteListener`]\n+link:{javadocroot}/org/infinispan/functional/Listeners.WriteListeners.WriteListener.html[`ReadWriteListener`]\n interface via the\n-link:{javadocroot}/org/infinispan/commons/api/functional/Listeners.ReadWriteListeners.html#add-org.infinispan.commons.api.functional.Listeners.ReadWriteListeners.ReadWriteListener-[`ReadWriteListeners.add()`]\n+link:{javadocroot}/org/infinispan/functional/Listeners.ReadWriteListeners.html#add-org.infinispan.commons.api.functional.Listeners.ReadWriteListeners.ReadWriteListener-[`ReadWriteListeners.add()`]", "originalCommit": "d431d0712dfabf49aa1555f2c187a56fc719e0a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cbcbc72cb4d67ff532ad59a70d41d0cb094a8fe8", "url": "https://github.com/infinispan/infinispan/commit/cbcbc72cb4d67ff532ad59a70d41d0cb094a8fe8", "message": "ISPN-11579 pruivo fixes functional_api.adoc", "committedDate": "2020-04-01T15:18:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5NTQ4Ng==", "url": "https://github.com/infinispan/infinispan/pull/8140#discussion_r401695486", "bodyText": "links need to be updated in this subsection.\nAlso, can you double-check the text? We no longer return a Future but a CompletableFuture.", "author": "pruivo", "createdAt": "2020-04-01T15:16:05Z", "path": "documentation/src/main/asciidoc/topics/cache_api.adoc", "diffHunk": "@@ -164,7 +164,7 @@ include::code_examples/ListenerMyNonBlocking.java[]\n ----\n \n ==== Asynchronous thread pool\n-To tune the thread pool used to dispatch such asynchronous notifications, use the link:http://docs.jboss.org/infinispan/{infinispanversion}/configdocs/infinispan-config-{infinispanversion}.html[`<listener-executor />`] XML element in your configuration file.\n+To tune the thread pool used to dispatch such asynchronous notifications, use the link:{configdocroot}/infinispan-config-{infinispanversion}.html[`<listener-executor />`] XML element in your configuration file.\n \n [[cache_asynchronous_api]]\n ==  Asynchronous API", "originalCommit": "592ea0b13feaca6d68eb1957ae99f4bf8e92b405", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c3dabc72e76df1e3b62a6878e731d9ba3435ad80", "url": "https://github.com/infinispan/infinispan/commit/c3dabc72e76df1e3b62a6878e731d9ba3435ad80", "message": "ISPN-11579 pruivo fixes functional_api.adoc", "committedDate": "2020-04-01T16:00:25Z", "type": "forcePushed"}, {"oid": "67108a565e3cf56bc39d48a9d143630b4ae4a685", "url": "https://github.com/infinispan/infinispan/commit/67108a565e3cf56bc39d48a9d143630b4ae4a685", "message": "ISPN-11579 pruivo fixes functional_api.adoc", "committedDate": "2020-04-01T16:43:14Z", "type": "commit"}, {"oid": "67108a565e3cf56bc39d48a9d143630b4ae4a685", "url": "https://github.com/infinispan/infinispan/commit/67108a565e3cf56bc39d48a9d143630b4ae4a685", "message": "ISPN-11579 pruivo fixes functional_api.adoc", "committedDate": "2020-04-01T16:43:14Z", "type": "forcePushed"}]}