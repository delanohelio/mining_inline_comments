{"pr_number": 8266, "pr_title": "ISPN-11744 Fix ManagedConnectionOperations", "pr_createdAt": "2020-04-30T06:40:29Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8266", "timeline": [{"oid": "2cd53919290e360fd701e90c5ff24087718a53dc", "url": "https://github.com/infinispan/infinispan/commit/2cd53919290e360fd701e90c5ff24087718a53dc", "message": "ISPN-11744 Fix ManagedConnectionOperations\n\n* Remove SocketProxy\n* Convert Database ClassRule to a listener for the InfinispanServer ClassRule\n* Start all databases upfront before the Infinispan cluster\n* Protect against duplicate datasource names/jndinames", "committedDate": "2020-04-30T06:40:53Z", "type": "forcePushed"}, {"oid": "85cbab6a64c1d8ef47fa2a5b666b8df73b9a2ca5", "url": "https://github.com/infinispan/infinispan/commit/85cbab6a64c1d8ef47fa2a5b666b8df73b9a2ca5", "message": "ISPN-11744 Fix ManagedConnectionOperations\n\n* Remove SocketProxy\n* Convert Database ClassRule to a listener for the InfinispanServer ClassRule\n* Start all databases upfront before the Infinispan cluster\n* Protect against duplicate datasource names/jndinames", "committedDate": "2020-04-30T12:25:26Z", "type": "forcePushed"}, {"oid": "e2f3abc28960f9e7647e26afc2df787dbebcddca", "url": "https://github.com/infinispan/infinispan/commit/e2f3abc28960f9e7647e26afc2df787dbebcddca", "message": "ISPN-11744 Fix ManagedConnectionOperations\n\n* Remove SocketProxy\n* Convert Database ClassRule to a listener for the InfinispanServer ClassRule\n* Start all databases upfront before the Infinispan cluster\n* Protect against duplicate datasource names/jndinames", "committedDate": "2020-04-30T16:41:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIwODAwOQ==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r418208009", "bodyText": "Nit: add this parameter on a new line", "author": "alanfx", "createdAt": "2020-04-30T18:30:08Z", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/InfinispanServerTestConfiguration.java", "diffHunk": "@@ -18,10 +20,11 @@\n    private final JavaArchive[] archives;\n    private final boolean jmx;\n    private final boolean parallelStartup;\n+   private final List<InfinispanServerListener> listeners;\n \n    public InfinispanServerTestConfiguration(String configurationFile, int numServers, ServerRunMode runMode,\n                                             Properties properties, String[] mavenArtifacts, JavaArchive[] archives,\n-                                            boolean jmx, boolean parallelStartup) {\n+                                            boolean jmx, boolean parallelStartup, List<InfinispanServerListener> listeners) {", "originalCommit": "e2f3abc28960f9e7647e26afc2df787dbebcddca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIwODI3Mw==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r418208273", "bodyText": "Nit: Extra blank line", "author": "alanfx", "createdAt": "2020-04-30T18:30:41Z", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/DatabaseServerListener.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.io.InputStream;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.infinispan.server.test.core.InfinispanServerDriver;\n+import org.infinispan.server.test.core.InfinispanServerListener;\n+import org.infinispan.server.test.core.persistence.Database;\n+import org.jboss.logging.Logger;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 10.0\n+ **/\n+public class DatabaseServerListener implements InfinispanServerListener {\n+   private static final Logger log = Logger.getLogger(DatabaseServerListener.class);\n+   public static final String DATABASES = \"org.infinispan.test.server.jdbc.databases\";\n+   private final String[] databaseTypes;\n+   public Map<String, Database> databases;\n+\n+   public DatabaseServerListener(String... databaseTypes) {\n+      String property = System.getProperty(DATABASES);\n+      if (property != null) {\n+         this.databaseTypes = property.split(\",\");\n+         log.infof(\"Overriding databases: %s\", this.databaseTypes);\n+      } else {\n+         this.databaseTypes = databaseTypes;\n+      }\n+", "originalCommit": "e2f3abc28960f9e7647e26afc2df787dbebcddca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIwODQzMw==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r418208433", "bodyText": "The formatting looks weird in this block?", "author": "alanfx", "createdAt": "2020-04-30T18:30:58Z", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/DatabaseServerListener.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.io.InputStream;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.infinispan.server.test.core.InfinispanServerDriver;\n+import org.infinispan.server.test.core.InfinispanServerListener;\n+import org.infinispan.server.test.core.persistence.Database;\n+import org.jboss.logging.Logger;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 10.0\n+ **/\n+public class DatabaseServerListener implements InfinispanServerListener {\n+   private static final Logger log = Logger.getLogger(DatabaseServerListener.class);\n+   public static final String DATABASES = \"org.infinispan.test.server.jdbc.databases\";\n+   private final String[] databaseTypes;\n+   public Map<String, Database> databases;\n+\n+   public DatabaseServerListener(String... databaseTypes) {\n+      String property = System.getProperty(DATABASES);\n+      if (property != null) {\n+         this.databaseTypes = property.split(\",\");\n+         log.infof(\"Overriding databases: %s\", this.databaseTypes);\n+      } else {\n+         this.databaseTypes = databaseTypes;\n+      }\n+\n+   }\n+\n+   @Override\n+   public void before(InfinispanServerDriver driver) {\n+      databases = new LinkedHashMap<>(databaseTypes.length);\n+      for (int i = 0; i < databaseTypes.length; i++) {\n+         Database database  = initDatabase(databaseTypes[i]);\n+         log.infof(\"Starting database: %s\", database.getType());\n+         database.start();\n+         log.infof(\"Started database: %s\", database.getType());\n+         databases.put(databaseTypes[i], database);\n+        driver.getConfiguration().properties().put(\"org.infinispan.server.test.\"+ database.getType()+\".jdbcUrl\", database.jdbcUrl());", "originalCommit": "e2f3abc28960f9e7647e26afc2df787dbebcddca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIwODUyMA==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r418208520", "bodyText": "Nit: Extra blank line", "author": "alanfx", "createdAt": "2020-04-30T18:31:08Z", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/DatabaseServerListener.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.io.InputStream;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.infinispan.server.test.core.InfinispanServerDriver;\n+import org.infinispan.server.test.core.InfinispanServerListener;\n+import org.infinispan.server.test.core.persistence.Database;\n+import org.jboss.logging.Logger;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 10.0\n+ **/\n+public class DatabaseServerListener implements InfinispanServerListener {\n+   private static final Logger log = Logger.getLogger(DatabaseServerListener.class);\n+   public static final String DATABASES = \"org.infinispan.test.server.jdbc.databases\";\n+   private final String[] databaseTypes;\n+   public Map<String, Database> databases;\n+\n+   public DatabaseServerListener(String... databaseTypes) {\n+      String property = System.getProperty(DATABASES);\n+      if (property != null) {\n+         this.databaseTypes = property.split(\",\");\n+         log.infof(\"Overriding databases: %s\", this.databaseTypes);\n+      } else {\n+         this.databaseTypes = databaseTypes;\n+      }\n+\n+   }\n+\n+   @Override\n+   public void before(InfinispanServerDriver driver) {\n+      databases = new LinkedHashMap<>(databaseTypes.length);\n+      for (int i = 0; i < databaseTypes.length; i++) {\n+         Database database  = initDatabase(databaseTypes[i]);\n+         log.infof(\"Starting database: %s\", database.getType());\n+         database.start();\n+         log.infof(\"Started database: %s\", database.getType());\n+         databases.put(databaseTypes[i], database);\n+        driver.getConfiguration().properties().put(\"org.infinispan.server.test.\"+ database.getType()+\".jdbcUrl\", database.jdbcUrl());\n+      }\n+   }\n+\n+   @Override\n+   public void after(InfinispanServerDriver driver) {\n+      log.info(\"Stopping databases\");\n+      databases.values().forEach(Database::stop);\n+      log.info(\"Stopped databases\");\n+", "originalCommit": "e2f3abc28960f9e7647e26afc2df787dbebcddca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "abc6687d30dacd4b0a2fe379e09ff30347afd70d", "url": "https://github.com/infinispan/infinispan/commit/abc6687d30dacd4b0a2fe379e09ff30347afd70d", "message": "ISPN-11744 Fix ManagedConnectionOperations\n\n* Remove SocketProxy\n* Convert Database ClassRule to a listener for the InfinispanServer ClassRule\n* Start all databases upfront before the Infinispan cluster\n* Protect against duplicate datasource names/jndinames", "committedDate": "2020-05-05T13:24:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3MDM1Ng==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r420270356", "bodyText": "Looks like org.infinispan.server.test.database.type.* is no longer being used since you can pass these properties through org.infinispan.test.server.database.properties.path\nLGTM despite that", "author": "gustavolira", "createdAt": "2020-05-05T17:08:57Z", "path": "server/testdriver/README.md", "diffHunk": "@@ -113,13 +113,12 @@ The following is a list of properties which affect the build:\n * `org.infinispan.test.server.embedded.timeoutSeconds` the amount of time in seconds to wait for a server start/stop operation when using the `EMBEDDED` driver.\n * `org.infinispan.test.server.driver`  the driver to use, `EMBEDDED` or `CONTAINER`. Defaults to the `EMBEDDED` driver.\n * `org.infinispan.test.server.extension.libs` locates artifact defined by G:A:V, you can pass a list of libraries (comma separeted) to be copied to the server. Only needed for container mode.\n-* `org.infinispan.test.server.jdbc.databases` database name to be used during persistence tests.\n-* `org.infinispan.test.server.jdbc.database.url` JDBC URL. If it's a external database\n-* `org.infinispan.test.server.jdbc.database.username` database username. If it's a external database\n-* `org.infinispan.test.server.jdbc.database.password` database password. If it's a external database\n-* `org.infinispan.test.server.jdbc.database.driverClass` database jdbc driver name. If it's a external database\n-* `org.infinispan.test.server.jdbc.image.tag` Docker image version to be used during persistence tests.\n-\n+* `org.infinispan.test.server.database.types` comma-separated list of database types to be used during persistence tests.\n+* `org.infinispan.test.server.database.properties.path` a path to a directory containing property files with connection details for each database to be tested.\n+* `org.infinispan.server.test.database.type.username` username to use for a specific database type ", "originalCommit": "abc6687d30dacd4b0a2fe379e09ff30347afd70d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwMzY0Mw==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r420803643", "bodyText": "I'm using them in the type.properties files. They are not essential, but demonstrate how to add extra configurability", "author": "tristantarrant", "createdAt": "2020-05-06T13:47:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3MDM1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyMjE2MA==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r420822160", "bodyText": "ah... I totally miss that. can you put the word type between <>  to make it clear?", "author": "pruivo", "createdAt": "2020-05-06T14:10:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3MDM1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4MDAyMA==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r420780020", "bodyText": "Similar to JDBC [1] you could log the exception as CONFIG logger.\n[1] https://github.com/infinispan/infinispan/blob/master/persistence/jdbc/src/main/java/org/infinispan/persistence/jdbc/logging/Log.java#L30", "author": "pruivo", "createdAt": "2020-05-06T13:14:54Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/DataSourcesConfigurationBuilder.java", "diffHunk": "@@ -1,28 +1,39 @@\n package org.infinispan.server.configuration;\n \n+import java.util.HashSet;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import java.util.stream.Collectors;\n \n import org.infinispan.commons.configuration.Builder;\n import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.server.Server;\n \n public class DataSourcesConfigurationBuilder implements Builder<DataSourcesConfiguration> {\n \n    private final AttributeSet attributes;\n    private final ServerConfigurationBuilder server;\n \n    private Map<String, DataSourceConfigurationBuilder> dataSources = new LinkedHashMap<>(2);\n+   private Set<String> jndiNames = new HashSet<>(2);\n \n    DataSourcesConfigurationBuilder(ServerConfigurationBuilder server) {\n       this.server = server;\n       attributes = DataSourcesConfiguration.attributeDefinitionSet();\n    }\n \n    DataSourceConfigurationBuilder dataSource(String name, String jndiName) {\n+      if (dataSources.containsKey(name)) {\n+         throw Server.log.duplicateDataSource(name);", "originalCommit": "abc6687d30dacd4b0a2fe379e09ff30347afd70d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4MDYzOA==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r420780638", "bodyText": "or not... it seems to be using the SERVER category for this in other places...", "author": "pruivo", "createdAt": "2020-05-06T13:15:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4MDAyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg2MzQ0NA==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r420863444", "bodyText": "This is a server configuration exception. It's fine as it is", "author": "tristantarrant", "createdAt": "2020-05-06T15:02:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4MDAyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4MDI1OQ==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r420780259", "bodyText": "nitpick: both jndiNames and  dataSources can be final.", "author": "pruivo", "createdAt": "2020-05-06T13:15:14Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/DataSourcesConfigurationBuilder.java", "diffHunk": "@@ -1,28 +1,39 @@\n package org.infinispan.server.configuration;\n \n+import java.util.HashSet;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import java.util.stream.Collectors;\n \n import org.infinispan.commons.configuration.Builder;\n import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.server.Server;\n \n public class DataSourcesConfigurationBuilder implements Builder<DataSourcesConfiguration> {\n \n    private final AttributeSet attributes;\n    private final ServerConfigurationBuilder server;\n \n    private Map<String, DataSourceConfigurationBuilder> dataSources = new LinkedHashMap<>(2);\n+   private Set<String> jndiNames = new HashSet<>(2);", "originalCommit": "abc6687d30dacd4b0a2fe379e09ff30347afd70d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4NjM3Mw==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r420786373", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  for (int i = 0; i < databaseTypes.length; i++) {\n          \n          \n            \n                  for (String databaseType : databaseTypes) {", "author": "pruivo", "createdAt": "2020-05-06T13:24:02Z", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/DatabaseServerListener.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.infinispan.server.test.core.InfinispanServerDriver;\n+import org.infinispan.server.test.core.InfinispanServerListener;\n+import org.infinispan.server.test.core.persistence.Database;\n+import org.jboss.logging.Logger;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 10.0\n+ **/\n+public class DatabaseServerListener implements InfinispanServerListener {\n+   private static final Logger log = Logger.getLogger(DatabaseServerListener.class);\n+   public static final String DATABASES = \"org.infinispan.test.server.database.types\";\n+   public static final String DATABASE_PROPERTIES_PATH = \"org.infinispan.test.server.database.properties.path\";\n+   private final String[] databaseTypes;\n+   public Map<String, Database> databases;\n+\n+   public DatabaseServerListener(String... databaseTypes) {\n+      String property = System.getProperty(DATABASES);\n+      if (property != null) {\n+         this.databaseTypes = property.split(\",\");\n+         log.infof(\"Overriding databases: %s\", this.databaseTypes);\n+      } else {\n+         this.databaseTypes = databaseTypes;\n+      }\n+   }\n+\n+   @Override\n+   public void before(InfinispanServerDriver driver) {\n+      databases = new LinkedHashMap<>(databaseTypes.length);\n+      for (int i = 0; i < databaseTypes.length; i++) {", "originalCommit": "abc6687d30dacd4b0a2fe379e09ff30347afd70d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4Njc2NQ==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r420786765", "bodyText": "shouldn't check for duplicates before starting?", "author": "pruivo", "createdAt": "2020-05-06T13:24:32Z", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/DatabaseServerListener.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.infinispan.server.test.core.InfinispanServerDriver;\n+import org.infinispan.server.test.core.InfinispanServerListener;\n+import org.infinispan.server.test.core.persistence.Database;\n+import org.jboss.logging.Logger;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 10.0\n+ **/\n+public class DatabaseServerListener implements InfinispanServerListener {\n+   private static final Logger log = Logger.getLogger(DatabaseServerListener.class);\n+   public static final String DATABASES = \"org.infinispan.test.server.database.types\";\n+   public static final String DATABASE_PROPERTIES_PATH = \"org.infinispan.test.server.database.properties.path\";\n+   private final String[] databaseTypes;\n+   public Map<String, Database> databases;\n+\n+   public DatabaseServerListener(String... databaseTypes) {\n+      String property = System.getProperty(DATABASES);\n+      if (property != null) {\n+         this.databaseTypes = property.split(\",\");\n+         log.infof(\"Overriding databases: %s\", this.databaseTypes);\n+      } else {\n+         this.databaseTypes = databaseTypes;\n+      }\n+   }\n+\n+   @Override\n+   public void before(InfinispanServerDriver driver) {\n+      databases = new LinkedHashMap<>(databaseTypes.length);\n+      for (int i = 0; i < databaseTypes.length; i++) {\n+         Database database = initDatabase(databaseTypes[i]);\n+         log.infof(\"Starting database: %s\", database.getType());\n+         database.start();\n+         log.infof(\"Started database: %s\", database.getType());\n+         databases.put(databaseTypes[i], database);", "originalCommit": "abc6687d30dacd4b0a2fe379e09ff30347afd70d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4ODA1MQ==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r420788051", "bodyText": "will /database/%s.properties  work on windows?", "author": "pruivo", "createdAt": "2020-05-06T13:26:25Z", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/DatabaseServerListener.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.infinispan.server.test.junit4;\n+\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.infinispan.server.test.core.InfinispanServerDriver;\n+import org.infinispan.server.test.core.InfinispanServerListener;\n+import org.infinispan.server.test.core.persistence.Database;\n+import org.jboss.logging.Logger;\n+\n+/**\n+ * @author Gustavo Lira &lt;glira@redhat.com&gt;\n+ * @since 10.0\n+ **/\n+public class DatabaseServerListener implements InfinispanServerListener {\n+   private static final Logger log = Logger.getLogger(DatabaseServerListener.class);\n+   public static final String DATABASES = \"org.infinispan.test.server.database.types\";\n+   public static final String DATABASE_PROPERTIES_PATH = \"org.infinispan.test.server.database.properties.path\";\n+   private final String[] databaseTypes;\n+   public Map<String, Database> databases;\n+\n+   public DatabaseServerListener(String... databaseTypes) {\n+      String property = System.getProperty(DATABASES);\n+      if (property != null) {\n+         this.databaseTypes = property.split(\",\");\n+         log.infof(\"Overriding databases: %s\", this.databaseTypes);\n+      } else {\n+         this.databaseTypes = databaseTypes;\n+      }\n+   }\n+\n+   @Override\n+   public void before(InfinispanServerDriver driver) {\n+      databases = new LinkedHashMap<>(databaseTypes.length);\n+      for (int i = 0; i < databaseTypes.length; i++) {\n+         Database database = initDatabase(databaseTypes[i]);\n+         log.infof(\"Starting database: %s\", database.getType());\n+         database.start();\n+         log.infof(\"Started database: %s\", database.getType());\n+         databases.put(databaseTypes[i], database);\n+         driver.getConfiguration().properties().put(\"org.infinispan.server.test.\" + database.getType() + \".jdbcUrl\", database.jdbcUrl());\n+      }\n+   }\n+\n+   @Override\n+   public void after(InfinispanServerDriver driver) {\n+      log.info(\"Stopping databases\");\n+      databases.values().forEach(Database::stop);\n+      log.info(\"Stopped databases\");\n+   }\n+\n+   public Database getDatabase(String databaseType) {\n+      return databases.get(databaseType);\n+   }\n+\n+   public String[] getDatabaseTypes() {\n+      return databaseTypes;\n+   }\n+\n+   private Database initDatabase(String databaseType) {\n+      String property = System.getProperty(DATABASE_PROPERTIES_PATH);\n+      try (InputStream inputStream = property != null ? Files.newInputStream(Paths.get(property).resolve(databaseType + \".properties\")) : getClass().getResourceAsStream(String.format(\"/database/%s.properties\", databaseType))) {", "originalCommit": "abc6687d30dacd4b0a2fe379e09ff30347afd70d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5OTk3NQ==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r420799975", "bodyText": "Yes, because it's reading it from the classpath here.", "author": "tristantarrant", "createdAt": "2020-05-06T13:42:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4ODA1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4OTMxMQ==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r420789311", "bodyText": "nitpick: final", "author": "pruivo", "createdAt": "2020-05-06T13:28:01Z", "path": "server/testdriver/junit4/src/main/java/org/infinispan/server/test/junit4/InfinispanServerRuleBuilder.java", "diffHunk": "@@ -22,6 +25,7 @@\n    private JavaArchive[] archives;\n    private boolean jmx;\n    private boolean parallelStartup = true;\n+   private List<InfinispanServerListener> listeners = new ArrayList<>();", "originalCommit": "abc6687d30dacd4b0a2fe379e09ff30347afd70d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5MzI0Ng==", "url": "https://github.com/infinispan/infinispan/pull/8266#discussion_r420793246", "bodyText": "remove comment?", "author": "pruivo", "createdAt": "2020-05-06T13:33:29Z", "path": "server/tests/src/test/resources/configuration/datasources/default.xml", "diffHunk": "@@ -0,0 +1,29 @@\n+<data-sources xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+           xsi:schemaLocation=\"urn:infinispan:server:11.0 https://infinispan.org/schemas/infinispan-server-11.0.xsd\"\n+           xmlns=\"urn:infinispan:server:11.0\">\n+   <data-source name=\"h2\" jndi-name=\"jdbc/h2\" statistics=\"true\">\n+      <connection-factory driver=\"org.h2.Driver\"\n+                          username=\"${org.infinispan.server.test.database.h2.username:test}\"\n+                          password=\"${org.infinispan.server.test.database.h2.password:test}\"\n+                          url=\"${org.infinispan.server.test.h2.jdbcUrl}\"\n+                          new-connection-sql=\"SELECT 1\" />\n+      <connection-pool max-size=\"10\" background-validation=\"1000\" idle-removal=\"1\" initial-size=\"1\" leak-detection=\"10000\"/>\n+   </data-source>\n+   <data-source name=\"mysql\" jndi-name=\"jdbc/mysql\" statistics=\"true\">\n+      <!-- The URL will be filled in by -->", "originalCommit": "abc6687d30dacd4b0a2fe379e09ff30347afd70d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1a654135217cc15a85f5b9b5a84c6fcffcfd7f02", "url": "https://github.com/infinispan/infinispan/commit/1a654135217cc15a85f5b9b5a84c6fcffcfd7f02", "message": "ISPN-11744 Fix ManagedConnectionOperations\n\n* Remove SocketProxy\n* Convert Database ClassRule to a listener for the InfinispanServer ClassRule\n* Start all databases upfront before the Infinispan cluster\n* Protect against duplicate datasource names/jndinames", "committedDate": "2020-05-06T13:51:19Z", "type": "forcePushed"}, {"oid": "606ae20b64e68072dd9b30cf6e8a7745f289f841", "url": "https://github.com/infinispan/infinispan/commit/606ae20b64e68072dd9b30cf6e8a7745f289f841", "message": "ISPN-11744 Fix ManagedConnectionOperations\n\n* Remove SocketProxy\n* Convert Database ClassRule to a listener for the InfinispanServer ClassRule\n* Start all databases upfront before the Infinispan cluster\n* Protect against duplicate datasource names/jndinames", "committedDate": "2020-05-06T15:01:27Z", "type": "commit"}, {"oid": "606ae20b64e68072dd9b30cf6e8a7745f289f841", "url": "https://github.com/infinispan/infinispan/commit/606ae20b64e68072dd9b30cf6e8a7745f289f841", "message": "ISPN-11744 Fix ManagedConnectionOperations\n\n* Remove SocketProxy\n* Convert Database ClassRule to a listener for the InfinispanServer ClassRule\n* Start all databases upfront before the Infinispan cluster\n* Protect against duplicate datasource names/jndinames", "committedDate": "2020-05-06T15:01:27Z", "type": "forcePushed"}]}