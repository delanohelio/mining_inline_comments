{"pr_number": 8367, "pr_title": "ISPN-11869 updating docs for memory configuration", "pr_createdAt": "2020-05-21T17:18:47Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8367", "timeline": [{"oid": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39", "url": "https://github.com/infinispan/infinispan/commit/8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39", "message": "ISPN-11869 updating docs for memory configuration", "committedDate": "2020-05-22T08:37:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk0OTE0Nw==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r430949147", "bodyText": "The whole \"memory-object\" type is already deprecated, we should not mention the replacament here because it lacks scope: use the \"max-size\" attribute instead appear to refer to the memory-object itself", "author": "gustavonalle", "createdAt": "2020-05-27T08:35:08Z", "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -1401,17 +1403,19 @@\n     <xs:attribute name=\"size\" type=\"xs:long\" default=\"-1\">\n       <xs:annotation>\n         <xs:documentation>\n-          Defines the size of the data container as a long. Eviction occurs\n-          when the number of entries exceeds the size.\n+          Deprecated, use the \"max-size\" attribute instead. Defines the size", "originalCommit": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk4MjMyMQ==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r430982321", "bodyText": "thanks @gustavonalle I've reverted those extra \"deprecation\" comments I made.", "author": "oraNod", "createdAt": "2020-05-27T09:28:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk0OTE0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1MzA4Mw==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r430953083", "bodyText": "The whole \"memory-object\" type is already deprecated, so there isn't really a replacement on a per attribute basis", "author": "gustavonalle", "createdAt": "2020-05-27T08:41:33Z", "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -1401,17 +1403,19 @@\n     <xs:attribute name=\"size\" type=\"xs:long\" default=\"-1\">\n       <xs:annotation>\n         <xs:documentation>\n-          Defines the size of the data container as a long. Eviction occurs\n-          when the number of entries exceeds the size.\n+          Deprecated, use the \"max-size\" attribute instead. Defines the size\n+          of the data container as a long. Eviction occurs when the number of\n+          entries exceeds the size.\n         </xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n     <xs:attribute name=\"strategy\" type=\"tns:eviction-strategy\">\n       <xs:annotation>\n         <xs:documentation>\n-          Specifies a strategy for evicting cache entries. Eviction always\n-          takes place when you define the size of the data container. If you\n-          specify a value for size, then you should configure a strategy.\n+          Deprecated, use the \"when-full\" attribute instead. Specifies a\n+          strategy for evicting cache entries. Eviction always takes place when\n+          you define the size of the data container. If you specify a value for\n+          size, then you should configure a strategy.", "originalCommit": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1MzMyNQ==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r430953325", "bodyText": "Same as above, \"memory-binary\" is already deprecated as a whole", "author": "gustavonalle", "createdAt": "2020-05-27T08:41:59Z", "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -1421,15 +1425,16 @@\n     <xs:attribute name=\"size\" type=\"xs:long\" default=\"-1\">\n       <xs:annotation>\n         <xs:documentation>\n-          Defines the size of the data container as a long. Eviction occurs\n-          either when the number of entries or amount of memory exceeds the\n-          size.\n+          Deprecated, use the \"max-size\" attribute instead. Defines the size of\n+          the data container as a long. Eviction occurs either when the number\n+          of entries or amount of memory exceeds the size.", "originalCommit": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1MzQ2MQ==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r430953461", "bodyText": "Same as above", "author": "gustavonalle", "createdAt": "2020-05-27T08:42:11Z", "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -1421,15 +1425,16 @@\n     <xs:attribute name=\"size\" type=\"xs:long\" default=\"-1\">\n       <xs:annotation>\n         <xs:documentation>\n-          Defines the size of the data container as a long. Eviction occurs\n-          either when the number of entries or amount of memory exceeds the\n-          size.\n+          Deprecated, use the \"max-size\" attribute instead. Defines the size of\n+          the data container as a long. Eviction occurs either when the number\n+          of entries or amount of memory exceeds the size.\n         </xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n     <xs:attribute name=\"eviction\" type=\"tns:eviction-type\">\n       <xs:annotation>\n         <xs:documentation>\n+          Deprecated, use the \"max-size\" or \"max-count\" attribute instead.", "originalCommit": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1MzU5MQ==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r430953591", "bodyText": "Same as above", "author": "gustavonalle", "createdAt": "2020-05-27T08:42:24Z", "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -1438,9 +1443,10 @@\n     <xs:attribute name=\"strategy\" type=\"tns:eviction-strategy\">\n       <xs:annotation>\n         <xs:documentation>\n-          Specifies a strategy for evicting cache entries. Eviction always\n-          takes place when you define the size of the data container. If you\n-          specify a value for size, then you should configure a strategy.\n+          Deprecated, use the \"when-full\" attribute instead. Specifies a\n+          strategy for evicting cache entries. Eviction always takes place when\n+          you define the size of the data container. If you specify a value for\n+          size, then you should configure a strategy.", "originalCommit": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1Mzg0NQ==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r430953845", "bodyText": "The whole memory-off-heap is already deprecated", "author": "gustavonalle", "createdAt": "2020-05-27T08:42:47Z", "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -1450,15 +1456,16 @@\n     <xs:attribute name=\"size\" type=\"xs:long\" default=\"-1\">\n       <xs:annotation>\n         <xs:documentation>\n-          Defines the size of the data container as a long. Eviction occurs\n-          either when the number of entries or amount of memory exceeds the\n-          size.\n+          Deprecated, use the \"max-size\" attribute instead. Defines the size of\n+          the data container as a long. Eviction occurs either when the number\n+          of entries or amount of memory exceeds the size.", "originalCommit": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1MzkzNA==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r430953934", "bodyText": "idem", "author": "gustavonalle", "createdAt": "2020-05-27T08:42:56Z", "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -1450,15 +1456,16 @@\n     <xs:attribute name=\"size\" type=\"xs:long\" default=\"-1\">\n       <xs:annotation>\n         <xs:documentation>\n-          Defines the size of the data container as a long. Eviction occurs\n-          either when the number of entries or amount of memory exceeds the\n-          size.\n+          Deprecated, use the \"max-size\" attribute instead. Defines the size of\n+          the data container as a long. Eviction occurs either when the number\n+          of entries or amount of memory exceeds the size.\n       </xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n     <xs:attribute name=\"eviction\" type=\"tns:eviction-type\">\n       <xs:annotation>\n         <xs:documentation>\n+          Deprecated, use the \"max-size\" or \"max-count\" attribute instead.", "originalCommit": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1NDEwNw==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r430954107", "bodyText": "idem", "author": "gustavonalle", "createdAt": "2020-05-27T08:43:14Z", "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -1467,9 +1474,10 @@\n     <xs:attribute name=\"strategy\" type=\"tns:eviction-strategy\">\n       <xs:annotation>\n         <xs:documentation>\n-          Specifies a strategy for evicting cache entries. Eviction always\n-          takes place when you define the size of the data container. If you\n-          specify a value for size, then you should configure a strategy.\n+          Deprecated, use the \"when-full\" attribute instead. Specifies a\n+          strategy for evicting cache entries. Eviction always takes place when\n+          you define the size of the data container. If you specify a value for\n+          size, then you should configure a strategy.", "originalCommit": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1NzAwNw==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r430957007", "bodyText": ".storage(OFF_HEAP)", "author": "gustavonalle", "createdAt": "2020-05-27T08:48:06Z", "path": "documentation/src/main/asciidoc/topics/proc_configuring_memory_offheap.adoc", "diffHunk": "@@ -0,0 +1,45 @@\n+[id='configure_off_heap-{context}']\n+= Configuring {brandname} to Store Cache Entries Off Heap\n+{brandname} can use either JVM heap memory or off-heap native memory as the\n+data container for cache entries. By default {brandname} stores cache entries in JVM heap memory.\n+\n+.Procedure\n+\n+To store cache entries in off-heap memory, configure {brandname} in one of the\n+following ways:\n+\n+* Declaratively: Set the `storage=\"OFF_HEAP\"` attribute to the `memory` element.\n+* Programmatically: Call the `storageType(\"off-heap\")` method in the `MemoryConfigurationBuilder` class.", "originalCommit": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1NzUxNg==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r430957516", "bodyText": ".storage(OFF_HEAP)", "author": "gustavonalle", "createdAt": "2020-05-27T08:48:59Z", "path": "documentation/src/main/asciidoc/topics/proc_configuring_memory_offheap.adoc", "diffHunk": "@@ -0,0 +1,45 @@\n+[id='configure_off_heap-{context}']\n+= Configuring {brandname} to Store Cache Entries Off Heap\n+{brandname} can use either JVM heap memory or off-heap native memory as the\n+data container for cache entries. By default {brandname} stores cache entries in JVM heap memory.\n+\n+.Procedure\n+\n+To store cache entries in off-heap memory, configure {brandname} in one of the\n+following ways:\n+\n+* Declaratively: Set the `storage=\"OFF_HEAP\"` attribute to the `memory` element.\n+* Programmatically: Call the `storageType(\"off-heap\")` method in the `MemoryConfigurationBuilder` class.\n+\n+[NOTE]\n+====\n+{brandname} can use off-heap storage with eviction based on the total number of\n+entries or maximum amount of memory.\n+====\n+\n+.Declarative example\n+\n+[source,xml,options=\"nowrap\"]\n+----\n+<local-cache name=\"off_heap_binary\">\n+  <encoding media-type=\"application/x-protostream\"/>\n+  <memory storage=\"OFF_HEAP\" max-size=\"1.5GB\" when-full=\"REMOVE\"/>\n+</local-cache>\n+----\n+\n+.Programmatic example\n+\n+[source,java,options=\"nowrap\"]\n+----\n+ConfigurationBuilder cfg = new ConfigurationBuilder();\n+\n+cfg\n+  .memory()\n+    .storageType(\"off-heap\")", "originalCommit": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1NzczOQ==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r430957739", "bodyText": ".maxCount(500)", "author": "gustavonalle", "createdAt": "2020-05-27T08:49:20Z", "path": "documentation/src/main/asciidoc/topics/proc_configuring_memory_offheap.adoc", "diffHunk": "@@ -0,0 +1,45 @@\n+[id='configure_off_heap-{context}']\n+= Configuring {brandname} to Store Cache Entries Off Heap\n+{brandname} can use either JVM heap memory or off-heap native memory as the\n+data container for cache entries. By default {brandname} stores cache entries in JVM heap memory.\n+\n+.Procedure\n+\n+To store cache entries in off-heap memory, configure {brandname} in one of the\n+following ways:\n+\n+* Declaratively: Set the `storage=\"OFF_HEAP\"` attribute to the `memory` element.\n+* Programmatically: Call the `storageType(\"off-heap\")` method in the `MemoryConfigurationBuilder` class.\n+\n+[NOTE]\n+====\n+{brandname} can use off-heap storage with eviction based on the total number of\n+entries or maximum amount of memory.\n+====\n+\n+.Declarative example\n+\n+[source,xml,options=\"nowrap\"]\n+----\n+<local-cache name=\"off_heap_binary\">\n+  <encoding media-type=\"application/x-protostream\"/>\n+  <memory storage=\"OFF_HEAP\" max-size=\"1.5GB\" when-full=\"REMOVE\"/>\n+</local-cache>\n+----\n+\n+.Programmatic example\n+\n+[source,java,options=\"nowrap\"]\n+----\n+ConfigurationBuilder cfg = new ConfigurationBuilder();\n+\n+cfg\n+  .memory()\n+    .storageType(\"off-heap\")\n+    .maxCount(\"500\")", "originalCommit": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1ODQ4OQ==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r430958489", "bodyText": "maxCount(500)", "author": "gustavonalle", "createdAt": "2020-05-27T08:50:28Z", "path": "documentation/src/main/asciidoc/topics/proc_configuring_memory_size.adoc", "diffHunk": "@@ -0,0 +1,45 @@\n+[id='configure_eviction_total-{context}']\n+= Configuring the Total Number of Entries for {brandname} Caches\n+Limit the size of the data container for cache entries to a total number of\n+entries.\n+\n+.Procedure\n+\n+. Specify the total number of entries that caches can contain before\n+{brandname} performs eviction.\n++\n+* Declaratively: Set the `max-count` attribute.\n+* Programmatically: Call the `maxCount()` method.\n++\n+. Configure an eviction strategy to control how {brandname} removes entries.\n++\n+* Declaratively: Set the `when-full` attribute.\n+* Programmatically: Call the `whenFull()` method.\n+\n+\n+.Declarative example\n+\n+[source,xml,options=\"nowrap\"]\n+----\n+<local-cache>\n+  <memory max-count=\"500\" when-full=\"REMOVE\"/>\n+</local-cache>\n+----\n+\n+.Programmatic example\n+\n+[source,java,options=\"nowrap\"]\n+----\n+ConfigurationBuilder cfg = new ConfigurationBuilder();\n+\n+cfg\n+  .memory()\n+    .maxCount(\"500\")", "originalCommit": "8f00c728e5d6a1153a4ceb9a504f179e3bcc4a39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1aee59ceda90e2b181d1afeb5b97ee212e806a6b", "url": "https://github.com/infinispan/infinispan/commit/1aee59ceda90e2b181d1afeb5b97ee212e806a6b", "message": "gustavo review", "committedDate": "2020-05-27T09:25:56Z", "type": "forcePushed"}, {"oid": "d3ec420c464fb6d6ceac725ef5a14ddccb3bd61e", "url": "https://github.com/infinispan/infinispan/commit/d3ec420c464fb6d6ceac725ef5a14ddccb3bd61e", "message": "ISPN-11869 updating docs for memory configuration", "committedDate": "2020-05-27T09:29:19Z", "type": "forcePushed"}, {"oid": "b5d5abd13fdf72487f44b04a2176a1fc3ea3478d", "url": "https://github.com/infinispan/infinispan/commit/b5d5abd13fdf72487f44b04a2176a1fc3ea3478d", "message": "ISPN-11869 updating docs for memory configuration", "committedDate": "2020-05-27T12:53:56Z", "type": "forcePushed"}, {"oid": "04b71d2f7cddaeb4b6987754b04a2fdbf7d95659", "url": "https://github.com/infinispan/infinispan/commit/04b71d2f7cddaeb4b6987754b04a2fdbf7d95659", "message": "ISPN-11869 updating docs for memory configuration", "committedDate": "2020-06-02T11:29:02Z", "type": "forcePushed"}, {"oid": "4909e0343d3962818587dc7d7a3d639a8ca11224", "url": "https://github.com/infinispan/infinispan/commit/4909e0343d3962818587dc7d7a3d639a8ca11224", "message": "ISPN-11869 updating docs for memory configuration", "committedDate": "2020-06-02T11:29:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA1OTkxMQ==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r434059911", "bodyText": "I wouldn't say they should. The default of REMOVE is probably just fine for the vast majority of use cases.", "author": "wburns", "createdAt": "2020-06-02T17:46:33Z", "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -1401,17 +1403,16 @@\n     <xs:attribute name=\"size\" type=\"xs:long\" default=\"-1\">\n       <xs:annotation>\n         <xs:documentation>\n-          Defines the size of the data container as a long. Eviction occurs\n-          when the number of entries exceeds the size.\n+          Eviction occurs when the number of entries exceeds the size.\n         </xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n     <xs:attribute name=\"strategy\" type=\"tns:eviction-strategy\">\n       <xs:annotation>\n         <xs:documentation>\n-          Specifies a strategy for evicting cache entries. Eviction always\n-          takes place when you define the size of the data container. If you\n-          specify a value for size, then you should configure a strategy.\n+          Eviction always takes place when you define the size of the data\n+          container. If you specify a value for size, then you should configure", "originalCommit": "4909e0343d3962818587dc7d7a3d639a8ca11224", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2MTE3Ng==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r434061176", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * [*] Eviction lets {brandname} control the size of the data container.\n          \n          \n            \n            {brandname} performs eviction when you add entries to the cache.\n          \n          \n            \n            * [*] Eviction lets {brandname} control the size of the data container by evicting entries when the container becomes larger than a configured threshold.\n          \n      \n    \n    \n  \n\nWdyt?", "author": "wburns", "createdAt": "2020-06-02T17:48:35Z", "path": "documentation/src/main/asciidoc/topics/con_evict_vs_expire.adoc", "diffHunk": "@@ -5,8 +5,8 @@ they remove old, unused entries. Although eviction and expiration are similar,\n they have some important differences that you should take into account when\n planning your configuration.\n \n-* [*] Eviction prevents {brandname} from exceeding the maximum size of the data\n-container. {brandname} performs eviction when you add entries to the cache.\n+* [*] Eviction lets {brandname} control the size of the data container.\n+{brandname} performs eviction when you add entries to the cache.", "originalCommit": "4909e0343d3962818587dc7d7a3d639a8ca11224", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ2ODQ5Nw==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r434468497", "bodyText": "@wburns sounds good but I'd tweak it a little to say \"by removing entries\". it's kind of like we're using the word eviction to explain what eviction means.", "author": "oraNod", "createdAt": "2020-06-03T10:30:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2MTE3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2MjU3Mg==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r434062572", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                .whenFull(\"REMOVE\")\n          \n          \n            \n                .whenFull(EvictionStrategy.REMOVE)", "author": "wburns", "createdAt": "2020-06-02T17:51:00Z", "path": "documentation/src/main/asciidoc/topics/proc_configuring_memory_offheap.adoc", "diffHunk": "@@ -0,0 +1,45 @@\n+[id='configure_off_heap-{context}']\n+= Configuring {brandname} to Store Cache Entries Off Heap\n+{brandname} can use either JVM heap memory or off-heap native memory as the\n+data container for cache entries. By default {brandname} stores cache entries in JVM heap memory.\n+\n+.Procedure\n+\n+To store cache entries in off-heap memory, configure {brandname} in one of the\n+following ways:\n+\n+* Declaratively: Set the `storage=\"OFF_HEAP\"` attribute to the `memory` element.\n+* Programmatically: Call the `storage(OFF_HEAP)` method in the `MemoryConfigurationBuilder` class.\n+\n+[NOTE]\n+====\n+{brandname} can use off-heap storage with eviction based on the total number of\n+entries or maximum amount of memory.\n+====\n+\n+.Declarative example\n+\n+[source,xml,options=\"nowrap\"]\n+----\n+<local-cache name=\"off_heap_binary\">\n+  <encoding media-type=\"application/x-protostream\"/>\n+  <memory storage=\"OFF_HEAP\" max-size=\"1.5GB\" when-full=\"REMOVE\"/>\n+</local-cache>\n+----\n+\n+.Programmatic example\n+\n+[source,java,options=\"nowrap\"]\n+----\n+ConfigurationBuilder cfg = new ConfigurationBuilder();\n+\n+cfg\n+  .memory()\n+    .storage(OFF_HEAP)\n+    .maxCount(500)\n+    .whenFull(\"REMOVE\")", "originalCommit": "4909e0343d3962818587dc7d7a3d639a8ca11224", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2Mjg3Mw==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r434062873", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                .storage(OFF_HEAP)\n          \n          \n            \n                .storage(StorageType.OFF_HEAP)", "author": "wburns", "createdAt": "2020-06-02T17:51:30Z", "path": "documentation/src/main/asciidoc/topics/proc_configuring_memory_offheap.adoc", "diffHunk": "@@ -0,0 +1,45 @@\n+[id='configure_off_heap-{context}']\n+= Configuring {brandname} to Store Cache Entries Off Heap\n+{brandname} can use either JVM heap memory or off-heap native memory as the\n+data container for cache entries. By default {brandname} stores cache entries in JVM heap memory.\n+\n+.Procedure\n+\n+To store cache entries in off-heap memory, configure {brandname} in one of the\n+following ways:\n+\n+* Declaratively: Set the `storage=\"OFF_HEAP\"` attribute to the `memory` element.\n+* Programmatically: Call the `storage(OFF_HEAP)` method in the `MemoryConfigurationBuilder` class.\n+\n+[NOTE]\n+====\n+{brandname} can use off-heap storage with eviction based on the total number of\n+entries or maximum amount of memory.\n+====\n+\n+.Declarative example\n+\n+[source,xml,options=\"nowrap\"]\n+----\n+<local-cache name=\"off_heap_binary\">\n+  <encoding media-type=\"application/x-protostream\"/>\n+  <memory storage=\"OFF_HEAP\" max-size=\"1.5GB\" when-full=\"REMOVE\"/>\n+</local-cache>\n+----\n+\n+.Programmatic example\n+\n+[source,java,options=\"nowrap\"]\n+----\n+ConfigurationBuilder cfg = new ConfigurationBuilder();\n+\n+cfg\n+  .memory()\n+    .storage(OFF_HEAP)", "originalCommit": "4909e0343d3962818587dc7d7a3d639a8ca11224", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2MzE0OA==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r434063148", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                .whenFull(\"REMOVE\")\n          \n          \n            \n                .whenFull(EvictionStrategy.REMOVE)", "author": "wburns", "createdAt": "2020-06-02T17:52:02Z", "path": "documentation/src/main/asciidoc/topics/proc_configuring_memory_size.adoc", "diffHunk": "@@ -0,0 +1,45 @@\n+[id='configure_eviction_total-{context}']\n+= Configuring the Total Number of Entries for {brandname} Caches\n+Limit the size of the data container for cache entries to a total number of\n+entries.\n+\n+.Procedure\n+\n+. Specify the total number of entries that caches can contain before\n+{brandname} performs eviction.\n++\n+* Declaratively: Set the `max-count` attribute.\n+* Programmatically: Call the `maxCount()` method.\n++\n+. Configure an eviction strategy to control how {brandname} removes entries.\n++\n+* Declaratively: Set the `when-full` attribute.\n+* Programmatically: Call the `whenFull()` method.\n+\n+\n+.Declarative example\n+\n+[source,xml,options=\"nowrap\"]\n+----\n+<local-cache>\n+  <memory max-count=\"500\" when-full=\"REMOVE\"/>\n+</local-cache>\n+----\n+\n+.Programmatic example\n+\n+[source,java,options=\"nowrap\"]\n+----\n+ConfigurationBuilder cfg = new ConfigurationBuilder();\n+\n+cfg\n+  .memory()\n+    .maxCount(500)\n+    .whenFull(\"REMOVE\")", "originalCommit": "4909e0343d3962818587dc7d7a3d639a8ca11224", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2MzkzOA==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r434063938", "bodyText": "Should we mention here that the storage media type has to be a binary based one?", "author": "wburns", "createdAt": "2020-06-02T17:53:16Z", "path": "documentation/src/main/asciidoc/topics/proc_configuring_memory_size_bytes.adoc", "diffHunk": "@@ -0,0 +1,60 @@\n+[id='configure_eviction_size-{context}']\n+= Configuring the Maximum Amount of Memory for {brandname} Caches\n+Limit the size of the data container for cache entries to a maximum amount of", "originalCommit": "4909e0343d3962818587dc7d7a3d639a8ca11224", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2NDQzMg==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r434064432", "bodyText": "Believe we should have the media-type here since OFF_HEAP doesn't work with object media type.", "author": "wburns", "createdAt": "2020-06-02T17:54:08Z", "path": "documentation/src/main/asciidoc/topics/ref_eviction_examples.adoc", "diffHunk": "@@ -1,92 +1,92 @@\n [id='eviction_example-{context}']\n = Eviction Examples\n \n-You configure eviction in `infinispan.xml` as part of your cache definition.\n+You configure eviction as part of your cache definition.\n \n .Default memory configuration\n \n Eviction is not enabled, which is the default configuration. {brandname} stores\n-cache entries as objects in the data container.\n+cache entries as objects in the JVM heap.\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n <memory />\n ----\n \n-.Passivation with eviction\n+.Eviction based on the total number of entries\n \n-Passivation persists data to cache stores when {brandname} evicts entries. You\n-should always enable eviction if you enable passivation.\n+{brandname} stores cache entries as objects in the JVM heap. Eviction happens\n+when there are 100 entries in the data container and {brandname} gets a request\n+to create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<persistence passivation=\"true\">\n-  ...\n-</persistence>\n-\n-<memory />\n+<memory max-count=\"100\"/>\n ----\n \n-.Manual eviction\n+.Eviction based maximum size in bytes\n+\n+{brandname} can store cache entries as `byte[]` arrays if you encode entries in binary storage formats, for example: `application/x-protostream` format.\n \n-{brandname} stores cache entries as objects. Eviction is not enabled but\n-performed manually using the `evict()` method.\n+In the following example, {brandname} performs eviction when the size of the\n+data container reaches 500 MB (megabytes) in size and it gets a request to\n+create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <object strategy=\"MANUAL\" />\n-</memory>\n+<encoding media-type=\"application/x-protostream\"/> <1>\n+<memory max-size=\"500 MB\"/> <2>\n ----\n \n-.Object storage with eviction\n+<1> Specifies a binary format for entries in the cache.\n+<2> Defines the maximum size of the data container as MB (megabytes).\n \n-{brandname} stores cache entries as objects. Eviction happens when there are\n-100 entries in the data container and {brandname} gets a request to create a\n-new entry:\n+.Off-heap storage\n+\n+{brandname} stores cache entries as bytes in native memory. Eviction happens\n+when there are 100 entries in the data container and {brandname} gets a request\n+to create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <object size=\"100\" />\n-</memory>\n+<memory storage=\"OFF_HEAP\" max-count=\"100\"/>", "originalCommit": "4909e0343d3962818587dc7d7a3d639a8ca11224", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ4OTY5NQ==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r434489695", "bodyText": "@wburns I took this from the example in the upgrade guide here: https://github.com/infinispan/infinispan/blob/master/documentation/src/main/asciidoc/topics/upgrading.adoc\nmaybe I'm not clear on some of the details. I get that off heap is always represented as byte[] so the object media type is not suitable. but should users always configure the encoding when using off heap?", "author": "oraNod", "createdAt": "2020-06-03T11:12:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2NDQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0NzIzNA==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r434547234", "bodyText": "@gustavonalle we should update the upgrading guide as well it seems too then and more clarification would be great.", "author": "wburns", "createdAt": "2020-06-03T12:59:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2NDQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcyMjg2OA==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r435722868", "bodyText": "When using OFF_HEAP it automatically uses the \"user marshaller\", or IOW, it configures the cache with the media type of the \"default\" marshaller which ends up being protobuf.\nBINARY, OTOH, needs a configuration of the type", "author": "gustavonalle", "createdAt": "2020-06-05T06:52:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2NDQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgxMDQ1Nw==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r435810457", "bodyText": "@wburns and @gustavonalle thanks, I've added this to the configuring Off Heap topic. here's the readable HTML: http://file.rdu.redhat.com/dnaro/ISPN-11869/titles/configuring/configuring.html#configure_off_heap-config", "author": "oraNod", "createdAt": "2020-06-05T09:43:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2NDQzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2NDg1Ng==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r434064856", "bodyText": "We should probably list the tx configuration too since it is required for exception strategy.", "author": "wburns", "createdAt": "2020-06-02T17:54:51Z", "path": "documentation/src/main/asciidoc/topics/ref_eviction_examples.adoc", "diffHunk": "@@ -1,92 +1,92 @@\n [id='eviction_example-{context}']\n = Eviction Examples\n \n-You configure eviction in `infinispan.xml` as part of your cache definition.\n+You configure eviction as part of your cache definition.\n \n .Default memory configuration\n \n Eviction is not enabled, which is the default configuration. {brandname} stores\n-cache entries as objects in the data container.\n+cache entries as objects in the JVM heap.\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n <memory />\n ----\n \n-.Passivation with eviction\n+.Eviction based on the total number of entries\n \n-Passivation persists data to cache stores when {brandname} evicts entries. You\n-should always enable eviction if you enable passivation.\n+{brandname} stores cache entries as objects in the JVM heap. Eviction happens\n+when there are 100 entries in the data container and {brandname} gets a request\n+to create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<persistence passivation=\"true\">\n-  ...\n-</persistence>\n-\n-<memory />\n+<memory max-count=\"100\"/>\n ----\n \n-.Manual eviction\n+.Eviction based maximum size in bytes\n+\n+{brandname} can store cache entries as `byte[]` arrays if you encode entries in binary storage formats, for example: `application/x-protostream` format.\n \n-{brandname} stores cache entries as objects. Eviction is not enabled but\n-performed manually using the `evict()` method.\n+In the following example, {brandname} performs eviction when the size of the\n+data container reaches 500 MB (megabytes) in size and it gets a request to\n+create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <object strategy=\"MANUAL\" />\n-</memory>\n+<encoding media-type=\"application/x-protostream\"/> <1>\n+<memory max-size=\"500 MB\"/> <2>\n ----\n \n-.Object storage with eviction\n+<1> Specifies a binary format for entries in the cache.\n+<2> Defines the maximum size of the data container as MB (megabytes).\n \n-{brandname} stores cache entries as objects. Eviction happens when there are\n-100 entries in the data container and {brandname} gets a request to create a\n-new entry:\n+.Off-heap storage\n+\n+{brandname} stores cache entries as bytes in native memory. Eviction happens\n+when there are 100 entries in the data container and {brandname} gets a request\n+to create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <object size=\"100\" />\n-</memory>\n+<memory storage=\"OFF_HEAP\" max-count=\"100\"/>\n ----\n \n-.Binary storage with memory-based eviction\n+.Off-heap storage with the exception strategy\n \n-{brandname} stores cache entries as bytes. Eviction happens when the size of\n-the data container reaches 100 bytes and {brandname} gets a request to create a\n-new entry:\n+{brandname} stores cache entries as bytes in native memory. When there are 100\n+entries in the data container, and {brandname} gets a request to create a new\n+entry, it throws an exception and does not allow the new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <binary size=\"100\" eviction=\"MEMORY\"/>\n-</memory>\n+<memory storage=\"OFF_HEAP\" max-count=\"100\" when-full=\"EXCEPTION\"/>", "originalCommit": "4909e0343d3962818587dc7d7a3d639a8ca11224", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ4MzMxOQ==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r434483319", "bodyText": "@wburns good idea. I've added something but I honestly don't know the transaction config that well so if you could double check it when I push the changes, I'd appreciate it.", "author": "oraNod", "createdAt": "2020-06-03T10:59:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2NDg1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2NTM2NQ==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r434065365", "bodyText": "Should we mention this does nothing but prevents a warning message when passivation is enabled but there is no eviction configuration?", "author": "wburns", "createdAt": "2020-06-02T17:55:40Z", "path": "documentation/src/main/asciidoc/topics/ref_eviction_examples.adoc", "diffHunk": "@@ -1,92 +1,92 @@\n [id='eviction_example-{context}']\n = Eviction Examples\n \n-You configure eviction in `infinispan.xml` as part of your cache definition.\n+You configure eviction as part of your cache definition.\n \n .Default memory configuration\n \n Eviction is not enabled, which is the default configuration. {brandname} stores\n-cache entries as objects in the data container.\n+cache entries as objects in the JVM heap.\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n <memory />\n ----\n \n-.Passivation with eviction\n+.Eviction based on the total number of entries\n \n-Passivation persists data to cache stores when {brandname} evicts entries. You\n-should always enable eviction if you enable passivation.\n+{brandname} stores cache entries as objects in the JVM heap. Eviction happens\n+when there are 100 entries in the data container and {brandname} gets a request\n+to create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<persistence passivation=\"true\">\n-  ...\n-</persistence>\n-\n-<memory />\n+<memory max-count=\"100\"/>\n ----\n \n-.Manual eviction\n+.Eviction based maximum size in bytes\n+\n+{brandname} can store cache entries as `byte[]` arrays if you encode entries in binary storage formats, for example: `application/x-protostream` format.\n \n-{brandname} stores cache entries as objects. Eviction is not enabled but\n-performed manually using the `evict()` method.\n+In the following example, {brandname} performs eviction when the size of the\n+data container reaches 500 MB (megabytes) in size and it gets a request to\n+create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <object strategy=\"MANUAL\" />\n-</memory>\n+<encoding media-type=\"application/x-protostream\"/> <1>\n+<memory max-size=\"500 MB\"/> <2>\n ----\n \n-.Object storage with eviction\n+<1> Specifies a binary format for entries in the cache.\n+<2> Defines the maximum size of the data container as MB (megabytes).\n \n-{brandname} stores cache entries as objects. Eviction happens when there are\n-100 entries in the data container and {brandname} gets a request to create a\n-new entry:\n+.Off-heap storage\n+\n+{brandname} stores cache entries as bytes in native memory. Eviction happens\n+when there are 100 entries in the data container and {brandname} gets a request\n+to create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <object size=\"100\" />\n-</memory>\n+<memory storage=\"OFF_HEAP\" max-count=\"100\"/>\n ----\n \n-.Binary storage with memory-based eviction\n+.Off-heap storage with the exception strategy\n \n-{brandname} stores cache entries as bytes. Eviction happens when the size of\n-the data container reaches 100 bytes and {brandname} gets a request to create a\n-new entry:\n+{brandname} stores cache entries as bytes in native memory. When there are 100\n+entries in the data container, and {brandname} gets a request to create a new\n+entry, it throws an exception and does not allow the new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <binary size=\"100\" eviction=\"MEMORY\"/>\n-</memory>\n+<memory storage=\"OFF_HEAP\" max-count=\"100\" when-full=\"EXCEPTION\"/>\n ----\n \n-.Off-heap storage with count-based eviction\n+.Manual eviction\n \n-{brandname} stores cache entries as bytes in native memory. Eviction happens\n-when there are 100 entries in the data container and {brandname} gets a request\n-to create a new entry:\n+{brandname} stores cache entries as objects in the JVM heap. Eviction is not\n+enabled but performed manually using the `evict()` method.", "originalCommit": "4909e0343d3962818587dc7d7a3d639a8ca11224", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "19f3d697a2ce00327ecea1eaeb7bcf2fba771601", "url": "https://github.com/infinispan/infinispan/commit/19f3d697a2ce00327ecea1eaeb7bcf2fba771601", "message": "ISPN-11869 updating docs for memory configuration", "committedDate": "2020-06-03T11:02:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMxNDI2MA==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r435314260", "bodyText": "Sorry rereading this again, this makes no sense to me as a description to strategy. I think the first sentence before was better \"Specifies a strategy for evicting cache entries.\"", "author": "wburns", "createdAt": "2020-06-04T14:43:58Z", "path": "core/src/main/resources/schema/infinispan-config-11.0.xsd", "diffHunk": "@@ -1401,17 +1403,15 @@\n     <xs:attribute name=\"size\" type=\"xs:long\" default=\"-1\">\n       <xs:annotation>\n         <xs:documentation>\n-          Defines the size of the data container as a long. Eviction occurs\n-          when the number of entries exceeds the size.\n+          Eviction occurs when the number of entries exceeds the size.\n         </xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n     <xs:attribute name=\"strategy\" type=\"tns:eviction-strategy\">\n       <xs:annotation>\n         <xs:documentation>\n-          Specifies a strategy for evicting cache entries. Eviction always\n-          takes place when you define the size of the data container. If you\n-          specify a value for size, then you should configure a strategy.\n+          Eviction always takes place when you define the size of the data", "originalCommit": "19f3d697a2ce00327ecea1eaeb7bcf2fba771601", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgwMDUxMA==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r435800510", "bodyText": "thanks for catching this @wburns I agree it makes no sense and must have been a typo or something. I've reverted to the original.", "author": "oraNod", "createdAt": "2020-06-05T09:25:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMxNDI2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyODc1MQ==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r435328751", "bodyText": "We don't need this.", "author": "wburns", "createdAt": "2020-06-04T15:02:42Z", "path": "documentation/src/main/asciidoc/topics/ref_eviction_examples.adoc", "diffHunk": "@@ -1,92 +1,104 @@\n [id='eviction_example-{context}']\n = Eviction Examples\n \n-You configure eviction in `infinispan.xml` as part of your cache definition.\n+You configure eviction as part of your cache definition.\n \n .Default memory configuration\n \n Eviction is not enabled, which is the default configuration. {brandname} stores\n-cache entries as objects in the data container.\n+cache entries as objects in the JVM heap.\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n <memory />\n ----\n \n-.Passivation with eviction\n+.Eviction based on the total number of entries\n \n-Passivation persists data to cache stores when {brandname} evicts entries. You\n-should always enable eviction if you enable passivation.\n+{brandname} stores cache entries as objects in the JVM heap. Eviction happens\n+when there are 100 entries in the data container and {brandname} gets a request\n+to create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<persistence passivation=\"true\">\n-  ...\n-</persistence>\n-\n-<memory />\n+<memory max-count=\"100\"/>\n ----\n \n-.Manual eviction\n+.Eviction based maximum size in bytes\n \n-{brandname} stores cache entries as objects. Eviction is not enabled but\n-performed manually using the `evict()` method.\n+{brandname} stores cache entries as `byte[]` arrays if you encode entries with\n+binary storage formats, for example: `application/x-protostream` format.\n+\n+In the following example, {brandname} performs eviction when the size of the\n+data container reaches 500 MB (megabytes) in size and it gets a request to\n+create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <object strategy=\"MANUAL\" />\n-</memory>\n+<encoding media-type=\"application/x-protostream\"/> <1>\n+<memory max-size=\"500 MB\"/> <2>\n ----\n \n-.Object storage with eviction\n+<1> Specifies a binary format for entries in the cache.\n+<2> Defines the maximum size of the data container as MB (megabytes).\n+\n+.Off-heap storage\n \n-{brandname} stores cache entries as objects. Eviction happens when there are\n-100 entries in the data container and {brandname} gets a request to create a\n-new entry:\n+{brandname} stores cache entries as bytes in native memory. Eviction happens\n+when there are 100 entries in the data container and {brandname} gets a request\n+to create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <object size=\"100\" />\n-</memory>\n+<encoding media-type=\"application/x-protostream\"/>\n+<memory storage=\"OFF_HEAP\" max-count=\"100\"/>\n ----\n \n-.Binary storage with memory-based eviction\n+.Off-heap storage with the exception strategy\n \n-{brandname} stores cache entries as bytes. Eviction happens when the size of\n-the data container reaches 100 bytes and {brandname} gets a request to create a\n-new entry:\n+{brandname} stores cache entries as bytes in native memory. When there are 100\n+entries in the data container, and {brandname} gets a request to create a new\n+entry, it throws an exception and does not allow the new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <binary size=\"100\" eviction=\"MEMORY\"/>\n-</memory>\n+<locking isolation=\"READ_COMMITTED\"/>", "originalCommit": "19f3d697a2ce00327ecea1eaeb7bcf2fba771601", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyOTE0MA==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r435329140", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <transaction locking=\"OPTIMISTIC\" auto-commit=\"true\" complete-timeout=\"60000\" mode=\"NONE\"/>\n          \n          \n            \n            <transaction mode=\"NONE\"/>\n          \n      \n    \n    \n  \n\nJust to keep it simple.", "author": "wburns", "createdAt": "2020-06-04T15:03:12Z", "path": "documentation/src/main/asciidoc/topics/ref_eviction_examples.adoc", "diffHunk": "@@ -1,92 +1,104 @@\n [id='eviction_example-{context}']\n = Eviction Examples\n \n-You configure eviction in `infinispan.xml` as part of your cache definition.\n+You configure eviction as part of your cache definition.\n \n .Default memory configuration\n \n Eviction is not enabled, which is the default configuration. {brandname} stores\n-cache entries as objects in the data container.\n+cache entries as objects in the JVM heap.\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n <memory />\n ----\n \n-.Passivation with eviction\n+.Eviction based on the total number of entries\n \n-Passivation persists data to cache stores when {brandname} evicts entries. You\n-should always enable eviction if you enable passivation.\n+{brandname} stores cache entries as objects in the JVM heap. Eviction happens\n+when there are 100 entries in the data container and {brandname} gets a request\n+to create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<persistence passivation=\"true\">\n-  ...\n-</persistence>\n-\n-<memory />\n+<memory max-count=\"100\"/>\n ----\n \n-.Manual eviction\n+.Eviction based maximum size in bytes\n \n-{brandname} stores cache entries as objects. Eviction is not enabled but\n-performed manually using the `evict()` method.\n+{brandname} stores cache entries as `byte[]` arrays if you encode entries with\n+binary storage formats, for example: `application/x-protostream` format.\n+\n+In the following example, {brandname} performs eviction when the size of the\n+data container reaches 500 MB (megabytes) in size and it gets a request to\n+create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <object strategy=\"MANUAL\" />\n-</memory>\n+<encoding media-type=\"application/x-protostream\"/> <1>\n+<memory max-size=\"500 MB\"/> <2>\n ----\n \n-.Object storage with eviction\n+<1> Specifies a binary format for entries in the cache.\n+<2> Defines the maximum size of the data container as MB (megabytes).\n+\n+.Off-heap storage\n \n-{brandname} stores cache entries as objects. Eviction happens when there are\n-100 entries in the data container and {brandname} gets a request to create a\n-new entry:\n+{brandname} stores cache entries as bytes in native memory. Eviction happens\n+when there are 100 entries in the data container and {brandname} gets a request\n+to create a new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <object size=\"100\" />\n-</memory>\n+<encoding media-type=\"application/x-protostream\"/>\n+<memory storage=\"OFF_HEAP\" max-count=\"100\"/>\n ----\n \n-.Binary storage with memory-based eviction\n+.Off-heap storage with the exception strategy\n \n-{brandname} stores cache entries as bytes. Eviction happens when the size of\n-the data container reaches 100 bytes and {brandname} gets a request to create a\n-new entry:\n+{brandname} stores cache entries as bytes in native memory. When there are 100\n+entries in the data container, and {brandname} gets a request to create a new\n+entry, it throws an exception and does not allow the new entry:\n \n [source,xml,options=\"nowrap\",subs=attributes+]\n ----\n-<memory>\n-  <binary size=\"100\" eviction=\"MEMORY\"/>\n-</memory>\n+<locking isolation=\"READ_COMMITTED\"/>\n+\n+<transaction locking=\"OPTIMISTIC\" auto-commit=\"true\" complete-timeout=\"60000\" mode=\"NONE\"/>", "originalCommit": "19f3d697a2ce00327ecea1eaeb7bcf2fba771601", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fe2bb1a1fd813d32cc1f9cb3208739017555887b", "url": "https://github.com/infinispan/infinispan/commit/fe2bb1a1fd813d32cc1f9cb3208739017555887b", "message": "ISPN-11869 updating docs for memory configuration", "committedDate": "2020-06-05T09:44:09Z", "type": "forcePushed"}, {"oid": "cd4446008a0e0110be4261741b06be0a51fa12c7", "url": "https://github.com/infinispan/infinispan/commit/cd4446008a0e0110be4261741b06be0a51fa12c7", "message": "ISPN-11869 updating docs for memory configuration", "committedDate": "2020-06-08T11:28:43Z", "type": "forcePushed"}, {"oid": "096d50c795b6af1781baff3a17a6e18a044c7cee", "url": "https://github.com/infinispan/infinispan/commit/096d50c795b6af1781baff3a17a6e18a044c7cee", "message": "ISPN-11869 updating docs for memory configuration", "committedDate": "2020-06-09T12:23:40Z", "type": "forcePushed"}, {"oid": "e7d4d7406398471a01e5bb0d1b4c8275da827759", "url": "https://github.com/infinispan/infinispan/commit/e7d4d7406398471a01e5bb0d1b4c8275da827759", "message": "ISPN-11869 updating docs for memory configuration", "committedDate": "2020-06-09T16:00:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAxNTg2OA==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r438015868", "bodyText": "Suggestion:\nIt is recommended to configure the encoding for caches.\nIf not configured, {brandname} uses the MediaType of the marshaller from the `serialization` \nconfiguration of the cache container.", "author": "gustavonalle", "createdAt": "2020-06-10T10:15:36Z", "path": "documentation/src/main/asciidoc/topics/proc_configuring_memory_size_bytes.adoc", "diffHunk": "@@ -0,0 +1,61 @@\n+[id='configure_eviction_size-{context}']\n+= Configuring the Maximum Amount of Memory for {brandname} Caches\n+Limit the size of the data container for cache entries to a maximum amount of\n+memory. Performing eviction based on the maximum amount of memory requires you\n+to use a binary-based storage format for the data container.\n+\n+.Procedure\n+\n+. Configure your {brandname} cache to use a storage format that supports binary encoding.\n++\n+[NOTE]\n+====\n+Configuring the encoding for caches is optional. {brandname} uses the MediaType\n+that is determined by user configured marshallers if you do not configure\n+encoding for caches.", "originalCommit": "e7d4d7406398471a01e5bb0d1b4c8275da827759", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAyMDczNA==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r438020734", "bodyText": "@gustavonalle I'd like to expand this a little to understand why it's recommended. Could there be cases where the MediaType of the marshaller is not suitable for caches that require a binary storage format? So it's better to set the encoding for each cache to potentially avoid issues?", "author": "oraNod", "createdAt": "2020-06-10T10:24:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAxNTg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAzNjQ3NA==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r438036474", "bodyText": "Could there be cases where the MediaType of the marshaller is not suitable for caches that require a binary storage format\n\nAll marshallers should produce byte[], so there is not a problem\n\nSo it's better to set the encoding for each cache to potentially avoid issues?\n\nThe issue is that the marshaller config is also optional, so it ends up picking whatever is the \"default\" internally in Infinispan. To make things worse, the \"default\" historically (up to 10) has been different for embedded and server caches, so an OFF_HEAP cache would store different formats if used by the client or server. Setting an encoding will guarantee a stable format for the cache until this marshaller mess is fully sorted out.", "author": "gustavonalle", "createdAt": "2020-06-10T10:56:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAxNTg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA2Mzg4Mw==", "url": "https://github.com/infinispan/infinispan/pull/8367#discussion_r438063883", "bodyText": "this is great. it's actually made me think a little more about the global configuration and how we are inconsistent with that in docs. hopefully the changes look good.", "author": "oraNod", "createdAt": "2020-06-10T11:53:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAxNTg2OA=="}], "type": "inlineReview"}, {"oid": "058bab8484f544d31bc0bb2d48458fb16dfc93c1", "url": "https://github.com/infinispan/infinispan/commit/058bab8484f544d31bc0bb2d48458fb16dfc93c1", "message": "ISPN-11869 updating docs for memory configuration", "committedDate": "2020-06-10T11:49:13Z", "type": "forcePushed"}, {"oid": "771bb3bdc46f11825b894b45fe7e216d577042f0", "url": "https://github.com/infinispan/infinispan/commit/771bb3bdc46f11825b894b45fe7e216d577042f0", "message": "ISPN-11869 updating docs for memory configuration", "committedDate": "2020-06-11T08:56:28Z", "type": "forcePushed"}, {"oid": "25acb4d092042d1662db036bef21d27a793cd245", "url": "https://github.com/infinispan/infinispan/commit/25acb4d092042d1662db036bef21d27a793cd245", "message": "ISPN-11869 updating docs for memory configuration", "committedDate": "2020-06-11T15:08:46Z", "type": "commit"}, {"oid": "25acb4d092042d1662db036bef21d27a793cd245", "url": "https://github.com/infinispan/infinispan/commit/25acb4d092042d1662db036bef21d27a793cd245", "message": "ISPN-11869 updating docs for memory configuration", "committedDate": "2020-06-11T15:08:46Z", "type": "forcePushed"}]}