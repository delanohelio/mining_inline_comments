{"pr_number": 8529, "pr_title": "ISPN-12036 Automatic registration of SerializationContextInitializers\u2026", "pr_createdAt": "2020-07-03T12:59:30Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8529", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwNDA4Mw==", "url": "https://github.com/infinispan/infinispan/pull/8529#discussion_r449604083", "bodyText": "I'm still not convinced this limitation is necessary. What's the real benefit?\nConsider this scenario:\n\nx SCI's auto generated and services created as per the new protostream default behaviour\nA single \"manual\" SCI implementation is created by the user\n\nIn this scenario, with your changes, it's now necessary for the user to manually configure all x SCIs in addition to the manual one.", "author": "ryanemerson", "createdAt": "2020-07-03T14:13:17Z", "path": "remote-query/remote-query-server/src/main/java/org/infinispan/query/remote/impl/ProtobufMetadataManagerImpl.java", "diffHunk": "@@ -95,16 +95,24 @@ void start() {\n             getProtobufMetadataCacheConfig(globalConfiguration).build(),\n             EnumSet.of(InternalCacheRegistry.Flag.USER, InternalCacheRegistry.Flag.PROTECTED, InternalCacheRegistry.Flag.PERSISTENT));\n \n-      processSerializationContextInitializer(ServiceFinder.load(SerializationContextInitializer.class, globalConfiguration.classLoader()));\n-      processSerializationContextInitializer(globalConfiguration.serialization().contextInitializers());\n+      Collection<SerializationContextInitializer> initializers = globalConfiguration.serialization().contextInitializers();\n+      if (initializers == null || initializers.isEmpty()) {", "originalCommit": "efffcee1318c53a3948826a3be580d7d1b98e731", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg1ODM2OQ==", "url": "https://github.com/infinispan/infinispan/pull/8529#discussion_r449858369", "bodyText": "That is the intent of this PR, to force the user to either configure all SCIs manually (which is the old backward compat way) or go fully automatic. Manually written SCIs are normally found only in tests or our internal stuff, but the user should never need to do that.\nI propose to not mix the two approaches and if manual configuration of SCIs exists then it should be considered the single source of truth. It will basically be the way to turn off automatic CP scanning for SCIs which is not always the desirable way to do things. The CP might contain more than intended, even conflicting SCIs.  That's the typical case for tests, btw.", "author": "anistor", "createdAt": "2020-07-05T09:57:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwNDA4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5ODM2Nw==", "url": "https://github.com/infinispan/infinispan/pull/8529#discussion_r450098367", "bodyText": "Manually written SCIs are normally found only in tests or our internal stuff, but the user should never need to do that.\n\nUnfortunately manual SCIs are still the only way to configure manual marshallers for classes outside of the users control, e.g. UUID. This will remain the case until we have a solution for IPROTO-137.", "author": "ryanemerson", "createdAt": "2020-07-06T09:28:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwNDA4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUwOTI0Mg==", "url": "https://github.com/infinispan/infinispan/pull/8529#discussion_r460509242", "bodyText": "@ryanemerson with this change we can continue to provide manually written SCIs, in both tests and production code, but we'll have to provide a service file for them if we don't plan to add them manually. So what is different ? :)", "author": "anistor", "createdAt": "2020-07-26T10:29:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwNDA4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0ODc1OA==", "url": "https://github.com/infinispan/infinispan/pull/8529#discussion_r460748758", "bodyText": "Ok that's a fair point, I didn't really think about the user defining a service for the manual implementations. The only thing missing now, is that this behaviour needs to be documented \ud83d\ude42", "author": "ryanemerson", "createdAt": "2020-07-27T09:03:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwNDA4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwNDMyNg==", "url": "https://github.com/infinispan/infinispan/pull/8529#discussion_r449604326", "bodyText": "Should the logs be info?", "author": "ryanemerson", "createdAt": "2020-07-03T14:13:52Z", "path": "remote-query/remote-query-server/src/main/java/org/infinispan/query/remote/impl/ProtobufMetadataManagerImpl.java", "diffHunk": "@@ -95,16 +95,24 @@ void start() {\n             getProtobufMetadataCacheConfig(globalConfiguration).build(),\n             EnumSet.of(InternalCacheRegistry.Flag.USER, InternalCacheRegistry.Flag.PROTECTED, InternalCacheRegistry.Flag.PERSISTENT));\n \n-      processSerializationContextInitializer(ServiceFinder.load(SerializationContextInitializer.class, globalConfiguration.classLoader()));\n-      processSerializationContextInitializer(globalConfiguration.serialization().contextInitializers());\n+      Collection<SerializationContextInitializer> initializers = globalConfiguration.serialization().contextInitializers();\n+      if (initializers == null || initializers.isEmpty()) {\n+         initializers = ServiceFinder.load(SerializationContextInitializer.class, globalConfiguration.classLoader());\n+      }\n+      processSerializationContextInitializer(initializers);\n       processProtostreamSerializationContextInitializers(globalConfiguration.classLoader());\n    }\n \n+   /**\n+    * @deprecated Since 10.\n+    */\n+   @Deprecated\n    private void processProtostreamSerializationContextInitializers(ClassLoader classLoader) {\n       Collection<ProtostreamSerializationContextInitializer> initializers =\n             ServiceFinder.load(ProtostreamSerializationContextInitializer.class, classLoader);\n \n       for (ProtostreamSerializationContextInitializer psci : initializers) {\n+         log.debugf(\"Registering ProtostreamSerializationContextInitializer %s\", psci.getClass().getName());", "originalCommit": "efffcee1318c53a3948826a3be580d7d1b98e731", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg1NzY3NQ==", "url": "https://github.com/infinispan/infinispan/pull/8529#discussion_r449857675", "bodyText": "That was my feeling also in the beginning. I can make them INFO and i18n them, unless we think this is too much noise in the log during boot.", "author": "anistor", "createdAt": "2020-07-05T09:49:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwNDMyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5OTM4NQ==", "url": "https://github.com/infinispan/infinispan/pull/8529#discussion_r450099385", "bodyText": "+1 for Info and i18n. I think the benefit of easy debugging will outweigh the damage of a little noise.", "author": "ryanemerson", "createdAt": "2020-07-06T09:30:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwNDMyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxMjgxMA==", "url": "https://github.com/infinispan/infinispan/pull/8529#discussion_r460512810", "bodyText": "done", "author": "anistor", "createdAt": "2020-07-26T11:05:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwNDMyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5OTg4OQ==", "url": "https://github.com/infinispan/infinispan/pull/8529#discussion_r450099889", "bodyText": "This was deprecated in 10.x, I think we can remove this now along with ProtostreamSerializationContextInitializer", "author": "ryanemerson", "createdAt": "2020-07-06T09:31:31Z", "path": "remote-query/remote-query-server/src/main/java/org/infinispan/query/remote/impl/ProtobufMetadataManagerImpl.java", "diffHunk": "@@ -95,16 +95,24 @@ void start() {\n             getProtobufMetadataCacheConfig(globalConfiguration).build(),\n             EnumSet.of(InternalCacheRegistry.Flag.USER, InternalCacheRegistry.Flag.PROTECTED, InternalCacheRegistry.Flag.PERSISTENT));\n \n-      processSerializationContextInitializer(ServiceFinder.load(SerializationContextInitializer.class, globalConfiguration.classLoader()));\n-      processSerializationContextInitializer(globalConfiguration.serialization().contextInitializers());\n+      Collection<SerializationContextInitializer> initializers = globalConfiguration.serialization().contextInitializers();\n+      if (initializers == null || initializers.isEmpty()) {\n+         initializers = ServiceFinder.load(SerializationContextInitializer.class, globalConfiguration.classLoader());\n+      }\n+      processSerializationContextInitializer(initializers);\n       processProtostreamSerializationContextInitializers(globalConfiguration.classLoader());\n    }\n \n+   /**\n+    * @deprecated Since 10.\n+    */\n+   @Deprecated\n    private void processProtostreamSerializationContextInitializers(ClassLoader classLoader) {", "originalCommit": "efffcee1318c53a3948826a3be580d7d1b98e731", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0MTM3NA==", "url": "https://github.com/infinispan/infinispan/pull/8529#discussion_r460441374", "bodyText": "Done", "author": "anistor", "createdAt": "2020-07-25T20:02:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5OTg4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEwMzgwMA==", "url": "https://github.com/infinispan/infinispan/pull/8529#discussion_r450103800", "bodyText": "I have found a bigger problem (not introduced by this PR). We're currently not registering the loaded SCIs with the SerializationContextRegistry ISPN-12093", "author": "ryanemerson", "createdAt": "2020-07-06T09:38:52Z", "path": "remote-query/remote-query-server/src/main/java/org/infinispan/query/remote/impl/ProtobufMetadataManagerImpl.java", "diffHunk": "@@ -116,6 +124,7 @@ private void processProtostreamSerializationContextInitializers(ClassLoader clas\n    private void processSerializationContextInitializer(Iterable<SerializationContextInitializer> initializers) {\n       if (initializers != null) {\n          for (SerializationContextInitializer sci : initializers) {\n+            log.debugf(\"Registering SerializationContextInitializer %s\", sci.getClass().getName());\n             try {\n                sci.registerSchema(serCtx);\n                sci.registerMarshallers(serCtx);", "originalCommit": "efffcee1318c53a3948826a3be580d7d1b98e731", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f486d02b527b5a5478638a7339c69a6ec631fc9c", "url": "https://github.com/infinispan/infinispan/commit/f486d02b527b5a5478638a7339c69a6ec631fc9c", "message": "ISPN-12036 Automatic registration of SerializationContextInitializers only if none is manually configured", "committedDate": "2020-07-22T11:44:59Z", "type": "forcePushed"}, {"oid": "cb1112874e654674b50b627899560f3ef939aafd", "url": "https://github.com/infinispan/infinispan/commit/cb1112874e654674b50b627899560f3ef939aafd", "message": "ISPN-12167 Remove the already deprecated ProtostreamSerializationContextInitializer", "committedDate": "2020-07-26T11:03:29Z", "type": "forcePushed"}, {"oid": "0ea9cc1c33143294d0e3a70466363312d7fcda24", "url": "https://github.com/infinispan/infinispan/commit/0ea9cc1c33143294d0e3a70466363312d7fcda24", "message": "ISPN-12167 Remove the already deprecated ProtostreamSerializationContextInitializer", "committedDate": "2020-07-27T12:37:34Z", "type": "forcePushed"}, {"oid": "f090887b8a801a3d5c1ada11819c4db2217a3963", "url": "https://github.com/infinispan/infinispan/commit/f090887b8a801a3d5c1ada11819c4db2217a3963", "message": "ISPN-12167 Remove the already deprecated ProtostreamSerializationContextInitializer", "committedDate": "2020-09-28T18:04:55Z", "type": "forcePushed"}, {"oid": "06789908f15ad5a6be9f9df3f58ceb7b0c671d51", "url": "https://github.com/infinispan/infinispan/commit/06789908f15ad5a6be9f9df3f58ceb7b0c671d51", "message": "wip xsd docs", "committedDate": "2020-10-01T12:01:37Z", "type": "forcePushed"}, {"oid": "2de36239ae643093546c9b0becec4b24204d1f94", "url": "https://github.com/infinispan/infinispan/commit/2de36239ae643093546c9b0becec4b24204d1f94", "message": "ISPN-12167 Remove the already deprecated ProtostreamSerializationContextInitializer", "committedDate": "2020-10-01T12:03:52Z", "type": "forcePushed"}, {"oid": "30ed9c63f0d4422ba22fe33e4e3bfb75cd5a1a14", "url": "https://github.com/infinispan/infinispan/commit/30ed9c63f0d4422ba22fe33e4e3bfb75cd5a1a14", "message": "ISPN-12167 Remove the already deprecated ProtostreamSerializationContextInitializer", "committedDate": "2020-10-01T12:29:10Z", "type": "forcePushed"}, {"oid": "27fd7d4b565e47a4076ff400de6e8ef2c9eb67cf", "url": "https://github.com/infinispan/infinispan/commit/27fd7d4b565e47a4076ff400de6e8ef2c9eb67cf", "message": "ISPN-12167 Remove the already deprecated ProtostreamSerializationContextInitializer", "committedDate": "2020-10-01T19:50:40Z", "type": "forcePushed"}, {"oid": "407d777f068a77fe1b300485ead3b612f25c2e96", "url": "https://github.com/infinispan/infinispan/commit/407d777f068a77fe1b300485ead3b612f25c2e96", "message": "ISPN-12036 Automatic registration of SerializationContextInitializers only if none is manually configured\n\n* automatic registration of SerializationContextInitializers is handy but can be harmfull in some non-trivial\n  situations because it prevents separation between cache managers and also does not give you any chance\n  to resolve eventual schema conflicts. In such cases we need a way to turn it off. the simplest solution\n  is to ignore CP scanning if manual configuration of the SCI list is present.", "committedDate": "2020-10-01T20:11:41Z", "type": "commit"}, {"oid": "6a6a8d40eea2e1374fdb53be02c99c0742beb249", "url": "https://github.com/infinispan/infinispan/commit/6a6a8d40eea2e1374fdb53be02c99c0742beb249", "message": "ISPN-12036 Automatic SCI registration doc update", "committedDate": "2020-10-02T09:33:39Z", "type": "commit"}, {"oid": "d81481e55751d0cd3d56fd969b5f8decadc1b4de", "url": "https://github.com/infinispan/infinispan/commit/d81481e55751d0cd3d56fd969b5f8decadc1b4de", "message": "ISPN-12167 Remove the already deprecated ProtostreamSerializationContextInitializer", "committedDate": "2020-10-02T09:33:43Z", "type": "commit"}, {"oid": "d81481e55751d0cd3d56fd969b5f8decadc1b4de", "url": "https://github.com/infinispan/infinispan/commit/d81481e55751d0cd3d56fd969b5f8decadc1b4de", "message": "ISPN-12167 Remove the already deprecated ProtostreamSerializationContextInitializer", "committedDate": "2020-10-02T09:33:43Z", "type": "forcePushed"}]}