{"pr_number": 8446, "pr_title": "IGNITE-13659 Cache encryption key rotation (documentation)", "pr_createdAt": "2020-11-11T10:26:38Z", "pr_url": "https://github.com/apache/ignite/pull/8446", "timeline": [{"oid": "cb1fe8fda88af79d8efb10c780ab92bc17534252", "url": "https://github.com/apache/ignite/commit/cb1fe8fda88af79d8efb10c780ab92bc17534252", "message": "IGNITE-13659 Cache encryption key rotation (documentation)", "committedDate": "2020-11-11T10:32:35Z", "type": "forcePushed"}, {"oid": "7cee68bd52aa31a95d6b1dd8eceb60e54c79af03", "url": "https://github.com/apache/ignite/commit/7cee68bd52aa31a95d6b1dd8eceb60e54c79af03", "message": "IGNITE-13659 Cache encryption key rotation (documentation)", "committedDate": "2020-12-09T15:59:46Z", "type": "forcePushed"}, {"oid": "79991c7c829dce4d0696b242a614af9ff31ff18d", "url": "https://github.com/apache/ignite/commit/79991c7c829dce4d0696b242a614af9ff31ff18d", "message": "IGNITE-13659 Cache encryption key rotation (documentation)", "committedDate": "2020-12-09T16:12:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg4NDkwOQ==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r540884909", "bodyText": "You don't need 'the' here.", "author": "Silberfuchs1", "createdAt": "2020-12-11T11:35:51Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+The cache group encryption key is used to encrypt cache data on disk.", "originalCommit": "f762cd82733551b8a920e0ef8c8a339df9bc2555", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIyMzAzNQ==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r542223035", "bodyText": "Fixed, thanks.", "author": "xtern", "createdAt": "2020-12-14T09:13:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg4NDkwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg4NTM2Mw==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r540885363", "bodyText": "How does a new cache start? Does it start by itself?", "author": "Silberfuchs1", "createdAt": "2020-12-11T11:36:42Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+The cache group encryption key is used to encrypt cache data on disk.\n+When a new cache starts, a new encryption key is generated and propagated to all server nodes in the cluster. So each node for the same cache group has the same cache encryption key.", "originalCommit": "f762cd82733551b8a920e0ef8c8a339df9bc2555", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIyNDM0Ng==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r542224346", "bodyText": "Changed to \"When a user creates a new encrypted cache\"", "author": "xtern", "createdAt": "2020-12-14T09:15:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg4NTM2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg4NTgxNg==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r540885816", "bodyText": "'So,...'", "author": "Silberfuchs1", "createdAt": "2020-12-11T11:37:24Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+The cache group encryption key is used to encrypt cache data on disk.\n+When a new cache starts, a new encryption key is generated and propagated to all server nodes in the cluster. So each node for the same cache group has the same cache encryption key.", "originalCommit": "f762cd82733551b8a920e0ef8c8a339df9bc2555", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIyMzEwOA==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r542223108", "bodyText": "Fixed, thanks.", "author": "xtern", "createdAt": "2020-12-14T09:13:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg4NTgxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg4NjkwMA==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r540886900", "bodyText": "'See link:security/tde[Transparent Data Encryption] to learn more.'", "author": "Silberfuchs1", "createdAt": "2020-12-11T11:39:26Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+The cache group encryption key is used to encrypt cache data on disk.\n+When a new cache starts, a new encryption key is generated and propagated to all server nodes in the cluster. So each node for the same cache group has the same cache encryption key.\n+To learn more see the link:security/tde[Transparent Data Encryption] page.", "originalCommit": "f762cd82733551b8a920e0ef8c8a339df9bc2555", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIyNDQ0Ng==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r542224446", "bodyText": "Fixed, thanks.", "author": "xtern", "createdAt": "2020-12-14T09:15:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg4NjkwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg4Nzg1NA==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r540887854", "bodyText": "'It allows users to change the cache group encryption key and re-encrypt existing data at runtime.'", "author": "Silberfuchs1", "createdAt": "2020-12-11T11:41:18Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+The cache group encryption key is used to encrypt cache data on disk.\n+When a new cache starts, a new encryption key is generated and propagated to all server nodes in the cluster. So each node for the same cache group has the same cache encryption key.\n+To learn more see the link:security/tde[Transparent Data Encryption] page.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the encryption key of the cache group and re-encrypt existing data at runtime.", "originalCommit": "f762cd82733551b8a920e0ef8c8a339df9bc2555", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIyNDcwNQ==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r542224705", "bodyText": "Fixed, thanks.", "author": "xtern", "createdAt": "2020-12-14T09:15:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg4Nzg1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg4OTQ1Mg==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r540889452", "bodyText": "'...or if the crypto period (key validity period) has ended.'", "author": "Silberfuchs1", "createdAt": "2020-12-11T11:44:16Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+The cache group encryption key is used to encrypt cache data on disk.\n+When a new cache starts, a new encryption key is generated and propagated to all server nodes in the cluster. So each node for the same cache group has the same cache encryption key.\n+To learn more see the link:security/tde[Transparent Data Encryption] page.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the encryption key of the cache group and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or at the end of the crypto period (key validity period).", "originalCommit": "f762cd82733551b8a920e0ef8c8a339df9bc2555", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIyNDc3NA==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r542224774", "bodyText": "Fixed, thanks.", "author": "xtern", "createdAt": "2020-12-14T09:15:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg4OTQ1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MDY0Mw==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r540890643", "bodyText": "'consists of two stages, which are performed sequentially:' --> '...includes two sequential stages:'", "author": "Silberfuchs1", "createdAt": "2020-12-11T11:46:24Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+The cache group encryption key is used to encrypt cache data on disk.\n+When a new cache starts, a new encryption key is generated and propagated to all server nodes in the cluster. So each node for the same cache group has the same cache encryption key.\n+To learn more see the link:security/tde[Transparent Data Encryption] page.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the encryption key of the cache group and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or at the end of the crypto period (key validity period).\n+\n+The process of changing the cache encryption key consists of two stages, which are performed sequentially:", "originalCommit": "f762cd82733551b8a920e0ef8c8a339df9bc2555", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MTk4Mw==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r540891983", "bodyText": "'Rotate cache group key, this process add...' --> 'Rotate cache group key. This process add...'", "author": "Silberfuchs1", "createdAt": "2020-12-11T11:48:52Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+The cache group encryption key is used to encrypt cache data on disk.\n+When a new cache starts, a new encryption key is generated and propagated to all server nodes in the cluster. So each node for the same cache group has the same cache encryption key.\n+To learn more see the link:security/tde[Transparent Data Encryption] page.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the encryption key of the cache group and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or at the end of the crypto period (key validity period).\n+\n+The process of changing the cache encryption key consists of two stages, which are performed sequentially:\n+\n+1. Rotate cache group key, this process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.", "originalCommit": "f762cd82733551b8a920e0ef8c8a339df9bc2555", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5NDk1OQ==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r540894959", "bodyText": "Split the sentence like this: 'The second stage can take a long time. It depends on the amount of existing data.'", "author": "Silberfuchs1", "createdAt": "2020-12-11T11:54:28Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+The cache group encryption key is used to encrypt cache data on disk.\n+When a new cache starts, a new encryption key is generated and propagated to all server nodes in the cluster. So each node for the same cache group has the same cache encryption key.\n+To learn more see the link:security/tde[Transparent Data Encryption] page.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the encryption key of the cache group and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or at the end of the crypto period (key validity period).\n+\n+The process of changing the cache encryption key consists of two stages, which are performed sequentially:\n+\n+1. Rotate cache group key, this process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time, which depends on the amount of existing data. During this period the old key will be kept to read the archived data.", "originalCommit": "f762cd82733551b8a920e0ef8c8a339df9bc2555", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5NzI1OQ==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r540897259", "bodyText": "'By default, ...'\nSplit the sentence like this: 'By default it is equal to zero. The identifier of the new key increases with each rotation.'", "author": "Silberfuchs1", "createdAt": "2020-12-11T11:58:42Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+The cache group encryption key is used to encrypt cache data on disk.\n+When a new cache starts, a new encryption key is generated and propagated to all server nodes in the cluster. So each node for the same cache group has the same cache encryption key.\n+To learn more see the link:security/tde[Transparent Data Encryption] page.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the encryption key of the cache group and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or at the end of the crypto period (key validity period).\n+\n+The process of changing the cache encryption key consists of two stages, which are performed sequentially:\n+\n+1. Rotate cache group key, this process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time, which depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero, with each rotation the identifier of the new key is increased.", "originalCommit": "f762cd82733551b8a920e0ef8c8a339df9bc2555", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5OTA0MQ==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r540899041", "bodyText": "The encryption key (as well as encryption key ID) is the same for all nodes in a cache group.", "author": "Silberfuchs1", "createdAt": "2020-12-11T12:02:06Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+The cache group encryption key is used to encrypt cache data on disk.\n+When a new cache starts, a new encryption key is generated and propagated to all server nodes in the cluster. So each node for the same cache group has the same cache encryption key.\n+To learn more see the link:security/tde[Transparent Data Encryption] page.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the encryption key of the cache group and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or at the end of the crypto period (key validity period).\n+\n+The process of changing the cache encryption key consists of two stages, which are performed sequentially:\n+\n+1. Rotate cache group key, this process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time, which depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero, with each rotation the identifier of the new key is increased.\n+The same cache group has the same encryption key (with the same encryption key ID) on all nodes.", "originalCommit": "f762cd82733551b8a920e0ef8c8a339df9bc2555", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkwMDQwNQ==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r540900405", "bodyText": "'...for a cache group...'", "author": "Silberfuchs1", "createdAt": "2020-12-11T12:04:50Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+The cache group encryption key is used to encrypt cache data on disk.\n+When a new cache starts, a new encryption key is generated and propagated to all server nodes in the cluster. So each node for the same cache group has the same cache encryption key.\n+To learn more see the link:security/tde[Transparent Data Encryption] page.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the encryption key of the cache group and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or at the end of the crypto period (key validity period).\n+\n+The process of changing the cache encryption key consists of two stages, which are performed sequentially:\n+\n+1. Rotate cache group key, this process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time, which depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero, with each rotation the identifier of the new key is increased.\n+The same cache group has the same encryption key (with the same encryption key ID) on all nodes.\n+\n+NOTE: Secondary rotation of the cache encryption key is possible only after a complete change of the encryption key for this cache group (both stages).", "originalCommit": "f762cd82733551b8a920e0ef8c8a339df9bc2555", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkwMjMzMA==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r540902330", "bodyText": "'Ignite shipment includes...'", "author": "Silberfuchs1", "createdAt": "2020-12-11T12:08:32Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+The cache group encryption key is used to encrypt cache data on disk.\n+When a new cache starts, a new encryption key is generated and propagated to all server nodes in the cluster. So each node for the same cache group has the same cache encryption key.\n+To learn more see the link:security/tde[Transparent Data Encryption] page.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the encryption key of the cache group and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or at the end of the crypto period (key validity period).\n+\n+The process of changing the cache encryption key consists of two stages, which are performed sequentially:\n+\n+1. Rotate cache group key, this process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time, which depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero, with each rotation the identifier of the new key is increased.\n+The same cache group has the same encryption key (with the same encryption key ID) on all nodes.\n+\n+NOTE: Secondary rotation of the cache encryption key is possible only after a complete change of the encryption key for this cache group (both stages).\n+\n+== Prerequisites\n+\n+The cluster should be active.\n+\n+== Changing the encryption key\n+\n+Ignite provides the ability to change the cache encryption key using the following interfaces:\n+\n+- link:#command-line-tool[command line tool]\n+- link:#jmx[JMX]\n+- link:#from-code[from code]\n+\n+=== Command line tool\n+\n+Ignite ships a `control.sh|bat` script, located in the `$IGNITE_HOME/bin` folder, that acts as a tool to manage the", "originalCommit": "f762cd82733551b8a920e0ef8c8a339df9bc2555", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkwMzI0NA==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r540903244", "bodyText": "I'd say '...are used...'", "author": "Silberfuchs1", "createdAt": "2020-12-11T12:10:15Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+The cache group encryption key is used to encrypt cache data on disk.\n+When a new cache starts, a new encryption key is generated and propagated to all server nodes in the cluster. So each node for the same cache group has the same cache encryption key.\n+To learn more see the link:security/tde[Transparent Data Encryption] page.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the encryption key of the cache group and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or at the end of the crypto period (key validity period).\n+\n+The process of changing the cache encryption key consists of two stages, which are performed sequentially:\n+\n+1. Rotate cache group key, this process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time, which depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero, with each rotation the identifier of the new key is increased.\n+The same cache group has the same encryption key (with the same encryption key ID) on all nodes.\n+\n+NOTE: Secondary rotation of the cache encryption key is possible only after a complete change of the encryption key for this cache group (both stages).\n+\n+== Prerequisites\n+\n+The cluster should be active.\n+\n+== Changing the encryption key\n+\n+Ignite provides the ability to change the cache encryption key using the following interfaces:\n+\n+- link:#command-line-tool[command line tool]\n+- link:#jmx[JMX]\n+- link:#from-code[from code]\n+\n+=== Command line tool\n+\n+Ignite ships a `control.sh|bat` script, located in the `$IGNITE_HOME/bin` folder, that acts as a tool to manage the\n+cache encryption key change process from the command line. The following commands can be used with `control.sh|bat`:", "originalCommit": "f762cd82733551b8a920e0ef8c8a339df9bc2555", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkwNDg0NA==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r540904844", "bodyText": "'View the cache group encryption key identifiers.'", "author": "Silberfuchs1", "createdAt": "2020-12-11T12:13:33Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+The cache group encryption key is used to encrypt cache data on disk.\n+When a new cache starts, a new encryption key is generated and propagated to all server nodes in the cluster. So each node for the same cache group has the same cache encryption key.\n+To learn more see the link:security/tde[Transparent Data Encryption] page.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the encryption key of the cache group and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or at the end of the crypto period (key validity period).\n+\n+The process of changing the cache encryption key consists of two stages, which are performed sequentially:\n+\n+1. Rotate cache group key, this process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time, which depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero, with each rotation the identifier of the new key is increased.\n+The same cache group has the same encryption key (with the same encryption key ID) on all nodes.\n+\n+NOTE: Secondary rotation of the cache encryption key is possible only after a complete change of the encryption key for this cache group (both stages).\n+\n+== Prerequisites\n+\n+The cluster should be active.\n+\n+== Changing the encryption key\n+\n+Ignite provides the ability to change the cache encryption key using the following interfaces:\n+\n+- link:#command-line-tool[command line tool]\n+- link:#jmx[JMX]\n+- link:#from-code[from code]\n+\n+=== Command line tool\n+\n+Ignite ships a `control.sh|bat` script, located in the `$IGNITE_HOME/bin` folder, that acts as a tool to manage the\n+cache encryption key change process from the command line. The following commands can be used with `control.sh|bat`:\n+\n+[source,shell]\n+----\n+# View the encryption key identifiers of the cache group.", "originalCommit": "f762cd82733551b8a920e0ef8c8a339df9bc2555", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkwNTk4Mw==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r540905983", "bodyText": "'...can also be managed...'", "author": "Silberfuchs1", "createdAt": "2020-12-11T12:15:46Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+The cache group encryption key is used to encrypt cache data on disk.\n+When a new cache starts, a new encryption key is generated and propagated to all server nodes in the cluster. So each node for the same cache group has the same cache encryption key.\n+To learn more see the link:security/tde[Transparent Data Encryption] page.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the encryption key of the cache group and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or at the end of the crypto period (key validity period).\n+\n+The process of changing the cache encryption key consists of two stages, which are performed sequentially:\n+\n+1. Rotate cache group key, this process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time, which depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero, with each rotation the identifier of the new key is increased.\n+The same cache group has the same encryption key (with the same encryption key ID) on all nodes.\n+\n+NOTE: Secondary rotation of the cache encryption key is possible only after a complete change of the encryption key for this cache group (both stages).\n+\n+== Prerequisites\n+\n+The cluster should be active.\n+\n+== Changing the encryption key\n+\n+Ignite provides the ability to change the cache encryption key using the following interfaces:\n+\n+- link:#command-line-tool[command line tool]\n+- link:#jmx[JMX]\n+- link:#from-code[from code]\n+\n+=== Command line tool\n+\n+Ignite ships a `control.sh|bat` script, located in the `$IGNITE_HOME/bin` folder, that acts as a tool to manage the\n+cache encryption key change process from the command line. The following commands can be used with `control.sh|bat`:\n+\n+[source,shell]\n+----\n+# View the encryption key identifiers of the cache group.\n+control.sh|bat --encryption cache_key_ids cacheGroupName\n+\n+# Change the cache encryption key.\n+control.sh|bat --encryption change_cache_key cacheGroupName\n+----\n+\n+=== JMX\n+\n+You can also change the cache encryption key via the `EncryptionMXBean` interface:\n+\n+[cols=\"1,1\",opts=\"header\"]\n+|===\n+|Method | Description\n+|changeCacheGroupKey(String cacheOrGrpName) | Starts cache encryption key change process.\n+|===\n+\n+=== From code\n+\n+The cache encryption key change process can be managed programmatically:", "originalCommit": "f762cd82733551b8a920e0ef8c8a339df9bc2555", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkwODcxOQ==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r540908719", "bodyText": "'...re-encryption rate...'\n'...or CLI at runtime'", "author": "Silberfuchs1", "createdAt": "2020-12-11T12:20:56Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+The cache group encryption key is used to encrypt cache data on disk.\n+When a new cache starts, a new encryption key is generated and propagated to all server nodes in the cluster. So each node for the same cache group has the same cache encryption key.\n+To learn more see the link:security/tde[Transparent Data Encryption] page.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the encryption key of the cache group and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or at the end of the crypto period (key validity period).\n+\n+The process of changing the cache encryption key consists of two stages, which are performed sequentially:\n+\n+1. Rotate cache group key, this process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time, which depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero, with each rotation the identifier of the new key is increased.\n+The same cache group has the same encryption key (with the same encryption key ID) on all nodes.\n+\n+NOTE: Secondary rotation of the cache encryption key is possible only after a complete change of the encryption key for this cache group (both stages).\n+\n+== Prerequisites\n+\n+The cluster should be active.\n+\n+== Changing the encryption key\n+\n+Ignite provides the ability to change the cache encryption key using the following interfaces:\n+\n+- link:#command-line-tool[command line tool]\n+- link:#jmx[JMX]\n+- link:#from-code[from code]\n+\n+=== Command line tool\n+\n+Ignite ships a `control.sh|bat` script, located in the `$IGNITE_HOME/bin` folder, that acts as a tool to manage the\n+cache encryption key change process from the command line. The following commands can be used with `control.sh|bat`:\n+\n+[source,shell]\n+----\n+# View the encryption key identifiers of the cache group.\n+control.sh|bat --encryption cache_key_ids cacheGroupName\n+\n+# Change the cache encryption key.\n+control.sh|bat --encryption change_cache_key cacheGroupName\n+----\n+\n+=== JMX\n+\n+You can also change the cache encryption key via the `EncryptionMXBean` interface:\n+\n+[cols=\"1,1\",opts=\"header\"]\n+|===\n+|Method | Description\n+|changeCacheGroupKey(String cacheOrGrpName) | Starts cache encryption key change process.\n+|===\n+\n+=== From code\n+\n+The cache encryption key change process can be managed programmatically:\n+\n+[tabs]\n+--\n+tab:Java[]\n+\n+[source, java]\n+----\n+include::{javaCodeDir}/TDE.java[tags=cache-group-key-rotation, indent=0]\n+----\n+--\n+\n+== Managing the re-encryption process\n+\n+Re-encrypting existing data can take a long time. This is a fault-tolerant operation that automatically continues after a node restart.\n+The previous encryption key is automatically removed when all local partitions are encrypted with the new key, and the last link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] segment, which may contain entries encrypted with the previous key, is removed from disk.\n+\n+NOTE: Re-encryption uses link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] for physical recovery and may affect performance of cache operations.\n+\n+There are several options to manage the performance impact of re-encryption:\n+\n+* Limit the rate of re-encryption by using a configuration parameter or by using the CLI at runtime.", "originalCommit": "f762cd82733551b8a920e0ef8c8a339df9bc2555", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkwOTg0NA==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r540909844", "bodyText": "'...pages scanned during...'", "author": "Silberfuchs1", "createdAt": "2020-12-11T12:23:08Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+The cache group encryption key is used to encrypt cache data on disk.\n+When a new cache starts, a new encryption key is generated and propagated to all server nodes in the cluster. So each node for the same cache group has the same cache encryption key.\n+To learn more see the link:security/tde[Transparent Data Encryption] page.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the encryption key of the cache group and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or at the end of the crypto period (key validity period).\n+\n+The process of changing the cache encryption key consists of two stages, which are performed sequentially:\n+\n+1. Rotate cache group key, this process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time, which depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero, with each rotation the identifier of the new key is increased.\n+The same cache group has the same encryption key (with the same encryption key ID) on all nodes.\n+\n+NOTE: Secondary rotation of the cache encryption key is possible only after a complete change of the encryption key for this cache group (both stages).\n+\n+== Prerequisites\n+\n+The cluster should be active.\n+\n+== Changing the encryption key\n+\n+Ignite provides the ability to change the cache encryption key using the following interfaces:\n+\n+- link:#command-line-tool[command line tool]\n+- link:#jmx[JMX]\n+- link:#from-code[from code]\n+\n+=== Command line tool\n+\n+Ignite ships a `control.sh|bat` script, located in the `$IGNITE_HOME/bin` folder, that acts as a tool to manage the\n+cache encryption key change process from the command line. The following commands can be used with `control.sh|bat`:\n+\n+[source,shell]\n+----\n+# View the encryption key identifiers of the cache group.\n+control.sh|bat --encryption cache_key_ids cacheGroupName\n+\n+# Change the cache encryption key.\n+control.sh|bat --encryption change_cache_key cacheGroupName\n+----\n+\n+=== JMX\n+\n+You can also change the cache encryption key via the `EncryptionMXBean` interface:\n+\n+[cols=\"1,1\",opts=\"header\"]\n+|===\n+|Method | Description\n+|changeCacheGroupKey(String cacheOrGrpName) | Starts cache encryption key change process.\n+|===\n+\n+=== From code\n+\n+The cache encryption key change process can be managed programmatically:\n+\n+[tabs]\n+--\n+tab:Java[]\n+\n+[source, java]\n+----\n+include::{javaCodeDir}/TDE.java[tags=cache-group-key-rotation, indent=0]\n+----\n+--\n+\n+== Managing the re-encryption process\n+\n+Re-encrypting existing data can take a long time. This is a fault-tolerant operation that automatically continues after a node restart.\n+The previous encryption key is automatically removed when all local partitions are encrypted with the new key, and the last link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] segment, which may contain entries encrypted with the previous key, is removed from disk.\n+\n+NOTE: Re-encryption uses link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] for physical recovery and may affect performance of cache operations.\n+\n+There are several options to manage the performance impact of re-encryption:\n+\n+* Limit the rate of re-encryption by using a configuration parameter or by using the CLI at runtime.\n+* Temporarily suspend re-encryption using CLI command.\n+\n+Ignite 2.10 introduces a new configuration section `EncryptionConfiguration`, that is part of `DatastorageConfiguration`.\n+[cols=\"1,1,1\",opts=\"header\"]\n+|===\n+|Property | Default value | Description\n+|reencryptionRateLimit | 0 (unlimited) | Re-encryption rate limit in megabytes per second.\n+|reencryptionBatchSize | 100 | The number of pages that is scanned during re-encryption under checkpoint lock.", "originalCommit": "f762cd82733551b8a920e0ef8c8a339df9bc2555", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkxMDA1Ng==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r540910056", "bodyText": "'...the re-encryption rate'", "author": "Silberfuchs1", "createdAt": "2020-12-11T12:23:33Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+The cache group encryption key is used to encrypt cache data on disk.\n+When a new cache starts, a new encryption key is generated and propagated to all server nodes in the cluster. So each node for the same cache group has the same cache encryption key.\n+To learn more see the link:security/tde[Transparent Data Encryption] page.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the encryption key of the cache group and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or at the end of the crypto period (key validity period).\n+\n+The process of changing the cache encryption key consists of two stages, which are performed sequentially:\n+\n+1. Rotate cache group key, this process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time, which depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero, with each rotation the identifier of the new key is increased.\n+The same cache group has the same encryption key (with the same encryption key ID) on all nodes.\n+\n+NOTE: Secondary rotation of the cache encryption key is possible only after a complete change of the encryption key for this cache group (both stages).\n+\n+== Prerequisites\n+\n+The cluster should be active.\n+\n+== Changing the encryption key\n+\n+Ignite provides the ability to change the cache encryption key using the following interfaces:\n+\n+- link:#command-line-tool[command line tool]\n+- link:#jmx[JMX]\n+- link:#from-code[from code]\n+\n+=== Command line tool\n+\n+Ignite ships a `control.sh|bat` script, located in the `$IGNITE_HOME/bin` folder, that acts as a tool to manage the\n+cache encryption key change process from the command line. The following commands can be used with `control.sh|bat`:\n+\n+[source,shell]\n+----\n+# View the encryption key identifiers of the cache group.\n+control.sh|bat --encryption cache_key_ids cacheGroupName\n+\n+# Change the cache encryption key.\n+control.sh|bat --encryption change_cache_key cacheGroupName\n+----\n+\n+=== JMX\n+\n+You can also change the cache encryption key via the `EncryptionMXBean` interface:\n+\n+[cols=\"1,1\",opts=\"header\"]\n+|===\n+|Method | Description\n+|changeCacheGroupKey(String cacheOrGrpName) | Starts cache encryption key change process.\n+|===\n+\n+=== From code\n+\n+The cache encryption key change process can be managed programmatically:\n+\n+[tabs]\n+--\n+tab:Java[]\n+\n+[source, java]\n+----\n+include::{javaCodeDir}/TDE.java[tags=cache-group-key-rotation, indent=0]\n+----\n+--\n+\n+== Managing the re-encryption process\n+\n+Re-encrypting existing data can take a long time. This is a fault-tolerant operation that automatically continues after a node restart.\n+The previous encryption key is automatically removed when all local partitions are encrypted with the new key, and the last link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] segment, which may contain entries encrypted with the previous key, is removed from disk.\n+\n+NOTE: Re-encryption uses link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] for physical recovery and may affect performance of cache operations.\n+\n+There are several options to manage the performance impact of re-encryption:\n+\n+* Limit the rate of re-encryption by using a configuration parameter or by using the CLI at runtime.\n+* Temporarily suspend re-encryption using CLI command.\n+\n+Ignite 2.10 introduces a new configuration section `EncryptionConfiguration`, that is part of `DatastorageConfiguration`.\n+[cols=\"1,1,1\",opts=\"header\"]\n+|===\n+|Property | Default value | Description\n+|reencryptionRateLimit | 0 (unlimited) | Re-encryption rate limit in megabytes per second.\n+|reencryptionBatchSize | 100 | The number of pages that is scanned during re-encryption under checkpoint lock.\n+|===\n+\n+=== Using XML configuration to limit re-encryption rate", "originalCommit": "f762cd82733551b8a920e0ef8c8a339df9bc2555", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkxMDM1NQ==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r540910355", "bodyText": "re-encryption process or re-encryption rate?", "author": "Silberfuchs1", "createdAt": "2020-12-11T12:24:07Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+The cache group encryption key is used to encrypt cache data on disk.\n+When a new cache starts, a new encryption key is generated and propagated to all server nodes in the cluster. So each node for the same cache group has the same cache encryption key.\n+To learn more see the link:security/tde[Transparent Data Encryption] page.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the encryption key of the cache group and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or at the end of the crypto period (key validity period).\n+\n+The process of changing the cache encryption key consists of two stages, which are performed sequentially:\n+\n+1. Rotate cache group key, this process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time, which depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero, with each rotation the identifier of the new key is increased.\n+The same cache group has the same encryption key (with the same encryption key ID) on all nodes.\n+\n+NOTE: Secondary rotation of the cache encryption key is possible only after a complete change of the encryption key for this cache group (both stages).\n+\n+== Prerequisites\n+\n+The cluster should be active.\n+\n+== Changing the encryption key\n+\n+Ignite provides the ability to change the cache encryption key using the following interfaces:\n+\n+- link:#command-line-tool[command line tool]\n+- link:#jmx[JMX]\n+- link:#from-code[from code]\n+\n+=== Command line tool\n+\n+Ignite ships a `control.sh|bat` script, located in the `$IGNITE_HOME/bin` folder, that acts as a tool to manage the\n+cache encryption key change process from the command line. The following commands can be used with `control.sh|bat`:\n+\n+[source,shell]\n+----\n+# View the encryption key identifiers of the cache group.\n+control.sh|bat --encryption cache_key_ids cacheGroupName\n+\n+# Change the cache encryption key.\n+control.sh|bat --encryption change_cache_key cacheGroupName\n+----\n+\n+=== JMX\n+\n+You can also change the cache encryption key via the `EncryptionMXBean` interface:\n+\n+[cols=\"1,1\",opts=\"header\"]\n+|===\n+|Method | Description\n+|changeCacheGroupKey(String cacheOrGrpName) | Starts cache encryption key change process.\n+|===\n+\n+=== From code\n+\n+The cache encryption key change process can be managed programmatically:\n+\n+[tabs]\n+--\n+tab:Java[]\n+\n+[source, java]\n+----\n+include::{javaCodeDir}/TDE.java[tags=cache-group-key-rotation, indent=0]\n+----\n+--\n+\n+== Managing the re-encryption process\n+\n+Re-encrypting existing data can take a long time. This is a fault-tolerant operation that automatically continues after a node restart.\n+The previous encryption key is automatically removed when all local partitions are encrypted with the new key, and the last link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] segment, which may contain entries encrypted with the previous key, is removed from disk.\n+\n+NOTE: Re-encryption uses link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] for physical recovery and may affect performance of cache operations.\n+\n+There are several options to manage the performance impact of re-encryption:\n+\n+* Limit the rate of re-encryption by using a configuration parameter or by using the CLI at runtime.\n+* Temporarily suspend re-encryption using CLI command.\n+\n+Ignite 2.10 introduces a new configuration section `EncryptionConfiguration`, that is part of `DatastorageConfiguration`.\n+[cols=\"1,1,1\",opts=\"header\"]\n+|===\n+|Property | Default value | Description\n+|reencryptionRateLimit | 0 (unlimited) | Re-encryption rate limit in megabytes per second.\n+|reencryptionBatchSize | 100 | The number of pages that is scanned during re-encryption under checkpoint lock.\n+|===\n+\n+=== Using XML configuration to limit re-encryption rate\n+[source, xml]\n+----\n+include::code-snippets/xml/tde.xml[tags=ignite-config;!discovery;!encryption;!cache;!discovery, indent=0]\n+----\n+\n+=== Using CLI to control re-encryption", "originalCommit": "f762cd82733551b8a920e0ef8c8a339df9bc2555", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIyNjc3Mg==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r542226772", "bodyText": "Changed to \"Using CLI to control re-encryption process\"", "author": "xtern", "createdAt": "2020-12-14T09:18:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkxMDM1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU1MDMyMQ==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r541550321", "bodyText": "'...as well as suspend...'", "author": "Silberfuchs1", "createdAt": "2020-12-12T10:33:17Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+The cache group encryption key is used to encrypt cache data on disk.\n+When a new cache starts, a new encryption key is generated and propagated to all server nodes in the cluster. So each node for the same cache group has the same cache encryption key.\n+To learn more see the link:security/tde[Transparent Data Encryption] page.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the encryption key of the cache group and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or at the end of the crypto period (key validity period).\n+\n+The process of changing the cache encryption key consists of two stages, which are performed sequentially:\n+\n+1. Rotate cache group key, this process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time, which depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero, with each rotation the identifier of the new key is increased.\n+The same cache group has the same encryption key (with the same encryption key ID) on all nodes.\n+\n+NOTE: Secondary rotation of the cache encryption key is possible only after a complete change of the encryption key for this cache group (both stages).\n+\n+== Prerequisites\n+\n+The cluster should be active.\n+\n+== Changing the encryption key\n+\n+Ignite provides the ability to change the cache encryption key using the following interfaces:\n+\n+- link:#command-line-tool[command line tool]\n+- link:#jmx[JMX]\n+- link:#from-code[from code]\n+\n+=== Command line tool\n+\n+Ignite ships a `control.sh|bat` script, located in the `$IGNITE_HOME/bin` folder, that acts as a tool to manage the\n+cache encryption key change process from the command line. The following commands can be used with `control.sh|bat`:\n+\n+[source,shell]\n+----\n+# View the encryption key identifiers of the cache group.\n+control.sh|bat --encryption cache_key_ids cacheGroupName\n+\n+# Change the cache encryption key.\n+control.sh|bat --encryption change_cache_key cacheGroupName\n+----\n+\n+=== JMX\n+\n+You can also change the cache encryption key via the `EncryptionMXBean` interface:\n+\n+[cols=\"1,1\",opts=\"header\"]\n+|===\n+|Method | Description\n+|changeCacheGroupKey(String cacheOrGrpName) | Starts cache encryption key change process.\n+|===\n+\n+=== From code\n+\n+The cache encryption key change process can be managed programmatically:\n+\n+[tabs]\n+--\n+tab:Java[]\n+\n+[source, java]\n+----\n+include::{javaCodeDir}/TDE.java[tags=cache-group-key-rotation, indent=0]\n+----\n+--\n+\n+== Managing the re-encryption process\n+\n+Re-encrypting existing data can take a long time. This is a fault-tolerant operation that automatically continues after a node restart.\n+The previous encryption key is automatically removed when all local partitions are encrypted with the new key, and the last link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] segment, which may contain entries encrypted with the previous key, is removed from disk.\n+\n+NOTE: Re-encryption uses link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] for physical recovery and may affect performance of cache operations.\n+\n+There are several options to manage the performance impact of re-encryption:\n+\n+* Limit the rate of re-encryption by using a configuration parameter or by using the CLI at runtime.\n+* Temporarily suspend re-encryption using CLI command.\n+\n+Ignite 2.10 introduces a new configuration section `EncryptionConfiguration`, that is part of `DatastorageConfiguration`.\n+[cols=\"1,1,1\",opts=\"header\"]\n+|===\n+|Property | Default value | Description\n+|reencryptionRateLimit | 0 (unlimited) | Re-encryption rate limit in megabytes per second.\n+|reencryptionBatchSize | 100 | The number of pages that is scanned during re-encryption under checkpoint lock.\n+|===\n+\n+=== Using XML configuration to limit re-encryption rate\n+[source, xml]\n+----\n+include::code-snippets/xml/tde.xml[tags=ignite-config;!discovery;!encryption;!cache;!discovery, indent=0]\n+----\n+\n+=== Using CLI to control re-encryption\n+\n+The `control.sh|bat` script provides the ability to change the re-encryption rate, suspend and resume background re-encryption at runtime.", "originalCommit": "f762cd82733551b8a920e0ef8c8a339df9bc2555", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU1MTQzOQ==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r541551439", "bodyText": "'...re-encryption will continue automatically' --> '...re-encryption will be continued automatically'\n'...and the rate limit will be set to 'unlimited' (by default), or taken from the local XML configuration (if any).'", "author": "Silberfuchs1", "createdAt": "2020-12-12T10:41:18Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+The cache group encryption key is used to encrypt cache data on disk.\n+When a new cache starts, a new encryption key is generated and propagated to all server nodes in the cluster. So each node for the same cache group has the same cache encryption key.\n+To learn more see the link:security/tde[Transparent Data Encryption] page.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the encryption key of the cache group and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or at the end of the crypto period (key validity period).\n+\n+The process of changing the cache encryption key consists of two stages, which are performed sequentially:\n+\n+1. Rotate cache group key, this process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time, which depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero, with each rotation the identifier of the new key is increased.\n+The same cache group has the same encryption key (with the same encryption key ID) on all nodes.\n+\n+NOTE: Secondary rotation of the cache encryption key is possible only after a complete change of the encryption key for this cache group (both stages).\n+\n+== Prerequisites\n+\n+The cluster should be active.\n+\n+== Changing the encryption key\n+\n+Ignite provides the ability to change the cache encryption key using the following interfaces:\n+\n+- link:#command-line-tool[command line tool]\n+- link:#jmx[JMX]\n+- link:#from-code[from code]\n+\n+=== Command line tool\n+\n+Ignite ships a `control.sh|bat` script, located in the `$IGNITE_HOME/bin` folder, that acts as a tool to manage the\n+cache encryption key change process from the command line. The following commands can be used with `control.sh|bat`:\n+\n+[source,shell]\n+----\n+# View the encryption key identifiers of the cache group.\n+control.sh|bat --encryption cache_key_ids cacheGroupName\n+\n+# Change the cache encryption key.\n+control.sh|bat --encryption change_cache_key cacheGroupName\n+----\n+\n+=== JMX\n+\n+You can also change the cache encryption key via the `EncryptionMXBean` interface:\n+\n+[cols=\"1,1\",opts=\"header\"]\n+|===\n+|Method | Description\n+|changeCacheGroupKey(String cacheOrGrpName) | Starts cache encryption key change process.\n+|===\n+\n+=== From code\n+\n+The cache encryption key change process can be managed programmatically:\n+\n+[tabs]\n+--\n+tab:Java[]\n+\n+[source, java]\n+----\n+include::{javaCodeDir}/TDE.java[tags=cache-group-key-rotation, indent=0]\n+----\n+--\n+\n+== Managing the re-encryption process\n+\n+Re-encrypting existing data can take a long time. This is a fault-tolerant operation that automatically continues after a node restart.\n+The previous encryption key is automatically removed when all local partitions are encrypted with the new key, and the last link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] segment, which may contain entries encrypted with the previous key, is removed from disk.\n+\n+NOTE: Re-encryption uses link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] for physical recovery and may affect performance of cache operations.\n+\n+There are several options to manage the performance impact of re-encryption:\n+\n+* Limit the rate of re-encryption by using a configuration parameter or by using the CLI at runtime.\n+* Temporarily suspend re-encryption using CLI command.\n+\n+Ignite 2.10 introduces a new configuration section `EncryptionConfiguration`, that is part of `DatastorageConfiguration`.\n+[cols=\"1,1,1\",opts=\"header\"]\n+|===\n+|Property | Default value | Description\n+|reencryptionRateLimit | 0 (unlimited) | Re-encryption rate limit in megabytes per second.\n+|reencryptionBatchSize | 100 | The number of pages that is scanned during re-encryption under checkpoint lock.\n+|===\n+\n+=== Using XML configuration to limit re-encryption rate\n+[source, xml]\n+----\n+include::code-snippets/xml/tde.xml[tags=ignite-config;!discovery;!encryption;!cache;!discovery, indent=0]\n+----\n+\n+=== Using CLI to control re-encryption\n+\n+The `control.sh|bat` script provides the ability to change the re-encryption rate, suspend and resume background re-encryption at runtime.\n+\n+NOTE: After the node restarts, the suspended background re-encryption will continue automatically, and the rate limit will be set from the local XML configuration (if any) or set to unlimited rate (default).", "originalCommit": "f762cd82733551b8a920e0ef8c8a339df9bc2555", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU1MTUyOA==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r541551528", "bodyText": "'View the cache group re-encryption status.'", "author": "Silberfuchs1", "createdAt": "2020-12-12T10:41:56Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+The cache group encryption key is used to encrypt cache data on disk.\n+When a new cache starts, a new encryption key is generated and propagated to all server nodes in the cluster. So each node for the same cache group has the same cache encryption key.\n+To learn more see the link:security/tde[Transparent Data Encryption] page.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the encryption key of the cache group and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or at the end of the crypto period (key validity period).\n+\n+The process of changing the cache encryption key consists of two stages, which are performed sequentially:\n+\n+1. Rotate cache group key, this process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time, which depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero, with each rotation the identifier of the new key is increased.\n+The same cache group has the same encryption key (with the same encryption key ID) on all nodes.\n+\n+NOTE: Secondary rotation of the cache encryption key is possible only after a complete change of the encryption key for this cache group (both stages).\n+\n+== Prerequisites\n+\n+The cluster should be active.\n+\n+== Changing the encryption key\n+\n+Ignite provides the ability to change the cache encryption key using the following interfaces:\n+\n+- link:#command-line-tool[command line tool]\n+- link:#jmx[JMX]\n+- link:#from-code[from code]\n+\n+=== Command line tool\n+\n+Ignite ships a `control.sh|bat` script, located in the `$IGNITE_HOME/bin` folder, that acts as a tool to manage the\n+cache encryption key change process from the command line. The following commands can be used with `control.sh|bat`:\n+\n+[source,shell]\n+----\n+# View the encryption key identifiers of the cache group.\n+control.sh|bat --encryption cache_key_ids cacheGroupName\n+\n+# Change the cache encryption key.\n+control.sh|bat --encryption change_cache_key cacheGroupName\n+----\n+\n+=== JMX\n+\n+You can also change the cache encryption key via the `EncryptionMXBean` interface:\n+\n+[cols=\"1,1\",opts=\"header\"]\n+|===\n+|Method | Description\n+|changeCacheGroupKey(String cacheOrGrpName) | Starts cache encryption key change process.\n+|===\n+\n+=== From code\n+\n+The cache encryption key change process can be managed programmatically:\n+\n+[tabs]\n+--\n+tab:Java[]\n+\n+[source, java]\n+----\n+include::{javaCodeDir}/TDE.java[tags=cache-group-key-rotation, indent=0]\n+----\n+--\n+\n+== Managing the re-encryption process\n+\n+Re-encrypting existing data can take a long time. This is a fault-tolerant operation that automatically continues after a node restart.\n+The previous encryption key is automatically removed when all local partitions are encrypted with the new key, and the last link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] segment, which may contain entries encrypted with the previous key, is removed from disk.\n+\n+NOTE: Re-encryption uses link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] for physical recovery and may affect performance of cache operations.\n+\n+There are several options to manage the performance impact of re-encryption:\n+\n+* Limit the rate of re-encryption by using a configuration parameter or by using the CLI at runtime.\n+* Temporarily suspend re-encryption using CLI command.\n+\n+Ignite 2.10 introduces a new configuration section `EncryptionConfiguration`, that is part of `DatastorageConfiguration`.\n+[cols=\"1,1,1\",opts=\"header\"]\n+|===\n+|Property | Default value | Description\n+|reencryptionRateLimit | 0 (unlimited) | Re-encryption rate limit in megabytes per second.\n+|reencryptionBatchSize | 100 | The number of pages that is scanned during re-encryption under checkpoint lock.\n+|===\n+\n+=== Using XML configuration to limit re-encryption rate\n+[source, xml]\n+----\n+include::code-snippets/xml/tde.xml[tags=ignite-config;!discovery;!encryption;!cache;!discovery, indent=0]\n+----\n+\n+=== Using CLI to control re-encryption\n+\n+The `control.sh|bat` script provides the ability to change the re-encryption rate, suspend and resume background re-encryption at runtime.\n+\n+NOTE: After the node restarts, the suspended background re-encryption will continue automatically, and the rate limit will be set from the local XML configuration (if any) or set to unlimited rate (default).\n+\n+[source,shell]\n+----\n+# View the re-encryption status of the cache group.", "originalCommit": "f762cd82733551b8a920e0ef8c8a339df9bc2555", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU1MTc2NQ==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r541551765", "bodyText": "'Set re-encryption rate to 'unlimited' ('0').'", "author": "Silberfuchs1", "createdAt": "2020-12-12T10:43:21Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+The cache group encryption key is used to encrypt cache data on disk.\n+When a new cache starts, a new encryption key is generated and propagated to all server nodes in the cluster. So each node for the same cache group has the same cache encryption key.\n+To learn more see the link:security/tde[Transparent Data Encryption] page.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the encryption key of the cache group and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or at the end of the crypto period (key validity period).\n+\n+The process of changing the cache encryption key consists of two stages, which are performed sequentially:\n+\n+1. Rotate cache group key, this process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time, which depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero, with each rotation the identifier of the new key is increased.\n+The same cache group has the same encryption key (with the same encryption key ID) on all nodes.\n+\n+NOTE: Secondary rotation of the cache encryption key is possible only after a complete change of the encryption key for this cache group (both stages).\n+\n+== Prerequisites\n+\n+The cluster should be active.\n+\n+== Changing the encryption key\n+\n+Ignite provides the ability to change the cache encryption key using the following interfaces:\n+\n+- link:#command-line-tool[command line tool]\n+- link:#jmx[JMX]\n+- link:#from-code[from code]\n+\n+=== Command line tool\n+\n+Ignite ships a `control.sh|bat` script, located in the `$IGNITE_HOME/bin` folder, that acts as a tool to manage the\n+cache encryption key change process from the command line. The following commands can be used with `control.sh|bat`:\n+\n+[source,shell]\n+----\n+# View the encryption key identifiers of the cache group.\n+control.sh|bat --encryption cache_key_ids cacheGroupName\n+\n+# Change the cache encryption key.\n+control.sh|bat --encryption change_cache_key cacheGroupName\n+----\n+\n+=== JMX\n+\n+You can also change the cache encryption key via the `EncryptionMXBean` interface:\n+\n+[cols=\"1,1\",opts=\"header\"]\n+|===\n+|Method | Description\n+|changeCacheGroupKey(String cacheOrGrpName) | Starts cache encryption key change process.\n+|===\n+\n+=== From code\n+\n+The cache encryption key change process can be managed programmatically:\n+\n+[tabs]\n+--\n+tab:Java[]\n+\n+[source, java]\n+----\n+include::{javaCodeDir}/TDE.java[tags=cache-group-key-rotation, indent=0]\n+----\n+--\n+\n+== Managing the re-encryption process\n+\n+Re-encrypting existing data can take a long time. This is a fault-tolerant operation that automatically continues after a node restart.\n+The previous encryption key is automatically removed when all local partitions are encrypted with the new key, and the last link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] segment, which may contain entries encrypted with the previous key, is removed from disk.\n+\n+NOTE: Re-encryption uses link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] for physical recovery and may affect performance of cache operations.\n+\n+There are several options to manage the performance impact of re-encryption:\n+\n+* Limit the rate of re-encryption by using a configuration parameter or by using the CLI at runtime.\n+* Temporarily suspend re-encryption using CLI command.\n+\n+Ignite 2.10 introduces a new configuration section `EncryptionConfiguration`, that is part of `DatastorageConfiguration`.\n+[cols=\"1,1,1\",opts=\"header\"]\n+|===\n+|Property | Default value | Description\n+|reencryptionRateLimit | 0 (unlimited) | Re-encryption rate limit in megabytes per second.\n+|reencryptionBatchSize | 100 | The number of pages that is scanned during re-encryption under checkpoint lock.\n+|===\n+\n+=== Using XML configuration to limit re-encryption rate\n+[source, xml]\n+----\n+include::code-snippets/xml/tde.xml[tags=ignite-config;!discovery;!encryption;!cache;!discovery, indent=0]\n+----\n+\n+=== Using CLI to control re-encryption\n+\n+The `control.sh|bat` script provides the ability to change the re-encryption rate, suspend and resume background re-encryption at runtime.\n+\n+NOTE: After the node restarts, the suspended background re-encryption will continue automatically, and the rate limit will be set from the local XML configuration (if any) or set to unlimited rate (default).\n+\n+[source,shell]\n+----\n+# View the re-encryption status of the cache group.\n+control.sh|bat --encryption reencryption_status cacheGroupName\n+\n+# Suspend re-encryption of the cache group.\n+control.sh|bat --encryption suspend_reencryption cacheGroupName\n+\n+# Resume (suspended) re-encryption of the cache group.\n+control.sh|bat --encryption resume_reencryption cacheGroupName\n+\n+# View the re-encryption rate limit.\n+control.sh|bat --encryption reencryption_rate_limit\n+\n+# Set the re-encryption rate limit to 2.5 MB/s.\n+control.sh|bat --encryption reencryption_rate_limit 2.5\n+\n+# Set re-encryption to an unlimited rate.", "originalCommit": "f762cd82733551b8a920e0ef8c8a339df9bc2555", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU1MTkxOQ==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r541551919", "bodyText": "'...using JMX metrics described in the link:monitoring-metrics/new-metrics#cache-groups[Cache group metrics] section.'", "author": "Silberfuchs1", "createdAt": "2020-12-12T10:44:29Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+The cache group encryption key is used to encrypt cache data on disk.\n+When a new cache starts, a new encryption key is generated and propagated to all server nodes in the cluster. So each node for the same cache group has the same cache encryption key.\n+To learn more see the link:security/tde[Transparent Data Encryption] page.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the encryption key of the cache group and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or at the end of the crypto period (key validity period).\n+\n+The process of changing the cache encryption key consists of two stages, which are performed sequentially:\n+\n+1. Rotate cache group key, this process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time, which depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero, with each rotation the identifier of the new key is increased.\n+The same cache group has the same encryption key (with the same encryption key ID) on all nodes.\n+\n+NOTE: Secondary rotation of the cache encryption key is possible only after a complete change of the encryption key for this cache group (both stages).\n+\n+== Prerequisites\n+\n+The cluster should be active.\n+\n+== Changing the encryption key\n+\n+Ignite provides the ability to change the cache encryption key using the following interfaces:\n+\n+- link:#command-line-tool[command line tool]\n+- link:#jmx[JMX]\n+- link:#from-code[from code]\n+\n+=== Command line tool\n+\n+Ignite ships a `control.sh|bat` script, located in the `$IGNITE_HOME/bin` folder, that acts as a tool to manage the\n+cache encryption key change process from the command line. The following commands can be used with `control.sh|bat`:\n+\n+[source,shell]\n+----\n+# View the encryption key identifiers of the cache group.\n+control.sh|bat --encryption cache_key_ids cacheGroupName\n+\n+# Change the cache encryption key.\n+control.sh|bat --encryption change_cache_key cacheGroupName\n+----\n+\n+=== JMX\n+\n+You can also change the cache encryption key via the `EncryptionMXBean` interface:\n+\n+[cols=\"1,1\",opts=\"header\"]\n+|===\n+|Method | Description\n+|changeCacheGroupKey(String cacheOrGrpName) | Starts cache encryption key change process.\n+|===\n+\n+=== From code\n+\n+The cache encryption key change process can be managed programmatically:\n+\n+[tabs]\n+--\n+tab:Java[]\n+\n+[source, java]\n+----\n+include::{javaCodeDir}/TDE.java[tags=cache-group-key-rotation, indent=0]\n+----\n+--\n+\n+== Managing the re-encryption process\n+\n+Re-encrypting existing data can take a long time. This is a fault-tolerant operation that automatically continues after a node restart.\n+The previous encryption key is automatically removed when all local partitions are encrypted with the new key, and the last link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] segment, which may contain entries encrypted with the previous key, is removed from disk.\n+\n+NOTE: Re-encryption uses link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] for physical recovery and may affect performance of cache operations.\n+\n+There are several options to manage the performance impact of re-encryption:\n+\n+* Limit the rate of re-encryption by using a configuration parameter or by using the CLI at runtime.\n+* Temporarily suspend re-encryption using CLI command.\n+\n+Ignite 2.10 introduces a new configuration section `EncryptionConfiguration`, that is part of `DatastorageConfiguration`.\n+[cols=\"1,1,1\",opts=\"header\"]\n+|===\n+|Property | Default value | Description\n+|reencryptionRateLimit | 0 (unlimited) | Re-encryption rate limit in megabytes per second.\n+|reencryptionBatchSize | 100 | The number of pages that is scanned during re-encryption under checkpoint lock.\n+|===\n+\n+=== Using XML configuration to limit re-encryption rate\n+[source, xml]\n+----\n+include::code-snippets/xml/tde.xml[tags=ignite-config;!discovery;!encryption;!cache;!discovery, indent=0]\n+----\n+\n+=== Using CLI to control re-encryption\n+\n+The `control.sh|bat` script provides the ability to change the re-encryption rate, suspend and resume background re-encryption at runtime.\n+\n+NOTE: After the node restarts, the suspended background re-encryption will continue automatically, and the rate limit will be set from the local XML configuration (if any) or set to unlimited rate (default).\n+\n+[source,shell]\n+----\n+# View the re-encryption status of the cache group.\n+control.sh|bat --encryption reencryption_status cacheGroupName\n+\n+# Suspend re-encryption of the cache group.\n+control.sh|bat --encryption suspend_reencryption cacheGroupName\n+\n+# Resume (suspended) re-encryption of the cache group.\n+control.sh|bat --encryption resume_reencryption cacheGroupName\n+\n+# View the re-encryption rate limit.\n+control.sh|bat --encryption reencryption_rate_limit\n+\n+# Set the re-encryption rate limit to 2.5 MB/s.\n+control.sh|bat --encryption reencryption_rate_limit 2.5\n+\n+# Set re-encryption to an unlimited rate.\n+control.sh|bat --encryption reencryption_rate_limit 0\n+----\n+\n+The re-encryption status can also be obtained using JMX metrics, which are described in the link:monitoring-metrics/new-metrics#cache-groups[Cache group metrics] section.", "originalCommit": "f762cd82733551b8a920e0ef8c8a339df9bc2555", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fe49b59d88678dc6b524fddcfbe1df1bf72f286e", "url": "https://github.com/apache/ignite/commit/fe49b59d88678dc6b524fddcfbe1df1bf72f286e", "message": "IGNITE-13659 Cache encryption key rotation (documentation)", "committedDate": "2020-12-16T15:47:38Z", "type": "commit"}, {"oid": "fff94bd793a8aba96b2268a3b9b90ea22bfbd699", "url": "https://github.com/apache/ignite/commit/fff94bd793a8aba96b2268a3b9b90ea22bfbd699", "message": "IGNITE-13659 Review notes.", "committedDate": "2020-12-16T15:47:38Z", "type": "commit"}, {"oid": "12583e2764eb57b1b42ede5d69dfeb8c50f3194f", "url": "https://github.com/apache/ignite/commit/12583e2764eb57b1b42ede5d69dfeb8c50f3194f", "message": "IGNITE-13659 Review notes.", "committedDate": "2020-12-16T15:47:38Z", "type": "commit"}, {"oid": "72ab0a280390e9ff2a20421596f4d7f0415972c2", "url": "https://github.com/apache/ignite/commit/72ab0a280390e9ff2a20421596f4d7f0415972c2", "message": "IGNITE-13659 Changed subtitle.", "committedDate": "2020-12-16T15:47:39Z", "type": "commit"}, {"oid": "72ab0a280390e9ff2a20421596f4d7f0415972c2", "url": "https://github.com/apache/ignite/commit/72ab0a280390e9ff2a20421596f4d7f0415972c2", "message": "IGNITE-13659 Changed subtitle.", "committedDate": "2020-12-16T15:47:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY1NjkxNA==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r556656914", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // This future will be completed when the new encryption key is set for writing on\n          \n          \n            \n                    // This feature will be completed when the new encryption key is set for writing on", "author": "Nikita-tech-writer", "createdAt": "2021-01-13T16:25:29Z", "path": "docs/_docs/code-snippets/java/src/main/java/org/apache/ignite/snippets/TDE.java", "diffHunk": "@@ -58,6 +58,13 @@ void configuration() {\n         IgniteFuture<Void> future = ignite.encryption().changeMasterKey(\"newMasterKeyName\");\n         //end::master-key-rotation[]\n \n+        //tag::cache-group-key-rotation[]\n+        // Starts cache group encryption key change process.\n+        // This future will be completed when the new encryption key is set for writing on", "originalCommit": "72ab0a280390e9ff2a20421596f4d7f0415972c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc3MjAyOQ==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r556772029", "bodyText": "Thanks, but this is not a typo, it refers specifically to \"future\" and not a \"feature\"", "author": "xtern", "createdAt": "2021-01-13T19:22:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY1NjkxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY1NzU0Mg==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r556657542", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |ReencryptionBytesLeft |long| The number of bytes left for re-ecryption.\n          \n          \n            \n            |ReencryptionBytesLeft |long| The number of bytes left for re-encryption.", "author": "Nikita-tech-writer", "createdAt": "2021-01-13T16:26:16Z", "path": "docs/_docs/monitoring-metrics/new-metrics.adoc", "diffHunk": "@@ -129,6 +129,8 @@ Register name: `cacheGroups.{group_name}`\n |StorageSize |long|    Storage space allocated for group, in bytes.\n |TotalAllocatedPages |long|    Cache group total allocated pages.\n |TotalAllocatedSize  |long|    Total size of memory allocated for group, in bytes.\n+|ReencryptionBytesLeft |long| The number of bytes left for re-ecryption.", "originalCommit": "72ab0a280390e9ff2a20421596f4d7f0415972c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY1ODUyMg==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r556658522", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Cache group encryption key is used to encrypt cache data on disk.\n          \n          \n            \n            Cache group encryption key is used to encrypt cache data on the disk.", "author": "Nikita-tech-writer", "createdAt": "2021-01-13T16:27:30Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+Cache group encryption key is used to encrypt cache data on disk.", "originalCommit": "72ab0a280390e9ff2a20421596f4d7f0415972c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY1OTMyNg==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r556659326", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When a user creates a new encrypted cache, a new encryption key is generated and propagated to all server nodes in the cluster. So, each node for the same cache group has the same cache encryption key.\n          \n          \n            \n            When a user creates a new encrypted cache, a new encryption key is generated and propagated to all server nodes in the cluster. So, each node has the same cache encryption key for the same cache group.", "author": "Nikita-tech-writer", "createdAt": "2021-01-13T16:28:31Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+Cache group encryption key is used to encrypt cache data on disk.\n+When a user creates a new encrypted cache, a new encryption key is generated and propagated to all server nodes in the cluster. So, each node for the same cache group has the same cache encryption key.", "originalCommit": "72ab0a280390e9ff2a20421596f4d7f0415972c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY2MDkwNg==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r556660906", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            See link:security/tde[Transparent Data Encryption] to learn more.\n          \n          \n            \n            See link:security/tde[Transparent Data Encryption] for more detail.", "author": "Nikita-tech-writer", "createdAt": "2021-01-13T16:30:38Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+Cache group encryption key is used to encrypt cache data on disk.\n+When a user creates a new encrypted cache, a new encryption key is generated and propagated to all server nodes in the cluster. So, each node for the same cache group has the same cache encryption key.\n+See link:security/tde[Transparent Data Encryption] to learn more.", "originalCommit": "72ab0a280390e9ff2a20421596f4d7f0415972c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY2MTk2Mg==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r556661962", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            It allows users to change the cache group encryption key and re-encrypt existing data at runtime.\n          \n          \n            \n            It allows to change the cache group encryption key and re-encrypt existing data at runtime.", "author": "Nikita-tech-writer", "createdAt": "2021-01-13T16:32:05Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+Cache group encryption key is used to encrypt cache data on disk.\n+When a user creates a new encrypted cache, a new encryption key is generated and propagated to all server nodes in the cluster. So, each node for the same cache group has the same cache encryption key.\n+See link:security/tde[Transparent Data Encryption] to learn more.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the cache group encryption key and re-encrypt existing data at runtime.", "originalCommit": "72ab0a280390e9ff2a20421596f4d7f0415972c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY2NTQ2NQ==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r556665465", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Rotation of the cache encryption key is required if this key has been compromised or if the crypto period (key validity period) has ended.\n          \n          \n            \n            Rotation of the cache encryption key is required when the key is compromised or the crypto period (key validity period) is ended.", "author": "Nikita-tech-writer", "createdAt": "2021-01-13T16:36:44Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+Cache group encryption key is used to encrypt cache data on disk.\n+When a user creates a new encrypted cache, a new encryption key is generated and propagated to all server nodes in the cluster. So, each node for the same cache group has the same cache encryption key.\n+See link:security/tde[Transparent Data Encryption] to learn more.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the cache group encryption key and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or if the crypto period (key validity period) has ended.", "originalCommit": "72ab0a280390e9ff2a20421596f4d7f0415972c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY2NjkzMQ==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r556666931", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. Rotate cache group key. This process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n          \n          \n            \n            1. Rotate cache group key. This process adds a new encryption key for the specified cache group or groups on each server node and sets it to write new data.", "author": "Nikita-tech-writer", "createdAt": "2021-01-13T16:38:35Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+Cache group encryption key is used to encrypt cache data on disk.\n+When a user creates a new encrypted cache, a new encryption key is generated and propagated to all server nodes in the cluster. So, each node for the same cache group has the same cache encryption key.\n+See link:security/tde[Transparent Data Encryption] to learn more.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the cache group encryption key and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or if the crypto period (key validity period) has ended.\n+\n+The process of changing the cache encryption key includes two sequential stages:\n+\n+1. Rotate cache group key. This process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.", "originalCommit": "72ab0a280390e9ff2a20421596f4d7f0415972c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY2ODMzOQ==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r556668339", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The second stage can take a long time. It depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n          \n          \n            \n            The second stage can take a while. It depends on the amount of existing data. During this period, the old key is kept to read the archived data.", "author": "Nikita-tech-writer", "createdAt": "2021-01-13T16:40:23Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+Cache group encryption key is used to encrypt cache data on disk.\n+When a user creates a new encrypted cache, a new encryption key is generated and propagated to all server nodes in the cluster. So, each node for the same cache group has the same cache encryption key.\n+See link:security/tde[Transparent Data Encryption] to learn more.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the cache group encryption key and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or if the crypto period (key validity period) has ended.\n+\n+The process of changing the cache encryption key includes two sequential stages:\n+\n+1. Rotate cache group key. This process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time. It depends on the amount of existing data. During this period the old key will be kept to read the archived data.", "originalCommit": "72ab0a280390e9ff2a20421596f4d7f0415972c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY2OTI4Ng==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r556669286", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero. The identifier of the new key increases with each rotation.\n          \n          \n            \n            To understand what key the data is encrypted with, each encryption key has an _identifier_. By default, it is equal to zero. The identifier value of the new key increases with each new rotation.", "author": "Nikita-tech-writer", "createdAt": "2021-01-13T16:41:37Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+Cache group encryption key is used to encrypt cache data on disk.\n+When a user creates a new encrypted cache, a new encryption key is generated and propagated to all server nodes in the cluster. So, each node for the same cache group has the same cache encryption key.\n+See link:security/tde[Transparent Data Encryption] to learn more.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the cache group encryption key and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or if the crypto period (key validity period) has ended.\n+\n+The process of changing the cache encryption key includes two sequential stages:\n+\n+1. Rotate cache group key. This process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time. It depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero. The identifier of the new key increases with each rotation.", "originalCommit": "72ab0a280390e9ff2a20421596f4d7f0415972c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY3MDE2Mg==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r556670162", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            == Changing the encryption key\n          \n          \n            \n            == Changing the Encryption Key", "author": "Nikita-tech-writer", "createdAt": "2021-01-13T16:42:46Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+Cache group encryption key is used to encrypt cache data on disk.\n+When a user creates a new encrypted cache, a new encryption key is generated and propagated to all server nodes in the cluster. So, each node for the same cache group has the same cache encryption key.\n+See link:security/tde[Transparent Data Encryption] to learn more.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the cache group encryption key and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or if the crypto period (key validity period) has ended.\n+\n+The process of changing the cache encryption key includes two sequential stages:\n+\n+1. Rotate cache group key. This process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time. It depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero. The identifier of the new key increases with each rotation.\n+The encryption key (as well as encryption key ID) is the same for all nodes in a cache group.\n+\n+NOTE: Secondary rotation of the cache encryption key is possible only after a complete change of the encryption key for a cache group (both stages).\n+\n+== Prerequisites\n+\n+The cluster should be active.\n+\n+== Changing the encryption key", "originalCommit": "72ab0a280390e9ff2a20421596f4d7f0415972c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY3MDQ4NA==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r556670484", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            === Command line tool\n          \n          \n            \n            === Command Line Tool", "author": "Nikita-tech-writer", "createdAt": "2021-01-13T16:43:09Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+Cache group encryption key is used to encrypt cache data on disk.\n+When a user creates a new encrypted cache, a new encryption key is generated and propagated to all server nodes in the cluster. So, each node for the same cache group has the same cache encryption key.\n+See link:security/tde[Transparent Data Encryption] to learn more.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the cache group encryption key and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or if the crypto period (key validity period) has ended.\n+\n+The process of changing the cache encryption key includes two sequential stages:\n+\n+1. Rotate cache group key. This process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time. It depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero. The identifier of the new key increases with each rotation.\n+The encryption key (as well as encryption key ID) is the same for all nodes in a cache group.\n+\n+NOTE: Secondary rotation of the cache encryption key is possible only after a complete change of the encryption key for a cache group (both stages).\n+\n+== Prerequisites\n+\n+The cluster should be active.\n+\n+== Changing the encryption key\n+\n+Ignite provides the ability to change the cache encryption key using the following interfaces:\n+\n+- link:#command-line-tool[command line tool]\n+- link:#jmx[JMX]\n+- link:#from-code[from code]\n+\n+=== Command line tool", "originalCommit": "72ab0a280390e9ff2a20421596f4d7f0415972c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY3MTE5NA==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r556671194", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            === From code\n          \n          \n            \n            === From Code", "author": "Nikita-tech-writer", "createdAt": "2021-01-13T16:44:03Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+Cache group encryption key is used to encrypt cache data on disk.\n+When a user creates a new encrypted cache, a new encryption key is generated and propagated to all server nodes in the cluster. So, each node for the same cache group has the same cache encryption key.\n+See link:security/tde[Transparent Data Encryption] to learn more.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the cache group encryption key and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or if the crypto period (key validity period) has ended.\n+\n+The process of changing the cache encryption key includes two sequential stages:\n+\n+1. Rotate cache group key. This process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time. It depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero. The identifier of the new key increases with each rotation.\n+The encryption key (as well as encryption key ID) is the same for all nodes in a cache group.\n+\n+NOTE: Secondary rotation of the cache encryption key is possible only after a complete change of the encryption key for a cache group (both stages).\n+\n+== Prerequisites\n+\n+The cluster should be active.\n+\n+== Changing the encryption key\n+\n+Ignite provides the ability to change the cache encryption key using the following interfaces:\n+\n+- link:#command-line-tool[command line tool]\n+- link:#jmx[JMX]\n+- link:#from-code[from code]\n+\n+=== Command line tool\n+\n+Ignite shipment includes `control.sh|bat` script, located in the `$IGNITE_HOME/bin` folder, that acts as a tool to manage the\n+cache encryption key change process from the command line. The following commands are used with `control.sh|bat`:\n+\n+[source,shell]\n+----\n+# View the cache group encryption key identifiers.\n+control.sh|bat --encryption cache_key_ids cacheGroupName\n+\n+# Change the cache encryption key.\n+control.sh|bat --encryption change_cache_key cacheGroupName\n+----\n+\n+=== JMX\n+\n+You can also change the cache encryption key via the `EncryptionMXBean` interface:\n+\n+[cols=\"1,1\",opts=\"header\"]\n+|===\n+|Method | Description\n+|changeCacheGroupKey(String cacheOrGrpName) | Starts cache encryption key change process.\n+|===\n+\n+=== From code", "originalCommit": "72ab0a280390e9ff2a20421596f4d7f0415972c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY3Mjg5NA==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r556672894", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The cache encryption key change process can also be managed programmatically:\n          \n          \n            \n            The cache encryption key change process can also be managed directly in the code:", "author": "Nikita-tech-writer", "createdAt": "2021-01-13T16:46:21Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+Cache group encryption key is used to encrypt cache data on disk.\n+When a user creates a new encrypted cache, a new encryption key is generated and propagated to all server nodes in the cluster. So, each node for the same cache group has the same cache encryption key.\n+See link:security/tde[Transparent Data Encryption] to learn more.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the cache group encryption key and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or if the crypto period (key validity period) has ended.\n+\n+The process of changing the cache encryption key includes two sequential stages:\n+\n+1. Rotate cache group key. This process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time. It depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero. The identifier of the new key increases with each rotation.\n+The encryption key (as well as encryption key ID) is the same for all nodes in a cache group.\n+\n+NOTE: Secondary rotation of the cache encryption key is possible only after a complete change of the encryption key for a cache group (both stages).\n+\n+== Prerequisites\n+\n+The cluster should be active.\n+\n+== Changing the encryption key\n+\n+Ignite provides the ability to change the cache encryption key using the following interfaces:\n+\n+- link:#command-line-tool[command line tool]\n+- link:#jmx[JMX]\n+- link:#from-code[from code]\n+\n+=== Command line tool\n+\n+Ignite shipment includes `control.sh|bat` script, located in the `$IGNITE_HOME/bin` folder, that acts as a tool to manage the\n+cache encryption key change process from the command line. The following commands are used with `control.sh|bat`:\n+\n+[source,shell]\n+----\n+# View the cache group encryption key identifiers.\n+control.sh|bat --encryption cache_key_ids cacheGroupName\n+\n+# Change the cache encryption key.\n+control.sh|bat --encryption change_cache_key cacheGroupName\n+----\n+\n+=== JMX\n+\n+You can also change the cache encryption key via the `EncryptionMXBean` interface:\n+\n+[cols=\"1,1\",opts=\"header\"]\n+|===\n+|Method | Description\n+|changeCacheGroupKey(String cacheOrGrpName) | Starts cache encryption key change process.\n+|===\n+\n+=== From code\n+\n+The cache encryption key change process can also be managed programmatically:", "originalCommit": "72ab0a280390e9ff2a20421596f4d7f0415972c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY3MzA5OQ==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r556673099", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            == Managing re-encryption\n          \n          \n            \n            == Managing Re-encryption", "author": "Nikita-tech-writer", "createdAt": "2021-01-13T16:46:37Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+Cache group encryption key is used to encrypt cache data on disk.\n+When a user creates a new encrypted cache, a new encryption key is generated and propagated to all server nodes in the cluster. So, each node for the same cache group has the same cache encryption key.\n+See link:security/tde[Transparent Data Encryption] to learn more.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the cache group encryption key and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or if the crypto period (key validity period) has ended.\n+\n+The process of changing the cache encryption key includes two sequential stages:\n+\n+1. Rotate cache group key. This process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time. It depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero. The identifier of the new key increases with each rotation.\n+The encryption key (as well as encryption key ID) is the same for all nodes in a cache group.\n+\n+NOTE: Secondary rotation of the cache encryption key is possible only after a complete change of the encryption key for a cache group (both stages).\n+\n+== Prerequisites\n+\n+The cluster should be active.\n+\n+== Changing the encryption key\n+\n+Ignite provides the ability to change the cache encryption key using the following interfaces:\n+\n+- link:#command-line-tool[command line tool]\n+- link:#jmx[JMX]\n+- link:#from-code[from code]\n+\n+=== Command line tool\n+\n+Ignite shipment includes `control.sh|bat` script, located in the `$IGNITE_HOME/bin` folder, that acts as a tool to manage the\n+cache encryption key change process from the command line. The following commands are used with `control.sh|bat`:\n+\n+[source,shell]\n+----\n+# View the cache group encryption key identifiers.\n+control.sh|bat --encryption cache_key_ids cacheGroupName\n+\n+# Change the cache encryption key.\n+control.sh|bat --encryption change_cache_key cacheGroupName\n+----\n+\n+=== JMX\n+\n+You can also change the cache encryption key via the `EncryptionMXBean` interface:\n+\n+[cols=\"1,1\",opts=\"header\"]\n+|===\n+|Method | Description\n+|changeCacheGroupKey(String cacheOrGrpName) | Starts cache encryption key change process.\n+|===\n+\n+=== From code\n+\n+The cache encryption key change process can also be managed programmatically:\n+\n+[tabs]\n+--\n+tab:Java[]\n+\n+[source, java]\n+----\n+include::{javaCodeDir}/TDE.java[tags=cache-group-key-rotation, indent=0]\n+----\n+--\n+\n+== Managing re-encryption", "originalCommit": "72ab0a280390e9ff2a20421596f4d7f0415972c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY3MzQ3NQ==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r556673475", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Re-encrypting existing data can take a long time. This is a fault-tolerant operation that automatically continues after a node restart.\n          \n          \n            \n            Re-encrypting existing data can take a while. This is a fault-tolerant operation that automatically continues after a node restart.", "author": "Nikita-tech-writer", "createdAt": "2021-01-13T16:47:08Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+Cache group encryption key is used to encrypt cache data on disk.\n+When a user creates a new encrypted cache, a new encryption key is generated and propagated to all server nodes in the cluster. So, each node for the same cache group has the same cache encryption key.\n+See link:security/tde[Transparent Data Encryption] to learn more.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the cache group encryption key and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or if the crypto period (key validity period) has ended.\n+\n+The process of changing the cache encryption key includes two sequential stages:\n+\n+1. Rotate cache group key. This process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time. It depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero. The identifier of the new key increases with each rotation.\n+The encryption key (as well as encryption key ID) is the same for all nodes in a cache group.\n+\n+NOTE: Secondary rotation of the cache encryption key is possible only after a complete change of the encryption key for a cache group (both stages).\n+\n+== Prerequisites\n+\n+The cluster should be active.\n+\n+== Changing the encryption key\n+\n+Ignite provides the ability to change the cache encryption key using the following interfaces:\n+\n+- link:#command-line-tool[command line tool]\n+- link:#jmx[JMX]\n+- link:#from-code[from code]\n+\n+=== Command line tool\n+\n+Ignite shipment includes `control.sh|bat` script, located in the `$IGNITE_HOME/bin` folder, that acts as a tool to manage the\n+cache encryption key change process from the command line. The following commands are used with `control.sh|bat`:\n+\n+[source,shell]\n+----\n+# View the cache group encryption key identifiers.\n+control.sh|bat --encryption cache_key_ids cacheGroupName\n+\n+# Change the cache encryption key.\n+control.sh|bat --encryption change_cache_key cacheGroupName\n+----\n+\n+=== JMX\n+\n+You can also change the cache encryption key via the `EncryptionMXBean` interface:\n+\n+[cols=\"1,1\",opts=\"header\"]\n+|===\n+|Method | Description\n+|changeCacheGroupKey(String cacheOrGrpName) | Starts cache encryption key change process.\n+|===\n+\n+=== From code\n+\n+The cache encryption key change process can also be managed programmatically:\n+\n+[tabs]\n+--\n+tab:Java[]\n+\n+[source, java]\n+----\n+include::{javaCodeDir}/TDE.java[tags=cache-group-key-rotation, indent=0]\n+----\n+--\n+\n+== Managing re-encryption\n+\n+Re-encrypting existing data can take a long time. This is a fault-tolerant operation that automatically continues after a node restart.", "originalCommit": "72ab0a280390e9ff2a20421596f4d7f0415972c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY3NDI3OA==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r556674278", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Ignite 2.10 introduces a new configuration section `EncryptionConfiguration`, that is part of `DatastorageConfiguration`.\n          \n          \n            \n            Ignite 2.10 introduces a new configuration section `EncryptionConfiguration`, that is a part of `DatastorageConfiguration`.", "author": "Nikita-tech-writer", "createdAt": "2021-01-13T16:48:13Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+Cache group encryption key is used to encrypt cache data on disk.\n+When a user creates a new encrypted cache, a new encryption key is generated and propagated to all server nodes in the cluster. So, each node for the same cache group has the same cache encryption key.\n+See link:security/tde[Transparent Data Encryption] to learn more.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the cache group encryption key and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or if the crypto period (key validity period) has ended.\n+\n+The process of changing the cache encryption key includes two sequential stages:\n+\n+1. Rotate cache group key. This process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time. It depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero. The identifier of the new key increases with each rotation.\n+The encryption key (as well as encryption key ID) is the same for all nodes in a cache group.\n+\n+NOTE: Secondary rotation of the cache encryption key is possible only after a complete change of the encryption key for a cache group (both stages).\n+\n+== Prerequisites\n+\n+The cluster should be active.\n+\n+== Changing the encryption key\n+\n+Ignite provides the ability to change the cache encryption key using the following interfaces:\n+\n+- link:#command-line-tool[command line tool]\n+- link:#jmx[JMX]\n+- link:#from-code[from code]\n+\n+=== Command line tool\n+\n+Ignite shipment includes `control.sh|bat` script, located in the `$IGNITE_HOME/bin` folder, that acts as a tool to manage the\n+cache encryption key change process from the command line. The following commands are used with `control.sh|bat`:\n+\n+[source,shell]\n+----\n+# View the cache group encryption key identifiers.\n+control.sh|bat --encryption cache_key_ids cacheGroupName\n+\n+# Change the cache encryption key.\n+control.sh|bat --encryption change_cache_key cacheGroupName\n+----\n+\n+=== JMX\n+\n+You can also change the cache encryption key via the `EncryptionMXBean` interface:\n+\n+[cols=\"1,1\",opts=\"header\"]\n+|===\n+|Method | Description\n+|changeCacheGroupKey(String cacheOrGrpName) | Starts cache encryption key change process.\n+|===\n+\n+=== From code\n+\n+The cache encryption key change process can also be managed programmatically:\n+\n+[tabs]\n+--\n+tab:Java[]\n+\n+[source, java]\n+----\n+include::{javaCodeDir}/TDE.java[tags=cache-group-key-rotation, indent=0]\n+----\n+--\n+\n+== Managing re-encryption\n+\n+Re-encrypting existing data can take a long time. This is a fault-tolerant operation that automatically continues after a node restart.\n+The previous encryption key is automatically removed when all local partitions are encrypted with the new key, and the last link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] segment, which may contain entries encrypted with the previous key, is removed from disk.\n+\n+NOTE: Re-encryption uses link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] for physical recovery and may affect performance of cache operations.\n+\n+There are several options to manage the performance impact of re-encryption:\n+\n+* Limit the re-encryption rate using a configuration parameter or CLI at runtime.\n+* Temporarily suspend re-encryption using CLI command.\n+\n+Ignite 2.10 introduces a new configuration section `EncryptionConfiguration`, that is part of `DatastorageConfiguration`.", "originalCommit": "72ab0a280390e9ff2a20421596f4d7f0415972c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY3NDk3MQ==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r556674971", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            === Using XML configuration to limit the re-encryption rate\n          \n          \n            \n            === Using XML Configuration to Limit the Re-encryption Rate", "author": "Nikita-tech-writer", "createdAt": "2021-01-13T16:49:14Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+Cache group encryption key is used to encrypt cache data on disk.\n+When a user creates a new encrypted cache, a new encryption key is generated and propagated to all server nodes in the cluster. So, each node for the same cache group has the same cache encryption key.\n+See link:security/tde[Transparent Data Encryption] to learn more.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the cache group encryption key and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or if the crypto period (key validity period) has ended.\n+\n+The process of changing the cache encryption key includes two sequential stages:\n+\n+1. Rotate cache group key. This process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time. It depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero. The identifier of the new key increases with each rotation.\n+The encryption key (as well as encryption key ID) is the same for all nodes in a cache group.\n+\n+NOTE: Secondary rotation of the cache encryption key is possible only after a complete change of the encryption key for a cache group (both stages).\n+\n+== Prerequisites\n+\n+The cluster should be active.\n+\n+== Changing the encryption key\n+\n+Ignite provides the ability to change the cache encryption key using the following interfaces:\n+\n+- link:#command-line-tool[command line tool]\n+- link:#jmx[JMX]\n+- link:#from-code[from code]\n+\n+=== Command line tool\n+\n+Ignite shipment includes `control.sh|bat` script, located in the `$IGNITE_HOME/bin` folder, that acts as a tool to manage the\n+cache encryption key change process from the command line. The following commands are used with `control.sh|bat`:\n+\n+[source,shell]\n+----\n+# View the cache group encryption key identifiers.\n+control.sh|bat --encryption cache_key_ids cacheGroupName\n+\n+# Change the cache encryption key.\n+control.sh|bat --encryption change_cache_key cacheGroupName\n+----\n+\n+=== JMX\n+\n+You can also change the cache encryption key via the `EncryptionMXBean` interface:\n+\n+[cols=\"1,1\",opts=\"header\"]\n+|===\n+|Method | Description\n+|changeCacheGroupKey(String cacheOrGrpName) | Starts cache encryption key change process.\n+|===\n+\n+=== From code\n+\n+The cache encryption key change process can also be managed programmatically:\n+\n+[tabs]\n+--\n+tab:Java[]\n+\n+[source, java]\n+----\n+include::{javaCodeDir}/TDE.java[tags=cache-group-key-rotation, indent=0]\n+----\n+--\n+\n+== Managing re-encryption\n+\n+Re-encrypting existing data can take a long time. This is a fault-tolerant operation that automatically continues after a node restart.\n+The previous encryption key is automatically removed when all local partitions are encrypted with the new key, and the last link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] segment, which may contain entries encrypted with the previous key, is removed from disk.\n+\n+NOTE: Re-encryption uses link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] for physical recovery and may affect performance of cache operations.\n+\n+There are several options to manage the performance impact of re-encryption:\n+\n+* Limit the re-encryption rate using a configuration parameter or CLI at runtime.\n+* Temporarily suspend re-encryption using CLI command.\n+\n+Ignite 2.10 introduces a new configuration section `EncryptionConfiguration`, that is part of `DatastorageConfiguration`.\n+[cols=\"1,1,1\",opts=\"header\"]\n+|===\n+|Property | Default value | Description\n+|reencryptionRateLimit | 0 (unlimited) | Re-encryption rate limit in megabytes per second.\n+|reencryptionBatchSize | 100 | The number of pages scanned during re-encryption under checkpoint lock.\n+|===\n+\n+=== Using XML configuration to limit the re-encryption rate", "originalCommit": "72ab0a280390e9ff2a20421596f4d7f0415972c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY3NTIzMg==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r556675232", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            === Using CLI to control re-encryption process\n          \n          \n            \n            === Using CLI to Control Re-encryption Process", "author": "Nikita-tech-writer", "createdAt": "2021-01-13T16:49:38Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+Cache group encryption key is used to encrypt cache data on disk.\n+When a user creates a new encrypted cache, a new encryption key is generated and propagated to all server nodes in the cluster. So, each node for the same cache group has the same cache encryption key.\n+See link:security/tde[Transparent Data Encryption] to learn more.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the cache group encryption key and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or if the crypto period (key validity period) has ended.\n+\n+The process of changing the cache encryption key includes two sequential stages:\n+\n+1. Rotate cache group key. This process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time. It depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero. The identifier of the new key increases with each rotation.\n+The encryption key (as well as encryption key ID) is the same for all nodes in a cache group.\n+\n+NOTE: Secondary rotation of the cache encryption key is possible only after a complete change of the encryption key for a cache group (both stages).\n+\n+== Prerequisites\n+\n+The cluster should be active.\n+\n+== Changing the encryption key\n+\n+Ignite provides the ability to change the cache encryption key using the following interfaces:\n+\n+- link:#command-line-tool[command line tool]\n+- link:#jmx[JMX]\n+- link:#from-code[from code]\n+\n+=== Command line tool\n+\n+Ignite shipment includes `control.sh|bat` script, located in the `$IGNITE_HOME/bin` folder, that acts as a tool to manage the\n+cache encryption key change process from the command line. The following commands are used with `control.sh|bat`:\n+\n+[source,shell]\n+----\n+# View the cache group encryption key identifiers.\n+control.sh|bat --encryption cache_key_ids cacheGroupName\n+\n+# Change the cache encryption key.\n+control.sh|bat --encryption change_cache_key cacheGroupName\n+----\n+\n+=== JMX\n+\n+You can also change the cache encryption key via the `EncryptionMXBean` interface:\n+\n+[cols=\"1,1\",opts=\"header\"]\n+|===\n+|Method | Description\n+|changeCacheGroupKey(String cacheOrGrpName) | Starts cache encryption key change process.\n+|===\n+\n+=== From code\n+\n+The cache encryption key change process can also be managed programmatically:\n+\n+[tabs]\n+--\n+tab:Java[]\n+\n+[source, java]\n+----\n+include::{javaCodeDir}/TDE.java[tags=cache-group-key-rotation, indent=0]\n+----\n+--\n+\n+== Managing re-encryption\n+\n+Re-encrypting existing data can take a long time. This is a fault-tolerant operation that automatically continues after a node restart.\n+The previous encryption key is automatically removed when all local partitions are encrypted with the new key, and the last link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] segment, which may contain entries encrypted with the previous key, is removed from disk.\n+\n+NOTE: Re-encryption uses link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] for physical recovery and may affect performance of cache operations.\n+\n+There are several options to manage the performance impact of re-encryption:\n+\n+* Limit the re-encryption rate using a configuration parameter or CLI at runtime.\n+* Temporarily suspend re-encryption using CLI command.\n+\n+Ignite 2.10 introduces a new configuration section `EncryptionConfiguration`, that is part of `DatastorageConfiguration`.\n+[cols=\"1,1,1\",opts=\"header\"]\n+|===\n+|Property | Default value | Description\n+|reencryptionRateLimit | 0 (unlimited) | Re-encryption rate limit in megabytes per second.\n+|reencryptionBatchSize | 100 | The number of pages scanned during re-encryption under checkpoint lock.\n+|===\n+\n+=== Using XML configuration to limit the re-encryption rate\n+[source, xml]\n+----\n+include::code-snippets/xml/tde.xml[tags=ignite-config;!discovery;!encryption;!cache;!discovery, indent=0]\n+----\n+\n+=== Using CLI to control re-encryption process", "originalCommit": "72ab0a280390e9ff2a20421596f4d7f0415972c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY3Njc1NQ==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r556676755", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: After the node restarts, the suspended background re-encryption will be continued automatically, and the rate limit will be set to 'unlimited' (by default), or taken from the local XML configuration (if any).\n          \n          \n            \n            NOTE: After the node restarts, the suspended background re-encryption is continued automatically, and the rate limit is set to 'unlimited' (by default), or taken from the local XML configuration (if any).", "author": "Nikita-tech-writer", "createdAt": "2021-01-13T16:51:48Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+Cache group encryption key is used to encrypt cache data on disk.\n+When a user creates a new encrypted cache, a new encryption key is generated and propagated to all server nodes in the cluster. So, each node for the same cache group has the same cache encryption key.\n+See link:security/tde[Transparent Data Encryption] to learn more.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the cache group encryption key and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or if the crypto period (key validity period) has ended.\n+\n+The process of changing the cache encryption key includes two sequential stages:\n+\n+1. Rotate cache group key. This process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time. It depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero. The identifier of the new key increases with each rotation.\n+The encryption key (as well as encryption key ID) is the same for all nodes in a cache group.\n+\n+NOTE: Secondary rotation of the cache encryption key is possible only after a complete change of the encryption key for a cache group (both stages).\n+\n+== Prerequisites\n+\n+The cluster should be active.\n+\n+== Changing the encryption key\n+\n+Ignite provides the ability to change the cache encryption key using the following interfaces:\n+\n+- link:#command-line-tool[command line tool]\n+- link:#jmx[JMX]\n+- link:#from-code[from code]\n+\n+=== Command line tool\n+\n+Ignite shipment includes `control.sh|bat` script, located in the `$IGNITE_HOME/bin` folder, that acts as a tool to manage the\n+cache encryption key change process from the command line. The following commands are used with `control.sh|bat`:\n+\n+[source,shell]\n+----\n+# View the cache group encryption key identifiers.\n+control.sh|bat --encryption cache_key_ids cacheGroupName\n+\n+# Change the cache encryption key.\n+control.sh|bat --encryption change_cache_key cacheGroupName\n+----\n+\n+=== JMX\n+\n+You can also change the cache encryption key via the `EncryptionMXBean` interface:\n+\n+[cols=\"1,1\",opts=\"header\"]\n+|===\n+|Method | Description\n+|changeCacheGroupKey(String cacheOrGrpName) | Starts cache encryption key change process.\n+|===\n+\n+=== From code\n+\n+The cache encryption key change process can also be managed programmatically:\n+\n+[tabs]\n+--\n+tab:Java[]\n+\n+[source, java]\n+----\n+include::{javaCodeDir}/TDE.java[tags=cache-group-key-rotation, indent=0]\n+----\n+--\n+\n+== Managing re-encryption\n+\n+Re-encrypting existing data can take a long time. This is a fault-tolerant operation that automatically continues after a node restart.\n+The previous encryption key is automatically removed when all local partitions are encrypted with the new key, and the last link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] segment, which may contain entries encrypted with the previous key, is removed from disk.\n+\n+NOTE: Re-encryption uses link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] for physical recovery and may affect performance of cache operations.\n+\n+There are several options to manage the performance impact of re-encryption:\n+\n+* Limit the re-encryption rate using a configuration parameter or CLI at runtime.\n+* Temporarily suspend re-encryption using CLI command.\n+\n+Ignite 2.10 introduces a new configuration section `EncryptionConfiguration`, that is part of `DatastorageConfiguration`.\n+[cols=\"1,1,1\",opts=\"header\"]\n+|===\n+|Property | Default value | Description\n+|reencryptionRateLimit | 0 (unlimited) | Re-encryption rate limit in megabytes per second.\n+|reencryptionBatchSize | 100 | The number of pages scanned during re-encryption under checkpoint lock.\n+|===\n+\n+=== Using XML configuration to limit the re-encryption rate\n+[source, xml]\n+----\n+include::code-snippets/xml/tde.xml[tags=ignite-config;!discovery;!encryption;!cache;!discovery, indent=0]\n+----\n+\n+=== Using CLI to control re-encryption process\n+\n+The `control.sh|bat` script provides the ability to change the re-encryption rate as well as suspend and resume background re-encryption at runtime.\n+\n+NOTE: After the node restarts, the suspended background re-encryption will be continued automatically, and the rate limit will be set to 'unlimited' (by default), or taken from the local XML configuration (if any).", "originalCommit": "72ab0a280390e9ff2a20421596f4d7f0415972c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY3NzExOQ==", "url": "https://github.com/apache/ignite/pull/8446#discussion_r556677119", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The re-encryption status can also be obtained using JMX metrics described in the link:monitoring-metrics/new-metrics#cache-groups[Cache group metrics] section.\n          \n          \n            \n            The re-encryption status can be also obtained using JMX metrics described in the link:monitoring-metrics/new-metrics#cache-groups[Cache group metrics] section.", "author": "Nikita-tech-writer", "createdAt": "2021-01-13T16:52:19Z", "path": "docs/_docs/security/cache-encryption-key-rotation.adoc", "diffHunk": "@@ -0,0 +1,147 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+= Cache encryption key rotation\n+\n+== Overview\n+\n+Cache group encryption key is used to encrypt cache data on disk.\n+When a user creates a new encrypted cache, a new encryption key is generated and propagated to all server nodes in the cluster. So, each node for the same cache group has the same cache encryption key.\n+See link:security/tde[Transparent Data Encryption] to learn more.\n+\n+Ignite 2.10 introduces a feature for changing the cache encryption key.\n+It allows users to change the cache group encryption key and re-encrypt existing data at runtime.\n+\n+Rotation of the cache encryption key is required if this key has been compromised or if the crypto period (key validity period) has ended.\n+\n+The process of changing the cache encryption key includes two sequential stages:\n+\n+1. Rotate cache group key. This process adds a new encryption key for the specified cache group(s) on each server node and sets it to write new data.\n+\n+    Node join during this stage is prohibited and will be rejected.\n+\n+2. Re-encrypt existing (archived) cache data with the new encryption key.\n+\n+The second stage can take a long time. It depends on the amount of existing data. During this period the old key will be kept to read the archived data.\n+To understand what key the data is encrypted with, each encryption key has an _identifier_. By default it is equal to zero. The identifier of the new key increases with each rotation.\n+The encryption key (as well as encryption key ID) is the same for all nodes in a cache group.\n+\n+NOTE: Secondary rotation of the cache encryption key is possible only after a complete change of the encryption key for a cache group (both stages).\n+\n+== Prerequisites\n+\n+The cluster should be active.\n+\n+== Changing the encryption key\n+\n+Ignite provides the ability to change the cache encryption key using the following interfaces:\n+\n+- link:#command-line-tool[command line tool]\n+- link:#jmx[JMX]\n+- link:#from-code[from code]\n+\n+=== Command line tool\n+\n+Ignite shipment includes `control.sh|bat` script, located in the `$IGNITE_HOME/bin` folder, that acts as a tool to manage the\n+cache encryption key change process from the command line. The following commands are used with `control.sh|bat`:\n+\n+[source,shell]\n+----\n+# View the cache group encryption key identifiers.\n+control.sh|bat --encryption cache_key_ids cacheGroupName\n+\n+# Change the cache encryption key.\n+control.sh|bat --encryption change_cache_key cacheGroupName\n+----\n+\n+=== JMX\n+\n+You can also change the cache encryption key via the `EncryptionMXBean` interface:\n+\n+[cols=\"1,1\",opts=\"header\"]\n+|===\n+|Method | Description\n+|changeCacheGroupKey(String cacheOrGrpName) | Starts cache encryption key change process.\n+|===\n+\n+=== From code\n+\n+The cache encryption key change process can also be managed programmatically:\n+\n+[tabs]\n+--\n+tab:Java[]\n+\n+[source, java]\n+----\n+include::{javaCodeDir}/TDE.java[tags=cache-group-key-rotation, indent=0]\n+----\n+--\n+\n+== Managing re-encryption\n+\n+Re-encrypting existing data can take a long time. This is a fault-tolerant operation that automatically continues after a node restart.\n+The previous encryption key is automatically removed when all local partitions are encrypted with the new key, and the last link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] segment, which may contain entries encrypted with the previous key, is removed from disk.\n+\n+NOTE: Re-encryption uses link:persistence/native-persistence#write-ahead-log[Write-Ahead Log] for physical recovery and may affect performance of cache operations.\n+\n+There are several options to manage the performance impact of re-encryption:\n+\n+* Limit the re-encryption rate using a configuration parameter or CLI at runtime.\n+* Temporarily suspend re-encryption using CLI command.\n+\n+Ignite 2.10 introduces a new configuration section `EncryptionConfiguration`, that is part of `DatastorageConfiguration`.\n+[cols=\"1,1,1\",opts=\"header\"]\n+|===\n+|Property | Default value | Description\n+|reencryptionRateLimit | 0 (unlimited) | Re-encryption rate limit in megabytes per second.\n+|reencryptionBatchSize | 100 | The number of pages scanned during re-encryption under checkpoint lock.\n+|===\n+\n+=== Using XML configuration to limit the re-encryption rate\n+[source, xml]\n+----\n+include::code-snippets/xml/tde.xml[tags=ignite-config;!discovery;!encryption;!cache;!discovery, indent=0]\n+----\n+\n+=== Using CLI to control re-encryption process\n+\n+The `control.sh|bat` script provides the ability to change the re-encryption rate as well as suspend and resume background re-encryption at runtime.\n+\n+NOTE: After the node restarts, the suspended background re-encryption will be continued automatically, and the rate limit will be set to 'unlimited' (by default), or taken from the local XML configuration (if any).\n+\n+[source,shell]\n+----\n+# View the cache group re-encryption status.\n+control.sh|bat --encryption reencryption_status cacheGroupName\n+\n+# Suspend re-encryption of the cache group.\n+control.sh|bat --encryption suspend_reencryption cacheGroupName\n+\n+# Resume (suspended) re-encryption of the cache group.\n+control.sh|bat --encryption resume_reencryption cacheGroupName\n+\n+# View the re-encryption rate limit.\n+control.sh|bat --encryption reencryption_rate_limit\n+\n+# Set the re-encryption rate limit to 2.5 MB/s.\n+control.sh|bat --encryption reencryption_rate_limit 2.5\n+\n+# Set re-encryption rate to 'unlimited' ('0').\n+control.sh|bat --encryption reencryption_rate_limit 0\n+----\n+\n+The re-encryption status can also be obtained using JMX metrics described in the link:monitoring-metrics/new-metrics#cache-groups[Cache group metrics] section.", "originalCommit": "72ab0a280390e9ff2a20421596f4d7f0415972c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8ad43d7a9964b22fae41ae6fa2ba34fdde1ad80f", "url": "https://github.com/apache/ignite/commit/8ad43d7a9964b22fae41ae6fa2ba34fdde1ad80f", "message": "IGNITE-13659 Apply suggestions from code review\n\nCo-authored-by: Nikita Safonov <73828260+Nikita-tech-writer@users.noreply.github.com>", "committedDate": "2021-01-13T19:02:47Z", "type": "commit"}, {"oid": "1431beae1f185b86af222dbfe3a6ad39348c697e", "url": "https://github.com/apache/ignite/commit/1431beae1f185b86af222dbfe3a6ad39348c697e", "message": "IGNITE-13659 Update docs/_docs/security/cache-encryption-key-rotation.adoc\n\nCo-authored-by: Nikita Safonov <73828260+Nikita-tech-writer@users.noreply.github.com>", "committedDate": "2021-01-13T19:22:47Z", "type": "commit"}]}