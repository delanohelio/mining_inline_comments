{"pr_number": 8203, "pr_title": "IGNITE-12809 Python thin client - Fix wrong order of the SQL query result", "pr_createdAt": "2020-09-01T07:53:15Z", "pr_url": "https://github.com/apache/ignite/pull/8203", "timeline": [{"oid": "715a82b599bf9bf23926adfed2b797319808f5f6", "url": "https://github.com/apache/ignite/commit/715a82b599bf9bf23926adfed2b797319808f5f6", "message": "IGNITE-12809 Python thin client - Fix wrong order of the SQL query result.", "committedDate": "2020-09-01T07:52:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk1NzQzMA==", "url": "https://github.com/apache/ignite/pull/8203#discussion_r480957430", "bodyText": "Add new line", "author": "ivandasch", "createdAt": "2020-09-01T08:17:56Z", "path": ".gitignore", "diffHunk": "@@ -80,3 +80,9 @@ packages\n \n #NodeJs files\n /modules/platforms/nodejs/node_modules\n+\n+#Python temp files\n+**/.eggs\n+**/venv\n+**/.pytest_cache\n+**/pyignite.egg-info", "originalCommit": "715a82b599bf9bf23926adfed2b797319808f5f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk1Nzk3Mw==", "url": "https://github.com/apache/ignite/pull/8203#discussion_r480957973", "bodyText": "Unnecessary variable definition.\nBoth of them are used only in one place.", "author": "ivandasch", "createdAt": "2020-09-01T08:18:57Z", "path": "modules/platforms/python/tests/test_sql.py", "diffHunk": "@@ -152,3 +152,71 @@ def test_sql_fields(client):\n     # repeat cleanup\n     result = sql_fields(client, 'PUBLIC', drop_query, page_size)\n     assert result.status == 0\n+\n+\n+def test_long_multipage_query(client):\n+    \"\"\"\n+    The test creates a table with 13 columns (id and 12 enumerated columns)\n+    and 20 records with id in range from 1 to 20. Values of enumerated columns\n+    are = column number * id.\n+\n+    The goal is to ensure that all the values are selected in a right order.\n+    \"\"\"\n+\n+    field_range = range(1, 13)", "originalCommit": "715a82b599bf9bf23926adfed2b797319808f5f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk2MDU5NA==", "url": "https://github.com/apache/ignite/pull/8203#discussion_r480960594", "bodyText": "Both of these queries can be easily created without so long definition:\ni.e.\nfields = [\"id\",\"abc\"...]\n\"CREATE TABLE LongMultiPageQuery (%s, %s)\" % (fields[0] +  \" INT(11) PRIMARY KEY\", \",\".join(map(lambda f: f + \" INT(11)\", fields[1:])\n\n\"INSERT INTO LongMultipageQuery (%s) VALUES (%s)\" % (\",\".join(fields), \",\".join(\"?\" * len(fields)))", "author": "ivandasch", "createdAt": "2020-09-01T08:23:20Z", "path": "modules/platforms/python/tests/test_sql.py", "diffHunk": "@@ -152,3 +152,71 @@ def test_sql_fields(client):\n     # repeat cleanup\n     result = sql_fields(client, 'PUBLIC', drop_query, page_size)\n     assert result.status == 0\n+\n+\n+def test_long_multipage_query(client):\n+    \"\"\"\n+    The test creates a table with 13 columns (id and 12 enumerated columns)\n+    and 20 records with id in range from 1 to 20. Values of enumerated columns\n+    are = column number * id.\n+\n+    The goal is to ensure that all the values are selected in a right order.\n+    \"\"\"\n+\n+    field_range = range(1, 13)\n+\n+    record_range = range(1, 21)\n+\n+    drop_query = 'DROP TABLE LongMultipageQuery IF EXISTS'\n+\n+    create_query = '''CREATE TABLE LongMultipageQuery (", "originalCommit": "715a82b599bf9bf23926adfed2b797319808f5f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk2NjE3MQ==", "url": "https://github.com/apache/ignite/pull/8203#discussion_r480966171", "bodyText": "Why not just row = list(row_dict.values())?", "author": "ivandasch", "createdAt": "2020-09-01T08:32:06Z", "path": "modules/platforms/python/pyignite/api/sql.py", "diffHunk": "@@ -442,7 +442,7 @@ def sql_fields_cursor_get_page(\n     }\n     for row_dict in value['data']:\n         row = []\n-        for field_key in sorted(row_dict.keys()):\n+        for field_key in row_dict.keys():", "originalCommit": "715a82b599bf9bf23926adfed2b797319808f5f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3ffc0dedf014c116cc0cc67eb2eb906a932f3ee2", "url": "https://github.com/apache/ignite/commit/3ffc0dedf014c116cc0cc67eb2eb906a932f3ee2", "message": "IGNITE-12809 Code review fixes.", "committedDate": "2020-09-01T08:59:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NTMxMw==", "url": "https://github.com/apache/ignite/pull/8203#discussion_r480985313", "bodyText": "Let's use range(1, len(fields))", "author": "ivandasch", "createdAt": "2020-09-01T09:03:46Z", "path": "modules/platforms/python/tests/test_sql.py", "diffHunk": "@@ -163,56 +163,19 @@ def test_long_multipage_query(client):\n     The goal is to ensure that all the values are selected in a right order.\n     \"\"\"\n \n-    field_range = range(1, 13)\n-\n-    record_range = range(1, 21)\n-\n-    drop_query = 'DROP TABLE LongMultipageQuery IF EXISTS'\n-\n-    create_query = '''CREATE TABLE LongMultipageQuery (\n-        id INT(11) PRIMARY KEY,\n-        abc INT(11),\n-        ghi INT(11),\n-        def INT(11),\n-        jkl INT(11),\n-        prs INT(11),\n-        mno INT(11),\n-        tuw INT(11),\n-        zyz INT(11),\n-        abc1 INT(11),\n-        def1 INT(11),\n-        jkl1 INT(11),\n-        prs1 INT(11),\n-    )'''\n-\n-    insert_query = '''INSERT INTO LongMultipageQuery (\n-        id,\n-        abc,\n-        ghi,\n-        def,\n-        jkl,\n-        prs,\n-        mno,\n-        tuw,\n-        zyz,\n-        abc1,\n-        def1,\n-        jkl1,\n-        prs1,\n-    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'''\n-\n-    select_query = 'SELECT * FROM LongMultipageQuery'\n+    fields = [\"id\", \"abc\", \"ghi\", \"def\", \"jkl\", \"prs\", \"mno\", \"tuw\", \"zyz\", \"abc1\", \"def1\", \"jkl1\", \"prs1\"]\n \n-    client.sql(drop_query)\n-    client.sql(create_query)\n+    client.sql('DROP TABLE LongMultipageQuery IF EXISTS')\n+\n+    client.sql(\"CREATE TABLE LongMultiPageQuery (%s, %s)\" % \\\n+               (fields[0] + \" INT(11) PRIMARY KEY\", \",\".join(map(lambda f: f + \" INT(11)\", fields[1:]))))\n \n-    for id in record_range:\n+    for id in range(1, 21):\n         client.sql(\n-            insert_query,\n-            query_args=[id] + list(i * id for i in field_range),\n-        )\n+            \"INSERT INTO LongMultipageQuery (%s) VALUES (%s)\" % (\",\".join(fields), \",\".join(\"?\" * len(fields))),\n+            query_args=[id] + list(i * id for i in range(1, 13)))", "originalCommit": "3ffc0dedf014c116cc0cc67eb2eb906a932f3ee2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NTUwNg==", "url": "https://github.com/apache/ignite/pull/8203#discussion_r480985506", "bodyText": "assert len(page) == len(fields)", "author": "ivandasch", "createdAt": "2020-09-01T09:04:05Z", "path": "modules/platforms/python/tests/test_sql.py", "diffHunk": "@@ -163,56 +163,19 @@ def test_long_multipage_query(client):\n     The goal is to ensure that all the values are selected in a right order.\n     \"\"\"\n \n-    field_range = range(1, 13)\n-\n-    record_range = range(1, 21)\n-\n-    drop_query = 'DROP TABLE LongMultipageQuery IF EXISTS'\n-\n-    create_query = '''CREATE TABLE LongMultipageQuery (\n-        id INT(11) PRIMARY KEY,\n-        abc INT(11),\n-        ghi INT(11),\n-        def INT(11),\n-        jkl INT(11),\n-        prs INT(11),\n-        mno INT(11),\n-        tuw INT(11),\n-        zyz INT(11),\n-        abc1 INT(11),\n-        def1 INT(11),\n-        jkl1 INT(11),\n-        prs1 INT(11),\n-    )'''\n-\n-    insert_query = '''INSERT INTO LongMultipageQuery (\n-        id,\n-        abc,\n-        ghi,\n-        def,\n-        jkl,\n-        prs,\n-        mno,\n-        tuw,\n-        zyz,\n-        abc1,\n-        def1,\n-        jkl1,\n-        prs1,\n-    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'''\n-\n-    select_query = 'SELECT * FROM LongMultipageQuery'\n+    fields = [\"id\", \"abc\", \"ghi\", \"def\", \"jkl\", \"prs\", \"mno\", \"tuw\", \"zyz\", \"abc1\", \"def1\", \"jkl1\", \"prs1\"]\n \n-    client.sql(drop_query)\n-    client.sql(create_query)\n+    client.sql('DROP TABLE LongMultipageQuery IF EXISTS')\n+\n+    client.sql(\"CREATE TABLE LongMultiPageQuery (%s, %s)\" % \\\n+               (fields[0] + \" INT(11) PRIMARY KEY\", \",\".join(map(lambda f: f + \" INT(11)\", fields[1:]))))\n \n-    for id in record_range:\n+    for id in range(1, 21):\n         client.sql(\n-            insert_query,\n-            query_args=[id] + list(i * id for i in field_range),\n-        )\n+            \"INSERT INTO LongMultipageQuery (%s) VALUES (%s)\" % (\",\".join(fields), \",\".join(\"?\" * len(fields))),\n+            query_args=[id] + list(i * id for i in range(1, 13)))\n \n-    result = client.sql(select_query, page_size=1)\n+    result = client.sql('SELECT * FROM LongMultipageQuery', page_size=1)\n     for page in result:\n         assert len(page) == 13", "originalCommit": "3ffc0dedf014c116cc0cc67eb2eb906a932f3ee2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NjQ1MQ==", "url": "https://github.com/apache/ignite/pull/8203#discussion_r480986451", "bodyText": "Even better:\n\"CREATE TABLE LongMultiPageQuery (%s)\" %  \",\".join(map(lambda f: f + \" INT(11)\" if f != \"id\" else \"id INT(11) PRIMARY KEY\", fields))))", "author": "ivandasch", "createdAt": "2020-09-01T09:05:38Z", "path": "modules/platforms/python/tests/test_sql.py", "diffHunk": "@@ -163,56 +163,19 @@ def test_long_multipage_query(client):\n     The goal is to ensure that all the values are selected in a right order.\n     \"\"\"\n \n-    field_range = range(1, 13)\n-\n-    record_range = range(1, 21)\n-\n-    drop_query = 'DROP TABLE LongMultipageQuery IF EXISTS'\n-\n-    create_query = '''CREATE TABLE LongMultipageQuery (\n-        id INT(11) PRIMARY KEY,\n-        abc INT(11),\n-        ghi INT(11),\n-        def INT(11),\n-        jkl INT(11),\n-        prs INT(11),\n-        mno INT(11),\n-        tuw INT(11),\n-        zyz INT(11),\n-        abc1 INT(11),\n-        def1 INT(11),\n-        jkl1 INT(11),\n-        prs1 INT(11),\n-    )'''\n-\n-    insert_query = '''INSERT INTO LongMultipageQuery (\n-        id,\n-        abc,\n-        ghi,\n-        def,\n-        jkl,\n-        prs,\n-        mno,\n-        tuw,\n-        zyz,\n-        abc1,\n-        def1,\n-        jkl1,\n-        prs1,\n-    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'''\n-\n-    select_query = 'SELECT * FROM LongMultipageQuery'\n+    fields = [\"id\", \"abc\", \"ghi\", \"def\", \"jkl\", \"prs\", \"mno\", \"tuw\", \"zyz\", \"abc1\", \"def1\", \"jkl1\", \"prs1\"]\n \n-    client.sql(drop_query)\n-    client.sql(create_query)\n+    client.sql('DROP TABLE LongMultipageQuery IF EXISTS')\n+\n+    client.sql(\"CREATE TABLE LongMultiPageQuery (%s, %s)\" % \\\n+               (fields[0] + \" INT(11) PRIMARY KEY\", \",\".join(map(lambda f: f + \" INT(11)\", fields[1:]))))", "originalCommit": "3ffc0dedf014c116cc0cc67eb2eb906a932f3ee2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fd2984592f913ad40e344c392d174652c9beb940", "url": "https://github.com/apache/ignite/commit/fd2984592f913ad40e344c392d174652c9beb940", "message": "IGNITE-12809 Code review fixes.", "committedDate": "2020-09-01T09:07:26Z", "type": "commit"}]}