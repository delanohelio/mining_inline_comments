{"pr_number": 8142, "pr_title": "Fix measuring timers in discovery tests", "pr_createdAt": "2020-08-11T14:18:27Z", "pr_url": "https://github.com/apache/ignite/pull/8142", "timeline": [{"oid": "25372b3ae17bb07c89483832e5193c1f14725428", "url": "https://github.com/apache/ignite/commit/25372b3ae17bb07c89483832e5193c1f14725428", "message": "testing", "committedDate": "2020-08-05T16:03:47Z", "type": "commit"}, {"oid": "7b1d1011bdf8ebdda74b1e1920a534a91dafcbb2", "url": "https://github.com/apache/ignite/commit/7b1d1011bdf8ebdda74b1e1920a534a91dafcbb2", "message": "Merge branch 'ignite-ducktape' into extended-discotest", "committedDate": "2020-08-05T16:26:29Z", "type": "commit"}, {"oid": "ac6d6e48e1dc21ac298bfe520d18a3fedbccbd89", "url": "https://github.com/apache/ignite/commit/ac6d6e48e1dc21ac298bfe520d18a3fedbccbd89", "message": "first impl", "committedDate": "2020-08-05T18:55:00Z", "type": "commit"}, {"oid": "326f0e543380a0ba3cdc92ebaaa93c8f2f628ed3", "url": "https://github.com/apache/ignite/commit/326f0e543380a0ba3cdc92ebaaa93c8f2f628ed3", "message": "fix minorities", "committedDate": "2020-08-06T11:15:00Z", "type": "commit"}, {"oid": "a8da243baa49dac38bf0b657f75a8a2ac858e768", "url": "https://github.com/apache/ignite/commit/a8da243baa49dac38bf0b657f75a8a2ac858e768", "message": "foxes", "committedDate": "2020-08-06T12:10:46Z", "type": "commit"}, {"oid": "7ae65fbb86605b6875e52273244d41d66eb50689", "url": "https://github.com/apache/ignite/commit/7ae65fbb86605b6875e52273244d41d66eb50689", "message": "Naming fix.", "committedDate": "2020-08-06T12:29:24Z", "type": "commit"}, {"oid": "6732619cdff379dc85a7988118d795bba823ae8f", "url": "https://github.com/apache/ignite/commit/6732619cdff379dc85a7988118d795bba823ae8f", "message": "renaming", "committedDate": "2020-08-06T15:28:58Z", "type": "commit"}, {"oid": "26e1c70b73660c98847d466ba2aa1888d20b46bd", "url": "https://github.com/apache/ignite/commit/26e1c70b73660c98847d466ba2aa1888d20b46bd", "message": "fixes", "committedDate": "2020-08-06T15:56:56Z", "type": "commit"}, {"oid": "9ac2338d4ccc6999b68a24f439f9b6b9fe2faa9c", "url": "https://github.com/apache/ignite/commit/9ac2338d4ccc6999b68a24f439f9b6b9fe2faa9c", "message": "fix of ZooKeeper", "committedDate": "2020-08-07T09:56:36Z", "type": "commit"}, {"oid": "4edde8d164022a32bd830efe0f004e4f881db6f5", "url": "https://github.com/apache/ignite/commit/4edde8d164022a32bd830efe0f004e4f881db6f5", "message": "timing fix", "committedDate": "2020-08-07T17:20:48Z", "type": "commit"}, {"oid": "b0559ef38f7d17753702a22235af9c17dc2738b4", "url": "https://github.com/apache/ignite/commit/b0559ef38f7d17753702a22235af9c17dc2738b4", "message": "looks good", "committedDate": "2020-08-11T14:04:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0MjkzOQ==", "url": "https://github.com/apache/ignite/pull/8142#discussion_r468642939", "bodyText": "This is mutex or lock, not cond_var.", "author": "ivandasch", "createdAt": "2020-08-11T14:52:12Z", "path": "modules/ducktests/tests/ignitetest/services/utils/concurrent.py", "diffHunk": "@@ -0,0 +1,74 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+This module contains concurrent utils.\n+\"\"\"\n+\n+import threading\n+\n+\n+class CountDownLatch(object):\n+    \"\"\"\n+    A count-down latch.\n+    \"\"\"\n+    def __init__(self, count=1):\n+        self.count = count\n+        self.cond_var = threading.Condition()\n+\n+    def count_down(self):\n+        \"\"\"\n+        Decreases the latch counter.\n+        \"\"\"\n+        with self.cond_var:\n+            if self.count > 0:\n+                self.count -= 1\n+            if self.count == 0:\n+                self.cond_var.notifyAll()\n+\n+    def wait(self):\n+        \"\"\"\n+        Blocks current thread if the latch is not free.\n+        \"\"\"\n+        with self.cond_var:\n+            while self.count > 0:\n+                self.cond_var.wait()\n+\n+\n+# pylint: disable=C0116\n+class AtomicValue:\n+    \"\"\"\n+    An atomic reference holder.\n+    \"\"\"\n+    def __init__(self, value=None):\n+        self.value = value\n+        self.cond_var = threading.Lock()", "originalCommit": "b0559ef38f7d17753702a22235af9c17dc2738b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0MTgwNA==", "url": "https://github.com/apache/ignite/pull/8142#discussion_r469141804", "bodyText": "Fixed", "author": "Vladsz83", "createdAt": "2020-08-12T09:50:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0MjkzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0NjM2MQ==", "url": "https://github.com/apache/ignite/pull/8142#discussion_r468646361", "bodyText": "May be try to pass a regexp to grep?", "author": "ivandasch", "createdAt": "2020-08-11T14:56:55Z", "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -117,46 +163,81 @@ def __basic_test__(self, version, with_zk=False):\n \n         start = self.monotonic()\n         self.servers.start()\n-        data = {'Ignite cluster start time (s)': self.monotonic() - start}\n+        data = {'Ignite cluster start time (s)': round(self.monotonic() - start, 1)}\n         self.stage(\"Topology is ready\")\n \n-        # Node failure detection\n-        fail_node, survived_node = self.choose_random_node_to_kill(self.servers)\n+        if nodes_to_kill > self.servers.num_nodes - 1 or coordinator and nodes_to_kill > 1:\n+            raise Exception(\"Too many nodes to kill: \" + str(nodes_to_kill))\n+\n+        if coordinator:\n+            node_chooser = lambda nodes: \\\n+                next(node for node in nodes if node.discovery_info().node_id == nodes[0].discovery_info().coordinator)\n+        else:\n+            node_chooser = lambda nodes: \\\n+                random.sample([n for n in self.servers.nodes if n.discovery_info().node_id !=\n+                               self.servers.nodes[0].discovery_info().coordinator], nodes_to_kill)\n \n-        data[\"nodes\"] = [node.node_id() for node in self.servers.nodes]\n+        failed_nodes, survived_node = self.choose_node_to_kill(self.servers.nodes, node_chooser)\n \n-        disco_infos = []\n-        for node in self.servers.nodes:\n-            disco_info = node.discovery_info()\n-            disco_infos.append({\n-                \"id\": disco_info.node_id,\n-                \"consistent_id\": disco_info.consistent_id,\n-                \"coordinator\": disco_info.coordinator,\n-                \"order\": disco_info.order,\n-                \"int_order\": disco_info.int_order,\n-                \"is_client\": disco_info.is_client\n-            })\n+        ids_to_wait = [node.discovery_info().node_id for node in failed_nodes]\n \n-        data[\"node_disco_info\"] = disco_infos\n+        self.stage(\"Stopping \" + str(len(failed_nodes)) + \" nodes.\")\n \n-        self.servers.stop_node(fail_node, clean_shutdown=False)\n+        first_terminated = self.servers.stop_nodes_async(failed_nodes, clean_shutdown=False, wait_for_stop=False)\n \n-        start = self.monotonic()\n-        self.servers.await_event_on_node(\"Node FAILED\", random.choice(survived_node), 60, True)\n+        self.stage(\"Waiting for failure detection of \" + str(len(failed_nodes)) + \" nodes.\")\n+\n+        # Keeps dates of logged node failures.\n+        last_failure_detected = 0\n+        logged_timestamps = []\n+\n+        for failed_id in ids_to_wait:\n+            pattern = \"Node FAILED: \" + (\"ZookeeperClusterNode\" if with_zk else \"TcpDiscoveryNode\") + \" \\\\[id=\" \\", "originalCommit": "b0559ef38f7d17753702a22235af9c17dc2738b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0MTQ1OA==", "url": "https://github.com/apache/ignite/pull/8142#discussion_r469141458", "bodyText": "Fixed", "author": "Vladsz83", "createdAt": "2020-08-12T09:49:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0NjM2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0NzEwNQ==", "url": "https://github.com/apache/ignite/pull/8142#discussion_r468647105", "bodyText": "I suppose, that we can rewrite a little bit test, it's really overcomplicated a little bit.\nMay be it is not a good idea to turn off linter warnings here?", "author": "ivandasch", "createdAt": "2020-08-11T14:57:49Z", "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -81,28 +90,65 @@ def teardown(self):\n     @cluster(num_nodes=NUM_NODES)\n     @parametrize(version=str(DEV_BRANCH))\n     @parametrize(version=str(LATEST_2_7))\n-    def test_tcp(self, version):\n+    def test_tcp_not_coordinator_single(self, version):\n+        \"\"\"\n+        Test single-node-failure scenario (not the coordinator) with TcpDiscoverySpi.\n+        \"\"\"\n+        return self.__simulate_nodes_failure(version, nodes_to_kill=1)\n+\n+    @cluster(num_nodes=NUM_NODES)\n+    @parametrize(version=str(DEV_BRANCH))\n+    @parametrize(version=str(LATEST_2_7))\n+    def test_tcp_not_coordinator_two(self, version):\n+        \"\"\"\n+        Test two-node-failure scenario (not the coordinator) with TcpDiscoverySpi.\n+        \"\"\"\n+        return self.__simulate_nodes_failure(version, nodes_to_kill=2)\n+\n+    @cluster(num_nodes=NUM_NODES)\n+    @parametrize(version=str(DEV_BRANCH))\n+    @parametrize(version=str(LATEST_2_7))\n+    def test_tcp_coordinator(self, version):\n+        \"\"\"\n+        Test coordinator-failure scenario with TcpDiscoverySpi.\n+        \"\"\"\n+        return self.__simulate_nodes_failure(version, True)\n+\n+    @cluster(num_nodes=NUM_NODES + 3)\n+    @parametrize(version=str(DEV_BRANCH))\n+    @parametrize(version=str(LATEST_2_7))\n+    def test_zk_not_coordinator_single(self, version):\n         \"\"\"\n-        Test basic discovery scenario with TcpDiscoverySpi.\n+        Test single node failure scenario (not the coordinator) with ZooKeeper.\n         \"\"\"\n-        return self.__basic_test__(version, False)\n+        return self.__simulate_nodes_failure(version, nodes_to_kill=1, coordinator=False, with_zk=True)\n \n     @cluster(num_nodes=NUM_NODES + 3)\n     @parametrize(version=str(DEV_BRANCH))\n     @parametrize(version=str(LATEST_2_7))\n-    def test_zk(self, version):\n+    def test_zk_not_coordinator_two(self, version):\n         \"\"\"\n-        Test basic discovery scenario with ZookeeperDiscoverySpi.\n+        Test two-node-failure scenario (not the coordinator) with ZooKeeper.\n         \"\"\"\n-        return self.__basic_test__(version, True)\n+        return self.__simulate_nodes_failure(version, nodes_to_kill=2, coordinator=False, with_zk=True)\n \n-    def __basic_test__(self, version, with_zk=False):\n+    @cluster(num_nodes=NUM_NODES+3)\n+    @parametrize(version=str(DEV_BRANCH))\n+    @parametrize(version=str(LATEST_2_7))\n+    def test_zk_coordinator(self, version):\n+        \"\"\"\n+        Test coordinator-failure scenario with ZooKeeper.\n+        \"\"\"\n+        return self.__simulate_nodes_failure(version, coordinator=True, with_zk=True)\n+\n+    # pylint: disable=R0913,R0914", "originalCommit": "b0559ef38f7d17753702a22235af9c17dc2738b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0MTU0MA==", "url": "https://github.com/apache/ignite/pull/8142#discussion_r469141540", "bodyText": "Fixed", "author": "Vladsz83", "createdAt": "2020-08-12T09:49:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0NzEwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0Nzg0OQ==", "url": "https://github.com/apache/ignite/pull/8142#discussion_r468647849", "bodyText": "We can move this part to additional function and call it in each zk steps.", "author": "ivandasch", "createdAt": "2020-08-11T14:58:53Z", "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -81,28 +90,65 @@ def teardown(self):\n     @cluster(num_nodes=NUM_NODES)\n     @parametrize(version=str(DEV_BRANCH))\n     @parametrize(version=str(LATEST_2_7))\n-    def test_tcp(self, version):\n+    def test_tcp_not_coordinator_single(self, version):\n+        \"\"\"\n+        Test single-node-failure scenario (not the coordinator) with TcpDiscoverySpi.\n+        \"\"\"\n+        return self.__simulate_nodes_failure(version, nodes_to_kill=1)\n+\n+    @cluster(num_nodes=NUM_NODES)\n+    @parametrize(version=str(DEV_BRANCH))\n+    @parametrize(version=str(LATEST_2_7))\n+    def test_tcp_not_coordinator_two(self, version):\n+        \"\"\"\n+        Test two-node-failure scenario (not the coordinator) with TcpDiscoverySpi.\n+        \"\"\"\n+        return self.__simulate_nodes_failure(version, nodes_to_kill=2)\n+\n+    @cluster(num_nodes=NUM_NODES)\n+    @parametrize(version=str(DEV_BRANCH))\n+    @parametrize(version=str(LATEST_2_7))\n+    def test_tcp_coordinator(self, version):\n+        \"\"\"\n+        Test coordinator-failure scenario with TcpDiscoverySpi.\n+        \"\"\"\n+        return self.__simulate_nodes_failure(version, True)\n+\n+    @cluster(num_nodes=NUM_NODES + 3)\n+    @parametrize(version=str(DEV_BRANCH))\n+    @parametrize(version=str(LATEST_2_7))\n+    def test_zk_not_coordinator_single(self, version):\n         \"\"\"\n-        Test basic discovery scenario with TcpDiscoverySpi.\n+        Test single node failure scenario (not the coordinator) with ZooKeeper.\n         \"\"\"\n-        return self.__basic_test__(version, False)\n+        return self.__simulate_nodes_failure(version, nodes_to_kill=1, coordinator=False, with_zk=True)\n \n     @cluster(num_nodes=NUM_NODES + 3)\n     @parametrize(version=str(DEV_BRANCH))\n     @parametrize(version=str(LATEST_2_7))\n-    def test_zk(self, version):\n+    def test_zk_not_coordinator_two(self, version):\n         \"\"\"\n-        Test basic discovery scenario with ZookeeperDiscoverySpi.\n+        Test two-node-failure scenario (not the coordinator) with ZooKeeper.\n         \"\"\"\n-        return self.__basic_test__(version, True)\n+        return self.__simulate_nodes_failure(version, nodes_to_kill=2, coordinator=False, with_zk=True)\n \n-    def __basic_test__(self, version, with_zk=False):\n+    @cluster(num_nodes=NUM_NODES+3)\n+    @parametrize(version=str(DEV_BRANCH))\n+    @parametrize(version=str(LATEST_2_7))\n+    def test_zk_coordinator(self, version):\n+        \"\"\"\n+        Test coordinator-failure scenario with ZooKeeper.\n+        \"\"\"\n+        return self.__simulate_nodes_failure(version, coordinator=True, with_zk=True)\n+\n+    # pylint: disable=R0913,R0914\n+    def __simulate_nodes_failure(self, version, coordinator=False, with_zk=False, nodes_to_kill=1):\n         if with_zk:", "originalCommit": "b0559ef38f7d17753702a22235af9c17dc2738b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0MTcwMA==", "url": "https://github.com/apache/ignite/pull/8142#discussion_r469141700", "bodyText": "Fixed", "author": "Vladsz83", "createdAt": "2020-08-12T09:50:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY0Nzg0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY1MDc4OA==", "url": "https://github.com/apache/ignite/pull/8142#discussion_r468650788", "bodyText": "Same as above. Seems that it is a good candidate to separate function, isn't it?", "author": "ivandasch", "createdAt": "2020-08-11T15:02:38Z", "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -117,46 +163,81 @@ def __basic_test__(self, version, with_zk=False):\n \n         start = self.monotonic()\n         self.servers.start()\n-        data = {'Ignite cluster start time (s)': self.monotonic() - start}\n+        data = {'Ignite cluster start time (s)': round(self.monotonic() - start, 1)}\n         self.stage(\"Topology is ready\")\n \n-        # Node failure detection\n-        fail_node, survived_node = self.choose_random_node_to_kill(self.servers)\n+        if nodes_to_kill > self.servers.num_nodes - 1 or coordinator and nodes_to_kill > 1:\n+            raise Exception(\"Too many nodes to kill: \" + str(nodes_to_kill))\n+\n+        if coordinator:\n+            node_chooser = lambda nodes: \\\n+                next(node for node in nodes if node.discovery_info().node_id == nodes[0].discovery_info().coordinator)\n+        else:\n+            node_chooser = lambda nodes: \\\n+                random.sample([n for n in self.servers.nodes if n.discovery_info().node_id !=\n+                               self.servers.nodes[0].discovery_info().coordinator], nodes_to_kill)\n \n-        data[\"nodes\"] = [node.node_id() for node in self.servers.nodes]\n+        failed_nodes, survived_node = self.choose_node_to_kill(self.servers.nodes, node_chooser)\n \n-        disco_infos = []\n-        for node in self.servers.nodes:\n-            disco_info = node.discovery_info()\n-            disco_infos.append({\n-                \"id\": disco_info.node_id,\n-                \"consistent_id\": disco_info.consistent_id,\n-                \"coordinator\": disco_info.coordinator,\n-                \"order\": disco_info.order,\n-                \"int_order\": disco_info.int_order,\n-                \"is_client\": disco_info.is_client\n-            })\n+        ids_to_wait = [node.discovery_info().node_id for node in failed_nodes]\n \n-        data[\"node_disco_info\"] = disco_infos\n+        self.stage(\"Stopping \" + str(len(failed_nodes)) + \" nodes.\")\n \n-        self.servers.stop_node(fail_node, clean_shutdown=False)\n+        first_terminated = self.servers.stop_nodes_async(failed_nodes, clean_shutdown=False, wait_for_stop=False)\n \n-        start = self.monotonic()\n-        self.servers.await_event_on_node(\"Node FAILED\", random.choice(survived_node), 60, True)\n+        self.stage(\"Waiting for failure detection of \" + str(len(failed_nodes)) + \" nodes.\")\n+\n+        # Keeps dates of logged node failures.\n+        last_failure_detected = 0\n+        logged_timestamps = []\n+\n+        for failed_id in ids_to_wait:\n+            pattern = \"Node FAILED: \" + (\"ZookeeperClusterNode\" if with_zk else \"TcpDiscoveryNode\") + \" \\\\[id=\" \\\n+                      + failed_id\n+\n+            self.servers.await_event_on_node(pattern, survived_node, 10, from_the_beginning=True, backoff_sec=0.01)\n \n-        data['Failure of node detected in time (s)'] = self.monotonic() - start\n+            last_failure_detected = self.monotonic()\n+\n+            self.stage(\"Failure detection measured.\")\n+\n+        for failed_id in ids_to_wait:\n+            pattern = \"Node FAILED: \" + (\"ZookeeperClusterNode\" if with_zk else \"TcpDiscoveryNode\") + \" \\\\[id=\" \\", "originalCommit": "b0559ef38f7d17753702a22235af9c17dc2738b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0MTYwMg==", "url": "https://github.com/apache/ignite/pull/8142#discussion_r469141602", "bodyText": "Fixed", "author": "Vladsz83", "createdAt": "2020-08-12T09:49:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY1MDc4OA=="}], "type": "inlineReview"}, {"oid": "05b687eced57dd88a02ead9ed9d0515df5eb07f8", "url": "https://github.com/apache/ignite/commit/05b687eced57dd88a02ead9ed9d0515df5eb07f8", "message": "fixes, optimizations", "committedDate": "2020-08-11T17:51:34Z", "type": "commit"}, {"oid": "f2a9d5f3a3623d1cbfd913956bc8aaaf5149c976", "url": "https://github.com/apache/ignite/commit/f2a9d5f3a3623d1cbfd913956bc8aaaf5149c976", "message": "Merge branch 'ignite-ducktape' into ducktape-improve-timings", "committedDate": "2020-08-11T17:52:04Z", "type": "commit"}, {"oid": "79970cd92392d3fd0e160a75cf1374a660eb44a6", "url": "https://github.com/apache/ignite/commit/79970cd92392d3fd0e160a75cf1374a660eb44a6", "message": "fixes, optimizations 2. Merget ignite-ducktape", "committedDate": "2020-08-11T17:55:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0Mjk0Mw==", "url": "https://github.com/apache/ignite/pull/8142#discussion_r469142943", "bodyText": "I suppose it's better to write some docs, isn't it?", "author": "ivandasch", "createdAt": "2020-08-12T09:52:12Z", "path": "modules/ducktests/tests/ignitetest/services/utils/concurrent.py", "diffHunk": "@@ -0,0 +1,74 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+This module contains concurrent utils.\n+\"\"\"\n+\n+import threading\n+\n+\n+class CountDownLatch(object):\n+    \"\"\"\n+    A count-down latch.\n+    \"\"\"\n+    def __init__(self, count=1):\n+        self.count = count\n+        self.cond_var = threading.Condition()\n+\n+    def count_down(self):\n+        \"\"\"\n+        Decreases the latch counter.\n+        \"\"\"\n+        with self.cond_var:\n+            if self.count > 0:\n+                self.count -= 1\n+            if self.count == 0:\n+                self.cond_var.notifyAll()\n+\n+    def wait(self):\n+        \"\"\"\n+        Blocks current thread if the latch is not free.\n+        \"\"\"\n+        with self.cond_var:\n+            while self.count > 0:\n+                self.cond_var.wait()\n+\n+\n+# pylint: disable=C0116", "originalCommit": "79970cd92392d3fd0e160a75cf1374a660eb44a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0OTQyMQ==", "url": "https://github.com/apache/ignite/pull/8142#discussion_r469149421", "bodyText": "Fixed", "author": "Vladsz83", "createdAt": "2020-08-12T10:04:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0Mjk0Mw=="}], "type": "inlineReview"}, {"oid": "67facb6335517c9f59022712070352977570e2be", "url": "https://github.com/apache/ignite/commit/67facb6335517c9f59022712070352977570e2be", "message": "+ some docs", "committedDate": "2020-08-12T10:03:08Z", "type": "commit"}, {"oid": "8f637cf33e401b561e16a6aaff129ae952671835", "url": "https://github.com/apache/ignite/commit/8f637cf33e401b561e16a6aaff129ae952671835", "message": "fix of zk settings", "committedDate": "2020-08-12T10:32:51Z", "type": "commit"}, {"oid": "f459cdcf2cb62a41529c8c7059be6050888d3da3", "url": "https://github.com/apache/ignite/commit/f459cdcf2cb62a41529c8c7059be6050888d3da3", "message": "removed debugging stage log", "committedDate": "2020-08-12T11:02:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5MjA2NA==", "url": "https://github.com/apache/ignite/pull/8142#discussion_r469192064", "bodyText": "why not gain from IgniteAwareService?", "author": "anton-vinogradov", "createdAt": "2020-08-12T11:32:40Z", "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -32,41 +37,58 @@\n # pylint: disable=W0223\n class DiscoveryTest(IgniteTest):\n     \"\"\"\n-    Test basic discovery scenarious (TCP and Zookeeper).\n+    Test various node failure scenarios (TCP and ZooKeeper).\n     1. Start of ignite cluster.\n     2. Kill random node.\n     3. Wait that survived node detects node failure.\n     \"\"\"\n     NUM_NODES = 7\n \n+    FAILURE_DETECTION_TIMEOUT = 2000\n+\n+    __LOG_PATH = os.path.join(IgniteAwareService.PERSISTENT_ROOT, \"console.log\")", "originalCommit": "67facb6335517c9f59022712070352977570e2be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5OTM0Mg==", "url": "https://github.com/apache/ignite/pull/8142#discussion_r469199342", "bodyText": "Fixed", "author": "Vladsz83", "createdAt": "2020-08-12T11:48:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5MjA2NA=="}], "type": "inlineReview"}, {"oid": "7898e9d1474f6f09ca52f8f58fc00bc9f0f2587c", "url": "https://github.com/apache/ignite/commit/7898e9d1474f6f09ca52f8f58fc00bc9f0f2587c", "message": "fixed log path", "committedDate": "2020-08-12T11:47:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwMzY2MA==", "url": "https://github.com/apache/ignite/pull/8142#discussion_r469203660", "bodyText": "can we pass how many nodes to kill via @matrix to reduce methods amount?", "author": "anton-vinogradov", "createdAt": "2020-08-12T11:57:10Z", "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -81,31 +103,68 @@ def teardown(self):\n     @cluster(num_nodes=NUM_NODES)\n     @parametrize(version=str(DEV_BRANCH))\n     @parametrize(version=str(LATEST_2_7))\n-    def test_tcp(self, version):\n+    def test_tcp_not_coordinator_single(self, version):\n+        \"\"\"\n+        Test single-node-failure scenario (not the coordinator) with TcpDiscoverySpi.\n+        \"\"\"\n+        return self.__simulate_nodes_failure(version, self.__properties(), 1)", "originalCommit": "67facb6335517c9f59022712070352977570e2be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwODQ1Mg==", "url": "https://github.com/apache/ignite/pull/8142#discussion_r469208452", "bodyText": "@matrix\n\nWe won't distinguish easily which test failed because, for example, 0 nodes to kill means to kill coordinator in internal routines. This reduces parameters count. Now we clearly  see it by test name. There is a lot of parametrization to me. We got 6 test functions. They look not so many. Makes sense?", "author": "Vladsz83", "createdAt": "2020-08-12T12:07:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwMzY2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIyMDU2OQ==", "url": "https://github.com/apache/ignite/pull/8142#discussion_r469220569", "bodyText": "I see code duplication and we have to reduce it if possible.\n@matrix made for this.\n0 to stop coordinator looks counter-intuitive to me, what about the case when we have kill coordinator and some node?\nHow to kill node after coordinator in one case and before at another?\nmatrix with a list of nodes to kill will be more clear? eg. [0, 3, 7], [5, 0, 2], [0, 5, 2].", "author": "anton-vinogradov", "createdAt": "2020-08-12T12:27:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwMzY2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIyNTM2NQ==", "url": "https://github.com/apache/ignite/pull/8142#discussion_r469225365", "bodyText": "Yes, counter-intuitive. But you don't see it now. Now we have intuitive test names. It will become counter-inuitive with @matrix. This parametrization requires extra test organization. This PR do not include case for failing coordinator with some othe node. This could be done with some small changes and parameter. But looks like anohter ticket and PR to me.", "author": "Vladsz83", "createdAt": "2020-08-12T12:33:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwMzY2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzNjM1Mw==", "url": "https://github.com/apache/ignite/pull/8142#discussion_r469236353", "bodyText": "Ok for now.", "author": "anton-vinogradov", "createdAt": "2020-08-12T12:53:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwMzY2MA=="}], "type": "inlineReview"}, {"oid": "53ecc85137ce7596ab1774f11e4277e5c2a0fc78", "url": "https://github.com/apache/ignite/commit/53ecc85137ce7596ab1774f11e4277e5c2a0fc78", "message": "removed default stop node delay", "committedDate": "2020-08-12T12:52:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwMjY4Ng==", "url": "https://github.com/apache/ignite/pull/8142#discussion_r469302686", "bodyText": "Actually, you can use simple dict here, it is thread-safe (GIL)", "author": "ivandasch", "createdAt": "2020-08-12T14:29:45Z", "path": "modules/ducktests/tests/ignitetest/services/ignite.py", "diffHunk": "@@ -100,6 +107,59 @@ def stop_node(self, node, clean_shutdown=True, timeout_sec=60):\n             self.thread_dump(node)\n             raise\n \n+    def stop_nodes_async(self, nodes, delay_ms=0, clean_shutdown=True, timeout_sec=20, wait_for_stop=False):\n+        \"\"\"\n+        Stops the nodes asynchronously.\n+        \"\"\"\n+        sig = signal.SIGTERM if clean_shutdown else signal.SIGKILL\n+\n+        sem = CountDownLatch(len(nodes))\n+        time_holder = AtomicValue()", "originalCommit": "53ecc85137ce7596ab1774f11e4277e5c2a0fc78", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}