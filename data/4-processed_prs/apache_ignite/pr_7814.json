{"pr_number": 7814, "pr_title": "IGNITE-13032 Use non-static stream pool for optimized marshaller.", "pr_createdAt": "2020-05-19T09:55:31Z", "pr_url": "https://github.com/apache/ignite/pull/7814", "timeline": [{"oid": "6c2ee3a7f6f1e178d0db7205b3e225a9e1e6bfba", "url": "https://github.com/apache/ignite/commit/6c2ee3a7f6f1e178d0db7205b3e225a9e1e6bfba", "message": "IGNITE-13032 Use non-static stream pool for optimized marshaller.", "committedDate": "2020-05-19T09:47:52Z", "type": "commit"}, {"oid": "fab96b60f55dd50bccc6d2eb1c787b99cb909b04", "url": "https://github.com/apache/ignite/commit/fab96b60f55dd50bccc6d2eb1c787b99cb909b04", "message": "Styles.", "committedDate": "2020-05-22T07:53:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxNTMzNQ==", "url": "https://github.com/apache/ignite/pull/7814#discussion_r430915335", "bodyText": "extra line", "author": "korlov42", "createdAt": "2020-05-27T07:36:46Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/marshaller/optimized/OptimizedObjectSharedStreamRegistry.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.marshaller.optimized;\n+\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+\n+/**\n+ *\n+ */\n+public class OptimizedObjectSharedStreamRegistry extends OptimizedObjectStreamRegistry {\n+    /** */\n+    private static final ThreadLocal<StreamHolder> holders = new ThreadLocal<>();\n+\n+    /** {@inheritDoc} */\n+    @Override OptimizedObjectOutputStream out() {\n+        return holder().acquireOut();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override OptimizedObjectInputStream in() {\n+        return holder().acquireIn();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override void closeOut(OptimizedObjectOutputStream out) {\n+        U.close(out, null);\n+\n+        StreamHolder holder = holders.get();\n+\n+        if (holder != null)\n+            holder.releaseOut();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override void closeIn(OptimizedObjectInputStream in) {\n+        U.close(in, null);\n+\n+        StreamHolder holder = holders.get();\n+\n+        if (holder != null)\n+            holder.releaseIn();\n+    }\n+\n+    /**\n+     * Gets holder from pool or thread local.\n+     *\n+     * @return Stream holder.\n+     */\n+    private static StreamHolder holder() {\n+        StreamHolder holder = holders.get();\n+\n+        if (holder == null)\n+            holders.set(holder = new StreamHolder());\n+\n+        return holder;\n+    }\n+\n+    /**\n+     * Streams holder.\n+     */\n+    private static class StreamHolder {\n+        /** Output stream. */\n+        private final OptimizedObjectOutputStream out = createOut();\n+\n+        /** Input stream. */\n+        private final OptimizedObjectInputStream in = createIn();\n+\n+        /** Output streams counter. */\n+        private int outAcquireCnt;\n+\n+        /** Input streams counter. */\n+        private int inAcquireCnt;\n+\n+        /**\n+         * Gets output stream.\n+         *\n+         * @return Object output stream.\n+         */\n+        OptimizedObjectOutputStream acquireOut() {\n+            return outAcquireCnt++ > 0 ? createOut() : out;\n+        }\n+\n+        /**\n+         * Gets input stream.\n+         *\n+         * @return Object input stream.\n+         */\n+        OptimizedObjectInputStream acquireIn() {\n+            return inAcquireCnt++ > 0 ? createIn() : in;\n+        }\n+\n+        /**\n+         * Releases output stream.\n+         */\n+        void releaseOut() {\n+            outAcquireCnt--;\n+        }\n+\n+        /**\n+         * Releases input stream.\n+         */\n+        void releaseIn() {\n+            inAcquireCnt--;\n+        }\n+    }\n+", "originalCommit": "fab96b60f55dd50bccc6d2eb1c787b99cb909b04", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d7fff63bc0a9016cae91a65143915ed672628f18", "url": "https://github.com/apache/ignite/commit/d7fff63bc0a9016cae91a65143915ed672628f18", "message": "Styles.", "committedDate": "2020-05-27T08:45:57Z", "type": "commit"}]}