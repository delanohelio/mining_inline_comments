{"pr_number": 8284, "pr_title": "IGNITE-13488 Adds command to print metric value.", "pr_createdAt": "2020-09-27T21:54:33Z", "pr_url": "https://github.com/apache/ignite/pull/8284", "timeline": [{"oid": "63255e648e0f806f6b7b5fa5831a11020b6aefa0", "url": "https://github.com/apache/ignite/commit/63255e648e0f806f6b7b5fa5831a11020b6aefa0", "message": "IGNITE-13488 Adds command to print metric values.", "committedDate": "2020-09-29T20:54:47Z", "type": "forcePushed"}, {"oid": "bf0edf0ea52d78335c13b0d49855d1ca8bb30073", "url": "https://github.com/apache/ignite/commit/bf0edf0ea52d78335c13b0d49855d1ca8bb30073", "message": "IGNITE-13488 Adds command to print metric values.", "committedDate": "2020-09-29T21:31:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM3NDExMA==", "url": "https://github.com/apache/ignite/pull/8284#discussion_r498374110", "bodyText": "Can metric.getAsString() be used instead of this method?", "author": "NSAmelchev", "createdAt": "2020-10-01T16:30:34Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/visor/metric/VisorMetricTask.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.metric;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.internal.processors.metric.GridMetricManager;\n+import org.apache.ignite.internal.processors.task.GridInternal;\n+import org.apache.ignite.internal.processors.task.GridVisorManagementTask;\n+import org.apache.ignite.internal.visor.VisorJob;\n+import org.apache.ignite.internal.visor.VisorOneNodeTask;\n+import org.apache.ignite.spi.metric.BooleanMetric;\n+import org.apache.ignite.spi.metric.DoubleMetric;\n+import org.apache.ignite.spi.metric.IntMetric;\n+import org.apache.ignite.spi.metric.LongMetric;\n+import org.apache.ignite.spi.metric.Metric;\n+import org.apache.ignite.spi.metric.ObjectMetric;\n+import org.apache.ignite.spi.metric.ReadOnlyMetricRegistry;\n+import org.jetbrains.annotations.Nullable;\n+\n+import static org.apache.ignite.internal.processors.metric.impl.MetricUtils.SEPARATOR;\n+import static org.apache.ignite.spi.metric.jmx.MetricRegistryMBean.searchHistogram;\n+\n+/** Reperesents visor task for obtaining metric values. */\n+@GridInternal\n+@GridVisorManagementTask\n+public class VisorMetricTask extends VisorOneNodeTask<VisorMetricTaskArg, Map<String, ?>> {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** {@inheritDoc} */\n+    @Override protected VisorJob<VisorMetricTaskArg, Map<String, ?>> job(VisorMetricTaskArg arg) {\n+        return new VisorMetricJob(arg, false);\n+    }\n+\n+    /** */\n+    private static class VisorMetricJob extends VisorJob<VisorMetricTaskArg, Map<String, ?>> {\n+        /** */\n+        private static final long serialVersionUID = 0L;\n+\n+        /**\n+         * Create job with specified argument.\n+         *\n+         * @param arg   Job argument.\n+         * @param debug Flag indicating whether debug information should be printed into node log.\n+         */\n+        protected VisorMetricJob(@Nullable VisorMetricTaskArg arg, boolean debug) {\n+            super(arg, debug);\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override protected Map<String, ?> run(@Nullable VisorMetricTaskArg arg) throws IgniteException {\n+            String name = arg.name();\n+\n+            GridMetricManager mMgr = ignite.context().metric();\n+\n+            for (ReadOnlyMetricRegistry mReg : mMgr) {\n+                String mRegName = mReg.name();\n+\n+                if (mRegName.equals(name)) {\n+                    Map<String, Object> res = new HashMap<>();\n+\n+                    mReg.forEach(metric -> res.put(metric.name(), valueOf(metric)));\n+\n+                    return res;\n+                }\n+\n+                String mRegPrefix = mRegName + SEPARATOR;\n+\n+                if (!name.startsWith(mRegPrefix))\n+                    continue;\n+\n+                if (mRegPrefix.equals(name))\n+                    return null;\n+\n+                String metricName = name.substring(mRegPrefix.length());\n+\n+                Metric metric = mReg.findMetric(metricName);\n+\n+                if (metric != null)\n+                    return Collections.singletonMap(name, valueOf(metric));\n+\n+                Object val = searchHistogram(metricName, mReg);\n+\n+                if (val != null)\n+                    return Collections.singletonMap(name, val);\n+            }\n+\n+            return null;\n+        }\n+\n+        /**\n+         * Obtains value of the metric.\n+         *\n+         * @param metric Metric which value should be obtained.\n+         * @return Value of the metric.\n+         */\n+        private Object valueOf(Metric metric) {", "originalCommit": "6f2469ef3913f4474d24805da8c79424f7a879ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNzcwOA==", "url": "https://github.com/apache/ignite/pull/8284#discussion_r498537708", "bodyText": "I haven't used getAsString() method for primitive types to reduce size of response message and avoid unnecessary converting on the server side.", "author": "ololo3000", "createdAt": "2020-10-01T22:11:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM3NDExMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1Mzc1Mg==", "url": "https://github.com/apache/ignite/pull/8284#discussion_r498653752", "bodyText": "This enum has a very closed use scope.\nLet's move it back to the SystemViewVisorTask\nWe shouldn't flood util package with the class that can be used only in 2 cases.", "author": "nizhikov", "createdAt": "2020-10-02T07:21:39Z", "path": "modules/core/src/main/java/org/apache/ignite/util/SimpleType.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.util;\n+\n+/**\n+ * Represents lightweight type descriptors.\n+ */\n+public enum SimpleType {", "originalCommit": "b0d50dac9d90aa28d543bf50df29fc222dd9db37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNjk1Ng==", "url": "https://github.com/apache/ignite/pull/8284#discussion_r499006956", "bodyText": "Done.", "author": "ololo3000", "createdAt": "2020-10-02T19:18:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1Mzc1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1NjY0MQ==", "url": "https://github.com/apache/ignite/pull/8284#discussion_r498656641", "bodyText": "mMgr -> mmgr", "author": "nizhikov", "createdAt": "2020-10-02T07:29:01Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/visor/metric/VisorMetricTask.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.metric;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.internal.processors.metric.GridMetricManager;\n+import org.apache.ignite.internal.processors.task.GridInternal;\n+import org.apache.ignite.internal.processors.task.GridVisorManagementTask;\n+import org.apache.ignite.internal.visor.VisorJob;\n+import org.apache.ignite.internal.visor.VisorOneNodeTask;\n+import org.apache.ignite.spi.metric.BooleanMetric;\n+import org.apache.ignite.spi.metric.DoubleMetric;\n+import org.apache.ignite.spi.metric.IntMetric;\n+import org.apache.ignite.spi.metric.LongMetric;\n+import org.apache.ignite.spi.metric.Metric;\n+import org.apache.ignite.spi.metric.ObjectMetric;\n+import org.apache.ignite.spi.metric.ReadOnlyMetricRegistry;\n+import org.jetbrains.annotations.Nullable;\n+\n+import static org.apache.ignite.internal.processors.metric.impl.MetricUtils.SEPARATOR;\n+import static org.apache.ignite.spi.metric.jmx.MetricRegistryMBean.searchHistogram;\n+\n+/** Reperesents visor task for obtaining metric values. */\n+@GridInternal\n+@GridVisorManagementTask\n+public class VisorMetricTask extends VisorOneNodeTask<VisorMetricTaskArg, Map<String, ?>> {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** {@inheritDoc} */\n+    @Override protected VisorJob<VisorMetricTaskArg, Map<String, ?>> job(VisorMetricTaskArg arg) {\n+        return new VisorMetricJob(arg, false);\n+    }\n+\n+    /** */\n+    private static class VisorMetricJob extends VisorJob<VisorMetricTaskArg, Map<String, ?>> {\n+        /** */\n+        private static final long serialVersionUID = 0L;\n+\n+        /**\n+         * Create job with specified argument.\n+         *\n+         * @param arg   Job argument.\n+         * @param debug Flag indicating whether debug information should be printed into node log.\n+         */\n+        protected VisorMetricJob(@Nullable VisorMetricTaskArg arg, boolean debug) {\n+            super(arg, debug);\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override protected Map<String, ?> run(@Nullable VisorMetricTaskArg arg) throws IgniteException {\n+            String name = arg.name();\n+\n+            GridMetricManager mMgr = ignite.context().metric();", "originalCommit": "b0d50dac9d90aa28d543bf50df29fc222dd9db37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNzA0MQ==", "url": "https://github.com/apache/ignite/pull/8284#discussion_r499007041", "bodyText": "Done.", "author": "ololo3000", "createdAt": "2020-10-02T19:19:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1NjY0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1NjcwOA==", "url": "https://github.com/apache/ignite/pull/8284#discussion_r498656708", "bodyText": "mReg -> mreg", "author": "nizhikov", "createdAt": "2020-10-02T07:29:09Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/visor/metric/VisorMetricTask.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.metric;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.internal.processors.metric.GridMetricManager;\n+import org.apache.ignite.internal.processors.task.GridInternal;\n+import org.apache.ignite.internal.processors.task.GridVisorManagementTask;\n+import org.apache.ignite.internal.visor.VisorJob;\n+import org.apache.ignite.internal.visor.VisorOneNodeTask;\n+import org.apache.ignite.spi.metric.BooleanMetric;\n+import org.apache.ignite.spi.metric.DoubleMetric;\n+import org.apache.ignite.spi.metric.IntMetric;\n+import org.apache.ignite.spi.metric.LongMetric;\n+import org.apache.ignite.spi.metric.Metric;\n+import org.apache.ignite.spi.metric.ObjectMetric;\n+import org.apache.ignite.spi.metric.ReadOnlyMetricRegistry;\n+import org.jetbrains.annotations.Nullable;\n+\n+import static org.apache.ignite.internal.processors.metric.impl.MetricUtils.SEPARATOR;\n+import static org.apache.ignite.spi.metric.jmx.MetricRegistryMBean.searchHistogram;\n+\n+/** Reperesents visor task for obtaining metric values. */\n+@GridInternal\n+@GridVisorManagementTask\n+public class VisorMetricTask extends VisorOneNodeTask<VisorMetricTaskArg, Map<String, ?>> {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** {@inheritDoc} */\n+    @Override protected VisorJob<VisorMetricTaskArg, Map<String, ?>> job(VisorMetricTaskArg arg) {\n+        return new VisorMetricJob(arg, false);\n+    }\n+\n+    /** */\n+    private static class VisorMetricJob extends VisorJob<VisorMetricTaskArg, Map<String, ?>> {\n+        /** */\n+        private static final long serialVersionUID = 0L;\n+\n+        /**\n+         * Create job with specified argument.\n+         *\n+         * @param arg   Job argument.\n+         * @param debug Flag indicating whether debug information should be printed into node log.\n+         */\n+        protected VisorMetricJob(@Nullable VisorMetricTaskArg arg, boolean debug) {\n+            super(arg, debug);\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override protected Map<String, ?> run(@Nullable VisorMetricTaskArg arg) throws IgniteException {\n+            String name = arg.name();\n+\n+            GridMetricManager mMgr = ignite.context().metric();\n+\n+            for (ReadOnlyMetricRegistry mReg : mMgr) {", "originalCommit": "b0d50dac9d90aa28d543bf50df29fc222dd9db37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNzA5NA==", "url": "https://github.com/apache/ignite/pull/8284#discussion_r499007094", "bodyText": "Done.", "author": "ololo3000", "createdAt": "2020-10-02T19:19:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1NjcwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1Njc2OA==", "url": "https://github.com/apache/ignite/pull/8284#discussion_r498656768", "bodyText": "mRegName -> mregName", "author": "nizhikov", "createdAt": "2020-10-02T07:29:18Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/visor/metric/VisorMetricTask.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.metric;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.internal.processors.metric.GridMetricManager;\n+import org.apache.ignite.internal.processors.task.GridInternal;\n+import org.apache.ignite.internal.processors.task.GridVisorManagementTask;\n+import org.apache.ignite.internal.visor.VisorJob;\n+import org.apache.ignite.internal.visor.VisorOneNodeTask;\n+import org.apache.ignite.spi.metric.BooleanMetric;\n+import org.apache.ignite.spi.metric.DoubleMetric;\n+import org.apache.ignite.spi.metric.IntMetric;\n+import org.apache.ignite.spi.metric.LongMetric;\n+import org.apache.ignite.spi.metric.Metric;\n+import org.apache.ignite.spi.metric.ObjectMetric;\n+import org.apache.ignite.spi.metric.ReadOnlyMetricRegistry;\n+import org.jetbrains.annotations.Nullable;\n+\n+import static org.apache.ignite.internal.processors.metric.impl.MetricUtils.SEPARATOR;\n+import static org.apache.ignite.spi.metric.jmx.MetricRegistryMBean.searchHistogram;\n+\n+/** Reperesents visor task for obtaining metric values. */\n+@GridInternal\n+@GridVisorManagementTask\n+public class VisorMetricTask extends VisorOneNodeTask<VisorMetricTaskArg, Map<String, ?>> {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** {@inheritDoc} */\n+    @Override protected VisorJob<VisorMetricTaskArg, Map<String, ?>> job(VisorMetricTaskArg arg) {\n+        return new VisorMetricJob(arg, false);\n+    }\n+\n+    /** */\n+    private static class VisorMetricJob extends VisorJob<VisorMetricTaskArg, Map<String, ?>> {\n+        /** */\n+        private static final long serialVersionUID = 0L;\n+\n+        /**\n+         * Create job with specified argument.\n+         *\n+         * @param arg   Job argument.\n+         * @param debug Flag indicating whether debug information should be printed into node log.\n+         */\n+        protected VisorMetricJob(@Nullable VisorMetricTaskArg arg, boolean debug) {\n+            super(arg, debug);\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override protected Map<String, ?> run(@Nullable VisorMetricTaskArg arg) throws IgniteException {\n+            String name = arg.name();\n+\n+            GridMetricManager mMgr = ignite.context().metric();\n+\n+            for (ReadOnlyMetricRegistry mReg : mMgr) {\n+                String mRegName = mReg.name();", "originalCommit": "b0d50dac9d90aa28d543bf50df29fc222dd9db37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNzExNw==", "url": "https://github.com/apache/ignite/pull/8284#discussion_r499007117", "bodyText": "Done.", "author": "ololo3000", "createdAt": "2020-10-02T19:19:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1Njc2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1Njg2Mg==", "url": "https://github.com/apache/ignite/pull/8284#discussion_r498656862", "bodyText": "mRegPrefix -> mregPrefix", "author": "nizhikov", "createdAt": "2020-10-02T07:29:33Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/visor/metric/VisorMetricTask.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.metric;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.internal.processors.metric.GridMetricManager;\n+import org.apache.ignite.internal.processors.task.GridInternal;\n+import org.apache.ignite.internal.processors.task.GridVisorManagementTask;\n+import org.apache.ignite.internal.visor.VisorJob;\n+import org.apache.ignite.internal.visor.VisorOneNodeTask;\n+import org.apache.ignite.spi.metric.BooleanMetric;\n+import org.apache.ignite.spi.metric.DoubleMetric;\n+import org.apache.ignite.spi.metric.IntMetric;\n+import org.apache.ignite.spi.metric.LongMetric;\n+import org.apache.ignite.spi.metric.Metric;\n+import org.apache.ignite.spi.metric.ObjectMetric;\n+import org.apache.ignite.spi.metric.ReadOnlyMetricRegistry;\n+import org.jetbrains.annotations.Nullable;\n+\n+import static org.apache.ignite.internal.processors.metric.impl.MetricUtils.SEPARATOR;\n+import static org.apache.ignite.spi.metric.jmx.MetricRegistryMBean.searchHistogram;\n+\n+/** Reperesents visor task for obtaining metric values. */\n+@GridInternal\n+@GridVisorManagementTask\n+public class VisorMetricTask extends VisorOneNodeTask<VisorMetricTaskArg, Map<String, ?>> {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** {@inheritDoc} */\n+    @Override protected VisorJob<VisorMetricTaskArg, Map<String, ?>> job(VisorMetricTaskArg arg) {\n+        return new VisorMetricJob(arg, false);\n+    }\n+\n+    /** */\n+    private static class VisorMetricJob extends VisorJob<VisorMetricTaskArg, Map<String, ?>> {\n+        /** */\n+        private static final long serialVersionUID = 0L;\n+\n+        /**\n+         * Create job with specified argument.\n+         *\n+         * @param arg   Job argument.\n+         * @param debug Flag indicating whether debug information should be printed into node log.\n+         */\n+        protected VisorMetricJob(@Nullable VisorMetricTaskArg arg, boolean debug) {\n+            super(arg, debug);\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override protected Map<String, ?> run(@Nullable VisorMetricTaskArg arg) throws IgniteException {\n+            String name = arg.name();\n+\n+            GridMetricManager mMgr = ignite.context().metric();\n+\n+            for (ReadOnlyMetricRegistry mReg : mMgr) {\n+                String mRegName = mReg.name();\n+\n+                if (mRegName.equals(name)) {\n+                    Map<String, Object> res = new HashMap<>();\n+\n+                    mReg.forEach(metric -> res.put(metric.name(), valueOf(metric)));\n+\n+                    return res;\n+                }\n+\n+                String mRegPrefix = mRegName + SEPARATOR;", "originalCommit": "b0d50dac9d90aa28d543bf50df29fc222dd9db37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNzE3Nw==", "url": "https://github.com/apache/ignite/pull/8284#discussion_r499007177", "bodyText": "Done.", "author": "ololo3000", "createdAt": "2020-10-02T19:19:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1Njg2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY2ODQ2OQ==", "url": "https://github.com/apache/ignite/pull/8284#discussion_r498668469", "bodyText": "Do we really need a class instance for printing?\nIt's seems we can do it with the single method as it was in SystemViewCommand.", "author": "nizhikov", "createdAt": "2020-10-02T07:55:36Z", "path": "modules/control-utility/src/main/java/org/apache/ignite/internal/commandline/TablePrinter.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.commandline;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import org.apache.ignite.util.SimpleType;\n+\n+import static java.util.Collections.nCopies;\n+import static org.apache.ignite.util.SimpleType.DATE;\n+import static org.apache.ignite.util.SimpleType.NUMBER;\n+import static org.apache.ignite.util.SimpleType.STRING;\n+\n+/** Represents utility class for table content printing. */\n+public class TablePrinter {\n+    /** Column separator. */\n+    public static final String COLUMN_SEPARATOR = \"    \";\n+\n+    /** Titles of the table columns. */\n+    private final List<String> titles;\n+\n+    /** Types of the table columns. */\n+    private final List<SimpleType> types;\n+\n+    /** Number of table columns. */\n+    private final int colsCnt;\n+\n+    /**\n+     * @param titles Titles of the table columns. Number of titles determines the number of columns in table.\n+     * @param types  Types of the table columns.\n+     */\n+    public TablePrinter(List<String> titles, List<SimpleType> types) {", "originalCommit": "b0d50dac9d90aa28d543bf50df29fc222dd9db37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY2ODc3Ng==", "url": "https://github.com/apache/ignite/pull/8284#discussion_r498668776", "bodyText": "Le'ts just make static method in SystemViewCommand and use it in the MetricCommand.", "author": "nizhikov", "createdAt": "2020-10-02T07:56:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY2ODQ2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNzIzOA==", "url": "https://github.com/apache/ignite/pull/8284#discussion_r499007238", "bodyText": "Done.", "author": "ololo3000", "createdAt": "2020-10-02T19:19:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY2ODQ2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY3MTM5OA==", "url": "https://github.com/apache/ignite/pull/8284#discussion_r498671398", "bodyText": "Le'ts keep one test for each type of metric and remove all other tests.", "author": "nizhikov", "createdAt": "2020-10-02T08:01:38Z", "path": "modules/control-utility/src/test/java/org/apache/ignite/util/MetricCommandTest.java", "diffHunk": "@@ -0,0 +1,644 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.util;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ThreadPoolExecutor.AbortPolicy;\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.configuration.DataRegionConfiguration;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.commandline.CommandList;\n+import org.apache.ignite.internal.commandline.metric.MetricCommandArg;\n+import org.apache.ignite.internal.processors.metric.MetricRegistry;\n+import org.apache.ignite.internal.processors.metric.impl.HistogramMetricImpl;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.thread.IgniteThreadFactory;\n+import org.junit.Test;\n+\n+import static java.lang.Long.parseLong;\n+import static java.lang.System.currentTimeMillis;\n+import static java.util.regex.Pattern.quote;\n+import static org.apache.ignite.cluster.ClusterState.ACTIVE;\n+import static org.apache.ignite.configuration.IgniteConfiguration.DFLT_THREAD_KEEP_ALIVE_TIME;\n+import static org.apache.ignite.internal.commandline.CommandHandler.EXIT_CODE_INVALID_ARGUMENTS;\n+import static org.apache.ignite.internal.commandline.CommandHandler.EXIT_CODE_OK;\n+import static org.apache.ignite.internal.commandline.CommandList.METRIC;\n+import static org.apache.ignite.internal.commandline.TablePrinter.COLUMN_SEPARATOR;\n+import static org.apache.ignite.internal.commandline.metric.MetricCommandArg.NODE_ID;\n+import static org.apache.ignite.internal.managers.communication.GridIoManager.COMM_METRICS;\n+import static org.apache.ignite.internal.processors.cache.persistence.DataStorageMetricsImpl.DATASTORAGE_METRIC_PREFIX;\n+import static org.apache.ignite.internal.processors.cache.persistence.snapshot.IgniteSnapshotManager.SNAPSHOT_METRICS;\n+import static org.apache.ignite.internal.processors.job.GridJobProcessor.JOBS_METRICS;\n+import static org.apache.ignite.internal.processors.metric.GridMetricManager.CLUSTER_METRICS;\n+import static org.apache.ignite.internal.processors.metric.GridMetricManager.IGNITE_METRICS;\n+import static org.apache.ignite.internal.processors.metric.GridMetricManager.PME_METRICS;\n+import static org.apache.ignite.internal.processors.metric.GridMetricManager.SYS_METRICS;\n+import static org.apache.ignite.internal.processors.metric.GridMetricManager.THREAD_POOLS;\n+import static org.apache.ignite.internal.processors.metric.GridMetricManager.TX_METRICS;\n+import static org.apache.ignite.internal.processors.metric.impl.MetricUtils.SEPARATOR;\n+import static org.apache.ignite.internal.processors.metric.impl.MetricUtils.cacheMetricsRegistryName;\n+import static org.apache.ignite.internal.processors.metric.impl.MetricUtils.metricName;\n+import static org.apache.ignite.testframework.GridTestUtils.assertContains;\n+import static org.apache.ignite.testframework.GridTestUtils.assertThrowsWithCause;\n+\n+/** Tests output of {@link CommandList#METRIC} command. */\n+public class MetricCommandTest extends GridCommandHandlerClusterByClassAbstractTest {\n+    /** Command line argument for printing metric values. */\n+    private static final String CMD_METRIC = METRIC.text();\n+\n+    /** Test node with 0 index. */\n+    private IgniteEx ignite0;\n+\n+    /** Test node with 1 index. */\n+    private IgniteEx ignite1;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        super.beforeTestsStarted();\n+\n+        awaitPartitionMapExchange();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        super.beforeTest();\n+\n+        injectTestSystemOut();\n+\n+        autoConfirmation = false;\n+\n+        ignite0 = ignite(0);\n+        ignite1 = ignite(1);\n+    }\n+\n+    /** Tests command error output in case of mandatory metric name is omitted. */\n+    @Test\n+    public void testMetricNameMissedFailure() {\n+        assertContains(log, executeCommand(EXIT_CODE_INVALID_ARGUMENTS, CMD_METRIC),\n+            \"The name of a metric(metric registry) is expected.\");\n+    }\n+\n+    /** Tests command error output in case value of {@link MetricCommandArg#NODE_ID} argument is omitted. */\n+    @Test\n+    public void testNodeIdMissedFailure() {\n+        assertContains(log, executeCommand(EXIT_CODE_INVALID_ARGUMENTS, CMD_METRIC, SYS_METRICS, NODE_ID.argName()),\n+            \"ID of the node from which metric values should be obtained is expected.\");\n+    }\n+\n+    /** Tests command error output in case value of {@link MetricCommandArg#NODE_ID} argument is invalid.*/\n+    @Test\n+    public void testInvalidNodeIdFailure() {\n+        assertContains(log,\n+            executeCommand(EXIT_CODE_INVALID_ARGUMENTS, CMD_METRIC, SYS_METRICS, NODE_ID.argName(), \"invalid_node_id\"),\n+            \"Failed to parse \" + NODE_ID.argName() +\n+                \" command argument. String representation of \\\"java.util.UUID\\\" is exepected.\" +\n+                \" For example: 123e4567-e89b-42d3-a456-556642440000\"\n+        );\n+    }\n+\n+    /** Tests command error output in case multiple metric names are specified. */\n+    @Test\n+    public void testMultipleMetricNamesFailure() {\n+        assertContains(log,\n+            executeCommand(EXIT_CODE_INVALID_ARGUMENTS, CMD_METRIC, IGNITE_METRICS, SYS_METRICS),\n+            \"Multiple metric(metric registry) names are not supported.\");\n+    }\n+\n+    /** Tests command error output in case {@link MetricCommandArg#NODE_ID} argument value refers to nonexistent node. */\n+    @Test\n+    public void testNonExistentNodeIdFailure() {\n+        String incorrectNodeId = UUID.randomUUID().toString();\n+\n+        assertContains(log,\n+            executeCommand(EXIT_CODE_INVALID_ARGUMENTS, CMD_METRIC, \"--node-id\", incorrectNodeId, IGNITE_METRICS),\n+            \"Failed to perform operation.\\nNode with id=\" + incorrectNodeId + \" not found\");\n+    }\n+\n+    /** Tests command output in case nonexistent metric name is specified. */\n+    @Test\n+    public void testNonExistentMetric() {\n+        assertContains(log, executeCommand(EXIT_CODE_OK, CMD_METRIC, IGNITE_METRICS + SEPARATOR),\n+            \"No metric with specified name was found [name=\" + IGNITE_METRICS + SEPARATOR + ']');\n+\n+        assertContains(log, executeCommand(EXIT_CODE_OK, CMD_METRIC, \"nonexistent.metric\"),\n+            \"No metric with specified name was found [name=nonexistent.metric]\");\n+    }\n+\n+    /** */\n+    @Test\n+    public void testCommunicationMetrics() {\n+        Map<String, String> metrics = metrics(ignite0, COMM_METRICS);\n+\n+        assertTrue(Integer.parseInt(metrics.get(metricName(COMM_METRICS, \"SentBytesCount\"))) > 0);\n+        assertTrue(Integer.parseInt(metrics.get(metricName(COMM_METRICS, \"ReceivedBytesCount\"))) > 0);\n+        assertEquals(\"0\", metrics.get(metricName(COMM_METRICS, \"OutboundMessagesQueueSize\")));\n+        assertTrue(Integer.parseInt(metrics.get(metricName(COMM_METRICS, \"ReceivedMessagesCount\"))) > 0);\n+        assertTrue(Integer.parseInt(metrics.get(metricName(COMM_METRICS, \"SentMessagesCount\"))) > 0);\n+    }\n+\n+    /** */\n+    @Test\n+    public void testJobsMetrics() {", "originalCommit": "b0d50dac9d90aa28d543bf50df29fc222dd9db37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNzI4OQ==", "url": "https://github.com/apache/ignite/pull/8284#discussion_r499007289", "bodyText": "Done.", "author": "ololo3000", "createdAt": "2020-10-02T19:19:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY3MTM5OA=="}], "type": "inlineReview"}, {"oid": "4c9849772dd08f8702a517ae1292153f15249a13", "url": "https://github.com/apache/ignite/commit/4c9849772dd08f8702a517ae1292153f15249a13", "message": "IGNITE-13488 Adds command to print metric values.", "committedDate": "2020-10-02T19:03:26Z", "type": "commit"}, {"oid": "750711c483d3b60b3e3342111c7dec831a37849b", "url": "https://github.com/apache/ignite/commit/750711c483d3b60b3e3342111c7dec831a37849b", "message": "IGNITE-13488 Fixes minor issues.", "committedDate": "2020-10-02T19:03:26Z", "type": "commit"}, {"oid": "61b02d582b9da63ccd907f5ac8ced725ecdb7f78", "url": "https://github.com/apache/ignite/commit/61b02d582b9da63ccd907f5ac8ced725ecdb7f78", "message": "IGNITE-13488 Fixes minor issues.", "committedDate": "2020-10-02T19:03:26Z", "type": "commit"}, {"oid": "6f3a3e5772e39bc2a6ca5a3ea389ab278890cb14", "url": "https://github.com/apache/ignite/commit/6f3a3e5772e39bc2a6ca5a3ea389ab278890cb14", "message": "IGNITE-13488 Fixes minor issues.", "committedDate": "2020-10-02T19:03:27Z", "type": "commit"}, {"oid": "bc8718c6a4d60a20d41f3cff4d6ce9868d704cdd", "url": "https://github.com/apache/ignite/commit/bc8718c6a4d60a20d41f3cff4d6ce9868d704cdd", "message": "IGNITE-13488 Fixes incorrect metric search.", "committedDate": "2020-10-02T19:03:27Z", "type": "commit"}, {"oid": "812aaa9844be0fbcbeb31d886ab9dfffaf2dcc25", "url": "https://github.com/apache/ignite/commit/812aaa9844be0fbcbeb31d886ab9dfffaf2dcc25", "message": "IGNITE-13488 Fixes minor issues.", "committedDate": "2020-10-02T19:03:27Z", "type": "commit"}, {"oid": "f9053daf63a9b9d370567324bcf5851f7ee2f006", "url": "https://github.com/apache/ignite/commit/f9053daf63a9b9d370567324bcf5851f7ee2f006", "message": "IGNITE-13488 Fixes minor issues.", "committedDate": "2020-10-02T19:03:27Z", "type": "commit"}, {"oid": "f9053daf63a9b9d370567324bcf5851f7ee2f006", "url": "https://github.com/apache/ignite/commit/f9053daf63a9b9d370567324bcf5851f7ee2f006", "message": "IGNITE-13488 Fixes minor issues.", "committedDate": "2020-10-02T19:03:27Z", "type": "forcePushed"}, {"oid": "ac5e448317dbb9d2d702cdffc07aa004237c16a8", "url": "https://github.com/apache/ignite/commit/ac5e448317dbb9d2d702cdffc07aa004237c16a8", "message": "IGNITE-13488 Fixes minor issues.", "committedDate": "2020-10-03T12:21:52Z", "type": "commit"}]}