{"pr_number": 7852, "pr_title": "IGNITE-13051 still validate MVCC if cache will not start", "pr_createdAt": "2020-05-26T15:03:40Z", "pr_url": "https://github.com/apache/ignite/pull/7852", "timeline": [{"oid": "e50325a10d501e43a5fab031365319112c6b03fa", "url": "https://github.com/apache/ignite/commit/e50325a10d501e43a5fab031365319112c6b03fa", "message": "IGNITE-13051 fix: coprocessor validation for recieved caches", "committedDate": "2020-05-27T15:06:13Z", "type": "commit"}, {"oid": "e50325a10d501e43a5fab031365319112c6b03fa", "url": "https://github.com/apache/ignite/commit/e50325a10d501e43a5fab031365319112c6b03fa", "message": "IGNITE-13051 fix: coprocessor validation for recieved caches", "committedDate": "2020-05-27T15:06:13Z", "type": "forcePushed"}, {"oid": "7e2f59324bd5686457f0b98e855886188b448961", "url": "https://github.com/apache/ignite/commit/7e2f59324bd5686457f0b98e855886188b448961", "message": "IGNITE-13051 fix: checkstyle fix", "committedDate": "2020-05-27T16:43:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NTAzMA==", "url": "https://github.com/apache/ignite/pull/7852#discussion_r433075030", "bodyText": "newline required before \"for\"\nsee https://cwiki.apache.org/confluence/display/IGNITE/Coding+Guidelines#CodingGuidelines-SemanticUnits for details", "author": "anton-vinogradov", "createdAt": "2020-06-01T07:07:48Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java", "diffHunk": "@@ -1350,6 +1350,9 @@ else if (!crd && grp != null && grp.localStartVersion().equals(fut.initialVersio\n         Collection<DynamicCacheDescriptor> descs\n     ) throws IgniteCheckedException {\n         IgniteInternalFuture<?> res = cachesRegistry.addUnregistered(descs);\n+        for (DynamicCacheDescriptor d: descs) {", "originalCommit": "7e2f59324bd5686457f0b98e855886188b448961", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA5MzE3NQ==", "url": "https://github.com/apache/ignite/pull/7852#discussion_r433093175", "bodyText": "fixed", "author": "timoninmaxim", "createdAt": "2020-06-01T07:56:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NTAzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NzE4MA==", "url": "https://github.com/apache/ignite/pull/7852#discussion_r433077180", "bodyText": "Do we really need to specify near, backups, and atomicity mode here?", "author": "anton-vinogradov", "createdAt": "2020-06-01T07:14:22Z", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/mvcc/CacheMvccConfigurationValidationTest.java", "diffHunk": "@@ -322,6 +325,33 @@ public void testTransactionalSnapshotLimitations() throws Exception {\n         );\n     }\n \n+    /**\n+     * Check that node in client mode (filtered by AttributeNodeFilter) correctly works with MVCC.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void testMvccEnabledForClientMode() throws Exception {\n+        String attrName = \"has_cache\";\n+        Object attrVal = Boolean.TRUE;\n+\n+        final IgniteEx crd = (IgniteEx) startGrid(getTestIgniteInstanceName(0), getConfiguration());\n+\n+        // Do not start cache on non-affinity node.\n+        CacheConfiguration ccfg = defaultCacheConfiguration()", "originalCommit": "7e2f59324bd5686457f0b98e855886188b448961", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA5MzA5Mw==", "url": "https://github.com/apache/ignite/pull/7852#discussion_r433093093", "bodyText": "Hi, this test checks MVCC mode so atomicity mode is required. Near set is required as it must be disabled with MVCC mode. Backups dont matter actually. Fixed it", "author": "timoninmaxim", "createdAt": "2020-06-01T07:56:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NzE4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NzUwMA==", "url": "https://github.com/apache/ignite/pull/7852#discussion_r433077500", "bodyText": "The better case is to check every node.", "author": "anton-vinogradov", "createdAt": "2020-06-01T07:15:16Z", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/mvcc/CacheMvccConfigurationValidationTest.java", "diffHunk": "@@ -322,6 +325,33 @@ public void testTransactionalSnapshotLimitations() throws Exception {\n         );\n     }\n \n+    /**\n+     * Check that node in client mode (filtered by AttributeNodeFilter) correctly works with MVCC.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void testMvccEnabledForClientMode() throws Exception {\n+        String attrName = \"has_cache\";\n+        Object attrVal = Boolean.TRUE;\n+\n+        final IgniteEx crd = (IgniteEx) startGrid(getTestIgniteInstanceName(0), getConfiguration());\n+\n+        // Do not start cache on non-affinity node.\n+        CacheConfiguration ccfg = defaultCacheConfiguration()\n+                .setNearConfiguration(null)\n+                .setNodeFilter(new AttributeNodeFilter(attrName, attrVal))\n+                .setBackups(0)\n+                .setAtomicityMode(TRANSACTIONAL_SNAPSHOT);\n+\n+        final Ignite node = startGrid(getTestIgniteInstanceName(1), getConfiguration()\n+                .setCacheConfiguration(ccfg)\n+                .setUserAttributes(F.asMap(attrName, attrVal)));\n+\n+        checkTopology(2);\n+\n+        assertTrue(crd.context().coordinators().mvccEnabled());", "originalCommit": "7e2f59324bd5686457f0b98e855886188b448961", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA5MzEyOQ==", "url": "https://github.com/apache/ignite/pull/7852#discussion_r433093129", "bodyText": "fixed", "author": "timoninmaxim", "createdAt": "2020-06-01T07:56:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3NzUwMA=="}], "type": "inlineReview"}, {"oid": "7e2f59324bd5686457f0b98e855886188b448961", "url": "https://github.com/apache/ignite/commit/7e2f59324bd5686457f0b98e855886188b448961", "message": "IGNITE-13051 fix: checkstyle fix", "committedDate": "2020-05-27T16:43:34Z", "type": "forcePushed"}, {"oid": "dd1719bef133b7ce236d9191da9790596fa5bde8", "url": "https://github.com/apache/ignite/commit/dd1719bef133b7ce236d9191da9790596fa5bde8", "message": "fixup! IGNITE-13051 fix: checkstyle fix", "committedDate": "2020-06-01T07:44:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1ODEwOA==", "url": "https://github.com/apache/ignite/pull/7852#discussion_r433158108", "bodyText": "oneliner for should not use braces", "author": "anton-vinogradov", "createdAt": "2020-06-01T10:29:55Z", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java", "diffHunk": "@@ -1351,6 +1351,10 @@ else if (!crd && grp != null && grp.localStartVersion().equals(fut.initialVersio\n     ) throws IgniteCheckedException {\n         IgniteInternalFuture<?> res = cachesRegistry.addUnregistered(descs);\n \n+        for (DynamicCacheDescriptor d: descs) {", "originalCommit": "dd1719bef133b7ce236d9191da9790596fa5bde8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE4NzUzNA==", "url": "https://github.com/apache/ignite/pull/7852#discussion_r433187534", "bodyText": "fixed", "author": "timoninmaxim", "createdAt": "2020-06-01T11:44:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1ODEwOA=="}], "type": "inlineReview"}, {"oid": "ae468c56f341af2cb60a83c8953c89111775d296", "url": "https://github.com/apache/ignite/commit/ae468c56f341af2cb60a83c8953c89111775d296", "message": "fixup! IGNITE-13051 fix: checkstyle fix", "committedDate": "2020-06-01T11:40:02Z", "type": "commit"}]}