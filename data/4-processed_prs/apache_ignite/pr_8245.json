{"pr_number": 8245, "pr_title": "IGNITE-12977 Documentation.", "pr_createdAt": "2020-09-14T14:55:51Z", "pr_url": "https://github.com/apache/ignite/pull/8245", "timeline": [{"oid": "516a67eb514cda5e1ee0f27788df3c32cbba8d04", "url": "https://github.com/apache/ignite/commit/516a67eb514cda5e1ee0f27788df3c32cbba8d04", "message": "IGNITE-12977 Documentation.", "committedDate": "2020-09-14T14:52:22Z", "type": "commit"}, {"oid": "c6b93a095a2e1b9e8e03970b9d296ffe9d7aa002", "url": "https://github.com/apache/ignite/commit/c6b93a095a2e1b9e8e03970b9d296ffe9d7aa002", "message": "IGNITE-12977 Docs (wip).", "committedDate": "2020-09-15T09:40:37Z", "type": "commit"}, {"oid": "3e32e64fb2243335b4987f4cdf1c33a244ab66ec", "url": "https://github.com/apache/ignite/commit/3e32e64fb2243335b4987f4cdf1c33a244ab66ec", "message": "IGNITE-12977 Docs (wip).", "committedDate": "2020-09-15T10:41:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0MzMxNQ==", "url": "https://github.com/apache/ignite/pull/8245#discussion_r490043315", "bodyText": "'...unless one of the types mentioned below is explicitly specified, the REST protocol will exchange the key-value data in 'String' format.'", "author": "Silberfuchs1", "createdAt": "2020-09-17T07:53:36Z", "path": "docs/_docs/restapi.adoc", "diffHunk": "@@ -169,10 +169,13 @@ To set a custom expire time, set the system variable: `IGNITE_REST_SESSION_TIMEO\n ====\n \n == Data Types\n-The REST API also supports Java built-in types for put/get operations via `keyType` and `valueType` optional parameters.\n-Note that unless one of the below mentioned types are explicitly specified, the REST protocol exchanges the key-value data in `String` format.\n+The REST API also supports <<Java built-in types>> and <<Custom user defined types>> for put/get operations via `keyType` and `valueType` optional parameters.\n+\n+Note that unless one of the mentioned below types are explicitly specified, the REST protocol exchanges the key-value data in `String` format.", "originalCommit": "3e32e64fb2243335b4987f4cdf1c33a244ab66ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA5NjIzNQ==", "url": "https://github.com/apache/ignite/pull/8245#discussion_r490096235", "bodyText": "fixed, thanks", "author": "xtern", "createdAt": "2020-09-17T09:17:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0MzMxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0NTA3NA==", "url": "https://github.com/apache/ignite/pull/8245#discussion_r490045074", "bodyText": "'...cache named 'testCache' as a value...'", "author": "Silberfuchs1", "createdAt": "2020-09-17T07:56:32Z", "path": "docs/_docs/restapi.adoc", "diffHunk": "@@ -240,6 +243,69 @@ Similarly, the `get` command with `keyType=int` and `valueType=date` would be:\n http://[host]:[port]/ignite?cmd=get&key=1&cacheName=myCache&keyType=int&valueType=date\n ----\n \n+=== Custom user defined types\n+\n+For custom objects, the JSON format is used. For example, we can work with the following object using the REST API:\n+[source, javascript]\n+ {\n+  \"uid\": \"7e51118b-eb15-4373-b57f-4984cb9cd7ac\",\n+  \"name\": \"John Doe\",\n+  \"organization\": 5678901,\n+  \"married\": false,\n+  \"salary\": 156.1\n+ }\n+\n+The following request puts this object into the cache `testCache` as a value with a type name `Person` and a key `1`.", "originalCommit": "3e32e64fb2243335b4987f4cdf1c33a244ab66ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0NjUzMw==", "url": "https://github.com/apache/ignite/pull/8245#discussion_r490046533", "bodyText": "'...will be used for resolving JSON object field types.'", "author": "Silberfuchs1", "createdAt": "2020-09-17T07:58:54Z", "path": "docs/_docs/restapi.adoc", "diffHunk": "@@ -240,6 +243,69 @@ Similarly, the `get` command with `keyType=int` and `valueType=date` would be:\n http://[host]:[port]/ignite?cmd=get&key=1&cacheName=myCache&keyType=int&valueType=date\n ----\n \n+=== Custom user defined types\n+\n+For custom objects, the JSON format is used. For example, we can work with the following object using the REST API:\n+[source, javascript]\n+ {\n+  \"uid\": \"7e51118b-eb15-4373-b57f-4984cb9cd7ac\",\n+  \"name\": \"John Doe\",\n+  \"organization\": 5678901,\n+  \"married\": false,\n+  \"salary\": 156.1\n+ }\n+\n+The following request puts this object into the cache `testCache` as a value with a type name `Person` and a key `1`.\n+\n+ http://[host]:[port]/ignite?cacheName=testCache&cmd=put&keyType=int&key=1&valueType=Person&val=%7B%0A+++++%22uid%22%3A+%227e51118b-eb15-4373-b57f-4984cb9cd7ac%22%2C%0A+++++%22name%22%3A+%22John+Doe%22%2C%0A+++++%22organization%22%3A+5678901%2C%0A+++++%22married%22%3A+false%2C%0A+++++%22salary%22%3A+156.1%0A++%7D&\n+\n+On the server side, the JSON value from this request will be converted to link:/docs/data-modeling/data-modeling#binary-object-format[binary object]. Field types are resolved in the following order:\n+\n+* If the type name is a `Java class` available on the server, the class field types with corresponding names will be used for JSON object field types resolving.", "originalCommit": "3e32e64fb2243335b4987f4cdf1c33a244ab66ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA5NjU5MQ==", "url": "https://github.com/apache/ignite/pull/8245#discussion_r490096591", "bodyText": "fixed, thanks", "author": "xtern", "createdAt": "2020-09-17T09:17:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0NjUzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA0NzEyOQ==", "url": "https://github.com/apache/ignite/pull/8245#discussion_r490047129", "bodyText": "'If the type name is of a query entity type,...'", "author": "Silberfuchs1", "createdAt": "2020-09-17T07:59:54Z", "path": "docs/_docs/restapi.adoc", "diffHunk": "@@ -240,6 +243,69 @@ Similarly, the `get` command with `keyType=int` and `valueType=date` would be:\n http://[host]:[port]/ignite?cmd=get&key=1&cacheName=myCache&keyType=int&valueType=date\n ----\n \n+=== Custom user defined types\n+\n+For custom objects, the JSON format is used. For example, we can work with the following object using the REST API:\n+[source, javascript]\n+ {\n+  \"uid\": \"7e51118b-eb15-4373-b57f-4984cb9cd7ac\",\n+  \"name\": \"John Doe\",\n+  \"organization\": 5678901,\n+  \"married\": false,\n+  \"salary\": 156.1\n+ }\n+\n+The following request puts this object into the cache `testCache` as a value with a type name `Person` and a key `1`.\n+\n+ http://[host]:[port]/ignite?cacheName=testCache&cmd=put&keyType=int&key=1&valueType=Person&val=%7B%0A+++++%22uid%22%3A+%227e51118b-eb15-4373-b57f-4984cb9cd7ac%22%2C%0A+++++%22name%22%3A+%22John+Doe%22%2C%0A+++++%22organization%22%3A+5678901%2C%0A+++++%22married%22%3A+false%2C%0A+++++%22salary%22%3A+156.1%0A++%7D&\n+\n+On the server side, the JSON value from this request will be converted to link:/docs/data-modeling/data-modeling#binary-object-format[binary object]. Field types are resolved in the following order:\n+\n+* If the type name is a `Java class` available on the server, the class field types with corresponding names will be used for JSON object field types resolving.\n+* If the type name is a `query entity` type, the field types will be resolved according to the field type defined in the `query entity`.", "originalCommit": "3e32e64fb2243335b4987f4cdf1c33a244ab66ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA1NjYzNg==", "url": "https://github.com/apache/ignite/pull/8245#discussion_r490056636", "bodyText": "'...is loaded on the server.'", "author": "Silberfuchs1", "createdAt": "2020-09-17T08:15:26Z", "path": "docs/_docs/restapi.adoc", "diffHunk": "@@ -240,6 +243,69 @@ Similarly, the `get` command with `keyType=int` and `valueType=date` would be:\n http://[host]:[port]/ignite?cmd=get&key=1&cacheName=myCache&keyType=int&valueType=date\n ----\n \n+=== Custom user defined types\n+\n+For custom objects, the JSON format is used. For example, we can work with the following object using the REST API:\n+[source, javascript]\n+ {\n+  \"uid\": \"7e51118b-eb15-4373-b57f-4984cb9cd7ac\",\n+  \"name\": \"John Doe\",\n+  \"organization\": 5678901,\n+  \"married\": false,\n+  \"salary\": 156.1\n+ }\n+\n+The following request puts this object into the cache `testCache` as a value with a type name `Person` and a key `1`.\n+\n+ http://[host]:[port]/ignite?cacheName=testCache&cmd=put&keyType=int&key=1&valueType=Person&val=%7B%0A+++++%22uid%22%3A+%227e51118b-eb15-4373-b57f-4984cb9cd7ac%22%2C%0A+++++%22name%22%3A+%22John+Doe%22%2C%0A+++++%22organization%22%3A+5678901%2C%0A+++++%22married%22%3A+false%2C%0A+++++%22salary%22%3A+156.1%0A++%7D&\n+\n+On the server side, the JSON value from this request will be converted to link:/docs/data-modeling/data-modeling#binary-object-format[binary object]. Field types are resolved in the following order:\n+\n+* If the type name is a `Java class` available on the server, the class field types with corresponding names will be used for JSON object field types resolving.\n+* If the type name is a `query entity` type, the field types will be resolved according to the field type defined in the `query entity`.\n+* Otherwise, the field types will be resolved according to regular JSON types.\n+\n+For example, if there is no definition of the \"Person\" type on the server, the fields will be converted in accordance with the standard JSON types:\n+[source, javascript]\n+\"uid\": \"7e51118b-eb15-4373-b57f-4984cb9cd7ac\", // string\n+\"name\": \"John Doe\",                            // string\n+\"organization\": 5678901,                       // int\n+\"married\": false,                              // boolean\n+\"salary\": 156.1                                // double\n+\n+In case the `query entity` was set\n+[source,xml]\n+ <bean class=\"org.apache.ignite.cache.QueryEntity\">\n+  <property name=\"keyType\"   value=\"java.lang.Integer\"/>\n+  <property name=\"valueType\" value=\"Person\"/>\n+  <property name=\"fields\">\n+   <map>\n+    <entry key=\"uid\"          value=\"java.util.UUID\"/>\n+    <entry key=\"name\"         value=\"java.lang.String\"/>\n+    <entry key=\"organization\" value=\"java.lang.Long\"/>\n+    <entry key=\"married\"      value=\"java.lang.Boolean\"/>\n+    <entry key=\"salary\"       value=\"java.lang.Float\"/>\n+   </map>\n+  </property>\n+ </bean>\n+\n+or Java class \"Person\" loaded on the server.", "originalCommit": "3e32e64fb2243335b4987f4cdf1c33a244ab66ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA1NzE1MA==", "url": "https://github.com/apache/ignite/pull/8245#discussion_r490057150", "bodyText": "If the query entity is set", "author": "Silberfuchs1", "createdAt": "2020-09-17T08:16:10Z", "path": "docs/_docs/restapi.adoc", "diffHunk": "@@ -240,6 +243,69 @@ Similarly, the `get` command with `keyType=int` and `valueType=date` would be:\n http://[host]:[port]/ignite?cmd=get&key=1&cacheName=myCache&keyType=int&valueType=date\n ----\n \n+=== Custom user defined types\n+\n+For custom objects, the JSON format is used. For example, we can work with the following object using the REST API:\n+[source, javascript]\n+ {\n+  \"uid\": \"7e51118b-eb15-4373-b57f-4984cb9cd7ac\",\n+  \"name\": \"John Doe\",\n+  \"organization\": 5678901,\n+  \"married\": false,\n+  \"salary\": 156.1\n+ }\n+\n+The following request puts this object into the cache `testCache` as a value with a type name `Person` and a key `1`.\n+\n+ http://[host]:[port]/ignite?cacheName=testCache&cmd=put&keyType=int&key=1&valueType=Person&val=%7B%0A+++++%22uid%22%3A+%227e51118b-eb15-4373-b57f-4984cb9cd7ac%22%2C%0A+++++%22name%22%3A+%22John+Doe%22%2C%0A+++++%22organization%22%3A+5678901%2C%0A+++++%22married%22%3A+false%2C%0A+++++%22salary%22%3A+156.1%0A++%7D&\n+\n+On the server side, the JSON value from this request will be converted to link:/docs/data-modeling/data-modeling#binary-object-format[binary object]. Field types are resolved in the following order:\n+\n+* If the type name is a `Java class` available on the server, the class field types with corresponding names will be used for JSON object field types resolving.\n+* If the type name is a `query entity` type, the field types will be resolved according to the field type defined in the `query entity`.\n+* Otherwise, the field types will be resolved according to regular JSON types.\n+\n+For example, if there is no definition of the \"Person\" type on the server, the fields will be converted in accordance with the standard JSON types:\n+[source, javascript]\n+\"uid\": \"7e51118b-eb15-4373-b57f-4984cb9cd7ac\", // string\n+\"name\": \"John Doe\",                            // string\n+\"organization\": 5678901,                       // int\n+\"married\": false,                              // boolean\n+\"salary\": 156.1                                // double\n+\n+In case the `query entity` was set", "originalCommit": "3e32e64fb2243335b4987f4cdf1c33a244ab66ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d4af63051404b6a2d8d4c3bd55242206a268cc01", "url": "https://github.com/apache/ignite/commit/d4af63051404b6a2d8d4c3bd55242206a268cc01", "message": "IGNITE-12977 Review notes lang fixes.", "committedDate": "2020-09-17T09:16:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE4NTMxNw==", "url": "https://github.com/apache/ignite/pull/8245#discussion_r490185317", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            or Java class \"Person\" is loaded on the server.\n          \n          \n            \n            If Java class \"Person\" is loaded on the server, class fields will be filled with given values.", "author": "SomeFire", "createdAt": "2020-09-17T11:56:33Z", "path": "docs/_docs/restapi.adoc", "diffHunk": "@@ -240,6 +243,69 @@ Similarly, the `get` command with `keyType=int` and `valueType=date` would be:\n http://[host]:[port]/ignite?cmd=get&key=1&cacheName=myCache&keyType=int&valueType=date\n ----\n \n+=== Custom user defined types\n+\n+For custom objects, the JSON format is used. For example, we can work with the following object using the REST API:\n+[source, javascript]\n+ {\n+  \"uid\": \"7e51118b-eb15-4373-b57f-4984cb9cd7ac\",\n+  \"name\": \"John Doe\",\n+  \"organization\": 5678901,\n+  \"married\": false,\n+  \"salary\": 156.1\n+ }\n+\n+The following request puts this object into the cache named 'testCache' as a value with a type name `Person` and a key `1`.\n+\n+ http://[host]:[port]/ignite?cacheName=testCache&cmd=put&keyType=int&key=1&valueType=Person&val=%7B%0A+++++%22uid%22%3A+%227e51118b-eb15-4373-b57f-4984cb9cd7ac%22%2C%0A+++++%22name%22%3A+%22John+Doe%22%2C%0A+++++%22organization%22%3A+5678901%2C%0A+++++%22married%22%3A+false%2C%0A+++++%22salary%22%3A+156.1%0A++%7D&\n+\n+On the server side, the JSON value from this request will be converted to link:/docs/data-modeling/data-modeling#binary-object-format[binary object]. Field types are resolved in the following order:\n+\n+* If the type name is a `Java class` available on the server, the class field types with corresponding names will be used for resolving JSON object field types.\n+* If the type name is of a `query entity` type, the field types will be resolved according to the field type defined in the `query entity`.\n+* Otherwise, the field types will be resolved according to regular JSON types.\n+\n+For example, if there is no definition of the \"Person\" type on the server, the fields will be converted in accordance with the standard JSON types:\n+[source, javascript]\n+\"uid\": \"7e51118b-eb15-4373-b57f-4984cb9cd7ac\", // string\n+\"name\": \"John Doe\",                            // string\n+\"organization\": 5678901,                       // int\n+\"married\": false,                              // boolean\n+\"salary\": 156.1                                // double\n+\n+If the `query entity` is set\n+[source,xml]\n+ <bean class=\"org.apache.ignite.cache.QueryEntity\">\n+  <property name=\"keyType\"   value=\"java.lang.Integer\"/>\n+  <property name=\"valueType\" value=\"Person\"/>\n+  <property name=\"fields\">\n+   <map>\n+    <entry key=\"uid\"          value=\"java.util.UUID\"/>\n+    <entry key=\"name\"         value=\"java.lang.String\"/>\n+    <entry key=\"organization\" value=\"java.lang.Long\"/>\n+    <entry key=\"married\"      value=\"java.lang.Boolean\"/>\n+    <entry key=\"salary\"       value=\"java.lang.Float\"/>\n+   </map>\n+  </property>\n+ </bean>\n+\n+or Java class \"Person\" is loaded on the server.", "originalCommit": "d4af63051404b6a2d8d4c3bd55242206a268cc01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE4NTczNQ==", "url": "https://github.com/apache/ignite/pull/8245#discussion_r490185735", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the `query entity` is set\n          \n          \n            \n            If the `query entity` is set, query fields will be filled with given values.", "author": "SomeFire", "createdAt": "2020-09-17T11:57:17Z", "path": "docs/_docs/restapi.adoc", "diffHunk": "@@ -240,6 +243,69 @@ Similarly, the `get` command with `keyType=int` and `valueType=date` would be:\n http://[host]:[port]/ignite?cmd=get&key=1&cacheName=myCache&keyType=int&valueType=date\n ----\n \n+=== Custom user defined types\n+\n+For custom objects, the JSON format is used. For example, we can work with the following object using the REST API:\n+[source, javascript]\n+ {\n+  \"uid\": \"7e51118b-eb15-4373-b57f-4984cb9cd7ac\",\n+  \"name\": \"John Doe\",\n+  \"organization\": 5678901,\n+  \"married\": false,\n+  \"salary\": 156.1\n+ }\n+\n+The following request puts this object into the cache named 'testCache' as a value with a type name `Person` and a key `1`.\n+\n+ http://[host]:[port]/ignite?cacheName=testCache&cmd=put&keyType=int&key=1&valueType=Person&val=%7B%0A+++++%22uid%22%3A+%227e51118b-eb15-4373-b57f-4984cb9cd7ac%22%2C%0A+++++%22name%22%3A+%22John+Doe%22%2C%0A+++++%22organization%22%3A+5678901%2C%0A+++++%22married%22%3A+false%2C%0A+++++%22salary%22%3A+156.1%0A++%7D&\n+\n+On the server side, the JSON value from this request will be converted to link:/docs/data-modeling/data-modeling#binary-object-format[binary object]. Field types are resolved in the following order:\n+\n+* If the type name is a `Java class` available on the server, the class field types with corresponding names will be used for resolving JSON object field types.\n+* If the type name is of a `query entity` type, the field types will be resolved according to the field type defined in the `query entity`.\n+* Otherwise, the field types will be resolved according to regular JSON types.\n+\n+For example, if there is no definition of the \"Person\" type on the server, the fields will be converted in accordance with the standard JSON types:\n+[source, javascript]\n+\"uid\": \"7e51118b-eb15-4373-b57f-4984cb9cd7ac\", // string\n+\"name\": \"John Doe\",                            // string\n+\"organization\": 5678901,                       // int\n+\"married\": false,                              // boolean\n+\"salary\": 156.1                                // double\n+\n+If the `query entity` is set", "originalCommit": "d4af63051404b6a2d8d4c3bd55242206a268cc01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "63d9ca22151ecd0ef5fe9f3976539ff9ead47f40", "url": "https://github.com/apache/ignite/commit/63d9ca22151ecd0ef5fe9f3976539ff9ead47f40", "message": "IGNITE-12977 Use table to display definition example.", "committedDate": "2020-09-17T15:18:39Z", "type": "commit"}, {"oid": "63d9ca22151ecd0ef5fe9f3976539ff9ead47f40", "url": "https://github.com/apache/ignite/commit/63d9ca22151ecd0ef5fe9f3976539ff9ead47f40", "message": "IGNITE-12977 Use table to display definition example.", "committedDate": "2020-09-17T15:18:39Z", "type": "forcePushed"}]}