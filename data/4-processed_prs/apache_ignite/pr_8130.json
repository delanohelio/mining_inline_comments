{"pr_number": 8130, "pr_title": "Cellular affinity test", "pr_createdAt": "2020-08-07T11:31:35Z", "pr_url": "https://github.com/apache/ignite/pull/8130", "timeline": [{"oid": "91b04f12ace98bb5fc178f3995429c4f4dd66c95", "url": "https://github.com/apache/ignite/commit/91b04f12ace98bb5fc178f3995429c4f4dd66c95", "message": "Cellular affinity test", "committedDate": "2020-08-07T11:30:29Z", "type": "commit"}, {"oid": "166ac1992f41b8cc03a331ec26f235222de56f0b", "url": "https://github.com/apache/ignite/commit/166ac1992f41b8cc03a331ec26f235222de56f0b", "message": "Cellular affinity test", "committedDate": "2020-08-07T12:13:49Z", "type": "commit"}, {"oid": "91149255df8ef30a11fe45c7dce0e56ac43ce2ff", "url": "https://github.com/apache/ignite/commit/91149255df8ef30a11fe45c7dce0e56ac43ce2ff", "message": "Cellular affinity test", "committedDate": "2020-08-07T12:28:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxOTgzOQ==", "url": "https://github.com/apache/ignite/pull/8130#discussion_r467019839", "bodyText": "Oops, missing newline", "author": "ivandasch", "createdAt": "2020-08-07T12:51:05Z", "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/cellular_affinity_test/CellularAffinityBackupFilter.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.cellular_affinity_test;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.lang.IgniteBiPredicate;\n+\n+/**\n+ *\n+ */\n+public class CellularAffinityBackupFilter implements IgniteBiPredicate<ClusterNode, List<ClusterNode>> {\n+    /** */\n+    private static final long serialVersionUID = 1L;\n+\n+    /** Attribute name. */\n+    private final String attrName;\n+\n+    /**\n+     * @param attrName The attribute name for the attribute to compare.\n+     */\n+    public CellularAffinityBackupFilter(String attrName) {\n+        this.attrName = attrName;\n+    }\n+\n+    /**\n+     * Defines a predicate which returns {@code true} if a node is acceptable for a backup\n+     * or {@code false} otherwise. An acceptable node is one where its attribute value\n+     * is exact match with previously selected nodes.  If an attribute does not\n+     * exist on exactly one node of a pair, then the attribute does not match.  If the attribute\n+     * does not exist both nodes of a pair, then the attribute matches.\n+     *\n+     * @param candidate          A node that is a candidate for becoming a backup node for a partition.\n+     * @param previouslySelected A list of primary/backup nodes already chosen for a partition.\n+     *                           The primary is first.\n+     */\n+    @Override public boolean apply(ClusterNode candidate, List<ClusterNode> previouslySelected) {\n+        for (ClusterNode node : previouslySelected)\n+            return Objects.equals(candidate.attribute(attrName), node.attribute(attrName));\n+\n+        return true;\n+    }\n+}", "originalCommit": "91149255df8ef30a11fe45c7dce0e56ac43ce2ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkxNjQxNg==", "url": "https://github.com/apache/ignite/pull/8130#discussion_r467916416", "bodyText": "Done", "author": "anton-vinogradov", "createdAt": "2020-08-10T13:49:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxOTgzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyMDk0Ng==", "url": "https://github.com/apache/ignite/pull/8130#discussion_r467020946", "bodyText": "Cool!", "author": "ivandasch", "createdAt": "2020-08-07T12:53:12Z", "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_aware.py", "diffHunk": "@@ -47,10 +47,14 @@ class IgniteAwareService(BackgroundThreadService):\n     }\n \n     # pylint: disable=R0913\n-    def __init__(self, context, num_nodes, modules, client_mode, version, properties):\n+    def __init__(self, context, num_nodes, modules, client_mode, version, properties, jvm_options):\n         super(IgniteAwareService, self).__init__(context, num_nodes)\n \n-        self.jvm_options = context.globals.get(\"jvm_opts\", \"\")\n+        global_jvm_options = context.globals.get(\"jvm_opts\", \"\")\n+\n+        service_jvm_options = \" \".join(map(lambda x: '-J' + x, jvm_options)) if jvm_options else \"\"\n+\n+        self.jvm_options = \" \".join(filter(None, [global_jvm_options, service_jvm_options]))", "originalCommit": "91149255df8ef30a11fe45c7dce0e56ac43ce2ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyMTg5NA==", "url": "https://github.com/apache/ignite/pull/8130#discussion_r467021894", "bodyText": "Smells like a copy-paste? I suppose that service start can be extracted in separate method (may be nested method is better?)", "author": "ivandasch", "createdAt": "2020-08-07T12:55:04Z", "path": "modules/ducktests/tests/ignitetest/tests/cellular_affinity_test.py", "diffHunk": "@@ -0,0 +1,123 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+This module contains Cellular Affinity tests.\n+\"\"\"\n+\n+from ducktape.mark import parametrize\n+from ducktape.mark.resource import cluster\n+from jinja2 import Template\n+\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.tests.utils.ignite_test import IgniteTest\n+from ignitetest.tests.utils.version import DEV_BRANCH, IgniteVersion\n+\n+\n+# pylint: disable=W0223\n+class CellularAffinity(IgniteTest):\n+    \"\"\"\n+    Tests Cellular Affinity scenarios.\n+    \"\"\"\n+    NUM_NODES = 3\n+\n+    ATTRIBUTE = \"CELL\"\n+\n+    CACHE_NAME = \"test-cache\"\n+\n+    CONFIG_TEMPLATE = \"\"\"\n+            <property name=\"cacheConfiguration\">\n+                <list>\n+                    <bean class=\"org.apache.ignite.configuration.CacheConfiguration\">\n+                        <property name=\"affinity\">\n+                            <bean class=\"org.apache.ignite.cache.affinity.rendezvous.RendezvousAffinityFunction\">\n+                                <property name=\"affinityBackupFilter\">\n+                                    <bean class=\"org.apache.ignite.internal.ducktest.tests.cellular_affinity_test.CellularAffinityBackupFilter\">\n+                                        <constructor-arg value=\"{{ attr }}\"/>\n+                                    </bean>\n+                                </property>\n+                            </bean>\n+                        </property>\n+                        <property name=\"name\" value=\"{{ cacheName }}\"/>\n+                        <property name=\"backups\" value=\"{{ nodes }}\"/> \n+                    </bean>\n+                </list>\n+            </property>\n+        \"\"\"\n+\n+    @staticmethod\n+    def properties():\n+        \"\"\"\n+        :return: Configuration properties.\n+        \"\"\"\n+        return Template(CellularAffinity.CONFIG_TEMPLATE) \\\n+            .render(nodes=CellularAffinity.NUM_NODES,  # bigger than cell capacity (to handle single cell useless test)\n+                    attr=CellularAffinity.ATTRIBUTE,\n+                    cacheName=CellularAffinity.CACHE_NAME)\n+\n+    def __init__(self, test_context):\n+        super(CellularAffinity, self).__init__(test_context=test_context)\n+\n+    def setUp(self):\n+        pass\n+\n+    def teardown(self):\n+        pass\n+\n+    @cluster(num_nodes=NUM_NODES * 3 + 1)\n+    @parametrize(version=str(DEV_BRANCH))\n+    def test(self, version):\n+        \"\"\"\n+        Test Cellular Affinity scenario (partition distribution).\n+        \"\"\"\n+        ignite_version = IgniteVersion(version)\n+\n+        ignites1 = IgniteService(", "originalCommit": "91149255df8ef30a11fe45c7dce0e56ac43ce2ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk2ODgyMw==", "url": "https://github.com/apache/ignite/pull/8130#discussion_r467968823", "bodyText": "Done", "author": "anton-vinogradov", "createdAt": "2020-08-10T15:04:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyMTg5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyMjgwMw==", "url": "https://github.com/apache/ignite/pull/8130#discussion_r467022803", "bodyText": "Test without assertions or meauserements looks a little bit weird. May be assert smth in checker log? (log_monitor and wait_until, I mean)", "author": "ivandasch", "createdAt": "2020-08-07T12:56:49Z", "path": "modules/ducktests/tests/ignitetest/tests/cellular_affinity_test.py", "diffHunk": "@@ -0,0 +1,123 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+This module contains Cellular Affinity tests.\n+\"\"\"\n+\n+from ducktape.mark import parametrize\n+from ducktape.mark.resource import cluster\n+from jinja2 import Template\n+\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.tests.utils.ignite_test import IgniteTest\n+from ignitetest.tests.utils.version import DEV_BRANCH, IgniteVersion\n+\n+\n+# pylint: disable=W0223\n+class CellularAffinity(IgniteTest):\n+    \"\"\"\n+    Tests Cellular Affinity scenarios.\n+    \"\"\"\n+    NUM_NODES = 3\n+\n+    ATTRIBUTE = \"CELL\"\n+\n+    CACHE_NAME = \"test-cache\"\n+\n+    CONFIG_TEMPLATE = \"\"\"\n+            <property name=\"cacheConfiguration\">\n+                <list>\n+                    <bean class=\"org.apache.ignite.configuration.CacheConfiguration\">\n+                        <property name=\"affinity\">\n+                            <bean class=\"org.apache.ignite.cache.affinity.rendezvous.RendezvousAffinityFunction\">\n+                                <property name=\"affinityBackupFilter\">\n+                                    <bean class=\"org.apache.ignite.internal.ducktest.tests.cellular_affinity_test.CellularAffinityBackupFilter\">\n+                                        <constructor-arg value=\"{{ attr }}\"/>\n+                                    </bean>\n+                                </property>\n+                            </bean>\n+                        </property>\n+                        <property name=\"name\" value=\"{{ cacheName }}\"/>\n+                        <property name=\"backups\" value=\"{{ nodes }}\"/> \n+                    </bean>\n+                </list>\n+            </property>\n+        \"\"\"\n+\n+    @staticmethod\n+    def properties():\n+        \"\"\"\n+        :return: Configuration properties.\n+        \"\"\"\n+        return Template(CellularAffinity.CONFIG_TEMPLATE) \\\n+            .render(nodes=CellularAffinity.NUM_NODES,  # bigger than cell capacity (to handle single cell useless test)\n+                    attr=CellularAffinity.ATTRIBUTE,\n+                    cacheName=CellularAffinity.CACHE_NAME)\n+\n+    def __init__(self, test_context):\n+        super(CellularAffinity, self).__init__(test_context=test_context)\n+\n+    def setUp(self):\n+        pass\n+\n+    def teardown(self):\n+        pass\n+\n+    @cluster(num_nodes=NUM_NODES * 3 + 1)\n+    @parametrize(version=str(DEV_BRANCH))\n+    def test(self, version):\n+        \"\"\"\n+        Test Cellular Affinity scenario (partition distribution).\n+        \"\"\"\n+        ignite_version = IgniteVersion(version)\n+\n+        ignites1 = IgniteService(\n+            self.test_context,\n+            num_nodes=CellularAffinity.NUM_NODES,\n+            version=ignite_version,\n+            properties=self.properties(),\n+            jvm_opts=['-D' + CellularAffinity.ATTRIBUTE + '=1'])\n+\n+        ignites1.start()\n+\n+        ignites2 = IgniteService(\n+            self.test_context,\n+            num_nodes=CellularAffinity.NUM_NODES,\n+            version=ignite_version,\n+            properties=self.properties(),\n+            jvm_opts=['-D' + CellularAffinity.ATTRIBUTE + '=2'])\n+\n+        ignites2.start()\n+\n+        ignites3 = IgniteService(\n+            self.test_context,\n+            num_nodes=CellularAffinity.NUM_NODES,\n+            version=ignite_version,\n+            properties=self.properties(),\n+            jvm_opts=['-D' + CellularAffinity.ATTRIBUTE + '=XXX', '-DRANDOM=42'])\n+\n+        ignites3.start()\n+\n+        checker = IgniteApplicationService(\n+            self.test_context,\n+            java_class_name=\"org.apache.ignite.internal.ducktest.tests.cellular_affinity_test.DistributionChecker\",\n+            params={\"cacheName\": CellularAffinity.CACHE_NAME,\n+                    \"attr\": CellularAffinity.ATTRIBUTE,\n+                    \"nodesPerCell\": self.NUM_NODES},\n+            version=ignite_version)\n+\n+        checker.start()", "originalCommit": "91149255df8ef30a11fe45c7dce0e56ac43ce2ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk2NjUwOQ==", "url": "https://github.com/apache/ignite/pull/8130#discussion_r467966509", "bodyText": "For now, any application MUST return \"IGNITE_APPLICATION_INITIALIZED\" and \"IGNITE_APPLICATION_FINISHED\" (both), otherwise, it will fail with an error.\n\"IGNITE_APPLICATION_FINISHED\" can be produced only in case of success:\n    protected void markFinished() {\n        assert !finished;\n\n        log.info(APP_FINISHED); // \"IGNITE_APPLICATION_FINISHED\"\n\n        finished = true;\n    }\n\nChecker performs checks can be found inside java class, that additional assertion do we need here?", "author": "anton-vinogradov", "createdAt": "2020-08-10T15:01:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyMjgwMw=="}], "type": "inlineReview"}, {"oid": "d92fc2a315289bf0e749505230af8d5cb035c877", "url": "https://github.com/apache/ignite/commit/d92fc2a315289bf0e749505230af8d5cb035c877", "message": "Merge branch 'ignite-ducktape' into ignite-ducktape-cellular-affinity-test", "committedDate": "2020-08-10T13:41:53Z", "type": "commit"}, {"oid": "aafbd601725408074ffcdbbdae17f4598437c827", "url": "https://github.com/apache/ignite/commit/aafbd601725408074ffcdbbdae17f4598437c827", "message": "Cellular affinity test", "committedDate": "2020-08-10T13:48:55Z", "type": "commit"}, {"oid": "47d166fef9aadcfe4f757816268813dbc515481f", "url": "https://github.com/apache/ignite/commit/47d166fef9aadcfe4f757816268813dbc515481f", "message": "Cellular affinity test", "committedDate": "2020-08-10T15:04:41Z", "type": "commit"}, {"oid": "0d37d62f5a4186eef91381db8fd017fdadb089c4", "url": "https://github.com/apache/ignite/commit/0d37d62f5a4186eef91381db8fd017fdadb089c4", "message": "Cellular affinity test", "committedDate": "2020-08-11T08:49:04Z", "type": "commit"}]}