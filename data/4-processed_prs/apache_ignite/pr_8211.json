{"pr_number": 8211, "pr_title": "Ducktests iptables", "pr_createdAt": "2020-09-02T18:31:26Z", "pr_url": "https://github.com/apache/ignite/pull/8211", "timeline": [{"oid": "7d3444477858620c0eaf087d58c1213dae31cd18", "url": "https://github.com/apache/ignite/commit/7d3444477858620c0eaf087d58c1213dae31cd18", "message": "fixes after review", "committedDate": "2020-10-19T10:19:33Z", "type": "commit"}, {"oid": "bedf1ff9e82feacb07b1313940186aa06bfc08c7", "url": "https://github.com/apache/ignite/commit/bedf1ff9e82feacb07b1313940186aa06bfc08c7", "message": "fixes after review 2", "committedDate": "2020-10-19T12:25:04Z", "type": "commit"}, {"oid": "4158d2c82e5cc9361e6340f62b195b241d959d2e", "url": "https://github.com/apache/ignite/commit/4158d2c82e5cc9361e6340f62b195b241d959d2e", "message": "fixes after review 3", "committedDate": "2020-10-19T15:01:34Z", "type": "commit"}, {"oid": "9bbdf14106137d0504a7fb1888178c91faa4de79", "url": "https://github.com/apache/ignite/commit/9bbdf14106137d0504a7fb1888178c91faa4de79", "message": "fixes after review 5", "committedDate": "2020-10-20T07:32:53Z", "type": "commit"}, {"oid": "d2a01c805acc8e694e68af6dd9d6e46c55c6bc67", "url": "https://github.com/apache/ignite/commit/d2a01c805acc8e694e68af6dd9d6e46c55c6bc67", "message": "fixes after review 6", "committedDate": "2020-10-20T08:45:34Z", "type": "commit"}, {"oid": "8b159dde7581fba4adb34ce8d70d2df6553e67c9", "url": "https://github.com/apache/ignite/commit/8b159dde7581fba4adb34ce8d70d2df6553e67c9", "message": "fixes after review 7", "committedDate": "2020-10-20T10:58:32Z", "type": "commit"}, {"oid": "917e32a8e8cbf616371e109b45527cbcaf2862fb", "url": "https://github.com/apache/ignite/commit/917e32a8e8cbf616371e109b45527cbcaf2862fb", "message": "fixes after review 8", "committedDate": "2020-10-20T11:18:47Z", "type": "commit"}, {"oid": "734bd8397b92f3eae5c71b92d80155666eb29c38", "url": "https://github.com/apache/ignite/commit/734bd8397b92f3eae5c71b92d80155666eb29c38", "message": "in progress. amend.", "committedDate": "2020-09-02T13:26:52Z", "type": "commit"}, {"oid": "27d514c02ed9bc923cbc3312851d515fef313a18", "url": "https://github.com/apache/ignite/commit/27d514c02ed9bc923cbc3312851d515fef313a18", "message": "first impl.", "committedDate": "2020-09-02T18:27:43Z", "type": "commit"}, {"oid": "96da4f3ae4f4175811a1836a9dd46cb553cfee06", "url": "https://github.com/apache/ignite/commit/96da4f3ae4f4175811a1836a9dd46cb553cfee06", "message": "Merge branch 'ignite-ducktape' into ducktests-iptables\n\n# Conflicts:\n#\tmodules/ducktests/tests/ignitetest/services/utils/ignite_configuration/discovery.py\n#\tmodules/ducktests/tests/ignitetest/services/utils/templates/discovery_macro.j2\n#\tmodules/ducktests/tests/ignitetest/tests/discovery_test.py", "committedDate": "2020-09-02T18:37:17Z", "type": "commit"}, {"oid": "7c24798378a669e98fb3b3427440e04349251b2b", "url": "https://github.com/apache/ignite/commit/7c24798378a669e98fb3b3427440e04349251b2b", "message": "fix", "committedDate": "2020-09-03T08:29:20Z", "type": "commit"}, {"oid": "c5106bc70e2eae13713d019de589f2062f6bf8a9", "url": "https://github.com/apache/ignite/commit/c5106bc70e2eae13713d019de589f2062f6bf8a9", "message": "impl", "committedDate": "2020-09-04T15:59:01Z", "type": "commit"}, {"oid": "ad513b6f6adf32152415e6274f6854fd4c1fdac4", "url": "https://github.com/apache/ignite/commit/ad513b6f6adf32152415e6274f6854fd4c1fdac4", "message": "Merge branch 'ignite-ducktape' into ducktests-iptables\n\n# Conflicts:\n#\tmodules/ducktests/tests/ignitetest/tests/discovery_test.py", "committedDate": "2020-09-04T16:05:03Z", "type": "commit"}, {"oid": "7ce73f3b4f663aedc15f96e878db2c9e36ab976b", "url": "https://github.com/apache/ignite/commit/7ce73f3b4f663aedc15f96e878db2c9e36ab976b", "message": "merged ignite-ducktape", "committedDate": "2020-09-04T16:18:37Z", "type": "commit"}, {"oid": "55f2b581f756a0f20de030337ac4f160f6587357", "url": "https://github.com/apache/ignite/commit/55f2b581f756a0f20de030337ac4f160f6587357", "message": "Merge remote-tracking branch 'origin/ducktests-iptables' into ducktests-iptables\n\n# Conflicts:\n#\tmodules/ducktests/tests/ignitetest/services/ignite.py", "committedDate": "2020-09-04T16:19:31Z", "type": "commit"}, {"oid": "c19d8da95245fb16f992bca83a28c2069691af45", "url": "https://github.com/apache/ignite/commit/c19d8da95245fb16f992bca83a28c2069691af45", "message": "fix", "committedDate": "2020-09-04T16:21:27Z", "type": "commit"}, {"oid": "be178a3186a36f2bb37a1e54d04f80845f960533", "url": "https://github.com/apache/ignite/commit/be178a3186a36f2bb37a1e54d04f80845f960533", "message": "removed double call", "committedDate": "2020-09-07T09:51:53Z", "type": "commit"}, {"oid": "ab236576ab42c0fcb9f22ad84105355cd5985fe8", "url": "https://github.com/apache/ignite/commit/ab236576ab42c0fcb9f22ad84105355cd5985fe8", "message": "+ logs", "committedDate": "2020-09-07T16:45:21Z", "type": "commit"}, {"oid": "bd506051a3a5384b6b20b6f36ad159772f546362", "url": "https://github.com/apache/ignite/commit/bd506051a3a5384b6b20b6f36ad159772f546362", "message": "restoring rules", "committedDate": "2020-09-08T14:52:43Z", "type": "commit"}, {"oid": "171c4b4e853385932cdbd3425a0b0fc87f37fc86", "url": "https://github.com/apache/ignite/commit/171c4b4e853385932cdbd3425a0b0fc87f37fc86", "message": "choice of iptables or iptables-legacy", "committedDate": "2020-09-08T15:45:19Z", "type": "commit"}, {"oid": "7176c5321454e8cd12b535b15d53fd44893e2960", "url": "https://github.com/apache/ignite/commit/7176c5321454e8cd12b535b15d53fd44893e2960", "message": "style fix", "committedDate": "2020-09-08T16:21:44Z", "type": "commit"}, {"oid": "a08a674eb94c93a052a3f3acc77b1af9133d805e", "url": "https://github.com/apache/ignite/commit/a08a674eb94c93a052a3f3acc77b1af9133d805e", "message": "test with iptables -F", "committedDate": "2020-09-08T18:06:30Z", "type": "commit"}, {"oid": "998cce7701a752afe1267f0a644663d0310a5e45", "url": "https://github.com/apache/ignite/commit/998cce7701a752afe1267f0a644663d0310a5e45", "message": "+ iptables log", "committedDate": "2020-09-09T11:03:20Z", "type": "commit"}, {"oid": "2071fdeeebf6d3aaeb60e77acc8f7729c0c79060", "url": "https://github.com/apache/ignite/commit/2071fdeeebf6d3aaeb60e77acc8f7729c0c79060", "message": "+ not-started node name in the log", "committedDate": "2020-09-10T10:04:52Z", "type": "commit"}, {"oid": "33dd82b2a99183babd778e8e3822c1a0357f51d1", "url": "https://github.com/apache/ignite/commit/33dd82b2a99183babd778e8e3822c1a0357f51d1", "message": "looks good", "committedDate": "2020-09-10T12:43:57Z", "type": "commit"}, {"oid": "30390634ab9cd0ec686a9239a215bf505c2a05ce", "url": "https://github.com/apache/ignite/commit/30390634ab9cd0ec686a9239a215bf505c2a05ce", "message": "test with '-F' again", "committedDate": "2020-09-10T16:58:07Z", "type": "commit"}, {"oid": "a90f785ef4db4feb3a7f52933a15dbe30e3a1cb6", "url": "https://github.com/apache/ignite/commit/a90f785ef4db4feb3a7f52933a15dbe30e3a1cb6", "message": "+ output", "committedDate": "2020-09-11T10:05:03Z", "type": "commit"}, {"oid": "9114562b905f9419188c93921d063c99d0c0eedf", "url": "https://github.com/apache/ignite/commit/9114562b905f9419188c93921d063c99d0c0eedf", "message": "bigger FDT", "committedDate": "2020-09-11T11:46:32Z", "type": "commit"}, {"oid": "e2e0ac1b8a753529efbad4f35a47eec556cd62c9", "url": "https://github.com/apache/ignite/commit/e2e0ac1b8a753529efbad4f35a47eec556cd62c9", "message": "+ new iptables settings log", "committedDate": "2020-09-11T13:21:36Z", "type": "commit"}, {"oid": "dae8ddfbaa37fc0fdbaafdf623acae8d74615b98", "url": "https://github.com/apache/ignite/commit/dae8ddfbaa37fc0fdbaafdf623acae8d74615b98", "message": "longer timeout to wait for the failure", "committedDate": "2020-09-11T14:13:19Z", "type": "commit"}, {"oid": "561c54f540e4b4eb1b1950a49e6c4ce1726ff9e5", "url": "https://github.com/apache/ignite/commit/561c54f540e4b4eb1b1950a49e6c4ce1726ff9e5", "message": "longer timeout to wait for the failure", "committedDate": "2020-09-11T14:31:44Z", "type": "commit"}, {"oid": "b1b04c110cf74830ca0b2954df4b9324c871da46", "url": "https://github.com/apache/ignite/commit/b1b04c110cf74830ca0b2954df4b9324c871da46", "message": "reverted to restoring instead of clearing", "committedDate": "2020-09-11T16:17:09Z", "type": "commit"}, {"oid": "400ee762263a63ffc9765490d3673a1b049e76e6", "url": "https://github.com/apache/ignite/commit/400ee762263a63ffc9765490d3673a1b049e76e6", "message": "looks good 2.", "committedDate": "2020-09-11T17:29:05Z", "type": "commit"}, {"oid": "4f55fea093db65974ab92195140d1430a3df4f4c", "url": "https://github.com/apache/ignite/commit/4f55fea093db65974ab92195140d1430a3df4f4c", "message": "loglevel info", "committedDate": "2020-09-14T11:34:19Z", "type": "commit"}, {"oid": "413832e5b58d1b181b1d66bedeb802f34f8e58e1", "url": "https://github.com/apache/ignite/commit/413832e5b58d1b181b1d66bedeb802f34f8e58e1", "message": "loglevel info 2", "committedDate": "2020-09-14T14:25:59Z", "type": "commit"}, {"oid": "ad9c7bee7b5debb7285ff7dd2176ac2d120aeda5", "url": "https://github.com/apache/ignite/commit/ad9c7bee7b5debb7285ff7dd2176ac2d120aeda5", "message": "loglevel info 3", "committedDate": "2020-09-14T15:36:56Z", "type": "commit"}, {"oid": "84ac3e8ff2995b80f0c90b32977c790471738f6f", "url": "https://github.com/apache/ignite/commit/84ac3e8ff2995b80f0c90b32977c790471738f6f", "message": "looks good 3", "committedDate": "2020-09-14T16:35:42Z", "type": "commit"}, {"oid": "d32d51966d1d18c822bac1712456f026d7b3268f", "url": "https://github.com/apache/ignite/commit/d32d51966d1d18c822bac1712456f026d7b3268f", "message": "+ saved/restored comparation", "committedDate": "2020-09-15T12:36:12Z", "type": "commit"}, {"oid": "bc66b5c4ada5856fb6a3cc7bf02267505715d012", "url": "https://github.com/apache/ignite/commit/bc66b5c4ada5856fb6a3cc7bf02267505715d012", "message": "+ saved/restored comparation", "committedDate": "2020-09-15T12:38:04Z", "type": "commit"}, {"oid": "ce67e48238c4de698e6adbfad8227d1284fda518", "url": "https://github.com/apache/ignite/commit/ce67e48238c4de698e6adbfad8227d1284fda518", "message": "Merge remote-tracking branch 'origin/ducktests-iptables' into ducktests-iptables", "committedDate": "2020-09-15T12:38:13Z", "type": "commit"}, {"oid": "a009cd381dba771d80dca19c338681adcdd917a5", "url": "https://github.com/apache/ignite/commit/a009cd381dba771d80dca19c338681adcdd917a5", "message": "+ tests", "committedDate": "2020-09-15T13:12:42Z", "type": "commit"}, {"oid": "37ca0c83a4ebbc2fe6871af442c48968a5b063b0", "url": "https://github.com/apache/ignite/commit/37ca0c83a4ebbc2fe6871af442c48968a5b063b0", "message": "almost all tests", "committedDate": "2020-09-15T13:41:13Z", "type": "commit"}, {"oid": "b7234d44528899602a73ff13f1f635b3e66a3abf", "url": "https://github.com/apache/ignite/commit/b7234d44528899602a73ff13f1f635b3e66a3abf", "message": "not all tests, better FDT", "committedDate": "2020-09-15T13:42:18Z", "type": "commit"}, {"oid": "37d5d600012cae0f37538956d7adfe808687b50f", "url": "https://github.com/apache/ignite/commit/37d5d600012cae0f37538956d7adfe808687b50f", "message": "fix in iptables comparation", "committedDate": "2020-09-15T14:25:55Z", "type": "commit"}, {"oid": "39c0e04ad48cf1bcae7f4055365dd8e383f0aed0", "url": "https://github.com/apache/ignite/commit/39c0e04ad48cf1bcae7f4055365dd8e383f0aed0", "message": "all tests for 2.8.1", "committedDate": "2020-09-15T14:53:54Z", "type": "commit"}, {"oid": "e26e0120b73c71038123518b540686e0ed044190", "url": "https://github.com/apache/ignite/commit/e26e0120b73c71038123518b540686e0ed044190", "message": "all tests", "committedDate": "2020-09-15T15:32:04Z", "type": "commit"}, {"oid": "e36ed4db860f77c09f125c26cfa5557e31a05ea3", "url": "https://github.com/apache/ignite/commit/e36ed4db860f77c09f125c26cfa5557e31a05ea3", "message": "only dev version", "committedDate": "2020-09-15T19:37:11Z", "type": "commit"}, {"oid": "fc1b1ebfa92f62c749cfcfb014744930c47ec8f5", "url": "https://github.com/apache/ignite/commit/fc1b1ebfa92f62c749cfcfb014744930c47ec8f5", "message": "dev, port range == 0", "committedDate": "2020-09-16T11:20:55Z", "type": "commit"}, {"oid": "8b511c9e2620a2bf212606dad8e0d5ab1e1faedc", "url": "https://github.com/apache/ignite/commit/8b511c9e2620a2bf212606dad8e0d5ab1e1faedc", "message": "dev, + tests", "committedDate": "2020-09-16T11:39:53Z", "type": "commit"}, {"oid": "8312e070b3e7fcaeccc22cb7dd9b595700468e33", "url": "https://github.com/apache/ignite/commit/8312e070b3e7fcaeccc22cb7dd9b595700468e33", "message": "no rules clearing", "committedDate": "2020-09-16T12:39:47Z", "type": "commit"}, {"oid": "c3d7e2f94e148a832e4099ed43c2f7a90cdb5b39", "url": "https://github.com/apache/ignite/commit/c3d7e2f94e148a832e4099ed43c2f7a90cdb5b39", "message": "bigger timeout", "committedDate": "2020-09-16T13:34:16Z", "type": "commit"}, {"oid": "1bc8fc8353786ed9a6d3996fb8ff1131000719ab", "url": "https://github.com/apache/ignite/commit/1bc8fc8353786ed9a6d3996fb8ff1131000719ab", "message": "bigger timeout", "committedDate": "2020-09-16T14:09:13Z", "type": "commit"}, {"oid": "697f6e6a26ded768d10bbc4b241c22c6767e944b", "url": "https://github.com/apache/ignite/commit/697f6e6a26ded768d10bbc4b241c22c6767e944b", "message": "+ rules cleaning", "committedDate": "2020-09-16T14:47:34Z", "type": "commit"}, {"oid": "b872d26df5090b75af4091a35ad492f1fcc80995", "url": "https://github.com/apache/ignite/commit/b872d26df5090b75af4091a35ad492f1fcc80995", "message": "+ conntrack", "committedDate": "2020-09-16T15:39:30Z", "type": "commit"}, {"oid": "e2262e9839f1b1d60874269658b34f4bef78012b", "url": "https://github.com/apache/ignite/commit/e2262e9839f1b1d60874269658b34f4bef78012b", "message": "try adding rule again", "committedDate": "2020-09-16T16:19:57Z", "type": "commit"}, {"oid": "66529bb3bc71353fb9bd8558db357e70735f06b7", "url": "https://github.com/apache/ignite/commit/66529bb3bc71353fb9bd8558db357e70735f06b7", "message": "+ tests tcp for dev", "committedDate": "2020-09-17T11:05:03Z", "type": "commit"}, {"oid": "2c463e909d759b5a56daccefa5752af1ad3e34ce", "url": "https://github.com/apache/ignite/commit/2c463e909d759b5a56daccefa5752af1ad3e34ce", "message": "all tests", "committedDate": "2020-09-17T12:00:02Z", "type": "commit"}, {"oid": "41f5590dac59b9ecbb6dee5a7377a3ef754bb694", "url": "https://github.com/apache/ignite/commit/41f5590dac59b9ecbb6dee5a7377a3ef754bb694", "message": "Merge branch 'ignite-ducktape' into ducktests-iptables", "committedDate": "2020-09-17T12:08:35Z", "type": "commit"}, {"oid": "1d28cd4cbc9b2126ad2b7c06b7aa5fff964c4402", "url": "https://github.com/apache/ignite/commit/1d28cd4cbc9b2126ad2b7c06b7aa5fff964c4402", "message": "test 2.8.1", "committedDate": "2020-09-17T13:21:00Z", "type": "commit"}, {"oid": "da230deebc75f059745dc7796b07ba0367acbfd0", "url": "https://github.com/apache/ignite/commit/da230deebc75f059745dc7796b07ba0367acbfd0", "message": "all ignite versions, insert rule, + rules log at start", "committedDate": "2020-09-17T13:45:19Z", "type": "commit"}, {"oid": "95ebba5629651392fdcaa0cd82c5ae4577f3e444", "url": "https://github.com/apache/ignite/commit/95ebba5629651392fdcaa0cd82c5ae4577f3e444", "message": "looks good 4", "committedDate": "2020-09-17T14:39:49Z", "type": "commit"}, {"oid": "0ea318626025f14be891046dac27ae06a120e124", "url": "https://github.com/apache/ignite/commit/0ea318626025f14be891046dac27ae06a120e124", "message": "fix of tear down", "committedDate": "2020-09-17T15:58:43Z", "type": "commit"}, {"oid": "ba74c00bd61ff1e7aab88fb8d45eb713356aa175", "url": "https://github.com/apache/ignite/commit/ba74c00bd61ff1e7aab88fb8d45eb713356aa175", "message": "-F again, dev", "committedDate": "2020-09-17T17:18:19Z", "type": "commit"}, {"oid": "1033c8a2b979c6e254019216e4e1bd0a83731c32", "url": "https://github.com/apache/ignite/commit/1033c8a2b979c6e254019216e4e1bd0a83731c32", "message": "-F, + v2.8.1. + configured blocked timeout", "committedDate": "2020-09-17T17:37:30Z", "type": "commit"}, {"oid": "485adf486db9df53a9ea86b8b444da9d6f1e619b", "url": "https://github.com/apache/ignite/commit/485adf486db9df53a9ea86b8b444da9d6f1e619b", "message": "property set fix", "committedDate": "2020-09-17T17:44:29Z", "type": "commit"}, {"oid": "261e7cfff837cf9ee70c4e281c33f1ebe278949f", "url": "https://github.com/apache/ignite/commit/261e7cfff837cf9ee70c4e281c33f1ebe278949f", "message": "better FDT", "committedDate": "2020-09-17T18:08:51Z", "type": "commit"}, {"oid": "f6c3b56227a1ab7b62d9dd3bf675d074bbb7184b", "url": "https://github.com/apache/ignite/commit/f6c3b56227a1ab7b62d9dd3bf675d074bbb7184b", "message": "better FDT", "committedDate": "2020-09-17T18:11:16Z", "type": "commit"}, {"oid": "505fd1d03c6a055be38c761789c01a3695885dde", "url": "https://github.com/apache/ignite/commit/505fd1d03c6a055be38c761789c01a3695885dde", "message": "test: always sequantial failure", "committedDate": "2020-09-17T19:13:58Z", "type": "commit"}, {"oid": "910649a26ac3febd18360aa8d817eb9c15d8ca56", "url": "https://github.com/apache/ignite/commit/910649a26ac3febd18360aa8d817eb9c15d8ca56", "message": "removed sequential failure", "committedDate": "2020-09-17T22:33:15Z", "type": "commit"}, {"oid": "fd79d8798a9d0de3f593b9f851167ea4b7543dbe", "url": "https://github.com/apache/ignite/commit/fd79d8798a9d0de3f593b9f851167ea4b7543dbe", "message": "in progres", "committedDate": "2020-09-22T18:10:41Z", "type": "commit"}, {"oid": "a8dde8737c295e785dfe1c4c6caff5e1e11e4cf9", "url": "https://github.com/apache/ignite/commit/a8dde8737c295e785dfe1c4c6caff5e1e11e4cf9", "message": "fix", "committedDate": "2020-09-23T18:46:25Z", "type": "commit"}, {"oid": "c407c22650b92fd04740b3a2a2cc3ec07874f0ce", "url": "https://github.com/apache/ignite/commit/c407c22650b92fd04740b3a2a2cc3ec07874f0ce", "message": "Merge branch 'ignite-ducktape' into ducktests-iptables", "committedDate": "2020-09-24T21:27:26Z", "type": "commit"}, {"oid": "e539fa46631d1e41465b6829aac7ca4893d1183d", "url": "https://github.com/apache/ignite/commit/e539fa46631d1e41465b6829aac7ca4893d1183d", "message": "looks good 5", "committedDate": "2020-09-25T01:29:29Z", "type": "commit"}, {"oid": "d76cfa2d2a46bb3e6393bc11fc066bd43e3b75c5", "url": "https://github.com/apache/ignite/commit/d76cfa2d2a46bb3e6393bc11fc066bd43e3b75c5", "message": "fix for ZooKeeper", "committedDate": "2020-09-30T02:29:36Z", "type": "commit"}, {"oid": "e784a85b32514a323008dd81dcc31b425b0990e5", "url": "https://github.com/apache/ignite/commit/e784a85b32514a323008dd81dcc31b425b0990e5", "message": "Merge branch 'ignite-ducktape' into ducktests-iptables", "committedDate": "2020-09-30T02:34:10Z", "type": "commit"}, {"oid": "89d9aa44761b4403dbe7e02ef175be66bef2376b", "url": "https://github.com/apache/ignite/commit/89d9aa44761b4403dbe7e02ef175be66bef2376b", "message": "merged. minorities.", "committedDate": "2020-09-30T03:21:09Z", "type": "commit"}, {"oid": "3412504d5c9633fc46d2c37a81a2702126f3e4c8", "url": "https://github.com/apache/ignite/commit/3412504d5c9633fc46d2c37a81a2702126f3e4c8", "message": "no @parametrize", "committedDate": "2020-09-30T07:57:31Z", "type": "commit"}, {"oid": "ee7a1575df5cdc672a17d693f2c3865956bf2e4e", "url": "https://github.com/apache/ignite/commit/ee7a1575df5cdc672a17d693f2c3865956bf2e4e", "message": "fix of results checking", "committedDate": "2020-09-30T09:46:44Z", "type": "commit"}, {"oid": "781079ad2c087a81dbb20abf938cbe001e007cfc", "url": "https://github.com/apache/ignite/commit/781079ad2c087a81dbb20abf938cbe001e007cfc", "message": "minorities", "committedDate": "2020-09-30T13:21:36Z", "type": "commit"}, {"oid": "859e936aa781df17f59301368c8178f0a8265eb7", "url": "https://github.com/apache/ignite/commit/859e936aa781df17f59301368c8178f0a8265eb7", "message": "Merge branch 'ignite-ducktape' into ducktests-iptables", "committedDate": "2020-09-30T13:54:35Z", "type": "commit"}, {"oid": "89c61bd56fecafdca951097050525e8207d9c15c", "url": "https://github.com/apache/ignite/commit/89c61bd56fecafdca951097050525e8207d9c15c", "message": "logfix", "committedDate": "2020-09-30T19:05:45Z", "type": "commit"}, {"oid": "e04ba5286070fd91237d16b5cfa2c3f44064b8bd", "url": "https://github.com/apache/ignite/commit/e04ba5286070fd91237d16b5cfa2c3f44064b8bd", "message": "+ FDT", "committedDate": "2020-10-01T09:22:50Z", "type": "commit"}, {"oid": "cc8ddc6d7d988f3eab8275397ecee1e8336135f6", "url": "https://github.com/apache/ignite/commit/cc8ddc6d7d988f3eab8275397ecee1e8336135f6", "message": "+ FDT", "committedDate": "2020-10-01T10:29:52Z", "type": "commit"}, {"oid": "7096884f033faeb84d53a223ade658452475e974", "url": "https://github.com/apache/ignite/commit/7096884f033faeb84d53a223ade658452475e974", "message": "removed debug message", "committedDate": "2020-10-01T14:02:47Z", "type": "commit"}, {"oid": "091f1279e38aa08fa0dd667f32ffa94011d7a168", "url": "https://github.com/apache/ignite/commit/091f1279e38aa08fa0dd667f32ffa94011d7a168", "message": "better zk settings. fix for pylint", "committedDate": "2020-10-01T18:05:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0NzcwMg==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r498847702", "bodyText": "please use super().teardown()", "author": "ivandasch", "createdAt": "2020-10-02T14:13:19Z", "path": "modules/ducktests/tests/ignitetest/utils/ignite_test.py", "diffHunk": "@@ -26,9 +26,17 @@ class IgniteTest(Test):\n     \"\"\"\n     Basic ignite test.\n     \"\"\"\n+    TEMP_PATH_ROOT = \"/mnt/ducktests\"\n+\n     def __init__(self, test_context):\n         super().__init__(test_context=test_context)\n \n+    def teardown(self):\n+        for node in self.test_context.cluster.nodes:\n+            node.account.ssh_client.exec_command(\"rm -drf \" + self.TEMP_PATH_ROOT)\n+\n+        Test.teardown(self)", "originalCommit": "091f1279e38aa08fa0dd667f32ffa94011d7a168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMDMxNQ==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r499130315", "bodyText": "Fixed", "author": "Vladsz83", "createdAt": "2020-10-03T08:58:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0NzcwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0Nzg2NQ==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r498847865", "bodyText": "please, use super().teardown()", "author": "ivandasch", "createdAt": "2020-10-02T14:13:36Z", "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -149,18 +173,134 @@ def _perform_node_fail_scenario(self, test_config):\n \n             start_load_app(self.test_context, ignite_config=load_config, params=params, modules=modules)\n \n-        data = simulate_nodes_failure(servers, failed_nodes, survived_node)\n+        for node in failed_nodes:\n+            self.logger.info(\n+                \"Simulating failure of node '%s' (order %d) on '%s'\" % (node_id(node), order(node), node.name))\n+\n+        data = self._simulate_nodes_failure(servers, node_fail_task(ignite_config, test_config), failed_nodes,\n+                                            survived_node)\n \n         data['Ignite cluster start time (s)'] = start_servers_sec\n \n         return data\n \n+    def _simulate_nodes_failure(self, servers, kill_node_task, failed_nodes, survived_node):\n+        \"\"\"\n+        Perform node failure scenario\n+        \"\"\"\n+        ids_to_wait = [node_id(n) for n in failed_nodes]\n+\n+        _, first_terminated = servers.exec_on_nodes_async(failed_nodes, kill_node_task)\n+\n+        for node in failed_nodes:\n+            self.logger.debug(\n+                \"Netfilter activated on '%s': %s\" % (node.name, dump_netfilter_settings(node)))\n+\n+        # Keeps dates of logged node failures.\n+        logged_timestamps = []\n+        data = {}\n+\n+        for failed_id in ids_to_wait:\n+            servers.await_event_on_node(failed_pattern(failed_id), survived_node, 15, from_the_beginning=True,\n+                                        backoff_sec=0.3)\n+\n+            _, stdout, _ = survived_node.account.ssh_client.exec_command(\n+                \"grep '%s' %s\" % (failed_pattern(failed_id), IgniteAwareService.STDOUT_STDERR_CAPTURE))\n+\n+            logged_timestamps.append(\n+                datetime.strptime(re.match(\"^\\\\[[^\\\\[]+\\\\]\", stdout.read().decode(\"utf-8\")).group(),\n+                                  \"[%Y-%m-%d %H:%M:%S,%f]\"))\n+\n+        self._check_results(failed_nodes, survived_node)\n+\n+        logged_timestamps.sort(reverse=True)\n+\n+        first_kill_time = epoch_mills(first_terminated)\n+        detection_delay = epoch_mills(logged_timestamps[0]) - first_kill_time\n+\n+        data['Detection of node(s) failure (ms)'] = detection_delay\n+        data['All detection delays (ms):'] = str([epoch_mills(ts) - first_kill_time for ts in logged_timestamps])\n+        data['Nodes failed'] = len(failed_nodes)\n+\n+        return data\n+\n+    def _check_results(self, failed_nodes, survived_node):\n+        \"\"\"Ensures test finishes correctly.\"\"\"\n+        cmd = \"grep '%s' %s | wc -l\" % (failed_pattern(), IgniteAwareService.STDOUT_STDERR_CAPTURE)\n+\n+        failed_cnt = int(str(survived_node.account.ssh_client.exec_command(cmd)[1].read(), sys.getdefaultencoding()))\n+\n+        if failed_cnt != len(failed_nodes):\n+            failed = str(survived_node.account.ssh_client.exec_command(\n+                \"grep '%s' %s\" % (failed_pattern(), IgniteAwareService.STDOUT_STDERR_CAPTURE))[1].read(),\n+                         sys.getdefaultencoding())\n+\n+            self.logger.warn(\"Node '%s' (%s) has detected the following failures:%s%s\" % (\n+                survived_node.name, node_id(survived_node), os.linesep, failed))\n+\n+            raise AssertionError(\n+                \"Wrong number of failed nodes: %d. Expected: %d. Check the logs.\" % (failed_cnt, len(failed_nodes)))\n+\n+        for service in [srv for srv in self.test_context.services if isinstance(srv, IgniteAwareService)]:\n+            for node in [srv_node for srv_node in service.nodes if srv_node not in failed_nodes]:\n+                cmd = \"grep -i '%s' %s | wc -l\" % (\"local no1de segmented\", IgniteAwareService.STDOUT_STDERR_CAPTURE)\n+\n+                failed = str(node.account.ssh_client.exec_command(cmd)[1].read(), sys.getdefaultencoding())\n+\n+                if int(failed) > 0:\n+                    raise AssertionError(\n+                        \"Wrong node failed (segmented) on '%s'. Check the logs.\" % node.name)\n+\n+    def setup(self):\n+        IgniteTest.setup(self)\n+\n+        # Store current network filter settings.\n+        for node in self.test_context.cluster.nodes:\n+            path_to_store = self.NETFILTER_SAVED_SETTINGS\n+\n+            node.account.ssh_client.exec_command(f\"rm -drf {path_to_store} && mkdir -p $(dirname {path_to_store})\")\n+\n+            cmd = \"sudo iptables-save | tee \" + self.NETFILTER_SAVED_SETTINGS\n+\n+            exec_error = str(node.account.ssh_client.exec_command(cmd)[2].read(), sys.getdefaultencoding())\n+\n+            if \"Warning: iptables-legacy tables present\" in exec_error:\n+                cmd = \"sudo iptables-legacy-save | tee \" + self.NETFILTER_SAVED_SETTINGS\n+\n+                exec_error = str(node.account.ssh_client.exec_command(cmd)[2].read(), sys.getdefaultencoding())\n+\n+            assert len(exec_error) == 0, \"Failed to store iptables rules on '%s': %s\" % (node.name, exec_error)\n+\n+            self.logger.debug(\"Netfilter before launch on '%s': %s\" % (node.name, dump_netfilter_settings(node)))\n+\n+    def teardown(self):\n+        # Restore previous network filter settings.\n+        cmd = \"sudo iptables-restore < \" + self.NETFILTER_SAVED_SETTINGS\n+\n+        errors = []\n+\n+        for node in self.test_context.cluster.nodes:\n+            exec_error = str(node.account.ssh_client.exec_command(cmd)[2].read(), sys.getdefaultencoding())\n+\n+            if len(exec_error) > 0:\n+                errors.append(\"Failed to restore iptables rules on '%s': %s\" % (node.name, exec_error))\n+            else:\n+                self.logger.debug(\"Netfilter after launch on '%s': %s\" % (node.name, dump_netfilter_settings(node)))\n+\n+        if len(errors) > 0:\n+            self.logger.error(\"Failed restoring actions:\" + os.linesep + os.linesep.join(errors))\n+\n+            raise RuntimeError(\"Unable to restore node states. See the log above.\")\n+\n+        IgniteTest.teardown(self)", "originalCommit": "091f1279e38aa08fa0dd667f32ffa94011d7a168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMDMxNA==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r499130314", "bodyText": "Fixed", "author": "Vladsz83", "createdAt": "2020-10-03T08:58:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0Nzg2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0Nzk4Mw==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r498847983", "bodyText": "please, use super().setup()", "author": "ivandasch", "createdAt": "2020-10-02T14:13:47Z", "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -149,18 +173,134 @@ def _perform_node_fail_scenario(self, test_config):\n \n             start_load_app(self.test_context, ignite_config=load_config, params=params, modules=modules)\n \n-        data = simulate_nodes_failure(servers, failed_nodes, survived_node)\n+        for node in failed_nodes:\n+            self.logger.info(\n+                \"Simulating failure of node '%s' (order %d) on '%s'\" % (node_id(node), order(node), node.name))\n+\n+        data = self._simulate_nodes_failure(servers, node_fail_task(ignite_config, test_config), failed_nodes,\n+                                            survived_node)\n \n         data['Ignite cluster start time (s)'] = start_servers_sec\n \n         return data\n \n+    def _simulate_nodes_failure(self, servers, kill_node_task, failed_nodes, survived_node):\n+        \"\"\"\n+        Perform node failure scenario\n+        \"\"\"\n+        ids_to_wait = [node_id(n) for n in failed_nodes]\n+\n+        _, first_terminated = servers.exec_on_nodes_async(failed_nodes, kill_node_task)\n+\n+        for node in failed_nodes:\n+            self.logger.debug(\n+                \"Netfilter activated on '%s': %s\" % (node.name, dump_netfilter_settings(node)))\n+\n+        # Keeps dates of logged node failures.\n+        logged_timestamps = []\n+        data = {}\n+\n+        for failed_id in ids_to_wait:\n+            servers.await_event_on_node(failed_pattern(failed_id), survived_node, 15, from_the_beginning=True,\n+                                        backoff_sec=0.3)\n+\n+            _, stdout, _ = survived_node.account.ssh_client.exec_command(\n+                \"grep '%s' %s\" % (failed_pattern(failed_id), IgniteAwareService.STDOUT_STDERR_CAPTURE))\n+\n+            logged_timestamps.append(\n+                datetime.strptime(re.match(\"^\\\\[[^\\\\[]+\\\\]\", stdout.read().decode(\"utf-8\")).group(),\n+                                  \"[%Y-%m-%d %H:%M:%S,%f]\"))\n+\n+        self._check_results(failed_nodes, survived_node)\n+\n+        logged_timestamps.sort(reverse=True)\n+\n+        first_kill_time = epoch_mills(first_terminated)\n+        detection_delay = epoch_mills(logged_timestamps[0]) - first_kill_time\n+\n+        data['Detection of node(s) failure (ms)'] = detection_delay\n+        data['All detection delays (ms):'] = str([epoch_mills(ts) - first_kill_time for ts in logged_timestamps])\n+        data['Nodes failed'] = len(failed_nodes)\n+\n+        return data\n+\n+    def _check_results(self, failed_nodes, survived_node):\n+        \"\"\"Ensures test finishes correctly.\"\"\"\n+        cmd = \"grep '%s' %s | wc -l\" % (failed_pattern(), IgniteAwareService.STDOUT_STDERR_CAPTURE)\n+\n+        failed_cnt = int(str(survived_node.account.ssh_client.exec_command(cmd)[1].read(), sys.getdefaultencoding()))\n+\n+        if failed_cnt != len(failed_nodes):\n+            failed = str(survived_node.account.ssh_client.exec_command(\n+                \"grep '%s' %s\" % (failed_pattern(), IgniteAwareService.STDOUT_STDERR_CAPTURE))[1].read(),\n+                         sys.getdefaultencoding())\n+\n+            self.logger.warn(\"Node '%s' (%s) has detected the following failures:%s%s\" % (\n+                survived_node.name, node_id(survived_node), os.linesep, failed))\n+\n+            raise AssertionError(\n+                \"Wrong number of failed nodes: %d. Expected: %d. Check the logs.\" % (failed_cnt, len(failed_nodes)))\n+\n+        for service in [srv for srv in self.test_context.services if isinstance(srv, IgniteAwareService)]:\n+            for node in [srv_node for srv_node in service.nodes if srv_node not in failed_nodes]:\n+                cmd = \"grep -i '%s' %s | wc -l\" % (\"local no1de segmented\", IgniteAwareService.STDOUT_STDERR_CAPTURE)\n+\n+                failed = str(node.account.ssh_client.exec_command(cmd)[1].read(), sys.getdefaultencoding())\n+\n+                if int(failed) > 0:\n+                    raise AssertionError(\n+                        \"Wrong node failed (segmented) on '%s'. Check the logs.\" % node.name)\n+\n+    def setup(self):\n+        IgniteTest.setup(self)", "originalCommit": "091f1279e38aa08fa0dd667f32ffa94011d7a168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMDMwOA==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r499130308", "bodyText": "Fixed", "author": "Vladsz83", "createdAt": "2020-10-03T08:58:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0Nzk4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1MDQ4Mg==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r498850482", "bodyText": "I suppose that it's better leave tick time and add assertion that min_session_timeout is at least twice as tick_time.\nIt's ok to pass tickTime as 1000 ms, and set minSessionTimeout as 3000 ms\nBy default, let them be 1000 and 2000", "author": "ivandasch", "createdAt": "2020-10-02T14:18:01Z", "path": "modules/ducktests/tests/ignitetest/services/zk/zookeeper.py", "diffHunk": "@@ -27,8 +27,9 @@ class ZookeeperSettings:\n     \"\"\"\n     Settings for zookeeper quorum nodes.\n     \"\"\"\n-    def __init__(self, tick_time=1000, init_limit=10, sync_limit=5, client_port=2181):\n-        self.tick_time = tick_time\n+    def __init__(self, min_session_timeout=2000, init_limit=10, sync_limit=5, client_port=2181):\n+        self.tick_time = min_session_timeout // 2", "originalCommit": "091f1279e38aa08fa0dd667f32ffa94011d7a168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMDMwMg==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r499130302", "bodyText": "Fixed", "author": "Vladsz83", "createdAt": "2020-10-03T08:58:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1MDQ4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1MTY2OQ==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r498851669", "bodyText": "If linter allowed longer method name, may be call it not_sequential_zk?", "author": "ivandasch", "createdAt": "2020-10-02T14:20:02Z", "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -71,40 +72,63 @@ class DiscoveryTest(IgniteTest):\n     \"\"\"\n     NUM_NODES = 7\n \n-    FAILURE_DETECTION_TIMEOUT = 2000\n+    FAILURE_DETECTION_TIMEOUT = 1000\n \n     DATA_AMOUNT = 5_000_000\n \n     WARMUP_DATA_AMOUNT = 10_000\n \n+    NETFILTER_SAVED_SETTINGS = os.path.join(IgniteTest.TEMP_PATH_ROOT, \"discovery_test\", \"netfilter.bak\")\n+\n     @cluster(num_nodes=NUM_NODES)\n     @ignite_versions(str(DEV_BRANCH), str(LATEST_2_8))\n-    @matrix(kill_coordinator=[False, True],\n-            nodes_to_kill=[1, 2],\n+    @matrix(nodes_to_kill=[1, 2],\n             load_type=[ClusterLoad.NONE, ClusterLoad.ATOMIC, ClusterLoad.TRANSACTIONAL])\n-    def test_node_fail_tcp(self, ignite_version, kill_coordinator, nodes_to_kill, load_type):\n+    def test_nodes_fail_notseq_tcp(self, ignite_version, nodes_to_kill, load_type):\n         \"\"\"\n-        Test nodes failure scenario with TcpDiscoverySpi.\n-        :param load_type: How to load cluster during the test: 0 - no loading; 1 - do some loading; 2 - transactional.\n+        Test nodes failure scenario with TcpDiscoverySpi not allowing nodes to fail in a row.\n         \"\"\"\n-        test_config = DiscoveryTestConfig(version=IgniteVersion(ignite_version), kill_coordinator=kill_coordinator,\n-                                          nodes_to_kill=nodes_to_kill, load_type=load_type, with_zk=False)\n+        test_config = DiscoveryTestConfig(version=IgniteVersion(ignite_version), nodes_to_kill=nodes_to_kill,\n+                                          load_type=load_type, sequential_failure=False)\n+\n+        return self._perform_node_fail_scenario(test_config)\n+\n+    @cluster(num_nodes=NUM_NODES)\n+    @ignite_versions(str(DEV_BRANCH), str(LATEST_2_8))\n+    @matrix(load_type=[ClusterLoad.NONE, ClusterLoad.ATOMIC, ClusterLoad.TRANSACTIONAL])\n+    def test_2_nodes_fail_seq_tcp(self, ignite_version, load_type):\n+        \"\"\"\n+        Test 2 nodes sequential failure scenario with TcpDiscoverySpi.\n+        \"\"\"\n+        test_config = DiscoveryTestConfig(version=IgniteVersion(ignite_version), nodes_to_kill=2, load_type=load_type,\n+                                          sequential_failure=True)\n \n         return self._perform_node_fail_scenario(test_config)\n \n     @cluster(num_nodes=NUM_NODES + 3)\n     @version_if(lambda version: version != V_2_8_0)  # ignite-zookeeper package is broken in 2.8.0\n     @ignite_versions(str(DEV_BRANCH), str(LATEST_2_8))\n-    @matrix(kill_coordinator=[False, True],\n-            nodes_to_kill=[1, 2],\n+    @matrix(nodes_to_kill=[1, 2],\n             load_type=[ClusterLoad.NONE, ClusterLoad.ATOMIC, ClusterLoad.TRANSACTIONAL])\n-    def test_node_fail_zk(self, ignite_version, kill_coordinator, nodes_to_kill, load_type):\n+    def test_nodes_fail_notseq_zk(self, ignite_version, nodes_to_kill, load_type):", "originalCommit": "091f1279e38aa08fa0dd667f32ffa94011d7a168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMDI5MA==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r499130290", "bodyText": "Fixed", "author": "Vladsz83", "createdAt": "2020-10-03T08:58:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1MTY2OQ=="}], "type": "inlineReview"}, {"oid": "5b33ecfcc46ba2b2cba5beddd69bec7e97b69470", "url": "https://github.com/apache/ignite/commit/5b33ecfcc46ba2b2cba5beddd69bec7e97b69470", "message": "fixes after review", "committedDate": "2020-10-02T18:32:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEyOTc4OA==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r499129788", "bodyText": "This will not work, should be IgniteVersion(ignite_version) < V_2_8_0.", "author": "ivandasch", "createdAt": "2020-10-03T08:50:04Z", "path": "modules/ducktests/tests/ignitetest/tests/pme_free_switch_test.py", "diffHunk": "@@ -81,7 +81,8 @@ def test(self, ignite_version):\n \n         ignites.stop_node(ignites.nodes[self.NUM_NODES - 1])\n \n-        long_tx_streamer.await_event(\"Node left topology\", 60, from_the_beginning=True)\n+        long_tx_streamer.await_event(\"Node left topology\", 120 if ignite_version < V_2_8_0 else 60,", "originalCommit": "5b33ecfcc46ba2b2cba5beddd69bec7e97b69470", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEzMDQzMg==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r499130432", "bodyText": "Yep. Missed this in hurry. Fixed.", "author": "Vladsz83", "createdAt": "2020-10-03T09:00:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEyOTc4OA=="}], "type": "inlineReview"}, {"oid": "09b1c25db729d077a63aac5ffba1a31f3ef5fd29", "url": "https://github.com/apache/ignite/commit/09b1c25db729d077a63aac5ffba1a31f3ef5fd29", "message": "version fix", "committedDate": "2020-10-03T08:55:10Z", "type": "commit"}, {"oid": "a2ac83d1e3572aeea4aa76108c03351469161587", "url": "https://github.com/apache/ignite/commit/a2ac83d1e3572aeea4aa76108c03351469161587", "message": "better timeouts", "committedDate": "2020-10-03T12:48:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM5ODE1OQ==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r499398159", "bodyText": "Python has tools to create temporary folders. You don't need this.", "author": "ivandasch", "createdAt": "2020-10-05T07:41:36Z", "path": "modules/ducktests/tests/ignitetest/utils/ignite_test.py", "diffHunk": "@@ -26,9 +26,17 @@ class IgniteTest(Test):\n     \"\"\"\n     Basic ignite test.\n     \"\"\"\n+    TEMP_PATH_ROOT = \"/mnt/ducktests\"", "originalCommit": "a2ac83d1e3572aeea4aa76108c03351469161587", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQwMjE0OQ==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r499402149", "bodyText": "Used in DiscoveryTest:     NETFILTER_SAVED_SETTINGS = os.path.join(IgniteTest.TEMP_PATH_ROOT, \"discovery_test\", \"netfilter.bak\")", "author": "Vladsz83", "createdAt": "2020-10-05T07:49:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM5ODE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQxNjA2MA==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r499416060", "bodyText": "This is wrong usage, please, use appropriate tools. And revert this change to IgniteTest.", "author": "ivandasch", "createdAt": "2020-10-05T08:09:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM5ODE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5OTY1MA==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r499499650", "bodyText": "Removed", "author": "Vladsz83", "createdAt": "2020-10-05T10:31:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM5ODE1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQxNDk5Ng==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r499414996", "bodyText": "This will not work in parallel execution (class variable), use tempfile module and instance variable", "author": "ivandasch", "createdAt": "2020-10-05T08:07:56Z", "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -71,40 +72,65 @@ class DiscoveryTest(IgniteTest):\n     \"\"\"\n     NUM_NODES = 7\n \n-    FAILURE_DETECTION_TIMEOUT = 2000\n+    FAILURE_DETECTION_TIMEOUT_TCP = 1000\n+\n+    FAILURE_DETECTION_TIMEOUT_ZK = 3000\n \n     DATA_AMOUNT = 5_000_000\n \n     WARMUP_DATA_AMOUNT = 10_000\n \n+    NETFILTER_SAVED_SETTINGS = os.path.join(IgniteTest.TEMP_PATH_ROOT, \"discovery_test\", \"netfilter.bak\")", "originalCommit": "a2ac83d1e3572aeea4aa76108c03351469161587", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5OTU2NQ==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r499499565", "bodyText": "Removed", "author": "Vladsz83", "createdAt": "2020-10-05T10:31:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQxNDk5Ng=="}], "type": "inlineReview"}, {"oid": "488dc3def1b0b210bab7f759f3a13ab322fbe600", "url": "https://github.com/apache/ignite/commit/488dc3def1b0b210bab7f759f3a13ab322fbe600", "message": "better netfilter stroing", "committedDate": "2020-10-05T10:21:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyMzAxMA==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r499523010", "bodyText": "This will not work -- you created directory", "author": "ivandasch", "createdAt": "2020-10-05T11:17:48Z", "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -149,18 +177,136 @@ def _perform_node_fail_scenario(self, test_config):\n \n             start_load_app(self.test_context, ignite_config=load_config, params=params, modules=modules)\n \n-        data = simulate_nodes_failure(servers, failed_nodes, survived_node)\n+        for node in failed_nodes:\n+            self.logger.info(\n+                \"Simulating failure of node '%s' (order %d) on '%s'\" % (node_id(node), order(node), node.name))\n+\n+        data = self._simulate_nodes_failure(servers, node_fail_task(ignite_config, test_config), failed_nodes,\n+                                            survived_node)\n \n         data['Ignite cluster start time (s)'] = start_servers_sec\n \n         return data\n \n+    def _simulate_nodes_failure(self, servers, kill_node_task, failed_nodes, survived_node):\n+        \"\"\"\n+        Perform node failure scenario\n+        \"\"\"\n+        ids_to_wait = [node_id(n) for n in failed_nodes]\n+\n+        _, first_terminated = servers.exec_on_nodes_async(failed_nodes, kill_node_task)\n+\n+        for node in failed_nodes:\n+            self.logger.debug(\n+                \"Netfilter activated on '%s': %s\" % (node.name, dump_netfilter_settings(node)))\n+\n+        # Keeps dates of logged node failures.\n+        logged_timestamps = []\n+        data = {}\n+\n+        for failed_id in ids_to_wait:\n+            servers.await_event_on_node(failed_pattern(failed_id), survived_node, 15, from_the_beginning=True,\n+                                        backoff_sec=0.3)\n+\n+            _, stdout, _ = survived_node.account.ssh_client.exec_command(\n+                \"grep '%s' %s\" % (failed_pattern(failed_id), IgniteAwareService.STDOUT_STDERR_CAPTURE))\n+\n+            logged_timestamps.append(\n+                datetime.strptime(re.match(\"^\\\\[[^\\\\[]+\\\\]\", stdout.read().decode(\"utf-8\")).group(),\n+                                  \"[%Y-%m-%d %H:%M:%S,%f]\"))\n+\n+        self._check_results(failed_nodes, survived_node)\n+\n+        logged_timestamps.sort(reverse=True)\n+\n+        first_kill_time = epoch_mills(first_terminated)\n+        detection_delay = epoch_mills(logged_timestamps[0]) - first_kill_time\n+\n+        data['Detection of node(s) failure (ms)'] = detection_delay\n+        data['All detection delays (ms):'] = str([epoch_mills(ts) - first_kill_time for ts in logged_timestamps])\n+        data['Nodes failed'] = len(failed_nodes)\n+\n+        return data\n+\n+    def _check_results(self, failed_nodes, survived_node):\n+        \"\"\"Ensures test finishes correctly.\"\"\"\n+        cmd = \"grep '%s' %s | wc -l\" % (failed_pattern(), IgniteAwareService.STDOUT_STDERR_CAPTURE)\n+\n+        failed_cnt = int(str(survived_node.account.ssh_client.exec_command(cmd)[1].read(), sys.getdefaultencoding()))\n+\n+        if failed_cnt != len(failed_nodes):\n+            failed = str(survived_node.account.ssh_client.exec_command(\n+                \"grep '%s' %s\" % (failed_pattern(), IgniteAwareService.STDOUT_STDERR_CAPTURE))[1].read(),\n+                         sys.getdefaultencoding())\n+\n+            self.logger.warn(\"Node '%s' (%s) has detected the following failures:%s%s\" % (\n+                survived_node.name, node_id(survived_node), os.linesep, failed))\n+\n+            raise AssertionError(\n+                \"Wrong number of failed nodes: %d. Expected: %d. Check the logs.\" % (failed_cnt, len(failed_nodes)))\n+\n+        for service in [srv for srv in self.test_context.services if isinstance(srv, IgniteAwareService)]:\n+            for node in [srv_node for srv_node in service.nodes if srv_node not in failed_nodes]:\n+                cmd = \"grep -i '%s' %s | wc -l\" % (\"local no1de segmented\", IgniteAwareService.STDOUT_STDERR_CAPTURE)\n+\n+                failed = str(node.account.ssh_client.exec_command(cmd)[1].read(), sys.getdefaultencoding())\n+\n+                if int(failed) > 0:\n+                    raise AssertionError(\n+                        \"Wrong node failed (segmented) on '%s'. Check the logs.\" % node.name)\n+\n+    def setup(self):\n+        super().setup()\n+\n+        self.netfilter_saved_settings = tempfile.mkdtemp()", "originalCommit": "488dc3def1b0b210bab7f759f3a13ab322fbe600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU3MTQzNQ==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r499571435", "bodyText": "Reverted, re-implemented.", "author": "Vladsz83", "createdAt": "2020-10-05T12:47:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyMzAxMA=="}], "type": "inlineReview"}, {"oid": "f727e8022b1c2004b87de4d25dc9e2e3ea532f92", "url": "https://github.com/apache/ignite/commit/f727e8022b1c2004b87de4d25dc9e2e3ea532f92", "message": "mktempfix", "committedDate": "2020-10-05T11:27:42Z", "type": "commit"}, {"oid": "fa9b1c07770935ed85ef030a1de5c4cdd2bd2e17", "url": "https://github.com/apache/ignite/commit/fa9b1c07770935ed85ef030a1de5c4cdd2bd2e17", "message": "Revert \"mktempfix\"\n\nThis reverts commit f727e802", "committedDate": "2020-10-05T11:36:09Z", "type": "commit"}, {"oid": "5a0fbf102fdf3d319793fb6d2a7a8823d8ec4759", "url": "https://github.com/apache/ignite/commit/5a0fbf102fdf3d319793fb6d2a7a8823d8ec4759", "message": "fix store path", "committedDate": "2020-10-05T12:36:35Z", "type": "commit"}, {"oid": "b6f0228e6dbfd33f655bf8bf608e675152d58fee", "url": "https://github.com/apache/ignite/commit/b6f0228e6dbfd33f655bf8bf608e675152d58fee", "message": "Revert \"better netfilter stroing\"\n\nThis reverts commit 488dc3de", "committedDate": "2020-10-05T13:31:30Z", "type": "commit"}, {"oid": "2ed67a57f41b2c8752044285debce5d6f4265556", "url": "https://github.com/apache/ignite/commit/2ed67a57f41b2c8752044285debce5d6f4265556", "message": "class var to inst fix", "committedDate": "2020-10-05T14:53:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY2ODk2OQ==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r499668969", "bodyText": "It seems, that FAILURE_DETECTION_TIMEOUT_TCP not used", "author": "ivandasch", "createdAt": "2020-10-05T15:05:56Z", "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -71,40 +72,68 @@ class DiscoveryTest(IgniteTest):\n     \"\"\"\n     NUM_NODES = 7\n \n-    FAILURE_DETECTION_TIMEOUT = 2000\n+    FAILURE_DETECTION_TIMEOUT_TCP = 1000", "originalCommit": "2ed67a57f41b2c8752044285debce5d6f4265556", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY3NDQ5MQ==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r499674491", "bodyText": "Fixed", "author": "Vladsz83", "createdAt": "2020-10-05T15:13:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY2ODk2OQ=="}], "type": "inlineReview"}, {"oid": "1dbf1eac628fef591770cf4594fc1d0a45ed936c", "url": "https://github.com/apache/ignite/commit/1dbf1eac628fef591770cf4594fc1d0a45ed936c", "message": "fix of FAILURE_DETECTION_TIMEOUT_TCP", "committedDate": "2020-10-05T15:11:08Z", "type": "commit"}, {"oid": "42bcdb32b471ba21a5e5d1034192b8c148270e54", "url": "https://github.com/apache/ignite/commit/42bcdb32b471ba21a5e5d1034192b8c148270e54", "message": "Merge branch 'ignite-ducktape' into ducktests-iptables\n\n# Conflicts:\n#\tmodules/ducktests/tests/ignitetest/tests/pme_free_switch_test.py", "committedDate": "2020-10-13T20:02:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0MzU1Nw==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r506243557", "bodyText": "any reason to not to encapsulate node_fail_task (to call it outside the method) when we have only one usage of _simulate_nodes_failure?", "author": "anton-vinogradov", "createdAt": "2020-10-16T09:58:18Z", "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -149,18 +179,134 @@ def _perform_node_fail_scenario(self, test_config):\n \n             start_load_app(self.test_context, ignite_config=load_config, params=params, modules=modules)\n \n-        data = simulate_nodes_failure(servers, failed_nodes, survived_node)\n+        for node in failed_nodes:\n+            self.logger.info(\n+                \"Simulating failure of node '%s' (order %d) on '%s'\" % (node_id(node), order(node), node.name))\n+\n+        data = self._simulate_nodes_failure(servers, node_fail_task(ignite_config, test_config), failed_nodes,", "originalCommit": "42bcdb32b471ba21a5e5d1034192b8c148270e54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwNzUxNw==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r507607517", "bodyText": "Node stopping relies on parallel and simulatous execution of configurable task. The parameters are outside of this execution\u2019s API and are not it\u2019s responsibilities. But task relies on the configuration. It\u2019s much more simpler to form the task somewhere by a method and return lambda. Also helps to keep admissible function parameters.", "author": "Vladsz83", "createdAt": "2020-10-19T09:35:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0MzU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwODM5OA==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r507608398", "bodyText": "Also shortens makes more reeadable, simplifies _simulate_nodes_failure.", "author": "Vladsz83", "createdAt": "2020-10-19T09:36:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0MzU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcwOTIwNA==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r507709204", "bodyText": "Not sure I got an answer.\nnode_fail_task content (or call) can be (should?) inlined to _simulate_nodes_failure instead of being its param since it can be used only inside this method.", "author": "anton-vinogradov", "createdAt": "2020-10-19T12:34:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0MzU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcyMDc1Nw==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r507720757", "bodyText": "_simulate_nodes_failure will look like def _simulate_nodes_failure(self, servers, failed_nodes, survived_node, test_config, ignite_config): \"\"\" Perform node failure scenario \"\"\" kill_node_task = node_fail_task(ignite_config, test_config)\nAnd pylint will say Too many arguments (6/5) (too-many-arguments) and Too many local variables (17/15) (too-many-locals)", "author": "Vladsz83", "createdAt": "2020-10-19T12:52:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0MzU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcyMTMyMw==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r507721323", "bodyText": "_simulate_nodes_failure should not be overloaded any more with any locals and parameters.", "author": "Vladsz83", "createdAt": "2020-10-19T12:53:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0MzU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzczMjM1OA==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r507732358", "bodyText": "got it", "author": "anton-vinogradov", "createdAt": "2020-10-19T13:10:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0MzU1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0ODQ4Nw==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r506248487", "bodyText": "why not inlined to node_fail_task?", "author": "anton-vinogradov", "createdAt": "2020-10-16T10:02:29Z", "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -149,18 +179,134 @@ def _perform_node_fail_scenario(self, test_config):\n \n             start_load_app(self.test_context, ignite_config=load_config, params=params, modules=modules)\n \n-        data = simulate_nodes_failure(servers, failed_nodes, survived_node)\n+        for node in failed_nodes:\n+            self.logger.info(\n+                \"Simulating failure of node '%s' (order %d) on '%s'\" % (node_id(node), order(node), node.name))\n+\n+        data = self._simulate_nodes_failure(servers, node_fail_task(ignite_config, test_config), failed_nodes,\n+                                            survived_node)\n \n         data['Ignite cluster start time (s)'] = start_servers_sec\n \n         return data\n \n+    def _simulate_nodes_failure(self, servers, kill_node_task, failed_nodes, survived_node):\n+        \"\"\"\n+        Perform node failure scenario\n+        \"\"\"\n+        ids_to_wait = [node_id(n) for n in failed_nodes]\n+\n+        _, first_terminated = servers.exec_on_nodes_async(failed_nodes, kill_node_task)\n+\n+        for node in failed_nodes:\n+            self.logger.debug(\n+                \"Netfilter activated on '%s': %s\" % (node.name, dump_netfilter_settings(node)))", "originalCommit": "42bcdb32b471ba21a5e5d1034192b8c148270e54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxMTQ5Ng==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r507611496", "bodyText": "Lambda is quite simple and has no log. Also we need this logging only after execution of all tasks which can have gap in time. Simplifies to read and search the log. All the records are in the row.", "author": "Vladsz83", "createdAt": "2020-10-19T09:41:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0ODQ4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2MTI0MQ==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r506261241", "bodyText": "should we check all alive nodes for detection duration?", "author": "anton-vinogradov", "createdAt": "2020-10-16T10:19:44Z", "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -149,18 +179,134 @@ def _perform_node_fail_scenario(self, test_config):\n \n             start_load_app(self.test_context, ignite_config=load_config, params=params, modules=modules)\n \n-        data = simulate_nodes_failure(servers, failed_nodes, survived_node)\n+        for node in failed_nodes:\n+            self.logger.info(\n+                \"Simulating failure of node '%s' (order %d) on '%s'\" % (node_id(node), order(node), node.name))\n+\n+        data = self._simulate_nodes_failure(servers, node_fail_task(ignite_config, test_config), failed_nodes,\n+                                            survived_node)\n \n         data['Ignite cluster start time (s)'] = start_servers_sec\n \n         return data\n \n+    def _simulate_nodes_failure(self, servers, kill_node_task, failed_nodes, survived_node):\n+        \"\"\"\n+        Perform node failure scenario\n+        \"\"\"\n+        ids_to_wait = [node_id(n) for n in failed_nodes]\n+\n+        _, first_terminated = servers.exec_on_nodes_async(failed_nodes, kill_node_task)\n+\n+        for node in failed_nodes:\n+            self.logger.debug(\n+                \"Netfilter activated on '%s': %s\" % (node.name, dump_netfilter_settings(node)))\n+\n+        # Keeps dates of logged node failures.\n+        logged_timestamps = []\n+        data = {}\n+\n+        for failed_id in ids_to_wait:\n+            servers.await_event_on_node(failed_pattern(failed_id), survived_node, 15, from_the_beginning=True,\n+                                        backoff_sec=0.3)\n+\n+            _, stdout, _ = survived_node.account.ssh_client.exec_command(", "originalCommit": "42bcdb32b471ba21a5e5d1034192b8c148270e54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxMzM4Mw==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r507613383", "bodyText": "We can't until we stabilize number of IP addresses and merge IGNITE-13465. Additionally, we cannot check it without 'magic numbers' like \"+100ms for GC\". We've already rejected checking this timings in IGNITE-13134 and IGNITE-13012. Only benchmarks are attached in the tickets. We decided to write benchmarks/integration tests. So, here we are. The integration test without measuring timings. Only comparison with previous versions.", "author": "Vladsz83", "createdAt": "2020-10-19T09:44:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2MTI0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcyMzI5OQ==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r507723299", "bodyText": "The goal is to see timings and seeing them find ways to improve.\nIf we have bad timings now on other nodes let's see this.", "author": "anton-vinogradov", "createdAt": "2020-10-19T12:56:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2MTI0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcyNjI2Mg==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r507726262", "bodyText": "My goal for this ticket was to see timings in the logs and have ability to compare with another ignite versions. Timings appear strange. But test works as it can with current bug in discovery and the disadvantages with multiple IP addresses. Test show timings but was not supposed to do assertions. Is it another ticket?", "author": "Vladsz83", "createdAt": "2020-10-19T13:00:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2MTI0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1OTQwNQ==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r507759405", "bodyText": "Another ticket, not a problem. Just mentioned that we need to have more info.", "author": "anton-vinogradov", "createdAt": "2020-10-19T13:46:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2MTI0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2NzAzNw==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r506267037", "bodyText": "self.NUM_NODES - 1 (6 nodes) seems to be too small cluster", "author": "anton-vinogradov", "createdAt": "2020-10-16T10:26:20Z", "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -131,14 +161,14 @@ def _perform_node_fail_scenario(self, test_config):\n \n         servers, start_servers_sec = start_servers(self.test_context, self.NUM_NODES - 1, ignite_config, modules)", "originalCommit": "42bcdb32b471ba21a5e5d1034192b8c148270e54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxODAzOQ==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r507618039", "bodyText": "1 node is required for the loader. I keep always same number of server nodes by your advice. Previous version chooced self.NUM_NODES or self.NUM_NODES-1 depending on with_load or without_load.", "author": "Vladsz83", "createdAt": "2020-10-19T09:52:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2NzAzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY5OTA4Ng==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r507699086", "bodyText": "We have 12 nodes in total. Can we start 9 nodes cluster?", "author": "anton-vinogradov", "createdAt": "2020-10-19T12:17:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2NzAzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcwNjc3Ng==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r507706776", "bodyText": "Fixed.", "author": "Vladsz83", "createdAt": "2020-10-19T12:30:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2NzAzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2ODE2NA==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r506268164", "bodyText": "why not a part of _simulate_nodes_failure or node_fail_task?", "author": "anton-vinogradov", "createdAt": "2020-10-16T10:27:28Z", "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -149,18 +179,134 @@ def _perform_node_fail_scenario(self, test_config):\n \n             start_load_app(self.test_context, ignite_config=load_config, params=params, modules=modules)\n \n-        data = simulate_nodes_failure(servers, failed_nodes, survived_node)\n+        for node in failed_nodes:\n+            self.logger.info(\n+                \"Simulating failure of node '%s' (order %d) on '%s'\" % (node_id(node), order(node), node.name))", "originalCommit": "42bcdb32b471ba21a5e5d1034192b8c148270e54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyMDI2Nw==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r507620267", "bodyText": "Fixed", "author": "Vladsz83", "createdAt": "2020-10-19T09:55:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2ODE2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2OTEwNw==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r506269107", "bodyText": "should be close to start_servers_sec set?", "author": "anton-vinogradov", "createdAt": "2020-10-16T10:28:34Z", "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -149,18 +179,134 @@ def _perform_node_fail_scenario(self, test_config):\n \n             start_load_app(self.test_context, ignite_config=load_config, params=params, modules=modules)\n \n-        data = simulate_nodes_failure(servers, failed_nodes, survived_node)\n+        for node in failed_nodes:\n+            self.logger.info(\n+                \"Simulating failure of node '%s' (order %d) on '%s'\" % (node_id(node), order(node), node.name))\n+\n+        data = self._simulate_nodes_failure(servers, node_fail_task(ignite_config, test_config), failed_nodes,\n+                                            survived_node)\n \n         data['Ignite cluster start time (s)'] = start_servers_sec", "originalCommit": "42bcdb32b471ba21a5e5d1034192b8c148270e54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyMDcyMQ==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r507620721", "bodyText": "Fixed", "author": "Vladsz83", "createdAt": "2020-10-19T09:56:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2OTEwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcyNTQwNw==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r507725407", "bodyText": "I meant that \"data['blabla']=val\" should be next line to the \"val = xxx\".\nyou may just write\ndata = []\nand then append results to it, not defining\ndata = self._simulate_nodes_failure...\ndata['Ignite cluster start time (s)'] = ...\nat the method end.", "author": "anton-vinogradov", "createdAt": "2020-10-19T12:59:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2OTEwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNTk2OQ==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r507825969", "bodyText": "Fixed", "author": "Vladsz83", "createdAt": "2020-10-19T15:02:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2OTEwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2OTA4MQ==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r508269081", "bodyText": "idea was to have the following\ndata = {}\n\nfailed_nodes, survived_node = choose_node_to_kill(servers, test_config.nodes_to_kill,\n                                                          test_config.sequential_failure)\n\ndata['Ignite cluster start time (s)'] = start_servers_sec\n\n...\ndata.update(self._simulate_nodes_failure(servers, node_fail_task(ignite_config, test_config), failed_nodes,\n                                                 survived_node))\nreturn data\n\nto make code more refactoring friendly.", "author": "anton-vinogradov", "createdAt": "2020-10-20T07:27:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2OTEwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MjUwMw==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r508272503", "bodyText": "Fixed", "author": "Vladsz83", "createdAt": "2020-10-20T07:33:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2OTEwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3NTgzMw==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r506275833", "bodyText": "should this be an IgniteApplication feature?", "author": "anton-vinogradov", "createdAt": "2020-10-16T10:36:23Z", "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -149,18 +179,134 @@ def _perform_node_fail_scenario(self, test_config):\n \n             start_load_app(self.test_context, ignite_config=load_config, params=params, modules=modules)\n \n-        data = simulate_nodes_failure(servers, failed_nodes, survived_node)\n+        for node in failed_nodes:\n+            self.logger.info(\n+                \"Simulating failure of node '%s' (order %d) on '%s'\" % (node_id(node), order(node), node.name))\n+\n+        data = self._simulate_nodes_failure(servers, node_fail_task(ignite_config, test_config), failed_nodes,\n+                                            survived_node)\n \n         data['Ignite cluster start time (s)'] = start_servers_sec\n \n         return data\n \n+    def _simulate_nodes_failure(self, servers, kill_node_task, failed_nodes, survived_node):\n+        \"\"\"\n+        Perform node failure scenario\n+        \"\"\"\n+        ids_to_wait = [node_id(n) for n in failed_nodes]\n+\n+        _, first_terminated = servers.exec_on_nodes_async(failed_nodes, kill_node_task)\n+\n+        for node in failed_nodes:\n+            self.logger.debug(\n+                \"Netfilter activated on '%s': %s\" % (node.name, dump_netfilter_settings(node)))\n+\n+        # Keeps dates of logged node failures.\n+        logged_timestamps = []\n+        data = {}\n+\n+        for failed_id in ids_to_wait:\n+            servers.await_event_on_node(failed_pattern(failed_id), survived_node, 15, from_the_beginning=True,\n+                                        backoff_sec=0.3)\n+\n+            _, stdout, _ = survived_node.account.ssh_client.exec_command(\n+                \"grep '%s' %s\" % (failed_pattern(failed_id), IgniteAwareService.STDOUT_STDERR_CAPTURE))\n+\n+            logged_timestamps.append(\n+                datetime.strptime(re.match(\"^\\\\[[^\\\\[]+\\\\]\", stdout.read().decode(\"utf-8\")).group(),\n+                                  \"[%Y-%m-%d %H:%M:%S,%f]\"))", "originalCommit": "42bcdb32b471ba21a5e5d1034192b8c148270e54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyNDY3NA==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r507624674", "bodyText": "I don't think so. This test kills nodes and awaits for node failure. We IgniteApplication should knowe something about logic of certain test? Also, we monitor nodes not on client, not on IgniteApplication", "author": "Vladsz83", "createdAt": "2020-10-19T10:02:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3NTgzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcyODk0Mg==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r507728942", "bodyText": "This should be the part of the framework, since the format may change.\nFor example https://github.com/apache/ignite/pull/8294/files#diff-0d466e0ce9a05556fdc0b52bd392bf09945e2ebc21eccf1fe4a69e11e1e3aad6R245", "author": "anton-vinogradov", "createdAt": "2020-10-19T13:05:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3NTgzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNTkwNg==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r507825906", "bodyText": "Fixed", "author": "Vladsz83", "createdAt": "2020-10-19T15:02:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3NTgzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MDk5Mg==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r508270992", "bodyText": "Idea was to have a universal method which able to extract any event time.", "author": "anton-vinogradov", "createdAt": "2020-10-20T07:30:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3NTgzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMyNTQzNw==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r508325437", "bodyText": "Fixed", "author": "Vladsz83", "createdAt": "2020-10-20T08:53:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3NTgzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQwMzkzNA==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r508403934", "bodyText": "lets rename to get_event_time and node_failed_event_pattern", "author": "anton-vinogradov", "createdAt": "2020-10-20T10:54:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3NTgzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQwOTkwMw==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r508409903", "bodyText": "Fixed", "author": "Vladsz83", "createdAt": "2020-10-20T11:05:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3NTgzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQxMzgyMA==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r508413820", "bodyText": "still see pattern_time method, push missed?", "author": "anton-vinogradov", "createdAt": "2020-10-20T11:11:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3NTgzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQxNzg5Nw==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r508417897", "bodyText": "Check again", "author": "Vladsz83", "createdAt": "2020-10-20T11:19:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3NTgzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4NDE2OQ==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r506284169", "bodyText": "lets split to failed amount check and ?segmentation? check", "author": "anton-vinogradov", "createdAt": "2020-10-16T10:46:59Z", "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -149,18 +179,134 @@ def _perform_node_fail_scenario(self, test_config):\n \n             start_load_app(self.test_context, ignite_config=load_config, params=params, modules=modules)\n \n-        data = simulate_nodes_failure(servers, failed_nodes, survived_node)\n+        for node in failed_nodes:\n+            self.logger.info(\n+                \"Simulating failure of node '%s' (order %d) on '%s'\" % (node_id(node), order(node), node.name))\n+\n+        data = self._simulate_nodes_failure(servers, node_fail_task(ignite_config, test_config), failed_nodes,\n+                                            survived_node)\n \n         data['Ignite cluster start time (s)'] = start_servers_sec\n \n         return data\n \n+    def _simulate_nodes_failure(self, servers, kill_node_task, failed_nodes, survived_node):\n+        \"\"\"\n+        Perform node failure scenario\n+        \"\"\"\n+        ids_to_wait = [node_id(n) for n in failed_nodes]\n+\n+        _, first_terminated = servers.exec_on_nodes_async(failed_nodes, kill_node_task)\n+\n+        for node in failed_nodes:\n+            self.logger.debug(\n+                \"Netfilter activated on '%s': %s\" % (node.name, dump_netfilter_settings(node)))\n+\n+        # Keeps dates of logged node failures.\n+        logged_timestamps = []\n+        data = {}\n+\n+        for failed_id in ids_to_wait:\n+            servers.await_event_on_node(failed_pattern(failed_id), survived_node, 15, from_the_beginning=True,\n+                                        backoff_sec=0.3)\n+\n+            _, stdout, _ = survived_node.account.ssh_client.exec_command(\n+                \"grep '%s' %s\" % (failed_pattern(failed_id), IgniteAwareService.STDOUT_STDERR_CAPTURE))\n+\n+            logged_timestamps.append(\n+                datetime.strptime(re.match(\"^\\\\[[^\\\\[]+\\\\]\", stdout.read().decode(\"utf-8\")).group(),\n+                                  \"[%Y-%m-%d %H:%M:%S,%f]\"))\n+\n+        self._check_results(failed_nodes, survived_node)\n+\n+        logged_timestamps.sort(reverse=True)\n+\n+        first_kill_time = epoch_mills(first_terminated)\n+        detection_delay = epoch_mills(logged_timestamps[0]) - first_kill_time\n+\n+        data['Detection of node(s) failure (ms)'] = detection_delay\n+        data['All detection delays (ms):'] = str([epoch_mills(ts) - first_kill_time for ts in logged_timestamps])\n+        data['Nodes failed'] = len(failed_nodes)\n+\n+        return data\n+\n+    def _check_results(self, failed_nodes, survived_node):", "originalCommit": "42bcdb32b471ba21a5e5d1034192b8c148270e54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYzMDYyMg==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r507630622", "bodyText": "Fixed", "author": "Vladsz83", "createdAt": "2020-10-19T10:13:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4NDE2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM5MTEyMw==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r506391123", "bodyText": "should this be at some test_superclass?", "author": "anton-vinogradov", "createdAt": "2020-10-16T13:04:31Z", "path": "modules/ducktests/tests/ignitetest/tests/discovery_test.py", "diffHunk": "@@ -149,18 +179,134 @@ def _perform_node_fail_scenario(self, test_config):\n \n             start_load_app(self.test_context, ignite_config=load_config, params=params, modules=modules)\n \n-        data = simulate_nodes_failure(servers, failed_nodes, survived_node)\n+        for node in failed_nodes:\n+            self.logger.info(\n+                \"Simulating failure of node '%s' (order %d) on '%s'\" % (node_id(node), order(node), node.name))\n+\n+        data = self._simulate_nodes_failure(servers, node_fail_task(ignite_config, test_config), failed_nodes,\n+                                            survived_node)\n \n         data['Ignite cluster start time (s)'] = start_servers_sec\n \n         return data\n \n+    def _simulate_nodes_failure(self, servers, kill_node_task, failed_nodes, survived_node):\n+        \"\"\"\n+        Perform node failure scenario\n+        \"\"\"\n+        ids_to_wait = [node_id(n) for n in failed_nodes]\n+\n+        _, first_terminated = servers.exec_on_nodes_async(failed_nodes, kill_node_task)\n+\n+        for node in failed_nodes:\n+            self.logger.debug(\n+                \"Netfilter activated on '%s': %s\" % (node.name, dump_netfilter_settings(node)))\n+\n+        # Keeps dates of logged node failures.\n+        logged_timestamps = []\n+        data = {}\n+\n+        for failed_id in ids_to_wait:\n+            servers.await_event_on_node(failed_pattern(failed_id), survived_node, 15, from_the_beginning=True,\n+                                        backoff_sec=0.3)\n+\n+            _, stdout, _ = survived_node.account.ssh_client.exec_command(\n+                \"grep '%s' %s\" % (failed_pattern(failed_id), IgniteAwareService.STDOUT_STDERR_CAPTURE))\n+\n+            logged_timestamps.append(\n+                datetime.strptime(re.match(\"^\\\\[[^\\\\[]+\\\\]\", stdout.read().decode(\"utf-8\")).group(),\n+                                  \"[%Y-%m-%d %H:%M:%S,%f]\"))\n+\n+        self._check_results(failed_nodes, survived_node)\n+\n+        logged_timestamps.sort(reverse=True)\n+\n+        first_kill_time = epoch_mills(first_terminated)\n+        detection_delay = epoch_mills(logged_timestamps[0]) - first_kill_time\n+\n+        data['Detection of node(s) failure (ms)'] = detection_delay\n+        data['All detection delays (ms):'] = str([epoch_mills(ts) - first_kill_time for ts in logged_timestamps])\n+        data['Nodes failed'] = len(failed_nodes)\n+\n+        return data\n+\n+    def _check_results(self, failed_nodes, survived_node):\n+        \"\"\"Ensures test finishes correctly.\"\"\"\n+        cmd = \"grep '%s' %s | wc -l\" % (failed_pattern(), IgniteAwareService.STDOUT_STDERR_CAPTURE)\n+\n+        failed_cnt = int(str(survived_node.account.ssh_client.exec_command(cmd)[1].read(), sys.getdefaultencoding()))\n+\n+        if failed_cnt != len(failed_nodes):\n+            failed = str(survived_node.account.ssh_client.exec_command(\n+                \"grep '%s' %s\" % (failed_pattern(), IgniteAwareService.STDOUT_STDERR_CAPTURE))[1].read(),\n+                         sys.getdefaultencoding())\n+\n+            self.logger.warn(\"Node '%s' (%s) has detected the following failures:%s%s\" % (\n+                survived_node.name, node_id(survived_node), os.linesep, failed))\n+\n+            raise AssertionError(\n+                \"Wrong number of failed nodes: %d. Expected: %d. Check the logs.\" % (failed_cnt, len(failed_nodes)))\n+\n+        for service in [srv for srv in self.test_context.services if isinstance(srv, IgniteAwareService)]:\n+            for node in [srv_node for srv_node in service.nodes if srv_node not in failed_nodes]:\n+                cmd = \"grep -i '%s' %s | wc -l\" % (\"local no1de segmented\", IgniteAwareService.STDOUT_STDERR_CAPTURE)\n+\n+                failed = str(node.account.ssh_client.exec_command(cmd)[1].read(), sys.getdefaultencoding())\n+\n+                if int(failed) > 0:\n+                    raise AssertionError(\n+                        \"Wrong node failed (segmented) on '%s'. Check the logs.\" % node.name)\n+\n+    def setup(self):\n+        super().setup()\n+\n+        self.netfilter_store_path = os.path.join(self.tmp_path_root, \"iptables.bak\")\n+\n+        # Store current network filter settings.\n+        for node in self.test_context.cluster.nodes:\n+            cmd = \"sudo iptables-save | tee \" + self.netfilter_store_path\n+\n+            exec_error = str(node.account.ssh_client.exec_command(cmd)[2].read(), sys.getdefaultencoding())\n+\n+            if \"Warning: iptables-legacy tables present\" in exec_error:\n+                cmd = \"sudo iptables-legacy-save | tee \" + self.netfilter_store_path\n+\n+                exec_error = str(node.account.ssh_client.exec_command(cmd)[2].read(), sys.getdefaultencoding())\n+\n+            assert len(exec_error) == 0, \"Failed to store iptables rules on '%s': %s\" % (node.name, exec_error)\n+\n+            self.logger.debug(\"Netfilter before launch on '%s': %s\" % (node.name, dump_netfilter_settings(node)))\n+\n+    def teardown(self):\n+        # Restore previous network filter settings.\n+        cmd = \"sudo iptables-restore < \" + self.netfilter_store_path\n+\n+        errors = []\n+\n+        for node in self.test_context.cluster.nodes:\n+            exec_error = str(node.account.ssh_client.exec_command(cmd)[2].read(), sys.getdefaultencoding())\n+\n+            if len(exec_error) > 0:\n+                errors.append(\"Failed to restore iptables rules on '%s': %s\" % (node.name, exec_error))\n+            else:\n+                self.logger.debug(\"Netfilter after launch on '%s': %s\" % (node.name, dump_netfilter_settings(node)))\n+\n+        if len(errors) > 0:\n+            self.logger.error(\"Failed restoring actions:\" + os.linesep + os.linesep.join(errors))\n+\n+            raise RuntimeError(\"Unable to restore node states. See the log above.\")\n+\n+        super().teardown()", "originalCommit": "42bcdb32b471ba21a5e5d1034192b8c148270e54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYzNDE5Mw==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r507634193", "bodyText": "We have no such superclass for network issues. For now, there are no responsibilities for other test/class to care for netfilter restoring. Also, the test environment clears iptables.", "author": "Vladsz83", "createdAt": "2020-10-19T10:19:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM5MTEyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzczMDI3NQ==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r507730275", "bodyText": "AFAIU, @ivandasch need this feature (or it's part) at another test?\nIf so, let's define the base class.", "author": "anton-vinogradov", "createdAt": "2020-10-19T13:07:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM5MTEyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzczMzkwMQ==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r507733901", "bodyText": "I suggest to split the tickets. Let's made refactoring ticket separate.", "author": "Vladsz83", "createdAt": "2020-10-19T13:12:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM5MTEyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1OTczOQ==", "url": "https://github.com/apache/ignite/pull/8211#discussion_r507759739", "bodyText": "Ok", "author": "anton-vinogradov", "createdAt": "2020-10-19T13:47:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM5MTEyMw=="}], "type": "inlineReview"}]}