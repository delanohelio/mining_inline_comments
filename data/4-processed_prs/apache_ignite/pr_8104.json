{"pr_number": 8104, "pr_title": "IGNITE-13296 .NET: TransactionImpl finalizer can crash the process", "pr_createdAt": "2020-07-30T21:57:56Z", "pr_url": "https://github.com/apache/ignite/pull/8104", "timeline": [{"oid": "2c10c866bfa545114c2b8a1ab5cf3bda1952abdb", "url": "https://github.com/apache/ignite/commit/2c10c866bfa545114c2b8a1ab5cf3bda1952abdb", "message": "IGNITE-13296 - test.", "committedDate": "2020-07-25T19:50:15Z", "type": "commit"}, {"oid": "daf8402993a1ab9ad35f8eb9b54c90970129cda4", "url": "https://github.com/apache/ignite/commit/daf8402993a1ab9ad35f8eb9b54c90970129cda4", "message": "IGNITE-13296 - WIP.", "committedDate": "2020-07-27T21:11:55Z", "type": "commit"}, {"oid": "7ddc09bbe1c7b3d8f06c7edcb5b8cacaf0225fbb", "url": "https://github.com/apache/ignite/commit/7ddc09bbe1c7b3d8f06c7edcb5b8cacaf0225fbb", "message": "IGNITE-13296 - Dispose should not throw.", "committedDate": "2020-07-27T21:18:49Z", "type": "commit"}, {"oid": "941da771bd0be944c8b9ce4950b0f84ad3392b8a", "url": "https://github.com/apache/ignite/commit/941da771bd0be944c8b9ce4950b0f84ad3392b8a", "message": "IGNITE-13296 - started implementation.", "committedDate": "2020-07-28T21:17:00Z", "type": "commit"}, {"oid": "fcdd0d725855674dd9467853f8317b92e379ae2d", "url": "https://github.com/apache/ignite/commit/fcdd0d725855674dd9467853f8317b92e379ae2d", "message": "IGNITE-13296 - initial implementation.", "committedDate": "2020-07-29T19:43:32Z", "type": "commit"}, {"oid": "74d44fcaea6fd7ef80d3c6b7de154d530b29c237", "url": "https://github.com/apache/ignite/commit/74d44fcaea6fd7ef80d3c6b7de154d530b29c237", "message": "IGNITE-13296 - first tests.", "committedDate": "2020-07-29T21:36:14Z", "type": "commit"}, {"oid": "b86f633e31382c388a58e7e15c6ccb70b3c24773", "url": "https://github.com/apache/ignite/commit/b86f633e31382c388a58e7e15c6ccb70b3c24773", "message": "IGNITE-13296 - tests.", "committedDate": "2020-07-29T22:24:41Z", "type": "commit"}, {"oid": "57cc8dcb1dfc26c36342042fec5ed635b1ab3dee", "url": "https://github.com/apache/ignite/commit/57cc8dcb1dfc26c36342042fec5ed635b1ab3dee", "message": "IGNITE-13296 - tests.", "committedDate": "2020-07-29T22:36:14Z", "type": "commit"}, {"oid": "0ad7869328ed35184c43c430dc1b5ec8d38d5e5a", "url": "https://github.com/apache/ignite/commit/0ad7869328ed35184c43c430dc1b5ec8d38d5e5a", "message": "IGNITE-13296 - tests.", "committedDate": "2020-07-29T22:53:07Z", "type": "commit"}, {"oid": "2edc0621f8fc2c9736bb81e5fedde5f4ad3afba3", "url": "https://github.com/apache/ignite/commit/2edc0621f8fc2c9736bb81e5fedde5f4ad3afba3", "message": "IGNITE-13296 - tests.", "committedDate": "2020-07-30T21:49:36Z", "type": "commit"}, {"oid": "94b96241c9791a80ccc4913f8e0a8969a8afa69b", "url": "https://github.com/apache/ignite/commit/94b96241c9791a80ccc4913f8e0a8969a8afa69b", "message": "IGNITE-13296 - docs.", "committedDate": "2020-07-30T21:50:58Z", "type": "commit"}, {"oid": "3e7d4f440b8c731211243a24e4b6fe242e488296", "url": "https://github.com/apache/ignite/commit/3e7d4f440b8c731211243a24e4b6fe242e488296", "message": "IGNITE-13296 - refactor.", "committedDate": "2020-07-30T21:55:43Z", "type": "commit"}, {"oid": "abf5bb2169abd66853ab799213e74d66a58cf3c3", "url": "https://github.com/apache/ignite/commit/abf5bb2169abd66853ab799213e74d66a58cf3c3", "message": "IGNITE-13296 - refactor.", "committedDate": "2020-07-30T21:59:32Z", "type": "commit"}, {"oid": "7087442c23c3afcf92e8d1c25b7ea584f5060199", "url": "https://github.com/apache/ignite/commit/7087442c23c3afcf92e8d1c25b7ea584f5060199", "message": "IGNITE-13296 - refactor.", "committedDate": "2020-07-30T22:00:38Z", "type": "commit"}, {"oid": "3b710891af61b29aad31b0e0e22bed4d06afa07a", "url": "https://github.com/apache/ignite/commit/3b710891af61b29aad31b0e0e22bed4d06afa07a", "message": "IGNITE-13296 - fix.", "committedDate": "2020-07-30T23:46:17Z", "type": "commit"}, {"oid": "e18b366b0c1e70ff1cceca69ac6d87d8733c5109", "url": "https://github.com/apache/ignite/commit/e18b366b0c1e70ff1cceca69ac6d87d8733c5109", "message": "IGNITE-13296 - fix.", "committedDate": "2020-07-31T07:54:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUyNzc3OQ==", "url": "https://github.com/apache/ignite/pull/8104#discussion_r463527779", "bodyText": "I don't think we should swallow all exceptions here. The only exception we expect is \"grid stopped\" - this can be ignored. Everything else should not be handled to avoid hiding bugs.", "author": "ptupitsyn", "createdAt": "2020-07-31T10:16:34Z", "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Transactions/TransactionImpl.cs", "diffHunk": "@@ -396,12 +397,18 @@ internal long Id\n         }\n \n         /** <inheritdoc /> */\n+        [SuppressMessage(\"Microsoft.Design\", \"CA1031:DoNotCatchGeneralExceptionTypes\",\n+            Justification = \"Dispose should not throw.\")]\n         public void Dispose()\n         {\n             try\n             {\n                 Close();\n             }\n+            catch\n+            {\n+                // No-op. Dispose should not throw.", "originalCommit": "e18b366b0c1e70ff1cceca69ac6d87d8733c5109", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI2NDY1Mg==", "url": "https://github.com/apache/ignite/pull/8104#discussion_r483264652", "bodyText": "Fixed", "author": "gurustron", "createdAt": "2020-09-03T21:30:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUyNzc3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUyNzk3Ng==", "url": "https://github.com/apache/ignite/pull/8104#discussion_r463527976", "bodyText": "Supports the following operations:", "author": "ptupitsyn", "createdAt": "2020-07-31T10:17:00Z", "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Transactions/TransactionRollbackOnlyProxy.cs", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Impl.Transactions\n+{\n+    using System;\n+    using System.Diagnostics.CodeAnalysis;\n+    using System.Globalization;\n+    using System.Threading.Tasks;\n+    using Apache.Ignite.Core.Impl.Common;\n+    using Apache.Ignite.Core.Transactions;\n+\n+    /// <summary>\n+    /// Cache transaction proxy which supports only implicit rollback operations and getters.\n+    /// <para/>\n+    /// Supports next operations:", "originalCommit": "e18b366b0c1e70ff1cceca69ac6d87d8733c5109", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYwODkyMA==", "url": "https://github.com/apache/ignite/pull/8104#discussion_r463608920", "bodyText": "fixed", "author": "gurustron", "createdAt": "2020-07-31T13:25:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUyNzk3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzMDAxMg==", "url": "https://github.com/apache/ignite/pull/8104#discussion_r463530012", "bodyText": "I think this can be no-op, since RollbackOnly is always true.", "author": "ptupitsyn", "createdAt": "2020-07-31T10:21:44Z", "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Transactions/TransactionRollbackOnlyProxy.cs", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Impl.Transactions\n+{\n+    using System;\n+    using System.Diagnostics.CodeAnalysis;\n+    using System.Globalization;\n+    using System.Threading.Tasks;\n+    using Apache.Ignite.Core.Impl.Common;\n+    using Apache.Ignite.Core.Transactions;\n+\n+    /// <summary>\n+    /// Cache transaction proxy which supports only implicit rollback operations and getters.\n+    /// <para/>\n+    /// Supports next operations:\n+    /// <list type=\"bullet\">\n+    ///     <item><description><see cref=\"Rollback\"/>.</description></item>\n+    ///     <item><description><see cref=\"RollbackAsync\"/>.</description></item>\n+    ///     <item><description><see cref=\"IDisposable.Dispose\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"NodeId\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"Isolation\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"Concurrency\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"Label\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"IsRollbackOnly\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"Id\"/>.</description></item>\n+    /// </list>\n+    /// </summary>\n+    internal class TransactionRollbackOnlyProxy : ITransaction\n+    {\n+        /** Transactions facade. */\n+        private readonly TransactionsImpl _txs;\n+\n+        /** Unique transaction view ID. */\n+        private readonly long _id;\n+\n+        /** Is closed. */\n+        private volatile bool _isClosed;\n+\n+        public TransactionRollbackOnlyProxy(\n+            TransactionsImpl txs,\n+            long id,\n+            TransactionConcurrency concurrency,\n+            TransactionIsolation isolation,\n+            TimeSpan timeout,\n+            string label,\n+            Guid nodeId)\n+        {\n+            _txs = txs;\n+            _id = id;\n+            NodeId = nodeId;\n+            Isolation = isolation;\n+            Concurrency = concurrency;\n+            Timeout = timeout;\n+            Label = label;\n+        }\n+\n+        /** <inheritdoc /> */\n+        public Guid NodeId { get; private set; }\n+\n+        /** <inheritdoc /> */\n+        public long ThreadId\n+        {\n+            get { throw GetInvalidOperationException(); }\n+        }\n+\n+        /** <inheritdoc /> */\n+        public DateTime StartTime\n+        {\n+            get { throw GetInvalidOperationException(); }\n+        }\n+\n+        /** <inheritdoc /> */\n+        public TransactionIsolation Isolation { get; private set; }\n+\n+        /** <inheritdoc /> */\n+        public TransactionConcurrency Concurrency { get; private set; }\n+\n+        /** <inheritdoc /> */\n+        public TransactionState State\n+        {\n+            get\n+            {\n+                lock (this)\n+                {\n+                    ThrowIfClosed();\n+\n+                    return _txs.TxState(this);   \n+                }\n+            }\n+        }\n+\n+        /** <inheritdoc /> */\n+        public TimeSpan Timeout { get; private set; }\n+\n+        /** <inheritdoc /> */\n+        public string Label { get; private set; }\n+\n+        /** <inheritdoc /> */\n+        public bool IsRollbackOnly\n+        {\n+            get { return true; }\n+        }\n+\n+        /** <inheritDoc /> */\n+        public bool SetRollbackonly()\n+        {\n+            throw GetInvalidOperationException();", "originalCommit": "e18b366b0c1e70ff1cceca69ac6d87d8733c5109", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzMDA1MQ==", "url": "https://github.com/apache/ignite/pull/8104#discussion_r463530051", "bodyText": "I think this can be no-op, since RollbackOnly is always true.", "author": "ptupitsyn", "createdAt": "2020-07-31T10:21:53Z", "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Transactions/TransactionRollbackOnlyProxy.cs", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Impl.Transactions\n+{\n+    using System;\n+    using System.Diagnostics.CodeAnalysis;\n+    using System.Globalization;\n+    using System.Threading.Tasks;\n+    using Apache.Ignite.Core.Impl.Common;\n+    using Apache.Ignite.Core.Transactions;\n+\n+    /// <summary>\n+    /// Cache transaction proxy which supports only implicit rollback operations and getters.\n+    /// <para/>\n+    /// Supports next operations:\n+    /// <list type=\"bullet\">\n+    ///     <item><description><see cref=\"Rollback\"/>.</description></item>\n+    ///     <item><description><see cref=\"RollbackAsync\"/>.</description></item>\n+    ///     <item><description><see cref=\"IDisposable.Dispose\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"NodeId\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"Isolation\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"Concurrency\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"Label\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"IsRollbackOnly\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"Id\"/>.</description></item>\n+    /// </list>\n+    /// </summary>\n+    internal class TransactionRollbackOnlyProxy : ITransaction\n+    {\n+        /** Transactions facade. */\n+        private readonly TransactionsImpl _txs;\n+\n+        /** Unique transaction view ID. */\n+        private readonly long _id;\n+\n+        /** Is closed. */\n+        private volatile bool _isClosed;\n+\n+        public TransactionRollbackOnlyProxy(\n+            TransactionsImpl txs,\n+            long id,\n+            TransactionConcurrency concurrency,\n+            TransactionIsolation isolation,\n+            TimeSpan timeout,\n+            string label,\n+            Guid nodeId)\n+        {\n+            _txs = txs;\n+            _id = id;\n+            NodeId = nodeId;\n+            Isolation = isolation;\n+            Concurrency = concurrency;\n+            Timeout = timeout;\n+            Label = label;\n+        }\n+\n+        /** <inheritdoc /> */\n+        public Guid NodeId { get; private set; }\n+\n+        /** <inheritdoc /> */\n+        public long ThreadId\n+        {\n+            get { throw GetInvalidOperationException(); }\n+        }\n+\n+        /** <inheritdoc /> */\n+        public DateTime StartTime\n+        {\n+            get { throw GetInvalidOperationException(); }\n+        }\n+\n+        /** <inheritdoc /> */\n+        public TransactionIsolation Isolation { get; private set; }\n+\n+        /** <inheritdoc /> */\n+        public TransactionConcurrency Concurrency { get; private set; }\n+\n+        /** <inheritdoc /> */\n+        public TransactionState State\n+        {\n+            get\n+            {\n+                lock (this)\n+                {\n+                    ThrowIfClosed();\n+\n+                    return _txs.TxState(this);   \n+                }\n+            }\n+        }\n+\n+        /** <inheritdoc /> */\n+        public TimeSpan Timeout { get; private set; }\n+\n+        /** <inheritdoc /> */\n+        public string Label { get; private set; }\n+\n+        /** <inheritdoc /> */\n+        public bool IsRollbackOnly\n+        {\n+            get { return true; }\n+        }\n+\n+        /** <inheritDoc /> */\n+        public bool SetRollbackonly()\n+        {\n+            throw GetInvalidOperationException();", "originalCommit": "e18b366b0c1e70ff1cceca69ac6d87d8733c5109", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4NDg1OQ==", "url": "https://github.com/apache/ignite/pull/8104#discussion_r463584859", "bodyText": "Same here, let's make sure we handle only known exceptions", "author": "ptupitsyn", "createdAt": "2020-07-31T12:36:58Z", "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Transactions/TransactionRollbackOnlyProxy.cs", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Impl.Transactions\n+{\n+    using System;\n+    using System.Diagnostics.CodeAnalysis;\n+    using System.Globalization;\n+    using System.Threading.Tasks;\n+    using Apache.Ignite.Core.Impl.Common;\n+    using Apache.Ignite.Core.Transactions;\n+\n+    /// <summary>\n+    /// Cache transaction proxy which supports only implicit rollback operations and getters.\n+    /// <para/>\n+    /// Supports next operations:\n+    /// <list type=\"bullet\">\n+    ///     <item><description><see cref=\"Rollback\"/>.</description></item>\n+    ///     <item><description><see cref=\"RollbackAsync\"/>.</description></item>\n+    ///     <item><description><see cref=\"IDisposable.Dispose\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"NodeId\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"Isolation\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"Concurrency\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"Label\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"IsRollbackOnly\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"Id\"/>.</description></item>\n+    /// </list>\n+    /// </summary>\n+    internal class TransactionRollbackOnlyProxy : ITransaction\n+    {\n+        /** Transactions facade. */\n+        private readonly TransactionsImpl _txs;\n+\n+        /** Unique transaction view ID. */\n+        private readonly long _id;\n+\n+        /** Is closed. */\n+        private volatile bool _isClosed;\n+\n+        public TransactionRollbackOnlyProxy(\n+            TransactionsImpl txs,\n+            long id,\n+            TransactionConcurrency concurrency,\n+            TransactionIsolation isolation,\n+            TimeSpan timeout,\n+            string label,\n+            Guid nodeId)\n+        {\n+            _txs = txs;\n+            _id = id;\n+            NodeId = nodeId;\n+            Isolation = isolation;\n+            Concurrency = concurrency;\n+            Timeout = timeout;\n+            Label = label;\n+        }\n+\n+        /** <inheritdoc /> */\n+        public Guid NodeId { get; private set; }\n+\n+        /** <inheritdoc /> */\n+        public long ThreadId\n+        {\n+            get { throw GetInvalidOperationException(); }\n+        }\n+\n+        /** <inheritdoc /> */\n+        public DateTime StartTime\n+        {\n+            get { throw GetInvalidOperationException(); }\n+        }\n+\n+        /** <inheritdoc /> */\n+        public TransactionIsolation Isolation { get; private set; }\n+\n+        /** <inheritdoc /> */\n+        public TransactionConcurrency Concurrency { get; private set; }\n+\n+        /** <inheritdoc /> */\n+        public TransactionState State\n+        {\n+            get\n+            {\n+                lock (this)\n+                {\n+                    ThrowIfClosed();\n+\n+                    return _txs.TxState(this);   \n+                }\n+            }\n+        }\n+\n+        /** <inheritdoc /> */\n+        public TimeSpan Timeout { get; private set; }\n+\n+        /** <inheritdoc /> */\n+        public string Label { get; private set; }\n+\n+        /** <inheritdoc /> */\n+        public bool IsRollbackOnly\n+        {\n+            get { return true; }\n+        }\n+\n+        /** <inheritDoc /> */\n+        public bool SetRollbackonly()\n+        {\n+            throw GetInvalidOperationException();\n+        }\n+\n+        /** <inheritDoc /> */\n+        public void Commit()\n+        {\n+            throw GetInvalidOperationException();\n+        }\n+\n+        /** <inheritDoc /> */\n+        public Task CommitAsync()\n+        {\n+            throw GetInvalidOperationException();\n+        }\n+\n+        /** <inheritDoc /> */\n+        public void Rollback()\n+        {\n+            lock (this)\n+            {\n+                ThrowIfClosed();\n+\n+                try\n+                {\n+                    _txs.TxRollback(this);\n+                }\n+                finally\n+                {\n+                    _isClosed = true;\n+                }\n+            }\n+        }\n+\n+        /** <inheritDoc /> */\n+        public Task RollbackAsync()\n+        {\n+            lock (this)\n+            {\n+                ThrowIfClosed();\n+\n+                return _txs.TxRollbackAsync(this)\n+                    .ContWith(t =>\n+                    {\n+                        try\n+                        {\n+                            _txs.TxClose(this);\n+                        }\n+                        finally\n+                        {\n+                            _isClosed = true;\n+                        }\n+                    });\n+            }\n+        }\n+\n+        /** <inheritDoc /> */\n+        public void AddMeta<TV>(string name, TV val)\n+        {\n+            throw GetInvalidOperationException();\n+        }\n+\n+        /** <inheritdoc /> */\n+        public TV Meta<TV>(string name)\n+        {\n+            throw GetInvalidOperationException();\n+        }\n+\n+        /** <inheritDoc /> */\n+        public TV RemoveMeta<TV>(string name)\n+        {\n+            throw GetInvalidOperationException();\n+        }\n+\n+        /** <inheritDoc /> */\n+        [SuppressMessage(\"Microsoft.Design\", \"CA1031:DoNotCatchGeneralExceptionTypes\",\n+            Justification = \"Dispose should not throw.\")]\n+        public void Dispose()\n+        {\n+            if (!_isClosed)\n+            {\n+                try\n+                {\n+                    _txs.TxRemove(this);\n+                }\n+                catch\n+                {\n+                    // No-op. Dispose should not throw.", "originalCommit": "e18b366b0c1e70ff1cceca69ac6d87d8733c5109", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI2NDg0OA==", "url": "https://github.com/apache/ignite/pull/8104#discussion_r483264848", "bodyText": "Fixed", "author": "gurustron", "createdAt": "2020-09-03T21:30:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4NDg1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4NjA0Ng==", "url": "https://github.com/apache/ignite/pull/8104#discussion_r463586046", "bodyText": "Returned transactions support the following operations:.\nMaybe we should make it simpler and say Returned transactions do not support Commit and CommitAsync operations?", "author": "ptupitsyn", "createdAt": "2020-07-31T12:39:29Z", "path": "modules/platforms/dotnet/Apache.Ignite.Core/Transactions/ITransactions.cs", "diffHunk": "@@ -104,6 +104,18 @@ public interface ITransactions\n \n         /// <summary>\n         /// Returns a list of active transactions initiated by this node.\n+        ///  <para/>\n+        /// Transactions support next operations:", "originalCommit": "e18b366b0c1e70ff1cceca69ac6d87d8733c5109", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4ODM3MQ==", "url": "https://github.com/apache/ignite/pull/8104#discussion_r463588371", "bodyText": "ThreadId, StartTime and metadatas ones not supported either.", "author": "gurustron", "createdAt": "2020-07-31T12:44:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4NjA0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYwODc0MA==", "url": "https://github.com/apache/ignite/pull/8104#discussion_r463608740", "bodyText": "Fixed.", "author": "gurustron", "createdAt": "2020-07-31T13:25:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4NjA0Ng=="}], "type": "inlineReview"}, {"oid": "61f73a4312d84fdc41be6e451fd8e4fcc62b81e2", "url": "https://github.com/apache/ignite/commit/61f73a4312d84fdc41be6e451fd8e4fcc62b81e2", "message": "IGNITE-13296 - some fixes after review.", "committedDate": "2020-07-31T13:24:53Z", "type": "commit"}, {"oid": "f44e520f22704cb824cdd73fa751d3548de25c4d", "url": "https://github.com/apache/ignite/commit/f44e520f22704cb824cdd73fa751d3548de25c4d", "message": "Merge branch 'master' into IGNITE-13296-fix-local-active-tx", "committedDate": "2020-08-31T19:18:10Z", "type": "commit"}, {"oid": "8beb318218d372b5c1d0fdba776125424dc9f60c", "url": "https://github.com/apache/ignite/commit/8beb318218d372b5c1d0fdba776125424dc9f60c", "message": "IGNITE-13296 - IgniteIllegalStateException", "committedDate": "2020-08-31T20:23:48Z", "type": "commit"}, {"oid": "644e010e21caf2e2761f2eadff4522293f08df52", "url": "https://github.com/apache/ignite/commit/644e010e21caf2e2761f2eadff4522293f08df52", "message": "IGNITE-13296 - IgniteIllegalStateException", "committedDate": "2020-08-31T20:31:00Z", "type": "commit"}, {"oid": "78ca34bf9521be018b275deb6212d1aaa60be8b3", "url": "https://github.com/apache/ignite/commit/78ca34bf9521be018b275deb6212d1aaa60be8b3", "message": "IGNITE-13296 - IgniteIllegalStateException", "committedDate": "2020-09-02T18:51:23Z", "type": "commit"}, {"oid": "eda33c33972b1640301b12f077773e02ef0e5349", "url": "https://github.com/apache/ignite/commit/eda33c33972b1640301b12f077773e02ef0e5349", "message": "IGNITE-13296 - fix exception.", "committedDate": "2020-09-02T21:43:51Z", "type": "commit"}, {"oid": "a8b473fcc78d5e985ad767b6c157b8cab887d63c", "url": "https://github.com/apache/ignite/commit/a8b473fcc78d5e985ad767b6c157b8cab887d63c", "message": "IGNITE-13296 - reame test.", "committedDate": "2020-09-03T21:08:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ1NTA0Mg==", "url": "https://github.com/apache/ignite/pull/8104#discussion_r483455042", "bodyText": "I think we can remove this part and use Ignition.GetIgnite() without arguments below since only one Ignite instance is being used.", "author": "ptupitsyn", "createdAt": "2020-09-04T08:01:37Z", "path": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/CacheLocalActiveTransactionsTest.cs", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Tests.Cache\n+{\n+    using System;\n+    using System.Linq;\n+    using Apache.Ignite.Core.Cache;\n+    using Apache.Ignite.Core.Cache.Configuration;\n+    using Apache.Ignite.Core.Impl.Transactions;\n+    using Apache.Ignite.Core.Transactions;\n+    using NUnit.Framework;\n+    using NUnit.Framework.Constraints;\n+\n+    /// <summary>\n+    /// Tests <see cref=\"ITransactions.GetLocalActiveTransactions\"/>.\n+    /// </summary>\n+    public class CacheLocalActiveTransactionsTest : TestBase\n+    {\n+        private const string IgniteInstanceName = \"GetLocalActiveTransactionsTest\";\n+\n+        /// <summary>\n+        /// Fixture setup.\n+        /// </summary>\n+        [TestFixtureSetUp]\n+        public void SetUp()\n+        {\n+            IgniteConfiguration cfg = new IgniteConfiguration(GetConfig())\n+            {\n+                IgniteInstanceName = IgniteInstanceName\n+            };\n+\n+            Ignition.Start(cfg);\n+        }\n+\n+        /// <summary>\n+        /// Fixture teardown.\n+        /// </summary>\n+        [TestFixtureTearDown]\n+        public void TearDown()\n+        {\n+            Ignition.StopAll(true);\n+        }", "originalCommit": "a8b473fcc78d5e985ad767b6c157b8cab887d63c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgwODExNQ==", "url": "https://github.com/apache/ignite/pull/8104#discussion_r483808115", "bodyText": "Done.", "author": "gurustron", "createdAt": "2020-09-04T19:24:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ1NTA0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ1NzA1Nw==", "url": "https://github.com/apache/ignite/pull/8104#discussion_r483457057", "bodyText": "Missing XMLDoc", "author": "ptupitsyn", "createdAt": "2020-09-04T08:05:43Z", "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Transactions/TransactionRollbackOnlyProxy.cs", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Impl.Transactions\n+{\n+    using System;\n+    using System.Diagnostics.CodeAnalysis;\n+    using System.Globalization;\n+    using System.Threading.Tasks;\n+    using Apache.Ignite.Core.Common;\n+    using Apache.Ignite.Core.Impl.Common;\n+    using Apache.Ignite.Core.Transactions;\n+\n+    /// <summary>\n+    /// Cache transaction proxy which supports only implicit rollback operations and getters.\n+    /// <para/>\n+    /// Does not support the following operations:\n+    /// <list type=\"bullet\">\n+    ///     <item><description><see cref=\"Commit\"/>.</description></item>\n+    ///     <item><description><see cref=\"CommitAsync\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"Meta{TV}\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"AddMeta{TV}\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"RemoveMeta{TV}\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"StartTime\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"ThreadId\"/>.</description></item>\n+    /// </list>\n+    /// </summary>\n+    internal class TransactionRollbackOnlyProxy : ITransaction\n+    {\n+        /** Transactions facade. */\n+        private readonly TransactionsImpl _txs;\n+\n+        /** Unique transaction view ID. */\n+        private readonly long _id;\n+\n+        /** Is closed. */\n+        private volatile bool _isClosed;\n+\n+        public TransactionRollbackOnlyProxy(", "originalCommit": "a8b473fcc78d5e985ad767b6c157b8cab887d63c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgwODE0Mw==", "url": "https://github.com/apache/ignite/pull/8104#discussion_r483808143", "bodyText": "Fixed.", "author": "gurustron", "createdAt": "2020-09-04T19:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ1NzA1Nw=="}], "type": "inlineReview"}, {"oid": "2656262d1a5721c310e92bedc8d926437f602613", "url": "https://github.com/apache/ignite/commit/2656262d1a5721c310e92bedc8d926437f602613", "message": "IGNITE-13296 - fixes after review.", "committedDate": "2020-09-04T19:12:46Z", "type": "commit"}, {"oid": "9e359edaa18960d986d2ccbda0b1e7fabff811d2", "url": "https://github.com/apache/ignite/commit/9e359edaa18960d986d2ccbda0b1e7fabff811d2", "message": "Merge branch 'master' of https://github.com/apache/ignite into IGNITE-13296-fix-local-active-tx", "committedDate": "2020-09-05T12:49:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NTQ1Ng==", "url": "https://github.com/apache/ignite/pull/8104#discussion_r483955456", "bodyText": "We should update state on exception so that transaction is considered closed:\n_state = new StateHolder(TransactionState.Unknown);", "author": "ptupitsyn", "createdAt": "2020-09-05T14:20:58Z", "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Transactions/TransactionRollbackOnlyProxy.cs", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Impl.Transactions\n+{\n+    using System;\n+    using System.Diagnostics.CodeAnalysis;\n+    using System.Globalization;\n+    using System.Threading.Tasks;\n+    using Apache.Ignite.Core.Common;\n+    using Apache.Ignite.Core.Impl.Common;\n+    using Apache.Ignite.Core.Transactions;\n+\n+    /// <summary>\n+    /// Cache transaction proxy which supports only implicit rollback operations and getters.\n+    /// <para/>\n+    /// Does not support the following operations:\n+    /// <list type=\"bullet\">\n+    ///     <item><description><see cref=\"Commit\"/>.</description></item>\n+    ///     <item><description><see cref=\"CommitAsync\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"Meta{TV}\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"AddMeta{TV}\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"RemoveMeta{TV}\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"StartTime\"/>.</description></item>\n+    ///     <item><description>Get <see cref=\"ThreadId\"/>.</description></item>\n+    /// </list>\n+    /// </summary>\n+    internal class TransactionRollbackOnlyProxy : ITransaction\n+    {\n+        /** Transactions facade. */\n+        private readonly TransactionsImpl _txs;\n+\n+        /** Unique transaction view ID. */\n+        private readonly long _id;\n+\n+        /** Is closed. */\n+        private volatile bool _isClosed;\n+\n+        /// <summary>\n+        /// Constructor.\n+        /// </summary>\n+        /// <param name=\"id\">ID.</param>\n+        /// <param name=\"txs\">Transactions.</param>\n+        /// <param name=\"concurrency\">TX concurrency.</param>\n+        /// <param name=\"isolation\">TX isolation.</param>\n+        /// <param name=\"timeout\">Timeout.</param>\n+        /// <param name=\"label\">TX label.</param>\n+        /// <param name=\"nodeId\">The originating node identifier.</param>\n+        public TransactionRollbackOnlyProxy(\n+            TransactionsImpl txs,\n+            long id,\n+            TransactionConcurrency concurrency,\n+            TransactionIsolation isolation,\n+            TimeSpan timeout,\n+            string label,\n+            Guid nodeId)\n+        {\n+            _txs = txs;\n+            _id = id;\n+            NodeId = nodeId;\n+            Isolation = isolation;\n+            Concurrency = concurrency;\n+            Timeout = timeout;\n+            Label = label;\n+        }\n+\n+        /** <inheritdoc /> */\n+        public Guid NodeId { get; private set; }\n+\n+        /** <inheritdoc /> */\n+        public long ThreadId\n+        {\n+            get { throw GetInvalidOperationException(); }\n+        }\n+\n+        /** <inheritdoc /> */\n+        public DateTime StartTime\n+        {\n+            get { throw GetInvalidOperationException(); }\n+        }\n+\n+        /** <inheritdoc /> */\n+        public TransactionIsolation Isolation { get; private set; }\n+\n+        /** <inheritdoc /> */\n+        public TransactionConcurrency Concurrency { get; private set; }\n+\n+        /** <inheritdoc /> */\n+        public TransactionState State\n+        {\n+            get\n+            {\n+                lock (this)\n+                {\n+                    ThrowIfClosed();\n+\n+                    return _txs.TxState(this);   \n+                }\n+            }\n+        }\n+\n+        /** <inheritdoc /> */\n+        public TimeSpan Timeout { get; private set; }\n+\n+        /** <inheritdoc /> */\n+        public string Label { get; private set; }\n+\n+        /** <inheritdoc /> */\n+        public bool IsRollbackOnly\n+        {\n+            get { return true; }\n+        }\n+\n+        /** <inheritDoc /> */\n+        public bool SetRollbackonly()\n+        {\n+            return true;\n+        }\n+\n+        /** <inheritDoc /> */\n+        public void Commit()\n+        {\n+            throw GetInvalidOperationException();\n+        }\n+\n+        /** <inheritDoc /> */\n+        public Task CommitAsync()\n+        {\n+            throw GetInvalidOperationException();\n+        }\n+\n+        /** <inheritDoc /> */\n+        public void Rollback()\n+        {\n+            lock (this)\n+            {\n+                ThrowIfClosed();\n+\n+                try\n+                {\n+                    _txs.TxRollback(this);\n+                }\n+                finally\n+                {\n+                    _isClosed = true;\n+                }\n+            }\n+        }\n+\n+        /** <inheritDoc /> */\n+        public Task RollbackAsync()\n+        {\n+            lock (this)\n+            {\n+                ThrowIfClosed();\n+\n+                return _txs.TxRollbackAsync(this)\n+                    .ContWith(t =>\n+                    {\n+                        try\n+                        {\n+                            _txs.TxClose(this);\n+                        }\n+                        finally\n+                        {\n+                            _isClosed = true;\n+                        }\n+                    });\n+            }\n+        }\n+\n+        /** <inheritDoc /> */\n+        public void AddMeta<TV>(string name, TV val)\n+        {\n+            throw GetInvalidOperationException();\n+        }\n+\n+        /** <inheritdoc /> */\n+        public TV Meta<TV>(string name)\n+        {\n+            throw GetInvalidOperationException();\n+        }\n+\n+        /** <inheritDoc /> */\n+        public TV RemoveMeta<TV>(string name)\n+        {\n+            throw GetInvalidOperationException();\n+        }\n+\n+        /** <inheritDoc /> */\n+        [SuppressMessage(\"Microsoft.Design\", \"CA1031:DoNotCatchGeneralExceptionTypes\",\n+            Justification = \"Dispose should not throw.\")]\n+        public void Dispose()\n+        {\n+            if (!_isClosed)\n+            {\n+                try\n+                {\n+                    _txs.TxRemove(this);\n+                }\n+                catch(IgniteIllegalStateException)\n+                {\n+                    // No-op. Dispose should not throw.", "originalCommit": "9e359edaa18960d986d2ccbda0b1e7fabff811d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk2MzczNw==", "url": "https://github.com/apache/ignite/pull/8104#discussion_r483963737", "bodyText": "Added to TransactionImpl.", "author": "gurustron", "createdAt": "2020-09-05T16:02:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk1NTQ1Ng=="}], "type": "inlineReview"}, {"oid": "ceb7ca2ec434f1947a749c52c28d755c25a67a66", "url": "https://github.com/apache/ignite/commit/ceb7ca2ec434f1947a749c52c28d755c25a67a66", "message": "IGNITE-13296 - fix state.", "committedDate": "2020-09-05T15:45:34Z", "type": "commit"}, {"oid": "f847e5d4d7e4fa934f119dbba49a63e21b572555", "url": "https://github.com/apache/ignite/commit/f847e5d4d7e4fa934f119dbba49a63e21b572555", "message": "IGNITE-13296 - fix test local.", "committedDate": "2020-09-05T15:59:27Z", "type": "commit"}]}