{"pr_number": 1827, "pr_title": "[Distributed]fix code smell", "pr_createdAt": "2020-10-15T07:14:32Z", "pr_url": "https://github.com/apache/iotdb/pull/1827", "timeline": [{"oid": "8fb96fc3cff5690ea943558e9808aaacc0a62cff", "url": "https://github.com/apache/iotdb/commit/8fb96fc3cff5690ea943558e9808aaacc0a62cff", "message": "fix code smell", "committedDate": "2020-10-15T07:12:56Z", "type": "commit"}, {"oid": "2ba292a7cb8045fea936b04d74a7f3c9d2ae1f54", "url": "https://github.com/apache/iotdb/commit/2ba292a7cb8045fea936b04d74a7f3c9d2ae1f54", "message": "fix more code smell", "committedDate": "2020-10-15T08:34:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUzMTk1Mg==", "url": "https://github.com/apache/iotdb/pull/1827#discussion_r505531952", "bodyText": "I don't think the change is thread-safe, please confirm it.", "author": "jt2594838", "createdAt": "2020-10-15T13:15:19Z", "path": "cluster/src/main/java/org/apache/iotdb/cluster/log/LogDispatcher.java", "diffHunk": "@@ -244,25 +244,20 @@ private void appendEntriesAsync(List<ByteBuffer> logList, AppendEntriesRequest r\n     private void appendEntriesSync(List<ByteBuffer> logList, AppendEntriesRequest request,\n         List<SendLogRequest> currBatch) {\n \n-      long start;\n-      if (Timer.ENABLE_INSTRUMENTING) {\n-        start = System.nanoTime();\n-      }\n+      Timer.Statistic.RAFT_SENDER_WAIT_FOR_PREV_LOG.setStartTime();\n       if (!member.waitForPrevLog(peer, currBatch.get(0).getLog())) {\n         logger.warn(\"{}: node {} timed out when appending {}\", member.getName(), receiver,\n             currBatch.get(0).getLog());\n         return;\n       }\n-      Timer.Statistic.RAFT_SENDER_WAIT_FOR_PREV_LOG.addNanoFromStart(start);\n+      Timer.Statistic.RAFT_SENDER_WAIT_FOR_PREV_LOG.calCostTime();", "originalCommit": "2ba292a7cb8045fea936b04d74a7f3c9d2ae1f54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk5NDczMw==", "url": "https://github.com/apache/iotdb/pull/1827#discussion_r505994733", "bodyText": "you're right, its indeed cause concurrent problem, I'll fix it. thanks!", "author": "neuyilan", "createdAt": "2020-10-16T02:28:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUzMTk1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUzOTk3OQ==", "url": "https://github.com/apache/iotdb/pull/1827#discussion_r505539979", "bodyText": "The condition should be put into the first method, as System.nanoTime() is a heavy call and should be avoided when not using instrumenting.", "author": "jt2594838", "createdAt": "2020-10-15T13:26:18Z", "path": "cluster/src/main/java/org/apache/iotdb/cluster/server/Timer.java", "diffHunk": "@@ -183,14 +184,33 @@ public void add(long val) {\n     }\n \n     /**\n-     * This method equals `add(System.nanoTime() - start)`. We wrap `System.nanoTime()` in this\n-     * method to avoid unnecessary calls when instrumenting is disabled.\n-     *\n-     * @param start\n+     * set now time as the operation's start time\n      */\n-    public void addNanoFromStart(long start) {\n+    public void setStartTime() {\n+      setStartTime(System.nanoTime());\n+    }\n+\n+    public void setStartTime(long startTime) {\n+      if (ENABLE_INSTRUMENTING) {\n+        this.startTime = startTime;\n+      }\n+    }", "originalCommit": "2ba292a7cb8045fea936b04d74a7f3c9d2ae1f54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk5NDg1OQ==", "url": "https://github.com/apache/iotdb/pull/1827#discussion_r505994859", "bodyText": "Got it", "author": "neuyilan", "createdAt": "2020-10-16T02:28:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUzOTk3OQ=="}], "type": "inlineReview"}, {"oid": "eefe81346dcce98885284fcb339234476d8422eb", "url": "https://github.com/apache/iotdb/commit/eefe81346dcce98885284fcb339234476d8422eb", "message": "fix concurrent problems when instrumenting", "committedDate": "2020-10-16T02:29:10Z", "type": "commit"}]}