{"pr_number": 1367, "pr_title": "[IOTDB-749] Handle select * from root OOM", "pr_createdAt": "2020-06-15T13:06:16Z", "pr_url": "https://github.com/apache/iotdb/pull/1367", "timeline": [{"oid": "9b904d07ae44a8ce1a9633b3b942192416e92bb7", "url": "https://github.com/apache/iotdb/commit/9b904d07ae44a8ce1a9633b3b942192416e92bb7", "message": "init", "committedDate": "2020-06-15T09:45:31Z", "type": "commit"}, {"oid": "c90ee472375261f9b14d526838baa14beb0fd06f", "url": "https://github.com/apache/iotdb/commit/c90ee472375261f9b14d526838baa14beb0fd06f", "message": "OOM", "committedDate": "2020-06-15T13:03:04Z", "type": "commit"}, {"oid": "b2e094fe8618a0da883b5eca12331c19bcea6446", "url": "https://github.com/apache/iotdb/commit/b2e094fe8618a0da883b5eca12331c19bcea6446", "message": "cast long", "committedDate": "2020-06-16T01:19:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0NTc3NQ==", "url": "https://github.com/apache/iotdb/pull/1367#discussion_r441345775", "bodyText": "reduce to 1000?", "author": "qiaojialin", "createdAt": "2020-06-17T07:42:49Z", "path": "server/src/assembly/resources/conf/iotdb-engine.properties", "diffHunk": "@@ -226,6 +226,10 @@ write_read_free_memory_proportion=6:3:1\n # primitive array size (length of each array) in array pool\n primitive_array_size=128\n \n+# allowed max numbers of deduplicated path in one query\n+# it's just an advised value, the real limitation will be the smaller one between this and the one we calculated\n+max_deduplicated_path_num=10000", "originalCommit": "b2e094fe8618a0da883b5eca12331c19bcea6446", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0NjY5Ng==", "url": "https://github.com/apache/iotdb/pull/1367#discussion_r441346696", "bodyText": "20% for read without cache?   Should it be allocateMemoryForRead * 70%?", "author": "qiaojialin", "createdAt": "2020-06-17T07:44:29Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -128,6 +128,8 @@\n    */\n   private long allocateMemoryForRead = Runtime.getRuntime().maxMemory() * 3 / 10;\n \n+  private long allocateMemoryForReadWithoutCache = Runtime.getRuntime().maxMemory() * 21 / 100;", "originalCommit": "b2e094fe8618a0da883b5eca12331c19bcea6446", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMjQxMg==", "url": "https://github.com/apache/iotdb/pull/1367#discussion_r446832412", "bodyText": "so 30% for cache? where to control that?", "author": "jixuan1989", "createdAt": "2020-06-29T07:43:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0NjY5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM0NzUyMA==", "url": "https://github.com/apache/iotdb/pull/1367#discussion_r441347520", "bodyText": "rename the maxMemoryAvailable to memoryForRead", "author": "qiaojialin", "createdAt": "2020-06-17T07:45:53Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBDescriptor.java", "diffHunk": "@@ -676,6 +678,8 @@ private void initMemoryAllocate(Properties properties) {\n             maxMemoryAvailable * Integer.parseInt(proportions[1].trim()) / proportionSum);\n         conf.setAllocateMemoryForTimeSeriesMetaDataCache(\n             maxMemoryAvailable * Integer.parseInt(proportions[2].trim()) / proportionSum);\n+        conf.setAllocateMemoryForReadWithoutCache(\n+            maxMemoryAvailable * Integer.parseInt(proportions[3].trim()) / proportionSum);", "originalCommit": "b2e094fe8618a0da883b5eca12331c19bcea6446", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "87e3e1c5a624c376cb156eb0dbc3734655176fd8", "url": "https://github.com/apache/iotdb/commit/87e3e1c5a624c376cb156eb0dbc3734655176fd8", "message": "merge with master", "committedDate": "2020-06-29T07:36:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1Mzc2Nw==", "url": "https://github.com/apache/iotdb/pull/1367#discussion_r446853767", "bodyText": "why add memory here..", "author": "jixuan1989", "createdAt": "2020-06-29T08:23:01Z", "path": "server/src/main/java/org/apache/iotdb/db/query/control/QueryResourceManager.java", "diffHunk": "@@ -67,29 +69,55 @@\n   private Map<Long, Set<WeakReference<TsFileResource>>> seqFileNumMap = new ConcurrentHashMap<>();\r\n   private Map<Long, Set<WeakReference<TsFileResource>>> unseqFileNumMap = new ConcurrentHashMap<>();\r\n   private IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\r\n+\r\n   /**\r\n    * Record temporary files used for external sorting.\r\n    * <p>\r\n    * Key: query job id. Value: temporary file list used for external sorting.\r\n    */\r\n-  private Map<Long, List<IExternalSortFileDeserializer>> externalSortFileMap;\r\n+  private final Map<Long, List<IExternalSortFileDeserializer>> externalSortFileMap;\r\n+\r\n+  private final Map<Long, Long> queryIdEstimatedMemoryMap;\r\n+\r\n+  // current total free memory for reading process(not including the cache memory)\r\n+  private final AtomicLong totalFreeMemoryForRead;\r\n+\r\n+  // estimated size for one point memory size, the unit is byte\r\n+  private static final long POINT_ESTIMATED_SIZE = 16L;\r\n \r\n   private QueryResourceManager() {\r\n     filePathsManager = new QueryFileManager();\r\n     externalSortFileMap = new ConcurrentHashMap<>();\r\n+    queryIdEstimatedMemoryMap = new ConcurrentHashMap<>();\r\n+    totalFreeMemoryForRead = new AtomicLong(\r\n+        IoTDBDescriptor.getInstance().getConfig().getAllocateMemoryForReadWithoutCache());\r\n   }\r\n \r\n   public static QueryResourceManager getInstance() {\r\n     return QueryTokenManagerHelper.INSTANCE;\r\n   }\r\n \r\n+  public int getMaxDeduplicatedPathNum(int fetchSize) {\r\n+    return Math.max((int) ((totalFreeMemoryForRead.get() / fetchSize) / POINT_ESTIMATED_SIZE), 0);\r\n+  }\r\n+\r\n   /**\r\n    * Register a new query. When a query request is created firstly, this method must be invoked.\r\n    */\r\n-  public long assignQueryId(boolean isDataQuery) {\r\n+  public long assignQueryId(boolean isDataQuery, int fetchSize, int deduplicatedPathNum) {\r\n     long queryId = queryIdAtom.incrementAndGet();\r\n     if (isDataQuery) {\r\n       filePathsManager.addQueryId(queryId);\r\n+      if (deduplicatedPathNum > 0) {\r\n+        long estimatedMemoryUsage =\r\n+            (long) deduplicatedPathNum * POINT_ESTIMATED_SIZE * (long) fetchSize;\r\n+        // apply the memory successfully\r\n+        if (totalFreeMemoryForRead.addAndGet(-estimatedMemoryUsage) >= 0) {\r\n+          queryIdEstimatedMemoryMap.put(queryId, estimatedMemoryUsage);\r\n+        } else {\r\n+          totalFreeMemoryForRead.addAndGet(estimatedMemoryUsage);\r", "originalCommit": "87e3e1c5a624c376cb156eb0dbc3734655176fd8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1NDA0MQ==", "url": "https://github.com/apache/iotdb/pull/1367#discussion_r446854041", "bodyText": "only works for non-string..", "author": "jixuan1989", "createdAt": "2020-06-29T08:23:29Z", "path": "server/src/main/java/org/apache/iotdb/db/query/control/QueryResourceManager.java", "diffHunk": "@@ -67,29 +69,55 @@\n   private Map<Long, Set<WeakReference<TsFileResource>>> seqFileNumMap = new ConcurrentHashMap<>();\r\n   private Map<Long, Set<WeakReference<TsFileResource>>> unseqFileNumMap = new ConcurrentHashMap<>();\r\n   private IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\r\n+\r\n   /**\r\n    * Record temporary files used for external sorting.\r\n    * <p>\r\n    * Key: query job id. Value: temporary file list used for external sorting.\r\n    */\r\n-  private Map<Long, List<IExternalSortFileDeserializer>> externalSortFileMap;\r\n+  private final Map<Long, List<IExternalSortFileDeserializer>> externalSortFileMap;\r\n+\r\n+  private final Map<Long, Long> queryIdEstimatedMemoryMap;\r\n+\r\n+  // current total free memory for reading process(not including the cache memory)\r\n+  private final AtomicLong totalFreeMemoryForRead;\r\n+\r\n+  // estimated size for one point memory size, the unit is byte\r\n+  private static final long POINT_ESTIMATED_SIZE = 16L;\r", "originalCommit": "87e3e1c5a624c376cb156eb0dbc3734655176fd8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwNjI4NQ==", "url": "https://github.com/apache/iotdb/pull/1367#discussion_r451306285", "bodyText": "From my perspective, 1000 is better. XD", "author": "SilverNarcissus", "createdAt": "2020-07-08T06:14:46Z", "path": "server/src/assembly/resources/conf/iotdb-engine.properties", "diffHunk": "@@ -233,6 +233,10 @@ write_read_free_memory_proportion=6:3:1\n # primitive array size (length of each array) in array pool\n primitive_array_size=128\n \n+# allowed max numbers of deduplicated path in one query\n+# it's just an advised value, the real limitation will be the smaller one between this and the one we calculated\n+max_deduplicated_path_num=10000", "originalCommit": "87e3e1c5a624c376cb156eb0dbc3734655176fd8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cbf3b8344a0b49eab46def8f9df9727288dd8236", "url": "https://github.com/apache/iotdb/commit/cbf3b8344a0b49eab46def8f9df9727288dd8236", "message": "some changes", "committedDate": "2020-09-09T03:15:51Z", "type": "commit"}, {"oid": "aade12a49fafc4c174cab7134ccb53394f724ac9", "url": "https://github.com/apache/iotdb/commit/aade12a49fafc4c174cab7134ccb53394f724ac9", "message": "resolve conflicts", "committedDate": "2020-10-12T05:50:41Z", "type": "commit"}, {"oid": "4181276c88ad4b6b95fb579cf2216245f38c665a", "url": "https://github.com/apache/iotdb/commit/4181276c88ad4b6b95fb579cf2216245f38c665a", "message": "some changes", "committedDate": "2020-10-12T06:07:44Z", "type": "commit"}, {"oid": "efcfbd32124988ec628f65caf442e7a5e9f0db5b", "url": "https://github.com/apache/iotdb/commit/efcfbd32124988ec628f65caf442e7a5e9f0db5b", "message": "resolve conflicts", "committedDate": "2020-10-12T07:04:31Z", "type": "commit"}, {"oid": "c1443ca3d54e2898a36b37500e2246b0880ccfa3", "url": "https://github.com/apache/iotdb/commit/c1443ca3d54e2898a36b37500e2246b0880ccfa3", "message": "solve function parameter", "committedDate": "2020-10-12T11:38:08Z", "type": "commit"}, {"oid": "e329b25ff2ca02a8c01b58774b75737d5fce9d52", "url": "https://github.com/apache/iotdb/commit/e329b25ff2ca02a8c01b58774b75737d5fce9d52", "message": "resolve conflicts", "committedDate": "2020-10-12T12:58:58Z", "type": "commit"}, {"oid": "084bf0219163dea676d23e3d3867ce844ab64f09", "url": "https://github.com/apache/iotdb/commit/084bf0219163dea676d23e3d3867ce844ab64f09", "message": "remove useless limit in logical plan generating", "committedDate": "2020-10-13T01:41:26Z", "type": "commit"}, {"oid": "99c6fe83f69115f5ee6421ff38b39631e462822e", "url": "https://github.com/apache/iotdb/commit/99c6fe83f69115f5ee6421ff38b39631e462822e", "message": "delete useless constructor in ShowTimeSeriesPlan", "committedDate": "2020-10-13T02:18:57Z", "type": "commit"}, {"oid": "31a0549fe53dedcd287046c3f77d7639ccd97580", "url": "https://github.com/apache/iotdb/commit/31a0549fe53dedcd287046c3f77d7639ccd97580", "message": "add limit in logical select", "committedDate": "2020-10-13T03:18:37Z", "type": "commit"}, {"oid": "13bdd2fb53d9565afc8810801fdc33e683d0e29e", "url": "https://github.com/apache/iotdb/commit/13bdd2fb53d9565afc8810801fdc33e683d0e29e", "message": "solve soffset", "committedDate": "2020-10-13T07:23:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM5MzkyNQ==", "url": "https://github.com/apache/iotdb/pull/1367#discussion_r504393925", "bodyText": "the value has 5 parameters, maybe the annotation and the attribute need to change?", "author": "neuyilan", "createdAt": "2020-10-14T04:27:44Z", "path": "server/src/assembly/resources/conf/iotdb-engine.properties", "diffHunk": "@@ -323,7 +327,7 @@ merge_throughput_mb_per_sec=16\n meta_data_cache_enable=true\n # Read memory Allocation Ratio: ChunkMetadataCache, ChunkCache, TimeSeriesMetadataCache and Free Memory Used in Query.\n # The parameter form is a:b:c:d, where a, b, c and d are integers. for example: 1:1:1:1 , 6:10:5:15\n-chunkmeta_chunk_timeseriesmeta_free_memory_proportion=1:1:1:7\n+chunkmeta_chunk_timeseriesmeta_free_memory_proportion=1:1:1:3:4", "originalCommit": "13bdd2fb53d9565afc8810801fdc33e683d0e29e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE2MDQ5MA==", "url": "https://github.com/apache/iotdb/pull/1367#discussion_r508160490", "bodyText": "I agree with that. The comments need to be modified.", "author": "Alima777", "createdAt": "2020-10-20T01:50:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM5MzkyNQ=="}], "type": "inlineReview"}, {"oid": "fac0b6e1da170030770e24e9850e8103bcde8e30", "url": "https://github.com/apache/iotdb/commit/fac0b6e1da170030770e24e9850e8103bcde8e30", "message": "change back JDBCExample and add more tips in execption", "committedDate": "2020-10-15T07:52:29Z", "type": "commit"}, {"oid": "e954a6c732fa1e0b13f7d9e41d3ef9b2ccfbbc3d", "url": "https://github.com/apache/iotdb/commit/e954a6c732fa1e0b13f7d9e41d3ef9b2ccfbbc3d", "message": "add hot change support", "committedDate": "2020-10-19T09:09:03Z", "type": "commit"}, {"oid": "c03bfc671a2d00f16e915f2fd72e2256a8a40403", "url": "https://github.com/apache/iotdb/commit/c03bfc671a2d00f16e915f2fd72e2256a8a40403", "message": "resolve conflicts", "committedDate": "2020-10-20T01:15:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE2OTMxNQ==", "url": "https://github.com/apache/iotdb/pull/1367#discussion_r508169315", "bodyText": "From my perspective, limit is done in concatselect() while this method is only for trimming the offset of aggregations.\nIf I'm right, please modify the method name and java doc of it.", "author": "Alima777", "createdAt": "2020-10-20T02:23:07Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/optimizer/ConcatPathOptimizer.java", "diffHunk": "@@ -180,34 +192,26 @@ private void concatSelect(List<PartialPath> fromPaths, SelectOperator selectOper\n       }\n     }\n \n-    removeStarsInPath(allPaths, afterConcatAggregations, selectOperator);\n+    removeStarsInPath(allPaths, afterConcatAggregations, selectOperator, limit, offset);\n   }\n \n   /**\n    * Make 'SLIMIT&SOFFSET' take effect by trimming the suffixList and aggregations of the\n    * selectOperator.\n    *\n-   * @param seriesLimit  is ensured to be positive integer\n    * @param seriesOffset is ensured to be non-negative integer\n    */\n-  private void slimitTrim(SelectOperator select, int seriesLimit, int seriesOffset)\n+  private void slimitTrim(SelectOperator select, int seriesOffset)\n       throws LogicalOptimizeException {", "originalCommit": "c03bfc671a2d00f16e915f2fd72e2256a8a40403", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAwNzI1NA==", "url": "https://github.com/apache/iotdb/pull/1367#discussion_r509007254", "bodyText": "fix", "author": "JackieTien97", "createdAt": "2020-10-21T05:56:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE2OTMxNQ=="}], "type": "inlineReview"}, {"oid": "e74f24117dcca0272753b0d15c040d899c5125b0", "url": "https://github.com/apache/iotdb/commit/e74f24117dcca0272753b0d15c040d899c5125b0", "message": "fix conflicts", "committedDate": "2020-10-21T06:02:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxMjA0OQ==", "url": "https://github.com/apache/iotdb/pull/1367#discussion_r509012049", "bodyText": "Why set it to false?", "author": "SteveYurongSu", "createdAt": "2020-10-21T06:09:41Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -131,10 +131,17 @@\n    */\n   private long allocateMemoryForRead = Runtime.getRuntime().maxMemory() * 3 / 10;\n \n+  /**\n+   * Memory allocated for the read process besides cache\n+   */\n+  private long allocateMemoryForReadWithoutCache = Runtime.getRuntime().maxMemory() * 9 / 100;\n+\n+  private volatile int maxQueryDeduplicatedPathNum = 1000;\n+\n   /**\n    * Is dynamic parameter adapter enable.\n    */\n-  private boolean enableParameterAdapter = true;\n+  private boolean enableParameterAdapter = false;", "originalCommit": "e74f24117dcca0272753b0d15c040d899c5125b0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAzMzE2Mg==", "url": "https://github.com/apache/iotdb/pull/1367#discussion_r509033162", "bodyText": "Please update the Javadoc...", "author": "SteveYurongSu", "createdAt": "2020-10-21T06:59:00Z", "path": "server/src/main/java/org/apache/iotdb/db/metadata/MTree.java", "diffHunk": "@@ -777,18 +777,26 @@ boolean checkStorageGroupByPath(PartialPath path) {\n    *\n    * @param prefixPath a prefix path or a full path, may contain '*'.\n    */\n-  List<PartialPath> getAllTimeseriesPathWithAlias(PartialPath prefixPath) throws MetadataException {\n+  Pair<List<PartialPath>, Integer> getAllTimeseriesPathWithAlias(PartialPath prefixPath, int limit, int offset) throws MetadataException {", "originalCommit": "e74f24117dcca0272753b0d15c040d899c5125b0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "00e820a1b873855cd60f4df914e96b15b1ffbd6b", "url": "https://github.com/apache/iotdb/commit/00e820a1b873855cd60f4df914e96b15b1ffbd6b", "message": "add javadoc", "committedDate": "2020-10-21T07:13:28Z", "type": "commit"}, {"oid": "897c6637ce0292955502d586777ce92a8eee9e03", "url": "https://github.com/apache/iotdb/commit/897c6637ce0292955502d586777ce92a8eee9e03", "message": "resolve conflicts", "committedDate": "2020-10-23T07:12:51Z", "type": "commit"}]}