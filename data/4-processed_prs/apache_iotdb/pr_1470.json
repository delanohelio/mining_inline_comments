{"pr_number": 1470, "pr_title": "[IOTDB-774]Fix \"show timeseries\" OOM problem", "pr_createdAt": "2020-07-07T06:29:23Z", "pr_url": "https://github.com/apache/iotdb/pull/1470", "timeline": [{"oid": "ae1d4105555d0a8dfe6b58ff3b515e9f1cac099c", "url": "https://github.com/apache/iotdb/commit/ae1d4105555d0a8dfe6b58ff3b515e9f1cac099c", "message": "show timeseries", "committedDate": "2020-06-30T13:51:55Z", "type": "commit"}, {"oid": "7e036c97dc7e8630eb85d24431ab741907718f03", "url": "https://github.com/apache/iotdb/commit/7e036c97dc7e8630eb85d24431ab741907718f03", "message": "Update ShowTimeseriesDataSet.java", "committedDate": "2020-06-30T14:12:15Z", "type": "commit"}, {"oid": "c6fb8891a9bb9518c5941193939887c7e2047d0b", "url": "https://github.com/apache/iotdb/commit/c6fb8891a9bb9518c5941193939887c7e2047d0b", "message": "Update QueryUtils.java", "committedDate": "2020-07-01T01:18:50Z", "type": "commit"}, {"oid": "fe17c3ed1631f319a8eefa5de0b1f4b5aa152ab7", "url": "https://github.com/apache/iotdb/commit/fe17c3ed1631f319a8eefa5de0b1f4b5aa152ab7", "message": "Update IoTDBSimpleQueryIT.java", "committedDate": "2020-07-01T02:37:57Z", "type": "commit"}, {"oid": "f158fe1c96575ba7737b0d1e69c2c075735b8b58", "url": "https://github.com/apache/iotdb/commit/f158fe1c96575ba7737b0d1e69c2c075735b8b58", "message": "show", "committedDate": "2020-07-02T09:23:42Z", "type": "commit"}, {"oid": "d8b7d78c0e4854b8fe367e81a416b1a1a1181acd", "url": "https://github.com/apache/iotdb/commit/d8b7d78c0e4854b8fe367e81a416b1a1a1181acd", "message": "Merge pull request #1455 from SailVR/master\n\n[IOTDB-774]Fix \"show timeseries\" OOM problem", "committedDate": "2020-07-03T01:32:24Z", "type": "commit"}, {"oid": "cc272f925f0d02e81bda92fa8ec7026ced4b5c37", "url": "https://github.com/apache/iotdb/commit/cc272f925f0d02e81bda92fa8ec7026ced4b5c37", "message": "lack docs", "committedDate": "2020-07-06T01:33:30Z", "type": "commit"}, {"oid": "f9c64ec9039ec09ebc2837d348b079670f3df4fc", "url": "https://github.com/apache/iotdb/commit/f9c64ec9039ec09ebc2837d348b079670f3df4fc", "message": "add some docs", "committedDate": "2020-07-07T01:46:04Z", "type": "commit"}, {"oid": "75b3523ba2c2b4b3cbc748d4fdb835f3a88dd6a3", "url": "https://github.com/apache/iotdb/commit/75b3523ba2c2b4b3cbc748d4fdb835f3a88dd6a3", "message": "add english docs", "committedDate": "2020-07-07T06:28:10Z", "type": "commit"}, {"oid": "85332f3798866b4fd24a551312218f586729f82c", "url": "https://github.com/apache/iotdb/commit/85332f3798866b4fd24a551312218f586729f82c", "message": "put two method together", "committedDate": "2020-07-07T07:02:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY1MTg5Mw==", "url": "https://github.com/apache/iotdb/pull/1470#discussion_r450651893", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            It's a recursive function to get all the statisfied MNode in MTree from root until the number of timeseris list has reached limit or all the MTree has been traversed.\n          \n          \n            \n            It's a recursive function to get all the statisfied MNode in MTree from root until the number of timeseries list has reached limit or all the MTree has been traversed.", "author": "HTHou", "createdAt": "2020-07-07T07:04:18Z", "path": "docs/SystemDesign/SchemaManager/SchemaManager.md", "diffHunk": "@@ -282,3 +282,48 @@ All timeseries tag/attribute information will be saved in the tag file, which de\n \n > tagsSize (tag1=v1, tag2=v2) attributesSize (attr1=v1, attr2=v2)\n \n+## Metadata Query\n+\n+### show timeseries without index\n+\n+The main logic of query is in the `showTimeseries(ShowTimeSeriesPlan plan)` function of `MManager`\n+\n+First of all, we should judge whether we need to order by heat, if so, call the `getAllMeasurementSchemaByHeatOrder` function of `MTree`. Otherwise, call the `getAllMeasurementSchema` function.\n+\n+#### getAllMeasurementSchemaByHeatOrder\n+\n+The heat here is represented by the `lastTimeStamp` of each time series, so we need to fetch all the satisfied time series, and then order them by `lastTimeStamp`, cut them by `offset` and `limit`.\n+\n+#### getAllMeasurementSchema\n+\n+In this case, we need to pass the limit(if not exists, set fetch size as limit) and offset to the function `findPath` to reduce the memory footprint.\n+\n+#### findPath\n+\n+It's a recursive function to get all the statisfied MNode in MTree from root until the number of timeseris list has reached limit or all the MTree has been traversed.", "originalCommit": "85332f3798866b4fd24a551312218f586729f82c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY1MjgwMw==", "url": "https://github.com/apache/iotdb/pull/1470#discussion_r450652803", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    * if`hasLimit` is `false`\uff0cthe reset `index` to zero.\n          \n          \n            \n                    * if `hasLimit` is `false`, then reset `index` to zero.", "author": "HTHou", "createdAt": "2020-07-07T07:06:29Z", "path": "docs/SystemDesign/SchemaManager/SchemaManager.md", "diffHunk": "@@ -282,3 +282,48 @@ All timeseries tag/attribute information will be saved in the tag file, which de\n \n > tagsSize (tag1=v1, tag2=v2) attributesSize (attr1=v1, attr2=v2)\n \n+## Metadata Query\n+\n+### show timeseries without index\n+\n+The main logic of query is in the `showTimeseries(ShowTimeSeriesPlan plan)` function of `MManager`\n+\n+First of all, we should judge whether we need to order by heat, if so, call the `getAllMeasurementSchemaByHeatOrder` function of `MTree`. Otherwise, call the `getAllMeasurementSchema` function.\n+\n+#### getAllMeasurementSchemaByHeatOrder\n+\n+The heat here is represented by the `lastTimeStamp` of each time series, so we need to fetch all the satisfied time series, and then order them by `lastTimeStamp`, cut them by `offset` and `limit`.\n+\n+#### getAllMeasurementSchema\n+\n+In this case, we need to pass the limit(if not exists, set fetch size as limit) and offset to the function `findPath` to reduce the memory footprint.\n+\n+#### findPath\n+\n+It's a recursive function to get all the statisfied MNode in MTree from root until the number of timeseris list has reached limit or all the MTree has been traversed.\n+\n+### show timeseries with index\n+\n+The filter condition here can only be tag attribute, or it will throw an exception.\n+\n+We can fetch all the satisfied `MeasurementMNode` through the inverted tag index in MTree fast without traversing the whole tree.\n+\n+If the result needs to be ordered by heat, we should sort them by the order of `lastTimeStamp` or by the natural order, and then we will trim the result by limit and offset.\n+\n+### ShowTimeseries Dataset\n+\n+If there is too much metadata , one whole `show timeseris` processing will cause OOM, so we need to add a `fetch size` parameter.\n+\n+While the client interacting with the server, it will get at most `fetch_size` records once.\n+\n+And the intermediate state will be saved in the `ShowTimeseriesDataSet`. The `queryId -> ShowTimeseriesDataSet` key-value pair will be saved in `TsServieImpl`.\n+\n+In `ShowTimeseriesDataSet`, we saved the `ShowTimeSeriesPlan`, current cursor `index` and cached result list `List<RowRecord> result`.\n+\n+* judge whether the cursor `index`is equal to the size of `List<RowRecord> result`\n+    * if so, call the method `showTimeseries` in MManager to fetch result and put them into cache.\n+        * we need to update the offset in plan each time we call the method in MManger to fetch result, we should add it with `fetch size`.\n+        * if`hasLimit` is `false`\uff0cthe reset `index` to zero.", "originalCommit": "85332f3798866b4fd24a551312218f586729f82c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0b88ad80581c432cdd29abd782c0fced995f44ea", "url": "https://github.com/apache/iotdb/commit/0b88ad80581c432cdd29abd782c0fced995f44ea", "message": "Update docs/SystemDesign/SchemaManager/SchemaManager.md\n\nCo-authored-by: Haonan <hhaonan@outlook.com>", "committedDate": "2020-07-07T13:15:58Z", "type": "commit"}, {"oid": "a30b72d5f17565165eaa47751474a352d1af68ee", "url": "https://github.com/apache/iotdb/commit/a30b72d5f17565165eaa47751474a352d1af68ee", "message": "Update docs/SystemDesign/SchemaManager/SchemaManager.md\n\nCo-authored-by: Haonan <hhaonan@outlook.com>", "committedDate": "2020-07-07T13:16:04Z", "type": "commit"}, {"oid": "a9f2e1c1bff50c23a5451fb321c37c91d83e4f87", "url": "https://github.com/apache/iotdb/commit/a9f2e1c1bff50c23a5451fb321c37c91d83e4f87", "message": "fix snapshot bug", "committedDate": "2020-07-08T02:38:43Z", "type": "commit"}, {"oid": "fa5e6c506836834fc9c76540c8a6419e285d8b3e", "url": "https://github.com/apache/iotdb/commit/fa5e6c506836834fc9c76540c8a6419e285d8b3e", "message": "Merge branch 'TyShowTimeSeries' of https://github.com/apache/incubator-iotdb into TyShowTimeSeries", "committedDate": "2020-07-08T02:38:59Z", "type": "commit"}, {"oid": "fb9581443d15f636188b71445bded1e43f96ccdc", "url": "https://github.com/apache/iotdb/commit/fb9581443d15f636188b71445bded1e43f96ccdc", "message": "resolve conflicts", "committedDate": "2020-07-08T13:07:45Z", "type": "commit"}, {"oid": "4a2da5ea912597284b2412931f3cc49725b9e0d5", "url": "https://github.com/apache/iotdb/commit/4a2da5ea912597284b2412931f3cc49725b9e0d5", "message": "delete useless", "committedDate": "2020-07-08T14:27:07Z", "type": "commit"}, {"oid": "d6ee9312219fca06bf1874cabbe4c3cd44af13ff", "url": "https://github.com/apache/iotdb/commit/d6ee9312219fca06bf1874cabbe4c3cd44af13ff", "message": "change dataset", "committedDate": "2020-07-09T02:09:27Z", "type": "commit"}]}