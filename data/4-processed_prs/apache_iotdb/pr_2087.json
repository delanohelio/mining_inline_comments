{"pr_number": 2087, "pr_title": "[IOTDB-890] SDT implementation", "pr_createdAt": "2020-11-20T03:44:48Z", "pr_url": "https://github.com/apache/iotdb/pull/2087", "timeline": [{"oid": "34e63f6c105144281bb2c94546795c06d4f0fcf1", "url": "https://github.com/apache/iotdb/commit/34e63f6c105144281bb2c94546795c06d4f0fcf1", "message": "sdt implementation", "committedDate": "2020-11-20T03:52:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUxMDgwNQ==", "url": "https://github.com/apache/iotdb/pull/2087#discussion_r527510805", "bodyText": "Maybe you need to add some parameter name of sdt?\nAnd Please add some example in the docs.", "author": "mychaow", "createdAt": "2020-11-20T08:09:26Z", "path": "antlr/src/main/antlr4/org/apache/iotdb/db/qp/strategy/SqlBase.g4", "diffHunk": "@@ -641,6 +640,7 @@ dateFormat\n constant\n     : dateExpression\n     | NaN\n+    | SDT", "originalCommit": "62253ce3538e3a3b441639b3e2bea0cebd8a1ef0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU5Mjg4MQ==", "url": "https://github.com/apache/iotdb/pull/2087#discussion_r528592881", "bodyText": "if SDT is a constant or propertyValue, I don't think it needs a keyword.", "author": "Genius-pig", "createdAt": "2020-11-23T10:12:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUxMDgwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUxMzY1Nw==", "url": "https://github.com/apache/iotdb/pull/2087#discussion_r527513657", "bodyText": "cd is too simple", "author": "mychaow", "createdAt": "2020-11-20T08:14:57Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/write/chunk/ChunkWriterImpl.java", "diffHunk": "@@ -97,18 +109,93 @@ public ChunkWriterImpl(MeasurementSchema schema) {\n     this.pageWriter = new PageWriter(measurementSchema);\n     this.pageWriter.setTimeEncoder(measurementSchema.getTimeEncoder());\n     this.pageWriter.setValueEncoder(measurementSchema.getValueEncoder());\n+\n+    //check if the measurement schema uses SDT\n+    checkSdtEncoding();\n+  }\n+\n+  public ChunkWriterImpl(MeasurementSchema schema, boolean isMerging) {\n+    this(schema);\n+    this.isMerging = isMerging;\n+  }\n+\n+  private void checkSdtEncoding() {\n+    if (measurementSchema.getProps() != null && !isMerging) {\n+      for (Map.Entry<String, String> entry : measurementSchema.getProps().entrySet()) {\n+        //check if is sdt encoding\n+        if (entry.getKey().toLowerCase().equals(\"loss\") && entry.getValue().toLowerCase()\n+            .equals(\"sdt\")) {\n+          isSdtEncoding = true;\n+          sdtEncoder = new SdtEncoder();\n+        }\n+\n+        //set compression deviation\n+        else if (isSdtEncoding &&\n+            entry.getKey().toLowerCase().equals(\"cd\")) {", "originalCommit": "62253ce3538e3a3b441639b3e2bea0cebd8a1ef0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzMTQ5OA==", "url": "https://github.com/apache/iotdb/pull/2087#discussion_r527531498", "bodyText": "so, how about double[] ?", "author": "mychaow", "createdAt": "2020-11-20T08:48:18Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/write/chunk/ChunkWriterImpl.java", "diffHunk": "@@ -155,6 +266,12 @@ public void write(long[] timestamps, boolean[] values, int batchSize) {\n \n   @Override\n   public void write(long[] timestamps, float[] values, int batchSize) {", "originalCommit": "62253ce3538e3a3b441639b3e2bea0cebd8a1ef0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a3bc81e10d13191eec4b2242256aa79af2d58614", "url": "https://github.com/apache/iotdb/commit/a3bc81e10d13191eec4b2242256aa79af2d58614", "message": "add test cases", "committedDate": "2020-11-20T09:11:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI4MTI1Ng==", "url": "https://github.com/apache/iotdb/pull/2087#discussion_r528281256", "bodyText": "No need to iterate the map, and also there is no guarantee that \"loss\" property will be got before other sdt parameters.\nYou can directly use map.contains and map.get() to get whatever property you want.", "author": "JackieTien97", "createdAt": "2020-11-22T04:38:56Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/write/chunk/ChunkWriterImpl.java", "diffHunk": "@@ -97,18 +109,93 @@ public ChunkWriterImpl(MeasurementSchema schema) {\n     this.pageWriter = new PageWriter(measurementSchema);\n     this.pageWriter.setTimeEncoder(measurementSchema.getTimeEncoder());\n     this.pageWriter.setValueEncoder(measurementSchema.getValueEncoder());\n+\n+    //check if the measurement schema uses SDT\n+    checkSdtEncoding();\n+  }\n+\n+  public ChunkWriterImpl(MeasurementSchema schema, boolean isMerging) {\n+    this(schema);\n+    this.isMerging = isMerging;\n+  }\n+\n+  private void checkSdtEncoding() {\n+    if (measurementSchema.getProps() != null && !isMerging) {\n+      for (Map.Entry<String, String> entry : measurementSchema.getProps().entrySet()) {", "originalCommit": "a3bc81e10d13191eec4b2242256aa79af2d58614", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1MjYyNw==", "url": "https://github.com/apache/iotdb/pull/2087#discussion_r528452627", "bodyText": "will do. thank you.\nFor \"The paper calculate the FV of the next segment but you just use the endPoint of the last segment.\", what do you mean by that? When ending segment0 and starting segment1, I use segment0's endpoint as segment1's startpoint. How do you calculate segment1's first value..?", "author": "haimeiguo", "createdAt": "2020-11-23T03:07:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI4MTI1Ng=="}], "type": "inlineReview"}, {"oid": "2bff0f90bb2ebba753dbc318080d8bd078b2af32", "url": "https://github.com/apache/iotdb/commit/2bff0f90bb2ebba753dbc318080d8bd078b2af32", "message": "add test cases", "committedDate": "2020-11-23T07:51:19Z", "type": "forcePushed"}, {"oid": "cb9dcb16e44e539cdde0de0045487dde57fd96e2", "url": "https://github.com/apache/iotdb/commit/cb9dcb16e44e539cdde0de0045487dde57fd96e2", "message": "add test cases", "committedDate": "2020-11-23T08:03:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU1MDYzNQ==", "url": "https://github.com/apache/iotdb/pull/2087#discussion_r528550635", "bodyText": "need a blank line", "author": "mychaow", "createdAt": "2020-11-23T09:01:16Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/encoding/encoder/SdtEncoder.java", "diffHunk": "@@ -0,0 +1,473 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.tsfile.encoding.encoder;\n+\n+import java.nio.FloatBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.utils.Pair;\n+\n+public class SdtEncoder {\n+\n+  /**\n+   * the last read pair <time, value></>\n+   * if upperDoor >= lowerDoor meaning out of compDeviation range, will store lastReadPair\n+   */\n+  private Pair<Long, Double> lastReadDouble;\n+  private Pair<Long, Long> lastReadLong;\n+  private Pair<Long, Float> lastReadFloat;\n+  private Pair<Long, Integer> lastReadInt;\n+\n+  /**\n+   * the last stored pair <time, value></>\n+   * we compare current point against lastStoredPair\n+   */\n+  private Pair<Long, Double> lastStoredDouble;\n+  private Pair<Long, Long> lastStoredLong;\n+  private Pair<Long, Float> lastStoredFloat;\n+  private Pair<Long, Integer> lastStoredInt;\n+  /**\n+   * the maximum curUpperSlope between the lastStoredPoint to the current point\n+   * upperDoor can only open up\n+   */\n+  private double upperDoor;\n+\n+  /**\n+   * the minimum curLowerSlope between the lastStoredPoint to the current point\n+   * lowerDoor can only open downard\n+   */\n+  private double lowerDoor;\n+\n+  private List<Long> timestamps;\n+  private List<Double> doubleValues;\n+  private List<Long> longValues;\n+  private List<Integer> intValues;\n+  private List<Float> floatValues;\n+\n+\n+\n+  /**\n+   * the maximum absolute difference the user set\n+   * if the data's value is within compDeviation, it will be compressed and discarded\n+   * after compression, it will only store out of range <time, data></> to form the trend\n+   */\n+  private double compDeviation;\n+\n+  /**\n+   * the minimum time distance between two stored data points\n+   * if current point time to the last stored point time distance <= compMin,\n+   * current point will NOT be stored regardless of compression deviation\n+   */\n+  private double compMin;\n+\n+  /**\n+   * the maximum time distance between two stored data points\n+   * if current point time to the last stored point time distance >= compMax,\n+   * current point will be stored regardless of compression deviation\n+   */\n+  private double compMax;\n+\n+  TSDataType dataType;\n+\n+  public SdtEncoder(TSDataType dataType) {\n+    timestamps = new ArrayList<Long>();\n+    upperDoor = Integer.MIN_VALUE;\n+    lowerDoor = Integer.MAX_VALUE;\n+    compDeviation = -1;\n+    compMin = Integer.MIN_VALUE;\n+    compMax = Integer.MAX_VALUE;\n+    this.dataType = dataType;\n+\n+    switch (dataType) {\n+      case INT32:\n+        lastReadInt = new Pair<>(null, null);\n+        lastStoredInt = new Pair<>(null, null);\n+        intValues = new ArrayList<>();\n+        break;\n+      case INT64:\n+        lastReadLong = new Pair<>(null, null);\n+        lastStoredLong = new Pair<>(null, null);\n+        longValues = new ArrayList<>();\n+        break;\n+      case DOUBLE:\n+        lastReadDouble = new Pair<>(null, null);\n+        lastStoredDouble = new Pair<>(null, null);\n+        doubleValues = new ArrayList<>();\n+        break;\n+      case FLOAT:\n+        lastReadFloat = new Pair<>(null, null);\n+        lastStoredFloat = new Pair<>(null, null);\n+        floatValues = new ArrayList<>();\n+        break;\n+    }\n+  }\n+\n+  public boolean encodeFloat(long time, float value) {\n+    // store the first time and value pair\n+    if (firstPair(time, value)) {\n+      return true;\n+    }\n+\n+    // if current point to the last stored point's time distance is within compMin,\n+    // will not check two doors nor store any point within the compMin time range\n+    if (time - lastStoredFloat.left <= compMin) {\n+      return false;\n+    }\n+\n+    // if current point to the last stored point's time distance is larger than compMax,\n+    // will reset two doors, and store current point;\n+    if (time - lastStoredFloat.left >= compMax) {\n+      reset(time, value);\n+      return true;\n+    }\n+\n+    double curUpperSlope = (value - lastStoredFloat.right - compDeviation) / (time - lastStoredFloat.left);\n+    if (curUpperSlope > upperDoor) {\n+      upperDoor = curUpperSlope;\n+    }\n+\n+    double curLowerSlope = (value - lastStoredFloat.right + compDeviation) / (time - lastStoredFloat.left);\n+    if (curLowerSlope < lowerDoor) {\n+      lowerDoor = curLowerSlope;\n+    }\n+\n+    // current point to the lastStoredPair's value exceeds compDev, will store lastReadPair and update two doors\n+    if (upperDoor >= lowerDoor) {\n+      lastStoredFloat = lastReadFloat;\n+      upperDoor = (value - lastStoredFloat.right - compDeviation) / (time - lastStoredFloat.left);\n+      lowerDoor = (value - lastStoredFloat.right + compDeviation) / (time - lastStoredFloat.left);\n+      lastReadFloat = new Pair<>(time, value);\n+      return true;\n+    }\n+\n+    lastReadFloat = new Pair<>(time, value);\n+    return false;\n+  }\n+\n+  public boolean encodeLong(long time, long value) {\n+    // store the first time and value pair\n+    if (firstPair(time, value)) {\n+      return true;\n+    }\n+\n+    // if current point to the last stored point's time distance is within compMin,\n+    // will not check two doors nor store any point within the compMin time range\n+    if (time - lastStoredLong.left <= compMin) {\n+      return false;\n+    }\n+\n+    // if current point to the last stored point's time distance is larger than compMax,\n+    // will reset two doors, and store current point;\n+    if (time - lastStoredLong.left >= compMax) {\n+      reset(time, value);\n+      return true;\n+    }\n+\n+    double curUpperSlope = (value - lastStoredLong.right - compDeviation) / (time - lastStoredLong.left);\n+    if (curUpperSlope > upperDoor) {\n+      upperDoor = curUpperSlope;\n+    }\n+\n+    double curLowerSlope = (value - lastStoredLong.right + compDeviation) / (time - lastStoredLong.left);\n+    if (curLowerSlope < lowerDoor) {\n+      lowerDoor = curLowerSlope;\n+    }\n+\n+    // current point to the lastStoredPair's value exceeds compDev, will store lastReadPair and update two doors\n+    if (upperDoor >= lowerDoor) {\n+      lastStoredLong = lastReadLong;\n+      upperDoor = (value - lastStoredLong.right - compDeviation) / (time - lastStoredLong.left);\n+      lowerDoor = (value - lastStoredLong.right + compDeviation) / (time - lastStoredLong.left);\n+      lastReadLong = new Pair<>(time, value);\n+      return true;\n+    }\n+\n+    lastReadLong = new Pair<>(time, value);\n+    return false;\n+  }\n+\n+  public boolean encodeInt(long time, int value) {\n+    // store the first time and value pair\n+    if (firstPair(time, value)) {\n+      return true;\n+    }\n+\n+    // if current point to the last stored point's time distance is within compMin,\n+    // will not check two doors nor store any point within the compMin time range\n+    if (time - lastStoredInt.left <= compMin) {\n+      return false;\n+    }\n+\n+    // if current point to the last stored point's time distance is larger than compMax,\n+    // will reset two doors, and store current point;\n+    if (time - lastStoredInt.left >= compMax) {\n+      reset(time, value);\n+      return true;\n+    }\n+\n+    double curUpperSlope = (value - lastStoredInt.right - compDeviation) / (time - lastStoredInt.left);\n+    if (curUpperSlope > upperDoor) {\n+      upperDoor = curUpperSlope;\n+    }\n+\n+    double curLowerSlope = (value - lastStoredInt.right + compDeviation) / (time - lastStoredInt.left);\n+    if (curLowerSlope < lowerDoor) {\n+      lowerDoor = curLowerSlope;\n+    }\n+\n+    // current point to the lastStoredPair's value exceeds compDev, will store lastReadPair and update two doors\n+    if (upperDoor >= lowerDoor) {\n+      lastStoredInt = lastReadInt;\n+      upperDoor = (value - lastStoredInt.right - compDeviation) / (time - lastStoredInt.left);\n+      lowerDoor = (value - lastStoredInt.right + compDeviation) / (time - lastStoredInt.left);\n+      lastReadInt = new Pair<>(time, value);\n+      return true;\n+    }\n+\n+    lastReadInt = new Pair<>(time, value);\n+    return false;\n+  }", "originalCommit": "cb9dcb16e44e539cdde0de0045487dde57fd96e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU1MTAyMA==", "url": "https://github.com/apache/iotdb/pull/2087#discussion_r528551020", "bodyText": "maybe have divide zero exception", "author": "mychaow", "createdAt": "2020-11-23T09:02:05Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/encoding/encoder/SdtEncoder.java", "diffHunk": "@@ -0,0 +1,473 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.tsfile.encoding.encoder;\n+\n+import java.nio.FloatBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.utils.Pair;\n+\n+public class SdtEncoder {\n+\n+  /**\n+   * the last read pair <time, value></>\n+   * if upperDoor >= lowerDoor meaning out of compDeviation range, will store lastReadPair\n+   */\n+  private Pair<Long, Double> lastReadDouble;\n+  private Pair<Long, Long> lastReadLong;\n+  private Pair<Long, Float> lastReadFloat;\n+  private Pair<Long, Integer> lastReadInt;\n+\n+  /**\n+   * the last stored pair <time, value></>\n+   * we compare current point against lastStoredPair\n+   */\n+  private Pair<Long, Double> lastStoredDouble;\n+  private Pair<Long, Long> lastStoredLong;\n+  private Pair<Long, Float> lastStoredFloat;\n+  private Pair<Long, Integer> lastStoredInt;\n+  /**\n+   * the maximum curUpperSlope between the lastStoredPoint to the current point\n+   * upperDoor can only open up\n+   */\n+  private double upperDoor;\n+\n+  /**\n+   * the minimum curLowerSlope between the lastStoredPoint to the current point\n+   * lowerDoor can only open downard\n+   */\n+  private double lowerDoor;\n+\n+  private List<Long> timestamps;\n+  private List<Double> doubleValues;\n+  private List<Long> longValues;\n+  private List<Integer> intValues;\n+  private List<Float> floatValues;\n+\n+\n+\n+  /**\n+   * the maximum absolute difference the user set\n+   * if the data's value is within compDeviation, it will be compressed and discarded\n+   * after compression, it will only store out of range <time, data></> to form the trend\n+   */\n+  private double compDeviation;\n+\n+  /**\n+   * the minimum time distance between two stored data points\n+   * if current point time to the last stored point time distance <= compMin,\n+   * current point will NOT be stored regardless of compression deviation\n+   */\n+  private double compMin;\n+\n+  /**\n+   * the maximum time distance between two stored data points\n+   * if current point time to the last stored point time distance >= compMax,\n+   * current point will be stored regardless of compression deviation\n+   */\n+  private double compMax;\n+\n+  TSDataType dataType;\n+\n+  public SdtEncoder(TSDataType dataType) {\n+    timestamps = new ArrayList<Long>();\n+    upperDoor = Integer.MIN_VALUE;\n+    lowerDoor = Integer.MAX_VALUE;\n+    compDeviation = -1;\n+    compMin = Integer.MIN_VALUE;\n+    compMax = Integer.MAX_VALUE;\n+    this.dataType = dataType;\n+\n+    switch (dataType) {\n+      case INT32:\n+        lastReadInt = new Pair<>(null, null);\n+        lastStoredInt = new Pair<>(null, null);\n+        intValues = new ArrayList<>();\n+        break;\n+      case INT64:\n+        lastReadLong = new Pair<>(null, null);\n+        lastStoredLong = new Pair<>(null, null);\n+        longValues = new ArrayList<>();\n+        break;\n+      case DOUBLE:\n+        lastReadDouble = new Pair<>(null, null);\n+        lastStoredDouble = new Pair<>(null, null);\n+        doubleValues = new ArrayList<>();\n+        break;\n+      case FLOAT:\n+        lastReadFloat = new Pair<>(null, null);\n+        lastStoredFloat = new Pair<>(null, null);\n+        floatValues = new ArrayList<>();\n+        break;\n+    }\n+  }\n+\n+  public boolean encodeFloat(long time, float value) {\n+    // store the first time and value pair\n+    if (firstPair(time, value)) {\n+      return true;\n+    }\n+\n+    // if current point to the last stored point's time distance is within compMin,\n+    // will not check two doors nor store any point within the compMin time range\n+    if (time - lastStoredFloat.left <= compMin) {\n+      return false;\n+    }\n+\n+    // if current point to the last stored point's time distance is larger than compMax,\n+    // will reset two doors, and store current point;\n+    if (time - lastStoredFloat.left >= compMax) {\n+      reset(time, value);\n+      return true;\n+    }\n+\n+    double curUpperSlope = (value - lastStoredFloat.right - compDeviation) / (time - lastStoredFloat.left);\n+    if (curUpperSlope > upperDoor) {\n+      upperDoor = curUpperSlope;\n+    }\n+\n+    double curLowerSlope = (value - lastStoredFloat.right + compDeviation) / (time - lastStoredFloat.left);\n+    if (curLowerSlope < lowerDoor) {\n+      lowerDoor = curLowerSlope;\n+    }\n+\n+    // current point to the lastStoredPair's value exceeds compDev, will store lastReadPair and update two doors\n+    if (upperDoor >= lowerDoor) {\n+      lastStoredFloat = lastReadFloat;\n+      upperDoor = (value - lastStoredFloat.right - compDeviation) / (time - lastStoredFloat.left);\n+      lowerDoor = (value - lastStoredFloat.right + compDeviation) / (time - lastStoredFloat.left);\n+      lastReadFloat = new Pair<>(time, value);\n+      return true;\n+    }\n+\n+    lastReadFloat = new Pair<>(time, value);\n+    return false;\n+  }\n+\n+  public boolean encodeLong(long time, long value) {\n+    // store the first time and value pair\n+    if (firstPair(time, value)) {\n+      return true;\n+    }\n+\n+    // if current point to the last stored point's time distance is within compMin,\n+    // will not check two doors nor store any point within the compMin time range\n+    if (time - lastStoredLong.left <= compMin) {\n+      return false;\n+    }\n+\n+    // if current point to the last stored point's time distance is larger than compMax,\n+    // will reset two doors, and store current point;\n+    if (time - lastStoredLong.left >= compMax) {\n+      reset(time, value);\n+      return true;\n+    }\n+\n+    double curUpperSlope = (value - lastStoredLong.right - compDeviation) / (time - lastStoredLong.left);\n+    if (curUpperSlope > upperDoor) {\n+      upperDoor = curUpperSlope;\n+    }\n+\n+    double curLowerSlope = (value - lastStoredLong.right + compDeviation) / (time - lastStoredLong.left);\n+    if (curLowerSlope < lowerDoor) {\n+      lowerDoor = curLowerSlope;\n+    }\n+\n+    // current point to the lastStoredPair's value exceeds compDev, will store lastReadPair and update two doors\n+    if (upperDoor >= lowerDoor) {\n+      lastStoredLong = lastReadLong;\n+      upperDoor = (value - lastStoredLong.right - compDeviation) / (time - lastStoredLong.left);\n+      lowerDoor = (value - lastStoredLong.right + compDeviation) / (time - lastStoredLong.left);\n+      lastReadLong = new Pair<>(time, value);\n+      return true;\n+    }\n+\n+    lastReadLong = new Pair<>(time, value);\n+    return false;\n+  }\n+\n+  public boolean encodeInt(long time, int value) {\n+    // store the first time and value pair\n+    if (firstPair(time, value)) {\n+      return true;\n+    }\n+\n+    // if current point to the last stored point's time distance is within compMin,\n+    // will not check two doors nor store any point within the compMin time range\n+    if (time - lastStoredInt.left <= compMin) {\n+      return false;\n+    }\n+\n+    // if current point to the last stored point's time distance is larger than compMax,\n+    // will reset two doors, and store current point;\n+    if (time - lastStoredInt.left >= compMax) {\n+      reset(time, value);\n+      return true;\n+    }\n+\n+    double curUpperSlope = (value - lastStoredInt.right - compDeviation) / (time - lastStoredInt.left);\n+    if (curUpperSlope > upperDoor) {\n+      upperDoor = curUpperSlope;\n+    }\n+\n+    double curLowerSlope = (value - lastStoredInt.right + compDeviation) / (time - lastStoredInt.left);\n+    if (curLowerSlope < lowerDoor) {\n+      lowerDoor = curLowerSlope;\n+    }\n+\n+    // current point to the lastStoredPair's value exceeds compDev, will store lastReadPair and update two doors\n+    if (upperDoor >= lowerDoor) {\n+      lastStoredInt = lastReadInt;\n+      upperDoor = (value - lastStoredInt.right - compDeviation) / (time - lastStoredInt.left);\n+      lowerDoor = (value - lastStoredInt.right + compDeviation) / (time - lastStoredInt.left);\n+      lastReadInt = new Pair<>(time, value);\n+      return true;\n+    }\n+\n+    lastReadInt = new Pair<>(time, value);\n+    return false;\n+  }\n+  public boolean encodeDouble(long time, double value) {\n+    // store the first time and value pair\n+    if (firstPair(time, value)) {\n+      return true;\n+    }\n+\n+    // if current point to the last stored point's time distance is within compMin,\n+    // will not check two doors nor store any point within the compMin time range\n+    if (time - lastStoredDouble.left <= compMin) {\n+      return false;\n+    }\n+\n+    // if current point to the last stored point's time distance is larger than compMax,\n+    // will reset two doors, and store current point;\n+    if (time - lastStoredDouble.left >= compMax) {\n+      reset(time, value);\n+      return true;\n+    }\n+\n+    double curUpperSlope = (value - lastStoredDouble.right - compDeviation) / (time - lastStoredDouble.left);", "originalCommit": "cb9dcb16e44e539cdde0de0045487dde57fd96e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU1MTY0OQ==", "url": "https://github.com/apache/iotdb/pull/2087#discussion_r528551649", "bodyText": "use primitive data type, this is also has box cost.", "author": "mychaow", "createdAt": "2020-11-23T09:03:28Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/encoding/encoder/SdtEncoder.java", "diffHunk": "@@ -0,0 +1,473 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.tsfile.encoding.encoder;\n+\n+import java.nio.FloatBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.utils.Pair;\n+\n+public class SdtEncoder {\n+\n+  /**\n+   * the last read pair <time, value></>\n+   * if upperDoor >= lowerDoor meaning out of compDeviation range, will store lastReadPair\n+   */\n+  private Pair<Long, Double> lastReadDouble;", "originalCommit": "cb9dcb16e44e539cdde0de0045487dde57fd96e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8cbcca57f2daf6e934692651944c4cab8281574f", "url": "https://github.com/apache/iotdb/commit/8cbcca57f2daf6e934692651944c4cab8281574f", "message": "add test cases", "committedDate": "2020-11-23T09:50:29Z", "type": "forcePushed"}, {"oid": "7729e91862fcb087ea60a3f83c30d2051b5c7e8f", "url": "https://github.com/apache/iotdb/commit/7729e91862fcb087ea60a3f83c30d2051b5c7e8f", "message": "add test cases", "committedDate": "2020-11-23T09:52:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU4ODM1OA==", "url": "https://github.com/apache/iotdb/pull/2087#discussion_r528588358", "bodyText": "Why write like this. didn't SDT need case insensitive? if SDT is a constant or propertyValue, I don't think it needs a keyword.", "author": "Genius-pig", "createdAt": "2020-11-23T10:04:41Z", "path": "antlr/src/main/antlr4/org/apache/iotdb/db/qp/strategy/SqlBase.g4", "diffHunk": "@@ -1272,6 +1268,8 @@ UNDERLINE : '_';\n \n NaN : 'NaN';\n \n+SDT : 'SDT';", "originalCommit": "7729e91862fcb087ea60a3f83c30d2051b5c7e8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyNzUwNg==", "url": "https://github.com/apache/iotdb/pull/2087#discussion_r528627506", "bodyText": "removed. thank you!", "author": "haimeiguo", "createdAt": "2020-11-23T11:12:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU4ODM1OA=="}], "type": "inlineReview"}, {"oid": "1aff8b4ebb3309b86490936a37c903769ee31f98", "url": "https://github.com/apache/iotdb/commit/1aff8b4ebb3309b86490936a37c903769ee31f98", "message": "add test cases", "committedDate": "2020-11-23T11:03:20Z", "type": "forcePushed"}, {"oid": "0bf7c272b7727c9b3cdeb3866fbaa70a5e9c3c1b", "url": "https://github.com/apache/iotdb/commit/0bf7c272b7727c9b3cdeb3866fbaa70a5e9c3c1b", "message": "add test cases", "committedDate": "2020-11-23T11:11:33Z", "type": "forcePushed"}, {"oid": "030c5852859734884a379725858dd3af7401e2a6", "url": "https://github.com/apache/iotdb/commit/030c5852859734884a379725858dd3af7401e2a6", "message": "sdt implementation", "committedDate": "2020-11-24T09:14:17Z", "type": "commit"}, {"oid": "40de76653b09a5f679d53ae074bd7180dff9f653", "url": "https://github.com/apache/iotdb/commit/40de76653b09a5f679d53ae074bd7180dff9f653", "message": "add test cases", "committedDate": "2020-11-24T09:14:18Z", "type": "commit"}, {"oid": "d98b13e0f4ef3fea726e293ad0f3ad2a31860709", "url": "https://github.com/apache/iotdb/commit/d98b13e0f4ef3fea726e293ad0f3ad2a31860709", "message": "first value algorithm; user guide updated", "committedDate": "2020-11-24T09:28:59Z", "type": "forcePushed"}, {"oid": "4b7fa48da0560be34dcbf26bb191d5909ecf7728", "url": "https://github.com/apache/iotdb/commit/4b7fa48da0560be34dcbf26bb191d5909ecf7728", "message": "first value algorithm; user guide updated", "committedDate": "2020-11-24T09:57:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA1MDYyMg==", "url": "https://github.com/apache/iotdb/pull/2087#discussion_r530050622", "bodyText": "Hi, please recover this class.", "author": "qiaojialin", "createdAt": "2020-11-25T01:32:08Z", "path": "example/session/src/main/java/org/apache/iotdb/SessionExample.java", "diffHunk": "@@ -48,28 +48,41 @@\n \n   public static void main(String[] args)\n       throws IoTDBConnectionException, StatementExecutionException {\n-    session = new Session(\"127.0.0.1\", 6667, \"root\", \"root\");\n+    session = new Session(\"172.16.48.4\", 58890, \"root\", \"root\");", "originalCommit": "4b7fa48da0560be34dcbf26bb191d5909ecf7728", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA1NTczMw==", "url": "https://github.com/apache/iotdb/pull/2087#discussion_r530055733", "bodyText": "could the SDT be set using Session nosql API?", "author": "qiaojialin", "createdAt": "2020-11-25T01:49:27Z", "path": "example/session/src/main/java/org/apache/iotdb/SessionExample.java", "diffHunk": "@@ -48,28 +48,41 @@\n \n   public static void main(String[] args)\n       throws IoTDBConnectionException, StatementExecutionException {\n-    session = new Session(\"127.0.0.1\", 6667, \"root\", \"root\");\n+    session = new Session(\"172.16.48.4\", 58890, \"root\", \"root\");\n     session.open(false);\n \n+   // session.executeNonQueryStatement(\"delete storage group root\");\n+    /*\n     try {\n       session.setStorageGroup(\"root.sg1\");\n     } catch (StatementExecutionException e) {\n       if (e.getStatusCode() != TSStatusCode.PATH_ALREADY_EXIST_ERROR.getStatusCode())\n         throw e;\n     }\n \n-    createTimeseries();", "originalCommit": "4b7fa48da0560be34dcbf26bb191d5909ecf7728", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA1NjY3OA==", "url": "https://github.com/apache/iotdb/pull/2087#discussion_r530056678", "bodyText": "could we getDoubleValue()?", "author": "qiaojialin", "createdAt": "2020-11-25T01:52:35Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/write/chunk/ChunkWriterImpl.java", "diffHunk": "@@ -119,14 +194,26 @@ public void write(long time, boolean value) {\n \n   @Override\n   public void write(long time, float value) {\n-    pageWriter.write(time, value);\n-    checkPageSizeAndMayOpenANewPage();\n+    if (!isSdtEncoding || sdtEncoder.encodeFloat(time, value)) {\n+      if (isSdtEncoding) {\n+        time = sdtEncoder.getTime();\n+        value = (float) sdtEncoder.getValue();\n+      }\n+      pageWriter.write(time, value);\n+      checkPageSizeAndMayOpenANewPage();\n+    }\n   }\n \n   @Override\n   public void write(long time, double value) {\n-    pageWriter.write(time, value);\n-    checkPageSizeAndMayOpenANewPage();\n+    if (!isSdtEncoding || sdtEncoder.encodeDouble(time, value)) {\n+      if (isSdtEncoding) {\n+        time = sdtEncoder.getTime();\n+        value = (double) sdtEncoder.getValue();", "originalCommit": "4b7fa48da0560be34dcbf26bb191d5909ecf7728", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA1Njc3NA==", "url": "https://github.com/apache/iotdb/pull/2087#discussion_r530056774", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class SdtEncoder {\n          \n          \n            \n            public class SDTEncoder {", "author": "qiaojialin", "createdAt": "2020-11-25T01:53:04Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/encoding/encoder/SdtEncoder.java", "diffHunk": "@@ -0,0 +1,583 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.tsfile.encoding.encoder;\n+\n+import java.nio.FloatBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+\n+public class SdtEncoder {", "originalCommit": "4b7fa48da0560be34dcbf26bb191d5909ecf7728", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "53ae1d870e57169a411f1289cf1b83ce4c9c8eba", "url": "https://github.com/apache/iotdb/commit/53ae1d870e57169a411f1289cf1b83ce4c9c8eba", "message": "first value algorithm; user guide updated", "committedDate": "2020-11-25T01:56:59Z", "type": "forcePushed"}, {"oid": "aaabd09a40821224c6bd606a7ec7137be8901f52", "url": "https://github.com/apache/iotdb/commit/aaabd09a40821224c6bd606a7ec7137be8901f52", "message": "first value algorithm; user guide updated", "committedDate": "2020-11-25T07:13:09Z", "type": "forcePushed"}, {"oid": "c9993ad85bee239a71d3700e4beaeed4270ba342", "url": "https://github.com/apache/iotdb/commit/c9993ad85bee239a71d3700e4beaeed4270ba342", "message": "first value algorithm; user guide updated", "committedDate": "2020-11-25T07:16:28Z", "type": "forcePushed"}, {"oid": "2010f497e6f67221d5609b9d9d71f667cd64d9fc", "url": "https://github.com/apache/iotdb/commit/2010f497e6f67221d5609b9d9d71f667cd64d9fc", "message": "first value algorithm; user guide updated", "committedDate": "2020-11-25T07:24:48Z", "type": "commit"}, {"oid": "2010f497e6f67221d5609b9d9d71f667cd64d9fc", "url": "https://github.com/apache/iotdb/commit/2010f497e6f67221d5609b9d9d71f667cd64d9fc", "message": "first value algorithm; user guide updated", "committedDate": "2020-11-25T07:24:48Z", "type": "forcePushed"}, {"oid": "3c889a9dd6479d100deaf77d60e4120ae06d4bf5", "url": "https://github.com/apache/iotdb/commit/3c889a9dd6479d100deaf77d60e4120ae06d4bf5", "message": "fixed codesmell", "committedDate": "2020-11-25T07:31:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg4OTA2OQ==", "url": "https://github.com/apache/iotdb/pull/2087#discussion_r530889069", "bodyText": "false? Otherwise, the lastStoredTimestamp you stored will be replaced by next point", "author": "qiaojialin", "createdAt": "2020-11-26T09:31:07Z", "path": "tsfile/src/main/java/org/apache/iotdb/tsfile/encoding/encoder/SDTEncoder.java", "diffHunk": "@@ -0,0 +1,540 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.tsfile.encoding.encoder;\n+\n+public class SDTEncoder {\n+\n+  /**\n+   * the last read time and value\n+   * if upperDoor >= lowerDoor meaning out of compDeviation range, will store lastReadPair\n+   */\n+  private long lastReadTimestamp;\n+  private long lastReadLong;\n+  private double lastReadDouble;\n+  private int lastReadInt;\n+  private float lastReadFloat;\n+\n+  /**\n+   * the last stored time and vlaue\n+   * we compare current point against lastStoredPair\n+   */\n+  private long lastStoredTimestamp;\n+  private long lastStoredLong;\n+  private double lastStoredDouble;\n+  private int lastStoredInt;\n+  private float lastStoredFloat;\n+\n+  /**\n+   * the maximum curUpperSlope between the lastStoredPoint to the current point\n+   * upperDoor can only open up\n+   */\n+  private double upperDoor;\n+\n+  /**\n+   * the minimum curLowerSlope between the lastStoredPoint to the current point\n+   * lowerDoor can only open downard\n+   */\n+  private double lowerDoor;\n+\n+  /**\n+   * the maximum absolute difference the user set\n+   * if the data's value is within compDeviation, it will be compressed and discarded\n+   * after compression, it will only store out of range <time, data></> to form the trend\n+   */\n+  private double compDeviation;\n+\n+  /**\n+   * the minimum time distance between two stored data points\n+   * if current point time to the last stored point time distance <= compMin,\n+   * current point will NOT be stored regardless of compression deviation\n+   */\n+  private double compMin;\n+\n+  /**\n+   * the maximum time distance between two stored data points\n+   * if current point time to the last stored point time distance >= compMax,\n+   * current point will be stored regardless of compression deviation\n+   */\n+  private double compMax;\n+\n+  /**\n+   * isFirstValue is true when the encoder takes the first point or reset() when cur point's\n+   * distance to the last stored point's distance exceeds compMax\n+   */\n+  private boolean isFirstValue;\n+\n+  public SDTEncoder() {\n+    upperDoor = Integer.MIN_VALUE;\n+    lowerDoor = Integer.MAX_VALUE;\n+    compDeviation = -1;\n+    compMin = Integer.MIN_VALUE;\n+    compMax = Integer.MAX_VALUE;\n+    isFirstValue = true;\n+  }\n+\n+  public boolean encodeFloat(long time, float value) {\n+    // store the first time and value pair\n+    if (isFirstValue(time, value)) {\n+      return true;\n+    }\n+\n+    // if current point to the last stored point's time distance is within compMin,\n+    // will not check two doors nor store any point within the compMin time range\n+    if (time - lastStoredTimestamp <= compMin) {\n+      return false;\n+    }\n+\n+    // if current point to the last stored point's time distance is larger than compMax,\n+    // will reset two doors, and store current point;\n+    if (time - lastStoredTimestamp >= compMax) {\n+      reset(time, value);\n+      return true;\n+    }\n+\n+    double curUpperSlope = (value - lastStoredFloat - compDeviation) / (time - lastStoredTimestamp);\n+    if (curUpperSlope > upperDoor) {\n+      upperDoor = curUpperSlope;\n+      if (upperDoor > lowerDoor) {\n+        // slope between curr point and last read point\n+        double slope = (value - lastReadFloat) / (time - lastReadTimestamp);\n+        // start point of the next segment\n+        long timestamp = (long) ((lastStoredFloat + compDeviation - lastReadFloat + slope * lastReadTimestamp -\n+            lowerDoor * lastStoredTimestamp) / (slope - lowerDoor));\n+        lastStoredFloat = (float) (lastStoredFloat + compDeviation + lowerDoor * (timestamp - lastStoredTimestamp)\n+            - compDeviation / 2);\n+        lastStoredTimestamp = timestamp;\n+        // recalculate upperDoor and lowerDoor\n+        upperDoor = (value - lastStoredFloat - compDeviation) / (time - lastStoredTimestamp);\n+        lowerDoor = (value - lastStoredFloat + compDeviation) / (time - lastStoredTimestamp);\n+        // update last read point to current point\n+        lastReadFloat = value;\n+        lastReadTimestamp = time;\n+        return true;\n+      }\n+    }\n+\n+    double curLowerSlope = (value - lastStoredFloat + compDeviation) / (time - lastStoredTimestamp);\n+    if (curLowerSlope < lowerDoor) {\n+      lowerDoor = curLowerSlope;\n+      if (upperDoor > lowerDoor) {\n+        // slope between curr point and last read point\n+        double slope = (value - lastReadFloat) / (time - lastReadTimestamp);\n+        // start point of the next segment\n+        long timestamp = (long) ((lastStoredFloat - compDeviation - lastReadFloat + slope * lastReadTimestamp -\n+            upperDoor * lastStoredTimestamp) / (slope - upperDoor));\n+        lastStoredFloat = (float) (lastStoredFloat - compDeviation + upperDoor * (timestamp - lastStoredTimestamp)\n+            + compDeviation / 2);\n+        lastStoredTimestamp = timestamp;\n+        // recalculate upperDoor and lowerDoor\n+        upperDoor = (value - lastStoredFloat - compDeviation) / (time - lastStoredTimestamp);\n+        lowerDoor = (value - lastStoredFloat + compDeviation) / (time - lastStoredTimestamp);\n+        // update last read point to current point\n+        lastReadFloat = value;\n+        lastReadTimestamp = time;\n+        return true;\n+      }\n+    }\n+\n+    lastReadFloat = value;\n+    lastReadTimestamp = time;\n+    return false;\n+  }\n+\n+  public boolean encodeLong(long time, long value) {\n+    // store the first time and value pair\n+    if (isFirstValue(time, value)) {\n+      return true;\n+    }\n+\n+    // if current point to the last stored point's time distance is within compMin,\n+    // will not check two doors nor store any point within the compMin time range\n+    if (time - lastStoredTimestamp <= compMin) {\n+      return false;\n+    }\n+\n+    // if current point to the last stored point's time distance is larger than compMax,\n+    // will reset two doors, and store current point;\n+    if (time - lastStoredTimestamp >= compMax) {\n+      reset(time, value);\n+      return true;\n+    }\n+\n+    double curUpperSlope = (value - lastStoredLong - compDeviation) / (time - lastStoredTimestamp);\n+    if (curUpperSlope > upperDoor) {\n+      upperDoor = curUpperSlope;\n+      if (upperDoor > lowerDoor) {\n+        // slope between curr point and last read point\n+        double slope = ((double) value - lastReadLong) / (time - lastReadTimestamp);\n+        // start point of the next segment\n+        long timestamp = (long) ((lastStoredLong + compDeviation - lastReadLong + slope * lastReadTimestamp -\n+            lowerDoor * lastStoredTimestamp) / (slope - lowerDoor));\n+        lastStoredLong = Math.round((lastStoredLong + compDeviation + lowerDoor * (timestamp - lastStoredTimestamp)\n+            - compDeviation / 2));\n+        lastStoredTimestamp = timestamp;\n+        // recalculate upperDoor and lowerDoor\n+        upperDoor = (value - lastStoredLong - compDeviation) / (time - lastStoredTimestamp);\n+        lowerDoor = (value - lastStoredLong + compDeviation) / (time - lastStoredTimestamp);\n+        // update last read point to current point\n+        lastReadLong = value;\n+        lastReadTimestamp = time;\n+        return true;\n+      }\n+    }\n+\n+    double curLowerSlope = (value - lastStoredLong + compDeviation) / (time - lastStoredTimestamp);\n+    if (curLowerSlope < lowerDoor) {\n+      lowerDoor = curLowerSlope;\n+      if (upperDoor > lowerDoor) {\n+        // slope between curr point and last read point\n+        double slope = ((double) value - lastReadLong) / (time - lastReadTimestamp);\n+        // start point of the next segment\n+        long timestamp = (long) ((lastStoredLong - compDeviation - lastReadLong + slope * lastReadTimestamp -\n+            upperDoor * lastStoredTimestamp) / (slope - upperDoor));\n+        lastStoredLong = Math.round((lastStoredLong - compDeviation + upperDoor * (timestamp - lastStoredTimestamp)\n+            + compDeviation / 2));\n+        lastStoredTimestamp = timestamp;\n+\n+        // recalculate upperDoor and lowerDoor\n+        upperDoor = (value - lastStoredLong - compDeviation) / (time - lastStoredTimestamp);\n+        lowerDoor = (value - lastStoredLong + compDeviation) / (time - lastStoredTimestamp);\n+        // update last read point to current point\n+        lastReadLong = value;\n+        lastReadTimestamp = time;\n+        return true;\n+      }\n+    }\n+    lastReadLong = value;\n+    lastReadTimestamp = time;\n+\n+    return false;\n+  }\n+\n+  public boolean encodeInt(long time, int value) {\n+    // store the first time and value pair\n+    if (isFirstValue(time, value)) {\n+      return true;\n+    }\n+\n+    // if current point to the last stored point's time distance is within compMin,\n+    // will not check two doors nor store any point within the compMin time range\n+    if (time - lastStoredTimestamp <= compMin) {\n+      return false;\n+    }\n+\n+    // if current point to the last stored point's time distance is larger than compMax,\n+    // will reset two doors, and store current point;\n+    if (time - lastStoredTimestamp >= compMax) {\n+      reset(time, value);\n+      return true;\n+    }\n+\n+    double curUpperSlope = (value - lastStoredInt - compDeviation) / (time - lastStoredTimestamp);\n+    if (curUpperSlope > upperDoor) {\n+      upperDoor = curUpperSlope;\n+      if (upperDoor > lowerDoor) {\n+        // slope between curr point and last read point\n+        double slope = ((double) value - lastReadInt) / (time - lastReadTimestamp);\n+        // start point of the next segment\n+        long timestamp = (long) ((lastStoredInt + compDeviation - lastReadInt + slope * lastReadTimestamp -\n+            lowerDoor * lastStoredTimestamp) / (slope - lowerDoor));\n+        lastStoredInt = (int) Math.round((lastStoredInt + compDeviation + lowerDoor * (timestamp - lastStoredTimestamp)\n+            - compDeviation / 2));\n+        lastStoredTimestamp = timestamp;\n+        // recalculate upperDoor and lowerDoor\n+        upperDoor = (value - lastStoredInt - compDeviation) / (time - lastStoredTimestamp);\n+        lowerDoor = (value - lastStoredInt + compDeviation) / (time - lastStoredTimestamp);\n+        // update last read point to current point\n+        lastReadInt = value;\n+        lastReadTimestamp = time;\n+        return true;\n+      }\n+    }\n+\n+    double curLowerSlope = (value - lastStoredInt + compDeviation) / (time - lastStoredTimestamp);\n+    if (curLowerSlope < lowerDoor) {\n+      lowerDoor = curLowerSlope;\n+      if (upperDoor > lowerDoor) {\n+        // slope between curr point and last read point\n+        double slope = ((double) value - lastReadInt) / (time - lastReadTimestamp);\n+        // start point of the next segment\n+        long timestamp = (long) ((lastStoredInt - compDeviation - lastReadInt + slope * lastReadTimestamp -\n+            upperDoor * lastStoredTimestamp) / (slope - upperDoor));\n+        lastStoredInt = (int) Math.round((lastStoredInt - compDeviation + upperDoor * (timestamp - lastStoredTimestamp)\n+            + compDeviation / 2));\n+        lastStoredTimestamp = timestamp;\n+        // recalculate upperDoor and lowerDoor\n+        upperDoor = (value - lastStoredInt - compDeviation) / (time - lastStoredTimestamp);\n+        lowerDoor = (value - lastStoredInt + compDeviation) / (time - lastStoredTimestamp);\n+        // update last read point to current point\n+        lastReadInt = value;\n+        lastReadTimestamp = time;\n+        return true;\n+      }\n+    }\n+\n+    lastReadInt = value;\n+    lastReadTimestamp = time;\n+    return false;\n+  }\n+\n+  public boolean encodeDouble(long time, double value) {\n+    // store the first time and value pair\n+    if (isFirstValue(time, value)) {\n+      return true;\n+    }\n+\n+    // if current point to the last stored point's time distance is within compMin,\n+    // will not check two doors nor store any point within the compMin time range\n+    if (time - lastStoredTimestamp <= compMin) {\n+      return false;\n+    }\n+\n+    // if current point to the last stored point's time distance is larger than compMax,\n+    // will reset two doors, and store current point;\n+    if (time - lastStoredTimestamp >= compMax) {\n+      reset(time, value);\n+      return true;\n+    }\n+\n+    double curUpperSlope = (value - lastStoredDouble - compDeviation) / (time - lastStoredTimestamp);\n+    if (curUpperSlope > upperDoor) {\n+      upperDoor = curUpperSlope;\n+      if (upperDoor > lowerDoor) {\n+        // slope between curr point and last read point\n+        double slope = (value - lastReadDouble) / (time - lastReadTimestamp);\n+        // start point of the next segment\n+        long timestamp = (long) ((lastStoredDouble + compDeviation - lastReadDouble + slope * lastReadTimestamp -\n+            lowerDoor * lastStoredTimestamp) / (slope - lowerDoor));\n+        lastStoredDouble = (lastStoredDouble + compDeviation + lowerDoor * (timestamp - lastStoredTimestamp)\n+            - compDeviation / 2);\n+        lastStoredTimestamp = timestamp;\n+        // recalculate upperDoor and lowerDoor\n+        upperDoor = (value - lastStoredDouble - compDeviation) / (time - lastStoredTimestamp);\n+        lowerDoor = (value - lastStoredDouble + compDeviation) / (time - lastStoredTimestamp);\n+        // update last read point to current point\n+        lastReadDouble = value;\n+        lastReadTimestamp = time;\n+        return true;\n+      }\n+    }\n+\n+    double curLowerSlope = (value - lastStoredDouble + compDeviation) / (time - lastStoredTimestamp);\n+    if (curLowerSlope < lowerDoor) {\n+      lowerDoor = curLowerSlope;\n+      if (upperDoor > lowerDoor) {\n+        // slope between curr point and last read point\n+        double slope = (value - lastReadDouble) / (time - lastReadTimestamp);\n+        // start point of the next segment\n+        long timestamp = (long) ((lastStoredDouble - compDeviation - lastReadDouble + slope * lastReadTimestamp -\n+            upperDoor * lastStoredTimestamp) / (slope - upperDoor));\n+        lastStoredDouble = (lastStoredDouble - compDeviation + upperDoor * (timestamp - lastStoredTimestamp)\n+            + compDeviation / 2);\n+        lastStoredTimestamp = timestamp;\n+        // recalculate upperDoor and lowerDoor\n+        upperDoor = (value - lastStoredDouble - compDeviation) / (time - lastStoredTimestamp);\n+        lowerDoor = (value - lastStoredDouble + compDeviation) / (time - lastStoredTimestamp);\n+        // update last read point to current point\n+        lastReadDouble = value;\n+        lastReadTimestamp = time;\n+        return true;\n+      }\n+    }\n+\n+    lastReadDouble = value;\n+    lastReadTimestamp = time;\n+    return false;\n+  }\n+\n+  public int encode(long[] timestamps, double[] values, int batchSize) {\n+    int index = 0;\n+    for (int i = 0; i < batchSize; i++) {\n+      if (encodeDouble(timestamps[i], values[i])) {\n+        timestamps[index] = lastStoredTimestamp;\n+        values[index] = lastStoredDouble;\n+        index++;\n+      }\n+    }\n+    return index;\n+  }\n+\n+  public int encode(long[] timestamps, int[] values, int batchSize) {\n+    int index = 0;\n+    for (int i = 0; i < batchSize; i++) {\n+      if (encodeInt(timestamps[i], values[i])) {\n+        timestamps[index] = lastStoredTimestamp;\n+        values[index] = lastStoredInt;\n+        index++;\n+      }\n+    }\n+    return index;\n+  }\n+\n+  public int encode(long[] timestamps, long[] values, int batchSize) {\n+    int index = 0;\n+    for (int i = 0; i < batchSize; i++) {\n+      if (encodeLong(timestamps[i], values[i])) {\n+        timestamps[index] = lastStoredTimestamp;\n+        values[index] = lastStoredLong;\n+        index++;\n+      }\n+    }\n+    return index;\n+  }\n+\n+  public int encode(long[] timestamps, float[] values, int batchSize) {\n+    int index = 0;\n+    for (int i = 0; i < batchSize; i++) {\n+      if (encodeFloat(timestamps[i], values[i])) {\n+        timestamps[index] = lastStoredTimestamp;\n+        values[index] = lastStoredFloat;\n+        index++;\n+      }\n+    }\n+    return index;\n+  }\n+\n+  private boolean isFirstValue(long time, float value) {\n+    if (isFirstValue) {\n+      isFirstValue = false;\n+      lastReadTimestamp = time;\n+      lastReadFloat = value;\n+      lastStoredTimestamp = time;\n+      lastStoredFloat = value;\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  private boolean isFirstValue(long time, long value) {\n+    if (isFirstValue) {\n+      isFirstValue = false;\n+      lastReadTimestamp = time;\n+      lastReadLong = value;\n+      lastStoredTimestamp = time;\n+      lastStoredLong = value;\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  private boolean isFirstValue(long time, int value) {\n+    if (isFirstValue) {\n+      isFirstValue = false;\n+      lastReadTimestamp = time;\n+      lastReadInt = value;\n+      lastStoredTimestamp = time;\n+      lastStoredInt = value;\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  private boolean isFirstValue(long time, double value) {\n+    if (isFirstValue) {\n+      isFirstValue = false;\n+      lastReadTimestamp = time;\n+      lastReadDouble = value;\n+      lastStoredTimestamp = time;\n+      lastStoredDouble = value;\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  private void reset() {\n+    upperDoor = Integer.MIN_VALUE;\n+    lowerDoor = Integer.MAX_VALUE;\n+    isFirstValue = true;", "originalCommit": "5af139b8d8e9746d428f3a7efd0ba1a70b14a26f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1624bf1f8022bf20ce91710b22cfedba862d9722", "url": "https://github.com/apache/iotdb/commit/1624bf1f8022bf20ce91710b22cfedba862d9722", "message": "session example", "committedDate": "2020-11-27T01:22:17Z", "type": "forcePushed"}, {"oid": "eb9a756df98469d153be79c8f8f4b881324c594e", "url": "https://github.com/apache/iotdb/commit/eb9a756df98469d153be79c8f8f4b881324c594e", "message": "session example", "committedDate": "2020-12-01T08:35:00Z", "type": "commit"}, {"oid": "eb9a756df98469d153be79c8f8f4b881324c594e", "url": "https://github.com/apache/iotdb/commit/eb9a756df98469d153be79c8f8f4b881324c594e", "message": "session example", "committedDate": "2020-12-01T08:35:00Z", "type": "forcePushed"}]}