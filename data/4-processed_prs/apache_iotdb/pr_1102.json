{"pr_number": 1102, "pr_title": "[IOTDB-348] Implement LoadConfigurationPlan", "pr_createdAt": "2020-04-26T03:28:05Z", "pr_url": "https://github.com/apache/iotdb/pull/1102", "timeline": [{"oid": "2d1bc3ca9765a1ca0b1fe0304c187249559a527e", "url": "https://github.com/apache/iotdb/commit/2d1bc3ca9765a1ca0b1fe0304c187249559a527e", "message": "implement load configuration", "committedDate": "2020-04-23T15:50:36Z", "type": "commit"}, {"oid": "98f58611cd12ad84c90e3e844cd9eacf01cf4564", "url": "https://github.com/apache/iotdb/commit/98f58611cd12ad84c90e3e844cd9eacf01cf4564", "message": "implement load configuration -g", "committedDate": "2020-04-25T15:28:47Z", "type": "commit"}, {"oid": "f0164140708b89030905d8e168216ea9b4a08d33", "url": "https://github.com/apache/iotdb/commit/f0164140708b89030905d8e168216ea9b4a08d33", "message": "execute local", "committedDate": "2020-04-26T03:19:12Z", "type": "commit"}, {"oid": "7d3d0759bbb9d6808854c4b92e9878926e64baf8", "url": "https://github.com/apache/iotdb/commit/7d3d0759bbb9d6808854c4b92e9878926e64baf8", "message": "delete some comment", "committedDate": "2020-04-26T03:34:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2NDkyOA==", "url": "https://github.com/apache/iotdb/pull/1102#discussion_r415464928", "bodyText": "Please find somewhere to add the documents about what configurations are supported even if it is only an empty list now.", "author": "jt2594838", "createdAt": "2020-04-27T02:17:39Z", "path": "cluster/src/main/java/org/apache/iotdb/cluster/config/ClusterDescriptor.java", "diffHunk": "@@ -204,4 +206,53 @@ private void loadProps() {\n     }\n     return urlList;\n   }\n+\n+  public void loadHotModifiedProps() throws QueryProcessException {\n+    String url = getPropsUrl();\n+    if (url == null) {\n+      return;\n+    }\n+    try (InputStream inputStream = new FileInputStream(new File(url))) {\n+      logger.info(\"Start to reload config file {}\", url);\n+      Properties properties = new Properties();\n+      properties.load(inputStream);\n+      loadHotModifiedProps(properties, false);\n+    } catch (Exception e) {\n+      logger.warn(\"Fail to reload config file {}\", url, e);\n+      throw new QueryProcessException(\n+          String.format(\"Fail to reload config file %s because %s\", url, e.getMessage()));\n+    }\n+  }\n+\n+  public void loadHotModifiedProps(Properties properties, boolean toCheckProperties)\n+      throws QueryProcessException {\n+    if (toCheckProperties && !checkProperties(properties)) {\n+      throw new QueryProcessException(\n+          \"Failed to load configuration from properties because some are missing locally.\");\n+    }\n+    // TODO implement some hot modified properties to load\n+    logger.info(\"Set cluster configuration {}\", properties);", "originalCommit": "7d3d0759bbb9d6808854c4b92e9878926e64baf8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2NzA4Mw==", "url": "https://github.com/apache/iotdb/pull/1102#discussion_r415467083", "bodyText": "I am not sure if I got it right, but the parameter properties is loaded from getPropUrl() and you also load getPropUrl() into localProperties, so it seems that properties must be a subset of localProperties.", "author": "jt2594838", "createdAt": "2020-04-27T02:25:03Z", "path": "cluster/src/main/java/org/apache/iotdb/cluster/config/ClusterDescriptor.java", "diffHunk": "@@ -204,4 +206,53 @@ private void loadProps() {\n     }\n     return urlList;\n   }\n+\n+  public void loadHotModifiedProps() throws QueryProcessException {\n+    String url = getPropsUrl();\n+    if (url == null) {\n+      return;\n+    }\n+    try (InputStream inputStream = new FileInputStream(new File(url))) {\n+      logger.info(\"Start to reload config file {}\", url);\n+      Properties properties = new Properties();\n+      properties.load(inputStream);\n+      loadHotModifiedProps(properties, false);\n+    } catch (Exception e) {\n+      logger.warn(\"Fail to reload config file {}\", url, e);\n+      throw new QueryProcessException(\n+          String.format(\"Fail to reload config file %s because %s\", url, e.getMessage()));\n+    }\n+  }\n+\n+  public void loadHotModifiedProps(Properties properties, boolean toCheckProperties)\n+      throws QueryProcessException {\n+    if (toCheckProperties && !checkProperties(properties)) {\n+      throw new QueryProcessException(\n+          \"Failed to load configuration from properties because some are missing locally.\");\n+    }\n+    // TODO implement some hot modified properties to load\n+    logger.info(\"Set cluster configuration {}\", properties);\n+  }\n+\n+  private boolean checkProperties(Properties properties) throws QueryProcessException {\n+    String url = getPropsUrl();\n+    if (url == null) {\n+      return false;\n+    }\n+    try (InputStream inputStream = new FileInputStream(new File(url))) {\n+      Properties localProperties = System.getProperties();\n+      localProperties.load(inputStream);\n+      Set<String> localPropertyNames = localProperties.stringPropertyNames();\n+      for (String propertyName : properties.stringPropertyNames()) {\n+        if (!localPropertyNames.contains(propertyName)) {\n+          return false;\n+        }\n+      }", "originalCommit": "7d3d0759bbb9d6808854c4b92e9878926e64baf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3OTg5MQ==", "url": "https://github.com/apache/iotdb/pull/1102#discussion_r415479891", "bodyText": "It seems that the check there is unnecessary. I will remove it.", "author": "Ring-k", "createdAt": "2020-04-27T03:10:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2NzA4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3MDM0NA==", "url": "https://github.com/apache/iotdb/pull/1102#discussion_r415470344", "bodyText": "Please remove this.", "author": "jt2594838", "createdAt": "2020-04-27T02:36:39Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/sys/LoadConfigurationPlan.java", "diffHunk": "@@ -17,19 +17,107 @@\n  * under the License.\n  *\n  */\n+\n package org.apache.iotdb.db.qp.physical.sys;\n \n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Properties;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n import org.apache.iotdb.db.qp.physical.PhysicalPlan;\n import org.apache.iotdb.tsfile.read.common.Path;\n-\n-import java.util.List;\n+import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n \n public class LoadConfigurationPlan extends PhysicalPlan {\n \n-  public LoadConfigurationPlan() {\n-    super(false);\n-    this.setOperatorType(OperatorType.LOAD_CONFIGURATION);\n+  // an array of properties, the size of which is always 2.\n+  // The first element is the properties for iotdb-engine, the second\n+  // is for cluster-config\n+  private Properties[] propertiesArray;\n+\n+  LoadConfigurationPlanType loadConfigurationPlanType;\n+\n+  public LoadConfigurationPlan(LoadConfigurationPlanType loadConfigurationPlanType,\n+      Properties[] propertiesArray)\n+      throws QueryProcessException {\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+    if (loadConfigurationPlanType != LoadConfigurationPlanType.GLOBAL) {\n+      throw new QueryProcessException(\n+          \"The constructor with 2 parameters is for load global configuration\");\n+    }\n+    if (propertiesArray.length != 2) {\n+      throw new QueryProcessException(\"The size of propertiesArray is not 2.\");\n+    }\n+    this.loadConfigurationPlanType = loadConfigurationPlanType;\n+    this.propertiesArray = propertiesArray;\n+  }\n+\n+  public LoadConfigurationPlan(LoadConfigurationPlanType loadConfigurationPlanType)\n+      throws QueryProcessException {\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+    if (loadConfigurationPlanType != LoadConfigurationPlanType.LOCAL) {\n+      throw new QueryProcessException(\n+          \"The constructor with 1 parameters is for load local configuration\");\n+    }\n+    this.loadConfigurationPlanType = loadConfigurationPlanType;\n+  }\n+\n+  // only for deserialize\n+  public LoadConfigurationPlan(){\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+  }\n+\n+  @Override\n+  public void serialize(DataOutputStream stream) throws IOException {\n+    int type = PhysicalPlanType.LOAD_CONFIGURATION.ordinal();\n+    stream.writeByte((byte) type);\n+    stream.writeInt(loadConfigurationPlanType.ordinal());\n+    if (loadConfigurationPlanType == LoadConfigurationPlanType.GLOBAL) {\n+      stream.writeInt(propertiesArray.length);\n+      for (Properties properties : propertiesArray) {\n+        if (properties == null) {\n+          stream.writeInt(0);\n+        } else {\n+          stream.writeInt(1);\n+          Map<String, String> propertiesMap = new HashMap<>();\n+          for (Entry<Object, Object> entry : properties.entrySet()) {\n+            propertiesMap.put(String.valueOf(entry.getKey()), String.valueOf(entry.getValue()));\n+          }\n+          stream.writeInt(propertiesMap.size());\n+          for(Entry entry : propertiesMap.entrySet()){\n+            putString(stream, String.valueOf(entry.getKey()));\n+            putString(stream, String.valueOf(entry.getValue()));\n+          }\n+//          ReadWriteIOUtils.write(propertiesMap, stream);", "originalCommit": "7d3d0759bbb9d6808854c4b92e9878926e64baf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ4MTI5Ng==", "url": "https://github.com/apache/iotdb/pull/1102#discussion_r415481296", "bodyText": "Thanks for your reminding.", "author": "Ring-k", "createdAt": "2020-04-27T03:15:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3MDM0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3MTE2MA==", "url": "https://github.com/apache/iotdb/pull/1102#discussion_r415471160", "bodyText": "I wonder if it is necessary to put the properties into a new map, as you have the entrySet, you can just write them into the stream within this loop.", "author": "jt2594838", "createdAt": "2020-04-27T02:39:38Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/sys/LoadConfigurationPlan.java", "diffHunk": "@@ -17,19 +17,107 @@\n  * under the License.\n  *\n  */\n+\n package org.apache.iotdb.db.qp.physical.sys;\n \n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Properties;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n import org.apache.iotdb.db.qp.physical.PhysicalPlan;\n import org.apache.iotdb.tsfile.read.common.Path;\n-\n-import java.util.List;\n+import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n \n public class LoadConfigurationPlan extends PhysicalPlan {\n \n-  public LoadConfigurationPlan() {\n-    super(false);\n-    this.setOperatorType(OperatorType.LOAD_CONFIGURATION);\n+  // an array of properties, the size of which is always 2.\n+  // The first element is the properties for iotdb-engine, the second\n+  // is for cluster-config\n+  private Properties[] propertiesArray;\n+\n+  LoadConfigurationPlanType loadConfigurationPlanType;\n+\n+  public LoadConfigurationPlan(LoadConfigurationPlanType loadConfigurationPlanType,\n+      Properties[] propertiesArray)\n+      throws QueryProcessException {\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+    if (loadConfigurationPlanType != LoadConfigurationPlanType.GLOBAL) {\n+      throw new QueryProcessException(\n+          \"The constructor with 2 parameters is for load global configuration\");\n+    }\n+    if (propertiesArray.length != 2) {\n+      throw new QueryProcessException(\"The size of propertiesArray is not 2.\");\n+    }\n+    this.loadConfigurationPlanType = loadConfigurationPlanType;\n+    this.propertiesArray = propertiesArray;\n+  }\n+\n+  public LoadConfigurationPlan(LoadConfigurationPlanType loadConfigurationPlanType)\n+      throws QueryProcessException {\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+    if (loadConfigurationPlanType != LoadConfigurationPlanType.LOCAL) {\n+      throw new QueryProcessException(\n+          \"The constructor with 1 parameters is for load local configuration\");\n+    }\n+    this.loadConfigurationPlanType = loadConfigurationPlanType;\n+  }\n+\n+  // only for deserialize\n+  public LoadConfigurationPlan(){\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+  }\n+\n+  @Override\n+  public void serialize(DataOutputStream stream) throws IOException {\n+    int type = PhysicalPlanType.LOAD_CONFIGURATION.ordinal();\n+    stream.writeByte((byte) type);\n+    stream.writeInt(loadConfigurationPlanType.ordinal());\n+    if (loadConfigurationPlanType == LoadConfigurationPlanType.GLOBAL) {\n+      stream.writeInt(propertiesArray.length);\n+      for (Properties properties : propertiesArray) {\n+        if (properties == null) {\n+          stream.writeInt(0);\n+        } else {\n+          stream.writeInt(1);\n+          Map<String, String> propertiesMap = new HashMap<>();\n+          for (Entry<Object, Object> entry : properties.entrySet()) {\n+            propertiesMap.put(String.valueOf(entry.getKey()), String.valueOf(entry.getValue()));\n+          }", "originalCommit": "7d3d0759bbb9d6808854c4b92e9878926e64baf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ4MTQ1Mw==", "url": "https://github.com/apache/iotdb/pull/1102#discussion_r415481453", "bodyText": "Thanks. It is not necessary.", "author": "Ring-k", "createdAt": "2020-04-27T03:16:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3MTE2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3MjY3OA==", "url": "https://github.com/apache/iotdb/pull/1102#discussion_r415472678", "bodyText": "Maybe you could just use Properties.setProperty and discard the map.", "author": "jt2594838", "createdAt": "2020-04-27T02:45:22Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/sys/LoadConfigurationPlan.java", "diffHunk": "@@ -17,19 +17,107 @@\n  * under the License.\n  *\n  */\n+\n package org.apache.iotdb.db.qp.physical.sys;\n \n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Properties;\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\n import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n import org.apache.iotdb.db.qp.physical.PhysicalPlan;\n import org.apache.iotdb.tsfile.read.common.Path;\n-\n-import java.util.List;\n+import org.apache.iotdb.tsfile.utils.ReadWriteIOUtils;\n \n public class LoadConfigurationPlan extends PhysicalPlan {\n \n-  public LoadConfigurationPlan() {\n-    super(false);\n-    this.setOperatorType(OperatorType.LOAD_CONFIGURATION);\n+  // an array of properties, the size of which is always 2.\n+  // The first element is the properties for iotdb-engine, the second\n+  // is for cluster-config\n+  private Properties[] propertiesArray;\n+\n+  LoadConfigurationPlanType loadConfigurationPlanType;\n+\n+  public LoadConfigurationPlan(LoadConfigurationPlanType loadConfigurationPlanType,\n+      Properties[] propertiesArray)\n+      throws QueryProcessException {\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+    if (loadConfigurationPlanType != LoadConfigurationPlanType.GLOBAL) {\n+      throw new QueryProcessException(\n+          \"The constructor with 2 parameters is for load global configuration\");\n+    }\n+    if (propertiesArray.length != 2) {\n+      throw new QueryProcessException(\"The size of propertiesArray is not 2.\");\n+    }\n+    this.loadConfigurationPlanType = loadConfigurationPlanType;\n+    this.propertiesArray = propertiesArray;\n+  }\n+\n+  public LoadConfigurationPlan(LoadConfigurationPlanType loadConfigurationPlanType)\n+      throws QueryProcessException {\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+    if (loadConfigurationPlanType != LoadConfigurationPlanType.LOCAL) {\n+      throw new QueryProcessException(\n+          \"The constructor with 1 parameters is for load local configuration\");\n+    }\n+    this.loadConfigurationPlanType = loadConfigurationPlanType;\n+  }\n+\n+  // only for deserialize\n+  public LoadConfigurationPlan(){\n+    super(false, OperatorType.LOAD_CONFIGURATION);\n+  }\n+\n+  @Override\n+  public void serialize(DataOutputStream stream) throws IOException {\n+    int type = PhysicalPlanType.LOAD_CONFIGURATION.ordinal();\n+    stream.writeByte((byte) type);\n+    stream.writeInt(loadConfigurationPlanType.ordinal());\n+    if (loadConfigurationPlanType == LoadConfigurationPlanType.GLOBAL) {\n+      stream.writeInt(propertiesArray.length);\n+      for (Properties properties : propertiesArray) {\n+        if (properties == null) {\n+          stream.writeInt(0);\n+        } else {\n+          stream.writeInt(1);\n+          Map<String, String> propertiesMap = new HashMap<>();\n+          for (Entry<Object, Object> entry : properties.entrySet()) {\n+            propertiesMap.put(String.valueOf(entry.getKey()), String.valueOf(entry.getValue()));\n+          }\n+          stream.writeInt(propertiesMap.size());\n+          for(Entry entry : propertiesMap.entrySet()){\n+            putString(stream, String.valueOf(entry.getKey()));\n+            putString(stream, String.valueOf(entry.getValue()));\n+          }\n+//          ReadWriteIOUtils.write(propertiesMap, stream);\n+        }\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void deserialize(ByteBuffer buffer) {\n+    loadConfigurationPlanType = LoadConfigurationPlanType.values()[buffer.getInt()];\n+    if (loadConfigurationPlanType == LoadConfigurationPlanType.GLOBAL) {\n+      int propertiesNum = buffer.getInt();\n+      propertiesArray = new Properties[propertiesNum];\n+      for (int i = 0; i < propertiesArray.length; i++) {\n+        if (buffer.getInt() == 1) {\n+          propertiesArray[i] = new Properties();\n+          int size = buffer.getInt();\n+          Map<String, String> values = new HashMap<>(size);\n+          for(int j = 0; j < size; j++){\n+            values.put(readString(buffer), readString(buffer));", "originalCommit": "7d3d0759bbb9d6808854c4b92e9878926e64baf8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7f81cec02bb581416fc310650b5cc9795cba7ab4", "url": "https://github.com/apache/iotdb/commit/7f81cec02bb581416fc310650b5cc9795cba7ab4", "message": "\u3000add antlr file", "committedDate": "2020-04-27T03:06:44Z", "type": "commit"}, {"oid": "2791604a60e0094db1aa550586fedc75216b6e2d", "url": "https://github.com/apache/iotdb/commit/2791604a60e0094db1aa550586fedc75216b6e2d", "message": "remove map", "committedDate": "2020-04-27T03:17:31Z", "type": "commit"}, {"oid": "475efb2d2ef27579cb49feefd14629f6cd8925de", "url": "https://github.com/apache/iotdb/commit/475efb2d2ef27579cb49feefd14629f6cd8925de", "message": "fix conflict", "committedDate": "2020-04-27T09:42:25Z", "type": "commit"}, {"oid": "3fdf27a4a049310b21405985f1d7f4a15451279f", "url": "https://github.com/apache/iotdb/commit/3fdf27a4a049310b21405985f1d7f4a15451279f", "message": "remove unused arg", "committedDate": "2020-04-27T09:45:35Z", "type": "commit"}, {"oid": "4c4f9ad5b4427a8650822f1f952898f7df527724", "url": "https://github.com/apache/iotdb/commit/4c4f9ad5b4427a8650822f1f952898f7df527724", "message": "hot modified cluster properties", "committedDate": "2020-04-27T10:00:35Z", "type": "commit"}, {"oid": "3c3ce34b729553817889a3ab92a7e354263c28bc", "url": "https://github.com/apache/iotdb/commit/3c3ce34b729553817889a3ab92a7e354263c28bc", "message": "remove rpc compression as hot modified", "committedDate": "2020-04-27T10:03:17Z", "type": "commit"}, {"oid": "f10e50c48df590a11d4a87ec31c7fa5a8afc49d9", "url": "https://github.com/apache/iotdb/commit/f10e50c48df590a11d4a87ec31c7fa5a8afc49d9", "message": "fix comment", "committedDate": "2020-04-27T10:27:07Z", "type": "commit"}, {"oid": "e1154f7875039e4a97c220c5bf3dc1d7e2604dd0", "url": "https://github.com/apache/iotdb/commit/e1154f7875039e4a97c220c5bf3dc1d7e2604dd0", "message": "fix conflict", "committedDate": "2020-04-28T00:48:39Z", "type": "commit"}]}