{"pr_number": 2358, "pr_title": "[IOTDB-1084] Fix temporary memory of flushing may cause OOM", "pr_createdAt": "2020-12-28T08:45:42Z", "pr_url": "https://github.com/apache/iotdb/pull/2358", "timeline": [{"oid": "517c68aa43de255b74a5e437259aaeda046971d1", "url": "https://github.com/apache/iotdb/commit/517c68aa43de255b74a5e437259aaeda046971d1", "message": "merge master", "committedDate": "2020-12-28T08:26:04Z", "type": "commit"}, {"oid": "f0b451132d47053e99518184c4460425f17e0abc", "url": "https://github.com/apache/iotdb/commit/f0b451132d47053e99518184c4460425f17e0abc", "message": "fix code smell", "committedDate": "2020-12-28T08:38:30Z", "type": "commit"}, {"oid": "40ecb445e6449ef24d07af667fd4e3c911940705", "url": "https://github.com/apache/iotdb/commit/40ecb445e6449ef24d07af667fd4e3c911940705", "message": "fix sonar bug", "committedDate": "2020-12-28T09:27:09Z", "type": "commit"}, {"oid": "c57a98f9d06fbe151ab2f724fb490a087ef14bee", "url": "https://github.com/apache/iotdb/commit/c57a98f9d06fbe151ab2f724fb490a087ef14bee", "message": "split two sizes", "committedDate": "2020-12-31T01:43:45Z", "type": "commit"}, {"oid": "7614fd63e66f4d7d5032cb93ec5edabed654f2e2", "url": "https://github.com/apache/iotdb/commit/7614fd63e66f4d7d5032cb93ec5edabed654f2e2", "message": "fix bug", "committedDate": "2020-12-31T01:54:44Z", "type": "commit"}, {"oid": "5700e29ce865a2317ca0c77eeaf78f9198613794", "url": "https://github.com/apache/iotdb/commit/5700e29ce865a2317ca0c77eeaf78f9198613794", "message": "fix tests", "committedDate": "2020-12-31T01:55:04Z", "type": "commit"}, {"oid": "a57c2879bc521972b1ce41e71598013d1f9f56f8", "url": "https://github.com/apache/iotdb/commit/a57c2879bc521972b1ce41e71598013d1f9f56f8", "message": "Merge branch 'master' of https://github.com/apache/iotdb into flush_OOM", "committedDate": "2021-01-11T03:22:54Z", "type": "commit"}, {"oid": "c7413641e67fd4ef691cba3cf5b35954a035939c", "url": "https://github.com/apache/iotdb/commit/c7413641e67fd4ef691cba3cf5b35954a035939c", "message": "calculate Temporary Memory size", "committedDate": "2021-01-11T15:53:20Z", "type": "commit"}, {"oid": "0845516af994d86b760f4061187255ad3729c675", "url": "https://github.com/apache/iotdb/commit/0845516af994d86b760f4061187255ad3729c675", "message": "Merge branch 'master' of https://github.com/apache/iotdb into flush_OOM", "committedDate": "2021-01-12T09:23:53Z", "type": "commit"}, {"oid": "c8d849b11d89e2ed7fa6aebaec70415be5b6476a", "url": "https://github.com/apache/iotdb/commit/c8d849b11d89e2ed7fa6aebaec70415be5b6476a", "message": "time unit", "committedDate": "2021-01-14T03:15:13Z", "type": "commit"}, {"oid": "07ce7ff3ff31e4f3bb968d4a416e34c13ed16860", "url": "https://github.com/apache/iotdb/commit/07ce7ff3ff31e4f3bb968d4a416e34c13ed16860", "message": "merge master", "committedDate": "2021-01-19T01:56:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg4MjAwNA==", "url": "https://github.com/apache/iotdb/pull/2358#discussion_r559882004", "bodyText": "You should use class variable memSerializeTime rather than this local variable", "author": "SilverNarcissus", "createdAt": "2021-01-19T02:49:34Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/flush/MemTableFlushTask.java", "diffHunk": "@@ -170,94 +189,104 @@ private void writeOneSeries(TVList tvPairs, IChunkWriter seriesWriterImpl,\n     @Override\n     public void run() {\n       long memSerializeTime = 0;", "originalCommit": "07ce7ff3ff31e4f3bb968d4a416e34c13ed16860", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk2ODMxOQ==", "url": "https://github.com/apache/iotdb/pull/2358#discussion_r559968319", "bodyText": "Fixed~", "author": "HTHou", "createdAt": "2021-01-19T07:42:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg4MjAwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg4MjU5MA==", "url": "https://github.com/apache/iotdb/pull/2358#discussion_r559882590", "bodyText": "These two variable will be written and read by different thread without locking. The situation is only one thread to write, so no locking is reasonable, but they should be volatile so they can be seen by another thread.", "author": "SilverNarcissus", "createdAt": "2021-01-19T02:51:59Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/flush/MemTableFlushTask.java", "diffHunk": "@@ -43,18 +46,23 @@\n   private static final Logger LOGGER = LoggerFactory.getLogger(MemTableFlushTask.class);\n   private static final FlushSubTaskPoolManager SUB_TASK_POOL_MANAGER = FlushSubTaskPoolManager\n       .getInstance();\n+  private static IoTDBConfig config = IoTDBDescriptor.getInstance().getConfig();\n   private final Future<?> encodingTaskFuture;\n   private final Future<?> ioTaskFuture;\n   private RestorableTsFileIOWriter writer;\n \n-  private final ConcurrentLinkedQueue<Object> ioTaskQueue = new ConcurrentLinkedQueue<>();\n-  private final ConcurrentLinkedQueue<Object> encodingTaskQueue = new ConcurrentLinkedQueue<>();\n+  private final LinkedBlockingQueue<Object> encodingTaskQueue = new LinkedBlockingQueue<>();\n+  private final LinkedBlockingQueue<Object> ioTaskQueue = (config.isEnableMemControl()\n+      && SystemInfo.getInstance().isEncodingFasterThanIo())\n+          ? new LinkedBlockingQueue<>(config.getIoTaskQueueSizeForFlushing())\n+          : new LinkedBlockingQueue<>();\n+\n   private String storageGroup;\n \n   private IMemTable memTable;\n \n-  private volatile boolean noMoreEncodingTask = false;\n-  private volatile boolean noMoreIOTask = false;\n+  private long memSerializeTime = 0L;\n+  private long ioTime = 0L;", "originalCommit": "07ce7ff3ff31e4f3bb968d4a416e34c13ed16860", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk2ODQwMw==", "url": "https://github.com/apache/iotdb/pull/2358#discussion_r559968403", "bodyText": "Fixed~", "author": "HTHou", "createdAt": "2021-01-19T07:42:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg4MjU5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg4Mjg2OA==", "url": "https://github.com/apache/iotdb/pull/2358#discussion_r559882868", "bodyText": "You should use class variable ioTime rather than this local variable", "author": "SilverNarcissus", "createdAt": "2021-01-19T02:53:04Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/flush/MemTableFlushTask.java", "diffHunk": "@@ -170,94 +189,104 @@ private void writeOneSeries(TVList tvPairs, IChunkWriter seriesWriterImpl,\n     @Override\n     public void run() {\n       long memSerializeTime = 0;\n-      boolean noMoreMessages = false;\n       LOGGER.debug(\"Storage group {} memtable flushing to file {} starts to encoding data.\",\n-              storageGroup, writer.getFile().getName());\n+          storageGroup, writer.getFile().getName());\n       while (true) {\n-        if (noMoreEncodingTask) {\n-          noMoreMessages = true;\n+\n+        Object task = null;\n+        try {\n+          task = encodingTaskQueue.take();\n+        } catch (InterruptedException e1) {\n+          LOGGER.error(\"Take task into ioTaskQueue Interrupted\");\n+          Thread.currentThread().interrupt();\n+          break;\n         }\n-        Object task = encodingTaskQueue.poll();\n-        if (task == null) {\n-          if (noMoreMessages) {\n-            break;\n-          }\n+        if (task instanceof StartFlushGroupIOTask || task instanceof EndChunkGroupIoTask) {\n           try {\n-            TimeUnit.MILLISECONDS.sleep(10);\n+            ioTaskQueue.put(task);\n           } catch (@SuppressWarnings(\"squid:S2142\") InterruptedException e) {\n             LOGGER.error(\"Storage group {} memtable flushing to file {}, encoding task is interrupted.\",\n                 storageGroup, writer.getFile().getName(), e);\n             // generally it is because the thread pool is shutdown so the task should be aborted\n             break;\n           }\n+        } else if (task instanceof TaskEnd) {\n+          break;\n         } else {\n-          if (task instanceof StartFlushGroupIOTask || task instanceof EndChunkGroupIoTask) {\n-            ioTaskQueue.add(task);\n-          } else {\n-            long starTime = System.currentTimeMillis();\n-            Pair<TVList, MeasurementSchema> encodingMessage = (Pair<TVList, MeasurementSchema>) task;\n-            IChunkWriter seriesWriter = new ChunkWriterImpl(encodingMessage.right);\n-            writeOneSeries(encodingMessage.left, seriesWriter, encodingMessage.right.getType());\n-            ioTaskQueue.add(seriesWriter);\n-            memSerializeTime += System.currentTimeMillis() - starTime;\n+          long starTime = System.currentTimeMillis();\n+          Pair<TVList, MeasurementSchema> encodingMessage = (Pair<TVList, MeasurementSchema>) task;\n+          IChunkWriter seriesWriter = new ChunkWriterImpl(encodingMessage.right);\n+          writeOneSeries(encodingMessage.left, seriesWriter, encodingMessage.right.getType());\n+          seriesWriter.sealCurrentPage();\n+          seriesWriter.clearPageWriter();\n+          try {\n+            ioTaskQueue.put(seriesWriter);\n+          } catch (InterruptedException e) {\n+            LOGGER.error(\"Put task into ioTaskQueue Interrupted\");\n+            Thread.currentThread().interrupt();\n           }\n+          memSerializeTime += System.currentTimeMillis() - starTime;\n         }\n       }\n-      noMoreIOTask = true;\n-      LOGGER.debug(\"Storage group {}, flushing memtable into file {}: Encoding data cost \"\n-              + \"{} ms.\",\n+      try {\n+        ioTaskQueue.put(new TaskEnd());\n+      } catch (InterruptedException e) {\n+        LOGGER.error(\"Put task into ioTaskQueue Interrupted\");\n+        Thread.currentThread().interrupt();\n+      }\n+      \n+      LOGGER.debug(\"Storage group {}, flushing memtable {} into disk: Encoding data cost \"\n+          + \"{} ms.\",\n           storageGroup, writer.getFile().getName(), memSerializeTime);\n     }\n   };\n \n   @SuppressWarnings(\"squid:S135\")\n   private Runnable ioTask = () -> {\n     long ioTime = 0;", "originalCommit": "07ce7ff3ff31e4f3bb968d4a416e34c13ed16860", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk2ODQ1OA==", "url": "https://github.com/apache/iotdb/pull/2358#discussion_r559968458", "bodyText": "Fixed~", "author": "HTHou", "createdAt": "2021-01-19T07:42:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTg4Mjg2OA=="}], "type": "inlineReview"}, {"oid": "a6580a09f20074909f5e2c86cae5f0dd33358a35", "url": "https://github.com/apache/iotdb/commit/a6580a09f20074909f5e2c86cae5f0dd33358a35", "message": "fix review", "committedDate": "2021-01-19T07:07:26Z", "type": "commit"}]}