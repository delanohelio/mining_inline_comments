{"pr_number": 796, "pr_title": "[IoTDB-468] Restructure QueryPlan", "pr_createdAt": "2020-02-12T06:37:28Z", "pr_url": "https://github.com/apache/iotdb/pull/796", "timeline": [{"oid": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be", "url": "https://github.com/apache/iotdb/commit/d84de4d5565de3134d0eb9a8b9436fe9eab1f0be", "message": "Restructure QueryPlan", "committedDate": "2020-02-12T06:31:52Z", "type": "commit"}, {"oid": "d54050b5f747913df6e59ac713499b284cb708b0", "url": "https://github.com/apache/iotdb/commit/d54050b5f747913df6e59ac713499b284cb708b0", "message": "Modify isGroupByDevice to isAlignByDevice", "committedDate": "2020-02-12T08:24:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3Nzk2Nw==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378077967", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private List<String> measurements; // for group by device sql, e.g. temperature\n          \n          \n            \n              private List<String> measurements; // e.g. temperature\n          \n      \n    \n    \n  \n\ngive a more complex example, such as m1, m2, m3", "author": "qiaojialin", "createdAt": "2020-02-12T07:29:10Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // for group by device sql, e.g. temperature", "originalCommit": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4Nzg0Nw==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378087847", "bodyText": "What's the difference between this measurements with the paths in QueryPlan?\nRefactor the organization or rename this field", "author": "qiaojialin", "createdAt": "2020-02-12T07:58:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3Nzk2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE0MzMxNA==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378143314", "bodyText": "Actually, the paths in QueryPlan are paths of all devices. It's for verification and complete DataTypeMap to execute the datatypes for the execution paths this time in DataSet.", "author": "Alima777", "createdAt": "2020-02-12T09:52:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3Nzk2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3ODA3OQ==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378078079", "bodyText": "the same as above", "author": "qiaojialin", "createdAt": "2020-02-12T07:29:27Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // for group by device sql, e.g. temperature\n+  private Map<String, Set<String>> deviceToMeasurementsMap; // for group by device sql, e.g. root.ln.d1 -> temperature", "originalCommit": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE0MzQ5Nw==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378143497", "bodyText": "Fixed.", "author": "Alima777", "createdAt": "2020-02-12T09:53:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3ODA3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3ODcyNw==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378078727", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Map<String, TSDataType> dataTypeConsistencyChecker; // for group by device sql, e.g. root.ln.d1.temperature -> Float\n          \n          \n            \n              private Map<String, TSDataType> seriesTypeMap; // e.g. root.ln.d1.temperature -> Float\n          \n      \n    \n    \n  \n\nmake the field name clear", "author": "qiaojialin", "createdAt": "2020-02-12T07:31:26Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // for group by device sql, e.g. temperature\n+  private Map<String, Set<String>> deviceToMeasurementsMap; // for group by device sql, e.g. root.ln.d1 -> temperature\n+  private Map<String, TSDataType> dataTypeConsistencyChecker; // for group by device sql, e.g. root.ln.d1.temperature -> Float", "originalCommit": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE0NTEzMg==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378145132", "bodyText": "Add a comment to explain it.", "author": "Alima777", "createdAt": "2020-02-12T09:55:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3ODcyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3ODk4NA==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378078984", "bodyText": "why there isn't a RawDataQueryPan", "author": "qiaojialin", "createdAt": "2020-02-12T07:32:14Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // for group by device sql, e.g. temperature\n+  private Map<String, Set<String>> deviceToMeasurementsMap; // for group by device sql, e.g. root.ln.d1 -> temperature\n+  private Map<String, TSDataType> dataTypeConsistencyChecker; // for group by device sql, e.g. root.ln.d1.temperature -> Float\n+  private Map<String, IExpression> deviceToFilterMap; // for group by device sql\n+\n+  private GroupByPlan groupByPlan;\n+  private FillQueryPlan fillQueryPlan;\n+  private AggregationPlan aggregationPlan;", "originalCommit": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE0NTUwNw==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378145507", "bodyText": "Of course there isn't a RawDataQueryPan. We don't need parameters in it.", "author": "Alima777", "createdAt": "2020-02-12T09:56:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3ODk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyNzQxNg==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378227416", "bodyText": "but you need to do a RawData query for each device a", "author": "qiaojialin", "createdAt": "2020-02-12T12:44:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3ODk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMzMDc5Nw==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378330797", "bodyText": "I have added a RawDataQueryPlan in AlignByDeviceDataSet.", "author": "Alima777", "createdAt": "2020-02-12T15:38:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3ODk4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3OTE4Ng==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378079186", "bodyText": "put fields in the front of the class", "author": "qiaojialin", "createdAt": "2020-02-12T07:32:48Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // for group by device sql, e.g. temperature\n+  private Map<String, Set<String>> deviceToMeasurementsMap; // for group by device sql, e.g. root.ln.d1 -> temperature\n+  private Map<String, TSDataType> dataTypeConsistencyChecker; // for group by device sql, e.g. root.ln.d1.temperature -> Float\n+  private Map<String, IExpression> deviceToFilterMap; // for group by device sql\n+\n+  private GroupByPlan groupByPlan;\n+  private FillQueryPlan fillQueryPlan;\n+  private AggregationPlan aggregationPlan;\n+\n+  public AlignByDevicePlan() {\n+    super();\n+  }\n+\n+  public AlignByDevicePlan(boolean isQuery, Operator.OperatorType operatorType) {\n+    super(isQuery, operatorType);\n+  }\n+\n+  public void setMeasurements(List<String> measurements) {\n+    this.measurements = measurements;\n+  }\n+\n+  public List<String> getMeasurements() {\n+    return measurements;\n+  }\n+\n+  public void setMeasurementsGroupByDevice(\n+      Map<String, Set<String>> deviceToMeasurementsMap) {\n+    this.deviceToMeasurementsMap = deviceToMeasurementsMap;\n+  }\n+\n+  public Map<String, Set<String>> getDeviceToMeasurementsMap() {\n+    return deviceToMeasurementsMap;\n+  }\n+\n+  public void setDataTypeConsistencyChecker(\n+      Map<String, TSDataType> dataTypeConsistencyChecker) {\n+    this.dataTypeConsistencyChecker = dataTypeConsistencyChecker;\n+  }\n+\n+  public Map<String, TSDataType> getDataTypeConsistencyChecker() {\n+    return dataTypeConsistencyChecker;\n+  }\n+\n+  public Map<String, IExpression> getDeviceToFilterMap() {\n+    return deviceToFilterMap;\n+  }\n+\n+  public void setDeviceToFilterMap(Map<String, IExpression> deviceToFilterMap) {\n+    this.deviceToFilterMap = deviceToFilterMap;\n+  }\n+\n+  public GroupByPlan getGroupByPlan() {\n+    return groupByPlan;\n+  }\n+\n+  public void setGroupByPlan(GroupByPlan groupByPlan) {\n+    this.groupByPlan = groupByPlan;\n+    this.setOperatorType(OperatorType.GROUPBY);\n+  }\n+\n+  public FillQueryPlan getFillQueryPlan() {\n+    return fillQueryPlan;\n+  }\n+\n+  public void setFillQueryPlan(FillQueryPlan fillQueryPlan) {\n+    this.fillQueryPlan = fillQueryPlan;\n+    this.setOperatorType(OperatorType.FILL);\n+  }\n+\n+  public AggregationPlan getAggregationPlan() {\n+    return aggregationPlan;\n+  }\n+\n+  public void setAggregationPlan(AggregationPlan aggregationPlan) {\n+    this.aggregationPlan = aggregationPlan;\n+    this.setOperatorType(Operator.OperatorType.AGGREGATION);\n+  }\n+\n+  //the measurements that do not exist in any device,\n+  // data type is considered as Boolean. The value is considered as null\n+  private List<String> notExistMeasurements = new ArrayList<>();\n+  ; // for group by device sql\n+  private List<Integer> positionOfNotExistMeasurements = new ArrayList<>(); // for group by device sql\n+  //the measurements that have quotation mark. e.g., \"abc\",\n+  // '11', the data type is considered as String and the value  is considered is the same with measurement name\n+  private List<String> constMeasurements = new ArrayList<>(); // for group by device sql\n+  private List<Integer> positionOfConstMeasurements = new ArrayList<>(); // for group by device sql", "originalCommit": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE0NTY2Mw==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378145663", "bodyText": "OK.", "author": "Alima777", "createdAt": "2020-02-12T09:56:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3OTE4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3OTYwMg==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378079602", "bodyText": "remove this", "author": "qiaojialin", "createdAt": "2020-02-12T07:34:07Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // for group by device sql, e.g. temperature\n+  private Map<String, Set<String>> deviceToMeasurementsMap; // for group by device sql, e.g. root.ln.d1 -> temperature\n+  private Map<String, TSDataType> dataTypeConsistencyChecker; // for group by device sql, e.g. root.ln.d1.temperature -> Float\n+  private Map<String, IExpression> deviceToFilterMap; // for group by device sql\n+\n+  private GroupByPlan groupByPlan;\n+  private FillQueryPlan fillQueryPlan;\n+  private AggregationPlan aggregationPlan;\n+\n+  public AlignByDevicePlan() {\n+    super();\n+  }\n+\n+  public AlignByDevicePlan(boolean isQuery, Operator.OperatorType operatorType) {\n+    super(isQuery, operatorType);\n+  }\n+\n+  public void setMeasurements(List<String> measurements) {\n+    this.measurements = measurements;\n+  }\n+\n+  public List<String> getMeasurements() {\n+    return measurements;\n+  }\n+\n+  public void setMeasurementsGroupByDevice(\n+      Map<String, Set<String>> deviceToMeasurementsMap) {\n+    this.deviceToMeasurementsMap = deviceToMeasurementsMap;\n+  }\n+\n+  public Map<String, Set<String>> getDeviceToMeasurementsMap() {\n+    return deviceToMeasurementsMap;\n+  }\n+\n+  public void setDataTypeConsistencyChecker(\n+      Map<String, TSDataType> dataTypeConsistencyChecker) {\n+    this.dataTypeConsistencyChecker = dataTypeConsistencyChecker;\n+  }\n+\n+  public Map<String, TSDataType> getDataTypeConsistencyChecker() {\n+    return dataTypeConsistencyChecker;\n+  }\n+\n+  public Map<String, IExpression> getDeviceToFilterMap() {\n+    return deviceToFilterMap;\n+  }\n+\n+  public void setDeviceToFilterMap(Map<String, IExpression> deviceToFilterMap) {\n+    this.deviceToFilterMap = deviceToFilterMap;\n+  }\n+\n+  public GroupByPlan getGroupByPlan() {\n+    return groupByPlan;\n+  }\n+\n+  public void setGroupByPlan(GroupByPlan groupByPlan) {\n+    this.groupByPlan = groupByPlan;\n+    this.setOperatorType(OperatorType.GROUPBY);\n+  }\n+\n+  public FillQueryPlan getFillQueryPlan() {\n+    return fillQueryPlan;\n+  }\n+\n+  public void setFillQueryPlan(FillQueryPlan fillQueryPlan) {\n+    this.fillQueryPlan = fillQueryPlan;\n+    this.setOperatorType(OperatorType.FILL);\n+  }\n+\n+  public AggregationPlan getAggregationPlan() {\n+    return aggregationPlan;\n+  }\n+\n+  public void setAggregationPlan(AggregationPlan aggregationPlan) {\n+    this.aggregationPlan = aggregationPlan;\n+    this.setOperatorType(Operator.OperatorType.AGGREGATION);\n+  }\n+\n+  //the measurements that do not exist in any device,\n+  // data type is considered as Boolean. The value is considered as null\n+  private List<String> notExistMeasurements = new ArrayList<>();\n+  ; // for group by device sql", "originalCommit": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE0NjQ4Ng==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378146486", "bodyText": "Fixed.", "author": "Alima777", "createdAt": "2020-02-12T09:58:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3OTYwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4MjczNQ==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378082735", "bodyText": "min what?", "author": "qiaojialin", "createdAt": "2020-02-12T07:43:20Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // for group by device sql, e.g. temperature\n+  private Map<String, Set<String>> deviceToMeasurementsMap; // for group by device sql, e.g. root.ln.d1 -> temperature\n+  private Map<String, TSDataType> dataTypeConsistencyChecker; // for group by device sql, e.g. root.ln.d1.temperature -> Float\n+  private Map<String, IExpression> deviceToFilterMap; // for group by device sql\n+\n+  private GroupByPlan groupByPlan;\n+  private FillQueryPlan fillQueryPlan;\n+  private AggregationPlan aggregationPlan;\n+\n+  public AlignByDevicePlan() {\n+    super();\n+  }\n+\n+  public AlignByDevicePlan(boolean isQuery, Operator.OperatorType operatorType) {\n+    super(isQuery, operatorType);\n+  }\n+\n+  public void setMeasurements(List<String> measurements) {\n+    this.measurements = measurements;\n+  }\n+\n+  public List<String> getMeasurements() {\n+    return measurements;\n+  }\n+\n+  public void setMeasurementsGroupByDevice(\n+      Map<String, Set<String>> deviceToMeasurementsMap) {\n+    this.deviceToMeasurementsMap = deviceToMeasurementsMap;\n+  }\n+\n+  public Map<String, Set<String>> getDeviceToMeasurementsMap() {\n+    return deviceToMeasurementsMap;\n+  }\n+\n+  public void setDataTypeConsistencyChecker(\n+      Map<String, TSDataType> dataTypeConsistencyChecker) {\n+    this.dataTypeConsistencyChecker = dataTypeConsistencyChecker;\n+  }\n+\n+  public Map<String, TSDataType> getDataTypeConsistencyChecker() {\n+    return dataTypeConsistencyChecker;\n+  }\n+\n+  public Map<String, IExpression> getDeviceToFilterMap() {\n+    return deviceToFilterMap;\n+  }\n+\n+  public void setDeviceToFilterMap(Map<String, IExpression> deviceToFilterMap) {\n+    this.deviceToFilterMap = deviceToFilterMap;\n+  }\n+\n+  public GroupByPlan getGroupByPlan() {\n+    return groupByPlan;\n+  }\n+\n+  public void setGroupByPlan(GroupByPlan groupByPlan) {\n+    this.groupByPlan = groupByPlan;\n+    this.setOperatorType(OperatorType.GROUPBY);\n+  }\n+\n+  public FillQueryPlan getFillQueryPlan() {\n+    return fillQueryPlan;\n+  }\n+\n+  public void setFillQueryPlan(FillQueryPlan fillQueryPlan) {\n+    this.fillQueryPlan = fillQueryPlan;\n+    this.setOperatorType(OperatorType.FILL);\n+  }\n+\n+  public AggregationPlan getAggregationPlan() {\n+    return aggregationPlan;\n+  }\n+\n+  public void setAggregationPlan(AggregationPlan aggregationPlan) {\n+    this.aggregationPlan = aggregationPlan;\n+    this.setOperatorType(Operator.OperatorType.AGGREGATION);\n+  }\n+\n+  //the measurements that do not exist in any device,\n+  // data type is considered as Boolean. The value is considered as null\n+  private List<String> notExistMeasurements = new ArrayList<>();\n+  ; // for group by device sql\n+  private List<Integer> positionOfNotExistMeasurements = new ArrayList<>(); // for group by device sql\n+  //the measurements that have quotation mark. e.g., \"abc\",\n+  // '11', the data type is considered as String and the value  is considered is the same with measurement name\n+  private List<String> constMeasurements = new ArrayList<>(); // for group by device sql\n+  private List<Integer> positionOfConstMeasurements = new ArrayList<>(); // for group by device sql\n+\n+  //we use the following algorithm to reproduce the order of measurements that user writes.\n+  //suppose user writes SELECT 'c1',a1,b1,b2,'c2',a2,a3,'c3',b3,a4,a5 FROM ... where for each a_i\n+  // column there is at least one device having it, and for each b_i column there is no device\n+  // having it, and 'c_i' is a const column.\n+  // Then, measurements = {a1, a2, a3, a4, a5};\n+  // notExistMeasurements = {b1, b2, b3}, and positionOfNotExistMeasurements = {2, 3, 8};\n+  // constMeasurements = {'c1', 'c2', 'c3'}, and positionOfConstMeasurements = {0, 4, 7}.\n+  // When to reproduce the order of measurements. The pseudocode is:\n+  //<pre>\n+  // current = 0;\n+  // if (min(notExist, const) <= current) {", "originalCommit": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE0ODI4Mg==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378148282", "bodyText": "I don't understand it too. Let's call that guy writing this comment to modify.", "author": "Alima777", "createdAt": "2020-02-12T10:01:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4MjczNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI0ODMwOA==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378248308", "bodyText": "Hi, I am the author :-D\nNotice that:\npositionOfNotExistMeasurements = {2, 3, 8} \npositionOfConstMeasurements = {0, 4, 7}\n\nThen\nif (min(notExist, const) <= current)\n\nmeans if min(positionOfNotExistMeasurements[i], positionOfConstMeasurements[j]) < current", "author": "jixuan1989", "createdAt": "2020-02-12T13:27:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4MjczNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5MDI3Mg==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378090272", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (queryOperator.isGroupByDevice()) {\n          \n          \n            \n                if (queryOperator.isAlignByDevice()) {", "author": "qiaojialin", "createdAt": "2020-02-12T08:04:51Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "diffHunk": "@@ -242,16 +244,26 @@ private PhysicalPlan transformQuery(QueryOperator queryOperator)\n       ((AggregationPlan) queryPlan)\n           .setAggregations(queryOperator.getSelectOperator().getAggregations());\n     } else {\n-      queryPlan = new QueryPlan();\n+      queryPlan = new RawDataQueryPlan();\n     }\n     if (queryOperator.isGroupByDevice()) {", "originalCommit": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5MDYzMw==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378090633", "bodyText": "Futher, should the QueryOperator be separate to different type?", "author": "qiaojialin", "createdAt": "2020-02-12T08:05:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5MDI3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE0ODcyOQ==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378148729", "bodyText": "I think it's nice now.", "author": "Alima777", "createdAt": "2020-02-12T10:02:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5MDI3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5MTkxMw==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378091913", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  ((AlignByDevicePlan) queryPlan).setDataTypeConsistencyChecker(dataTypeConsistencyChecker);\n          \n          \n            \n                  ((AlignByDevicePlan) queryPlan).setDataTypeConsistencyChecker(seriesTypeMap);", "author": "qiaojialin", "createdAt": "2020-02-12T08:09:29Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "diffHunk": "@@ -373,17 +386,17 @@ private PhysicalPlan transformQuery(QueryOperator queryOperator)\n       }\n \n       // assigns to queryPlan\n-      queryPlan.setGroupByDevice(true);\n-      queryPlan.setMeasurements(measurements);\n-      queryPlan.setMeasurementsGroupByDevice(measurementsGroupByDevice);\n-      queryPlan.setDataTypeConsistencyChecker(dataTypeConsistencyChecker);\n+      ((AlignByDevicePlan) queryPlan).setMeasurements(measurements);\n+      ((AlignByDevicePlan) queryPlan).setMeasurementsGroupByDevice(deviceToMeasurementsMap);\n+      ((AlignByDevicePlan) queryPlan).setDataTypeConsistencyChecker(dataTypeConsistencyChecker);", "originalCommit": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE0ODg0Nw==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378148847", "bodyText": "Fixed.", "author": "Alima777", "createdAt": "2020-02-12T10:02:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5MTkxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5MzA2Nw==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378093067", "bodyText": "This line could be put in the last, then you do not need to convert query plan to an AlignByDevicePlan each time", "author": "qiaojialin", "createdAt": "2020-02-12T08:12:32Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "diffHunk": "@@ -242,16 +244,26 @@ private PhysicalPlan transformQuery(QueryOperator queryOperator)\n       ((AggregationPlan) queryPlan)\n           .setAggregations(queryOperator.getSelectOperator().getAggregations());\n     } else {\n-      queryPlan = new QueryPlan();\n+      queryPlan = new RawDataQueryPlan();\n     }\n     if (queryOperator.isGroupByDevice()) {\n-      // below is the core realization of GROUP_BY_DEVICE sql logic\n+      // below is the core realization of ALIGN_BY_DEVICE sql logic\n+      AlignByDevicePlan alignByDevicePlan = new AlignByDevicePlan();\n+      if (queryPlan instanceof GroupByPlan) {\n+        alignByDevicePlan.setGroupByPlan((GroupByPlan) queryPlan);\n+      } else if (queryPlan instanceof FillQueryPlan) {\n+        alignByDevicePlan.setFillQueryPlan((FillQueryPlan) queryPlan);\n+      } else if (queryPlan instanceof AggregationPlan) {\n+        alignByDevicePlan.setAggregationPlan((AggregationPlan) queryPlan);\n+      }\n+\n+      queryPlan = alignByDevicePlan;", "originalCommit": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE1NzAzMg==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378157032", "bodyText": "Thank you for advice! Fixed.", "author": "Alima777", "createdAt": "2020-02-12T10:17:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5MzA2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5MzU1NQ==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378093555", "bodyText": "There is a typo in line 426, divice", "author": "qiaojialin", "createdAt": "2020-02-12T08:13:51Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "diffHunk": "@@ -395,7 +408,7 @@ private PhysicalPlan transformQuery(QueryOperator queryOperator)\n \n       if (filterOperator != null) {\n         IExpression expression = filterOperator.transformToExpression();\n-        queryPlan.setExpression(expression);\n+        ((RawDataQueryPlan) queryPlan).setExpression(expression);\n       }\n     }\n     generateDataTypes(queryPlan);", "originalCommit": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE1NzQ5NA==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378157494", "bodyText": "Fixed.", "author": "Alima777", "createdAt": "2020-02-12T10:18:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5MzU1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5NDk3Ng==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378094976", "bodyText": "remove the for group by device comment", "author": "qiaojialin", "createdAt": "2020-02-12T08:17:16Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -80,39 +84,39 @@\n   private int[] currentColumnMapRelation;", "originalCommit": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE1NzkwMA==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378157900", "bodyText": "Fixed.", "author": "Alima777", "createdAt": "2020-02-12T10:18:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5NDk3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5OTE5OA==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378099198", "bodyText": "remove this comment", "author": "qiaojialin", "createdAt": "2020-02-12T08:26:52Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -80,39 +84,39 @@\n   private int[] currentColumnMapRelation;\n   private Map<Path, TSDataType> tsDataTypeMap;\n \n-  public DeviceIterateDataSet(QueryPlan queryPlan, QueryContext context,\n+  public DeviceIterateDataSet(AlignByDevicePlan alignByDevicePlan, QueryContext context,\n       IQueryRouter queryRouter) {\n-    super(null, queryPlan.getDataTypes());\n+    super(null, alignByDevicePlan.getDataTypes());\n \n     // get deduplicated measurement columns (already deduplicated in TSServiceImpl.executeDataQuery)\n-    this.deduplicatedMeasurementColumns = queryPlan.getMeasurements();\n-    this.tsDataTypeMap = queryPlan.getDataTypeMapping();\n+    this.deduplicatedMeasurementColumns = alignByDevicePlan.getMeasurements();\n+    this.tsDataTypeMap = alignByDevicePlan.getDataTypeMapping();\n     this.queryRouter = queryRouter;\n     this.context = context;\n-    this.measurementColumnsGroupByDevice = queryPlan.getMeasurementsGroupByDevice();\n-    this.deviceToFilterMap = queryPlan.getDeviceToFilterMap();\n-    this.notExistMeasurements = queryPlan.getNotExistMeasurements();\n-    this.constMeasurements = queryPlan.getConstMeasurements();\n-    this.positionOfNotExistMeasurements = queryPlan.getPositionOfNotExistMeasurements();\n-    this.positionOfConstMeasurements = queryPlan.getPositionOfConstMeasurements();\n+    this.measurementColumnsGroupByDevice = alignByDevicePlan.getDeviceToMeasurementsMap();\n+    this.deviceToFilterMap = alignByDevicePlan.getDeviceToFilterMap();\n+    this.notExistMeasurements = alignByDevicePlan.getNotExistMeasurements();\n+    this.constMeasurements = alignByDevicePlan.getConstMeasurements();\n+    this.positionOfNotExistMeasurements = alignByDevicePlan.getPositionOfNotExistMeasurements();\n+    this.positionOfConstMeasurements = alignByDevicePlan.getPositionOfConstMeasurements();\n     //BuildOutDataTypes();\n \n-    if (queryPlan instanceof GroupByPlan) {\n+    if (alignByDevicePlan.getGroupByPlan() != null) {\n       this.dataSetType = DataSetType.GROUPBY;\n       // assign parameters", "originalCommit": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE2NzA2MQ==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378167061", "bodyText": "Fixed.", "author": "Alima777", "createdAt": "2020-02-12T10:35:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5OTE5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5OTM5MA==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378099390", "bodyText": "remove this", "author": "qiaojialin", "createdAt": "2020-02-12T08:27:19Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -80,39 +84,39 @@\n   private int[] currentColumnMapRelation;\n   private Map<Path, TSDataType> tsDataTypeMap;\n \n-  public DeviceIterateDataSet(QueryPlan queryPlan, QueryContext context,\n+  public DeviceIterateDataSet(AlignByDevicePlan alignByDevicePlan, QueryContext context,\n       IQueryRouter queryRouter) {\n-    super(null, queryPlan.getDataTypes());\n+    super(null, alignByDevicePlan.getDataTypes());\n \n     // get deduplicated measurement columns (already deduplicated in TSServiceImpl.executeDataQuery)\n-    this.deduplicatedMeasurementColumns = queryPlan.getMeasurements();\n-    this.tsDataTypeMap = queryPlan.getDataTypeMapping();\n+    this.deduplicatedMeasurementColumns = alignByDevicePlan.getMeasurements();\n+    this.tsDataTypeMap = alignByDevicePlan.getDataTypeMapping();\n     this.queryRouter = queryRouter;\n     this.context = context;\n-    this.measurementColumnsGroupByDevice = queryPlan.getMeasurementsGroupByDevice();\n-    this.deviceToFilterMap = queryPlan.getDeviceToFilterMap();\n-    this.notExistMeasurements = queryPlan.getNotExistMeasurements();\n-    this.constMeasurements = queryPlan.getConstMeasurements();\n-    this.positionOfNotExistMeasurements = queryPlan.getPositionOfNotExistMeasurements();\n-    this.positionOfConstMeasurements = queryPlan.getPositionOfConstMeasurements();\n+    this.measurementColumnsGroupByDevice = alignByDevicePlan.getDeviceToMeasurementsMap();\n+    this.deviceToFilterMap = alignByDevicePlan.getDeviceToFilterMap();\n+    this.notExistMeasurements = alignByDevicePlan.getNotExistMeasurements();\n+    this.constMeasurements = alignByDevicePlan.getConstMeasurements();\n+    this.positionOfNotExistMeasurements = alignByDevicePlan.getPositionOfNotExistMeasurements();\n+    this.positionOfConstMeasurements = alignByDevicePlan.getPositionOfConstMeasurements();\n     //BuildOutDataTypes();", "originalCommit": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE2NzA0MQ==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378167041", "bodyText": "Fixed.", "author": "Alima777", "createdAt": "2020-02-12T10:35:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5OTM5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5OTQ5MQ==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378099491", "bodyText": "remove this", "author": "qiaojialin", "createdAt": "2020-02-12T08:27:33Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -80,39 +84,39 @@\n   private int[] currentColumnMapRelation;\n   private Map<Path, TSDataType> tsDataTypeMap;\n \n-  public DeviceIterateDataSet(QueryPlan queryPlan, QueryContext context,\n+  public DeviceIterateDataSet(AlignByDevicePlan alignByDevicePlan, QueryContext context,\n       IQueryRouter queryRouter) {\n-    super(null, queryPlan.getDataTypes());\n+    super(null, alignByDevicePlan.getDataTypes());\n \n     // get deduplicated measurement columns (already deduplicated in TSServiceImpl.executeDataQuery)\n-    this.deduplicatedMeasurementColumns = queryPlan.getMeasurements();\n-    this.tsDataTypeMap = queryPlan.getDataTypeMapping();\n+    this.deduplicatedMeasurementColumns = alignByDevicePlan.getMeasurements();\n+    this.tsDataTypeMap = alignByDevicePlan.getDataTypeMapping();\n     this.queryRouter = queryRouter;\n     this.context = context;\n-    this.measurementColumnsGroupByDevice = queryPlan.getMeasurementsGroupByDevice();\n-    this.deviceToFilterMap = queryPlan.getDeviceToFilterMap();\n-    this.notExistMeasurements = queryPlan.getNotExistMeasurements();\n-    this.constMeasurements = queryPlan.getConstMeasurements();\n-    this.positionOfNotExistMeasurements = queryPlan.getPositionOfNotExistMeasurements();\n-    this.positionOfConstMeasurements = queryPlan.getPositionOfConstMeasurements();\n+    this.measurementColumnsGroupByDevice = alignByDevicePlan.getDeviceToMeasurementsMap();\n+    this.deviceToFilterMap = alignByDevicePlan.getDeviceToFilterMap();\n+    this.notExistMeasurements = alignByDevicePlan.getNotExistMeasurements();\n+    this.constMeasurements = alignByDevicePlan.getConstMeasurements();\n+    this.positionOfNotExistMeasurements = alignByDevicePlan.getPositionOfNotExistMeasurements();\n+    this.positionOfConstMeasurements = alignByDevicePlan.getPositionOfConstMeasurements();\n     //BuildOutDataTypes();\n \n-    if (queryPlan instanceof GroupByPlan) {\n+    if (alignByDevicePlan.getGroupByPlan() != null) {\n       this.dataSetType = DataSetType.GROUPBY;\n       // assign parameters\n-      this.unit = ((GroupByPlan) queryPlan).getInterval();\n-      this.slidingStep = ((GroupByPlan) queryPlan).getSlidingStep();\n-      this.startTime = ((GroupByPlan) queryPlan).getStartTime();\n-      this.endTime = ((GroupByPlan) queryPlan).getEndTime();\n+      this.unit = alignByDevicePlan.getGroupByPlan().getInterval();\n+      this.slidingStep = alignByDevicePlan.getGroupByPlan().getSlidingStep();\n+      this.startTime = alignByDevicePlan.getGroupByPlan().getStartTime();\n+      this.endTime = alignByDevicePlan.getGroupByPlan().getEndTime();\n \n-    } else if (queryPlan instanceof AggregationPlan) {\n+    } else if (alignByDevicePlan.getAggregationPlan() != null) {\n       this.dataSetType = DataSetType.AGGREGATE;\n \n-    } else if (queryPlan instanceof FillQueryPlan) {\n+    } else if (alignByDevicePlan.getFillQueryPlan() != null) {\n       this.dataSetType = DataSetType.FILL;\n       // assign parameters", "originalCommit": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE1OTA0NQ==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378159045", "bodyText": "Fixed.", "author": "Alima777", "createdAt": "2020-02-12T10:20:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA5OTQ5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEyNjE3Ng==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378126176", "bodyText": "We could add a queryType in AlignByDevicePlan, and use switch here", "author": "qiaojialin", "createdAt": "2020-02-12T09:22:19Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -80,39 +84,39 @@\n   private int[] currentColumnMapRelation;\n   private Map<Path, TSDataType> tsDataTypeMap;\n \n-  public DeviceIterateDataSet(QueryPlan queryPlan, QueryContext context,\n+  public DeviceIterateDataSet(AlignByDevicePlan alignByDevicePlan, QueryContext context,\n       IQueryRouter queryRouter) {\n-    super(null, queryPlan.getDataTypes());\n+    super(null, alignByDevicePlan.getDataTypes());\n \n     // get deduplicated measurement columns (already deduplicated in TSServiceImpl.executeDataQuery)\n-    this.deduplicatedMeasurementColumns = queryPlan.getMeasurements();\n-    this.tsDataTypeMap = queryPlan.getDataTypeMapping();\n+    this.deduplicatedMeasurementColumns = alignByDevicePlan.getMeasurements();\n+    this.tsDataTypeMap = alignByDevicePlan.getDataTypeMapping();\n     this.queryRouter = queryRouter;\n     this.context = context;\n-    this.measurementColumnsGroupByDevice = queryPlan.getMeasurementsGroupByDevice();\n-    this.deviceToFilterMap = queryPlan.getDeviceToFilterMap();\n-    this.notExistMeasurements = queryPlan.getNotExistMeasurements();\n-    this.constMeasurements = queryPlan.getConstMeasurements();\n-    this.positionOfNotExistMeasurements = queryPlan.getPositionOfNotExistMeasurements();\n-    this.positionOfConstMeasurements = queryPlan.getPositionOfConstMeasurements();\n+    this.measurementColumnsGroupByDevice = alignByDevicePlan.getDeviceToMeasurementsMap();\n+    this.deviceToFilterMap = alignByDevicePlan.getDeviceToFilterMap();\n+    this.notExistMeasurements = alignByDevicePlan.getNotExistMeasurements();\n+    this.constMeasurements = alignByDevicePlan.getConstMeasurements();\n+    this.positionOfNotExistMeasurements = alignByDevicePlan.getPositionOfNotExistMeasurements();\n+    this.positionOfConstMeasurements = alignByDevicePlan.getPositionOfConstMeasurements();\n     //BuildOutDataTypes();\n \n-    if (queryPlan instanceof GroupByPlan) {\n+    if (alignByDevicePlan.getGroupByPlan() != null) {", "originalCommit": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE2MjkxNQ==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378162915", "bodyText": "Fixed.", "author": "Alima777", "createdAt": "2020-02-12T10:27:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEyNjE3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEyNzkxNg==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378127916", "bodyText": "Don't you save three plans in AlignByDevicePlan? They could be reused", "author": "qiaojialin", "createdAt": "2020-02-12T09:25:32Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -207,7 +211,7 @@ protected boolean hasNextWithoutConstraint() throws IOException {\n             currentDataSet = queryRouter.fill(fillQueryPlan, context);\n             break;\n           case QUERY:\n-            QueryPlan queryPlan = new QueryPlan();\n+            RawDataQueryPlan queryPlan = new RawDataQueryPlan();", "originalCommit": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE2Njk4Nw==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378166987", "bodyText": "Good Idea. Fixed.", "author": "Alima777", "createdAt": "2020-02-12T10:35:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEyNzkxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEyODIyMg==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378128222", "bodyText": "Reuse the query plan in AlignByDevicePlan, no need to set the parameters again and again", "author": "qiaojialin", "createdAt": "2020-02-12T09:26:03Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -80,39 +84,39 @@\n   private int[] currentColumnMapRelation;\n   private Map<Path, TSDataType> tsDataTypeMap;\n \n-  public DeviceIterateDataSet(QueryPlan queryPlan, QueryContext context,\n+  public DeviceIterateDataSet(AlignByDevicePlan alignByDevicePlan, QueryContext context,\n       IQueryRouter queryRouter) {\n-    super(null, queryPlan.getDataTypes());\n+    super(null, alignByDevicePlan.getDataTypes());\n \n     // get deduplicated measurement columns (already deduplicated in TSServiceImpl.executeDataQuery)\n-    this.deduplicatedMeasurementColumns = queryPlan.getMeasurements();\n-    this.tsDataTypeMap = queryPlan.getDataTypeMapping();\n+    this.deduplicatedMeasurementColumns = alignByDevicePlan.getMeasurements();\n+    this.tsDataTypeMap = alignByDevicePlan.getDataTypeMapping();\n     this.queryRouter = queryRouter;\n     this.context = context;\n-    this.measurementColumnsGroupByDevice = queryPlan.getMeasurementsGroupByDevice();\n-    this.deviceToFilterMap = queryPlan.getDeviceToFilterMap();\n-    this.notExistMeasurements = queryPlan.getNotExistMeasurements();\n-    this.constMeasurements = queryPlan.getConstMeasurements();\n-    this.positionOfNotExistMeasurements = queryPlan.getPositionOfNotExistMeasurements();\n-    this.positionOfConstMeasurements = queryPlan.getPositionOfConstMeasurements();\n+    this.measurementColumnsGroupByDevice = alignByDevicePlan.getDeviceToMeasurementsMap();\n+    this.deviceToFilterMap = alignByDevicePlan.getDeviceToFilterMap();\n+    this.notExistMeasurements = alignByDevicePlan.getNotExistMeasurements();\n+    this.constMeasurements = alignByDevicePlan.getConstMeasurements();\n+    this.positionOfNotExistMeasurements = alignByDevicePlan.getPositionOfNotExistMeasurements();\n+    this.positionOfConstMeasurements = alignByDevicePlan.getPositionOfConstMeasurements();\n     //BuildOutDataTypes();\n \n-    if (queryPlan instanceof GroupByPlan) {\n+    if (alignByDevicePlan.getGroupByPlan() != null) {\n       this.dataSetType = DataSetType.GROUPBY;\n       // assign parameters\n-      this.unit = ((GroupByPlan) queryPlan).getInterval();\n-      this.slidingStep = ((GroupByPlan) queryPlan).getSlidingStep();\n-      this.startTime = ((GroupByPlan) queryPlan).getStartTime();\n-      this.endTime = ((GroupByPlan) queryPlan).getEndTime();\n+      this.unit = alignByDevicePlan.getGroupByPlan().getInterval();", "originalCommit": "d84de4d5565de3134d0eb9a8b9436fe9eab1f0be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE2NjkxNg==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378166916", "bodyText": "Good Idea. Fixed.", "author": "Alima777", "createdAt": "2020-02-12T10:35:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEyODIyMg=="}], "type": "inlineReview"}, {"oid": "85fe556e2fc701f6816d39262bbdc367778c4c06", "url": "https://github.com/apache/iotdb/commit/85fe556e2fc701f6816d39262bbdc367778c4c06", "message": "Fix bugs", "committedDate": "2020-02-12T11:00:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzMDkwNw==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378230907", "bodyText": "remove this unused", "author": "qiaojialin", "createdAt": "2020-02-12T12:51:57Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/AlignByDevicePlan.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.qp.physical.crud;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.iotdb.db.qp.logical.Operator;\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.read.expression.IExpression;\n+\n+public class AlignByDevicePlan extends QueryPlan {\n+\n+  private List<String> measurements; // e.g. temperature, status, speed\n+  private Map<String, Set<String>> deviceToMeasurementsMap; // e.g. root.ln.d1 -> temperature\n+  // to check data type consistency for the same name sensor of different devices\n+  private Map<String, TSDataType> dataTypeConsistencyChecker;\n+  private Map<String, IExpression> deviceToFilterMap;\n+\n+  private GroupByPlan groupByPlan;\n+  private FillQueryPlan fillQueryPlan;\n+  private AggregationPlan aggregationPlan;\n+\n+  // the measurements that do not exist in any device,\n+  // data type is considered as Boolean. The value is considered as null\n+  private List<String> notExistMeasurements = new ArrayList<>();\n+  private List<Integer> positionOfNotExistMeasurements = new ArrayList<>();\n+  // the measurements that have quotation mark. e.g. \"abc\",\n+  // '11', the data type is considered as String and the value is considered is the same with measurement name\n+  private List<String> constMeasurements = new ArrayList<>();\n+  private List<Integer> positionOfConstMeasurements = new ArrayList<>();\n+\n+  public AlignByDevicePlan() {\n+    super();\n+  }\n+\n+  public AlignByDevicePlan(boolean isQuery, Operator.OperatorType operatorType) {", "originalCommit": "85fe556e2fc701f6816d39262bbdc367778c4c06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyNDI1OQ==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378324259", "bodyText": "Fixed.", "author": "Alima777", "createdAt": "2020-02-12T15:28:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzMDkwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzMjQxMg==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378232412", "bodyText": "ha?", "author": "qiaojialin", "createdAt": "2020-02-12T12:55:12Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/GroupByPlan.java", "diffHunk": "@@ -20,7 +20,8 @@\n \n import org.apache.iotdb.db.qp.logical.Operator;\n \n-public class GroupByPlan extends AggregationPlan {\n+public class\n+GroupByPlan extends AggregationPlan {", "originalCommit": "85fe556e2fc701f6816d39262bbdc367778c4c06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyNDMzNA==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378324334", "bodyText": "...Fixed.", "author": "Alima777", "createdAt": "2020-02-12T15:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzMjQxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzMjc2OQ==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378232769", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            GroupByPlan extends AggregationPlan {\n          \n          \n            \n            GroupByTimePlan extends AggregationPlan {", "author": "qiaojialin", "createdAt": "2020-02-12T12:55:55Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/GroupByPlan.java", "diffHunk": "@@ -20,7 +20,8 @@\n \n import org.apache.iotdb.db.qp.logical.Operator;\n \n-public class GroupByPlan extends AggregationPlan {\n+public class\n+GroupByPlan extends AggregationPlan {", "originalCommit": "85fe556e2fc701f6816d39262bbdc367778c4c06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyNTA0OQ==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378325049", "bodyText": "Just keep it.", "author": "Alima777", "createdAt": "2020-02-12T15:29:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzMjc2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzMzExMw==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378233113", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private boolean isAlignByDevice = false;\n          \n          \n            \n              private boolean alignByDevice = false;", "author": "qiaojialin", "createdAt": "2020-02-12T12:56:29Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/logical/crud/QueryOperator.java", "diffHunk": "@@ -45,8 +45,8 @@\n   private int seriesLimit = 0;\n   private int seriesOffset = 0;\n \n-  private boolean isGroupByDevice = false;\n-  private boolean isAlign = true;\n+  private boolean isAlignByDevice = false;", "originalCommit": "85fe556e2fc701f6816d39262bbdc367778c4c06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyOTY0MA==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378329640", "bodyText": "Just keep it.", "author": "Alima777", "createdAt": "2020-02-12T15:36:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzMzExMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzMzIwMg==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378233202", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private boolean isAlignByTime = true;\n          \n          \n            \n              private boolean alignByTime = true;", "author": "qiaojialin", "createdAt": "2020-02-12T12:56:39Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/logical/crud/QueryOperator.java", "diffHunk": "@@ -45,8 +45,8 @@\n   private int seriesLimit = 0;\n   private int seriesOffset = 0;\n \n-  private boolean isGroupByDevice = false;\n-  private boolean isAlign = true;\n+  private boolean isAlignByDevice = false;\n+  private boolean isAlignByTime = true;", "originalCommit": "85fe556e2fc701f6816d39262bbdc367778c4c06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyOTc2OA==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378329768", "bodyText": "Just keep it please.", "author": "Alima777", "createdAt": "2020-02-12T15:36:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzMzIwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzNTAxOQ==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378235019", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This QueryDataSet is used for GROUP_BY_DEVICE query result.\n          \n          \n            \n             * This QueryDataSet is used for align by device query result.", "author": "qiaojialin", "createdAt": "2020-02-12T13:00:43Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -36,9 +42,6 @@\n import org.apache.iotdb.tsfile.read.query.dataset.QueryDataSet;\n import org.apache.iotdb.tsfile.utils.Binary;\n \n-import java.io.IOException;\n-import java.util.*;\n-\n \n /**\n  * This QueryDataSet is used for GROUP_BY_DEVICE query result.", "originalCommit": "85fe556e2fc701f6816d39262bbdc367778c4c06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyNTg4Ng==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378325886", "bodyText": "Fixed.", "author": "Alima777", "createdAt": "2020-02-12T15:30:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzNTAxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzNTMyNQ==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378235325", "bodyText": "how about renaming this class to AlignByDeviceDataset", "author": "qiaojialin", "createdAt": "2020-02-12T13:01:22Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DeviceIterateDataSet.java", "diffHunk": "@@ -80,45 +77,41 @@\n   private int[] currentColumnMapRelation;", "originalCommit": "85fe556e2fc701f6816d39262bbdc367778c4c06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyODcxMg==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378328712", "bodyText": "It's nice. I will rename it.", "author": "Alima777", "createdAt": "2020-02-12T15:34:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzNTMyNQ=="}], "type": "inlineReview"}, {"oid": "c991383bb5e55b2f3f2ba75072cd214207d8034d", "url": "https://github.com/apache/iotdb/commit/c991383bb5e55b2f3f2ba75072cd214207d8034d", "message": "always endeavoring to do still better", "committedDate": "2020-02-12T15:41:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYwNDAyMg==", "url": "https://github.com/apache/iotdb/pull/796#discussion_r378604022", "bodyText": "This logic is a little strange", "author": "qiaojialin", "createdAt": "2020-02-13T01:18:46Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/AlignByDeviceDataSet.java", "diffHunk": "@@ -80,45 +78,42 @@\n   private int[] currentColumnMapRelation;\n   private Map<Path, TSDataType> tsDataTypeMap;\n \n-  public DeviceIterateDataSet(QueryPlan queryPlan, QueryContext context,\n+  public AlignByDeviceDataSet(AlignByDevicePlan alignByDevicePlan, QueryContext context,\n       IQueryRouter queryRouter) {\n-    super(null, queryPlan.getDataTypes());\n+    super(null, alignByDevicePlan.getDataTypes());\n \n     // get deduplicated measurement columns (already deduplicated in TSServiceImpl.executeDataQuery)\n-    this.deduplicatedMeasurementColumns = queryPlan.getMeasurements();\n-    this.tsDataTypeMap = queryPlan.getDataTypeMapping();\n+    this.deduplicatedMeasurementColumns = alignByDevicePlan.getMeasurements();\n+    this.tsDataTypeMap = alignByDevicePlan.getDataTypeMapping();\n     this.queryRouter = queryRouter;\n     this.context = context;\n-    this.measurementColumnsGroupByDevice = queryPlan.getMeasurementsGroupByDevice();\n-    this.deviceToFilterMap = queryPlan.getDeviceToFilterMap();\n-    this.notExistMeasurements = queryPlan.getNotExistMeasurements();\n-    this.constMeasurements = queryPlan.getConstMeasurements();\n-    this.positionOfNotExistMeasurements = queryPlan.getPositionOfNotExistMeasurements();\n-    this.positionOfConstMeasurements = queryPlan.getPositionOfConstMeasurements();\n-    //BuildOutDataTypes();\n+    this.deviceToMeasurementsMap = alignByDevicePlan.getDeviceToMeasurementsMap();\n+    this.deviceToFilterMap = alignByDevicePlan.getDeviceToFilterMap();\n+    this.notExistMeasurements = alignByDevicePlan.getNotExistMeasurements();\n+    this.constMeasurements = alignByDevicePlan.getConstMeasurements();\n+    this.positionOfNotExistMeasurements = alignByDevicePlan.getPositionOfNotExistMeasurements();\n+    this.positionOfConstMeasurements = alignByDevicePlan.getPositionOfConstMeasurements();\n \n-    if (queryPlan instanceof GroupByPlan) {\n-      this.dataSetType = DataSetType.GROUPBY;\n-      // assign parameters\n-      this.unit = ((GroupByPlan) queryPlan).getInterval();\n-      this.slidingStep = ((GroupByPlan) queryPlan).getSlidingStep();\n-      this.startTime = ((GroupByPlan) queryPlan).getStartTime();\n-      this.endTime = ((GroupByPlan) queryPlan).getEndTime();\n-\n-    } else if (queryPlan instanceof AggregationPlan) {\n-      this.dataSetType = DataSetType.AGGREGATE;\n-\n-    } else if (queryPlan instanceof FillQueryPlan) {\n-      this.dataSetType = DataSetType.FILL;\n-      // assign parameters\n-      this.queryTime = ((FillQueryPlan) queryPlan).getQueryTime();\n-      this.fillType = ((FillQueryPlan) queryPlan).getFillType();\n-    } else {\n-      this.dataSetType = DataSetType.QUERY;\n+    switch (alignByDevicePlan.getOperatorType()){\n+      case GROUPBY:\n+        this.dataSetType = DataSetType.GROUPBY;\n+        this.groupByPlan = alignByDevicePlan.getGroupByPlan();\n+        break;\n+      case AGGREGATION:\n+        this.dataSetType = DataSetType.AGGREGATE;\n+        this.aggregationPlan = alignByDevicePlan.getAggregationPlan();\n+        break;\n+      case FILL:\n+        this.dataSetType = DataSetType.FILL;\n+        this.fillQueryPlan = alignByDevicePlan.getFillQueryPlan();\n+        break;\n+      default:\n+        this.dataSetType = DataSetType.QUERY;\n+        this.rawDataQueryPlan = new RawDataQueryPlan();", "originalCommit": "c991383bb5e55b2f3f2ba75072cd214207d8034d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "749fb8f6105f369d81a6c22960ebefcc3584d2c0", "url": "https://github.com/apache/iotdb/commit/749fb8f6105f369d81a6c22960ebefcc3584d2c0", "message": "Fix a comment", "committedDate": "2020-02-13T03:54:43Z", "type": "commit"}, {"oid": "66b118723808602c8fb149e3deacb689f857c2f9", "url": "https://github.com/apache/iotdb/commit/66b118723808602c8fb149e3deacb689f857c2f9", "message": "Fix a comment", "committedDate": "2020-02-13T03:55:49Z", "type": "commit"}]}