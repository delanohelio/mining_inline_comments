{"pr_number": 817, "pr_title": "[IOTDB-497] Apache Flink Connector Support", "pr_createdAt": "2020-02-17T05:18:15Z", "pr_url": "https://github.com/apache/iotdb/pull/817", "timeline": [{"oid": "0afa4fec8da67852490c03af70e29ebb04e4429f", "url": "https://github.com/apache/iotdb/commit/0afa4fec8da67852490c03af70e29ebb04e4429f", "message": "[IOTDB-497] Apache Flink Connector Support", "committedDate": "2020-02-17T05:09:24Z", "type": "commit"}, {"oid": "d74e6cbb325f5fbdac7e019356eb953dcad6a427", "url": "https://github.com/apache/iotdb/commit/d74e6cbb325f5fbdac7e019356eb953dcad6a427", "message": "[IOTDB-503] Add checkTimeseriesExists for session", "committedDate": "2020-02-18T14:17:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcyMDk4MQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r380720981", "bodyText": "Hi, is that possible to get the datatype of the sensor?\nAs IoTDB compresses int/long/float/double better than text, and in some applications, users know what data type their data is.\nBy the way, it is recommended that using CompressionType.SNAPPY by default.", "author": "jixuan1989", "createdAt": "2020-02-18T14:52:52Z", "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/IoTDBSink.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.state.FunctionInitializationContext;\n+import org.apache.flink.runtime.state.FunctionSnapshotContext;\n+import org.apache.flink.streaming.api.checkpoint.CheckpointedFunction;\n+import org.apache.flink.streaming.api.functions.sink.RichSinkFunction;\n+import org.apache.flink.streaming.api.operators.StreamingRuntimeContext;\n+import org.apache.iotdb.service.rpc.thrift.TSStatus;\n+import org.apache.iotdb.session.Session;\n+import org.apache.iotdb.tsfile.file.metadata.enums.CompressionType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSEncoding;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+public class IoTDBSink<IN> extends RichSinkFunction<IN> implements CheckpointedFunction {\n+\n+    private static final long serialVersionUID = 1L;\n+    private static final Logger LOG = LoggerFactory.getLogger(IoTDBSink.class);\n+\n+    private IoTSerializationSchema<IN> serializationSchema;\n+    private IoTDBOptions options;\n+    private transient Session session;\n+\n+    private boolean batchFlushOnCheckpoint; // false by default\n+    private int batchSize = 100;\n+    private List<Event> batchList;\n+\n+    public IoTDBSink(IoTDBOptions options, IoTSerializationSchema<IN> schema) {\n+        this.options = options;\n+        this.serializationSchema = schema;\n+    }\n+\n+    @Override\n+    public void open(Configuration parameters) throws Exception {\n+        batchList = new LinkedList<>();\n+\n+        session = new Session(options.getHost(), options.getPort(), options.getUser(), options.getPassword());\n+        session.open();\n+\n+        session.setStorageGroup(options.getStorageGroup());\n+        for (String sensor : options.getTimeseries()) {\n+            session.createTimeseries(sensor, TSDataType.TEXT, TSEncoding.PLAIN, CompressionType.UNCOMPRESSED);", "originalCommit": "0afa4fec8da67852490c03af70e29ebb04e4429f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcyNTI1Nw==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r380725257", "bodyText": "Good idea, I will update later.", "author": "vesense", "createdAt": "2020-02-18T14:59:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcyMDk4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcyNTY0Mw==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r380725643", "bodyText": "In many applications, when a monitored device sends data to the server, it does not just send one data point.\nInstead, it sends a \"row\", i.e., several measurements and their values. (And in some applications, they even sends data with several timestamps, but it is not very common.)\nAs far as I know, a device may have more than 100 measurements in the industrial applications. In this case, splitting a \"row\" into many Events may burden Flink as well as IoTDB (because there are too many small TCP packets).\nHow do you think?", "author": "jixuan1989", "createdAt": "2020-02-18T14:59:40Z", "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/Event.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+public class Event {\n+    private String device;\n+    private Long timestamp;\n+    private String measurement;", "originalCommit": "0afa4fec8da67852490c03af70e29ebb04e4429f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDczMzgxOQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r380733819", "bodyText": "Make sense. We should support most scenarios. Will update.\n@jixuan1989 Thanks for your input.", "author": "vesense", "createdAt": "2020-02-18T15:11:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcyNTY0Mw=="}], "type": "inlineReview"}, {"oid": "d2e23005a92add66988556579f4bf412741b7733", "url": "https://github.com/apache/iotdb/commit/d2e23005a92add66988556579f4bf412741b7733", "message": "[IOTDB-503] Add checkTimeseriesExists for session", "committedDate": "2020-02-20T15:27:01Z", "type": "commit"}, {"oid": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "url": "https://github.com/apache/iotdb/commit/115b8cec1082524ff5ef18af2e4ede53762fdc8b", "message": "[IOTDB-497] Addressed review comments", "committedDate": "2020-02-20T15:32:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1NzQ3NA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382857474", "bodyText": "Add newline at end of file.", "author": "sunjincheng121", "createdAt": "2020-02-21T23:50:19Z", "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/DefaultIoTSerializationSchema.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class DefaultIoTSerializationSchema implements IoTSerializationSchema<Map<String,String>> {\n+    public static final String FIELD_DEVICE = \"device\";\n+    public static final String FIELD_TIMESTAMP = \"timestamp\";\n+    public static final String FIELD_MEASUREMENTS = \"measurements\";\n+    public static final String FIELD_VALUES = \"values\";\n+    public static final String DEFAULT_SEPARATOR = \",\";\n+\n+    private Map<String, IoTDBOptions.TimeseriesOption> timeseriesOptionMap;\n+\n+    public DefaultIoTSerializationSchema(IoTDBOptions ioTDBOptions) {\n+        timeseriesOptionMap = new HashMap<>();\n+        for (IoTDBOptions.TimeseriesOption timeseriesOption : ioTDBOptions.getTimeseriesOptionList()) {\n+            timeseriesOptionMap.put(timeseriesOption.getPath(), timeseriesOption);\n+        }\n+    }\n+\n+    @Override\n+    public Event serialize(Map<String,String> tuple) {\n+        if (tuple == null) {\n+            return null;\n+        }\n+\n+        String device = tuple.get(FIELD_DEVICE);\n+\n+        String ts = tuple.get(FIELD_TIMESTAMP);\n+        Long timestamp = ts == null ? System.currentTimeMillis() : Long.parseLong(ts);\n+\n+        List<String> measurements = null;\n+        if (tuple.get(FIELD_MEASUREMENTS) != null) {\n+            measurements = Arrays.asList(tuple.get(FIELD_MEASUREMENTS).split(DEFAULT_SEPARATOR));\n+        }\n+\n+        List<String> values = null;\n+        if (tuple.get(FIELD_VALUES) != null) {\n+            values = Arrays.asList(tuple.get(FIELD_VALUES).split(DEFAULT_SEPARATOR));\n+        }\n+\n+        if (device != null && measurements != null && values != null && measurements.size() == values.size()) {\n+            for (int i = 0; i < measurements.size(); i++) {\n+                String measurement = device + \".\" + measurements.get(i);\n+                IoTDBOptions.TimeseriesOption timeseriesOption = timeseriesOptionMap.get(measurement);\n+                if (timeseriesOption!= null && TSDataType.TEXT.equals(timeseriesOption.getDataType())) {\n+                    // The TEXT data type should be covered by \" or '\n+                    values.set(i, \"'\" + values.get(i) + \"'\");\n+                }\n+            }\n+        }\n+\n+        return new Event(device, timestamp, measurements, values);\n+    }\n+}", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwNzE1OA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382907158", "bodyText": "Will update.", "author": "vesense", "createdAt": "2020-02-22T11:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1NzQ3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1NzUxMg==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382857512", "bodyText": "Add newline at end of file.", "author": "sunjincheng121", "createdAt": "2020-02-21T23:50:27Z", "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/Event.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+import java.util.List;\n+\n+public class Event {\n+    private String device;\n+    private Long timestamp;\n+    private List<String> measurements;\n+    private List<String> values;\n+\n+    public Event(String device, Long timestamp, List<String> measurements, List<String> values) {\n+        this.device = device;\n+        this.timestamp = timestamp;\n+        this.measurements = measurements;\n+        this.values = values;\n+    }\n+\n+    public String getDevice() {\n+        return device;\n+    }\n+\n+    public Long getTimestamp() {\n+        return timestamp;\n+    }\n+\n+    public List<String> getMeasurements() {\n+        return measurements;\n+    }\n+\n+    public List<String> getValues() {\n+        return values;\n+    }\n+}", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwNzE2NA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382907164", "bodyText": "Will update.", "author": "vesense", "createdAt": "2020-02-22T11:47:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1NzUxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1NzYxNA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382857614", "bodyText": "Add newline at end of file.", "author": "sunjincheng121", "createdAt": "2020-02-21T23:50:54Z", "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/IoTSerializationSchema.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+import java.io.Serializable;\n+\n+public interface IoTSerializationSchema<T> extends Serializable {\n+\n+    Event serialize(T tuple);\n+\n+}", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwNzE2NQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382907165", "bodyText": "Will update.", "author": "vesense", "createdAt": "2020-02-22T11:47:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1NzYxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1NzY1OA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382857658", "bodyText": "Add newline at end of file.", "author": "sunjincheng121", "createdAt": "2020-02-21T23:51:03Z", "path": "flink-iotdb-connector/src/test/java/org/apache/iotdb/flink/IoTDBSinkTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.iotdb.session.Session;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+\n+public class IoTDBSinkTest {\n+\n+    private IoTDBSink ioTDBSink;\n+    private Session session;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        IoTDBOptions options = new IoTDBOptions();\n+        options.setTimeseriesOptionList(Lists.newArrayList(new IoTDBOptions.TimeseriesOption(\"root.sg.D01.temperature\")));\n+        ioTDBSink = new IoTDBSink(options, new DefaultIoTSerializationSchema(options));\n+\n+        session = mock(Session.class);\n+        ioTDBSink.setSession(session);\n+    }\n+\n+    @Test\n+    public void testSink() throws Exception {\n+        Map tuple = new HashMap();\n+        tuple.put(\"device\", \"root.sg.D01\");\n+        tuple.put(\"timestamp\", \"1581861293000\");\n+        tuple.put(\"measurements\", \"temperature\");\n+        tuple.put(\"values\", \"36.5\");\n+\n+        ioTDBSink.invoke(tuple, null);\n+        verify(session).insert(any(String.class), any(Long.class), any(List.class), any(List.class));\n+    }\n+\n+    @Test\n+    public void close() throws Exception {\n+        ioTDBSink.close();\n+        verify(session).close();\n+    }\n+\n+}", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwNzE3Mg==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382907172", "bodyText": "Will update.", "author": "vesense", "createdAt": "2020-02-22T11:47:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1NzY1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1NzgzNA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382857834", "bodyText": "Could you please upgrade the flink version from 1.7.0 to 1.10.0 due to 1.7.0 is not maintained in flink now. detail can be found in\uff1ahttps://flink.apache.org/downloads.html#update-policy-for-old-releases", "author": "sunjincheng121", "createdAt": "2020-02-21T23:51:54Z", "path": "flink-iotdb-connector/pom.xml", "diffHunk": "@@ -0,0 +1,78 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one or more\n+ contributor license agreements.  See the NOTICE file distributed with\n+ this work for additional information regarding copyright ownership.\n+ The ASF licenses this file to You under the Apache License, Version 2.0\n+ (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+\n+     http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.apache.iotdb</groupId>\n+        <artifactId>iotdb-parent</artifactId>\n+        <version>0.10.0-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+    <artifactId>flink-iotdb-connector</artifactId>\n+    <packaging>jar</packaging>\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <compile.version>1.8</compile.version>\n+        <flink.version>1.7.0</flink.version>", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwNzMxMw==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382907313", "bodyText": "Will update.", "author": "vesense", "createdAt": "2020-02-22T11:50:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1NzgzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1ODQzNQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382858435", "bodyText": "Move to previous line\uff1f", "author": "sunjincheng121", "createdAt": "2020-02-21T23:54:49Z", "path": "example/flink-example/src/main/java/org/apache/iotdb/flink/Example.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.flink;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.streaming.api.functions.source.SourceFunction;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class Example {\n+    public static void main(String[] args) {\n+        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+        env.enableCheckpointing(3000);\n+\n+        IoTDBOptions options = new IoTDBOptions();\n+        options.setHost(\"127.0.0.1\");\n+        options.setPort(6667);\n+        options.setUser(\"root\");\n+        options.setPassword(\"root\");\n+        options.setStorageGroup(\"root.sg\");\n+        options.setTimeseriesOptionList(Lists.newArrayList(new IoTDBOptions.TimeseriesOption(\"root.sg.d1.s1\")));\n+\n+        IoTSerializationSchema serializationSchema = new DefaultIoTSerializationSchema(options);\n+        IoTDBSink ioTDBSink = new IoTDBSink(options, serializationSchema)\n+                // enable batching\n+                .withBatchFlushOnCheckpoint(true)\n+                .withBatchSize(10)\n+                ;", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwNzQ3Mw==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382907473", "bodyText": "Will update.", "author": "vesense", "createdAt": "2020-02-22T11:53:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1ODQzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2MDAzOQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382860039", "bodyText": "What if it is set batchsize but not turned on BatchFlushOnCheckpoint? I mean that user always want enable batching if user set batchsize, if so, do we really need  withBatchFlushOnCheckpoint?", "author": "sunjincheng121", "createdAt": "2020-02-22T00:02:56Z", "path": "flink-iotdb-connector/README.md", "diffHunk": "@@ -0,0 +1,65 @@\n+# IoTDB-Flink-Connector\n+\n+IoTDB integration for [Apache Flink](https://flink.apache.org/). This module includes the iotdb sink that allows a flink job to write events into timeseries.\n+\n+## IoTDBSink\n+To use the `IoTDBSink`,  you need construct an instance of it by specifying `IoTDBOptions` and `IoTSerializationSchema` instances.\n+The `IoTDBSink` send only one event after another by default, but you can change to batch by invoking `withBatchFlushOnCheckpoint(true)`. \n+\n+## Examples\n+The following is an example which receiving events from sensor source and then sending events to iotdb.\n+\n+ ```java\n+StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+        env.enableCheckpointing(3000);\n+\n+        IoTDBOptions options = new IoTDBOptions();\n+        options.setHost(\"127.0.0.1\");\n+        options.setPort(6667);\n+        options.setUser(\"root\");\n+        options.setPassword(\"root\");\n+        options.setStorageGroup(\"root.sg\");\n+        options.setTimeseries(Lists.newArrayList(\"root.sg.d1.s1\"));\n+\n+        IoTSerializationSchema serializationSchema = new DefaultIoTSerializationSchema();\n+        IoTDBSink ioTDBSink = new IoTDBSink(options, serializationSchema)\n+                // enable batching\n+                .withBatchFlushOnCheckpoint(true)\n+                .withBatchSize(10)", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyMjMzNA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382922334", "bodyText": "As I explained at #817 (comment)\nbatchSize It is one of the parameters that determine the batch inserting.", "author": "vesense", "createdAt": "2020-02-22T15:58:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2MDAzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2MDczNg==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382860736", "bodyText": "It's better to add java doc for Class :) What do you think?", "author": "sunjincheng121", "createdAt": "2020-02-22T00:06:38Z", "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/DefaultIoTSerializationSchema.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class DefaultIoTSerializationSchema implements IoTSerializationSchema<Map<String,String>> {", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyMjExMA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382922110", "bodyText": "Will update.", "author": "vesense", "createdAt": "2020-02-22T15:55:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2MDczNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2MzYzOA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382863638", "bodyText": "Do not need add this dependency here as It's already added in parent pom.", "author": "sunjincheng121", "createdAt": "2020-02-22T00:22:53Z", "path": "flink-iotdb-connector/pom.xml", "diffHunk": "@@ -0,0 +1,78 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one or more\n+ contributor license agreements.  See the NOTICE file distributed with\n+ this work for additional information regarding copyright ownership.\n+ The ASF licenses this file to You under the Apache License, Version 2.0\n+ (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+\n+     http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.apache.iotdb</groupId>\n+        <artifactId>iotdb-parent</artifactId>\n+        <version>0.10.0-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+    <artifactId>flink-iotdb-connector</artifactId>\n+    <packaging>jar</packaging>\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <compile.version>1.8</compile.version>\n+        <flink.version>1.7.0</flink.version>\n+        <scala.binary.version>2.11</scala.binary.version>\n+    </properties>\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.iotdb</groupId>\n+            <artifactId>iotdb-session</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.flink</groupId>\n+            <artifactId>flink-java</artifactId>\n+            <version>${flink.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.flink</groupId>\n+            <artifactId>flink-streaming-java_${scala.binary.version}</artifactId>\n+            <version>${flink.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.flink</groupId>\n+            <artifactId>flink-clients_${scala.binary.version}</artifactId>\n+            <version>${flink.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.flink</groupId>\n+            <artifactId>flink-queryable-state-runtime_${scala.binary.version}</artifactId>\n+            <version>${flink.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.google.guava</groupId>\n+            <artifactId>guava</artifactId>\n+            <version>23.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <scope>test</scope>\n+            <version>4.12</version>\n+        </dependency>", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyMjEwMg==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382922102", "bodyText": "Junit should follow the parent version. Will update.", "author": "vesense", "createdAt": "2020-02-22T15:55:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2MzYzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2Mzg5NQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382863895", "bodyText": "We do not need define the version here as  It's already added in parent pom.\nAnd It's better to upgrade the parent pom version of guava if we really need the higher version.\nNOTE: I suggest remove this dependency as it's only using in test code(do some change  in test class), or change the scope of this dependency.\nWhat do you think?", "author": "sunjincheng121", "createdAt": "2020-02-22T00:24:22Z", "path": "flink-iotdb-connector/pom.xml", "diffHunk": "@@ -0,0 +1,78 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one or more\n+ contributor license agreements.  See the NOTICE file distributed with\n+ this work for additional information regarding copyright ownership.\n+ The ASF licenses this file to You under the Apache License, Version 2.0\n+ (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+\n+     http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.apache.iotdb</groupId>\n+        <artifactId>iotdb-parent</artifactId>\n+        <version>0.10.0-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+    <artifactId>flink-iotdb-connector</artifactId>\n+    <packaging>jar</packaging>\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <compile.version>1.8</compile.version>\n+        <flink.version>1.7.0</flink.version>\n+        <scala.binary.version>2.11</scala.binary.version>\n+    </properties>\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.iotdb</groupId>\n+            <artifactId>iotdb-session</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.flink</groupId>\n+            <artifactId>flink-java</artifactId>\n+            <version>${flink.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.flink</groupId>\n+            <artifactId>flink-streaming-java_${scala.binary.version}</artifactId>\n+            <version>${flink.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.flink</groupId>\n+            <artifactId>flink-clients_${scala.binary.version}</artifactId>\n+            <version>${flink.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.flink</groupId>\n+            <artifactId>flink-queryable-state-runtime_${scala.binary.version}</artifactId>\n+            <version>${flink.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.google.guava</groupId>\n+            <artifactId>guava</artifactId>\n+            <version>23.0</version>", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyMjAzMQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382922031", "bodyText": "Yes, guava is used by tests and examples, and it should follow the parent version. Will update.", "author": "vesense", "createdAt": "2020-02-22T15:54:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2Mzg5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2Mzk1Mg==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382863952", "bodyText": "Do we really need add this dependency here?.", "author": "sunjincheng121", "createdAt": "2020-02-22T00:24:44Z", "path": "flink-iotdb-connector/pom.xml", "diffHunk": "@@ -0,0 +1,78 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one or more\n+ contributor license agreements.  See the NOTICE file distributed with\n+ this work for additional information regarding copyright ownership.\n+ The ASF licenses this file to You under the Apache License, Version 2.0\n+ (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+\n+     http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.apache.iotdb</groupId>\n+        <artifactId>iotdb-parent</artifactId>\n+        <version>0.10.0-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+    <artifactId>flink-iotdb-connector</artifactId>\n+    <packaging>jar</packaging>\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <compile.version>1.8</compile.version>\n+        <flink.version>1.7.0</flink.version>\n+        <scala.binary.version>2.11</scala.binary.version>\n+    </properties>\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.iotdb</groupId>\n+            <artifactId>iotdb-session</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.flink</groupId>\n+            <artifactId>flink-java</artifactId>\n+            <version>${flink.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.flink</groupId>\n+            <artifactId>flink-streaming-java_${scala.binary.version}</artifactId>\n+            <version>${flink.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.flink</groupId>\n+            <artifactId>flink-clients_${scala.binary.version}</artifactId>\n+            <version>${flink.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.flink</groupId>\n+            <artifactId>flink-queryable-state-runtime_${scala.binary.version}</artifactId>\n+            <version>${flink.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.google.guava</groupId>\n+            <artifactId>guava</artifactId>\n+            <version>23.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+            <scope>test</scope>\n+            <version>4.12</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.powermock</groupId>\n+            <artifactId>powermock-module-junit4</artifactId>\n+            <version>1.5.5</version>\n+            <scope>test</scope>\n+        </dependency>", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyMTgwNw==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382921807", "bodyText": "mockito is used by unit tests IoTDBSinkTest.", "author": "vesense", "createdAt": "2020-02-22T15:51:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2Mzk1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyNTM4OA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382925388", "bodyText": "Can we just using the dependency org.mockito  in parent?", "author": "sunjincheng121", "createdAt": "2020-02-22T16:45:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2Mzk1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1OTUzMw==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382959533", "bodyText": "Hi, actually we have powermock  with version 2.0.2 in the parent pom.", "author": "jixuan1989", "createdAt": "2020-02-23T03:04:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2Mzk1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkwNDIwOQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r383904209", "bodyText": "Yes, powermock-module-junit4 is used by tests, and it should follow the parent version. Will update.", "author": "vesense", "createdAt": "2020-02-25T14:15:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2Mzk1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2ODY5Ng==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382868696", "bodyText": "Can we remove this flag as I think batchSize can express the same semantics  with \uff08batchSize+batchFlushOnCheckpoint)?", "author": "sunjincheng121", "createdAt": "2020-02-22T00:55:17Z", "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/IoTDBSink.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.state.FunctionInitializationContext;\n+import org.apache.flink.runtime.state.FunctionSnapshotContext;\n+import org.apache.flink.streaming.api.checkpoint.CheckpointedFunction;\n+import org.apache.flink.streaming.api.functions.sink.RichSinkFunction;\n+import org.apache.flink.streaming.api.operators.StreamingRuntimeContext;\n+import org.apache.iotdb.service.rpc.thrift.TSStatus;\n+import org.apache.iotdb.session.Session;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+public class IoTDBSink<IN> extends RichSinkFunction<IN> implements CheckpointedFunction {\n+\n+    private static final long serialVersionUID = 1L;\n+    private static final Logger LOG = LoggerFactory.getLogger(IoTDBSink.class);\n+\n+    private IoTSerializationSchema<IN> serializationSchema;\n+    private IoTDBOptions options;\n+    private transient Session session;\n+\n+    private boolean batchFlushOnCheckpoint; // false by default", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5NDk2NA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382894964", "bodyText": "Agree. It is a little strange.\nIf batchFlushOnCheckpoint == false, then the data will never be written into IoTDB...", "author": "jixuan1989", "createdAt": "2020-02-22T07:49:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2ODY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyMDcwNQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382920705", "bodyText": "batchFlushOnCheckpoint is the switch for batch inserting.\nFalse by default, users can change by invoking withBatchFlushOnCheckpoint(true)\nThere are two parameters related to batch.\n\nbatch size (iotDBSink.withBatchSize(10))\ncheckpoint interval (timer) (env.enableCheckpointing(3000))\n\nif `batchFlushOnCheckpoint` == true\n    if batchList >= batch size || checkpoint interval arises (`snapshotState`)\n        then session.insertInBatch\n    else \n        add to batchList\nelse\n    session.insert", "author": "vesense", "createdAt": "2020-02-22T15:36:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2ODY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyNjE4Nw==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382926187", "bodyText": "I mean that only  batchList is enough. By default batchList=0 means  we insert the data immediately(batchFlushOnCheckpoint==true), and if batchList>0 means we will insert the data in batch.  User do not need config the batchFlushOnCheckpoint, the  isCheckpointingEnabled can help us make the decision of whether buffered the data is required.\nWhat do you think?", "author": "sunjincheng121", "createdAt": "2020-02-22T16:57:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2ODY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1OTkxMg==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382959912", "bodyText": "When a user uses such a module, two things that he/she may consider:\n\nI want to reduce the network cost, therefore I will write data until I collect 1000 data points.\nHowever, if some device generates data too rarely, e.g., in 0.01Hz (i.e., generates a data point per 100 seconds),and if I have to wait for 1000 data points coming, I have to want for about 100,000 seconds. So, I want that, if I have buffered data for 3 seconds and the buffer is not full, I will send these data to IoTDB.\n\nThat is to say, batchList is for setting the buffer size, and enableCheckpointing( time interval) is for setting the acceptable latency.", "author": "jixuan1989", "createdAt": "2020-02-23T03:12:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2ODY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkwMTY2Ng==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r383901666", "bodyText": "Thanks @sunjincheng121 and @jixuan1989 for your advices.\nI decided to optimize the relevant logic to avoid user harassment.\n\nuse batchsize as the batch switch(by default batchList=0  insert the data immediately, and if batchList>0  insert the data in batch)\nuse a new timer instead of checkpointing to ensure the data flush SLA.\n\nThese changes will be committed later.", "author": "vesense", "createdAt": "2020-02-25T14:11:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2ODY5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3Mjc5MQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382872791", "bodyText": "100->0", "author": "sunjincheng121", "createdAt": "2020-02-22T01:29:00Z", "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/IoTDBSink.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.state.FunctionInitializationContext;\n+import org.apache.flink.runtime.state.FunctionSnapshotContext;\n+import org.apache.flink.streaming.api.checkpoint.CheckpointedFunction;\n+import org.apache.flink.streaming.api.functions.sink.RichSinkFunction;\n+import org.apache.flink.streaming.api.operators.StreamingRuntimeContext;\n+import org.apache.iotdb.service.rpc.thrift.TSStatus;\n+import org.apache.iotdb.session.Session;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+public class IoTDBSink<IN> extends RichSinkFunction<IN> implements CheckpointedFunction {\n+\n+    private static final long serialVersionUID = 1L;\n+    private static final Logger LOG = LoggerFactory.getLogger(IoTDBSink.class);\n+\n+    private IoTSerializationSchema<IN> serializationSchema;\n+    private IoTDBOptions options;\n+    private transient Session session;\n+\n+    private boolean batchFlushOnCheckpoint; // false by default\n+    private int batchSize = 100;", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyMDg0Mw==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382920843", "bodyText": "This is the default batch size. Users can change by invoking withBatchSize.", "author": "vesense", "createdAt": "2020-02-22T15:38:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3Mjc5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3Nzk3NA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382877974", "bodyText": "Could you please move the License to the top of this file, then we can keep same style with other connector, such as [1][2]?\n[1] https://raw.githubusercontent.com/apache/incubator-iotdb/master/example/rocketmq/readme.md\n[2]https://raw.githubusercontent.com/apache/incubator-iotdb/master/example/kafka/readme.md", "author": "sunjincheng121", "createdAt": "2020-02-22T02:24:27Z", "path": "flink-iotdb-connector/README.md", "diffHunk": "@@ -0,0 +1,65 @@\n+# IoTDB-Flink-Connector\n+\n+IoTDB integration for [Apache Flink](https://flink.apache.org/). This module includes the iotdb sink that allows a flink job to write events into timeseries.\n+\n+## IoTDBSink\n+To use the `IoTDBSink`,  you need construct an instance of it by specifying `IoTDBOptions` and `IoTSerializationSchema` instances.\n+The `IoTDBSink` send only one event after another by default, but you can change to batch by invoking `withBatchFlushOnCheckpoint(true)`. \n+\n+## Examples\n+The following is an example which receiving events from sensor source and then sending events to iotdb.\n+\n+ ```java\n+StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+        env.enableCheckpointing(3000);\n+\n+        IoTDBOptions options = new IoTDBOptions();\n+        options.setHost(\"127.0.0.1\");\n+        options.setPort(6667);\n+        options.setUser(\"root\");\n+        options.setPassword(\"root\");\n+        options.setStorageGroup(\"root.sg\");\n+        options.setTimeseries(Lists.newArrayList(\"root.sg.d1.s1\"));\n+\n+        IoTSerializationSchema serializationSchema = new DefaultIoTSerializationSchema();\n+        IoTDBSink ioTDBSink = new IoTDBSink(options, serializationSchema)\n+                // enable batching\n+                .withBatchFlushOnCheckpoint(true)\n+                .withBatchSize(10)\n+                ;\n+\n+        env.addSource(new SensorSource())\n+                .name(\"sensor-source\")\n+                .setParallelism(1)\n+\n+                .addSink(ioTDBSink)\n+                .name(\"iotdb-sink\")\n+                .setParallelism(1)\n+        ;\n+\n+        try {\n+            env.execute(\"iotdb-flink-example\");\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+ ```\n+\n+\n+## License\n+\n+Licensed to the Apache Software Foundation (ASF) under one", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyMDc4Nw==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382920787", "bodyText": "Will update.", "author": "vesense", "createdAt": "2020-02-22T15:37:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3Nzk3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3ODIwMw==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382878203", "bodyText": "I think the folder name for flink example can be named flink for simple. keep the same style with hadoop, kafaka, rocketmq etc. ?", "author": "sunjincheng121", "createdAt": "2020-02-22T02:27:49Z", "path": "example/flink-example/README.md", "diffHunk": "@@ -0,0 +1,26 @@\n+# IoTDB-Flink-Connector Example", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwODM1NQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382908355", "bodyText": "Will update.", "author": "vesense", "createdAt": "2020-02-22T12:11:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3ODIwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3ODQ3OA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382878478", "bodyText": "I think the class name Example is little bit not specific enough, and would be great to add a very popular word count example\uff0c What do you think\uff1f", "author": "sunjincheng121", "createdAt": "2020-02-22T02:31:45Z", "path": "example/flink-example/src/main/java/org/apache/iotdb/flink/Example.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.flink;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.streaming.api.functions.source.SourceFunction;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class Example {", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyMTEyMg==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382921122", "bodyText": "Good idea. I will change a proper name, but it may not be wordcount in IOT scenario, or just named FlinkIoTDBSink like kafka example KafkaProducer.", "author": "vesense", "createdAt": "2020-02-22T15:42:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3ODQ3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyNTEwNw==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382925107", "bodyText": "Sure, I think meaningful name is enough for this case.", "author": "sunjincheng121", "createdAt": "2020-02-22T16:40:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3ODQ3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3ODg1OA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382878858", "bodyText": "Can we move this logic into example(Such as bring up a Thread for IoTDB Server), due to IoTDB.main is really simple to use. Even I think that starting an IoTDB server can be described in the Readme, just like Kafka's readme.[1]\nWhat to you think?\n[1] https://github.com/apache/incubator-iotdb/tree/master/example/kafka", "author": "sunjincheng121", "createdAt": "2020-02-22T02:37:38Z", "path": "example/flink-example/src/main/java/org/apache/iotdb/flink/LocalDBServer.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.flink;\n+\n+import org.apache.iotdb.db.service.IoTDB;\n+\n+public class LocalDBServer {\n+    public static void main(String[] args) {\n+        IoTDB.main(args);", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyMTY2OA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382921668", "bodyText": "This was mainly to solve the version compatibility problem during testing. I think I can delete it and update the document. Thanks.", "author": "vesense", "createdAt": "2020-02-22T15:49:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3ODg1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3OTczMg==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382879732", "bodyText": "If the batch size > 0, then we need a timer for flush the buffer data.", "author": "sunjincheng121", "createdAt": "2020-02-22T02:51:24Z", "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/IoTDBSink.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.state.FunctionInitializationContext;\n+import org.apache.flink.runtime.state.FunctionSnapshotContext;\n+import org.apache.flink.streaming.api.checkpoint.CheckpointedFunction;\n+import org.apache.flink.streaming.api.functions.sink.RichSinkFunction;\n+import org.apache.flink.streaming.api.operators.StreamingRuntimeContext;\n+import org.apache.iotdb.service.rpc.thrift.TSStatus;\n+import org.apache.iotdb.session.Session;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+public class IoTDBSink<IN> extends RichSinkFunction<IN> implements CheckpointedFunction {\n+\n+    private static final long serialVersionUID = 1L;\n+    private static final Logger LOG = LoggerFactory.getLogger(IoTDBSink.class);\n+\n+    private IoTSerializationSchema<IN> serializationSchema;\n+    private IoTDBOptions options;\n+    private transient Session session;\n+\n+    private boolean batchFlushOnCheckpoint; // false by default\n+    private int batchSize = 100;", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyMTIxNQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382921215", "bodyText": "The timer here is checkpoint interval.", "author": "vesense", "createdAt": "2020-02-22T15:43:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3OTczMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1ODU1Mg==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382958552", "bodyText": "Some times checkpoint interval is pretty long, even may 10min or more. and the  checkpoint is ensure do not miss data when checkpointing, but not ensure the SLA(such as delayed), So in this case it's better to have opportunity to set timer for flush data.\nWhat do you think?", "author": "sunjincheng121", "createdAt": "2020-02-23T02:41:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3OTczMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg5NDQ2Ng==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r383894466", "bodyText": "Make sense. Will update.", "author": "vesense", "createdAt": "2020-02-25T13:59:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3OTczMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDEyMA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382880120", "bodyText": "Could you please move the License to the top of this file, then we can keep same style with other connector, such as [1][2]?\n[1] https://raw.githubusercontent.com/apache/incubator-iotdb/master/example/rocketmq/readme.md\n[2]https://raw.githubusercontent.com/apache/incubator-iotdb/master/example/kafka/readme.md", "author": "sunjincheng121", "createdAt": "2020-02-22T02:57:04Z", "path": "example/flink-example/README.md", "diffHunk": "@@ -0,0 +1,26 @@\n+# IoTDB-Flink-Connector Example\n+\n+## Usage\n+\n+1. Run `LocalDBServer` to launch the iotdb\n+2. Run `Example` to execute the flink job \n+\n+\n+## License\n+", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwODA3OQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382908079", "bodyText": "Will update.", "author": "vesense", "createdAt": "2020-02-22T12:05:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDEyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDI0OA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382880248", "bodyText": "It's better to add more device data?", "author": "sunjincheng121", "createdAt": "2020-02-22T02:59:20Z", "path": "example/flink-example/src/main/java/org/apache/iotdb/flink/Example.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.flink;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.streaming.api.functions.source.SourceFunction;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class Example {\n+    public static void main(String[] args) {\n+        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+        env.enableCheckpointing(3000);\n+\n+        IoTDBOptions options = new IoTDBOptions();\n+        options.setHost(\"127.0.0.1\");\n+        options.setPort(6667);\n+        options.setUser(\"root\");\n+        options.setPassword(\"root\");\n+        options.setStorageGroup(\"root.sg\");\n+        options.setTimeseriesOptionList(Lists.newArrayList(new IoTDBOptions.TimeseriesOption(\"root.sg.d1.s1\")));\n+\n+        IoTSerializationSchema serializationSchema = new DefaultIoTSerializationSchema(options);\n+        IoTDBSink ioTDBSink = new IoTDBSink(options, serializationSchema)\n+                // enable batching\n+                .withBatchFlushOnCheckpoint(true)\n+                .withBatchSize(10)\n+                ;\n+\n+        env.addSource(new SensorSource())\n+                .name(\"sensor-source\")\n+                .setParallelism(1)\n+\n+                .addSink(ioTDBSink)\n+                .name(\"iotdb-sink\")\n+                .setParallelism(1)\n+        ;\n+\n+        try {\n+            env.execute(\"iotdb-flink-example\");\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    private static class SensorSource implements SourceFunction<Map<String,String>> {\n+        boolean running = true;\n+\n+        @Override\n+        public void run(SourceContext context) throws Exception {\n+            Random random = new Random();\n+            while (running) {\n+                Map tuple = new HashMap();\n+                tuple.put(\"device\", \"root.sg.d1\");", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyMTM5Mw==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382921393", "bodyText": "I prefer to keep the example simpler.", "author": "vesense", "createdAt": "2020-02-22T15:45:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDI0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDU5MA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382880590", "bodyText": "This is not necessary in this PR, right? [1]\nhttps://github.com/apache/incubator-iotdb/pull/824/files", "author": "sunjincheng121", "createdAt": "2020-02-22T03:03:55Z", "path": "example/session/src/main/java/org/apache/iotdb/SessionExample.java", "diffHunk": "@@ -44,9 +44,15 @@ public static void main(String[] args)\n     session.open();\n \n     session.setStorageGroup(\"root.sg1\");\n-    session.createTimeseries(\"root.sg1.d1.s1\", TSDataType.INT64, TSEncoding.RLE, CompressionType.SNAPPY);\n-    session.createTimeseries(\"root.sg1.d1.s2\", TSDataType.INT64, TSEncoding.RLE, CompressionType.SNAPPY);\n-    session.createTimeseries(\"root.sg1.d1.s3\", TSDataType.INT64, TSEncoding.RLE, CompressionType.SNAPPY);\n+    if (session.checkTimeseriesExists(\"root.sg1.d1.s1\")) {\n+      session.createTimeseries(\"root.sg1.d1.s1\", TSDataType.INT64, TSEncoding.RLE, CompressionType.SNAPPY);\n+    }\n+    if (session.checkTimeseriesExists(\"root.sg1.d1.s2\")) {\n+      session.createTimeseries(\"root.sg1.d1.s2\", TSDataType.INT64, TSEncoding.RLE, CompressionType.SNAPPY);\n+    }\n+    if (session.checkTimeseriesExists(\"root.sg1.d1.s3\")) {\n+      session.createTimeseries(\"root.sg1.d1.s3\", TSDataType.INT64, TSEncoding.RLE, CompressionType.SNAPPY);\n+    }", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwODA4NQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382908085", "bodyText": "Updated.", "author": "vesense", "createdAt": "2020-02-22T12:06:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDU5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDY2MA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382880660", "bodyText": "Move to previous line\uff1f", "author": "sunjincheng121", "createdAt": "2020-02-22T03:05:29Z", "path": "flink-iotdb-connector/README.md", "diffHunk": "@@ -0,0 +1,65 @@\n+# IoTDB-Flink-Connector\n+\n+IoTDB integration for [Apache Flink](https://flink.apache.org/). This module includes the iotdb sink that allows a flink job to write events into timeseries.\n+\n+## IoTDBSink\n+To use the `IoTDBSink`,  you need construct an instance of it by specifying `IoTDBOptions` and `IoTSerializationSchema` instances.\n+The `IoTDBSink` send only one event after another by default, but you can change to batch by invoking `withBatchFlushOnCheckpoint(true)`. \n+\n+## Examples\n+The following is an example which receiving events from sensor source and then sending events to iotdb.\n+\n+ ```java\n+StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+        env.enableCheckpointing(3000);\n+\n+        IoTDBOptions options = new IoTDBOptions();\n+        options.setHost(\"127.0.0.1\");\n+        options.setPort(6667);\n+        options.setUser(\"root\");\n+        options.setPassword(\"root\");\n+        options.setStorageGroup(\"root.sg\");\n+        options.setTimeseries(Lists.newArrayList(\"root.sg.d1.s1\"));\n+\n+        IoTSerializationSchema serializationSchema = new DefaultIoTSerializationSchema();\n+        IoTDBSink ioTDBSink = new IoTDBSink(options, serializationSchema)\n+                // enable batching\n+                .withBatchFlushOnCheckpoint(true)\n+                .withBatchSize(10)\n+                ;\n+\n+        env.addSource(new SensorSource())\n+                .name(\"sensor-source\")\n+                .setParallelism(1)\n+\n+                .addSink(ioTDBSink)\n+                .name(\"iotdb-sink\")\n+                .setParallelism(1)\n+        ;", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwODEwMQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382908101", "bodyText": "Will update.", "author": "vesense", "createdAt": "2020-02-22T12:06:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDY2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDgxMA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382880810", "bodyText": "This is not necessary in this PR, right? [1]\nhttps://github.com/apache/incubator-iotdb/pull/824/files", "author": "sunjincheng121", "createdAt": "2020-02-22T03:07:47Z", "path": "session/src/main/java/org/apache/iotdb/session/Session.java", "diffHunk": "@@ -558,6 +558,15 @@ public TSStatus createTimeseries(String path, TSDataType dataType,\n     }\n   }\n \n+  public boolean checkTimeseriesExists(String path) throws IoTDBSessionException {", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwODEwOA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382908108", "bodyText": "Updated.", "author": "vesense", "createdAt": "2020-02-22T12:06:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDgxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDk2Mg==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382880962", "bodyText": "Why we need this dependency?", "author": "sunjincheng121", "createdAt": "2020-02-22T03:10:09Z", "path": "flink-iotdb-connector/pom.xml", "diffHunk": "@@ -0,0 +1,78 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one or more\n+ contributor license agreements.  See the NOTICE file distributed with\n+ this work for additional information regarding copyright ownership.\n+ The ASF licenses this file to You under the Apache License, Version 2.0\n+ (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+\n+     http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.apache.iotdb</groupId>\n+        <artifactId>iotdb-parent</artifactId>\n+        <version>0.10.0-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+    <artifactId>flink-iotdb-connector</artifactId>\n+    <packaging>jar</packaging>\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <compile.version>1.8</compile.version>\n+        <flink.version>1.7.0</flink.version>\n+        <scala.binary.version>2.11</scala.binary.version>\n+    </properties>\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.iotdb</groupId>\n+            <artifactId>iotdb-session</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.flink</groupId>\n+            <artifactId>flink-java</artifactId>\n+            <version>${flink.version}</version>\n+        </dependency>", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkxODY5OA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382918698", "bodyText": "Will update.", "author": "vesense", "createdAt": "2020-02-22T15:05:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDk2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDk2Nw==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382880967", "bodyText": "Why we need this dependency?", "author": "sunjincheng121", "createdAt": "2020-02-22T03:10:22Z", "path": "flink-iotdb-connector/pom.xml", "diffHunk": "@@ -0,0 +1,78 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one or more\n+ contributor license agreements.  See the NOTICE file distributed with\n+ this work for additional information regarding copyright ownership.\n+ The ASF licenses this file to You under the Apache License, Version 2.0\n+ (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+\n+     http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.apache.iotdb</groupId>\n+        <artifactId>iotdb-parent</artifactId>\n+        <version>0.10.0-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+    <artifactId>flink-iotdb-connector</artifactId>\n+    <packaging>jar</packaging>\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <compile.version>1.8</compile.version>\n+        <flink.version>1.7.0</flink.version>\n+        <scala.binary.version>2.11</scala.binary.version>\n+    </properties>\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.iotdb</groupId>\n+            <artifactId>iotdb-session</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.flink</groupId>\n+            <artifactId>flink-java</artifactId>\n+            <version>${flink.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.flink</groupId>\n+            <artifactId>flink-streaming-java_${scala.binary.version}</artifactId>\n+            <version>${flink.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.flink</groupId>\n+            <artifactId>flink-clients_${scala.binary.version}</artifactId>\n+            <version>${flink.version}</version>\n+        </dependency>", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkxODY5MA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382918690", "bodyText": "Will update.", "author": "vesense", "createdAt": "2020-02-22T15:05:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDk2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDk3Mw==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382880973", "bodyText": "Why we need this dependency?", "author": "sunjincheng121", "createdAt": "2020-02-22T03:10:32Z", "path": "flink-iotdb-connector/pom.xml", "diffHunk": "@@ -0,0 +1,78 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one or more\n+ contributor license agreements.  See the NOTICE file distributed with\n+ this work for additional information regarding copyright ownership.\n+ The ASF licenses this file to You under the Apache License, Version 2.0\n+ (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+\n+     http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.apache.iotdb</groupId>\n+        <artifactId>iotdb-parent</artifactId>\n+        <version>0.10.0-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+    <artifactId>flink-iotdb-connector</artifactId>\n+    <packaging>jar</packaging>\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <compile.version>1.8</compile.version>\n+        <flink.version>1.7.0</flink.version>\n+        <scala.binary.version>2.11</scala.binary.version>\n+    </properties>\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.iotdb</groupId>\n+            <artifactId>iotdb-session</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.flink</groupId>\n+            <artifactId>flink-java</artifactId>\n+            <version>${flink.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.flink</groupId>\n+            <artifactId>flink-streaming-java_${scala.binary.version}</artifactId>\n+            <version>${flink.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.flink</groupId>\n+            <artifactId>flink-clients_${scala.binary.version}</artifactId>\n+            <version>${flink.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.flink</groupId>\n+            <artifactId>flink-queryable-state-runtime_${scala.binary.version}</artifactId>\n+            <version>${flink.version}</version>\n+        </dependency>", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5NDE0MA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382894140", "bodyText": "It is better if we can reduce dependencies. :D", "author": "jixuan1989", "createdAt": "2020-02-22T07:32:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDk3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkxODY4Mw==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382918683", "bodyText": "Will update.", "author": "vesense", "createdAt": "2020-02-22T15:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDk3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MTIxNg==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382881216", "bodyText": "Could you please add some Java Doc for the class :)", "author": "sunjincheng121", "createdAt": "2020-02-22T03:14:54Z", "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/Event.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+import java.util.List;\n+\n+public class Event {", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkxODcwOQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382918709", "bodyText": "Will update.", "author": "vesense", "createdAt": "2020-02-22T15:05:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MTIxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MjQ4Mg==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382882482", "bodyText": "It's better to add test case for batchFlushOnCheckpoint=true?", "author": "sunjincheng121", "createdAt": "2020-02-22T03:36:54Z", "path": "flink-iotdb-connector/src/test/java/org/apache/iotdb/flink/IoTDBSinkTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.iotdb.session.Session;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+\n+public class IoTDBSinkTest {\n+\n+    private IoTDBSink ioTDBSink;\n+    private Session session;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        IoTDBOptions options = new IoTDBOptions();\n+        options.setTimeseriesOptionList(Lists.newArrayList(new IoTDBOptions.TimeseriesOption(\"root.sg.D01.temperature\")));\n+        ioTDBSink = new IoTDBSink(options, new DefaultIoTSerializationSchema(options));\n+\n+        session = mock(Session.class);\n+        ioTDBSink.setSession(session);\n+    }\n+\n+    @Test\n+    public void testSink() throws Exception {", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyMTQyMw==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382921423", "bodyText": "Make sense, will update.", "author": "vesense", "createdAt": "2020-02-22T15:46:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MjQ4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MjU0OQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382882549", "bodyText": "It's better to add test case for this class, What do you think?", "author": "sunjincheng121", "createdAt": "2020-02-22T03:38:30Z", "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/DefaultIoTSerializationSchema.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class DefaultIoTSerializationSchema implements IoTSerializationSchema<Map<String,String>> {", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwODY3OA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382908678", "bodyText": "Will update.", "author": "vesense", "createdAt": "2020-02-22T12:17:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MjU0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4Mjg1OQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382882859", "bodyText": "It's better add Java Doc for this interface.", "author": "sunjincheng121", "createdAt": "2020-02-22T03:43:46Z", "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/IoTSerializationSchema.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+import java.io.Serializable;\n+\n+public interface IoTSerializationSchema<T> extends Serializable {", "originalCommit": "115b8cec1082524ff5ef18af2e4ede53762fdc8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwODY3NA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r382908674", "bodyText": "Will update.", "author": "vesense", "createdAt": "2020-02-22T12:17:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4Mjg1OQ=="}], "type": "inlineReview"}, {"oid": "2f12978cc65cfc47f659b837e174d535fe2f53af", "url": "https://github.com/apache/iotdb/commit/2f12978cc65cfc47f659b837e174d535fe2f53af", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb", "committedDate": "2020-02-22T11:29:01Z", "type": "commit"}, {"oid": "b10c17af87692b9992a07eabd224bf4407600937", "url": "https://github.com/apache/iotdb/commit/b10c17af87692b9992a07eabd224bf4407600937", "message": "Merge branch 'master' into flink_iotdb_connector", "committedDate": "2020-02-22T11:31:23Z", "type": "commit"}, {"oid": "83fc8b53ff4a3bdab7f7839b195ca8addb09901e", "url": "https://github.com/apache/iotdb/commit/83fc8b53ff4a3bdab7f7839b195ca8addb09901e", "message": "[IOTDB-497] Addressed review comments", "committedDate": "2020-02-25T15:52:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MTUyOA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r386091528", "bodyText": "IMO the separator should be configurable because users' data may contains \",\".", "author": "WeiZhong94", "createdAt": "2020-03-01T09:23:36Z", "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/DefaultIoTSerializationSchema.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * @inheritDoc\n+ * The default implementation of IoTSerializationSchema. Gets info from a map struct.\n+ */\n+public class DefaultIoTSerializationSchema implements IoTSerializationSchema<Map<String,String>> {\n+    public static final String FIELD_DEVICE = \"device\";\n+    public static final String FIELD_TIMESTAMP = \"timestamp\";\n+    public static final String FIELD_MEASUREMENTS = \"measurements\";\n+    public static final String FIELD_VALUES = \"values\";\n+    public static final String DEFAULT_SEPARATOR = \",\";", "originalCommit": "83fc8b53ff4a3bdab7f7839b195ca8addb09901e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMjQ5Nw==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r387402497", "bodyText": "Make sense. Will update.", "author": "vesense", "createdAt": "2020-03-04T01:36:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MTUyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MTUzOA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r386091538", "bodyText": "Map -> Map<String, String> ?", "author": "WeiZhong94", "createdAt": "2020-03-01T09:23:48Z", "path": "example/flink/src/main/java/org/apache/iotdb/flink/FlinkIoTDBSink.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.flink;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.streaming.api.functions.source.SourceFunction;\n+import org.apache.iotdb.db.service.IoTDB;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class FlinkIoTDBSink {\n+    public static void main(String[] args) throws Exception {\n+        // launch the local iotDB server at default port: 6667\n+        IoTDB.main(args);\n+\n+        Thread.sleep(3000);\n+\n+        // run the flink job on local mini cluster\n+        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+        env.enableCheckpointing(3000);\n+\n+        IoTDBOptions options = new IoTDBOptions();\n+        options.setHost(\"127.0.0.1\");\n+        options.setPort(6667);\n+        options.setUser(\"root\");\n+        options.setPassword(\"root\");\n+        options.setStorageGroup(\"root.sg\");\n+        options.setTimeseriesOptionList(Lists.newArrayList(new IoTDBOptions.TimeseriesOption(\"root.sg.d1.s1\")));\n+\n+        IoTSerializationSchema serializationSchema = new DefaultIoTSerializationSchema(options);\n+        IoTDBSink ioTDBSink = new IoTDBSink(options, serializationSchema)\n+                // enable batching\n+                .withBatchSize(10);\n+\n+        env.addSource(new SensorSource())\n+                .name(\"sensor-source\")\n+                .setParallelism(1)\n+\n+                .addSink(ioTDBSink)\n+                .name(\"iotdb-sink\")\n+                .setParallelism(1);\n+\n+        env.execute(\"iotdb-flink-example\");\n+    }\n+\n+    private static class SensorSource implements SourceFunction<Map<String,String>> {\n+        boolean running = true;\n+\n+        @Override\n+        public void run(SourceContext context) throws Exception {\n+            Random random = new Random();\n+            while (running) {\n+                Map tuple = new HashMap();", "originalCommit": "83fc8b53ff4a3bdab7f7839b195ca8addb09901e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMjE4Ng==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r387402186", "bodyText": "Will update.", "author": "vesense", "createdAt": "2020-03-04T01:35:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MTUzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MTYyOQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r386091629", "bodyText": "It looks like this method was not covered by the tests.", "author": "WeiZhong94", "createdAt": "2020-03-01T09:25:09Z", "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/IoTDBSink.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.streaming.api.functions.sink.RichSinkFunction;\n+import org.apache.iotdb.service.rpc.thrift.TSStatus;\n+import org.apache.iotdb.session.Session;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The `IoTDBSink` allows flink jobs to write events into IoTDB timeseries.\n+ * By default send only one event after another, but you can change to batch by invoking `withBatchSize(int)`.\n+ * @param <IN> input type\n+ */\n+public class IoTDBSink<IN> extends RichSinkFunction<IN> {\n+\n+    private static final long serialVersionUID = 1L;\n+    private static final Logger LOG = LoggerFactory.getLogger(IoTDBSink.class);\n+\n+    private IoTSerializationSchema<IN> serializationSchema;\n+    private IoTDBOptions options;\n+    private transient Session session;\n+    private transient ScheduledExecutorService scheduledExecutor;\n+\n+    private int batchSize = 0;\n+    private int flushIntervalMs = 3000;\n+    private transient List<Event> batchList;\n+\n+    public IoTDBSink(IoTDBOptions options, IoTSerializationSchema<IN> schema) {\n+        this.options = options;\n+        this.serializationSchema = schema;\n+    }\n+\n+    @Override\n+    public void open(Configuration parameters) throws Exception {\n+        batchList = new LinkedList<>();\n+\n+        session = new Session(options.getHost(), options.getPort(), options.getUser(), options.getPassword());\n+        session.open();\n+\n+        session.setStorageGroup(options.getStorageGroup());\n+        for (IoTDBOptions.TimeseriesOption option : options.getTimeseriesOptionList()) {\n+            if (!session.checkTimeseriesExists(option.getPath())) {\n+                session.createTimeseries(option.getPath(), option.getDataType(), option.getEncoding(), option.getCompressor());\n+            }\n+        }\n+\n+        if (batchSize > 0) {\n+            scheduledExecutor = Executors.newSingleThreadScheduledExecutor();\n+            scheduledExecutor.scheduleAtFixedRate(() -> {\n+                try {\n+                    flush();\n+                } catch (Exception e) {\n+                    LOG.error(\"flush error\", e);\n+                }\n+            }, flushIntervalMs, flushIntervalMs, TimeUnit.MILLISECONDS);\n+        }\n+    }\n+\n+    //  for testing\n+    void setSession(Session session) {\n+        this.session = session;\n+    }\n+\n+    void setBatchList(List<Event> batchList) {\n+        this.batchList = batchList;\n+    }\n+\n+    @Override\n+    public void invoke(IN input, Context context) throws Exception {\n+        Event event = serializationSchema.serialize(input);\n+        if (event == null) {\n+            return;\n+        }\n+\n+        if (batchSize > 0) {\n+            batchList.add(event);\n+            if (batchList.size() >= batchSize) {\n+                flush();\n+            }\n+            return;\n+        }\n+\n+        TSStatus status = session.insert(event.getDevice(), event.getTimestamp(),\n+                event.getMeasurements(), event.getValues());\n+        LOG.debug(\"send event result: {}\", status);\n+    }\n+\n+    public IoTDBSink<IN> withBatchSize(int batchSize) {\n+        Preconditions.checkArgument(batchSize >= 0);\n+        this.batchSize = batchSize;\n+        return this;\n+    }\n+\n+    public IoTDBSink<IN> withFlushIntervalMs(int flushIntervalMs) {", "originalCommit": "83fc8b53ff4a3bdab7f7839b195ca8addb09901e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMjExNA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r387402114", "bodyText": "Yep, will add.", "author": "vesense", "createdAt": "2020-03-04T01:34:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MTYyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MTYzMg==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r386091632", "bodyText": "It would be better if we can add some description for the param T.", "author": "WeiZhong94", "createdAt": "2020-03-01T09:25:14Z", "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/IoTSerializationSchema.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * IoTSerializationSchema serializes the input tuple data into events for inserting into IoTDB server.\n+ * @param <T>", "originalCommit": "83fc8b53ff4a3bdab7f7839b195ca8addb09901e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMTg5OA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r387401898", "bodyText": "Will update.", "author": "vesense", "createdAt": "2020-03-04T01:34:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MTYzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MTgyMQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r386091821", "bodyText": "IMO it would be better if we replace this class with existed class MeasurementSchema. They look similar.", "author": "WeiZhong94", "createdAt": "2020-03-01T09:27:40Z", "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/IoTDBOptions.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+import org.apache.iotdb.tsfile.file.metadata.enums.CompressionType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSEncoding;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+/**\n+ * IoTDBOptions describes the configuration related information for IoTDB and timeseries.\n+ */\n+public class IoTDBOptions implements Serializable {\n+    private String host;\n+    private int port;\n+    private String user;\n+    private String password;\n+    private String storageGroup;\n+    private List<TimeseriesOption> timeseriesOptionList;\n+\n+    public IoTDBOptions() {\n+    }\n+\n+    public IoTDBOptions(String host, int port, String user, String password,\n+                        String storageGroup, List<TimeseriesOption> timeseriesOptionList) {\n+        this.host = host;\n+        this.port = port;\n+        this.user = user;\n+        this.password = password;\n+        this.storageGroup = storageGroup;\n+        this.timeseriesOptionList = timeseriesOptionList;\n+    }\n+\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    public void setHost(String host) {\n+        this.host = host;\n+    }\n+\n+    public int getPort() {\n+        return port;\n+    }\n+\n+    public void setPort(int port) {\n+        this.port = port;\n+    }\n+\n+    public String getUser() {\n+        return user;\n+    }\n+\n+    public void setUser(String user) {\n+        this.user = user;\n+    }\n+\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    public void setPassword(String password) {\n+        this.password = password;\n+    }\n+\n+    public String getStorageGroup() {\n+        return storageGroup;\n+    }\n+\n+    public void setStorageGroup(String storageGroup) {\n+        this.storageGroup = storageGroup;\n+    }\n+\n+    public List<TimeseriesOption> getTimeseriesOptionList() {\n+        return timeseriesOptionList;\n+    }\n+\n+    public void setTimeseriesOptionList(List<TimeseriesOption> timeseriesOptionList) {\n+        this.timeseriesOptionList = timeseriesOptionList;\n+    }\n+\n+    public static class TimeseriesOption implements Serializable {", "originalCommit": "83fc8b53ff4a3bdab7f7839b195ca8addb09901e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNDg0Nw==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r387434847", "bodyText": "Looks similar but different.MeasurementSchema  describes a measurement's information registered in FileSchema for ts file serializing and deserializing.  TimeseriesOption  describes a timeseries options information for Flink job configuration.\nWhat do you think? @jixuan1989", "author": "vesense", "createdAt": "2020-03-04T03:45:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MTgyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MTk2Mw==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r386091963", "bodyText": "IMO the operations on the batchList also need synchronization as it is possible to read/write this object concurrently.", "author": "WeiZhong94", "createdAt": "2020-03-01T09:29:35Z", "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/IoTDBSink.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.streaming.api.functions.sink.RichSinkFunction;\n+import org.apache.iotdb.service.rpc.thrift.TSStatus;\n+import org.apache.iotdb.session.Session;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The `IoTDBSink` allows flink jobs to write events into IoTDB timeseries.\n+ * By default send only one event after another, but you can change to batch by invoking `withBatchSize(int)`.\n+ * @param <IN> input type\n+ */\n+public class IoTDBSink<IN> extends RichSinkFunction<IN> {\n+\n+    private static final long serialVersionUID = 1L;\n+    private static final Logger LOG = LoggerFactory.getLogger(IoTDBSink.class);\n+\n+    private IoTSerializationSchema<IN> serializationSchema;\n+    private IoTDBOptions options;\n+    private transient Session session;\n+    private transient ScheduledExecutorService scheduledExecutor;\n+\n+    private int batchSize = 0;\n+    private int flushIntervalMs = 3000;\n+    private transient List<Event> batchList;\n+\n+    public IoTDBSink(IoTDBOptions options, IoTSerializationSchema<IN> schema) {\n+        this.options = options;\n+        this.serializationSchema = schema;\n+    }\n+\n+    @Override\n+    public void open(Configuration parameters) throws Exception {\n+        batchList = new LinkedList<>();\n+\n+        session = new Session(options.getHost(), options.getPort(), options.getUser(), options.getPassword());\n+        session.open();\n+\n+        session.setStorageGroup(options.getStorageGroup());\n+        for (IoTDBOptions.TimeseriesOption option : options.getTimeseriesOptionList()) {\n+            if (!session.checkTimeseriesExists(option.getPath())) {\n+                session.createTimeseries(option.getPath(), option.getDataType(), option.getEncoding(), option.getCompressor());\n+            }\n+        }\n+\n+        if (batchSize > 0) {\n+            scheduledExecutor = Executors.newSingleThreadScheduledExecutor();\n+            scheduledExecutor.scheduleAtFixedRate(() -> {\n+                try {\n+                    flush();\n+                } catch (Exception e) {\n+                    LOG.error(\"flush error\", e);\n+                }\n+            }, flushIntervalMs, flushIntervalMs, TimeUnit.MILLISECONDS);\n+        }\n+    }\n+\n+    //  for testing\n+    void setSession(Session session) {\n+        this.session = session;\n+    }\n+\n+    void setBatchList(List<Event> batchList) {\n+        this.batchList = batchList;\n+    }\n+\n+    @Override\n+    public void invoke(IN input, Context context) throws Exception {\n+        Event event = serializationSchema.serialize(input);\n+        if (event == null) {\n+            return;\n+        }\n+\n+        if (batchSize > 0) {\n+            batchList.add(event);", "originalCommit": "83fc8b53ff4a3bdab7f7839b195ca8addb09901e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4MzI1MQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r387383251", "bodyText": "I think this is a crucial bug, and we have to fix the concurrency problem before we merge this pr.", "author": "jixuan1989", "createdAt": "2020-03-04T00:53:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MTk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMTQ0OA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r387401448", "bodyText": "Will update.", "author": "vesense", "createdAt": "2020-03-04T01:32:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MTk2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MTk4Ng==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r386091986", "bodyText": "Map -> Map<String, String> ?", "author": "WeiZhong94", "createdAt": "2020-03-01T09:30:08Z", "path": "flink-iotdb-connector/src/test/java/org/apache/iotdb/flink/DefaultIoTSerializationSchemaTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+import com.google.common.collect.Lists;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.*;\n+\n+public class DefaultIoTSerializationSchemaTest {\n+\n+    @Test\n+    public void serialize() {\n+        IoTDBOptions options = new IoTDBOptions();\n+        options.setTimeseriesOptionList(Lists.newArrayList(new IoTDBOptions.TimeseriesOption(\"root.sg.D01.temperature\")));\n+        DefaultIoTSerializationSchema serializationSchema = new DefaultIoTSerializationSchema(options);\n+\n+        Map tuple = new HashMap();", "originalCommit": "83fc8b53ff4a3bdab7f7839b195ca8addb09901e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMTQyOQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r387401429", "bodyText": "Will update.", "author": "vesense", "createdAt": "2020-03-04T01:32:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MTk4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MjA0NQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r386092045", "bodyText": "ditto", "author": "WeiZhong94", "createdAt": "2020-03-01T09:31:04Z", "path": "flink-iotdb-connector/src/test/java/org/apache/iotdb/flink/IoTDBSinkBatchInsertTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.iotdb.session.Session;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.*;\n+\n+public class IoTDBSinkBatchInsertTest {\n+\n+    private IoTDBSink ioTDBSink;\n+    private Session session;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        IoTDBOptions options = new IoTDBOptions();\n+        options.setTimeseriesOptionList(Lists.newArrayList(new IoTDBOptions.TimeseriesOption(\"root.sg.D01.temperature\")));\n+        ioTDBSink = new IoTDBSink(options, new DefaultIoTSerializationSchema(options));\n+        ioTDBSink.withBatchSize(3);\n+\n+        session = mock(Session.class);\n+        ioTDBSink.setSession(session);\n+        ioTDBSink.setBatchList(new ArrayList<>());\n+    }\n+\n+    @Test\n+    public void testBatchInsert() throws Exception {\n+        Map tuple = new HashMap();\n+        tuple.put(\"device\", \"root.sg.D01\");\n+        tuple.put(\"timestamp\", \"1581861293000\");\n+        tuple.put(\"measurements\", \"temperature\");\n+        tuple.put(\"values\", \"36.5\");\n+        ioTDBSink.invoke(tuple, null);\n+\n+        verifyZeroInteractions(session);\n+\n+        tuple = new HashMap();\n+        tuple.put(\"device\", \"root.sg.D01\");\n+        tuple.put(\"timestamp\", \"1581861293001\");\n+        tuple.put(\"measurements\", \"temperature\");\n+        tuple.put(\"values\", \"37.2\");\n+        ioTDBSink.invoke(tuple, null);\n+\n+        verifyZeroInteractions(session);\n+\n+        tuple = new HashMap();\n+        tuple.put(\"device\", \"root.sg.D01\");\n+        tuple.put(\"timestamp\", \"1581861293003\");\n+        tuple.put(\"measurements\", \"temperature\");\n+        tuple.put(\"values\", \"37.1\");\n+        ioTDBSink.invoke(tuple, null);\n+\n+        verify(session).insertInBatch(any(List.class), any(List.class), any(List.class), any(List.class));\n+\n+        tuple = new HashMap();\n+        tuple.put(\"device\", \"root.sg.D01\");\n+        tuple.put(\"timestamp\", \"1581861293005\");\n+        tuple.put(\"measurements\", \"temperature\");\n+        tuple.put(\"values\", \"36.5\");\n+        ioTDBSink.invoke(tuple, null);\n+\n+        verifyZeroInteractions(session);\n+    }\n+\n+    @Test\n+    public void close() throws Exception {\n+        Map tuple = new HashMap();", "originalCommit": "83fc8b53ff4a3bdab7f7839b195ca8addb09901e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMTQwNA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r387401404", "bodyText": "Will update.", "author": "vesense", "createdAt": "2020-03-04T01:32:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MjA0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MjMzNA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r386092334", "bodyText": "It seems the comment above it are no longer needed and makes this line confusing. It would be better if we can remove the comment or move this line to upper place?", "author": "WeiZhong94", "createdAt": "2020-03-01T09:35:27Z", "path": "pom.xml", "diffHunk": "@@ -94,6 +95,7 @@\n         <!-- Exclude all generated code -->\n         <sonar.exclusions>**/generated-sources</sonar.exclusions>\n         <!-- By default, the argLine is empty-->\n+        <guava.version>21.0</guava.version>", "originalCommit": "83fc8b53ff4a3bdab7f7839b195ca8addb09901e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4MTk0Mg==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r387381942", "bodyText": "yes the comment is for explaining why we wrote <argLine/>, as the argLine is modified in the maven-surefire-plugin plugin", "author": "jixuan1989", "createdAt": "2020-03-04T00:49:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MjMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMTM2Nw==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r387401367", "bodyText": "Will update.", "author": "vesense", "createdAt": "2020-03-04T01:31:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MjMzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MjczNQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r386092735", "bodyText": "As this logic may be reused in other IoTSerializationSchema (user implemented or RowIoTSerializationSchema in future if we want to support IotDB in Flink Table API), IMO it would be better to move it to IoTDBSink.", "author": "WeiZhong94", "createdAt": "2020-03-01T09:40:43Z", "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/DefaultIoTSerializationSchema.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * @inheritDoc\n+ * The default implementation of IoTSerializationSchema. Gets info from a map struct.\n+ */\n+public class DefaultIoTSerializationSchema implements IoTSerializationSchema<Map<String,String>> {\n+    public static final String FIELD_DEVICE = \"device\";\n+    public static final String FIELD_TIMESTAMP = \"timestamp\";\n+    public static final String FIELD_MEASUREMENTS = \"measurements\";\n+    public static final String FIELD_VALUES = \"values\";\n+    public static final String DEFAULT_SEPARATOR = \",\";\n+\n+    private Map<String, IoTDBOptions.TimeseriesOption> timeseriesOptionMap;\n+\n+    public DefaultIoTSerializationSchema(IoTDBOptions ioTDBOptions) {\n+        timeseriesOptionMap = new HashMap<>();\n+        for (IoTDBOptions.TimeseriesOption timeseriesOption : ioTDBOptions.getTimeseriesOptionList()) {\n+            timeseriesOptionMap.put(timeseriesOption.getPath(), timeseriesOption);\n+        }\n+    }\n+\n+    @Override\n+    public Event serialize(Map<String,String> tuple) {\n+        if (tuple == null) {\n+            return null;\n+        }\n+\n+        String device = tuple.get(FIELD_DEVICE);\n+\n+        String ts = tuple.get(FIELD_TIMESTAMP);\n+        Long timestamp = ts == null ? System.currentTimeMillis() : Long.parseLong(ts);\n+\n+        List<String> measurements = null;\n+        if (tuple.get(FIELD_MEASUREMENTS) != null) {\n+            measurements = Arrays.asList(tuple.get(FIELD_MEASUREMENTS).split(DEFAULT_SEPARATOR));\n+        }\n+\n+        List<String> values = null;\n+        if (tuple.get(FIELD_VALUES) != null) {\n+            values = Arrays.asList(tuple.get(FIELD_VALUES).split(DEFAULT_SEPARATOR));\n+        }\n+\n+        if (device != null && measurements != null && values != null && measurements.size() == values.size()) {\n+            for (int i = 0; i < measurements.size(); i++) {\n+                String measurement = device + \".\" + measurements.get(i);\n+                IoTDBOptions.TimeseriesOption timeseriesOption = timeseriesOptionMap.get(measurement);\n+                if (timeseriesOption!= null && TSDataType.TEXT.equals(timeseriesOption.getDataType())) {\n+                    // The TEXT data type should be covered by \" or '\n+                    values.set(i, \"'\" + values.get(i) + \"'\");", "originalCommit": "83fc8b53ff4a3bdab7f7839b195ca8addb09901e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMTM3Mw==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r387401373", "bodyText": "Good idea, will update.", "author": "vesense", "createdAt": "2020-03-04T01:31:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MjczNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5Mjg0OA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r386092848", "bodyText": "It seems only the list of TimeseriesOption is needed. We can pass a List<TimeseriesOption> to this constructor directly. (or List<MeasurementSchema> if we replace the class TimeseriesOption with class MeasurementSchema as I suggested above)", "author": "WeiZhong94", "createdAt": "2020-03-01T09:41:51Z", "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/DefaultIoTSerializationSchema.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * @inheritDoc\n+ * The default implementation of IoTSerializationSchema. Gets info from a map struct.\n+ */\n+public class DefaultIoTSerializationSchema implements IoTSerializationSchema<Map<String,String>> {\n+    public static final String FIELD_DEVICE = \"device\";\n+    public static final String FIELD_TIMESTAMP = \"timestamp\";\n+    public static final String FIELD_MEASUREMENTS = \"measurements\";\n+    public static final String FIELD_VALUES = \"values\";\n+    public static final String DEFAULT_SEPARATOR = \",\";\n+\n+    private Map<String, IoTDBOptions.TimeseriesOption> timeseriesOptionMap;\n+\n+    public DefaultIoTSerializationSchema(IoTDBOptions ioTDBOptions) {", "originalCommit": "83fc8b53ff4a3bdab7f7839b195ca8addb09901e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMzYxMQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r387403611", "bodyText": "The DefaultIoTSerializationSchema constructor no longer needed, if we move the converting TEXT data type logic to IoTDBSink which you stated above.", "author": "vesense", "createdAt": "2020-03-04T01:40:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5Mjg0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MzA4Ng==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r386093086", "bodyText": "As we do not depends the checkpointing to flush data anymore, this line seems unnecessary.", "author": "WeiZhong94", "createdAt": "2020-03-01T09:45:28Z", "path": "example/flink/src/main/java/org/apache/iotdb/flink/FlinkIoTDBSink.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.flink;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.streaming.api.functions.source.SourceFunction;\n+import org.apache.iotdb.db.service.IoTDB;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class FlinkIoTDBSink {\n+    public static void main(String[] args) throws Exception {\n+        // launch the local iotDB server at default port: 6667\n+        IoTDB.main(args);\n+\n+        Thread.sleep(3000);\n+\n+        // run the flink job on local mini cluster\n+        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+        env.enableCheckpointing(3000);", "originalCommit": "83fc8b53ff4a3bdab7f7839b195ca8addb09901e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMjA3OA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r387402078", "bodyText": "Will update.", "author": "vesense", "createdAt": "2020-03-04T01:34:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MzA4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MzI5MA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r386093290", "bodyText": "This empty line looks strange from my side... but it's up to you.", "author": "WeiZhong94", "createdAt": "2020-03-01T09:48:02Z", "path": "example/flink/src/main/java/org/apache/iotdb/flink/FlinkIoTDBSink.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.iotdb.flink;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.streaming.api.functions.source.SourceFunction;\n+import org.apache.iotdb.db.service.IoTDB;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+\n+public class FlinkIoTDBSink {\n+    public static void main(String[] args) throws Exception {\n+        // launch the local iotDB server at default port: 6667\n+        IoTDB.main(args);\n+\n+        Thread.sleep(3000);\n+\n+        // run the flink job on local mini cluster\n+        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+        env.enableCheckpointing(3000);\n+\n+        IoTDBOptions options = new IoTDBOptions();\n+        options.setHost(\"127.0.0.1\");\n+        options.setPort(6667);\n+        options.setUser(\"root\");\n+        options.setPassword(\"root\");\n+        options.setStorageGroup(\"root.sg\");\n+        options.setTimeseriesOptionList(Lists.newArrayList(new IoTDBOptions.TimeseriesOption(\"root.sg.d1.s1\")));\n+\n+        IoTSerializationSchema serializationSchema = new DefaultIoTSerializationSchema(options);\n+        IoTDBSink ioTDBSink = new IoTDBSink(options, serializationSchema)\n+                // enable batching\n+                .withBatchSize(10);\n+\n+        env.addSource(new SensorSource())\n+                .name(\"sensor-source\")\n+                .setParallelism(1)\n+", "originalCommit": "83fc8b53ff4a3bdab7f7839b195ca8addb09901e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMDk1OQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r387400959", "bodyText": "Will update.", "author": "vesense", "createdAt": "2020-03-04T01:30:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MzI5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MzM2OQ==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r386093369", "bodyText": "ditto", "author": "WeiZhong94", "createdAt": "2020-03-01T09:48:56Z", "path": "flink-iotdb-connector/README.md", "diffHunk": "@@ -0,0 +1,60 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+# IoTDB-Flink-Connector\n+\n+IoTDB integration for [Apache Flink](https://flink.apache.org/). This module includes the iotdb sink that allows a flink job to write events into timeseries.\n+\n+## IoTDBSink\n+To use the `IoTDBSink`,  you need construct an instance of it by specifying `IoTDBOptions` and `IoTSerializationSchema` instances.\n+The `IoTDBSink` send only one event after another by default, but you can change to batch by invoking `withBatchSize(int)`. \n+\n+## Examples\n+The following is an example which receiving events from sensor source and then sending events to iotdb.\n+\n+ ```java\n+StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+        env.enableCheckpointing(3000);\n+\n+        IoTDBOptions options = new IoTDBOptions();\n+        options.setHost(\"127.0.0.1\");\n+        options.setPort(6667);\n+        options.setUser(\"root\");\n+        options.setPassword(\"root\");\n+        options.setStorageGroup(\"root.sg\");\n+        options.setTimeseries(Lists.newArrayList(\"root.sg.d1.s1\"));\n+\n+        IoTSerializationSchema serializationSchema = new DefaultIoTSerializationSchema();\n+        IoTDBSink ioTDBSink = new IoTDBSink(options, serializationSchema)\n+                // enable batching\n+                .withBatchSize(10)\n+                ;\n+\n+        env.addSource(new SensorSource())\n+                .name(\"sensor-source\")\n+                .setParallelism(1)\n+", "originalCommit": "83fc8b53ff4a3bdab7f7839b195ca8addb09901e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMTIxMg==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r387401212", "bodyText": "Will update.", "author": "vesense", "createdAt": "2020-03-04T01:31:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MzM2OQ=="}], "type": "inlineReview"}, {"oid": "7b693c5b6c14bb3528e0fab31aaa033a3318507d", "url": "https://github.com/apache/iotdb/commit/7b693c5b6c14bb3528e0fab31aaa033a3318507d", "message": "[IOTDB-497] Addressed review comments", "committedDate": "2020-03-04T08:19:58Z", "type": "commit"}, {"oid": "78778429d60212a6b983d855a955c07e3d93eb69", "url": "https://github.com/apache/iotdb/commit/78778429d60212a6b983d855a955c07e3d93eb69", "message": "[IOTDB-497] Addressed review comments", "committedDate": "2020-03-06T03:14:04Z", "type": "commit"}, {"oid": "b9ba5d4cc35fb6f4faaacac4077a1b7ecda6067b", "url": "https://github.com/apache/iotdb/commit/b9ba5d4cc35fb6f4faaacac4077a1b7ecda6067b", "message": "[IOTDB-497] fix ci build error", "committedDate": "2020-03-06T05:02:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNTcyMA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r388925720", "bodyText": "Keep the indentation consistent?", "author": "WeiZhong94", "createdAt": "2020-03-06T14:15:51Z", "path": "flink-iotdb-connector/README.md", "diffHunk": "@@ -0,0 +1,58 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+# IoTDB-Flink-Connector\n+\n+IoTDB integration for [Apache Flink](https://flink.apache.org/). This module includes the iotdb sink that allows a flink job to write events into timeseries.\n+\n+## IoTDBSink\n+To use the `IoTDBSink`,  you need construct an instance of it by specifying `IoTDBOptions` and `IoTSerializationSchema` instances.\n+The `IoTDBSink` send only one event after another by default, but you can change to batch by invoking `withBatchSize(int)`. \n+\n+## Examples\n+The following is an example which receiving events from sensor source and then sending events to iotdb.\n+\n+ ```java\n+StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();", "originalCommit": "b9ba5d4cc35fb6f4faaacac4077a1b7ecda6067b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNjI4Ng==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r388926286", "bodyText": "Unnecessary empty line.", "author": "WeiZhong94", "createdAt": "2020-03-06T14:16:48Z", "path": "flink-iotdb-connector/src/main/java/org/apache/iotdb/flink/IoTDBSink.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.streaming.api.functions.sink.RichSinkFunction;\n+import org.apache.iotdb.service.rpc.thrift.TSStatus;\n+import org.apache.iotdb.session.Session;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.*;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The `IoTDBSink` allows flink jobs to write events into IoTDB timeseries.\n+ * By default send only one event after another, but you can change to batch by invoking `withBatchSize(int)`.\n+ * @param <IN> the input data type\n+ */\n+public class IoTDBSink<IN> extends RichSinkFunction<IN> {\n+\n+    private static final long serialVersionUID = 1L;\n+    private static final Logger LOG = LoggerFactory.getLogger(IoTDBSink.class);\n+\n+    private IoTDBOptions options;\n+    private IoTSerializationSchema<IN> serializationSchema;\n+    private Map<String, IoTDBOptions.TimeseriesOption> timeseriesOptionMap;\n+    private transient Session session;\n+    private transient ScheduledExecutorService scheduledExecutor;\n+\n+    private int batchSize = 0;\n+    private int flushIntervalMs = 3000;\n+    private List<Event> batchList;\n+\n+    public IoTDBSink(IoTDBOptions options, IoTSerializationSchema<IN> schema) {\n+        this.options = options;\n+        this.serializationSchema = schema;\n+        this.batchList = new LinkedList<>();\n+        this.timeseriesOptionMap = new HashMap<>();\n+        for (IoTDBOptions.TimeseriesOption timeseriesOption : options.getTimeseriesOptionList()) {\n+            timeseriesOptionMap.put(timeseriesOption.getPath(), timeseriesOption);\n+        }\n+    }\n+\n+    @Override\n+    public void open(Configuration parameters) throws Exception {\n+        initSession();\n+        initScheduler();\n+    }\n+\n+    void initSession() throws Exception {\n+        session = new Session(options.getHost(), options.getPort(), options.getUser(), options.getPassword());\n+        session.open();\n+\n+        session.setStorageGroup(options.getStorageGroup());\n+        for (IoTDBOptions.TimeseriesOption option : options.getTimeseriesOptionList()) {\n+            if (!session.checkTimeseriesExists(option.getPath())) {\n+                session.createTimeseries(option.getPath(), option.getDataType(), option.getEncoding(), option.getCompressor());\n+            }\n+        }\n+    }\n+\n+    void initScheduler() {\n+        if (batchSize > 0) {\n+            scheduledExecutor = Executors.newSingleThreadScheduledExecutor();\n+            scheduledExecutor.scheduleAtFixedRate(() -> {\n+                try {\n+                    flush();\n+                } catch (Exception e) {\n+                    LOG.error(\"flush error\", e);\n+                }\n+            }, flushIntervalMs, flushIntervalMs, TimeUnit.MILLISECONDS);\n+        }\n+    }\n+\n+    //  for testing\n+    void setSession(Session session) {\n+        this.session = session;\n+    }\n+\n+    @Override\n+    public void invoke(IN input, Context context) throws Exception {\n+        Event event = serializationSchema.serialize(input);\n+        if (event == null) {\n+            return;\n+        }\n+\n+        if (batchSize > 0) {\n+            synchronized (batchList) {\n+                batchList.add(event);\n+                if (batchList.size() >= batchSize) {\n+                    flush();\n+                }\n+                return;\n+            }\n+        }\n+\n+        convertText(event.getDevice(), event.getMeasurements(), event.getValues());\n+        TSStatus status = session.insert(event.getDevice(), event.getTimestamp(),\n+                event.getMeasurements(), event.getValues());\n+        LOG.debug(\"send event result: {}\", status);\n+    }\n+\n+    public IoTDBSink<IN> withBatchSize(int batchSize) {\n+        Preconditions.checkArgument(batchSize >= 0);\n+        this.batchSize = batchSize;\n+        return this;\n+    }\n+\n+    public IoTDBSink<IN> withFlushIntervalMs(int flushIntervalMs) {\n+        Preconditions.checkArgument(flushIntervalMs > 0);\n+        this.flushIntervalMs = flushIntervalMs;\n+        return this;\n+    }\n+\n+    @Override\n+    public void close() throws Exception {\n+        if (session != null) {\n+            try {\n+                flush();\n+            } catch (Exception e) {\n+                LOG.error(\"flush error\", e);\n+            }\n+            session.close();\n+        }\n+        if (scheduledExecutor != null) {\n+            scheduledExecutor.shutdown();\n+        }\n+    }\n+\n+    private void convertText(String device, List<String> measurements, List<String> values) {\n+        if (device != null && measurements != null && values != null && measurements.size() == values.size()) {\n+            for (int i = 0; i < measurements.size(); i++) {\n+                String measurement = device + \".\" + measurements.get(i);\n+                IoTDBOptions.TimeseriesOption timeseriesOption = timeseriesOptionMap.get(measurement);\n+                if (timeseriesOption!= null && TSDataType.TEXT.equals(timeseriesOption.getDataType())) {\n+                    // The TEXT data type should be covered by \" or '\n+                    values.set(i, \"'\" + values.get(i) + \"'\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private void flush() throws Exception {\n+        if (batchSize > 0) {\n+            synchronized (batchList) {\n+                if (batchList.size() > 0) {\n+                    List<String> deviceIds = new ArrayList<>();\n+                    List<Long> timestamps = new ArrayList<>();\n+                    List<List<String>> measurementsList = new ArrayList<>();\n+                    List<List<String>> valuesList = new ArrayList<>();\n+\n+                    for (Event event : batchList) {\n+                        convertText(event.getDevice(), event.getMeasurements(), event.getValues());\n+                        deviceIds.add(event.getDevice());\n+                        timestamps.add(event.getTimestamp());\n+                        measurementsList.add(event.getMeasurements());\n+                        valuesList.add(event.getValues());\n+                    }\n+                    List<TSStatus> statusList = session.insertInBatch(deviceIds, timestamps, measurementsList, valuesList);\n+                    LOG.debug(\"send events result: {}\", statusList);\n+                    batchList.clear();\n+                }\n+            }\n+        }\n+    }\n+", "originalCommit": "b9ba5d4cc35fb6f4faaacac4077a1b7ecda6067b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNjU5Mw==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r388926593", "bodyText": "Unnecessary empty line.", "author": "WeiZhong94", "createdAt": "2020-03-06T14:17:26Z", "path": "flink-iotdb-connector/src/test/java/org/apache/iotdb/flink/IoTDBSinkBatchInsertTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.iotdb.session.Session;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.*;\n+\n+public class IoTDBSinkBatchInsertTest {\n+\n+    private IoTDBSink ioTDBSink;\n+    private Session session;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        IoTDBOptions options = new IoTDBOptions();\n+        options.setTimeseriesOptionList(Lists.newArrayList(new IoTDBOptions.TimeseriesOption(\"root.sg.D01.temperature\")));\n+        ioTDBSink = new IoTDBSink(options, new DefaultIoTSerializationSchema());\n+        ioTDBSink.withBatchSize(3);\n+\n+        session = mock(Session.class);\n+        ioTDBSink.setSession(session);\n+    }\n+\n+    @Test\n+    public void testBatchInsert() throws Exception {\n+        Map<String,String> tuple = new HashMap();\n+        tuple.put(\"device\", \"root.sg.D01\");\n+        tuple.put(\"timestamp\", \"1581861293000\");\n+        tuple.put(\"measurements\", \"temperature\");\n+        tuple.put(\"values\", \"36.5\");\n+        ioTDBSink.invoke(tuple, null);\n+\n+        verifyZeroInteractions(session);\n+\n+        tuple = new HashMap();\n+        tuple.put(\"device\", \"root.sg.D01\");\n+        tuple.put(\"timestamp\", \"1581861293001\");\n+        tuple.put(\"measurements\", \"temperature\");\n+        tuple.put(\"values\", \"37.2\");\n+        ioTDBSink.invoke(tuple, null);\n+\n+        verifyZeroInteractions(session);\n+\n+        tuple = new HashMap();\n+        tuple.put(\"device\", \"root.sg.D01\");\n+        tuple.put(\"timestamp\", \"1581861293003\");\n+        tuple.put(\"measurements\", \"temperature\");\n+        tuple.put(\"values\", \"37.1\");\n+        ioTDBSink.invoke(tuple, null);\n+\n+        verify(session).insertInBatch(any(List.class), any(List.class), any(List.class), any(List.class));\n+\n+        tuple = new HashMap();\n+        tuple.put(\"device\", \"root.sg.D01\");\n+        tuple.put(\"timestamp\", \"1581861293005\");\n+        tuple.put(\"measurements\", \"temperature\");\n+        tuple.put(\"values\", \"36.5\");\n+        ioTDBSink.invoke(tuple, null);\n+\n+        verifyZeroInteractions(session);\n+    }\n+\n+    @Test\n+    public void close() throws Exception {\n+        Map<String,String> tuple = new HashMap();\n+        tuple.put(\"device\", \"root.sg.D01\");\n+        tuple.put(\"timestamp\", \"1581861293005\");\n+        tuple.put(\"measurements\", \"temperature\");\n+        tuple.put(\"values\", \"36.5\");\n+        ioTDBSink.invoke(tuple, null);\n+        verifyZeroInteractions(session);\n+\n+        ioTDBSink.close();\n+        verify(session).insertInBatch(any(List.class), any(List.class), any(List.class), any(List.class));\n+        verify(session).close();\n+    }\n+", "originalCommit": "b9ba5d4cc35fb6f4faaacac4077a1b7ecda6067b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNjgzOA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r388926838", "bodyText": "Unnecessary empty line.", "author": "WeiZhong94", "createdAt": "2020-03-06T14:17:50Z", "path": "flink-iotdb-connector/src/test/java/org/apache/iotdb/flink/IoTDBSinkBatchTimerTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.iotdb.session.Session;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.*;\n+\n+public class IoTDBSinkBatchTimerTest {\n+\n+    private IoTDBSink ioTDBSink;\n+    private Session session;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        IoTDBOptions options = new IoTDBOptions();\n+        options.setTimeseriesOptionList(Lists.newArrayList(new IoTDBOptions.TimeseriesOption(\"root.sg.D01.temperature\")));\n+        ioTDBSink = new IoTDBSink(options, new DefaultIoTSerializationSchema());\n+        ioTDBSink.withBatchSize(3);\n+        ioTDBSink.withFlushIntervalMs(1000);\n+        ioTDBSink.initScheduler();\n+\n+        session = mock(Session.class);\n+        ioTDBSink.setSession(session);\n+    }\n+\n+    @Test\n+    public void testBatchInsert() throws Exception {\n+        Map<String,String> tuple = new HashMap();\n+        tuple.put(\"device\", \"root.sg.D01\");\n+        tuple.put(\"timestamp\", \"1581861293000\");\n+        tuple.put(\"measurements\", \"temperature\");\n+        tuple.put(\"values\", \"36.5\");\n+        ioTDBSink.invoke(tuple, null);\n+\n+        Thread.sleep(2500);\n+\n+        verify(session).insertInBatch(any(List.class), any(List.class), any(List.class), any(List.class));\n+\n+        Thread.sleep(1000);\n+\n+        verifyZeroInteractions(session);\n+    }\n+\n+    @Test\n+    public void close() throws Exception {\n+        ioTDBSink.close();\n+        verify(session).close();\n+    }\n+", "originalCommit": "b9ba5d4cc35fb6f4faaacac4077a1b7ecda6067b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNjk1MA==", "url": "https://github.com/apache/iotdb/pull/817#discussion_r388926950", "bodyText": "Unnecessary empty line.", "author": "WeiZhong94", "createdAt": "2020-03-06T14:18:02Z", "path": "flink-iotdb-connector/src/test/java/org/apache/iotdb/flink/IoTDBSinkInsertTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.iotdb.flink;\n+\n+import com.google.common.collect.Lists;\n+import org.apache.iotdb.session.Session;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+\n+public class IoTDBSinkInsertTest {\n+\n+    private IoTDBSink ioTDBSink;\n+    private Session session;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        IoTDBOptions options = new IoTDBOptions();\n+        options.setTimeseriesOptionList(Lists.newArrayList(new IoTDBOptions.TimeseriesOption(\"root.sg.D01.temperature\")));\n+        ioTDBSink = new IoTDBSink(options, new DefaultIoTSerializationSchema());\n+\n+        session = mock(Session.class);\n+        ioTDBSink.setSession(session);\n+    }\n+\n+    @Test\n+    public void testInsert() throws Exception {\n+        Map<String,String> tuple = new HashMap();\n+        tuple.put(\"device\", \"root.sg.D01\");\n+        tuple.put(\"timestamp\", \"1581861293000\");\n+        tuple.put(\"measurements\", \"temperature\");\n+        tuple.put(\"values\", \"36.5\");\n+\n+        ioTDBSink.invoke(tuple, null);\n+        verify(session).insert(any(String.class), any(Long.class), any(List.class), any(List.class));\n+    }\n+\n+    @Test\n+    public void close() throws Exception {\n+        ioTDBSink.close();\n+        verify(session).close();\n+    }\n+", "originalCommit": "b9ba5d4cc35fb6f4faaacac4077a1b7ecda6067b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "32f32f62f62a5fdb59fa751a00556505fb604114", "url": "https://github.com/apache/iotdb/commit/32f32f62f62a5fdb59fa751a00556505fb604114", "message": "[IOTDB-497] remove unnecessary empty lines", "committedDate": "2020-03-07T03:11:08Z", "type": "commit"}]}