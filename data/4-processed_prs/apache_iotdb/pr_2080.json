{"pr_number": 2080, "pr_title": "Add continuous compaction in level compaction strategy", "pr_createdAt": "2020-11-19T05:18:29Z", "pr_url": "https://github.com/apache/iotdb/pull/2080", "timeline": [{"oid": "09288cdfa689921fadd6f794884515dc909302aa", "url": "https://github.com/apache/iotdb/commit/09288cdfa689921fadd6f794884515dc909302aa", "message": "add enable unseq compaction", "committedDate": "2020-11-06T11:30:43Z", "type": "commit"}, {"oid": "49fab34ba14c60d99f540297a3113295eee3a08f", "url": "https://github.com/apache/iotdb/commit/49fab34ba14c60d99f540297a3113295eee3a08f", "message": "Merge branch 'master' of https://github.com/apache/iotdb", "committedDate": "2020-11-07T06:18:17Z", "type": "commit"}, {"oid": "2854f931acefe3bca3d9548ddcf5b37760473980", "url": "https://github.com/apache/iotdb/commit/2854f931acefe3bca3d9548ddcf5b37760473980", "message": "Merge branch 'master' of https://github.com/apache/iotdb", "committedDate": "2020-11-07T10:43:36Z", "type": "commit"}, {"oid": "9ba681617dab53da7e51865d9aee14dd6ebbe335", "url": "https://github.com/apache/iotdb/commit/9ba681617dab53da7e51865d9aee14dd6ebbe335", "message": "Merge branches 'master' and 'master' of https://github.com/apache/iotdb", "committedDate": "2020-11-08T08:34:09Z", "type": "commit"}, {"oid": "9da683521fabfb7ad05f84d319d9b504c71a4f2b", "url": "https://github.com/apache/iotdb/commit/9da683521fabfb7ad05f84d319d9b504c71a4f2b", "message": "Merge branch 'master' of https://github.com/apache/iotdb", "committedDate": "2020-11-10T05:54:00Z", "type": "commit"}, {"oid": "f438705f15d0e2eea26ed27f5348414f2e58f231", "url": "https://github.com/apache/iotdb/commit/f438705f15d0e2eea26ed27f5348414f2e58f231", "message": "Merge branch 'master' of https://github.com/apache/iotdb", "committedDate": "2020-11-11T03:13:16Z", "type": "commit"}, {"oid": "b5a17d52eea06efa2650921ecb1d104e00309415", "url": "https://github.com/apache/iotdb/commit/b5a17d52eea06efa2650921ecb1d104e00309415", "message": "Merge branch 'master' of https://github.com/apache/iotdb", "committedDate": "2020-11-12T02:03:02Z", "type": "commit"}, {"oid": "ae79d884d1c520da33dba51a4f1ef84ee52a70a8", "url": "https://github.com/apache/iotdb/commit/ae79d884d1c520da33dba51a4f1ef84ee52a70a8", "message": "Merge branch 'master' of https://github.com/apache/iotdb", "committedDate": "2020-11-12T10:33:05Z", "type": "commit"}, {"oid": "97a2b13f188a81b9f6228fd599e18a818fcf331a", "url": "https://github.com/apache/iotdb/commit/97a2b13f188a81b9f6228fd599e18a818fcf331a", "message": "Merge branch 'master' of https://github.com/apache/iotdb", "committedDate": "2020-11-13T02:41:57Z", "type": "commit"}, {"oid": "b80249f4cc9d090ce560146d5c86197be7f217ac", "url": "https://github.com/apache/iotdb/commit/b80249f4cc9d090ce560146d5c86197be7f217ac", "message": "Merge branch 'master' of https://github.com/zhanglingzhe0820/incubator-iotdb", "committedDate": "2020-11-18T06:23:54Z", "type": "commit"}, {"oid": "3a99508fca0bb3b72556260b8690e934811ec9fb", "url": "https://github.com/apache/iotdb/commit/3a99508fca0bb3b72556260b8690e934811ec9fb", "message": "Merge branch 'master' of https://github.com/apache/iotdb", "committedDate": "2020-11-19T02:32:22Z", "type": "commit"}, {"oid": "32395a8cfd3b214ce4e8b61588fc808f13612120", "url": "https://github.com/apache/iotdb/commit/32395a8cfd3b214ce4e8b61588fc808f13612120", "message": "add continuous compaction in level compaction strategy", "committedDate": "2020-11-19T03:06:56Z", "type": "commit"}, {"oid": "c7f8344b8b90c5c34a3cc89cc3e077411d95e7db", "url": "https://github.com/apache/iotdb/commit/c7f8344b8b90c5c34a3cc89cc3e077411d95e7db", "message": "fix compaction bug", "committedDate": "2020-11-19T05:15:41Z", "type": "commit"}, {"oid": "095c5dee16a60825261ecb44c4b0140ed766144d", "url": "https://github.com/apache/iotdb/commit/095c5dee16a60825261ecb44c4b0140ed766144d", "message": "Merge branch 'master' of https://github.com/apache/iotdb", "committedDate": "2020-11-19T06:12:18Z", "type": "commit"}, {"oid": "0f5702ecb27bd483cb430475f3103d4d27318560", "url": "https://github.com/apache/iotdb/commit/0f5702ecb27bd483cb430475f3103d4d27318560", "message": "Merge branch 'master' into add_continuous_compaction_in_level_compaction_strategy", "committedDate": "2020-11-19T06:12:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcwMjIyMw==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r526702223", "bodyText": "this might mean during a merge process, another merge can be processed... why this method is needed", "author": "EJTTianYu", "createdAt": "2020-11-19T09:12:11Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/compaction/level/LevelCompactionTsFileManagement.java", "diffHunk": "@@ -439,19 +439,26 @@ private void forkTsFileList(\n \n   @Override\n   protected void merge(long timePartition) {\n-    merge(forkedSequenceTsFileResources, true, timePartition, seqLevelNum,\n+    // whether execute merge chunk in this task\n+    boolean isMerge = merge(forkedSequenceTsFileResources, true, timePartition, seqLevelNum,\n         seqFileNumInEachLevel);\n-    if (enableUnseqCompaction && unseqLevelNum <= 1 && forkedUnSequenceTsFileResources.size() > 0) {\n+    if (enableUnseqCompaction && unseqLevelNum <= 1\n+        && forkedUnSequenceTsFileResources.get(0).size() > 0) {\n+      isMerge = true;\n       merge(isForceFullMerge, getTsFileList(true), forkedUnSequenceTsFileResources.get(0),\n           Long.MAX_VALUE);\n     } else {\n-      merge(forkedUnSequenceTsFileResources, false, timePartition, unseqLevelNum,\n-          unseqFileNumInEachLevel);\n+      isMerge = merge(forkedUnSequenceTsFileResources, false, timePartition, unseqLevelNum,\n+          unseqFileNumInEachLevel) || isMerge;\n+    }\n+    // if merge in this merge task, execute next merge task to check if need continuous merge\n+    if (isMerge && enableContinuousCompaction) {\n+      merge(timePartition);", "originalCommit": "0f5702ecb27bd483cb430475f3103d4d27318560", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcwODU2Ng==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r526708566", "bodyText": "and this recursion might have no termination conditions...", "author": "EJTTianYu", "createdAt": "2020-11-19T09:22:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcwMjIyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzMDM3Mg==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r526830372", "bodyText": "we want this effect because we want to start a new compaction task after one compaction task ends", "author": "zhanglingzhe0820", "createdAt": "2020-11-19T12:18:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcwMjIyMw=="}], "type": "inlineReview"}, {"oid": "65fde8903fe7dae322eb17f44116c401a760a6aa", "url": "https://github.com/apache/iotdb/commit/65fde8903fe7dae322eb17f44116c401a760a6aa", "message": "add load configure", "committedDate": "2020-11-24T04:28:07Z", "type": "commit"}, {"oid": "ba5a21cfec2f4836765c9fa82970cc6a00d29f01", "url": "https://github.com/apache/iotdb/commit/ba5a21cfec2f4836765c9fa82970cc6a00d29f01", "message": "update continuous compaction to new compaction task", "committedDate": "2020-11-24T04:50:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI0MDgxNA==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r529240814", "bodyText": "Remove spaces beside the =, just like other configuration items", "author": "EJTTianYu", "createdAt": "2020-11-24T06:57:46Z", "path": "server/src/assembly/resources/conf/iotdb-engine.properties", "diffHunk": "@@ -280,6 +280,10 @@ compaction_strategy=LEVEL_COMPACTION\n # Whether to merge unseq files into seq files or not.\n enable_unseq_compaction = true\n \n+# Works when the compaction_strategy is LEVEL_COMPACTION.\n+# Whether to start next compaction task automatically after finish one compaction task\n+enable_continuous_compaction = true", "originalCommit": "ba5a21cfec2f4836765c9fa82970cc6a00d29f01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI0MTg1OA==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r529241858", "bodyText": "this comment needs to be modified", "author": "EJTTianYu", "createdAt": "2020-11-24T07:00:29Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBDescriptor.java", "diffHunk": "@@ -770,6 +774,14 @@ public void loadHotModifiedProps(Properties properties)\n       // update debug_state\n       conf.setDebugState(Boolean.parseBoolean(properties.getProperty(\"debug_state\")));\n \n+      // update enable_continuous_compaction\n+      conf.setEnableContinuousCompaction(\n+          Boolean.parseBoolean(properties.getProperty(\"enable_continuous_compaction\")));\n+\n+      // update enable_continuous_compaction", "originalCommit": "ba5a21cfec2f4836765c9fa82970cc6a00d29f01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQyNTAxNw==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r529425017", "bodyText": "ok", "author": "zhanglingzhe0820", "createdAt": "2020-11-24T10:33:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI0MTg1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI0MjU3OQ==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r529242579", "bodyText": "the other comment in this file all use the format /** */, it is better to keep the same", "author": "EJTTianYu", "createdAt": "2020-11-24T07:02:17Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/compaction/TsFileManagement.java", "diffHunk": "@@ -66,6 +66,9 @@\n   public ModificationFile mergingModification;\n   private long mergeStartTime;\n \n+  // whether execute merge chunk in this task", "originalCommit": "ba5a21cfec2f4836765c9fa82970cc6a00d29f01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQyNTY2MA==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r529425660", "bodyText": "ok", "author": "zhanglingzhe0820", "createdAt": "2020-11-24T10:33:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI0MjU3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI0NDc3NA==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r529244774", "bodyText": "remove the field as the field is never used in this file", "author": "EJTTianYu", "createdAt": "2020-11-24T07:07:34Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/compaction/level/LevelCompactionTsFileManagement.java", "diffHunk": "@@ -70,6 +70,8 @@\n \n   private final boolean enableUnseqCompaction = IoTDBDescriptor.getInstance().getConfig()\n       .isEnableUnseqCompaction();\n+  private final boolean enableContinuousCompaction = IoTDBDescriptor.getInstance().getConfig()", "originalCommit": "ba5a21cfec2f4836765c9fa82970cc6a00d29f01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQyNjg3OQ==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r529426879", "bodyText": "ok", "author": "zhanglingzhe0820", "createdAt": "2020-11-24T10:34:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI0NDc3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI0NzQ1Nw==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r529247457", "bodyText": "I wonder this comment is correct as the boolean variable means whether current SG is merging", "author": "EJTTianYu", "createdAt": "2020-11-24T07:13:43Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/compaction/level/LevelCompactionTsFileManagement.java", "diffHunk": "@@ -439,19 +439,22 @@ private void forkTsFileList(\n \n   @Override\n   protected void merge(long timePartition) {\n-    merge(forkedSequenceTsFileResources, true, timePartition, seqLevelNum,\n+    // whether execute merge chunk in this task", "originalCommit": "ba5a21cfec2f4836765c9fa82970cc6a00d29f01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQzMDE0NA==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r529430144", "bodyText": "ok", "author": "zhanglingzhe0820", "createdAt": "2020-11-24T10:37:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI0NzQ1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI0OTA5Mw==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r529249093", "bodyText": "this if-else could be removed as during the whole process, CompactionMergeTaskPoolManager is never Terminated", "author": "EJTTianYu", "createdAt": "2020-11-24T07:17:09Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -1718,10 +1744,30 @@ private void closeUnsealedTsFileProcessorCallBack(\n   /**\n    * close compaction merge callback, to release some locks\n    */\n-  private void closeCompactionMergeCallBack() {\n-    this.compactionMergeWorking = false;\n-    synchronized (closeStorageGroupCondition) {\n-      closeStorageGroupCondition.notifyAll();\n+  private void closeCompactionMergeCallBack(boolean isMerge, long timePartitionId) {\n+    if (isMerge && IoTDBDescriptor.getInstance().getConfig().isEnableContinuousCompaction()) {\n+      if (!CompactionMergeTaskPoolManager.getInstance().isTerminated()) {", "originalCommit": "ba5a21cfec2f4836765c9fa82970cc6a00d29f01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQzMTI2NQ==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r529431265", "bodyText": "When IoTDB is closing it can be terminated, and we should not keep compaction", "author": "zhanglingzhe0820", "createdAt": "2020-11-24T10:38:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI0OTA5Mw=="}], "type": "inlineReview"}, {"oid": "c60d4bc493ec2ac3cc168723211c7e83d35920c3", "url": "https://github.com/apache/iotdb/commit/c60d4bc493ec2ac3cc168723211c7e83d35920c3", "message": "fix comment", "committedDate": "2020-11-24T10:39:15Z", "type": "commit"}, {"oid": "658497c2f0549721ce92a0f7b888653832771da9", "url": "https://github.com/apache/iotdb/commit/658497c2f0549721ce92a0f7b888653832771da9", "message": "Merge branch 'master' of https://github.com/apache/iotdb", "committedDate": "2020-11-24T10:39:38Z", "type": "commit"}, {"oid": "6a26de2b7525a3c7fc49296aa6dbed92116693f9", "url": "https://github.com/apache/iotdb/commit/6a26de2b7525a3c7fc49296aa6dbed92116693f9", "message": "merge", "committedDate": "2020-11-24T10:42:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY4MTA4MA==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r553681080", "bodyText": "NUM_BYTES_OBJECT_REF is not equal to the object header size, you should use the NUM_BYTES_OBJECT_HEADER field in RamUsageEstimator.\nAnd by the way, jvm may also align the object, so this calculation may not be exact.", "author": "JackieTien97", "createdAt": "2021-01-08T01:01:03Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/cache/FileStatistics.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.cache;\n+\n+import static org.apache.iotdb.tsfile.utils.RamUsageEstimator.NUM_BYTES_INT;\n+import static org.apache.iotdb.tsfile.utils.RamUsageEstimator.NUM_BYTES_LONG;\n+import static org.apache.iotdb.tsfile.utils.RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n+\n+public class FileStatistics {\n+\n+  private long numOfPoints;\n+  private int sensorNum;\n+\n+  public FileStatistics(long numOfPoints, int sensorNum) {\n+    this.numOfPoints = numOfPoints;\n+    this.sensorNum = sensorNum;\n+  }\n+\n+  public long getNumOfPoints() {\n+    return numOfPoints;\n+  }\n+\n+  public void setNumOfPoints(long numOfPoints) {\n+    this.numOfPoints = numOfPoints;\n+  }\n+\n+  public int getSensorNum() {\n+    return sensorNum;\n+  }\n+\n+  public void setSensorNum(int sensorNum) {\n+    this.sensorNum = sensorNum;\n+  }\n+\n+\n+  public long calculateRamSize() {\n+    return NUM_BYTES_OBJECT_REF + NUM_BYTES_LONG + NUM_BYTES_INT;", "originalCommit": "c3f88eaabeb24cc6f7987dd53ac2220fff13b9c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDY2NDQzMQ==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r554664431", "bodyText": "okay", "author": "zhanglingzhe0820", "createdAt": "2021-01-11T02:35:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY4MTA4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY4MTY5NQ==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r553681695", "bodyText": "Why this field does not have a corresponding property in iotdb-engine.properties.", "author": "JackieTien97", "createdAt": "2021-01-08T01:03:11Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -421,6 +427,11 @@\n    */\n   private long allocateMemoryForChunkCache = allocateMemoryForRead / 10;\n \n+  /**\n+   * Memory allocated for file statistics cache in compaction process\n+   */\n+  private long allocateMemoryForFileStatisticsCache = allocateMemoryForRead / 100;", "originalCommit": "c3f88eaabeb24cc6f7987dd53ac2220fff13b9c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDY2NDQ4Mw==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r554664483", "bodyText": "solved", "author": "zhanglingzhe0820", "createdAt": "2021-01-11T02:35:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY4MTY5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY4NDc1NA==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r553684754", "bodyText": "There is no need to calculate FileStatistics size each time, because it's a constant value", "author": "JackieTien97", "createdAt": "2021-01-08T01:14:00Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/cache/FileStatisticsCache.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.cache;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileResource;\n+import org.apache.iotdb.tsfile.file.metadata.ChunkMetadata;\n+import org.apache.iotdb.tsfile.read.TsFileSequenceReader;\n+import org.apache.iotdb.tsfile.utils.RamUsageEstimator;\n+\n+public class FileStatisticsCache {\n+\n+  private final ReadWriteLock lock = new ReentrantReadWriteLock();\n+  private static LRULinkedHashMap<AccountableString, FileStatistics> fileStatisticsCache;\n+  private static long MEMORY_THRESHOLD_IN_FILE_STATISTICS_CACHE = IoTDBDescriptor.getInstance()\n+      .getConfig().getAllocateMemoryForFileStatisticsCache();\n+\n+  private FileStatisticsCache() {\n+    fileStatisticsCache = new LRULinkedHashMap<AccountableString, FileStatistics>(\n+        MEMORY_THRESHOLD_IN_FILE_STATISTICS_CACHE) {\n+      @Override\n+      protected long calEntrySize(AccountableString key, FileStatistics value) {\n+        if (value == null) {\n+          return RamUsageEstimator.sizeOf(key) + RamUsageEstimator.shallowSizeOf(value);", "originalCommit": "c3f88eaabeb24cc6f7987dd53ac2220fff13b9c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDY2NDY5NA==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r554664694", "bodyText": "solved", "author": "zhanglingzhe0820", "createdAt": "2021-01-11T02:37:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY4NDc1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY4NTgxNQ==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r553685815", "bodyText": "This will cause differernt thread read from disk repeatedly", "author": "JackieTien97", "createdAt": "2021-01-08T01:17:52Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/cache/FileStatisticsCache.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.cache;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileResource;\n+import org.apache.iotdb.tsfile.file.metadata.ChunkMetadata;\n+import org.apache.iotdb.tsfile.read.TsFileSequenceReader;\n+import org.apache.iotdb.tsfile.utils.RamUsageEstimator;\n+\n+public class FileStatisticsCache {\n+\n+  private final ReadWriteLock lock = new ReentrantReadWriteLock();\n+  private static LRULinkedHashMap<AccountableString, FileStatistics> fileStatisticsCache;\n+  private static long MEMORY_THRESHOLD_IN_FILE_STATISTICS_CACHE = IoTDBDescriptor.getInstance()\n+      .getConfig().getAllocateMemoryForFileStatisticsCache();\n+\n+  private FileStatisticsCache() {\n+    fileStatisticsCache = new LRULinkedHashMap<AccountableString, FileStatistics>(\n+        MEMORY_THRESHOLD_IN_FILE_STATISTICS_CACHE) {\n+      @Override\n+      protected long calEntrySize(AccountableString key, FileStatistics value) {\n+        if (value == null) {\n+          return RamUsageEstimator.sizeOf(key) + RamUsageEstimator.shallowSizeOf(value);\n+        }\n+        long entrySize;\n+        if (count < 10) {\n+          long currentSize = value.calculateRamSize();\n+          averageSize = ((averageSize * count) + currentSize) / (++count);\n+          entrySize = RamUsageEstimator.sizeOf(key)\n+              + (currentSize + RamUsageEstimator.NUM_BYTES_OBJECT_REF)\n+              + RamUsageEstimator.shallowSizeOf(value);\n+        } else if (count < 100000) {\n+          count++;\n+          entrySize = RamUsageEstimator.sizeOf(key)\n+              + (averageSize + RamUsageEstimator.NUM_BYTES_OBJECT_REF)\n+              + RamUsageEstimator.shallowSizeOf(value);\n+        } else {\n+          averageSize = value.calculateRamSize();\n+          count = 1;\n+          entrySize = RamUsageEstimator.sizeOf(key)\n+              + (averageSize + RamUsageEstimator.NUM_BYTES_OBJECT_REF)\n+              + RamUsageEstimator.shallowSizeOf(value);\n+        }\n+        return entrySize;\n+      }\n+    };\n+  }\n+\n+  public void put(String filePath, long totalPoint, int sensorNum) {\n+    lock.writeLock().lock();\n+    fileStatisticsCache\n+        .put(new AccountableString(filePath), new FileStatistics(totalPoint, sensorNum));\n+    lock.readLock().lock();\n+  }\n+\n+  public FileStatistics get(TsFileResource fileResource) throws IOException {\n+    String filePath = fileResource.getTsFilePath();\n+    AccountableString key = new AccountableString(filePath);\n+    if (fileStatisticsCache.containsKey(key)) {\n+      lock.readLock().lock();\n+      try {\n+        return fileStatisticsCache.get(key);\n+      } finally {\n+        lock.readLock().unlock();\n+      }\n+    } else {\n+      try (TsFileSequenceReader tsFileSequenceReader = new TsFileSequenceReader(\n+          fileResource.getTsFilePath())) {\n+        long totalPoints = 0;\n+        Set<String> sensorSet = new HashSet<>();\n+        List<String> devices = tsFileSequenceReader.getAllDevices();\n+        for (String device : devices) {\n+          Map<String, List<ChunkMetadata>> chunkMetadataListMap = tsFileSequenceReader\n+              .readChunkMetadataInDevice(device);\n+          for (List<ChunkMetadata> chunkMetadataList : chunkMetadataListMap.values()) {\n+            for (ChunkMetadata chunkMetadata : chunkMetadataList) {\n+              totalPoints += chunkMetadata.getNumOfPoints();\n+              sensorSet.add(chunkMetadata.getMeasurementUid());", "originalCommit": "c3f88eaabeb24cc6f7987dd53ac2220fff13b9c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDY2NTAwMA==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r554665000", "bodyText": "solved", "author": "zhanglingzhe0820", "createdAt": "2021-01-11T02:38:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY4NTgxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY4NjA1Mg==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r553686052", "bodyText": "It's better to add this cache to MBeans monitor.", "author": "JackieTien97", "createdAt": "2021-01-08T01:18:38Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/cache/FileStatisticsCache.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.iotdb.db.engine.cache;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.storagegroup.TsFileResource;\n+import org.apache.iotdb.tsfile.file.metadata.ChunkMetadata;\n+import org.apache.iotdb.tsfile.read.TsFileSequenceReader;\n+import org.apache.iotdb.tsfile.utils.RamUsageEstimator;\n+\n+public class FileStatisticsCache {", "originalCommit": "c3f88eaabeb24cc6f7987dd53ac2220fff13b9c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDY2ODE5Mw==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r554668193", "bodyText": "solved", "author": "zhanglingzhe0820", "createdAt": "2021-01-11T02:57:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY4NjA1Mg=="}], "type": "inlineReview"}, {"oid": "420bfdfcadd0ffd93246da2bc9646e03852b1fc5", "url": "https://github.com/apache/iotdb/commit/420bfdfcadd0ffd93246da2bc9646e03852b1fc5", "message": "solve request change", "committedDate": "2021-01-11T03:09:24Z", "type": "forcePushed"}, {"oid": "b25257535ed143cc7eb44595756a8c6e14c46278", "url": "https://github.com/apache/iotdb/commit/b25257535ed143cc7eb44595756a8c6e14c46278", "message": "merge master", "committedDate": "2021-04-19T09:18:10Z", "type": "commit"}, {"oid": "b25257535ed143cc7eb44595756a8c6e14c46278", "url": "https://github.com/apache/iotdb/commit/b25257535ed143cc7eb44595756a8c6e14c46278", "message": "merge master", "committedDate": "2021-04-19T09:18:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODE0NTM0Nw==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r618145347", "bodyText": "Comment the config item by default.", "author": "SteveYurongSu", "createdAt": "2021-04-22T07:22:57Z", "path": "server/src/assembly/resources/conf/iotdb-engine.properties", "diffHunk": "@@ -314,6 +314,10 @@ compaction_strategy=LEVEL_COMPACTION\n # Whether to merge unseq files into seq files or not.\n enable_unseq_compaction=true\n \n+# Works when the compaction_strategy is LEVEL_COMPACTION.\n+# Whether to start next compaction task automatically after finish one compaction task\n+enable_continuous_compaction = true", "originalCommit": "b25257535ed143cc7eb44595756a8c6e14c46278", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODE2OTU2OA==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r618169568", "bodyText": "?", "author": "SteveYurongSu", "createdAt": "2021-04-22T07:57:36Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/compaction/TsFileManagement.java", "diffHunk": "@@ -389,6 +392,7 @@ public void mergeEndAction(\n       return;\n     }\n     removeUnseqFiles(unseqFiles);\n+    unseqFiles.clear();", "originalCommit": "b25257535ed143cc7eb44595756a8c6e14c46278", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODE3Mjc5OQ==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r618172799", "bodyText": "comment here plz", "author": "SteveYurongSu", "createdAt": "2021-04-22T08:02:07Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/compaction/TsFileManagement.java", "diffHunk": "@@ -180,7 +183,7 @@ public CompactionRecoverTask(CloseCompactionMergeCallBack closeCompactionMergeCa\n     @Override\n     public void run() {\n       recover();\n-      closeCompactionMergeCallBack.call();\n+      closeCompactionMergeCallBack.call(false, 0L);", "originalCommit": "b25257535ed143cc7eb44595756a8c6e14c46278", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e0e94abfb3edf024ef639ef2f7286d8dc7802ab1", "url": "https://github.com/apache/iotdb/commit/e0e94abfb3edf024ef639ef2f7286d8dc7802ab1", "message": "Merge branch 'master' into add_continuous_compaction_in_level_compaction_strategy", "committedDate": "2021-04-22T08:59:04Z", "type": "commit"}, {"oid": "1cfd3c77449689e247514e700ce52c34eeab31a8", "url": "https://github.com/apache/iotdb/commit/1cfd3c77449689e247514e700ce52c34eeab31a8", "message": "update config and variable name", "committedDate": "2021-04-22T09:03:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODkwMzYyMQ==", "url": "https://github.com/apache/iotdb/pull/2080#discussion_r618903621", "bodyText": "rename it.", "author": "SteveYurongSu", "createdAt": "2021-04-23T02:51:33Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/compaction/TsFileManagement.java", "diffHunk": "@@ -71,6 +71,9 @@\n \n   private long mergeStartTime;\n \n+  /** whether execute merge chunk in this task */\n+  protected boolean isMerge = false;", "originalCommit": "b25257535ed143cc7eb44595756a8c6e14c46278", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1a4f2416fa87dedaa1bb7cbc499bcce2c6b199a5", "url": "https://github.com/apache/iotdb/commit/1a4f2416fa87dedaa1bb7cbc499bcce2c6b199a5", "message": "Merge branch 'master' into add_continuous_compaction_in_level_compaction_strategy\n\n# Conflicts:\n#\tserver/src/main/java/org/apache/iotdb/db/engine/compaction/TsFileManagement.java\n#\tserver/src/test/java/org/apache/iotdb/db/engine/compaction/NoCompactionTsFileManagementTest.java", "committedDate": "2021-04-29T03:11:33Z", "type": "commit"}, {"oid": "741338ae063e13aa5cba0843a0690db074e37de2", "url": "https://github.com/apache/iotdb/commit/741338ae063e13aa5cba0843a0690db074e37de2", "message": "fix format", "committedDate": "2021-04-29T03:49:58Z", "type": "commit"}, {"oid": "6abaa19c9d235da82653b0f60044b2f0665055f1", "url": "https://github.com/apache/iotdb/commit/6abaa19c9d235da82653b0f60044b2f0665055f1", "message": "fix compile", "committedDate": "2021-04-29T06:14:14Z", "type": "commit"}, {"oid": "6b91adabf7e1f26ce8b2fb4e5d13f606f7f8b3fa", "url": "https://github.com/apache/iotdb/commit/6b91adabf7e1f26ce8b2fb4e5d13f606f7f8b3fa", "message": "resolve conversation", "committedDate": "2021-05-07T15:00:43Z", "type": "commit"}]}