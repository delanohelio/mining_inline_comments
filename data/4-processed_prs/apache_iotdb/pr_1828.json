{"pr_number": 1828, "pr_title": "[IOTDB-944] Support UDTF (User-defined Timeseries Generating Function)", "pr_createdAt": "2020-10-15T11:02:47Z", "pr_url": "https://github.com/apache/iotdb/pull/1828", "timeline": [{"oid": "27034054494078740b95471b0d90e9cfd2628d07", "url": "https://github.com/apache/iotdb/commit/27034054494078740b95471b0d90e9cfd2628d07", "message": "add udf user doc in Chinese", "committedDate": "2020-11-18T18:31:56Z", "type": "commit"}, {"oid": "9b0dc7042b9834785327eccef04fa9d1ac204ab6", "url": "https://github.com/apache/iotdb/commit/9b0dc7042b9834785327eccef04fa9d1ac204ab6", "message": "add udf user doc in English", "committedDate": "2020-11-20T13:27:45Z", "type": "commit"}, {"oid": "8fcf15bd39384cc807e607c8ea22ba76ab7dd5d9", "url": "https://github.com/apache/iotdb/commit/8fcf15bd39384cc807e607c8ea22ba76ab7dd5d9", "message": "add udf-example module", "committedDate": "2020-11-20T18:05:56Z", "type": "commit"}, {"oid": "0ab3be59b8782fa7b18c20c5b926d4c1d7b384d5", "url": "https://github.com/apache/iotdb/commit/0ab3be59b8782fa7b18c20c5b926d4c1d7b384d5", "message": "move udf files into the system dir", "committedDate": "2020-11-20T18:31:12Z", "type": "commit"}, {"oid": "02fc48b4fa92072419de35d56e58d8da1b21f3b3", "url": "https://github.com/apache/iotdb/commit/02fc48b4fa92072419de35d56e58d8da1b21f3b3", "message": "merge master into udf", "committedDate": "2020-11-21T07:31:51Z", "type": "commit"}, {"oid": "a5d7070ef39f8069102abc94c25dd5287c91db01", "url": "https://github.com/apache/iotdb/commit/a5d7070ef39f8069102abc94c25dd5287c91db01", "message": "add the apache rat in example/udf/pom.xml", "committedDate": "2020-11-21T07:35:13Z", "type": "commit"}, {"oid": "74dcf82951da74d84888659a8d84e06bfdc661ce", "url": "https://github.com/apache/iotdb/commit/74dcf82951da74d84888659a8d84e06bfdc661ce", "message": "udf example: add apache-rat-plugin", "committedDate": "2020-11-21T08:10:45Z", "type": "commit"}, {"oid": "d7502031d5694cbde4281e8cc9f524438a13bf93", "url": "https://github.com/apache/iotdb/commit/d7502031d5694cbde4281e8cc9f524438a13bf93", "message": "try to fix the github actions (resize the test data for udf)", "committedDate": "2020-11-22T18:15:10Z", "type": "commit"}, {"oid": "45943f7395ef72e5c97bef6e14ead39ead419bfa", "url": "https://github.com/apache/iotdb/commit/45943f7395ef72e5c97bef6e14ead39ead419bfa", "message": "update user doc", "committedDate": "2020-11-23T02:38:30Z", "type": "commit"}, {"oid": "fea2335e729408c7afdad4ce13f89694418fc00c", "url": "https://github.com/apache/iotdb/commit/fea2335e729408c7afdad4ce13f89694418fc00c", "message": "fix: parsing suffix path in logical generator", "committedDate": "2020-11-23T15:15:48Z", "type": "commit"}, {"oid": "2cc8aad4f473e664d0f3a5128b4a8ce2a1ebdbe7", "url": "https://github.com/apache/iotdb/commit/2cc8aad4f473e664d0f3a5128b4a8ce2a1ebdbe7", "message": "Merge branch 'master' of https://github.com/apache/incubator-iotdb into udf", "committedDate": "2020-11-24T02:23:10Z", "type": "commit"}, {"oid": "137c20e67054b652dae92bd3478672d45bc5b083", "url": "https://github.com/apache/iotdb/commit/137c20e67054b652dae92bd3478672d45bc5b083", "message": "merge master and fix conflicts", "committedDate": "2020-11-25T03:57:40Z", "type": "commit"}, {"oid": "52247ddb404be892a1ef60a6c514d58df98ac626", "url": "https://github.com/apache/iotdb/commit/52247ddb404be892a1ef60a6c514d58df98ac626", "message": "update doc: worker -> instance", "committedDate": "2020-11-25T04:07:40Z", "type": "commit"}, {"oid": "d90e23c862df360384c959b1fba3984835c6e5fb", "url": "https://github.com/apache/iotdb/commit/d90e23c862df360384c959b1fba3984835c6e5fb", "message": "enable to dynamically load UDF jar files", "committedDate": "2020-11-25T17:55:43Z", "type": "commit"}, {"oid": "9e692ae88152cf8b49bd4aae330eacaea76d0268", "url": "https://github.com/apache/iotdb/commit/9e692ae88152cf8b49bd4aae330eacaea76d0268", "message": "fix: get lib root on the Windows platform", "committedDate": "2020-11-26T02:25:55Z", "type": "commit"}, {"oid": "50ec5fe2d559989f5304d6dd9b59980c4ddb6ad3", "url": "https://github.com/apache/iotdb/commit/50ec5fe2d559989f5304d6dd9b59980c4ddb6ad3", "message": "rename: Tumbling -> SlidingSize", "committedDate": "2020-11-26T02:55:10Z", "type": "commit"}, {"oid": "c0ca6664b69a90752082ee51bbda42659568e2ed", "url": "https://github.com/apache/iotdb/commit/c0ca6664b69a90752082ee51bbda42659568e2ed", "message": "rename: OneByOne -> RowByRow", "committedDate": "2020-11-26T03:03:03Z", "type": "commit"}, {"oid": "708e01774ed87964765a1afe90a056a2b9efade3", "url": "https://github.com/apache/iotdb/commit/708e01774ed87964765a1afe90a056a2b9efade3", "message": "more construction options for SlidingTimeWindowAccessStrategy", "committedDate": "2020-11-26T09:52:45Z", "type": "commit"}, {"oid": "683f4aead813cf1cf548ac8d6aea65dab061fa72", "url": "https://github.com/apache/iotdb/commit/683f4aead813cf1cf548ac8d6aea65dab061fa72", "message": "enable the sliding step parameter for the sliding size window strategy", "committedDate": "2020-11-27T08:44:50Z", "type": "commit"}, {"oid": "f00ae7c2ed203a75eee511f29911effc64f076bf", "url": "https://github.com/apache/iotdb/commit/f00ae7c2ed203a75eee511f29911effc64f076bf", "message": "enable the sliding step parameter for the sliding size window strategy. add tests.", "committedDate": "2020-11-27T19:46:58Z", "type": "commit"}, {"oid": "184c0c92dc10eba2d221ae366a19833af2a9e112", "url": "https://github.com/apache/iotdb/commit/184c0c92dc10eba2d221ae366a19833af2a9e112", "message": "add doc for the sliding size window access strategy", "committedDate": "2020-11-27T20:21:53Z", "type": "commit"}, {"oid": "48977f20b78fcd939c115f13cb0659e48a8dd723", "url": "https://github.com/apache/iotdb/commit/48977f20b78fcd939c115f13cb0659e48a8dd723", "message": "merge master, fix conflicts and update version", "committedDate": "2020-12-03T11:11:13Z", "type": "commit"}, {"oid": "5c2560215761f39fa26638f6fc90dc2e323945eb", "url": "https://github.com/apache/iotdb/commit/5c2560215761f39fa26638f6fc90dc2e323945eb", "message": "set context classloader before udf quering", "committedDate": "2020-12-04T06:16:52Z", "type": "commit"}, {"oid": "78cc218a33cb0a85e4b75adafbee16a2ce319153", "url": "https://github.com/apache/iotdb/commit/78cc218a33cb0a85e4b75adafbee16a2ce319153", "message": "ensure that the system starts normally when loading UDF fails", "committedDate": "2020-12-04T06:25:41Z", "type": "commit"}, {"oid": "22856f3e7448f14b622e56b3c0f61bfbf06bb82c", "url": "https://github.com/apache/iotdb/commit/22856f3e7448f14b622e56b3c0f61bfbf06bb82c", "message": "merge master and fix conflicts", "committedDate": "2020-12-04T08:08:48Z", "type": "commit"}, {"oid": "32f4156e79ab2e8930e09e4a5c9a6b8bb5d19b48", "url": "https://github.com/apache/iotdb/commit/32f4156e79ab2e8930e09e4a5c9a6b8bb5d19b48", "message": "fix code smells", "committedDate": "2020-12-04T08:48:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMwNDcwNw==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r538304707", "bodyText": "The type of these two should better be byte.", "author": "JackieTien97", "createdAt": "2020-12-08T12:20:32Z", "path": "server/src/main/java/org/apache/iotdb/db/query/udf/service/UDFLogWriter.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.iotdb.db.query.udf.service;\r\n+\r\n+import java.io.BufferedWriter;\r\n+import java.io.File;\r\n+import java.io.FileWriter;\r\n+import java.io.IOException;\r\n+import org.apache.iotdb.db.engine.fileSystem.SystemFileFactory;\r\n+\r\n+public class UDFLogWriter {\r\n+\r\n+  public static final Short REGISTER_TYPE = 0;\r\n+  public static final Short DEREGISTER_TYPE = 1;\r", "originalCommit": "32f4156e79ab2e8930e09e4a5c9a6b8bb5d19b48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMwODM0Mw==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r538308343", "bodyText": "There will be a lineSeparator after data[2], you should trim it", "author": "JackieTien97", "createdAt": "2020-12-08T12:25:20Z", "path": "server/src/main/java/org/apache/iotdb/db/query/udf/service/UDFRegistrationService.java", "diffHunk": "@@ -0,0 +1,320 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.iotdb.db.query.udf.service;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.File;\r\n+import java.io.FileReader;\r\n+import java.io.IOException;\r\n+import java.lang.reflect.InvocationTargetException;\r\n+import java.net.URL;\r\n+import java.net.URLClassLoader;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.Map.Entry;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\r\n+import org.apache.commons.io.FileUtils;\r\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\r\n+import org.apache.iotdb.db.engine.fileSystem.SystemFileFactory;\r\n+import org.apache.iotdb.db.exception.StartupException;\r\n+import org.apache.iotdb.db.exception.UDFRegistrationException;\r\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\r\n+import org.apache.iotdb.db.query.udf.api.UDF;\r\n+import org.apache.iotdb.db.query.udf.core.context.UDFContext;\r\n+import org.apache.iotdb.db.service.IService;\r\n+import org.apache.iotdb.db.service.ServiceType;\r\n+import org.apache.iotdb.db.utils.TestOnly;\r\n+import org.apache.iotdb.tsfile.fileSystem.FSFactoryProducer;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+public class UDFRegistrationService implements IService {\r\n+\r\n+  private static final Logger logger = LoggerFactory.getLogger(UDFRegistrationService.class);\r\n+\r\n+  private static final String ULOG_FILE_DIR =\r\n+      IoTDBDescriptor.getInstance().getConfig().getSystemDir()\r\n+          + File.separator + \"udf\" + File.separator;\r\n+  private static final String LOG_FILE_NAME = ULOG_FILE_DIR + \"ulog.txt\";\r\n+  private static final String TEMPORARY_LOG_FILE_NAME = LOG_FILE_NAME + \".tmp\";\r\n+\r\n+  private final ConcurrentHashMap<String, UDFRegistrationInformation> registrationInformation;\r\n+\r\n+  private final ReentrantReadWriteLock lock;\r\n+  private UDFLogWriter temporaryLogWriter;\r\n+\r\n+  private final String libRoot;\r\n+\r\n+  private URLClassLoader udfClassLoader;\r\n+\r\n+  private UDFRegistrationService() {\r\n+    registrationInformation = new ConcurrentHashMap<>();\r\n+    lock = new ReentrantReadWriteLock();\r\n+    libRoot = parseLibRoot();\r\n+  }\r\n+\r\n+  private String parseLibRoot() {\r\n+    String jarPath = (new File(\r\n+        getClass().getProtectionDomain().getCodeSource().getLocation().getPath()))\r\n+        .getAbsolutePath();\r\n+    int lastIndex = jarPath.lastIndexOf(File.separatorChar);\r\n+    String libPath = jarPath.substring(0, lastIndex + 1);\r\n+    logger.info(\"System lib root: {}\", libPath);\r\n+    return libPath;\r\n+  }\r\n+\r\n+  @SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning\r\n+  public void register(String functionName, String className, boolean isTemporary,\r\n+      boolean writeToTemporaryLogFile) throws UDFRegistrationException {\r\n+    UDFRegistrationInformation information = registrationInformation.get(functionName);\r\n+    if (information != null) {\r\n+      if (information.getClassName().equals(className)) {\r\n+        String errorMessage;\r\n+        if (information.isTemporary() == isTemporary) {\r\n+          errorMessage = String\r\n+              .format(\"UDF %s(%s) has already been registered successfully.\",\r\n+                  functionName, className);\r\n+        } else {\r\n+          errorMessage = String.format(\r\n+              \"Failed to register %sTEMPORARY UDF %s(%s), because a %sTEMPORARY UDF %s(%s) with the same function name and the class name has already been registered.\",\r\n+              isTemporary ? \"\" : \"non-\", functionName, className,\r\n+              information.isTemporary() ? \"\" : \"non-\", information.getFunctionName(),\r\n+              information.getClassName());\r\n+        }\r\n+        logger.warn(errorMessage);\r\n+        throw new UDFRegistrationException(errorMessage);\r\n+      } else {\r\n+        String errorMessage = String.format(\r\n+            \"Failed to register UDF %s(%s), because a UDF %s(%s) with the same function name but a different class name has already been registered.\",\r\n+            functionName, className,\r\n+            information.getFunctionName(), information.getClassName());\r\n+        logger.warn(errorMessage);\r\n+        throw new UDFRegistrationException(errorMessage);\r\n+      }\r\n+    }\r\n+\r\n+    Class<?> functionClass;\r\n+    try {\r\n+      udfClassLoader = getUDFClassLoader();\r\n+      functionClass = Class.forName(className, true, udfClassLoader);\r\n+      functionClass.getDeclaredConstructor().newInstance();\r\n+    } catch (IOException | InstantiationException | InvocationTargetException | NoSuchMethodException | IllegalAccessException | ClassNotFoundException e) {\r\n+      String errorMessage = String.format(\r\n+          \"Failed to register UDF %s(%s), because its instance can not be constructed successfully. Exception: %s\",\r\n+          functionName, className, e.toString());\r\n+      logger.warn(errorMessage);\r\n+      throw new UDFRegistrationException(errorMessage);\r\n+    }\r\n+\r\n+    registrationInformation.put(functionName,\r\n+        new UDFRegistrationInformation(functionName, className, functionClass, isTemporary));\r\n+\r\n+    if (writeToTemporaryLogFile && !isTemporary) {\r\n+      try {\r\n+        appendRegistrationLog(functionName, className);\r\n+      } catch (IOException e) {\r\n+        registrationInformation.remove(functionName);\r\n+        String errorMessage = String\r\n+            .format(\"Failed to append UDF log when registering UDF %s(%s), because %s\",\r\n+                functionName, className, e.toString());\r\n+        logger.error(errorMessage);\r\n+        throw new UDFRegistrationException(errorMessage, e);\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private URLClassLoader getUDFClassLoader() throws IOException {\r\n+    Collection<File> files = FileUtils\r\n+        .listFiles(SystemFileFactory.INSTANCE.getFile(libRoot), null, true);\r\n+    URL[] urls = FileUtils.toURLs(files.toArray(new File[0]));\r\n+    return new URLClassLoader(urls);\r\n+  }\r\n+\r\n+  public void deregister(String functionName) throws UDFRegistrationException {\r\n+    UDFRegistrationInformation information = registrationInformation.remove(functionName);\r\n+    if (information == null) {\r\n+      String errorMessage = String.format(\"UDF %s does not exist.\", functionName);\r\n+      logger.warn(errorMessage);\r\n+      throw new UDFRegistrationException(errorMessage);\r\n+    }\r\n+\r\n+    if (!information.isTemporary()) {\r\n+      try {\r\n+        appendDeregistrationLog(functionName);\r\n+      } catch (IOException e) {\r\n+        registrationInformation.put(functionName, information);\r\n+        String errorMessage = String\r\n+            .format(\"Failed to append UDF log when deregistering UDF %s, because %s\",\r\n+                functionName, e.toString());\r\n+        logger.error(errorMessage);\r\n+        throw new UDFRegistrationException(errorMessage, e);\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private void appendRegistrationLog(String functionName, String className) throws IOException {\r\n+    lock.writeLock().lock();\r\n+    try {\r\n+      temporaryLogWriter.register(functionName, className);\r\n+    } finally {\r\n+      lock.writeLock().unlock();\r\n+    }\r\n+  }\r\n+\r\n+  private void appendDeregistrationLog(String functionName) throws IOException {\r\n+    lock.writeLock().lock();\r\n+    try {\r\n+      temporaryLogWriter.deregister(functionName);\r\n+    } finally {\r\n+      lock.writeLock().unlock();\r\n+    }\r\n+  }\r\n+\r\n+  public UDF reflect(UDFContext context) throws QueryProcessException {\r\n+    UDFRegistrationInformation information = registrationInformation.get(context.getName());\r\n+    if (information == null) {\r\n+      String errorMessage = String\r\n+          .format(\"Failed to reflect UDF instance, because UDF %s has not been registered.\",\r\n+              context.getName());\r\n+      logger.warn(errorMessage);\r\n+      throw new QueryProcessException(errorMessage);\r\n+    }\r\n+\r\n+    Thread.currentThread().setContextClassLoader(udfClassLoader);\r\n+    try {\r\n+      return (UDF) information.getFunctionClass().getDeclaredConstructor().newInstance();\r\n+    } catch (InstantiationException | InvocationTargetException | NoSuchMethodException | IllegalAccessException e) {\r\n+      String errorMessage = String.format(\"Failed to reflect UDF %s(%s) instance, because %s\",\r\n+          context.getName(), information.getClassName(), e.toString());\r\n+      logger.warn(errorMessage);\r\n+      throw new QueryProcessException(errorMessage);\r\n+    }\r\n+  }\r\n+\r\n+  public UDFRegistrationInformation[] getRegistrationInformation() {\r\n+    return registrationInformation.values().toArray(new UDFRegistrationInformation[0]);\r\n+  }\r\n+\r\n+  @Override\r\n+  public void start() throws StartupException {\r\n+    try {\r\n+      makeDirIfNecessary();\r\n+      doRecovery();\r\n+      temporaryLogWriter = new UDFLogWriter(TEMPORARY_LOG_FILE_NAME);\r\n+    } catch (Exception e) {\r\n+      throw new StartupException(e);\r\n+    }\r\n+  }\r\n+\r\n+  private void makeDirIfNecessary() throws IOException {\r\n+    File file = SystemFileFactory.INSTANCE.getFile(ULOG_FILE_DIR);\r\n+    if (file.exists() && file.isDirectory()) {\r\n+      return;\r\n+    }\r\n+    FileUtils.forceMkdir(file);\r\n+  }\r\n+\r\n+  private void doRecovery() throws IOException {\r\n+    File logFile = SystemFileFactory.INSTANCE.getFile(LOG_FILE_NAME);\r\n+    File temporaryLogFile = SystemFileFactory.INSTANCE.getFile(TEMPORARY_LOG_FILE_NAME);\r\n+\r\n+    if (temporaryLogFile.exists()) {\r\n+      if (logFile.exists()) {\r\n+        FileUtils.deleteQuietly(logFile);\r\n+      }\r\n+      recoveryFromLogFile(temporaryLogFile);\r\n+    } else if (logFile.exists()) {\r\n+      recoveryFromLogFile(logFile);\r\n+      FSFactoryProducer.getFSFactory().moveFile(logFile, temporaryLogFile);\r\n+    }\r\n+  }\r\n+\r\n+  private void recoveryFromLogFile(File logFile) throws IOException {\r\n+    HashMap<String, String> recoveredUDFs = new HashMap<>();\r\n+\r\n+    try (BufferedReader reader = new BufferedReader(new FileReader(logFile))) {\r\n+      String line;\r\n+      while ((line = reader.readLine()) != null) {\r\n+        String[] data = line.split(\",\");\r\n+        short type = Short.parseShort(data[0]);\r\n+        if (type == UDFLogWriter.REGISTER_TYPE) {\r\n+          recoveredUDFs.put(data[1], data[2]);\r", "originalCommit": "32f4156e79ab2e8930e09e4a5c9a6b8bb5d19b48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk0OTYxNg==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r538949616", "bodyText": "The return value of readLine() method is not including any line-termination characters, so I think my implementation here is ok :D", "author": "SteveYurongSu", "createdAt": "2020-12-09T02:08:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMwODM0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMxMjM5Mg==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r538312392", "bodyText": "It seems that you don't need to new this UDF instance here", "author": "JackieTien97", "createdAt": "2020-12-08T12:30:18Z", "path": "server/src/main/java/org/apache/iotdb/db/query/udf/service/UDFRegistrationService.java", "diffHunk": "@@ -0,0 +1,320 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.iotdb.db.query.udf.service;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.File;\r\n+import java.io.FileReader;\r\n+import java.io.IOException;\r\n+import java.lang.reflect.InvocationTargetException;\r\n+import java.net.URL;\r\n+import java.net.URLClassLoader;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.Map.Entry;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\r\n+import org.apache.commons.io.FileUtils;\r\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\r\n+import org.apache.iotdb.db.engine.fileSystem.SystemFileFactory;\r\n+import org.apache.iotdb.db.exception.StartupException;\r\n+import org.apache.iotdb.db.exception.UDFRegistrationException;\r\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\r\n+import org.apache.iotdb.db.query.udf.api.UDF;\r\n+import org.apache.iotdb.db.query.udf.core.context.UDFContext;\r\n+import org.apache.iotdb.db.service.IService;\r\n+import org.apache.iotdb.db.service.ServiceType;\r\n+import org.apache.iotdb.db.utils.TestOnly;\r\n+import org.apache.iotdb.tsfile.fileSystem.FSFactoryProducer;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+public class UDFRegistrationService implements IService {\r\n+\r\n+  private static final Logger logger = LoggerFactory.getLogger(UDFRegistrationService.class);\r\n+\r\n+  private static final String ULOG_FILE_DIR =\r\n+      IoTDBDescriptor.getInstance().getConfig().getSystemDir()\r\n+          + File.separator + \"udf\" + File.separator;\r\n+  private static final String LOG_FILE_NAME = ULOG_FILE_DIR + \"ulog.txt\";\r\n+  private static final String TEMPORARY_LOG_FILE_NAME = LOG_FILE_NAME + \".tmp\";\r\n+\r\n+  private final ConcurrentHashMap<String, UDFRegistrationInformation> registrationInformation;\r\n+\r\n+  private final ReentrantReadWriteLock lock;\r\n+  private UDFLogWriter temporaryLogWriter;\r\n+\r\n+  private final String libRoot;\r\n+\r\n+  private URLClassLoader udfClassLoader;\r\n+\r\n+  private UDFRegistrationService() {\r\n+    registrationInformation = new ConcurrentHashMap<>();\r\n+    lock = new ReentrantReadWriteLock();\r\n+    libRoot = parseLibRoot();\r\n+  }\r\n+\r\n+  private String parseLibRoot() {\r\n+    String jarPath = (new File(\r\n+        getClass().getProtectionDomain().getCodeSource().getLocation().getPath()))\r\n+        .getAbsolutePath();\r\n+    int lastIndex = jarPath.lastIndexOf(File.separatorChar);\r\n+    String libPath = jarPath.substring(0, lastIndex + 1);\r\n+    logger.info(\"System lib root: {}\", libPath);\r\n+    return libPath;\r\n+  }\r\n+\r\n+  @SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning\r\n+  public void register(String functionName, String className, boolean isTemporary,\r\n+      boolean writeToTemporaryLogFile) throws UDFRegistrationException {\r\n+    UDFRegistrationInformation information = registrationInformation.get(functionName);\r\n+    if (information != null) {\r\n+      if (information.getClassName().equals(className)) {\r\n+        String errorMessage;\r\n+        if (information.isTemporary() == isTemporary) {\r\n+          errorMessage = String\r\n+              .format(\"UDF %s(%s) has already been registered successfully.\",\r\n+                  functionName, className);\r\n+        } else {\r\n+          errorMessage = String.format(\r\n+              \"Failed to register %sTEMPORARY UDF %s(%s), because a %sTEMPORARY UDF %s(%s) with the same function name and the class name has already been registered.\",\r\n+              isTemporary ? \"\" : \"non-\", functionName, className,\r\n+              information.isTemporary() ? \"\" : \"non-\", information.getFunctionName(),\r\n+              information.getClassName());\r\n+        }\r\n+        logger.warn(errorMessage);\r\n+        throw new UDFRegistrationException(errorMessage);\r\n+      } else {\r\n+        String errorMessage = String.format(\r\n+            \"Failed to register UDF %s(%s), because a UDF %s(%s) with the same function name but a different class name has already been registered.\",\r\n+            functionName, className,\r\n+            information.getFunctionName(), information.getClassName());\r\n+        logger.warn(errorMessage);\r\n+        throw new UDFRegistrationException(errorMessage);\r\n+      }\r\n+    }\r\n+\r\n+    Class<?> functionClass;\r\n+    try {\r\n+      udfClassLoader = getUDFClassLoader();\r\n+      functionClass = Class.forName(className, true, udfClassLoader);\r\n+      functionClass.getDeclaredConstructor().newInstance();\r", "originalCommit": "32f4156e79ab2e8930e09e4a5c9a6b8bb5d19b48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk1MzIxNg==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r538953216", "bodyText": "Yes, it's not necessary. I just want to make sure the instantiation process is fine, should I remove the code?", "author": "SteveYurongSu", "createdAt": "2020-12-09T02:18:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMxMjM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA3NjE1OA==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r544076158", "bodyText": "it's necessary to delete, or use the findClass method", "author": "liutaohua", "createdAt": "2020-12-16T07:38:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMxMjM5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMzODE4OA==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r538338188", "bodyText": "You shouldn't create a new URLClassLoader each time register function is called. Instead, you can init the URLClassLoader in the constructor of UDFRegistrationService and call the addURL function to add the new class.", "author": "JackieTien97", "createdAt": "2020-12-08T12:58:22Z", "path": "server/src/main/java/org/apache/iotdb/db/query/udf/service/UDFRegistrationService.java", "diffHunk": "@@ -0,0 +1,320 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.iotdb.db.query.udf.service;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.File;\r\n+import java.io.FileReader;\r\n+import java.io.IOException;\r\n+import java.lang.reflect.InvocationTargetException;\r\n+import java.net.URL;\r\n+import java.net.URLClassLoader;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.Map.Entry;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\r\n+import org.apache.commons.io.FileUtils;\r\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\r\n+import org.apache.iotdb.db.engine.fileSystem.SystemFileFactory;\r\n+import org.apache.iotdb.db.exception.StartupException;\r\n+import org.apache.iotdb.db.exception.UDFRegistrationException;\r\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\r\n+import org.apache.iotdb.db.query.udf.api.UDF;\r\n+import org.apache.iotdb.db.query.udf.core.context.UDFContext;\r\n+import org.apache.iotdb.db.service.IService;\r\n+import org.apache.iotdb.db.service.ServiceType;\r\n+import org.apache.iotdb.db.utils.TestOnly;\r\n+import org.apache.iotdb.tsfile.fileSystem.FSFactoryProducer;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+public class UDFRegistrationService implements IService {\r\n+\r\n+  private static final Logger logger = LoggerFactory.getLogger(UDFRegistrationService.class);\r\n+\r\n+  private static final String ULOG_FILE_DIR =\r\n+      IoTDBDescriptor.getInstance().getConfig().getSystemDir()\r\n+          + File.separator + \"udf\" + File.separator;\r\n+  private static final String LOG_FILE_NAME = ULOG_FILE_DIR + \"ulog.txt\";\r\n+  private static final String TEMPORARY_LOG_FILE_NAME = LOG_FILE_NAME + \".tmp\";\r\n+\r\n+  private final ConcurrentHashMap<String, UDFRegistrationInformation> registrationInformation;\r\n+\r\n+  private final ReentrantReadWriteLock lock;\r\n+  private UDFLogWriter temporaryLogWriter;\r\n+\r\n+  private final String libRoot;\r\n+\r\n+  private URLClassLoader udfClassLoader;\r\n+\r\n+  private UDFRegistrationService() {\r\n+    registrationInformation = new ConcurrentHashMap<>();\r\n+    lock = new ReentrantReadWriteLock();\r\n+    libRoot = parseLibRoot();\r\n+  }\r\n+\r\n+  private String parseLibRoot() {\r\n+    String jarPath = (new File(\r\n+        getClass().getProtectionDomain().getCodeSource().getLocation().getPath()))\r\n+        .getAbsolutePath();\r\n+    int lastIndex = jarPath.lastIndexOf(File.separatorChar);\r\n+    String libPath = jarPath.substring(0, lastIndex + 1);\r\n+    logger.info(\"System lib root: {}\", libPath);\r\n+    return libPath;\r\n+  }\r\n+\r\n+  @SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning\r\n+  public void register(String functionName, String className, boolean isTemporary,\r\n+      boolean writeToTemporaryLogFile) throws UDFRegistrationException {\r\n+    UDFRegistrationInformation information = registrationInformation.get(functionName);\r\n+    if (information != null) {\r\n+      if (information.getClassName().equals(className)) {\r\n+        String errorMessage;\r\n+        if (information.isTemporary() == isTemporary) {\r\n+          errorMessage = String\r\n+              .format(\"UDF %s(%s) has already been registered successfully.\",\r\n+                  functionName, className);\r\n+        } else {\r\n+          errorMessage = String.format(\r\n+              \"Failed to register %sTEMPORARY UDF %s(%s), because a %sTEMPORARY UDF %s(%s) with the same function name and the class name has already been registered.\",\r\n+              isTemporary ? \"\" : \"non-\", functionName, className,\r\n+              information.isTemporary() ? \"\" : \"non-\", information.getFunctionName(),\r\n+              information.getClassName());\r\n+        }\r\n+        logger.warn(errorMessage);\r\n+        throw new UDFRegistrationException(errorMessage);\r\n+      } else {\r\n+        String errorMessage = String.format(\r\n+            \"Failed to register UDF %s(%s), because a UDF %s(%s) with the same function name but a different class name has already been registered.\",\r\n+            functionName, className,\r\n+            information.getFunctionName(), information.getClassName());\r\n+        logger.warn(errorMessage);\r\n+        throw new UDFRegistrationException(errorMessage);\r\n+      }\r\n+    }\r\n+\r\n+    Class<?> functionClass;\r\n+    try {\r\n+      udfClassLoader = getUDFClassLoader();\r", "originalCommit": "32f4156e79ab2e8930e09e4a5c9a6b8bb5d19b48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk2MDE5Ng==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r538960196", "bodyText": "It seems that the addURL method is protected and all URLs should be determined before the construction of class URLClassLoader. I don't know if there's a more elegant way :)", "author": "SteveYurongSu", "createdAt": "2020-12-09T02:37:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMzODE4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk2NTM4OA==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r538965388", "bodyText": "Maybe I can extend the class URLClassLoader to solve the problem. Let me have a try.", "author": "SteveYurongSu", "createdAt": "2020-12-09T02:52:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMzODE4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM0MDEzNw==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r538340137", "bodyText": "There may be a resource leak here.\nI think you should unload the corresponding class in the URLClassLoader when the deregister function is called.", "author": "JackieTien97", "createdAt": "2020-12-08T13:00:20Z", "path": "server/src/main/java/org/apache/iotdb/db/query/udf/service/UDFRegistrationService.java", "diffHunk": "@@ -0,0 +1,320 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.iotdb.db.query.udf.service;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.File;\r\n+import java.io.FileReader;\r\n+import java.io.IOException;\r\n+import java.lang.reflect.InvocationTargetException;\r\n+import java.net.URL;\r\n+import java.net.URLClassLoader;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.Map.Entry;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\r\n+import org.apache.commons.io.FileUtils;\r\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\r\n+import org.apache.iotdb.db.engine.fileSystem.SystemFileFactory;\r\n+import org.apache.iotdb.db.exception.StartupException;\r\n+import org.apache.iotdb.db.exception.UDFRegistrationException;\r\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\r\n+import org.apache.iotdb.db.query.udf.api.UDF;\r\n+import org.apache.iotdb.db.query.udf.core.context.UDFContext;\r\n+import org.apache.iotdb.db.service.IService;\r\n+import org.apache.iotdb.db.service.ServiceType;\r\n+import org.apache.iotdb.db.utils.TestOnly;\r\n+import org.apache.iotdb.tsfile.fileSystem.FSFactoryProducer;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+public class UDFRegistrationService implements IService {\r\n+\r\n+  private static final Logger logger = LoggerFactory.getLogger(UDFRegistrationService.class);\r\n+\r\n+  private static final String ULOG_FILE_DIR =\r\n+      IoTDBDescriptor.getInstance().getConfig().getSystemDir()\r\n+          + File.separator + \"udf\" + File.separator;\r\n+  private static final String LOG_FILE_NAME = ULOG_FILE_DIR + \"ulog.txt\";\r\n+  private static final String TEMPORARY_LOG_FILE_NAME = LOG_FILE_NAME + \".tmp\";\r\n+\r\n+  private final ConcurrentHashMap<String, UDFRegistrationInformation> registrationInformation;\r\n+\r\n+  private final ReentrantReadWriteLock lock;\r\n+  private UDFLogWriter temporaryLogWriter;\r\n+\r\n+  private final String libRoot;\r\n+\r\n+  private URLClassLoader udfClassLoader;\r\n+\r\n+  private UDFRegistrationService() {\r\n+    registrationInformation = new ConcurrentHashMap<>();\r\n+    lock = new ReentrantReadWriteLock();\r\n+    libRoot = parseLibRoot();\r\n+  }\r\n+\r\n+  private String parseLibRoot() {\r\n+    String jarPath = (new File(\r\n+        getClass().getProtectionDomain().getCodeSource().getLocation().getPath()))\r\n+        .getAbsolutePath();\r\n+    int lastIndex = jarPath.lastIndexOf(File.separatorChar);\r\n+    String libPath = jarPath.substring(0, lastIndex + 1);\r\n+    logger.info(\"System lib root: {}\", libPath);\r\n+    return libPath;\r\n+  }\r\n+\r\n+  @SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning\r\n+  public void register(String functionName, String className, boolean isTemporary,\r\n+      boolean writeToTemporaryLogFile) throws UDFRegistrationException {\r\n+    UDFRegistrationInformation information = registrationInformation.get(functionName);\r\n+    if (information != null) {\r\n+      if (information.getClassName().equals(className)) {\r\n+        String errorMessage;\r\n+        if (information.isTemporary() == isTemporary) {\r\n+          errorMessage = String\r\n+              .format(\"UDF %s(%s) has already been registered successfully.\",\r\n+                  functionName, className);\r\n+        } else {\r\n+          errorMessage = String.format(\r\n+              \"Failed to register %sTEMPORARY UDF %s(%s), because a %sTEMPORARY UDF %s(%s) with the same function name and the class name has already been registered.\",\r\n+              isTemporary ? \"\" : \"non-\", functionName, className,\r\n+              information.isTemporary() ? \"\" : \"non-\", information.getFunctionName(),\r\n+              information.getClassName());\r\n+        }\r\n+        logger.warn(errorMessage);\r\n+        throw new UDFRegistrationException(errorMessage);\r\n+      } else {\r\n+        String errorMessage = String.format(\r\n+            \"Failed to register UDF %s(%s), because a UDF %s(%s) with the same function name but a different class name has already been registered.\",\r\n+            functionName, className,\r\n+            information.getFunctionName(), information.getClassName());\r\n+        logger.warn(errorMessage);\r\n+        throw new UDFRegistrationException(errorMessage);\r\n+      }\r\n+    }\r\n+\r\n+    Class<?> functionClass;\r\n+    try {\r\n+      udfClassLoader = getUDFClassLoader();\r\n+      functionClass = Class.forName(className, true, udfClassLoader);\r\n+      functionClass.getDeclaredConstructor().newInstance();\r\n+    } catch (IOException | InstantiationException | InvocationTargetException | NoSuchMethodException | IllegalAccessException | ClassNotFoundException e) {\r\n+      String errorMessage = String.format(\r\n+          \"Failed to register UDF %s(%s), because its instance can not be constructed successfully. Exception: %s\",\r\n+          functionName, className, e.toString());\r\n+      logger.warn(errorMessage);\r\n+      throw new UDFRegistrationException(errorMessage);\r\n+    }\r\n+\r\n+    registrationInformation.put(functionName,\r\n+        new UDFRegistrationInformation(functionName, className, functionClass, isTemporary));\r\n+\r\n+    if (writeToTemporaryLogFile && !isTemporary) {\r\n+      try {\r\n+        appendRegistrationLog(functionName, className);\r\n+      } catch (IOException e) {\r\n+        registrationInformation.remove(functionName);\r\n+        String errorMessage = String\r\n+            .format(\"Failed to append UDF log when registering UDF %s(%s), because %s\",\r\n+                functionName, className, e.toString());\r\n+        logger.error(errorMessage);\r\n+        throw new UDFRegistrationException(errorMessage, e);\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private URLClassLoader getUDFClassLoader() throws IOException {\r\n+    Collection<File> files = FileUtils\r\n+        .listFiles(SystemFileFactory.INSTANCE.getFile(libRoot), null, true);\r\n+    URL[] urls = FileUtils.toURLs(files.toArray(new File[0]));\r\n+    return new URLClassLoader(urls);\r\n+  }\r\n+\r\n+  public void deregister(String functionName) throws UDFRegistrationException {\r", "originalCommit": "32f4156e79ab2e8930e09e4a5c9a6b8bb5d19b48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b1f6ec0f1937089aa8435a733087282d79a2a97a", "url": "https://github.com/apache/iotdb/commit/b1f6ec0f1937089aa8435a733087282d79a2a97a", "message": "change the data types of REGISTER_TYPE and DEREGISTER_TYPE to Byte", "committedDate": "2020-12-09T02:10:31Z", "type": "commit"}, {"oid": "4e30aa8994625188187674f9218787f7a72e041b", "url": "https://github.com/apache/iotdb/commit/4e30aa8994625188187674f9218787f7a72e041b", "message": "add class UDFClassLoader", "committedDate": "2020-12-09T17:52:27Z", "type": "commit"}, {"oid": "eea996731b25c606d7316052f9b92d64e537afc7", "url": "https://github.com/apache/iotdb/commit/eea996731b25c606d7316052f9b92d64e537afc7", "message": "merge master and fix conflicts", "committedDate": "2020-12-10T04:06:55Z", "type": "commit"}, {"oid": "692446dccaf3f5c8ad86504616dfb25846775cde", "url": "https://github.com/apache/iotdb/commit/692446dccaf3f5c8ad86504616dfb25846775cde", "message": "merge master and fix tests in cluster", "committedDate": "2020-12-10T05:57:09Z", "type": "commit"}, {"oid": "cd2556b592907eb36ebf0dc3a5a6882a55e77e2d", "url": "https://github.com/apache/iotdb/commit/cd2556b592907eb36ebf0dc3a5a6882a55e77e2d", "message": "simplify the InputLayer inheritance structure", "committedDate": "2020-12-10T06:11:25Z", "type": "commit"}, {"oid": "c611985c57aa6d6ec3065c80357dca018e49d243", "url": "https://github.com/apache/iotdb/commit/c611985c57aa6d6ec3065c80357dca018e49d243", "message": "bug fix: serialize and deserilize null fields in row records", "committedDate": "2020-12-10T08:27:20Z", "type": "commit"}, {"oid": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "url": "https://github.com/apache/iotdb/commit/008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "message": "remove UDF from AggregationType to fix tests", "committedDate": "2020-12-10T08:36:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMyNjUwNw==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r542326507", "bodyText": "You'd better check why we need tsfile after adding server.", "author": "qiaojialin", "createdAt": "2020-12-14T11:52:42Z", "path": "docs/UserGuide/Operation Manual/UDF User Defined Function.md", "diffHunk": "@@ -0,0 +1,416 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+    \n+        http://www.apache.org/licenses/LICENSE-2.0\n+    \n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+\n+\n+# UDF (User Defined Function)\n+\n+IoTDB provides a variety of built-in functions to meet your computing needs, and you can also create user defined functions to meet more computing needs. \n+\n+This document describes how to write, register and use a UDF.\n+\n+\n+\n+## UDF Types\n+\n+In IoTDB, you can expand two types of UDF:\n+\n+| UDF Class                                           | Description                                                  |\n+| --------------------------------------------------- | ------------------------------------------------------------ |\n+| UDTF\uff08User Defined Timeseries Generating Function\uff09 | This type of function can take **multiple** time series as input, and output **one** time series, which can have any number of data points. |\n+| UDAF\uff08User Defined Aggregation Function\uff09           | Under development, please stay tuned.                        |\n+\n+\n+\n+## UDF Development Dependencies\n+\n+If you use [Maven](http://search.maven.org/), you can search for the development dependencies listed below from the [Maven repository](http://search.maven.org/) . Please note that you must select the same dependency version as the target IoTDB server version for development.\n+\n+``` xml\n+<dependency>\n+  <groupId>org.apache.iotdb</groupId>\n+  <artifactId>iotdb-server</artifactId>\n+  <version>0.12.0-SNAPSHOT</version>\n+  <scope>provided</scope>\n+</dependency>\n+<dependency>\n+  <groupId>org.apache.iotdb</groupId>\n+  <artifactId>tsfile</artifactId>\n+  <version>0.12.0-SNAPSHOT</version>\n+  <scope>provided</scope>\n+</dependency>", "originalCommit": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMyNzU5NQ==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r542327595", "bodyText": "it's better to throw an exception when registered", "author": "qiaojialin", "createdAt": "2020-12-14T11:54:38Z", "path": "docs/UserGuide/Operation Manual/UDF User Defined Function.md", "diffHunk": "@@ -0,0 +1,416 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+    \n+        http://www.apache.org/licenses/LICENSE-2.0\n+    \n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+\n+\n+# UDF (User Defined Function)\n+\n+IoTDB provides a variety of built-in functions to meet your computing needs, and you can also create user defined functions to meet more computing needs. \n+\n+This document describes how to write, register and use a UDF.\n+\n+\n+\n+## UDF Types\n+\n+In IoTDB, you can expand two types of UDF:\n+\n+| UDF Class                                           | Description                                                  |\n+| --------------------------------------------------- | ------------------------------------------------------------ |\n+| UDTF\uff08User Defined Timeseries Generating Function\uff09 | This type of function can take **multiple** time series as input, and output **one** time series, which can have any number of data points. |\n+| UDAF\uff08User Defined Aggregation Function\uff09           | Under development, please stay tuned.                        |\n+\n+\n+\n+## UDF Development Dependencies\n+\n+If you use [Maven](http://search.maven.org/), you can search for the development dependencies listed below from the [Maven repository](http://search.maven.org/) . Please note that you must select the same dependency version as the target IoTDB server version for development.\n+\n+``` xml\n+<dependency>\n+  <groupId>org.apache.iotdb</groupId>\n+  <artifactId>iotdb-server</artifactId>\n+  <version>0.12.0-SNAPSHOT</version>\n+  <scope>provided</scope>\n+</dependency>\n+<dependency>\n+  <groupId>org.apache.iotdb</groupId>\n+  <artifactId>tsfile</artifactId>\n+  <version>0.12.0-SNAPSHOT</version>\n+  <scope>provided</scope>\n+</dependency>\n+```\n+\n+\n+\n+## UDTF\uff08User Defined Timeseries Generating Function\uff09\n+\n+To write a UDTF,  you need to inherit the `org.apache.iotdb.db.query.udf.api.UDTF` class, and at least implement the `beforeStart` method and a `transform` method.\n+\n+The following table shows all the interfaces available for user implementation. \n+\n+| Interface definition                                         | Description                                                  | Required to Implement                                 |\n+| :----------------------------------------------------------- | :----------------------------------------------------------- | ----------------------------------------------------- |\n+| `void beforeStart(UDFParameters parameters, UDTFConfigurations configurations) throws Exception` | The initialization method to call the user-defined initialization behavior before a UDTF processes the input data. Every time a user executes a UDTF query, the framework will construct a new UDF instance, and `beforeStart` will be called. | Required                                              |\n+| `void beforeDestroy() `                                      | This method is called by the framework after the last input data is processed, and will only be called once in the life cycle of each UDF instance. | Optional                                              |\n+| `void transform(Row row, PointCollector collector) throws Exception` | This method is called by the framework. This data processing method will be called when you choose to use the `RowByRowAccessStrategy` strategy (set in `beforeStart`) to consume raw data. Input data is passed in by `Row`, and the transformation result should be output by `PointCollector`. You need to call the data collection method provided by `collector`  to determine the output data. | Required to implement at least one `transform` method |\n+| `void transform(RowWindow rowWindow, PointCollector collector) throws Exception` | This method is called by the framework. This data processing method will be called when you choose to use the `SlidingSizeWindowAccessStrategy` or `SlidingTimeWindowAccessStrategy` strategy (set in `beforeStart`) to consume raw data. Input data is passed in by `RowWindow`, and the transformation result should be output by `PointCollector`. You need to call the data collection method provided by `collector`  to determine the output data. | Required to implement at least one `transform` method |\n+\n+Note that every time the framework executes a UDTF query, a new UDF instance will be constructed. When the query ends, the corresponding instance will be destroyed. Therefore, the internal data of the instances in different UDTF queries (even in the same SQL statement) are isolated. You can maintain some state data in the UDTF without considering the influence of concurrency and other factors.\n+\n+The usage of each interface will be described in detail below.\n+\n+\n+\n+### `void beforeStart(UDFParameters parameters, UDTFConfigurations configurations) throws Exception`\n+\n+This method is mainly used to customize UDTF. In this method, the user can do the following things:\n+\n+1. Use UDFParameters to get the time series paths and parse key-value pair attributes entered by the user.\n+2. Set the strategy to access the raw data and set the output data type in UDTFConfigurations.\n+3. Create resources, such as establishing external connections, opening files, etc.\n+\n+\n+\n+\n+#### `UDFParameters`\n+\n+`UDFParameters` is used to parse UDF parameters in SQL statements (the part in parentheses after the UDF function name in SQL). The input parameters have two parts. The first part is the paths (measurements) of the time series that the UDF needs to process, and the second part is the key-value pair attributes for customization. Only the second part can be empty.\n+\n+\n+Example\uff1a\n+\n+``` sql\n+SELECT UDF(s1, s2, 'key1'='iotdb', 'key2'='123.45') FROM root.sg.d;\n+```\n+\n+Usage\uff1a\n+\n+``` java\n+void beforeStart(UDFParameters parameters, UDTFConfigurations configurations) throws Exception {\n+  // parameters\n+\tfor (PartialPath path : parameters.getPaths()) {\n+  \t// do something\n+  }\n+  String stringValue = parameters.getString(\"key1\"); // iotdb\n+  Float floatValue = parameters.getFloat(\"key2\"); // 123.45\n+  Double doubleValue = parameters.getDouble(\"key3\"); // null\n+  int intValue = parameters.getIntOrDefault(\"key4\", 678); // 678\n+  // do something\n+  \n+  // configurations\n+  // ...\n+}\n+```\n+\n+\n+\n+####  `UDTFConfigurations`\n+\n+You must use `UDTFConfigurations` to specify the strategy used by UDF to access raw data and the type of output sequence.\n+\n+Usage\uff1a\n+\n+``` java\n+void beforeStart(UDFParameters parameters, UDTFConfigurations configurations) throws Exception {\n+  // parameters\n+  // ...\n+  \n+  // configurations\n+  configurations\n+    .setAccessStrategy(new RowByRowAccessStrategy())\n+    .setOutputDataType(TSDataType.INT32);\n+}\n+```\n+\n+The `setAccessStrategy` method is used to set the UDF's strategy for accessing the raw data, and the `setOutputDataType` method is used to set the data type of the output sequence.\n+\n+\n+\n+##### `setAccessStrategy`\n+\n+Note that the raw data access strategy you set here determines which `transform` method the framework will call. Please implement the `transform` method corresponding to the raw data access strategy. Of course, you can also dynamically decide which strategy to set based on the attribute parameters parsed by `UDFParameters`. Therefore, two `transform` methods are also allowed to be implemented in one UDF.\n+\n+The following are the strategies you can set:\n+\n+| Interface definition              | Description                                                  | The `transform` Method to Call                               |\n+| :-------------------------------- | :----------------------------------------------------------- | ------------------------------------------------------------ |\n+| `RowByRowAccessStrategy`          | Process raw data row by row. The framework calls the `transform` method once for each row of raw data input. When UDF has only one input sequence, a row of input is one data point in the input sequence. When UDF has multiple input sequences, one row of input is a result record of the raw query (aligned by time) on these input sequences. (In a row, there may be a column with a value of `null`, but not all of them are `null`) | `void transform(Row row, PointCollector collector) throws Exception` |\n+| `SlidingTimeWindowAccessStrategy` | Process a batch of data in a fixed time interval each time. We call the container of a data batch a window. The framework calls the `transform` method once for each raw data input window. There may be multiple rows of data in a window, and each row is a result record of the raw query (aligned by time) on these input sequences. (In a row, there may be a column with a value of `null`, but not all of them are `null`) | `void transform(RowWindow rowWindow, PointCollector collector) throws Exception` |\n+| `SlidingSizeWindowAccessStrategy`    | The raw data is processed batch by batch, and each batch contains a fixed number of raw data rows (except the last batch). We call the container of a data batch a window. The framework calls the `transform` method once for each raw data input window. There may be multiple rows of data in a window, and each row is a result record of the raw query (aligned by time) on these input sequences. (In a row, there may be a column with a value of `null`, but not all of them are `null`) | `void transform(RowWindow rowWindow, PointCollector collector) throws Exception` |\n+\n+\n+\n+`RowByRowAccessStrategy`: The construction of `RowByRowAccessStrategy` does not require any parameters.\n+\n+\n+\n+`SlidingTimeWindowAccessStrategy`: `SlidingTimeWindowAccessStrategy` has many constructors, you can pass 3 types of parameters to them:\n+\n+- Parameter 1: The display window on the time axis\n+- Parameter 2: Time interval for dividing the time axis (should be positive)\n+- Parameter 3: Time sliding step (not required to be greater than or equal to the time interval, but must be a positive number)\n+\n+The first type of parameters are optional. If the parameters are not provided, the beginning time of the display window will be set to the same as the minimum timestamp of the query result set, and the ending time of the display window will be set to the same as the maximum timestamp of the query result set.\n+\n+The sliding step parameter is also optional. If the parameter is not provided, the sliding step will be set to the same as the time interval for dividing the time axis.\n+\n+The relationship between the three types of parameters can be seen in the figure below. Please see the Javadoc for more details. \n+\n+<div style=\"text-align: center;\"><img style=\"width:100%; max-width:800px; max-height:600px; margin-left:auto; margin-right:auto; display:block;\" src=\"https://user-images.githubusercontent.com/30497621/99787878-47b51480-2b5b-11eb-8ed3-84088c5c30f7.png\"></div>\n+\n+Note that the actual time interval of some of the last time windows may be less than the specified time interval parameter. In addition, there may be cases where the number of data rows in some time windows is 0. In these cases, the framework will also call the `transform` method for the empty windows.\n+\n+\n+\n+`SlidingSizeWindowAccessStrategy`:  `SlidingSizeWindowAccessStrategy` has many constructors, you can pass 2 types of parameters to them:\n+\n+* Parameter 1: Window size. This parameter specifies the number of data rows contained in a data processing window. Note that the number of data rows in some of the last time windows may be less than the specified number of data rows.\n+* Parameter 2: Sliding step. This parameter means the number of rows between the first point of the next window and the first point of the current window. (This parameter is not required to be greater than or equal to the window size, but must be a positive number)\n+\n+The sliding step parameter is optional. If the parameter is not provided, the sliding step will be set to the same as the window size.\n+\n+Please see the Javadoc for more details. \n+\n+\n+\n+##### `setOutputDataType`\n+\n+Note that the type of output sequence you set here determines the type of data that the `PointCollector` can actually receive in the `transform` method. The relationship between the output data type set in `setOutputDataType` and the actual data output type that `PointCollector` can receive is as follows:\n+\n+| Output Data Type Set in `setOutputDataType` | Data Type that `PointCollector` Can Receive                  |\n+| :------------------------------------------ | :----------------------------------------------------------- |\n+| `INT32`                                     | `int`                                                        |\n+| `INT64`                                     | `long`                                                       |\n+| `FLOAT`                                     | `float`                                                      |\n+| `DOUBLE`                                    | `double`                                                     |\n+| `BOOLEAN`                                   | `boolean`                                                    |\n+| `TEXT`                                      | `java.lang.String` and `org.apache.iotdb.tsfile.utils.Binary` |\n+\n+\n+\n+### `void beforeDestroy() `\n+\n+The method for terminating a UDF.\n+\n+This method is called by the framework. For a UDF instance, `beforeDestroy` will be called after the last record is processed. In the entire life cycle of the instance, `beforeDestroy` will only be called once.\n+\n+\n+\n+### `void transform(Row row, PointCollector collector) throws Exception`\n+\n+You need to implement this method when you specify the strategy of UDF to read the original data as `RowByRowAccessStrategy`.\n+\n+This method processes the raw data one row at a time. The raw data is input from `Row` and output by `PointCollector`. You can output any number of data points in one `transform` method call. It should be noted that the type of output data points must be the same as you set in the `beforeStart` method, and the timestamps of output data points must be strictly monotonically increasing.\n+\n+The following is a complete UDF example that implements the `void transform(Row row, PointCollector collector) throws Exception` method. It is an adder that receives two columns of time series as input. When two data points in a row are not `null`, this UDF will output the algebraic sum of these two data points.\n+\n+``` java\n+import org.apache.iotdb.db.query.udf.api.UDTF;\n+import org.apache.iotdb.db.query.udf.api.access.Row;\n+import org.apache.iotdb.db.query.udf.api.collector.PointCollector;\n+import org.apache.iotdb.db.query.udf.api.customizer.config.UDTFConfigurations;\n+import org.apache.iotdb.db.query.udf.api.customizer.parameter.UDFParameters;\n+import org.apache.iotdb.db.query.udf.api.customizer.strategy.RowByRowAccessStrategy;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+\n+public class Adder implements UDTF {\n+\n+  @Override\n+  public void beforeStart(UDFParameters parameters, UDTFConfigurations configurations) {\n+    configurations\n+        .setOutputDataType(TSDataType.INT64)\n+        .setAccessStrategy(new RowByRowAccessStrategy());\n+  }\n+\n+  @Override\n+  public void transform(Row row, PointCollector collector) throws Exception {\n+    if (row.isNull(0) || row.isNull(1)) {\n+      return;\n+    }\n+    collector.putLong(row.getTime(), row.getLong(0) + row.getLong(1));\n+  }\n+}\n+```\n+\n+\n+\n+### `void transform(RowWindow rowWindow, PointCollector collector) throws Exception`\n+\n+You need to implement this method when you specify the strategy of UDF to read the original data as `SlidingTimeWindowAccessStrategy` or `SlidingSizeWindowAccessStrategy`.\n+\n+This method processes a batch of data in a fixed number of rows or a fixed time interval each time, and we call the container containing this batch of data a window. The raw data is input from `RowWindow` and output by `PointCollector`. `RowWindow` can help you access a batch of `Row`, it provides a set of interfaces for random access and iterative access to this batch of `Row`. You can output any number of data points in one `transform` method call. It should be noted that the type of output data points must be the same as you set in the `beforeStart` method, and the timestamps of output data points must be strictly monotonically increasing.\n+\n+Below is a complete UDF example that implements the `void transform(RowWindow rowWindow, PointCollector collector) throws Exception` method. It is a counter that receives any number of time series as input, and its function is to count and output the number of data rows in each time window within a specified time range.\n+\n+```java\n+import java.io.IOException;\n+import org.apache.iotdb.db.query.udf.api.UDTF;\n+import org.apache.iotdb.db.query.udf.api.access.RowWindow;\n+import org.apache.iotdb.db.query.udf.api.collector.PointCollector;\n+import org.apache.iotdb.db.query.udf.api.customizer.config.UDTFConfigurations;\n+import org.apache.iotdb.db.query.udf.api.customizer.parameter.UDFParameters;\n+import org.apache.iotdb.db.query.udf.api.customizer.strategy.SlidingTimeWindowAccessStrategy;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+\n+public class Counter implements UDTF {\n+\n+  @Override\n+  public void beforeStart(UDFParameters parameters, UDTFConfigurations configurations) {\n+    configurations\n+        .setOutputDataType(TSDataType.INT32)\n+        .setAccessStrategy(new SlidingTimeWindowAccessStrategy(\n+            parameters.getLong(\"time_interval\"),\n+            parameters.getLong(\"sliding_step\"),\n+            parameters.getLong(\"display_window_begin\"),\n+            parameters.getLong(\"display_window_end\")));\n+  }\n+\n+  @Override\n+  public void transform(RowWindow rowWindow, PointCollector collector) {\n+    if (rowWindow.windowSize() != 0) {\n+      collector.putInt(rowWindow.getRow(0).getTime(), rowWindow.windowSize());\n+    }\n+  }\n+}\n+```\n+\n+\n+\n+## Maven Project Example\n+\n+If you use Maven, you can build your own UDF project referring to our **udf-example** module. You can find the project [here](https://github.com/apache/iotdb/tree/master/example/udf).\n+\n+\n+\n+## UDF Registration\n+\n+The process of registering a UDF in IoTDB is as follows:\n+\n+1. Implement a complete UDF class, assuming the full class name of this class is `org.apache.iotdb.udf.ExampleUDTF`.\n+2. Package your project into a JAR. If you use Maven to manage your project, you can refer to the Maven project example above.\n+3. Place the JAR package in the directory `iotdb-server-0.12.0-SNAPSHOT/lib` .\n+4. Register the UDF with the SQL statement, assuming that the name given to the UDF is `example`.\n+\n+The following shows the SQL syntax of how to register a UDF.\n+\n+```sql\n+CREATE FUNCTION <UDF-NAME> AS <UDF-CLASS-FULL-PATHNAME>\n+```\n+\n+Here is an example:\n+\n+```sql\n+CREATE FUNCTION example AS \"org.apache.iotdb.udf.ExampleUDTF\"\n+```\n+\n+Since UDF instances are dynamically loaded through reflection technology, you do not need to restart the server during the UDF registration process.\n+\n+Note: Please ensure that the function name given to the UDF is different from all built-in function names. A UDF with the same name as a built-in function can be registered, but cannot be called.", "originalCommit": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMzMjMwMw==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r542332303", "bodyText": "'example' looks strange, using my-udf is better..", "author": "qiaojialin", "createdAt": "2020-12-14T12:03:17Z", "path": "docs/UserGuide/Operation Manual/UDF User Defined Function.md", "diffHunk": "@@ -0,0 +1,416 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+    \n+        http://www.apache.org/licenses/LICENSE-2.0\n+    \n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+\n+\n+# UDF (User Defined Function)\n+\n+IoTDB provides a variety of built-in functions to meet your computing needs, and you can also create user defined functions to meet more computing needs. \n+\n+This document describes how to write, register and use a UDF.\n+\n+\n+\n+## UDF Types\n+\n+In IoTDB, you can expand two types of UDF:\n+\n+| UDF Class                                           | Description                                                  |\n+| --------------------------------------------------- | ------------------------------------------------------------ |\n+| UDTF\uff08User Defined Timeseries Generating Function\uff09 | This type of function can take **multiple** time series as input, and output **one** time series, which can have any number of data points. |\n+| UDAF\uff08User Defined Aggregation Function\uff09           | Under development, please stay tuned.                        |\n+\n+\n+\n+## UDF Development Dependencies\n+\n+If you use [Maven](http://search.maven.org/), you can search for the development dependencies listed below from the [Maven repository](http://search.maven.org/) . Please note that you must select the same dependency version as the target IoTDB server version for development.\n+\n+``` xml\n+<dependency>\n+  <groupId>org.apache.iotdb</groupId>\n+  <artifactId>iotdb-server</artifactId>\n+  <version>0.12.0-SNAPSHOT</version>\n+  <scope>provided</scope>\n+</dependency>\n+<dependency>\n+  <groupId>org.apache.iotdb</groupId>\n+  <artifactId>tsfile</artifactId>\n+  <version>0.12.0-SNAPSHOT</version>\n+  <scope>provided</scope>\n+</dependency>\n+```\n+\n+\n+\n+## UDTF\uff08User Defined Timeseries Generating Function\uff09\n+\n+To write a UDTF,  you need to inherit the `org.apache.iotdb.db.query.udf.api.UDTF` class, and at least implement the `beforeStart` method and a `transform` method.\n+\n+The following table shows all the interfaces available for user implementation. \n+\n+| Interface definition                                         | Description                                                  | Required to Implement                                 |\n+| :----------------------------------------------------------- | :----------------------------------------------------------- | ----------------------------------------------------- |\n+| `void beforeStart(UDFParameters parameters, UDTFConfigurations configurations) throws Exception` | The initialization method to call the user-defined initialization behavior before a UDTF processes the input data. Every time a user executes a UDTF query, the framework will construct a new UDF instance, and `beforeStart` will be called. | Required                                              |\n+| `void beforeDestroy() `                                      | This method is called by the framework after the last input data is processed, and will only be called once in the life cycle of each UDF instance. | Optional                                              |\n+| `void transform(Row row, PointCollector collector) throws Exception` | This method is called by the framework. This data processing method will be called when you choose to use the `RowByRowAccessStrategy` strategy (set in `beforeStart`) to consume raw data. Input data is passed in by `Row`, and the transformation result should be output by `PointCollector`. You need to call the data collection method provided by `collector`  to determine the output data. | Required to implement at least one `transform` method |\n+| `void transform(RowWindow rowWindow, PointCollector collector) throws Exception` | This method is called by the framework. This data processing method will be called when you choose to use the `SlidingSizeWindowAccessStrategy` or `SlidingTimeWindowAccessStrategy` strategy (set in `beforeStart`) to consume raw data. Input data is passed in by `RowWindow`, and the transformation result should be output by `PointCollector`. You need to call the data collection method provided by `collector`  to determine the output data. | Required to implement at least one `transform` method |\n+\n+Note that every time the framework executes a UDTF query, a new UDF instance will be constructed. When the query ends, the corresponding instance will be destroyed. Therefore, the internal data of the instances in different UDTF queries (even in the same SQL statement) are isolated. You can maintain some state data in the UDTF without considering the influence of concurrency and other factors.\n+\n+The usage of each interface will be described in detail below.\n+\n+\n+\n+### `void beforeStart(UDFParameters parameters, UDTFConfigurations configurations) throws Exception`\n+\n+This method is mainly used to customize UDTF. In this method, the user can do the following things:\n+\n+1. Use UDFParameters to get the time series paths and parse key-value pair attributes entered by the user.\n+2. Set the strategy to access the raw data and set the output data type in UDTFConfigurations.\n+3. Create resources, such as establishing external connections, opening files, etc.\n+\n+\n+\n+\n+#### `UDFParameters`\n+\n+`UDFParameters` is used to parse UDF parameters in SQL statements (the part in parentheses after the UDF function name in SQL). The input parameters have two parts. The first part is the paths (measurements) of the time series that the UDF needs to process, and the second part is the key-value pair attributes for customization. Only the second part can be empty.\n+\n+\n+Example\uff1a\n+\n+``` sql\n+SELECT UDF(s1, s2, 'key1'='iotdb', 'key2'='123.45') FROM root.sg.d;\n+```\n+\n+Usage\uff1a\n+\n+``` java\n+void beforeStart(UDFParameters parameters, UDTFConfigurations configurations) throws Exception {\n+  // parameters\n+\tfor (PartialPath path : parameters.getPaths()) {\n+  \t// do something\n+  }\n+  String stringValue = parameters.getString(\"key1\"); // iotdb\n+  Float floatValue = parameters.getFloat(\"key2\"); // 123.45\n+  Double doubleValue = parameters.getDouble(\"key3\"); // null\n+  int intValue = parameters.getIntOrDefault(\"key4\", 678); // 678\n+  // do something\n+  \n+  // configurations\n+  // ...\n+}\n+```\n+\n+\n+\n+####  `UDTFConfigurations`\n+\n+You must use `UDTFConfigurations` to specify the strategy used by UDF to access raw data and the type of output sequence.\n+\n+Usage\uff1a\n+\n+``` java\n+void beforeStart(UDFParameters parameters, UDTFConfigurations configurations) throws Exception {\n+  // parameters\n+  // ...\n+  \n+  // configurations\n+  configurations\n+    .setAccessStrategy(new RowByRowAccessStrategy())\n+    .setOutputDataType(TSDataType.INT32);\n+}\n+```\n+\n+The `setAccessStrategy` method is used to set the UDF's strategy for accessing the raw data, and the `setOutputDataType` method is used to set the data type of the output sequence.\n+\n+\n+\n+##### `setAccessStrategy`\n+\n+Note that the raw data access strategy you set here determines which `transform` method the framework will call. Please implement the `transform` method corresponding to the raw data access strategy. Of course, you can also dynamically decide which strategy to set based on the attribute parameters parsed by `UDFParameters`. Therefore, two `transform` methods are also allowed to be implemented in one UDF.\n+\n+The following are the strategies you can set:\n+\n+| Interface definition              | Description                                                  | The `transform` Method to Call                               |\n+| :-------------------------------- | :----------------------------------------------------------- | ------------------------------------------------------------ |\n+| `RowByRowAccessStrategy`          | Process raw data row by row. The framework calls the `transform` method once for each row of raw data input. When UDF has only one input sequence, a row of input is one data point in the input sequence. When UDF has multiple input sequences, one row of input is a result record of the raw query (aligned by time) on these input sequences. (In a row, there may be a column with a value of `null`, but not all of them are `null`) | `void transform(Row row, PointCollector collector) throws Exception` |\n+| `SlidingTimeWindowAccessStrategy` | Process a batch of data in a fixed time interval each time. We call the container of a data batch a window. The framework calls the `transform` method once for each raw data input window. There may be multiple rows of data in a window, and each row is a result record of the raw query (aligned by time) on these input sequences. (In a row, there may be a column with a value of `null`, but not all of them are `null`) | `void transform(RowWindow rowWindow, PointCollector collector) throws Exception` |\n+| `SlidingSizeWindowAccessStrategy`    | The raw data is processed batch by batch, and each batch contains a fixed number of raw data rows (except the last batch). We call the container of a data batch a window. The framework calls the `transform` method once for each raw data input window. There may be multiple rows of data in a window, and each row is a result record of the raw query (aligned by time) on these input sequences. (In a row, there may be a column with a value of `null`, but not all of them are `null`) | `void transform(RowWindow rowWindow, PointCollector collector) throws Exception` |\n+\n+\n+\n+`RowByRowAccessStrategy`: The construction of `RowByRowAccessStrategy` does not require any parameters.\n+\n+\n+\n+`SlidingTimeWindowAccessStrategy`: `SlidingTimeWindowAccessStrategy` has many constructors, you can pass 3 types of parameters to them:\n+\n+- Parameter 1: The display window on the time axis\n+- Parameter 2: Time interval for dividing the time axis (should be positive)\n+- Parameter 3: Time sliding step (not required to be greater than or equal to the time interval, but must be a positive number)\n+\n+The first type of parameters are optional. If the parameters are not provided, the beginning time of the display window will be set to the same as the minimum timestamp of the query result set, and the ending time of the display window will be set to the same as the maximum timestamp of the query result set.\n+\n+The sliding step parameter is also optional. If the parameter is not provided, the sliding step will be set to the same as the time interval for dividing the time axis.\n+\n+The relationship between the three types of parameters can be seen in the figure below. Please see the Javadoc for more details. \n+\n+<div style=\"text-align: center;\"><img style=\"width:100%; max-width:800px; max-height:600px; margin-left:auto; margin-right:auto; display:block;\" src=\"https://user-images.githubusercontent.com/30497621/99787878-47b51480-2b5b-11eb-8ed3-84088c5c30f7.png\"></div>\n+\n+Note that the actual time interval of some of the last time windows may be less than the specified time interval parameter. In addition, there may be cases where the number of data rows in some time windows is 0. In these cases, the framework will also call the `transform` method for the empty windows.\n+\n+\n+\n+`SlidingSizeWindowAccessStrategy`:  `SlidingSizeWindowAccessStrategy` has many constructors, you can pass 2 types of parameters to them:\n+\n+* Parameter 1: Window size. This parameter specifies the number of data rows contained in a data processing window. Note that the number of data rows in some of the last time windows may be less than the specified number of data rows.\n+* Parameter 2: Sliding step. This parameter means the number of rows between the first point of the next window and the first point of the current window. (This parameter is not required to be greater than or equal to the window size, but must be a positive number)\n+\n+The sliding step parameter is optional. If the parameter is not provided, the sliding step will be set to the same as the window size.\n+\n+Please see the Javadoc for more details. \n+\n+\n+\n+##### `setOutputDataType`\n+\n+Note that the type of output sequence you set here determines the type of data that the `PointCollector` can actually receive in the `transform` method. The relationship between the output data type set in `setOutputDataType` and the actual data output type that `PointCollector` can receive is as follows:\n+\n+| Output Data Type Set in `setOutputDataType` | Data Type that `PointCollector` Can Receive                  |\n+| :------------------------------------------ | :----------------------------------------------------------- |\n+| `INT32`                                     | `int`                                                        |\n+| `INT64`                                     | `long`                                                       |\n+| `FLOAT`                                     | `float`                                                      |\n+| `DOUBLE`                                    | `double`                                                     |\n+| `BOOLEAN`                                   | `boolean`                                                    |\n+| `TEXT`                                      | `java.lang.String` and `org.apache.iotdb.tsfile.utils.Binary` |\n+\n+\n+\n+### `void beforeDestroy() `\n+\n+The method for terminating a UDF.\n+\n+This method is called by the framework. For a UDF instance, `beforeDestroy` will be called after the last record is processed. In the entire life cycle of the instance, `beforeDestroy` will only be called once.\n+\n+\n+\n+### `void transform(Row row, PointCollector collector) throws Exception`\n+\n+You need to implement this method when you specify the strategy of UDF to read the original data as `RowByRowAccessStrategy`.\n+\n+This method processes the raw data one row at a time. The raw data is input from `Row` and output by `PointCollector`. You can output any number of data points in one `transform` method call. It should be noted that the type of output data points must be the same as you set in the `beforeStart` method, and the timestamps of output data points must be strictly monotonically increasing.\n+\n+The following is a complete UDF example that implements the `void transform(Row row, PointCollector collector) throws Exception` method. It is an adder that receives two columns of time series as input. When two data points in a row are not `null`, this UDF will output the algebraic sum of these two data points.\n+\n+``` java\n+import org.apache.iotdb.db.query.udf.api.UDTF;\n+import org.apache.iotdb.db.query.udf.api.access.Row;\n+import org.apache.iotdb.db.query.udf.api.collector.PointCollector;\n+import org.apache.iotdb.db.query.udf.api.customizer.config.UDTFConfigurations;\n+import org.apache.iotdb.db.query.udf.api.customizer.parameter.UDFParameters;\n+import org.apache.iotdb.db.query.udf.api.customizer.strategy.RowByRowAccessStrategy;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+\n+public class Adder implements UDTF {\n+\n+  @Override\n+  public void beforeStart(UDFParameters parameters, UDTFConfigurations configurations) {\n+    configurations\n+        .setOutputDataType(TSDataType.INT64)\n+        .setAccessStrategy(new RowByRowAccessStrategy());\n+  }\n+\n+  @Override\n+  public void transform(Row row, PointCollector collector) throws Exception {\n+    if (row.isNull(0) || row.isNull(1)) {\n+      return;\n+    }\n+    collector.putLong(row.getTime(), row.getLong(0) + row.getLong(1));\n+  }\n+}\n+```\n+\n+\n+\n+### `void transform(RowWindow rowWindow, PointCollector collector) throws Exception`\n+\n+You need to implement this method when you specify the strategy of UDF to read the original data as `SlidingTimeWindowAccessStrategy` or `SlidingSizeWindowAccessStrategy`.\n+\n+This method processes a batch of data in a fixed number of rows or a fixed time interval each time, and we call the container containing this batch of data a window. The raw data is input from `RowWindow` and output by `PointCollector`. `RowWindow` can help you access a batch of `Row`, it provides a set of interfaces for random access and iterative access to this batch of `Row`. You can output any number of data points in one `transform` method call. It should be noted that the type of output data points must be the same as you set in the `beforeStart` method, and the timestamps of output data points must be strictly monotonically increasing.\n+\n+Below is a complete UDF example that implements the `void transform(RowWindow rowWindow, PointCollector collector) throws Exception` method. It is a counter that receives any number of time series as input, and its function is to count and output the number of data rows in each time window within a specified time range.\n+\n+```java\n+import java.io.IOException;\n+import org.apache.iotdb.db.query.udf.api.UDTF;\n+import org.apache.iotdb.db.query.udf.api.access.RowWindow;\n+import org.apache.iotdb.db.query.udf.api.collector.PointCollector;\n+import org.apache.iotdb.db.query.udf.api.customizer.config.UDTFConfigurations;\n+import org.apache.iotdb.db.query.udf.api.customizer.parameter.UDFParameters;\n+import org.apache.iotdb.db.query.udf.api.customizer.strategy.SlidingTimeWindowAccessStrategy;\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n+\n+public class Counter implements UDTF {\n+\n+  @Override\n+  public void beforeStart(UDFParameters parameters, UDTFConfigurations configurations) {\n+    configurations\n+        .setOutputDataType(TSDataType.INT32)\n+        .setAccessStrategy(new SlidingTimeWindowAccessStrategy(\n+            parameters.getLong(\"time_interval\"),\n+            parameters.getLong(\"sliding_step\"),\n+            parameters.getLong(\"display_window_begin\"),\n+            parameters.getLong(\"display_window_end\")));\n+  }\n+\n+  @Override\n+  public void transform(RowWindow rowWindow, PointCollector collector) {\n+    if (rowWindow.windowSize() != 0) {\n+      collector.putInt(rowWindow.getRow(0).getTime(), rowWindow.windowSize());\n+    }\n+  }\n+}\n+```\n+\n+\n+\n+## Maven Project Example\n+\n+If you use Maven, you can build your own UDF project referring to our **udf-example** module. You can find the project [here](https://github.com/apache/iotdb/tree/master/example/udf).\n+\n+\n+\n+## UDF Registration\n+\n+The process of registering a UDF in IoTDB is as follows:\n+\n+1. Implement a complete UDF class, assuming the full class name of this class is `org.apache.iotdb.udf.ExampleUDTF`.\n+2. Package your project into a JAR. If you use Maven to manage your project, you can refer to the Maven project example above.\n+3. Place the JAR package in the directory `iotdb-server-0.12.0-SNAPSHOT/lib` .\n+4. Register the UDF with the SQL statement, assuming that the name given to the UDF is `example`.\n+\n+The following shows the SQL syntax of how to register a UDF.\n+\n+```sql\n+CREATE FUNCTION <UDF-NAME> AS <UDF-CLASS-FULL-PATHNAME>\n+```\n+\n+Here is an example:\n+\n+```sql\n+CREATE FUNCTION example AS \"org.apache.iotdb.udf.ExampleUDTF\"", "originalCommit": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMzNzk4Mg==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r542337982", "bodyText": "this is not used", "author": "qiaojialin", "createdAt": "2020-12-14T12:14:14Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConstant.java", "diffHunk": "@@ -86,6 +86,10 @@ private IoTDBConstant() {\n   public static final String COLUMN_CANCELLED = \"cancelled\";\n   public static final String COLUMN_DONE = \"done\";\n \n+  public static final String COLUMN_FUNCTION_NAME = \"UDF name\";\n+  public static final String COLUMN_FUNCTION_CLASS = \"class name\";\n+  public static final String COLUMN_FUNCTION_TEMPORARY = \"temporary\";", "originalCommit": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM0MTY3Ng==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r542341676", "bodyText": "You allocate 0.2 of read memory to udf, how does query perceive this?", "author": "qiaojialin", "createdAt": "2020-12-14T12:21:05Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -760,6 +760,28 @@\n   // the authorizer provider class which extends BasicAuthorizer\n   private String authorizerProvider = \"org.apache.iotdb.db.auth.authorizer.LocalFileAuthorizer\";\n \n+  /**\n+   * Used to estimate the memory usage of text fields in a UDF query. It is recommended to set this\n+   * value to be slightly larger than the average length of all text records.\n+   */\n+  private int udfInitialByteArrayLengthForMemoryControl = 48;\n+\n+  /**\n+   * How much memory may be used in ONE UDF query (in MB).\n+   * <p>\n+   * The upper limit is 20% of allocated memory for read.\n+   * <p>\n+   * udfMemoryBudgetInMB = udfReaderMemoryBudgetInMB + udfTransformerMemoryBudgetInMB +\n+   * udfCollectorMemoryBudgetInMB\n+   */\n+  private float udfMemoryBudgetInMB = (float) Math.min(300f, 0.2 * allocateMemoryForRead);", "originalCommit": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM0MjAzMA==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r542342030", "bodyText": "maybe you need to change chunkmeta_chunk_timeseriesmeta_free_memory_proportion", "author": "qiaojialin", "createdAt": "2020-12-14T12:21:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM0MTY3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM0MjQ5MQ==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r542342491", "bodyText": "extends QueryProcessException?", "author": "qiaojialin", "createdAt": "2020-12-14T12:22:28Z", "path": "server/src/main/java/org/apache/iotdb/db/exception/UDFRegistrationException.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.iotdb.db.exception;\r\n+\r\n+public class UDFRegistrationException extends StorageEngineException {\r", "originalCommit": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM0ODMyMQ==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r542348321", "bodyText": "merge master and the mo is supported", "author": "qiaojialin", "createdAt": "2020-12-14T12:33:18Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/constant/DatetimeUtils.java", "diffHunk": "@@ -477,6 +477,46 @@ public static long convertDatetimeStrToLong(String str, ZoneOffset offset, int d\n     return getInstantWithPrecision(str, timestampPrecision);\n   }\n \n+  /**\n+   * convert duration string to time value.\n+   *\n+   * @param duration represent duration string like: 12d8m9ns, 1y1mo, etc.\n+   * @return time in milliseconds, microseconds, or nanoseconds depending on the profile\n+   */\n+  public static long convertDurationStrToLong(String duration) {\n+    String timestampPrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+    return convertDurationStrToLong(duration, timestampPrecision);\n+  }\n+\n+  /**\n+   * convert duration string to time value.\n+   *\n+   * @param duration represent duration string like: 12d8m9ns, 1y1mo, etc.\n+   * @return time in milliseconds, microseconds, or nanoseconds depending on the profile\n+   */\n+  public static long convertDurationStrToLong(String duration, String timestampPrecision) {", "originalCommit": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM1MjQwNA==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r542352404", "bodyText": "remove this", "author": "qiaojialin", "createdAt": "2020-12-14T12:40:16Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "diffHunk": "@@ -668,6 +697,33 @@ private QueryDataSet processShowFlushTaskInfo() {\n     return listDataSet;\n   }\n \n+  private QueryDataSet processShowFunctions(ShowFunctionsPlan showPlan) {\n+    ListDataSet listDataSet = new ListDataSet(\n+        Arrays.asList(\n+            new PartialPath(COLUMN_FUNCTION_NAME, false),\n+            new PartialPath(COLUMN_FUNCTION_CLASS, false)\n+            // new PartialPath(COLUMN_FUNCTION_TEMPORARY, false)", "originalCommit": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM1MjUwOQ==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r542352509", "bodyText": "remove or add", "author": "qiaojialin", "createdAt": "2020-12-14T12:40:28Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "diffHunk": "@@ -668,6 +697,33 @@ private QueryDataSet processShowFlushTaskInfo() {\n     return listDataSet;\n   }\n \n+  private QueryDataSet processShowFunctions(ShowFunctionsPlan showPlan) {\n+    ListDataSet listDataSet = new ListDataSet(\n+        Arrays.asList(\n+            new PartialPath(COLUMN_FUNCTION_NAME, false),\n+            new PartialPath(COLUMN_FUNCTION_CLASS, false)\n+            // new PartialPath(COLUMN_FUNCTION_TEMPORARY, false)\n+        ),\n+        Arrays.asList(\n+            TSDataType.TEXT,\n+            TSDataType.TEXT\n+            // TSDataType.BOOLEAN", "originalCommit": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM1MjY2NQ==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r542352665", "bodyText": "same", "author": "qiaojialin", "createdAt": "2020-12-14T12:40:47Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/executor/PlanExecutor.java", "diffHunk": "@@ -668,6 +697,33 @@ private QueryDataSet processShowFlushTaskInfo() {\n     return listDataSet;\n   }\n \n+  private QueryDataSet processShowFunctions(ShowFunctionsPlan showPlan) {\n+    ListDataSet listDataSet = new ListDataSet(\n+        Arrays.asList(\n+            new PartialPath(COLUMN_FUNCTION_NAME, false),\n+            new PartialPath(COLUMN_FUNCTION_CLASS, false)\n+            // new PartialPath(COLUMN_FUNCTION_TEMPORARY, false)\n+        ),\n+        Arrays.asList(\n+            TSDataType.TEXT,\n+            TSDataType.TEXT\n+            // TSDataType.BOOLEAN\n+        )\n+    );\n+    for (UDFRegistrationInformation info : UDFRegistrationService.getInstance()\n+        .getRegistrationInformation()) {\n+      if (showPlan.showTemporary() && !info.isTemporary()) {\n+        continue;\n+      }\n+      RowRecord rowRecord = new RowRecord(0); // ignore timestamp\n+      rowRecord.addField(Binary.valueOf(info.getFunctionName()), TSDataType.TEXT);\n+      rowRecord.addField(Binary.valueOf(info.getClassName()), TSDataType.TEXT);\n+      // rowRecord.addField(info.isTemporary(), TSDataType.BOOLEAN);", "originalCommit": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM3MTM0Mg==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r542371342", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Resets the iteration.\n          \n          \n            \n               * Reset the iteration.", "author": "qiaojialin", "createdAt": "2020-12-14T13:11:31Z", "path": "server/src/main/java/org/apache/iotdb/db/query/udf/api/access/RowIterator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.iotdb.db.query.udf.api.access;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+public interface RowIterator {\r\n+\r\n+  /**\r\n+   * Returns {@code true} if the iteration has more rows.\r\n+   *\r\n+   * @return {@code true} if the iteration has more rows\r\n+   */\r\n+  boolean hasNextRow();\r\n+\r\n+  /**\r\n+   * Returns the next row in the iteration.\r\n+   * <p>\r\n+   * Note that the Row instance returned by this method each time is the same instance. In other\r\n+   * words, calling {@code next()} will only change the member variables inside the Row instance,\r\n+   * but will not generate a new Row instance.\r\n+   *\r\n+   * @return the next element in the iteration\r\n+   * @throws IOException if any I/O errors occur\r\n+   */\r\n+  Row next() throws IOException;\r\n+\r\n+  /**\r\n+   * Resets the iteration.\r", "originalCommit": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM3MjA0NQ==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r542372045", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public abstract class UDFConfigurations {\n          \n          \n            \n            public abstract class AbstractUDFConfigurations {", "author": "qiaojialin", "createdAt": "2020-12-14T13:12:30Z", "path": "server/src/main/java/org/apache/iotdb/db/query/udf/api/customizer/config/UDFConfigurations.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.iotdb.db.query.udf.api.customizer.config;\r\n+\r\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\r\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\r\n+\r\n+public abstract class UDFConfigurations {\r", "originalCommit": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM3NjkwNQ==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r542376905", "bodyText": "The if-else could be eliminated since the error message is generated according to information.isTemporary()", "author": "qiaojialin", "createdAt": "2020-12-14T13:20:01Z", "path": "server/src/main/java/org/apache/iotdb/db/query/udf/service/UDFRegistrationService.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.iotdb.db.query.udf.service;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.File;\r\n+import java.io.FileReader;\r\n+import java.io.IOException;\r\n+import java.lang.reflect.InvocationTargetException;\r\n+import java.util.HashMap;\r\n+import java.util.Map.Entry;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\r\n+import org.apache.commons.io.FileUtils;\r\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\r\n+import org.apache.iotdb.db.engine.fileSystem.SystemFileFactory;\r\n+import org.apache.iotdb.db.exception.StartupException;\r\n+import org.apache.iotdb.db.exception.UDFRegistrationException;\r\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\r\n+import org.apache.iotdb.db.query.udf.api.UDF;\r\n+import org.apache.iotdb.db.query.udf.core.context.UDFContext;\r\n+import org.apache.iotdb.db.service.IService;\r\n+import org.apache.iotdb.db.service.ServiceType;\r\n+import org.apache.iotdb.db.utils.TestOnly;\r\n+import org.apache.iotdb.tsfile.fileSystem.FSFactoryProducer;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+public class UDFRegistrationService implements IService {\r\n+\r\n+  private static final Logger logger = LoggerFactory.getLogger(UDFRegistrationService.class);\r\n+\r\n+  private static final String ULOG_FILE_DIR =\r\n+      IoTDBDescriptor.getInstance().getConfig().getSystemDir()\r\n+          + File.separator + \"udf\" + File.separator;\r\n+  private static final String LOG_FILE_NAME = ULOG_FILE_DIR + \"ulog.txt\";\r\n+  private static final String TEMPORARY_LOG_FILE_NAME = LOG_FILE_NAME + \".tmp\";\r\n+\r\n+  private final ConcurrentHashMap<String, UDFRegistrationInformation> registrationInformation;\r\n+\r\n+  private final ReentrantReadWriteLock lock;\r\n+  private UDFLogWriter temporaryLogWriter;\r\n+\r\n+  private UDFClassLoader udfClassLoader;\r\n+\r\n+  private UDFRegistrationService() {\r\n+    registrationInformation = new ConcurrentHashMap<>();\r\n+    lock = new ReentrantReadWriteLock();\r\n+  }\r\n+\r\n+  @SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning\r\n+  public void register(String functionName, String className, boolean isTemporary,\r\n+      boolean writeToTemporaryLogFile) throws UDFRegistrationException {\r\n+    UDFRegistrationInformation information = registrationInformation.get(functionName);\r\n+    if (information != null) {\r\n+      if (information.getClassName().equals(className)) {\r\n+        String errorMessage;\r\n+        if (information.isTemporary() == isTemporary) {\r\n+          errorMessage = String\r\n+              .format(\"UDF %s(%s) has already been registered successfully.\",\r\n+                  functionName, className);\r\n+        } else {\r\n+          errorMessage = String.format(\r\n+              \"Failed to register %sTEMPORARY UDF %s(%s), because a %sTEMPORARY UDF %s(%s) with the same function name and the class name has already been registered.\",\r\n+              isTemporary ? \"\" : \"non-\", functionName, className,\r\n+              information.isTemporary() ? \"\" : \"non-\", information.getFunctionName(),\r\n+              information.getClassName());\r", "originalCommit": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA3NzkzOQ==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r544077939", "bodyText": "+1 \uff0cor use a uniform error description prefix", "author": "liutaohua", "createdAt": "2020-12-16T07:42:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM3NjkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEwMDUwNw==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r543100507", "bodyText": "add some example and javadoc", "author": "qiaojialin", "createdAt": "2020-12-15T07:15:11Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/UDTFPlan.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.iotdb.db.qp.physical.crud;\r\n+\r\n+import java.time.ZoneId;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\r\n+import org.apache.iotdb.db.qp.logical.Operator;\r\n+import org.apache.iotdb.db.query.udf.core.context.UDFContext;\r\n+import org.apache.iotdb.db.query.udf.core.executor.UDTFExecutor;\r\n+\r\n+public class UDTFPlan extends RawDataQueryPlan implements UDFPlan {\r\n+\r\n+  protected final ZoneId zoneId;\r\n+\r\n+  protected Map<String, UDTFExecutor> columnName2Executor = new HashMap<>();\r\n+  protected Map<Integer, UDTFExecutor> originalOutputColumnIndex2Executor = new HashMap<>();\r\n+\r\n+  protected List<String> datasetOutputColumnIndex2UdfColumnName = new ArrayList<>();\r", "originalCommit": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEwNTA4NQ==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r543105085", "bodyText": "Add some javadoc, I do not know which should be called first", "author": "qiaojialin", "createdAt": "2020-12-15T07:24:21Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/crud/UDFPlan.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.iotdb.db.qp.physical.crud;\r\n+\r\n+import java.util.List;\r\n+import org.apache.iotdb.db.exception.metadata.MetadataException;\r\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\r\n+import org.apache.iotdb.db.query.udf.core.context.UDFContext;\r\n+\r\n+public interface UDFPlan {\r\n+\r\n+  void constructUdfExecutors(List<UDFContext> udfContexts)\r\n+      throws QueryProcessException, MetadataException;\r\n+\r\n+  void initializeUdfExecutor(long queryId, float collectorMemoryBudgetInMb)\r\n+      throws QueryProcessException;\r", "originalCommit": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI1NzE3MA==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r543257170", "bodyText": "check this method", "author": "qiaojialin", "createdAt": "2020-12-15T11:16:24Z", "path": "server/src/main/java/org/apache/iotdb/db/query/udf/core/reader/LayerPointReader.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.iotdb.db.query.udf.core.reader;\r\n+\r\n+import java.io.IOException;\r\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\r\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\r\n+import org.apache.iotdb.tsfile.utils.Binary;\r\n+\r\n+public interface LayerPointReader {\r\n+\r\n+  boolean next() throws QueryProcessException, IOException;\r\n+\r\n+  void readyForNext();\r", "originalCommit": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI4ODU5MQ==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r543288591", "bodyText": "The 'between' looks strange.\nFor example, 1,2,3,4,5 is a window, 6,7,8,9,10 is a window. number of rows between 1 and 6 is 4 or 5?", "author": "qiaojialin", "createdAt": "2020-12-15T12:08:31Z", "path": "server/src/main/java/org/apache/iotdb/db/query/udf/api/customizer/strategy/SlidingSizeWindowAccessStrategy.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.iotdb.db.query.udf.api.customizer.strategy;\r\n+\r\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\r\n+import org.apache.iotdb.db.query.udf.api.UDTF;\r\n+import org.apache.iotdb.db.query.udf.api.access.RowWindow;\r\n+import org.apache.iotdb.db.query.udf.api.collector.PointCollector;\r\n+import org.apache.iotdb.db.query.udf.api.customizer.config.UDTFConfigurations;\r\n+import org.apache.iotdb.db.query.udf.api.customizer.parameter.UDFParameters;\r\n+\r\n+/**\r\n+ * Used in {@link UDTF#beforeStart(UDFParameters, UDTFConfigurations)}.\r\n+ * <p>\r\n+ * When the access strategy of a UDTF is set to an instance of this class, the method {@link\r\n+ * UDTF#transform(RowWindow, PointCollector)} of the UDTF will be called to transform the original\r\n+ * data. You need to override the method in your own UDTF class.\r\n+ * <p>\r\n+ * Sliding size window is a kind of size-based window. Except for the last call, each call of the\r\n+ * method {@link UDTF#transform(RowWindow, PointCollector)} processes a window with {@code\r\n+ * windowSize} rows (aligned by time) of the original data and can generate any number of data\r\n+ * points.\r\n+ * <p>\r\n+ * Sample code:\r\n+ * <pre>{@code\r\n+ * @Override\r\n+ * public void beforeStart(UDFParameters parameters, UDTFConfigurations configurations) {\r\n+ *   configurations\r\n+ *       .setOutputDataType(TSDataType.INT32)\r\n+ *       .setAccessStrategy(new SlidingSizeWindowAccessStrategy(10000)); // window size\r\n+ * }</pre>\r\n+ *\r\n+ * @see UDTF\r\n+ * @see UDTFConfigurations\r\n+ */\r\n+public class SlidingSizeWindowAccessStrategy implements AccessStrategy {\r\n+\r\n+  private final int windowSize;\r\n+  private final int slidingStep;\r\n+\r\n+  /**\r\n+   * Constructor. You need to specify the number of rows in each sliding size window (except for the\r\n+   * last window) and the sliding step to the next window.\r\n+   *\r\n+   * @param windowSize  the number of rows in each sliding size window (0 < windowSize)\r\n+   * @param slidingStep the number of rows between the first point of the next window and the first\r\n+   *                    point of the current window (0 < slidingStep)\r", "originalCommit": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI5NTMwNQ==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r543295305", "bodyText": "add a javadoc to explain why the fileSet only expands", "author": "qiaojialin", "createdAt": "2020-12-15T12:19:30Z", "path": "server/src/main/java/org/apache/iotdb/db/query/udf/service/UDFClassLoader.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.iotdb.db.query.udf.service;\r\n+\r\n+import java.io.File;\r\n+import java.io.IOException;\r\n+import java.net.URL;\r\n+import java.net.URLClassLoader;\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+import org.apache.commons.io.FileUtils;\r\n+import org.apache.iotdb.db.engine.fileSystem.SystemFileFactory;\r\n+\r\n+public class UDFClassLoader extends URLClassLoader {\r", "originalCommit": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDAwMzMyOQ==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r544003329", "bodyText": "LinkedHashMap", "author": "qiaojialin", "createdAt": "2020-12-16T06:03:27Z", "path": "server/src/main/java/org/apache/iotdb/db/query/udf/core/context/UDFContext.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.iotdb.db.query.udf.core.context;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import org.apache.iotdb.db.exception.metadata.MetadataException;\r\n+import org.apache.iotdb.db.metadata.PartialPath;\r\n+import org.apache.iotdb.db.service.IoTDB;\r\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\r\n+\r\n+public class UDFContext {\r\n+\r\n+  private final String name;\r\n+  private final Map<String, String> attributes;\r\n+  private final List<String> attributeKeysInOriginalOrder;\r", "originalCommit": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDAwNjIzMw==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r544006233", "bodyText": "javadoc", "author": "qiaojialin", "createdAt": "2020-12-16T06:07:12Z", "path": "server/src/main/java/org/apache/iotdb/db/query/udf/core/context/UDFContext.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.iotdb.db.query.udf.core.context;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import org.apache.iotdb.db.exception.metadata.MetadataException;\r\n+import org.apache.iotdb.db.metadata.PartialPath;\r\n+import org.apache.iotdb.db.service.IoTDB;\r\n+import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\r\n+\r\n+public class UDFContext {\r\n+\r\n+  private final String name;\r\n+  private final Map<String, String> attributes;\r\n+  private final List<String> attributeKeysInOriginalOrder;\r\n+\r\n+  private List<PartialPath> paths;\r\n+  private List<TSDataType> dataTypes;\r\n+\r\n+  private String columnParameterPart;\r\n+  private String column;\r\n+\r\n+  public UDFContext(String name) {\r\n+    this.name = name;\r\n+    attributes = new HashMap<>();\r\n+    attributeKeysInOriginalOrder = new ArrayList<>();\r\n+    paths = new ArrayList<>();\r\n+  }\r\n+\r\n+  public UDFContext(String name, Map<String, String> attributes,\r\n+      List<String> attributeKeysInOriginalOrder, List<PartialPath> paths) {\r\n+    this.name = name;\r\n+    this.attributes = attributes;\r\n+    this.attributeKeysInOriginalOrder = attributeKeysInOriginalOrder;\r\n+    this.paths = paths;\r\n+  }\r\n+\r\n+  public void addAttribute(String key, String value) {\r\n+    attributes.put(key, value);\r\n+    attributeKeysInOriginalOrder.add(key);\r\n+  }\r\n+\r\n+  public void addPath(PartialPath path) {\r\n+    paths.add(path);\r\n+  }\r\n+\r\n+  public void setPaths(List<PartialPath> paths) {\r\n+    this.paths = paths;\r\n+  }\r\n+\r\n+  public String getName() {\r\n+    return name;\r\n+  }\r\n+\r\n+  public Map<String, String> getAttributes() {\r\n+    return attributes;\r\n+  }\r\n+\r\n+  public List<String> getAttributeKeysInOriginalOrder() {\r\n+    return attributeKeysInOriginalOrder;\r\n+  }\r\n+\r\n+  public List<PartialPath> getPaths() {\r\n+    return paths;\r\n+  }\r\n+\r\n+  public List<TSDataType> getDataTypes() throws MetadataException {\r\n+    if (dataTypes == null) {\r\n+      dataTypes = new ArrayList<>();\r\n+      for (PartialPath path : paths) {\r\n+        dataTypes.add(IoTDB.metaManager.getSeriesType(path));\r\n+      }\r\n+    }\r\n+    return dataTypes;\r\n+  }\r\n+\r\n+  public String getColumnName() {\r\n+    if (column == null) {\r\n+      column = name + \"(\" + getColumnNameParameterPart() + \")\";\r\n+    }\r\n+    return column;\r\n+  }\r\n+\r\n+  private String getColumnNameParameterPart() {\r", "originalCommit": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "28a607ced42de7105c77b00107e3a6de84a3ccd8", "url": "https://github.com/apache/iotdb/commit/28a607ced42de7105c77b00107e3a6de84a3ccd8", "message": "remove unused code", "committedDate": "2020-12-16T11:58:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg5NjEwOA==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r544896108", "bodyText": "rename?", "author": "SteveYurongSu", "createdAt": "2020-12-17T08:23:16Z", "path": "server/src/main/java/org/apache/iotdb/db/query/udf/service/UDFRegistrationService.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.iotdb.db.query.udf.service;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.File;\r\n+import java.io.FileReader;\r\n+import java.io.IOException;\r\n+import java.lang.reflect.InvocationTargetException;\r\n+import java.util.HashMap;\r\n+import java.util.Map.Entry;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\r\n+import org.apache.commons.io.FileUtils;\r\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\r\n+import org.apache.iotdb.db.engine.fileSystem.SystemFileFactory;\r\n+import org.apache.iotdb.db.exception.StartupException;\r\n+import org.apache.iotdb.db.exception.UDFRegistrationException;\r\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\r\n+import org.apache.iotdb.db.query.udf.api.UDF;\r\n+import org.apache.iotdb.db.query.udf.core.context.UDFContext;\r\n+import org.apache.iotdb.db.service.IService;\r\n+import org.apache.iotdb.db.service.ServiceType;\r\n+import org.apache.iotdb.db.utils.TestOnly;\r\n+import org.apache.iotdb.tsfile.fileSystem.FSFactoryProducer;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+public class UDFRegistrationService implements IService {\r\n+\r\n+  private static final Logger logger = LoggerFactory.getLogger(UDFRegistrationService.class);\r\n+\r\n+  private static final String ULOG_FILE_DIR =\r\n+      IoTDBDescriptor.getInstance().getConfig().getSystemDir()\r\n+          + File.separator + \"udf\" + File.separator;\r\n+  private static final String LOG_FILE_NAME = ULOG_FILE_DIR + \"ulog.txt\";\r\n+  private static final String TEMPORARY_LOG_FILE_NAME = LOG_FILE_NAME + \".tmp\";\r", "originalCommit": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEwMzQyNA==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r543103424", "bodyText": "It is recommended to use a URLClassLoader for each UDF, manage with HashMap, and close the corresponding URLClassLoader when the user uninstalls the UDF", "author": "liutaohua", "createdAt": "2020-12-15T07:21:01Z", "path": "server/src/main/java/org/apache/iotdb/db/query/udf/service/UDFClassLoader.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.iotdb.db.query.udf.service;\r\n+\r\n+import java.io.File;\r\n+import java.io.IOException;\r\n+import java.net.URL;\r\n+import java.net.URLClassLoader;\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+import org.apache.commons.io.FileUtils;\r\n+import org.apache.iotdb.db.engine.fileSystem.SystemFileFactory;\r\n+\r\n+public class UDFClassLoader extends URLClassLoader {\r\n+\r\n+  private final String libRoot;\r\n+  private final Set<File> fileSet;\r", "originalCommit": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc4MjI3Mw==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r544782273", "bodyText": "register(UDFRegistrationInformation info, boolean writeToLog)", "author": "liutaohua", "createdAt": "2020-12-17T03:20:15Z", "path": "server/src/main/java/org/apache/iotdb/db/query/udf/service/UDFRegistrationService.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.iotdb.db.query.udf.service;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.File;\r\n+import java.io.FileReader;\r\n+import java.io.IOException;\r\n+import java.lang.reflect.InvocationTargetException;\r\n+import java.util.HashMap;\r\n+import java.util.Map.Entry;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\r\n+import org.apache.commons.io.FileUtils;\r\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\r\n+import org.apache.iotdb.db.engine.fileSystem.SystemFileFactory;\r\n+import org.apache.iotdb.db.exception.StartupException;\r\n+import org.apache.iotdb.db.exception.UDFRegistrationException;\r\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\r\n+import org.apache.iotdb.db.query.udf.api.UDF;\r\n+import org.apache.iotdb.db.query.udf.core.context.UDFContext;\r\n+import org.apache.iotdb.db.service.IService;\r\n+import org.apache.iotdb.db.service.ServiceType;\r\n+import org.apache.iotdb.db.utils.TestOnly;\r\n+import org.apache.iotdb.tsfile.fileSystem.FSFactoryProducer;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+public class UDFRegistrationService implements IService {\r\n+\r\n+  private static final Logger logger = LoggerFactory.getLogger(UDFRegistrationService.class);\r\n+\r\n+  private static final String ULOG_FILE_DIR =\r\n+      IoTDBDescriptor.getInstance().getConfig().getSystemDir()\r\n+          + File.separator + \"udf\" + File.separator;\r\n+  private static final String LOG_FILE_NAME = ULOG_FILE_DIR + \"ulog.txt\";\r\n+  private static final String TEMPORARY_LOG_FILE_NAME = LOG_FILE_NAME + \".tmp\";\r\n+\r\n+  private final ConcurrentHashMap<String, UDFRegistrationInformation> registrationInformation;\r\n+\r\n+  private final ReentrantReadWriteLock lock;\r\n+  private UDFLogWriter temporaryLogWriter;\r\n+\r\n+  private UDFClassLoader udfClassLoader;\r\n+\r\n+  private UDFRegistrationService() {\r\n+    registrationInformation = new ConcurrentHashMap<>();\r\n+    lock = new ReentrantReadWriteLock();\r\n+  }\r\n+\r\n+  @SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning\r\n+  public void register(String functionName, String className, boolean isTemporary,\r", "originalCommit": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc5MTIzNQ==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r544791235", "bodyText": "canBeSplit ?", "author": "liutaohua", "createdAt": "2020-12-17T03:48:25Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/physical/sys/DropFunctionPlan.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.iotdb.db.qp.physical.sys;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import org.apache.iotdb.db.metadata.PartialPath;\r\n+import org.apache.iotdb.db.qp.logical.Operator.OperatorType;\r\n+import org.apache.iotdb.db.qp.physical.PhysicalPlan;\r\n+\r\n+public class DropFunctionPlan extends PhysicalPlan {\r\n+\r\n+  private final String udfName;\r\n+\r\n+  public DropFunctionPlan(String udfName) {\r\n+    super(false, OperatorType.DROP_FUNCTION);\r", "originalCommit": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc2NDc5NA==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r547764794", "bodyText": "The field canBeSplit  is useless, maybe it can be removed..", "author": "SteveYurongSu", "createdAt": "2020-12-23T07:45:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc5MTIzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgyOTMyNQ==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r544829325", "bodyText": "use if( queryOperator.hasUdf())  to remove redundant judgments", "author": "liutaohua", "createdAt": "2020-12-17T05:50:00Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/PhysicalGenerator.java", "diffHunk": "@@ -397,7 +419,13 @@ private PhysicalPlan transformQuery(QueryOperator queryOperator, int fetchSize)\n     } else if (queryOperator.getIndexType() != null) {\n       queryPlan = new QueryIndexPlan();\n     } else {\n-      queryPlan = new RawDataQueryPlan();\n+      queryPlan = queryOperator.hasUdf()", "originalCommit": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA5OTM3MQ==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r547099371", "bodyText": "Pay attention to the errors, such as when ArrayIndexOutOfBoundsException occurs, will only hint Msg: 500: 1", "author": "liutaohua", "createdAt": "2020-12-22T06:49:16Z", "path": "server/src/main/java/org/apache/iotdb/db/query/udf/core/executor/UDTFExecutor.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.iotdb.db.query.udf.core.executor;\r\n+\r\n+import java.time.ZoneId;\r\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\r\n+import org.apache.iotdb.db.query.udf.api.UDTF;\r\n+import org.apache.iotdb.db.query.udf.api.access.Row;\r\n+import org.apache.iotdb.db.query.udf.api.access.RowWindow;\r\n+import org.apache.iotdb.db.query.udf.api.customizer.config.UDTFConfigurations;\r\n+import org.apache.iotdb.db.query.udf.api.customizer.parameter.UDFParameters;\r\n+import org.apache.iotdb.db.query.udf.core.context.UDFContext;\r\n+import org.apache.iotdb.db.query.udf.datastructure.tv.ElasticSerializableTVList;\r\n+import org.apache.iotdb.db.query.udf.service.UDFRegistrationService;\r\n+\r\n+public class UDTFExecutor {\r\n+\r\n+  protected final UDFContext context;\r\n+  protected UDTFConfigurations configurations;\r\n+  protected UDTF udtf;\r\n+  protected ElasticSerializableTVList collector;\r\n+\r\n+  public UDTFExecutor(UDFContext context, ZoneId zoneId) throws QueryProcessException {\r\n+    this.context = context;\r\n+    configurations = new UDTFConfigurations(zoneId);\r\n+    udtf = (UDTF) UDFRegistrationService.getInstance().reflect(context);\r\n+    try {\r\n+      udtf.beforeStart(new UDFParameters(context.getPaths(), context.getAttributes()),\r\n+          configurations);\r\n+    } catch (Exception e) {\r\n+      throw new QueryProcessException(e.getMessage());\r\n+    }\r\n+    configurations.check();\r\n+  }\r\n+\r\n+  public void initCollector(long queryId, float collectorMemoryBudgetInMB)\r\n+      throws QueryProcessException {\r\n+    collector = ElasticSerializableTVList\r\n+        .newElasticSerializableTVList(configurations.getOutputDataType(), queryId,\r\n+            collectorMemoryBudgetInMB, 1);\r\n+  }\r\n+\r\n+  public void execute(Row row) throws QueryProcessException {\r\n+    try {\r\n+      udtf.transform(row, collector);\r\n+    } catch (Exception e) {\r\n+      throw new QueryProcessException(e.getMessage());\r", "originalCommit": "008822867e475e80b3e7f4f4bc62b9d7b0db4ab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "34191b2b5d2e6ae11382d34c700175890e83ddbe", "url": "https://github.com/apache/iotdb/commit/34191b2b5d2e6ae11382d34c700175890e83ddbe", "message": "merge master and fix conflicts", "committedDate": "2020-12-23T07:14:55Z", "type": "commit"}, {"oid": "2c1e2c332a0c919affc38cef0c9d3ff5f6f0c59d", "url": "https://github.com/apache/iotdb/commit/2c1e2c332a0c919affc38cef0c9d3ff5f6f0c59d", "message": "remove redundant code used to generate error message in UDFRegistrationService#register", "committedDate": "2020-12-23T08:03:40Z", "type": "commit"}, {"oid": "0a57e97e9101c9c3f035bf05fddce657a4b7022c", "url": "https://github.com/apache/iotdb/commit/0a57e97e9101c9c3f035bf05fddce657a4b7022c", "message": "add an example for the constructor of SlidingSizeWindowAccessStrategy", "committedDate": "2020-12-23T08:29:54Z", "type": "commit"}, {"oid": "2dab0292281e778631d236428bd4414e24321a5b", "url": "https://github.com/apache/iotdb/commit/2dab0292281e778631d236428bd4414e24321a5b", "message": "use if( queryOperator.hasUdf()) to remove redundant judgments", "committedDate": "2020-12-23T08:33:46Z", "type": "commit"}, {"oid": "6e4f1e8ea90f2c23b7fd9c717f29912994d8018a", "url": "https://github.com/apache/iotdb/commit/6e4f1e8ea90f2c23b7fd9c717f29912994d8018a", "message": "refactor UDFContext", "committedDate": "2020-12-23T09:04:53Z", "type": "commit"}, {"oid": "72be6400cf2bc93c7477ae5b44084ddaafc4f0e5", "url": "https://github.com/apache/iotdb/commit/72be6400cf2bc93c7477ae5b44084ddaafc4f0e5", "message": "add javadoc for UDFPlan", "committedDate": "2020-12-23T09:13:32Z", "type": "commit"}, {"oid": "d6dcc8901a1b44f41690c68179e841989cb6553a", "url": "https://github.com/apache/iotdb/commit/d6dcc8901a1b44f41690c68179e841989cb6553a", "message": "add javadoc for UDFClassLoader", "committedDate": "2020-12-23T09:28:28Z", "type": "commit"}, {"oid": "6d6c58a7d3722a98a768d910a96d8b6af2e120fc", "url": "https://github.com/apache/iotdb/commit/6d6c58a7d3722a98a768d910a96d8b6af2e120fc", "message": "fix", "committedDate": "2020-12-23T12:21:38Z", "type": "commit"}, {"oid": "456e3c0ae4b77a6e606939e5359e761ae5d24b9e", "url": "https://github.com/apache/iotdb/commit/456e3c0ae4b77a6e606939e5359e761ae5d24b9e", "message": "fix tests. throw exception when registering a udf with a built-in function name", "committedDate": "2020-12-23T13:22:30Z", "type": "commit"}, {"oid": "47ea39fe4ca19a27feed668ce7910867e6c2466c", "url": "https://github.com/apache/iotdb/commit/47ea39fe4ca19a27feed668ce7910867e6c2466c", "message": "fix tests", "committedDate": "2020-12-23T13:34:29Z", "type": "commit"}, {"oid": "50524bc9fccf35cacc4801d8325a254ddec2c268", "url": "https://github.com/apache/iotdb/commit/50524bc9fccf35cacc4801d8325a254ddec2c268", "message": "fix tests", "committedDate": "2020-12-23T15:40:07Z", "type": "commit"}, {"oid": "5482428bcf4b3ebe7b8fb08489784d055cce7a5b", "url": "https://github.com/apache/iotdb/commit/5482428bcf4b3ebe7b8fb08489784d055cce7a5b", "message": "remove unneccessary dependency from module udf-example", "committedDate": "2020-12-23T17:07:37Z", "type": "commit"}, {"oid": "e51d9f8f1a173e578867e8d10c5c3089b6542b6b", "url": "https://github.com/apache/iotdb/commit/e51d9f8f1a173e578867e8d10c5c3089b6542b6b", "message": "add index check in RowWindowImpl#getRow", "committedDate": "2020-12-23T17:54:53Z", "type": "commit"}, {"oid": "e9a02a143fa555a0901036ac64b7a604833b6166", "url": "https://github.com/apache/iotdb/commit/e9a02a143fa555a0901036ac64b7a604833b6166", "message": "better exception message in UDTFExecutor", "committedDate": "2020-12-23T18:05:44Z", "type": "commit"}, {"oid": "b87567571a598476f201d482dfab37ee550a0731", "url": "https://github.com/apache/iotdb/commit/b87567571a598476f201d482dfab37ee550a0731", "message": "refactor: ulog recovery", "committedDate": "2020-12-23T18:57:10Z", "type": "commit"}, {"oid": "54408446483bb945d4364b9843a57f681f36682b", "url": "https://github.com/apache/iotdb/commit/54408446483bb945d4364b9843a57f681f36682b", "message": "remove unneccessary dependencies", "committedDate": "2020-12-24T05:49:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA1OTg5OQ==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r539059899", "bodyText": "What if I input a string like \"12dfuckay\", it's an illegal input, i think you should throw an execption.", "author": "JackieTien97", "createdAt": "2020-12-09T07:09:25Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/constant/DatetimeUtils.java", "diffHunk": "@@ -477,6 +477,46 @@ public static long convertDatetimeStrToLong(String str, ZoneOffset offset, int d\n     return getInstantWithPrecision(str, timestampPrecision);\n   }\n \n+  /**\n+   * convert duration string to time value.\n+   *\n+   * @param duration represent duration string like: 12d8m9ns, 1y1mo, etc.\n+   * @return time in milliseconds, microseconds, or nanoseconds depending on the profile\n+   */\n+  public static long convertDurationStrToLong(String duration) {\n+    String timestampPrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();\n+    return convertDurationStrToLong(duration, timestampPrecision);\n+  }\n+\n+  /**\n+   * convert duration string to time value.\n+   *\n+   * @param duration represent duration string like: 12d8m9ns, 1y1mo, etc.\n+   * @return time in milliseconds, microseconds, or nanoseconds depending on the profile\n+   */\n+  public static long convertDurationStrToLong(String duration, String timestampPrecision) {\n+    long total = 0;\n+    long temp = 0;\n+    for (int i = 0; i < duration.length(); i++) {\n+      char ch = duration.charAt(i);\n+      if (Character.isDigit(ch)) {\n+        temp *= 10;\n+        temp += (ch - '0');\n+      } else {\n+        String unit = duration.charAt(i) + \"\";\n+        // This is to identify units with two letters.\n+        if (i + 1 < duration.length() && !Character.isDigit(duration.charAt(i + 1))) {\n+          i++;\n+          unit += duration.charAt(i);\n+        }", "originalCommit": "b1f6ec0f1937089aa8435a733087282d79a2a97a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA2MDQ0Mg==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r539060442", "bodyText": "It's better to add the number instead of changing the previous ones.", "author": "JackieTien97", "createdAt": "2020-12-09T07:10:40Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/constant/SQLConstant.java", "diffHunk": "@@ -155,8 +155,12 @@ private SQLConstant() {\n   public static final int TOK_CREATE_SCHEMA_SNAPSHOT = 89;\n   public static final int TOK_TRACING = 91;\n \n-  public static final int TOK_COUNT_DEVICES = 92;\n-  public static final int TOK_COUNT_STORAGE_GROUP = 93;\n+  public static final int TOK_FUNCTION_CREATE = 92;\n+  public static final int TOK_FUNCTION_DROP = 93;\n+  public static final int TOK_SHOW_FUNCTIONS = 94;\n+\n+  public static final int TOK_COUNT_DEVICES = 95;\n+  public static final int TOK_COUNT_STORAGE_GROUP = 96;", "originalCommit": "b1f6ec0f1937089aa8435a733087282d79a2a97a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA5NzYwNA==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r539097604", "bodyText": "The function in this interface is same as DirectNonAlignDataSet, shall we combine them to one?", "author": "JackieTien97", "createdAt": "2020-12-09T08:18:55Z", "path": "server/src/main/java/org/apache/iotdb/db/query/dataset/DirectAlignByTimeDataSet.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.iotdb.db.query.dataset;\r\n+\r\n+import java.io.IOException;\r\n+import org.apache.iotdb.db.exception.query.QueryProcessException;\r\n+import org.apache.iotdb.db.tools.watermark.WatermarkEncoder;\r\n+import org.apache.iotdb.service.rpc.thrift.TSQueryDataSet;\r\n+\r\n+public interface DirectAlignByTimeDataSet {\r\n+\r\n+  int FLAG = 0x01;\r\n+\r\n+  TSQueryDataSet fillBuffer(int fetchSize, WatermarkEncoder encoder)\r", "originalCommit": "b1f6ec0f1937089aa8435a733087282d79a2a97a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "204e5b037601de9432139e52ba0d5e88b3b5ccc3", "url": "https://github.com/apache/iotdb/commit/204e5b037601de9432139e52ba0d5e88b3b5ccc3", "message": "add the implementation of UDFParameters", "committedDate": "2020-07-20T17:49:15Z", "type": "commit"}, {"oid": "a1bcc309479f37fe99bfcc51eec265f37682c157", "url": "https://github.com/apache/iotdb/commit/a1bcc309479f37fe99bfcc51eec265f37682c157", "message": "add configuration classes for UDF", "committedDate": "2020-07-23T14:30:45Z", "type": "commit"}, {"oid": "0e428f3c5487f4ea7df0291346700de2941d8aae", "url": "https://github.com/apache/iotdb/commit/0e428f3c5487f4ea7df0291346700de2941d8aae", "message": "add udf query data iterator interfaces", "committedDate": "2020-07-26T12:03:48Z", "type": "commit"}, {"oid": "a513785b11e47c5db2bbb6e024e4ef020f1a6e46", "url": "https://github.com/apache/iotdb/commit/a513785b11e47c5db2bbb6e024e4ef020f1a6e46", "message": "core data structures for udf", "committedDate": "2020-08-12T14:19:37Z", "type": "commit"}, {"oid": "5b99b437efbb0b1e1f20cfd65a28c6e47a175a04", "url": "https://github.com/apache/iotdb/commit/5b99b437efbb0b1e1f20cfd65a28c6e47a175a04", "message": "support reset() in udf data iterators", "committedDate": "2020-08-13T12:00:54Z", "type": "commit"}, {"oid": "ce7eb3f3da3747063edfbaca4aeedfd04478c20c", "url": "https://github.com/apache/iotdb/commit/ce7eb3f3da3747063edfbaca4aeedfd04478c20c", "message": "refactor TemporaryQueryDataFileManager", "committedDate": "2020-08-14T14:12:46Z", "type": "commit"}, {"oid": "08792fb7705caa5ac6afdb7a51a4d9d750b05c37", "url": "https://github.com/apache/iotdb/commit/08792fb7705caa5ac6afdb7a51a4d9d750b05c37", "message": "UDF registration service", "committedDate": "2020-08-16T15:21:30Z", "type": "commit"}, {"oid": "17ede53248abed0a8461199dbcbcacb7b6642f74", "url": "https://github.com/apache/iotdb/commit/17ede53248abed0a8461199dbcbcacb7b6642f74", "message": "a better implementation of TemporaryQueryDataFileManager", "committedDate": "2020-08-16T15:23:30Z", "type": "commit"}, {"oid": "511a2465a1da9f19dab1c0bb0c53982cb15bd9cd", "url": "https://github.com/apache/iotdb/commit/511a2465a1da9f19dab1c0bb0c53982cb15bd9cd", "message": "refactor: rename some packages and some classes", "committedDate": "2020-08-16T15:42:48Z", "type": "commit"}, {"oid": "43f261e982774fd78e6928862e25677c50ba0aaf", "url": "https://github.com/apache/iotdb/commit/43f261e982774fd78e6928862e25677c50ba0aaf", "message": "fix 'throw' in SerializableList", "committedDate": "2020-08-16T15:44:57Z", "type": "commit"}, {"oid": "74d2e07f62f6d10995e58dde0b24efb153031a47", "url": "https://github.com/apache/iotdb/commit/74d2e07f62f6d10995e58dde0b24efb153031a47", "message": "add api DataPointCollector", "committedDate": "2020-08-17T11:34:23Z", "type": "commit"}, {"oid": "252af6aead12dcbb31358d78ae37257aa3ca987e", "url": "https://github.com/apache/iotdb/commit/252af6aead12dcbb31358d78ae37257aa3ca987e", "message": "modify the antlr file (support UDF)", "committedDate": "2020-08-17T13:51:58Z", "type": "commit"}, {"oid": "4187e4abb0f2798d45c99a53747fa427795f4a29", "url": "https://github.com/apache/iotdb/commit/4187e4abb0f2798d45c99a53747fa427795f4a29", "message": "refactor UDFRegistrationService using UDFInstanceHolder", "committedDate": "2020-08-18T03:01:04Z", "type": "commit"}, {"oid": "f9b2d8fc5bd9fdf137ff0bf70ebad873838ab7a2", "url": "https://github.com/apache/iotdb/commit/f9b2d8fc5bd9fdf137ff0bf70ebad873838ab7a2", "message": "UDF programming API", "committedDate": "2020-08-18T11:45:47Z", "type": "commit"}, {"oid": "ea958df841518a436d67e7434ac6c588428630b9", "url": "https://github.com/apache/iotdb/commit/ea958df841518a436d67e7434ac6c588428630b9", "message": "update udf api defination and refactor api package", "committedDate": "2020-08-19T03:11:46Z", "type": "commit"}, {"oid": "41c6ca2eac663abcc752dcc15aa5af4550b8a997", "url": "https://github.com/apache/iotdb/commit/41c6ca2eac663abcc752dcc15aa5af4550b8a997", "message": "UDF logical plan & physical plan", "committedDate": "2020-08-27T08:52:34Z", "type": "commit"}, {"oid": "949af99d2eb73a1801b59be82b763d78668fb2f4", "url": "https://github.com/apache/iotdb/commit/949af99d2eb73a1801b59be82b763d78668fb2f4", "message": "UDTF query executor", "committedDate": "2020-08-27T12:59:53Z", "type": "commit"}, {"oid": "6a3bd039a5daee5e963bcbf8e0a0c8b9f938adb7", "url": "https://github.com/apache/iotdb/commit/6a3bd039a5daee5e963bcbf8e0a0c8b9f938adb7", "message": "new UDTFConfigurations class structure", "committedDate": "2020-08-28T13:40:43Z", "type": "commit"}, {"oid": "6e3019e5ad13dca1ee6dbe140fae23000b3f120d", "url": "https://github.com/apache/iotdb/commit/6e3019e5ad13dca1ee6dbe140fae23000b3f120d", "message": "UDTFNonAlignDataSet & UDTFAlignByTimeDataSet implementation", "committedDate": "2020-09-03T16:28:26Z", "type": "commit"}, {"oid": "693d70a7f2679a43c1e80d3517e3f9d9d5ada27d", "url": "https://github.com/apache/iotdb/commit/693d70a7f2679a43c1e80d3517e3f9d9d5ada27d", "message": "close and delete temp files when UDF queries end", "committedDate": "2020-09-03T17:46:11Z", "type": "commit"}, {"oid": "408198294b041d770ebedc638eae0b4c25720892", "url": "https://github.com/apache/iotdb/commit/408198294b041d770ebedc638eae0b4c25720892", "message": "provide Iterator type conversion methods in class UDTF", "committedDate": "2020-09-03T18:02:31Z", "type": "commit"}, {"oid": "3a3b95b076b68a376161cb6c6dba7bf168840013", "url": "https://github.com/apache/iotdb/commit/3a3b95b076b68a376161cb6c6dba7bf168840013", "message": "bug fix: isUdfQuery()", "committedDate": "2020-09-04T02:45:53Z", "type": "commit"}, {"oid": "c7c9dcbbcd8e65016121dc388a07ed67b3dcfa39", "url": "https://github.com/apache/iotdb/commit/c7c9dcbbcd8e65016121dc388a07ed67b3dcfa39", "message": "add UDTF/UDAF types in AuthorityChecker", "committedDate": "2020-09-04T03:00:02Z", "type": "commit"}, {"oid": "19c67cf7d1547eaee71e906efce979bfa3e73009", "url": "https://github.com/apache/iotdb/commit/19c67cf7d1547eaee71e906efce979bfa3e73009", "message": "generate UDTF column headers in getQueryColumnHeaders", "committedDate": "2020-09-04T03:02:41Z", "type": "commit"}, {"oid": "8706cea6a9fc6190ad66e1c56d89479ffa7764f2", "url": "https://github.com/apache/iotdb/commit/8706cea6a9fc6190ad66e1c56d89479ffa7764f2", "message": "add create / drop function plan", "committedDate": "2020-09-04T12:18:59Z", "type": "commit"}, {"oid": "61cda88890ea06a5b4374bcbf879608815cac540", "url": "https://github.com/apache/iotdb/commit/61cda88890ea06a5b4374bcbf879608815cac540", "message": "support \"show functions\"", "committedDate": "2020-09-06T16:44:36Z", "type": "commit"}, {"oid": "fe5574e912bd7a77799519c8995c8c5d1b9fe6ef", "url": "https://github.com/apache/iotdb/commit/fe5574e912bd7a77799519c8995c8c5d1b9fe6ef", "message": "invoke finalizeUDF in releaseQueryResource", "committedDate": "2020-09-07T07:54:43Z", "type": "commit"}, {"oid": "91597db5c0ae1f102675a79a5adf8354f7aa7e66", "url": "https://github.com/apache/iotdb/commit/91597db5c0ae1f102675a79a5adf8354f7aa7e66", "message": "invoke finalizeUDF in releaseQueryResource", "committedDate": "2020-09-07T09:17:05Z", "type": "commit"}, {"oid": "0a878d28af7e0f27215b1d414daec1a3850ff000", "url": "https://github.com/apache/iotdb/commit/0a878d28af7e0f27215b1d414daec1a3850ff000", "message": "add tests for SerializableTVList and fix serialize() / deserilize() issues.", "committedDate": "2020-09-07T14:15:25Z", "type": "commit"}, {"oid": "0d057009e09036c97cc68ce001b59af1018f3d6e", "url": "https://github.com/apache/iotdb/commit/0d057009e09036c97cc68ce001b59af1018f3d6e", "message": "add tests for ElasticSerializableTVList: testPut / testOrderedAccessByIndex / testOrderedAccessByDataPointIterator", "committedDate": "2020-09-08T02:12:08Z", "type": "commit"}, {"oid": "22d331f6e708af058e416d3e81b2ff208d8520f4", "url": "https://github.com/apache/iotdb/commit/22d331f6e708af058e416d3e81b2ff208d8520f4", "message": "add apache rats for test classes", "committedDate": "2020-09-08T02:15:42Z", "type": "commit"}, {"oid": "0fc3c54802acd9df5c3f6d8281b978c1838e4bed", "url": "https://github.com/apache/iotdb/commit/0fc3c54802acd9df5c3f6d8281b978c1838e4bed", "message": "add testOrderedAccessBySizeLimitedDataPointBatchIterator", "committedDate": "2020-09-08T08:23:49Z", "type": "commit"}, {"oid": "c89d1830b93582016a194385828faaa5ab4a62ed", "url": "https://github.com/apache/iotdb/commit/c89d1830b93582016a194385828faaa5ab4a62ed", "message": "add testOrderedAccessByTimeWindowDataPointBatchIterator", "committedDate": "2020-09-08T09:14:29Z", "type": "commit"}, {"oid": "aa6c0c92629dee8df8215949b91ac4d6836fcc1a", "url": "https://github.com/apache/iotdb/commit/aa6c0c92629dee8df8215949b91ac4d6836fcc1a", "message": "fix bugs in getTimeWindowBatchIterator(). add tests for batch iterators & reset()", "committedDate": "2020-09-08T18:27:41Z", "type": "commit"}, {"oid": "c1b528fe372597c5796bb881500af591588d822b", "url": "https://github.com/apache/iotdb/commit/c1b528fe372597c5796bb881500af591588d822b", "message": "add tests for SerializableRowRecordList. fix a bug in SerializableRowRecordList::readFields.", "committedDate": "2020-09-09T01:42:33Z", "type": "commit"}, {"oid": "3d45196a566a3958b9a2d6e7aaced90c5e536b63", "url": "https://github.com/apache/iotdb/commit/3d45196a566a3958b9a2d6e7aaced90c5e536b63", "message": "add test for ElasticSerializableTVList. fix bugs in ElasticSerializableTVList::getTimeWindowBatchIterator. rename some methods in ElasticSerializableTVList.", "committedDate": "2020-09-09T06:58:13Z", "type": "commit"}, {"oid": "ecc054a26b22bcbd32b3c2b58d6b130dc2aedcf1", "url": "https://github.com/apache/iotdb/commit/ecc054a26b22bcbd32b3c2b58d6b130dc2aedcf1", "message": "add tests for CreateFunctionPlan & UDTFPlan. fix bugs in the generation of UDTFPlan. provide more useful methods in UDFParameters.", "committedDate": "2020-09-09T13:21:44Z", "type": "commit"}, {"oid": "cac63e4f7b9175ab15a3f2e4c1700b8d00fbca1d", "url": "https://github.com/apache/iotdb/commit/cac63e4f7b9175ab15a3f2e4c1700b8d00fbca1d", "message": "add several tests for DropFunctionPlan", "committedDate": "2020-09-09T13:34:21Z", "type": "commit"}, {"oid": "43ac3c57537b7ea9e7490f864d164af74a64670e", "url": "https://github.com/apache/iotdb/commit/43ac3c57537b7ea9e7490f864d164af74a64670e", "message": "add tests for UDTFAlignByTimeDataSet. fix bugs when generating row records for UDTFAlignByTimeDataSet.", "committedDate": "2020-09-10T01:57:53Z", "type": "commit"}, {"oid": "88e2cfa7eafa796a40226a1c3de9a74c20dd1ff3", "url": "https://github.com/apache/iotdb/commit/88e2cfa7eafa796a40226a1c3de9a74c20dd1ff3", "message": "add tests for UDTFAlignByTimeDataSet. (without value filter)", "committedDate": "2020-09-10T02:41:11Z", "type": "commit"}, {"oid": "15827ff90df3fb682ede83df20f90e7f5fba736d", "url": "https://github.com/apache/iotdb/commit/15827ff90df3fb682ede83df20f90e7f5fba736d", "message": "add tests for UDTFAlignByTimeDataSet. (with value filter)", "committedDate": "2020-09-10T08:01:33Z", "type": "commit"}, {"oid": "8617aa8d3b0ceb6173990af70117b4bf0a3faed4", "url": "https://github.com/apache/iotdb/commit/8617aa8d3b0ceb6173990af70117b4bf0a3faed4", "message": "fix bugs in PhysicalPlanTest / UDTFAlignByTimeDataSetTest / UDFRegistrationService. fix the pipeline.", "committedDate": "2020-09-11T03:02:33Z", "type": "commit"}, {"oid": "6d004d4a0a9d9d57e2b1ac9f904a856d3e123270", "url": "https://github.com/apache/iotdb/commit/6d004d4a0a9d9d57e2b1ac9f904a856d3e123270", "message": "add tests for UDTFAlignByTimeDataSet", "committedDate": "2020-09-11T09:10:53Z", "type": "commit"}, {"oid": "1c1cce6dc47491d58015c8230d09019e52c27977", "url": "https://github.com/apache/iotdb/commit/1c1cce6dc47491d58015c8230d09019e52c27977", "message": "modify tests for UDF physical plan", "committedDate": "2020-09-11T11:13:32Z", "type": "commit"}, {"oid": "c37df1b6305c8a33794d8eab079838a802e54780", "url": "https://github.com/apache/iotdb/commit/c37df1b6305c8a33794d8eab079838a802e54780", "message": "add ITs for UDF management. fix a bug in \"show functions\" process.", "committedDate": "2020-09-11T12:17:50Z", "type": "commit"}, {"oid": "f9851e273e3e0eb4d20efd03ba2d8d394d68d34a", "url": "https://github.com/apache/iotdb/commit/f9851e273e3e0eb4d20efd03ba2d8d394d68d34a", "message": "add ITs for UDF management.", "committedDate": "2020-09-11T12:55:57Z", "type": "commit"}, {"oid": "1ae21b70a24b7b0a526a4d0208d0c47ed10adb82", "url": "https://github.com/apache/iotdb/commit/1ae21b70a24b7b0a526a4d0208d0c47ed10adb82", "message": "add integration tests for UDTF query module. fix a bug which may cause UDF column output data in a wrong type. remove useless fields in UDTFPlan.", "committedDate": "2020-09-12T19:09:07Z", "type": "commit"}, {"oid": "d70148838932e97cf1f0c9b30b97a2b4326d57b2", "url": "https://github.com/apache/iotdb/commit/d70148838932e97cf1f0c9b30b97a2b4326d57b2", "message": "fix a bug that may cause errors in cartesian product calculations. add tests.", "committedDate": "2020-09-13T09:14:59Z", "type": "commit"}, {"oid": "2b9e3f03fb63cc04fcb741705f08eb22710fd163", "url": "https://github.com/apache/iotdb/commit/2b9e3f03fb63cc04fcb741705f08eb22710fd163", "message": "fix the code style in UDTFExecutor", "committedDate": "2020-09-13T09:28:16Z", "type": "commit"}, {"oid": "21e3c1f77deb8c6d7f02e4fc4dd0c14d7269e21d", "url": "https://github.com/apache/iotdb/commit/21e3c1f77deb8c6d7f02e4fc4dd0c14d7269e21d", "message": "add IoTDBUDTFNonAlignQueryIT", "committedDate": "2020-09-13T17:20:38Z", "type": "commit"}, {"oid": "76eb4af88b90ac13b7fcd471e8ce30b0db293ede", "url": "https://github.com/apache/iotdb/commit/76eb4af88b90ac13b7fcd471e8ce30b0db293ede", "message": "fix typos", "committedDate": "2020-09-14T17:46:08Z", "type": "commit"}, {"oid": "816691dfccdb725492c167eb339c9e3cf897276b", "url": "https://github.com/apache/iotdb/commit/816691dfccdb725492c167eb339c9e3cf897276b", "message": "refactor: rename api", "committedDate": "2020-09-15T04:14:24Z", "type": "commit"}, {"oid": "1209b98669418d893fb59b664a079fab7a3d4bc8", "url": "https://github.com/apache/iotdb/commit/1209b98669418d893fb59b664a079fab7a3d4bc8", "message": "parallelize the execution of transform() in UDFs", "committedDate": "2020-09-15T12:42:08Z", "type": "commit"}, {"oid": "cd54cb72d6edc86419dff3d9170d6996a5fc43f4", "url": "https://github.com/apache/iotdb/commit/cd54cb72d6edc86419dff3d9170d6996a5fc43f4", "message": "parallelize the execution of fillBuffer in UDTFNonAlignDataSet", "committedDate": "2020-09-15T13:39:00Z", "type": "commit"}, {"oid": "2e694e3c77d9bd081023b8a6ec7c3e10bdcb2e48", "url": "https://github.com/apache/iotdb/commit/2e694e3c77d9bd081023b8a6ec7c3e10bdcb2e48", "message": "fix bugs: select udf with slimit/limit. add ITs.", "committedDate": "2020-09-15T17:12:59Z", "type": "commit"}, {"oid": "a87751a67c500ee83da4cd1959e5ea00dccce9cc", "url": "https://github.com/apache/iotdb/commit/a87751a67c500ee83da4cd1959e5ea00dccce9cc", "message": "new user api", "committedDate": "2020-09-16T14:42:30Z", "type": "commit"}, {"oid": "c94cf135f0d8e7a579387987f093d4cd06546137", "url": "https://github.com/apache/iotdb/commit/c94cf135f0d8e7a579387987f093d4cd06546137", "message": "refactor udf package", "committedDate": "2020-09-22T10:09:57Z", "type": "commit"}, {"oid": "b82fab55a1abe9e337f768e3a7db8dff5101247e", "url": "https://github.com/apache/iotdb/commit/b82fab55a1abe9e337f768e3a7db8dff5101247e", "message": "make QueryDataSet#nextWithoutConstraint and QueryDataSet#hasNextWithoutConstraint public", "committedDate": "2020-09-22T10:17:14Z", "type": "commit"}, {"oid": "6ef6a8c3134c541c85c94b91b273704c81149de2", "url": "https://github.com/apache/iotdb/commit/6ef6a8c3134c541c85c94b91b273704c81149de2", "message": "remove old UDTFNonAlignDataSet & UDTFAlignByTimeDataSet", "committedDate": "2020-09-22T10:18:48Z", "type": "commit"}, {"oid": "5ba28d1ccc462082ffbd7d1cb37cc244fa4ca6ed", "url": "https://github.com/apache/iotdb/commit/5ba28d1ccc462082ffbd7d1cb37cc244fa4ca6ed", "message": "remove layer point reader in udf package", "committedDate": "2020-09-22T10:30:01Z", "type": "commit"}, {"oid": "37e82bbcc164678b9386f1e1fbfd255a3862fa6f", "url": "https://github.com/apache/iotdb/commit/37e82bbcc164678b9386f1e1fbfd255a3862fa6f", "message": "make QueryDataSet#nextWithoutConstraint and QueryDataSet#hasNextWithoutConstraint public", "committedDate": "2020-09-22T10:30:51Z", "type": "commit"}, {"oid": "74188c47d106f701384123cfda256bf4ead72704", "url": "https://github.com/apache/iotdb/commit/74188c47d106f701384123cfda256bf4ead72704", "message": "new UDTFPlan & UDTFDataSet", "committedDate": "2020-09-23T03:45:38Z", "type": "commit"}, {"oid": "14cdafcc9173aafc5bec3ca007f96b3cebebc59c", "url": "https://github.com/apache/iotdb/commit/14cdafcc9173aafc5bec3ca007f96b3cebebc59c", "message": "a completely new strategy for executing UDFs: push-down strategy", "committedDate": "2020-09-23T17:21:56Z", "type": "commit"}, {"oid": "09a489e19030c7e3d7fdcc86af50ccc3308e3725", "url": "https://github.com/apache/iotdb/commit/09a489e19030c7e3d7fdcc86af50ccc3308e3725", "message": "a better udf api design", "committedDate": "2020-09-24T01:46:32Z", "type": "commit"}, {"oid": "aafc56566a791dcd0c82ee175afd37666fbca746", "url": "https://github.com/apache/iotdb/commit/aafc56566a791dcd0c82ee175afd37666fbca746", "message": "update input layer RowRecordList's eviction upper bound in UDTF dataset", "committedDate": "2020-09-24T02:11:48Z", "type": "commit"}, {"oid": "cc6a81bb8c41703d27a30990986fbbdc1bc9952c", "url": "https://github.com/apache/iotdb/commit/cc6a81bb8c41703d27a30990986fbbdc1bc9952c", "message": "a better design for SlidingTimeWindowAccessStrategy", "committedDate": "2020-09-24T05:33:33Z", "type": "commit"}, {"oid": "25eed4df06400a95e781cbebee994701c6a24bab", "url": "https://github.com/apache/iotdb/commit/25eed4df06400a95e781cbebee994701c6a24bab", "message": "fix tests", "committedDate": "2020-09-24T06:48:25Z", "type": "commit"}, {"oid": "ce37c0f46cdef85a523ffb3c267298def6741953", "url": "https://github.com/apache/iotdb/commit/ce37c0f46cdef85a523ffb3c267298def6741953", "message": "fix tests", "committedDate": "2020-09-24T07:38:23Z", "type": "commit"}, {"oid": "01db13d87c47ce9c108673ae2a6bad50d2b45b2c", "url": "https://github.com/apache/iotdb/commit/01db13d87c47ce9c108673ae2a6bad50d2b45b2c", "message": "fix: rowOffset reinitialization in UDTFNonAlignDataSet", "committedDate": "2020-09-24T11:33:46Z", "type": "commit"}, {"oid": "768cf66539c86b0c73c3f1ef15a53f2e8dee7e26", "url": "https://github.com/apache/iotdb/commit/768cf66539c86b0c73c3f1ef15a53f2e8dee7e26", "message": "add a new udf example for IT. add a new constructor in SlidingTimeWindowAccessStrategy.", "committedDate": "2020-09-24T11:39:13Z", "type": "commit"}, {"oid": "593f30b3972b0b721ee736939da79edc53f6212e", "url": "https://github.com/apache/iotdb/commit/593f30b3972b0b721ee736939da79edc53f6212e", "message": "optimize RowWindowImpl/RowIteratorImpl", "committedDate": "2020-09-25T05:38:48Z", "type": "commit"}, {"oid": "ea9548094035a80f5425675e13ad3ba7bac0df53", "url": "https://github.com/apache/iotdb/commit/ea9548094035a80f5425675e13ad3ba7bac0df53", "message": "fix: RowIteratorImpl. add tests.", "committedDate": "2020-09-25T07:42:49Z", "type": "commit"}, {"oid": "bdadf51a422a94543c48cf08936a7a963b7fa212", "url": "https://github.com/apache/iotdb/commit/bdadf51a422a94543c48cf08936a7a963b7fa212", "message": "make SerializableList more abstract", "committedDate": "2020-09-26T08:45:53Z", "type": "commit"}, {"oid": "29ea2862e3e8e9e0ab7b88c2312c95bce8c56c4b", "url": "https://github.com/apache/iotdb/commit/29ea2862e3e8e9e0ab7b88c2312c95bce8c56c4b", "message": "new memory control strategy for udf queries", "committedDate": "2020-09-28T12:15:28Z", "type": "commit"}, {"oid": "9c8991dd6ac41f485b5a3ce2c573e2e5ff93f57f", "url": "https://github.com/apache/iotdb/commit/9c8991dd6ac41f485b5a3ce2c573e2e5ff93f57f", "message": "new ElasticSerializableRowRecordList memory control strategy for udf queries", "committedDate": "2020-09-29T02:00:19Z", "type": "commit"}, {"oid": "f7bad0915d17ab56686ef8cd2cc7ce27c4d5ab1b", "url": "https://github.com/apache/iotdb/commit/f7bad0915d17ab56686ef8cd2cc7ce27c4d5ab1b", "message": "fix: SerializableTVList memory control strategy for long-running", "committedDate": "2020-10-03T06:21:12Z", "type": "commit"}, {"oid": "64e5945acd9d7c3062d3f029debce34687e8aa32", "url": "https://github.com/apache/iotdb/commit/64e5945acd9d7c3062d3f029debce34687e8aa32", "message": "remove unnecessary synchronized in SerializableList", "committedDate": "2020-10-03T08:20:30Z", "type": "commit"}, {"oid": "9ea72b96bdde135b8e97f6bbe929456dfde2f89e", "url": "https://github.com/apache/iotdb/commit/9ea72b96bdde135b8e97f6bbe929456dfde2f89e", "message": "improve code style", "committedDate": "2020-10-04T13:52:40Z", "type": "commit"}, {"oid": "5be9ac9a30944853c39552c381013ce8d7c84f6c", "url": "https://github.com/apache/iotdb/commit/5be9ac9a30944853c39552c381013ce8d7c84f6c", "message": "add @Override for cacheValue in RawQueryPointTransformer", "committedDate": "2020-10-04T13:56:58Z", "type": "commit"}, {"oid": "138a33a8c90a2ee26fe78a1637917dab8a3d22d4", "url": "https://github.com/apache/iotdb/commit/138a33a8c90a2ee26fe78a1637917dab8a3d22d4", "message": "fix udf sliding time windowing. add tests for udf sliding time windowing.", "committedDate": "2020-10-04T17:18:04Z", "type": "commit"}, {"oid": "5637130d68667495d66611543423547637201664", "url": "https://github.com/apache/iotdb/commit/5637130d68667495d66611543423547637201664", "message": "udf query memory control strategy", "committedDate": "2020-10-13T11:46:56Z", "type": "commit"}, {"oid": "71c69c0398f11c85dd0d591be74928332379353e", "url": "https://github.com/apache/iotdb/commit/71c69c0398f11c85dd0d591be74928332379353e", "message": "add Javadoc for package org.apache.iotdb.db.query.udf.api.access", "committedDate": "2020-10-13T13:56:44Z", "type": "commit"}, {"oid": "2733395824f059cafffb07515b5a044a8ada115e", "url": "https://github.com/apache/iotdb/commit/2733395824f059cafffb07515b5a044a8ada115e", "message": "add Javadoc for udf package: collector & strategy", "committedDate": "2020-10-14T08:04:58Z", "type": "commit"}, {"oid": "191f623865a7ea8e69137ba69ccd2c2968ef0a78", "url": "https://github.com/apache/iotdb/commit/191f623865a7ea8e69137ba69ccd2c2968ef0a78", "message": "add Javadoc for udf package: config & parameter", "committedDate": "2020-10-14T09:15:55Z", "type": "commit"}, {"oid": "e26deab9fbfd5f1d5b590309b617509282f97a16", "url": "https://github.com/apache/iotdb/commit/e26deab9fbfd5f1d5b590309b617509282f97a16", "message": "add Javadoc for class UDF and class UDTF", "committedDate": "2020-10-15T09:05:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg5MDM1Ng==", "url": "https://github.com/apache/iotdb/pull/1828#discussion_r509890356", "bodyText": "I recommend to make UDFRegistrationException extend StorageEngineException. In this way, we don't need to change that many files.", "author": "samperson1997", "createdAt": "2020-10-22T05:35:05Z", "path": "server/src/main/java/org/apache/iotdb/db/exception/UDFRegistrationException.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+\r\n+package org.apache.iotdb.db.exception;\r\n+\r\n+import org.apache.iotdb.rpc.TSStatusCode;\r\n+\r\n+public class UDFRegistrationException extends IoTDBException {\r", "originalCommit": "e26deab9fbfd5f1d5b590309b617509282f97a16", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cd253dc1f36f041dd12189a521a7f969299e975f", "url": "https://github.com/apache/iotdb/commit/cd253dc1f36f041dd12189a521a7f969299e975f", "message": "make UDFRegistrationException inherited from StorageEngineException", "committedDate": "2020-10-26T06:44:04Z", "type": "commit"}, {"oid": "a72c989a38d7796f37d2064736bd1ad7b6eab85d", "url": "https://github.com/apache/iotdb/commit/a72c989a38d7796f37d2064736bd1ad7b6eab85d", "message": "fix conflicts", "committedDate": "2020-10-27T14:56:36Z", "type": "commit"}, {"oid": "72dfc05d25cbc3b0248d1ec663b00ad47e9b32e7", "url": "https://github.com/apache/iotdb/commit/72dfc05d25cbc3b0248d1ec663b00ad47e9b32e7", "message": "fix conflicts", "committedDate": "2020-10-30T08:19:56Z", "type": "commit"}, {"oid": "9a014c90911d4edbcdb7427adc18e0a441236817", "url": "https://github.com/apache/iotdb/commit/9a014c90911d4edbcdb7427adc18e0a441236817", "message": "fix conflicts", "committedDate": "2020-10-30T11:23:59Z", "type": "commit"}, {"oid": "db8759f9d665586ef06ae72e3233a6e48a4ee8cb", "url": "https://github.com/apache/iotdb/commit/db8759f9d665586ef06ae72e3233a6e48a4ee8cb", "message": "temp", "committedDate": "2020-11-05T01:35:13Z", "type": "commit"}, {"oid": "b56fb480ad0e268c869539e33c84703e0c04a452", "url": "https://github.com/apache/iotdb/commit/b56fb480ad0e268c869539e33c84703e0c04a452", "message": "fix issues reported by the sonar cloud", "committedDate": "2020-11-13T02:31:43Z", "type": "commit"}, {"oid": "976cdff1811a49cdcd8923d27cd8e159f834143e", "url": "https://github.com/apache/iotdb/commit/976cdff1811a49cdcd8923d27cd8e159f834143e", "message": "remove \"temporary\" field from \"show functions\" data set", "committedDate": "2020-11-13T03:09:52Z", "type": "commit"}, {"oid": "766b5ecdcae629c28c09a5e0b2aa30e401868db0", "url": "https://github.com/apache/iotdb/commit/766b5ecdcae629c28c09a5e0b2aa30e401868db0", "message": "add testUserDefinedBuiltInHybridAggregationQuery", "committedDate": "2020-11-13T04:20:26Z", "type": "commit"}, {"oid": "4a7d48960055ddc41f0d84e8c4659b893f203e39", "url": "https://github.com/apache/iotdb/commit/4a7d48960055ddc41f0d84e8c4659b893f203e39", "message": "add hybrid query tests for UDF", "committedDate": "2020-11-13T08:56:54Z", "type": "commit"}, {"oid": "b7e064cab56d220fbf703b39c4fdada38cb5c3ae", "url": "https://github.com/apache/iotdb/commit/b7e064cab56d220fbf703b39c4fdada38cb5c3ae", "message": "change the strategy for naming temporary files", "committedDate": "2020-11-13T14:13:38Z", "type": "commit"}, {"oid": "89e907a2db0f49aae3e6157f45deb7eeba798840", "url": "https://github.com/apache/iotdb/commit/89e907a2db0f49aae3e6157f45deb7eeba798840", "message": "move hybrid tests to a new java file", "committedDate": "2020-11-13T14:26:34Z", "type": "commit"}, {"oid": "f1063cf42709aaaf83244dbb0cbe29e3bddb41b1", "url": "https://github.com/apache/iotdb/commit/f1063cf42709aaaf83244dbb0cbe29e3bddb41b1", "message": "fix doc: UDFParameters", "committedDate": "2020-11-13T14:46:17Z", "type": "commit"}, {"oid": "1acc9278c05414db30fa12b5eb7b64c6c65801ba", "url": "https://github.com/apache/iotdb/commit/1acc9278c05414db30fa12b5eb7b64c6c65801ba", "message": "add a test for udf query with multi attrs", "committedDate": "2020-11-13T17:51:45Z", "type": "commit"}, {"oid": "ffe397d50676be94f026886be1b6b2527fb347fd", "url": "https://github.com/apache/iotdb/commit/ffe397d50676be94f026886be1b6b2527fb347fd", "message": "remove \"// not support yet\"", "committedDate": "2020-11-16T16:50:42Z", "type": "commit"}]}