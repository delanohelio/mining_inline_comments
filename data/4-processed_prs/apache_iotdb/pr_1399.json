{"pr_number": 1399, "pr_title": "[IOTDB-736] Query performance tracing", "pr_createdAt": "2020-06-21T16:28:33Z", "pr_url": "https://github.com/apache/iotdb/pull/1399", "timeline": [{"oid": "597c3059e4b5a2dd86f47e30e28d28c5f180c6e5", "url": "https://github.com/apache/iotdb/commit/597c3059e4b5a2dd86f47e30e28d28c5f180c6e5", "message": "Add tracing on/off statement", "committedDate": "2020-06-21T09:48:16Z", "type": "commit"}, {"oid": "da3e8f8adcb2ad7e955cb13a50769538a794ab32", "url": "https://github.com/apache/iotdb/commit/da3e8f8adcb2ad7e955cb13a50769538a794ab32", "message": "Add performance log", "committedDate": "2020-06-21T15:13:40Z", "type": "commit"}, {"oid": "8fa057a0c0baaa1e7faa6c815e621ea91bc5c776", "url": "https://github.com/apache/iotdb/commit/8fa057a0c0baaa1e7faa6c815e621ea91bc5c776", "message": "Remove unused imports", "committedDate": "2020-06-21T15:22:01Z", "type": "commit"}, {"oid": "71149d4f42a766401ecf85d7c997e9afcaab0564", "url": "https://github.com/apache/iotdb/commit/71149d4f42a766401ecf85d7c997e9afcaab0564", "message": "Remove unused imports", "committedDate": "2020-06-21T15:22:27Z", "type": "commit"}, {"oid": "bd27f1a820ac25a45b7ba7e8717d49195af9db10", "url": "https://github.com/apache/iotdb/commit/bd27f1a820ac25a45b7ba7e8717d49195af9db10", "message": "fix conflict", "committedDate": "2020-06-21T16:14:17Z", "type": "commit"}, {"oid": "45602e0ca15fcf76a193c9794a479b29aa03a005", "url": "https://github.com/apache/iotdb/commit/45602e0ca15fcf76a193c9794a479b29aa03a005", "message": "Remove unused function", "committedDate": "2020-06-21T16:20:05Z", "type": "commit"}, {"oid": "d7899f49e8f43a6be3c6a556dabd8bb32350644a", "url": "https://github.com/apache/iotdb/commit/d7899f49e8f43a6be3c6a556dabd8bb32350644a", "message": "Write the log directly", "committedDate": "2020-06-22T02:48:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQzNjY0Mg==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r443436642", "bodyText": "put this to logs folder or data/performance is better", "author": "qiaojialin", "createdAt": "2020-06-22T09:38:00Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -185,6 +184,11 @@\n    */\n   private String syncDir = \"data\" + File.separator + \"system\" + File.separator + \"sync\";\n \n+  /**\n+   * Performance tracing directory, stores performance tracing files\n+   */\n+  private String performanceDir = \"data\" + File.separator + \"system\" + File.separator + \"performance\";", "originalCommit": "d7899f49e8f43a6be3c6a556dabd8bb32350644a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUzNDgwOQ==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r443534809", "bodyText": "Fixed.", "author": "Alima777", "createdAt": "2020-06-22T12:51:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQzNjY0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQzNzA4Nw==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r443437087", "bodyText": "this is not an invariant parameter, no need to put it here", "author": "qiaojialin", "createdAt": "2020-06-22T09:38:50Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java", "diffHunk": "@@ -80,11 +87,16 @@\n \n   private static final String ERROR_LOG = \"Wrong %s, please set as: %s !\";\n \n+  private static final String ENABLE_PERFORMANCE_TRACING = \"enable_performance_tracing\";", "originalCommit": "d7899f49e8f43a6be3c6a556dabd8bb32350644a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQzNzI0MQ==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r443437241", "bodyText": "do not modify this class", "author": "qiaojialin", "createdAt": "2020-06-22T09:39:07Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java", "diffHunk": "@@ -125,24 +138,23 @@ private IoTDBConfigCheck() {\n     systemProperties.put(PARTITION_INTERVAL_STRING, String.valueOf(partitionInterval));\n     systemProperties.put(TSFILE_FILE_SYSTEM_STRING, tsfileFileSystem);\n     systemProperties.put(ENABLE_PARTITION_STRING, String.valueOf(enablePartition));\n+    systemProperties.put(ENABLE_PERFORMANCE_TRACING, String.valueOf(enablePerformanceTracing));", "originalCommit": "d7899f49e8f43a6be3c6a556dabd8bb32350644a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQzNzM0NQ==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r443437345", "bodyText": "format all changes of this class back..", "author": "qiaojialin", "createdAt": "2020-06-22T09:39:18Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfigCheck.java", "diffHunk": "@@ -125,24 +138,23 @@ private IoTDBConfigCheck() {\n     systemProperties.put(PARTITION_INTERVAL_STRING, String.valueOf(partitionInterval));\n     systemProperties.put(TSFILE_FILE_SYSTEM_STRING, tsfileFileSystem);\n     systemProperties.put(ENABLE_PARTITION_STRING, String.valueOf(enablePartition));\n+    systemProperties.put(ENABLE_PERFORMANCE_TRACING, String.valueOf(enablePerformanceTracing));\n     systemProperties.put(TAG_ATTRIBUTE_SIZE_STRING, tagAttributeTotalSize);\n     systemProperties.put(MAX_DEGREE_OF_INDEX_STRING, maxDegreeOfIndexNode);\n   }\n \n \n   /**\n    * check configuration in system.properties when starting IoTDB\n-   *\n+   * <p>\n    * When init: create system.properties directly\n-   *\n-   * When upgrading the system.properties:\n-   * (1) create system.properties.tmp\n-   * (2) delete system.properties\n-   * (2) rename system.properties.tmp to system.properties\n+   * <p>\n+   * When upgrading the system.properties: (1) create system.properties.tmp (2) delete", "originalCommit": "d7899f49e8f43a6be3c6a556dabd8bb32350644a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUzNTA1Mw==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r443535053", "bodyText": "OK, my fault, all changes back..", "author": "Alima777", "createdAt": "2020-06-22T12:51:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQzNzM0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ0MjMzNA==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r443442334", "bodyText": "I suggest adding a parameter boolean in TracingOperator and TracingPlan, then set the config in PlanExecutor.", "author": "qiaojialin", "createdAt": "2020-06-22T09:48:15Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java", "diffHunk": "@@ -223,6 +226,20 @@ public void enterFlush(FlushContext ctx) {\n     initializedOperator = flushOperator;\n   }\n \n+  @Override\n+  public void enterTracingOn(TracingOnContext ctx) {\n+    super.enterTracingOn(ctx);\n+    IoTDBDescriptor.getInstance().getConfig().setEnablePerformanceTracing(true);", "originalCommit": "d7899f49e8f43a6be3c6a556dabd8bb32350644a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ0Mzg4Nw==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r443443887", "bodyText": "I suggest adding a parameter boolean in TracingOperator and TracingPlan, then set the config in PlanExecutor.", "author": "qiaojialin", "createdAt": "2020-06-22T09:50:55Z", "path": "server/src/main/java/org/apache/iotdb/db/qp/strategy/LogicalGenerator.java", "diffHunk": "@@ -223,6 +226,20 @@ public void enterFlush(FlushContext ctx) {\n     initializedOperator = flushOperator;\n   }\n \n+  @Override\n+  public void enterTracingOn(TracingOnContext ctx) {\n+    super.enterTracingOn(ctx);\n+    IoTDBDescriptor.getInstance().getConfig().setEnablePerformanceTracing(true);", "originalCommit": "d7899f49e8f43a6be3c6a556dabd8bb32350644a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkyMjA1Mw==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r443922053", "bodyText": "Fixed.", "author": "Alima777", "createdAt": "2020-06-23T02:12:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ0Mzg4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ0NTU2MQ==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r443445561", "bodyText": "This method may be called many times before the cachedChunkMetadata is all consumed. You can put this tracing in unpackOneTimeSeriesMetadata, i.e., when we call FileLoaderUtils.", "author": "qiaojialin", "createdAt": "2020-06-22T09:53:49Z", "path": "server/src/main/java/org/apache/iotdb/db/query/reader/series/SeriesReader.java", "diffHunk": "@@ -251,6 +257,13 @@ private void unpackAllOverlappedTimeSeriesMetadataToCachedChunkMetadata(\n       unpackOneTimeSeriesMetadata(firstTimeSeriesMetadata);\n       firstTimeSeriesMetadata = null;\n     }\n+\n+    // try to calculate the total number of chunk and time-value points in chunk\n+    if (IoTDBDescriptor.getInstance().getConfig().isEnablePerformanceTracing()) {\n+      totalChunkNum += cachedChunkMetadata.size();", "originalCommit": "d7899f49e8f43a6be3c6a556dabd8bb32350644a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUzOTEzOQ==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r443539139", "bodyText": "Good suggestion, Fixed.", "author": "Alima777", "createdAt": "2020-06-22T12:58:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ0NTU2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MDUzMA==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r443490530", "bodyText": "put all these performance related to a class TracingManager, which manage a writer, log file.", "author": "qiaojialin", "createdAt": "2020-06-22T11:23:28Z", "path": "server/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java", "diffHunk": "@@ -524,10 +546,30 @@ public TSExecuteStatementResp executeQueryStatement(TSExecuteStatementReq req) {\n    *             AuthorPlan\n    */\n   private TSExecuteStatementResp internalExecuteQueryStatement(String statement,\n-      long statementId, PhysicalPlan plan, int fetchSize, String username) {\n+      long statementId, PhysicalPlan plan, int fetchSize, String username) throws IOException {\n     auditLogger.info(\"Session {} execute Query: {}\", currSessionId.get(), statement);\n     long startTime = System.currentTimeMillis();\n     long queryId = -1;\n+    if (plan instanceof QueryPlan && config.isEnablePerformanceTracing()) {\n+      File performanceDir = SystemFileFactory.INSTANCE.getFile(config.getPerformanceDir());", "originalCommit": "d7899f49e8f43a6be3c6a556dabd8bb32350644a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYzNzYxOQ==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r443637619", "bodyText": "Fixed.", "author": "Alima777", "createdAt": "2020-06-22T15:19:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MDUzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MTAzNA==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r443491034", "bodyText": "If I query multiple times, when do you clear this?", "author": "qiaojialin", "createdAt": "2020-06-22T11:24:37Z", "path": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java", "diffHunk": "@@ -1233,6 +1237,20 @@ public QueryDataSource query(String deviceId, String measurementId, QueryContext\n       if (filePathsManager != null) {\n         filePathsManager.addUsedFilesForQuery(context.getQueryId(), dataSource);\n       }\n+\n+      // exclude repetitive tsFile to calculate the number of it\n+      if (config.isEnablePerformanceTracing()) {\n+        if (seqFile == null) {\n+          seqFile = new HashSet<>(seqResources);", "originalCommit": "d7899f49e8f43a6be3c6a556dabd8bb32350644a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyMDM4OA==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r444020388", "bodyText": "Fixed.", "author": "Alima777", "createdAt": "2020-06-23T07:34:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MTAzNA=="}], "type": "inlineReview"}, {"oid": "0afd154aa550e809ce7f13aeb092e713784032fa", "url": "https://github.com/apache/iotdb/commit/0afd154aa550e809ce7f13aeb092e713784032fa", "message": "Change dir", "committedDate": "2020-06-22T12:50:02Z", "type": "commit"}, {"oid": "372044d5be1f1c73d506aad6e98bdd51031be677", "url": "https://github.com/apache/iotdb/commit/372044d5be1f1c73d506aad6e98bdd51031be677", "message": "Move the location of calculating chunks", "committedDate": "2020-06-22T13:01:56Z", "type": "commit"}, {"oid": "f4997f0c47cd4d8141a482922624eb52f9b96856", "url": "https://github.com/apache/iotdb/commit/f4997f0c47cd4d8141a482922624eb52f9b96856", "message": "remove imports", "committedDate": "2020-06-22T14:03:58Z", "type": "commit"}, {"oid": "fddc7c39011215d88b4d143357f16bdc9b919a51", "url": "https://github.com/apache/iotdb/commit/fddc7c39011215d88b4d143357f16bdc9b919a51", "message": "Add tracing manager", "committedDate": "2020-06-22T15:22:38Z", "type": "commit"}, {"oid": "d90e857714733661b24e2c260f24b46c05cfcf97", "url": "https://github.com/apache/iotdb/commit/d90e857714733661b24e2c260f24b46c05cfcf97", "message": "QueryRouter", "committedDate": "2020-06-22T15:56:22Z", "type": "commit"}, {"oid": "f47e97b1975760f853971a93c5829add737782bd", "url": "https://github.com/apache/iotdb/commit/f47e97b1975760f853971a93c5829add737782bd", "message": "RawDataQueryExecutor", "committedDate": "2020-06-22T15:58:08Z", "type": "commit"}, {"oid": "0c63885a7d7eea0671d15f99215157eaa23d7a2d", "url": "https://github.com/apache/iotdb/commit/0c63885a7d7eea0671d15f99215157eaa23d7a2d", "message": "Modify tracing on/off", "committedDate": "2020-06-23T02:12:24Z", "type": "commit"}, {"oid": "ca197964dc4091de451c564624c2f134cbc6d9d4", "url": "https://github.com/apache/iotdb/commit/ca197964dc4091de451c564624c2f134cbc6d9d4", "message": "Thread safe", "committedDate": "2020-06-23T07:33:43Z", "type": "commit"}, {"oid": "f55733002ed8306b7bc3bea0dc64faa903b04b3d", "url": "https://github.com/apache/iotdb/commit/f55733002ed8306b7bc3bea0dc64faa903b04b3d", "message": "fix typo", "committedDate": "2020-06-23T07:45:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAzMjQ2Nw==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r444032467", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String performanceDir = \"data\" + File.separator + \"performance\";\n          \n          \n            \n              private String performanceDir = \"data\" + File.separator + \"tracing\";", "author": "qiaojialin", "createdAt": "2020-06-23T07:55:05Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -185,6 +184,11 @@\n    */\n   private String syncDir = \"data\" + File.separator + \"system\" + File.separator + \"sync\";\n \n+  /**\n+   * Performance tracing directory, stores performance tracing files\n+   */\n+  private String performanceDir = \"data\" + File.separator + \"performance\";", "originalCommit": "f55733002ed8306b7bc3bea0dc64faa903b04b3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAzMzI0Ng==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r444033246", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final String PERFORMANCE_FOLDER_NAME = \"performance\";\n          \n          \n            \n              public static final String TRACING_FOLDER_NAME = \"tracing\";", "author": "qiaojialin", "createdAt": "2020-06-23T07:56:19Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConstant.java", "diffHunk": "@@ -97,6 +97,8 @@ private IoTDBConstant() {\n   public static final String SCHEMA_FOLDER_NAME = \"schema\";\n   public static final String SYNC_FOLDER_NAME = \"sync\";\n   public static final String QUERY_FOLDER_NAME = \"query\";\n+  public static final String PERFORMANCE_FOLDER_NAME = \"performance\";", "originalCommit": "f55733002ed8306b7bc3bea0dc64faa903b04b3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAzMzM0NA==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r444033344", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final String PERFORMANCE_LOG = \"performance.txt\";\n          \n          \n            \n              public static final String PERFORMANCE_LOG = \"tracing.txt\";", "author": "qiaojialin", "createdAt": "2020-06-23T07:56:29Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConstant.java", "diffHunk": "@@ -97,6 +97,8 @@ private IoTDBConstant() {\n   public static final String SCHEMA_FOLDER_NAME = \"schema\";\n   public static final String SYNC_FOLDER_NAME = \"sync\";\n   public static final String QUERY_FOLDER_NAME = \"query\";\n+  public static final String PERFORMANCE_FOLDER_NAME = \"performance\";\n+  public static final String PERFORMANCE_LOG = \"performance.txt\";", "originalCommit": "f55733002ed8306b7bc3bea0dc64faa903b04b3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAzMzkwMg==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r444033902", "bodyText": "add javadoc, the chunk size is the number of points in chunk", "author": "qiaojialin", "createdAt": "2020-06-23T07:57:26Z", "path": "server/src/main/java/org/apache/iotdb/db/query/control/QueryResourceManager.java", "diffHunk": "@@ -47,6 +55,14 @@\n \r\n   private AtomicLong queryIdAtom = new AtomicLong();\r\n   private QueryFileManager filePathsManager;\r\n+  private static final Logger logger = LoggerFactory.getLogger(QueryResourceManager.class);\r\n+  // record the total number and size of chunks for each query id\r\n+  private Map<Long, Long> chunkNumMap = new ConcurrentHashMap<>();\r\n+  private Map<Long, Long> chunkSizeMap = new ConcurrentHashMap<>();\r", "originalCommit": "f55733002ed8306b7bc3bea0dc64faa903b04b3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAzOTgyMA==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r444039820", "bodyText": "you could use computeIfAbsent", "author": "qiaojialin", "createdAt": "2020-06-23T08:07:56Z", "path": "server/src/main/java/org/apache/iotdb/db/query/control/QueryResourceManager.java", "diffHunk": "@@ -85,20 +109,49 @@ public void registerTempExternalSortFile(long queryId,\n     externalSortFileMap.computeIfAbsent(queryId, x -> new ArrayList<>()).add(deserializer);\r\n   }\r\n \r\n-\r\n   public QueryDataSource getQueryDataSource(Path selectedPath,\r\n       QueryContext context, Filter filter) throws StorageEngineException, QueryProcessException {\r\n \r\n     SingleSeriesExpression singleSeriesExpression = new SingleSeriesExpression(selectedPath,\r\n         filter);\r\n-    return StorageEngine.getInstance().query(singleSeriesExpression, context, filePathsManager);\r\n+    QueryDataSource queryDataSource = StorageEngine.getInstance()\r\n+        .query(singleSeriesExpression, context, filePathsManager);\r\n+    // calculate the distinct number of seq and unseq tsfiles\r\n+    if (config.isEnablePerformanceTracing()) {\r\n+      Set<TsFileResource> seqFileNum = seqFileNumMap.get(context.getQueryId());\r\n+      Set<TsFileResource> unseqFileNum = unseqFileNumMap.get(context.getQueryId());\r", "originalCommit": "f55733002ed8306b7bc3bea0dc64faa903b04b3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA0MTY3OA==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r444041678", "bodyText": "put it to one method, this method write one line and \\n", "author": "qiaojialin", "createdAt": "2020-06-23T08:11:06Z", "path": "server/src/main/java/org/apache/iotdb/db/service/TSServiceImpl.java", "diffHunk": "@@ -548,6 +568,11 @@ private TSExecuteStatementResp internalExecuteQueryStatement(String statement,\n       resp.setOperationType(plan.getOperatorType().toString());\n       // generate the queryId for the operation\n       queryId = generateQueryId(true);\n+      if (plan instanceof QueryPlan && config.isEnablePerformanceTracing()) {\n+        TracingManager.getInstance().writeQueryId(queryId);\n+        TracingManager.getInstance().writeStartTime();\n+        TracingManager.getInstance().writePathsNum(plan.getPaths().size());", "originalCommit": "f55733002ed8306b7bc3bea0dc64faa903b04b3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA0NjA5OA==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r444046098", "bodyText": "Not all query unpacks the TimeseriesMetadata, we only unpack it when needed. So the chunkNumMap may do not contain the queryId, you'd better check the seqFileNum or check one by one", "author": "qiaojialin", "createdAt": "2020-06-23T08:18:57Z", "path": "server/src/main/java/org/apache/iotdb/db/query/control/QueryResourceManager.java", "diffHunk": "@@ -85,20 +109,49 @@ public void registerTempExternalSortFile(long queryId,\n     externalSortFileMap.computeIfAbsent(queryId, x -> new ArrayList<>()).add(deserializer);\r\n   }\r\n \r\n-\r\n   public QueryDataSource getQueryDataSource(Path selectedPath,\r\n       QueryContext context, Filter filter) throws StorageEngineException, QueryProcessException {\r\n \r\n     SingleSeriesExpression singleSeriesExpression = new SingleSeriesExpression(selectedPath,\r\n         filter);\r\n-    return StorageEngine.getInstance().query(singleSeriesExpression, context, filePathsManager);\r\n+    QueryDataSource queryDataSource = StorageEngine.getInstance()\r\n+        .query(singleSeriesExpression, context, filePathsManager);\r\n+    // calculate the distinct number of seq and unseq tsfiles\r\n+    if (config.isEnablePerformanceTracing()) {\r\n+      Set<TsFileResource> seqFileNum = seqFileNumMap.get(context.getQueryId());\r\n+      Set<TsFileResource> unseqFileNum = unseqFileNumMap.get(context.getQueryId());\r\n+      if (seqFileNum == null) {\r\n+        seqFileNumMap.put(context.getQueryId(), new HashSet<>(queryDataSource.getSeqResources()));\r\n+      } else {\r\n+        seqFileNum.addAll(queryDataSource.getSeqResources());\r\n+      }\r\n+      if (unseqFileNum == null) {\r\n+        unseqFileNumMap.put(context.getQueryId(), new HashSet<>(queryDataSource.getUnseqResources()));\r\n+      } else {\r\n+        unseqFileNum.addAll(queryDataSource.getUnseqResources());\r\n+      }\r\n+    }\r\n+    return queryDataSource;\r\n   }\r\n \r\n   /**\r\n    * Whenever the jdbc request is closed normally or abnormally, this method must be invoked. All\r\n    * query tokens created by this jdbc request must be cleared.\r\n    */\r\n   public void endQuery(long queryId) throws StorageEngineException {\r\n+    try {\r\n+      if (config.isEnablePerformanceTracing() && chunkNumMap.get(queryId) != null) {\r", "originalCommit": "f55733002ed8306b7bc3bea0dc64faa903b04b3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwMDMwNw==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r445600307", "bodyText": "Fixed.", "author": "Alima777", "createdAt": "2020-06-25T14:27:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA0NjA5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA0NjU0MA==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r444046540", "bodyText": "each line should have a QueryId in prefix", "author": "qiaojialin", "createdAt": "2020-06-23T08:19:42Z", "path": "server/src/main/java/org/apache/iotdb/db/query/control/TracingManager.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.query.control;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import org.apache.iotdb.db.conf.IoTDBConstant;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.fileSystem.SystemFileFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TracingManager {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(TracingManager.class);\n+  private BufferedWriter writer;\n+\n+  public TracingManager(String dirName, String logFileName){\n+    File performanceDir = SystemFileFactory.INSTANCE.getFile(dirName);\n+    if (!performanceDir.exists()) {\n+      if (performanceDir.mkdirs()) {\n+        logger.info(\"create performance folder {}.\", performanceDir);\n+      } else {\n+        logger.info(\"create performance folder {} failed.\", performanceDir);\n+      }\n+    }\n+    File logFile = SystemFileFactory.INSTANCE.getFile(dirName + File.separator + logFileName);\n+\n+    FileWriter fileWriter = null;\n+    try {\n+      fileWriter = new FileWriter(logFile, true);\n+    } catch (IOException e) {\n+      logger.error(\"Meeting error while creating TracingManager: {}\", e);\n+    }\n+    writer = new BufferedWriter(fileWriter);\n+  }\n+\n+  public static TracingManager getInstance() {\n+    return TracingManagerHelper.INSTANCE;\n+  }\n+\n+  public void writeSeperator() throws IOException {\n+    writer.write(\"-----------------------------\");\n+    writer.newLine();\n+    writer.flush();\n+  }\n+\n+  public void writeStatement(String statement) throws IOException {", "originalCommit": "f55733002ed8306b7bc3bea0dc64faa903b04b3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3MzQ1MQ==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r444073451", "bodyText": "All above Fixed. Thank you for detailed review \uff1a)", "author": "Alima777", "createdAt": "2020-06-23T09:02:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA0NjU0MA=="}], "type": "inlineReview"}, {"oid": "4a15cace80b751e912c7d7d8e96dc0b5774a99a3", "url": "https://github.com/apache/iotdb/commit/4a15cace80b751e912c7d7d8e96dc0b5774a99a3", "message": "Change based on review", "committedDate": "2020-06-23T08:59:58Z", "type": "commit"}, {"oid": "354d0e56eaeab96f213b3531cf9b4fda863f788e", "url": "https://github.com/apache/iotdb/commit/354d0e56eaeab96f213b3531cf9b4fda863f788e", "message": "Change log format and fix alignbydevice bug", "committedDate": "2020-06-23T14:10:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM5NzI3NA==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r445397274", "bodyText": "not used", "author": "jixuan1989", "createdAt": "2020-06-25T08:35:29Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConstant.java", "diffHunk": "@@ -97,6 +97,8 @@ private IoTDBConstant() {\n   public static final String SCHEMA_FOLDER_NAME = \"schema\";\n   public static final String SYNC_FOLDER_NAME = \"sync\";\n   public static final String QUERY_FOLDER_NAME = \"query\";\n+  public static final String TRACING_FOLDER_NAME = \"tracing\";", "originalCommit": "354d0e56eaeab96f213b3531cf9b4fda863f788e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NDAyNA==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r445594024", "bodyText": "It's used in IoTDBDescriptor conf.setTracingDir(FilePathUtils.regularizePath(conf.getBaseDir() + IoTDBConstant.TRACING_FOLDER_NAME));", "author": "Alima777", "createdAt": "2020-06-25T14:18:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM5NzI3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM5NzU2NQ==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r445397565", "bodyText": "perfromanceDir -> tracingDir", "author": "jixuan1989", "createdAt": "2020-06-25T08:35:58Z", "path": "server/src/main/java/org/apache/iotdb/db/query/control/TracingManager.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.query.control;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import org.apache.iotdb.db.conf.IoTDBConstant;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.fileSystem.SystemFileFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TracingManager {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(TracingManager.class);\n+  private BufferedWriter writer;\n+\n+  public TracingManager(String dirName, String logFileName){\n+    File performanceDir = SystemFileFactory.INSTANCE.getFile(dirName);", "originalCommit": "354d0e56eaeab96f213b3531cf9b4fda863f788e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NDQ0Mw==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r445594443", "bodyText": "Fixed.", "author": "Alima777", "createdAt": "2020-06-25T14:19:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM5NzU2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM5ODUyOQ==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r445398529", "bodyText": "writer.write() should be protected by synchnorized", "author": "jixuan1989", "createdAt": "2020-06-25T08:37:40Z", "path": "server/src/main/java/org/apache/iotdb/db/query/control/TracingManager.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.query.control;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import org.apache.iotdb.db.conf.IoTDBConstant;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.fileSystem.SystemFileFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TracingManager {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(TracingManager.class);\n+  private BufferedWriter writer;\n+\n+  public TracingManager(String dirName, String logFileName){\n+    File performanceDir = SystemFileFactory.INSTANCE.getFile(dirName);\n+    if (!performanceDir.exists()) {\n+      if (performanceDir.mkdirs()) {\n+        logger.info(\"create performance folder {}.\", performanceDir);\n+      } else {\n+        logger.info(\"create performance folder {} failed.\", performanceDir);\n+      }\n+    }\n+    File logFile = SystemFileFactory.INSTANCE.getFile(dirName + File.separator + logFileName);\n+\n+    FileWriter fileWriter = null;\n+    try {\n+      fileWriter = new FileWriter(logFile, true);\n+    } catch (IOException e) {\n+      logger.error(\"Meeting error while creating TracingManager: {}\", e);\n+    }\n+    writer = new BufferedWriter(fileWriter);\n+  }\n+\n+  public static TracingManager getInstance() {\n+    return TracingManagerHelper.INSTANCE;\n+  }\n+\n+  public void writeQueryInfo(long queryId, String statement, int pathsNum) throws IOException {\n+    StringBuilder builder = new StringBuilder(\"-----------------------------\\n\");\n+    builder.append(\"Query Id: \").append(queryId)\n+        .append(\" - Query Statement: \").append(statement)\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Start time: \")\n+        .append(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\").format(System.currentTimeMillis()))\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Number of series paths: \").append(pathsNum);\n+    writer.write(builder.toString());", "originalCommit": "354d0e56eaeab96f213b3531cf9b4fda863f788e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM5ODkyMQ==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r445398921", "bodyText": "no need to call flush", "author": "jixuan1989", "createdAt": "2020-06-25T08:38:21Z", "path": "server/src/main/java/org/apache/iotdb/db/query/control/TracingManager.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.query.control;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import org.apache.iotdb.db.conf.IoTDBConstant;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.fileSystem.SystemFileFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TracingManager {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(TracingManager.class);\n+  private BufferedWriter writer;\n+\n+  public TracingManager(String dirName, String logFileName){\n+    File performanceDir = SystemFileFactory.INSTANCE.getFile(dirName);\n+    if (!performanceDir.exists()) {\n+      if (performanceDir.mkdirs()) {\n+        logger.info(\"create performance folder {}.\", performanceDir);\n+      } else {\n+        logger.info(\"create performance folder {} failed.\", performanceDir);\n+      }\n+    }\n+    File logFile = SystemFileFactory.INSTANCE.getFile(dirName + File.separator + logFileName);\n+\n+    FileWriter fileWriter = null;\n+    try {\n+      fileWriter = new FileWriter(logFile, true);\n+    } catch (IOException e) {\n+      logger.error(\"Meeting error while creating TracingManager: {}\", e);\n+    }\n+    writer = new BufferedWriter(fileWriter);\n+  }\n+\n+  public static TracingManager getInstance() {\n+    return TracingManagerHelper.INSTANCE;\n+  }\n+\n+  public void writeQueryInfo(long queryId, String statement, int pathsNum) throws IOException {\n+    StringBuilder builder = new StringBuilder(\"-----------------------------\\n\");\n+    builder.append(\"Query Id: \").append(queryId)\n+        .append(\" - Query Statement: \").append(statement)\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Start time: \")\n+        .append(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\").format(System.currentTimeMillis()))\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Number of series paths: \").append(pathsNum);\n+    writer.write(builder.toString());\n+    writer.newLine();\n+    writer.flush();", "originalCommit": "354d0e56eaeab96f213b3531cf9b4fda863f788e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM5OTAxNA==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r445399014", "bodyText": "same issue.", "author": "jixuan1989", "createdAt": "2020-06-25T08:38:30Z", "path": "server/src/main/java/org/apache/iotdb/db/query/control/TracingManager.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.query.control;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import org.apache.iotdb.db.conf.IoTDBConstant;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.fileSystem.SystemFileFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TracingManager {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(TracingManager.class);\n+  private BufferedWriter writer;\n+\n+  public TracingManager(String dirName, String logFileName){\n+    File performanceDir = SystemFileFactory.INSTANCE.getFile(dirName);\n+    if (!performanceDir.exists()) {\n+      if (performanceDir.mkdirs()) {\n+        logger.info(\"create performance folder {}.\", performanceDir);\n+      } else {\n+        logger.info(\"create performance folder {} failed.\", performanceDir);\n+      }\n+    }\n+    File logFile = SystemFileFactory.INSTANCE.getFile(dirName + File.separator + logFileName);\n+\n+    FileWriter fileWriter = null;\n+    try {\n+      fileWriter = new FileWriter(logFile, true);\n+    } catch (IOException e) {\n+      logger.error(\"Meeting error while creating TracingManager: {}\", e);\n+    }\n+    writer = new BufferedWriter(fileWriter);\n+  }\n+\n+  public static TracingManager getInstance() {\n+    return TracingManagerHelper.INSTANCE;\n+  }\n+\n+  public void writeQueryInfo(long queryId, String statement, int pathsNum) throws IOException {\n+    StringBuilder builder = new StringBuilder(\"-----------------------------\\n\");\n+    builder.append(\"Query Id: \").append(queryId)\n+        .append(\" - Query Statement: \").append(statement)\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Start time: \")\n+        .append(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\").format(System.currentTimeMillis()))\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Number of series paths: \").append(pathsNum);\n+    writer.write(builder.toString());\n+    writer.newLine();\n+    writer.flush();\n+  }\n+\n+  // for align by device query\n+  public void writeQueryInfo(long queryId, String statement) throws IOException {\n+    StringBuilder builder = new StringBuilder(\"-----------------------------\\n\");\n+    builder.append(\"Query Id: \").append(queryId)\n+        .append(\" - Query Statement: \").append(statement)\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Start time: \")\n+        .append(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\").format(System.currentTimeMillis()));\n+    writer.write(builder.toString());\n+    writer.newLine();\n+    writer.flush();", "originalCommit": "354d0e56eaeab96f213b3531cf9b4fda863f788e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM5OTA3Mg==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r445399072", "bodyText": "same issue", "author": "jixuan1989", "createdAt": "2020-06-25T08:38:37Z", "path": "server/src/main/java/org/apache/iotdb/db/query/control/TracingManager.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.query.control;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import org.apache.iotdb.db.conf.IoTDBConstant;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.fileSystem.SystemFileFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TracingManager {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(TracingManager.class);\n+  private BufferedWriter writer;\n+\n+  public TracingManager(String dirName, String logFileName){\n+    File performanceDir = SystemFileFactory.INSTANCE.getFile(dirName);\n+    if (!performanceDir.exists()) {\n+      if (performanceDir.mkdirs()) {\n+        logger.info(\"create performance folder {}.\", performanceDir);\n+      } else {\n+        logger.info(\"create performance folder {} failed.\", performanceDir);\n+      }\n+    }\n+    File logFile = SystemFileFactory.INSTANCE.getFile(dirName + File.separator + logFileName);\n+\n+    FileWriter fileWriter = null;\n+    try {\n+      fileWriter = new FileWriter(logFile, true);\n+    } catch (IOException e) {\n+      logger.error(\"Meeting error while creating TracingManager: {}\", e);\n+    }\n+    writer = new BufferedWriter(fileWriter);\n+  }\n+\n+  public static TracingManager getInstance() {\n+    return TracingManagerHelper.INSTANCE;\n+  }\n+\n+  public void writeQueryInfo(long queryId, String statement, int pathsNum) throws IOException {\n+    StringBuilder builder = new StringBuilder(\"-----------------------------\\n\");\n+    builder.append(\"Query Id: \").append(queryId)\n+        .append(\" - Query Statement: \").append(statement)\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Start time: \")\n+        .append(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\").format(System.currentTimeMillis()))\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Number of series paths: \").append(pathsNum);\n+    writer.write(builder.toString());\n+    writer.newLine();\n+    writer.flush();\n+  }\n+\n+  // for align by device query\n+  public void writeQueryInfo(long queryId, String statement) throws IOException {\n+    StringBuilder builder = new StringBuilder(\"-----------------------------\\n\");\n+    builder.append(\"Query Id: \").append(queryId)\n+        .append(\" - Query Statement: \").append(statement)\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Start time: \")\n+        .append(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\").format(System.currentTimeMillis()));\n+    writer.write(builder.toString());\n+    writer.newLine();\n+    writer.flush();\n+  }\n+\n+  public void writePathsNum(long queryId, int pathsNum) throws IOException {\n+    writer.write(new StringBuilder(\"Query Id: \").append(queryId)\n+        .append(\" - Number of series paths: \").append(pathsNum).toString());\n+    writer.newLine();\n+    writer.flush();", "originalCommit": "354d0e56eaeab96f213b3531cf9b4fda863f788e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM5OTYwMw==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r445399603", "bodyText": "use StringBuilder to get string first (do not need to wrap with sync), and wrap writer.write with sync", "author": "jixuan1989", "createdAt": "2020-06-25T08:39:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM5OTA3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM5OTY2OA==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r445399668", "bodyText": "same issue", "author": "jixuan1989", "createdAt": "2020-06-25T08:39:41Z", "path": "server/src/main/java/org/apache/iotdb/db/query/control/TracingManager.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.query.control;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import org.apache.iotdb.db.conf.IoTDBConstant;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.fileSystem.SystemFileFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TracingManager {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(TracingManager.class);\n+  private BufferedWriter writer;\n+\n+  public TracingManager(String dirName, String logFileName){\n+    File performanceDir = SystemFileFactory.INSTANCE.getFile(dirName);\n+    if (!performanceDir.exists()) {\n+      if (performanceDir.mkdirs()) {\n+        logger.info(\"create performance folder {}.\", performanceDir);\n+      } else {\n+        logger.info(\"create performance folder {} failed.\", performanceDir);\n+      }\n+    }\n+    File logFile = SystemFileFactory.INSTANCE.getFile(dirName + File.separator + logFileName);\n+\n+    FileWriter fileWriter = null;\n+    try {\n+      fileWriter = new FileWriter(logFile, true);\n+    } catch (IOException e) {\n+      logger.error(\"Meeting error while creating TracingManager: {}\", e);\n+    }\n+    writer = new BufferedWriter(fileWriter);\n+  }\n+\n+  public static TracingManager getInstance() {\n+    return TracingManagerHelper.INSTANCE;\n+  }\n+\n+  public void writeQueryInfo(long queryId, String statement, int pathsNum) throws IOException {\n+    StringBuilder builder = new StringBuilder(\"-----------------------------\\n\");\n+    builder.append(\"Query Id: \").append(queryId)\n+        .append(\" - Query Statement: \").append(statement)\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Start time: \")\n+        .append(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\").format(System.currentTimeMillis()))\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Number of series paths: \").append(pathsNum);\n+    writer.write(builder.toString());\n+    writer.newLine();\n+    writer.flush();\n+  }\n+\n+  // for align by device query\n+  public void writeQueryInfo(long queryId, String statement) throws IOException {\n+    StringBuilder builder = new StringBuilder(\"-----------------------------\\n\");\n+    builder.append(\"Query Id: \").append(queryId)\n+        .append(\" - Query Statement: \").append(statement)\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Start time: \")\n+        .append(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\").format(System.currentTimeMillis()));\n+    writer.write(builder.toString());\n+    writer.newLine();\n+    writer.flush();\n+  }\n+\n+  public void writePathsNum(long queryId, int pathsNum) throws IOException {\n+    writer.write(new StringBuilder(\"Query Id: \").append(queryId)\n+        .append(\" - Number of series paths: \").append(pathsNum).toString());\n+    writer.newLine();\n+    writer.flush();\n+  }\n+\n+  public void writeTsFileInfo(long queryId, int seqFileNum, int unseqFileNum) throws IOException {\n+    // to avoid the disorder info of multi query\n+    // add query id as prefix of each info\n+    writer.write(new StringBuilder(\"Query Id: \").append(queryId)\n+        .append(\" - Number of tsfiles: \").append(seqFileNum + unseqFileNum)\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Number of sequence files: \").append(seqFileNum)\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Number of unsequence files: \").append(unseqFileNum).toString());\n+    writer.newLine();\n+    writer.flush();", "originalCommit": "354d0e56eaeab96f213b3531cf9b4fda863f788e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM5OTc2Nw==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r445399767", "bodyText": "same issue", "author": "jixuan1989", "createdAt": "2020-06-25T08:39:51Z", "path": "server/src/main/java/org/apache/iotdb/db/query/control/TracingManager.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.query.control;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import org.apache.iotdb.db.conf.IoTDBConstant;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.fileSystem.SystemFileFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TracingManager {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(TracingManager.class);\n+  private BufferedWriter writer;\n+\n+  public TracingManager(String dirName, String logFileName){\n+    File performanceDir = SystemFileFactory.INSTANCE.getFile(dirName);\n+    if (!performanceDir.exists()) {\n+      if (performanceDir.mkdirs()) {\n+        logger.info(\"create performance folder {}.\", performanceDir);\n+      } else {\n+        logger.info(\"create performance folder {} failed.\", performanceDir);\n+      }\n+    }\n+    File logFile = SystemFileFactory.INSTANCE.getFile(dirName + File.separator + logFileName);\n+\n+    FileWriter fileWriter = null;\n+    try {\n+      fileWriter = new FileWriter(logFile, true);\n+    } catch (IOException e) {\n+      logger.error(\"Meeting error while creating TracingManager: {}\", e);\n+    }\n+    writer = new BufferedWriter(fileWriter);\n+  }\n+\n+  public static TracingManager getInstance() {\n+    return TracingManagerHelper.INSTANCE;\n+  }\n+\n+  public void writeQueryInfo(long queryId, String statement, int pathsNum) throws IOException {\n+    StringBuilder builder = new StringBuilder(\"-----------------------------\\n\");\n+    builder.append(\"Query Id: \").append(queryId)\n+        .append(\" - Query Statement: \").append(statement)\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Start time: \")\n+        .append(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\").format(System.currentTimeMillis()))\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Number of series paths: \").append(pathsNum);\n+    writer.write(builder.toString());\n+    writer.newLine();\n+    writer.flush();\n+  }\n+\n+  // for align by device query\n+  public void writeQueryInfo(long queryId, String statement) throws IOException {\n+    StringBuilder builder = new StringBuilder(\"-----------------------------\\n\");\n+    builder.append(\"Query Id: \").append(queryId)\n+        .append(\" - Query Statement: \").append(statement)\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Start time: \")\n+        .append(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\").format(System.currentTimeMillis()));\n+    writer.write(builder.toString());\n+    writer.newLine();\n+    writer.flush();\n+  }\n+\n+  public void writePathsNum(long queryId, int pathsNum) throws IOException {\n+    writer.write(new StringBuilder(\"Query Id: \").append(queryId)\n+        .append(\" - Number of series paths: \").append(pathsNum).toString());\n+    writer.newLine();\n+    writer.flush();\n+  }\n+\n+  public void writeTsFileInfo(long queryId, int seqFileNum, int unseqFileNum) throws IOException {\n+    // to avoid the disorder info of multi query\n+    // add query id as prefix of each info\n+    writer.write(new StringBuilder(\"Query Id: \").append(queryId)\n+        .append(\" - Number of tsfiles: \").append(seqFileNum + unseqFileNum)\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Number of sequence files: \").append(seqFileNum)\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Number of unsequence files: \").append(unseqFileNum).toString());\n+    writer.newLine();\n+    writer.flush();\n+  }\n+\n+  public void writeChunksInfo(long queryId, long totalChunkNum, long totalChunkSize) throws IOException {\n+    writer.write(new StringBuilder(\"Query Id: \").append(queryId)\n+        .append(\" - Number of chunks: \").append(totalChunkNum)\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Average size of chunks: \").append(totalChunkSize / totalChunkNum).toString());\n+    writer.newLine();\n+    writer.flush();", "originalCommit": "354d0e56eaeab96f213b3531cf9b4fda863f788e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM5OTgzMQ==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r445399831", "bodyText": "same issue", "author": "jixuan1989", "createdAt": "2020-06-25T08:39:57Z", "path": "server/src/main/java/org/apache/iotdb/db/query/control/TracingManager.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.query.control;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import org.apache.iotdb.db.conf.IoTDBConstant;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.fileSystem.SystemFileFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TracingManager {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(TracingManager.class);\n+  private BufferedWriter writer;\n+\n+  public TracingManager(String dirName, String logFileName){\n+    File performanceDir = SystemFileFactory.INSTANCE.getFile(dirName);\n+    if (!performanceDir.exists()) {\n+      if (performanceDir.mkdirs()) {\n+        logger.info(\"create performance folder {}.\", performanceDir);\n+      } else {\n+        logger.info(\"create performance folder {} failed.\", performanceDir);\n+      }\n+    }\n+    File logFile = SystemFileFactory.INSTANCE.getFile(dirName + File.separator + logFileName);\n+\n+    FileWriter fileWriter = null;\n+    try {\n+      fileWriter = new FileWriter(logFile, true);\n+    } catch (IOException e) {\n+      logger.error(\"Meeting error while creating TracingManager: {}\", e);\n+    }\n+    writer = new BufferedWriter(fileWriter);\n+  }\n+\n+  public static TracingManager getInstance() {\n+    return TracingManagerHelper.INSTANCE;\n+  }\n+\n+  public void writeQueryInfo(long queryId, String statement, int pathsNum) throws IOException {\n+    StringBuilder builder = new StringBuilder(\"-----------------------------\\n\");\n+    builder.append(\"Query Id: \").append(queryId)\n+        .append(\" - Query Statement: \").append(statement)\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Start time: \")\n+        .append(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\").format(System.currentTimeMillis()))\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Number of series paths: \").append(pathsNum);\n+    writer.write(builder.toString());\n+    writer.newLine();\n+    writer.flush();\n+  }\n+\n+  // for align by device query\n+  public void writeQueryInfo(long queryId, String statement) throws IOException {\n+    StringBuilder builder = new StringBuilder(\"-----------------------------\\n\");\n+    builder.append(\"Query Id: \").append(queryId)\n+        .append(\" - Query Statement: \").append(statement)\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Start time: \")\n+        .append(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\").format(System.currentTimeMillis()));\n+    writer.write(builder.toString());\n+    writer.newLine();\n+    writer.flush();\n+  }\n+\n+  public void writePathsNum(long queryId, int pathsNum) throws IOException {\n+    writer.write(new StringBuilder(\"Query Id: \").append(queryId)\n+        .append(\" - Number of series paths: \").append(pathsNum).toString());\n+    writer.newLine();\n+    writer.flush();\n+  }\n+\n+  public void writeTsFileInfo(long queryId, int seqFileNum, int unseqFileNum) throws IOException {\n+    // to avoid the disorder info of multi query\n+    // add query id as prefix of each info\n+    writer.write(new StringBuilder(\"Query Id: \").append(queryId)\n+        .append(\" - Number of tsfiles: \").append(seqFileNum + unseqFileNum)\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Number of sequence files: \").append(seqFileNum)\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Number of unsequence files: \").append(unseqFileNum).toString());\n+    writer.newLine();\n+    writer.flush();\n+  }\n+\n+  public void writeChunksInfo(long queryId, long totalChunkNum, long totalChunkSize) throws IOException {\n+    writer.write(new StringBuilder(\"Query Id: \").append(queryId)\n+        .append(\" - Number of chunks: \").append(totalChunkNum)\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Average size of chunks: \").append(totalChunkSize / totalChunkNum).toString());\n+    writer.newLine();\n+    writer.flush();\n+  }\n+\n+  public void writeEndTime(long queryId) throws IOException {\n+    writer.write(new StringBuilder(\"Query Id: \").append(queryId)\n+        .append(\" - End time: \")\n+        .append(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\").format(System.currentTimeMillis()))\n+        .toString());\n+    writer.newLine();\n+    writer.flush();\n+  }\n+\n+  private static class TracingManagerHelper {\n+\n+    private static final TracingManager INSTANCE = new TracingManager(\n+        IoTDBDescriptor.getInstance().getConfig().getTracingDir(),", "originalCommit": "354d0e56eaeab96f213b3531cf9b4fda863f788e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NzExNA==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r445597114", "bodyText": "All above fixed.", "author": "Alima777", "createdAt": "2020-06-25T14:22:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM5OTgzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwMjYyNA==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r445402624", "bodyText": "Though currently we put all TsResources into the memory, but we may change this design in the future.\nHowever, you put the TsResources into the map here, which will lead to the GC failed for those objects.\nHow about considering Weak/PhantomReference references  (not sure whether it is ok. https://juejin.im/post/5b82c02df265da436152f5ad)", "author": "jixuan1989", "createdAt": "2020-06-25T08:44:52Z", "path": "server/src/main/java/org/apache/iotdb/db/query/control/QueryResourceManager.java", "diffHunk": "@@ -85,20 +110,50 @@ public void registerTempExternalSortFile(long queryId,\n     externalSortFileMap.computeIfAbsent(queryId, x -> new ArrayList<>()).add(deserializer);\r\n   }\r\n \r\n-\r\n   public QueryDataSource getQueryDataSource(Path selectedPath,\r\n       QueryContext context, Filter filter) throws StorageEngineException, QueryProcessException {\r\n \r\n     SingleSeriesExpression singleSeriesExpression = new SingleSeriesExpression(selectedPath,\r\n         filter);\r\n-    return StorageEngine.getInstance().query(singleSeriesExpression, context, filePathsManager);\r\n+    QueryDataSource queryDataSource = StorageEngine.getInstance()\r\n+        .query(singleSeriesExpression, context, filePathsManager);\r\n+    // calculate the distinct number of seq and unseq tsfiles\r\n+    if (config.isEnablePerformanceTracing()) {\r\n+      seqFileNumMap.computeIfAbsent(context.getQueryId(), k -> new HashSet<>())\r\n+          .addAll(queryDataSource.getSeqResources());\r", "originalCommit": "354d0e56eaeab96f213b3531cf9b4fda863f788e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MTU0Nw==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r445591547", "bodyText": "Hi, the TsFileResources used for this query in this map will be removed after printing tracing log. Then it can be cleaned by GC.", "author": "Alima777", "createdAt": "2020-06-25T14:15:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwMjYyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5MjU5NQ==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r445592595", "bodyText": "You can see the Code in QueryResourceManager 136-146.", "author": "Alima777", "createdAt": "2020-06-25T14:16:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwMjYyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0NzMwNg==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r446147306", "bodyText": "this method just queries one time series..\nSuppose we have 2 time series to be queried, maybe the resources corresponding to the first time series can be GC released before the second one is queried.", "author": "jixuan1989", "createdAt": "2020-06-26T12:16:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwMjYyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4MDk1NA==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r446180954", "bodyText": "But if the first time series is not kept in this map, we can not calculate the total number of distinct tsfiles in the whole query. Or we give the accessed times of tsfile instead? In this way, we only keep a accessed number for one time series.", "author": "Alima777", "createdAt": "2020-06-26T13:23:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwMjYyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MzExMA==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r446593110", "bodyText": "Hi, I replace those objects with WeakReference as you said. I believe it will make sense in the GC. Thank you very much for your good suggestion. Please check it.", "author": "Alima777", "createdAt": "2020-06-28T03:02:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwMjYyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MzIzNQ==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r446593235", "bodyText": "And it will reflect the correct performance in case the tsfileResources are GC and reloaded from disk in the future.", "author": "Alima777", "createdAt": "2020-06-28T03:04:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwMjYyNA=="}], "type": "inlineReview"}, {"oid": "b66a9b06aab4b98fcd265a21902edb8574ec297c", "url": "https://github.com/apache/iotdb/commit/b66a9b06aab4b98fcd265a21902edb8574ec297c", "message": "Writer thread safety", "committedDate": "2020-06-25T14:23:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0NjE3OA==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r446146178", "bodyText": "here should be \"TRACING_FOLDER_NAME\"..", "author": "jixuan1989", "createdAt": "2020-06-26T12:13:28Z", "path": "server/src/main/java/org/apache/iotdb/db/conf/IoTDBConfig.java", "diffHunk": "@@ -185,6 +184,11 @@\n    */\n   private String syncDir = \"data\" + File.separator + \"system\" + File.separator + \"sync\";\n \n+  /**\n+   * Performance tracing directory, stores performance tracing files\n+   */\n+  private String tracingDir = \"data\" + File.separator + \"tracing\";", "originalCommit": "b66a9b06aab4b98fcd265a21902edb8574ec297c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4Mzk5Mw==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r446183993", "bodyText": "I think you are right. But the Dir strings in this file are all defined this way....", "author": "Alima777", "createdAt": "2020-06-26T13:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0NjE3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0Nzg5MA==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r446147890", "bodyText": "writer.newLine()  also needs to be wrapped...", "author": "jixuan1989", "createdAt": "2020-06-26T12:17:25Z", "path": "server/src/main/java/org/apache/iotdb/db/query/control/TracingManager.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.iotdb.db.query.control;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import org.apache.iotdb.db.conf.IoTDBConstant;\n+import org.apache.iotdb.db.conf.IoTDBDescriptor;\n+import org.apache.iotdb.db.engine.fileSystem.SystemFileFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TracingManager {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(TracingManager.class);\n+  private BufferedWriter writer;\n+\n+  public TracingManager(String dirName, String logFileName) {\n+    File tracingDir = SystemFileFactory.INSTANCE.getFile(dirName);\n+    if (!tracingDir.exists()) {\n+      if (tracingDir.mkdirs()) {\n+        logger.info(\"create performance folder {}.\", tracingDir);\n+      } else {\n+        logger.info(\"create performance folder {} failed.\", tracingDir);\n+      }\n+    }\n+    File logFile = SystemFileFactory.INSTANCE.getFile(dirName + File.separator + logFileName);\n+\n+    FileWriter fileWriter = null;\n+    try {\n+      fileWriter = new FileWriter(logFile, true);\n+    } catch (IOException e) {\n+      logger.error(\"Meeting error while creating TracingManager: {}\", e);\n+    }\n+    writer = new BufferedWriter(fileWriter);\n+  }\n+\n+  public static TracingManager getInstance() {\n+    return TracingManagerHelper.INSTANCE;\n+  }\n+\n+  public void writeQueryInfo(long queryId, String statement, int pathsNum) throws IOException {\n+    StringBuilder builder = new StringBuilder(\"-----------------------------\\n\");\n+    builder.append(\"Query Id: \").append(queryId)\n+        .append(\" - Query Statement: \").append(statement)\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Start time: \")\n+        .append(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\").format(System.currentTimeMillis()))\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Number of series paths: \").append(pathsNum);\n+    synchronized (writer) {\n+      writer.write(builder.toString());\n+    }\n+    writer.newLine();\n+  }\n+\n+  // for align by device query\n+  public void writeQueryInfo(long queryId, String statement) throws IOException {\n+    StringBuilder builder = new StringBuilder(\"-----------------------------\\n\");\n+    builder.append(\"Query Id: \").append(queryId)\n+        .append(\" - Query Statement: \").append(statement)\n+        .append(\"\\nQuery Id: \").append(queryId)\n+        .append(\" - Start time: \")\n+        .append(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\").format(System.currentTimeMillis()));\n+    synchronized (writer) {\n+      writer.write(builder.toString());\n+    }\n+    writer.newLine();\n+  }\n+\n+  public void writePathsNum(long queryId, int pathsNum) throws IOException {\n+    StringBuilder builder = new StringBuilder(\"Query Id: \").append(queryId)\n+        .append(\" - Number of series paths: \").append(pathsNum);\n+    synchronized (writer) {\n+      writer.write(builder.toString());\n+    }\n+    writer.newLine();", "originalCommit": "b66a9b06aab4b98fcd265a21902edb8574ec297c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0ODU4OA==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r446148588", "bodyText": "considering thread A writes \"abcdefg\", and thread B writes  \"\\n\", then the result may be \"abc\\ndefg\".\n(By the way, why not add \"\\n\" into the end of the string?)", "author": "jixuan1989", "createdAt": "2020-06-26T12:19:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0Nzg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIwMDM0Nw==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r446200347", "bodyText": "Actually, I researched and also did a test by myself, the process of BufferedWriter.write() self is thread safe...\nFor example, thread A invokes writer.write(\"aaa\"), thread B invokes writer.write(\"bbb\"), the result will only be \"aaabbb\" Or \"bbbaaa\". So the synchronized is not needed. And writer.flush() is also needed.....\nSorry, I will change all back. Remove synchronized and add flush() back.", "author": "Alima777", "createdAt": "2020-06-26T13:57:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0Nzg5MA=="}], "type": "inlineReview"}, {"oid": "83a59730b38404890199cea5c011a034348e2d24", "url": "https://github.com/apache/iotdb/commit/83a59730b38404890199cea5c011a034348e2d24", "message": "Thread safe and constant", "committedDate": "2020-06-26T14:50:37Z", "type": "commit"}, {"oid": "61078a029a35f565b3a6769f192630e0a94fb36c", "url": "https://github.com/apache/iotdb/commit/61078a029a35f565b3a6769f192630e0a94fb36c", "message": "replace with weak reference", "committedDate": "2020-06-28T02:59:57Z", "type": "commit"}, {"oid": "a0a63803a9eafc6de9c0ae96f0ae4461e954c2e1", "url": "https://github.com/apache/iotdb/commit/a0a63803a9eafc6de9c0ae96f0ae4461e954c2e1", "message": "Fix conflict", "committedDate": "2020-06-29T02:07:07Z", "type": "commit"}, {"oid": "f961713a66a1947386a8c93481d6be9402bfb2f1", "url": "https://github.com/apache/iotdb/commit/f961713a66a1947386a8c93481d6be9402bfb2f1", "message": "Fix conflict", "committedDate": "2020-06-29T02:47:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA4NjQ2NQ==", "url": "https://github.com/apache/iotdb/pull/1399#discussion_r444086465", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      config.getTracingDir() + File.separator + IoTDBConstant.TRACING_LOG, e);\n          \n          \n            \n                      config.getTracingDir() + File.separator + IoTDBConstant.TRACING_LOG, e.getMessage());", "author": "qiaojialin", "createdAt": "2020-06-23T09:23:56Z", "path": "server/src/main/java/org/apache/iotdb/db/query/control/QueryResourceManager.java", "diffHunk": "@@ -85,20 +110,53 @@ public void registerTempExternalSortFile(long queryId,\n     externalSortFileMap.computeIfAbsent(queryId, x -> new ArrayList<>()).add(deserializer);\r\n   }\r\n \r\n-\r\n   public QueryDataSource getQueryDataSource(Path selectedPath,\r\n       QueryContext context, Filter filter) throws StorageEngineException, QueryProcessException {\r\n \r\n     SingleSeriesExpression singleSeriesExpression = new SingleSeriesExpression(selectedPath,\r\n         filter);\r\n-    return StorageEngine.getInstance().query(singleSeriesExpression, context, filePathsManager);\r\n+    QueryDataSource queryDataSource = StorageEngine.getInstance()\r\n+        .query(singleSeriesExpression, context, filePathsManager);\r\n+    // calculate the distinct number of seq and unseq tsfiles\r\n+    if (config.isEnablePerformanceTracing()) {\r\n+      Set<TsFileResource> seqFileNum = seqFileNumMap.get(context.getQueryId());\r\n+      Set<TsFileResource> unseqFileNum = unseqFileNumMap.get(context.getQueryId());\r\n+      if (seqFileNum == null) {\r\n+        seqFileNumMap.put(context.getQueryId(), new HashSet<>(queryDataSource.getSeqResources()));\r\n+      } else {\r\n+        seqFileNum.addAll(queryDataSource.getSeqResources());\r\n+      }\r\n+      if (unseqFileNum == null) {\r\n+        unseqFileNumMap.put(context.getQueryId(), new HashSet<>(queryDataSource.getUnseqResources()));\r\n+      } else {\r\n+        unseqFileNum.addAll(queryDataSource.getUnseqResources());\r\n+      }\r\n+    }\r\n+    return queryDataSource;\r\n   }\r\n \r\n   /**\r\n    * Whenever the jdbc request is closed normally or abnormally, this method must be invoked. All\r\n    * query tokens created by this jdbc request must be cleared.\r\n    */\r\n   public void endQuery(long queryId) throws StorageEngineException {\r\n+    try {\r\n+      if (config.isEnablePerformanceTracing()) {\r\n+        if (seqFileNumMap.get(queryId) != null && unseqFileNumMap.get(queryId) != null) {\r\n+          TracingManager.getInstance().writeTsFileInfo(queryId, seqFileNumMap.remove(queryId).size(),\r\n+              unseqFileNumMap.remove(queryId).size());\r\n+        }\r\n+        if (chunkNumMap.get(queryId) != null && chunkSizeMap.get(queryId) != null) {\r\n+          TracingManager.getInstance()\r\n+              .writeChunksInfo(queryId, chunkNumMap.remove(queryId), chunkSizeMap.remove(queryId));\r\n+        }\r\n+      }\r\n+    } catch (IOException e) {\r\n+      logger.error(\r\n+          \"Error while writing performance info to {}, {}\",\r\n+          config.getTracingDir() + File.separator + IoTDBConstant.TRACING_LOG, e);\r", "originalCommit": "4a15cace80b751e912c7d7d8e96dc0b5774a99a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a7ed2bed6cfedfc4aecc597e07a1b08f05e15f8f", "url": "https://github.com/apache/iotdb/commit/a7ed2bed6cfedfc4aecc597e07a1b08f05e15f8f", "message": "fix typo", "committedDate": "2020-06-29T03:02:36Z", "type": "commit"}]}