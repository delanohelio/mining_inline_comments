{"pr_number": 1189, "pr_title": "Comparison IoTDB with other TSDBs", "pr_createdAt": "2020-05-11T09:52:54Z", "pr_url": "https://github.com/apache/iotdb/pull/1189", "timeline": [{"oid": "edbd41d4e7c2b912384a0c58c6caa46401ad66e0", "url": "https://github.com/apache/iotdb/commit/edbd41d4e7c2b912384a0c58c6caa46401ad66e0", "message": "add a tsdb comaprison article", "committedDate": "2020-04-28T10:32:49Z", "type": "commit"}, {"oid": "dd9193f0b61f9274249fd938c30b88ee5cd1c8af", "url": "https://github.com/apache/iotdb/commit/dd9193f0b61f9274249fd938c30b88ee5cd1c8af", "message": "Merge remote-tracking branch 'origin/master' into comparison_doc", "committedDate": "2020-05-11T09:48:59Z", "type": "commit"}, {"oid": "1aa8114ea58a90286f5c3cc41bea2c1324dcc4de", "url": "https://github.com/apache/iotdb/commit/1aa8114ea58a90286f5c3cc41bea2c1324dcc4de", "message": "add license descrption of IoTDB", "committedDate": "2020-05-11T09:50:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzODA2MA==", "url": "https://github.com/apache/iotdb/pull/1189#discussion_r422938060", "bodyText": "How about adding a separate section/item to highlight distributed functions?\nThis is an important advantage of iotdb over others.", "author": "vesense", "createdAt": "2020-05-11T10:20:40Z", "path": "docs/UserGuide/9-Comparison/TSDB-Comparison.md", "diffHunk": "@@ -0,0 +1,400 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+    \n+        http://www.apache.org/licenses/LICENSE-2.0\n+    \n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+## Known Time Series Database\n+\n+As the time series data is more and more important, \n+several open sourced time series databases are intorduced in the world.\n+However, few of them are developed for IoT or IIoT (Industrial IoT) scenario in particular. \n+\n+\n+We choose 3 kinds of TSDBs here.\n+\n+* InfluxDB - Native Time series database\n+\n+  InfluxDB is one of the most popular TSDBs. \n+  \n+  Interface: InfluxQL and HTTP API\n+\n+* OpenTSDB and KairosDB - Time series database based on NoSQL\n+\n+  These two DBs are similar, while the first is based on HBase and the second is based on Cassandra.\n+  Both of them provides RESTful style API.\n+  \n+  Interface: Restful API\n+\n+* TimeSacleDB - Time series database based on Relational Database\n+\n+  Interface: SQL\n+\n+Prometheus and Druid are also famous for time series data management. \n+However, Prometheus focuses on how to collect data, how to visualize data and how to alert warnings.\n+Druid focuses on how to analyze data with OLAP workload. We omit them here.\n+ \n+\n+## Comparison \n+We compare the above time series database from two aspects: the feature comparison and the performance\n+comparison.\n+\n+\n+### Feature Comparison\n+\n+I list the basic features comparison of these databases. \n+\n+Legend:\n+- O: big support greatly\n+- o: support\n+- x: not support\n+- :\\-( : support but not very good\n+- ?: unknown\n+\n+\n+#### Basic Features\n+\n+| TSDB                        | IoTDB                       | InfluxDB   | OpenTSDB   | KairosDB   | TimescaleDB |   \n+|-----------------------------|-----------------------------|------------|------------|------------|-------------|  \n+| OpenSource                  | **o**                       | o          | o          | **o**      | o           |   \n+| SQL\\-like                   | o                           | o          | x          | x          | **O**       |   \n+| Schema                      | \"Tree\\-based, tag\\-based\\\"  | tag\\-based | tag\\-based | tag\\-based | Relational  |   \n+| Writing out\\-of\\-order data | o                           | o          | o          | o          | o           |   \n+| Schema\\-less                | o                           | o          | o          | o          | o           |   \n+| Batch insertion             | o                           | o          | o          | o          | o           |   \n+| Time range filter           | o                           | o          | o          | o          | o           |   \n+| Order by time               | **O**                       | o          | x          | x          | o           |   \n+| Value filter                | o                           | o          | x          | x          | o           |   \n+| Downsampling                | **O**                       | o          | o          | o          | o           |   \n+| Fill                        | **O**                       | o          | o          | x          | o           |   \n+| LIMIT                       | o                           | o          | o          | o          | o           |   \n+| SLIMIT                      | o                           | o          | x          | x          | ?           |   \n+| Latest value                | O                           | o          | o          | x          | o           |\n+\n+**Details**\n+\n+* OpenSOurce:  \n+ \n+  * IoTDB uses Apache License 2.0 and it is in Apache incubator. \n+  * InfluxDB uses MIT license. However, **the cluster version is not open sourced**.", "originalCommit": "1aa8114ea58a90286f5c3cc41bea2c1324dcc4de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk5Mzg4Ng==", "url": "https://github.com/apache/iotdb/pull/1189#discussion_r443993886", "bodyText": "We can do that after our cluster mode is published.", "author": "jixuan1989", "createdAt": "2020-06-23T06:39:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzODA2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzODEwMQ==", "url": "https://github.com/apache/iotdb/pull/1189#discussion_r422938101", "bodyText": "add flink integration", "author": "vesense", "createdAt": "2020-05-11T10:20:44Z", "path": "docs/UserGuide/9-Comparison/TSDB-Comparison.md", "diffHunk": "@@ -0,0 +1,400 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+    \n+        http://www.apache.org/licenses/LICENSE-2.0\n+    \n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+## Known Time Series Database\n+\n+As the time series data is more and more important, \n+several open sourced time series databases are intorduced in the world.\n+However, few of them are developed for IoT or IIoT (Industrial IoT) scenario in particular. \n+\n+\n+We choose 3 kinds of TSDBs here.\n+\n+* InfluxDB - Native Time series database\n+\n+  InfluxDB is one of the most popular TSDBs. \n+  \n+  Interface: InfluxQL and HTTP API\n+\n+* OpenTSDB and KairosDB - Time series database based on NoSQL\n+\n+  These two DBs are similar, while the first is based on HBase and the second is based on Cassandra.\n+  Both of them provides RESTful style API.\n+  \n+  Interface: Restful API\n+\n+* TimeSacleDB - Time series database based on Relational Database\n+\n+  Interface: SQL\n+\n+Prometheus and Druid are also famous for time series data management. \n+However, Prometheus focuses on how to collect data, how to visualize data and how to alert warnings.\n+Druid focuses on how to analyze data with OLAP workload. We omit them here.\n+ \n+\n+## Comparison \n+We compare the above time series database from two aspects: the feature comparison and the performance\n+comparison.\n+\n+\n+### Feature Comparison\n+\n+I list the basic features comparison of these databases. \n+\n+Legend:\n+- O: big support greatly\n+- o: support\n+- x: not support\n+- :\\-( : support but not very good\n+- ?: unknown\n+\n+\n+#### Basic Features\n+\n+| TSDB                        | IoTDB                       | InfluxDB   | OpenTSDB   | KairosDB   | TimescaleDB |   \n+|-----------------------------|-----------------------------|------------|------------|------------|-------------|  \n+| OpenSource                  | **o**                       | o          | o          | **o**      | o           |   \n+| SQL\\-like                   | o                           | o          | x          | x          | **O**       |   \n+| Schema                      | \"Tree\\-based, tag\\-based\\\"  | tag\\-based | tag\\-based | tag\\-based | Relational  |   \n+| Writing out\\-of\\-order data | o                           | o          | o          | o          | o           |   \n+| Schema\\-less                | o                           | o          | o          | o          | o           |   \n+| Batch insertion             | o                           | o          | o          | o          | o           |   \n+| Time range filter           | o                           | o          | o          | o          | o           |   \n+| Order by time               | **O**                       | o          | x          | x          | o           |   \n+| Value filter                | o                           | o          | x          | x          | o           |   \n+| Downsampling                | **O**                       | o          | o          | o          | o           |   \n+| Fill                        | **O**                       | o          | o          | x          | o           |   \n+| LIMIT                       | o                           | o          | o          | o          | o           |   \n+| SLIMIT                      | o                           | o          | x          | x          | ?           |   \n+| Latest value                | O                           | o          | o          | x          | o           |\n+\n+**Details**\n+\n+* OpenSOurce:  \n+ \n+  * IoTDB uses Apache License 2.0 and it is in Apache incubator. \n+  * InfluxDB uses MIT license. However, **the cluster version is not open sourced**.\n+  * OpenTSDB uses LGPL2.1, which **is not compatible with Apache License**.\n+  * KairosDB uses Apache License 2.0.\n+  * TimescaleDB uses Timescale License, which is not free for enterprise. \n+\n+* SQL like: \n+\n+  * IoTDB and InfluxDB supports SQL like language. Besides, The integration of IoTDB and Calcite is alomost done (a PR has been submitted), which means IoTDB will support Standard SQL.\n+  * OpenTSDB and KairosDB only support Rest API. Besides, IoTDB also supports Rest API (a PR has been submitted).\n+  * TimescaleDB uses the SQL the same with PG.\n+  \n+* Schema:\n+\n+  * IoTDB: IoTDB proposes a [Tree based schema](http://iotdb.apache.org/UserGuide/Master/2-Concept/1-Data%20Model%20and%20Terminology.html#data-model-and-terminology). \n+   It is quite different with other TSDBs. However, the kind of schema has the following advantages:\n+    \n+    * In many industrial scenarios, the management of devices are hierarchical, rather than flat.\n+    That is why we think a tree based schema is better than tag-value based schema.\n+    \n+    * In many real world applications, tag names are constant. For example, a wind turbine manufacturer\n+    always identify their wind turbines by which country it locates, the farm name it belongs to, and it ID in the farm.\n+    So, a 4-depth tree (\"root.the-country.the-farm.the-id\") is fine. \n+    You do not need to repeat to tell IoTDB the 2nd level of the tree is for country name, \n+    the 3rd level is for farm id, etc..\n+    \n+    * A path based time series ID definition also supports flexible queries, like \"root.\\*.a.b.\\*\", wehre \\* is wildcard character.\n+  \n+  * InfluxDB, KairosDB, OpenTSDB are tag-value based, which is more popular currently.\n+  \n+  * TimescaleDB uses relational table.   \n+\n+* Order by time:\n+  \n+  Order by time seems quite trivil for time series database. But... if we consider another featuer, called align by time,\n+  something becomes interesting.  And, that is why we mark OpenTSDB and KairosDB unsupported.\n+  \n+  Actually, in each time series, all these TSDBs support order data by timestamps.\n+  \n+  However, OpenTSDB and KairosDB do not support order the data from different timeseries in the time order.\n+  \n+  Ok, considering a new case: I have two time series, one is for the wind speed in wind farm1, \n+  another is for the generated energy of wind turbine1 in farm1. If we want to analyze the relation between the \n+  wind speed and the generated energy, we have to know the values of both at the same time.\n+  That is to say, we have to align the two time series in the time dimension.\n+  \n+  So, the result should be:\n+  \n+  | timestamp |  wind speed | generated energy |\n+  |-----------|-------------|------------------|\n+  |    1      |     5.0     |         13.1     |\n+  |    2      |     6.0     |         13.3     |\n+  |    3      |     null    |         13.1     |\n+  \n+  or,\n+  \n+    | timestamp |     series name   |    value   |\n+    |-----------|-------------------|------------|\n+    |    1      |       wind speed  |    5.0     |\n+    |    1      | generated energy  |    13.1    |\n+    |    2      |       wind speed  |    6.0     |\n+    |    2      | generated energy  |    13.3    |\n+    |    3      | generated energy  |    13.1    |      \n+  \n+ Though the second table format does not algin data by the time dimension, but it is easy to be implemented in the client-side,\n+ by justing scanning data row by row.\n+ \n+ IoTDB supports the first table format (called align by time), InfluxDB supports the second table format.\n+\n+* Downsampling:\n+\n+  Downsampling is for changing the granularity of timeseries, e.g., from 10Hz to 1Hz, or 1 point per day.\n+  \n+  Different with other systems, IoTDB downsamples data in real time, while others serialized downsampled data on disk.      \n+  That is to say,\n+  \n+  * IoTDB supports **adhoc** downsampling data in **arbitrary time**. \n+  e.g., a SQL returns 1 point per 5 minutes and start with 2020-04-27 08:00:00 while another SQL returns 1 point per 5 minutes + 10 seconds and start with 2020-04-27 08:00:01.\n+  \uff08InfluxDB also supports adhoc downsampling but the performance is ..... hm)\n+  \n+  * There is no disk loss for IoTDB.\n+  \n+\n+* Fill:\n+\n+  Sometimes we thought the data is collected in some fixed frequency, e.g., 1Hz (1 point per second). \n+  But usually, we may lost some data points, because the network is unstalbe, the machine is busy, or the machine is down for several minutes.\n+  \n+  In this case, filling these holes is important. Data scientists can avoid to many so called dirty work, e.g., data clean.\n+  \n+  InfluxDB and OpenTSDB only support using fill in a group by statement, while IoTDB supports to fill data when just given a particular timestamp.\n+  Besides, IoTDB supports several strategies for filling data.\n+       \n+* Slimit:\n+\n+  Slimit means return limited number of measurements (or, fields in InfluxDB). \n+  For example, a wind turbine may have 1000 measurements (speed, voltage, etc..), using slimit and soffset can just return a part of them.    \n+  \n+\n+* Latest value:\n+\n+  As one of the most basic timeseries based applications is monitoring the latest data. \n+  Therefore, a query to return the latest value of a time series is very important.\n+  IoTDB and OpenTSDB support that with a special SQL or API,\n+  while InfluxDB supports that using an aggregation function.\n+  (the reason why IoTDB porvides a special SQL is IoTDB optimizes the query expressly.)\n+  \n+   \n+  \n+**Conclusion**:\n+\n+Well, if we compare the basic features, we can find that OpenTSDB and KairosDB somehow lack some important query features.\n+TimescaleDB can not be freely used in business.\n+IoTDB and InfluxDB can meet most requirements of time series data management, while they have some difference.\n+\n+\n+#### Advanced Features\n+\n+I listed some interesting features that these systems may differ.\n+\n+| TSDB                        | IoTDB                           | InfluxDB   | OpenTSDB   | KairosDB   | TimescaleDB |   \n+|-----------------------------|---------------------------------|------------|------------|------------|-------------|   \n+| Align by time               | **O**                           | o          | x          | x          | o           |   \n+| Compression                 | **O**                           | :\\-(       | :\\-\\(      | :\\-\\(      | :\\-\\(       |   \n+| MQTT support                | **O**                           | o          | x          | x          | :\\-\\(       |   \n+| Run on Edge-side Device     | **O**                           | o          | x          | :\\-\\(      | o           |   \n+| Multi\\-instance Sync        | **O**                           | x          | x          | x          | x           |   \n+| JDBC Driver                 | **o**                           | x          | x          | x          | x           |   \n+| Standard SQL                | o                               | x          | x          | x          | **O**       |   \n+| Spark integration           | **O**                           | x          | x          | x          | x           | ", "originalCommit": "1aa8114ea58a90286f5c3cc41bea2c1324dcc4de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ0NjIyNQ==", "url": "https://github.com/apache/iotdb/pull/1189#discussion_r423446225", "bodyText": "fixed", "author": "qiaojialin", "createdAt": "2020-05-12T03:52:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzODEwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkyOTYzMA==", "url": "https://github.com/apache/iotdb/pull/1189#discussion_r422929630", "bodyText": "OpenSource", "author": "liutaohua", "createdAt": "2020-05-11T10:05:38Z", "path": "docs/UserGuide/9-Comparison/TSDB-Comparison.md", "diffHunk": "@@ -0,0 +1,400 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+    \n+        http://www.apache.org/licenses/LICENSE-2.0\n+    \n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+## Known Time Series Database\n+\n+As the time series data is more and more important, \n+several open sourced time series databases are intorduced in the world.\n+However, few of them are developed for IoT or IIoT (Industrial IoT) scenario in particular. \n+\n+\n+We choose 3 kinds of TSDBs here.\n+\n+* InfluxDB - Native Time series database\n+\n+  InfluxDB is one of the most popular TSDBs. \n+  \n+  Interface: InfluxQL and HTTP API\n+\n+* OpenTSDB and KairosDB - Time series database based on NoSQL\n+\n+  These two DBs are similar, while the first is based on HBase and the second is based on Cassandra.\n+  Both of them provides RESTful style API.\n+  \n+  Interface: Restful API\n+\n+* TimeSacleDB - Time series database based on Relational Database\n+\n+  Interface: SQL\n+\n+Prometheus and Druid are also famous for time series data management. \n+However, Prometheus focuses on how to collect data, how to visualize data and how to alert warnings.\n+Druid focuses on how to analyze data with OLAP workload. We omit them here.\n+ \n+\n+## Comparison \n+We compare the above time series database from two aspects: the feature comparison and the performance\n+comparison.\n+\n+\n+### Feature Comparison\n+\n+I list the basic features comparison of these databases. \n+\n+Legend:\n+- O: big support greatly\n+- o: support\n+- x: not support\n+- :\\-( : support but not very good\n+- ?: unknown\n+\n+\n+#### Basic Features\n+\n+| TSDB                        | IoTDB                       | InfluxDB   | OpenTSDB   | KairosDB   | TimescaleDB |   \n+|-----------------------------|-----------------------------|------------|------------|------------|-------------|  \n+| OpenSource                  | **o**                       | o          | o          | **o**      | o           |   \n+| SQL\\-like                   | o                           | o          | x          | x          | **O**       |   \n+| Schema                      | \"Tree\\-based, tag\\-based\\\"  | tag\\-based | tag\\-based | tag\\-based | Relational  |   \n+| Writing out\\-of\\-order data | o                           | o          | o          | o          | o           |   \n+| Schema\\-less                | o                           | o          | o          | o          | o           |   \n+| Batch insertion             | o                           | o          | o          | o          | o           |   \n+| Time range filter           | o                           | o          | o          | o          | o           |   \n+| Order by time               | **O**                       | o          | x          | x          | o           |   \n+| Value filter                | o                           | o          | x          | x          | o           |   \n+| Downsampling                | **O**                       | o          | o          | o          | o           |   \n+| Fill                        | **O**                       | o          | o          | x          | o           |   \n+| LIMIT                       | o                           | o          | o          | o          | o           |   \n+| SLIMIT                      | o                           | o          | x          | x          | ?           |   \n+| Latest value                | O                           | o          | o          | x          | o           |\n+\n+**Details**\n+\n+* OpenSOurce:  ", "originalCommit": "1aa8114ea58a90286f5c3cc41bea2c1324dcc4de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ0NjE2MA==", "url": "https://github.com/apache/iotdb/pull/1189#discussion_r423446160", "bodyText": "fixed", "author": "qiaojialin", "createdAt": "2020-05-12T03:52:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkyOTYzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzMzE3OQ==", "url": "https://github.com/apache/iotdb/pull/1189#discussion_r422933179", "bodyText": "How about describing what's special about the LGPL?\neg:\nThis means that any changes you make must also be open source", "author": "liutaohua", "createdAt": "2020-05-11T10:12:01Z", "path": "docs/UserGuide/9-Comparison/TSDB-Comparison.md", "diffHunk": "@@ -0,0 +1,400 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+    \n+        http://www.apache.org/licenses/LICENSE-2.0\n+    \n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+## Known Time Series Database\n+\n+As the time series data is more and more important, \n+several open sourced time series databases are intorduced in the world.\n+However, few of them are developed for IoT or IIoT (Industrial IoT) scenario in particular. \n+\n+\n+We choose 3 kinds of TSDBs here.\n+\n+* InfluxDB - Native Time series database\n+\n+  InfluxDB is one of the most popular TSDBs. \n+  \n+  Interface: InfluxQL and HTTP API\n+\n+* OpenTSDB and KairosDB - Time series database based on NoSQL\n+\n+  These two DBs are similar, while the first is based on HBase and the second is based on Cassandra.\n+  Both of them provides RESTful style API.\n+  \n+  Interface: Restful API\n+\n+* TimeSacleDB - Time series database based on Relational Database\n+\n+  Interface: SQL\n+\n+Prometheus and Druid are also famous for time series data management. \n+However, Prometheus focuses on how to collect data, how to visualize data and how to alert warnings.\n+Druid focuses on how to analyze data with OLAP workload. We omit them here.\n+ \n+\n+## Comparison \n+We compare the above time series database from two aspects: the feature comparison and the performance\n+comparison.\n+\n+\n+### Feature Comparison\n+\n+I list the basic features comparison of these databases. \n+\n+Legend:\n+- O: big support greatly\n+- o: support\n+- x: not support\n+- :\\-( : support but not very good\n+- ?: unknown\n+\n+\n+#### Basic Features\n+\n+| TSDB                        | IoTDB                       | InfluxDB   | OpenTSDB   | KairosDB   | TimescaleDB |   \n+|-----------------------------|-----------------------------|------------|------------|------------|-------------|  \n+| OpenSource                  | **o**                       | o          | o          | **o**      | o           |   \n+| SQL\\-like                   | o                           | o          | x          | x          | **O**       |   \n+| Schema                      | \"Tree\\-based, tag\\-based\\\"  | tag\\-based | tag\\-based | tag\\-based | Relational  |   \n+| Writing out\\-of\\-order data | o                           | o          | o          | o          | o           |   \n+| Schema\\-less                | o                           | o          | o          | o          | o           |   \n+| Batch insertion             | o                           | o          | o          | o          | o           |   \n+| Time range filter           | o                           | o          | o          | o          | o           |   \n+| Order by time               | **O**                       | o          | x          | x          | o           |   \n+| Value filter                | o                           | o          | x          | x          | o           |   \n+| Downsampling                | **O**                       | o          | o          | o          | o           |   \n+| Fill                        | **O**                       | o          | o          | x          | o           |   \n+| LIMIT                       | o                           | o          | o          | o          | o           |   \n+| SLIMIT                      | o                           | o          | x          | x          | ?           |   \n+| Latest value                | O                           | o          | o          | x          | o           |\n+\n+**Details**\n+\n+* OpenSOurce:  \n+ \n+  * IoTDB uses Apache License 2.0 and it is in Apache incubator. \n+  * InfluxDB uses MIT license. However, **the cluster version is not open sourced**.\n+  * OpenTSDB uses LGPL2.1, which **is not compatible with Apache License**.", "originalCommit": "1aa8114ea58a90286f5c3cc41bea2c1324dcc4de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwMDc5Mw==", "url": "https://github.com/apache/iotdb/pull/1189#discussion_r444000793", "bodyText": "It is hard to say... LGPL is more loose that GPL. It allows users do not open their codes in some conditions.", "author": "jixuan1989", "createdAt": "2020-06-23T06:55:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzMzE3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzNDAxNA==", "url": "https://github.com/apache/iotdb/pull/1189#discussion_r422934014", "bodyText": "I think it's better to spell out the future version here than to say what we'll support in the future.\neg:\nThe integration of IoTDB and Calcite will in 0.10.1", "author": "liutaohua", "createdAt": "2020-05-11T10:13:28Z", "path": "docs/UserGuide/9-Comparison/TSDB-Comparison.md", "diffHunk": "@@ -0,0 +1,400 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+    \n+        http://www.apache.org/licenses/LICENSE-2.0\n+    \n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+## Known Time Series Database\n+\n+As the time series data is more and more important, \n+several open sourced time series databases are intorduced in the world.\n+However, few of them are developed for IoT or IIoT (Industrial IoT) scenario in particular. \n+\n+\n+We choose 3 kinds of TSDBs here.\n+\n+* InfluxDB - Native Time series database\n+\n+  InfluxDB is one of the most popular TSDBs. \n+  \n+  Interface: InfluxQL and HTTP API\n+\n+* OpenTSDB and KairosDB - Time series database based on NoSQL\n+\n+  These two DBs are similar, while the first is based on HBase and the second is based on Cassandra.\n+  Both of them provides RESTful style API.\n+  \n+  Interface: Restful API\n+\n+* TimeSacleDB - Time series database based on Relational Database\n+\n+  Interface: SQL\n+\n+Prometheus and Druid are also famous for time series data management. \n+However, Prometheus focuses on how to collect data, how to visualize data and how to alert warnings.\n+Druid focuses on how to analyze data with OLAP workload. We omit them here.\n+ \n+\n+## Comparison \n+We compare the above time series database from two aspects: the feature comparison and the performance\n+comparison.\n+\n+\n+### Feature Comparison\n+\n+I list the basic features comparison of these databases. \n+\n+Legend:\n+- O: big support greatly\n+- o: support\n+- x: not support\n+- :\\-( : support but not very good\n+- ?: unknown\n+\n+\n+#### Basic Features\n+\n+| TSDB                        | IoTDB                       | InfluxDB   | OpenTSDB   | KairosDB   | TimescaleDB |   \n+|-----------------------------|-----------------------------|------------|------------|------------|-------------|  \n+| OpenSource                  | **o**                       | o          | o          | **o**      | o           |   \n+| SQL\\-like                   | o                           | o          | x          | x          | **O**       |   \n+| Schema                      | \"Tree\\-based, tag\\-based\\\"  | tag\\-based | tag\\-based | tag\\-based | Relational  |   \n+| Writing out\\-of\\-order data | o                           | o          | o          | o          | o           |   \n+| Schema\\-less                | o                           | o          | o          | o          | o           |   \n+| Batch insertion             | o                           | o          | o          | o          | o           |   \n+| Time range filter           | o                           | o          | o          | o          | o           |   \n+| Order by time               | **O**                       | o          | x          | x          | o           |   \n+| Value filter                | o                           | o          | x          | x          | o           |   \n+| Downsampling                | **O**                       | o          | o          | o          | o           |   \n+| Fill                        | **O**                       | o          | o          | x          | o           |   \n+| LIMIT                       | o                           | o          | o          | o          | o           |   \n+| SLIMIT                      | o                           | o          | x          | x          | ?           |   \n+| Latest value                | O                           | o          | o          | x          | o           |\n+\n+**Details**\n+\n+* OpenSOurce:  \n+ \n+  * IoTDB uses Apache License 2.0 and it is in Apache incubator. \n+  * InfluxDB uses MIT license. However, **the cluster version is not open sourced**.\n+  * OpenTSDB uses LGPL2.1, which **is not compatible with Apache License**.\n+  * KairosDB uses Apache License 2.0.\n+  * TimescaleDB uses Timescale License, which is not free for enterprise. \n+\n+* SQL like: \n+\n+  * IoTDB and InfluxDB supports SQL like language. Besides, The integration of IoTDB and Calcite is alomost done (a PR has been submitted), which means IoTDB will support Standard SQL.", "originalCommit": "1aa8114ea58a90286f5c3cc41bea2c1324dcc4de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAzODc1NQ==", "url": "https://github.com/apache/iotdb/pull/1189#discussion_r423038755", "bodyText": "I agree with @liutaohua here. And a little typo: almost.", "author": "Alima777", "createdAt": "2020-05-11T13:28:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzNDAxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk5OTI3Nw==", "url": "https://github.com/apache/iotdb/pull/1189#discussion_r443999277", "bodyText": "will do this after the PR is merged.", "author": "jixuan1989", "createdAt": "2020-06-23T06:51:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzNDAxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAzNjg4NQ==", "url": "https://github.com/apache/iotdb/pull/1189#discussion_r423036885", "bodyText": "TimescaleDB", "author": "Alima777", "createdAt": "2020-05-11T13:25:48Z", "path": "docs/UserGuide/9-Comparison/TSDB-Comparison.md", "diffHunk": "@@ -0,0 +1,400 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+    \n+        http://www.apache.org/licenses/LICENSE-2.0\n+    \n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+## Known Time Series Database\n+\n+As the time series data is more and more important, \n+several open sourced time series databases are intorduced in the world.\n+However, few of them are developed for IoT or IIoT (Industrial IoT) scenario in particular. \n+\n+\n+We choose 3 kinds of TSDBs here.\n+\n+* InfluxDB - Native Time series database\n+\n+  InfluxDB is one of the most popular TSDBs. \n+  \n+  Interface: InfluxQL and HTTP API\n+\n+* OpenTSDB and KairosDB - Time series database based on NoSQL\n+\n+  These two DBs are similar, while the first is based on HBase and the second is based on Cassandra.\n+  Both of them provides RESTful style API.\n+  \n+  Interface: Restful API\n+\n+* TimeSacleDB - Time series database based on Relational Database", "originalCommit": "1aa8114ea58a90286f5c3cc41bea2c1324dcc4de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0MjI4MQ==", "url": "https://github.com/apache/iotdb/pull/1189#discussion_r423042281", "bodyText": "typo: its ID. And. maybe \"root.countryName.farmName.id\" is better I think.", "author": "Alima777", "createdAt": "2020-05-11T13:33:42Z", "path": "docs/UserGuide/9-Comparison/TSDB-Comparison.md", "diffHunk": "@@ -0,0 +1,400 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+    \n+        http://www.apache.org/licenses/LICENSE-2.0\n+    \n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+## Known Time Series Database\n+\n+As the time series data is more and more important, \n+several open sourced time series databases are intorduced in the world.\n+However, few of them are developed for IoT or IIoT (Industrial IoT) scenario in particular. \n+\n+\n+We choose 3 kinds of TSDBs here.\n+\n+* InfluxDB - Native Time series database\n+\n+  InfluxDB is one of the most popular TSDBs. \n+  \n+  Interface: InfluxQL and HTTP API\n+\n+* OpenTSDB and KairosDB - Time series database based on NoSQL\n+\n+  These two DBs are similar, while the first is based on HBase and the second is based on Cassandra.\n+  Both of them provides RESTful style API.\n+  \n+  Interface: Restful API\n+\n+* TimeSacleDB - Time series database based on Relational Database\n+\n+  Interface: SQL\n+\n+Prometheus and Druid are also famous for time series data management. \n+However, Prometheus focuses on how to collect data, how to visualize data and how to alert warnings.\n+Druid focuses on how to analyze data with OLAP workload. We omit them here.\n+ \n+\n+## Comparison \n+We compare the above time series database from two aspects: the feature comparison and the performance\n+comparison.\n+\n+\n+### Feature Comparison\n+\n+I list the basic features comparison of these databases. \n+\n+Legend:\n+- O: big support greatly\n+- o: support\n+- x: not support\n+- :\\-( : support but not very good\n+- ?: unknown\n+\n+\n+#### Basic Features\n+\n+| TSDB                        | IoTDB                       | InfluxDB   | OpenTSDB   | KairosDB   | TimescaleDB |   \n+|-----------------------------|-----------------------------|------------|------------|------------|-------------|  \n+| OpenSource                  | **o**                       | o          | o          | **o**      | o           |   \n+| SQL\\-like                   | o                           | o          | x          | x          | **O**       |   \n+| Schema                      | \"Tree\\-based, tag\\-based\\\"  | tag\\-based | tag\\-based | tag\\-based | Relational  |   \n+| Writing out\\-of\\-order data | o                           | o          | o          | o          | o           |   \n+| Schema\\-less                | o                           | o          | o          | o          | o           |   \n+| Batch insertion             | o                           | o          | o          | o          | o           |   \n+| Time range filter           | o                           | o          | o          | o          | o           |   \n+| Order by time               | **O**                       | o          | x          | x          | o           |   \n+| Value filter                | o                           | o          | x          | x          | o           |   \n+| Downsampling                | **O**                       | o          | o          | o          | o           |   \n+| Fill                        | **O**                       | o          | o          | x          | o           |   \n+| LIMIT                       | o                           | o          | o          | o          | o           |   \n+| SLIMIT                      | o                           | o          | x          | x          | ?           |   \n+| Latest value                | O                           | o          | o          | x          | o           |\n+\n+**Details**\n+\n+* OpenSOurce:  \n+ \n+  * IoTDB uses Apache License 2.0 and it is in Apache incubator. \n+  * InfluxDB uses MIT license. However, **the cluster version is not open sourced**.\n+  * OpenTSDB uses LGPL2.1, which **is not compatible with Apache License**.\n+  * KairosDB uses Apache License 2.0.\n+  * TimescaleDB uses Timescale License, which is not free for enterprise. \n+\n+* SQL like: \n+\n+  * IoTDB and InfluxDB supports SQL like language. Besides, The integration of IoTDB and Calcite is alomost done (a PR has been submitted), which means IoTDB will support Standard SQL.\n+  * OpenTSDB and KairosDB only support Rest API. Besides, IoTDB also supports Rest API (a PR has been submitted).\n+  * TimescaleDB uses the SQL the same with PG.\n+  \n+* Schema:\n+\n+  * IoTDB: IoTDB proposes a [Tree based schema](http://iotdb.apache.org/UserGuide/Master/2-Concept/1-Data%20Model%20and%20Terminology.html#data-model-and-terminology). \n+   It is quite different with other TSDBs. However, the kind of schema has the following advantages:\n+    \n+    * In many industrial scenarios, the management of devices are hierarchical, rather than flat.\n+    That is why we think a tree based schema is better than tag-value based schema.\n+    \n+    * In many real world applications, tag names are constant. For example, a wind turbine manufacturer\n+    always identify their wind turbines by which country it locates, the farm name it belongs to, and it ID in the farm.\n+    So, a 4-depth tree (\"root.the-country.the-farm.the-id\") is fine. ", "originalCommit": "1aa8114ea58a90286f5c3cc41bea2c1324dcc4de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0NDI4Mw==", "url": "https://github.com/apache/iotdb/pull/1189#discussion_r423044283", "bodyText": "How about putting this before IoTDB, to highlight the advantage of  tree based schema.", "author": "Alima777", "createdAt": "2020-05-11T13:36:43Z", "path": "docs/UserGuide/9-Comparison/TSDB-Comparison.md", "diffHunk": "@@ -0,0 +1,400 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+    \n+        http://www.apache.org/licenses/LICENSE-2.0\n+    \n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+## Known Time Series Database\n+\n+As the time series data is more and more important, \n+several open sourced time series databases are intorduced in the world.\n+However, few of them are developed for IoT or IIoT (Industrial IoT) scenario in particular. \n+\n+\n+We choose 3 kinds of TSDBs here.\n+\n+* InfluxDB - Native Time series database\n+\n+  InfluxDB is one of the most popular TSDBs. \n+  \n+  Interface: InfluxQL and HTTP API\n+\n+* OpenTSDB and KairosDB - Time series database based on NoSQL\n+\n+  These two DBs are similar, while the first is based on HBase and the second is based on Cassandra.\n+  Both of them provides RESTful style API.\n+  \n+  Interface: Restful API\n+\n+* TimeSacleDB - Time series database based on Relational Database\n+\n+  Interface: SQL\n+\n+Prometheus and Druid are also famous for time series data management. \n+However, Prometheus focuses on how to collect data, how to visualize data and how to alert warnings.\n+Druid focuses on how to analyze data with OLAP workload. We omit them here.\n+ \n+\n+## Comparison \n+We compare the above time series database from two aspects: the feature comparison and the performance\n+comparison.\n+\n+\n+### Feature Comparison\n+\n+I list the basic features comparison of these databases. \n+\n+Legend:\n+- O: big support greatly\n+- o: support\n+- x: not support\n+- :\\-( : support but not very good\n+- ?: unknown\n+\n+\n+#### Basic Features\n+\n+| TSDB                        | IoTDB                       | InfluxDB   | OpenTSDB   | KairosDB   | TimescaleDB |   \n+|-----------------------------|-----------------------------|------------|------------|------------|-------------|  \n+| OpenSource                  | **o**                       | o          | o          | **o**      | o           |   \n+| SQL\\-like                   | o                           | o          | x          | x          | **O**       |   \n+| Schema                      | \"Tree\\-based, tag\\-based\\\"  | tag\\-based | tag\\-based | tag\\-based | Relational  |   \n+| Writing out\\-of\\-order data | o                           | o          | o          | o          | o           |   \n+| Schema\\-less                | o                           | o          | o          | o          | o           |   \n+| Batch insertion             | o                           | o          | o          | o          | o           |   \n+| Time range filter           | o                           | o          | o          | o          | o           |   \n+| Order by time               | **O**                       | o          | x          | x          | o           |   \n+| Value filter                | o                           | o          | x          | x          | o           |   \n+| Downsampling                | **O**                       | o          | o          | o          | o           |   \n+| Fill                        | **O**                       | o          | o          | x          | o           |   \n+| LIMIT                       | o                           | o          | o          | o          | o           |   \n+| SLIMIT                      | o                           | o          | x          | x          | ?           |   \n+| Latest value                | O                           | o          | o          | x          | o           |\n+\n+**Details**\n+\n+* OpenSOurce:  \n+ \n+  * IoTDB uses Apache License 2.0 and it is in Apache incubator. \n+  * InfluxDB uses MIT license. However, **the cluster version is not open sourced**.\n+  * OpenTSDB uses LGPL2.1, which **is not compatible with Apache License**.\n+  * KairosDB uses Apache License 2.0.\n+  * TimescaleDB uses Timescale License, which is not free for enterprise. \n+\n+* SQL like: \n+\n+  * IoTDB and InfluxDB supports SQL like language. Besides, The integration of IoTDB and Calcite is alomost done (a PR has been submitted), which means IoTDB will support Standard SQL.\n+  * OpenTSDB and KairosDB only support Rest API. Besides, IoTDB also supports Rest API (a PR has been submitted).\n+  * TimescaleDB uses the SQL the same with PG.\n+  \n+* Schema:\n+\n+  * IoTDB: IoTDB proposes a [Tree based schema](http://iotdb.apache.org/UserGuide/Master/2-Concept/1-Data%20Model%20and%20Terminology.html#data-model-and-terminology). \n+   It is quite different with other TSDBs. However, the kind of schema has the following advantages:\n+    \n+    * In many industrial scenarios, the management of devices are hierarchical, rather than flat.\n+    That is why we think a tree based schema is better than tag-value based schema.\n+    \n+    * In many real world applications, tag names are constant. For example, a wind turbine manufacturer\n+    always identify their wind turbines by which country it locates, the farm name it belongs to, and it ID in the farm.\n+    So, a 4-depth tree (\"root.the-country.the-farm.the-id\") is fine. \n+    You do not need to repeat to tell IoTDB the 2nd level of the tree is for country name, \n+    the 3rd level is for farm id, etc..\n+    \n+    * A path based time series ID definition also supports flexible queries, like \"root.\\*.a.b.\\*\", wehre \\* is wildcard character.\n+  \n+  * InfluxDB, KairosDB, OpenTSDB are tag-value based, which is more popular currently.", "originalCommit": "1aa8114ea58a90286f5c3cc41bea2c1324dcc4de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0NTE1NA==", "url": "https://github.com/apache/iotdb/pull/1189#discussion_r423045154", "bodyText": "typo: feature.", "author": "Alima777", "createdAt": "2020-05-11T13:37:57Z", "path": "docs/UserGuide/9-Comparison/TSDB-Comparison.md", "diffHunk": "@@ -0,0 +1,400 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+    \n+        http://www.apache.org/licenses/LICENSE-2.0\n+    \n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+## Known Time Series Database\n+\n+As the time series data is more and more important, \n+several open sourced time series databases are intorduced in the world.\n+However, few of them are developed for IoT or IIoT (Industrial IoT) scenario in particular. \n+\n+\n+We choose 3 kinds of TSDBs here.\n+\n+* InfluxDB - Native Time series database\n+\n+  InfluxDB is one of the most popular TSDBs. \n+  \n+  Interface: InfluxQL and HTTP API\n+\n+* OpenTSDB and KairosDB - Time series database based on NoSQL\n+\n+  These two DBs are similar, while the first is based on HBase and the second is based on Cassandra.\n+  Both of them provides RESTful style API.\n+  \n+  Interface: Restful API\n+\n+* TimeSacleDB - Time series database based on Relational Database\n+\n+  Interface: SQL\n+\n+Prometheus and Druid are also famous for time series data management. \n+However, Prometheus focuses on how to collect data, how to visualize data and how to alert warnings.\n+Druid focuses on how to analyze data with OLAP workload. We omit them here.\n+ \n+\n+## Comparison \n+We compare the above time series database from two aspects: the feature comparison and the performance\n+comparison.\n+\n+\n+### Feature Comparison\n+\n+I list the basic features comparison of these databases. \n+\n+Legend:\n+- O: big support greatly\n+- o: support\n+- x: not support\n+- :\\-( : support but not very good\n+- ?: unknown\n+\n+\n+#### Basic Features\n+\n+| TSDB                        | IoTDB                       | InfluxDB   | OpenTSDB   | KairosDB   | TimescaleDB |   \n+|-----------------------------|-----------------------------|------------|------------|------------|-------------|  \n+| OpenSource                  | **o**                       | o          | o          | **o**      | o           |   \n+| SQL\\-like                   | o                           | o          | x          | x          | **O**       |   \n+| Schema                      | \"Tree\\-based, tag\\-based\\\"  | tag\\-based | tag\\-based | tag\\-based | Relational  |   \n+| Writing out\\-of\\-order data | o                           | o          | o          | o          | o           |   \n+| Schema\\-less                | o                           | o          | o          | o          | o           |   \n+| Batch insertion             | o                           | o          | o          | o          | o           |   \n+| Time range filter           | o                           | o          | o          | o          | o           |   \n+| Order by time               | **O**                       | o          | x          | x          | o           |   \n+| Value filter                | o                           | o          | x          | x          | o           |   \n+| Downsampling                | **O**                       | o          | o          | o          | o           |   \n+| Fill                        | **O**                       | o          | o          | x          | o           |   \n+| LIMIT                       | o                           | o          | o          | o          | o           |   \n+| SLIMIT                      | o                           | o          | x          | x          | ?           |   \n+| Latest value                | O                           | o          | o          | x          | o           |\n+\n+**Details**\n+\n+* OpenSOurce:  \n+ \n+  * IoTDB uses Apache License 2.0 and it is in Apache incubator. \n+  * InfluxDB uses MIT license. However, **the cluster version is not open sourced**.\n+  * OpenTSDB uses LGPL2.1, which **is not compatible with Apache License**.\n+  * KairosDB uses Apache License 2.0.\n+  * TimescaleDB uses Timescale License, which is not free for enterprise. \n+\n+* SQL like: \n+\n+  * IoTDB and InfluxDB supports SQL like language. Besides, The integration of IoTDB and Calcite is alomost done (a PR has been submitted), which means IoTDB will support Standard SQL.\n+  * OpenTSDB and KairosDB only support Rest API. Besides, IoTDB also supports Rest API (a PR has been submitted).\n+  * TimescaleDB uses the SQL the same with PG.\n+  \n+* Schema:\n+\n+  * IoTDB: IoTDB proposes a [Tree based schema](http://iotdb.apache.org/UserGuide/Master/2-Concept/1-Data%20Model%20and%20Terminology.html#data-model-and-terminology). \n+   It is quite different with other TSDBs. However, the kind of schema has the following advantages:\n+    \n+    * In many industrial scenarios, the management of devices are hierarchical, rather than flat.\n+    That is why we think a tree based schema is better than tag-value based schema.\n+    \n+    * In many real world applications, tag names are constant. For example, a wind turbine manufacturer\n+    always identify their wind turbines by which country it locates, the farm name it belongs to, and it ID in the farm.\n+    So, a 4-depth tree (\"root.the-country.the-farm.the-id\") is fine. \n+    You do not need to repeat to tell IoTDB the 2nd level of the tree is for country name, \n+    the 3rd level is for farm id, etc..\n+    \n+    * A path based time series ID definition also supports flexible queries, like \"root.\\*.a.b.\\*\", wehre \\* is wildcard character.\n+  \n+  * InfluxDB, KairosDB, OpenTSDB are tag-value based, which is more popular currently.\n+  \n+  * TimescaleDB uses relational table.   \n+\n+* Order by time:\n+  \n+  Order by time seems quite trivil for time series database. But... if we consider another featuer, called align by time,", "originalCommit": "1aa8114ea58a90286f5c3cc41bea2c1324dcc4de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0NzY5NA==", "url": "https://github.com/apache/iotdb/pull/1189#discussion_r423047694", "bodyText": "typo: unstable.", "author": "Alima777", "createdAt": "2020-05-11T13:41:36Z", "path": "docs/UserGuide/9-Comparison/TSDB-Comparison.md", "diffHunk": "@@ -0,0 +1,400 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+    \n+        http://www.apache.org/licenses/LICENSE-2.0\n+    \n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+## Known Time Series Database\n+\n+As the time series data is more and more important, \n+several open sourced time series databases are intorduced in the world.\n+However, few of them are developed for IoT or IIoT (Industrial IoT) scenario in particular. \n+\n+\n+We choose 3 kinds of TSDBs here.\n+\n+* InfluxDB - Native Time series database\n+\n+  InfluxDB is one of the most popular TSDBs. \n+  \n+  Interface: InfluxQL and HTTP API\n+\n+* OpenTSDB and KairosDB - Time series database based on NoSQL\n+\n+  These two DBs are similar, while the first is based on HBase and the second is based on Cassandra.\n+  Both of them provides RESTful style API.\n+  \n+  Interface: Restful API\n+\n+* TimeSacleDB - Time series database based on Relational Database\n+\n+  Interface: SQL\n+\n+Prometheus and Druid are also famous for time series data management. \n+However, Prometheus focuses on how to collect data, how to visualize data and how to alert warnings.\n+Druid focuses on how to analyze data with OLAP workload. We omit them here.\n+ \n+\n+## Comparison \n+We compare the above time series database from two aspects: the feature comparison and the performance\n+comparison.\n+\n+\n+### Feature Comparison\n+\n+I list the basic features comparison of these databases. \n+\n+Legend:\n+- O: big support greatly\n+- o: support\n+- x: not support\n+- :\\-( : support but not very good\n+- ?: unknown\n+\n+\n+#### Basic Features\n+\n+| TSDB                        | IoTDB                       | InfluxDB   | OpenTSDB   | KairosDB   | TimescaleDB |   \n+|-----------------------------|-----------------------------|------------|------------|------------|-------------|  \n+| OpenSource                  | **o**                       | o          | o          | **o**      | o           |   \n+| SQL\\-like                   | o                           | o          | x          | x          | **O**       |   \n+| Schema                      | \"Tree\\-based, tag\\-based\\\"  | tag\\-based | tag\\-based | tag\\-based | Relational  |   \n+| Writing out\\-of\\-order data | o                           | o          | o          | o          | o           |   \n+| Schema\\-less                | o                           | o          | o          | o          | o           |   \n+| Batch insertion             | o                           | o          | o          | o          | o           |   \n+| Time range filter           | o                           | o          | o          | o          | o           |   \n+| Order by time               | **O**                       | o          | x          | x          | o           |   \n+| Value filter                | o                           | o          | x          | x          | o           |   \n+| Downsampling                | **O**                       | o          | o          | o          | o           |   \n+| Fill                        | **O**                       | o          | o          | x          | o           |   \n+| LIMIT                       | o                           | o          | o          | o          | o           |   \n+| SLIMIT                      | o                           | o          | x          | x          | ?           |   \n+| Latest value                | O                           | o          | o          | x          | o           |\n+\n+**Details**\n+\n+* OpenSOurce:  \n+ \n+  * IoTDB uses Apache License 2.0 and it is in Apache incubator. \n+  * InfluxDB uses MIT license. However, **the cluster version is not open sourced**.\n+  * OpenTSDB uses LGPL2.1, which **is not compatible with Apache License**.\n+  * KairosDB uses Apache License 2.0.\n+  * TimescaleDB uses Timescale License, which is not free for enterprise. \n+\n+* SQL like: \n+\n+  * IoTDB and InfluxDB supports SQL like language. Besides, The integration of IoTDB and Calcite is alomost done (a PR has been submitted), which means IoTDB will support Standard SQL.\n+  * OpenTSDB and KairosDB only support Rest API. Besides, IoTDB also supports Rest API (a PR has been submitted).\n+  * TimescaleDB uses the SQL the same with PG.\n+  \n+* Schema:\n+\n+  * IoTDB: IoTDB proposes a [Tree based schema](http://iotdb.apache.org/UserGuide/Master/2-Concept/1-Data%20Model%20and%20Terminology.html#data-model-and-terminology). \n+   It is quite different with other TSDBs. However, the kind of schema has the following advantages:\n+    \n+    * In many industrial scenarios, the management of devices are hierarchical, rather than flat.\n+    That is why we think a tree based schema is better than tag-value based schema.\n+    \n+    * In many real world applications, tag names are constant. For example, a wind turbine manufacturer\n+    always identify their wind turbines by which country it locates, the farm name it belongs to, and it ID in the farm.\n+    So, a 4-depth tree (\"root.the-country.the-farm.the-id\") is fine. \n+    You do not need to repeat to tell IoTDB the 2nd level of the tree is for country name, \n+    the 3rd level is for farm id, etc..\n+    \n+    * A path based time series ID definition also supports flexible queries, like \"root.\\*.a.b.\\*\", wehre \\* is wildcard character.\n+  \n+  * InfluxDB, KairosDB, OpenTSDB are tag-value based, which is more popular currently.\n+  \n+  * TimescaleDB uses relational table.   \n+\n+* Order by time:\n+  \n+  Order by time seems quite trivil for time series database. But... if we consider another featuer, called align by time,\n+  something becomes interesting.  And, that is why we mark OpenTSDB and KairosDB unsupported.\n+  \n+  Actually, in each time series, all these TSDBs support order data by timestamps.\n+  \n+  However, OpenTSDB and KairosDB do not support order the data from different timeseries in the time order.\n+  \n+  Ok, considering a new case: I have two time series, one is for the wind speed in wind farm1, \n+  another is for the generated energy of wind turbine1 in farm1. If we want to analyze the relation between the \n+  wind speed and the generated energy, we have to know the values of both at the same time.\n+  That is to say, we have to align the two time series in the time dimension.\n+  \n+  So, the result should be:\n+  \n+  | timestamp |  wind speed | generated energy |\n+  |-----------|-------------|------------------|\n+  |    1      |     5.0     |         13.1     |\n+  |    2      |     6.0     |         13.3     |\n+  |    3      |     null    |         13.1     |\n+  \n+  or,\n+  \n+    | timestamp |     series name   |    value   |\n+    |-----------|-------------------|------------|\n+    |    1      |       wind speed  |    5.0     |\n+    |    1      | generated energy  |    13.1    |\n+    |    2      |       wind speed  |    6.0     |\n+    |    2      | generated energy  |    13.3    |\n+    |    3      | generated energy  |    13.1    |      \n+  \n+ Though the second table format does not algin data by the time dimension, but it is easy to be implemented in the client-side,\n+ by justing scanning data row by row.\n+ \n+ IoTDB supports the first table format (called align by time), InfluxDB supports the second table format.\n+\n+* Downsampling:\n+\n+  Downsampling is for changing the granularity of timeseries, e.g., from 10Hz to 1Hz, or 1 point per day.\n+  \n+  Different with other systems, IoTDB downsamples data in real time, while others serialized downsampled data on disk.      \n+  That is to say,\n+  \n+  * IoTDB supports **adhoc** downsampling data in **arbitrary time**. \n+  e.g., a SQL returns 1 point per 5 minutes and start with 2020-04-27 08:00:00 while another SQL returns 1 point per 5 minutes + 10 seconds and start with 2020-04-27 08:00:01.\n+  \uff08InfluxDB also supports adhoc downsampling but the performance is ..... hm)\n+  \n+  * There is no disk loss for IoTDB.\n+  \n+\n+* Fill:\n+\n+  Sometimes we thought the data is collected in some fixed frequency, e.g., 1Hz (1 point per second). \n+  But usually, we may lost some data points, because the network is unstalbe, the machine is busy, or the machine is down for several minutes.", "originalCommit": "1aa8114ea58a90286f5c3cc41bea2c1324dcc4de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA1NDI3NQ==", "url": "https://github.com/apache/iotdb/pull/1189#discussion_r423054275", "bodyText": "I think \"interesting\" is not suitable here, which seems to be not necessary. If i am a user of iotdb, what i want to see in the conclusion is \" IoTDB has more useful and practical function and features than other TSDBs\".", "author": "Alima777", "createdAt": "2020-05-11T13:51:08Z", "path": "docs/UserGuide/9-Comparison/TSDB-Comparison.md", "diffHunk": "@@ -0,0 +1,400 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+    \n+        http://www.apache.org/licenses/LICENSE-2.0\n+    \n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+## Known Time Series Database\n+\n+As the time series data is more and more important, \n+several open sourced time series databases are intorduced in the world.\n+However, few of them are developed for IoT or IIoT (Industrial IoT) scenario in particular. \n+\n+\n+We choose 3 kinds of TSDBs here.\n+\n+* InfluxDB - Native Time series database\n+\n+  InfluxDB is one of the most popular TSDBs. \n+  \n+  Interface: InfluxQL and HTTP API\n+\n+* OpenTSDB and KairosDB - Time series database based on NoSQL\n+\n+  These two DBs are similar, while the first is based on HBase and the second is based on Cassandra.\n+  Both of them provides RESTful style API.\n+  \n+  Interface: Restful API\n+\n+* TimeSacleDB - Time series database based on Relational Database\n+\n+  Interface: SQL\n+\n+Prometheus and Druid are also famous for time series data management. \n+However, Prometheus focuses on how to collect data, how to visualize data and how to alert warnings.\n+Druid focuses on how to analyze data with OLAP workload. We omit them here.\n+ \n+\n+## Comparison \n+We compare the above time series database from two aspects: the feature comparison and the performance\n+comparison.\n+\n+\n+### Feature Comparison\n+\n+I list the basic features comparison of these databases. \n+\n+Legend:\n+- O: big support greatly\n+- o: support\n+- x: not support\n+- :\\-( : support but not very good\n+- ?: unknown\n+\n+\n+#### Basic Features\n+\n+| TSDB                        | IoTDB                       | InfluxDB   | OpenTSDB   | KairosDB   | TimescaleDB |   \n+|-----------------------------|-----------------------------|------------|------------|------------|-------------|  \n+| OpenSource                  | **o**                       | o          | o          | **o**      | o           |   \n+| SQL\\-like                   | o                           | o          | x          | x          | **O**       |   \n+| Schema                      | \"Tree\\-based, tag\\-based\\\"  | tag\\-based | tag\\-based | tag\\-based | Relational  |   \n+| Writing out\\-of\\-order data | o                           | o          | o          | o          | o           |   \n+| Schema\\-less                | o                           | o          | o          | o          | o           |   \n+| Batch insertion             | o                           | o          | o          | o          | o           |   \n+| Time range filter           | o                           | o          | o          | o          | o           |   \n+| Order by time               | **O**                       | o          | x          | x          | o           |   \n+| Value filter                | o                           | o          | x          | x          | o           |   \n+| Downsampling                | **O**                       | o          | o          | o          | o           |   \n+| Fill                        | **O**                       | o          | o          | x          | o           |   \n+| LIMIT                       | o                           | o          | o          | o          | o           |   \n+| SLIMIT                      | o                           | o          | x          | x          | ?           |   \n+| Latest value                | O                           | o          | o          | x          | o           |\n+\n+**Details**\n+\n+* OpenSOurce:  \n+ \n+  * IoTDB uses Apache License 2.0 and it is in Apache incubator. \n+  * InfluxDB uses MIT license. However, **the cluster version is not open sourced**.\n+  * OpenTSDB uses LGPL2.1, which **is not compatible with Apache License**.\n+  * KairosDB uses Apache License 2.0.\n+  * TimescaleDB uses Timescale License, which is not free for enterprise. \n+\n+* SQL like: \n+\n+  * IoTDB and InfluxDB supports SQL like language. Besides, The integration of IoTDB and Calcite is alomost done (a PR has been submitted), which means IoTDB will support Standard SQL.\n+  * OpenTSDB and KairosDB only support Rest API. Besides, IoTDB also supports Rest API (a PR has been submitted).\n+  * TimescaleDB uses the SQL the same with PG.\n+  \n+* Schema:\n+\n+  * IoTDB: IoTDB proposes a [Tree based schema](http://iotdb.apache.org/UserGuide/Master/2-Concept/1-Data%20Model%20and%20Terminology.html#data-model-and-terminology). \n+   It is quite different with other TSDBs. However, the kind of schema has the following advantages:\n+    \n+    * In many industrial scenarios, the management of devices are hierarchical, rather than flat.\n+    That is why we think a tree based schema is better than tag-value based schema.\n+    \n+    * In many real world applications, tag names are constant. For example, a wind turbine manufacturer\n+    always identify their wind turbines by which country it locates, the farm name it belongs to, and it ID in the farm.\n+    So, a 4-depth tree (\"root.the-country.the-farm.the-id\") is fine. \n+    You do not need to repeat to tell IoTDB the 2nd level of the tree is for country name, \n+    the 3rd level is for farm id, etc..\n+    \n+    * A path based time series ID definition also supports flexible queries, like \"root.\\*.a.b.\\*\", wehre \\* is wildcard character.\n+  \n+  * InfluxDB, KairosDB, OpenTSDB are tag-value based, which is more popular currently.\n+  \n+  * TimescaleDB uses relational table.   \n+\n+* Order by time:\n+  \n+  Order by time seems quite trivil for time series database. But... if we consider another featuer, called align by time,\n+  something becomes interesting.  And, that is why we mark OpenTSDB and KairosDB unsupported.\n+  \n+  Actually, in each time series, all these TSDBs support order data by timestamps.\n+  \n+  However, OpenTSDB and KairosDB do not support order the data from different timeseries in the time order.\n+  \n+  Ok, considering a new case: I have two time series, one is for the wind speed in wind farm1, \n+  another is for the generated energy of wind turbine1 in farm1. If we want to analyze the relation between the \n+  wind speed and the generated energy, we have to know the values of both at the same time.\n+  That is to say, we have to align the two time series in the time dimension.\n+  \n+  So, the result should be:\n+  \n+  | timestamp |  wind speed | generated energy |\n+  |-----------|-------------|------------------|\n+  |    1      |     5.0     |         13.1     |\n+  |    2      |     6.0     |         13.3     |\n+  |    3      |     null    |         13.1     |\n+  \n+  or,\n+  \n+    | timestamp |     series name   |    value   |\n+    |-----------|-------------------|------------|\n+    |    1      |       wind speed  |    5.0     |\n+    |    1      | generated energy  |    13.1    |\n+    |    2      |       wind speed  |    6.0     |\n+    |    2      | generated energy  |    13.3    |\n+    |    3      | generated energy  |    13.1    |      \n+  \n+ Though the second table format does not algin data by the time dimension, but it is easy to be implemented in the client-side,\n+ by justing scanning data row by row.\n+ \n+ IoTDB supports the first table format (called align by time), InfluxDB supports the second table format.\n+\n+* Downsampling:\n+\n+  Downsampling is for changing the granularity of timeseries, e.g., from 10Hz to 1Hz, or 1 point per day.\n+  \n+  Different with other systems, IoTDB downsamples data in real time, while others serialized downsampled data on disk.      \n+  That is to say,\n+  \n+  * IoTDB supports **adhoc** downsampling data in **arbitrary time**. \n+  e.g., a SQL returns 1 point per 5 minutes and start with 2020-04-27 08:00:00 while another SQL returns 1 point per 5 minutes + 10 seconds and start with 2020-04-27 08:00:01.\n+  \uff08InfluxDB also supports adhoc downsampling but the performance is ..... hm)\n+  \n+  * There is no disk loss for IoTDB.\n+  \n+\n+* Fill:\n+\n+  Sometimes we thought the data is collected in some fixed frequency, e.g., 1Hz (1 point per second). \n+  But usually, we may lost some data points, because the network is unstalbe, the machine is busy, or the machine is down for several minutes.\n+  \n+  In this case, filling these holes is important. Data scientists can avoid to many so called dirty work, e.g., data clean.\n+  \n+  InfluxDB and OpenTSDB only support using fill in a group by statement, while IoTDB supports to fill data when just given a particular timestamp.\n+  Besides, IoTDB supports several strategies for filling data.\n+       \n+* Slimit:\n+\n+  Slimit means return limited number of measurements (or, fields in InfluxDB). \n+  For example, a wind turbine may have 1000 measurements (speed, voltage, etc..), using slimit and soffset can just return a part of them.    \n+  \n+\n+* Latest value:\n+\n+  As one of the most basic timeseries based applications is monitoring the latest data. \n+  Therefore, a query to return the latest value of a time series is very important.\n+  IoTDB and OpenTSDB support that with a special SQL or API,\n+  while InfluxDB supports that using an aggregation function.\n+  (the reason why IoTDB porvides a special SQL is IoTDB optimizes the query expressly.)\n+  \n+   \n+  \n+**Conclusion**:\n+\n+Well, if we compare the basic features, we can find that OpenTSDB and KairosDB somehow lack some important query features.\n+TimescaleDB can not be freely used in business.\n+IoTDB and InfluxDB can meet most requirements of time series data management, while they have some difference.\n+\n+\n+#### Advanced Features\n+\n+I listed some interesting features that these systems may differ.\n+\n+| TSDB                        | IoTDB                           | InfluxDB   | OpenTSDB   | KairosDB   | TimescaleDB |   \n+|-----------------------------|---------------------------------|------------|------------|------------|-------------|   \n+| Align by time               | **O**                           | o          | x          | x          | o           |   \n+| Compression                 | **O**                           | :\\-(       | :\\-\\(      | :\\-\\(      | :\\-\\(       |   \n+| MQTT support                | **O**                           | o          | x          | x          | :\\-\\(       |   \n+| Run on Edge-side Device     | **O**                           | o          | x          | :\\-\\(      | o           |   \n+| Multi\\-instance Sync        | **O**                           | x          | x          | x          | x           |   \n+| JDBC Driver                 | **o**                           | x          | x          | x          | x           |   \n+| Standard SQL                | o                               | x          | x          | x          | **O**       |   \n+| Spark integration           | **O**                           | x          | x          | x          | x           | \n+| Hive integration            | **O**                           | x          | x          | x          | x           |\n+| Writing data to NFS (HDFS)  | **O**                           | x          | o          | x          | x           |\n+\n+\n+* Align by time: have been introduced. Let's skip it..\n+\n+* Compression: \n+  * IoTDB supports many encoding and compression for time series, like RLE, 2DIFF, Gorilla, etc.. and Snappy compression.\n+  In IoTDB, you can choose which encoding method you want, according to the data distribution. For more info, see [here](http://iotdb.apache.org/UserGuide/Master/2-Concept/3-Encoding.html).\n+  * InfluxDB also supports encoding and compression, but you can not define which encoding method you want.\n+  It just depends on the data type. For more info, see [here](https://docs.influxdata.com/influxdb/v1.7/concepts/storage_engine/).\n+  * OpenTSDB and KairosDB use HBase and Cassandra in backend, and have no special encoding for time series.\n+  \n+* MQTT protocol support:\n+  \n+  MQTT protocol is an international standard and widely known in industrial users. only IoTDB and InfluxDB support user using MQTT client to write data.  \n+\n+* Running on Edge-side Device:\n+  \n+  Nowdays, edge computing is more and more popular, which means the edge device has more powerful compution resources. \n+  Deploying a TSDB on the edge side is useful for managing data on the edge side and serve for edge computing. \n+  As OpenTSDB and KairosDB rely another DB, the architecture is a little heavy. Especially, it is hard to run Hadoop on the edge side.\n+\n+* Multi-instance Sync:\n+  \n+  Ok, now we have many TSDB instances on the edge-side. Then, how to upload their data to the data center, to form a ... data lake (or ocean, river,..., whatever).\n+  One choice is read data from these instances and write the data point by point to the data center instance.\n+  IoTDB provides another choice, just uploading the data file into the data center incrementally, then the data center can support service on the data. \n+  \n+* JDBC driver:\n+\n+  Now only IoTDB supports a JDBC driver (though not all interfaces are implemented), and makes it possible to integrate many other JDBC drvier based softwares.\n+\n+* Standard SQL:\n+\n+  As mentioned, the integration of IoTDB and Calcite is alomost done (a PR has been submitted), which means IoTDB will support Standard SQL.\n+  \n+* Spark and Hive integration:\n+\n+  It is very very important that letting big data analysis software to access the data in database for more complex data analysis.\n+  IoTDB supports Hive-connector and Spark connector for better integration. \n+\n+*  Writing data to NFS (HDFS):\n+  Sharing nothing architecture is good, but sometimes you have to add new servers even your CPU and memory is idle but the disk is full...\n+  Besides, if we can save the data file directly to HDFS, it will be more easy to use Spark and other softwares to analyze data, without ETL.\n+  \n+  * IoTDB supports write data locally or on HDFS directly. IoTDB also allows user extend to store data on other NFS.\n+  * InfluxDB, KairosDB have to write data locally.\n+  * OpenTSDB has to write data on HDFS.\n+    \n+**Conclusion**:    \n+  \n+  We can find that IoTDB has many interesting features that other TSDBs do not support.", "originalCommit": "1aa8114ea58a90286f5c3cc41bea2c1324dcc4de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "25661b6378a9571fbe8cf15d99fd525f698cd63b", "url": "https://github.com/apache/iotdb/commit/25661b6378a9571fbe8cf15d99fd525f698cd63b", "message": "add flink and fix typo", "committedDate": "2020-05-12T03:51:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI5OTA0Ng==", "url": "https://github.com/apache/iotdb/pull/1189#discussion_r432299046", "bodyText": "Please update the URL... I think we have removed the serial num in doc file names. See PR#1256.", "author": "HTHou", "createdAt": "2020-05-29T07:18:23Z", "path": "docs/UserGuide/9-Comparison/TSDB-Comparison.md", "diffHunk": "@@ -0,0 +1,384 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+    \n+        http://www.apache.org/licenses/LICENSE-2.0\n+    \n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+## Known Time Series Database\n+\n+As the time series data is more and more important, \n+several open sourced time series databases are intorduced in the world.\n+However, few of them are developed for IoT or IIoT (Industrial IoT) scenario in particular. \n+\n+\n+We choose 3 kinds of TSDBs here.\n+\n+* InfluxDB - Native Time series database\n+\n+  InfluxDB is one of the most popular TSDBs. \n+  \n+  Interface: InfluxQL and HTTP API\n+\n+* OpenTSDB and KairosDB - Time series database based on NoSQL\n+\n+  These two DBs are similar, while the first is based on HBase and the second is based on Cassandra.\n+  Both of them provides RESTful style API.\n+  \n+  Interface: Restful API\n+\n+* TimeSacleDB - Time series database based on Relational Database\n+\n+  Interface: SQL\n+\n+Prometheus and Druid are also famous for time series data management. \n+However, Prometheus focuses on how to collect data, how to visualize data and how to alert warnings.\n+Druid focuses on how to analyze data with OLAP workload. We omit them here.\n+ \n+\n+## Comparison \n+We compare the above time series database from two aspects: the feature comparison and the performance\n+comparison.\n+\n+\n+### Feature Comparison\n+\n+I list the basic features comparison of these databases. \n+\n+Legend:\n+- O: big support greatly\n+- o: support\n+- x: not support\n+- :\\-( : support but not very good\n+- ?: unknown\n+\n+\n+#### Basic Features\n+\n+| TSDB                        | IoTDB                       | InfluxDB   | OpenTSDB   | KairosDB   | TimescaleDB |   \n+|-----------------------------|-----------------------------|------------|------------|------------|-------------|  \n+| OpenSource                  | **o**                       | o          | o          | **o**      | o           |   \n+| SQL\\-like                   | o                           | o          | x          | x          | **O**       |   \n+| Schema                      | \"Tree\\-based, tag\\-based\\\"  | tag\\-based | tag\\-based | tag\\-based | Relational  |   \n+| Writing out\\-of\\-order data | o                           | o          | o          | o          | o           |   \n+| Schema\\-less                | o                           | o          | o          | o          | o           |   \n+| Batch insertion             | o                           | o          | o          | o          | o           |   \n+| Time range filter           | o                           | o          | o          | o          | o           |   \n+| Order by time               | **O**                       | o          | x          | x          | o           |   \n+| Value filter                | o                           | o          | x          | x          | o           |   \n+| Downsampling                | **O**                       | o          | o          | o          | o           |   \n+| Fill                        | **O**                       | o          | o          | x          | o           |   \n+| LIMIT                       | o                           | o          | o          | o          | o           |   \n+| SLIMIT                      | o                           | o          | x          | x          | ?           |   \n+| Latest value                | O                           | o          | o          | x          | o           |\n+\n+**Details**\n+\n+* OpenSource:  \n+ \n+  * IoTDB uses Apache License 2.0 and it is in Apache incubator. \n+  * InfluxDB uses MIT license. However, **the cluster version is not open sourced**.\n+  * OpenTSDB uses LGPL2.1, which **is not compatible with Apache License**.\n+  * KairosDB uses Apache License 2.0.\n+  * TimescaleDB uses Timescale License, which is not free for enterprise. \n+\n+* SQL like: \n+\n+  * IoTDB and InfluxDB supports SQL like language. Besides, The integration of IoTDB and Calcite is alomost done (a PR has been submitted), which means IoTDB will support Standard SQL.\n+  * OpenTSDB and KairosDB only support Rest API. Besides, IoTDB also supports Rest API (a PR has been submitted).\n+  * TimescaleDB uses the SQL the same with PG.\n+  \n+* Schema:\n+\n+  * IoTDB: IoTDB proposes a [Tree based schema](http://iotdb.apache.org/UserGuide/Master/2-Concept/1-Data%20Model%20and%20Terminology.html#data-model-and-terminology). \n+   It is quite different with other TSDBs. However, the kind of schema has the following advantages:\n+    \n+    * In many industrial scenarios, the management of devices are hierarchical, rather than flat.\n+    That is why we think a tree based schema is better than tag-value based schema.\n+    \n+    * In many real world applications, tag names are constant. For example, a wind turbine manufacturer\n+    always identify their wind turbines by which country it locates, the farm name it belongs to, and it ID in the farm.\n+    So, a 4-depth tree (\"root.the-country.the-farm.the-id\") is fine. \n+    You do not need to repeat to tell IoTDB the 2nd level of the tree is for country name, \n+    the 3rd level is for farm id, etc..\n+    \n+    * A path based time series ID definition also supports flexible queries, like \"root.\\*.a.b.\\*\", wehre \\* is wildcard character.\n+  \n+  * InfluxDB, KairosDB, OpenTSDB are tag-value based, which is more popular currently.\n+  \n+  * TimescaleDB uses relational table.   \n+\n+* Order by time:\n+  \n+  Order by time seems quite trivil for time series database. But... if we consider another featuer, called align by time,\n+  something becomes interesting.  And, that is why we mark OpenTSDB and KairosDB unsupported.\n+  \n+  Actually, in each time series, all these TSDBs support order data by timestamps.\n+  \n+  However, OpenTSDB and KairosDB do not support order the data from different timeseries in the time order.\n+  \n+  Ok, considering a new case: I have two time series, one is for the wind speed in wind farm1, \n+  another is for the generated energy of wind turbine1 in farm1. If we want to analyze the relation between the \n+  wind speed and the generated energy, we have to know the values of both at the same time.\n+  That is to say, we have to align the two time series in the time dimension.\n+  \n+  So, the result should be:\n+  \n+  | timestamp |  wind speed | generated energy |\n+  |-----------|-------------|------------------|\n+  |    1      |     5.0     |         13.1     |\n+  |    2      |     6.0     |         13.3     |\n+  |    3      |     null    |         13.1     |\n+  \n+  or,\n+  \n+    | timestamp |     series name   |    value   |\n+    |-----------|-------------------|------------|\n+    |    1      |       wind speed  |    5.0     |\n+    |    1      | generated energy  |    13.1    |\n+    |    2      |       wind speed  |    6.0     |\n+    |    2      | generated energy  |    13.3    |\n+    |    3      | generated energy  |    13.1    |      \n+  \n+ Though the second table format does not align data by the time dimension, but it is easy to be implemented in the client-side,\n+ by just scanning data row by row.\n+ \n+ IoTDB supports the first table format (called align by time), InfluxDB supports the second table format.\n+\n+* Downsampling:\n+\n+  Downsampling is for changing the granularity of timeseries, e.g., from 10Hz to 1Hz, or 1 point per day.\n+  \n+  Different with other systems, IoTDB downsamples data in real time, while others serialized downsampled data on disk.      \n+  That is to say,\n+  \n+  * IoTDB supports **adhoc** downsampling data in **arbitrary time**. \n+  e.g., a SQL returns 1 point per 5 minutes and start with 2020-04-27 08:00:00 while another SQL returns 1 point per 5 minutes + 10 seconds and start with 2020-04-27 08:00:01.\n+  \uff08InfluxDB also supports adhoc downsampling but the performance is ..... hm)\n+  \n+  * There is no disk loss for IoTDB.\n+  \n+\n+* Fill:\n+\n+  Sometimes we thought the data is collected in some fixed frequency, e.g., 1Hz (1 point per second). \n+  But usually, we may lost some data points, because the network is unstable, the machine is busy, or the machine is down for several minutes.\n+  \n+  In this case, filling these holes is important. Data scientists can avoid to many so called dirty work, e.g., data clean.\n+  \n+  InfluxDB and OpenTSDB only support using fill in a group by statement, while IoTDB supports to fill data when just given a particular timestamp.\n+  Besides, IoTDB supports several strategies for filling data.\n+       \n+* Slimit:\n+\n+  Slimit means return limited number of measurements (or, fields in InfluxDB). \n+  For example, a wind turbine may have 1000 measurements (speed, voltage, etc..), using slimit and soffset can just return a part of them.    \n+  \n+\n+* Latest value:\n+\n+  As one of the most basic timeseries based applications is monitoring the latest data. \n+  Therefore, a query to return the latest value of a time series is very important.\n+  IoTDB and OpenTSDB support that with a special SQL or API,\n+  while InfluxDB supports that using an aggregation function.\n+  (the reason why IoTDB provides a special SQL is IoTDB optimizes the query expressly.)\n+  \n+   \n+  \n+**Conclusion**:\n+\n+Well, if we compare the basic features, we can find that OpenTSDB and KairosDB somehow lack some important query features.\n+TimescaleDB can not be freely used in business.\n+IoTDB and InfluxDB can meet most requirements of time series data management, while they have some difference.\n+\n+\n+#### Advanced Features\n+\n+I listed some interesting features that these systems may differ.\n+\n+| TSDB                        | IoTDB                           | InfluxDB   | OpenTSDB   | KairosDB   | TimescaleDB |   \n+|-----------------------------|---------------------------------|------------|------------|------------|-------------|   \n+| Align by time               | **O**                           | o          | x          | x          | o           |   \n+| Compression                 | **O**                           | :\\-(       | :\\-\\(      | :\\-\\(      | :\\-\\(       |   \n+| MQTT support                | **O**                           | o          | x          | x          | :\\-\\(       |   \n+| Run on Edge-side Device     | **O**                           | o          | x          | :\\-\\(      | o           |   \n+| Multi\\-instance Sync        | **O**                           | x          | x          | x          | x           |   \n+| JDBC Driver                 | **o**                           | x          | x          | x          | x           |   \n+| Standard SQL                | o                               | x          | x          | x          | **O**       |   \n+| Spark integration           | **O**                           | x          | x          | x          | x           | \n+| Hive integration            | **O**                           | x          | x          | x          | x           |\n+| Writing data to NFS (HDFS)  | **O**                           | x          | o          | x          | x           |\n+| Flink integration           | **O**                           | x          | x          | x          | x           |\n+\n+\n+* Align by time: have been introduced. Let's skip it..\n+\n+* Compression: \n+  * IoTDB supports many encoding and compression for time series, like RLE, 2DIFF, Gorilla, etc.. and Snappy compression.\n+  In IoTDB, you can choose which encoding method you want, according to the data distribution. For more info, see [here](http://iotdb.apache.org/UserGuide/Master/2-Concept/3-Encoding.html).", "originalCommit": "25661b6378a9571fbe8cf15d99fd525f698cd63b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI5OTcxMA==", "url": "https://github.com/apache/iotdb/pull/1189#discussion_r432299710", "bodyText": "Please update the URL too.", "author": "HTHou", "createdAt": "2020-05-29T07:19:57Z", "path": "docs/UserGuide/9-Comparison/TSDB-Comparison.md", "diffHunk": "@@ -0,0 +1,384 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+    \n+        http://www.apache.org/licenses/LICENSE-2.0\n+    \n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+## Known Time Series Database\n+\n+As the time series data is more and more important, \n+several open sourced time series databases are intorduced in the world.\n+However, few of them are developed for IoT or IIoT (Industrial IoT) scenario in particular. \n+\n+\n+We choose 3 kinds of TSDBs here.\n+\n+* InfluxDB - Native Time series database\n+\n+  InfluxDB is one of the most popular TSDBs. \n+  \n+  Interface: InfluxQL and HTTP API\n+\n+* OpenTSDB and KairosDB - Time series database based on NoSQL\n+\n+  These two DBs are similar, while the first is based on HBase and the second is based on Cassandra.\n+  Both of them provides RESTful style API.\n+  \n+  Interface: Restful API\n+\n+* TimeSacleDB - Time series database based on Relational Database\n+\n+  Interface: SQL\n+\n+Prometheus and Druid are also famous for time series data management. \n+However, Prometheus focuses on how to collect data, how to visualize data and how to alert warnings.\n+Druid focuses on how to analyze data with OLAP workload. We omit them here.\n+ \n+\n+## Comparison \n+We compare the above time series database from two aspects: the feature comparison and the performance\n+comparison.\n+\n+\n+### Feature Comparison\n+\n+I list the basic features comparison of these databases. \n+\n+Legend:\n+- O: big support greatly\n+- o: support\n+- x: not support\n+- :\\-( : support but not very good\n+- ?: unknown\n+\n+\n+#### Basic Features\n+\n+| TSDB                        | IoTDB                       | InfluxDB   | OpenTSDB   | KairosDB   | TimescaleDB |   \n+|-----------------------------|-----------------------------|------------|------------|------------|-------------|  \n+| OpenSource                  | **o**                       | o          | o          | **o**      | o           |   \n+| SQL\\-like                   | o                           | o          | x          | x          | **O**       |   \n+| Schema                      | \"Tree\\-based, tag\\-based\\\"  | tag\\-based | tag\\-based | tag\\-based | Relational  |   \n+| Writing out\\-of\\-order data | o                           | o          | o          | o          | o           |   \n+| Schema\\-less                | o                           | o          | o          | o          | o           |   \n+| Batch insertion             | o                           | o          | o          | o          | o           |   \n+| Time range filter           | o                           | o          | o          | o          | o           |   \n+| Order by time               | **O**                       | o          | x          | x          | o           |   \n+| Value filter                | o                           | o          | x          | x          | o           |   \n+| Downsampling                | **O**                       | o          | o          | o          | o           |   \n+| Fill                        | **O**                       | o          | o          | x          | o           |   \n+| LIMIT                       | o                           | o          | o          | o          | o           |   \n+| SLIMIT                      | o                           | o          | x          | x          | ?           |   \n+| Latest value                | O                           | o          | o          | x          | o           |\n+\n+**Details**\n+\n+* OpenSource:  \n+ \n+  * IoTDB uses Apache License 2.0 and it is in Apache incubator. \n+  * InfluxDB uses MIT license. However, **the cluster version is not open sourced**.\n+  * OpenTSDB uses LGPL2.1, which **is not compatible with Apache License**.\n+  * KairosDB uses Apache License 2.0.\n+  * TimescaleDB uses Timescale License, which is not free for enterprise. \n+\n+* SQL like: \n+\n+  * IoTDB and InfluxDB supports SQL like language. Besides, The integration of IoTDB and Calcite is alomost done (a PR has been submitted), which means IoTDB will support Standard SQL.\n+  * OpenTSDB and KairosDB only support Rest API. Besides, IoTDB also supports Rest API (a PR has been submitted).\n+  * TimescaleDB uses the SQL the same with PG.\n+  \n+* Schema:\n+\n+  * IoTDB: IoTDB proposes a [Tree based schema](http://iotdb.apache.org/UserGuide/Master/2-Concept/1-Data%20Model%20and%20Terminology.html#data-model-and-terminology). ", "originalCommit": "25661b6378a9571fbe8cf15d99fd525f698cd63b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0b44d20be12a807e77b2b19d687b61e983e171dd", "url": "https://github.com/apache/iotdb/commit/0b44d20be12a807e77b2b19d687b61e983e171dd", "message": "Merge remote-tracking branch 'origin/master' into comparison_doc", "committedDate": "2020-06-23T06:40:03Z", "type": "commit"}, {"oid": "787965c6d8665df57c2d543467f1505fbd96927b", "url": "https://github.com/apache/iotdb/commit/787965c6d8665df57c2d543467f1505fbd96927b", "message": "fix typos and error urls", "committedDate": "2020-06-23T06:46:39Z", "type": "commit"}, {"oid": "1064b6ea2e4c11c8b6d6da2883a4b7d2c4ee1149", "url": "https://github.com/apache/iotdb/commit/1064b6ea2e4c11c8b6d6da2883a4b7d2c4ee1149", "message": "add the comparison to the website", "committedDate": "2020-06-23T06:50:12Z", "type": "commit"}]}