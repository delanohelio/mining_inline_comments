{"pr_number": 10142, "pr_title": "BAEL4640 Find First with Optional", "pr_createdAt": "2020-10-07T14:48:43Z", "pr_url": "https://github.com/eugenp/tutorials/pull/10142", "timeline": [{"oid": "bb0e210ee24152b49b217e01c0926a2c763ccbe0", "url": "https://github.com/eugenp/tutorials/commit/bb0e210ee24152b49b217e01c0926a2c763ccbe0", "message": "BAEL4640 Find First with Optional", "committedDate": "2020-10-07T14:46:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1ODc1MQ==", "url": "https://github.com/eugenp/tutorials/pull/10142#discussion_r501158751", "bodyText": "this may be even easier to read if you put the return statement on line 20 rather than capture a local variable.", "author": "ashleyfrieze", "createdAt": "2020-10-07T16:43:26Z", "path": "patterns/design-patterns-behavioral/src/main/java/com/baeldung/nulls/UsingOptional.java", "diffHunk": "@@ -11,6 +15,18 @@\n         return Optional.ofNullable(response);\n     }\n \n+    public String findFirst(){\n+\n+        String firstElement = getList().stream()\n+                .findFirst()\n+                .orElseThrow(IllegalArgumentException::new);\n+        return firstElement;", "originalCommit": "bb0e210ee24152b49b217e01c0926a2c763ccbe0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE2MDAxMw==", "url": "https://github.com/eugenp/tutorials/pull/10142#discussion_r501160013", "bodyText": "This may be a big change, but classUnderTest is a terrible name for the thing we're testing.\ndataObject would be better. You should never name an object class unless it is an object of type Class - i.e. the metadata of a class.", "author": "ashleyfrieze", "createdAt": "2020-10-07T16:45:25Z", "path": "patterns/design-patterns-behavioral/src/test/java/com/baeldung/nulls/UsingOptionalUnitTest.java", "diffHunk": "@@ -39,4 +39,10 @@ public void whenArgIsFalse_thenChainResponseAndThrowException() {\n \n         assertThrows(Exception.class, () -> classUnderTest.process(false).orElseThrow(() -> new Exception()));\n     }\n+\n+    @Test()\n+    void givenEmptyList_whenProcessMulti_throwIllegalArgument() {\n+        assertThrows(IllegalArgumentException.class, () -> classUnderTest.findFirst());", "originalCommit": "bb0e210ee24152b49b217e01c0926a2c763ccbe0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5c19d1c4cdc9a49da5ff9bdd3d8e67a0c5b1c458", "url": "https://github.com/eugenp/tutorials/commit/5c19d1c4cdc9a49da5ff9bdd3d8e67a0c5b1c458", "message": "BAEL4640 Fixes for review comments", "committedDate": "2020-10-08T14:37:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0NDIyNg==", "url": "https://github.com/eugenp/tutorials/pull/10142#discussion_r502844226", "bodyText": "redundant blank line", "author": "ashleyfrieze", "createdAt": "2020-10-10T23:36:54Z", "path": "patterns/design-patterns-behavioral/src/main/java/com/baeldung/nulls/UsingOptional.java", "diffHunk": "@@ -1,16 +1,38 @@\n package com.baeldung.nulls;\n \n+import java.util.List;\n import java.util.Optional;\n \n+import static java.util.Collections.emptyList;\n+\n public class UsingOptional {\n \n+    public static final String DEFAULT_VALUE = \"Default Value\";\n+\n     public Optional<Object> process(boolean processed) {\n \n         String response = doSomething(processed);\n \n         return Optional.ofNullable(response);\n     }\n \n+    public String findFirst() {\n+\n+        return getList().stream()\n+            .findFirst()\n+            .orElse(DEFAULT_VALUE);\n+    }\n+\n+    public Optional<String> findOptionalFirst() {\n+", "originalCommit": "5c19d1c4cdc9a49da5ff9bdd3d8e67a0c5b1c458", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0NDIzNw==", "url": "https://github.com/eugenp/tutorials/pull/10142#discussion_r502844237", "bodyText": "redundant blank line", "author": "ashleyfrieze", "createdAt": "2020-10-10T23:37:02Z", "path": "patterns/design-patterns-behavioral/src/main/java/com/baeldung/nulls/UsingOptional.java", "diffHunk": "@@ -1,16 +1,38 @@\n package com.baeldung.nulls;\n \n+import java.util.List;\n import java.util.Optional;\n \n+import static java.util.Collections.emptyList;\n+\n public class UsingOptional {\n \n+    public static final String DEFAULT_VALUE = \"Default Value\";\n+\n     public Optional<Object> process(boolean processed) {\n \n         String response = doSomething(processed);\n \n         return Optional.ofNullable(response);\n     }\n \n+    public String findFirst() {\n+", "originalCommit": "5c19d1c4cdc9a49da5ff9bdd3d8e67a0c5b1c458", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0NDI5OA==", "url": "https://github.com/eugenp/tutorials/pull/10142#discussion_r502844298", "bodyText": "redundant blank line - please also note the other instances of that in this class - there's no need for a blank space just after or just before the { or } of a function.", "author": "ashleyfrieze", "createdAt": "2020-10-10T23:37:57Z", "path": "patterns/design-patterns-behavioral/src/test/java/com/baeldung/nulls/UsingOptionalUnitTest.java", "diffHunk": "@@ -11,32 +11,45 @@\n \n class UsingOptionalUnitTest {\n \n-    private UsingOptional classUnderTest;\n+    private UsingOptional dataObject;\n \n     @BeforeEach\n     public void setup() {\n-        classUnderTest = new UsingOptional();\n+        dataObject = new UsingOptional();\n     }\n \n     @Test\n     public void whenArgIsFalse_thenReturnEmptyResponse() {\n \n-        Optional<Object> result = classUnderTest.process(false);\n+        Optional<Object> result = dataObject.process(false);\n \n         assertFalse(result.isPresent());\n     }\n \n     @Test\n     public void whenArgIsTrue_thenReturnValidResponse() {\n \n-        Optional<Object> result = classUnderTest.process(true);\n+        Optional<Object> result = dataObject.process(true);\n \n         assertTrue(result.isPresent());\n     }\n \n     @Test\n     public void whenArgIsFalse_thenChainResponseAndThrowException() {\n \n-        assertThrows(Exception.class, () -> classUnderTest.process(false).orElseThrow(() -> new Exception()));\n+        assertThrows(Exception.class, () -> dataObject.process(false).orElseThrow(() -> new Exception()));\n     }\n+\n+    @Test()\n+    void givenEmptyList_whenFindFirst_getDefaultValue() {\n+        assertTrue(dataObject.findFirst().equalsIgnoreCase(UsingOptional.DEFAULT_VALUE));\n+\n+    }\n+\n+    @Test()\n+    void givenEmptyList_whenFindOptionalFirst_returnsEmptyOptional() {\n+        assertFalse(dataObject.findOptionalFirst().isPresent());\n+", "originalCommit": "5c19d1c4cdc9a49da5ff9bdd3d8e67a0c5b1c458", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "82f2748d451afcf5dd8509c4be0b9de0be63140b", "url": "https://github.com/eugenp/tutorials/commit/82f2748d451afcf5dd8509c4be0b9de0be63140b", "message": "BAEL4640 Removing blank lines", "committedDate": "2020-10-13T13:08:31Z", "type": "commit"}, {"oid": "83d5fd9747304f1095a21f1548d9e03040310d84", "url": "https://github.com/eugenp/tutorials/commit/83d5fd9747304f1095a21f1548d9e03040310d84", "message": "BAEL4640 Removing blank lines", "committedDate": "2020-10-16T15:29:10Z", "type": "commit"}, {"oid": "6e796212db02641dac483e0a0a4192807c73b32d", "url": "https://github.com/eugenp/tutorials/commit/6e796212db02641dac483e0a0a4192807c73b32d", "message": "BAEL4640 Changes for 8.3 Optional.flatMap", "committedDate": "2020-10-19T12:43:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ5NjE2NQ==", "url": "https://github.com/eugenp/tutorials/pull/10142#discussion_r509496165", "bodyText": "break the line at the . of .flatMap you can optionally also break the line at the . of findFirst as well.", "author": "ashleyfrieze", "createdAt": "2020-10-21T17:46:14Z", "path": "patterns/design-patterns-behavioral/src/main/java/com/baeldung/nulls/UsingOptional.java", "diffHunk": "@@ -1,23 +1,50 @@\n package com.baeldung.nulls;\n \n+import java.util.List;\n import java.util.Optional;\n \n+import static java.util.Collections.emptyList;\n+\n public class UsingOptional {\n \n-    public Optional<Object> process(boolean processed) {\n+    public static final String DEFAULT_VALUE = \"Default Value\";\n \n+    public Optional<Object> process(boolean processed) {\n         String response = doSomething(processed);\n \n         return Optional.ofNullable(response);\n     }\n \n-    private String doSomething(boolean processed) {\n+    public String findFirst() {\n+        return getList().stream()\n+            .findFirst()\n+            .orElse(DEFAULT_VALUE);\n+    }\n+\n+\n+    public Optional<String> findOptionalFirst() {\n+        return getList().stream()\n+            .findFirst();\n+    }\n \n+    private List<String> getList() {\n+        return emptyList();\n+    }\n+\n+    public Optional<String> optionalListFirst() {\n+        return getOptionalList().flatMap(\n+                list -> list.stream().findFirst());", "originalCommit": "6e796212db02641dac483e0a0a4192807c73b32d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}