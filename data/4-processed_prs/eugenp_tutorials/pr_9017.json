{"pr_number": 9017, "pr_title": "Mockint objectmapper with mockito", "pr_createdAt": "2020-04-02T11:45:54Z", "pr_url": "https://github.com/eugenp/tutorials/pull/9017", "timeline": [{"oid": "1b4bfbd6897ef0c6a4845744d2d3d4fc8a749ec4", "url": "https://github.com/eugenp/tutorials/commit/1b4bfbd6897ef0c6a4845744d2d3d4fc8a749ec4", "message": "Mockint objectmapper with mockito", "committedDate": "2020-04-02T08:14:52Z", "type": "commit"}, {"oid": "a39af953d73fc0ce8890a4c617dfec800737bfcc", "url": "https://github.com/eugenp/tutorials/commit/a39af953d73fc0ce8890a4c617dfec800737bfcc", "message": "enforcing naming convention for test classes", "committedDate": "2020-04-03T13:56:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5MDQ5Mg==", "url": "https://github.com/eugenp/tutorials/pull/9017#discussion_r403490492", "bodyText": "Revert the change to this file. I will add the appropriate link after the article is published.", "author": "KevinGilmore", "createdAt": "2020-04-04T16:47:51Z", "path": "spring-mockito/README.md", "diffHunk": "@@ -5,3 +5,4 @@ This module contains articles about Spring with Mockito\n ### Relevant Articles: \n - [Injecting Mockito Mocks into Spring Beans](https://www.baeldung.com/injecting-mocks-in-spring)\n - [Mockito ArgumentMatchers](https://www.baeldung.com/mockito-argument-matchers)\n+- [Mocking the ObjectMapper readValue() method](https://www.baeldung.com/mocking-the-objectmapper-readvalue-method/)", "originalCommit": "a39af953d73fc0ce8890a4c617dfec800737bfcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5MTk0Mw==", "url": "https://github.com/eugenp/tutorials/pull/9017#discussion_r403491943", "bodyText": "It is not necessary to provide a specific string to specify the Mock behavior. You can simply use any(String.class) as the parameter to readValue instead of an actual string. Then you can specify any string you want when you actually make the call to your service's readFlower method.", "author": "KevinGilmore", "createdAt": "2020-04-04T17:01:04Z", "path": "spring-mockito/src/test/java/com/baeldung/reader/FlowerReaderServiceUnitTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.baeldung.reader;\n+\n+import com.baeldung.app.api.Flower;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest\n+public class FlowerReaderServiceUnitTest {\n+\n+    @MockBean\n+    private ObjectMapper objectMapper;\n+\n+    @Autowired\n+    private FlowerReaderService flowerReader;\n+\n+    @Test\n+    public void whenCallingWithJsonAsString_thenReturnsExpectedFlowerObject() throws JsonProcessingException {\n+\n+        String flowerAsJson = \"{\\\"name\\\": \\\"rose\\\", \\\"petals\\\": 100}\";\n+        String roseName = \"rose\";\n+        Integer rosePetals = 100;\n+        Flower rose = new Flower(roseName, rosePetals);\n+\n+        Mockito.when(objectMapper.readValue(flowerAsJson, Flower.class)).thenReturn(rose);\n+        Flower expectedRose = flowerReader.readFlower(flowerAsJson);", "originalCommit": "a39af953d73fc0ce8890a4c617dfec800737bfcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5MjI3OQ==", "url": "https://github.com/eugenp/tutorials/pull/9017#discussion_r403492279", "bodyText": "Similarly, you can use any(String.class) here. But there is no reason to actually specify an invalid JSON string when calling your service. If you do, then what is the point of mocking the behavior? That is the actual exception that would be thrown when reading an invalid JSON string if you did not mock the readValue method.", "author": "KevinGilmore", "createdAt": "2020-04-04T17:04:12Z", "path": "spring-mockito/src/test/java/com/baeldung/reader/FlowerReaderServiceUnitTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.baeldung.reader;\n+\n+import com.baeldung.app.api.Flower;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest\n+public class FlowerReaderServiceUnitTest {\n+\n+    @MockBean\n+    private ObjectMapper objectMapper;\n+\n+    @Autowired\n+    private FlowerReaderService flowerReader;\n+\n+    @Test\n+    public void whenCallingWithJsonAsString_thenReturnsExpectedFlowerObject() throws JsonProcessingException {\n+\n+        String flowerAsJson = \"{\\\"name\\\": \\\"rose\\\", \\\"petals\\\": 100}\";\n+        String roseName = \"rose\";\n+        Integer rosePetals = 100;\n+        Flower rose = new Flower(roseName, rosePetals);\n+\n+        Mockito.when(objectMapper.readValue(flowerAsJson, Flower.class)).thenReturn(rose);\n+        Flower expectedRose = flowerReader.readFlower(flowerAsJson);\n+\n+        Assertions.assertEquals(roseName, expectedRose.getName());\n+        Assertions.assertEquals(rosePetals, expectedRose.getPetals());\n+\n+    }\n+\n+    @Test\n+    public void whenCallingWithIncorrectJson_thenThrowsException() throws JsonProcessingException {\n+\n+        String incorrectJson = \"this is not a flower in JSON\";\n+\n+        Mockito.when(objectMapper.readValue(incorrectJson, Flower.class)).thenThrow(JsonProcessingException.class);\n+\n+        Assertions.assertThrows(JsonProcessingException.class, () -> flowerReader.readFlower(incorrectJson));", "originalCommit": "a39af953d73fc0ce8890a4c617dfec800737bfcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5MjM4Ng==", "url": "https://github.com/eugenp/tutorials/pull/9017#discussion_r403492386", "bodyText": "Same applies here as in the other test class. By the way, this reinforces my earlier thought that we don't need to involve Spring at all and should probably move this code to a different module.", "author": "KevinGilmore", "createdAt": "2020-04-04T17:05:28Z", "path": "spring-mockito/src/test/java/com/baeldung/reader/FlowerReaderServiceWithoutSpringUnitTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.baeldung.reader;\n+\n+import com.baeldung.app.api.Flower;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class FlowerReaderServiceWithoutSpringUnitTest {\n+\n+    @Mock\n+    private ObjectMapper objectMapper;\n+\n+    private FlowerReaderService flowerReader;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        flowerReader = new FlowerReaderService(objectMapper);\n+    }\n+\n+    @Test\n+    public void whenCallingWithJsonAsString_thenReturnsExpectedFlowerObject() throws JsonProcessingException {\n+\n+        String flowerAsJson = \"{\\\"name\\\": \\\"rose\\\", \\\"petals\\\": 100}\";\n+        String roseName = \"rose\";\n+        Integer rosePetals = 100;\n+        Flower rose = new Flower(roseName, rosePetals);\n+\n+        Mockito.when(objectMapper.readValue(flowerAsJson, Flower.class)).thenReturn(rose);\n+        Flower expectedRose = flowerReader.readFlower(flowerAsJson);\n+\n+        Assertions.assertEquals(roseName, expectedRose.getName());\n+        Assertions.assertEquals(rosePetals, expectedRose.getPetals());\n+    }\n+\n+    @Test\n+    public void whenCallingWithIncorrectJson_thenThrowsException() throws JsonProcessingException {\n+\n+        String incorrectJson = \"this is not a flower in JSON\";\n+\n+        Mockito.when(objectMapper.readValue(incorrectJson, Flower.class)).thenThrow(JsonProcessingException.class);\n+\n+        Assertions.assertThrows(JsonProcessingException.class, () -> flowerReader.readFlower(incorrectJson));", "originalCommit": "a39af953d73fc0ce8890a4c617dfec800737bfcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1OTI4NA==", "url": "https://github.com/eugenp/tutorials/pull/9017#discussion_r403659284", "bodyText": "Note: we generally static import all mockito methods.", "author": "ashleyfrieze", "createdAt": "2020-04-05T07:02:45Z", "path": "spring-mockito/src/test/java/com/baeldung/reader/FlowerReaderServiceUnitTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.baeldung.reader;\n+\n+import com.baeldung.app.api.Flower;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest\n+public class FlowerReaderServiceUnitTest {\n+\n+    @MockBean\n+    private ObjectMapper objectMapper;\n+\n+    @Autowired\n+    private FlowerReaderService flowerReader;\n+\n+    @Test\n+    public void whenCallingWithJsonAsString_thenReturnsExpectedFlowerObject() throws JsonProcessingException {\n+\n+        String flowerAsJson = \"{\\\"name\\\": \\\"rose\\\", \\\"petals\\\": 100}\";\n+        String roseName = \"rose\";\n+        Integer rosePetals = 100;\n+        Flower rose = new Flower(roseName, rosePetals);\n+\n+        Mockito.when(objectMapper.readValue(flowerAsJson, Flower.class)).thenReturn(rose);", "originalCommit": "a39af953d73fc0ce8890a4c617dfec800737bfcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1OTMxMg==", "url": "https://github.com/eugenp/tutorials/pull/9017#discussion_r403659312", "bodyText": "and we generally static import assertions too", "author": "ashleyfrieze", "createdAt": "2020-04-05T07:03:08Z", "path": "spring-mockito/src/test/java/com/baeldung/reader/FlowerReaderServiceUnitTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.baeldung.reader;\n+\n+import com.baeldung.app.api.Flower;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest\n+public class FlowerReaderServiceUnitTest {\n+\n+    @MockBean\n+    private ObjectMapper objectMapper;\n+\n+    @Autowired\n+    private FlowerReaderService flowerReader;\n+\n+    @Test\n+    public void whenCallingWithJsonAsString_thenReturnsExpectedFlowerObject() throws JsonProcessingException {\n+\n+        String flowerAsJson = \"{\\\"name\\\": \\\"rose\\\", \\\"petals\\\": 100}\";\n+        String roseName = \"rose\";\n+        Integer rosePetals = 100;\n+        Flower rose = new Flower(roseName, rosePetals);\n+\n+        Mockito.when(objectMapper.readValue(flowerAsJson, Flower.class)).thenReturn(rose);\n+        Flower expectedRose = flowerReader.readFlower(flowerAsJson);\n+\n+        Assertions.assertEquals(roseName, expectedRose.getName());\n+        Assertions.assertEquals(rosePetals, expectedRose.getPetals());", "originalCommit": "a39af953d73fc0ce8890a4c617dfec800737bfcc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "788c0797899734dfcc5c5328b6964c5bb9028f80", "url": "https://github.com/eugenp/tutorials/commit/788c0797899734dfcc5c5328b6964c5bb9028f80", "message": "removed Spring", "committedDate": "2020-04-05T09:04:03Z", "type": "commit"}, {"oid": "508bb6c30317247c12b65686da810d94c4ca775a", "url": "https://github.com/eugenp/tutorials/commit/508bb6c30317247c12b65686da810d94c4ca775a", "message": "removed unattended changes", "committedDate": "2020-04-05T09:07:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwNzE4NA==", "url": "https://github.com/eugenp/tutorials/pull/9017#discussion_r406807184", "bodyText": "make the version a property", "author": "KevinGilmore", "createdAt": "2020-04-10T15:24:23Z", "path": "testing-modules/mockito-2/pom.xml", "diffHunk": "@@ -14,6 +14,20 @@\n         <relativePath>../../</relativePath>\n     </parent>\n \n+    <dependencies>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-databind</artifactId>\n+            <version>2.10.3</version>", "originalCommit": "508bb6c30317247c12b65686da810d94c4ca775a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5058bbd07f7bbddb0f73dc7f0965b7238550c5d4", "url": "https://github.com/eugenp/tutorials/commit/5058bbd07f7bbddb0f73dc7f0965b7238550c5d4", "message": "modified example", "committedDate": "2020-04-11T08:20:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkyMjI4OQ==", "url": "https://github.com/eugenp/tutorials/pull/9017#discussion_r410922289", "bodyText": "Since we only use this once and it's a one-liner, let's just move it to the flowerHasPetals method to simplify the call stack.", "author": "KevinGilmore", "createdAt": "2020-04-19T14:52:21Z", "path": "testing-modules/mockito-2/src/main/java/com/baeldung/mockito/objectmapper/FlowerJsonStringValidator.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.baeldung.mockito.objectmapper;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+public class FlowerJsonStringValidator {\n+    private ObjectMapper objectMapper;\n+\n+    public FlowerJsonStringValidator(ObjectMapper objectMapper) {\n+        this.objectMapper = objectMapper;\n+    }\n+\n+    public boolean flowerHasPetals(String jsonFlowerAsString) throws JsonProcessingException {\n+        Flower flower = readFlower(jsonFlowerAsString);\n+        return flower.getPetals() > 0;\n+    }\n+\n+    private Flower readFlower(String flowerAsJson) throws JsonProcessingException {\n+        return objectMapper.readValue(flowerAsJson, Flower.class);", "originalCommit": "5058bbd07f7bbddb0f73dc7f0965b7238550c5d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7f444e9aa1886e3ef236e4937a4c56780b0e7052", "url": "https://github.com/eugenp/tutorials/commit/7f444e9aa1886e3ef236e4937a4c56780b0e7052", "message": "simplified call stack in flower validator", "committedDate": "2020-04-19T17:34:03Z", "type": "commit"}]}