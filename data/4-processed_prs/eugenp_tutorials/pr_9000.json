{"pr_number": 9000, "pr_title": "BAEL-3858 Java Exchanger introduction", "pr_createdAt": "2020-03-31T11:20:22Z", "pr_url": "https://github.com/eugenp/tutorials/pull/9000", "timeline": [{"oid": "c8a19f6a389e6fff8a1ba65f96f08725cb9d8e6f", "url": "https://github.com/eugenp/tutorials/commit/c8a19f6a389e6fff8a1ba65f96f08725cb9d8e6f", "message": "Merge pull request #1 from eugenp/master\n\nupdating", "committedDate": "2020-03-29T18:18:40Z", "type": "commit"}, {"oid": "38549be4483c67b71ad5101c1002138467f9a0a8", "url": "https://github.com/eugenp/tutorials/commit/38549be4483c67b71ad5101c1002138467f9a0a8", "message": "BAEL-3858 Java Exchanger introduction", "committedDate": "2020-03-31T11:27:05Z", "type": "commit"}, {"oid": "e3c7894c57196e80e7c5b1bb90e66747edb5b023", "url": "https://github.com/eugenp/tutorials/commit/e3c7894c57196e80e7c5b1bb90e66747edb5b023", "message": "Merge pull request #2 from eugenp/master\n\nSync from main fork", "committedDate": "2020-04-14T14:44:05Z", "type": "commit"}, {"oid": "22517c579a7597616e478acb8dc192bce35b1c7a", "url": "https://github.com/eugenp/tutorials/commit/22517c579a7597616e478acb8dc192bce35b1c7a", "message": "BAEL-3858 Added demo pipeline with exchanger", "committedDate": "2020-05-10T16:37:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NTE2MA==", "url": "https://github.com/eugenp/tutorials/pull/9000#discussion_r424175160", "bodyText": "it's Exchanger :)", "author": "pivovarit", "createdAt": "2020-05-13T05:08:05Z", "path": "core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/exchanger/ExachangerUnitTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.baeldung.exchanger;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.concurrent.Exchanger;\n+\n+import org.junit.Test;\n+\n+public class ExachangerUnitTest {", "originalCommit": "22517c579a7597616e478acb8dc192bce35b1c7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MDQwNA==", "url": "https://github.com/eugenp/tutorials/pull/9000#discussion_r424670404", "bodyText": "Done fixed", "author": "dhruba619", "createdAt": "2020-05-13T19:11:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NTE2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3Njg2Mw==", "url": "https://github.com/eugenp/tutorials/pull/9000#discussion_r424176863", "bodyText": "This is just an instant deadlock, please remove it", "author": "pivovarit", "createdAt": "2020-05-13T05:14:27Z", "path": "core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/exchanger/ExchangerPipeLineUnitTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.baeldung.exchanger;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.Random;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.Exchanger;\n+import java.util.stream.IntStream;\n+import org.junit.Test;\n+\n+public class ExchangerPipeLineUnitTest {\n+\n+    private static final int BUFFER_SIZE = 100;\n+\n+    @Test\n+    public void givenData_whenPassedThrough_thenCorrect() throws InterruptedException {\n+\n+        Exchanger<Queue<String>> readerExchanger = new Exchanger<>();\n+        Exchanger<Queue<String>> writerExchanger = new Exchanger<>();\n+\n+        Runnable reader = () -> {\n+            Queue<String> readerBuffer = new ConcurrentLinkedQueue<>();\n+            while (true) {\n+                readerBuffer.add(UUID.randomUUID().toString());\n+                if (readerBuffer.size() >= BUFFER_SIZE) {\n+                    try {\n+                        readerBuffer = readerExchanger.exchange(readerBuffer);\n+                    } catch (InterruptedException e) {\n+                        Thread.currentThread().interrupt();\n+                        throw new RuntimeException(e);\n+                    }\n+                }\n+            }\n+        };\n+\n+        Runnable processor = () -> {\n+            Queue<String> processorBuffer = new ConcurrentLinkedQueue<>();\n+            Queue<String> writterBuffer = new ConcurrentLinkedQueue<>();\n+            try {\n+                processorBuffer = readerExchanger.exchange(processorBuffer);\n+                while (true) {\n+                    writterBuffer.add(processorBuffer.poll());\n+                    if (processorBuffer.isEmpty()) {\n+                        try {\n+                            processorBuffer = readerExchanger.exchange(processorBuffer);\n+                            writterBuffer = writerExchanger.exchange(writterBuffer);\n+                        } catch (InterruptedException e) {\n+                            Thread.currentThread().interrupt();\n+                            throw new RuntimeException(e);\n+                        }\n+                    }\n+                }\n+            } catch (InterruptedException e) {\n+                Thread.currentThread().interrupt();\n+                throw new RuntimeException(e);\n+            }\n+        };\n+\n+        Runnable writer = () -> {\n+            Queue<String> writterBuffer = new ConcurrentLinkedQueue<>();\n+            try {\n+                writterBuffer = writerExchanger.exchange(writterBuffer);\n+                while (true) {\n+                    System.out.println(writterBuffer.poll());\n+                    if (writterBuffer.isEmpty()) {\n+                        writterBuffer = writerExchanger.exchange(writterBuffer);\n+                    }\n+                }\n+            } catch (InterruptedException e) {\n+                Thread.currentThread().interrupt();\n+                throw new RuntimeException(e);\n+            }\n+        };\n+\n+        new Thread(reader).start();\n+        new Thread(processor).start();\n+        new Thread(writer).start();\n+        //Thread.currentThread().join();", "originalCommit": "22517c579a7597616e478acb8dc192bce35b1c7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MTA5Mw==", "url": "https://github.com/eugenp/tutorials/pull/9000#discussion_r424671093", "bodyText": "Done fixed, replaced with:\nCompletableFuture.allOf(runAsync(reader), runAsync(processor), runAsync(writer)).get();\nBut left that is commented for the sake build pipeline to stop, else this would run infinitely. To have the test working uncomment the line and execute.", "author": "dhruba619", "createdAt": "2020-05-13T19:12:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3Njg2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3NTg1NA==", "url": "https://github.com/eugenp/tutorials/pull/9000#discussion_r424675854", "bodyText": "You can just do result.join()", "author": "pivovarit", "createdAt": "2020-05-13T19:21:20Z", "path": "core-java-modules/core-java-concurrency-advanced-3/src/test/java/com/baeldung/exchanger/ExchangerUnitTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.baeldung.exchanger;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Exchanger;\n+\n+import java.util.concurrent.ExecutionException;\n+import org.junit.Test;\n+\n+import static java.util.concurrent.CompletableFuture.runAsync;\n+\n+public class ExchangerUnitTest {\n+    \n+    \n+    @Test\n+    public void givenThreads_whenMessageExchanged_thenCorrect() {\n+        Exchanger<String> exchanger = new Exchanger<>();\n+\n+        Runnable taskA = () -> {\n+            try {\n+                String message = exchanger.exchange(\"from A\");\n+                assertEquals(\"from B\", message);\n+            } catch (InterruptedException e) {\n+                Thread.currentThread().interrupt();\n+                throw new RuntimeException(e);\n+            }\n+        };\n+\n+        Runnable taskB = () -> {\n+            try {\n+                String message = exchanger.exchange(\"from B\");\n+                assertEquals(\"from A\", message);\n+            } catch (InterruptedException e) {\n+                Thread.currentThread().interrupt();\n+                throw new RuntimeException(e);\n+            }\n+        };\n+\n+        CompletableFuture.allOf(runAsync(taskA), runAsync(taskB)).join();\n+    }\n+\n+    @Test\n+    public void givenThread_WhenExchangedMessage_thenCorrect() throws InterruptedException, ExecutionException {\n+        Exchanger<String> exchanger = new Exchanger<>();\n+\n+        Runnable runner = () -> {\n+            try {\n+                String message = exchanger.exchange(\"from runner\");\n+                assertEquals(\"to runner\", message);\n+            } catch (InterruptedException e) {\n+                Thread.currentThread().interrupt();\n+                throw new RuntimeException(e);\n+            }\n+        };\n+\n+        CompletableFuture<Void> result = CompletableFuture.runAsync(runner);\n+        String msg = exchanger.exchange(\"to runner\");\n+        assertEquals(\"from runner\", msg);\n+        CompletableFuture.allOf(result).get();", "originalCommit": "95ea758e7d33c4ec6466041c94dbc06bc5e45222", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk2ODIwNQ==", "url": "https://github.com/eugenp/tutorials/pull/9000#discussion_r424968205", "bodyText": "Done Fixed.", "author": "cornercoding", "createdAt": "2020-05-14T08:41:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3NTg1NA=="}], "type": "inlineReview"}, {"oid": "3b180f3e1865862874854989761a144033f86921", "url": "https://github.com/eugenp/tutorials/commit/3b180f3e1865862874854989761a144033f86921", "message": "BAEL-3858 Updated feedback comments", "committedDate": "2020-05-14T08:38:35Z", "type": "commit"}]}