{"pr_number": 9645, "pr_title": "BAEL-4350: Difference between Statement and PreparedStatement", "pr_createdAt": "2020-07-05T23:02:58Z", "pr_url": "https://github.com/eugenp/tutorials/pull/9645", "timeline": [{"oid": "ef186ed6593bbbf5c5ddd56d08d6aa562fe5f61b", "url": "https://github.com/eugenp/tutorials/commit/ef186ed6593bbbf5c5ddd56d08d6aa562fe5f61b", "message": "BAEL-4350: Difference between Statement and PreparedStatement\n\nSigned-off-by: Ali Ben Messaoud <mail2alibm@gmail.com>", "committedDate": "2020-07-05T23:09:28Z", "type": "forcePushed"}, {"oid": "5e523cb84a688fa3ec32ce71540af09983afbf7d", "url": "https://github.com/eugenp/tutorials/commit/5e523cb84a688fa3ec32ce71540af09983afbf7d", "message": "BAEL-4350: Difference between Statement and PreparedStatement\n\nSigned-off-by: Ali Ben Messaoud <mail2alibm@gmail.com>", "committedDate": "2020-07-07T16:08:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1NjUzMQ==", "url": "https://github.com/eugenp/tutorials/pull/9645#discussion_r453256531", "bodyText": "Do not edit this file. We don't know what the final URL will be yet, and your editor will add this after the article is published.", "author": "KevinGilmore", "createdAt": "2020-07-12T02:11:49Z", "path": "persistence-modules/core-java-persistence/README.md", "diffHunk": "@@ -10,3 +10,4 @@\n - [Guide to the JDBC ResultSet Interface](https://www.baeldung.com/jdbc-resultset)\n - [Types of SQL Joins](https://www.baeldung.com/sql-joins)\n - [Returning the Generated Keys in JDBC](https://www.baeldung.com/jdbc-returning-generated-keys)\n+- [Difference between Statement and PreparedStatement](https://www.baeldung.com/difference-between-statement-and-preparedstatement)", "originalCommit": "5e523cb84a688fa3ec32ce71540af09983afbf7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1NjYyNg==", "url": "https://github.com/eugenp/tutorials/pull/9645#discussion_r453256626", "bodyText": "add blank line before assertions", "author": "KevinGilmore", "createdAt": "2020-07-12T02:13:24Z", "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/DatasourceFactoryUnitTest.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.baeldung.statmentVsPreparedstatment;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class DatasourceFactoryUnitTest {\n+\n+    @Test\n+    void whenCreateConnectionAndTables_thenConnectionIsOpenAndTableIsCreated()\n+        throws SQLException, ClassNotFoundException {\n+        DatasourceFactory factory = new DatasourceFactory();\n+        Connection connection = factory.getConnection();\n+        assertFalse(connection.isClosed());", "originalCommit": "5e523cb84a688fa3ec32ce71540af09983afbf7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1NjY5MQ==", "url": "https://github.com/eugenp/tutorials/pull/9645#discussion_r453256691", "bodyText": "Add a blank line before each set of assertions", "author": "KevinGilmore", "createdAt": "2020-07-12T02:14:22Z", "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/PreparedStatementPersonDaoUnitTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.baeldung.statmentVsPreparedstatment;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class PreparedStatementPersonDaoUnitTest {\n+    private PreparedStatementPersonDao dao;\n+\n+    @BeforeEach\n+    void setup() throws SQLException, ClassNotFoundException {\n+        DatasourceFactory datasourceFactory = new DatasourceFactory();\n+        Connection connection = datasourceFactory.getConnection();\n+        datasourceFactory.createTables();\n+        dao = new PreparedStatementPersonDao(connection);\n+    }\n+\n+    @Test\n+    void whenInsertAPerson_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"john\")));\n+    }\n+\n+    @Test\n+    void whenInsertAPersonWithQuoteInText_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"O'Brien\")));\n+    }\n+\n+    @Test\n+    void whenGetAPersonById_thenItReturnThePersonInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+\n+        Optional<PersonEntity> maybeEmployee = dao.getById(1);\n+        assertTrue(maybeEmployee.isPresent());\n+\n+        PersonEntity personEntity = maybeEmployee.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"john\", personEntity.getName());", "originalCommit": "5e523cb84a688fa3ec32ce71540af09983afbf7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1NjcwOA==", "url": "https://github.com/eugenp/tutorials/pull/9645#discussion_r453256708", "bodyText": "remove blank line", "author": "KevinGilmore", "createdAt": "2020-07-12T02:14:33Z", "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/PreparedStatementPersonDaoUnitTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.baeldung.statmentVsPreparedstatment;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class PreparedStatementPersonDaoUnitTest {\n+    private PreparedStatementPersonDao dao;\n+\n+    @BeforeEach\n+    void setup() throws SQLException, ClassNotFoundException {\n+        DatasourceFactory datasourceFactory = new DatasourceFactory();\n+        Connection connection = datasourceFactory.getConnection();\n+        datasourceFactory.createTables();\n+        dao = new PreparedStatementPersonDao(connection);\n+    }\n+\n+    @Test\n+    void whenInsertAPerson_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"john\")));\n+    }\n+\n+    @Test\n+    void whenInsertAPersonWithQuoteInText_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"O'Brien\")));\n+    }\n+\n+    @Test\n+    void whenGetAPersonById_thenItReturnThePersonInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+\n+        Optional<PersonEntity> maybeEmployee = dao.getById(1);\n+        assertTrue(maybeEmployee.isPresent());\n+\n+        PersonEntity personEntity = maybeEmployee.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"john\", personEntity.getName());\n+    }\n+\n+    @Test\n+    void whenInsertAndGetMultiplePersons_thenItNeverThrowsAnException() throws SQLException {\n+", "originalCommit": "5e523cb84a688fa3ec32ce71540af09983afbf7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1NjcxMw==", "url": "https://github.com/eugenp/tutorials/pull/9645#discussion_r453256713", "bodyText": "remove blank line", "author": "KevinGilmore", "createdAt": "2020-07-12T02:14:43Z", "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/PreparedStatementPersonDaoUnitTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.baeldung.statmentVsPreparedstatment;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class PreparedStatementPersonDaoUnitTest {\n+    private PreparedStatementPersonDao dao;\n+\n+    @BeforeEach\n+    void setup() throws SQLException, ClassNotFoundException {\n+        DatasourceFactory datasourceFactory = new DatasourceFactory();\n+        Connection connection = datasourceFactory.getConnection();\n+        datasourceFactory.createTables();\n+        dao = new PreparedStatementPersonDao(connection);\n+    }\n+\n+    @Test\n+    void whenInsertAPerson_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"john\")));\n+    }\n+\n+    @Test\n+    void whenInsertAPersonWithQuoteInText_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"O'Brien\")));\n+    }\n+\n+    @Test\n+    void whenGetAPersonById_thenItReturnThePersonInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+\n+        Optional<PersonEntity> maybeEmployee = dao.getById(1);\n+        assertTrue(maybeEmployee.isPresent());\n+\n+        PersonEntity personEntity = maybeEmployee.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"john\", personEntity.getName());\n+    }\n+\n+    @Test\n+    void whenInsertAndGetMultiplePersons_thenItNeverThrowsAnException() throws SQLException {\n+\n+        assertDoesNotThrow(() -> dao.insert(\n+            Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skit\"))));\n+\n+        List<PersonEntity> result = dao.getAll();\n+\n+        assertEquals(Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skit\")),\n+            result);\n+    }\n+\n+    @Test\n+    void whenUpdateAnExistentPerson_thenItReturnsTheUpdatedPerson() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+        dao.update(new PersonEntity(1, \"johnny\"));\n+\n+        Optional<PersonEntity> maybePerson = dao.getById(1);\n+        assertTrue(maybePerson.isPresent());\n+\n+        PersonEntity personEntity = maybePerson.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"johnny\", personEntity.getName());\n+    }\n+\n+    @Test\n+    void whenDeleteAPersonById_thenItWillBeAbsentInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+        dao.deleteById(1);\n+\n+        Optional<PersonEntity> maybePerson = dao.getById(1);\n+        assertFalse(maybePerson.isPresent());\n+", "originalCommit": "5e523cb84a688fa3ec32ce71540af09983afbf7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1Njc2Mw==", "url": "https://github.com/eugenp/tutorials/pull/9645#discussion_r453256763", "bodyText": "Add a blank line before each set of assertions", "author": "KevinGilmore", "createdAt": "2020-07-12T02:15:12Z", "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/PreparedStatementPersonDaoUnitTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.baeldung.statmentVsPreparedstatment;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class PreparedStatementPersonDaoUnitTest {\n+    private PreparedStatementPersonDao dao;\n+\n+    @BeforeEach\n+    void setup() throws SQLException, ClassNotFoundException {\n+        DatasourceFactory datasourceFactory = new DatasourceFactory();\n+        Connection connection = datasourceFactory.getConnection();\n+        datasourceFactory.createTables();\n+        dao = new PreparedStatementPersonDao(connection);\n+    }\n+\n+    @Test\n+    void whenInsertAPerson_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"john\")));\n+    }\n+\n+    @Test\n+    void whenInsertAPersonWithQuoteInText_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"O'Brien\")));\n+    }\n+\n+    @Test\n+    void whenGetAPersonById_thenItReturnThePersonInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+\n+        Optional<PersonEntity> maybeEmployee = dao.getById(1);\n+        assertTrue(maybeEmployee.isPresent());\n+\n+        PersonEntity personEntity = maybeEmployee.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"john\", personEntity.getName());\n+    }\n+\n+    @Test\n+    void whenInsertAndGetMultiplePersons_thenItNeverThrowsAnException() throws SQLException {\n+\n+        assertDoesNotThrow(() -> dao.insert(\n+            Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skit\"))));\n+\n+        List<PersonEntity> result = dao.getAll();\n+\n+        assertEquals(Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skit\")),\n+            result);\n+    }\n+\n+    @Test\n+    void whenUpdateAnExistentPerson_thenItReturnsTheUpdatedPerson() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+        dao.update(new PersonEntity(1, \"johnny\"));\n+\n+        Optional<PersonEntity> maybePerson = dao.getById(1);\n+        assertTrue(maybePerson.isPresent());\n+\n+        PersonEntity personEntity = maybePerson.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"johnny\", personEntity.getName());", "originalCommit": "5e523cb84a688fa3ec32ce71540af09983afbf7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1Njc3Ng==", "url": "https://github.com/eugenp/tutorials/pull/9645#discussion_r453256776", "bodyText": "Add a blank line before assertion", "author": "KevinGilmore", "createdAt": "2020-07-12T02:15:25Z", "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/PreparedStatementPersonDaoUnitTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.baeldung.statmentVsPreparedstatment;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class PreparedStatementPersonDaoUnitTest {\n+    private PreparedStatementPersonDao dao;\n+\n+    @BeforeEach\n+    void setup() throws SQLException, ClassNotFoundException {\n+        DatasourceFactory datasourceFactory = new DatasourceFactory();\n+        Connection connection = datasourceFactory.getConnection();\n+        datasourceFactory.createTables();\n+        dao = new PreparedStatementPersonDao(connection);\n+    }\n+\n+    @Test\n+    void whenInsertAPerson_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"john\")));\n+    }\n+\n+    @Test\n+    void whenInsertAPersonWithQuoteInText_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"O'Brien\")));\n+    }\n+\n+    @Test\n+    void whenGetAPersonById_thenItReturnThePersonInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+\n+        Optional<PersonEntity> maybeEmployee = dao.getById(1);\n+        assertTrue(maybeEmployee.isPresent());\n+\n+        PersonEntity personEntity = maybeEmployee.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"john\", personEntity.getName());\n+    }\n+\n+    @Test\n+    void whenInsertAndGetMultiplePersons_thenItNeverThrowsAnException() throws SQLException {\n+\n+        assertDoesNotThrow(() -> dao.insert(\n+            Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skit\"))));\n+\n+        List<PersonEntity> result = dao.getAll();\n+\n+        assertEquals(Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skit\")),\n+            result);\n+    }\n+\n+    @Test\n+    void whenUpdateAnExistentPerson_thenItReturnsTheUpdatedPerson() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+        dao.update(new PersonEntity(1, \"johnny\"));\n+\n+        Optional<PersonEntity> maybePerson = dao.getById(1);\n+        assertTrue(maybePerson.isPresent());\n+\n+        PersonEntity personEntity = maybePerson.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"johnny\", personEntity.getName());\n+    }\n+\n+    @Test\n+    void whenDeleteAPersonById_thenItWillBeAbsentInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+        dao.deleteById(1);\n+\n+        Optional<PersonEntity> maybePerson = dao.getById(1);\n+        assertFalse(maybePerson.isPresent());\n+\n+    }\n+\n+    @Test\n+    void whenAHackerUpdateAPerson_thenItUpdatesTheTargetPerson() throws SQLException {\n+\n+        dao.insert(Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skeet\")));\n+        dao.update(new PersonEntity(1, \"hacker' --\"));\n+\n+        List<PersonEntity> result = dao.getAll();\n+        assertEquals(Arrays.asList(new PersonEntity(1, \"hacker' --\"), new PersonEntity(2, \"skeet\")),", "originalCommit": "5e523cb84a688fa3ec32ce71540af09983afbf7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1Njc5MA==", "url": "https://github.com/eugenp/tutorials/pull/9645#discussion_r453256790", "bodyText": "remove blank line", "author": "KevinGilmore", "createdAt": "2020-07-12T02:15:34Z", "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/PreparedStatementPersonDaoUnitTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.baeldung.statmentVsPreparedstatment;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class PreparedStatementPersonDaoUnitTest {\n+    private PreparedStatementPersonDao dao;\n+\n+    @BeforeEach\n+    void setup() throws SQLException, ClassNotFoundException {\n+        DatasourceFactory datasourceFactory = new DatasourceFactory();\n+        Connection connection = datasourceFactory.getConnection();\n+        datasourceFactory.createTables();\n+        dao = new PreparedStatementPersonDao(connection);\n+    }\n+\n+    @Test\n+    void whenInsertAPerson_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"john\")));\n+    }\n+\n+    @Test\n+    void whenInsertAPersonWithQuoteInText_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"O'Brien\")));\n+    }\n+\n+    @Test\n+    void whenGetAPersonById_thenItReturnThePersonInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+\n+        Optional<PersonEntity> maybeEmployee = dao.getById(1);\n+        assertTrue(maybeEmployee.isPresent());\n+\n+        PersonEntity personEntity = maybeEmployee.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"john\", personEntity.getName());\n+    }\n+\n+    @Test\n+    void whenInsertAndGetMultiplePersons_thenItNeverThrowsAnException() throws SQLException {\n+\n+        assertDoesNotThrow(() -> dao.insert(\n+            Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skit\"))));\n+\n+        List<PersonEntity> result = dao.getAll();\n+\n+        assertEquals(Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skit\")),\n+            result);\n+    }\n+\n+    @Test\n+    void whenUpdateAnExistentPerson_thenItReturnsTheUpdatedPerson() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+        dao.update(new PersonEntity(1, \"johnny\"));\n+\n+        Optional<PersonEntity> maybePerson = dao.getById(1);\n+        assertTrue(maybePerson.isPresent());\n+\n+        PersonEntity personEntity = maybePerson.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"johnny\", personEntity.getName());\n+    }\n+\n+    @Test\n+    void whenDeleteAPersonById_thenItWillBeAbsentInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+        dao.deleteById(1);\n+\n+        Optional<PersonEntity> maybePerson = dao.getById(1);\n+        assertFalse(maybePerson.isPresent());\n+\n+    }\n+\n+    @Test\n+    void whenAHackerUpdateAPerson_thenItUpdatesTheTargetPerson() throws SQLException {\n+\n+        dao.insert(Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skeet\")));\n+        dao.update(new PersonEntity(1, \"hacker' --\"));\n+\n+        List<PersonEntity> result = dao.getAll();\n+        assertEquals(Arrays.asList(new PersonEntity(1, \"hacker' --\"), new PersonEntity(2, \"skeet\")),\n+            result);\n+", "originalCommit": "5e523cb84a688fa3ec32ce71540af09983afbf7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1NjgwOQ==", "url": "https://github.com/eugenp/tutorials/pull/9645#discussion_r453256809", "bodyText": "Add a blank line before each set of assertions", "author": "KevinGilmore", "createdAt": "2020-07-12T02:15:51Z", "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/StatementPersonDaoUnitTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.baeldung.statmentVsPreparedstatment;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class StatementPersonDaoUnitTest {\n+\n+    private StatementPersonDao dao;\n+\n+    @BeforeEach\n+    void setup() throws SQLException, ClassNotFoundException {\n+        DatasourceFactory datasourceFactory = new DatasourceFactory();\n+        Connection connection = datasourceFactory.getConnection();\n+        datasourceFactory.createTables();\n+        dao = new StatementPersonDao(connection);\n+    }\n+\n+    @Test\n+    void whenInsertAPerson_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"john\")));\n+    }\n+\n+    @Test\n+    void whenInsertAPersonWithQuoteInText_thenItWillThrowAnException() {\n+        assertThrows(SQLException.class, () -> dao.insert(new PersonEntity(1, \"O'Brien\")));\n+    }\n+\n+    @Test\n+    void whenGetAPersonById_thenItReturnThePersonInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+\n+        Optional<PersonEntity> maybeEmployee = dao.getById(1);\n+        assertTrue(maybeEmployee.isPresent());\n+\n+        PersonEntity personEntity = maybeEmployee.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"john\", personEntity.getName());", "originalCommit": "5e523cb84a688fa3ec32ce71540af09983afbf7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1NjgxMQ==", "url": "https://github.com/eugenp/tutorials/pull/9645#discussion_r453256811", "bodyText": "remove blank line", "author": "KevinGilmore", "createdAt": "2020-07-12T02:16:01Z", "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/StatementPersonDaoUnitTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.baeldung.statmentVsPreparedstatment;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class StatementPersonDaoUnitTest {\n+\n+    private StatementPersonDao dao;\n+\n+    @BeforeEach\n+    void setup() throws SQLException, ClassNotFoundException {\n+        DatasourceFactory datasourceFactory = new DatasourceFactory();\n+        Connection connection = datasourceFactory.getConnection();\n+        datasourceFactory.createTables();\n+        dao = new StatementPersonDao(connection);\n+    }\n+\n+    @Test\n+    void whenInsertAPerson_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"john\")));\n+    }\n+\n+    @Test\n+    void whenInsertAPersonWithQuoteInText_thenItWillThrowAnException() {\n+        assertThrows(SQLException.class, () -> dao.insert(new PersonEntity(1, \"O'Brien\")));\n+    }\n+\n+    @Test\n+    void whenGetAPersonById_thenItReturnThePersonInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+\n+        Optional<PersonEntity> maybeEmployee = dao.getById(1);\n+        assertTrue(maybeEmployee.isPresent());\n+\n+        PersonEntity personEntity = maybeEmployee.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"john\", personEntity.getName());\n+    }\n+\n+    @Test\n+    void whenInsertAndGetMultiplePersons_thenItNeverThrowsAnException() throws SQLException {\n+", "originalCommit": "5e523cb84a688fa3ec32ce71540af09983afbf7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1NjgyMg==", "url": "https://github.com/eugenp/tutorials/pull/9645#discussion_r453256822", "bodyText": "remove blank line", "author": "KevinGilmore", "createdAt": "2020-07-12T02:16:11Z", "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/StatementPersonDaoUnitTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.baeldung.statmentVsPreparedstatment;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class StatementPersonDaoUnitTest {\n+\n+    private StatementPersonDao dao;\n+\n+    @BeforeEach\n+    void setup() throws SQLException, ClassNotFoundException {\n+        DatasourceFactory datasourceFactory = new DatasourceFactory();\n+        Connection connection = datasourceFactory.getConnection();\n+        datasourceFactory.createTables();\n+        dao = new StatementPersonDao(connection);\n+    }\n+\n+    @Test\n+    void whenInsertAPerson_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"john\")));\n+    }\n+\n+    @Test\n+    void whenInsertAPersonWithQuoteInText_thenItWillThrowAnException() {\n+        assertThrows(SQLException.class, () -> dao.insert(new PersonEntity(1, \"O'Brien\")));\n+    }\n+\n+    @Test\n+    void whenGetAPersonById_thenItReturnThePersonInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+\n+        Optional<PersonEntity> maybeEmployee = dao.getById(1);\n+        assertTrue(maybeEmployee.isPresent());\n+\n+        PersonEntity personEntity = maybeEmployee.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"john\", personEntity.getName());\n+    }\n+\n+    @Test\n+    void whenInsertAndGetMultiplePersons_thenItNeverThrowsAnException() throws SQLException {\n+\n+        assertDoesNotThrow(() -> dao.insert(\n+            Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skeet\"))));\n+\n+        List<PersonEntity> result = dao.getAll();\n+\n+        assertEquals(Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skeet\")),\n+            result);\n+    }\n+\n+    @Test\n+    void whenUpdateAnExistentPerson_thenItReturnsTheUpdatedPerson() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+        dao.update(new PersonEntity(1, \"johnny\"));\n+\n+        Optional<PersonEntity> maybePerson = dao.getById(1);\n+        assertTrue(maybePerson.isPresent());\n+\n+        PersonEntity personEntity = maybePerson.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"johnny\", personEntity.getName());\n+    }\n+\n+    @Test\n+    void whenDeleteAPersonById_thenItWillBeAbsentInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+        dao.deleteById(1);\n+\n+        Optional<PersonEntity> maybePerson = dao.getById(1);\n+        assertFalse(maybePerson.isPresent());\n+", "originalCommit": "5e523cb84a688fa3ec32ce71540af09983afbf7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1Njg1NQ==", "url": "https://github.com/eugenp/tutorials/pull/9645#discussion_r453256855", "bodyText": "remove blank line at beginning and end, and add blank line before assertion", "author": "KevinGilmore", "createdAt": "2020-07-12T02:16:37Z", "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/StatementPersonDaoUnitTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.baeldung.statmentVsPreparedstatment;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class StatementPersonDaoUnitTest {\n+\n+    private StatementPersonDao dao;\n+\n+    @BeforeEach\n+    void setup() throws SQLException, ClassNotFoundException {\n+        DatasourceFactory datasourceFactory = new DatasourceFactory();\n+        Connection connection = datasourceFactory.getConnection();\n+        datasourceFactory.createTables();\n+        dao = new StatementPersonDao(connection);\n+    }\n+\n+    @Test\n+    void whenInsertAPerson_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"john\")));\n+    }\n+\n+    @Test\n+    void whenInsertAPersonWithQuoteInText_thenItWillThrowAnException() {\n+        assertThrows(SQLException.class, () -> dao.insert(new PersonEntity(1, \"O'Brien\")));\n+    }\n+\n+    @Test\n+    void whenGetAPersonById_thenItReturnThePersonInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+\n+        Optional<PersonEntity> maybeEmployee = dao.getById(1);\n+        assertTrue(maybeEmployee.isPresent());\n+\n+        PersonEntity personEntity = maybeEmployee.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"john\", personEntity.getName());\n+    }\n+\n+    @Test\n+    void whenInsertAndGetMultiplePersons_thenItNeverThrowsAnException() throws SQLException {\n+\n+        assertDoesNotThrow(() -> dao.insert(\n+            Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skeet\"))));\n+\n+        List<PersonEntity> result = dao.getAll();\n+\n+        assertEquals(Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skeet\")),\n+            result);\n+    }\n+\n+    @Test\n+    void whenUpdateAnExistentPerson_thenItReturnsTheUpdatedPerson() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+        dao.update(new PersonEntity(1, \"johnny\"));\n+\n+        Optional<PersonEntity> maybePerson = dao.getById(1);\n+        assertTrue(maybePerson.isPresent());\n+\n+        PersonEntity personEntity = maybePerson.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"johnny\", personEntity.getName());\n+    }\n+\n+    @Test\n+    void whenDeleteAPersonById_thenItWillBeAbsentInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+        dao.deleteById(1);\n+\n+        Optional<PersonEntity> maybePerson = dao.getById(1);\n+        assertFalse(maybePerson.isPresent());\n+\n+    }\n+\n+    @Test\n+    void whenAHackerUpdateAPerson_thenItAllPersonsAreUpdated() throws SQLException {\n+\n+        dao.insert(Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skeet\")));\n+        dao.update(new PersonEntity(1, \"hacker' --\"));\n+\n+        List<PersonEntity> result = dao.getAll();\n+        assertEquals(Arrays.asList(new PersonEntity(1, \"hacker\"), new PersonEntity(2, \"hacker\")),\n+            result);\n+", "originalCommit": "5e523cb84a688fa3ec32ce71540af09983afbf7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "91e3dd5c2d71feabfc0b334c5f0a79e978bf89c1", "url": "https://github.com/eugenp/tutorials/commit/91e3dd5c2d71feabfc0b334c5f0a79e978bf89c1", "message": "BAEL-4350: Difference between Statement and PreparedStatement\n\nSigned-off-by: Ali Ben Messaoud <mail2alibm@gmail.com>", "committedDate": "2020-07-12T18:03:39Z", "type": "forcePushed"}, {"oid": "aaafccc64db9c33182c1d513e1eb1ea7e72a4f74", "url": "https://github.com/eugenp/tutorials/commit/aaafccc64db9c33182c1d513e1eb1ea7e72a4f74", "message": "BAEL-4350: Difference between Statement and PreparedStatement\n\nSigned-off-by: Ali Ben Messaoud <mail2alibm@gmail.com>", "committedDate": "2020-07-12T18:04:44Z", "type": "commit"}, {"oid": "aaafccc64db9c33182c1d513e1eb1ea7e72a4f74", "url": "https://github.com/eugenp/tutorials/commit/aaafccc64db9c33182c1d513e1eb1ea7e72a4f74", "message": "BAEL-4350: Difference between Statement and PreparedStatement\n\nSigned-off-by: Ali Ben Messaoud <mail2alibm@gmail.com>", "committedDate": "2020-07-12T18:04:44Z", "type": "forcePushed"}]}