{"pr_number": 1118, "pr_title": "named and commented various seeding methods", "pr_createdAt": "2020-02-15T17:27:55Z", "pr_url": "https://github.com/FabricMC/yarn/pull/1118", "timeline": [{"oid": "82a2f5ea0c91fa6736688c01255937ea78f60810", "url": "https://github.com/FabricMC/yarn/commit/82a2f5ea0c91fa6736688c01255937ea78f60810", "message": "named and commented various seeding methods", "committedDate": "2020-02-15T17:16:21Z", "type": "commit"}, {"oid": "bdddcec9c6ee1b1f062af03ef59a73542b4a3357", "url": "https://github.com/FabricMC/yarn/commit/bdddcec9c6ee1b1f062af03ef59a73542b4a3357", "message": "finished commenting", "committedDate": "2020-02-15T17:20:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDcyNg==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379850726", "bodyText": "You don't need to map the name of unobfuscated methods.\n(Edit: clarified)", "author": "Juuxel", "createdAt": "2020-02-15T19:23:17Z", "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,76 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n-\tMETHOD method_12660 consume (I)V\n-\t\tARG 1 count\n-\tMETHOD method_12661 setSeed (JII)J\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT Note that the terrain seed is NOT world seed dependant and only gets affected by\n+\t\tCOMMENT chunk coordinates.\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n+\tMETHOD method_12660 skip (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT Functionally, this method serves no purpose since the combination of multiple linear\n+\t\tCOMMENT congruential calls is equivalent to another LCG.\n+\t\tARG 1 callsCount\n+\tMETHOD method_12661 setPopulationSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to create population features such as decorators and animals.\n+\t\tCOMMENT\n+\t\tCOMMENT This method takes in the world seed and the negative-most block coordinates of the\n+\t\tCOMMENT chunk. The coordinate pair provided is equivalent to (chunkX * 16, chunkZ * 16). The\n+\t\tCOMMENT three values are mixed together through some layers of hashing to produce the\n+\t\tCOMMENT population seed.\n+\t\tCOMMENT\n+\t\tCOMMENT This function has been proved to be reversible through some exploitation of the underlying\n+\t\tCOMMENT nextLong() weaknesses. It is also important to remember that since setSeed()\n+\t\tCOMMENT truncates the 16 upper bits of world seed, only the 48 lowest bits affect the population\n+\t\tCOMMENT seed output.\n \t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12662 create (IIJJ)Ljava/util/Random;\n-\t\tARG 0 x\n-\t\tARG 1 z\n+\t\tARG 3 posX\n+\t\tARG 4 posZ\n+\tMETHOD method_12662 getSlimeRandom (IIJJ)Ljava/util/Random;\n+\t\tARG 0 chunkX\n+\t\tARG 1 chunkZ\n \t\tARG 2 worldSeed\n-\t\tARG 4 localSeed\n-\tMETHOD method_12663 setStructureSeed (JII)J\n-\t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12664 setFeatureSeed (JII)J\n+\t\tARG 4 scrambler\n+\tMETHOD method_12663 setCarverSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to generate larger features such as caves, ravines, minehafts\n+\t\tCOMMENT and strongholds.\n+\t\tCOMMENT\n+\t\tCOMMENT Similar to the population seed, only the 48 lowest bits of the world seed affect the\n+\t\tCOMMENT output since it the upper 16 bits are truncated in the setSeed() call.\n \t\tARG 1 worldSeed\n+\t\tARG 3 chunkX\n+\t\tARG 4 chunkZ\n+\tMETHOD method_12664 setDecoratorSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to generate a given feature.\n+\t\tCOMMENT\n+\t\tCOMMENT @param populationSeed The population seed computed in setPopulationSeed().\n+\t\tCOMMENT @param index The index of the feature in the feature list.\n+\t\tCOMMENT @param step The generation step's ordinal for this feature.\n+\t\tCOMMENT\n+\t\tCOMMENT The salt, in the form of {index + 10000 * step} assures that each feature is seeded\n+\t\tCOMMENT differently, making the decoration feel more random. Even though it does a good job\n+\t\tCOMMENT at doing so, many entropy issues arise from the salt being so small and result in\n+\t\tCOMMENT weird alignments between features that have an index close apart.\n+\t\tARG 1 populationSeed\n \t\tARG 3 index\n \t\tARG 4 step\n-\tMETHOD method_12665 setStructureSeed (JIII)J\n+\tMETHOD method_12665 setRegionSeed (JIII)J\n+\t\tCOMMENT Seeds the randomizer to determine the start position of structure features such as\n+\t\tCOMMENT temples, monuments and buried treasures within a region.\n+\t\tCOMMENT\n+\t\tCOMMENT The region coordinates pair corresponds to the coordinates of the region the seeded\n+\t\tCOMMENT chunk lies in. For example, a swamp hut region is 32 by 32 chunks meaning that all\n+\t\tCOMMENT chunks that lie within that region get seeded the same way.\n+\t\tCOMMENT\n+\t\tCOMMENT Similarly, the upper 16 bits of world seed also do not affect the region seed because\n+\t\tCOMMENT they get truncated in the setSeed() call.\n \t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\t\tARG 5 seedModifier\n-\tMETHOD next (I)I\n+\t\tARG 3 regionX\n+\t\tARG 4 regionZ\n+\t\tARG 5 salt\n+\tMETHOD next next (I)I", "originalCommit": "bdddcec9c6ee1b1f062af03ef59a73542b4a3357", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NzY4NQ==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379857685", "bodyText": "OOPS, I believe that was an accident.", "author": "KaptainWutax", "createdAt": "2020-02-15T21:37:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDcyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDc1Mg==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379850752", "bodyText": "Why rename this if it's just used for structures?", "author": "Juuxel", "createdAt": "2020-02-15T19:23:41Z", "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,76 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n-\tMETHOD method_12660 consume (I)V\n-\t\tARG 1 count\n-\tMETHOD method_12661 setSeed (JII)J\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT Note that the terrain seed is NOT world seed dependant and only gets affected by\n+\t\tCOMMENT chunk coordinates.\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n+\tMETHOD method_12660 skip (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT Functionally, this method serves no purpose since the combination of multiple linear\n+\t\tCOMMENT congruential calls is equivalent to another LCG.\n+\t\tARG 1 callsCount\n+\tMETHOD method_12661 setPopulationSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to create population features such as decorators and animals.\n+\t\tCOMMENT\n+\t\tCOMMENT This method takes in the world seed and the negative-most block coordinates of the\n+\t\tCOMMENT chunk. The coordinate pair provided is equivalent to (chunkX * 16, chunkZ * 16). The\n+\t\tCOMMENT three values are mixed together through some layers of hashing to produce the\n+\t\tCOMMENT population seed.\n+\t\tCOMMENT\n+\t\tCOMMENT This function has been proved to be reversible through some exploitation of the underlying\n+\t\tCOMMENT nextLong() weaknesses. It is also important to remember that since setSeed()\n+\t\tCOMMENT truncates the 16 upper bits of world seed, only the 48 lowest bits affect the population\n+\t\tCOMMENT seed output.\n \t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12662 create (IIJJ)Ljava/util/Random;\n-\t\tARG 0 x\n-\t\tARG 1 z\n+\t\tARG 3 posX\n+\t\tARG 4 posZ\n+\tMETHOD method_12662 getSlimeRandom (IIJJ)Ljava/util/Random;\n+\t\tARG 0 chunkX\n+\t\tARG 1 chunkZ\n \t\tARG 2 worldSeed\n-\t\tARG 4 localSeed\n-\tMETHOD method_12663 setStructureSeed (JII)J\n-\t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12664 setFeatureSeed (JII)J\n+\t\tARG 4 scrambler\n+\tMETHOD method_12663 setCarverSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to generate larger features such as caves, ravines, minehafts\n+\t\tCOMMENT and strongholds.\n+\t\tCOMMENT\n+\t\tCOMMENT Similar to the population seed, only the 48 lowest bits of the world seed affect the\n+\t\tCOMMENT output since it the upper 16 bits are truncated in the setSeed() call.\n \t\tARG 1 worldSeed\n+\t\tARG 3 chunkX\n+\t\tARG 4 chunkZ\n+\tMETHOD method_12664 setDecoratorSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to generate a given feature.\n+\t\tCOMMENT\n+\t\tCOMMENT @param populationSeed The population seed computed in setPopulationSeed().\n+\t\tCOMMENT @param index The index of the feature in the feature list.\n+\t\tCOMMENT @param step The generation step's ordinal for this feature.\n+\t\tCOMMENT\n+\t\tCOMMENT The salt, in the form of {index + 10000 * step} assures that each feature is seeded\n+\t\tCOMMENT differently, making the decoration feel more random. Even though it does a good job\n+\t\tCOMMENT at doing so, many entropy issues arise from the salt being so small and result in\n+\t\tCOMMENT weird alignments between features that have an index close apart.\n+\t\tARG 1 populationSeed\n \t\tARG 3 index\n \t\tARG 4 step\n-\tMETHOD method_12665 setStructureSeed (JIII)J\n+\tMETHOD method_12665 setRegionSeed (JIII)J", "originalCommit": "bdddcec9c6ee1b1f062af03ef59a73542b4a3357", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NzY3Nw==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379857677", "bodyText": "In seed finding, \"structure seed\" has been referring to the lowest 48 bits for quite some time. I tried to stick with those names. Additionally, \"structure seed\" in this scenario can be quite misleading since it only determines structure starts and doesn't handle the actual generation.", "author": "KaptainWutax", "createdAt": "2020-02-15T21:37:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1ODMyNQ==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379858325", "bodyText": "The vast majority of people using these mappings will be approaching this code from the viewpoint of creating their own structures. They will be asking the question \"which method do I use to initialize the Random for structure generation?\", for which the old name was much clearer. Using the term \"structure seed\" to mean the bottom 48 bits of the seed is bad terminology on the part of seed finders, and shouldn't warrant this rename. If necessary, add clarifications in Javadocs.", "author": "Earthcomputer", "createdAt": "2020-02-15T21:49:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1ODYyOA==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379858628", "bodyText": "getStructurePosSeed?", "author": "Earthcomputer", "createdAt": "2020-02-15T21:55:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1ODk4NQ==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379858985", "bodyText": "I believe region encompasses structurePos quite well. Remember different structures have different region sizes.", "author": "KaptainWutax", "createdAt": "2020-02-15T22:02:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1OTIzMA==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379859230", "bodyText": "There are many other things that \"region\" can refer to in the game, including 32x32 chunk region files. Try and put yourself in the shoes of someone who has never seen this code before. What's most important for them is that the seed is used for choosing structure positions, that needs to be immediately obvious. If you insist on having \"region\" in the name, then how about getStructureRegionSeed?", "author": "Earthcomputer", "createdAt": "2020-02-15T22:07:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1OTg5Mw==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379859893", "bodyText": "Using the term \"structure seed\" to mean the bottom 48 bits of the seed is bad terminology on the part of seed finders\n\nNot bad terminology since the 48 lowest bits quite literally dictate where structures land.\n\nThere are many other things that \"region\" can refer to in the game, including 32x32 chunk region files.\n\nPrecisely, the region term comes from the fact that most structures are seeded per 32x32 chunks regions. I guess the getStructureRegionSeed is better.\n\nWhat's most important for them is that the seed is used for choosing structure positions, that needs to be immediately obvious.\n\nIt won't ever be obvious since the parameters take in region coords which need pre-processing. They will always be forced to look into how structures generate in one way or the other.\n\nIf you insist on having \"region\" in the name, then how about getStructureRegionSeed?\n\nSure, that works.", "author": "KaptainWutax", "createdAt": "2020-02-15T22:20:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2MDA0Mw==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379860043", "bodyText": "The name \"region\" is already encoded in the relevant parameters, so I still stand by getStructurePosSeed as the best name.", "author": "Earthcomputer", "createdAt": "2020-02-15T22:24:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk0MTM1NA==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379941354", "bodyText": "getStructurePosSeed implies the method does so much more than it does. It just seeds the RNG with arbitrary coordinates called region since the size can vary(the method has no way of knowing that...) and can overlap between different feature regions. It gives you the seed of the region, which can be used to calculate the offset of a structure at some point-- but it's not what it does fundamentally. If you're worried about the modders, let's put ourselves in the shoes of someone implementing a structure feature. One of two things could happen.\n\n\nOverride AbstractTempleFeature. When doing that, the base code handles the region calculations for you. No need to bother with the seeding.\n\n\nOverride StructureFeature. By doing so, you are FORCED to write your own region code and by the time you get to the seeding, everything falls into place nicely.\n\n\nRemember that structures go through:\nsetRegionSeed to determine region offset.\nsetCarverSeed to determine structure start behaviour such as rotation.\nsetFeatureSeed for the generator to determine stuff like loot or, for example, random cobble jungle temples.\nYou have achieved NOTHING in terms of intuitiveness by sticking \"structure\" and \"pos\" to the name and instead, implied the method does so much more than it does. I'd rather have it describe behaviour than usage.", "author": "KaptainWutax", "createdAt": "2020-02-16T23:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk5MTAyMQ==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379991021", "bodyText": "getStructureStartSeed since it's apparantly used to determine the seed for initial structure positions (the starts of structures)?", "author": "Sollace", "createdAt": "2020-02-17T05:27:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE5Mjk2Ng==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380192966", "bodyText": "Nope, that one is really bad and will cause confusion since setCarverSeed is your \"structure start seed\". It determines structure rotation and structure start specific behaviour that doesn't require knowing context about which chunk the given feature will be generated in.", "author": "KaptainWutax", "createdAt": "2020-02-17T13:51:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE5NjE5Ng==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380196196", "bodyText": "This is how it goes:\n\nsetRegionSeed to determine region offset.\nsetCarverSeed to determine structure start behaviour such as rotation.\nsetFeatureSeed for the generator to determine stuff like loot or, for example, random cobble in jungle temples.", "author": "KaptainWutax", "createdAt": "2020-02-17T13:57:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE5NzQ1NQ==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380197455", "bodyText": "setRegionSeed to determine region offset.\n\nThat's incredibly vague and doesn't mention that it's for positioning structures.\n\nsetCarverSeed to determine structure start behaviour such as rotation.\n\nHow are carvers and structure rotations related to each other?", "author": "Juuxel", "createdAt": "2020-02-17T13:59:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwMTczMw==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380201733", "bodyText": "Yes, setCarverSeed is honestly a really bad name on my part and I need help figuring out a better one since it handles many different unrelated parts of generation.\n\nThat's incredibly vague and doesn't mention that it's for positioning structures.\n\nBecause it doesn't. It creates a seed from arbitrary region coordinates which are later used for determining chunk coordinates.", "author": "KaptainWutax", "createdAt": "2020-02-17T14:08:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxOTk2Mg==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380219962", "bodyText": "getStructureStartSeed since it's apparantly used to determine the seed for initial structure positions (the starts of structures)?\n\nThis is a bad name because it can be confused with StructureStart, for which a different method is used.\n\nHow are carvers and structure rotations related to each other?\n\n\nsetCarverSeed is honestly a really bad name on my part\n\nThe step in world generation relating to actually placing structures in the world is called \"carving\", that seems to be a Mojang name that's already in Yarn too. Anything random about this step is seeded from this method, and I can't see that the method is used anywhere else, so getCarverSeed is a good name given proper Javadocs. Caves and ravines use it only because they use a StructureStart.\n\nIt creates a seed from arbitrary region coordinates which are later used for determining chunk coordinates.\n\nWhere it's used is what's important in the naming. This method is used to seed the Random to choose to position of the structure, and sometimes whether the structure will spawn or not. The fact that it's used for regions is already encoded in the parameters like I said, and arguably this is less important than the fact the seed is used for structure locations, so the latter is what should be in the name.\nAs an aside, in village generation in Bedrock edition they actually messed up the region coordinates and passed in chunk coordinates instead, and it barely makes a difference (other than the occasional overlapping village). This further strengthens the point that the word \"structure\" is more important to have in the name than \"region\", but \"region\" is still important so it should go in the Javadocs as well as the parameter names. I would even go so far as to put a code example in the Javadocs explaining how to use the getStructurePosSeed method with regions.", "author": "Earthcomputer", "createdAt": "2020-02-17T14:42:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDc1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MDgxNw==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379850817", "bodyText": "These should be comments on the arguments themselves.", "author": "Juuxel", "createdAt": "2020-02-15T19:25:02Z", "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,76 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n-\tMETHOD method_12660 consume (I)V\n-\t\tARG 1 count\n-\tMETHOD method_12661 setSeed (JII)J\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT Note that the terrain seed is NOT world seed dependant and only gets affected by\n+\t\tCOMMENT chunk coordinates.\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n+\tMETHOD method_12660 skip (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT Functionally, this method serves no purpose since the combination of multiple linear\n+\t\tCOMMENT congruential calls is equivalent to another LCG.\n+\t\tARG 1 callsCount\n+\tMETHOD method_12661 setPopulationSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to create population features such as decorators and animals.\n+\t\tCOMMENT\n+\t\tCOMMENT This method takes in the world seed and the negative-most block coordinates of the\n+\t\tCOMMENT chunk. The coordinate pair provided is equivalent to (chunkX * 16, chunkZ * 16). The\n+\t\tCOMMENT three values are mixed together through some layers of hashing to produce the\n+\t\tCOMMENT population seed.\n+\t\tCOMMENT\n+\t\tCOMMENT This function has been proved to be reversible through some exploitation of the underlying\n+\t\tCOMMENT nextLong() weaknesses. It is also important to remember that since setSeed()\n+\t\tCOMMENT truncates the 16 upper bits of world seed, only the 48 lowest bits affect the population\n+\t\tCOMMENT seed output.\n \t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12662 create (IIJJ)Ljava/util/Random;\n-\t\tARG 0 x\n-\t\tARG 1 z\n+\t\tARG 3 posX\n+\t\tARG 4 posZ\n+\tMETHOD method_12662 getSlimeRandom (IIJJ)Ljava/util/Random;\n+\t\tARG 0 chunkX\n+\t\tARG 1 chunkZ\n \t\tARG 2 worldSeed\n-\t\tARG 4 localSeed\n-\tMETHOD method_12663 setStructureSeed (JII)J\n-\t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12664 setFeatureSeed (JII)J\n+\t\tARG 4 scrambler\n+\tMETHOD method_12663 setCarverSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to generate larger features such as caves, ravines, minehafts\n+\t\tCOMMENT and strongholds.\n+\t\tCOMMENT\n+\t\tCOMMENT Similar to the population seed, only the 48 lowest bits of the world seed affect the\n+\t\tCOMMENT output since it the upper 16 bits are truncated in the setSeed() call.\n \t\tARG 1 worldSeed\n+\t\tARG 3 chunkX\n+\t\tARG 4 chunkZ\n+\tMETHOD method_12664 setDecoratorSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to generate a given feature.\n+\t\tCOMMENT\n+\t\tCOMMENT @param populationSeed The population seed computed in setPopulationSeed().\n+\t\tCOMMENT @param index The index of the feature in the feature list.\n+\t\tCOMMENT @param step The generation step's ordinal for this feature.", "originalCommit": "bdddcec9c6ee1b1f062af03ef59a73542b4a3357", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MTE5OA==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379851198", "bodyText": "This seems like an unnecessary change to me.", "author": "SuperCoder7979", "createdAt": "2020-02-15T19:31:38Z", "path": "mappings/net/minecraft/world/biome/Biome.mapping", "diffHunk": "@@ -58,7 +58,7 @@ CLASS net/minecraft/class_1959 net/minecraft/world/biome/Biome\n \t\tARG 1 step\n \t\tARG 2 chunkGenerator\n \t\tARG 3 world\n-\t\tARG 4 seed\n+\t\tARG 4 populationSeed", "originalCommit": "bdddcec9c6ee1b1f062af03ef59a73542b4a3357", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjIwNA==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379856204", "bodyText": "I think it was to distinguish it from the world seed.", "author": "Earthcomputer", "createdAt": "2020-02-15T21:08:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MTE5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NzU0NA==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379857544", "bodyText": "Yes, I believe it's important to distinguish.", "author": "KaptainWutax", "createdAt": "2020-02-15T21:34:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MTE5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1MTI0OA==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379851248", "bodyText": "callsCount is redundant; count is fine here.", "author": "SuperCoder7979", "createdAt": "2020-02-15T19:32:30Z", "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,76 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n-\tMETHOD method_12660 consume (I)V\n-\t\tARG 1 count\n-\tMETHOD method_12661 setSeed (JII)J\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT Note that the terrain seed is NOT world seed dependant and only gets affected by\n+\t\tCOMMENT chunk coordinates.\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n+\tMETHOD method_12660 skip (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT Functionally, this method serves no purpose since the combination of multiple linear\n+\t\tCOMMENT congruential calls is equivalent to another LCG.\n+\t\tARG 1 callsCount", "originalCommit": "bdddcec9c6ee1b1f062af03ef59a73542b4a3357", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjM0OA==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379856348", "bodyText": "Shouldn't this be salt, to be consistent with the other names in this PR?", "author": "Earthcomputer", "createdAt": "2020-02-15T21:11:33Z", "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,76 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n-\tMETHOD method_12660 consume (I)V\n-\t\tARG 1 count\n-\tMETHOD method_12661 setSeed (JII)J\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT Note that the terrain seed is NOT world seed dependant and only gets affected by\n+\t\tCOMMENT chunk coordinates.\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n+\tMETHOD method_12660 skip (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT Functionally, this method serves no purpose since the combination of multiple linear\n+\t\tCOMMENT congruential calls is equivalent to another LCG.\n+\t\tARG 1 callsCount\n+\tMETHOD method_12661 setPopulationSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to create population features such as decorators and animals.\n+\t\tCOMMENT\n+\t\tCOMMENT This method takes in the world seed and the negative-most block coordinates of the\n+\t\tCOMMENT chunk. The coordinate pair provided is equivalent to (chunkX * 16, chunkZ * 16). The\n+\t\tCOMMENT three values are mixed together through some layers of hashing to produce the\n+\t\tCOMMENT population seed.\n+\t\tCOMMENT\n+\t\tCOMMENT This function has been proved to be reversible through some exploitation of the underlying\n+\t\tCOMMENT nextLong() weaknesses. It is also important to remember that since setSeed()\n+\t\tCOMMENT truncates the 16 upper bits of world seed, only the 48 lowest bits affect the population\n+\t\tCOMMENT seed output.\n \t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12662 create (IIJJ)Ljava/util/Random;\n-\t\tARG 0 x\n-\t\tARG 1 z\n+\t\tARG 3 posX\n+\t\tARG 4 posZ\n+\tMETHOD method_12662 getSlimeRandom (IIJJ)Ljava/util/Random;\n+\t\tARG 0 chunkX\n+\t\tARG 1 chunkZ\n \t\tARG 2 worldSeed\n-\t\tARG 4 localSeed\n-\tMETHOD method_12663 setStructureSeed (JII)J\n-\t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12664 setFeatureSeed (JII)J\n+\t\tARG 4 scrambler", "originalCommit": "bdddcec9c6ee1b1f062af03ef59a73542b4a3357", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NzUxNA==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379857514", "bodyText": "It's not a salt though, it's an XOR.", "author": "KaptainWutax", "createdAt": "2020-02-15T21:33:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjM0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1OTQ4NA==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379859484", "bodyText": "If we're going to be picky about the definition of \"salt\", then technically the other one is not a \"salt\" either, as a salt is supposed to be a randomly generated value from the other inputs and not a hardcoded constant, as I believe it is in both cases here.", "author": "Earthcomputer", "createdAt": "2020-02-15T22:12:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjM0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA3OTU5NQ==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380079595", "bodyText": "The way I know the \"salt\" term is from password hashing where it's a constant value added to a random function to protect from rainbow tables.", "author": "florensie", "createdAt": "2020-02-17T09:50:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjM0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA5MTQ3MA==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380091470", "bodyText": "That's correct. From what I'm familiar with, the 'salt' is a term often used in 'salting' where you append an extra value to the input before running it through the hashing function.\neg. () => rng() => salt\n(salt, password) => sha256(salt$password) => hash\nThen stored as salt$hash in the database to allow for user authentication.\nIt's usually unique per record, and is mainly effective against dictionary attacks and brute-force attacks by forcing them to start from stage 1 for every record they attempt to crack.\nhttps://en.wikipedia.org/wiki/Salt_(cryptography)\nthis post brought to you by random information you didn't ask for", "author": "Sollace", "createdAt": "2020-02-17T10:12:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjM0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MTg1Mw==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380161853", "bodyText": "Though outdated in cryptography, static salts do exist. I have never seen a salt applied through an XOR though, nor anything that isn't an addition. What do you guys think?", "author": "KaptainWutax", "createdAt": "2020-02-17T12:46:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjM0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwNDQwMQ==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380204401", "bodyText": "A salt is an abstract modification which you can make to a hashing function. Just because it's usually an addition or concatenation doesn't mean that's the only way of implementing a salt, and I can't find anything online (feel free to prove me wrong) to suggest that a salt can't be implemented as an XOR. Besides, if you think about the intended usage of the parameter, it wouldn't be any different compared to if it was implemented a different way.", "author": "Earthcomputer", "createdAt": "2020-02-17T14:13:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjM0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMyMzM1NA==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r382323354", "bodyText": "A salt is more an addend than a xor. For the sake of readability, I will go for scrambler. Java named theirs \"seed uniquifier\" anyway lol.", "author": "KaptainWutax", "createdAt": "2020-02-20T23:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjM0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjUyNw==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379856527", "bodyText": "It's not that this method serves \"no\" purpose, it serves the purpose to skip a certain number of calls. It's just that it's inefficient.", "author": "Earthcomputer", "createdAt": "2020-02-15T21:14:58Z", "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,76 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n-\tMETHOD method_12660 consume (I)V\n-\t\tARG 1 count\n-\tMETHOD method_12661 setSeed (JII)J\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT Note that the terrain seed is NOT world seed dependant and only gets affected by\n+\t\tCOMMENT chunk coordinates.\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n+\tMETHOD method_12660 skip (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT Functionally, this method serves no purpose since the combination of multiple linear", "originalCommit": "bdddcec9c6ee1b1f062af03ef59a73542b4a3357", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NzUzMA==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379857530", "bodyText": "The resulting seed is still linearly dependent, so useless.", "author": "KaptainWutax", "createdAt": "2020-02-15T21:34:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1Nzc5MA==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r379857790", "bodyText": "Ok, I guess it's misleading since it does \"scramble\" it in a sense.", "author": "KaptainWutax", "createdAt": "2020-02-15T21:39:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA5MzUzNQ==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380093535", "bodyText": "\"scramble\"?\nI guess if you think of it like rolling a dice... Does it do the skipping by calling the randomizer and ignoring the result?", "author": "Sollace", "createdAt": "2020-02-17T10:16:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3NjYxOQ==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380176619", "bodyText": "I have trouble understanding the purpose of this function. I believe it is used to avoid finding similarities in terrain between the end and overworld generators... but since the resulting seed is still linearly dependant on the other ones so it doesn't do much.\n\nI guess if you think of it like rolling a dice... Does it do the skipping by calling the randomizer and ignoring the result?\n\nYes, basically...", "author": "KaptainWutax", "createdAt": "2020-02-17T13:19:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjUyNw=="}], "type": "inlineReview"}, {"oid": "af3c3aa5092de1cdd6eb13118071fc6bfcaf599a", "url": "https://github.com/FabricMC/yarn/commit/af3c3aa5092de1cdd6eb13118071fc6bfcaf599a", "message": "various changes", "committedDate": "2020-02-17T13:48:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE5ODI1OQ==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380198259", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tCOMMENT <p>Note that the terrain seed is NOT world seed dependant and only gets affected by\n          \n          \n            \n            \t\tCOMMENT <p>Note that the terrain seed is NOT world seed dependent and only gets affected by", "author": "Earthcomputer", "createdAt": "2020-02-17T14:01:23Z", "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,77 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>Note that the terrain seed is NOT world seed dependant and only gets affected by", "originalCommit": "af3c3aa5092de1cdd6eb13118071fc6bfcaf599a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE5OTA2Nw==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380199067", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tCOMMENT linearly dependant. Note that since multiple calls to a linear congruential generator is\n          \n          \n            \n            \t\tCOMMENT linearly dependent. Note that since multiple calls to a linear congruential generator is\n          \n      \n    \n    \n  \n\nAlso, I'm not sure that \"linearly dependent\" is the correct term to use here. Linear dependence relates to how a vector can be written as the weighted sum of other vectors, how does that apply here?", "author": "Earthcomputer", "createdAt": "2020-02-17T14:02:57Z", "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,77 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>Note that the terrain seed is NOT world seed dependant and only gets affected by\n+\t\tCOMMENT chunk coordinates.</p>\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n \tMETHOD method_12660 consume (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>The skips give the effect of \"scrambling\" the randomizer but the output is still\n+\t\tCOMMENT linearly dependant. Note that since multiple calls to a linear congruential generator is", "originalCommit": "af3c3aa5092de1cdd6eb13118071fc6bfcaf599a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwMDc5OA==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380200798", "bodyText": "This should be two paragraphs", "author": "Earthcomputer", "createdAt": "2020-02-17T14:06:23Z", "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,77 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>Note that the terrain seed is NOT world seed dependant and only gets affected by\n+\t\tCOMMENT chunk coordinates.</p>\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n \tMETHOD method_12660 consume (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>The skips give the effect of \"scrambling\" the randomizer but the output is still\n+\t\tCOMMENT linearly dependant. Note that since multiple calls to a linear congruential generator is\n+\t\tCOMMENT equivalent to another linear congruence, this method could be optimized to combine\n+\t\tCOMMENT the calls into one.</p>\n \t\tARG 1 count\n-\tMETHOD method_12661 setSeed (JII)J\n+\tMETHOD method_12661 setPopulationSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to create population features such as decorators and animals.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>This method takes in the world seed and the negative-most block coordinates of the\n+\t\tCOMMENT chunk. The coordinate pair provided is equivalent to (chunkX * 16, chunkZ * 16). The\n+\t\tCOMMENT three values are mixed together through some layers of hashing to produce the\n+\t\tCOMMENT population seed.\n+\t\tCOMMENT\n+\t\tCOMMENT This function has been proved to be reversible through some exploitation of the underlying", "originalCommit": "af3c3aa5092de1cdd6eb13118071fc6bfcaf599a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwMDk4OA==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380200988", "bodyText": "This should be in a <p> tag", "author": "Earthcomputer", "createdAt": "2020-02-17T14:06:44Z", "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,77 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>Note that the terrain seed is NOT world seed dependant and only gets affected by\n+\t\tCOMMENT chunk coordinates.</p>\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n \tMETHOD method_12660 consume (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>The skips give the effect of \"scrambling\" the randomizer but the output is still\n+\t\tCOMMENT linearly dependant. Note that since multiple calls to a linear congruential generator is\n+\t\tCOMMENT equivalent to another linear congruence, this method could be optimized to combine\n+\t\tCOMMENT the calls into one.</p>\n \t\tARG 1 count\n-\tMETHOD method_12661 setSeed (JII)J\n+\tMETHOD method_12661 setPopulationSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to create population features such as decorators and animals.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>This method takes in the world seed and the negative-most block coordinates of the\n+\t\tCOMMENT chunk. The coordinate pair provided is equivalent to (chunkX * 16, chunkZ * 16). The\n+\t\tCOMMENT three values are mixed together through some layers of hashing to produce the\n+\t\tCOMMENT population seed.\n+\t\tCOMMENT\n+\t\tCOMMENT This function has been proved to be reversible through some exploitation of the underlying\n+\t\tCOMMENT nextLong() weaknesses. It is also important to remember that since setSeed()\n+\t\tCOMMENT truncates the 16 upper bits of world seed, only the 48 lowest bits affect the population\n+\t\tCOMMENT seed output.</p>\n \t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12662 create (IIJJ)Ljava/util/Random;\n-\t\tARG 0 x\n-\t\tARG 1 z\n+\t\tARG 3 posX\n+\t\tARG 4 posZ\n+\tMETHOD method_12662 getSlimeRandom (IIJJ)Ljava/util/Random;\n+\t\tARG 0 chunkX\n+\t\tARG 1 chunkZ\n \t\tARG 2 worldSeed\n-\t\tARG 4 localSeed\n-\tMETHOD method_12663 setStructureSeed (JII)J\n-\t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12664 setFeatureSeed (JII)J\n+\t\tARG 4 scrambler\n+\tMETHOD method_12663 setCarverSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to generate larger features such as caves, ravines, minehafts\n+\t\tCOMMENT and strongholds. It is also used to initiate structure start behaviour such as rotation.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>Similar to the population seed, only the 48 lowest bits of the world seed affect the\n+\t\tCOMMENT output since it the upper 16 bits are truncated in the setSeed() call.</p>\n \t\tARG 1 worldSeed\n+\t\tARG 3 chunkX\n+\t\tARG 4 chunkZ\n+\tMETHOD method_12664 setDecoratorSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to generate a given feature.\n+\t\tCOMMENT\n+\t\tCOMMENT The salt, in the form of {index + 10000 * step} assures that each feature is seeded\n+\t\tCOMMENT differently, making the decoration feel more random. Even though it does a good job\n+\t\tCOMMENT at doing so, many entropy issues arise from the salt being so small and result in\n+\t\tCOMMENT weird alignments between features that have an index close apart.", "originalCommit": "af3c3aa5092de1cdd6eb13118071fc6bfcaf599a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwMTI1MQ==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380201251", "bodyText": "This should be two paragraphs", "author": "Earthcomputer", "createdAt": "2020-02-17T14:07:14Z", "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,77 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>Note that the terrain seed is NOT world seed dependant and only gets affected by\n+\t\tCOMMENT chunk coordinates.</p>\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n \tMETHOD method_12660 consume (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>The skips give the effect of \"scrambling\" the randomizer but the output is still\n+\t\tCOMMENT linearly dependant. Note that since multiple calls to a linear congruential generator is\n+\t\tCOMMENT equivalent to another linear congruence, this method could be optimized to combine\n+\t\tCOMMENT the calls into one.</p>\n \t\tARG 1 count\n-\tMETHOD method_12661 setSeed (JII)J\n+\tMETHOD method_12661 setPopulationSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to create population features such as decorators and animals.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>This method takes in the world seed and the negative-most block coordinates of the\n+\t\tCOMMENT chunk. The coordinate pair provided is equivalent to (chunkX * 16, chunkZ * 16). The\n+\t\tCOMMENT three values are mixed together through some layers of hashing to produce the\n+\t\tCOMMENT population seed.\n+\t\tCOMMENT\n+\t\tCOMMENT This function has been proved to be reversible through some exploitation of the underlying\n+\t\tCOMMENT nextLong() weaknesses. It is also important to remember that since setSeed()\n+\t\tCOMMENT truncates the 16 upper bits of world seed, only the 48 lowest bits affect the population\n+\t\tCOMMENT seed output.</p>\n \t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12662 create (IIJJ)Ljava/util/Random;\n-\t\tARG 0 x\n-\t\tARG 1 z\n+\t\tARG 3 posX\n+\t\tARG 4 posZ\n+\tMETHOD method_12662 getSlimeRandom (IIJJ)Ljava/util/Random;\n+\t\tARG 0 chunkX\n+\t\tARG 1 chunkZ\n \t\tARG 2 worldSeed\n-\t\tARG 4 localSeed\n-\tMETHOD method_12663 setStructureSeed (JII)J\n-\t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12664 setFeatureSeed (JII)J\n+\t\tARG 4 scrambler\n+\tMETHOD method_12663 setCarverSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to generate larger features such as caves, ravines, minehafts\n+\t\tCOMMENT and strongholds. It is also used to initiate structure start behaviour such as rotation.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>Similar to the population seed, only the 48 lowest bits of the world seed affect the\n+\t\tCOMMENT output since it the upper 16 bits are truncated in the setSeed() call.</p>\n \t\tARG 1 worldSeed\n+\t\tARG 3 chunkX\n+\t\tARG 4 chunkZ\n+\tMETHOD method_12664 setDecoratorSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to generate a given feature.\n+\t\tCOMMENT\n+\t\tCOMMENT The salt, in the form of {index + 10000 * step} assures that each feature is seeded\n+\t\tCOMMENT differently, making the decoration feel more random. Even though it does a good job\n+\t\tCOMMENT at doing so, many entropy issues arise from the salt being so small and result in\n+\t\tCOMMENT weird alignments between features that have an index close apart.\n+\t\tARG 1 populationSeed\n+\t\t\tCOMMENT The population seed computed in setPopulationSeed().\n \t\tARG 3 index\n+\t\t\tCOMMENT The index of the feature in the feature list.\n \t\tARG 4 step\n-\tMETHOD method_12665 setStructureSeed (JIII)J\n+\t\t\tCOMMENT The generation step's ordinal for this feature.\n+\tMETHOD method_12665 setRegionSeed (JIII)J\n+\t\tCOMMENT Seeds the randomizer to determine the start position of structure features such as\n+\t\tCOMMENT temples, monuments and buried treasures within a region.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>The region coordinates pair corresponds to the coordinates of the region the seeded\n+\t\tCOMMENT chunk lies in. For example, a swamp hut region is 32 by 32 chunks meaning that all\n+\t\tCOMMENT chunks that lie within that region get seeded the same way.\n+\t\tCOMMENT\n+\t\tCOMMENT Similarly, the upper 16 bits of world seed also do not affect the region seed because", "originalCommit": "af3c3aa5092de1cdd6eb13118071fc6bfcaf599a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bafff76c8d2d752eef42272205ef4f1283fd79d7", "url": "https://github.com/FabricMC/yarn/commit/bafff76c8d2d752eef42272205ef4f1283fd79d7", "message": "fixed my bad spelling", "committedDate": "2020-02-17T14:10:42Z", "type": "commit"}, {"oid": "ad2d3a2f7a9267d02a15b2d510cb0ca8c7a6f3da", "url": "https://github.com/FabricMC/yarn/commit/ad2d3a2f7a9267d02a15b2d510cb0ca8c7a6f3da", "message": "split paragraphs", "committedDate": "2020-02-17T14:12:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxNDIzMA==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380214230", "bodyText": "Need help for a better name. This method is responsible for:\n\nGenerating all carvers. (caves, ravines, etc)\nComputing the start chunk of mineshafts. (doesn't use setRegionSeed for some reason.)\nComputing the stronghold piece layout(not to be confused with the generation.)\nAll StructureFeature's structure starts. Examples of this include rotation, random structure pieces and templates.", "author": "KaptainWutax", "createdAt": "2020-02-17T14:31:42Z", "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,77 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>Note that the terrain seed is NOT world seed dependent and only gets affected by\n+\t\tCOMMENT chunk coordinates.</p>\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n \tMETHOD method_12660 consume (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>The skips give the effect of \"scrambling\" the randomizer but the output is still\n+\t\tCOMMENT linearly dependent. Note that since multiple calls to a linear congruential generator is\n+\t\tCOMMENT equivalent to another linear congruence, this method could be optimized to combine\n+\t\tCOMMENT the calls into one.</p>\n \t\tARG 1 count\n-\tMETHOD method_12661 setSeed (JII)J\n+\tMETHOD method_12661 setPopulationSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to create population features such as decorators and animals.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>This method takes in the world seed and the negative-most block coordinates of the\n+\t\tCOMMENT chunk. The coordinate pair provided is equivalent to (chunkX * 16, chunkZ * 16). The\n+\t\tCOMMENT three values are mixed together through some layers of hashing to produce the\n+\t\tCOMMENT population seed.</p>\n+\t\tCOMMENT\n+\t\tCOMMENT <p>This function has been proved to be reversible through some exploitation of the underlying\n+\t\tCOMMENT nextLong() weaknesses. It is also important to remember that since setSeed()\n+\t\tCOMMENT truncates the 16 upper bits of world seed, only the 48 lowest bits affect the population\n+\t\tCOMMENT seed output.</p>\n \t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12662 create (IIJJ)Ljava/util/Random;\n-\t\tARG 0 x\n-\t\tARG 1 z\n+\t\tARG 3 posX\n+\t\tARG 4 posZ\n+\tMETHOD method_12662 getSlimeRandom (IIJJ)Ljava/util/Random;\n+\t\tARG 0 chunkX\n+\t\tARG 1 chunkZ\n \t\tARG 2 worldSeed\n-\t\tARG 4 localSeed\n-\tMETHOD method_12663 setStructureSeed (JII)J\n-\t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12664 setFeatureSeed (JII)J\n+\t\tARG 4 scrambler\n+\tMETHOD method_12663 setCarverSeed (JII)J", "originalCommit": "ad2d3a2f7a9267d02a15b2d510cb0ca8c7a6f3da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMTI5OA==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380221298", "bodyText": "See my comment above #1118 (comment)", "author": "Earthcomputer", "createdAt": "2020-02-17T14:44:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxNDIzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMzA5OQ==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380223099", "bodyText": "Computing the start chunk of mineshafts. (doesn't use setRegionSeed for some reason.)\n\nI think that's just Mojang derping and using the wrong method. Given it's unintentional, I'd say don't take this into account when naming the method.", "author": "Earthcomputer", "createdAt": "2020-02-17T14:48:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxNDIzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4NDA1Nw==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380284057", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n          \n          \n            \n            \t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks (such as grass, sand, etc.)", "author": "Runemoro", "createdAt": "2020-02-17T16:43:50Z", "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,77 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)", "originalCommit": "ad2d3a2f7a9267d02a15b2d510cb0ca8c7a6f3da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4NDM2Mg==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380284362", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tCOMMENT <p>Note that the terrain seed is NOT world seed dependent and only gets affected by\n          \n          \n            \n            \t\tCOMMENT <p>Note that the terrain seed does not depend on the world seed and only gets affected by", "author": "Runemoro", "createdAt": "2020-02-17T16:44:32Z", "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,77 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>Note that the terrain seed is NOT world seed dependent and only gets affected by", "originalCommit": "ad2d3a2f7a9267d02a15b2d510cb0ca8c7a6f3da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4NTMzNw==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380285337", "bodyText": "I think the convention is to not use pos prefixes. It's understood that x and z are components of a position.", "author": "Runemoro", "createdAt": "2020-02-17T16:46:40Z", "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,77 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>Note that the terrain seed is NOT world seed dependent and only gets affected by\n+\t\tCOMMENT chunk coordinates.</p>\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n \tMETHOD method_12660 consume (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>The skips give the effect of \"scrambling\" the randomizer but the output is still\n+\t\tCOMMENT linearly dependent. Note that since multiple calls to a linear congruential generator is\n+\t\tCOMMENT equivalent to another linear congruence, this method could be optimized to combine\n+\t\tCOMMENT the calls into one.</p>\n \t\tARG 1 count\n-\tMETHOD method_12661 setSeed (JII)J\n+\tMETHOD method_12661 setPopulationSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to create population features such as decorators and animals.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>This method takes in the world seed and the negative-most block coordinates of the\n+\t\tCOMMENT chunk. The coordinate pair provided is equivalent to (chunkX * 16, chunkZ * 16). The\n+\t\tCOMMENT three values are mixed together through some layers of hashing to produce the\n+\t\tCOMMENT population seed.</p>\n+\t\tCOMMENT\n+\t\tCOMMENT <p>This function has been proved to be reversible through some exploitation of the underlying\n+\t\tCOMMENT nextLong() weaknesses. It is also important to remember that since setSeed()\n+\t\tCOMMENT truncates the 16 upper bits of world seed, only the 48 lowest bits affect the population\n+\t\tCOMMENT seed output.</p>\n \t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12662 create (IIJJ)Ljava/util/Random;\n-\t\tARG 0 x\n-\t\tARG 1 z\n+\t\tARG 3 posX\n+\t\tARG 4 posZ", "originalCommit": "ad2d3a2f7a9267d02a15b2d510cb0ca8c7a6f3da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMyMTMwMA==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r382321300", "bodyText": "In this case, I would argue for breaking the convention in order to be more explicit. This method doesn't take in any arbitrary x or z positions such as chunk positions or region positions but instead, block positions.", "author": "KaptainWutax", "createdAt": "2020-02-20T23:40:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4NTMzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMzMjE4Ng==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r382332186", "bodyText": "blockX, blockZ then?", "author": "Earthcomputer", "createdAt": "2020-02-21T00:16:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4NTMzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3MzY2Ng==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r382373666", "bodyText": "+1 for blockX, blockZ", "author": "SuperCoder7979", "createdAt": "2020-02-21T02:58:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4NTMzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MTI0NA==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r382881244", "bodyText": "breaking the convention in order to be more explicit.\n\nThe only thing pos makes more explicit is that this is a position. It still doesn't tell us that it's a block position and not a chunk position. If you want to clarify that, it should be blockX and blockZ.", "author": "Runemoro", "createdAt": "2020-02-22T03:15:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4NTMzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4ODIxMg==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r382888212", "bodyText": "posX posZ reeks of voldemap lol. +1 for blockX, blockZ", "author": "valoeghese", "createdAt": "2020-02-22T05:29:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4NTMzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4NTUyNg==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380285526", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tCOMMENT Seeds the randomizer to generate larger features such as caves, ravines, minehafts\n          \n          \n            \n            \t\tCOMMENT Seeds the randomizer to generate larger features such as caves, ravines, mineshafts", "author": "Runemoro", "createdAt": "2020-02-17T16:47:06Z", "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,77 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>Note that the terrain seed is NOT world seed dependent and only gets affected by\n+\t\tCOMMENT chunk coordinates.</p>\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n \tMETHOD method_12660 consume (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>The skips give the effect of \"scrambling\" the randomizer but the output is still\n+\t\tCOMMENT linearly dependent. Note that since multiple calls to a linear congruential generator is\n+\t\tCOMMENT equivalent to another linear congruence, this method could be optimized to combine\n+\t\tCOMMENT the calls into one.</p>\n \t\tARG 1 count\n-\tMETHOD method_12661 setSeed (JII)J\n+\tMETHOD method_12661 setPopulationSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to create population features such as decorators and animals.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>This method takes in the world seed and the negative-most block coordinates of the\n+\t\tCOMMENT chunk. The coordinate pair provided is equivalent to (chunkX * 16, chunkZ * 16). The\n+\t\tCOMMENT three values are mixed together through some layers of hashing to produce the\n+\t\tCOMMENT population seed.</p>\n+\t\tCOMMENT\n+\t\tCOMMENT <p>This function has been proved to be reversible through some exploitation of the underlying\n+\t\tCOMMENT nextLong() weaknesses. It is also important to remember that since setSeed()\n+\t\tCOMMENT truncates the 16 upper bits of world seed, only the 48 lowest bits affect the population\n+\t\tCOMMENT seed output.</p>\n \t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12662 create (IIJJ)Ljava/util/Random;\n-\t\tARG 0 x\n-\t\tARG 1 z\n+\t\tARG 3 posX\n+\t\tARG 4 posZ\n+\tMETHOD method_12662 getSlimeRandom (IIJJ)Ljava/util/Random;\n+\t\tARG 0 chunkX\n+\t\tARG 1 chunkZ\n \t\tARG 2 worldSeed\n-\t\tARG 4 localSeed\n-\tMETHOD method_12663 setStructureSeed (JII)J\n-\t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12664 setFeatureSeed (JII)J\n+\t\tARG 4 scrambler\n+\tMETHOD method_12663 setCarverSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to generate larger features such as caves, ravines, minehafts", "originalCommit": "ad2d3a2f7a9267d02a15b2d510cb0ca8c7a6f3da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI4NTgzNA==", "url": "https://github.com/FabricMC/yarn/pull/1118#discussion_r380285834", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tCOMMENT The salt, in the form of {index + 10000 * step} assures that each feature is seeded\n          \n          \n            \n            \t\tCOMMENT The salt, in the form of {@code index + 10000 * step} assures that each feature is seeded", "author": "Runemoro", "createdAt": "2020-02-17T16:47:55Z", "path": "mappings/net/minecraft/world/gen/ChunkRandom.mapping", "diffHunk": "@@ -2,32 +2,77 @@ CLASS net/minecraft/class_2919 net/minecraft/world/gen/ChunkRandom\n \tFIELD field_13276 sampleCount I\n \tMETHOD <init> (J)V\n \t\tARG 1 seed\n-\tMETHOD method_12659 setSeed (II)J\n-\t\tARG 1 x\n-\t\tARG 2 z\n+\tMETHOD method_12659 setTerrainSeed (II)J\n+\t\tCOMMENT Seeds the randomizer to generate the surface terrain blocks(such as grass, sand, etc)\n+\t\tCOMMENT and the bedrock patterns.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>Note that the terrain seed is NOT world seed dependent and only gets affected by\n+\t\tCOMMENT chunk coordinates.</p>\n+\t\tARG 1 chunkX\n+\t\tARG 2 chunkZ\n \tMETHOD method_12660 consume (I)V\n+\t\tCOMMENT Skips the provided number of calls to the randomizer.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>The skips give the effect of \"scrambling\" the randomizer but the output is still\n+\t\tCOMMENT linearly dependent. Note that since multiple calls to a linear congruential generator is\n+\t\tCOMMENT equivalent to another linear congruence, this method could be optimized to combine\n+\t\tCOMMENT the calls into one.</p>\n \t\tARG 1 count\n-\tMETHOD method_12661 setSeed (JII)J\n+\tMETHOD method_12661 setPopulationSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to create population features such as decorators and animals.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>This method takes in the world seed and the negative-most block coordinates of the\n+\t\tCOMMENT chunk. The coordinate pair provided is equivalent to (chunkX * 16, chunkZ * 16). The\n+\t\tCOMMENT three values are mixed together through some layers of hashing to produce the\n+\t\tCOMMENT population seed.</p>\n+\t\tCOMMENT\n+\t\tCOMMENT <p>This function has been proved to be reversible through some exploitation of the underlying\n+\t\tCOMMENT nextLong() weaknesses. It is also important to remember that since setSeed()\n+\t\tCOMMENT truncates the 16 upper bits of world seed, only the 48 lowest bits affect the population\n+\t\tCOMMENT seed output.</p>\n \t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12662 create (IIJJ)Ljava/util/Random;\n-\t\tARG 0 x\n-\t\tARG 1 z\n+\t\tARG 3 posX\n+\t\tARG 4 posZ\n+\tMETHOD method_12662 getSlimeRandom (IIJJ)Ljava/util/Random;\n+\t\tARG 0 chunkX\n+\t\tARG 1 chunkZ\n \t\tARG 2 worldSeed\n-\t\tARG 4 localSeed\n-\tMETHOD method_12663 setStructureSeed (JII)J\n-\t\tARG 1 worldSeed\n-\t\tARG 3 x\n-\t\tARG 4 z\n-\tMETHOD method_12664 setFeatureSeed (JII)J\n+\t\tARG 4 scrambler\n+\tMETHOD method_12663 setCarverSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to generate larger features such as caves, ravines, minehafts\n+\t\tCOMMENT and strongholds. It is also used to initiate structure start behaviour such as rotation.\n+\t\tCOMMENT\n+\t\tCOMMENT <p>Similar to the population seed, only the 48 lowest bits of the world seed affect the\n+\t\tCOMMENT output since it the upper 16 bits are truncated in the setSeed() call.</p>\n \t\tARG 1 worldSeed\n+\t\tARG 3 chunkX\n+\t\tARG 4 chunkZ\n+\tMETHOD method_12664 setDecoratorSeed (JII)J\n+\t\tCOMMENT Seeds the randomizer to generate a given feature.\n+\t\tCOMMENT\n+\t\tCOMMENT The salt, in the form of {index + 10000 * step} assures that each feature is seeded", "originalCommit": "ad2d3a2f7a9267d02a15b2d510cb0ca8c7a6f3da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "67a56859934360a3462764c615abb9f241a67d17", "url": "https://github.com/FabricMC/yarn/commit/67a56859934360a3462764c615abb9f241a67d17", "message": "Update mappings/net/minecraft/world/gen/ChunkRandom.mapping\n\nCo-Authored-By: Runemoro <runemoro1@gmail.com>", "committedDate": "2020-02-20T23:38:08Z", "type": "commit"}, {"oid": "43a081c63952b2ae8af8bdfbdc986f401ce96cf7", "url": "https://github.com/FabricMC/yarn/commit/43a081c63952b2ae8af8bdfbdc986f401ce96cf7", "message": "Update mappings/net/minecraft/world/gen/ChunkRandom.mapping\n\nCo-Authored-By: Runemoro <runemoro1@gmail.com>", "committedDate": "2020-02-20T23:38:30Z", "type": "commit"}, {"oid": "99a09700e02209c1d09eef870661eb8f5468ccb8", "url": "https://github.com/FabricMC/yarn/commit/99a09700e02209c1d09eef870661eb8f5468ccb8", "message": "Update mappings/net/minecraft/world/gen/ChunkRandom.mapping\n\nCo-Authored-By: Runemoro <runemoro1@gmail.com>", "committedDate": "2020-02-20T23:40:51Z", "type": "commit"}, {"oid": "961640c702c3ef7fc6ee324be70bc255ae30a078", "url": "https://github.com/FabricMC/yarn/commit/961640c702c3ef7fc6ee324be70bc255ae30a078", "message": "Update mappings/net/minecraft/world/gen/ChunkRandom.mapping\n\nCo-Authored-By: Runemoro <runemoro1@gmail.com>", "committedDate": "2020-02-20T23:41:55Z", "type": "commit"}, {"oid": "85b2c05df61b9afdaf677e81f5f312f3bd7739c5", "url": "https://github.com/FabricMC/yarn/commit/85b2c05df61b9afdaf677e81f5f312f3bd7739c5", "message": "changed pos to block", "committedDate": "2020-03-05T22:04:17Z", "type": "commit"}]}