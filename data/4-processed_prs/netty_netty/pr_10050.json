{"pr_number": 10050, "pr_title": "Added support for the SameSite attribute in Cookies", "pr_createdAt": "2020-02-21T11:22:03Z", "pr_url": "https://github.com/netty/netty/pull/10050", "timeline": [{"oid": "0391ddfe6c280b63506729b23b35aa2c43654f7f", "url": "https://github.com/netty/netty/commit/0391ddfe6c280b63506729b23b35aa2c43654f7f", "message": "Added support for the SameSite attribute in Cookies\n\nMotivation:\n\nNetty currently does not support the SameSite attribute for response cookies (see issue #8161 for discussion).\n\nModifications:\n\nThe attribute has been added to the DefaultCookie class as a quick fix since adding new methods to the Cookie interface would be backwards-incompatible.\nServerCookieEncoder and ClientCookieDecoder have been updated accordingly to process this value. No validation for allowed values (Lax, None, Strict) has been implemented.\n\nResult:\n\nResponse cookies with the SameSite attribute set can be read or written by Netty.", "committedDate": "2020-02-17T11:04:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI1NjUwNA==", "url": "https://github.com/netty/netty/pull/10050#discussion_r383256504", "bodyText": "@dvlato please add some java docs", "author": "normanmaurer", "createdAt": "2020-02-24T13:13:07Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/DefaultCookie.java", "diffHunk": "@@ -119,6 +120,14 @@ public void setHttpOnly(boolean httpOnly) {\n         this.httpOnly = httpOnly;\n     }\n \n+    public String sameSite() {", "originalCommit": "0391ddfe6c280b63506729b23b35aa2c43654f7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM1NDc4Nw==", "url": "https://github.com/netty/netty/pull/10050#discussion_r383354787", "bodyText": "Hi @normanmaurer happy to add javadocs but still wondering if you want a String here or an enum, as @slandelle mentioned (and I had considered myself as per my comment that this solution might not be accept for you)", "author": "dvlato", "createdAt": "2020-02-24T16:02:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI1NjUwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI1NjYzNQ==", "url": "https://github.com/netty/netty/pull/10050#discussion_r383256635", "bodyText": "@dvlato please add some java docs", "author": "normanmaurer", "createdAt": "2020-02-24T13:13:21Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/DefaultCookie.java", "diffHunk": "@@ -119,6 +120,14 @@ public void setHttpOnly(boolean httpOnly) {\n         this.httpOnly = httpOnly;\n     }\n \n+    public String sameSite() {\n+        return sameSite;\n+    }\n+\n+    public void setSameSite(String sameSite) {", "originalCommit": "0391ddfe6c280b63506729b23b35aa2c43654f7f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI1NzA3MA==", "url": "https://github.com/netty/netty/pull/10050#discussion_r383257070", "bodyText": "@dvlato seems like this is only a formatting change ? Can you revert it ?", "author": "normanmaurer", "createdAt": "2020-02-24T13:14:04Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/cookie/ClientCookieDecoderTest.java", "diffHunk": "@@ -214,52 +219,52 @@ public void testDecodingInvalidValuesWithCommaAtStart() {\n     public void testDecodingLongValue() {\n         String longValue =\n                 \"b___$Q__$ha__<NC=MN(F__%#4__<NC=MN(F__2_d____#=IvZB__2_F____'=KqtH__2-9____\" +\n-                \"'=IvZM__3f:____$=HbQW__3g'____%=J^wI__3g-____%=J^wI__3g1____$=HbQW__3g2____\" +\n-                \"$=HbQW__3g5____%=J^wI__3g9____$=HbQW__3gT____$=HbQW__3gX____#=J^wI__3gY____\" +\n-                \"#=J^wI__3gh____$=HbQW__3gj____$=HbQW__3gr____$=HbQW__3gx____#=J^wI__3h_____\" +\n-                \"$=HbQW__3h$____#=J^wI__3h'____$=HbQW__3h_____$=HbQW__3h0____%=J^wI__3h1____\" +\n-                \"#=J^wI__3h2____$=HbQW__3h4____$=HbQW__3h7____$=HbQW__3h8____%=J^wI__3h:____\" +\n-                \"#=J^wI__3h@____%=J^wI__3hB____$=HbQW__3hC____$=HbQW__3hL____$=HbQW__3hQ____\" +\n-                \"$=HbQW__3hS____%=J^wI__3hU____$=HbQW__3h[____$=HbQW__3h^____$=HbQW__3hd____\" +\n-                \"%=J^wI__3he____%=J^wI__3hf____%=J^wI__3hg____$=HbQW__3hh____%=J^wI__3hi____\" +\n-                \"%=J^wI__3hv____$=HbQW__3i/____#=J^wI__3i2____#=J^wI__3i3____%=J^wI__3i4____\" +\n-                \"$=HbQW__3i7____$=HbQW__3i8____$=HbQW__3i9____%=J^wI__3i=____#=J^wI__3i>____\" +\n-                \"%=J^wI__3iD____$=HbQW__3iF____#=J^wI__3iH____%=J^wI__3iM____%=J^wI__3iS____\" +\n-                \"#=J^wI__3iU____%=J^wI__3iZ____#=J^wI__3i]____%=J^wI__3ig____%=J^wI__3ij____\" +\n-                \"%=J^wI__3ik____#=J^wI__3il____$=HbQW__3in____%=J^wI__3ip____$=HbQW__3iq____\" +\n-                \"$=HbQW__3it____%=J^wI__3ix____#=J^wI__3j_____$=HbQW__3j%____$=HbQW__3j'____\" +\n-                \"%=J^wI__3j(____%=J^wI__9mJ____'=KqtH__=SE__<NC=MN(F__?VS__<NC=MN(F__Zw`____\" +\n-                \"%=KqtH__j+C__<NC=MN(F__j+M__<NC=MN(F__j+a__<NC=MN(F__j_.__<NC=MN(F__n>M____\" +\n-                \"'=KqtH__s1X____$=MMyc__s1_____#=MN#O__ypn____'=KqtH__ypr____'=KqtH_#%h_____\" +\n-                \"%=KqtH_#%o_____'=KqtH_#)H6__<NC=MN(F_#*%'____%=KqtH_#+k(____'=KqtH_#-E_____\" +\n-                \"'=KqtH_#1)w____'=KqtH_#1)y____'=KqtH_#1*M____#=KqtH_#1*p____'=KqtH_#14Q__<N\" +\n-                \"C=MN(F_#14S__<NC=MN(F_#16I__<NC=MN(F_#16N__<NC=MN(F_#16X__<NC=MN(F_#16k__<N\" +\n-                \"C=MN(F_#17@__<NC=MN(F_#17A__<NC=MN(F_#1Cq____'=KqtH_#7)_____#=KqtH_#7)b____\" +\n-                \"#=KqtH_#7Ww____'=KqtH_#?cQ____'=KqtH_#His____'=KqtH_#Jrh____'=KqtH_#O@M__<N\" +\n-                \"C=MN(F_#O@O__<NC=MN(F_#OC6__<NC=MN(F_#Os.____#=KqtH_#YOW____#=H/Li_#Zat____\" +\n-                \"'=KqtH_#ZbI____%=KqtH_#Zbc____'=KqtH_#Zbs____%=KqtH_#Zby____'=KqtH_#Zce____\" +\n-                \"'=KqtH_#Zdc____%=KqtH_#Zea____'=KqtH_#ZhI____#=KqtH_#ZiD____'=KqtH_#Zis____\" +\n-                \"'=KqtH_#Zj0____#=KqtH_#Zj1____'=KqtH_#Zj[____'=KqtH_#Zj]____'=KqtH_#Zj^____\" +\n-                \"'=KqtH_#Zjb____'=KqtH_#Zk_____'=KqtH_#Zk6____#=KqtH_#Zk9____%=KqtH_#Zk<____\" +\n-                \"'=KqtH_#Zl>____'=KqtH_#]9R____$=H/Lt_#]I6____#=KqtH_#]Z#____%=KqtH_#^*N____\" +\n-                \"#=KqtH_#^:m____#=KqtH_#_*_____%=J^wI_#`-7____#=KqtH_#`T>____'=KqtH_#`T?____\" +\n-                \"'=KqtH_#`TA____'=KqtH_#`TB____'=KqtH_#`TG____'=KqtH_#`TP____#=KqtH_#`U_____\" +\n-                \"'=KqtH_#`U/____'=KqtH_#`U0____#=KqtH_#`U9____'=KqtH_#aEQ____%=KqtH_#b<)____\" +\n-                \"'=KqtH_#c9-____%=KqtH_#dxC____%=KqtH_#dxE____%=KqtH_#ev$____'=KqtH_#fBi____\" +\n-                \"#=KqtH_#fBj____'=KqtH_#fG)____'=KqtH_#fG+____'=KqtH_#g<d____'=KqtH_#g<e____\" +\n-                \"'=KqtH_#g=J____'=KqtH_#gat____#=KqtH_#s`D____#=J_#p_#sg?____#=J_#p_#t<a____\" +\n-                \"#=KqtH_#t<c____#=KqtH_#trY____$=JiYj_#vA$____'=KqtH_#xs_____'=KqtH_$$rO____\" +\n-                \"#=KqtH_$$rP____#=KqtH_$(_%____'=KqtH_$)]o____%=KqtH_$_@)____'=KqtH_$_k]____\" +\n-                \"'=KqtH_$1]+____%=KqtH_$3IO____%=KqtH_$3J#____'=KqtH_$3J.____'=KqtH_$3J:____\" +\n-                \"#=KqtH_$3JH____#=KqtH_$3JI____#=KqtH_$3JK____%=KqtH_$3JL____'=KqtH_$3JS____\" +\n-                \"'=KqtH_$8+M____#=KqtH_$99d____%=KqtH_$:Lw____#=LK+x_$:N@____#=KqtG_$:NC____\" +\n-                \"#=KqtG_$:hW____'=KqtH_$:i[____'=KqtH_$:ih____'=KqtH_$:it____'=KqtH_$:kO____\" +\n-                \"'=KqtH_$>*B____'=KqtH_$>hD____+=J^x0_$?lW____'=KqtH_$?ll____'=KqtH_$?lm____\" +\n-                \"%=KqtH_$?mi____'=KqtH_$?mx____'=KqtH_$D7]____#=J_#p_$D@T____#=J_#p_$V<g____\" +\n-                \"'=KqtH\";\n+                        \"'=IvZM__3f:____$=HbQW__3g'____%=J^wI__3g-____%=J^wI__3g1____$=HbQW__3g2____\" +\n+                        \"$=HbQW__3g5____%=J^wI__3g9____$=HbQW__3gT____$=HbQW__3gX____#=J^wI__3gY____\" +\n+                        \"#=J^wI__3gh____$=HbQW__3gj____$=HbQW__3gr____$=HbQW__3gx____#=J^wI__3h_____\" +\n+                        \"$=HbQW__3h$____#=J^wI__3h'____$=HbQW__3h_____$=HbQW__3h0____%=J^wI__3h1____\" +\n+                        \"#=J^wI__3h2____$=HbQW__3h4____$=HbQW__3h7____$=HbQW__3h8____%=J^wI__3h:____\" +\n+                        \"#=J^wI__3h@____%=J^wI__3hB____$=HbQW__3hC____$=HbQW__3hL____$=HbQW__3hQ____\" +\n+                        \"$=HbQW__3hS____%=J^wI__3hU____$=HbQW__3h[____$=HbQW__3h^____$=HbQW__3hd____\" +\n+                        \"%=J^wI__3he____%=J^wI__3hf____%=J^wI__3hg____$=HbQW__3hh____%=J^wI__3hi____\" +\n+                        \"%=J^wI__3hv____$=HbQW__3i/____#=J^wI__3i2____#=J^wI__3i3____%=J^wI__3i4____\" +\n+                        \"$=HbQW__3i7____$=HbQW__3i8____$=HbQW__3i9____%=J^wI__3i=____#=J^wI__3i>____\" +\n+                        \"%=J^wI__3iD____$=HbQW__3iF____#=J^wI__3iH____%=J^wI__3iM____%=J^wI__3iS____\" +\n+                        \"#=J^wI__3iU____%=J^wI__3iZ____#=J^wI__3i]____%=J^wI__3ig____%=J^wI__3ij____\" +\n+                        \"%=J^wI__3ik____#=J^wI__3il____$=HbQW__3in____%=J^wI__3ip____$=HbQW__3iq____\" +\n+                        \"$=HbQW__3it____%=J^wI__3ix____#=J^wI__3j_____$=HbQW__3j%____$=HbQW__3j'____\" +\n+                        \"%=J^wI__3j(____%=J^wI__9mJ____'=KqtH__=SE__<NC=MN(F__?VS__<NC=MN(F__Zw`____\" +\n+                        \"%=KqtH__j+C__<NC=MN(F__j+M__<NC=MN(F__j+a__<NC=MN(F__j_.__<NC=MN(F__n>M____\" +\n+                        \"'=KqtH__s1X____$=MMyc__s1_____#=MN#O__ypn____'=KqtH__ypr____'=KqtH_#%h_____\" +\n+                        \"%=KqtH_#%o_____'=KqtH_#)H6__<NC=MN(F_#*%'____%=KqtH_#+k(____'=KqtH_#-E_____\" +\n+                        \"'=KqtH_#1)w____'=KqtH_#1)y____'=KqtH_#1*M____#=KqtH_#1*p____'=KqtH_#14Q__<N\" +\n+                        \"C=MN(F_#14S__<NC=MN(F_#16I__<NC=MN(F_#16N__<NC=MN(F_#16X__<NC=MN(F_#16k__<N\" +\n+                        \"C=MN(F_#17@__<NC=MN(F_#17A__<NC=MN(F_#1Cq____'=KqtH_#7)_____#=KqtH_#7)b____\" +\n+                        \"#=KqtH_#7Ww____'=KqtH_#?cQ____'=KqtH_#His____'=KqtH_#Jrh____'=KqtH_#O@M__<N\" +\n+                        \"C=MN(F_#O@O__<NC=MN(F_#OC6__<NC=MN(F_#Os.____#=KqtH_#YOW____#=H/Li_#Zat____\" +\n+                        \"'=KqtH_#ZbI____%=KqtH_#Zbc____'=KqtH_#Zbs____%=KqtH_#Zby____'=KqtH_#Zce____\" +\n+                        \"'=KqtH_#Zdc____%=KqtH_#Zea____'=KqtH_#ZhI____#=KqtH_#ZiD____'=KqtH_#Zis____\" +\n+                        \"'=KqtH_#Zj0____#=KqtH_#Zj1____'=KqtH_#Zj[____'=KqtH_#Zj]____'=KqtH_#Zj^____\" +\n+                        \"'=KqtH_#Zjb____'=KqtH_#Zk_____'=KqtH_#Zk6____#=KqtH_#Zk9____%=KqtH_#Zk<____\" +\n+                        \"'=KqtH_#Zl>____'=KqtH_#]9R____$=H/Lt_#]I6____#=KqtH_#]Z#____%=KqtH_#^*N____\" +\n+                        \"#=KqtH_#^:m____#=KqtH_#_*_____%=J^wI_#`-7____#=KqtH_#`T>____'=KqtH_#`T?____\" +\n+                        \"'=KqtH_#`TA____'=KqtH_#`TB____'=KqtH_#`TG____'=KqtH_#`TP____#=KqtH_#`U_____\" +\n+                        \"'=KqtH_#`U/____'=KqtH_#`U0____#=KqtH_#`U9____'=KqtH_#aEQ____%=KqtH_#b<)____\" +\n+                        \"'=KqtH_#c9-____%=KqtH_#dxC____%=KqtH_#dxE____%=KqtH_#ev$____'=KqtH_#fBi____\" +\n+                        \"#=KqtH_#fBj____'=KqtH_#fG)____'=KqtH_#fG+____'=KqtH_#g<d____'=KqtH_#g<e____\" +\n+                        \"'=KqtH_#g=J____'=KqtH_#gat____#=KqtH_#s`D____#=J_#p_#sg?____#=J_#p_#t<a____\" +\n+                        \"#=KqtH_#t<c____#=KqtH_#trY____$=JiYj_#vA$____'=KqtH_#xs_____'=KqtH_$$rO____\" +\n+                        \"#=KqtH_$$rP____#=KqtH_$(_%____'=KqtH_$)]o____%=KqtH_$_@)____'=KqtH_$_k]____\" +\n+                        \"'=KqtH_$1]+____%=KqtH_$3IO____%=KqtH_$3J#____'=KqtH_$3J.____'=KqtH_$3J:____\" +\n+                        \"#=KqtH_$3JH____#=KqtH_$3JI____#=KqtH_$3JK____%=KqtH_$3JL____'=KqtH_$3JS____\" +\n+                        \"'=KqtH_$8+M____#=KqtH_$99d____%=KqtH_$:Lw____#=LK+x_$:N@____#=KqtG_$:NC____\" +\n+                        \"#=KqtG_$:hW____'=KqtH_$:i[____'=KqtH_$:ih____'=KqtH_$:it____'=KqtH_$:kO____\" +\n+                        \"'=KqtH_$>*B____'=KqtH_$>hD____+=J^x0_$?lW____'=KqtH_$?ll____'=KqtH_$?lm____\" +\n+                        \"%=KqtH_$?mi____'=KqtH_$?mx____'=KqtH_$D7]____#=J_#p_$D@T____#=J_#p_$V<g____\" +\n+                        \"'=KqtH\";", "originalCommit": "0391ddfe6c280b63506729b23b35aa2c43654f7f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI1NzE3Mg==", "url": "https://github.com/netty/netty/pull/10050#discussion_r383257172", "bodyText": "same comment... please revert formatting changes", "author": "normanmaurer", "createdAt": "2020-02-24T13:14:18Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/cookie/ClientCookieDecoderTest.java", "diffHunk": "@@ -214,52 +219,52 @@ public void testDecodingInvalidValuesWithCommaAtStart() {\n     public void testDecodingLongValue() {\n         String longValue =\n                 \"b___$Q__$ha__<NC=MN(F__%#4__<NC=MN(F__2_d____#=IvZB__2_F____'=KqtH__2-9____\" +\n-                \"'=IvZM__3f:____$=HbQW__3g'____%=J^wI__3g-____%=J^wI__3g1____$=HbQW__3g2____\" +\n-                \"$=HbQW__3g5____%=J^wI__3g9____$=HbQW__3gT____$=HbQW__3gX____#=J^wI__3gY____\" +\n-                \"#=J^wI__3gh____$=HbQW__3gj____$=HbQW__3gr____$=HbQW__3gx____#=J^wI__3h_____\" +\n-                \"$=HbQW__3h$____#=J^wI__3h'____$=HbQW__3h_____$=HbQW__3h0____%=J^wI__3h1____\" +\n-                \"#=J^wI__3h2____$=HbQW__3h4____$=HbQW__3h7____$=HbQW__3h8____%=J^wI__3h:____\" +\n-                \"#=J^wI__3h@____%=J^wI__3hB____$=HbQW__3hC____$=HbQW__3hL____$=HbQW__3hQ____\" +\n-                \"$=HbQW__3hS____%=J^wI__3hU____$=HbQW__3h[____$=HbQW__3h^____$=HbQW__3hd____\" +\n-                \"%=J^wI__3he____%=J^wI__3hf____%=J^wI__3hg____$=HbQW__3hh____%=J^wI__3hi____\" +\n-                \"%=J^wI__3hv____$=HbQW__3i/____#=J^wI__3i2____#=J^wI__3i3____%=J^wI__3i4____\" +\n-                \"$=HbQW__3i7____$=HbQW__3i8____$=HbQW__3i9____%=J^wI__3i=____#=J^wI__3i>____\" +\n-                \"%=J^wI__3iD____$=HbQW__3iF____#=J^wI__3iH____%=J^wI__3iM____%=J^wI__3iS____\" +\n-                \"#=J^wI__3iU____%=J^wI__3iZ____#=J^wI__3i]____%=J^wI__3ig____%=J^wI__3ij____\" +\n-                \"%=J^wI__3ik____#=J^wI__3il____$=HbQW__3in____%=J^wI__3ip____$=HbQW__3iq____\" +\n-                \"$=HbQW__3it____%=J^wI__3ix____#=J^wI__3j_____$=HbQW__3j%____$=HbQW__3j'____\" +\n-                \"%=J^wI__3j(____%=J^wI__9mJ____'=KqtH__=SE__<NC=MN(F__?VS__<NC=MN(F__Zw`____\" +\n-                \"%=KqtH__j+C__<NC=MN(F__j+M__<NC=MN(F__j+a__<NC=MN(F__j_.__<NC=MN(F__n>M____\" +\n-                \"'=KqtH__s1X____$=MMyc__s1_____#=MN#O__ypn____'=KqtH__ypr____'=KqtH_#%h_____\" +\n-                \"%=KqtH_#%o_____'=KqtH_#)H6__<NC=MN(F_#*%'____%=KqtH_#+k(____'=KqtH_#-E_____\" +\n-                \"'=KqtH_#1)w____'=KqtH_#1)y____'=KqtH_#1*M____#=KqtH_#1*p____'=KqtH_#14Q__<N\" +\n-                \"C=MN(F_#14S__<NC=MN(F_#16I__<NC=MN(F_#16N__<NC=MN(F_#16X__<NC=MN(F_#16k__<N\" +\n-                \"C=MN(F_#17@__<NC=MN(F_#17A__<NC=MN(F_#1Cq____'=KqtH_#7)_____#=KqtH_#7)b____\" +\n-                \"#=KqtH_#7Ww____'=KqtH_#?cQ____'=KqtH_#His____'=KqtH_#Jrh____'=KqtH_#O@M__<N\" +\n-                \"C=MN(F_#O@O__<NC=MN(F_#OC6__<NC=MN(F_#Os.____#=KqtH_#YOW____#=H/Li_#Zat____\" +\n-                \"'=KqtH_#ZbI____%=KqtH_#Zbc____'=KqtH_#Zbs____%=KqtH_#Zby____'=KqtH_#Zce____\" +\n-                \"'=KqtH_#Zdc____%=KqtH_#Zea____'=KqtH_#ZhI____#=KqtH_#ZiD____'=KqtH_#Zis____\" +\n-                \"'=KqtH_#Zj0____#=KqtH_#Zj1____'=KqtH_#Zj[____'=KqtH_#Zj]____'=KqtH_#Zj^____\" +\n-                \"'=KqtH_#Zjb____'=KqtH_#Zk_____'=KqtH_#Zk6____#=KqtH_#Zk9____%=KqtH_#Zk<____\" +\n-                \"'=KqtH_#Zl>____'=KqtH_#]9R____$=H/Lt_#]I6____#=KqtH_#]Z#____%=KqtH_#^*N____\" +\n-                \"#=KqtH_#^:m____#=KqtH_#_*_____%=J^wI_#`-7____#=KqtH_#`T>____'=KqtH_#`T?____\" +\n-                \"'=KqtH_#`TA____'=KqtH_#`TB____'=KqtH_#`TG____'=KqtH_#`TP____#=KqtH_#`U_____\" +\n-                \"'=KqtH_#`U/____'=KqtH_#`U0____#=KqtH_#`U9____'=KqtH_#aEQ____%=KqtH_#b<)____\" +\n-                \"'=KqtH_#c9-____%=KqtH_#dxC____%=KqtH_#dxE____%=KqtH_#ev$____'=KqtH_#fBi____\" +\n-                \"#=KqtH_#fBj____'=KqtH_#fG)____'=KqtH_#fG+____'=KqtH_#g<d____'=KqtH_#g<e____\" +\n-                \"'=KqtH_#g=J____'=KqtH_#gat____#=KqtH_#s`D____#=J_#p_#sg?____#=J_#p_#t<a____\" +\n-                \"#=KqtH_#t<c____#=KqtH_#trY____$=JiYj_#vA$____'=KqtH_#xs_____'=KqtH_$$rO____\" +\n-                \"#=KqtH_$$rP____#=KqtH_$(_%____'=KqtH_$)]o____%=KqtH_$_@)____'=KqtH_$_k]____\" +\n-                \"'=KqtH_$1]+____%=KqtH_$3IO____%=KqtH_$3J#____'=KqtH_$3J.____'=KqtH_$3J:____\" +\n-                \"#=KqtH_$3JH____#=KqtH_$3JI____#=KqtH_$3JK____%=KqtH_$3JL____'=KqtH_$3JS____\" +\n-                \"'=KqtH_$8+M____#=KqtH_$99d____%=KqtH_$:Lw____#=LK+x_$:N@____#=KqtG_$:NC____\" +\n-                \"#=KqtG_$:hW____'=KqtH_$:i[____'=KqtH_$:ih____'=KqtH_$:it____'=KqtH_$:kO____\" +\n-                \"'=KqtH_$>*B____'=KqtH_$>hD____+=J^x0_$?lW____'=KqtH_$?ll____'=KqtH_$?lm____\" +\n-                \"%=KqtH_$?mi____'=KqtH_$?mx____'=KqtH_$D7]____#=J_#p_$D@T____#=J_#p_$V<g____\" +\n-                \"'=KqtH\";\n+                        \"'=IvZM__3f:____$=HbQW__3g'____%=J^wI__3g-____%=J^wI__3g1____$=HbQW__3g2____\" +\n+                        \"$=HbQW__3g5____%=J^wI__3g9____$=HbQW__3gT____$=HbQW__3gX____#=J^wI__3gY____\" +\n+                        \"#=J^wI__3gh____$=HbQW__3gj____$=HbQW__3gr____$=HbQW__3gx____#=J^wI__3h_____\" +\n+                        \"$=HbQW__3h$____#=J^wI__3h'____$=HbQW__3h_____$=HbQW__3h0____%=J^wI__3h1____\" +\n+                        \"#=J^wI__3h2____$=HbQW__3h4____$=HbQW__3h7____$=HbQW__3h8____%=J^wI__3h:____\" +\n+                        \"#=J^wI__3h@____%=J^wI__3hB____$=HbQW__3hC____$=HbQW__3hL____$=HbQW__3hQ____\" +\n+                        \"$=HbQW__3hS____%=J^wI__3hU____$=HbQW__3h[____$=HbQW__3h^____$=HbQW__3hd____\" +\n+                        \"%=J^wI__3he____%=J^wI__3hf____%=J^wI__3hg____$=HbQW__3hh____%=J^wI__3hi____\" +\n+                        \"%=J^wI__3hv____$=HbQW__3i/____#=J^wI__3i2____#=J^wI__3i3____%=J^wI__3i4____\" +\n+                        \"$=HbQW__3i7____$=HbQW__3i8____$=HbQW__3i9____%=J^wI__3i=____#=J^wI__3i>____\" +\n+                        \"%=J^wI__3iD____$=HbQW__3iF____#=J^wI__3iH____%=J^wI__3iM____%=J^wI__3iS____\" +\n+                        \"#=J^wI__3iU____%=J^wI__3iZ____#=J^wI__3i]____%=J^wI__3ig____%=J^wI__3ij____\" +\n+                        \"%=J^wI__3ik____#=J^wI__3il____$=HbQW__3in____%=J^wI__3ip____$=HbQW__3iq____\" +\n+                        \"$=HbQW__3it____%=J^wI__3ix____#=J^wI__3j_____$=HbQW__3j%____$=HbQW__3j'____\" +\n+                        \"%=J^wI__3j(____%=J^wI__9mJ____'=KqtH__=SE__<NC=MN(F__?VS__<NC=MN(F__Zw`____\" +\n+                        \"%=KqtH__j+C__<NC=MN(F__j+M__<NC=MN(F__j+a__<NC=MN(F__j_.__<NC=MN(F__n>M____\" +\n+                        \"'=KqtH__s1X____$=MMyc__s1_____#=MN#O__ypn____'=KqtH__ypr____'=KqtH_#%h_____\" +\n+                        \"%=KqtH_#%o_____'=KqtH_#)H6__<NC=MN(F_#*%'____%=KqtH_#+k(____'=KqtH_#-E_____\" +\n+                        \"'=KqtH_#1)w____'=KqtH_#1)y____'=KqtH_#1*M____#=KqtH_#1*p____'=KqtH_#14Q__<N\" +\n+                        \"C=MN(F_#14S__<NC=MN(F_#16I__<NC=MN(F_#16N__<NC=MN(F_#16X__<NC=MN(F_#16k__<N\" +\n+                        \"C=MN(F_#17@__<NC=MN(F_#17A__<NC=MN(F_#1Cq____'=KqtH_#7)_____#=KqtH_#7)b____\" +\n+                        \"#=KqtH_#7Ww____'=KqtH_#?cQ____'=KqtH_#His____'=KqtH_#Jrh____'=KqtH_#O@M__<N\" +\n+                        \"C=MN(F_#O@O__<NC=MN(F_#OC6__<NC=MN(F_#Os.____#=KqtH_#YOW____#=H/Li_#Zat____\" +\n+                        \"'=KqtH_#ZbI____%=KqtH_#Zbc____'=KqtH_#Zbs____%=KqtH_#Zby____'=KqtH_#Zce____\" +\n+                        \"'=KqtH_#Zdc____%=KqtH_#Zea____'=KqtH_#ZhI____#=KqtH_#ZiD____'=KqtH_#Zis____\" +\n+                        \"'=KqtH_#Zj0____#=KqtH_#Zj1____'=KqtH_#Zj[____'=KqtH_#Zj]____'=KqtH_#Zj^____\" +\n+                        \"'=KqtH_#Zjb____'=KqtH_#Zk_____'=KqtH_#Zk6____#=KqtH_#Zk9____%=KqtH_#Zk<____\" +\n+                        \"'=KqtH_#Zl>____'=KqtH_#]9R____$=H/Lt_#]I6____#=KqtH_#]Z#____%=KqtH_#^*N____\" +\n+                        \"#=KqtH_#^:m____#=KqtH_#_*_____%=J^wI_#`-7____#=KqtH_#`T>____'=KqtH_#`T?____\" +\n+                        \"'=KqtH_#`TA____'=KqtH_#`TB____'=KqtH_#`TG____'=KqtH_#`TP____#=KqtH_#`U_____\" +\n+                        \"'=KqtH_#`U/____'=KqtH_#`U0____#=KqtH_#`U9____'=KqtH_#aEQ____%=KqtH_#b<)____\" +\n+                        \"'=KqtH_#c9-____%=KqtH_#dxC____%=KqtH_#dxE____%=KqtH_#ev$____'=KqtH_#fBi____\" +\n+                        \"#=KqtH_#fBj____'=KqtH_#fG)____'=KqtH_#fG+____'=KqtH_#g<d____'=KqtH_#g<e____\" +\n+                        \"'=KqtH_#g=J____'=KqtH_#gat____#=KqtH_#s`D____#=J_#p_#sg?____#=J_#p_#t<a____\" +\n+                        \"#=KqtH_#t<c____#=KqtH_#trY____$=JiYj_#vA$____'=KqtH_#xs_____'=KqtH_$$rO____\" +\n+                        \"#=KqtH_$$rP____#=KqtH_$(_%____'=KqtH_$)]o____%=KqtH_$_@)____'=KqtH_$_k]____\" +\n+                        \"'=KqtH_$1]+____%=KqtH_$3IO____%=KqtH_$3J#____'=KqtH_$3J.____'=KqtH_$3J:____\" +\n+                        \"#=KqtH_$3JH____#=KqtH_$3JI____#=KqtH_$3JK____%=KqtH_$3JL____'=KqtH_$3JS____\" +\n+                        \"'=KqtH_$8+M____#=KqtH_$99d____%=KqtH_$:Lw____#=LK+x_$:N@____#=KqtG_$:NC____\" +\n+                        \"#=KqtG_$:hW____'=KqtH_$:i[____'=KqtH_$:ih____'=KqtH_$:it____'=KqtH_$:kO____\" +\n+                        \"'=KqtH_$>*B____'=KqtH_$>hD____+=J^x0_$?lW____'=KqtH_$?ll____'=KqtH_$?lm____\" +\n+                        \"%=KqtH_$?mi____'=KqtH_$?mx____'=KqtH_$D7]____#=J_#p_$D@T____#=J_#p_$V<g____\" +\n+                        \"'=KqtH\";\n \n         Cookie cookie = ClientCookieDecoder.STRICT.decode(\"bh=\\\"\" + longValue\n-                                                   + \"\\\";\");\n+                + \"\\\";\");", "originalCommit": "0391ddfe6c280b63506729b23b35aa2c43654f7f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI1OTUwNA==", "url": "https://github.com/netty/netty/pull/10050#discussion_r383259504", "bodyText": "Personally, I would go with an enum.", "author": "slandelle", "createdAt": "2020-02-24T13:19:35Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/ClientCookieDecoder.java", "diffHunk": "@@ -154,6 +154,7 @@ public Cookie decode(String header) {\n         private int expiresEnd;\n         private boolean secure;\n         private boolean httpOnly;\n+        private String sameSite;", "originalCommit": "0391ddfe6c280b63506729b23b35aa2c43654f7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM1MDg4Mg==", "url": "https://github.com/netty/netty/pull/10050#discussion_r383350882", "bodyText": "I initially implemented this with an enum in our port of the classes in Styx, but since we have our own classes wrapping netty - and our product is a proxy and not an user agent/server that has to interact with that Cookie - I decided to have an enum there and let Netty passthrough any value.\nI am happy to add the attribute as an enum. In that case, what's your preference for error case scenarios? E.g,  if we receive SameSite=invalidValue, should we just throw an IllegalArgumentException?", "author": "dvlato", "createdAt": "2020-02-24T15:56:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI1OTUwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2Mjc1OQ==", "url": "https://github.com/netty/netty/pull/10050#discussion_r383362759", "bodyText": "+1 to enum. Wrt illegal values, I'd act as if the attribute isn't present.", "author": "bryce-anderson", "createdAt": "2020-02-24T16:15:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI1OTUwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2MDI0NQ==", "url": "https://github.com/netty/netty/pull/10050#discussion_r383260245", "bodyText": "Is this correct? According to draft:\n\nIf the \"cookie-attribute-list\" contains an attribute with an \"attribute-name\" of \"SameSite\", set the cookie's \"samesite-flag\" to \"attribute-value\" (\"Strict\" or \"Lax\").  Otherwise, set the cookie's \"samesite-flag\" to \"None\".\n\nSo it looks to me \"None\" is only a possible value in the storage model, not on the wire, and we could use null as well.", "author": "slandelle", "createdAt": "2020-02-24T13:21:13Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/DefaultCookie.java", "diffHunk": "@@ -232,6 +241,9 @@ public String toString() {\n         if (isHttpOnly()) {\n             buf.append(\", HTTPOnly\");\n         }\n+        if (sameSite() != null) {\n+            buf.append(\", SameSite=\").append(sameSite());", "originalCommit": "0391ddfe6c280b63506729b23b35aa2c43654f7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM0NjgwOQ==", "url": "https://github.com/netty/netty/pull/10050#discussion_r383346809", "bodyText": "HI @slandelle  I noticed that discrepancy but that's actually the opposite of what Google Chrome has decided to do. They consider \"Lax\" the default and for None you need to explictly set it to SameSite=None.\nSee for instance this article (looks easier to read, but I haven't checked it ): https://blog.chromium.org/2019/10/developers-get-ready-for-new.html\nor here: https://www.chromium.org/updates/same-site\nThat's why it is so urgent for websites to add support for the SameSite attribute, otherwise any third-party cookies without SameSite=None will be automatically rejected by Chrome.", "author": "dvlato", "createdAt": "2020-02-24T15:50:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2MDI0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2MTU4NA==", "url": "https://github.com/netty/netty/pull/10050#discussion_r383361584", "bodyText": "Ah, actually this new behaviour was defined here: https://tools.ietf.org/html/draft-west-cookie-incrementalism-00#section-3.1", "author": "dvlato", "createdAt": "2020-02-24T16:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2MDI0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2MDUzNg==", "url": "https://github.com/netty/netty/pull/10050#discussion_r383260536", "bodyText": "See above, I don't think None is a possible value over the wire, only in the storage model.", "author": "slandelle", "createdAt": "2020-02-24T13:21:49Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/cookie/ClientCookieDecoderTest.java", "diffHunk": "@@ -25,14 +25,16 @@\n import java.util.Iterator;\n import java.util.TimeZone;\n \n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.is;\n import static org.junit.Assert.*;\n \n public class ClientCookieDecoderTest {\n     @Test\n     public void testDecodingSingleCookieV0() {\n         String cookieString = \"myCookie=myValue;expires=\"\n                 + DateFormatter.format(new Date(System.currentTimeMillis() + 50000))\n-                + \";path=/apathsomewhere;domain=.adomainsomewhere;secure;\";\n+                + \";path=/apathsomewhere;domain=.adomainsomewhere;secure;SameSite=None\";", "originalCommit": "0391ddfe6c280b63506729b23b35aa2c43654f7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM1MTExNA==", "url": "https://github.com/netty/netty/pull/10050#discussion_r383351114", "bodyText": "See my response above about later changes to the specification that at least Chrome has already implemented: https://tools.ietf.org/html/draft-west-cookie-incrementalism-00#section-3.1", "author": "dvlato", "createdAt": "2020-02-24T15:56:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2MDUzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2MzQyNg==", "url": "https://github.com/netty/netty/pull/10050#discussion_r383263426", "bodyText": "Should we use null for None?", "author": "slandelle", "createdAt": "2020-02-24T13:27:50Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/cookie/ClientCookieDecoderTest.java", "diffHunk": "@@ -44,6 +46,9 @@ public void testDecodingSingleCookieV0() {\n                 cookie.maxAge() >= 40 && cookie.maxAge() <= 60);\n         assertEquals(\"/apathsomewhere\", cookie.path());\n         assertTrue(cookie.isSecure());\n+\n+        assertThat(cookie, is(instanceOf(DefaultCookie.class)));\n+        assertEquals(\"None\", ((DefaultCookie) cookie).sameSite());", "originalCommit": "0391ddfe6c280b63506729b23b35aa2c43654f7f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6d1bad3d438520ea4758976f0d9f35a2f68c394b", "url": "https://github.com/netty/netty/commit/6d1bad3d438520ea4758976f0d9f35a2f68c394b", "message": "Javadoc added.", "committedDate": "2020-02-24T16:21:47Z", "type": "commit"}, {"oid": "222603eedd8945f929b6acf02170c9ab16b2e87e", "url": "https://github.com/netty/netty/commit/222603eedd8945f929b6acf02170c9ab16b2e87e", "message": "Use an enum to represent the values of the SameSite attributes", "committedDate": "2020-02-25T13:35:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4MjM2Mw==", "url": "https://github.com/netty/netty/pull/10050#discussion_r383882363", "bodyText": "should we regrow the e if we did not find a match ?", "author": "normanmaurer", "createdAt": "2020-02-25T13:38:13Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/CookieHeaderNames.java", "diffHunk": "@@ -30,6 +30,37 @@\n \n     public static final String SAMESITE = \"SameSite\";\n \n+    /**\n+     * Possible values for the SameSite attribute.\n+     * See <a href=https://tools.ietf.org/html/draft-west-cookie-incrementalism-00#section-3.1>changes to RFC6265bis</a>\n+     */\n+    public enum SameSite {\n+        Lax,\n+        Strict,\n+        None;\n+\n+        /**\n+         * Return the enum value corresponding to the passed in same-site-flag, using a case insensitive comparison.\n+         *\n+         * @param name value for the SameSite Attribute\n+         * @return enum value for the provided name or null\n+         */\n+        static SameSite of(String name) {\n+            if (name != null) {\n+                try {\n+                    return SameSite.valueOf(name);\n+                } catch (IllegalArgumentException e) {\n+                    for (SameSite each : SameSite.class.getEnumConstants()) {\n+                        if (each.name().equalsIgnoreCase(name)) {\n+                            return each;\n+                        }\n+                    }", "originalCommit": "222603eedd8945f929b6acf02170c9ab16b2e87e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg5MjM5NA==", "url": "https://github.com/netty/netty/pull/10050#discussion_r383892394", "bodyText": "I've implemented it as per Bryce's suggestion that we ignore illegal values. I would think it makes sense as it seems you are not throwing exception for any validation errors in the Decoder class even when strict validation is enabled (cookie is just ignored).\nHowever I might have missed anything and, in any case, I will follow your advice. My initial idea was to change \"logger\" in the CookieDecoder class to be protected and add logging but let it return null anyway.", "author": "dvlato", "createdAt": "2020-02-25T13:55:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4MjM2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2ODQwNw==", "url": "https://github.com/netty/netty/pull/10050#discussion_r384068407", "bodyText": "good point... I think logging would be good tho :)", "author": "normanmaurer", "createdAt": "2020-02-25T19:12:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4MjM2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NzI0Mg==", "url": "https://github.com/netty/netty/pull/10050#discussion_r385747242", "bodyText": "might be nicer to add a name field to the enum itself so you can use upper case for the enum names..\npublic enum SameSite {\n        LAX(\"Lax\"),\n        STRICT(\"Strict\"),\n        NONE(\"None\");\n\n        private final String name;", "author": "johnou", "createdAt": "2020-02-28T15:09:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4MjM2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM2MDQzMQ==", "url": "https://github.com/netty/netty/pull/10050#discussion_r384360431", "bodyText": "Why do you want to do that?\nFrom https://tools.ietf.org/html/draft-west-first-party-cookies-07#section-4.1:\n\nIf \"cookie-av\"'s \"attribute-value\" is not a case-sensitive match\nfor \"Strict\" or \"Lax\", ignore the \"cookie-av\".\n\nI'd say to initially stick to the spec and not allow for broken implementations that don't use the proper case.", "author": "slandelle", "createdAt": "2020-02-26T09:13:24Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/CookieHeaderNames.java", "diffHunk": "@@ -28,6 +28,39 @@\n \n     public static final String HTTPONLY = \"HTTPOnly\";\n \n+    public static final String SAMESITE = \"SameSite\";\n+\n+    /**\n+     * Possible values for the SameSite attribute.\n+     * See <a href=https://tools.ietf.org/html/draft-west-cookie-incrementalism-00#section-3.1>changes to RFC6265bis</a>\n+     */\n+    public enum SameSite {\n+        Lax,\n+        Strict,\n+        None;\n+\n+        /**\n+         * Return the enum value corresponding to the passed in same-site-flag, using a case insensitive comparison.\n+         *\n+         * @param name value for the SameSite Attribute\n+         * @return enum value for the provided name or null\n+         */\n+        static SameSite of(String name) {\n+            if (name != null) {\n+                try {\n+                    return SameSite.valueOf(name);\n+                } catch (IllegalArgumentException e) {\n+                    for (SameSite each : SameSite.class.getEnumConstants()) {", "originalCommit": "222603eedd8945f929b6acf02170c9ab16b2e87e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQwNjU2NA==", "url": "https://github.com/netty/netty/pull/10050#discussion_r384406564", "bodyText": "@slandelle +1 ... @dvlato  lets just return null in the case", "author": "normanmaurer", "createdAt": "2020-02-26T10:34:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM2MDQzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUwNDgyMA==", "url": "https://github.com/netty/netty/pull/10050#discussion_r384504820", "bodyText": "Hi,\nThe new draft for 'incrementally better cookies' removes the case sensitive restriction for None values:\n2.  If cookie-av's attribute-value is a case-insensitive\nmatch for \"None\", set \"enforcement\" to \"None\".\nThe status of those drafts is not perfect but I would expect an updated version to say \"case-insensitive\" match wherever it says case sensitive match now.\nIf you don't want to go down the \"full case-insensitive\"  route,  should I add case insensitivity comparisons just for the None value?", "author": "dvlato", "createdAt": "2020-02-26T13:53:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM2MDQzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUyNDMxNA==", "url": "https://github.com/netty/netty/pull/10050#discussion_r384524314", "bodyText": "@dvlato It looks like https://tools.ietf.org/html/draft-west-cookie-incrementalism-00 from May 7, 2019, expired on November 8, 2019 was superseded by https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-05 from February 5, 2020, expiring on August 8, 2020.\nFrom section 5.4:\n\n\nIf the cookie-attribute-list contains an attribute with an attribute-name of \"SameSite\", set the cookie's same-site-flag to the attribute-value of the last attribute in the cookie-attribute-list with an attribute-name of \"SameSite\" (i.e. either \"Strict\", \"Lax\", or \"None\").  Otherwise, set the cookie's same-site-flag to \"None\".\n\n\nI read this as strict equality, hence case sensitive.", "author": "slandelle", "createdAt": "2020-02-26T14:25:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM2MDQzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUyOTk1NA==", "url": "https://github.com/netty/netty/pull/10050#discussion_r384529954", "bodyText": "Oh, I hadn't noticed there was a superseding draft. Thanks for that!\nFrom the same draft you mention:\nhttps://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-05#section-5.3.7\nIf cookie-av's attribute-value is a case-insensitive match for\n\"Strict\", set \"enforcement\" to \"Strict\".\n\nIf cookie-av's attribute-value is a case-insensitive match for\n\"Lax\", set \"enforcement\" to \"Lax\".", "author": "dvlato", "createdAt": "2020-02-26T14:34:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM2MDQzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzMTU2NQ==", "url": "https://github.com/netty/netty/pull/10050#discussion_r384531565", "bodyText": "Nice, I missed that :)\nThat settles it then, case insensitive it is.", "author": "slandelle", "createdAt": "2020-02-26T14:36:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM2MDQzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzNDE1NQ==", "url": "https://github.com/netty/netty/pull/10050#discussion_r384534155", "bodyText": "I'm really not fond of using exceptions for expected flow control.\nIMHO, as value matching must be case insensitive, we should drop the SameSite.valueOf and have one single code branch.", "author": "slandelle", "createdAt": "2020-02-26T14:41:03Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/CookieHeaderNames.java", "diffHunk": "@@ -28,6 +28,39 @@\n \n     public static final String HTTPONLY = \"HTTPOnly\";\n \n+    public static final String SAMESITE = \"SameSite\";\n+\n+    /**\n+     * Possible values for the SameSite attribute.\n+     * See <a href=https://tools.ietf.org/html/draft-west-cookie-incrementalism-00#section-3.1>changes to RFC6265bis</a>\n+     */\n+    public enum SameSite {\n+        Lax,\n+        Strict,\n+        None;\n+\n+        /**\n+         * Return the enum value corresponding to the passed in same-site-flag, using a case insensitive comparison.\n+         *\n+         * @param name value for the SameSite Attribute\n+         * @return enum value for the provided name or null\n+         */\n+        static SameSite of(String name) {\n+            if (name != null) {\n+                try {\n+                    return SameSite.valueOf(name);\n+                } catch (IllegalArgumentException e) {", "originalCommit": "222603eedd8945f929b6acf02170c9ab16b2e87e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU1MDk3NA==", "url": "https://github.com/netty/netty/pull/10050#discussion_r384550974", "bodyText": "I agree with @slandelle here @dvlato", "author": "normanmaurer", "createdAt": "2020-02-26T15:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzNDE1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYxODg5OA==", "url": "https://github.com/netty/netty/pull/10050#discussion_r384618898", "bodyText": "In that case, should I remove the logging altogether in ClientCookieDecoder?  Otherwise, are you ok with throwing an Exception here if we cannot decode the value?  Or how would you go about logging this? I wouldn't do it inside SameSite.valueOf()", "author": "dvlato", "createdAt": "2020-02-26T16:41:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzNDE1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczOTA1Nw==", "url": "https://github.com/netty/netty/pull/10050#discussion_r384739057", "bodyText": "@dvlato imho we can remove the logging and the valueOf alltogether and just do the for loop directly. I think this is what @slandelle suggested", "author": "normanmaurer", "createdAt": "2020-02-26T20:13:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzNDE1NQ=="}], "type": "inlineReview"}, {"oid": "6df6d4f3ef69edaf0b2314200bead86d17a07a30", "url": "https://github.com/netty/netty/commit/6df6d4f3ef69edaf0b2314200bead86d17a07a30", "message": "Log any errors parsing SameSite attribute", "committedDate": "2020-02-26T14:56:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU1MDYxNA==", "url": "https://github.com/netty/netty/pull/10050#discussion_r384550614", "bodyText": "Useless. The purpose of such test would be to avoid message resolution (eg String concatenation) when logging level is disabled. But there's no resolution here as you use the {} interpolation.\nPlease remove.", "author": "slandelle", "createdAt": "2020-02-26T15:04:46Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/ClientCookieDecoder.java", "diffHunk": "@@ -248,11 +248,18 @@ private void parse8(int nameStart, int valueStart, int valueEnd) {\n             if (header.regionMatches(true, nameStart, CookieHeaderNames.HTTPONLY, 0, 8)) {\n                 httpOnly = true;\n             } else if (header.regionMatches(true, nameStart, CookieHeaderNames.SAMESITE, 0, 8)) {\n-                sameSite = SameSite.of(computeValue(valueStart, valueEnd));\n+                String sameSiteValue = computeValue(valueStart, valueEnd);\n+                try {\n+                    sameSite = SameSite.of(sameSiteValue);\n+                } catch (IllegalArgumentException e) {\n+                    if (logger.isDebugEnabled()) {", "originalCommit": "6df6d4f3ef69edaf0b2314200bead86d17a07a30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYxNjcxNg==", "url": "https://github.com/netty/netty/pull/10050#discussion_r384616716", "bodyText": "Hi, I have modified that.\n*Please note I followed examples from some files in your code that happened to check the logging level (e.g, EpollSocketTestPermutation) - maybe you can at some point fix all of those so it's easier to follow project standards.", "author": "dvlato", "createdAt": "2020-02-26T16:38:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU1MDYxNA=="}], "type": "inlineReview"}, {"oid": "3b82151c3d6ef5891c0d321f64c2a71a808deebe", "url": "https://github.com/netty/netty/commit/3b82151c3d6ef5891c0d321f64c2a71a808deebe", "message": "remove isDebugEnabled() guard.", "committedDate": "2020-02-26T16:28:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYyNjM4Mw==", "url": "https://github.com/netty/netty/pull/10050#discussion_r384626383", "bodyText": "Please update to latest RFC6265bis latest draft :)", "author": "slandelle", "createdAt": "2020-02-26T16:53:03Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/CookieHeaderNames.java", "diffHunk": "@@ -28,6 +28,40 @@\n \n     public static final String HTTPONLY = \"HTTPOnly\";\n \n+    public static final String SAMESITE = \"SameSite\";\n+\n+    /**\n+     * Possible values for the SameSite attribute.\n+     * See <a href=https://tools.ietf.org/html/draft-west-cookie-incrementalism-00#section-3.1>changes to RFC6265bis</a>", "originalCommit": "3b82151c3d6ef5891c0d321f64c2a71a808deebe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIyNTIwNA==", "url": "https://github.com/netty/netty/pull/10050#discussion_r385225204", "bodyText": "@dvlato ^^", "author": "normanmaurer", "createdAt": "2020-02-27T16:33:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYyNjM4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYyNjYyMg==", "url": "https://github.com/netty/netty/pull/10050#discussion_r384626622", "bodyText": "RFC6265bis", "author": "slandelle", "createdAt": "2020-02-26T16:53:25Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/DefaultCookie.java", "diffHunk": "@@ -119,6 +123,26 @@ public void setHttpOnly(boolean httpOnly) {\n         this.httpOnly = httpOnly;\n     }\n \n+    /**\n+     * Checks to see if this {@link Cookie} can be sent along cross-site requests.\n+     * For more information, please look\n+     * <a href=\"https://tools.ietf.org/html/draft-west-cookie-incrementalism-00#section-3.1\">here</a>", "originalCommit": "3b82151c3d6ef5891c0d321f64c2a71a808deebe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIyNTU5OA==", "url": "https://github.com/netty/netty/pull/10050#discussion_r385225598", "bodyText": "@dvlato ^^", "author": "normanmaurer", "createdAt": "2020-02-27T16:34:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYyNjYyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYyNjY5OQ==", "url": "https://github.com/netty/netty/pull/10050#discussion_r384626699", "bodyText": "RFC6265bis", "author": "slandelle", "createdAt": "2020-02-26T16:53:31Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/DefaultCookie.java", "diffHunk": "@@ -119,6 +123,26 @@ public void setHttpOnly(boolean httpOnly) {\n         this.httpOnly = httpOnly;\n     }\n \n+    /**\n+     * Checks to see if this {@link Cookie} can be sent along cross-site requests.\n+     * For more information, please look\n+     * <a href=\"https://tools.ietf.org/html/draft-west-cookie-incrementalism-00#section-3.1\">here</a>\n+     * @return <b>same-site-flag</b> value\n+     */\n+    public SameSite sameSite() {\n+        return sameSite;\n+    }\n+\n+    /**\n+     * Determines if this this {@link Cookie} can be sent along cross-site requests.\n+     * For more information, please look\n+     *  <a href=\"https://tools.ietf.org/html/draft-west-cookie-incrementalism-00#section-3.1\">here</a>", "originalCommit": "3b82151c3d6ef5891c0d321f64c2a71a808deebe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIyNTYyOA==", "url": "https://github.com/netty/netty/pull/10050#discussion_r385225628", "bodyText": "@dvlato ^^", "author": "normanmaurer", "createdAt": "2020-02-27T16:34:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYyNjY5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczOTk2OQ==", "url": "https://github.com/netty/netty/pull/10050#discussion_r384739969", "bodyText": "@dvlato is there a reason why this can't be static anymore ?", "author": "normanmaurer", "createdAt": "2020-02-26T20:15:32Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/ClientCookieDecoder.java", "diffHunk": "@@ -143,7 +144,7 @@ public Cookie decode(String header) {\n         return cookieBuilder != null ? cookieBuilder.cookie() : null;\n     }\n \n-    private static class CookieBuilder {\n+    private class CookieBuilder {", "originalCommit": "3b82151c3d6ef5891c0d321f64c2a71a808deebe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0Mjg3NQ==", "url": "https://github.com/netty/netty/pull/10050#discussion_r385742875", "bodyText": "This was part of the change we discussed to log a message when the SameSite attribute value was incorrect ... It\u00b4s been rolled back now as we don\u00b4t need access to the logger (of course we could have created a different,static, logger for the CookieBuilder class as well ).", "author": "dvlato", "createdAt": "2020-02-28T15:01:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczOTk2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzOTAyMg==", "url": "https://github.com/netty/netty/pull/10050#discussion_r384939022", "bodyText": "IMHO, you don't need to throw an IllegalArgumentException from SameSite.of and catch it right after. You could just return null.", "author": "slandelle", "createdAt": "2020-02-27T06:45:39Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/ClientCookieDecoder.java", "diffHunk": "@@ -241,13 +244,20 @@ private void parse7(int nameStart, int valueStart, int valueEnd) {\n             }\n         }\n \n-        private void parse8(int nameStart) {\n+        private void parse8(int nameStart, int valueStart, int valueEnd) {\n             if (header.regionMatches(true, nameStart, CookieHeaderNames.HTTPONLY, 0, 8)) {\n                 httpOnly = true;\n+            } else if (header.regionMatches(true, nameStart, CookieHeaderNames.SAMESITE, 0, 8)) {\n+                String sameSiteValue = computeValue(valueStart, valueEnd);\n+                try {\n+                    sameSite = SameSite.of(sameSiteValue);\n+                } catch (IllegalArgumentException e) {", "originalCommit": "3b82151c3d6ef5891c0d321f64c2a71a808deebe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzOTQ0NQ==", "url": "https://github.com/netty/netty/pull/10050#discussion_r384939445", "bodyText": "Please revert to static. That's a general practice in Netty for methods that don't depend on any instance state.", "author": "slandelle", "createdAt": "2020-02-27T06:47:10Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/ClientCookieDecoder.java", "diffHunk": "@@ -241,13 +244,20 @@ private void parse7(int nameStart, int valueStart, int valueEnd) {\n             }\n         }\n \n-        private void parse8(int nameStart) {\n+        private void parse8(int nameStart, int valueStart, int valueEnd) {\n             if (header.regionMatches(true, nameStart, CookieHeaderNames.HTTPONLY, 0, 8)) {\n                 httpOnly = true;\n+            } else if (header.regionMatches(true, nameStart, CookieHeaderNames.SAMESITE, 0, 8)) {\n+                String sameSiteValue = computeValue(valueStart, valueEnd);\n+                try {\n+                    sameSite = SameSite.of(sameSiteValue);\n+                } catch (IllegalArgumentException e) {\n+                    logger.debug(\"Skipping SameSite attribute because value '{}' is invalid\", sameSiteValue);\n+                }\n             }\n         }\n \n-        private static boolean isValueDefined(int valueStart, int valueEnd) {\n+        private boolean isValueDefined(int valueStart, int valueEnd) {", "originalCommit": "3b82151c3d6ef5891c0d321f64c2a71a808deebe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIyNTA1MA==", "url": "https://github.com/netty/netty/pull/10050#discussion_r385225050", "bodyText": "@dvlato ^^", "author": "normanmaurer", "createdAt": "2020-02-27T16:33:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzOTQ0NQ=="}], "type": "inlineReview"}, {"oid": "5c82b2c83f7dcf41bdd6ef1541446c43ca86c2e4", "url": "https://github.com/netty/netty/commit/5c82b2c83f7dcf41bdd6ef1541446c43ca86c2e4", "message": "Drop (currently) invalid SameSite values silently. Usage of Enum.valueOf() removed.", "committedDate": "2020-02-27T14:43:49Z", "type": "commit"}, {"oid": "74a3675130707e115cd3fda9a67029f44c938940", "url": "https://github.com/netty/netty/commit/74a3675130707e115cd3fda9a67029f44c938940", "message": "Updated documentation to point to the latest rfc6265 draft.", "committedDate": "2020-02-28T15:05:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0OTEzOQ==", "url": "https://github.com/netty/netty/pull/10050#discussion_r385749139", "bodyText": "should be non null, according to spec it should fallback to None..?\nhttps://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-05#section-4.1\nIf the \"SameSite\" attribute's value is \"Strict\", the cookie will only\nbe sent along with \"same-site\" requests.  If the value is \"Lax\", the\ncookie will be sent with same-site requests, and with \"cross-site\"\ntop-level navigations, as described in Section 5.3.7.1.  If the value\nis \"None\", the cookie will be sent with same-site and cross-site\nrequests.  If the \"SameSite\" attribute's value is something other\nthan these three known keywords, the attribute's value will be\ntreated as \"None\".", "author": "johnou", "createdAt": "2020-02-28T15:12:21Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/CookieHeaderNames.java", "diffHunk": "@@ -28,6 +28,35 @@\n \n     public static final String HTTPONLY = \"HTTPOnly\";\n \n+    public static final String SAMESITE = \"SameSite\";\n+\n+    /**\n+     * Possible values for the SameSite attribute.\n+     * See <a href=\"https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-05\">changes to RFC6265bis</a>\n+     */\n+    public enum SameSite {\n+        Lax,\n+        Strict,\n+        None;\n+\n+        /**\n+         * Return the enum value corresponding to the passed in same-site-flag, using a case insensitive comparison.\n+         *\n+         * @param name value for the SameSite Attribute\n+         * @return enum value for the provided name or null\n+         */\n+        static SameSite of(String name) {\n+            if (name != null) {\n+                for (SameSite each : SameSite.class.getEnumConstants()) {\n+                    if (each.name().equalsIgnoreCase(name)) {\n+                        return each;\n+                    }\n+                }\n+            }\n+            return null;", "originalCommit": "74a3675130707e115cd3fda9a67029f44c938940", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg2OTkyMA==", "url": "https://github.com/netty/netty/pull/10050#discussion_r385869920", "bodyText": "I understand \"will be treated\" to refer to the behaviour explained in the paragraph regarding whether the cookie will be sent or not:\nIf the value is \"None\", the cookie will be sent with same-site and cross-site requests\n\nBoth here and in the normative section (https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-05#section-5.3.7) it mentions behaviour or \"treated as\" and in no case it seems to mention we should replace the value on the wire.\nThat section might mean we should always keep the received value for SameSite but we have agreed on the contrary. In any case, cookies are most likely going to be revisited in the next major version - I would suggest that we could keep unknown attributes as well and not only unknown values, so things like this \"new\" SameSite attribute don't  impact netty users.", "author": "dvlato", "createdAt": "2020-02-28T19:04:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0OTEzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MDMzNQ==", "url": "https://github.com/netty/netty/pull/10050#discussion_r385750335", "bodyText": "missing double quote in the a href breaking javadoc.", "author": "johnou", "createdAt": "2020-02-28T15:14:28Z", "path": "codec-http/src/main/java/io/netty/handler/codec/http/cookie/DefaultCookie.java", "diffHunk": "@@ -119,6 +123,26 @@ public void setHttpOnly(boolean httpOnly) {\n         this.httpOnly = httpOnly;\n     }\n \n+    /**\n+     * Checks to see if this {@link Cookie} can be sent along cross-site requests.\n+     * For more information, please look\n+     * <a href=\"https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-05\">here</a>\n+     * @return <b>same-site-flag</b> value\n+     */\n+    public SameSite sameSite() {\n+        return sameSite;\n+    }\n+\n+    /**\n+     * Determines if this this {@link Cookie} can be sent along cross-site requests.\n+     * For more information, please look\n+     *  <a href=\"https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-05>here</a>", "originalCommit": "74a3675130707e115cd3fda9a67029f44c938940", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MTMzMg==", "url": "https://github.com/netty/netty/pull/10050#discussion_r385751332", "bodyText": "reference the enum directly instead of using a bareword", "author": "johnou", "createdAt": "2020-02-28T15:16:10Z", "path": "codec-http/src/test/java/io/netty/handler/codec/http/cookie/ClientCookieDecoderTest.java", "diffHunk": "@@ -44,6 +46,9 @@ public void testDecodingSingleCookieV0() {\n                 cookie.maxAge() >= 40 && cookie.maxAge() <= 60);\n         assertEquals(\"/apathsomewhere\", cookie.path());\n         assertTrue(cookie.isSecure());\n+\n+        assertThat(cookie, is(instanceOf(DefaultCookie.class)));\n+        assertEquals(\"None\", ((DefaultCookie) cookie).sameSite().name());", "originalCommit": "74a3675130707e115cd3fda9a67029f44c938940", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3ba54e5f71296b7854cadd9390c44dec32e4d307", "url": "https://github.com/netty/netty/commit/3ba54e5f71296b7854cadd9390c44dec32e4d307", "message": "fixed missing double quite in href attribute.", "committedDate": "2020-02-28T18:54:57Z", "type": "commit"}]}