{"pr_number": 10561, "pr_title": "Added error handling for io_uring creation failure", "pr_createdAt": "2020-09-10T07:00:24Z", "pr_url": "https://github.com/netty/netty/pull/10561", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExMTI2Ng==", "url": "https://github.com/netty/netty/pull/10561#discussion_r486111266", "bodyText": "shouldn't that better include the errno ?", "author": "normanmaurer", "createdAt": "2020-09-10T07:04:38Z", "path": "transport-native-io_uring/src/main/c/netty_io_uring_native.c", "diffHunk": "@@ -276,28 +244,22 @@ static void netty_io_uring_ring_buffer_exit(JNIEnv *env, jclass class, jobject r\n \tclose(submissionQueueRingFd);\n }\n \n-static int nettyBlockingSocket(int domain, int type, int protocol) {\n-    return socket(domain, type, protocol);\n-}\n-\n static jobject netty_io_uring_setup(JNIEnv *env, jclass class1, jint entries, jobject submitCallback) {\n     struct io_uring_params p;\n     memset(&p, 0, sizeof(p));\n \n     int ring_fd = sys_io_uring_setup((int)entries, &p);\n \n-    //Todo\n     if (ring_fd < 0) {\n-      printf(\"RingFd error: %d\\n\", ring_fd);\n-      //throw Exception\n+     netty_unix_errors_throwRuntimeExceptionErrorNo(env, \"failed to create io_uring ring fd \", errno);\n       return NULL;\n     }\n     struct io_uring io_uring_ring;\n-    //Todo memset instead\n-    io_uring_ring.flags = 0;\n-    io_uring_ring.sq.sqe_tail = 0;\n-    io_uring_ring.sq.sqe_head = 0;\n-    setup_io_uring(ring_fd, &io_uring_ring, &p);\n+    int ret = setup_io_uring(ring_fd, &io_uring_ring, &p);\n+\n+    if (ret != 0) {\n+        netty_unix_errors_throwRuntimeExceptionErrorNo(env, \"failed to mmap io_uring ring buffer\", ret);", "originalCommit": "ebe5149e3c088cbc67a5b7849454f75ad37c420f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNTg0OQ==", "url": "https://github.com/netty/netty/pull/10561#discussion_r486115849", "bodyText": "yeah sure, however we already return a errno in setup_io_uring, I thought it would be more readable", "author": "1Jo1", "createdAt": "2020-09-10T07:13:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExMTI2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExODM5NA==", "url": "https://github.com/netty/netty/pull/10561#discussion_r486118394", "bodyText": "ah ok .... missed that. Then its fine :)", "author": "normanmaurer", "createdAt": "2020-09-10T07:18:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExMTI2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExMTM5Nw==", "url": "https://github.com/netty/netty/pull/10561#discussion_r486111397", "bodyText": "nit: \"missing space\"", "author": "normanmaurer", "createdAt": "2020-09-10T07:04:53Z", "path": "transport-native-io_uring/src/main/c/netty_io_uring_native.c", "diffHunk": "@@ -276,28 +244,22 @@ static void netty_io_uring_ring_buffer_exit(JNIEnv *env, jclass class, jobject r\n \tclose(submissionQueueRingFd);\n }\n \n-static int nettyBlockingSocket(int domain, int type, int protocol) {\n-    return socket(domain, type, protocol);\n-}\n-\n static jobject netty_io_uring_setup(JNIEnv *env, jclass class1, jint entries, jobject submitCallback) {\n     struct io_uring_params p;\n     memset(&p, 0, sizeof(p));\n \n     int ring_fd = sys_io_uring_setup((int)entries, &p);\n \n-    //Todo\n     if (ring_fd < 0) {\n-      printf(\"RingFd error: %d\\n\", ring_fd);\n-      //throw Exception\n+     netty_unix_errors_throwRuntimeExceptionErrorNo(env, \"failed to create io_uring ring fd \", errno);", "originalCommit": "ebe5149e3c088cbc67a5b7849454f75ad37c420f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExMTU3OA==", "url": "https://github.com/netty/netty/pull/10561#discussion_r486111578", "bodyText": "why this change ?", "author": "normanmaurer", "createdAt": "2020-09-10T07:05:13Z", "path": "transport-native-io_uring/src/main/c/netty_io_uring.h", "diffHunk": "@@ -38,9 +38,6 @@ struct io_uring_sq {\n     unsigned *array;\n     struct io_uring_sqe *sqes;\n \n-    unsigned sqe_head;\n-    unsigned sqe_tail;", "originalCommit": "ebe5149e3c088cbc67a5b7849454f75ad37c420f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExOTEzOQ==", "url": "https://github.com/netty/netty/pull/10561#discussion_r486119139", "bodyText": "we don't use and we only need io_uring_sq struct(which is on the stack) for storing kernel pointers for the RingBuffer creation", "author": "1Jo1", "createdAt": "2020-09-10T07:20:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExMTU3OA=="}], "type": "inlineReview"}, {"oid": "d37966cf336302e53b4a198f9e5397d0fa9be728", "url": "https://github.com/netty/netty/commit/d37966cf336302e53b4a198f9e5397d0fa9be728", "message": "Added error handling for io_uring creation failure\n\nMotivation:\n\nwe should throw a jvm runtime exception for io_uring creation failure to avoid a NullPointerException\n\nModifications:\n\n-error handling for creation ring fd and mmap io_uring ring buffer\n-some cleanups\n\nResult:\n\nbetter error handling", "committedDate": "2020-09-10T09:49:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4NjA1MQ==", "url": "https://github.com/netty/netty/pull/10561#discussion_r486286051", "bodyText": "you also need to add a return statement as the exception will be just put on the \"stack\" and picked up once the method returns. This works a bit different then throwing an exception from java layer :)\nif (ret != 0) {\n    netty_unix_errors_throwRuntimeExceptionErrorNo(env, \"failed to mmap io_uring ring buffer\", ret);\n    return NULL;\n}", "author": "normanmaurer", "createdAt": "2020-09-10T12:11:46Z", "path": "transport-native-io_uring/src/main/c/netty_io_uring_native.c", "diffHunk": "@@ -276,28 +244,22 @@ static void netty_io_uring_ring_buffer_exit(JNIEnv *env, jclass class, jobject r\n \tclose(submissionQueueRingFd);\n }\n \n-static int nettyBlockingSocket(int domain, int type, int protocol) {\n-    return socket(domain, type, protocol);\n-}\n-\n static jobject netty_io_uring_setup(JNIEnv *env, jclass class1, jint entries, jobject submitCallback) {\n     struct io_uring_params p;\n     memset(&p, 0, sizeof(p));\n \n     int ring_fd = sys_io_uring_setup((int)entries, &p);\n \n-    //Todo\n     if (ring_fd < 0) {\n-      printf(\"RingFd error: %d\\n\", ring_fd);\n-      //throw Exception\n-      return NULL;\n+        netty_unix_errors_throwRuntimeExceptionErrorNo(env, \"failed to create io_uring ring fd \", errno);\n+        return NULL;\n     }\n     struct io_uring io_uring_ring;\n-    //Todo memset instead\n-    io_uring_ring.flags = 0;\n-    io_uring_ring.sq.sqe_tail = 0;\n-    io_uring_ring.sq.sqe_head = 0;\n-    setup_io_uring(ring_fd, &io_uring_ring, &p);\n+    int ret = setup_io_uring(ring_fd, &io_uring_ring, &p);\n+\n+    if (ret != 0) {\n+        netty_unix_errors_throwRuntimeExceptionErrorNo(env, \"failed to mmap io_uring ring buffer\", ret);", "originalCommit": "d37966cf336302e53b4a198f9e5397d0fa9be728", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1f18304aff73a071bb0aaa34a22d3ea9b55f76fc", "url": "https://github.com/netty/netty/commit/1f18304aff73a071bb0aaa34a22d3ea9b55f76fc", "message": "Added error handling for io_uring creation failure\n\nMotivation:\n\nwe should throw a jvm runtime exception for io_uring creation failure to avoid a NullPointerException\n\nModifications:\n\n-error handling for creation ring fd and mmap io_uring ring buffer\n-some cleanups\n\nResult:\n\nbetter error handling", "committedDate": "2020-09-10T13:24:11Z", "type": "commit"}, {"oid": "1f18304aff73a071bb0aaa34a22d3ea9b55f76fc", "url": "https://github.com/netty/netty/commit/1f18304aff73a071bb0aaa34a22d3ea9b55f76fc", "message": "Added error handling for io_uring creation failure\n\nMotivation:\n\nwe should throw a jvm runtime exception for io_uring creation failure to avoid a NullPointerException\n\nModifications:\n\n-error handling for creation ring fd and mmap io_uring ring buffer\n-some cleanups\n\nResult:\n\nbetter error handling", "committedDate": "2020-09-10T13:24:11Z", "type": "forcePushed"}]}