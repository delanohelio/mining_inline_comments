{"pr_number": 10079, "pr_title": "Use MacOSDnsServerAddressStreamProvider when on the classpath and we \u2026", "pr_createdAt": "2020-03-03T13:28:55Z", "pr_url": "https://github.com/netty/netty/pull/10079", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4Mjk5NA==", "url": "https://github.com/netty/netty/pull/10079#discussion_r387182994", "bodyText": "Is it necessary to create a new instance here? Consider invoking ensureAvailability() method instead of isAvailable() and newInstance().", "author": "idelpivnitskiy", "createdAt": "2020-03-03T17:37:45Z", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverBuilder.java", "diffHunk": "@@ -55,13 +66,68 @@\n     private int maxPayloadSize = 4096;\n     private boolean optResourceEnabled = true;\n     private HostsFileEntriesResolver hostsFileEntriesResolver = HostsFileEntriesResolver.DEFAULT;\n-    private DnsServerAddressStreamProvider dnsServerAddressStreamProvider = platformDefault();\n+    private DnsServerAddressStreamProvider dnsServerAddressStreamProvider = defaultStreamProvider();\n     private DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory =\n             NoopDnsQueryLifecycleObserverFactory.INSTANCE;\n     private String[] searchDomains;\n     private int ndots = -1;\n     private boolean decodeIdn = true;\n \n+    static {\n+        Constructor<? extends DnsServerAddressStreamProvider> constructor = null;\n+        if (PlatformDependent.isOsx()) {\n+            try {\n+                // As MacOSDnsServerAddressStreamProvider is contained in another jar which depends on this jar\n+                // we use reflection to use it if its on the classpath.\n+                Object maybeProvider = AccessController.doPrivileged(new PrivilegedAction<Object>() {\n+                    @Override\n+                    public Object run() {\n+                        try {\n+                            return Class.forName(\n+                                    \"io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider\",\n+                                    false,\n+                                    PlatformDependent.getSystemClassLoader());\n+                        } catch (Throwable cause) {\n+                            return cause;\n+                        }\n+                    }\n+                });\n+                if (maybeProvider instanceof Class) {\n+                    @SuppressWarnings(\"unchecked\")\n+                    Class<? extends DnsServerAddressStreamProvider> providerClass =\n+                            (Class<? extends DnsServerAddressStreamProvider>) maybeProvider;\n+                    Method method = providerClass.getMethod(\"isAvailable\");\n+                    if (Boolean.TRUE.equals(method.invoke(null))) {\n+                        constructor = providerClass.getConstructor();\n+                        constructor.newInstance();", "originalCommit": "aba969b526ae1b662e82de75d0970e288bc2dda7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0OTg0Ng==", "url": "https://github.com/netty/netty/pull/10079#discussion_r387249846", "bodyText": "ensureAvailability() is not the same as testing that we can also create an instance. I would prefer to test that we can also create the instance here. Just to be safe.", "author": "normanmaurer", "createdAt": "2020-03-03T19:40:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4Mjk5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4NTgyNg==", "url": "https://github.com/netty/netty/pull/10079#discussion_r387185826", "bodyText": "In DnsServerAddressStreamProviders you decide between windows and unix. Consider moving all this macos logic there as well to keep all os-related decision in one place.", "author": "idelpivnitskiy", "createdAt": "2020-03-03T17:42:53Z", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverBuilder.java", "diffHunk": "@@ -55,13 +66,68 @@\n     private int maxPayloadSize = 4096;\n     private boolean optResourceEnabled = true;\n     private HostsFileEntriesResolver hostsFileEntriesResolver = HostsFileEntriesResolver.DEFAULT;\n-    private DnsServerAddressStreamProvider dnsServerAddressStreamProvider = platformDefault();\n+    private DnsServerAddressStreamProvider dnsServerAddressStreamProvider = defaultStreamProvider();\n     private DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory =\n             NoopDnsQueryLifecycleObserverFactory.INSTANCE;\n     private String[] searchDomains;\n     private int ndots = -1;\n     private boolean decodeIdn = true;\n \n+    static {\n+        Constructor<? extends DnsServerAddressStreamProvider> constructor = null;\n+        if (PlatformDependent.isOsx()) {", "originalCommit": "aba969b526ae1b662e82de75d0970e288bc2dda7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1MDk4OA==", "url": "https://github.com/netty/netty/pull/10079#discussion_r387250988", "bodyText": "let me see what I can do.. MacOSDnsServerAddressStreamProvider does call DnsServerAddressStreamProviders.platformDefault() by itself so this would create a cycle..", "author": "normanmaurer", "createdAt": "2020-03-03T19:42:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4NTgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY0NjU5MQ==", "url": "https://github.com/netty/netty/pull/10079#discussion_r387646591", "bodyText": "@idelpivnitskiy done... PTAL again... also @NiteshKant", "author": "normanmaurer", "createdAt": "2020-03-04T12:53:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4NTgyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxMzA2Mg==", "url": "https://github.com/netty/netty/pull/10079#discussion_r387213062", "bodyText": "Can we just use this instance as opposed to keeping a reference to the constructior and call newInstance() from defaultStreamProvider() below?", "author": "NiteshKant", "createdAt": "2020-03-03T18:33:10Z", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverBuilder.java", "diffHunk": "@@ -55,13 +66,68 @@\n     private int maxPayloadSize = 4096;\n     private boolean optResourceEnabled = true;\n     private HostsFileEntriesResolver hostsFileEntriesResolver = HostsFileEntriesResolver.DEFAULT;\n-    private DnsServerAddressStreamProvider dnsServerAddressStreamProvider = platformDefault();\n+    private DnsServerAddressStreamProvider dnsServerAddressStreamProvider = defaultStreamProvider();\n     private DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory =\n             NoopDnsQueryLifecycleObserverFactory.INSTANCE;\n     private String[] searchDomains;\n     private int ndots = -1;\n     private boolean decodeIdn = true;\n \n+    static {\n+        Constructor<? extends DnsServerAddressStreamProvider> constructor = null;\n+        if (PlatformDependent.isOsx()) {\n+            try {\n+                // As MacOSDnsServerAddressStreamProvider is contained in another jar which depends on this jar\n+                // we use reflection to use it if its on the classpath.\n+                Object maybeProvider = AccessController.doPrivileged(new PrivilegedAction<Object>() {\n+                    @Override\n+                    public Object run() {\n+                        try {\n+                            return Class.forName(\n+                                    \"io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider\",\n+                                    false,\n+                                    PlatformDependent.getSystemClassLoader());\n+                        } catch (Throwable cause) {\n+                            return cause;\n+                        }\n+                    }\n+                });\n+                if (maybeProvider instanceof Class) {\n+                    @SuppressWarnings(\"unchecked\")\n+                    Class<? extends DnsServerAddressStreamProvider> providerClass =\n+                            (Class<? extends DnsServerAddressStreamProvider>) maybeProvider;\n+                    Method method = providerClass.getMethod(\"isAvailable\");\n+                    if (Boolean.TRUE.equals(method.invoke(null))) {\n+                        constructor = providerClass.getConstructor();\n+                        constructor.newInstance();", "originalCommit": "aba969b526ae1b662e82de75d0970e288bc2dda7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxNDU1Ng==", "url": "https://github.com/netty/netty/pull/10079#discussion_r387214556", "bodyText": "We need a new instance per build", "author": "normanmaurer", "createdAt": "2020-03-03T18:35:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxMzA2Mg=="}], "type": "inlineReview"}, {"oid": "a5dcb60161dd1530f03b62eff88f0235e6f8c7be", "url": "https://github.com/netty/netty/commit/a5dcb60161dd1530f03b62eff88f0235e6f8c7be", "message": "Use MacOSDnsServerAddressStreamProvider when on the classpath and we are running on MacOS\n\nMotivation:\n\n939e928312f1099373582f9811817a6226550987 introduced MacOSDnsServerAddressStreamProvider which will ensure the right nameservers are selected when running on MacOS. To ensure this is done automatically on MacOS we should use it by default on these platforms.\n\nModifications:\n\nTry to use MacOSDnsServerAddressStreamProvider when on MacOS via reflection and fallback if not possible\n\nResult:\n\nEnsure the right nameservers are used on MacOS even when a VPN (for example) is used.", "committedDate": "2020-03-04T12:52:42Z", "type": "forcePushed"}, {"oid": "74334c2a090b57ad7d5bac41b6d5a09de5600d0d", "url": "https://github.com/netty/netty/commit/74334c2a090b57ad7d5bac41b6d5a09de5600d0d", "message": "Use MacOSDnsServerAddressStreamProvider when on the classpath and we are running on MacOS\n\nMotivation:\n\n939e928312f1099373582f9811817a6226550987 introduced MacOSDnsServerAddressStreamProvider which will ensure the right nameservers are selected when running on MacOS. To ensure this is done automatically on MacOS we should use it by default on these platforms.\n\nModifications:\n\nTry to use MacOSDnsServerAddressStreamProvider when on MacOS via reflection and fallback if not possible\n\nResult:\n\nEnsure the right nameservers are used on MacOS even when a VPN (for example) is used.", "committedDate": "2020-03-04T12:54:06Z", "type": "commit"}, {"oid": "74334c2a090b57ad7d5bac41b6d5a09de5600d0d", "url": "https://github.com/netty/netty/commit/74334c2a090b57ad7d5bac41b6d5a09de5600d0d", "message": "Use MacOSDnsServerAddressStreamProvider when on the classpath and we are running on MacOS\n\nMotivation:\n\n939e928312f1099373582f9811817a6226550987 introduced MacOSDnsServerAddressStreamProvider which will ensure the right nameservers are selected when running on MacOS. To ensure this is done automatically on MacOS we should use it by default on these platforms.\n\nModifications:\n\nTry to use MacOSDnsServerAddressStreamProvider when on MacOS via reflection and fallback if not possible\n\nResult:\n\nEnsure the right nameservers are used on MacOS even when a VPN (for example) is used.", "committedDate": "2020-03-04T12:54:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NDc2Mw==", "url": "https://github.com/netty/netty/pull/10079#discussion_r387884763", "bodyText": "IIUC, there is a chance that users will never hit this path. Therefore, there is no need to load and initialize DnsServerAddressStreamProviders in advance. Can we use DnsServerAddressStreamProviders.unixDefault() here instead of a static constant?", "author": "idelpivnitskiy", "createdAt": "2020-03-04T19:28:25Z", "path": "resolver-dns-native-macos/src/main/java/io/netty/resolver/dns/macos/MacOSDnsServerAddressStreamProvider.java", "diffHunk": "@@ -167,7 +169,7 @@ public DnsServerAddressStream nameServerAddressStream(String hostname) {\n                 if (addresses != null) {\n                     return addresses.stream();\n                 }\n-                return DEFAULT_PROVIDER.nameServerAddressStream(originalHostname);\n+                return UNIX_PROVIDER.nameServerAddressStream(originalHostname);", "originalCommit": "74334c2a090b57ad7d5bac41b6d5a09de5600d0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0Mzk3Nw==", "url": "https://github.com/netty/netty/pull/10079#discussion_r388243977", "bodyText": "sure why not...", "author": "normanmaurer", "createdAt": "2020-03-05T11:47:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NDc2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4ODYyMg==", "url": "https://github.com/netty/netty/pull/10079#discussion_r387888622", "bodyText": "On macOS users may never hit DEFAULT_DNS_SERVER_ADDRESS_STREAM_PROVIDER. Therefore, we may defer initialization until necessary, if we move this constant to another class.", "author": "idelpivnitskiy", "createdAt": "2020-03-04T19:35:17Z", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/DnsServerAddressStreamProviders.java", "diffHunk": "@@ -67,6 +116,21 @@ private DnsServerAddressStreamProviders() {\n      * configuration.\n      */\n     public static DnsServerAddressStreamProvider platformDefault() {\n+        if (STREAM_PROVIDER_CONSTRUCTOR != null) {\n+            try {\n+                return STREAM_PROVIDER_CONSTRUCTOR.newInstance();\n+            } catch (IllegalAccessException e) {\n+                // ignore\n+            } catch (InstantiationException e) {\n+                // ignore\n+            } catch (InvocationTargetException e) {\n+                // ignore\n+            }\n+        }\n+        return unixDefault();\n+    }\n+\n+    public static DnsServerAddressStreamProvider unixDefault() {\n         return DEFAULT_DNS_SERVER_ADDRESS_STREAM_PROVIDER;", "originalCommit": "74334c2a090b57ad7d5bac41b6d5a09de5600d0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0NDI5Mg==", "url": "https://github.com/netty/netty/pull/10079#discussion_r388244292", "bodyText": "yep let me create an inner class.", "author": "normanmaurer", "createdAt": "2020-03-05T11:48:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4ODYyMg=="}], "type": "inlineReview"}, {"oid": "ab2199a228c4c33c1c923e9be9bcef07b5117801", "url": "https://github.com/netty/netty/commit/ab2199a228c4c33c1c923e9be9bcef07b5117801", "message": "Lazy init", "committedDate": "2020-03-05T11:55:33Z", "type": "commit"}, {"oid": "ab2199a228c4c33c1c923e9be9bcef07b5117801", "url": "https://github.com/netty/netty/commit/ab2199a228c4c33c1c923e9be9bcef07b5117801", "message": "Lazy init", "committedDate": "2020-03-05T11:55:33Z", "type": "forcePushed"}]}