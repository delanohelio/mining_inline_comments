{"pr_number": 10008, "pr_title": "ClearTextHttp2ServerUpgradeHandler can be merged with inner PriorKnow\u2026", "pr_createdAt": "2020-02-07T14:39:31Z", "pr_url": "https://github.com/netty/netty/pull/10008", "timeline": [{"oid": "e603ff12800ea515faf02ad8bee79d094d63c921", "url": "https://github.com/netty/netty/commit/e603ff12800ea515faf02ad8bee79d094d63c921", "message": "ClearTextHttp2ServerUpgradeHandler can be merged with inner PriorKnowledgeHandler\n\nMotivation:\n\nClearTextHttp2ServerUpgradeHandler is currently more complex then needed. We can simplify it by directly implement the prior-knowledge logic as part of the handler.\n\nModifications:\n\nMerge inner PriorKnowledgeHandler logic into ClearTextHttp2ServerUpgradeHandler by extending ByteToMessageDecoder directly\n\nResult:\n\nCleaner code and less pipeline operations", "committedDate": "2020-02-07T15:45:01Z", "type": "commit"}, {"oid": "e603ff12800ea515faf02ad8bee79d094d63c921", "url": "https://github.com/netty/netty/commit/e603ff12800ea515faf02ad8bee79d094d63c921", "message": "ClearTextHttp2ServerUpgradeHandler can be merged with inner PriorKnowledgeHandler\n\nMotivation:\n\nClearTextHttp2ServerUpgradeHandler is currently more complex then needed. We can simplify it by directly implement the prior-knowledge logic as part of the handler.\n\nModifications:\n\nMerge inner PriorKnowledgeHandler logic into ClearTextHttp2ServerUpgradeHandler by extending ByteToMessageDecoder directly\n\nResult:\n\nCleaner code and less pipeline operations", "committedDate": "2020-02-07T15:45:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2NDM4Mw==", "url": "https://github.com/netty/netty/pull/10008#discussion_r376464383", "bodyText": "This may or may not conflict with your Netty 5 \"don't sent events from a remove ctx\" patch.", "author": "bryce-anderson", "createdAt": "2020-02-07T15:51:24Z", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/CleartextHttp2ServerUpgradeHandler.java", "diffHunk": "@@ -66,36 +65,33 @@ public CleartextHttp2ServerUpgradeHandler(HttpServerCodec httpServerCodec,\n     @Override\n     public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n         ctx.pipeline()\n-           .addBefore(ctx.name(), null, new PriorKnowledgeHandler())\n-           .addBefore(ctx.name(), null, httpServerCodec)\n-           .replace(this, null, httpServerUpgradeHandler);\n+                .addAfter(ctx.name(), null, httpServerUpgradeHandler)\n+                .addAfter(ctx.name(), null, httpServerCodec);\n     }\n \n     /**\n      * Peek inbound message to determine current connection wants to start HTTP/2\n      * by HTTP upgrade or prior knowledge\n      */\n-    private final class PriorKnowledgeHandler extends ByteToMessageDecoder {\n-        @Override\n-        protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n-            int prefaceLength = CONNECTION_PREFACE.readableBytes();\n-            int bytesRead = Math.min(in.readableBytes(), prefaceLength);\n+    @Override\n+    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n+        int prefaceLength = CONNECTION_PREFACE.readableBytes();\n+        int bytesRead = Math.min(in.readableBytes(), prefaceLength);\n \n-            if (!ByteBufUtil.equals(CONNECTION_PREFACE, CONNECTION_PREFACE.readerIndex(),\n-                                    in, in.readerIndex(), bytesRead)) {\n-                ctx.pipeline().remove(this);\n-            } else if (bytesRead == prefaceLength) {\n-                // Full h2 preface match, removed source codec, using http2 codec to handle\n-                // following network traffic\n-                ctx.pipeline()\n-                   .remove(httpServerCodec)\n-                   .remove(httpServerUpgradeHandler);\n+        if (!ByteBufUtil.equals(CONNECTION_PREFACE, CONNECTION_PREFACE.readerIndex(),\n+                in, in.readerIndex(), bytesRead)) {\n+            ctx.pipeline().remove(this);\n+        } else if (bytesRead == prefaceLength) {\n+            // Full h2 preface match, removed source codec, using http2 codec to handle\n+            // following network traffic\n+            ctx.pipeline()\n+                    .remove(httpServerCodec)\n+                    .remove(httpServerUpgradeHandler);\n \n-                ctx.pipeline().addAfter(ctx.name(), null, http2ServerHandler);\n-                ctx.pipeline().remove(this);\n+            ctx.pipeline().addAfter(ctx.name(), null, http2ServerHandler);\n+            ctx.pipeline().remove(this);\n \n-                ctx.fireUserEventTriggered(PriorKnowledgeUpgradeEvent.INSTANCE);\n-            }\n+            ctx.fireUserEventTriggered(PriorKnowledgeUpgradeEvent.INSTANCE);", "originalCommit": "e603ff12800ea515faf02ad8bee79d094d63c921", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ3MzU1MQ==", "url": "https://github.com/netty/netty/pull/10008#discussion_r376473551", "bodyText": "Yep... we will fix this in netty 5", "author": "normanmaurer", "createdAt": "2020-02-07T16:08:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2NDM4Mw=="}], "type": "inlineReview"}]}