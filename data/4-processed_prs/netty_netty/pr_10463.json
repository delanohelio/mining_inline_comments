{"pr_number": 10463, "pr_title": "Use strerror_r for JNI error messages.", "pr_createdAt": "2020-08-10T10:25:47Z", "pr_url": "https://github.com/netty/netty/pull/10463", "timeline": [{"oid": "6a484ef469cde463ba38315e4f29920abdc2f495", "url": "https://github.com/netty/netty/commit/6a484ef469cde463ba38315e4f29920abdc2f495", "message": "Use `strerror_r` for JNI error messages\n\nMotivation:\nWe previously relied on `strerror`, but this function is unfortunately not thread-safe.\n\nModification:\nThe use of `strerror` has been changed to `strerror_r`, which is thread-safe.\nThis function has a more complicated API, and has portability concerns that needs to be handled.\nThis accounts for the relatively large increase in lines of code.\n\nResult:\nError messages from JNI are now always generated in a thread-safe way.", "committedDate": "2020-08-10T10:20:12Z", "type": "commit"}, {"oid": "d57fa8ad5580e0bd5b382ca943bed3a55a6fa321", "url": "https://github.com/netty/netty/commit/d57fa8ad5580e0bd5b382ca943bed3a55a6fa321", "message": "Don't pretend to handle allocation failures when building JNI error messages\n\nMotivation:\nThe code gave the impression that `calloc` allocation failures were handled, when in reality the\ncode would crash. It's better to not pretend to handle the allocation failure.\n\nModification:\nRemove the allocation failure error handling, since it just marginally delayed a crash.\n\nResult:\nWithout the error handling, the code will now crash on allocation failure, in a location\nthat makes it more clear what happened.", "committedDate": "2020-08-10T10:20:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgyODA2Mw==", "url": "https://github.com/netty/netty/pull/10463#discussion_r467828063", "bodyText": "do we need to check for tmp == NULL ?\nhttps://linux.die.net/man/3/strerror_r", "author": "normanmaurer", "createdAt": "2020-08-10T10:59:18Z", "path": "transport-native-unix-common/src/main/c/netty_unix_errors.c", "diffHunk": "@@ -29,12 +29,59 @@ static jclass portUnreachableExceptionClass = NULL;\n static jclass closedChannelExceptionClass = NULL;\n static jmethodID closedChannelExceptionMethodId = NULL;\n \n+/**\n+ Our `strerror_r` wrapper makes sure that the function is XSI compliant,\n+ even on platforms where the GNU variant is exposed.\n+ Note: `strerrbuf` must be initialized to all zeros prior to calling this function.\n+ XSI or GNU functions do not have such a requirement, but our wrappers do.\n+ */\n+#if (_POSIX_C_SOURCE >= 200112L || _XOPEN_SOURCE >= 600) && ! _GNU_SOURCE\n+    static inline int strerror_r_xsi(int errnum, char *strerrbuf, size_t buflen) {\n+        return strerror_r(errnum, strerrbuf, buflen);\n+    }\n+#else\n+    static inline int strerror_r_xsi(int errnum, char *strerrbuf, size_t buflen) {\n+        char* tmp = strerror_r(errnum, strerrbuf, buflen);", "originalCommit": "d57fa8ad5580e0bd5b382ca943bed3a55a6fa321", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg2NTc5Ng==", "url": "https://github.com/netty/netty/pull/10463#discussion_r467865796", "bodyText": "I've look at both https://linux.die.net/man/3/strerror_r and https://man7.org/linux/man-pages/man3/strerror.3.html and I don't see a case where the GNU specific strerror_r would return NULL. It either allocates a new string, or references a static string.", "author": "chrisvest", "createdAt": "2020-08-10T12:22:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgyODA2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkyMjk2Mg==", "url": "https://github.com/netty/netty/pull/10463#discussion_r467922962", "bodyText": "ok", "author": "normanmaurer", "createdAt": "2020-08-10T13:58:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgyODA2Mw=="}], "type": "inlineReview"}]}