{"pr_number": 10630, "pr_title": "Fix native image build on modern GraalVM versions for the cases when \u2026", "pr_createdAt": "2020-10-01T17:21:47Z", "pr_url": "https://github.com/netty/netty/pull/10630", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0MDU0OA==", "url": "https://github.com/netty/netty/pull/10630#discussion_r498440548", "bodyText": "NetUtilInitializations", "author": "normanmaurer", "createdAt": "2020-10-01T18:32:48Z", "path": "common/src/main/java/io/netty/util/NetUtilInitializations.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.util;\n+\n+import io.netty.util.internal.PlatformDependent;\n+import io.netty.util.internal.SocketUtils;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+import java.net.NetworkInterface;\n+import java.net.SocketException;\n+import java.util.ArrayList;\n+import java.util.Enumeration;\n+import java.util.List;\n+\n+final class NetUtilInitializations {\n+    /**\n+     * The logger being used by this class\n+     */\n+    private static final InternalLogger logger = InternalLoggerFactory.getInstance(NetUtil.class);", "originalCommit": "fcd5022d6e6664f43fce2790b0d6b7d571f5c4a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyODEwMQ==", "url": "https://github.com/netty/netty/pull/10630#discussion_r498928101", "bodyText": "Fixed", "author": "rpuch", "createdAt": "2020-10-02T16:34:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0MDU0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0MDgyMQ==", "url": "https://github.com/netty/netty/pull/10630#discussion_r498440821", "bodyText": "static final", "author": "normanmaurer", "createdAt": "2020-10-01T18:33:19Z", "path": "common/src/main/java/io/netty/util/NetUtilInitializations.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.util;\n+\n+import io.netty.util.internal.PlatformDependent;\n+import io.netty.util.internal.SocketUtils;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+import java.net.NetworkInterface;\n+import java.net.SocketException;\n+import java.util.ArrayList;\n+import java.util.Enumeration;\n+import java.util.List;\n+\n+final class NetUtilInitializations {\n+    /**\n+     * The logger being used by this class\n+     */\n+    private static final InternalLogger logger = InternalLoggerFactory.getInstance(NetUtil.class);\n+\n+    private NetUtilInitializations() {\n+    }\n+\n+    static Inet4Address createLocalhost4() {\n+        byte[] LOCALHOST4_BYTES = {127, 0, 0, 1};\n+\n+        Inet4Address localhost4 = null;\n+        try {\n+            localhost4 = (Inet4Address) InetAddress.getByAddress(\"localhost\", LOCALHOST4_BYTES);\n+        } catch (Exception e) {\n+            // We should not get here as long as the length of the address is correct.\n+            PlatformDependent.throwException(e);\n+        }\n+\n+        return localhost4;\n+    }\n+\n+    static Inet6Address createLocalhost6() {\n+        byte[] LOCALHOST6_BYTES = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1};\n+\n+        Inet6Address localhost6 = null;\n+        try {\n+            localhost6 = (Inet6Address) InetAddress.getByAddress(\"localhost\", LOCALHOST6_BYTES);\n+        } catch (Exception e) {\n+            // We should not get here as long as the length of the address is correct.\n+            PlatformDependent.throwException(e);\n+        }\n+\n+        return localhost6;\n+    }\n+\n+    static NetworkIfaceAndInetAddress determineLoopback(Inet4Address localhost4, Inet6Address localhost6) {\n+        // Retrieve the list of available network interfaces.\n+        List<NetworkInterface> ifaces = new ArrayList<NetworkInterface>();\n+        try {\n+            Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();\n+            if (interfaces != null) {\n+                while (interfaces.hasMoreElements()) {\n+                    NetworkInterface iface = interfaces.nextElement();\n+                    // Use the interface with proper INET addresses only.\n+                    if (SocketUtils.addressesFromNetworkInterface(iface).hasMoreElements()) {\n+                        ifaces.add(iface);\n+                    }\n+                }\n+            }\n+        } catch (SocketException e) {\n+            logger.warn(\"Failed to retrieve the list of available network interfaces\", e);\n+        }\n+\n+        // Find the first loopback interface available from its INET address (127.0.0.1 or ::1)\n+        // Note that we do not use NetworkInterface.isLoopback() in the first place because it takes long time\n+        // on a certain environment. (e.g. Windows with -Djava.net.preferIPv4Stack=true)\n+        NetworkInterface loopbackIface = null;\n+        InetAddress loopbackAddr = null;\n+        loop: for (NetworkInterface iface: ifaces) {\n+            for (Enumeration<InetAddress> i = SocketUtils.addressesFromNetworkInterface(iface); i.hasMoreElements();) {\n+                InetAddress addr = i.nextElement();\n+                if (addr.isLoopbackAddress()) {\n+                    // Found\n+                    loopbackIface = iface;\n+                    loopbackAddr = addr;\n+                    break loop;\n+                }\n+            }\n+        }\n+\n+        // If failed to find the loopback interface from its INET address, fall back to isLoopback().\n+        if (loopbackIface == null) {\n+            try {\n+                for (NetworkInterface iface: ifaces) {\n+                    if (iface.isLoopback()) {\n+                        Enumeration<InetAddress> i = SocketUtils.addressesFromNetworkInterface(iface);\n+                        if (i.hasMoreElements()) {\n+                            // Found the one with INET address.\n+                            loopbackIface = iface;\n+                            loopbackAddr = i.nextElement();\n+                            break;\n+                        }\n+                    }\n+                }\n+\n+                if (loopbackIface == null) {\n+                    logger.warn(\"Failed to find the loopback interface\");\n+                }\n+            } catch (SocketException e) {\n+                logger.warn(\"Failed to find the loopback interface\", e);\n+            }\n+        }\n+\n+        if (loopbackIface != null) {\n+            // Found the loopback interface with an INET address.\n+            logger.debug(\n+                    \"Loopback interface: {} ({}, {})\",\n+                    loopbackIface.getName(), loopbackIface.getDisplayName(), loopbackAddr.getHostAddress());\n+        } else {\n+            // Could not find the loopback interface, but we can't leave LOCALHOST as null.\n+            // Use LOCALHOST6 or LOCALHOST4, preferably the IPv6 one.\n+            if (loopbackAddr == null) {\n+                try {\n+                    if (NetworkInterface.getByInetAddress(localhost6) != null) {\n+                        logger.debug(\"Using hard-coded IPv6 localhost address: {}\", localhost6);\n+                        loopbackAddr = localhost6;\n+                    }\n+                } catch (Exception e) {\n+                    // Ignore\n+                } finally {\n+                    if (loopbackAddr == null) {\n+                        logger.debug(\"Using hard-coded IPv4 localhost address: {}\", localhost4);\n+                        loopbackAddr = localhost4;\n+                    }\n+                }\n+            }\n+        }\n+\n+        return new NetworkIfaceAndInetAddress(loopbackIface, loopbackAddr);\n+    }\n+\n+    static class NetworkIfaceAndInetAddress {", "originalCommit": "fcd5022d6e6664f43fce2790b0d6b7d571f5c4a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyODE3MQ==", "url": "https://github.com/netty/netty/pull/10630#discussion_r498928171", "bodyText": "Fixed", "author": "rpuch", "createdAt": "2020-10-02T16:34:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0MDgyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0MDk4Nw==", "url": "https://github.com/netty/netty/pull/10630#discussion_r498440987", "bodyText": "remove get prefix as we usually not use these", "author": "normanmaurer", "createdAt": "2020-10-01T18:33:39Z", "path": "common/src/main/java/io/netty/util/NetUtilInitializations.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.util;\n+\n+import io.netty.util.internal.PlatformDependent;\n+import io.netty.util.internal.SocketUtils;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+import java.net.NetworkInterface;\n+import java.net.SocketException;\n+import java.util.ArrayList;\n+import java.util.Enumeration;\n+import java.util.List;\n+\n+final class NetUtilInitializations {\n+    /**\n+     * The logger being used by this class\n+     */\n+    private static final InternalLogger logger = InternalLoggerFactory.getInstance(NetUtil.class);\n+\n+    private NetUtilInitializations() {\n+    }\n+\n+    static Inet4Address createLocalhost4() {\n+        byte[] LOCALHOST4_BYTES = {127, 0, 0, 1};\n+\n+        Inet4Address localhost4 = null;\n+        try {\n+            localhost4 = (Inet4Address) InetAddress.getByAddress(\"localhost\", LOCALHOST4_BYTES);\n+        } catch (Exception e) {\n+            // We should not get here as long as the length of the address is correct.\n+            PlatformDependent.throwException(e);\n+        }\n+\n+        return localhost4;\n+    }\n+\n+    static Inet6Address createLocalhost6() {\n+        byte[] LOCALHOST6_BYTES = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1};\n+\n+        Inet6Address localhost6 = null;\n+        try {\n+            localhost6 = (Inet6Address) InetAddress.getByAddress(\"localhost\", LOCALHOST6_BYTES);\n+        } catch (Exception e) {\n+            // We should not get here as long as the length of the address is correct.\n+            PlatformDependent.throwException(e);\n+        }\n+\n+        return localhost6;\n+    }\n+\n+    static NetworkIfaceAndInetAddress determineLoopback(Inet4Address localhost4, Inet6Address localhost6) {\n+        // Retrieve the list of available network interfaces.\n+        List<NetworkInterface> ifaces = new ArrayList<NetworkInterface>();\n+        try {\n+            Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();\n+            if (interfaces != null) {\n+                while (interfaces.hasMoreElements()) {\n+                    NetworkInterface iface = interfaces.nextElement();\n+                    // Use the interface with proper INET addresses only.\n+                    if (SocketUtils.addressesFromNetworkInterface(iface).hasMoreElements()) {\n+                        ifaces.add(iface);\n+                    }\n+                }\n+            }\n+        } catch (SocketException e) {\n+            logger.warn(\"Failed to retrieve the list of available network interfaces\", e);\n+        }\n+\n+        // Find the first loopback interface available from its INET address (127.0.0.1 or ::1)\n+        // Note that we do not use NetworkInterface.isLoopback() in the first place because it takes long time\n+        // on a certain environment. (e.g. Windows with -Djava.net.preferIPv4Stack=true)\n+        NetworkInterface loopbackIface = null;\n+        InetAddress loopbackAddr = null;\n+        loop: for (NetworkInterface iface: ifaces) {\n+            for (Enumeration<InetAddress> i = SocketUtils.addressesFromNetworkInterface(iface); i.hasMoreElements();) {\n+                InetAddress addr = i.nextElement();\n+                if (addr.isLoopbackAddress()) {\n+                    // Found\n+                    loopbackIface = iface;\n+                    loopbackAddr = addr;\n+                    break loop;\n+                }\n+            }\n+        }\n+\n+        // If failed to find the loopback interface from its INET address, fall back to isLoopback().\n+        if (loopbackIface == null) {\n+            try {\n+                for (NetworkInterface iface: ifaces) {\n+                    if (iface.isLoopback()) {\n+                        Enumeration<InetAddress> i = SocketUtils.addressesFromNetworkInterface(iface);\n+                        if (i.hasMoreElements()) {\n+                            // Found the one with INET address.\n+                            loopbackIface = iface;\n+                            loopbackAddr = i.nextElement();\n+                            break;\n+                        }\n+                    }\n+                }\n+\n+                if (loopbackIface == null) {\n+                    logger.warn(\"Failed to find the loopback interface\");\n+                }\n+            } catch (SocketException e) {\n+                logger.warn(\"Failed to find the loopback interface\", e);\n+            }\n+        }\n+\n+        if (loopbackIface != null) {\n+            // Found the loopback interface with an INET address.\n+            logger.debug(\n+                    \"Loopback interface: {} ({}, {})\",\n+                    loopbackIface.getName(), loopbackIface.getDisplayName(), loopbackAddr.getHostAddress());\n+        } else {\n+            // Could not find the loopback interface, but we can't leave LOCALHOST as null.\n+            // Use LOCALHOST6 or LOCALHOST4, preferably the IPv6 one.\n+            if (loopbackAddr == null) {\n+                try {\n+                    if (NetworkInterface.getByInetAddress(localhost6) != null) {\n+                        logger.debug(\"Using hard-coded IPv6 localhost address: {}\", localhost6);\n+                        loopbackAddr = localhost6;\n+                    }\n+                } catch (Exception e) {\n+                    // Ignore\n+                } finally {\n+                    if (loopbackAddr == null) {\n+                        logger.debug(\"Using hard-coded IPv4 localhost address: {}\", localhost4);\n+                        loopbackAddr = localhost4;\n+                    }\n+                }\n+            }\n+        }\n+\n+        return new NetworkIfaceAndInetAddress(loopbackIface, loopbackAddr);\n+    }\n+\n+    static class NetworkIfaceAndInetAddress {\n+        private final NetworkInterface iface;\n+        private final InetAddress address;\n+\n+        NetworkIfaceAndInetAddress(NetworkInterface iface, InetAddress address) {\n+            this.iface = iface;\n+            this.address = address;\n+        }\n+\n+        public NetworkInterface getIface() {\n+            return iface;\n+        }\n+\n+        public InetAddress getAddress() {", "originalCommit": "fcd5022d6e6664f43fce2790b0d6b7d571f5c4a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyODIyMA==", "url": "https://github.com/netty/netty/pull/10630#discussion_r498928220", "bodyText": "Fixed", "author": "rpuch", "createdAt": "2020-10-02T16:34:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0MDk4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0MTE3OA==", "url": "https://github.com/netty/netty/pull/10630#discussion_r498441178", "bodyText": "final", "author": "normanmaurer", "createdAt": "2020-10-01T18:34:04Z", "path": "common/src/main/java/io/netty/util/NetUtilSubstitutions.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.util;\n+\n+import com.oracle.svm.core.annotate.Alias;\n+import com.oracle.svm.core.annotate.InjectAccessors;\n+import com.oracle.svm.core.annotate.TargetClass;\n+\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+\n+@TargetClass(NetUtil.class)\n+final class NetUtilSubstitutions {\n+    private NetUtilSubstitutions() {\n+    }\n+\n+    @Alias\n+    @InjectAccessors(NetUtilLocalhost4Accessor.class)\n+    public static Inet4Address LOCALHOST4;\n+\n+    @Alias\n+    @InjectAccessors(NetUtilLocalhost6Accessor.class)\n+    public static Inet6Address LOCALHOST6;\n+\n+    @Alias\n+    @InjectAccessors(NetUtilLocalhostAccessor.class)\n+    public static InetAddress LOCALHOST;\n+\n+    private static class NetUtilLocalhost4Accessor {", "originalCommit": "fcd5022d6e6664f43fce2790b0d6b7d571f5c4a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyODI2Nw==", "url": "https://github.com/netty/netty/pull/10630#discussion_r498928267", "bodyText": "Fixed", "author": "rpuch", "createdAt": "2020-10-02T16:34:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0MTE3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0MTI0MA==", "url": "https://github.com/netty/netty/pull/10630#discussion_r498441240", "bodyText": "final", "author": "normanmaurer", "createdAt": "2020-10-01T18:34:11Z", "path": "common/src/main/java/io/netty/util/NetUtilSubstitutions.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.util;\n+\n+import com.oracle.svm.core.annotate.Alias;\n+import com.oracle.svm.core.annotate.InjectAccessors;\n+import com.oracle.svm.core.annotate.TargetClass;\n+\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+\n+@TargetClass(NetUtil.class)\n+final class NetUtilSubstitutions {\n+    private NetUtilSubstitutions() {\n+    }\n+\n+    @Alias\n+    @InjectAccessors(NetUtilLocalhost4Accessor.class)\n+    public static Inet4Address LOCALHOST4;\n+\n+    @Alias\n+    @InjectAccessors(NetUtilLocalhost6Accessor.class)\n+    public static Inet6Address LOCALHOST6;\n+\n+    @Alias\n+    @InjectAccessors(NetUtilLocalhostAccessor.class)\n+    public static InetAddress LOCALHOST;\n+\n+    private static class NetUtilLocalhost4Accessor {\n+        static Inet4Address get() {\n+            // using https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom\n+            return NetUtilLocalhost4LazyHolder.LOCALHOST4;\n+        }\n+    }\n+\n+    private static class NetUtilLocalhost4LazyHolder {", "originalCommit": "fcd5022d6e6664f43fce2790b0d6b7d571f5c4a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyODMxNg==", "url": "https://github.com/netty/netty/pull/10630#discussion_r498928316", "bodyText": "Fixed", "author": "rpuch", "createdAt": "2020-10-02T16:34:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0MTI0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0MTMwMA==", "url": "https://github.com/netty/netty/pull/10630#discussion_r498441300", "bodyText": "final", "author": "normanmaurer", "createdAt": "2020-10-01T18:34:19Z", "path": "common/src/main/java/io/netty/util/NetUtilSubstitutions.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.util;\n+\n+import com.oracle.svm.core.annotate.Alias;\n+import com.oracle.svm.core.annotate.InjectAccessors;\n+import com.oracle.svm.core.annotate.TargetClass;\n+\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+\n+@TargetClass(NetUtil.class)\n+final class NetUtilSubstitutions {\n+    private NetUtilSubstitutions() {\n+    }\n+\n+    @Alias\n+    @InjectAccessors(NetUtilLocalhost4Accessor.class)\n+    public static Inet4Address LOCALHOST4;\n+\n+    @Alias\n+    @InjectAccessors(NetUtilLocalhost6Accessor.class)\n+    public static Inet6Address LOCALHOST6;\n+\n+    @Alias\n+    @InjectAccessors(NetUtilLocalhostAccessor.class)\n+    public static InetAddress LOCALHOST;\n+\n+    private static class NetUtilLocalhost4Accessor {\n+        static Inet4Address get() {\n+            // using https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom\n+            return NetUtilLocalhost4LazyHolder.LOCALHOST4;\n+        }\n+    }\n+\n+    private static class NetUtilLocalhost4LazyHolder {\n+        private static final Inet4Address LOCALHOST4 = NetUtilInitializations.createLocalhost4();\n+    }\n+\n+    private static class NetUtilLocalhost6Accessor {", "originalCommit": "fcd5022d6e6664f43fce2790b0d6b7d571f5c4a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyODM0NQ==", "url": "https://github.com/netty/netty/pull/10630#discussion_r498928345", "bodyText": "Fixed", "author": "rpuch", "createdAt": "2020-10-02T16:34:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0MTMwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0MTM1MQ==", "url": "https://github.com/netty/netty/pull/10630#discussion_r498441351", "bodyText": "final", "author": "normanmaurer", "createdAt": "2020-10-01T18:34:26Z", "path": "common/src/main/java/io/netty/util/NetUtilSubstitutions.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.util;\n+\n+import com.oracle.svm.core.annotate.Alias;\n+import com.oracle.svm.core.annotate.InjectAccessors;\n+import com.oracle.svm.core.annotate.TargetClass;\n+\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+\n+@TargetClass(NetUtil.class)\n+final class NetUtilSubstitutions {\n+    private NetUtilSubstitutions() {\n+    }\n+\n+    @Alias\n+    @InjectAccessors(NetUtilLocalhost4Accessor.class)\n+    public static Inet4Address LOCALHOST4;\n+\n+    @Alias\n+    @InjectAccessors(NetUtilLocalhost6Accessor.class)\n+    public static Inet6Address LOCALHOST6;\n+\n+    @Alias\n+    @InjectAccessors(NetUtilLocalhostAccessor.class)\n+    public static InetAddress LOCALHOST;\n+\n+    private static class NetUtilLocalhost4Accessor {\n+        static Inet4Address get() {\n+            // using https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom\n+            return NetUtilLocalhost4LazyHolder.LOCALHOST4;\n+        }\n+    }\n+\n+    private static class NetUtilLocalhost4LazyHolder {\n+        private static final Inet4Address LOCALHOST4 = NetUtilInitializations.createLocalhost4();\n+    }\n+\n+    private static class NetUtilLocalhost6Accessor {\n+        static Inet6Address get() {\n+            // using https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom\n+            return NetUtilLocalhost6LazyHolder.LOCALHOST6;\n+        }\n+    }\n+\n+    private static class NetUtilLocalhost6LazyHolder {", "originalCommit": "fcd5022d6e6664f43fce2790b0d6b7d571f5c4a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyODM3OA==", "url": "https://github.com/netty/netty/pull/10630#discussion_r498928378", "bodyText": "Fixed", "author": "rpuch", "createdAt": "2020-10-02T16:34:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0MTM1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0MTQ1Mw==", "url": "https://github.com/netty/netty/pull/10630#discussion_r498441453", "bodyText": "final", "author": "normanmaurer", "createdAt": "2020-10-01T18:34:38Z", "path": "common/src/main/java/io/netty/util/NetUtilSubstitutions.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.util;\n+\n+import com.oracle.svm.core.annotate.Alias;\n+import com.oracle.svm.core.annotate.InjectAccessors;\n+import com.oracle.svm.core.annotate.TargetClass;\n+\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+\n+@TargetClass(NetUtil.class)\n+final class NetUtilSubstitutions {\n+    private NetUtilSubstitutions() {\n+    }\n+\n+    @Alias\n+    @InjectAccessors(NetUtilLocalhost4Accessor.class)\n+    public static Inet4Address LOCALHOST4;\n+\n+    @Alias\n+    @InjectAccessors(NetUtilLocalhost6Accessor.class)\n+    public static Inet6Address LOCALHOST6;\n+\n+    @Alias\n+    @InjectAccessors(NetUtilLocalhostAccessor.class)\n+    public static InetAddress LOCALHOST;\n+\n+    private static class NetUtilLocalhost4Accessor {\n+        static Inet4Address get() {\n+            // using https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom\n+            return NetUtilLocalhost4LazyHolder.LOCALHOST4;\n+        }\n+    }\n+\n+    private static class NetUtilLocalhost4LazyHolder {\n+        private static final Inet4Address LOCALHOST4 = NetUtilInitializations.createLocalhost4();\n+    }\n+\n+    private static class NetUtilLocalhost6Accessor {\n+        static Inet6Address get() {\n+            // using https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom\n+            return NetUtilLocalhost6LazyHolder.LOCALHOST6;\n+        }\n+    }\n+\n+    private static class NetUtilLocalhost6LazyHolder {\n+        private static final Inet6Address LOCALHOST6 = NetUtilInitializations.createLocalhost6();\n+    }\n+\n+    private static class NetUtilLocalhostAccessor {", "originalCommit": "fcd5022d6e6664f43fce2790b0d6b7d571f5c4a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyODQyMA==", "url": "https://github.com/netty/netty/pull/10630#discussion_r498928420", "bodyText": "Fixed", "author": "rpuch", "createdAt": "2020-10-02T16:34:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0MTQ1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0MTUyMA==", "url": "https://github.com/netty/netty/pull/10630#discussion_r498441520", "bodyText": "final", "author": "normanmaurer", "createdAt": "2020-10-01T18:34:45Z", "path": "common/src/main/java/io/netty/util/NetUtilSubstitutions.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.util;\n+\n+import com.oracle.svm.core.annotate.Alias;\n+import com.oracle.svm.core.annotate.InjectAccessors;\n+import com.oracle.svm.core.annotate.TargetClass;\n+\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+\n+@TargetClass(NetUtil.class)\n+final class NetUtilSubstitutions {\n+    private NetUtilSubstitutions() {\n+    }\n+\n+    @Alias\n+    @InjectAccessors(NetUtilLocalhost4Accessor.class)\n+    public static Inet4Address LOCALHOST4;\n+\n+    @Alias\n+    @InjectAccessors(NetUtilLocalhost6Accessor.class)\n+    public static Inet6Address LOCALHOST6;\n+\n+    @Alias\n+    @InjectAccessors(NetUtilLocalhostAccessor.class)\n+    public static InetAddress LOCALHOST;\n+\n+    private static class NetUtilLocalhost4Accessor {\n+        static Inet4Address get() {\n+            // using https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom\n+            return NetUtilLocalhost4LazyHolder.LOCALHOST4;\n+        }\n+    }\n+\n+    private static class NetUtilLocalhost4LazyHolder {\n+        private static final Inet4Address LOCALHOST4 = NetUtilInitializations.createLocalhost4();\n+    }\n+\n+    private static class NetUtilLocalhost6Accessor {\n+        static Inet6Address get() {\n+            // using https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom\n+            return NetUtilLocalhost6LazyHolder.LOCALHOST6;\n+        }\n+    }\n+\n+    private static class NetUtilLocalhost6LazyHolder {\n+        private static final Inet6Address LOCALHOST6 = NetUtilInitializations.createLocalhost6();\n+    }\n+\n+    private static class NetUtilLocalhostAccessor {\n+        static InetAddress get() {\n+            // using https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom\n+            return NetUtilLocalhostLazyHolder.LOCALHOST;\n+        }\n+    }\n+\n+    private static class NetUtilLocalhostLazyHolder {", "originalCommit": "fcd5022d6e6664f43fce2790b0d6b7d571f5c4a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyODQ1Ng==", "url": "https://github.com/netty/netty/pull/10630#discussion_r498928456", "bodyText": "Fixed", "author": "rpuch", "createdAt": "2020-10-02T16:34:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0MTUyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0MTYzNg==", "url": "https://github.com/netty/netty/pull/10630#discussion_r498441636", "bodyText": "2020", "author": "normanmaurer", "createdAt": "2020-10-01T18:34:58Z", "path": "testsuite-native-image-client/pom.xml", "diffHunk": "@@ -0,0 +1,106 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2017 The Netty Project", "originalCommit": "fcd5022d6e6664f43fce2790b0d6b7d571f5c4a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyODQ5NA==", "url": "https://github.com/netty/netty/pull/10630#discussion_r498928494", "bodyText": "Fixed", "author": "rpuch", "createdAt": "2020-10-02T16:34:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0MTYzNg=="}], "type": "inlineReview"}, {"oid": "1fc353405e8c61fd5c64b2dca50aa491e1449b87", "url": "https://github.com/netty/netty/commit/1fc353405e8c61fd5c64b2dca50aa491e1449b87", "message": "Fix native image build on modern GraalVM versions for the cases when the program uses netty-dns\n\nMotivation:\n\nSince GraalVM version 19.3.0, instances of java.net.InetAddress (and its subclasses Inet4Address and Inet6Address) are not allowed in native image heap (that is, they cannot be stored in static fields of classes initialized at build time or be reachable through static fields of such classes). When building a native image, it makes sense to initialize at build time as many classes as possible.\nBut some fields of some classes in Netty (for example, NetUtil.LOCALHOST4) contain InetAddress instances. If a program is using code path that makes it possible to reach such fields at build time initialization, it becomes impossible to build a native image initializing core Netty classes initialized at runtime. An example of such a program is a client that uses netty-dns.\n\nModifications:\n\n- Update GraalVM version to the recent 20.2.0\n- Add netty-testsuite-native-image-client Maven module to test that such an example program can be built after the corresponding fixes\n- Add native-image.properties to resolver-dns module to move initialization of some classes to runtime (some of them are parsing configuration during initialization, so it makes no sense to initialize them at build time; for others, it's needed to avoid InetAddress reachability at build time)\n- Add substitutions for NetUtil.LOCALHOST4, NetUtil.LOCALHOST6 and NetUtil.LOCALHOST to overcome the InetAddress-related prohibition\n- Extract some initialization code from NetUtil to NetUtilInitializations to allow it to be used by the substitutions\n\nResult:\n\nA client program using netty-dns with --initialize-at-build-time=io.netty builds successfully", "committedDate": "2020-10-02T16:27:36Z", "type": "forcePushed"}, {"oid": "30dadca96013c735ac0ad8b82196f0d7667d161e", "url": "https://github.com/netty/netty/commit/30dadca96013c735ac0ad8b82196f0d7667d161e", "message": "Fix native image build on modern GraalVM versions for the cases when the program uses netty-dns\n\nMotivation:\n\nSince GraalVM version 19.3.0, instances of java.net.InetAddress (and its subclasses Inet4Address and Inet6Address) are not allowed in native image heap (that is, they cannot be stored in static fields of classes initialized at build time or be reachable through static fields of such classes). When building a native image, it makes sense to initialize at build time as many classes as possible.\nBut some fields of some classes in Netty (for example, NetUtil.LOCALHOST4) contain InetAddress instances. If a program is using code path that makes it possible to reach such fields at build time initialization, it becomes impossible to build a native image initializing core Netty classes initialized at runtime. An example of such a program is a client that uses netty-dns.\n\nModifications:\n\n- Add netty-testsuite-native-image-client Maven module to test that such an example program can be built after the corresponding fixes\n- Add native-image.properties to resolver-dns module to move initialization of some classes to runtime (some of them are parsing configuration during initialization, so it makes no sense to initialize them at build time; for others, it's needed to avoid InetAddress reachability at build time)\n- Add substitutions for NetUtil.LOCALHOST4, NetUtil.LOCALHOST6 and NetUtil.LOCALHOST to overcome the InetAddress-related prohibition\n- Extract some initialization code from NetUtil to NetUtilInitializations to allow it to be used by the substitutions\n\nResult:\n\nA client program using netty-dns with --initialize-at-build-time=io.netty builds successfully", "committedDate": "2020-10-18T10:25:40Z", "type": "forcePushed"}, {"oid": "c604775bcf7e227c99ee75aee39e14fde3a419e9", "url": "https://github.com/netty/netty/commit/c604775bcf7e227c99ee75aee39e14fde3a419e9", "message": "Fix native image build on modern GraalVM versions for the cases when the program uses netty-dns\n\nMotivation:\n\nSince GraalVM version 19.3.0, instances of java.net.InetAddress (and its subclasses Inet4Address and Inet6Address) are not allowed in native image heap (that is, they cannot be stored in static fields of classes initialized at build time or be reachable through static fields of such classes). When building a native image, it makes sense to initialize at build time as many classes as possible.\nBut some fields of some classes in Netty (for example, NetUtil.LOCALHOST4) contain InetAddress instances. If a program is using code path that makes it possible to reach such fields at build time initialization, it becomes impossible to build a native image initializing core Netty classes initialized at runtime. An example of such a program is a client that uses netty-dns.\n\nModifications:\n\n- Add netty-testsuite-native-image-client Maven module to test that such an example program can be built after the corresponding fixes\n- Add native-image.properties to resolver-dns module to move initialization of some classes to runtime (some of them are parsing configuration during initialization, so it makes no sense to initialize them at build time; for others, it's needed to avoid InetAddress reachability at build time)\n- Add substitutions for NetUtil.LOCALHOST4, NetUtil.LOCALHOST6 and NetUtil.LOCALHOST to overcome the InetAddress-related prohibition\n- Extract some initialization code from NetUtil to NetUtilInitializations to allow it to be used by the substitutions\n\nResult:\n\nA client program using netty-dns with --initialize-at-build-time=io.netty builds successfully", "committedDate": "2020-10-18T12:15:06Z", "type": "forcePushed"}, {"oid": "4332452a1d552c46a89ae3f6966bd9d322611a02", "url": "https://github.com/netty/netty/commit/4332452a1d552c46a89ae3f6966bd9d322611a02", "message": "Fix native image build on modern GraalVM versions for the cases when the program uses netty-dns\n\nMotivation:\n\nSince GraalVM version 19.3.0, instances of java.net.InetAddress (and its subclasses Inet4Address and Inet6Address) are not allowed in native image heap (that is, they cannot be stored in static fields of classes initialized at build time or be reachable through static fields of such classes). When building a native image, it makes sense to initialize at build time as many classes as possible.\nBut some fields of some classes in Netty (for example, NetUtil.LOCALHOST4) contain InetAddress instances. If a program is using code path that makes it possible to reach such fields at build time initialization, it becomes impossible to build a native image initializing core Netty classes initialized at runtime. An example of such a program is a client that uses netty-dns.\n\nModifications:\n\n- Add netty-testsuite-native-image-client Maven module to test that such an example program can be built after the corresponding fixes\n- Add native-image.properties to resolver-dns module to move initialization of some classes to runtime (some of them are parsing configuration during initialization, so it makes no sense to initialize them at build time; for others, it's needed to avoid InetAddress reachability at build time)\n- Add substitutions for NetUtil.LOCALHOST4, NetUtil.LOCALHOST6 and NetUtil.LOCALHOST to overcome the InetAddress-related prohibition\n- Extract some initialization code from NetUtil to NetUtilInitializations to allow it to be used by the substitutions\n\nResult:\n\nA client program using netty-dns with --initialize-at-build-time=io.netty builds successfully", "committedDate": "2020-10-18T12:18:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU3MjE4OA==", "url": "https://github.com/netty/netty/pull/10630#discussion_r511572188", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #   http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n            #   https://www.apache.org/licenses/LICENSE-2.0", "author": "normanmaurer", "createdAt": "2020-10-25T09:39:10Z", "path": "resolver-dns/src/main/resources/META-INF/native-image/io.netty/resolver-dns/native-image.properties", "diffHunk": "@@ -0,0 +1,18 @@\n+# Copyright 2020 The Netty Project\n+#\n+# The Netty Project licenses this file to you under the Apache License,\n+# version 2.0 (the \"License\"); you may not use this file except in compliance\n+# with the License. You may obtain a copy of the License at:\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0", "originalCommit": "4332452a1d552c46a89ae3f6966bd9d322611a02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU4MDk1Ng==", "url": "https://github.com/netty/netty/pull/10630#discussion_r511580956", "bodyText": "Fixed", "author": "rpuch", "createdAt": "2020-10-25T11:02:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU3MjE4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU3MjIwOQ==", "url": "https://github.com/netty/netty/pull/10630#discussion_r511572209", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              ~   http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n              ~   https://www.apache.org/licenses/LICENSE-2.0", "author": "normanmaurer", "createdAt": "2020-10-25T09:39:24Z", "path": "testsuite-native-image-client/pom.xml", "diffHunk": "@@ -0,0 +1,106 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 The Netty Project\n+  ~\n+  ~ The Netty Project licenses this file to you under the Apache License,\n+  ~ version 2.0 (the \"License\"); you may not use this file except in compliance\n+  ~ with the License. You may obtain a copy of the License at:\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0", "originalCommit": "4332452a1d552c46a89ae3f6966bd9d322611a02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU4MDk2MQ==", "url": "https://github.com/netty/netty/pull/10630#discussion_r511580961", "bodyText": "Fixed", "author": "rpuch", "createdAt": "2020-10-25T11:03:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU3MjIwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU3MjIyNw==", "url": "https://github.com/netty/netty/pull/10630#discussion_r511572227", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *   https://www.apache.org/licenses/LICENSE-2.0", "author": "normanmaurer", "createdAt": "2020-10-25T09:39:39Z", "path": "testsuite-native-image-client/src/main/java/io/netty/testsuite/svm/client/DnsNativeClient.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0", "originalCommit": "4332452a1d552c46a89ae3f6966bd9d322611a02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU4MDk3Nw==", "url": "https://github.com/netty/netty/pull/10630#discussion_r511580977", "bodyText": "Fixed", "author": "rpuch", "createdAt": "2020-10-25T11:03:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU3MjIyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU3MjI2NQ==", "url": "https://github.com/netty/netty/pull/10630#discussion_r511572265", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *   https://www.apache.org/licenses/LICENSE-2.0", "author": "normanmaurer", "createdAt": "2020-10-25T09:39:58Z", "path": "testsuite-native-image-client/src/main/java/io/netty/testsuite/svm/client/package-info.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0", "originalCommit": "4332452a1d552c46a89ae3f6966bd9d322611a02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU4MDk4Mg==", "url": "https://github.com/netty/netty/pull/10630#discussion_r511580982", "bodyText": "Fixed", "author": "rpuch", "createdAt": "2020-10-25T11:03:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU3MjI2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU3MjMxNw==", "url": "https://github.com/netty/netty/pull/10630#discussion_r511572317", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *   https://www.apache.org/licenses/LICENSE-2.0", "author": "normanmaurer", "createdAt": "2020-10-25T09:40:19Z", "path": "transport/src/test/java/io/netty/channel/socket/InternetProtocolFamilyTest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0", "originalCommit": "4332452a1d552c46a89ae3f6966bd9d322611a02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU4MDk4NA==", "url": "https://github.com/netty/netty/pull/10630#discussion_r511580984", "bodyText": "Fixed", "author": "rpuch", "createdAt": "2020-10-25T11:03:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU3MjMxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU3MjUyNg==", "url": "https://github.com/netty/netty/pull/10630#discussion_r511572526", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.junit.Assert.assertThat;\n          \n          \n            \n            import static org.hamcrest.MatcherAssert.assertThat;", "author": "normanmaurer", "createdAt": "2020-10-25T09:41:56Z", "path": "transport/src/test/java/io/netty/channel/socket/InternetProtocolFamilyTest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.channel.socket;\n+\n+import io.netty.util.NetUtil;\n+import org.junit.Test;\n+\n+import java.net.InetAddress;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;", "originalCommit": "4332452a1d552c46a89ae3f6966bd9d322611a02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU4MDk5MQ==", "url": "https://github.com/netty/netty/pull/10630#discussion_r511580991", "bodyText": "Fixed", "author": "rpuch", "createdAt": "2020-10-25T11:03:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU3MjUyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU3MjU1OA==", "url": "https://github.com/netty/netty/pull/10630#discussion_r511572558", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n          \n          \n            \n            <project xmlns=\"https://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"https://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"https://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd\">", "author": "normanmaurer", "createdAt": "2020-10-25T09:42:22Z", "path": "testsuite-native-image-client/pom.xml", "diffHunk": "@@ -0,0 +1,106 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright 2020 The Netty Project\n+  ~\n+  ~ The Netty Project licenses this file to you under the Apache License,\n+  ~ version 2.0 (the \"License\"); you may not use this file except in compliance\n+  ~ with the License. You may obtain a copy of the License at:\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+  ~ WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+  ~ License for the specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">", "originalCommit": "4332452a1d552c46a89ae3f6966bd9d322611a02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU4MTA0OA==", "url": "https://github.com/netty/netty/pull/10630#discussion_r511581048", "bodyText": "Fixed. IntelliJ IDEA complains that pom.xml has become invalid, but maven build runs successfully.", "author": "rpuch", "createdAt": "2020-10-25T11:03:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU3MjU1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU3MjU4Mg==", "url": "https://github.com/netty/netty/pull/10630#discussion_r511572582", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *   https://www.apache.org/licenses/LICENSE-2.0", "author": "normanmaurer", "createdAt": "2020-10-25T09:42:36Z", "path": "common/src/main/java/io/netty/util/NetUtilSubstitutions.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0", "originalCommit": "4332452a1d552c46a89ae3f6966bd9d322611a02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU4MTA1Mg==", "url": "https://github.com/netty/netty/pull/10630#discussion_r511581052", "bodyText": "Fixed", "author": "rpuch", "createdAt": "2020-10-25T11:04:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU3MjU4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU3MjYwMg==", "url": "https://github.com/netty/netty/pull/10630#discussion_r511572602", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *   https://www.apache.org/licenses/LICENSE-2.0", "author": "normanmaurer", "createdAt": "2020-10-25T09:42:48Z", "path": "common/src/main/java/io/netty/util/NetUtilInitializations.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0", "originalCommit": "4332452a1d552c46a89ae3f6966bd9d322611a02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU4MTA3MQ==", "url": "https://github.com/netty/netty/pull/10630#discussion_r511581071", "bodyText": "Fixed", "author": "rpuch", "createdAt": "2020-10-25T11:04:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU3MjYwMg=="}], "type": "inlineReview"}, {"oid": "a1d4adb6944417d6f27e61fb9d4eeeadde36d82e", "url": "https://github.com/netty/netty/commit/a1d4adb6944417d6f27e61fb9d4eeeadde36d82e", "message": "Fix native image build on modern GraalVM versions for the cases when the program uses netty-dns\n\nMotivation:\n\nSince GraalVM version 19.3.0, instances of java.net.InetAddress (and its subclasses Inet4Address and Inet6Address) are not allowed in native image heap (that is, they cannot be stored in static fields of classes initialized at build time or be reachable through static fields of such classes). When building a native image, it makes sense to initialize at build time as many classes as possible.\nBut some fields of some classes in Netty (for example, NetUtil.LOCALHOST4) contain InetAddress instances. If a program is using code path that makes it possible to reach such fields at build time initialization, it becomes impossible to build a native image initializing core Netty classes initialized at runtime. An example of such a program is a client that uses netty-dns.\n\nModifications:\n\n- Add netty-testsuite-native-image-client Maven module to test that such an example program can be built after the corresponding fixes\n- Add native-image.properties to resolver-dns module to move initialization of some classes to runtime (some of them are parsing configuration during initialization, so it makes no sense to initialize them at build time; for others, it's needed to avoid InetAddress reachability at build time)\n- Add substitutions for NetUtil.LOCALHOST4, NetUtil.LOCALHOST6 and NetUtil.LOCALHOST to overcome the InetAddress-related prohibition\n- Extract some initialization code from NetUtil to NetUtilInitializations to allow it to be used by the substitutions\n\nResult:\n\nA client program using netty-dns with --initialize-at-build-time=io.netty builds successfully", "committedDate": "2020-10-25T11:01:17Z", "type": "commit"}, {"oid": "a1d4adb6944417d6f27e61fb9d4eeeadde36d82e", "url": "https://github.com/netty/netty/commit/a1d4adb6944417d6f27e61fb9d4eeeadde36d82e", "message": "Fix native image build on modern GraalVM versions for the cases when the program uses netty-dns\n\nMotivation:\n\nSince GraalVM version 19.3.0, instances of java.net.InetAddress (and its subclasses Inet4Address and Inet6Address) are not allowed in native image heap (that is, they cannot be stored in static fields of classes initialized at build time or be reachable through static fields of such classes). When building a native image, it makes sense to initialize at build time as many classes as possible.\nBut some fields of some classes in Netty (for example, NetUtil.LOCALHOST4) contain InetAddress instances. If a program is using code path that makes it possible to reach such fields at build time initialization, it becomes impossible to build a native image initializing core Netty classes initialized at runtime. An example of such a program is a client that uses netty-dns.\n\nModifications:\n\n- Add netty-testsuite-native-image-client Maven module to test that such an example program can be built after the corresponding fixes\n- Add native-image.properties to resolver-dns module to move initialization of some classes to runtime (some of them are parsing configuration during initialization, so it makes no sense to initialize them at build time; for others, it's needed to avoid InetAddress reachability at build time)\n- Add substitutions for NetUtil.LOCALHOST4, NetUtil.LOCALHOST6 and NetUtil.LOCALHOST to overcome the InetAddress-related prohibition\n- Extract some initialization code from NetUtil to NetUtilInitializations to allow it to be used by the substitutions\n\nResult:\n\nA client program using netty-dns with --initialize-at-build-time=io.netty builds successfully", "committedDate": "2020-10-25T11:01:17Z", "type": "forcePushed"}]}