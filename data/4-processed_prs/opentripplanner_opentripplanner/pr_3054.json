{"pr_number": 3054, "pr_title": "Improve error handling for routing calls", "pr_createdAt": "2020-04-29T10:26:34Z", "pr_url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3054", "timeline": [{"oid": "5b55cdf2298dd1f20313797030a7366d8ae43aa4", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/5b55cdf2298dd1f20313797030a7366d8ae43aa4", "message": "Move internal request/response classes to routing.api package", "committedDate": "2020-04-29T08:24:51Z", "type": "commit"}, {"oid": "506366d8064ea5de24aa94d16032d02a9601766c", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/506366d8064ea5de24aa94d16032d02a9601766c", "message": "Added RoutingError class and RoutingErrorCode enum", "committedDate": "2020-04-29T08:41:10Z", "type": "commit"}, {"oid": "480796b5e076a2337a1b7e64cd0927980ce6e68f", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/480796b5e076a2337a1b7e64cd0927980ce6e68f", "message": "Catch separate exceptions for direct/transit routing, add NoStopsInRangeException", "committedDate": "2020-04-29T10:13:40Z", "type": "commit"}, {"oid": "a1ee6129ea6d6abb5a1b62a1fe81c36ce4a44132", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/a1ee6129ea6d6abb5a1b62a1fe81c36ce4a44132", "message": "Map RoutingError to rest API", "committedDate": "2020-04-29T10:14:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxNTE2MA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3054#discussion_r417215160", "bodyText": "The RoutingService is the main entry point of the org.opentripplanner.routing package and should be in the root.", "author": "t2gran", "createdAt": "2020-04-29T10:29:11Z", "path": "src/main/java/org/opentripplanner/routing/api/request/RoutingService.java", "diffHunk": "@@ -1,4 +1,4 @@\n-package org.opentripplanner.routing;\n+package org.opentripplanner.routing.api.request;", "originalCommit": "a1ee6129ea6d6abb5a1b62a1fe81c36ce4a44132", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxNjE4OA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3054#discussion_r417216188", "bodyText": "We should throw OTPApplicationException to exit a search, so we do not need the SYSTEM_ERROR here. we do need it on the API enum.", "author": "t2gran", "createdAt": "2020-04-29T10:31:07Z", "path": "src/main/java/org/opentripplanner/routing/api/response/RoutingErrorCode.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.opentripplanner.routing.api.response;\n+\n+public enum RoutingErrorCode {\n+  SYSTEM_ERROR,", "originalCommit": "a1ee6129ea6d6abb5a1b62a1fe81c36ce4a44132", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxODYwMA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3054#discussion_r417218600", "bodyText": "I think we need to be more specific: FROM_PLACE_NOT_FOUND, TO_PLACE_NOT_FOUND (INTERMEDIATE_PLACE_NOT_FOUND when supporting via search)", "author": "t2gran", "createdAt": "2020-04-29T10:35:42Z", "path": "src/main/java/org/opentripplanner/routing/api/response/RoutingErrorCode.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.opentripplanner.routing.api.response;\n+\n+public enum RoutingErrorCode {\n+  SYSTEM_ERROR,\n+\n+  /**\n+   * Location was found, but it was located outside the street network.\n+   */\n+  OUTSIDE_BOUNDS,\n+\n+  /**\n+   * The time provided was outside the available service period.\n+   */\n+  OUTSIDE_SERVICE_PERIOD,\n+\n+  /**\n+   * The location could not be matched to a valid id or coordinate.\n+   */\n+  LOCATION_NOT_FOUND,", "originalCommit": "a1ee6129ea6d6abb5a1b62a1fe81c36ce4a44132", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyMTIwOQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3054#discussion_r417221209", "bodyText": "The idea here was to use the paramValue in RoutingError to specify which place was not found.", "author": "gmellemstrand", "createdAt": "2020-04-29T10:40:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxODYwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyMTMyMg==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3054#discussion_r417221322", "bodyText": "Maybe it is better to add another enum to report back the incorrect input field. Then that could also be used with the next error code.", "author": "t2gran", "createdAt": "2020-04-29T10:41:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxODYwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg3NDQ3Mw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3054#discussion_r417874473", "bodyText": "Changed the paramValue to an enum, and then it is checked in the PlannerErrorMapper and mapped to the correct Message.", "author": "gmellemstrand", "createdAt": "2020-04-30T09:22:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxODYwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyMjg3MQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3054#discussion_r417222871", "bodyText": "Improve doc: \"Location found, but no stops found within the search radius.\"", "author": "t2gran", "createdAt": "2020-04-29T10:44:07Z", "path": "src/main/java/org/opentripplanner/routing/api/response/RoutingErrorCode.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.opentripplanner.routing.api.response;\n+\n+public enum RoutingErrorCode {\n+  SYSTEM_ERROR,\n+\n+  /**\n+   * Location was found, but it was located outside the street network.\n+   */\n+  OUTSIDE_BOUNDS,\n+\n+  /**\n+   * The time provided was outside the available service period.\n+   */\n+  OUTSIDE_SERVICE_PERIOD,\n+\n+  /**\n+   * The location could not be matched to a valid id or coordinate.\n+   */\n+  LOCATION_NOT_FOUND,\n+\n+  /**\n+   * The location was found, but no stops could be connected within the search radius.\n+   */", "originalCommit": "a1ee6129ea6d6abb5a1b62a1fe81c36ce4a44132", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyNTgxMA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3054#discussion_r417225810", "bodyText": "The parameter value here is probably not a good idea, I know I suggested it, but since we want typed parameters as input, the \"original\" API input string is not available. So the best we can do is to report back witch input field that failed to validate. We should use an enum for the input fields.", "author": "t2gran", "createdAt": "2020-04-29T10:49:51Z", "path": "src/main/java/org/opentripplanner/routing/api/response/RoutingError.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.opentripplanner.routing.api.response;\n+\n+public class RoutingError {\n+  public final RoutingErrorCode code;\n+  public final String message;\n+  public final String paramValue;", "originalCommit": "a1ee6129ea6d6abb5a1b62a1fe81c36ce4a44132", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg3MzEwOA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3054#discussion_r417873108", "bodyText": "I have changed it to an enum", "author": "gmellemstrand", "createdAt": "2020-04-30T09:20:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyNTgxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzMDQ1Nw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3054#discussion_r417230457", "bodyText": "You should only catch business specific exceptions that can be mapped to a RoutingError.", "author": "t2gran", "createdAt": "2020-04-29T10:59:09Z", "path": "src/main/java/org/opentripplanner/routing/algorithm/RoutingWorker.java", "diffHunk": "@@ -63,29 +65,53 @@ public RoutingWorker(RaptorConfig<TripSchedule> config, RoutingRequest request)\n     }\n \n     public RoutingResponse route(Router router) {\n-        try {\n-            List<Itinerary> itineraries;\n+        List<Itinerary> itineraries = new ArrayList<>();\n+        List<RoutingError> routingErrors = new ArrayList<>();\n \n+        try {\n             // Direct street routing\n-            itineraries = new ArrayList<>(DirectStreetRouter.route(router, request));\n+            itineraries.addAll(DirectStreetRouter.route(router, request));\n+        } catch (Exception e) {", "originalCommit": "a1ee6129ea6d6abb5a1b62a1fe81c36ce4a44132", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzNDc1OQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3054#discussion_r417234759", "bodyText": "I would make the routingErrors a member of the request scoped Worker class - then each of the two try/catch blocks can be moved into their own methods and don\u00b4t interrupt the reading of the main flow. This have the side-effect of changing the state of the worker, so that should be documented for each of the methods.", "author": "t2gran", "createdAt": "2020-04-29T11:08:00Z", "path": "src/main/java/org/opentripplanner/routing/algorithm/RoutingWorker.java", "diffHunk": "@@ -63,29 +65,53 @@ public RoutingWorker(RaptorConfig<TripSchedule> config, RoutingRequest request)\n     }\n \n     public RoutingResponse route(Router router) {\n-        try {\n-            List<Itinerary> itineraries;\n+        List<Itinerary> itineraries = new ArrayList<>();\n+        List<RoutingError> routingErrors = new ArrayList<>();", "originalCommit": "a1ee6129ea6d6abb5a1b62a1fe81c36ce4a44132", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkwNDExNQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3054#discussion_r417904115", "bodyText": "As you suggested in another comment, I've instead opted to use a general RoutingValidationException that includes a RoutingError.", "author": "gmellemstrand", "createdAt": "2020-04-30T10:14:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzNDc1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzODM5Mg==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3054#discussion_r417238392", "bodyText": "We do not need to distinguish between different error situation, so this exception should be more general like e.g. RoutingValidationException and include the RoutingError. Then maybe the error handling in RoutingWorker collapses to one line and you do not need to make the routingErrors class scoped (witch is not ideal).", "author": "t2gran", "createdAt": "2020-04-29T11:15:44Z", "path": "src/main/java/org/opentripplanner/routing/error/NoStopsInRangeException.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package org.opentripplanner.routing.error;\n+\n+import java.util.List;\n+\n+/**\n+ * Indicates that a vertex was found, but no stops could be found within the search radius.\n+ */\n+public class NoStopsInRangeException extends RuntimeException {\n+  private static final long serialVersionUID = 1L;\n+\n+  List<String> missing;\n+\n+  public NoStopsInRangeException(List<String> missing) {\n+    super(\"vertices not found: \" + missing.toString());\n+    this.missing = missing;\n+  }\n+\n+  public List<String> getMissing() {\n+    return missing;\n+  }\n+}", "originalCommit": "a1ee6129ea6d6abb5a1b62a1fe81c36ce4a44132", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg3NTM5Ng==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3054#discussion_r417875396", "bodyText": "I have refactored the code to use the RoutingValidationException with a RoutingError included. This also meant I could delete som of the other Exception types.", "author": "gmellemstrand", "createdAt": "2020-04-30T09:24:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzODM5Mg=="}], "type": "inlineReview"}, {"oid": "c0eeeb07b43d48f28c9bb527872c7221b32b2c4a", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/c0eeeb07b43d48f28c9bb527872c7221b32b2c4a", "message": "Move RoutingService back to root of routing package", "committedDate": "2020-04-29T12:23:11Z", "type": "commit"}, {"oid": "b1d3c97fc504255cafb45a8ac5b6e89d77c7f516", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/b1d3c97fc504255cafb45a8ac5b6e89d77c7f516", "message": "Added RoutingValidationException which contains a RoutingError", "committedDate": "2020-04-29T12:24:47Z", "type": "commit"}, {"oid": "9504d9a5d8b30407da7b3480408fdbaeefb79607", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/9504d9a5d8b30407da7b3480408fdbaeefb79607", "message": "Change paramValue to InputField enum and change VertexNotFoundException to use RoutingValidationException instead", "committedDate": "2020-04-30T08:12:49Z", "type": "commit"}, {"oid": "53f88df69fff597404a84d8e60861ee571dfc910", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/53f88df69fff597404a84d8e60861ee571dfc910", "message": "Refactor PlannerError to not map from Exceptions", "committedDate": "2020-04-30T09:07:44Z", "type": "commit"}, {"oid": "b414f845cad3828b70baa1d836a5eefcf393c457", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/b414f845cad3828b70baa1d836a5eefcf393c457", "message": "Delete TransitTimesException. This should be handled by RoutingValidationException", "committedDate": "2020-04-30T09:10:43Z", "type": "commit"}, {"oid": "1ae91b70c7f4dc217f5306164455610e23b0fdee", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/1ae91b70c7f4dc217f5306164455610e23b0fdee", "message": "Delete VertexNotFoundException. This should be handled by RoutingValidationException", "committedDate": "2020-04-30T09:16:14Z", "type": "commit"}, {"oid": "ac9369b103106b1d16d26152ddad5b06fcba8b37", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/ac9369b103106b1d16d26152ddad5b06fcba8b37", "message": "Removed message from RoutingValidationException. It can be added back if it is needed", "committedDate": "2020-04-30T09:29:29Z", "type": "commit"}, {"oid": "ac9369b103106b1d16d26152ddad5b06fcba8b37", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/ac9369b103106b1d16d26152ddad5b06fcba8b37", "message": "Removed message from RoutingValidationException. It can be added back if it is needed", "committedDate": "2020-04-30T09:29:29Z", "type": "forcePushed"}, {"oid": "50a4b399e26e0227a2ec8906253e6754cc987cd9", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/50a4b399e26e0227a2ec8906253e6754cc987cd9", "message": "Call checkIfVerticesNotFound on transit and direct routing methods", "committedDate": "2020-05-04T08:29:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAxMzU3Mg==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3054#discussion_r420013572", "bodyText": "Add some TODO OTP2 here for unused codes.", "author": "t2gran", "createdAt": "2020-05-05T10:36:30Z", "path": "src/main/java/org/opentripplanner/routing/api/response/RoutingErrorCode.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.opentripplanner.routing.api.response;\n+\n+public enum RoutingErrorCode {\n+  /**\n+   * Location was found, but it was located outside the street network.\n+   */\n+  OUTSIDE_BOUNDS,\n+\n+  /**\n+   * The time provided was outside the available service period.\n+   */\n+  OUTSIDE_SERVICE_PERIOD,\n+\n+  /**\n+   * The location could not be matched to a valid id or coordinate.\n+   */\n+  LOCATION_NOT_FOUND,\n+\n+  /**\n+   * The location was found, but no stops could be found within the search radius.\n+   */\n+  NO_STOPS_IN_RANGE\n+}", "originalCommit": "50a4b399e26e0227a2ec8906253e6754cc987cd9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3a064b0f95cc627187b57460f231759727642482", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/3a064b0f95cc627187b57460f231759727642482", "message": "Allow multiple RoutingErrors in each RoutingValidationException", "committedDate": "2020-05-06T10:02:38Z", "type": "commit"}, {"oid": "8a694866e72eba0e2397a9ca88c4e57675f44fd9", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/8a694866e72eba0e2397a9ca88c4e57675f44fd9", "message": "Add TODOs for RoutingErrorCodes that are not in use", "committedDate": "2020-05-06T10:04:56Z", "type": "commit"}, {"oid": "04bd1627ff52cca0f6703783d8ae3d291dbc963a", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/04bd1627ff52cca0f6703783d8ae3d291dbc963a", "message": "Merge branch 'dev-2.x' into otp2_error_handling", "committedDate": "2020-05-12T09:09:25Z", "type": "commit"}, {"oid": "5df2b52a02b1f05325b577045ada5fb89791abf9", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/5df2b52a02b1f05325b577045ada5fb89791abf9", "message": "Merge branch 'dev-2.x' into otp2_error_handling", "committedDate": "2020-05-14T09:02:17Z", "type": "commit"}, {"oid": "f5e1025200e6be4b116b5afbf5277cda2c36d55c", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/f5e1025200e6be4b116b5afbf5277cda2c36d55c", "message": "Move setRoutingContext to within routing methods, so that exceptions are caught at the right place", "committedDate": "2020-05-14T10:47:54Z", "type": "commit"}, {"oid": "ea248eb99ccbe2d5d47a18072f14c440a5741038", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/ea248eb99ccbe2d5d47a18072f14c440a5741038", "message": "Add error message for no transit connection", "committedDate": "2020-05-15T10:13:13Z", "type": "commit"}]}