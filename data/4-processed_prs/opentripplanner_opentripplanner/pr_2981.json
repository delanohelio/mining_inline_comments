{"pr_number": 2981, "pr_title": "Otp2 configure raptor search", "pr_createdAt": "2020-02-18T22:42:07Z", "pr_url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2981", "timeline": [{"oid": "fab23f6e70ec4e08ff064c531fc2f34aaee548a9", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/fab23f6e70ec4e08ff064c531fc2f34aaee548a9", "message": "Code cleanup - Add a reusable JSON node adapter to support type-safe reading of JSON config. This enforce consistent error handling when reading config and logic reuse.", "committedDate": "2020-02-21T17:53:52Z", "type": "commit"}, {"oid": "ecc84e1c222e3fc76d50b7788ed9fa3fe5699d57", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/ecc84e1c222e3fc76d50b7788ed9fa3fe5699d57", "message": "Support for tuning transit/raptor using the 'router-config.json'\n- Change 'minTripTimeCoefficient' (DynamicSearchWindow) from float to double.\n- Wrap config in a type, avoid passing JsonNode around. Enable using typed config classes, this allow reuse of config in e.g. the SpeedTest.\n- Add Kryo Serializers for RouterConfigParams and GraphBuildParameters config classes.\n- Use JsonNode toString instead of internal ReflectionLibrary to print config.\n- Print correct source for config parameters when logging and throwing exceptions.\n- Pushed Config parsing from the Router class to RouterConfigParams.", "committedDate": "2020-02-21T17:53:52Z", "type": "commit"}, {"oid": "a749e962b3750ae5bd6f92c3faef574695b8e5c4", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/a749e962b3750ae5bd6f92c3faef574695b8e5c4", "message": "Clean code - Change performance logging to give better reports, add logging on \"Transit data preparation\" and \"Street access/egress search\", remove logging on \"Raptor setup\" takes 0 ms and \"route by minute\" witch is redundant.", "committedDate": "2020-02-21T17:53:52Z", "type": "commit"}, {"oid": "a588722e1f6a79f5bffe71ba429ad3a0af7558ce", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/a588722e1f6a79f5bffe71ba429ad3a0af7558ce", "message": "Cleanup dynamic search window coefficients implementation with better naming and JavaDoc. A new unit test on search-window calculation is added.", "committedDate": "2020-02-21T18:02:20Z", "type": "commit"}, {"oid": "d4872942ea038588bee4895db0af8385f6b16096", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/d4872942ea038588bee4895db0af8385f6b16096", "message": "Refactor and improve the configuration loading.\n  - Reduce the DynamicSearchWindowCoefficients defaults even more.\n  - Load config on startup and fail early on configuration errors.\n  - Log warnings for all unused parameters, this is done by the NodeAdapter.\n  - Log LOADED parameters for ALL config files.\n  - Add more unit-tests on NodeAdapter.\n  - Router config is changed:\n    - The \"routingDefaults\" is explicit mapped into the default instance - at startup.\n    - The two \"timeout(s)\" parameters is replaced by one single parameter: \"streetRoutingTimeout\".\n    - The ReflectiveInitializer is deleted, the new NodeAdapter replaces this class.", "committedDate": "2020-02-24T19:27:26Z", "type": "forcePushed"}, {"oid": "3e87d3e5f21e0910b13d8816492e925c6d9187e7", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/3e87d3e5f21e0910b13d8816492e925c6d9187e7", "message": "Refactor and improve the configuration loading.\n  - Reduce the DynamicSearchWindowCoefficients defaults even more.\n  - Load config on startup and fail early on configuration errors.\n  - Log warnings for all unused parameters, this is done by the NodeAdapter.\n  - Log LOADED parameters for ALL config files.\n  - Add more unit-tests on NodeAdapter.\n  - Router config is changed:\n    - The \"routingDefaults\" is explicit mapped into the default instance - at startup.\n    - The two \"timeout(s)\" parameters is replaced by one single parameter: \"streetRoutingTimeout\".\n    - The ReflectiveInitializer is deleted, the new NodeAdapter replaces this class.", "committedDate": "2020-02-24T19:43:14Z", "type": "forcePushed"}, {"oid": "561db9837c6b797d543771a8345dbddd406e0d9f", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/561db9837c6b797d543771a8345dbddd406e0d9f", "message": "Refactor and improve the configuration loading.\n  - Reduce the DynamicSearchWindowCoefficients defaults even more.\n  - Load config on startup and fail early on configuration errors.\n  - Log warnings for all unused parameters, this is done by the NodeAdapter.\n  - Log LOADED parameters for ALL config files.\n  - Add more unit-tests on NodeAdapter.\n  - Router config is changed:\n    - The \"routingDefaults\" is explicit mapped into the default instance - at startup.\n    - The two \"timeout(s)\" parameters is replaced by one single parameter: \"streetRoutingTimeout\".\n    - The ReflectiveInitializer is deleted, the new NodeAdapter replaces this class.", "committedDate": "2020-02-24T20:55:39Z", "type": "commit"}, {"oid": "561db9837c6b797d543771a8345dbddd406e0d9f", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/561db9837c6b797d543771a8345dbddd406e0d9f", "message": "Refactor and improve the configuration loading.\n  - Reduce the DynamicSearchWindowCoefficients defaults even more.\n  - Load config on startup and fail early on configuration errors.\n  - Log warnings for all unused parameters, this is done by the NodeAdapter.\n  - Log LOADED parameters for ALL config files.\n  - Add more unit-tests on NodeAdapter.\n  - Router config is changed:\n    - The \"routingDefaults\" is explicit mapped into the default instance - at startup.\n    - The two \"timeout(s)\" parameters is replaced by one single parameter: \"streetRoutingTimeout\".\n    - The ReflectiveInitializer is deleted, the new NodeAdapter replaces this class.", "committedDate": "2020-02-24T20:55:39Z", "type": "forcePushed"}, {"oid": "0b688a18a37043655e6ca10802fdfd89dc75720b", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/0b688a18a37043655e6ca10802fdfd89dc75720b", "message": "Merge branch 'dev-2.x' into otp2_configure_raptor_search", "committedDate": "2020-02-25T09:55:43Z", "type": "commit"}, {"oid": "3f61ed0a92490e73a4d47db0c8a36eb9a4abf2f0", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/3f61ed0a92490e73a4d47db0c8a36eb9a4abf2f0", "message": "Merge branch 'dev-2.x' into otp2_configure_raptor_search", "committedDate": "2020-02-25T10:04:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4NDg0Ng==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2981#discussion_r383784846", "bodyText": "Add comment to say this only exists to construct an \"immutable\" instance with the right constructor. There might be a better way, a comment will help with any future refactor.", "author": "abyrd", "createdAt": "2020-02-25T10:19:06Z", "path": "src/main/java/org/opentripplanner/kryo/GraphBuildParametersSerializer.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.opentripplanner.kryo;\n+\n+import com.esotericsoftware.kryo.Kryo;\n+import com.esotericsoftware.kryo.Serializer;\n+import com.esotericsoftware.kryo.io.Input;\n+import com.esotericsoftware.kryo.io.Output;\n+import org.opentripplanner.standalone.config.ConfigLoader;\n+import org.opentripplanner.standalone.config.GraphBuildParameters;\n+\n+public class GraphBuildParametersSerializer extends Serializer<GraphBuildParameters> {", "originalCommit": "3f61ed0a92490e73a4d47db0c8a36eb9a4abf2f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg2Njg0OQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2981#discussion_r383866849", "bodyText": "I added JavaDoc to this to explain why the Serializer is needed, and why we do not serialize just the text String read from the file.", "author": "t2gran", "createdAt": "2020-02-25T13:08:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4NDg0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4NTEwMg==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2981#discussion_r383785102", "bodyText": "Add comment like the other serializer.", "author": "abyrd", "createdAt": "2020-02-25T10:19:29Z", "path": "src/main/java/org/opentripplanner/kryo/RouterConfigParamsSerializer.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.opentripplanner.kryo;\n+\n+import com.esotericsoftware.kryo.Kryo;\n+import com.esotericsoftware.kryo.Serializer;\n+import com.esotericsoftware.kryo.io.Input;\n+import com.esotericsoftware.kryo.io.Output;\n+import org.opentripplanner.standalone.config.ConfigLoader;\n+import org.opentripplanner.standalone.config.RouterConfigParams;\n+\n+public class RouterConfigParamsSerializer extends Serializer<RouterConfigParams> {", "originalCommit": "3f61ed0a92490e73a4d47db0c8a36eb9a4abf2f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4NzE5Mg==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2981#discussion_r383787192", "bodyText": "We have a merge conflict because other code does not yet use this constructor.", "author": "abyrd", "createdAt": "2020-02-25T10:22:58Z", "path": "src/main/java/org/opentripplanner/routing/algorithm/RoutingWorker.java", "diffHunk": "@@ -71,7 +72,8 @@\n     private TripSearchMetadata responseMetadata = null;\n     private Instant filterOnLatestDepartureTime = null;\n \n-    public RoutingWorker(RoutingRequest request) {\n+    public RoutingWorker(RaptorConfig<TripSchedule> config, RoutingRequest request) {", "originalCommit": "3f61ed0a92490e73a4d47db0c8a36eb9a4abf2f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxMTI1Mg==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2981#discussion_r383811252", "bodyText": "Generally use dots for nesting in JSON since those are used in the JSON itself.", "author": "abyrd", "createdAt": "2020-02-25T11:06:37Z", "path": "src/test/java/org/opentripplanner/standalone/config/NodeAdapterTest.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package org.opentripplanner.standalone.config;\n+\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.opentripplanner.model.FeedScopedId;\n+import org.opentripplanner.util.OtpAppException;\n+import org.slf4j.Logger;\n+\n+import java.time.LocalDate;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.opentripplanner.standalone.config.JsonSupport.newNodeAdapterForTest;\n+\n+public class NodeAdapterTest {\n+    private enum AnEnum { A, B, C }\n+\n+    @Test\n+    public void testAsRawNode() {\n+        NodeAdapter subject  = newNodeAdapterForTest(\"{ foo : 'bar' }\");\n+        assertFalse(subject.asRawNode(\"anObject\").has(\"withText\"));\n+    }\n+    @Test\n+    public void isEmpty() {\n+        NodeAdapter subject  = newNodeAdapterForTest(\"\");\n+        assertTrue(subject.path(\"alf\").isEmpty());\n+\n+        subject  = newNodeAdapterForTest(\"{}\");\n+        assertTrue(subject.path(\"alf\").isEmpty());\n+        assertTrue(subject.path(\"alfa\").path(\"bet\").isEmpty());\n+    }\n+\n+    @Test\n+    public void path() {\n+        NodeAdapter subject  = newNodeAdapterForTest(\"{ foo : 'bar' }\");\n+        assertFalse(subject.path(\"foo\").isEmpty());\n+        assertTrue(subject.path(\"missingObject\").isEmpty());\n+    }\n+\n+    @Test\n+    public void asBoolean() {\n+        NodeAdapter subject  = newNodeAdapterForTest(\"{ aBoolean : true }\");\n+        assertTrue(subject.asBoolean(\"aBoolean\", false));\n+        assertFalse(subject.asBoolean(\"missingField\", false));\n+    }\n+\n+    @Test\n+    public void asDouble() {\n+        NodeAdapter subject  = newNodeAdapterForTest(\"{ aDouble : 7.0 }\");\n+        assertEquals(7.0, subject.asDouble(\"aDouble\", -1d), 0.01);\n+        assertEquals(7.0, subject.asDouble(\"aDouble\"), 0.01);\n+        assertEquals(-1d, subject.asDouble(\"missingField\", -1d), 00.1);\n+    }\n+\n+    @Test\n+    public void asDoubles() {\n+        NodeAdapter subject  = newNodeAdapterForTest(\"{ key : [ 2.0, 3.0, 5.0 ] }\");\n+        assertEquals(List.of(2d, 3d, 5d), subject.asDoubles(\"key\", null));\n+    }\n+\n+    @Test\n+    public void asInt() {\n+        NodeAdapter subject  = newNodeAdapterForTest(\"{ aInt : 5 }\");\n+        assertEquals(5, subject.asInt(\"aInt\", -1));\n+        assertEquals(-1, subject.asInt(\"missingField\", -1));\n+    }\n+\n+    @Test\n+    public void asLong() {\n+        NodeAdapter subject  = newNodeAdapterForTest(\"{ key : 5 }\");\n+        assertEquals(5, subject.asLong(\"key\", -1));\n+        assertEquals(-1, subject.asLong(\"missingField\", -1));\n+    }\n+\n+    @Test\n+    public void asText() {\n+        NodeAdapter subject  = newNodeAdapterForTest(\"{ aText : 'TEXT' }\");\n+        assertEquals(\"TEXT\", subject.asText(\"aText\", \"DEFAULT\"));\n+        assertEquals(\"DEFAULT\", subject.asText(\"missingField\", \"DEFAULT\"));\n+        assertNull(subject.asText(\"missingField\", null));\n+\n+        assertEquals(\"TEXT\", subject.asText(\"aText\"));\n+    }\n+\n+    @Test(expected = OtpAppException.class)\n+    public void requiredAsText() {\n+        NodeAdapter subject  = newNodeAdapterForTest(\"{ }\");\n+        subject.asText(\"missingField\");\n+    }\n+\n+    @Test\n+    public void asEnum() {\n+        // Given\n+        NodeAdapter subject  = newNodeAdapterForTest(\"{ key : 'A' }\");\n+\n+        // Then\n+        assertEquals(\"Get existing property\", AnEnum.A, subject.asEnum(\"key\", AnEnum.B));\n+        assertEquals(\"Get default value\", AnEnum.B, subject.asEnum(\"missing-key\", AnEnum.B));\n+    }\n+\n+    @Test(expected = OtpAppException.class)\n+    public void asEnumWithIllegalPropertySet() {\n+        // Given\n+        NodeAdapter subject  = newNodeAdapterForTest(\"{ key : 'NONE_EXISTING_ENUM_VALUE' }\");\n+\n+        // Then expect an error when value 'NONE_EXISTING_ENUM_VALUE' is not in the set of legal\n+        // values: ['A', 'B', 'C']\n+        subject.asEnum(\"key\", AnEnum.B);\n+    }\n+\n+    @Test\n+    public void asEnumMap() {\n+        NodeAdapter subject  = newNodeAdapterForTest(\"{ key : { A: true, B: false } }\");\n+        assertEquals(Map.of(AnEnum.A, true, AnEnum.B, false), subject.asEnumMap(\"key\", AnEnum.class, NodeAdapter::asBoolean));\n+        assertEquals(Collections.<AnEnum, Boolean>emptyMap(), subject.asEnumMap(\"missing-key\", AnEnum.class, NodeAdapter::asBoolean));\n+    }\n+\n+    @Test\n+    public void asEnumMapWithUnknownValue() {\n+\n+        NodeAdapter subject  = newNodeAdapterForTest(\"{ key : { unknown : 7 } }\");\n+        assertEquals(Map.<AnEnum, Double>of(), subject.asEnumMap(\"key\", AnEnum.class, NodeAdapter::asDouble));\n+\n+        // Assert unknown parameter is logged at warning level and with full pathname\n+        Logger log = Mockito.mock(Logger.class);\n+        subject.logUnusedParameters(log);\n+        Mockito.verify(log).warn(Mockito.anyString(), Mockito.eq(\"Test/key/unknown\"));", "originalCommit": "3f61ed0a92490e73a4d47db0c8a36eb9a4abf2f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8525d171a700dc855b5052834b10a600c8ada0b8", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/8525d171a700dc855b5052834b10a600c8ada0b8", "message": "Code review. Rename all config POJOs so the names are consistent and matches the configuration input JSON files. E.g. the 'BuildConfig' is the POJO for the 'build-config.json' file.\n - JavaDoc added to BuildConfigSerializer and RouterConfigSerializer.\n - '/' is replaced with '.' in config paths.", "committedDate": "2020-02-25T13:06:25Z", "type": "commit"}]}