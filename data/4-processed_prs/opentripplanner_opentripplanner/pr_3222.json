{"pr_number": 3222, "pr_title": "Alternative implementation of multi day trips", "pr_createdAt": "2020-10-25T11:45:10Z", "pr_url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3222", "timeline": [{"oid": "b7b3a2485915fcd7e71d874885aaa69817b7d2a9", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/b7b3a2485915fcd7e71d874885aaa69817b7d2a9", "message": "Added support for multi day trips", "committedDate": "2020-10-26T14:40:15Z", "type": "forcePushed"}, {"oid": "fa3d029f72bcc2c49f2e65b4745ff06a05f9306c", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/fa3d029f72bcc2c49f2e65b4745ff06a05f9306c", "message": "Added support for multi day trips", "committedDate": "2020-10-27T12:22:19Z", "type": "commit"}, {"oid": "ad73b716cca0d1799d60257b6d7652284bceeaf2", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/ad73b716cca0d1799d60257b6d7652284bceeaf2", "message": "Fixed test", "committedDate": "2020-10-27T12:22:19Z", "type": "commit"}, {"oid": "ad73b716cca0d1799d60257b6d7652284bceeaf2", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/ad73b716cca0d1799d60257b6d7652284bceeaf2", "message": "Fixed test", "committedDate": "2020-10-27T12:22:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY2MDMwMQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3222#discussion_r512660301", "bodyText": "This allow us to find trips in remote areas with low frequency trips. Could you @gmellemstrand  provide us with som numbers on how this affect performance. The most important thing is that short trips in high frequency areas is affected.", "author": "t2gran", "createdAt": "2020-10-27T12:44:03Z", "path": "src/main/java/org/opentripplanner/routing/algorithm/RoutingWorker.java", "diffHunk": "@@ -63,7 +63,7 @@\n      * and would also need to board trips starting tomorrow. If a search window that lasts more than\n      * a day is used, this will need to be increased.\n      */\n-    private static final int ADDITIONAL_SEARCH_DAYS_AFTER_TODAY = 1;\n+    private static final int ADDITIONAL_SEARCH_DAYS_AFTER_TODAY = 2;", "originalCommit": "ad73b716cca0d1799d60257b6d7652284bceeaf2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQxMDUwOA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3222#discussion_r513410508", "bodyText": "I did some test searches within Oslo, and the variance between searches is much higher than the variance between 1 and 2 additional search days.\nThe search time increased about 5% for long searches (Oslo - Trondheim). Even increasing the additional search days to 7 only increased the search time of long searches by about 15%.\nHow we filter trips by running period is something we could tune more in the future. This structure allows us to select trips between two exact DateTimes, and these could be set per request (for example based on distance).", "author": "gmellemstrand", "createdAt": "2020-10-28T12:42:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY2MDMwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3NDA1Nw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3222#discussion_r513574057", "bodyText": "Great, the numbers are in the expected range and it would be easy to make this configurable in the future. One thing you can consider is to put it in the RoutingRequest(Internal). Then it would be configurable, but not available on he APIs.", "author": "t2gran", "createdAt": "2020-10-28T16:11:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY2MDMwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcyOTAwNQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3222#discussion_r512729005", "bodyText": "We should not pollute the main code with test code if not absolutely necessary. So can this be made to the test that uses it, and then use the public constructor. Delete the private constructor.\nThis method should also be renamed, it does not get anything it create a ne instance.\nIt should also be moved after the constructors.", "author": "t2gran", "createdAt": "2020-10-27T14:16:01Z", "path": "src/main/java/org/opentripplanner/routing/algorithm/raptor/transit/TripPatternForDate.java", "diffHunk": "@@ -26,10 +29,56 @@\n     /** The date for which the filtering was performed. */\n     private final LocalDate localDate;\n \n-    public TripPatternForDate(TripPatternWithRaptorStopIndexes tripPattern, TripTimes[] tripTimes, LocalDate localDate) {\n+    /**\n+     * The first departure time of the first trip.\n+     */\n+    private final LocalDateTime startOfRunningPeriod;\n+\n+    /**\n+     * The last arrival time of the last trip.\n+     */\n+    private final LocalDateTime endOfRunningPeriod;\n+\n+    public static TripPatternForDate getTripPatternForDateForTest(\n+        TripPatternWithRaptorStopIndexes tripPattern,\n+        int startSecondsOfDay,\n+        int endSecondsOfDay,\n+        LocalDate localDate\n+    ) {\n+        return new TripPatternForDate(tripPattern, startSecondsOfDay, endSecondsOfDay, localDate);\n+    }", "originalCommit": "ad73b716cca0d1799d60257b6d7652284bceeaf2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM4NDg1NQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3222#discussion_r513384855", "bodyText": "I can move the method to the test, but I'm not able to use the public constructor without constructing a TripTimes array, which in turn requires you to provide a Trip, StopTime collection and Deduplicator.", "author": "gmellemstrand", "createdAt": "2020-10-28T11:56:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcyOTAwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4NzE3Ng==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3222#discussion_r513587176", "bodyText": "Yes, you have to do that. One other thing also, when switching the the \"real\" constructor you test the calculation of the start/end time, and that should be part of the unit-test.", "author": "t2gran", "createdAt": "2020-10-28T16:28:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcyOTAwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjczMTY4MQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3222#discussion_r512731681", "bodyText": "Should be deleted.", "author": "t2gran", "createdAt": "2020-10-27T14:19:13Z", "path": "src/main/java/org/opentripplanner/routing/algorithm/raptor/transit/TripPatternForDate.java", "diffHunk": "@@ -26,10 +29,56 @@\n     /** The date for which the filtering was performed. */\n     private final LocalDate localDate;\n \n-    public TripPatternForDate(TripPatternWithRaptorStopIndexes tripPattern, TripTimes[] tripTimes, LocalDate localDate) {\n+    /**\n+     * The first departure time of the first trip.\n+     */\n+    private final LocalDateTime startOfRunningPeriod;\n+\n+    /**\n+     * The last arrival time of the last trip.\n+     */\n+    private final LocalDateTime endOfRunningPeriod;\n+\n+    public static TripPatternForDate getTripPatternForDateForTest(\n+        TripPatternWithRaptorStopIndexes tripPattern,\n+        int startSecondsOfDay,\n+        int endSecondsOfDay,\n+        LocalDate localDate\n+    ) {\n+        return new TripPatternForDate(tripPattern, startSecondsOfDay, endSecondsOfDay, localDate);\n+    }\n+\n+    public TripPatternForDate(\n+        TripPatternWithRaptorStopIndexes tripPattern,\n+        TripTimes[] tripTimes,\n+        LocalDate localDate\n+    ) {\n         this.tripPattern = tripPattern;\n         this.tripTimes = tripTimes;\n         this.localDate = localDate;\n+\n+        // These depend on the tripTimes array being sorted\n+        this.startOfRunningPeriod = localDate\n+            .atStartOfDay()\n+            .plusSeconds(tripTimes[0].getDepartureTime(0));\n+        this.endOfRunningPeriod = localDate\n+            .atStartOfDay()\n+            .plusSeconds(tripTimes[tripTimes.length - 1].getArrivalTime(\n+                tripTimes[tripTimes.length - 1].getNumStops() - 1));\n+    }\n+\n+    // For testing\n+    private TripPatternForDate(\n+        TripPatternWithRaptorStopIndexes tripPattern,\n+        int startSecondsOfDay,\n+        int endSecondsOfDay,\n+        LocalDate localDate\n+    ) {\n+        this.tripPattern = tripPattern;\n+        this.tripTimes = new TripTimes[] {null};\n+        this.localDate = localDate;\n+        this.startOfRunningPeriod = localDate.atStartOfDay().plusSeconds(startSecondsOfDay);\n+        this.endOfRunningPeriod = localDate.atStartOfDay().plusSeconds(endSecondsOfDay);", "originalCommit": "ad73b716cca0d1799d60257b6d7652284bceeaf2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM4NDk3Nw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3222#discussion_r513384977", "bodyText": "See my comment above", "author": "gmellemstrand", "createdAt": "2020-10-28T11:56:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjczMTY4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc2NDk2Nw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3222#discussion_r512764967", "bodyText": "/** The date for which the filtering was performed. */\n    private final LocalDate localDate;\n\nThe code below made me look the above field and JavaDoc. From the name and JavaDoc I can not understand what this is. The name is just the name of the type. Is this the time used to calculate all the board/alight times? In that case this is the serviceDate.", "author": "t2gran", "createdAt": "2020-10-27T14:57:40Z", "path": "src/main/java/org/opentripplanner/routing/algorithm/raptor/transit/TripPatternForDate.java", "diffHunk": "@@ -26,10 +29,56 @@\n     /** The date for which the filtering was performed. */\n     private final LocalDate localDate;\n \n-    public TripPatternForDate(TripPatternWithRaptorStopIndexes tripPattern, TripTimes[] tripTimes, LocalDate localDate) {\n+    /**", "originalCommit": "ad73b716cca0d1799d60257b6d7652284bceeaf2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM3MTUzNA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3222#discussion_r513371534", "bodyText": "Later in this PR, you are taking about \"active date\", I suggest we uses \"serviceDate\" everywhere. And define what that means in the JavaDoc on the \"localDate -> serviceDate\" above.", "author": "t2gran", "createdAt": "2020-10-28T11:32:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc2NDk2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM4NzE2Nw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3222#discussion_r513387167", "bodyText": "We can use serviceDate here, but we should look at why we have a ServiceDate class in the first place, and not just use a LocalDate. We also have a ServiceCalendarMapper class with one method that is not used, and another that maps from ServiceDate to LocalDate. If we have used LocalDate everywhere, we would not need this class.", "author": "gmellemstrand", "createdAt": "2020-10-28T12:00:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc2NDk2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU5Mzg2Nw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3222#discussion_r513593867", "bodyText": "Feel free to improve the code by using ServiceDate, using the LocalDate all over is NOT an option. That would leak the service date logic into every place dates are exposed(entire codebase) - which breaks encapsulation of the service date logic. Fixing the date logic is a bigger task and the easiest for this PR is to just move the logic to the DateMapper. A long term solution is probably to use custom types for this - after all we implements an event calendar with lots of memory optimizations to speed ut routing.", "author": "t2gran", "createdAt": "2020-10-28T16:37:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc2NDk2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc3MjEwMA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3222#discussion_r512772100", "bodyText": "If the localDate is the serviceDate then this calculation is should using the DateMapper. The DateMapper take a ZonedDateTime so I am not sure how to fix it. This calculation is not accounting for the DST, and possible have some zone issues.", "author": "t2gran", "createdAt": "2020-10-27T15:06:01Z", "path": "src/main/java/org/opentripplanner/routing/algorithm/raptor/transit/TripPatternForDate.java", "diffHunk": "@@ -26,10 +29,56 @@\n     /** The date for which the filtering was performed. */\n     private final LocalDate localDate;\n \n-    public TripPatternForDate(TripPatternWithRaptorStopIndexes tripPattern, TripTimes[] tripTimes, LocalDate localDate) {\n+    /**\n+     * The first departure time of the first trip.\n+     */\n+    private final LocalDateTime startOfRunningPeriod;\n+\n+    /**\n+     * The last arrival time of the last trip.\n+     */\n+    private final LocalDateTime endOfRunningPeriod;\n+\n+    public static TripPatternForDate getTripPatternForDateForTest(\n+        TripPatternWithRaptorStopIndexes tripPattern,\n+        int startSecondsOfDay,\n+        int endSecondsOfDay,\n+        LocalDate localDate\n+    ) {\n+        return new TripPatternForDate(tripPattern, startSecondsOfDay, endSecondsOfDay, localDate);\n+    }\n+\n+    public TripPatternForDate(\n+        TripPatternWithRaptorStopIndexes tripPattern,\n+        TripTimes[] tripTimes,\n+        LocalDate localDate\n+    ) {\n         this.tripPattern = tripPattern;\n         this.tripTimes = tripTimes;\n         this.localDate = localDate;\n+\n+        // These depend on the tripTimes array being sorted\n+        this.startOfRunningPeriod = localDate\n+            .atStartOfDay()\n+            .plusSeconds(tripTimes[0].getDepartureTime(0));", "originalCommit": "ad73b716cca0d1799d60257b6d7652284bceeaf2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM3Nzg2MA==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3222#discussion_r513377860", "bodyText": "I think this is OK when comes to TimeZone, I looked into this, and even if I diden\u00b4t find a clear statment both the doc and a small test, show that the above calculation do NOT adjust for DST at all, which is the desired logic. But we should use the DateMapper in all paces we do this kind of logic until we can refactor this and make the internal model of OTP use only one time representation (some kind of epoc  time).", "author": "t2gran", "createdAt": "2020-10-28T11:44:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc3MjEwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM4Nzc4NQ==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3222#discussion_r513387785", "bodyText": "I agree that using the DateMapper would be correct here.", "author": "gmellemstrand", "createdAt": "2020-10-28T12:01:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc3MjEwMA=="}], "type": "inlineReview"}, {"oid": "4f1a4fb8bfe7eeb9a1d24b7543b6739d6a1ef0d4", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/4f1a4fb8bfe7eeb9a1d24b7543b6739d6a1ef0d4", "message": "Move DateTime logic to DateMapper", "committedDate": "2020-10-29T16:42:57Z", "type": "commit"}, {"oid": "4d3a64ab3696c38c6ce307033eb04abfed87d5ed", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/4d3a64ab3696c38c6ce307033eb04abfed87d5ed", "message": "Remove extra constructor on TripPatternForDate and fix test", "committedDate": "2020-10-29T17:01:31Z", "type": "commit"}, {"oid": "9e6a081adbac4c6389f5b0bade7882e2a97c739c", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/9e6a081adbac4c6389f5b0bade7882e2a97c739c", "message": "Merge branch 'dev-2.x' into otp2_support_for_multi_day_trips_alternative_implementation", "committedDate": "2020-10-29T17:01:54Z", "type": "commit"}, {"oid": "3f761f86f63d7cb360af5c5b214b7e1026500479", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/3f761f86f63d7cb360af5c5b214b7e1026500479", "message": "Merge branch 'dev-2.x' into otp2_support_for_multi_day_trips_alternative_implementation", "committedDate": "2020-11-03T09:44:22Z", "type": "commit"}, {"oid": "2269d6832a3c0316d7cf396fbe7ffcfda32b87f0", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/2269d6832a3c0316d7cf396fbe7ffcfda32b87f0", "message": "Merge branch 'dev-2.x' into otp2_support_for_multi_day_trips_alternative_implementation", "committedDate": "2020-11-04T06:34:03Z", "type": "commit"}]}