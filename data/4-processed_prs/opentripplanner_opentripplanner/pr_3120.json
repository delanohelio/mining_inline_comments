{"pr_number": 3120, "pr_title": "Make the local file resolver configurable and update various documentation", "pr_createdAt": "2020-06-24T17:06:50Z", "pr_url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3120", "timeline": [{"oid": "7d852ea6a8c060cfac1e84d72af36065357743b8", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/7d852ea6a8c060cfac1e84d72af36065357743b8", "message": "Update configuration documentation for OTP2.\n - Add parameters to configure patterns for filename matching of GTFS, NETEX, OSM and DEM files.", "committedDate": "2020-06-24T13:15:27Z", "type": "commit"}, {"oid": "2f0df2fc0ae6c4e060cd857705fb880995718504", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/2f0df2fc0ae6c4e060cd857705fb880995718504", "message": "Update configuration documentation for OTP2 on Tuning itinerary filtering and improving doc on routing parameters.", "committedDate": "2020-06-24T16:43:40Z", "type": "commit"}, {"oid": "da7fc4b1a4dd0d76c8441ca53d7211f3bbfa453e", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/da7fc4b1a4dd0d76c8441ca53d7211f3bbfa453e", "message": "Update Changelog.md with item on configurable multiple data sources.", "committedDate": "2020-06-24T17:02:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwNjY4Nw==", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3120#discussion_r445406687", "bodyText": "Remove", "author": "t2gran", "createdAt": "2020-06-25T08:51:33Z", "path": "docs/Configuration.md", "diffHunk": "@@ -611,71 +700,49 @@ Finally, for each itinerary returned to the user, there is a travel duration in\n \n \n ## Tuning transit routing\n+Nested inside `transit {...}` in `router-config.json`.\n \n Some of these parameters for tuning transit routing is only available through configuration and cannot be set in the routing request. These parameters work together with the default routing request and the actual routing request.\n \n-### transit.maxNumberOfTransfers\n-This parameter is used to allocate enough memory space for Raptor. Set it to the maximum number of transfers for any given itinerary expected to be found within the entire transit network.\n-\n-**Type:** `int`  **Default value:** 12\n-\n-### transit.scheduledTripBinarySearchThreshold\n-The threshold is used to determine when to perform a binary trip schedule search to reduce the number of trips departure time lookups and comparisons. When testing with data from Entur and all of Norway as a Graph, the optimal value was around 50. Changing this may improve the performance with just a few percent.\n-\n-**Type:** `int`  **Default value:** 50\n-\n-### transit.iterationDepartureStepInSeconds\n-Step for departure times between each RangeRaptor iterations. A transit network usually uses minute resolution for its depature and arrival times. To match that, set this variable to 60 seconds.\n-\n-**Type:** `int`  **Default value:** 60\n+config key | description | value type | value default\n+---------- | ----------- | ---------- | -------------\n+`maxNumberOfTransfers` | Use this parameter to allocate enough space for Raptor. Set it to the maximum number of transfers for any given itinerary expected to be found within the entire transit network. The memory overhead of setting this higher than the maximum number of transfers is very little so it is better to set it too high then to low. | int | `12`\n+`scheduledTripBinarySearchThreshold` | The threshold is used to determine when to perform a binary trip schedule search to reduce the number of trips departure time lookups and comparisons. When testing with data from Entur and all of Norway as a Graph, the optimal value was around 50. Changing this may improve the performance with just a few percent. | int | `50`\n+`iterationDepartureStepInSeconds` | Step for departure times between each RangeRaptor iterations. A transit network usually uses minute resolution for its depature and arrival times. To match that, set this variable to 60 seconds. | int | `60`\n+`searchThreadPoolSize` | Split a travel search in smaller jobs and run them in parallel to improve performance. Use this parameter to set the total number of executable threads available across all searches. Multiple searches can run in parallel - this parameter have no effect with regard to that. If 0, no extra threads are started and the search is done in one thread. | int | `0`\n+`dynamicSearchWindow` | The dynamic search window coefficients used to calculate the EDT(earliest-departure-time), LAT(latest-arrival-time) and SW(raptor-search-window) using heuristics. | object | `null`\n+`stopTransferCost` | Use this to set a stop transfer cost for the given `TransferPriority`. The cost is applied to boarding and alighting at all stops. All stops have a transfer cost priority set, the default is `ALLOWED`. The `stopTransferCost` parameter is optional, but if listed all values must be set. | object | `null`\n \n-### transit.searchThreadPoolSize\n-Split a travel search in smaller jobs and run them in parallel to improve performance. Use this parameter to set the total number of executable threads available across all searches. Multiple searches can run in parallel - this parameter have no effect with regard to that. If 0, no extra threads are started and the search is done in one thread.\n+### Tuning transit routing - Dynamic search window\n+Nested inside `transit : { dynamicSearchWindow : { ... } }` in `router-config.json`.\n \n-**Type:** `int`  **Default value:** 0\n+config key | description | value type | value default\n+---------- | ----------- | ---------- | -------------\n+`minTripTimeCoefficient` | The coefficient to multiply with minimum travel time found using a heuristic search. This value is added to the `minWinTimeMinutes`. A value between `0.0` to `3.0` is expected to give ok results. | double | `0.75`\n+`minWinTimeMinutes` | The constant minimum number of minutes for a raptor search window. Use a value between 20-180 minutes in a normal deployment. | int | `40`\n+`maxWinTimeMinutes` | Set an upper limit to the calculation of the dynamic search window to prevent exceptionable cases to cause very long search windows. Long search windows consumes a lot of resources and may take a long time. Use this parameter to tune the desired maximum search time. | int | `180` (3 hours)\n+`stepMinutes` | The search window is rounded of to the closest multiplication of N minutes. If N=10 minutes, the search-window can be 10, 20, 30 ... minutes. It the computed search-window is 5 minutes and 17 seconds it will be rounded up to 10 minutes. | int | `10`\n+`` |  | int | ``", "originalCommit": "da7fc4b1a4dd0d76c8441ca53d7211f3bbfa453e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "58e24504147af91f8066deb8941c233f64b8f082", "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/58e24504147af91f8066deb8941c233f64b8f082", "message": "Deleted an empty table row.", "committedDate": "2020-06-25T09:08:33Z", "type": "commit"}]}