{"pr_number": 14018, "pr_title": "Add statistics handling to the Alluxio metastore support", "pr_createdAt": "2020-01-27T20:33:39Z", "pr_url": "https://github.com/prestodb/presto/pull/14018", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ3NzM0Mw==", "url": "https://github.com/prestodb/presto/pull/14018#discussion_r371477343", "bodyText": "statisticsObj -> statisticsInfo", "author": "highker", "createdAt": "2020-01-27T20:55:42Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -108,19 +114,26 @@ public AlluxioHiveMetastore(TableMasterClient client)\n     @Override\n     public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n     {\n-        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+        return ThriftMetastoreUtil.getSupportedColumnStatistics(type);\n+    }\n+\n+    private Map<String, HiveColumnStatistics> groupStatisticsByColumn(List<ColumnStatisticsInfo> statistics, OptionalLong rowCount)\n+    {\n+        return statistics.stream()\n+                .collect(toImmutableMap(ColumnStatisticsInfo::getColName, statisticsObj -> AlluxioProtoUtils.fromProto(statisticsObj.getData(), rowCount)));", "originalCommit": "973a5038d0cc37e7ccdd2c54f66accc7c30d0e6a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ3NzczOA==", "url": "https://github.com/prestodb/presto/pull/14018#discussion_r371477738", "bodyText": "nit\nTable table = getTable(databaseName, tableName).orElseThrow(() -> new TableNotFoundException(new SchemaTableName(databaseName, tableName)));", "author": "highker", "createdAt": "2020-01-27T20:56:32Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -130,9 +143,44 @@ public PartitionStatistics getTableStatistics(String databaseName, String tableN\n     @Override\n     public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n     {\n-        // TODO implement partition statistics\n-        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n-        return partitionNames.stream().collect(toImmutableMap(identity(), (p) -> PartitionStatistics.empty()));\n+        Table table = getTable(databaseName, tableName)", "originalCommit": "973a5038d0cc37e7ccdd2c54f66accc7c30d0e6a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ3ODA4OQ==", "url": "https://github.com/prestodb/presto/pull/14018#discussion_r371478089", "bodyText": "spell out colStatsMap\nnull assignment is useless", "author": "highker", "createdAt": "2020-01-27T20:57:19Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -130,9 +143,44 @@ public PartitionStatistics getTableStatistics(String databaseName, String tableN\n     @Override\n     public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n     {\n-        // TODO implement partition statistics\n-        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n-        return partitionNames.stream().collect(toImmutableMap(identity(), (p) -> PartitionStatistics.empty()));\n+        Table table = getTable(databaseName, tableName)\n+                .orElseThrow(() -> new TableNotFoundException(new SchemaTableName(databaseName, tableName)));\n+        List<String> dataColumns = table.getDataColumns().stream()\n+                .map(Column::getName)\n+                .collect(toImmutableList());\n+        List<String> partitionColumns = table.getPartitionColumns().stream()\n+                .map(Column::getName)\n+                .collect(toImmutableList());\n+\n+        Map<String, HiveBasicStatistics> partitionBasicStatistics = getPartitionsByNames(databaseName, tableName, ImmutableList.copyOf(partitionNames)).entrySet().stream()\n+                .filter(entry -> entry.getValue().isPresent())\n+                .collect(toImmutableMap(\n+                        entry -> FileUtils.makePartName(partitionColumns, entry.getValue().get().getValues()),\n+                        entry -> getHiveBasicStatistics(entry.getValue().get().getParameters())));\n+\n+        Map<String, OptionalLong> partitionRowCounts = partitionBasicStatistics.entrySet().stream()\n+                .collect(toImmutableMap(Map.Entry::getKey, entry -> entry.getValue().getRowCount()));\n+\n+        Map<String, List<ColumnStatisticsInfo>> colStatsMap = null;", "originalCommit": "973a5038d0cc37e7ccdd2c54f66accc7c30d0e6a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1NDY4MQ==", "url": "https://github.com/prestodb/presto/pull/14018#discussion_r371554681", "bodyText": "one param per line", "author": "highker", "createdAt": "2020-01-28T00:20:16Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -130,9 +143,44 @@ public PartitionStatistics getTableStatistics(String databaseName, String tableN\n     @Override\n     public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n     {\n-        // TODO implement partition statistics\n-        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n-        return partitionNames.stream().collect(toImmutableMap(identity(), (p) -> PartitionStatistics.empty()));\n+        Table table = getTable(databaseName, tableName)\n+                .orElseThrow(() -> new TableNotFoundException(new SchemaTableName(databaseName, tableName)));\n+        List<String> dataColumns = table.getDataColumns().stream()\n+                .map(Column::getName)\n+                .collect(toImmutableList());\n+        List<String> partitionColumns = table.getPartitionColumns().stream()\n+                .map(Column::getName)\n+                .collect(toImmutableList());\n+\n+        Map<String, HiveBasicStatistics> partitionBasicStatistics = getPartitionsByNames(databaseName, tableName, ImmutableList.copyOf(partitionNames)).entrySet().stream()\n+                .filter(entry -> entry.getValue().isPresent())\n+                .collect(toImmutableMap(\n+                        entry -> FileUtils.makePartName(partitionColumns, entry.getValue().get().getValues()),\n+                        entry -> getHiveBasicStatistics(entry.getValue().get().getParameters())));\n+\n+        Map<String, OptionalLong> partitionRowCounts = partitionBasicStatistics.entrySet().stream()\n+                .collect(toImmutableMap(Map.Entry::getKey, entry -> entry.getValue().getRowCount()));\n+\n+        Map<String, List<ColumnStatisticsInfo>> colStatsMap = null;\n+        try {\n+            colStatsMap = client.getPartitionColumnStatistics(table.getDatabaseName(), table.getTableName(),", "originalCommit": "973a5038d0cc37e7ccdd2c54f66accc7c30d0e6a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1NDcxNA==", "url": "https://github.com/prestodb/presto/pull/14018#discussion_r371554714", "bodyText": "break a line", "author": "highker", "createdAt": "2020-01-28T00:20:23Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -130,9 +143,44 @@ public PartitionStatistics getTableStatistics(String databaseName, String tableN\n     @Override\n     public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n     {\n-        // TODO implement partition statistics\n-        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n-        return partitionNames.stream().collect(toImmutableMap(identity(), (p) -> PartitionStatistics.empty()));\n+        Table table = getTable(databaseName, tableName)\n+                .orElseThrow(() -> new TableNotFoundException(new SchemaTableName(databaseName, tableName)));\n+        List<String> dataColumns = table.getDataColumns().stream()\n+                .map(Column::getName)\n+                .collect(toImmutableList());\n+        List<String> partitionColumns = table.getPartitionColumns().stream()\n+                .map(Column::getName)\n+                .collect(toImmutableList());\n+\n+        Map<String, HiveBasicStatistics> partitionBasicStatistics = getPartitionsByNames(databaseName, tableName, ImmutableList.copyOf(partitionNames)).entrySet().stream()\n+                .filter(entry -> entry.getValue().isPresent())\n+                .collect(toImmutableMap(\n+                        entry -> FileUtils.makePartName(partitionColumns, entry.getValue().get().getValues()),\n+                        entry -> getHiveBasicStatistics(entry.getValue().get().getParameters())));\n+\n+        Map<String, OptionalLong> partitionRowCounts = partitionBasicStatistics.entrySet().stream()\n+                .collect(toImmutableMap(Map.Entry::getKey, entry -> entry.getValue().getRowCount()));\n+\n+        Map<String, List<ColumnStatisticsInfo>> colStatsMap = null;\n+        try {\n+            colStatsMap = client.getPartitionColumnStatistics(table.getDatabaseName(), table.getTableName(),\n+                    partitionBasicStatistics.keySet().stream().collect(toImmutableList()), dataColumns);\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }", "originalCommit": "973a5038d0cc37e7ccdd2c54f66accc7c30d0e6a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3a929bebb3ace8f9bf823927094eb8c2d6a6c618", "url": "https://github.com/prestodb/presto/commit/3a929bebb3ace8f9bf823927094eb8c2d6a6c618", "message": "Add statistics handling to the Alluxio metastore support\n\nCo-authored-by: David Zhu <david@alluxio.com>", "committedDate": "2020-01-28T00:55:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3MTkwMA==", "url": "https://github.com/prestodb/presto/pull/14018#discussion_r371971900", "bodyText": "No need to have this. Use makePartName from MetastoreUtil instead of FileUtils.makePartName", "author": "highker", "createdAt": "2020-01-28T18:14:08Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -130,9 +143,47 @@ public PartitionStatistics getTableStatistics(String databaseName, String tableN\n     @Override\n     public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n     {\n-        // TODO implement partition statistics\n-        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n-        return partitionNames.stream().collect(toImmutableMap(identity(), (p) -> PartitionStatistics.empty()));\n+        Table table = getTable(databaseName, tableName).orElseThrow(() -> new TableNotFoundException(new SchemaTableName(databaseName, tableName)));\n+        List<String> dataColumns = table.getDataColumns().stream()\n+                .map(Column::getName)\n+                .collect(toImmutableList());\n+        List<String> partitionColumns = table.getPartitionColumns().stream()", "originalCommit": "3a929bebb3ace8f9bf823927094eb8c2d6a6c618", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3NTA5MA==", "url": "https://github.com/prestodb/presto/pull/14018#discussion_r371975090", "bodyText": "move this closer to where it is used.", "author": "highker", "createdAt": "2020-01-28T18:20:17Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -130,9 +143,47 @@ public PartitionStatistics getTableStatistics(String databaseName, String tableN\n     @Override\n     public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n     {\n-        // TODO implement partition statistics\n-        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n-        return partitionNames.stream().collect(toImmutableMap(identity(), (p) -> PartitionStatistics.empty()));\n+        Table table = getTable(databaseName, tableName).orElseThrow(() -> new TableNotFoundException(new SchemaTableName(databaseName, tableName)));\n+        List<String> dataColumns = table.getDataColumns().stream()", "originalCommit": "3a929bebb3ace8f9bf823927094eb8c2d6a6c618", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3NTM2Ng==", "url": "https://github.com/prestodb/presto/pull/14018#discussion_r371975366", "bodyText": "break line after this", "author": "highker", "createdAt": "2020-01-28T18:20:52Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -130,9 +143,47 @@ public PartitionStatistics getTableStatistics(String databaseName, String tableN\n     @Override\n     public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n     {\n-        // TODO implement partition statistics\n-        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n-        return partitionNames.stream().collect(toImmutableMap(identity(), (p) -> PartitionStatistics.empty()));\n+        Table table = getTable(databaseName, tableName).orElseThrow(() -> new TableNotFoundException(new SchemaTableName(databaseName, tableName)));\n+        List<String> dataColumns = table.getDataColumns().stream()\n+                .map(Column::getName)\n+                .collect(toImmutableList());\n+        List<String> partitionColumns = table.getPartitionColumns().stream()\n+                .map(Column::getName)\n+                .collect(toImmutableList());\n+\n+        Map<String, HiveBasicStatistics> partitionBasicStatistics = getPartitionsByNames(databaseName, tableName, ImmutableList.copyOf(partitionNames)).entrySet().stream()\n+                .filter(entry -> entry.getValue().isPresent())\n+                .collect(toImmutableMap(\n+                        entry -> FileUtils.makePartName(partitionColumns, entry.getValue().get().getValues()),\n+                        entry -> getHiveBasicStatistics(entry.getValue().get().getParameters())));\n+\n+        Map<String, OptionalLong> partitionRowCounts = partitionBasicStatistics.entrySet().stream()\n+                .collect(toImmutableMap(Map.Entry::getKey, entry -> entry.getValue().getRowCount()));\n+\n+        Map<String, List<ColumnStatisticsInfo>> columnStats;\n+        try {\n+            columnStats = client.getPartitionColumnStatistics(\n+                    table.getDatabaseName(),\n+                    table.getTableName(),\n+                    partitionBasicStatistics.keySet().stream()\n+                            .collect(toImmutableList()), dataColumns);\n+        }\n+        catch (AlluxioStatusException e) {\n+            throw new PrestoException(HIVE_METASTORE_ERROR, e);\n+        }\n+\n+        Map<String, Map<String, HiveColumnStatistics>> partitionColumnStatistics = columnStats.entrySet().stream()\n+                .filter(entry -> !entry.getValue().isEmpty())\n+                .collect(toImmutableMap(\n+                        Map.Entry::getKey,\n+                        entry -> groupStatisticsByColumn(entry.getValue(), partitionRowCounts.getOrDefault(entry.getKey(), OptionalLong.empty()))));", "originalCommit": "3a929bebb3ace8f9bf823927094eb8c2d6a6c618", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3NTcxMg==", "url": "https://github.com/prestodb/presto/pull/14018#discussion_r371975712", "bodyText": "columnStatistics", "author": "highker", "createdAt": "2020-01-28T18:21:34Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -108,19 +114,26 @@ public AlluxioHiveMetastore(TableMasterClient client)\n     @Override\n     public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n     {\n-        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+        return ThriftMetastoreUtil.getSupportedColumnStatistics(type);\n+    }\n+\n+    private Map<String, HiveColumnStatistics> groupStatisticsByColumn(List<ColumnStatisticsInfo> statistics, OptionalLong rowCount)\n+    {\n+        return statistics.stream()\n+                .collect(toImmutableMap(ColumnStatisticsInfo::getColName, statisticsInfo -> AlluxioProtoUtils.fromProto(statisticsInfo.getData(), rowCount)));\n     }\n \n     @Override\n     public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n     {\n         try {\n-            Table table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n-                    HIVE_METASTORE_ERROR,\n-                    String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n-            HiveBasicStatistics basicStats = ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n-            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n-            return new PartitionStatistics(basicStats, ImmutableMap.of());\n+            Table table = getTable(databaseName, tableName).orElseThrow(\n+                    () -> new PrestoException(HIVE_METASTORE_ERROR, String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats = getHiveBasicStatistics(table.getParameters());\n+            List<Column> columns = table.getPartitionColumns();\n+            List<String> columnNames = columns.stream().map(Column::getName).collect(toImmutableList());\n+            List<ColumnStatisticsInfo> colStatsList = client.getTableColumnStatistics(table.getDatabaseName(), table.getTableName(), columnNames);", "originalCommit": "3a929bebb3ace8f9bf823927094eb8c2d6a6c618", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3NTk1MQ==", "url": "https://github.com/prestodb/presto/pull/14018#discussion_r371975951", "bodyText": "basicStatistics", "author": "highker", "createdAt": "2020-01-28T18:22:04Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -108,19 +114,26 @@ public AlluxioHiveMetastore(TableMasterClient client)\n     @Override\n     public Set<ColumnStatisticType> getSupportedColumnStatistics(Type type)\n     {\n-        throw new UnsupportedOperationException(\"getSupportedColumnStatistics is not supported in AlluxioHiveMetastore\");\n+        return ThriftMetastoreUtil.getSupportedColumnStatistics(type);\n+    }\n+\n+    private Map<String, HiveColumnStatistics> groupStatisticsByColumn(List<ColumnStatisticsInfo> statistics, OptionalLong rowCount)\n+    {\n+        return statistics.stream()\n+                .collect(toImmutableMap(ColumnStatisticsInfo::getColName, statisticsInfo -> AlluxioProtoUtils.fromProto(statisticsInfo.getData(), rowCount)));\n     }\n \n     @Override\n     public PartitionStatistics getTableStatistics(String databaseName, String tableName)\n     {\n         try {\n-            Table table = getTable(databaseName, tableName).orElseThrow(() -> new PrestoException(\n-                    HIVE_METASTORE_ERROR,\n-                    String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n-            HiveBasicStatistics basicStats = ThriftMetastoreUtil.getHiveBasicStatistics(table.getParameters());\n-            // TODO implement logic to populate Map<string, HiveColumnStatistics>\n-            return new PartitionStatistics(basicStats, ImmutableMap.of());\n+            Table table = getTable(databaseName, tableName).orElseThrow(\n+                    () -> new PrestoException(HIVE_METASTORE_ERROR, String.format(\"Could not retrieve table %s.%s\", databaseName, tableName)));\n+            HiveBasicStatistics basicStats = getHiveBasicStatistics(table.getParameters());", "originalCommit": "3a929bebb3ace8f9bf823927094eb8c2d6a6c618", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3NjU1OA==", "url": "https://github.com/prestodb/presto/pull/14018#discussion_r371976558", "bodyText": "the formatting is not aligned\n            columnStats = client.getPartitionColumnStatistics(\n                    table.getDatabaseName(),\n                    table.getTableName(),\n                    partitionBasicStatistics.keySet().stream().collect(toImmutableList()),\n                    dataColumns);", "author": "highker", "createdAt": "2020-01-28T18:23:17Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -130,9 +143,47 @@ public PartitionStatistics getTableStatistics(String databaseName, String tableN\n     @Override\n     public Map<String, PartitionStatistics> getPartitionStatistics(String databaseName, String tableName, Set<String> partitionNames)\n     {\n-        // TODO implement partition statistics\n-        // currently returns a map of partitionName to empty statistics to satisfy presto requirements\n-        return partitionNames.stream().collect(toImmutableMap(identity(), (p) -> PartitionStatistics.empty()));\n+        Table table = getTable(databaseName, tableName).orElseThrow(() -> new TableNotFoundException(new SchemaTableName(databaseName, tableName)));\n+        List<String> dataColumns = table.getDataColumns().stream()\n+                .map(Column::getName)\n+                .collect(toImmutableList());\n+        List<String> partitionColumns = table.getPartitionColumns().stream()\n+                .map(Column::getName)\n+                .collect(toImmutableList());\n+\n+        Map<String, HiveBasicStatistics> partitionBasicStatistics = getPartitionsByNames(databaseName, tableName, ImmutableList.copyOf(partitionNames)).entrySet().stream()\n+                .filter(entry -> entry.getValue().isPresent())\n+                .collect(toImmutableMap(\n+                        entry -> FileUtils.makePartName(partitionColumns, entry.getValue().get().getValues()),\n+                        entry -> getHiveBasicStatistics(entry.getValue().get().getParameters())));\n+\n+        Map<String, OptionalLong> partitionRowCounts = partitionBasicStatistics.entrySet().stream()\n+                .collect(toImmutableMap(Map.Entry::getKey, entry -> entry.getValue().getRowCount()));\n+\n+        Map<String, List<ColumnStatisticsInfo>> columnStats;\n+        try {\n+            columnStats = client.getPartitionColumnStatistics(", "originalCommit": "3a929bebb3ace8f9bf823927094eb8c2d6a6c618", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3ODMyOA==", "url": "https://github.com/prestodb/presto/pull/14018#discussion_r371978328", "bodyText": "Is alluxio metastore a thrift-based metastore? If not, shall we restructure the util classes so that this class does not depend on ThriftMetastoreUtil? MetastoreUtil might be the right place to host some helpers.", "author": "highker", "createdAt": "2020-01-28T18:26:33Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -32,6 +34,8 @@\n import com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil;", "originalCommit": "3a929bebb3ace8f9bf823927094eb8c2d6a6c618", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk4MDAyMA==", "url": "https://github.com/prestodb/presto/pull/14018#discussion_r371980020", "bodyText": "Move private functions to the end of a class. Move public ones to the beginning.", "author": "highker", "createdAt": "2020-01-28T18:29:51Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java", "diffHunk": "@@ -113,6 +143,96 @@ private static SortingColumn fromProto(alluxio.grpc.table.layout.hive.SortingCol\n         return Optional.of(new HiveBucketProperty(property.getBucketedByList(), (int) property.getBucketCount(), sortedBy));\n     }\n \n+    private static Optional<BigDecimal> fromMetastoreDecimal(@Nullable Decimal decimal)", "originalCommit": "3a929bebb3ace8f9bf823927094eb8c2d6a6c618", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk4MDc4OA==", "url": "https://github.com/prestodb/presto/pull/14018#discussion_r371980788", "bodyText": "redundant", "author": "highker", "createdAt": "2020-01-28T18:31:26Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioProtoUtils.java", "diffHunk": "@@ -113,6 +143,96 @@ private static SortingColumn fromProto(alluxio.grpc.table.layout.hive.SortingCol\n         return Optional.of(new HiveBucketProperty(property.getBucketedByList(), (int) property.getBucketCount(), sortedBy));\n     }\n \n+    private static Optional<BigDecimal> fromMetastoreDecimal(@Nullable Decimal decimal)\n+    {\n+        if (decimal == null) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(new BigDecimal(new BigInteger(decimal.getUnscaled().toByteArray()), decimal.getScale()));\n+    }\n+\n+    private static Optional<LocalDate> fromMetastoreDate(@Nullable Date date)\n+    {\n+        if (date == null) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(LocalDate.ofEpochDay(date.getDaysSinceEpoch()));\n+    }\n+\n+    public static HiveColumnStatistics fromProto(ColumnStatisticsData columnStatistics, OptionalLong rowCount)\n+    {\n+        if (columnStatistics.hasLongStats()) {\n+            LongColumnStatsData longStatsData = columnStatistics.getLongStats();\n+            OptionalLong min = longStatsData.hasLowValue() ? OptionalLong.of(longStatsData.getLowValue()) : OptionalLong.empty();\n+            OptionalLong max = longStatsData.hasHighValue() ? OptionalLong.of(longStatsData.getHighValue()) : OptionalLong.empty();\n+            OptionalLong nullsCount = longStatsData.hasNumNulls() ? fromMetastoreNullsCount(longStatsData.getNumNulls()) : OptionalLong.empty();\n+            OptionalLong distinctValuesCount = longStatsData.hasNumDistincts() ? OptionalLong.of(longStatsData.getNumDistincts()) : OptionalLong.empty();\n+            return createIntegerColumnStatistics(min, max, nullsCount, fromMetastoreDistinctValuesCount(distinctValuesCount, nullsCount, rowCount));\n+        }\n+        if (columnStatistics.hasDoubleStats()) {\n+            DoubleColumnStatsData doubleStatsData = columnStatistics.getDoubleStats();\n+            OptionalDouble min = doubleStatsData.hasLowValue() ? OptionalDouble.of(doubleStatsData.getLowValue()) : OptionalDouble.empty();\n+            OptionalDouble max = doubleStatsData.hasHighValue() ? OptionalDouble.of(doubleStatsData.getHighValue()) : OptionalDouble.empty();\n+            OptionalLong nullsCount = doubleStatsData.hasNumNulls() ? fromMetastoreNullsCount(doubleStatsData.getNumNulls()) : OptionalLong.empty();\n+            OptionalLong distinctValuesCount = doubleStatsData.hasNumDistincts() ? OptionalLong.of(doubleStatsData.getNumDistincts()) : OptionalLong.empty();\n+            return createDoubleColumnStatistics(min, max, nullsCount, fromMetastoreDistinctValuesCount(distinctValuesCount, nullsCount, rowCount));\n+        }\n+        if (columnStatistics.hasDecimalStats()) {\n+            DecimalColumnStatsData decimalStatsData = columnStatistics.getDecimalStats();\n+            Optional<BigDecimal> min = decimalStatsData.hasLowValue() ? fromMetastoreDecimal(decimalStatsData.getLowValue()) : Optional.empty();\n+            Optional<BigDecimal> max = decimalStatsData.hasHighValue() ? fromMetastoreDecimal(decimalStatsData.getHighValue()) : Optional.empty();\n+            OptionalLong nullsCount = decimalStatsData.hasNumNulls() ? fromMetastoreNullsCount(decimalStatsData.getNumNulls()) : OptionalLong.empty();\n+            OptionalLong distinctValuesCount = decimalStatsData.hasNumDistincts() ? OptionalLong.of(decimalStatsData.getNumDistincts()) : OptionalLong.empty();\n+            return createDecimalColumnStatistics(min, max, nullsCount, fromMetastoreDistinctValuesCount(distinctValuesCount, nullsCount, rowCount));\n+        }\n+        if (columnStatistics.hasDateStats()) {\n+            DateColumnStatsData dateStatsData = columnStatistics.getDateStats();\n+            Optional<LocalDate> min = dateStatsData.hasLowValue() ? fromMetastoreDate(dateStatsData.getLowValue()) : Optional.empty();\n+            Optional<LocalDate> max = dateStatsData.hasHighValue() ? fromMetastoreDate(dateStatsData.getHighValue()) : Optional.empty();\n+            OptionalLong nullsCount = dateStatsData.hasNumNulls() ? fromMetastoreNullsCount(dateStatsData.getNumNulls()) : OptionalLong.empty();\n+            OptionalLong distinctValuesCount = dateStatsData.hasNumDistincts() ? OptionalLong.of(dateStatsData.getNumDistincts()) : OptionalLong.empty();\n+            return createDateColumnStatistics(min, max, nullsCount, fromMetastoreDistinctValuesCount(distinctValuesCount, nullsCount, rowCount));\n+        }\n+        if (columnStatistics.hasBooleanStats()) {\n+            BooleanColumnStatsData booleanStatsData = columnStatistics.getBooleanStats();\n+            OptionalLong trueCount = OptionalLong.empty();\n+            OptionalLong falseCount = OptionalLong.empty();\n+            if (booleanStatsData.hasNumTrues() && booleanStatsData.hasNumFalses() && (booleanStatsData.getNumFalses() != -1)) {\n+                trueCount = OptionalLong.of(booleanStatsData.getNumTrues());\n+                falseCount = OptionalLong.of(booleanStatsData.getNumFalses());\n+            }\n+            return createBooleanColumnStatistics(\n+                    trueCount,\n+                    falseCount,\n+                    booleanStatsData.hasNumNulls() ? fromMetastoreNullsCount(booleanStatsData.getNumNulls()) : OptionalLong.empty());\n+        }\n+        if (columnStatistics.hasStringStats()) {\n+            StringColumnStatsData stringStatsData = columnStatistics.getStringStats();\n+            OptionalLong maxColumnLength = stringStatsData.hasMaxColLen() ? OptionalLong.of(stringStatsData.getMaxColLen()) : OptionalLong.empty();\n+            OptionalDouble averageColumnLength = stringStatsData.hasAvgColLen() ? OptionalDouble.of(stringStatsData.getAvgColLen()) : OptionalDouble.empty();\n+            OptionalLong nullsCount = stringStatsData.hasNumNulls() ? fromMetastoreNullsCount(stringStatsData.getNumNulls()) : OptionalLong.empty();\n+            OptionalLong distinctValuesCount = stringStatsData.hasNumDistincts() ? OptionalLong.of(stringStatsData.getNumDistincts()) : OptionalLong.empty();\n+            return createStringColumnStatistics(\n+                    maxColumnLength,\n+                    getTotalSizeInBytes(averageColumnLength, rowCount, nullsCount),\n+                    nullsCount,\n+                    fromMetastoreDistinctValuesCount(distinctValuesCount, nullsCount, rowCount));\n+        }\n+        if (columnStatistics.hasBinaryStats()) {\n+            BinaryColumnStatsData binaryStatsData = columnStatistics.getBinaryStats();\n+            OptionalLong maxColumnLength = binaryStatsData.hasMaxColLen() ? OptionalLong.of(binaryStatsData.getMaxColLen()) : OptionalLong.empty();\n+            OptionalDouble averageColumnLength = binaryStatsData.hasAvgColLen() ? OptionalDouble.of(binaryStatsData.getAvgColLen()) : OptionalDouble.empty();\n+            OptionalLong nullsCount = binaryStatsData.hasNumNulls() ? fromMetastoreNullsCount(binaryStatsData.getNumNulls()) : OptionalLong.empty();\n+            return createBinaryColumnStatistics(\n+                    maxColumnLength,\n+                    getTotalSizeInBytes(averageColumnLength, rowCount, nullsCount),\n+                    nullsCount);\n+        }\n+        else {", "originalCommit": "3a929bebb3ace8f9bf823927094eb8c2d6a6c618", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk4MTQzNg==", "url": "https://github.com/prestodb/presto/pull/14018#discussion_r371981436", "bodyText": "move to metastoreutil", "author": "highker", "createdAt": "2020-01-28T18:32:29Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -599,15 +599,15 @@ public static OptionalLong getTotalSizeInBytes(OptionalDouble averageColumnLengt\n     /**\n      * Hive calculates NDV considering null as a distinct value\n      */\n-    private static OptionalLong fromMetastoreDistinctValuesCount(OptionalLong distinctValuesCount, OptionalLong nullsCount, OptionalLong rowCount)\n+    public static OptionalLong fromMetastoreDistinctValuesCount(OptionalLong distinctValuesCount, OptionalLong nullsCount, OptionalLong rowCount)", "originalCommit": "3a929bebb3ace8f9bf823927094eb8c2d6a6c618", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ad6e95dc145b4f8cfd9b521af769817127ad9132", "url": "https://github.com/prestodb/presto/commit/ad6e95dc145b4f8cfd9b521af769817127ad9132", "message": "Add statistics handling to the Alluxio metastore support\n\nCo-authored-by: David Zhu <david@alluxio.com>", "committedDate": "2020-01-30T22:50:47Z", "type": "forcePushed"}, {"oid": "f5608690eff7caea11487e741c2661525be45825", "url": "https://github.com/prestodb/presto/commit/f5608690eff7caea11487e741c2661525be45825", "message": "Add statistics handling to the Alluxio metastore support\n\nCo-authored-by: David Zhu <david@alluxio.com>", "committedDate": "2020-01-31T15:51:16Z", "type": "forcePushed"}, {"oid": "22684d111d31340d820f9af13834cfcf516cac15", "url": "https://github.com/prestodb/presto/commit/22684d111d31340d820f9af13834cfcf516cac15", "message": "Add statistics handling to the Alluxio metastore support\n\nCo-authored-by: David Zhu <david@alluxio.com>", "committedDate": "2020-01-31T15:53:28Z", "type": "forcePushed"}, {"oid": "819acc4222576982ff30ea3ae64492c769faed4d", "url": "https://github.com/prestodb/presto/commit/819acc4222576982ff30ea3ae64492c769faed4d", "message": "Add statistics handling to the Alluxio metastore support\n\nCo-authored-by: David Zhu <david@alluxio.com>", "committedDate": "2020-01-31T15:56:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NjU2OQ==", "url": "https://github.com/prestodb/presto/pull/14018#discussion_r373756569", "bodyText": "Same, it's better not to depend on thrift utils for non-thrift metastore.", "author": "highker", "createdAt": "2020-02-01T04:16:25Z", "path": "presto-hive-metastore/src/main/java/com/facebook/presto/hive/metastore/alluxio/AlluxioHiveMetastore.java", "diffHunk": "@@ -45,15 +49,16 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.OptionalLong;\n import java.util.Set;\n import java.util.function.Function;\n \n import static com.facebook.presto.hive.MetastoreErrorCode.HIVE_METASTORE_ERROR;\n import static com.facebook.presto.hive.metastore.MetastoreUtil.convertPredicateToParts;\n+import static com.facebook.presto.hive.metastore.thrift.ThriftMetastoreUtil.getHiveBasicStatistics;", "originalCommit": "819acc4222576982ff30ea3ae64492c769faed4d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3cf71d80194c16aee87584d10ed2662d062a3271", "url": "https://github.com/prestodb/presto/commit/3cf71d80194c16aee87584d10ed2662d062a3271", "message": "Add statistics handling to the Alluxio metastore support\n\nCo-authored-by: David Zhu <david@alluxio.com>", "committedDate": "2020-02-01T18:57:25Z", "type": "forcePushed"}, {"oid": "80adc5aae50df3db412ef4e3c36a43ad07318795", "url": "https://github.com/prestodb/presto/commit/80adc5aae50df3db412ef4e3c36a43ad07318795", "message": "Add statistics handling to the Alluxio metastore support\n\nCo-authored-by: David Zhu <david@alluxio.com>", "committedDate": "2020-02-01T20:55:01Z", "type": "commit"}, {"oid": "80adc5aae50df3db412ef4e3c36a43ad07318795", "url": "https://github.com/prestodb/presto/commit/80adc5aae50df3db412ef4e3c36a43ad07318795", "message": "Add statistics handling to the Alluxio metastore support\n\nCo-authored-by: David Zhu <david@alluxio.com>", "committedDate": "2020-02-01T20:55:01Z", "type": "forcePushed"}]}