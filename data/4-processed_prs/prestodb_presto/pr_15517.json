{"pr_number": 15517, "pr_title": "Avoid costly resizes of the addresses dynamic array in PagesIndex", "pr_createdAt": "2020-12-11T17:09:51Z", "pr_url": "https://github.com/prestodb/presto/pull/15517", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIzMzIwMQ==", "url": "https://github.com/prestodb/presto/pull/15517#discussion_r541233201", "bodyText": "Reorder to put it below other final members?", "author": "viczhang861", "createdAt": "2020-12-11T20:08:06Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/PagesIndex.java", "diffHunk": "@@ -84,7 +84,7 @@\n     private final boolean groupByUsesEqualTo;\n \n     private final List<Type> types;\n-    private final LongArrayList valueAddresses;\n+    private LongBigArray valueAddresses;", "originalCommit": "d7d01e635f5a96718cb54c6d191a75591579671f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAxMjI2MQ==", "url": "https://github.com/prestodb/presto/pull/15517#discussion_r547012261", "bodyText": "Made it final", "author": "arhimondr", "createdAt": "2020-12-22T01:15:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIzMzIwMQ=="}], "type": "inlineReview"}, {"oid": "9f4c7136df4d1b34198471e6a3fc3dab7c4ba94c", "url": "https://github.com/prestodb/presto/commit/9f4c7136df4d1b34198471e6a3fc3dab7c4ba94c", "message": "Improve LongBigArray\n\n- Make segment size configurable\n- Expand segments array exponentially\n\nThis optimization is needed to make sure the cost of idirection is minimized by making the\nindirection array as small as possible, so it fits nicely in the CPU caches", "committedDate": "2020-12-11T20:19:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3NDA3Nw==", "url": "https://github.com/prestodb/presto/pull/15517#discussion_r541274077", "bodyText": "Typical array expanding is based on existing size Math.max(toIntExact(round(array.length * 1.5)), requiredSegments)", "author": "viczhang861", "createdAt": "2020-12-11T20:49:17Z", "path": "presto-array/src/main/java/com/facebook/presto/array/LongBigArray.java", "diffHunk": "@@ -125,7 +147,7 @@ private void grow(long length)\n \n         // grow base array if necessary\n         if (array.length < requiredSegments) {\n-            array = Arrays.copyOf(array, requiredSegments);\n+            array = Arrays.copyOf(array, toIntExact(round(requiredSegments * 1.5)));", "originalCommit": "9f4c7136df4d1b34198471e6a3fc3dab7c4ba94c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3NTg1Mg==", "url": "https://github.com/prestodb/presto/pull/15517#discussion_r541275852", "bodyText": "Wonder why 256K ?  valueAddresses.ensureCapacity(expectedPositions)", "author": "viczhang861", "createdAt": "2020-12-11T20:51:12Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/PagesIndex.java", "diffHunk": "@@ -107,7 +107,9 @@ private PagesIndex(\n         this.functionAndTypeManager = requireNonNull(functionAndTypeManager, \"functionManager is null\");\n         this.groupByUsesEqualTo = groupByUsesEqualTo;\n         this.types = ImmutableList.copyOf(requireNonNull(types, \"types is null\"));\n-        this.valueAddresses = new LongBigArray();\n+        // Take the next closed power of 2 as the segment size\n+        int segmentSize = Integer.highestOneBit(expectedPositions) << 1;\n+        this.valueAddresses = new LongBigArray(0, segmentSize);", "originalCommit": "9f4c7136df4d1b34198471e6a3fc3dab7c4ba94c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAxMjQzOA==", "url": "https://github.com/prestodb/presto/pull/15517#discussion_r547012438", "bodyText": "Done", "author": "arhimondr", "createdAt": "2020-12-22T01:15:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3NTg1Mg=="}], "type": "inlineReview"}, {"oid": "e06a68500404939b3de6084d17c77da164087409", "url": "https://github.com/prestodb/presto/commit/e06a68500404939b3de6084d17c77da164087409", "message": "Avoid costly resizes of the addresses dynamic array in PagesIndex", "committedDate": "2020-12-12T03:21:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEzNzMxNA==", "url": "https://github.com/prestodb/presto/pull/15517#discussion_r542137314", "bodyText": "convention: Rename to getRetainedSizeInBytes()?", "author": "yingsu00", "createdAt": "2020-12-14T06:18:09Z", "path": "presto-array/src/main/java/com/facebook/presto/array/AdaptiveLongBigArray.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.array;\n+\n+import io.airlift.slice.SizeOf;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.util.Arrays;\n+\n+import static io.airlift.slice.SizeOf.sizeOfLongArray;\n+import static java.lang.StrictMath.toIntExact;\n+\n+/**\n+ * This variation of BigArray is designed to expand segments up to some reasonable extend\n+ * and add more segments if the maximum segment capacity is reached\n+ * This implementation allows to keep the redirection table small so it does fit into L1 CPU cache\n+ */\n+public class AdaptiveLongBigArray\n+{\n+    // visible for testing\n+    static final int INSTANCE_SIZE = ClassLayout.parseClass(AdaptiveLongBigArray.class).instanceSize();\n+\n+    // settings are constants due to efficiency considerations\n+    static final int INITIAL_SEGMENT_LENGTH = 16 * 1024; // 128KB\n+    static final int MAX_SEGMENT_LENGTH = 32 * 1024 * 1024; // 256MB\n+    static final int MAX_SEGMENT_SIZE_IN_BYTES = toIntExact(sizeOfLongArray(MAX_SEGMENT_LENGTH));\n+    static final int INITIAL_SEGMENTS = 10;\n+    static final int SEGMENT_SHIFT = 25;\n+    static final int SEGMENT_MASK = MAX_SEGMENT_LENGTH - 1;\n+\n+    private long[][] array;\n+    private int segments;\n+    private int capacity;\n+\n+    public AdaptiveLongBigArray()\n+    {\n+        array = new long[INITIAL_SEGMENTS][];\n+    }\n+\n+    public long sizeOf()", "originalCommit": "e06a68500404939b3de6084d17c77da164087409", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEzODE1Mw==", "url": "https://github.com/prestodb/presto/pull/15517#discussion_r542138153", "bodyText": "static import sizeOf", "author": "yingsu00", "createdAt": "2020-12-14T06:20:50Z", "path": "presto-array/src/main/java/com/facebook/presto/array/AdaptiveLongBigArray.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.array;\n+\n+import io.airlift.slice.SizeOf;\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.util.Arrays;\n+\n+import static io.airlift.slice.SizeOf.sizeOfLongArray;\n+import static java.lang.StrictMath.toIntExact;\n+\n+/**\n+ * This variation of BigArray is designed to expand segments up to some reasonable extend\n+ * and add more segments if the maximum segment capacity is reached\n+ * This implementation allows to keep the redirection table small so it does fit into L1 CPU cache\n+ */\n+public class AdaptiveLongBigArray\n+{\n+    // visible for testing\n+    static final int INSTANCE_SIZE = ClassLayout.parseClass(AdaptiveLongBigArray.class).instanceSize();\n+\n+    // settings are constants due to efficiency considerations\n+    static final int INITIAL_SEGMENT_LENGTH = 16 * 1024; // 128KB\n+    static final int MAX_SEGMENT_LENGTH = 32 * 1024 * 1024; // 256MB\n+    static final int MAX_SEGMENT_SIZE_IN_BYTES = toIntExact(sizeOfLongArray(MAX_SEGMENT_LENGTH));\n+    static final int INITIAL_SEGMENTS = 10;\n+    static final int SEGMENT_SHIFT = 25;\n+    static final int SEGMENT_MASK = MAX_SEGMENT_LENGTH - 1;\n+\n+    private long[][] array;\n+    private int segments;\n+    private int capacity;\n+\n+    public AdaptiveLongBigArray()\n+    {\n+        array = new long[INITIAL_SEGMENTS][];\n+    }\n+\n+    public long sizeOf()\n+    {\n+        long result = INSTANCE_SIZE + SizeOf.sizeOf(array);", "originalCommit": "e06a68500404939b3de6084d17c77da164087409", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c9ae19fa632196646e91ff63ea63776f31b5e2b8", "url": "https://github.com/prestodb/presto/commit/c9ae19fa632196646e91ff63ea63776f31b5e2b8", "message": "Avoid costly resizes of the addresses dynamic array in PagesIndex", "committedDate": "2020-12-22T00:55:12Z", "type": "forcePushed"}, {"oid": "46bb00d9267e1e8d0965f23a13f5af77ecc9602b", "url": "https://github.com/prestodb/presto/commit/46bb00d9267e1e8d0965f23a13f5af77ecc9602b", "message": "Avoid costly resizes of the addresses dynamic array in PagesIndex", "committedDate": "2020-12-22T01:17:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1NDkxNQ==", "url": "https://github.com/prestodb/presto/pull/15517#discussion_r547554915", "bodyText": "It'll be nice to add some comments about the segments and capacity, e.g what's the unit of the capacity? And how the array is allocated.", "author": "yingsu00", "createdAt": "2020-12-22T23:25:24Z", "path": "presto-array/src/main/java/com/facebook/presto/array/AdaptiveLongBigArray.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.array;\n+\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.util.Arrays;\n+\n+import static io.airlift.slice.SizeOf.sizeOf;\n+import static io.airlift.slice.SizeOf.sizeOfLongArray;\n+\n+/**\n+ * This variation of BigArray is designed to expand segments up to some reasonable extend\n+ * and add more segments if the maximum segment capacity is reached\n+ * This implementation allows to keep the redirection table small so it does fit into L1 CPU cache\n+ */\n+public class AdaptiveLongBigArray\n+{\n+    // visible for testing\n+    static final int INSTANCE_SIZE = ClassLayout.parseClass(AdaptiveLongBigArray.class).instanceSize();\n+\n+    // settings are constants due to efficiency considerations\n+    static final int INITIAL_SEGMENT_LENGTH = 16 * 1024; // 128KB\n+    static final int MAX_SEGMENT_LENGTH = 32 * 1024 * 1024; // 256MB\n+    static final long MAX_SEGMENT_SIZE_IN_BYTES = sizeOfLongArray(MAX_SEGMENT_LENGTH);\n+    static final int INITIAL_SEGMENTS = 10;\n+    static final int SEGMENT_SHIFT = 25;\n+    static final int SEGMENT_MASK = MAX_SEGMENT_LENGTH - 1;\n+\n+    private long[][] array;\n+    private int segments;\n+    private int capacity;", "originalCommit": "46bb00d9267e1e8d0965f23a13f5af77ecc9602b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2MzM2Mw==", "url": "https://github.com/prestodb/presto/pull/15517#discussion_r547563363", "bodyText": "This can just be segmentLength *= 2; which is easier to understand. The compiler should be able to compile it to bit shifting.", "author": "yingsu00", "createdAt": "2020-12-22T23:56:35Z", "path": "presto-array/src/main/java/com/facebook/presto/array/AdaptiveLongBigArray.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.array;\n+\n+import org.openjdk.jol.info.ClassLayout;\n+\n+import java.util.Arrays;\n+\n+import static io.airlift.slice.SizeOf.sizeOf;\n+import static io.airlift.slice.SizeOf.sizeOfLongArray;\n+\n+/**\n+ * This variation of BigArray is designed to expand segments up to some reasonable extend\n+ * and add more segments if the maximum segment capacity is reached\n+ * This implementation allows to keep the redirection table small so it does fit into L1 CPU cache\n+ */\n+public class AdaptiveLongBigArray\n+{\n+    // visible for testing\n+    static final int INSTANCE_SIZE = ClassLayout.parseClass(AdaptiveLongBigArray.class).instanceSize();\n+\n+    // settings are constants due to efficiency considerations\n+    static final int INITIAL_SEGMENT_LENGTH = 16 * 1024; // 128KB\n+    static final int MAX_SEGMENT_LENGTH = 32 * 1024 * 1024; // 256MB\n+    static final long MAX_SEGMENT_SIZE_IN_BYTES = sizeOfLongArray(MAX_SEGMENT_LENGTH);\n+    static final int INITIAL_SEGMENTS = 10;\n+    static final int SEGMENT_SHIFT = 25;\n+    static final int SEGMENT_MASK = MAX_SEGMENT_LENGTH - 1;\n+\n+    private long[][] array;\n+    private int segments;\n+    private int capacity;\n+\n+    public AdaptiveLongBigArray()\n+    {\n+        array = new long[INITIAL_SEGMENTS][];\n+    }\n+\n+    public long getRetainedSizeInBytes()\n+    {\n+        long result = INSTANCE_SIZE + sizeOf(array);\n+        if (segments == 1) {\n+            result += sizeOfLongArray(array[0].length);\n+        }\n+        else if (segments > 1) {\n+            result += segments * MAX_SEGMENT_SIZE_IN_BYTES;\n+        }\n+        return result;\n+    }\n+\n+    public long get(int index)\n+    {\n+        return array[segment(index)][offset(index)];\n+    }\n+\n+    public void set(int index, long value)\n+    {\n+        array[segment(index)][offset(index)] = value;\n+    }\n+\n+    public void swap(int first, int second)\n+    {\n+        long[] firstSegment = array[segment(first)];\n+        int firstOffset = offset(first);\n+\n+        long[] secondSegment = array[segment(first)];\n+        int secondOffset = offset(second);\n+\n+        long tmp = firstSegment[firstOffset];\n+        firstSegment[firstOffset] = secondSegment[secondOffset];\n+        secondSegment[secondOffset] = tmp;\n+    }\n+\n+    public void ensureCapacity(int length)\n+    {\n+        if (capacity >= length) {\n+            return;\n+        }\n+\n+        int lastIndex = length - 1;\n+        int segment = segment(lastIndex);\n+        int offset = offset(lastIndex);\n+\n+        // expand segments array if needed\n+        if (segment >= array.length) {\n+            array = Arrays.copyOf(array, array.length * 2);\n+        }\n+\n+        if (segment == 0) {\n+            if (array[0] == null) {\n+                array[0] = new long[INITIAL_SEGMENT_LENGTH];\n+            }\n+            // expand segment if needed\n+            if (offset >= array[0].length) {\n+                int segmentLength = array[0].length;\n+                while (offset >= segmentLength) {\n+                    segmentLength <<= 1;", "originalCommit": "46bb00d9267e1e8d0965f23a13f5af77ecc9602b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3d07f43bee0330a0f81624bd3370977596260be0", "url": "https://github.com/prestodb/presto/commit/3d07f43bee0330a0f81624bd3370977596260be0", "message": "Avoid costly resizes of the addresses dynamic array in PagesIndex", "committedDate": "2020-12-23T00:16:42Z", "type": "commit"}, {"oid": "3d07f43bee0330a0f81624bd3370977596260be0", "url": "https://github.com/prestodb/presto/commit/3d07f43bee0330a0f81624bd3370977596260be0", "message": "Avoid costly resizes of the addresses dynamic array in PagesIndex", "committedDate": "2020-12-23T00:16:42Z", "type": "forcePushed"}]}