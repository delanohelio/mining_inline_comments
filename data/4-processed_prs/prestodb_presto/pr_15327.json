{"pr_number": 15327, "pr_title": "Add BigQuery Connector Support", "pr_createdAt": "2020-10-18T05:20:22Z", "pr_url": "https://github.com/prestodb/presto/pull/15327", "timeline": [{"oid": "e831c5892e012cbf4b40050e73320932df6a4a1d", "url": "https://github.com/prestodb/presto/commit/e831c5892e012cbf4b40050e73320932df6a4a1d", "message": "Add BigQuery Connector Support\n\nCo-authored-by: David Rabinowitz <davidrab@gmail.com>", "committedDate": "2020-10-18T06:04:40Z", "type": "forcePushed"}, {"oid": "03f524920caf54921471670bcde1e4e39486e5d9", "url": "https://github.com/prestodb/presto/commit/03f524920caf54921471670bcde1e4e39486e5d9", "message": "Add BigQuery Connector Support\n\nCo-authored-by: David Rabinowitz <davidrab@gmail.com>", "committedDate": "2020-10-21T06:03:50Z", "type": "forcePushed"}, {"oid": "95bf4ab8ba1835e0c75081580fc8e0c44deed379", "url": "https://github.com/prestodb/presto/commit/95bf4ab8ba1835e0c75081580fc8e0c44deed379", "message": "Add BigQuery Connector Support\n\nCo-authored-by: David Rabinowitz <davidrab@gmail.com>", "committedDate": "2020-10-27T00:08:10Z", "type": "forcePushed"}, {"oid": "bc526ee0a669c1d4da42fe7940d91443c23008d0", "url": "https://github.com/prestodb/presto/commit/bc526ee0a669c1d4da42fe7940d91443c23008d0", "message": "Add BigQuery Connector Support\n\nCo-authored-by: David Rabinowitz <davidrab@gmail.com>", "committedDate": "2020-10-27T05:15:37Z", "type": "forcePushed"}, {"oid": "786b1072c5fb2c79cb88ac18c05af75a8d5d41c2", "url": "https://github.com/prestodb/presto/commit/786b1072c5fb2c79cb88ac18c05af75a8d5d41c2", "message": "Add BigQuery Connector Support\n\nCo-authored-by: David Rabinowitz <davidrab@gmail.com>", "committedDate": "2020-10-27T05:51:50Z", "type": "forcePushed"}, {"oid": "5288d6b89bf78156c21877a5de274ea81afcc3e1", "url": "https://github.com/prestodb/presto/commit/5288d6b89bf78156c21877a5de274ea81afcc3e1", "message": "Add BigQuery Connector Support\n\nCo-authored-by: David Rabinowitz <davidrab@gmail.com>", "committedDate": "2020-10-27T18:53:31Z", "type": "forcePushed"}, {"oid": "373536f0b596549eaedc06066a1d36f9813bb151", "url": "https://github.com/prestodb/presto/commit/373536f0b596549eaedc06066a1d36f9813bb151", "message": "Add BigQuery Connector Support\n\nCo-authored-by: David Rabinowitz <davidrab@gmail.com>", "committedDate": "2020-10-28T01:36:51Z", "type": "forcePushed"}, {"oid": "9776e7c7ca1635d98631b6519a75257fc3fb73ec", "url": "https://github.com/prestodb/presto/commit/9776e7c7ca1635d98631b6519a75257fc3fb73ec", "message": "Add BigQuery Connector Support\n\nCo-authored-by: David Rabinowitz <davidrab@gmail.com>", "committedDate": "2020-11-03T04:39:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNTIxMA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r522515210", "bodyText": "shall we use a stable version, instead of beta?", "author": "zhenxiao", "createdAt": "2020-11-12T23:54:02Z", "path": "presto-bigquery/pom.xml", "diffHunk": "@@ -0,0 +1,332 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>com.facebook.presto</groupId>\n+        <artifactId>presto-root</artifactId>\n+        <version>0.244-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>presto-bigquery</artifactId>\n+    <description>Presto - Bigquery Connector</description>\n+    <packaging>presto-plugin</packaging>\n+\n+    <properties>\n+        <air.main.basedir>${project.parent.basedir}</air.main.basedir>\n+        <dep.gax.version>1.49.1</dep.gax.version>\n+        <dep.google-auth-library.version>0.18.0</dep.google-auth-library.version>\n+        <dep.google-cloud-core.version>1.91.3</dep.google-cloud-core.version>\n+    </properties>\n+\n+    <dependencyManagement>\n+        <dependencies>\n+            <dependency>\n+                <groupId>com.google.api.grpc</groupId>\n+                <artifactId>proto-google-common-protos</artifactId>\n+                <version>1.17.0</version>\n+            </dependency>\n+\n+            <dependency>\n+                <groupId>io.grpc</groupId>\n+                <artifactId>grpc-bom</artifactId>\n+                <version>1.24.1</version>\n+                <type>pom</type>\n+                <scope>import</scope>\n+            </dependency>\n+        </dependencies>\n+    </dependencyManagement>\n+\n+    <dependencies>\n+\n+        <dependency>\n+            <groupId>com.facebook.airlift</groupId>\n+            <artifactId>configuration</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.facebook.airlift</groupId>\n+            <artifactId>bootstrap</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.facebook.airlift</groupId>\n+            <artifactId>json</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.facebook.airlift</groupId>\n+            <artifactId>log</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.facebook.airlift</groupId>\n+            <artifactId>log-manager</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.google.api</groupId>\n+            <artifactId>gax</artifactId>\n+            <version>${dep.gax.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.google.api</groupId>\n+            <artifactId>gax-grpc</artifactId>\n+            <version>${dep.gax.version}</version>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>com.google.errorprone</groupId>\n+                    <artifactId>error_prone_annotations</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>io.grpc</groupId>\n+            <artifactId>grpc-api</artifactId>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>com.google.errorprone</groupId>\n+                    <artifactId>error_prone_annotations</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.google.auth</groupId>\n+            <artifactId>google-auth-library-credentials</artifactId>\n+            <version>${dep.google-auth-library.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.google.auth</groupId>\n+            <artifactId>google-auth-library-oauth2-http</artifactId>\n+            <version>${dep.google-auth-library.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.google.cloud</groupId>\n+            <artifactId>google-cloud-core</artifactId>\n+            <version>${dep.google-cloud-core.version}</version>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>com.google.errorprone</groupId>\n+                    <artifactId>error_prone_annotations</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.google.cloud</groupId>\n+            <artifactId>google-cloud-core-http</artifactId>\n+            <version>${dep.google-cloud-core.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.google.http-client</groupId>\n+            <artifactId>google-http-client</artifactId>\n+            <version>1.32.1</version>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>commons-logging</groupId>\n+                    <artifactId>commons-logging</artifactId>\n+                </exclusion>\n+                <exclusion>\n+                    <groupId>org.apache.httpcomponents</groupId>\n+                    <artifactId>httpclient</artifactId>\n+                </exclusion>\n+                <exclusion>\n+                    <groupId>org.apache.httpcomponents</groupId>\n+                    <artifactId>httpcore</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.google.api.grpc</groupId>\n+            <artifactId>proto-google-cloud-bigquerystorage-v1beta1</artifactId>\n+            <version>0.84.0</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.google.cloud</groupId>\n+            <artifactId>google-cloud-bigquery</artifactId>\n+            <version>1.101.0</version>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>com.google.guava</groupId>\n+                    <artifactId>guava</artifactId>\n+                </exclusion>\n+                <exclusion>\n+                    <groupId>com.fasterxml.jackson.core</groupId>\n+                    <artifactId>jackson-core</artifactId>\n+                </exclusion>\n+                <exclusion>\n+                    <groupId>commons-logging</groupId>\n+                    <artifactId>commons-logging</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.google.cloud</groupId>\n+            <artifactId>google-cloud-bigquerystorage</artifactId>\n+            <version>0.119.0-beta</version>", "originalCommit": "9776e7c7ca1635d98631b6519a75257fc3fb73ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4Mzk1OQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r523383959", "bodyText": "sure, switch to v1.5.6 now", "author": "fgwang7w", "createdAt": "2020-11-14T06:25:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNTIxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNTkzMQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r522515931", "bodyText": "shall we use com.facebook.presto.bigquery?\nlet's remove plugin from the path", "author": "zhenxiao", "createdAt": "2020-11-12T23:55:58Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;", "originalCommit": "9776e7c7ca1635d98631b6519a75257fc3fb73ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMDg3OQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r522520879", "bodyText": "the same for other classes", "author": "zhenxiao", "createdAt": "2020-11-13T00:11:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNTkzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4NDE2MQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r523384161", "bodyText": "I believe the naming convention was com.facebook.presto.plugin.connectorName, I find there's blackhole, geospatial, mysql, oracle, postgresql in this convention. I suggest we keep biguqery's naming as it is for now, and then have a separate PR to do cleanup for a consistent naming across all modules", "author": "fgwang7w", "createdAt": "2020-11-14T06:28:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNTkzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0MDM5Mg==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r568240392", "bodyText": "sure", "author": "zhenxiao", "createdAt": "2021-02-02T00:37:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNTkzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNjMzOQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r522516339", "bodyText": "put the comments above tableIds and datasetIds", "author": "zhenxiao", "createdAt": "2020-11-12T23:57:13Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.Dataset;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.cloud.http.BaseHttpServiceException;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterators;\n+\n+import java.util.Iterator;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.stream.StreamSupport;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.UUID.randomUUID;\n+import static java.util.stream.Collectors.joining;\n+\n+// holds caches and mappings\n+// presto converts the dataset and table names to lower case, while BigQuery is case sensitive\n+// the mappings here keep the mappings", "originalCommit": "9776e7c7ca1635d98631b6519a75257fc3fb73ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4NTUyNw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r523385527", "bodyText": "fixed", "author": "fgwang7w", "createdAt": "2020-11-14T06:44:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNjMzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNjQ1Mg==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r522516452", "bodyText": "this comment does not match the implementation", "author": "zhenxiao", "createdAt": "2020-11-12T23:57:36Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.Dataset;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.cloud.http.BaseHttpServiceException;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterators;\n+\n+import java.util.Iterator;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.stream.StreamSupport;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.UUID.randomUUID;\n+import static java.util.stream.Collectors.joining;\n+\n+// holds caches and mappings\n+// presto converts the dataset and table names to lower case, while BigQuery is case sensitive\n+// the mappings here keep the mappings\n+public class BigQueryClient\n+{\n+    private final BigQuery bigQuery;\n+    private final Optional<String> viewMaterializationProject;\n+    private final Optional<String> viewMaterializationDataset;\n+    private final ConcurrentMap<TableId, TableId> tableIds = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<DatasetId, DatasetId> datasetIds = new ConcurrentHashMap<>();\n+\n+    BigQueryClient(BigQuery bigQuery, BigQueryConfig config)\n+    {\n+        this.bigQuery = bigQuery;\n+        this.viewMaterializationProject = config.getViewMaterializationProject();\n+        this.viewMaterializationDataset = config.getViewMaterializationDataset();\n+    }\n+\n+    // return empty if no filters are used", "originalCommit": "9776e7c7ca1635d98631b6519a75257fc3fb73ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4NTUxMw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r523385513", "bodyText": "fixed", "author": "fgwang7w", "createdAt": "2020-11-14T06:44:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNjQ1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNzY3OA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r522517678", "bodyText": "wrap line 73 and 74 into a function, getTable()", "author": "zhenxiao", "createdAt": "2020-11-13T00:01:31Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.Dataset;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.cloud.http.BaseHttpServiceException;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterators;\n+\n+import java.util.Iterator;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.stream.StreamSupport;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.UUID.randomUUID;\n+import static java.util.stream.Collectors.joining;\n+\n+// holds caches and mappings\n+// presto converts the dataset and table names to lower case, while BigQuery is case sensitive\n+// the mappings here keep the mappings\n+public class BigQueryClient\n+{\n+    private final BigQuery bigQuery;\n+    private final Optional<String> viewMaterializationProject;\n+    private final Optional<String> viewMaterializationDataset;\n+    private final ConcurrentMap<TableId, TableId> tableIds = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<DatasetId, DatasetId> datasetIds = new ConcurrentHashMap<>();\n+\n+    BigQueryClient(BigQuery bigQuery, BigQueryConfig config)\n+    {\n+        this.bigQuery = bigQuery;\n+        this.viewMaterializationProject = config.getViewMaterializationProject();\n+        this.viewMaterializationDataset = config.getViewMaterializationDataset();\n+    }\n+\n+    // return empty if no filters are used\n+    private static Optional<String> createWhereClause(String[] filters)\n+    {\n+        return Optional.empty();\n+    }\n+\n+    TableInfo getTable(TableId tableId)\n+    {\n+        TableId bigQueryTableId = tableIds.get(tableId);\n+        Table table = bigQuery.getTable(bigQueryTableId != null ? bigQueryTableId : tableId);", "originalCommit": "9776e7c7ca1635d98631b6519a75257fc3fb73ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4NjUzNw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r523386537", "bodyText": "not sure what you mean \"wrap into a function\", it is a getTable method that determines the tableInfo from bigQuery using tableId  or bigQueryTableId if there's one.", "author": "fgwang7w", "createdAt": "2020-11-14T06:57:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNzY3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDMzNjU2OA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584336568", "bodyText": "When tableId is lowercase and tableIds doesn't contain the mapping, it will use the lowercase tableId in bigQuery.getTable. is this OK?", "author": "qqibrow", "createdAt": "2021-02-28T18:20:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNzY3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAxNTc2Ng==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r585015766", "bodyText": "yes because getTable may return null, it's up to the caller to decide what to do when there's no matching table", "author": "fgwang7w", "createdAt": "2021-03-01T20:09:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNzY3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxODE5OA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r522518198", "bodyText": "public?", "author": "zhenxiao", "createdAt": "2020-11-13T00:03:01Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.Dataset;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.cloud.http.BaseHttpServiceException;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterators;\n+\n+import java.util.Iterator;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.stream.StreamSupport;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.UUID.randomUUID;\n+import static java.util.stream.Collectors.joining;\n+\n+// holds caches and mappings\n+// presto converts the dataset and table names to lower case, while BigQuery is case sensitive\n+// the mappings here keep the mappings\n+public class BigQueryClient\n+{\n+    private final BigQuery bigQuery;\n+    private final Optional<String> viewMaterializationProject;\n+    private final Optional<String> viewMaterializationDataset;\n+    private final ConcurrentMap<TableId, TableId> tableIds = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<DatasetId, DatasetId> datasetIds = new ConcurrentHashMap<>();\n+\n+    BigQueryClient(BigQuery bigQuery, BigQueryConfig config)\n+    {\n+        this.bigQuery = bigQuery;\n+        this.viewMaterializationProject = config.getViewMaterializationProject();\n+        this.viewMaterializationDataset = config.getViewMaterializationDataset();\n+    }\n+\n+    // return empty if no filters are used\n+    private static Optional<String> createWhereClause(String[] filters)\n+    {\n+        return Optional.empty();\n+    }\n+\n+    TableInfo getTable(TableId tableId)", "originalCommit": "9776e7c7ca1635d98631b6519a75257fc3fb73ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxOTA3Mg==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r522519072", "bodyText": "shall we take a review of all access modifiers? we are using default everywhere", "author": "zhenxiao", "createdAt": "2020-11-13T00:05:39Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.Dataset;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.cloud.http.BaseHttpServiceException;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterators;\n+\n+import java.util.Iterator;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.stream.StreamSupport;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.UUID.randomUUID;\n+import static java.util.stream.Collectors.joining;\n+\n+// holds caches and mappings\n+// presto converts the dataset and table names to lower case, while BigQuery is case sensitive\n+// the mappings here keep the mappings\n+public class BigQueryClient\n+{\n+    private final BigQuery bigQuery;\n+    private final Optional<String> viewMaterializationProject;\n+    private final Optional<String> viewMaterializationDataset;\n+    private final ConcurrentMap<TableId, TableId> tableIds = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<DatasetId, DatasetId> datasetIds = new ConcurrentHashMap<>();\n+\n+    BigQueryClient(BigQuery bigQuery, BigQueryConfig config)\n+    {\n+        this.bigQuery = bigQuery;\n+        this.viewMaterializationProject = config.getViewMaterializationProject();\n+        this.viewMaterializationDataset = config.getViewMaterializationDataset();\n+    }\n+\n+    // return empty if no filters are used\n+    private static Optional<String> createWhereClause(String[] filters)\n+    {\n+        return Optional.empty();\n+    }\n+\n+    TableInfo getTable(TableId tableId)\n+    {\n+        TableId bigQueryTableId = tableIds.get(tableId);\n+        Table table = bigQuery.getTable(bigQueryTableId != null ? bigQueryTableId : tableId);\n+        if (table != null) {\n+            tableIds.putIfAbsent(tableId, table.getTableId());\n+            datasetIds.putIfAbsent(toDatasetId(tableId), toDatasetId(table.getTableId()));\n+        }\n+        return table;\n+    }\n+\n+    DatasetId toDatasetId(TableId tableId)", "originalCommit": "9776e7c7ca1635d98631b6519a75257fc3fb73ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4ODI1Nw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r523388257", "bodyText": "yes fixed, most methods should be protected within the module's scope", "author": "fgwang7w", "createdAt": "2020-11-14T07:18:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxOTA3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxOTcwNg==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r522519706", "bodyText": "if createWhereClause() returns Optional.empty(), we are not pushing down filters, right?", "author": "zhenxiao", "createdAt": "2020-11-13T00:07:51Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.Dataset;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.cloud.http.BaseHttpServiceException;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterators;\n+\n+import java.util.Iterator;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.stream.StreamSupport;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.UUID.randomUUID;\n+import static java.util.stream.Collectors.joining;\n+\n+// holds caches and mappings\n+// presto converts the dataset and table names to lower case, while BigQuery is case sensitive\n+// the mappings here keep the mappings\n+public class BigQueryClient\n+{\n+    private final BigQuery bigQuery;\n+    private final Optional<String> viewMaterializationProject;\n+    private final Optional<String> viewMaterializationDataset;\n+    private final ConcurrentMap<TableId, TableId> tableIds = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<DatasetId, DatasetId> datasetIds = new ConcurrentHashMap<>();\n+\n+    BigQueryClient(BigQuery bigQuery, BigQueryConfig config)\n+    {\n+        this.bigQuery = bigQuery;\n+        this.viewMaterializationProject = config.getViewMaterializationProject();\n+        this.viewMaterializationDataset = config.getViewMaterializationDataset();\n+    }\n+\n+    // return empty if no filters are used\n+    private static Optional<String> createWhereClause(String[] filters)\n+    {\n+        return Optional.empty();\n+    }\n+\n+    TableInfo getTable(TableId tableId)\n+    {\n+        TableId bigQueryTableId = tableIds.get(tableId);\n+        Table table = bigQuery.getTable(bigQueryTableId != null ? bigQueryTableId : tableId);\n+        if (table != null) {\n+            tableIds.putIfAbsent(tableId, table.getTableId());\n+            datasetIds.putIfAbsent(toDatasetId(tableId), toDatasetId(table.getTableId()));\n+        }\n+        return table;\n+    }\n+\n+    DatasetId toDatasetId(TableId tableId)\n+    {\n+        return DatasetId.of(tableId.getProject(), tableId.getDataset());\n+    }\n+\n+    String getProjectId()\n+    {\n+        return bigQuery.getOptions().getProjectId();\n+    }\n+\n+    Iterable<Dataset> listDatasets(String projectId)\n+    {\n+        final Iterator<Dataset> datasets = bigQuery.listDatasets(projectId).iterateAll().iterator();\n+        return () -> Iterators.transform(datasets, this::addDataSetMappingIfNeeded);\n+    }\n+\n+    Iterable<Table> listTables(DatasetId datasetId, TableDefinition.Type... types)\n+    {\n+        Set<TableDefinition.Type> allowedTypes = ImmutableSet.copyOf(types);\n+        DatasetId bigQueryDatasetId = datasetIds.getOrDefault(datasetId, datasetId);\n+        Iterable<Table> allTables = bigQuery.listTables(bigQueryDatasetId).iterateAll();\n+        return StreamSupport.stream(allTables.spliterator(), false)\n+                .filter(table -> allowedTypes.contains(table.getDefinition().getType()))\n+                .collect(toImmutableList());\n+    }\n+\n+    private Dataset addDataSetMappingIfNeeded(Dataset dataset)\n+    {\n+        DatasetId bigQueryDatasetId = dataset.getDatasetId();\n+        DatasetId prestoDatasetId = DatasetId.of(bigQueryDatasetId.getProject(), bigQueryDatasetId.getDataset().toLowerCase(ENGLISH));\n+        datasetIds.putIfAbsent(prestoDatasetId, bigQueryDatasetId);\n+        return dataset;\n+    }\n+\n+    TableId createDestinationTable(TableId tableId)\n+    {\n+        String project = viewMaterializationProject.orElse(tableId.getProject());\n+        String dataset = viewMaterializationDataset.orElse(tableId.getDataset());\n+        DatasetId datasetId = mapIfNeeded(project, dataset);\n+        UUID uuid = randomUUID();\n+        String name = format(\"_pbc_%s\", randomUUID().toString().toLowerCase(ENGLISH).replace(\"-\", \"\"));\n+        return TableId.of(datasetId.getProject(), datasetId.getDataset(), name);\n+    }\n+\n+    private DatasetId mapIfNeeded(String project, String dataset)\n+    {\n+        DatasetId datasetId = DatasetId.of(project, dataset);\n+        return datasetIds.getOrDefault(datasetId, datasetId);\n+    }\n+\n+    Table update(TableInfo table)\n+    {\n+        return bigQuery.update(table);\n+    }\n+\n+    Job create(JobInfo jobInfo)\n+    {\n+        return bigQuery.create(jobInfo);\n+    }\n+\n+    TableResult query(String sql)\n+    {\n+        try {\n+            return bigQuery.query(QueryJobConfiguration.of(sql));\n+        }\n+        catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            throw new BigQueryException(BaseHttpServiceException.UNKNOWN_CODE, format(\"Failed to run the query [%s]\", sql), e);\n+        }\n+    }\n+\n+    String createSql(TableId table, ImmutableList<String> requiredColumns, String[] filters)\n+    {\n+        String columns = requiredColumns.isEmpty() ? \"*\" :\n+                requiredColumns.stream().map(column -> format(\"`%s`\", column)).collect(joining(\",\"));\n+\n+        String whereClause = createWhereClause(filters)\n+                .map(clause -> \"WHERE \" + clause)\n+                .orElse(\"\");", "originalCommit": "9776e7c7ca1635d98631b6519a75257fc3fb73ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4NzAyOA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r523387028", "bodyText": "right, if the filters is empty then there's no pushdown, just added the logic to build the string properly, however the caller in current implementation has no actual filter pass down, we can add the pushdown supoprt in the next phase", "author": "fgwang7w", "createdAt": "2020-11-14T07:03:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxOTcwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0Mjg4Ng==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r568242886", "bodyText": "whereClause is not needed in this function, right?", "author": "zhenxiao", "createdAt": "2021-02-02T00:43:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxOTcwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAxNzI3OA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r585017278", "bodyText": "whereClause constructs the filter in a sql statement, and it constructs where clause only when the caller passes in filter", "author": "fgwang7w", "createdAt": "2021-03-01T20:12:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxOTcwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxOTgwOQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r522519809", "bodyText": "the comments does not match implementation", "author": "zhenxiao", "createdAt": "2020-11-13T00:08:22Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.Dataset;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.cloud.http.BaseHttpServiceException;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterators;\n+\n+import java.util.Iterator;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.stream.StreamSupport;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.UUID.randomUUID;\n+import static java.util.stream.Collectors.joining;\n+\n+// holds caches and mappings\n+// presto converts the dataset and table names to lower case, while BigQuery is case sensitive\n+// the mappings here keep the mappings\n+public class BigQueryClient\n+{\n+    private final BigQuery bigQuery;\n+    private final Optional<String> viewMaterializationProject;\n+    private final Optional<String> viewMaterializationDataset;\n+    private final ConcurrentMap<TableId, TableId> tableIds = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<DatasetId, DatasetId> datasetIds = new ConcurrentHashMap<>();\n+\n+    BigQueryClient(BigQuery bigQuery, BigQueryConfig config)\n+    {\n+        this.bigQuery = bigQuery;\n+        this.viewMaterializationProject = config.getViewMaterializationProject();\n+        this.viewMaterializationDataset = config.getViewMaterializationDataset();\n+    }\n+\n+    // return empty if no filters are used\n+    private static Optional<String> createWhereClause(String[] filters)\n+    {\n+        return Optional.empty();\n+    }\n+\n+    TableInfo getTable(TableId tableId)\n+    {\n+        TableId bigQueryTableId = tableIds.get(tableId);\n+        Table table = bigQuery.getTable(bigQueryTableId != null ? bigQueryTableId : tableId);\n+        if (table != null) {\n+            tableIds.putIfAbsent(tableId, table.getTableId());\n+            datasetIds.putIfAbsent(toDatasetId(tableId), toDatasetId(table.getTableId()));\n+        }\n+        return table;\n+    }\n+\n+    DatasetId toDatasetId(TableId tableId)\n+    {\n+        return DatasetId.of(tableId.getProject(), tableId.getDataset());\n+    }\n+\n+    String getProjectId()\n+    {\n+        return bigQuery.getOptions().getProjectId();\n+    }\n+\n+    Iterable<Dataset> listDatasets(String projectId)\n+    {\n+        final Iterator<Dataset> datasets = bigQuery.listDatasets(projectId).iterateAll().iterator();\n+        return () -> Iterators.transform(datasets, this::addDataSetMappingIfNeeded);\n+    }\n+\n+    Iterable<Table> listTables(DatasetId datasetId, TableDefinition.Type... types)\n+    {\n+        Set<TableDefinition.Type> allowedTypes = ImmutableSet.copyOf(types);\n+        DatasetId bigQueryDatasetId = datasetIds.getOrDefault(datasetId, datasetId);\n+        Iterable<Table> allTables = bigQuery.listTables(bigQueryDatasetId).iterateAll();\n+        return StreamSupport.stream(allTables.spliterator(), false)\n+                .filter(table -> allowedTypes.contains(table.getDefinition().getType()))\n+                .collect(toImmutableList());\n+    }\n+\n+    private Dataset addDataSetMappingIfNeeded(Dataset dataset)\n+    {\n+        DatasetId bigQueryDatasetId = dataset.getDatasetId();\n+        DatasetId prestoDatasetId = DatasetId.of(bigQueryDatasetId.getProject(), bigQueryDatasetId.getDataset().toLowerCase(ENGLISH));\n+        datasetIds.putIfAbsent(prestoDatasetId, bigQueryDatasetId);\n+        return dataset;\n+    }\n+\n+    TableId createDestinationTable(TableId tableId)\n+    {\n+        String project = viewMaterializationProject.orElse(tableId.getProject());\n+        String dataset = viewMaterializationDataset.orElse(tableId.getDataset());\n+        DatasetId datasetId = mapIfNeeded(project, dataset);\n+        UUID uuid = randomUUID();\n+        String name = format(\"_pbc_%s\", randomUUID().toString().toLowerCase(ENGLISH).replace(\"-\", \"\"));\n+        return TableId.of(datasetId.getProject(), datasetId.getDataset(), name);\n+    }\n+\n+    private DatasetId mapIfNeeded(String project, String dataset)\n+    {\n+        DatasetId datasetId = DatasetId.of(project, dataset);\n+        return datasetIds.getOrDefault(datasetId, datasetId);\n+    }\n+\n+    Table update(TableInfo table)\n+    {\n+        return bigQuery.update(table);\n+    }\n+\n+    Job create(JobInfo jobInfo)\n+    {\n+        return bigQuery.create(jobInfo);\n+    }\n+\n+    TableResult query(String sql)\n+    {\n+        try {\n+            return bigQuery.query(QueryJobConfiguration.of(sql));\n+        }\n+        catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            throw new BigQueryException(BaseHttpServiceException.UNKNOWN_CODE, format(\"Failed to run the query [%s]\", sql), e);\n+        }\n+    }\n+\n+    String createSql(TableId table, ImmutableList<String> requiredColumns, String[] filters)\n+    {\n+        String columns = requiredColumns.isEmpty() ? \"*\" :\n+                requiredColumns.stream().map(column -> format(\"`%s`\", column)).collect(joining(\",\"));\n+\n+        String whereClause = createWhereClause(filters)\n+                .map(clause -> \"WHERE \" + clause)\n+                .orElse(\"\");\n+\n+        return createSql(table, columns, filters);\n+    }\n+\n+    // assuming the SELECT part is properly formatted, can be used to call functions such as COUNT and SUM\n+    String createSql(TableId table, String formatedQuery, String[] filters)", "originalCommit": "9776e7c7ca1635d98631b6519a75257fc3fb73ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4NzU4NQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r523387585", "bodyText": "fixed", "author": "fgwang7w", "createdAt": "2020-11-14T07:10:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxOTgwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMDU2NQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r522520565", "bodyText": "how about inline VIEWS_ENABLED?", "author": "zhenxiao", "createdAt": "2020-11-13T00:10:49Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryConfig.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.airlift.configuration.ConfigDescription;\n+import com.google.auth.oauth2.GoogleCredentials;\n+\n+import javax.validation.constraints.AssertTrue;\n+import javax.validation.constraints.Min;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+public class BigQueryConfig\n+{\n+    public static final int DEFAULT_MAX_READ_ROWS_RETRIES = 3;\n+    public static final String VIEWS_ENABLED = \"bigquery.views-enabled\";", "originalCommit": "9776e7c7ca1635d98631b6519a75257fc3fb73ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4Nzg1MA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r523387850", "bodyText": "fixed", "author": "fgwang7w", "createdAt": "2020-11-14T07:13:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMDU2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMDY2NA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r522520664", "bodyText": "inline the string here", "author": "zhenxiao", "createdAt": "2020-11-13T00:11:03Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryConfig.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.airlift.configuration.ConfigDescription;\n+import com.google.auth.oauth2.GoogleCredentials;\n+\n+import javax.validation.constraints.AssertTrue;\n+import javax.validation.constraints.Min;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+public class BigQueryConfig\n+{\n+    public static final int DEFAULT_MAX_READ_ROWS_RETRIES = 3;\n+    public static final String VIEWS_ENABLED = \"bigquery.views-enabled\";\n+\n+    private Optional<String> credentialsKey = Optional.empty();\n+    private Optional<String> credentialsFile = Optional.empty();\n+    private Optional<String> projectId = Optional.empty();\n+    private Optional<String> parentProjectId = Optional.empty();\n+    private OptionalInt parallelism = OptionalInt.empty();\n+    private boolean viewsEnabled;\n+    private Optional<String> viewMaterializationProject = Optional.empty();\n+    private Optional<String> viewMaterializationDataset = Optional.empty();\n+    private int maxReadRowsRetries = DEFAULT_MAX_READ_ROWS_RETRIES;\n+\n+    @AssertTrue(message = \"Exactly one of 'bigquery.credentials-key' or 'bigquery.credentials-file' must be specified, or the default GoogleCredentials could be created\")\n+    public boolean isCredentialsConfigurationValid()\n+    {\n+        // only one of them (at most) should be present\n+        if (credentialsKey.isPresent() && credentialsFile.isPresent()) {\n+            return false;\n+        }\n+        // if no credentials were supplied, let's check if we can create the default ones\n+        if (!credentialsKey.isPresent() && !credentialsFile.isPresent()) {\n+            try {\n+                GoogleCredentials.getApplicationDefault();\n+            }\n+            catch (IOException e) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public Optional<String> getCredentialsKey()\n+    {\n+        return credentialsKey;\n+    }\n+\n+    @Config(\"bigquery.credentials-key\")\n+    @ConfigDescription(\"The base64 encoded credentials key\")\n+    public BigQueryConfig setCredentialsKey(String credentialsKey)\n+    {\n+        this.credentialsKey = Optional.of(credentialsKey);\n+        return this;\n+    }\n+\n+    public Optional<String> getCredentialsFile()\n+    {\n+        return credentialsFile;\n+    }\n+\n+    @Config(\"bigquery.credentials-file\")\n+    @ConfigDescription(\"The path to the JSON credentials file\")\n+    public BigQueryConfig setCredentialsFile(String credentialsFile)\n+    {\n+        this.credentialsFile = Optional.of(credentialsFile);\n+        return this;\n+    }\n+\n+    public Optional<String> getProjectId()\n+    {\n+        return projectId;\n+    }\n+\n+    @Config(\"bigquery.project-id\")\n+    @ConfigDescription(\"The Google Cloud Project ID where the data reside\")\n+    public BigQueryConfig setProjectId(String projectId)\n+    {\n+        this.projectId = Optional.of(projectId);\n+        return this;\n+    }\n+\n+    public Optional<String> getParentProjectId()\n+    {\n+        return parentProjectId;\n+    }\n+\n+    @Config(\"bigquery.parent-project-id\")\n+    @ConfigDescription(\"The Google Cloud Project ID to bill for the export\")\n+    public BigQueryConfig setParentProjectId(String parentProjectId)\n+    {\n+        this.parentProjectId = Optional.of(parentProjectId);\n+        return this;\n+    }\n+\n+    public OptionalInt getParallelism()\n+    {\n+        return parallelism;\n+    }\n+\n+    @Config(\"bigquery.parallelism\")\n+    @ConfigDescription(\"The number of partitions to split the data into.\")\n+    public BigQueryConfig setParallelism(int parallelism)\n+    {\n+        this.parallelism = OptionalInt.of(parallelism);\n+        return this;\n+    }\n+\n+    public boolean isViewsEnabled()\n+    {\n+        return viewsEnabled;\n+    }\n+\n+    @Config(VIEWS_ENABLED)", "originalCommit": "9776e7c7ca1635d98631b6519a75257fc3fb73ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4Nzg2Mw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r523387863", "bodyText": "done in prior comment", "author": "fgwang7w", "createdAt": "2020-11-14T07:14:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMDY2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMTg2Mg==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r522521862", "bodyText": "do we need this log?", "author": "zhenxiao", "createdAt": "2020-11-13T00:14:51Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryEmptyProjectionPageSource.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.io.IOException;\n+\n+public class BigQueryEmptyProjectionPageSource\n+        implements ConnectorPageSource\n+{\n+    private static final Logger log = Logger.get(BigQueryEmptyProjectionPageSource.class);\n+    private final long numberOfRows;\n+    private boolean finished;\n+\n+    public BigQueryEmptyProjectionPageSource(long numberOfRows)\n+    {\n+        this.numberOfRows = numberOfRows;\n+        this.finished = false;\n+    }\n+\n+    @Override\n+    public long getCompletedBytes()\n+    {\n+        return 0;\n+    }\n+\n+    @Override\n+    public long getCompletedPositions()\n+    {\n+        return finished ? numberOfRows : 0;\n+    }\n+\n+    @Override\n+    public long getReadTimeNanos()\n+    {\n+        return 0;\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return finished;\n+    }\n+\n+    @Override\n+    public Page getNextPage()\n+    {\n+        log.warn(\"[%s] creating %d empty rows\", Thread.currentThread(), numberOfRows);", "originalCommit": "9776e7c7ca1635d98631b6519a75257fc3fb73ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4ODIyMw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r523388223", "bodyText": "this might provide a better understanding how much data is coming from each split, downgrade to debug if ok with you?", "author": "fgwang7w", "createdAt": "2020-11-14T07:18:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMTg2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMjE5Mw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r522522193", "bodyText": "do we need these debug messages?", "author": "zhenxiao", "createdAt": "2020-11-13T00:15:48Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryMetadata.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ColumnMetadata;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.ConnectorTableHandle;\n+import com.facebook.presto.spi.ConnectorTableLayout;\n+import com.facebook.presto.spi.ConnectorTableLayoutHandle;\n+import com.facebook.presto.spi.ConnectorTableLayoutResult;\n+import com.facebook.presto.spi.ConnectorTableMetadata;\n+import com.facebook.presto.spi.Constraint;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.SchemaTablePrefix;\n+import com.facebook.presto.spi.TableNotFoundException;\n+import com.facebook.presto.spi.connector.ConnectorMetadata;\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.Schema;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Streams;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.google.cloud.bigquery.TableDefinition.Type.TABLE;\n+import static com.google.cloud.bigquery.TableDefinition.Type.VIEW;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toMap;\n+\n+public class BigQueryMetadata\n+        implements ConnectorMetadata\n+{\n+    static final int NUMERIC_DATA_TYPE_PRECISION = 38;\n+    static final int NUMERIC_DATA_TYPE_SCALE = 9;\n+    static final String INFORMATION_SCHEMA = \"information_schema\";\n+    private static final Logger log = Logger.get(BigQueryMetadata.class);\n+    private BigQueryClient bigQueryClient;\n+    private String projectId;\n+\n+    @Inject\n+    public BigQueryMetadata(BigQueryClient bigQueryClient, BigQueryConfig config)\n+    {\n+        this.bigQueryClient = bigQueryClient;\n+        this.projectId = config.getProjectId().orElse(bigQueryClient.getProjectId());\n+    }\n+\n+    @Override\n+    public List<String> listSchemaNames(ConnectorSession session)\n+    {\n+        log.debug(\"listSchemaNames(session=%s)\", session);", "originalCommit": "9776e7c7ca1635d98631b6519a75257fc3fb73ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4ODE3Nw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r523388177", "bodyText": "this can be removed", "author": "fgwang7w", "createdAt": "2020-11-14T07:17:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMjE5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMjUyOA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r522522528", "bodyText": "throw exception?", "author": "zhenxiao", "createdAt": "2020-11-13T00:17:00Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryMetadata.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ColumnMetadata;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.ConnectorTableHandle;\n+import com.facebook.presto.spi.ConnectorTableLayout;\n+import com.facebook.presto.spi.ConnectorTableLayoutHandle;\n+import com.facebook.presto.spi.ConnectorTableLayoutResult;\n+import com.facebook.presto.spi.ConnectorTableMetadata;\n+import com.facebook.presto.spi.Constraint;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.SchemaTablePrefix;\n+import com.facebook.presto.spi.TableNotFoundException;\n+import com.facebook.presto.spi.connector.ConnectorMetadata;\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.Schema;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Streams;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.google.cloud.bigquery.TableDefinition.Type.TABLE;\n+import static com.google.cloud.bigquery.TableDefinition.Type.VIEW;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toMap;\n+\n+public class BigQueryMetadata\n+        implements ConnectorMetadata\n+{\n+    static final int NUMERIC_DATA_TYPE_PRECISION = 38;\n+    static final int NUMERIC_DATA_TYPE_SCALE = 9;\n+    static final String INFORMATION_SCHEMA = \"information_schema\";\n+    private static final Logger log = Logger.get(BigQueryMetadata.class);\n+    private BigQueryClient bigQueryClient;\n+    private String projectId;\n+\n+    @Inject\n+    public BigQueryMetadata(BigQueryClient bigQueryClient, BigQueryConfig config)\n+    {\n+        this.bigQueryClient = bigQueryClient;\n+        this.projectId = config.getProjectId().orElse(bigQueryClient.getProjectId());\n+    }\n+\n+    @Override\n+    public List<String> listSchemaNames(ConnectorSession session)\n+    {\n+        log.debug(\"listSchemaNames(session=%s)\", session);\n+        return Streams.stream(bigQueryClient.listDatasets(projectId))\n+                .map(dataset -> dataset.getDatasetId().getDataset())\n+                .filter(schemaName -> !schemaName.equalsIgnoreCase(INFORMATION_SCHEMA))\n+                .collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public List<SchemaTableName> listTables(ConnectorSession session, Optional<String> schemaName)\n+    {\n+        log.debug(\"listTables(session=%s, schemaName=%s)\", session, schemaName);\n+        return listTablesWithTypes(session, schemaName, TABLE);\n+    }\n+\n+    @Override\n+    public List<SchemaTableName> listViews(ConnectorSession session, Optional<String> schemaName)\n+    {\n+        log.debug(\"listViews(session=%s, schemaName=%s)\", session, schemaName);\n+        return listTablesWithTypes(session, schemaName, VIEW);\n+    }\n+\n+    private List<SchemaTableName> listTablesWithTypes(ConnectorSession session, Optional<String> schemaName, TableDefinition.Type... types)\n+    {\n+        if (schemaName.isPresent() && schemaName.get().equalsIgnoreCase(INFORMATION_SCHEMA)) {\n+            return ImmutableList.of();\n+        }\n+        Set<String> schemaNames = schemaName.map(ImmutableSet::of)\n+                .orElseGet(() -> ImmutableSet.copyOf(listSchemaNames(session)));\n+\n+        ImmutableList.Builder<SchemaTableName> tableNames = ImmutableList.builder();\n+        for (String datasetId : schemaNames) {\n+            for (Table table : bigQueryClient.listTables(DatasetId.of(projectId, datasetId), types)) {\n+                tableNames.add(new SchemaTableName(datasetId, table.getTableId().getTable()));\n+            }\n+        }\n+        return tableNames.build();\n+    }\n+\n+    <T> ImmutableList<T> collectAll(Page<T> page)\n+    {\n+        return ImmutableList.copyOf(page.iterateAll());\n+    }\n+\n+    @Override\n+    public ConnectorTableHandle getTableHandle(ConnectorSession session, SchemaTableName tableName)\n+    {\n+        log.debug(\"getTableHandle(session=%s, tableName=%s)\", session, tableName);\n+        TableInfo tableInfo = getBigQueryTable(tableName);\n+        if (tableInfo == null) {\n+            log.debug(\"Table [%s.%s] was not found\", tableName.getSchemaName(), tableName.getTableName());\n+            return null;\n+        }\n+        return BigQueryTableHandle.from(tableInfo);\n+    }\n+\n+    @Override\n+    public List<ConnectorTableLayoutResult> getTableLayouts(\n+            ConnectorSession session,\n+            ConnectorTableHandle table,\n+            Constraint<ColumnHandle> constraint,\n+            Optional<Set<ColumnHandle>> desiredColumns)\n+    {\n+        log.debug(\"getTableMetadata(session=%s, table=%s, constraint=%s, desiredColumns=%s)\", session, table, constraint, desiredColumns);\n+        BigQueryTableHandle bigQueryTableHandle = (BigQueryTableHandle) table;\n+        if (desiredColumns.isPresent()) {\n+            bigQueryTableHandle = bigQueryTableHandle.withProjectedColumns(ImmutableList.copyOf(desiredColumns.get()));\n+        }\n+        BigQueryTableLayoutHandle bigQueryTableLayoutHandle = new BigQueryTableLayoutHandle(bigQueryTableHandle);\n+        return ImmutableList.of(new ConnectorTableLayoutResult(new ConnectorTableLayout(bigQueryTableLayoutHandle), constraint.getSummary()));\n+    }\n+\n+    @Override\n+    public ConnectorTableLayout getTableLayout(ConnectorSession session, ConnectorTableLayoutHandle layoutHandle)\n+    {\n+        log.debug(\"getTableMetadata(session=%s, layoutHandle=%s)\", session, layoutHandle);\n+        BigQueryTableLayoutHandle bigQueryTableLayoutHandle = (BigQueryTableLayoutHandle) layoutHandle;\n+        return new ConnectorTableLayout(\n+                bigQueryTableLayoutHandle,\n+                Optional.empty(), // columns of the table, not projected\n+                bigQueryTableLayoutHandle.getTupleDomain(), // predicate\n+                Optional.empty(), // tablePartitioning\n+                Optional.empty(), // streamPartitioningColumns\n+                Optional.empty(), // discretePredicates\n+                ImmutableList.of()); // localProperties\n+    }\n+\n+    // May return null\n+    private TableInfo getBigQueryTable(SchemaTableName tableName)\n+    {\n+        return bigQueryClient.getTable(TableId.of(projectId, tableName.getSchemaName(), tableName.getTableName()));\n+    }\n+\n+    public ConnectorTableMetadata getTableMetadata(ConnectorSession session, SchemaTableName schemaTableName)\n+    {\n+        ConnectorTableHandle table = getTableHandle(session, schemaTableName);\n+        if (table == null) {\n+            throw new TableNotFoundException(schemaTableName);\n+        }\n+        return getTableMetadata(session, table);\n+    }\n+\n+    @Override\n+    public ConnectorTableMetadata getTableMetadata(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        log.debug(\"getTableMetadata(session=%s, tableHandle=%s)\", session, tableHandle);\n+        TableInfo table = bigQueryClient.getTable(((BigQueryTableHandle) tableHandle).getTableId());\n+        SchemaTableName schemaTableName = new SchemaTableName(table.getTableId().getDataset(), table.getTableId().getTable());\n+        Schema schema = table.getDefinition().getSchema();\n+        List<ColumnMetadata> columns = schema == null ?\n+                ImmutableList.of() :\n+                schema.getFields().stream()\n+                        .map(Conversions::toColumnMetadata)\n+                        .collect(toImmutableList());\n+        return new ConnectorTableMetadata(schemaTableName, columns);\n+    }\n+\n+    @Override\n+    public Map<String, ColumnHandle> getColumnHandles(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        log.debug(\"getColumnHandles(session=%s, tableHandle=%s)\", session, tableHandle);\n+        TableInfo table = bigQueryClient.getTable(((BigQueryTableHandle) tableHandle).getTableId());\n+        Schema schema = table.getDefinition().getSchema();\n+        return schema == null ?\n+                ImmutableMap.of() :\n+                schema.getFields().stream().collect(toMap(Field::getName, Conversions::toColumnHandle));\n+    }\n+\n+    @Override\n+    public ColumnMetadata getColumnMetadata(\n+            ConnectorSession session,\n+            ConnectorTableHandle tableHandle,\n+            ColumnHandle columnHandle)\n+    {\n+        log.debug(\"getColumnMetadata(session=%s, tableHandle=%s, columnHandle=%s)\", session, columnHandle, columnHandle);\n+        return ((BigQueryColumnHandle) columnHandle).getColumnMetadata();\n+    }\n+\n+    @Override\n+    public Map<SchemaTableName, List<ColumnMetadata>> listTableColumns(ConnectorSession session, SchemaTablePrefix prefix)\n+    {\n+        log.debug(\"listTableColumns(session=%s, prefix=%s)\", session, prefix);\n+        requireNonNull(prefix, \"prefix is null\");\n+        ImmutableMap.Builder<SchemaTableName, List<ColumnMetadata>> columns = ImmutableMap.builder();\n+        for (SchemaTableName tableName : listTables(session, prefix)) {\n+            try {\n+                columns.put(tableName, getTableMetadata(session, tableName).getColumns());\n+            }\n+            catch (NotFoundException e) {\n+                // table disappeared during listing operation", "originalCommit": "9776e7c7ca1635d98631b6519a75257fc3fb73ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4ODYzMw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r523388633", "bodyText": "no actually it should be allowed that table disappeared during listing operation, transcation should finish instead of failing", "author": "fgwang7w", "createdAt": "2020-11-14T07:23:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMjUyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1NTY3Mg==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594055672", "bodyText": "I do not think we prefer fail silently. Is there bigquery docs, showing it is OK for table disappear during list operation?", "author": "zhenxiao", "createdAt": "2021-03-15T05:18:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMjUyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDE0Mzg1Ng==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594143856", "bodyText": "no I think the purpose was no to interrupt the operation but it'll be the end of the operation so will throw a new BigQueryException here", "author": "fgwang7w", "createdAt": "2021-03-15T08:45:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMjUyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMjkzMQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r522522931", "bodyText": "do you think this debug message is useful?", "author": "zhenxiao", "createdAt": "2020-11-13T00:18:10Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryPageSourceProvider.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.ConnectorSplit;\n+import com.facebook.presto.spi.ConnectorTableLayoutHandle;\n+import com.facebook.presto.spi.SplitContext;\n+import com.facebook.presto.spi.connector.ConnectorPageSourceProvider;\n+import com.facebook.presto.spi.connector.ConnectorTransactionHandle;\n+import com.google.common.collect.ImmutableList;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class BigQueryPageSourceProvider\n+        implements ConnectorPageSourceProvider\n+{\n+    private static final Logger log = Logger.get(BigQueryPageSourceProvider.class);\n+    private final BigQueryStorageClientFactory bigQueryStorageClientFactory;\n+    private final int maxReadRowsRetries;\n+\n+    @Inject\n+    public BigQueryPageSourceProvider(BigQueryStorageClientFactory bigQueryStorageClientFactory, BigQueryConfig config)\n+    {\n+        this.bigQueryStorageClientFactory = bigQueryStorageClientFactory;\n+        this.maxReadRowsRetries = config.getMaxReadRowsRetries();\n+    }\n+\n+    @Override\n+    public ConnectorPageSource createPageSource(\n+            ConnectorTransactionHandle transaction,\n+            ConnectorSession session,\n+            ConnectorSplit split,\n+            ConnectorTableLayoutHandle layout,\n+            List<ColumnHandle> columns,\n+            SplitContext splitContext)\n+    {\n+        log.debug(\"createPageSource(transaction=%s, session=%s, split=%s, layout=%s, columns=%s, splitContext=%s)\", transaction, session, split, layout, columns, splitContext);", "originalCommit": "9776e7c7ca1635d98631b6519a75257fc3fb73ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4ODc0OQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r523388749", "bodyText": "i can remove this log for now", "author": "fgwang7w", "createdAt": "2020-11-14T07:24:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMjkzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMzE0Nw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r522523147", "bodyText": "could we merge the logic of BigQueryEmptyProjectionPageSource into BigQueryResultPageSource?", "author": "zhenxiao", "createdAt": "2020-11-13T00:18:47Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryPageSourceProvider.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.ConnectorSplit;\n+import com.facebook.presto.spi.ConnectorTableLayoutHandle;\n+import com.facebook.presto.spi.SplitContext;\n+import com.facebook.presto.spi.connector.ConnectorPageSourceProvider;\n+import com.facebook.presto.spi.connector.ConnectorTransactionHandle;\n+import com.google.common.collect.ImmutableList;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class BigQueryPageSourceProvider\n+        implements ConnectorPageSourceProvider\n+{\n+    private static final Logger log = Logger.get(BigQueryPageSourceProvider.class);\n+    private final BigQueryStorageClientFactory bigQueryStorageClientFactory;\n+    private final int maxReadRowsRetries;\n+\n+    @Inject\n+    public BigQueryPageSourceProvider(BigQueryStorageClientFactory bigQueryStorageClientFactory, BigQueryConfig config)\n+    {\n+        this.bigQueryStorageClientFactory = bigQueryStorageClientFactory;\n+        this.maxReadRowsRetries = config.getMaxReadRowsRetries();\n+    }\n+\n+    @Override\n+    public ConnectorPageSource createPageSource(\n+            ConnectorTransactionHandle transaction,\n+            ConnectorSession session,\n+            ConnectorSplit split,\n+            ConnectorTableLayoutHandle layout,\n+            List<ColumnHandle> columns,\n+            SplitContext splitContext)\n+    {\n+        log.debug(\"createPageSource(transaction=%s, session=%s, split=%s, layout=%s, columns=%s, splitContext=%s)\", transaction, session, split, layout, columns, splitContext);\n+        BigQuerySplit bigQuerySplit = (BigQuerySplit) split;\n+        if (bigQuerySplit.representsEmptyProjection()) {", "originalCommit": "9776e7c7ca1635d98631b6519a75257fc3fb73ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4ODk4Ng==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r523388986", "bodyText": "BigQueryPageSourceProvider implements ConnectorPageSourceProvider, and BigQueryEmptyProjectionPageSource implements ConnectorPageSource, 2 different purpose, let's leave it for now", "author": "fgwang7w", "createdAt": "2020-11-14T07:27:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMzE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0OTA4Nw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r568249087", "bodyText": "seems strange having a separate BigQueryEmptyProjectionPageSource\nBigQueryResultPageSource should cover empty projection case", "author": "zhenxiao", "createdAt": "2021-02-02T00:59:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMzE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTA2NjYzOA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r585066638", "bodyText": "the implementation is similiar to the HiveEmptySplitPageSource, I guess it's the naming is confusing, rename it to BigQueryEmptySplitPageSource", "author": "fgwang7w", "createdAt": "2021-03-01T21:36:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMzE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1NTg4Mw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594055883", "bodyText": "we need to merge BigQueryEmptyProjectionPageSource into BigQueryResultPageSource\nwe do not need a separate empty page source class\nBigQueryResultPageSource should cover all the logic", "author": "zhenxiao", "createdAt": "2021-03-15T05:18:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMzE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDE0MzEwMw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594143103", "bodyText": "same as ablove, I'd like to propose we do this logic change in another commit by a separate PR", "author": "fgwang7w", "createdAt": "2021-03-15T08:44:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMzE0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMzczOA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r522523738", "bodyText": "throw exception? or warn message?", "author": "zhenxiao", "createdAt": "2020-11-13T00:20:25Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryResultPageSource.java", "diffHunk": "@@ -0,0 +1,342 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.DateTimeEncoding;\n+import com.facebook.presto.common.type.DecimalType;\n+import com.facebook.presto.common.type.Decimals;\n+import com.facebook.presto.common.type.RowType;\n+import com.facebook.presto.common.type.TimeZoneKey;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.common.type.VarbinaryType;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.cloud.bigquery.storage.v1beta1.BigQueryStorageClient;\n+import com.google.cloud.bigquery.storage.v1beta1.Storage;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+import org.apache.avro.Conversions;\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericDatumReader;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.io.BinaryDecoder;\n+import org.apache.avro.io.DecoderFactory;\n+import org.apache.avro.util.Utf8;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.math.BigDecimal;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.DateType.DATE;\n+import static com.facebook.presto.common.type.IntegerType.INTEGER;\n+import static com.facebook.presto.common.type.TimeWithTimeZoneType.TIME_WITH_TIME_ZONE;\n+import static com.facebook.presto.common.type.TimestampType.TIMESTAMP;\n+import static com.facebook.presto.common.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static com.facebook.presto.plugin.bigquery.BigQueryMetadata.NUMERIC_DATA_TYPE_PRECISION;\n+import static com.facebook.presto.plugin.bigquery.BigQueryMetadata.NUMERIC_DATA_TYPE_SCALE;\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.airlift.slice.Slices.utf8Slice;\n+import static java.lang.String.format;\n+\n+public class BigQueryResultPageSource\n+        implements ConnectorPageSource\n+{\n+    static final AvroDecimalConverter DECIMAL_CONVERTER = new AvroDecimalConverter();\n+    private static final Logger log = Logger.get(BigQueryResultPageSource.class);\n+    private final BigQueryStorageClient bigQueryStorageClient;\n+    private final int maxReadRowsRetries;\n+    private final BigQuerySplit split;\n+    private final BigQueryTableHandle table;\n+    private final ImmutableList<BigQueryColumnHandle> columns;\n+    private final ImmutableList<Type> columnTypes;\n+    private final AtomicLong readBytes;\n+    private final PageBuilder pageBuilder;\n+    private Iterator<Storage.ReadRowsResponse> responses;\n+    private boolean closed;\n+\n+    public BigQueryResultPageSource(\n+            BigQueryStorageClientFactory bigQueryStorageClientFactory,\n+            int maxReadRowsRetries,\n+            BigQuerySplit split,\n+            BigQueryTableHandle table,\n+            ImmutableList<BigQueryColumnHandle> columns)\n+    {\n+        this.bigQueryStorageClient = bigQueryStorageClientFactory.createBigQueryStorageClient();\n+        this.maxReadRowsRetries = maxReadRowsRetries;\n+        this.split = split;\n+        this.table = table;\n+        this.columns = columns;\n+        this.readBytes = new AtomicLong();\n+        this.columnTypes = columns.stream().map(BigQueryColumnHandle::getPrestoType).collect(toImmutableList());\n+        this.pageBuilder = new PageBuilder(columnTypes);\n+\n+        log.debug(\"Starting to read from %s\", split.getStreamName());\n+        Storage.ReadRowsRequest.Builder readRowsRequest = Storage.ReadRowsRequest.newBuilder()\n+                .setReadPosition(Storage.StreamPosition.newBuilder()\n+                        .setStream(Storage.Stream.newBuilder()\n+                                .setName(split.getStreamName())));\n+        responses = new ReadRowsHelper(bigQueryStorageClient, readRowsRequest, maxReadRowsRetries).readRows();\n+        closed = false;\n+    }\n+\n+    @Override\n+    public long getCompletedBytes()\n+    {\n+        return readBytes.get();\n+    }\n+\n+    @Override\n+    public long getCompletedPositions()\n+    {\n+        return 0;\n+    }\n+\n+    @Override\n+    public long getReadTimeNanos()\n+    {\n+        return 0;\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return !responses.hasNext();\n+    }\n+\n+    @Override\n+    public Page getNextPage()\n+    {\n+        checkState(pageBuilder.isEmpty(), \"PageBuilder is not empty at the beginning of a new page\");\n+        Storage.ReadRowsResponse response = responses.next();\n+        Iterable<GenericRecord> records = parse(response);\n+        for (GenericRecord record : records) {\n+            pageBuilder.declarePosition();\n+            for (int column = 0; column < columnTypes.size(); column++) {\n+                BlockBuilder output = pageBuilder.getBlockBuilder(column);\n+                appendTo(columnTypes.get(column), record.get(column), output);\n+            }\n+        }\n+\n+        Page page = pageBuilder.build();\n+        pageBuilder.reset();\n+        return page;\n+    }\n+\n+    private void appendTo(Type type, Object value, BlockBuilder output)\n+    {\n+        if (value == null) {\n+            output.appendNull();\n+            return;\n+        }\n+\n+        Class<?> javaType = type.getJavaType();\n+        try {\n+            if (javaType == boolean.class) {\n+                type.writeBoolean(output, (Boolean) value);\n+            }\n+            else if (javaType == long.class) {\n+                if (type.equals(BIGINT)) {\n+                    type.writeLong(output, ((Number) value).longValue());\n+                }\n+                else if (type.equals(INTEGER)) {\n+                    type.writeLong(output, ((Number) value).intValue());\n+                }\n+                else if (type.equals(DATE)) {\n+                    type.writeLong(output, ((Number) value).intValue());\n+                }\n+                else if (type.equals(TIMESTAMP)) {\n+                    type.writeLong(output, BigQueryType.toPrestoTimestamp(((org.apache.avro.util.Utf8) value).toString()));\n+                }\n+                else if (type.equals(TIME_WITH_TIME_ZONE)) {\n+                    type.writeLong(output, DateTimeEncoding.packDateTimeWithZone(((Long) value).longValue() / 1000, TimeZoneKey.UTC_KEY));\n+                }\n+                else if (type.equals(TIMESTAMP_WITH_TIME_ZONE)) {\n+                    type.writeLong(output, DateTimeEncoding.packDateTimeWithZone(((Long) value).longValue() / 1000, TimeZoneKey.UTC_KEY));\n+                }\n+                else {\n+                    throw new PrestoException(GENERIC_INTERNAL_ERROR, format(\"Unhandled type for %s: %s\", javaType.getSimpleName(), type));\n+                }\n+            }\n+            else if (javaType == double.class) {\n+                type.writeDouble(output, ((Number) value).doubleValue());\n+            }\n+            else if (javaType == Slice.class) {\n+                writeSlice(output, type, value);\n+            }\n+            else if (javaType == Block.class) {\n+                writeBlock(output, type, value);\n+            }\n+            else {\n+                throw new PrestoException(GENERIC_INTERNAL_ERROR, format(\"Unhandled type for %s: %s\", javaType.getSimpleName(), type));\n+            }\n+        }\n+        catch (ClassCastException ignore) {\n+            // returns null instead of raising exception", "originalCommit": "9776e7c7ca1635d98631b6519a75257fc3fb73ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4OTcyMw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r523389723", "bodyText": "castException can be tolerated,so just return null is fine. warning message usually doesn't get issued from connector right? it's handled either in analyzer/optimizer level. I can add a log message if needed.", "author": "fgwang7w", "createdAt": "2020-11-14T07:37:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMzczOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0OTgwNg==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r568249806", "bodyText": "silently appendNull is not good, when there is cast exception. Let's either throw exception, or at least add warn message", "author": "zhenxiao", "createdAt": "2021-02-02T01:01:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMzczOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1MjgyNw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584352827", "bodyText": "Why castException can be tolerated? Could you give an example?", "author": "qqibrow", "createdAt": "2021-02-28T20:06:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMzczOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE0ODAwNw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r585148007", "bodyText": "on 2nd thought this castException needs to be handled using BigQueryException, fixed", "author": "fgwang7w", "createdAt": "2021-03-02T00:14:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMzczOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMzk5Mw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r522523993", "bodyText": "do we need this comment?", "author": "zhenxiao", "createdAt": "2020-11-13T00:21:13Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQuerySplit.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ConnectorSplit;\n+import com.facebook.presto.spi.HostAddress;\n+import com.facebook.presto.spi.schedule.NodeSelectionStrategy;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.facebook.presto.spi.schedule.NodeSelectionStrategy.NO_PREFERENCE;\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class BigQuerySplit\n+        implements ConnectorSplit\n+{\n+    private static final int NO_ROWS_TO_GENERATE = -1;\n+\n+    private final String streamName;\n+    private final String avroSchema;\n+    private final List<ColumnHandle> columns;\n+    private final long emptyRowsToGenerate;\n+\n+    // do not use directly, it is public only for Jackson", "originalCommit": "9776e7c7ca1635d98631b6519a75257fc3fb73ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4OTc2Ng==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r523389766", "bodyText": "removed", "author": "fgwang7w", "createdAt": "2020-11-14T07:37:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMzk5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyNDE5OA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r522524198", "bodyText": "is this debug message necessary?", "author": "zhenxiao", "createdAt": "2020-11-13T00:21:55Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQuerySplitManager.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.ConnectorSplitSource;\n+import com.facebook.presto.spi.ConnectorTableLayoutHandle;\n+import com.facebook.presto.spi.FixedSplitSource;\n+import com.facebook.presto.spi.NodeManager;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.connector.ConnectorSplitManager;\n+import com.facebook.presto.spi.connector.ConnectorTransactionHandle;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.cloud.bigquery.storage.v1beta1.Storage;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+import static com.facebook.presto.plugin.bigquery.BigQueryErrorCode.BIGQUERY_FAILED_TO_EXECUTE_QUERY;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.IntStream.range;\n+\n+public class BigQuerySplitManager\n+        implements ConnectorSplitManager\n+{\n+    private static final Logger log = Logger.get(BigQuerySplitManager.class);\n+\n+    private final BigQueryClient bigQueryClient;\n+    private final BigQueryStorageClientFactory bigQueryStorageClientFactory;\n+    private final OptionalInt parallelism;\n+    private final ReadSessionCreatorConfig readSessionCreatorConfig;\n+    private final NodeManager nodeManager;\n+\n+    @Inject\n+    public BigQuerySplitManager(\n+            BigQueryConfig config,\n+            BigQueryClient bigQueryClient,\n+            BigQueryStorageClientFactory bigQueryStorageClientFactory,\n+            NodeManager nodeManager)\n+    {\n+        requireNonNull(config, \"config cannot be null\");\n+\n+        this.bigQueryClient = requireNonNull(bigQueryClient, \"bigQueryClient cannot be null\");\n+        this.bigQueryStorageClientFactory = requireNonNull(bigQueryStorageClientFactory, \"bigQueryStorageClientFactory cannot be null\");\n+        this.parallelism = config.getParallelism();\n+        this.readSessionCreatorConfig = config.createReadSessionCreatorConfig();\n+        this.nodeManager = requireNonNull(nodeManager, \"nodeManager cannot be null\");\n+    }\n+\n+    @Override\n+    public ConnectorSplitSource getSplits(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorTableLayoutHandle layout,\n+            SplitSchedulingContext splitSchedulingContext)\n+    {\n+        log.debug(\"getSplits(transaction=%s, session=%s, layout=%s, splitSchedulingContext=%s)\", transactionHandle, session, layout, splitSchedulingContext);\n+\n+        BigQueryTableLayoutHandle bigQueryTableLayoutHandle = (BigQueryTableLayoutHandle) layout;\n+        BigQueryTableHandle bigQueryTableHandle = bigQueryTableLayoutHandle.getTable();\n+\n+        TableId tableId = bigQueryTableHandle.getTableId();\n+        int actualParallelism = parallelism.orElse(nodeManager.getRequiredWorkerNodes().size());\n+        Optional<String> filter = Optional.empty();\n+        List<BigQuerySplit> splits = emptyProjectionIsRequired(bigQueryTableHandle.getProjectedColumns()) ?\n+                createEmptyProjection(tableId, actualParallelism, filter) :\n+                readFromBigQuery(tableId, bigQueryTableHandle.getProjectedColumns(), actualParallelism, filter);\n+        return new FixedSplitSource(splits);\n+    }\n+\n+    private boolean emptyProjectionIsRequired(Optional<List<ColumnHandle>> projectedColumns)\n+    {\n+        return projectedColumns.isPresent() && projectedColumns.get().isEmpty();\n+    }\n+\n+    private ImmutableList<BigQuerySplit> readFromBigQuery(TableId tableId, Optional<List<ColumnHandle>> projectedColumns, int actualParallelism, Optional<String> filter)\n+    {\n+        log.debug(\"readFromBigQuery(tableId=%s, projectedColumns=%s, actualParallelism=%s, filter=[%s])\", tableId, projectedColumns, actualParallelism, filter);", "originalCommit": "9776e7c7ca1635d98631b6519a75257fc3fb73ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4OTc4MA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r523389780", "bodyText": "removed debug logs for now", "author": "fgwang7w", "createdAt": "2020-11-14T07:38:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyNDE5OA=="}], "type": "inlineReview"}, {"oid": "02309fa42ee3bfe92617d5c06351654c5d002a46", "url": "https://github.com/prestodb/presto/commit/02309fa42ee3bfe92617d5c06351654c5d002a46", "message": "Add BigQuery Connector Support\n\nCo-authored-by: David Rabinowitz <davidrab@gmail.com>", "committedDate": "2020-11-15T23:23:57Z", "type": "forcePushed"}, {"oid": "20764b9093b5a79432e8eec90c341366afac0f1a", "url": "https://github.com/prestodb/presto/commit/20764b9093b5a79432e8eec90c341366afac0f1a", "message": "Add BigQuery Connector Support\n\nCo-authored-by: David Rabinowitz <davidrab@gmail.com>", "committedDate": "2020-11-17T04:10:36Z", "type": "forcePushed"}, {"oid": "8c934d691c57454485a4b9dffc613994dde83a5d", "url": "https://github.com/prestodb/presto/commit/8c934d691c57454485a4b9dffc613994dde83a5d", "message": "Add BigQuery Connector Support\n\nCo-authored-by: David Rabinowitz <davidrab@gmail.com>", "committedDate": "2020-11-29T07:33:46Z", "type": "forcePushed"}, {"oid": "ee3435f52cdf576358845eee91488a998a87842d", "url": "https://github.com/prestodb/presto/commit/ee3435f52cdf576358845eee91488a998a87842d", "message": "Add BigQuery Connector Support\n\nCo-authored-by: David Rabinowitz <davidrab@gmail.com>", "committedDate": "2020-12-03T04:54:46Z", "type": "forcePushed"}, {"oid": "7dedb1e1c9c9cc9204baa5861db552c4280f51fb", "url": "https://github.com/prestodb/presto/commit/7dedb1e1c9c9cc9204baa5861db552c4280f51fb", "message": "Add BigQuery Connector Support\n\nCo-authored-by: David Rabinowitz <davidrab@gmail.com>", "committedDate": "2020-12-04T04:32:14Z", "type": "forcePushed"}, {"oid": "b15049f870552a009b38426e1806d108ae86973f", "url": "https://github.com/prestodb/presto/commit/b15049f870552a009b38426e1806d108ae86973f", "message": "Add BigQuery Connector Support\n\nCo-authored-by: David Rabinowitz <davidrab@gmail.com>", "committedDate": "2020-12-06T21:40:51Z", "type": "forcePushed"}, {"oid": "06cdb9c6a0831e3c55be33e6397023152535d8df", "url": "https://github.com/prestodb/presto/commit/06cdb9c6a0831e3c55be33e6397023152535d8df", "message": "Add BigQuery Connector Support\n\nCo-authored-by: David Rabinowitz <davidrab@gmail.com>", "committedDate": "2020-12-07T07:52:03Z", "type": "forcePushed"}, {"oid": "f9e941ad8b3e008c724cfb40dfeea3dcac9e6f2c", "url": "https://github.com/prestodb/presto/commit/f9e941ad8b3e008c724cfb40dfeea3dcac9e6f2c", "message": "Add BigQuery Connector Support\n\nCo-authored-by: David Rabinowitz <davidrab@gmail.com>", "committedDate": "2020-12-15T02:24:31Z", "type": "forcePushed"}, {"oid": "652ed3228c8d8e7fac6ab8b46c08d3506fdbcfad", "url": "https://github.com/prestodb/presto/commit/652ed3228c8d8e7fac6ab8b46c08d3506fdbcfad", "message": "Add BigQuery Connector Support\n\nCo-authored-by: David Rabinowitz <davidrab@gmail.com>", "committedDate": "2020-12-15T23:27:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODIzOTA5OA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r568239098", "bodyText": "format, put xmlns and xsi in one line", "author": "zhenxiao", "createdAt": "2021-02-02T00:33:40Z", "path": "presto-bigquery/pom.xml", "diffHunk": "@@ -0,0 +1,349 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"", "originalCommit": "652ed3228c8d8e7fac6ab8b46c08d3506fdbcfad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODIzOTMwNg==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r568239306", "bodyText": "update to latest version", "author": "zhenxiao", "createdAt": "2021-02-02T00:34:13Z", "path": "presto-bigquery/pom.xml", "diffHunk": "@@ -0,0 +1,349 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>com.facebook.presto</groupId>\n+        <artifactId>presto-root</artifactId>\n+        <version>0.246-SNAPSHOT</version>", "originalCommit": "652ed3228c8d8e7fac6ab8b46c08d3506fdbcfad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODIzOTY5Mg==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r568239692", "bodyText": "why we need pom type here?", "author": "zhenxiao", "createdAt": "2021-02-02T00:35:19Z", "path": "presto-bigquery/pom.xml", "diffHunk": "@@ -0,0 +1,349 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>com.facebook.presto</groupId>\n+        <artifactId>presto-root</artifactId>\n+        <version>0.246-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>presto-bigquery</artifactId>\n+    <description>Presto - Bigquery Connector</description>\n+    <packaging>presto-plugin</packaging>\n+\n+    <properties>\n+        <air.main.basedir>${project.parent.basedir}</air.main.basedir>\n+    </properties>\n+\n+    <dependencyManagement>\n+        <dependencies>\n+            <dependency>\n+                <groupId>com.google.cloud</groupId>\n+                <artifactId>libraries-bom</artifactId>\n+                <version>8.0.0</version>\n+                <type>pom</type>", "originalCommit": "652ed3228c8d8e7fac6ab8b46c08d3506fdbcfad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQxNDIxMA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r576414210", "bodyText": "this is an include artifact version in the dpendency management transitively in current POM.", "author": "fgwang7w", "createdAt": "2021-02-15T20:43:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODIzOTY5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODIzOTc5Nw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r568239797", "bodyText": "why import scope?", "author": "zhenxiao", "createdAt": "2021-02-02T00:35:32Z", "path": "presto-bigquery/pom.xml", "diffHunk": "@@ -0,0 +1,349 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>com.facebook.presto</groupId>\n+        <artifactId>presto-root</artifactId>\n+        <version>0.246-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>presto-bigquery</artifactId>\n+    <description>Presto - Bigquery Connector</description>\n+    <packaging>presto-plugin</packaging>\n+\n+    <properties>\n+        <air.main.basedir>${project.parent.basedir}</air.main.basedir>\n+    </properties>\n+\n+    <dependencyManagement>\n+        <dependencies>\n+            <dependency>\n+                <groupId>com.google.cloud</groupId>\n+                <artifactId>libraries-bom</artifactId>\n+                <version>8.0.0</version>\n+                <type>pom</type>\n+                <scope>import</scope>", "originalCommit": "652ed3228c8d8e7fac6ab8b46c08d3506fdbcfad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQ0MjkwNw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r576442907", "bodyText": "to support artifacts in e.g. com.google.api or com.google.cloud as to indicate the list of dpendencies in this POM's dependencyManagement. Removing them will result in build error due to missing dependency", "author": "fgwang7w", "createdAt": "2021-02-15T21:54:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODIzOTc5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0MjM0OA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r568242348", "bodyText": "s/eachStr/filter/g", "author": "zhenxiao", "createdAt": "2021-02-02T00:41:50Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryClient.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.Dataset;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.cloud.http.BaseHttpServiceException;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterators;\n+\n+import java.util.Iterator;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.stream.StreamSupport;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.UUID.randomUUID;\n+import static java.util.stream.Collectors.joining;\n+\n+public class BigQueryClient\n+{\n+    private final BigQuery bigQuery;\n+    private final Optional<String> viewMaterializationProject;\n+    private final Optional<String> viewMaterializationDataset;\n+\n+    // holds caches and mappings\n+    // presto converts the dataset and table names to lower case, while BigQuery is case sensitive\n+    // the mappings here keep the mappings\n+    private final ConcurrentMap<TableId, TableId> tableIds = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<DatasetId, DatasetId> datasetIds = new ConcurrentHashMap<>();\n+\n+    BigQueryClient(BigQuery bigQuery, BigQueryConfig config)\n+    {\n+        this.bigQuery = bigQuery;\n+        this.viewMaterializationProject = config.getViewMaterializationProject();\n+        this.viewMaterializationDataset = config.getViewMaterializationDataset();\n+    }\n+\n+    // return empty if no filters are used\n+    private static Optional<String> createWhereClause(String[] filters)\n+    {\n+        if (filters == null || filters.length == 0) {\n+            return Optional.empty();\n+        }\n+        StringBuilder builder = new StringBuilder();\n+        for (String eachStr : filters) {", "originalCommit": "652ed3228c8d8e7fac6ab8b46c08d3506fdbcfad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0NDMxNg==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r568244316", "bodyText": "what's the meaning of pbc? shall we define it as constant?", "author": "zhenxiao", "createdAt": "2021-02-02T00:47:21Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryClient.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.Dataset;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.cloud.http.BaseHttpServiceException;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterators;\n+\n+import java.util.Iterator;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.stream.StreamSupport;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.UUID.randomUUID;\n+import static java.util.stream.Collectors.joining;\n+\n+public class BigQueryClient\n+{\n+    private final BigQuery bigQuery;\n+    private final Optional<String> viewMaterializationProject;\n+    private final Optional<String> viewMaterializationDataset;\n+\n+    // holds caches and mappings\n+    // presto converts the dataset and table names to lower case, while BigQuery is case sensitive\n+    // the mappings here keep the mappings\n+    private final ConcurrentMap<TableId, TableId> tableIds = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<DatasetId, DatasetId> datasetIds = new ConcurrentHashMap<>();\n+\n+    BigQueryClient(BigQuery bigQuery, BigQueryConfig config)\n+    {\n+        this.bigQuery = bigQuery;\n+        this.viewMaterializationProject = config.getViewMaterializationProject();\n+        this.viewMaterializationDataset = config.getViewMaterializationDataset();\n+    }\n+\n+    // return empty if no filters are used\n+    private static Optional<String> createWhereClause(String[] filters)\n+    {\n+        if (filters == null || filters.length == 0) {\n+            return Optional.empty();\n+        }\n+        StringBuilder builder = new StringBuilder();\n+        for (String eachStr : filters) {\n+            builder.append(eachStr);\n+        }\n+        return Optional.of(builder.toString());\n+    }\n+\n+    public TableInfo getTable(TableId tableId)\n+    {\n+        TableId bigQueryTableId = tableIds.get(tableId);\n+        Table table = bigQuery.getTable(bigQueryTableId != null ? bigQueryTableId : tableId);\n+        if (table != null) {\n+            tableIds.putIfAbsent(tableId, table.getTableId());\n+            datasetIds.putIfAbsent(toDatasetId(tableId), toDatasetId(table.getTableId()));\n+        }\n+        return table;\n+    }\n+\n+    private DatasetId toDatasetId(TableId tableId)\n+    {\n+        return DatasetId.of(tableId.getProject(), tableId.getDataset());\n+    }\n+\n+    protected String getProjectId()\n+    {\n+        return bigQuery.getOptions().getProjectId();\n+    }\n+\n+    protected Iterable<Dataset> listDatasets(String projectId)\n+    {\n+        final Iterator<Dataset> datasets = bigQuery.listDatasets(projectId).iterateAll().iterator();\n+        return () -> Iterators.transform(datasets, this::addDataSetMappingIfNeeded);\n+    }\n+\n+    protected Iterable<Table> listTables(DatasetId datasetId, TableDefinition.Type... types)\n+    {\n+        Set<TableDefinition.Type> allowedTypes = ImmutableSet.copyOf(types);\n+        DatasetId bigQueryDatasetId = datasetIds.getOrDefault(datasetId, datasetId);\n+        Iterable<Table> allTables = bigQuery.listTables(bigQueryDatasetId).iterateAll();\n+        return StreamSupport.stream(allTables.spliterator(), false)\n+                .filter(table -> allowedTypes.contains(table.getDefinition().getType()))\n+                .collect(toImmutableList());\n+    }\n+\n+    private Dataset addDataSetMappingIfNeeded(Dataset dataset)\n+    {\n+        DatasetId bigQueryDatasetId = dataset.getDatasetId();\n+        DatasetId prestoDatasetId = DatasetId.of(bigQueryDatasetId.getProject(), bigQueryDatasetId.getDataset().toLowerCase(ENGLISH));\n+        datasetIds.putIfAbsent(prestoDatasetId, bigQueryDatasetId);\n+        return dataset;\n+    }\n+\n+    protected TableId createDestinationTable(TableId tableId)\n+    {\n+        String project = viewMaterializationProject.orElse(tableId.getProject());\n+        String dataset = viewMaterializationDataset.orElse(tableId.getDataset());\n+        DatasetId datasetId = mapIfNeeded(project, dataset);\n+        UUID uuid = randomUUID();\n+        String name = format(\"_pbc_%s\", randomUUID().toString().toLowerCase(ENGLISH).replace(\"-\", \"\"));", "originalCommit": "652ed3228c8d8e7fac6ab8b46c08d3506fdbcfad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQ1NTc5Mw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r576455793", "bodyText": "I don't know if there's any special implication but this is the naming prefix for bigquery TableId, suggest to keep it as it is for now", "author": "fgwang7w", "createdAt": "2021-02-15T22:38:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0NDMxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0NDM3Nw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r568244377", "bodyText": "uuid is not used", "author": "zhenxiao", "createdAt": "2021-02-02T00:47:32Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryClient.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.Dataset;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.cloud.http.BaseHttpServiceException;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterators;\n+\n+import java.util.Iterator;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.stream.StreamSupport;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.UUID.randomUUID;\n+import static java.util.stream.Collectors.joining;\n+\n+public class BigQueryClient\n+{\n+    private final BigQuery bigQuery;\n+    private final Optional<String> viewMaterializationProject;\n+    private final Optional<String> viewMaterializationDataset;\n+\n+    // holds caches and mappings\n+    // presto converts the dataset and table names to lower case, while BigQuery is case sensitive\n+    // the mappings here keep the mappings\n+    private final ConcurrentMap<TableId, TableId> tableIds = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<DatasetId, DatasetId> datasetIds = new ConcurrentHashMap<>();\n+\n+    BigQueryClient(BigQuery bigQuery, BigQueryConfig config)\n+    {\n+        this.bigQuery = bigQuery;\n+        this.viewMaterializationProject = config.getViewMaterializationProject();\n+        this.viewMaterializationDataset = config.getViewMaterializationDataset();\n+    }\n+\n+    // return empty if no filters are used\n+    private static Optional<String> createWhereClause(String[] filters)\n+    {\n+        if (filters == null || filters.length == 0) {\n+            return Optional.empty();\n+        }\n+        StringBuilder builder = new StringBuilder();\n+        for (String eachStr : filters) {\n+            builder.append(eachStr);\n+        }\n+        return Optional.of(builder.toString());\n+    }\n+\n+    public TableInfo getTable(TableId tableId)\n+    {\n+        TableId bigQueryTableId = tableIds.get(tableId);\n+        Table table = bigQuery.getTable(bigQueryTableId != null ? bigQueryTableId : tableId);\n+        if (table != null) {\n+            tableIds.putIfAbsent(tableId, table.getTableId());\n+            datasetIds.putIfAbsent(toDatasetId(tableId), toDatasetId(table.getTableId()));\n+        }\n+        return table;\n+    }\n+\n+    private DatasetId toDatasetId(TableId tableId)\n+    {\n+        return DatasetId.of(tableId.getProject(), tableId.getDataset());\n+    }\n+\n+    protected String getProjectId()\n+    {\n+        return bigQuery.getOptions().getProjectId();\n+    }\n+\n+    protected Iterable<Dataset> listDatasets(String projectId)\n+    {\n+        final Iterator<Dataset> datasets = bigQuery.listDatasets(projectId).iterateAll().iterator();\n+        return () -> Iterators.transform(datasets, this::addDataSetMappingIfNeeded);\n+    }\n+\n+    protected Iterable<Table> listTables(DatasetId datasetId, TableDefinition.Type... types)\n+    {\n+        Set<TableDefinition.Type> allowedTypes = ImmutableSet.copyOf(types);\n+        DatasetId bigQueryDatasetId = datasetIds.getOrDefault(datasetId, datasetId);\n+        Iterable<Table> allTables = bigQuery.listTables(bigQueryDatasetId).iterateAll();\n+        return StreamSupport.stream(allTables.spliterator(), false)\n+                .filter(table -> allowedTypes.contains(table.getDefinition().getType()))\n+                .collect(toImmutableList());\n+    }\n+\n+    private Dataset addDataSetMappingIfNeeded(Dataset dataset)\n+    {\n+        DatasetId bigQueryDatasetId = dataset.getDatasetId();\n+        DatasetId prestoDatasetId = DatasetId.of(bigQueryDatasetId.getProject(), bigQueryDatasetId.getDataset().toLowerCase(ENGLISH));\n+        datasetIds.putIfAbsent(prestoDatasetId, bigQueryDatasetId);\n+        return dataset;\n+    }\n+\n+    protected TableId createDestinationTable(TableId tableId)\n+    {\n+        String project = viewMaterializationProject.orElse(tableId.getProject());\n+        String dataset = viewMaterializationDataset.orElse(tableId.getDataset());\n+        DatasetId datasetId = mapIfNeeded(project, dataset);\n+        UUID uuid = randomUUID();", "originalCommit": "652ed3228c8d8e7fac6ab8b46c08d3506fdbcfad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0NTI1Mw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r568245253", "bodyText": "shall we define error code for BigQuery connector?", "author": "zhenxiao", "createdAt": "2021-02-02T00:48:30Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryClient.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.Dataset;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.cloud.http.BaseHttpServiceException;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterators;\n+\n+import java.util.Iterator;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.stream.StreamSupport;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.UUID.randomUUID;\n+import static java.util.stream.Collectors.joining;\n+\n+public class BigQueryClient\n+{\n+    private final BigQuery bigQuery;\n+    private final Optional<String> viewMaterializationProject;\n+    private final Optional<String> viewMaterializationDataset;\n+\n+    // holds caches and mappings\n+    // presto converts the dataset and table names to lower case, while BigQuery is case sensitive\n+    // the mappings here keep the mappings\n+    private final ConcurrentMap<TableId, TableId> tableIds = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<DatasetId, DatasetId> datasetIds = new ConcurrentHashMap<>();\n+\n+    BigQueryClient(BigQuery bigQuery, BigQueryConfig config)\n+    {\n+        this.bigQuery = bigQuery;\n+        this.viewMaterializationProject = config.getViewMaterializationProject();\n+        this.viewMaterializationDataset = config.getViewMaterializationDataset();\n+    }\n+\n+    // return empty if no filters are used\n+    private static Optional<String> createWhereClause(String[] filters)\n+    {\n+        if (filters == null || filters.length == 0) {\n+            return Optional.empty();\n+        }\n+        StringBuilder builder = new StringBuilder();\n+        for (String eachStr : filters) {\n+            builder.append(eachStr);\n+        }\n+        return Optional.of(builder.toString());\n+    }\n+\n+    public TableInfo getTable(TableId tableId)\n+    {\n+        TableId bigQueryTableId = tableIds.get(tableId);\n+        Table table = bigQuery.getTable(bigQueryTableId != null ? bigQueryTableId : tableId);\n+        if (table != null) {\n+            tableIds.putIfAbsent(tableId, table.getTableId());\n+            datasetIds.putIfAbsent(toDatasetId(tableId), toDatasetId(table.getTableId()));\n+        }\n+        return table;\n+    }\n+\n+    private DatasetId toDatasetId(TableId tableId)\n+    {\n+        return DatasetId.of(tableId.getProject(), tableId.getDataset());\n+    }\n+\n+    protected String getProjectId()\n+    {\n+        return bigQuery.getOptions().getProjectId();\n+    }\n+\n+    protected Iterable<Dataset> listDatasets(String projectId)\n+    {\n+        final Iterator<Dataset> datasets = bigQuery.listDatasets(projectId).iterateAll().iterator();\n+        return () -> Iterators.transform(datasets, this::addDataSetMappingIfNeeded);\n+    }\n+\n+    protected Iterable<Table> listTables(DatasetId datasetId, TableDefinition.Type... types)\n+    {\n+        Set<TableDefinition.Type> allowedTypes = ImmutableSet.copyOf(types);\n+        DatasetId bigQueryDatasetId = datasetIds.getOrDefault(datasetId, datasetId);\n+        Iterable<Table> allTables = bigQuery.listTables(bigQueryDatasetId).iterateAll();\n+        return StreamSupport.stream(allTables.spliterator(), false)\n+                .filter(table -> allowedTypes.contains(table.getDefinition().getType()))\n+                .collect(toImmutableList());\n+    }\n+\n+    private Dataset addDataSetMappingIfNeeded(Dataset dataset)\n+    {\n+        DatasetId bigQueryDatasetId = dataset.getDatasetId();\n+        DatasetId prestoDatasetId = DatasetId.of(bigQueryDatasetId.getProject(), bigQueryDatasetId.getDataset().toLowerCase(ENGLISH));\n+        datasetIds.putIfAbsent(prestoDatasetId, bigQueryDatasetId);\n+        return dataset;\n+    }\n+\n+    protected TableId createDestinationTable(TableId tableId)\n+    {\n+        String project = viewMaterializationProject.orElse(tableId.getProject());\n+        String dataset = viewMaterializationDataset.orElse(tableId.getDataset());\n+        DatasetId datasetId = mapIfNeeded(project, dataset);\n+        UUID uuid = randomUUID();\n+        String name = format(\"_pbc_%s\", randomUUID().toString().toLowerCase(ENGLISH).replace(\"-\", \"\"));\n+        return TableId.of(datasetId.getProject(), datasetId.getDataset(), name);\n+    }\n+\n+    private DatasetId mapIfNeeded(String project, String dataset)\n+    {\n+        DatasetId datasetId = DatasetId.of(project, dataset);\n+        return datasetIds.getOrDefault(datasetId, datasetId);\n+    }\n+\n+    protected Table update(TableInfo table)\n+    {\n+        return bigQuery.update(table);\n+    }\n+\n+    protected Job create(JobInfo jobInfo)\n+    {\n+        return bigQuery.create(jobInfo);\n+    }\n+\n+    protected TableResult query(String sql)\n+    {\n+        try {\n+            return bigQuery.query(QueryJobConfiguration.of(sql));\n+        }\n+        catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            throw new BigQueryException(BaseHttpServiceException.UNKNOWN_CODE, format(\"Failed to run the query [%s]\", sql), e);", "originalCommit": "652ed3228c8d8e7fac6ab8b46c08d3506fdbcfad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQ1OTYyNA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r576459624", "bodyText": "the error coming from bigquery service is unknown at this point. I added BIGQUERY_QUERY_FAILED_UNKNOWN error code but we should keep the error message as it is", "author": "fgwang7w", "createdAt": "2021-02-15T22:52:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0NTI1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0NTc4MQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r568245781", "bodyText": "static import NULLABLE\ndo we need the trailing comment? same to lines below", "author": "zhenxiao", "createdAt": "2021-02-02T00:49:51Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryColumnHandle.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ColumnMetadata;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.cloud.bigquery.Field;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class BigQueryColumnHandle\n+        implements ColumnHandle, BigQueryType.Adaptor\n+{\n+    private final String name;\n+    private final BigQueryType bigQueryType;\n+    private final Field.Mode mode;\n+    private final List<BigQueryColumnHandle> subColumns;\n+    private final String description;\n+\n+    @JsonCreator\n+    public BigQueryColumnHandle(\n+            @JsonProperty(\"name\") String name,\n+            @JsonProperty(\"bigQueryType\") BigQueryType bigQueryType,\n+            @JsonProperty(\"mode\") Field.Mode mode,\n+            @JsonProperty(\"subColumns\") List<BigQueryColumnHandle> subColumns,\n+            @JsonProperty(\"description\") String description)\n+    {\n+        this.name = requireNonNull(name, \"column name cannot be null\");\n+        this.bigQueryType = requireNonNull(bigQueryType, () -> format(\"column type cannot be null for column [%s]\", name));\n+        this.mode = requireNonNull(mode, \"Field mode cannot be null\");\n+        this.subColumns = ImmutableList.copyOf(requireNonNull(subColumns, \"subColumns is null\"));\n+        this.description = description;\n+    }\n+\n+    @JsonProperty\n+    public String getName()\n+    {\n+        return name;\n+    }\n+\n+    @Override\n+    @JsonProperty\n+    public BigQueryType getBigQueryType()\n+    {\n+        return bigQueryType;\n+    }\n+\n+    @Override\n+    public Map<String, BigQueryType.Adaptor> getBigQuerySubTypes()\n+    {\n+        return subColumns.stream().collect(toImmutableMap(BigQueryColumnHandle::getName, column -> column));\n+    }\n+\n+    @Override\n+    @JsonProperty\n+    public Field.Mode getMode()\n+    {\n+        return mode;\n+    }\n+\n+    @JsonProperty\n+    public List<BigQueryColumnHandle> getSubColumns()\n+    {\n+        return subColumns;\n+    }\n+\n+    @JsonProperty\n+    public String description()\n+    {\n+        return description;\n+    }\n+\n+    public ColumnMetadata getColumnMetadata()\n+    {\n+        return new ColumnMetadata(\n+                name,\n+                getPrestoType(),\n+                mode == Field.Mode.NULLABLE, //nullable", "originalCommit": "652ed3228c8d8e7fac6ab8b46c08d3506fdbcfad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQ2MTI2MA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r576461260", "bodyText": "ok", "author": "fgwang7w", "createdAt": "2021-02-15T22:59:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0NTc4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0NjIyMw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r568246223", "bodyText": "where data resides", "author": "zhenxiao", "createdAt": "2021-02-02T00:51:06Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryConfig.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.airlift.configuration.ConfigDescription;\n+import com.google.auth.oauth2.GoogleCredentials;\n+\n+import javax.validation.constraints.AssertTrue;\n+import javax.validation.constraints.Min;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+public class BigQueryConfig\n+{\n+    public static final int DEFAULT_MAX_READ_ROWS_RETRIES = 3;\n+\n+    private Optional<String> credentialsKey = Optional.empty();\n+    private Optional<String> credentialsFile = Optional.empty();\n+    private Optional<String> projectId = Optional.empty();\n+    private Optional<String> parentProjectId = Optional.empty();\n+    private OptionalInt parallelism = OptionalInt.empty();\n+    private boolean viewsEnabled;\n+    private Optional<String> viewMaterializationProject = Optional.empty();\n+    private Optional<String> viewMaterializationDataset = Optional.empty();\n+    private int maxReadRowsRetries = DEFAULT_MAX_READ_ROWS_RETRIES;\n+\n+    @AssertTrue(message = \"Exactly one of 'bigquery.credentials-key' or 'bigquery.credentials-file' must be specified, or the default GoogleCredentials could be created\")\n+    public boolean isCredentialsConfigurationValid()\n+    {\n+        // only one of them (at most) should be present\n+        if (credentialsKey.isPresent() && credentialsFile.isPresent()) {\n+            return false;\n+        }\n+        // if no credentials were supplied, let's check if we can create the default ones\n+        if (!credentialsKey.isPresent() && !credentialsFile.isPresent()) {\n+            try {\n+                GoogleCredentials.getApplicationDefault();\n+            }\n+            catch (IOException e) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public Optional<String> getCredentialsKey()\n+    {\n+        return credentialsKey;\n+    }\n+\n+    @Config(\"bigquery.credentials-key\")\n+    @ConfigDescription(\"The base64 encoded credentials key\")\n+    public BigQueryConfig setCredentialsKey(String credentialsKey)\n+    {\n+        this.credentialsKey = Optional.of(credentialsKey);\n+        return this;\n+    }\n+\n+    public Optional<String> getCredentialsFile()\n+    {\n+        return credentialsFile;\n+    }\n+\n+    @Config(\"bigquery.credentials-file\")\n+    @ConfigDescription(\"The path to the JSON credentials file\")\n+    public BigQueryConfig setCredentialsFile(String credentialsFile)\n+    {\n+        this.credentialsFile = Optional.of(credentialsFile);\n+        return this;\n+    }\n+\n+    public Optional<String> getProjectId()\n+    {\n+        return projectId;\n+    }\n+\n+    @Config(\"bigquery.project-id\")\n+    @ConfigDescription(\"The Google Cloud Project ID where the data reside\")", "originalCommit": "652ed3228c8d8e7fac6ab8b46c08d3506fdbcfad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0NjQ3Ng==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r568246476", "bodyText": "sorry, I do not get the meaning. what is to bill for the export?", "author": "zhenxiao", "createdAt": "2021-02-02T00:51:48Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryConfig.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.airlift.configuration.ConfigDescription;\n+import com.google.auth.oauth2.GoogleCredentials;\n+\n+import javax.validation.constraints.AssertTrue;\n+import javax.validation.constraints.Min;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+public class BigQueryConfig\n+{\n+    public static final int DEFAULT_MAX_READ_ROWS_RETRIES = 3;\n+\n+    private Optional<String> credentialsKey = Optional.empty();\n+    private Optional<String> credentialsFile = Optional.empty();\n+    private Optional<String> projectId = Optional.empty();\n+    private Optional<String> parentProjectId = Optional.empty();\n+    private OptionalInt parallelism = OptionalInt.empty();\n+    private boolean viewsEnabled;\n+    private Optional<String> viewMaterializationProject = Optional.empty();\n+    private Optional<String> viewMaterializationDataset = Optional.empty();\n+    private int maxReadRowsRetries = DEFAULT_MAX_READ_ROWS_RETRIES;\n+\n+    @AssertTrue(message = \"Exactly one of 'bigquery.credentials-key' or 'bigquery.credentials-file' must be specified, or the default GoogleCredentials could be created\")\n+    public boolean isCredentialsConfigurationValid()\n+    {\n+        // only one of them (at most) should be present\n+        if (credentialsKey.isPresent() && credentialsFile.isPresent()) {\n+            return false;\n+        }\n+        // if no credentials were supplied, let's check if we can create the default ones\n+        if (!credentialsKey.isPresent() && !credentialsFile.isPresent()) {\n+            try {\n+                GoogleCredentials.getApplicationDefault();\n+            }\n+            catch (IOException e) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public Optional<String> getCredentialsKey()\n+    {\n+        return credentialsKey;\n+    }\n+\n+    @Config(\"bigquery.credentials-key\")\n+    @ConfigDescription(\"The base64 encoded credentials key\")\n+    public BigQueryConfig setCredentialsKey(String credentialsKey)\n+    {\n+        this.credentialsKey = Optional.of(credentialsKey);\n+        return this;\n+    }\n+\n+    public Optional<String> getCredentialsFile()\n+    {\n+        return credentialsFile;\n+    }\n+\n+    @Config(\"bigquery.credentials-file\")\n+    @ConfigDescription(\"The path to the JSON credentials file\")\n+    public BigQueryConfig setCredentialsFile(String credentialsFile)\n+    {\n+        this.credentialsFile = Optional.of(credentialsFile);\n+        return this;\n+    }\n+\n+    public Optional<String> getProjectId()\n+    {\n+        return projectId;\n+    }\n+\n+    @Config(\"bigquery.project-id\")\n+    @ConfigDescription(\"The Google Cloud Project ID where the data reside\")\n+    public BigQueryConfig setProjectId(String projectId)\n+    {\n+        this.projectId = Optional.of(projectId);\n+        return this;\n+    }\n+\n+    public Optional<String> getParentProjectId()\n+    {\n+        return parentProjectId;\n+    }\n+\n+    @Config(\"bigquery.parent-project-id\")\n+    @ConfigDescription(\"The Google Cloud Project ID to bill for the export\")", "originalCommit": "652ed3228c8d8e7fac6ab8b46c08d3506fdbcfad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQ2MjU0Nw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r576462547", "bodyText": "revised", "author": "fgwang7w", "createdAt": "2021-02-15T23:04:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0NjQ3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0NjU5NQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r568246595", "bodyText": "number of partitions to split data", "author": "zhenxiao", "createdAt": "2021-02-02T00:52:08Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryConfig.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.airlift.configuration.ConfigDescription;\n+import com.google.auth.oauth2.GoogleCredentials;\n+\n+import javax.validation.constraints.AssertTrue;\n+import javax.validation.constraints.Min;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+public class BigQueryConfig\n+{\n+    public static final int DEFAULT_MAX_READ_ROWS_RETRIES = 3;\n+\n+    private Optional<String> credentialsKey = Optional.empty();\n+    private Optional<String> credentialsFile = Optional.empty();\n+    private Optional<String> projectId = Optional.empty();\n+    private Optional<String> parentProjectId = Optional.empty();\n+    private OptionalInt parallelism = OptionalInt.empty();\n+    private boolean viewsEnabled;\n+    private Optional<String> viewMaterializationProject = Optional.empty();\n+    private Optional<String> viewMaterializationDataset = Optional.empty();\n+    private int maxReadRowsRetries = DEFAULT_MAX_READ_ROWS_RETRIES;\n+\n+    @AssertTrue(message = \"Exactly one of 'bigquery.credentials-key' or 'bigquery.credentials-file' must be specified, or the default GoogleCredentials could be created\")\n+    public boolean isCredentialsConfigurationValid()\n+    {\n+        // only one of them (at most) should be present\n+        if (credentialsKey.isPresent() && credentialsFile.isPresent()) {\n+            return false;\n+        }\n+        // if no credentials were supplied, let's check if we can create the default ones\n+        if (!credentialsKey.isPresent() && !credentialsFile.isPresent()) {\n+            try {\n+                GoogleCredentials.getApplicationDefault();\n+            }\n+            catch (IOException e) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public Optional<String> getCredentialsKey()\n+    {\n+        return credentialsKey;\n+    }\n+\n+    @Config(\"bigquery.credentials-key\")\n+    @ConfigDescription(\"The base64 encoded credentials key\")\n+    public BigQueryConfig setCredentialsKey(String credentialsKey)\n+    {\n+        this.credentialsKey = Optional.of(credentialsKey);\n+        return this;\n+    }\n+\n+    public Optional<String> getCredentialsFile()\n+    {\n+        return credentialsFile;\n+    }\n+\n+    @Config(\"bigquery.credentials-file\")\n+    @ConfigDescription(\"The path to the JSON credentials file\")\n+    public BigQueryConfig setCredentialsFile(String credentialsFile)\n+    {\n+        this.credentialsFile = Optional.of(credentialsFile);\n+        return this;\n+    }\n+\n+    public Optional<String> getProjectId()\n+    {\n+        return projectId;\n+    }\n+\n+    @Config(\"bigquery.project-id\")\n+    @ConfigDescription(\"The Google Cloud Project ID where the data reside\")\n+    public BigQueryConfig setProjectId(String projectId)\n+    {\n+        this.projectId = Optional.of(projectId);\n+        return this;\n+    }\n+\n+    public Optional<String> getParentProjectId()\n+    {\n+        return parentProjectId;\n+    }\n+\n+    @Config(\"bigquery.parent-project-id\")\n+    @ConfigDescription(\"The Google Cloud Project ID to bill for the export\")\n+    public BigQueryConfig setParentProjectId(String parentProjectId)\n+    {\n+        this.parentProjectId = Optional.of(parentProjectId);\n+        return this;\n+    }\n+\n+    public OptionalInt getParallelism()\n+    {\n+        return parallelism;\n+    }\n+\n+    @Config(\"bigquery.parallelism\")\n+    @ConfigDescription(\"The number of partitions to split the data into.\")", "originalCommit": "652ed3228c8d8e7fac6ab8b46c08d3506fdbcfad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0Njc0Ng==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r568246746", "bodyText": "Enable BigQuery connector to read views", "author": "zhenxiao", "createdAt": "2021-02-02T00:52:29Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryConfig.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.airlift.configuration.ConfigDescription;\n+import com.google.auth.oauth2.GoogleCredentials;\n+\n+import javax.validation.constraints.AssertTrue;\n+import javax.validation.constraints.Min;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+public class BigQueryConfig\n+{\n+    public static final int DEFAULT_MAX_READ_ROWS_RETRIES = 3;\n+\n+    private Optional<String> credentialsKey = Optional.empty();\n+    private Optional<String> credentialsFile = Optional.empty();\n+    private Optional<String> projectId = Optional.empty();\n+    private Optional<String> parentProjectId = Optional.empty();\n+    private OptionalInt parallelism = OptionalInt.empty();\n+    private boolean viewsEnabled;\n+    private Optional<String> viewMaterializationProject = Optional.empty();\n+    private Optional<String> viewMaterializationDataset = Optional.empty();\n+    private int maxReadRowsRetries = DEFAULT_MAX_READ_ROWS_RETRIES;\n+\n+    @AssertTrue(message = \"Exactly one of 'bigquery.credentials-key' or 'bigquery.credentials-file' must be specified, or the default GoogleCredentials could be created\")\n+    public boolean isCredentialsConfigurationValid()\n+    {\n+        // only one of them (at most) should be present\n+        if (credentialsKey.isPresent() && credentialsFile.isPresent()) {\n+            return false;\n+        }\n+        // if no credentials were supplied, let's check if we can create the default ones\n+        if (!credentialsKey.isPresent() && !credentialsFile.isPresent()) {\n+            try {\n+                GoogleCredentials.getApplicationDefault();\n+            }\n+            catch (IOException e) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public Optional<String> getCredentialsKey()\n+    {\n+        return credentialsKey;\n+    }\n+\n+    @Config(\"bigquery.credentials-key\")\n+    @ConfigDescription(\"The base64 encoded credentials key\")\n+    public BigQueryConfig setCredentialsKey(String credentialsKey)\n+    {\n+        this.credentialsKey = Optional.of(credentialsKey);\n+        return this;\n+    }\n+\n+    public Optional<String> getCredentialsFile()\n+    {\n+        return credentialsFile;\n+    }\n+\n+    @Config(\"bigquery.credentials-file\")\n+    @ConfigDescription(\"The path to the JSON credentials file\")\n+    public BigQueryConfig setCredentialsFile(String credentialsFile)\n+    {\n+        this.credentialsFile = Optional.of(credentialsFile);\n+        return this;\n+    }\n+\n+    public Optional<String> getProjectId()\n+    {\n+        return projectId;\n+    }\n+\n+    @Config(\"bigquery.project-id\")\n+    @ConfigDescription(\"The Google Cloud Project ID where the data reside\")\n+    public BigQueryConfig setProjectId(String projectId)\n+    {\n+        this.projectId = Optional.of(projectId);\n+        return this;\n+    }\n+\n+    public Optional<String> getParentProjectId()\n+    {\n+        return parentProjectId;\n+    }\n+\n+    @Config(\"bigquery.parent-project-id\")\n+    @ConfigDescription(\"The Google Cloud Project ID to bill for the export\")\n+    public BigQueryConfig setParentProjectId(String parentProjectId)\n+    {\n+        this.parentProjectId = Optional.of(parentProjectId);\n+        return this;\n+    }\n+\n+    public OptionalInt getParallelism()\n+    {\n+        return parallelism;\n+    }\n+\n+    @Config(\"bigquery.parallelism\")\n+    @ConfigDescription(\"The number of partitions to split the data into.\")\n+    public BigQueryConfig setParallelism(int parallelism)\n+    {\n+        this.parallelism = OptionalInt.of(parallelism);\n+        return this;\n+    }\n+\n+    public boolean isViewsEnabled()\n+    {\n+        return viewsEnabled;\n+    }\n+\n+    @Config(\"bigquery.views-enabled\")\n+    @ConfigDescription(\"Enables the connector to read from views and not only tables\")", "originalCommit": "652ed3228c8d8e7fac6ab8b46c08d3506fdbcfad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0Njk1MQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r568246951", "bodyText": "number of retries in case of server issues", "author": "zhenxiao", "createdAt": "2021-02-02T00:53:07Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryConfig.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.airlift.configuration.ConfigDescription;\n+import com.google.auth.oauth2.GoogleCredentials;\n+\n+import javax.validation.constraints.AssertTrue;\n+import javax.validation.constraints.Min;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+public class BigQueryConfig\n+{\n+    public static final int DEFAULT_MAX_READ_ROWS_RETRIES = 3;\n+\n+    private Optional<String> credentialsKey = Optional.empty();\n+    private Optional<String> credentialsFile = Optional.empty();\n+    private Optional<String> projectId = Optional.empty();\n+    private Optional<String> parentProjectId = Optional.empty();\n+    private OptionalInt parallelism = OptionalInt.empty();\n+    private boolean viewsEnabled;\n+    private Optional<String> viewMaterializationProject = Optional.empty();\n+    private Optional<String> viewMaterializationDataset = Optional.empty();\n+    private int maxReadRowsRetries = DEFAULT_MAX_READ_ROWS_RETRIES;\n+\n+    @AssertTrue(message = \"Exactly one of 'bigquery.credentials-key' or 'bigquery.credentials-file' must be specified, or the default GoogleCredentials could be created\")\n+    public boolean isCredentialsConfigurationValid()\n+    {\n+        // only one of them (at most) should be present\n+        if (credentialsKey.isPresent() && credentialsFile.isPresent()) {\n+            return false;\n+        }\n+        // if no credentials were supplied, let's check if we can create the default ones\n+        if (!credentialsKey.isPresent() && !credentialsFile.isPresent()) {\n+            try {\n+                GoogleCredentials.getApplicationDefault();\n+            }\n+            catch (IOException e) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public Optional<String> getCredentialsKey()\n+    {\n+        return credentialsKey;\n+    }\n+\n+    @Config(\"bigquery.credentials-key\")\n+    @ConfigDescription(\"The base64 encoded credentials key\")\n+    public BigQueryConfig setCredentialsKey(String credentialsKey)\n+    {\n+        this.credentialsKey = Optional.of(credentialsKey);\n+        return this;\n+    }\n+\n+    public Optional<String> getCredentialsFile()\n+    {\n+        return credentialsFile;\n+    }\n+\n+    @Config(\"bigquery.credentials-file\")\n+    @ConfigDescription(\"The path to the JSON credentials file\")\n+    public BigQueryConfig setCredentialsFile(String credentialsFile)\n+    {\n+        this.credentialsFile = Optional.of(credentialsFile);\n+        return this;\n+    }\n+\n+    public Optional<String> getProjectId()\n+    {\n+        return projectId;\n+    }\n+\n+    @Config(\"bigquery.project-id\")\n+    @ConfigDescription(\"The Google Cloud Project ID where the data reside\")\n+    public BigQueryConfig setProjectId(String projectId)\n+    {\n+        this.projectId = Optional.of(projectId);\n+        return this;\n+    }\n+\n+    public Optional<String> getParentProjectId()\n+    {\n+        return parentProjectId;\n+    }\n+\n+    @Config(\"bigquery.parent-project-id\")\n+    @ConfigDescription(\"The Google Cloud Project ID to bill for the export\")\n+    public BigQueryConfig setParentProjectId(String parentProjectId)\n+    {\n+        this.parentProjectId = Optional.of(parentProjectId);\n+        return this;\n+    }\n+\n+    public OptionalInt getParallelism()\n+    {\n+        return parallelism;\n+    }\n+\n+    @Config(\"bigquery.parallelism\")\n+    @ConfigDescription(\"The number of partitions to split the data into.\")\n+    public BigQueryConfig setParallelism(int parallelism)\n+    {\n+        this.parallelism = OptionalInt.of(parallelism);\n+        return this;\n+    }\n+\n+    public boolean isViewsEnabled()\n+    {\n+        return viewsEnabled;\n+    }\n+\n+    @Config(\"bigquery.views-enabled\")\n+    @ConfigDescription(\"Enables the connector to read from views and not only tables\")\n+    public BigQueryConfig setViewsEnabled(boolean viewsEnabled)\n+    {\n+        this.viewsEnabled = viewsEnabled;\n+        return this;\n+    }\n+\n+    public int getViewExpirationTimeInHours()\n+    {\n+        return 24;\n+    }\n+\n+    public Optional<String> getViewMaterializationProject()\n+    {\n+        return viewMaterializationProject;\n+    }\n+\n+    @Config(\"bigquery.view-materialization-project\")\n+    @ConfigDescription(\"The project where the materialized view is going to be created\")\n+    public BigQueryConfig setViewMaterializationProject(String viewMaterializationProject)\n+    {\n+        this.viewMaterializationProject = Optional.of(viewMaterializationProject);\n+        return this;\n+    }\n+\n+    public Optional<String> getViewMaterializationDataset()\n+    {\n+        return viewMaterializationDataset;\n+    }\n+\n+    @Config(\"bigquery.view-materialization-dataset\")\n+    @ConfigDescription(\"The dataset where the materialized view is going to be created\")\n+    public BigQueryConfig setViewMaterializationDataset(String viewMaterializationDataset)\n+    {\n+        this.viewMaterializationDataset = Optional.of(viewMaterializationDataset);\n+        return this;\n+    }\n+\n+    @Min(0)\n+    public int getMaxReadRowsRetries()\n+    {\n+        return maxReadRowsRetries;\n+    }\n+\n+    @Config(\"bigquery.max-read-rows-retries\")\n+    @ConfigDescription(\"The number of retries in case of retryable server issues\")", "originalCommit": "652ed3228c8d8e7fac6ab8b46c08d3506fdbcfad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0NzE3Mw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r568247173", "bodyText": "comment not needed", "author": "zhenxiao", "createdAt": "2021-02-02T00:53:50Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryConnectorModule.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.presto.spi.NodeManager;\n+import com.google.api.gax.rpc.FixedHeaderProvider;\n+import com.google.api.gax.rpc.HeaderProvider;\n+import com.google.auth.Credentials;\n+import com.google.auth.oauth2.ServiceAccountCredentials;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.Provides;\n+import com.google.inject.Scopes;\n+import com.google.inject.Singleton;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.airlift.configuration.ConfigBinder.configBinder;\n+\n+public class BigQueryConnectorModule\n+        implements Module\n+{\n+    private final NodeManager nodeManager;\n+\n+    public BigQueryConnectorModule(NodeManager nodeManager)\n+    {\n+        this.nodeManager = nodeManager;\n+    }\n+\n+    @Provides\n+    @Singleton\n+    public static HeaderProvider createHeaderProvider(NodeManager nodeManager)\n+    {\n+        return FixedHeaderProvider.create(\"user-agent\", \"prestodb/\" + nodeManager.getCurrentNode().getVersion());\n+    }\n+\n+    @Override\n+    public void configure(Binder binder)\n+    {\n+        // BigQuery related", "originalCommit": "652ed3228c8d8e7fac6ab8b46c08d3506fdbcfad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0NzIyOQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r568247229", "bodyText": "comment not needed", "author": "zhenxiao", "createdAt": "2021-02-02T00:53:57Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryConnectorModule.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.presto.spi.NodeManager;\n+import com.google.api.gax.rpc.FixedHeaderProvider;\n+import com.google.api.gax.rpc.HeaderProvider;\n+import com.google.auth.Credentials;\n+import com.google.auth.oauth2.ServiceAccountCredentials;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.Provides;\n+import com.google.inject.Scopes;\n+import com.google.inject.Singleton;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.airlift.configuration.ConfigBinder.configBinder;\n+\n+public class BigQueryConnectorModule\n+        implements Module\n+{\n+    private final NodeManager nodeManager;\n+\n+    public BigQueryConnectorModule(NodeManager nodeManager)\n+    {\n+        this.nodeManager = nodeManager;\n+    }\n+\n+    @Provides\n+    @Singleton\n+    public static HeaderProvider createHeaderProvider(NodeManager nodeManager)\n+    {\n+        return FixedHeaderProvider.create(\"user-agent\", \"prestodb/\" + nodeManager.getCurrentNode().getVersion());\n+    }\n+\n+    @Override\n+    public void configure(Binder binder)\n+    {\n+        // BigQuery related\n+        binder.bind(BigQueryStorageClientFactory.class).in(Scopes.SINGLETON);\n+\n+        // Connector implementation", "originalCommit": "652ed3228c8d8e7fac6ab8b46c08d3506fdbcfad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0ODE5OA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r568248198", "bodyText": "shall we import from InformationSchemaMetadata?", "author": "zhenxiao", "createdAt": "2021-02-02T00:56:51Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryMetadata.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ColumnMetadata;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.ConnectorTableHandle;\n+import com.facebook.presto.spi.ConnectorTableLayout;\n+import com.facebook.presto.spi.ConnectorTableLayoutHandle;\n+import com.facebook.presto.spi.ConnectorTableLayoutResult;\n+import com.facebook.presto.spi.ConnectorTableMetadata;\n+import com.facebook.presto.spi.Constraint;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.SchemaTablePrefix;\n+import com.facebook.presto.spi.TableNotFoundException;\n+import com.facebook.presto.spi.connector.ConnectorMetadata;\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.Schema;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Streams;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.google.cloud.bigquery.TableDefinition.Type.TABLE;\n+import static com.google.cloud.bigquery.TableDefinition.Type.VIEW;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toMap;\n+\n+public class BigQueryMetadata\n+        implements ConnectorMetadata\n+{\n+    static final int NUMERIC_DATA_TYPE_PRECISION = 38;\n+    static final int NUMERIC_DATA_TYPE_SCALE = 9;\n+    static final String INFORMATION_SCHEMA = \"information_schema\";", "originalCommit": "652ed3228c8d8e7fac6ab8b46c08d3506fdbcfad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQ2NzI5OQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r576467299", "bodyText": "InformationSchemaMetadata is unreachable, make INFORMATION_SCHEMA as a private locally defined variable instead now", "author": "fgwang7w", "createdAt": "2021-02-15T23:23:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0ODE5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTA1MTE1Nw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r569051157", "bodyText": "nit: can we use String.join(\"\", filters) instead of the loop?", "author": "beinan", "createdAt": "2021-02-03T01:39:39Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryClient.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.Dataset;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.cloud.http.BaseHttpServiceException;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterators;\n+\n+import java.util.Iterator;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.stream.StreamSupport;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.UUID.randomUUID;\n+import static java.util.stream.Collectors.joining;\n+\n+public class BigQueryClient\n+{\n+    private final BigQuery bigQuery;\n+    private final Optional<String> viewMaterializationProject;\n+    private final Optional<String> viewMaterializationDataset;\n+\n+    // holds caches and mappings\n+    // presto converts the dataset and table names to lower case, while BigQuery is case sensitive\n+    // the mappings here keep the mappings\n+    private final ConcurrentMap<TableId, TableId> tableIds = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<DatasetId, DatasetId> datasetIds = new ConcurrentHashMap<>();\n+\n+    BigQueryClient(BigQuery bigQuery, BigQueryConfig config)\n+    {\n+        this.bigQuery = bigQuery;\n+        this.viewMaterializationProject = config.getViewMaterializationProject();\n+        this.viewMaterializationDataset = config.getViewMaterializationDataset();\n+    }\n+\n+    // return empty if no filters are used\n+    private static Optional<String> createWhereClause(String[] filters)\n+    {\n+        if (filters == null || filters.length == 0) {\n+            return Optional.empty();\n+        }\n+        StringBuilder builder = new StringBuilder();\n+        for (String eachStr : filters) {", "originalCommit": "652ed3228c8d8e7fac6ab8b46c08d3506fdbcfad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTEwMjI3NQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r569102275", "bodyText": "The name formatedQuery may not be precise, how about using columns or projection?", "author": "beinan", "createdAt": "2021-02-03T03:13:20Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryClient.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.Dataset;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.cloud.http.BaseHttpServiceException;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterators;\n+\n+import java.util.Iterator;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.stream.StreamSupport;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.UUID.randomUUID;\n+import static java.util.stream.Collectors.joining;\n+\n+public class BigQueryClient\n+{\n+    private final BigQuery bigQuery;\n+    private final Optional<String> viewMaterializationProject;\n+    private final Optional<String> viewMaterializationDataset;\n+\n+    // holds caches and mappings\n+    // presto converts the dataset and table names to lower case, while BigQuery is case sensitive\n+    // the mappings here keep the mappings\n+    private final ConcurrentMap<TableId, TableId> tableIds = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<DatasetId, DatasetId> datasetIds = new ConcurrentHashMap<>();\n+\n+    BigQueryClient(BigQuery bigQuery, BigQueryConfig config)\n+    {\n+        this.bigQuery = bigQuery;\n+        this.viewMaterializationProject = config.getViewMaterializationProject();\n+        this.viewMaterializationDataset = config.getViewMaterializationDataset();\n+    }\n+\n+    // return empty if no filters are used\n+    private static Optional<String> createWhereClause(String[] filters)\n+    {\n+        if (filters == null || filters.length == 0) {\n+            return Optional.empty();\n+        }\n+        StringBuilder builder = new StringBuilder();\n+        for (String eachStr : filters) {\n+            builder.append(eachStr);\n+        }\n+        return Optional.of(builder.toString());\n+    }\n+\n+    public TableInfo getTable(TableId tableId)\n+    {\n+        TableId bigQueryTableId = tableIds.get(tableId);\n+        Table table = bigQuery.getTable(bigQueryTableId != null ? bigQueryTableId : tableId);\n+        if (table != null) {\n+            tableIds.putIfAbsent(tableId, table.getTableId());\n+            datasetIds.putIfAbsent(toDatasetId(tableId), toDatasetId(table.getTableId()));\n+        }\n+        return table;\n+    }\n+\n+    private DatasetId toDatasetId(TableId tableId)\n+    {\n+        return DatasetId.of(tableId.getProject(), tableId.getDataset());\n+    }\n+\n+    protected String getProjectId()\n+    {\n+        return bigQuery.getOptions().getProjectId();\n+    }\n+\n+    protected Iterable<Dataset> listDatasets(String projectId)\n+    {\n+        final Iterator<Dataset> datasets = bigQuery.listDatasets(projectId).iterateAll().iterator();\n+        return () -> Iterators.transform(datasets, this::addDataSetMappingIfNeeded);\n+    }\n+\n+    protected Iterable<Table> listTables(DatasetId datasetId, TableDefinition.Type... types)\n+    {\n+        Set<TableDefinition.Type> allowedTypes = ImmutableSet.copyOf(types);\n+        DatasetId bigQueryDatasetId = datasetIds.getOrDefault(datasetId, datasetId);\n+        Iterable<Table> allTables = bigQuery.listTables(bigQueryDatasetId).iterateAll();\n+        return StreamSupport.stream(allTables.spliterator(), false)\n+                .filter(table -> allowedTypes.contains(table.getDefinition().getType()))\n+                .collect(toImmutableList());\n+    }\n+\n+    private Dataset addDataSetMappingIfNeeded(Dataset dataset)\n+    {\n+        DatasetId bigQueryDatasetId = dataset.getDatasetId();\n+        DatasetId prestoDatasetId = DatasetId.of(bigQueryDatasetId.getProject(), bigQueryDatasetId.getDataset().toLowerCase(ENGLISH));\n+        datasetIds.putIfAbsent(prestoDatasetId, bigQueryDatasetId);\n+        return dataset;\n+    }\n+\n+    protected TableId createDestinationTable(TableId tableId)\n+    {\n+        String project = viewMaterializationProject.orElse(tableId.getProject());\n+        String dataset = viewMaterializationDataset.orElse(tableId.getDataset());\n+        DatasetId datasetId = mapIfNeeded(project, dataset);\n+        UUID uuid = randomUUID();\n+        String name = format(\"_pbc_%s\", randomUUID().toString().toLowerCase(ENGLISH).replace(\"-\", \"\"));\n+        return TableId.of(datasetId.getProject(), datasetId.getDataset(), name);\n+    }\n+\n+    private DatasetId mapIfNeeded(String project, String dataset)\n+    {\n+        DatasetId datasetId = DatasetId.of(project, dataset);\n+        return datasetIds.getOrDefault(datasetId, datasetId);\n+    }\n+\n+    protected Table update(TableInfo table)\n+    {\n+        return bigQuery.update(table);\n+    }\n+\n+    protected Job create(JobInfo jobInfo)\n+    {\n+        return bigQuery.create(jobInfo);\n+    }\n+\n+    protected TableResult query(String sql)\n+    {\n+        try {\n+            return bigQuery.query(QueryJobConfiguration.of(sql));\n+        }\n+        catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            throw new BigQueryException(BaseHttpServiceException.UNKNOWN_CODE, format(\"Failed to run the query [%s]\", sql), e);\n+        }\n+    }\n+\n+    protected String createSql(TableId table, ImmutableList<String> requiredColumns, String[] filters)\n+    {\n+        String columns = requiredColumns.isEmpty() ? \"*\" :\n+                requiredColumns.stream().map(column -> format(\"`%s`\", column)).collect(joining(\",\"));\n+\n+        String whereClause = createWhereClause(filters)\n+                .map(clause -> \"WHERE \" + clause)\n+                .orElse(\"\");\n+\n+        return createSql(table, columns, filters);\n+    }\n+\n+    // properly formatting SELECT statement\n+    protected String createSql(TableId table, String formatedQuery, String[] filters)", "originalCommit": "652ed3228c8d8e7fac6ab8b46c08d3506fdbcfad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQ3MTg3Nw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r576471877", "bodyText": "revised to requiredColumns now", "author": "fgwang7w", "createdAt": "2021-02-15T23:42:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTEwMjI3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTEwODE1Mg==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r569108152", "bodyText": "Merge these two?  something like if (A || B)? or using a switch might help in case there might be more types need to be considered here.", "author": "beinan", "createdAt": "2021-02-03T03:33:57Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryResultPageSource.java", "diffHunk": "@@ -0,0 +1,342 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.DateTimeEncoding;\n+import com.facebook.presto.common.type.DecimalType;\n+import com.facebook.presto.common.type.Decimals;\n+import com.facebook.presto.common.type.RowType;\n+import com.facebook.presto.common.type.TimeZoneKey;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.common.type.VarbinaryType;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.cloud.bigquery.storage.v1beta1.BigQueryStorageClient;\n+import com.google.cloud.bigquery.storage.v1beta1.Storage;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+import org.apache.avro.Conversions;\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericDatumReader;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.io.BinaryDecoder;\n+import org.apache.avro.io.DecoderFactory;\n+import org.apache.avro.util.Utf8;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.math.BigDecimal;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.DateType.DATE;\n+import static com.facebook.presto.common.type.IntegerType.INTEGER;\n+import static com.facebook.presto.common.type.TimeWithTimeZoneType.TIME_WITH_TIME_ZONE;\n+import static com.facebook.presto.common.type.TimestampType.TIMESTAMP;\n+import static com.facebook.presto.common.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static com.facebook.presto.plugin.bigquery.BigQueryMetadata.NUMERIC_DATA_TYPE_PRECISION;\n+import static com.facebook.presto.plugin.bigquery.BigQueryMetadata.NUMERIC_DATA_TYPE_SCALE;\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.airlift.slice.Slices.utf8Slice;\n+import static java.lang.String.format;\n+\n+public class BigQueryResultPageSource\n+        implements ConnectorPageSource\n+{\n+    static final AvroDecimalConverter DECIMAL_CONVERTER = new AvroDecimalConverter();\n+    private static final Logger log = Logger.get(BigQueryResultPageSource.class);\n+    private final BigQueryStorageClient bigQueryStorageClient;\n+    private final int maxReadRowsRetries;\n+    private final BigQuerySplit split;\n+    private final BigQueryTableHandle table;\n+    private final ImmutableList<BigQueryColumnHandle> columns;\n+    private final ImmutableList<Type> columnTypes;\n+    private final AtomicLong readBytes;\n+    private final PageBuilder pageBuilder;\n+    private Iterator<Storage.ReadRowsResponse> responses;\n+    private boolean closed;\n+\n+    public BigQueryResultPageSource(\n+            BigQueryStorageClientFactory bigQueryStorageClientFactory,\n+            int maxReadRowsRetries,\n+            BigQuerySplit split,\n+            BigQueryTableHandle table,\n+            ImmutableList<BigQueryColumnHandle> columns)\n+    {\n+        this.bigQueryStorageClient = bigQueryStorageClientFactory.createBigQueryStorageClient();\n+        this.maxReadRowsRetries = maxReadRowsRetries;\n+        this.split = split;\n+        this.table = table;\n+        this.columns = columns;\n+        this.readBytes = new AtomicLong();\n+        this.columnTypes = columns.stream().map(BigQueryColumnHandle::getPrestoType).collect(toImmutableList());\n+        this.pageBuilder = new PageBuilder(columnTypes);\n+\n+        log.debug(\"Starting to read from %s\", split.getStreamName());\n+        Storage.ReadRowsRequest.Builder readRowsRequest = Storage.ReadRowsRequest.newBuilder()\n+                .setReadPosition(Storage.StreamPosition.newBuilder()\n+                        .setStream(Storage.Stream.newBuilder()\n+                                .setName(split.getStreamName())));\n+        responses = new ReadRowsHelper(bigQueryStorageClient, readRowsRequest, maxReadRowsRetries).readRows();\n+        closed = false;\n+    }\n+\n+    @Override\n+    public long getCompletedBytes()\n+    {\n+        return readBytes.get();\n+    }\n+\n+    @Override\n+    public long getCompletedPositions()\n+    {\n+        return 0;\n+    }\n+\n+    @Override\n+    public long getReadTimeNanos()\n+    {\n+        return 0;\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return !responses.hasNext();\n+    }\n+\n+    @Override\n+    public Page getNextPage()\n+    {\n+        checkState(pageBuilder.isEmpty(), \"PageBuilder is not empty at the beginning of a new page\");\n+        Storage.ReadRowsResponse response = responses.next();\n+        Iterable<GenericRecord> records = parse(response);\n+        for (GenericRecord record : records) {\n+            pageBuilder.declarePosition();\n+            for (int column = 0; column < columnTypes.size(); column++) {\n+                BlockBuilder output = pageBuilder.getBlockBuilder(column);\n+                appendTo(columnTypes.get(column), record.get(column), output);\n+            }\n+        }\n+\n+        Page page = pageBuilder.build();\n+        pageBuilder.reset();\n+        return page;\n+    }\n+\n+    private void appendTo(Type type, Object value, BlockBuilder output)\n+    {\n+        if (value == null) {\n+            output.appendNull();\n+            return;\n+        }\n+\n+        Class<?> javaType = type.getJavaType();\n+        try {\n+            if (javaType == boolean.class) {\n+                type.writeBoolean(output, (Boolean) value);\n+            }\n+            else if (javaType == long.class) {\n+                if (type.equals(BIGINT)) {\n+                    type.writeLong(output, ((Number) value).longValue());\n+                }\n+                else if (type.equals(INTEGER)) {\n+                    type.writeLong(output, ((Number) value).intValue());\n+                }\n+                else if (type.equals(DATE)) {\n+                    type.writeLong(output, ((Number) value).intValue());\n+                }\n+                else if (type.equals(TIMESTAMP)) {\n+                    type.writeLong(output, BigQueryType.toPrestoTimestamp(((org.apache.avro.util.Utf8) value).toString()));\n+                }\n+                else if (type.equals(TIME_WITH_TIME_ZONE)) {\n+                    type.writeLong(output, DateTimeEncoding.packDateTimeWithZone(((Long) value).longValue() / 1000, TimeZoneKey.UTC_KEY));\n+                }\n+                else if (type.equals(TIMESTAMP_WITH_TIME_ZONE)) {\n+                    type.writeLong(output, DateTimeEncoding.packDateTimeWithZone(((Long) value).longValue() / 1000, TimeZoneKey.UTC_KEY));\n+                }", "originalCommit": "652ed3228c8d8e7fac6ab8b46c08d3506fdbcfad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQ3MjQyNA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r576472424", "bodyText": "logical or op makes sense", "author": "fgwang7w", "createdAt": "2021-02-15T23:45:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTEwODE1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTEwODM4Mg==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r569108382", "bodyText": "How about extract these lines to a new method writeLong()?", "author": "beinan", "createdAt": "2021-02-03T03:34:49Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryResultPageSource.java", "diffHunk": "@@ -0,0 +1,342 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.DateTimeEncoding;\n+import com.facebook.presto.common.type.DecimalType;\n+import com.facebook.presto.common.type.Decimals;\n+import com.facebook.presto.common.type.RowType;\n+import com.facebook.presto.common.type.TimeZoneKey;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.common.type.VarbinaryType;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.cloud.bigquery.storage.v1beta1.BigQueryStorageClient;\n+import com.google.cloud.bigquery.storage.v1beta1.Storage;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+import org.apache.avro.Conversions;\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericDatumReader;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.io.BinaryDecoder;\n+import org.apache.avro.io.DecoderFactory;\n+import org.apache.avro.util.Utf8;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.math.BigDecimal;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.DateType.DATE;\n+import static com.facebook.presto.common.type.IntegerType.INTEGER;\n+import static com.facebook.presto.common.type.TimeWithTimeZoneType.TIME_WITH_TIME_ZONE;\n+import static com.facebook.presto.common.type.TimestampType.TIMESTAMP;\n+import static com.facebook.presto.common.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static com.facebook.presto.plugin.bigquery.BigQueryMetadata.NUMERIC_DATA_TYPE_PRECISION;\n+import static com.facebook.presto.plugin.bigquery.BigQueryMetadata.NUMERIC_DATA_TYPE_SCALE;\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.airlift.slice.Slices.utf8Slice;\n+import static java.lang.String.format;\n+\n+public class BigQueryResultPageSource\n+        implements ConnectorPageSource\n+{\n+    static final AvroDecimalConverter DECIMAL_CONVERTER = new AvroDecimalConverter();\n+    private static final Logger log = Logger.get(BigQueryResultPageSource.class);\n+    private final BigQueryStorageClient bigQueryStorageClient;\n+    private final int maxReadRowsRetries;\n+    private final BigQuerySplit split;\n+    private final BigQueryTableHandle table;\n+    private final ImmutableList<BigQueryColumnHandle> columns;\n+    private final ImmutableList<Type> columnTypes;\n+    private final AtomicLong readBytes;\n+    private final PageBuilder pageBuilder;\n+    private Iterator<Storage.ReadRowsResponse> responses;\n+    private boolean closed;\n+\n+    public BigQueryResultPageSource(\n+            BigQueryStorageClientFactory bigQueryStorageClientFactory,\n+            int maxReadRowsRetries,\n+            BigQuerySplit split,\n+            BigQueryTableHandle table,\n+            ImmutableList<BigQueryColumnHandle> columns)\n+    {\n+        this.bigQueryStorageClient = bigQueryStorageClientFactory.createBigQueryStorageClient();\n+        this.maxReadRowsRetries = maxReadRowsRetries;\n+        this.split = split;\n+        this.table = table;\n+        this.columns = columns;\n+        this.readBytes = new AtomicLong();\n+        this.columnTypes = columns.stream().map(BigQueryColumnHandle::getPrestoType).collect(toImmutableList());\n+        this.pageBuilder = new PageBuilder(columnTypes);\n+\n+        log.debug(\"Starting to read from %s\", split.getStreamName());\n+        Storage.ReadRowsRequest.Builder readRowsRequest = Storage.ReadRowsRequest.newBuilder()\n+                .setReadPosition(Storage.StreamPosition.newBuilder()\n+                        .setStream(Storage.Stream.newBuilder()\n+                                .setName(split.getStreamName())));\n+        responses = new ReadRowsHelper(bigQueryStorageClient, readRowsRequest, maxReadRowsRetries).readRows();\n+        closed = false;\n+    }\n+\n+    @Override\n+    public long getCompletedBytes()\n+    {\n+        return readBytes.get();\n+    }\n+\n+    @Override\n+    public long getCompletedPositions()\n+    {\n+        return 0;\n+    }\n+\n+    @Override\n+    public long getReadTimeNanos()\n+    {\n+        return 0;\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return !responses.hasNext();\n+    }\n+\n+    @Override\n+    public Page getNextPage()\n+    {\n+        checkState(pageBuilder.isEmpty(), \"PageBuilder is not empty at the beginning of a new page\");\n+        Storage.ReadRowsResponse response = responses.next();\n+        Iterable<GenericRecord> records = parse(response);\n+        for (GenericRecord record : records) {\n+            pageBuilder.declarePosition();\n+            for (int column = 0; column < columnTypes.size(); column++) {\n+                BlockBuilder output = pageBuilder.getBlockBuilder(column);\n+                appendTo(columnTypes.get(column), record.get(column), output);\n+            }\n+        }\n+\n+        Page page = pageBuilder.build();\n+        pageBuilder.reset();\n+        return page;\n+    }\n+\n+    private void appendTo(Type type, Object value, BlockBuilder output)\n+    {\n+        if (value == null) {\n+            output.appendNull();\n+            return;\n+        }\n+\n+        Class<?> javaType = type.getJavaType();\n+        try {\n+            if (javaType == boolean.class) {\n+                type.writeBoolean(output, (Boolean) value);\n+            }\n+            else if (javaType == long.class) {\n+                if (type.equals(BIGINT)) {\n+                    type.writeLong(output, ((Number) value).longValue());\n+                }\n+                else if (type.equals(INTEGER)) {\n+                    type.writeLong(output, ((Number) value).intValue());\n+                }\n+                else if (type.equals(DATE)) {\n+                    type.writeLong(output, ((Number) value).intValue());\n+                }\n+                else if (type.equals(TIMESTAMP)) {\n+                    type.writeLong(output, BigQueryType.toPrestoTimestamp(((org.apache.avro.util.Utf8) value).toString()));\n+                }\n+                else if (type.equals(TIME_WITH_TIME_ZONE)) {\n+                    type.writeLong(output, DateTimeEncoding.packDateTimeWithZone(((Long) value).longValue() / 1000, TimeZoneKey.UTC_KEY));\n+                }\n+                else if (type.equals(TIMESTAMP_WITH_TIME_ZONE)) {\n+                    type.writeLong(output, DateTimeEncoding.packDateTimeWithZone(((Long) value).longValue() / 1000, TimeZoneKey.UTC_KEY));\n+                }", "originalCommit": "652ed3228c8d8e7fac6ab8b46c08d3506fdbcfad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTExMTI1MA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r569111250", "bodyText": "don't think we really need a string format here, can we put the bigquery.views-enabled inline?", "author": "beinan", "createdAt": "2021-02-03T03:44:45Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/ReadSessionCreator.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.cloud.BaseServiceException;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.cloud.bigquery.storage.v1beta1.BigQueryStorageClient;\n+import com.google.cloud.bigquery.storage.v1beta1.ReadOptions;\n+import com.google.cloud.bigquery.storage.v1beta1.Storage;\n+import com.google.cloud.bigquery.storage.v1beta1.TableReferenceProto;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static java.lang.String.format;\n+\n+// A helper class, also handles view materialization\n+public class ReadSessionCreator\n+{\n+    private static final Logger log = Logger.get(ReadSessionCreator.class);\n+\n+    private static Cache<String, TableInfo> destinationTableCache =\n+            CacheBuilder.newBuilder()\n+                    .expireAfterWrite(15, TimeUnit.MINUTES)\n+                    .maximumSize(1000)\n+                    .build();\n+\n+    private final ReadSessionCreatorConfig config;\n+    private final BigQueryClient bigQueryClient;\n+    private final BigQueryStorageClientFactory bigQueryStorageClientFactory;\n+\n+    public ReadSessionCreator(\n+            ReadSessionCreatorConfig config,\n+            BigQueryClient bigQueryClient,\n+            BigQueryStorageClientFactory bigQueryStorageClientFactory)\n+    {\n+        this.config = config;\n+        this.bigQueryClient = bigQueryClient;\n+        this.bigQueryStorageClientFactory = bigQueryStorageClientFactory;\n+    }\n+\n+    public Storage.ReadSession create(TableId table, ImmutableList<String> selectedFields, Optional<String> filter, int parallelism)\n+    {\n+        TableInfo tableDetails = bigQueryClient.getTable(table);\n+\n+        TableInfo actualTable = getActualTable(tableDetails, selectedFields, new String[] {});\n+\n+        try (BigQueryStorageClient bigQueryStorageClient = bigQueryStorageClientFactory.createBigQueryStorageClient()) {\n+            ReadOptions.TableReadOptions.Builder readOptions = ReadOptions.TableReadOptions.newBuilder()\n+                    .addAllSelectedFields(selectedFields);\n+            filter.ifPresent(readOptions::setRowRestriction);\n+\n+            TableReferenceProto.TableReference tableReference = toTableReference(actualTable.getTableId());\n+\n+            Storage.ReadSession readSession = bigQueryStorageClient.createReadSession(\n+                    Storage.CreateReadSessionRequest.newBuilder()\n+                            .setParent(\"projects/\" + bigQueryClient.getProjectId())\n+                            .setFormat(Storage.DataFormat.AVRO)\n+                            .setRequestedStreams(parallelism)\n+                            .setReadOptions(readOptions)\n+                            .setTableReference(tableReference)\n+                            // The BALANCED sharding strategy causes the server to\n+                            // assign roughly the same number of rows to each stream.\n+                            .setShardingStrategy(Storage.ShardingStrategy.BALANCED)\n+                            .build());\n+\n+            return readSession;\n+        }\n+    }\n+\n+    TableReferenceProto.TableReference toTableReference(TableId tableId)\n+    {\n+        return TableReferenceProto.TableReference.newBuilder()\n+                .setProjectId(tableId.getProject())\n+                .setDatasetId(tableId.getDataset())\n+                .setTableId(tableId.getTable())\n+                .build();\n+    }\n+\n+    TableInfo getActualTable(\n+            TableInfo table,\n+            ImmutableList<String> requiredColumns,\n+            String[] filters)\n+    {\n+        TableDefinition tableDefinition = table.getDefinition();\n+        TableDefinition.Type tableType = tableDefinition.getType();\n+        if (TableDefinition.Type.TABLE == tableType) {\n+            return table;\n+        }\n+        if (TableDefinition.Type.VIEW == tableType) {\n+            if (!config.viewsEnabled) {\n+                throw new PrestoException(NOT_SUPPORTED, format(\n+                        \"Views are not enabled. You can enable views by setting '%s' to true. Notice additional cost may occur.\",\n+                        \"bigquery.views-enabled\"));", "originalCommit": "652ed3228c8d8e7fac6ab8b46c08d3506fdbcfad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQ3MzcyMQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r576473721", "bodyText": "sure", "author": "fgwang7w", "createdAt": "2021-02-15T23:50:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTExMTI1MA=="}], "type": "inlineReview"}, {"oid": "de2063a08800bd5f84333e39e1cf28bacaa778ca", "url": "https://github.com/prestodb/presto/commit/de2063a08800bd5f84333e39e1cf28bacaa778ca", "message": "Add BigQuery Connector Support\n\nCo-authored-by: David Rabinowitz <davidrab@gmail.com>", "committedDate": "2021-02-16T00:50:11Z", "type": "forcePushed"}, {"oid": "ef6f8c8c7a0e8dad40032a21189ab217fd6ace42", "url": "https://github.com/prestodb/presto/commit/ef6f8c8c7a0e8dad40032a21189ab217fd6ace42", "message": "add BigQuery Catalog", "committedDate": "2021-02-22T05:14:09Z", "type": "forcePushed"}, {"oid": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "url": "https://github.com/prestodb/presto/commit/5444794efa9a7e1c67788e53097cee9cfd704f6b", "message": "add BigQuery doc", "committedDate": "2021-02-23T04:13:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDMzNTM1OQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584335359", "bodyText": "requireNonNull for these fields?", "author": "qqibrow", "createdAt": "2021-02-28T18:10:50Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryClient.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.Dataset;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterators;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.stream.StreamSupport;\n+\n+import static com.facebook.presto.plugin.bigquery.BigQueryErrorCode.BIGQUERY_QUERY_FAILED_UNKNOWN;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.UUID.randomUUID;\n+import static java.util.stream.Collectors.joining;\n+\n+public class BigQueryClient\n+{\n+    private final BigQuery bigQuery;\n+    private final Optional<String> viewMaterializationProject;\n+    private final Optional<String> viewMaterializationDataset;\n+\n+    // holds caches and mappings\n+    // presto converts the dataset and table names to lower case, while BigQuery is case sensitive\n+    // the mappings here keep the mappings\n+    private final ConcurrentMap<TableId, TableId> tableIds = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<DatasetId, DatasetId> datasetIds = new ConcurrentHashMap<>();\n+\n+    BigQueryClient(BigQuery bigQuery, BigQueryConfig config)\n+    {\n+        this.bigQuery = bigQuery;", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE3NDkwNw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r585174907", "bodyText": "ok", "author": "fgwang7w", "createdAt": "2021-03-02T01:18:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDMzNTM1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDMzNjcyOA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584336728", "bodyText": "Nit: Move this after createSql method", "author": "qqibrow", "createdAt": "2021-02-28T18:22:03Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryClient.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.Dataset;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterators;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.stream.StreamSupport;\n+\n+import static com.facebook.presto.plugin.bigquery.BigQueryErrorCode.BIGQUERY_QUERY_FAILED_UNKNOWN;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.UUID.randomUUID;\n+import static java.util.stream.Collectors.joining;\n+\n+public class BigQueryClient\n+{\n+    private final BigQuery bigQuery;\n+    private final Optional<String> viewMaterializationProject;\n+    private final Optional<String> viewMaterializationDataset;\n+\n+    // holds caches and mappings\n+    // presto converts the dataset and table names to lower case, while BigQuery is case sensitive\n+    // the mappings here keep the mappings\n+    private final ConcurrentMap<TableId, TableId> tableIds = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<DatasetId, DatasetId> datasetIds = new ConcurrentHashMap<>();\n+\n+    BigQueryClient(BigQuery bigQuery, BigQueryConfig config)\n+    {\n+        this.bigQuery = bigQuery;\n+        this.viewMaterializationProject = config.getViewMaterializationProject();\n+        this.viewMaterializationDataset = config.getViewMaterializationDataset();\n+    }\n+\n+    // return empty if no filters are used\n+    private static Optional<String> createWhereClause(String[] filters)", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE3NTQ3NA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r585175474", "bodyText": "ok", "author": "fgwang7w", "createdAt": "2021-03-02T01:18:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDMzNjcyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDMzODgyNQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584338825", "bodyText": "In listDataSets we update the presto -> bigQuery tableid mapping. Why we don't update table mapping in the same way here?", "author": "qqibrow", "createdAt": "2021-02-28T18:33:36Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryClient.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.Dataset;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterators;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.stream.StreamSupport;\n+\n+import static com.facebook.presto.plugin.bigquery.BigQueryErrorCode.BIGQUERY_QUERY_FAILED_UNKNOWN;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.UUID.randomUUID;\n+import static java.util.stream.Collectors.joining;\n+\n+public class BigQueryClient\n+{\n+    private final BigQuery bigQuery;\n+    private final Optional<String> viewMaterializationProject;\n+    private final Optional<String> viewMaterializationDataset;\n+\n+    // holds caches and mappings\n+    // presto converts the dataset and table names to lower case, while BigQuery is case sensitive\n+    // the mappings here keep the mappings\n+    private final ConcurrentMap<TableId, TableId> tableIds = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<DatasetId, DatasetId> datasetIds = new ConcurrentHashMap<>();\n+\n+    BigQueryClient(BigQuery bigQuery, BigQueryConfig config)\n+    {\n+        this.bigQuery = bigQuery;\n+        this.viewMaterializationProject = config.getViewMaterializationProject();\n+        this.viewMaterializationDataset = config.getViewMaterializationDataset();\n+    }\n+\n+    // return empty if no filters are used\n+    private static Optional<String> createWhereClause(String[] filters)\n+    {\n+        if (filters == null || filters.length == 0) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(String.join(\"\", filters));\n+    }\n+\n+    public TableInfo getTable(TableId tableId)\n+    {\n+        TableId bigQueryTableId = tableIds.get(tableId);\n+        Table table = bigQuery.getTable(bigQueryTableId != null ? bigQueryTableId : tableId);\n+        if (table != null) {\n+            tableIds.putIfAbsent(tableId, table.getTableId());\n+            datasetIds.putIfAbsent(toDatasetId(tableId), toDatasetId(table.getTableId()));\n+        }\n+        return table;\n+    }\n+\n+    private DatasetId toDatasetId(TableId tableId)\n+    {\n+        return DatasetId.of(tableId.getProject(), tableId.getDataset());\n+    }\n+\n+    protected String getProjectId()\n+    {\n+        return bigQuery.getOptions().getProjectId();\n+    }\n+\n+    protected Iterable<Dataset> listDatasets(String projectId)\n+    {\n+        final Iterator<Dataset> datasets = bigQuery.listDatasets(projectId).iterateAll().iterator();\n+        return () -> Iterators.transform(datasets, this::addDataSetMappingIfNeeded);\n+    }\n+\n+    protected Iterable<Table> listTables(DatasetId datasetId, TableDefinition.Type... types)", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTIwMDY2OQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r585200669", "bodyText": "ok", "author": "fgwang7w", "createdAt": "2021-03-02T02:27:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDMzODgyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDMzOTI5NQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584339295", "bodyText": "change all protected to either private all public in this class?", "author": "qqibrow", "createdAt": "2021-02-28T18:35:44Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryClient.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.Dataset;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterators;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.stream.StreamSupport;\n+\n+import static com.facebook.presto.plugin.bigquery.BigQueryErrorCode.BIGQUERY_QUERY_FAILED_UNKNOWN;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.UUID.randomUUID;\n+import static java.util.stream.Collectors.joining;\n+\n+public class BigQueryClient\n+{\n+    private final BigQuery bigQuery;\n+    private final Optional<String> viewMaterializationProject;\n+    private final Optional<String> viewMaterializationDataset;\n+\n+    // holds caches and mappings\n+    // presto converts the dataset and table names to lower case, while BigQuery is case sensitive\n+    // the mappings here keep the mappings\n+    private final ConcurrentMap<TableId, TableId> tableIds = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<DatasetId, DatasetId> datasetIds = new ConcurrentHashMap<>();\n+\n+    BigQueryClient(BigQuery bigQuery, BigQueryConfig config)\n+    {\n+        this.bigQuery = bigQuery;\n+        this.viewMaterializationProject = config.getViewMaterializationProject();\n+        this.viewMaterializationDataset = config.getViewMaterializationDataset();\n+    }\n+\n+    // return empty if no filters are used\n+    private static Optional<String> createWhereClause(String[] filters)\n+    {\n+        if (filters == null || filters.length == 0) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(String.join(\"\", filters));\n+    }\n+\n+    public TableInfo getTable(TableId tableId)\n+    {\n+        TableId bigQueryTableId = tableIds.get(tableId);\n+        Table table = bigQuery.getTable(bigQueryTableId != null ? bigQueryTableId : tableId);\n+        if (table != null) {\n+            tableIds.putIfAbsent(tableId, table.getTableId());\n+            datasetIds.putIfAbsent(toDatasetId(tableId), toDatasetId(table.getTableId()));\n+        }\n+        return table;\n+    }\n+\n+    private DatasetId toDatasetId(TableId tableId)\n+    {\n+        return DatasetId.of(tableId.getProject(), tableId.getDataset());\n+    }\n+\n+    protected String getProjectId()\n+    {\n+        return bigQuery.getOptions().getProjectId();\n+    }\n+\n+    protected Iterable<Dataset> listDatasets(String projectId)\n+    {\n+        final Iterator<Dataset> datasets = bigQuery.listDatasets(projectId).iterateAll().iterator();\n+        return () -> Iterators.transform(datasets, this::addDataSetMappingIfNeeded);\n+    }\n+\n+    protected Iterable<Table> listTables(DatasetId datasetId, TableDefinition.Type... types)\n+    {\n+        Set<TableDefinition.Type> allowedTypes = ImmutableSet.copyOf(types);\n+        DatasetId bigQueryDatasetId = datasetIds.getOrDefault(datasetId, datasetId);\n+        Iterable<Table> allTables = bigQuery.listTables(bigQueryDatasetId).iterateAll();\n+        return StreamSupport.stream(allTables.spliterator(), false)\n+                .filter(table -> allowedTypes.contains(table.getDefinition().getType()))\n+                .collect(toImmutableList());\n+    }\n+\n+    private Dataset addDataSetMappingIfNeeded(Dataset dataset)\n+    {\n+        DatasetId bigQueryDatasetId = dataset.getDatasetId();\n+        DatasetId prestoDatasetId = DatasetId.of(bigQueryDatasetId.getProject(), bigQueryDatasetId.getDataset().toLowerCase(ENGLISH));\n+        datasetIds.putIfAbsent(prestoDatasetId, bigQueryDatasetId);\n+        return dataset;\n+    }\n+\n+    protected TableId createDestinationTable(TableId tableId)", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTIwMTYzMg==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r585201632", "bodyText": "what's wrong with protected? those protected methods may be util functions to be accessed by different callers within the same package", "author": "fgwang7w", "createdAt": "2021-03-02T02:29:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDMzOTI5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjY0OTQyOQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r592649429", "bodyText": "protected is used in inheritance. If you want to use it only in same package, why not make method package private?", "author": "qqibrow", "createdAt": "2021-03-11T19:15:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDMzOTI5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MzcyMzc2Ng==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r593723766", "bodyText": "@qqibrow not understand what's your suggestion. private method in the package cannot be accessible by other method across the package.", "author": "fgwang7w", "createdAt": "2021-03-13T08:55:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDMzOTI5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM0MzAwMw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584343003", "bodyText": "Checking the code in Intellij, this method is used nowhere?", "author": "qqibrow", "createdAt": "2021-02-28T18:59:14Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryConfig.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.airlift.configuration.ConfigDescription;\n+import com.google.auth.oauth2.GoogleCredentials;\n+\n+import javax.validation.constraints.AssertTrue;\n+import javax.validation.constraints.Min;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+public class BigQueryConfig\n+{\n+    public static final int DEFAULT_MAX_READ_ROWS_RETRIES = 3;\n+\n+    private Optional<String> credentialsKey = Optional.empty();\n+    private Optional<String> credentialsFile = Optional.empty();\n+    private Optional<String> projectId = Optional.empty();\n+    private Optional<String> parentProjectId = Optional.empty();\n+    private OptionalInt parallelism = OptionalInt.empty();\n+    private boolean viewsEnabled;\n+    private Optional<String> viewMaterializationProject = Optional.empty();\n+    private Optional<String> viewMaterializationDataset = Optional.empty();\n+    private int maxReadRowsRetries = DEFAULT_MAX_READ_ROWS_RETRIES;\n+\n+    @AssertTrue(message = \"Exactly one of 'bigquery.credentials-key' or 'bigquery.credentials-file' must be specified, or the default GoogleCredentials could be created\")\n+    public boolean isCredentialsConfigurationValid()", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTgyMzM5NQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r585823395", "bodyText": "it's registered as a custom validation method so that at initialization time to boostrap bigquery connector, configuration factory callsvalidateRegisteredConfigurationProvider method to validate the credentials", "author": "fgwang7w", "createdAt": "2021-03-02T18:52:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM0MzAwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM0MzIyNw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584343227", "bodyText": "This implies all queries have to be under the same project. Is queries from different project id a valid user case?", "author": "qqibrow", "createdAt": "2021-02-28T19:01:23Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryConfig.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.airlift.configuration.ConfigDescription;\n+import com.google.auth.oauth2.GoogleCredentials;\n+\n+import javax.validation.constraints.AssertTrue;\n+import javax.validation.constraints.Min;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+public class BigQueryConfig\n+{\n+    public static final int DEFAULT_MAX_READ_ROWS_RETRIES = 3;\n+\n+    private Optional<String> credentialsKey = Optional.empty();\n+    private Optional<String> credentialsFile = Optional.empty();\n+    private Optional<String> projectId = Optional.empty();\n+    private Optional<String> parentProjectId = Optional.empty();\n+    private OptionalInt parallelism = OptionalInt.empty();\n+    private boolean viewsEnabled;\n+    private Optional<String> viewMaterializationProject = Optional.empty();\n+    private Optional<String> viewMaterializationDataset = Optional.empty();\n+    private int maxReadRowsRetries = DEFAULT_MAX_READ_ROWS_RETRIES;\n+\n+    @AssertTrue(message = \"Exactly one of 'bigquery.credentials-key' or 'bigquery.credentials-file' must be specified, or the default GoogleCredentials could be created\")\n+    public boolean isCredentialsConfigurationValid()\n+    {\n+        // only one of them (at most) should be present\n+        if (credentialsKey.isPresent() && credentialsFile.isPresent()) {\n+            return false;\n+        }\n+        // if no credentials were supplied, let's check if we can create the default ones\n+        if (!credentialsKey.isPresent() && !credentialsFile.isPresent()) {\n+            try {\n+                GoogleCredentials.getApplicationDefault();\n+            }\n+            catch (IOException e) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public Optional<String> getCredentialsKey()\n+    {\n+        return credentialsKey;\n+    }\n+\n+    @Config(\"bigquery.credentials-key\")\n+    @ConfigDescription(\"The base64 encoded credentials key\")\n+    public BigQueryConfig setCredentialsKey(String credentialsKey)\n+    {\n+        this.credentialsKey = Optional.of(credentialsKey);\n+        return this;\n+    }\n+\n+    public Optional<String> getCredentialsFile()\n+    {\n+        return credentialsFile;\n+    }\n+\n+    @Config(\"bigquery.credentials-file\")\n+    @ConfigDescription(\"The path to the JSON credentials file\")\n+    public BigQueryConfig setCredentialsFile(String credentialsFile)\n+    {\n+        this.credentialsFile = Optional.of(credentialsFile);\n+        return this;\n+    }\n+\n+    public Optional<String> getProjectId()\n+    {\n+        return projectId;\n+    }\n+\n+    @Config(\"bigquery.project-id\")\n+    @ConfigDescription(\"The Google Cloud Project ID where the data resides\")\n+    public BigQueryConfig setProjectId(String projectId)", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTgzODMyNA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r585838324", "bodyText": "it's project.dataset.table, so it's valid to have a multiple projectIds", "author": "fgwang7w", "createdAt": "2021-03-02T19:15:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM0MzIyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM0NDYzMA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584344630", "bodyText": "Nit: For next step, might consider implement getSessionProperties to provide query specific control. e.g, maybe we want to set different bigquery.parallelism for queries?", "author": "qqibrow", "createdAt": "2021-02-28T19:06:26Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryConnector.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.spi.connector.Connector;\n+import com.facebook.presto.spi.connector.ConnectorMetadata;\n+import com.facebook.presto.spi.connector.ConnectorPageSourceProvider;\n+import com.facebook.presto.spi.connector.ConnectorSplitManager;\n+import com.facebook.presto.spi.connector.ConnectorTransactionHandle;\n+import com.facebook.presto.spi.transaction.IsolationLevel;\n+\n+import javax.inject.Inject;\n+\n+import static com.facebook.presto.spi.transaction.IsolationLevel.READ_COMMITTED;\n+import static com.facebook.presto.spi.transaction.IsolationLevel.checkConnectorSupports;\n+import static java.util.Objects.requireNonNull;\n+\n+public class BigQueryConnector", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjY3MzAwMw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r586673003", "bodyText": "sure, that's on the future roadmap", "author": "fgwang7w", "createdAt": "2021-03-03T18:23:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM0NDYzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM0NTAxNg==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584345016", "bodyText": "I am not sure which one to pick, READ_COMMITTED  or READ_UNCOMMITTED. @zhenxiao can provide more insights.", "author": "qqibrow", "createdAt": "2021-02-28T19:08:48Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryConnector.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.spi.connector.Connector;\n+import com.facebook.presto.spi.connector.ConnectorMetadata;\n+import com.facebook.presto.spi.connector.ConnectorPageSourceProvider;\n+import com.facebook.presto.spi.connector.ConnectorSplitManager;\n+import com.facebook.presto.spi.connector.ConnectorTransactionHandle;\n+import com.facebook.presto.spi.transaction.IsolationLevel;\n+\n+import javax.inject.Inject;\n+\n+import static com.facebook.presto.spi.transaction.IsolationLevel.READ_COMMITTED;\n+import static com.facebook.presto.spi.transaction.IsolationLevel.checkConnectorSupports;\n+import static java.util.Objects.requireNonNull;\n+\n+public class BigQueryConnector\n+        implements Connector\n+{\n+    private static final Logger log = Logger.get(BigQueryConnector.class);\n+\n+    private final BigQueryMetadata metadata;\n+    private final BigQuerySplitManager splitManager;\n+    private final BigQueryPageSourceProvider pageSourceProvider;\n+\n+    @Inject\n+    public BigQueryConnector(\n+            BigQueryMetadata metadata,\n+            BigQuerySplitManager splitManager,\n+            BigQueryPageSourceProvider pageSourceProvider)\n+    {\n+        this.metadata = requireNonNull(metadata, \"metadata is null\");\n+        this.splitManager = requireNonNull(splitManager, \"splitManager is null\");\n+        this.pageSourceProvider = requireNonNull(pageSourceProvider, \"pageSourceProvider is null\");\n+    }\n+\n+    @Override\n+    public ConnectorTransactionHandle beginTransaction(IsolationLevel isolationLevel, boolean readOnly)\n+    {\n+        log.debug(\"beginTransaction(isolationLevel=%s, readOnly=%s)\", isolationLevel, readOnly);\n+        checkConnectorSupports(READ_COMMITTED, isolationLevel);", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjY3NTc1NA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r586675754", "bodyText": "bigquery uses a snapshot isolation method which reads last committed value, so iso-level READ_COMMITTED is chosen in presto", "author": "fgwang7w", "createdAt": "2021-03-03T18:27:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM0NTAxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM0NjQxNA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584346414", "bodyText": "Not related to this PR. I recalled for such credential information, presto will print it out in plain text in log during initialization. Have we fixed that? @zhenxiao   If not we might want to address that. One way could be introducing a new annotation sth like @secret in airlift-config module and mask such configs when print out log.", "author": "qqibrow", "createdAt": "2021-02-28T19:15:37Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryConfig.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.airlift.configuration.ConfigDescription;\n+import com.google.auth.oauth2.GoogleCredentials;\n+\n+import javax.validation.constraints.AssertTrue;\n+import javax.validation.constraints.Min;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+public class BigQueryConfig\n+{\n+    public static final int DEFAULT_MAX_READ_ROWS_RETRIES = 3;\n+\n+    private Optional<String> credentialsKey = Optional.empty();\n+    private Optional<String> credentialsFile = Optional.empty();\n+    private Optional<String> projectId = Optional.empty();\n+    private Optional<String> parentProjectId = Optional.empty();\n+    private OptionalInt parallelism = OptionalInt.empty();\n+    private boolean viewsEnabled;\n+    private Optional<String> viewMaterializationProject = Optional.empty();\n+    private Optional<String> viewMaterializationDataset = Optional.empty();\n+    private int maxReadRowsRetries = DEFAULT_MAX_READ_ROWS_RETRIES;\n+\n+    @AssertTrue(message = \"Exactly one of 'bigquery.credentials-key' or 'bigquery.credentials-file' must be specified, or the default GoogleCredentials could be created\")\n+    public boolean isCredentialsConfigurationValid()\n+    {\n+        // only one of them (at most) should be present\n+        if (credentialsKey.isPresent() && credentialsFile.isPresent()) {\n+            return false;\n+        }\n+        // if no credentials were supplied, let's check if we can create the default ones\n+        if (!credentialsKey.isPresent() && !credentialsFile.isPresent()) {\n+            try {\n+                GoogleCredentials.getApplicationDefault();\n+            }\n+            catch (IOException e) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public Optional<String> getCredentialsKey()\n+    {\n+        return credentialsKey;\n+    }\n+\n+    @Config(\"bigquery.credentials-key\")", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1MjEyNg==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594052126", "bodyText": "get it. good idea. let's submit PR in airlift-config", "author": "zhenxiao", "createdAt": "2021-03-15T05:05:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM0NjQxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM0NzU1NQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584347555", "bodyText": "remove credentialsKey  and credentialsFile  as they are not used?", "author": "qqibrow", "createdAt": "2021-02-28T19:25:12Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryCredentialsSupplier.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.google.api.client.util.Base64;\n+import com.google.auth.Credentials;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n+import com.google.common.collect.Streams;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+public class BigQueryCredentialsSupplier\n+{\n+    private final Optional<String> credentialsKey;", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjY3NzQ4MA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r586677480", "bodyText": "sure", "author": "fgwang7w", "createdAt": "2021-03-03T18:29:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM0NzU1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM0ODA3MA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584348070", "bodyText": "Do we need to assert  credentialsCreator.get().isPresent() ? In other words, if credentialsCreator is empty, are queries still able to go through?", "author": "qqibrow", "createdAt": "2021-02-28T19:28:56Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryCredentialsSupplier.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.google.api.client.util.Base64;\n+import com.google.auth.Credentials;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n+import com.google.common.collect.Streams;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+public class BigQueryCredentialsSupplier\n+{\n+    private final Optional<String> credentialsKey;\n+    private final Optional<String> credentialsFile;\n+    private final Supplier<Optional<Credentials>> credentialsCreator;\n+\n+    public BigQueryCredentialsSupplier(Optional<String> credentialsKey, Optional<String> credentialsFile)\n+    {\n+        this.credentialsKey = credentialsKey;\n+        this.credentialsFile = credentialsFile;\n+        // lazy creation, cache once it's created\n+        this.credentialsCreator = Suppliers.memoize(() -> {", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjczMzAwMQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r586733001", "bodyText": "invoker of getCredentials will need to validate per needed. credentialsCreator can be empty which simply means no credentials provided.", "author": "fgwang7w", "createdAt": "2021-03-03T19:52:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM0ODA3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM0ODUxNQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584348515", "bodyText": "Not used", "author": "qqibrow", "createdAt": "2021-02-28T19:33:00Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryErrorCode.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.presto.spi.ErrorCode;\n+import com.facebook.presto.spi.ErrorCodeSupplier;\n+import com.facebook.presto.spi.ErrorType;\n+\n+import static com.facebook.presto.spi.ErrorType.EXTERNAL;\n+\n+public enum BigQueryErrorCode\n+        implements ErrorCodeSupplier\n+{\n+    BIGQUERY_VIEW_DESTINATION_TABLE_CREATION_FAILED(0, EXTERNAL),\n+    BIGQUERY_DATETIME_PARSING_ERROR(1, EXTERNAL),", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjczMzYzOA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r586733638", "bodyText": "removed, thanks", "author": "fgwang7w", "createdAt": "2021-03-03T19:53:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM0ODUxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM0ODc0Ng==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584348746", "bodyText": "private final", "author": "qqibrow", "createdAt": "2021-02-28T19:34:49Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryMetadata.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ColumnMetadata;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.ConnectorTableHandle;\n+import com.facebook.presto.spi.ConnectorTableLayout;\n+import com.facebook.presto.spi.ConnectorTableLayoutHandle;\n+import com.facebook.presto.spi.ConnectorTableLayoutResult;\n+import com.facebook.presto.spi.ConnectorTableMetadata;\n+import com.facebook.presto.spi.Constraint;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.SchemaTablePrefix;\n+import com.facebook.presto.spi.TableNotFoundException;\n+import com.facebook.presto.spi.connector.ConnectorMetadata;\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.Schema;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Streams;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.google.cloud.bigquery.TableDefinition.Type.TABLE;\n+import static com.google.cloud.bigquery.TableDefinition.Type.VIEW;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toMap;\n+\n+public class BigQueryMetadata\n+        implements ConnectorMetadata\n+{\n+    static final int NUMERIC_DATA_TYPE_PRECISION = 38;\n+    static final int NUMERIC_DATA_TYPE_SCALE = 9;\n+    private static final String INFORMATION_SCHEMA = \"information_schema\";\n+    private static final Logger log = Logger.get(BigQueryMetadata.class);\n+    private BigQueryClient bigQueryClient;", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM0ODc2MQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584348761", "bodyText": "private final", "author": "qqibrow", "createdAt": "2021-02-28T19:34:57Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryMetadata.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ColumnMetadata;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.ConnectorTableHandle;\n+import com.facebook.presto.spi.ConnectorTableLayout;\n+import com.facebook.presto.spi.ConnectorTableLayoutHandle;\n+import com.facebook.presto.spi.ConnectorTableLayoutResult;\n+import com.facebook.presto.spi.ConnectorTableMetadata;\n+import com.facebook.presto.spi.Constraint;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.SchemaTablePrefix;\n+import com.facebook.presto.spi.TableNotFoundException;\n+import com.facebook.presto.spi.connector.ConnectorMetadata;\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.Schema;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Streams;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.google.cloud.bigquery.TableDefinition.Type.TABLE;\n+import static com.google.cloud.bigquery.TableDefinition.Type.VIEW;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toMap;\n+\n+public class BigQueryMetadata\n+        implements ConnectorMetadata\n+{\n+    static final int NUMERIC_DATA_TYPE_PRECISION = 38;\n+    static final int NUMERIC_DATA_TYPE_SCALE = 9;\n+    private static final String INFORMATION_SCHEMA = \"information_schema\";\n+    private static final Logger log = Logger.get(BigQueryMetadata.class);\n+    private BigQueryClient bigQueryClient;\n+    private String projectId;", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM0ODkwNw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584348907", "bodyText": "Shall we enforce project id must exist in config file?", "author": "qqibrow", "createdAt": "2021-02-28T19:35:41Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryMetadata.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ColumnMetadata;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.ConnectorTableHandle;\n+import com.facebook.presto.spi.ConnectorTableLayout;\n+import com.facebook.presto.spi.ConnectorTableLayoutHandle;\n+import com.facebook.presto.spi.ConnectorTableLayoutResult;\n+import com.facebook.presto.spi.ConnectorTableMetadata;\n+import com.facebook.presto.spi.Constraint;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.SchemaTablePrefix;\n+import com.facebook.presto.spi.TableNotFoundException;\n+import com.facebook.presto.spi.connector.ConnectorMetadata;\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.Schema;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Streams;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.google.cloud.bigquery.TableDefinition.Type.TABLE;\n+import static com.google.cloud.bigquery.TableDefinition.Type.VIEW;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toMap;\n+\n+public class BigQueryMetadata\n+        implements ConnectorMetadata\n+{\n+    static final int NUMERIC_DATA_TYPE_PRECISION = 38;\n+    static final int NUMERIC_DATA_TYPE_SCALE = 9;\n+    private static final String INFORMATION_SCHEMA = \"information_schema\";\n+    private static final Logger log = Logger.get(BigQueryMetadata.class);\n+    private BigQueryClient bigQueryClient;\n+    private String projectId;\n+\n+    @Inject\n+    public BigQueryMetadata(BigQueryClient bigQueryClient, BigQueryConfig config)\n+    {\n+        this.bigQueryClient = bigQueryClient;\n+        this.projectId = config.getProjectId().orElse(bigQueryClient.getProjectId());", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjczODg5NA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r586738894", "bodyText": "bigqueryconfig may not have projectId present,which is valid when the client just instantiate the connection", "author": "fgwang7w", "createdAt": "2021-03-03T20:01:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM0ODkwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM0OTMzNw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584349337", "bodyText": "Remove method if not used", "author": "qqibrow", "createdAt": "2021-02-28T19:38:33Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryMetadata.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ColumnMetadata;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.ConnectorTableHandle;\n+import com.facebook.presto.spi.ConnectorTableLayout;\n+import com.facebook.presto.spi.ConnectorTableLayoutHandle;\n+import com.facebook.presto.spi.ConnectorTableLayoutResult;\n+import com.facebook.presto.spi.ConnectorTableMetadata;\n+import com.facebook.presto.spi.Constraint;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.SchemaTablePrefix;\n+import com.facebook.presto.spi.TableNotFoundException;\n+import com.facebook.presto.spi.connector.ConnectorMetadata;\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.Schema;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Streams;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.google.cloud.bigquery.TableDefinition.Type.TABLE;\n+import static com.google.cloud.bigquery.TableDefinition.Type.VIEW;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toMap;\n+\n+public class BigQueryMetadata\n+        implements ConnectorMetadata\n+{\n+    static final int NUMERIC_DATA_TYPE_PRECISION = 38;\n+    static final int NUMERIC_DATA_TYPE_SCALE = 9;\n+    private static final String INFORMATION_SCHEMA = \"information_schema\";\n+    private static final Logger log = Logger.get(BigQueryMetadata.class);\n+    private BigQueryClient bigQueryClient;\n+    private String projectId;\n+\n+    @Inject\n+    public BigQueryMetadata(BigQueryClient bigQueryClient, BigQueryConfig config)\n+    {\n+        this.bigQueryClient = bigQueryClient;\n+        this.projectId = config.getProjectId().orElse(bigQueryClient.getProjectId());\n+    }\n+\n+    @Override\n+    public List<String> listSchemaNames(ConnectorSession session)\n+    {\n+        return Streams.stream(bigQueryClient.listDatasets(projectId))\n+                .map(dataset -> dataset.getDatasetId().getDataset())\n+                .filter(schemaName -> !schemaName.equalsIgnoreCase(INFORMATION_SCHEMA))\n+                .collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public List<SchemaTableName> listTables(ConnectorSession session, Optional<String> schemaName)\n+    {\n+        log.debug(\"listTables(session=%s, schemaName=%s)\", session, schemaName);\n+        return listTablesWithTypes(session, schemaName, TABLE);\n+    }\n+\n+    @Override\n+    public List<SchemaTableName> listViews(ConnectorSession session, Optional<String> schemaName)\n+    {\n+        log.debug(\"listViews(session=%s, schemaName=%s)\", session, schemaName);\n+        return listTablesWithTypes(session, schemaName, VIEW);\n+    }\n+\n+    private List<SchemaTableName> listTablesWithTypes(ConnectorSession session, Optional<String> schemaName, TableDefinition.Type... types)\n+    {\n+        if (schemaName.isPresent() && schemaName.get().equalsIgnoreCase(INFORMATION_SCHEMA)) {\n+            return ImmutableList.of();\n+        }\n+        Set<String> schemaNames = schemaName.map(ImmutableSet::of)\n+                .orElseGet(() -> ImmutableSet.copyOf(listSchemaNames(session)));\n+\n+        ImmutableList.Builder<SchemaTableName> tableNames = ImmutableList.builder();\n+        for (String datasetId : schemaNames) {\n+            for (Table table : bigQueryClient.listTables(DatasetId.of(projectId, datasetId), types)) {\n+                tableNames.add(new SchemaTableName(datasetId, table.getTableId().getTable()));\n+            }\n+        }\n+        return tableNames.build();\n+    }\n+\n+    <T> ImmutableList<T> collectAll(Page<T> page)", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1MTE0NQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584351145", "bodyText": "getCompletedPositions and getReadTimeNanos should not always return 0.", "author": "qqibrow", "createdAt": "2021-02-28T19:52:08Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryResultPageSource.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.DateTimeEncoding;\n+import com.facebook.presto.common.type.DecimalType;\n+import com.facebook.presto.common.type.Decimals;\n+import com.facebook.presto.common.type.RowType;\n+import com.facebook.presto.common.type.TimeZoneKey;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.common.type.VarbinaryType;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.cloud.bigquery.storage.v1beta1.BigQueryStorageClient;\n+import com.google.cloud.bigquery.storage.v1beta1.Storage;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+import org.apache.avro.Conversions;\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericDatumReader;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.io.BinaryDecoder;\n+import org.apache.avro.io.DecoderFactory;\n+import org.apache.avro.util.Utf8;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.math.BigDecimal;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.DateType.DATE;\n+import static com.facebook.presto.common.type.IntegerType.INTEGER;\n+import static com.facebook.presto.common.type.TimeWithTimeZoneType.TIME_WITH_TIME_ZONE;\n+import static com.facebook.presto.common.type.TimestampType.TIMESTAMP;\n+import static com.facebook.presto.common.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static com.facebook.presto.plugin.bigquery.BigQueryMetadata.NUMERIC_DATA_TYPE_PRECISION;\n+import static com.facebook.presto.plugin.bigquery.BigQueryMetadata.NUMERIC_DATA_TYPE_SCALE;\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.airlift.slice.Slices.utf8Slice;\n+import static java.lang.String.format;\n+\n+public class BigQueryResultPageSource\n+        implements ConnectorPageSource\n+{\n+    static final AvroDecimalConverter DECIMAL_CONVERTER = new AvroDecimalConverter();\n+    private static final Logger log = Logger.get(BigQueryResultPageSource.class);\n+    private final BigQueryStorageClient bigQueryStorageClient;\n+    private final int maxReadRowsRetries;\n+    private final BigQuerySplit split;\n+    private final BigQueryTableHandle table;\n+    private final ImmutableList<BigQueryColumnHandle> columns;\n+    private final ImmutableList<Type> columnTypes;\n+    private final AtomicLong readBytes;\n+    private final PageBuilder pageBuilder;\n+    private Iterator<Storage.ReadRowsResponse> responses;\n+    private boolean closed;\n+\n+    public BigQueryResultPageSource(\n+            BigQueryStorageClientFactory bigQueryStorageClientFactory,\n+            int maxReadRowsRetries,\n+            BigQuerySplit split,\n+            BigQueryTableHandle table,\n+            ImmutableList<BigQueryColumnHandle> columns)\n+    {\n+        this.bigQueryStorageClient = bigQueryStorageClientFactory.createBigQueryStorageClient();\n+        this.maxReadRowsRetries = maxReadRowsRetries;\n+        this.split = split;\n+        this.table = table;\n+        this.columns = columns;\n+        this.readBytes = new AtomicLong();\n+        this.columnTypes = columns.stream().map(BigQueryColumnHandle::getPrestoType).collect(toImmutableList());\n+        this.pageBuilder = new PageBuilder(columnTypes);\n+\n+        log.debug(\"Starting to read from %s\", split.getStreamName());\n+        Storage.ReadRowsRequest.Builder readRowsRequest = Storage.ReadRowsRequest.newBuilder()\n+                .setReadPosition(Storage.StreamPosition.newBuilder()\n+                        .setStream(Storage.Stream.newBuilder()\n+                                .setName(split.getStreamName())));\n+        responses = new ReadRowsHelper(bigQueryStorageClient, readRowsRequest, maxReadRowsRetries).readRows();\n+        closed = false;\n+    }\n+\n+    @Override\n+    public long getCompletedBytes()\n+    {\n+        return readBytes.get();\n+    }\n+\n+    @Override\n+    public long getCompletedPositions()", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjY3MjUwNg==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r592672506", "bodyText": "@fgwang7w could you fix this?", "author": "qqibrow", "createdAt": "2021-03-11T19:45:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1MTE0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MzcyNTMyNw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r593725327", "bodyText": "fixed", "author": "fgwang7w", "createdAt": "2021-03-13T09:10:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1MTE0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1MTM5Ng==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584351396", "bodyText": "This field is never used?", "author": "qqibrow", "createdAt": "2021-02-28T19:54:52Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryResultPageSource.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.DateTimeEncoding;\n+import com.facebook.presto.common.type.DecimalType;\n+import com.facebook.presto.common.type.Decimals;\n+import com.facebook.presto.common.type.RowType;\n+import com.facebook.presto.common.type.TimeZoneKey;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.common.type.VarbinaryType;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.cloud.bigquery.storage.v1beta1.BigQueryStorageClient;\n+import com.google.cloud.bigquery.storage.v1beta1.Storage;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+import org.apache.avro.Conversions;\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericDatumReader;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.io.BinaryDecoder;\n+import org.apache.avro.io.DecoderFactory;\n+import org.apache.avro.util.Utf8;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.math.BigDecimal;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.DateType.DATE;\n+import static com.facebook.presto.common.type.IntegerType.INTEGER;\n+import static com.facebook.presto.common.type.TimeWithTimeZoneType.TIME_WITH_TIME_ZONE;\n+import static com.facebook.presto.common.type.TimestampType.TIMESTAMP;\n+import static com.facebook.presto.common.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static com.facebook.presto.plugin.bigquery.BigQueryMetadata.NUMERIC_DATA_TYPE_PRECISION;\n+import static com.facebook.presto.plugin.bigquery.BigQueryMetadata.NUMERIC_DATA_TYPE_SCALE;\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.airlift.slice.Slices.utf8Slice;\n+import static java.lang.String.format;\n+\n+public class BigQueryResultPageSource\n+        implements ConnectorPageSource\n+{\n+    static final AvroDecimalConverter DECIMAL_CONVERTER = new AvroDecimalConverter();\n+    private static final Logger log = Logger.get(BigQueryResultPageSource.class);\n+    private final BigQueryStorageClient bigQueryStorageClient;\n+    private final int maxReadRowsRetries;", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1MjU4MQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584352581", "bodyText": "Could you elaborate more on this? This implies when value is not null and value is not instance of ByteBuffer , appendNull().", "author": "qqibrow", "createdAt": "2021-02-28T20:03:57Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryResultPageSource.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.DateTimeEncoding;\n+import com.facebook.presto.common.type.DecimalType;\n+import com.facebook.presto.common.type.Decimals;\n+import com.facebook.presto.common.type.RowType;\n+import com.facebook.presto.common.type.TimeZoneKey;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.common.type.VarbinaryType;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.cloud.bigquery.storage.v1beta1.BigQueryStorageClient;\n+import com.google.cloud.bigquery.storage.v1beta1.Storage;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+import org.apache.avro.Conversions;\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericDatumReader;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.io.BinaryDecoder;\n+import org.apache.avro.io.DecoderFactory;\n+import org.apache.avro.util.Utf8;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.math.BigDecimal;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.DateType.DATE;\n+import static com.facebook.presto.common.type.IntegerType.INTEGER;\n+import static com.facebook.presto.common.type.TimeWithTimeZoneType.TIME_WITH_TIME_ZONE;\n+import static com.facebook.presto.common.type.TimestampType.TIMESTAMP;\n+import static com.facebook.presto.common.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static com.facebook.presto.plugin.bigquery.BigQueryMetadata.NUMERIC_DATA_TYPE_PRECISION;\n+import static com.facebook.presto.plugin.bigquery.BigQueryMetadata.NUMERIC_DATA_TYPE_SCALE;\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.airlift.slice.Slices.utf8Slice;\n+import static java.lang.String.format;\n+\n+public class BigQueryResultPageSource\n+        implements ConnectorPageSource\n+{\n+    static final AvroDecimalConverter DECIMAL_CONVERTER = new AvroDecimalConverter();\n+    private static final Logger log = Logger.get(BigQueryResultPageSource.class);\n+    private final BigQueryStorageClient bigQueryStorageClient;\n+    private final int maxReadRowsRetries;\n+    private final BigQuerySplit split;\n+    private final BigQueryTableHandle table;\n+    private final ImmutableList<BigQueryColumnHandle> columns;\n+    private final ImmutableList<Type> columnTypes;\n+    private final AtomicLong readBytes;\n+    private final PageBuilder pageBuilder;\n+    private Iterator<Storage.ReadRowsResponse> responses;\n+    private boolean closed;\n+\n+    public BigQueryResultPageSource(\n+            BigQueryStorageClientFactory bigQueryStorageClientFactory,\n+            int maxReadRowsRetries,\n+            BigQuerySplit split,\n+            BigQueryTableHandle table,\n+            ImmutableList<BigQueryColumnHandle> columns)\n+    {\n+        this.bigQueryStorageClient = bigQueryStorageClientFactory.createBigQueryStorageClient();\n+        this.maxReadRowsRetries = maxReadRowsRetries;\n+        this.split = split;\n+        this.table = table;\n+        this.columns = columns;\n+        this.readBytes = new AtomicLong();\n+        this.columnTypes = columns.stream().map(BigQueryColumnHandle::getPrestoType).collect(toImmutableList());\n+        this.pageBuilder = new PageBuilder(columnTypes);\n+\n+        log.debug(\"Starting to read from %s\", split.getStreamName());\n+        Storage.ReadRowsRequest.Builder readRowsRequest = Storage.ReadRowsRequest.newBuilder()\n+                .setReadPosition(Storage.StreamPosition.newBuilder()\n+                        .setStream(Storage.Stream.newBuilder()\n+                                .setName(split.getStreamName())));\n+        responses = new ReadRowsHelper(bigQueryStorageClient, readRowsRequest, maxReadRowsRetries).readRows();\n+        closed = false;\n+    }\n+\n+    @Override\n+    public long getCompletedBytes()\n+    {\n+        return readBytes.get();\n+    }\n+\n+    @Override\n+    public long getCompletedPositions()\n+    {\n+        return 0;\n+    }\n+\n+    @Override\n+    public long getReadTimeNanos()\n+    {\n+        return 0;\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return !responses.hasNext();\n+    }\n+\n+    @Override\n+    public Page getNextPage()\n+    {\n+        checkState(pageBuilder.isEmpty(), \"PageBuilder is not empty at the beginning of a new page\");\n+        Storage.ReadRowsResponse response = responses.next();\n+        Iterable<GenericRecord> records = parse(response);\n+        for (GenericRecord record : records) {\n+            pageBuilder.declarePosition();\n+            for (int column = 0; column < columnTypes.size(); column++) {\n+                BlockBuilder output = pageBuilder.getBlockBuilder(column);\n+                appendTo(columnTypes.get(column), record.get(column), output);\n+            }\n+        }\n+\n+        Page page = pageBuilder.build();\n+        pageBuilder.reset();\n+        return page;\n+    }\n+\n+    private void appendTo(Type type, Object value, BlockBuilder output)\n+    {\n+        if (value == null) {\n+            output.appendNull();\n+            return;\n+        }\n+\n+        Class<?> javaType = type.getJavaType();\n+        try {\n+            if (javaType == boolean.class) {\n+                type.writeBoolean(output, (Boolean) value);\n+            }\n+            else if (javaType == long.class) {\n+                writeLong(type, value, output, javaType);\n+            }\n+            else if (javaType == double.class) {\n+                type.writeDouble(output, ((Number) value).doubleValue());\n+            }\n+            else if (javaType == Slice.class) {\n+                writeSlice(output, type, value);\n+            }\n+            else if (javaType == Block.class) {\n+                writeBlock(output, type, value);\n+            }\n+            else {\n+                throw new PrestoException(GENERIC_INTERNAL_ERROR, format(\"Unhandled type for %s: %s\", javaType.getSimpleName(), type));\n+            }\n+        }\n+        catch (ClassCastException ignore) {\n+            // returns null instead of raising exception\n+            log.warn(\"Cast Exception encountered, return null instead\");\n+            output.appendNull();\n+        }\n+    }\n+\n+    private void writeLong(Type type, Object value, BlockBuilder output, Class<?> javaType)\n+    {\n+        if (type.equals(BIGINT)) {\n+            type.writeLong(output, ((Number) value).longValue());\n+        }\n+        else if (type.equals(INTEGER)) {\n+            type.writeLong(output, ((Number) value).intValue());\n+        }\n+        else if (type.equals(DATE)) {\n+            type.writeLong(output, ((Number) value).intValue());\n+        }\n+        else if (type.equals(TIMESTAMP)) {\n+            type.writeLong(output, BigQueryType.toPrestoTimestamp(((org.apache.avro.util.Utf8) value).toString()));\n+        }\n+        else if (type.equals(TIME_WITH_TIME_ZONE) || type.equals(TIMESTAMP_WITH_TIME_ZONE)) {\n+            type.writeLong(output, DateTimeEncoding.packDateTimeWithZone(((Long) value).longValue() / 1000, TimeZoneKey.UTC_KEY));\n+        }\n+        else {\n+            throw new PrestoException(GENERIC_INTERNAL_ERROR, format(\"Unhandled type for %s: %s\", javaType.getSimpleName(), type));\n+        }\n+    }\n+\n+    private void writeSlice(BlockBuilder output, Type type, Object value)\n+    {\n+        if (type instanceof VarcharType) {\n+            type.writeSlice(output, utf8Slice(((Utf8) value).toString()));\n+        }\n+        else if (type instanceof DecimalType) {\n+            BigDecimal bdValue = DECIMAL_CONVERTER.convert(value);\n+            type.writeSlice(output, Decimals.encodeScaledValue(bdValue, NUMERIC_DATA_TYPE_SCALE));\n+        }\n+        else if (type instanceof VarbinaryType) {\n+            if (value instanceof ByteBuffer) {\n+                type.writeSlice(output, Slices.wrappedBuffer((ByteBuffer) value));\n+            }\n+            else {", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Njc0NTY3Mw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r586745673", "bodyText": "it was meant for 'special exception handling', change to throw a BigQueryException now", "author": "fgwang7w", "createdAt": "2021-03-03T20:12:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1MjU4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1MzA0Ng==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584353046", "bodyText": "The bellowing logic focus on how to convert avro to Page. Do we have similar logic in other connectors? @zhenxiao", "author": "qqibrow", "createdAt": "2021-02-28T20:07:34Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryResultPageSource.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.DateTimeEncoding;\n+import com.facebook.presto.common.type.DecimalType;\n+import com.facebook.presto.common.type.Decimals;\n+import com.facebook.presto.common.type.RowType;\n+import com.facebook.presto.common.type.TimeZoneKey;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.common.type.VarbinaryType;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.cloud.bigquery.storage.v1beta1.BigQueryStorageClient;\n+import com.google.cloud.bigquery.storage.v1beta1.Storage;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+import org.apache.avro.Conversions;\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericDatumReader;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.io.BinaryDecoder;\n+import org.apache.avro.io.DecoderFactory;\n+import org.apache.avro.util.Utf8;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.math.BigDecimal;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.DateType.DATE;\n+import static com.facebook.presto.common.type.IntegerType.INTEGER;\n+import static com.facebook.presto.common.type.TimeWithTimeZoneType.TIME_WITH_TIME_ZONE;\n+import static com.facebook.presto.common.type.TimestampType.TIMESTAMP;\n+import static com.facebook.presto.common.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static com.facebook.presto.plugin.bigquery.BigQueryMetadata.NUMERIC_DATA_TYPE_PRECISION;\n+import static com.facebook.presto.plugin.bigquery.BigQueryMetadata.NUMERIC_DATA_TYPE_SCALE;\n+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.airlift.slice.Slices.utf8Slice;\n+import static java.lang.String.format;\n+\n+public class BigQueryResultPageSource\n+        implements ConnectorPageSource\n+{\n+    static final AvroDecimalConverter DECIMAL_CONVERTER = new AvroDecimalConverter();\n+    private static final Logger log = Logger.get(BigQueryResultPageSource.class);\n+    private final BigQueryStorageClient bigQueryStorageClient;\n+    private final int maxReadRowsRetries;\n+    private final BigQuerySplit split;\n+    private final BigQueryTableHandle table;\n+    private final ImmutableList<BigQueryColumnHandle> columns;\n+    private final ImmutableList<Type> columnTypes;\n+    private final AtomicLong readBytes;\n+    private final PageBuilder pageBuilder;\n+    private Iterator<Storage.ReadRowsResponse> responses;\n+    private boolean closed;\n+\n+    public BigQueryResultPageSource(\n+            BigQueryStorageClientFactory bigQueryStorageClientFactory,\n+            int maxReadRowsRetries,\n+            BigQuerySplit split,\n+            BigQueryTableHandle table,\n+            ImmutableList<BigQueryColumnHandle> columns)\n+    {\n+        this.bigQueryStorageClient = bigQueryStorageClientFactory.createBigQueryStorageClient();\n+        this.maxReadRowsRetries = maxReadRowsRetries;\n+        this.split = split;\n+        this.table = table;\n+        this.columns = columns;\n+        this.readBytes = new AtomicLong();\n+        this.columnTypes = columns.stream().map(BigQueryColumnHandle::getPrestoType).collect(toImmutableList());\n+        this.pageBuilder = new PageBuilder(columnTypes);\n+\n+        log.debug(\"Starting to read from %s\", split.getStreamName());\n+        Storage.ReadRowsRequest.Builder readRowsRequest = Storage.ReadRowsRequest.newBuilder()\n+                .setReadPosition(Storage.StreamPosition.newBuilder()\n+                        .setStream(Storage.Stream.newBuilder()\n+                                .setName(split.getStreamName())));\n+        responses = new ReadRowsHelper(bigQueryStorageClient, readRowsRequest, maxReadRowsRetries).readRows();\n+        closed = false;\n+    }\n+\n+    @Override\n+    public long getCompletedBytes()\n+    {\n+        return readBytes.get();\n+    }\n+\n+    @Override\n+    public long getCompletedPositions()\n+    {\n+        return 0;\n+    }\n+\n+    @Override\n+    public long getReadTimeNanos()\n+    {\n+        return 0;\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return !responses.hasNext();\n+    }\n+\n+    @Override\n+    public Page getNextPage()\n+    {\n+        checkState(pageBuilder.isEmpty(), \"PageBuilder is not empty at the beginning of a new page\");\n+        Storage.ReadRowsResponse response = responses.next();\n+        Iterable<GenericRecord> records = parse(response);\n+        for (GenericRecord record : records) {\n+            pageBuilder.declarePosition();\n+            for (int column = 0; column < columnTypes.size(); column++) {\n+                BlockBuilder output = pageBuilder.getBlockBuilder(column);\n+                appendTo(columnTypes.get(column), record.get(column), output);\n+            }\n+        }\n+\n+        Page page = pageBuilder.build();\n+        pageBuilder.reset();\n+        return page;\n+    }\n+\n+    private void appendTo(Type type, Object value, BlockBuilder output)", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1NjIzNw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594056237", "bodyText": "good point. I could not remember one in other connectors. Will refactor all into utilities functions in the future", "author": "zhenxiao", "createdAt": "2021-03-15T05:20:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1MzA0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDE0NDcyNA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594144724", "bodyText": "I could add this request in the list for future roadmap", "author": "fgwang7w", "createdAt": "2021-03-15T08:47:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1MzA0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1MzczNA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584353734", "bodyText": "Could we either add comment or change method name to show why NO_ROWS_TO_GENERATE  is used here?", "author": "qqibrow", "createdAt": "2021-02-28T20:13:01Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQuerySplit.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ConnectorSplit;\n+import com.facebook.presto.spi.HostAddress;\n+import com.facebook.presto.spi.schedule.NodeSelectionStrategy;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.facebook.presto.spi.schedule.NodeSelectionStrategy.NO_PREFERENCE;\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class BigQuerySplit\n+        implements ConnectorSplit\n+{\n+    private static final int NO_ROWS_TO_GENERATE = -1;\n+\n+    private final String streamName;\n+    private final String avroSchema;\n+    private final List<ColumnHandle> columns;\n+    private final long emptyRowsToGenerate;\n+\n+    @JsonCreator\n+    public BigQuerySplit(\n+            @JsonProperty(\"streamName\") String streamName,\n+            @JsonProperty(\"avroSchema\") String avroSchema,\n+            @JsonProperty(\"columns\") List<ColumnHandle> columns,\n+            @JsonProperty(\"emptyRowsToGenerate\") long emptyRowsToGenerate)\n+    {\n+        this.streamName = requireNonNull(streamName, \"streamName cannot be null\");\n+        this.avroSchema = requireNonNull(avroSchema, \"avroSchema cannot be null\");\n+        this.columns = ImmutableList.copyOf(requireNonNull(columns, \"columns cannot be null\"));\n+        this.emptyRowsToGenerate = emptyRowsToGenerate;\n+    }\n+\n+    static BigQuerySplit forStream(String streamName, String avroSchema, List<ColumnHandle> columns)", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Njg1NjcxNA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r586856714", "bodyText": "this means it's an non-empty projection, read stream returns rows from bigquery storage without intermediary.", "author": "fgwang7w", "createdAt": "2021-03-03T23:01:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1MzczNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTY2NjU3Ng==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r595666576", "bodyText": "I have the same concern with @qqibrow the definition of emptyRowsToGenerate NO_ROWS_TO_GENERATE are misleading. After we merge the EmptySplitPageSource class, our logic could be simpler.\nLet's fix this class after merge the EmptySplitPageSource class.", "author": "zhenxiao", "createdAt": "2021-03-17T02:23:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1MzczNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODA0MDc5NQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r598040795", "bodyText": "@qqibrow @highker @beinan what do you think? I feel keeping EmptySplitPageSource makes the logic complicated, this NO_ROWS_TO_GENERATE is misleading. Do you think we could keep EmptySplitPageSource for now? Or we need to merge it in this commit?", "author": "zhenxiao", "createdAt": "2021-03-20T01:13:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1MzczNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTc5Njk4NA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r599796984", "bodyText": "I'm also not feeling good about NO_ROWS_TO_GENERATE.  But as @fgwang7w  insisted repeatedly, I guess it might be not an easy work to replace it in this commit.  keeping it or replacing it, I'm good either way, your call.", "author": "beinan", "createdAt": "2021-03-23T17:43:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1MzczNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1MzgyMg==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584353822", "bodyText": "add checkArgument(numberOfRows > 0) ?", "author": "qqibrow", "createdAt": "2021-02-28T20:13:46Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQuerySplit.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ConnectorSplit;\n+import com.facebook.presto.spi.HostAddress;\n+import com.facebook.presto.spi.schedule.NodeSelectionStrategy;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.facebook.presto.spi.schedule.NodeSelectionStrategy.NO_PREFERENCE;\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class BigQuerySplit\n+        implements ConnectorSplit\n+{\n+    private static final int NO_ROWS_TO_GENERATE = -1;\n+\n+    private final String streamName;\n+    private final String avroSchema;\n+    private final List<ColumnHandle> columns;\n+    private final long emptyRowsToGenerate;\n+\n+    @JsonCreator\n+    public BigQuerySplit(\n+            @JsonProperty(\"streamName\") String streamName,\n+            @JsonProperty(\"avroSchema\") String avroSchema,\n+            @JsonProperty(\"columns\") List<ColumnHandle> columns,\n+            @JsonProperty(\"emptyRowsToGenerate\") long emptyRowsToGenerate)\n+    {\n+        this.streamName = requireNonNull(streamName, \"streamName cannot be null\");\n+        this.avroSchema = requireNonNull(avroSchema, \"avroSchema cannot be null\");\n+        this.columns = ImmutableList.copyOf(requireNonNull(columns, \"columns cannot be null\"));\n+        this.emptyRowsToGenerate = emptyRowsToGenerate;\n+    }\n+\n+    static BigQuerySplit forStream(String streamName, String avroSchema, List<ColumnHandle> columns)\n+    {\n+        return new BigQuerySplit(streamName, avroSchema, columns, NO_ROWS_TO_GENERATE);\n+    }\n+\n+    static BigQuerySplit emptyProjection(long numberOfRows)\n+    {", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Njg2NjY0Ng==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r586866646", "bodyText": "good point, added", "author": "fgwang7w", "createdAt": "2021-03-03T23:16:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1MzgyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1NDA5Ng==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584354096", "bodyText": "name to isEmptyProjectionRequired?", "author": "qqibrow", "createdAt": "2021-02-28T20:16:07Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQuerySplitManager.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.ConnectorSplitSource;\n+import com.facebook.presto.spi.ConnectorTableLayoutHandle;\n+import com.facebook.presto.spi.FixedSplitSource;\n+import com.facebook.presto.spi.NodeManager;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.connector.ConnectorSplitManager;\n+import com.facebook.presto.spi.connector.ConnectorTransactionHandle;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.cloud.bigquery.storage.v1beta1.Storage;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+import static com.facebook.presto.plugin.bigquery.BigQueryErrorCode.BIGQUERY_FAILED_TO_EXECUTE_QUERY;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.IntStream.range;\n+\n+public class BigQuerySplitManager\n+        implements ConnectorSplitManager\n+{\n+    private static final Logger log = Logger.get(BigQuerySplitManager.class);\n+\n+    private final BigQueryClient bigQueryClient;\n+    private final BigQueryStorageClientFactory bigQueryStorageClientFactory;\n+    private final OptionalInt parallelism;\n+    private final ReadSessionCreatorConfig readSessionCreatorConfig;\n+    private final NodeManager nodeManager;\n+\n+    @Inject\n+    public BigQuerySplitManager(\n+            BigQueryConfig config,\n+            BigQueryClient bigQueryClient,\n+            BigQueryStorageClientFactory bigQueryStorageClientFactory,\n+            NodeManager nodeManager)\n+    {\n+        requireNonNull(config, \"config cannot be null\");\n+\n+        this.bigQueryClient = requireNonNull(bigQueryClient, \"bigQueryClient cannot be null\");\n+        this.bigQueryStorageClientFactory = requireNonNull(bigQueryStorageClientFactory, \"bigQueryStorageClientFactory cannot be null\");\n+        this.parallelism = config.getParallelism();\n+        this.readSessionCreatorConfig = config.createReadSessionCreatorConfig();\n+        this.nodeManager = requireNonNull(nodeManager, \"nodeManager cannot be null\");\n+    }\n+\n+    @Override\n+    public ConnectorSplitSource getSplits(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorTableLayoutHandle layout,\n+            SplitSchedulingContext splitSchedulingContext)\n+    {\n+        BigQueryTableLayoutHandle bigQueryTableLayoutHandle = (BigQueryTableLayoutHandle) layout;\n+        BigQueryTableHandle bigQueryTableHandle = bigQueryTableLayoutHandle.getTable();\n+\n+        TableId tableId = bigQueryTableHandle.getTableId();\n+        int actualParallelism = parallelism.orElse(nodeManager.getRequiredWorkerNodes().size());\n+        Optional<String> filter = Optional.empty();\n+        List<BigQuerySplit> splits = emptyProjectionIsRequired(bigQueryTableHandle.getProjectedColumns()) ?\n+                createEmptyProjection(tableId, actualParallelism, filter) :\n+                readFromBigQuery(tableId, bigQueryTableHandle.getProjectedColumns(), actualParallelism, filter);\n+        return new FixedSplitSource(splits);\n+    }\n+\n+    private boolean emptyProjectionIsRequired(Optional<List<ColumnHandle>> projectedColumns)", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1NDU5Mg==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584354592", "bodyText": "Could you give a query example that empty projection is required?", "author": "qqibrow", "createdAt": "2021-02-28T20:19:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1NDA5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Njk0MDQyNQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r586940425", "bodyText": "renamed, the empty projection split strategy is used when desired column is present", "author": "fgwang7w", "createdAt": "2021-03-04T01:22:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1NDA5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1NDg5MQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584354891", "bodyText": "method is not used. Will this be used in followup PRs?", "author": "qqibrow", "createdAt": "2021-02-28T20:21:54Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryTableHandle.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.presto.common.predicate.TupleDomain;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ConnectorTableHandle;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.OptionalLong;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class BigQueryTableHandle\n+        implements ConnectorTableHandle\n+{\n+    private final String projectId;\n+    private final String schemaName;\n+    private final String tableName;\n+    private final String type;\n+    private final TupleDomain<ColumnHandle> constraint;\n+    private final Optional<List<ColumnHandle>> projectedColumns;\n+    private final OptionalLong limit;\n+\n+    @JsonCreator\n+    public BigQueryTableHandle(\n+            @JsonProperty(\"projectId\") String projectId,\n+            @JsonProperty(\"schemaName\") String schemaName,\n+            @JsonProperty(\"tableName\") String tableName,\n+            @JsonProperty(\"type\") String type,\n+            @JsonProperty(\"constraint\") TupleDomain<ColumnHandle> constraint,\n+            @JsonProperty(\"projectedColumns\") Optional<List<ColumnHandle>> projectedColumns,\n+            @JsonProperty(\"limit\") OptionalLong limit)\n+    {\n+        this.projectId = requireNonNull(projectId, \"projectId is null\");\n+        this.schemaName = requireNonNull(schemaName, \"schemaName is null\");\n+        this.tableName = requireNonNull(tableName, \"tableName is null\");\n+        this.type = requireNonNull(type, \"type is null\");\n+        this.constraint = requireNonNull(constraint, \"constraint is null\");\n+        this.projectedColumns = requireNonNull(projectedColumns, \"projectedColumns is null\");\n+        this.limit = requireNonNull(limit, \"limit is null\");\n+    }\n+\n+    public static BigQueryTableHandle from(TableInfo tableInfo)\n+    {\n+        TableId tableId = tableInfo.getTableId();\n+        String type = tableInfo.getDefinition().getType().toString();\n+        return new BigQueryTableHandle(tableId.getProject(), tableId.getDataset(), tableId.getTable(), type, TupleDomain.none(), Optional.empty(), OptionalLong.empty());\n+    }\n+\n+    @JsonProperty\n+    public String getProjectId()\n+    {\n+        return projectId;\n+    }\n+\n+    @JsonProperty\n+    public String getSchemaName()\n+    {\n+        return schemaName;\n+    }\n+\n+    @JsonProperty\n+    public String getTableName()\n+    {\n+        return tableName;\n+    }\n+\n+    @JsonProperty\n+    public String getType()\n+    {\n+        return type;\n+    }\n+\n+    @JsonProperty\n+    public TupleDomain<ColumnHandle> getConstraint()\n+    {\n+        return constraint;\n+    }\n+\n+    @JsonProperty\n+    public Optional<List<ColumnHandle>> getProjectedColumns()\n+    {\n+        return projectedColumns;\n+    }\n+\n+    @JsonProperty\n+    public OptionalLong getLimit()\n+    {\n+        return limit;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        BigQueryTableHandle that = (BigQueryTableHandle) o;\n+        return Objects.equals(projectId, that.projectId) &&\n+                Objects.equals(schemaName, that.schemaName) &&\n+                Objects.equals(tableName, that.tableName) &&\n+                Objects.equals(type, that.tableName) &&\n+                Objects.equals(constraint, that.constraint) &&\n+                Objects.equals(projectedColumns, that.projectedColumns) &&\n+                Objects.equals(limit, that.limit);\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        return Objects.hash(projectId, schemaName, tableName, type, constraint, projectedColumns, limit);\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return toStringHelper(this)\n+                .add(\"projectId\", projectId)\n+                .add(\"schemaName\", schemaName)\n+                .add(\"tableName\", tableName)\n+                .add(\"type\", type)\n+                .add(\"constraint\", constraint)\n+                .add(\"projectedColumns\", projectedColumns)\n+                .add(\"limit\", limit)\n+                .toString();\n+    }\n+\n+    public TableId getTableId()\n+    {\n+        return TableId.of(projectId, schemaName, tableName);\n+    }\n+\n+    BigQueryTableHandle withConstraint(TupleDomain<ColumnHandle> newConstraint)\n+    {\n+        return new BigQueryTableHandle(projectId, schemaName, tableName, type, newConstraint, projectedColumns, limit);\n+    }\n+\n+    BigQueryTableHandle withProjectedColumns(List<ColumnHandle> newProjectedColumns)\n+    {\n+        return new BigQueryTableHandle(projectId, schemaName, tableName, type, constraint, Optional.of(newProjectedColumns), limit);\n+    }\n+\n+    BigQueryTableHandle withLimit(long newLimit)", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Njk5NTkwNA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r586995904", "bodyText": "limit pushdown is supported in future roadmap", "author": "fgwang7w", "createdAt": "2021-03-04T02:29:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1NDg5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1NjM1OQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584356359", "bodyText": "remove this if not used", "author": "qqibrow", "createdAt": "2021-02-28T20:34:41Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryType.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.BigintType;\n+import com.facebook.presto.common.type.BooleanType;\n+import com.facebook.presto.common.type.DateType;\n+import com.facebook.presto.common.type.DecimalType;\n+import com.facebook.presto.common.type.DoubleType;\n+import com.facebook.presto.common.type.RowType;\n+import com.facebook.presto.common.type.TimeWithTimeZoneType;\n+import com.facebook.presto.common.type.TimestampType;\n+import com.facebook.presto.common.type.TimestampWithTimeZoneType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.VarbinaryType;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.google.cloud.bigquery.Field;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.time.LocalDateTime;\n+import java.time.Month;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.lang.Integer.parseInt;\n+import static java.time.Month.APRIL;\n+import static java.time.Month.AUGUST;\n+import static java.time.Month.DECEMBER;\n+import static java.time.Month.FEBRUARY;\n+import static java.time.Month.JANUARY;\n+import static java.time.Month.JULY;\n+import static java.time.Month.JUNE;\n+import static java.time.Month.MARCH;\n+import static java.time.Month.MAY;\n+import static java.time.Month.NOVEMBER;\n+import static java.time.Month.OCTOBER;\n+import static java.time.Month.SEPTEMBER;\n+import static java.time.ZoneId.systemDefault;\n+import static java.util.stream.Collectors.toList;\n+\n+public enum BigQueryType\n+{\n+    BOOLEAN(BooleanType.BOOLEAN),\n+    BYTES(VarbinaryType.VARBINARY),\n+    DATE(DateType.DATE),\n+    DATETIME(TimestampType.TIMESTAMP),\n+    FLOAT(DoubleType.DOUBLE),\n+    GEOGRAPHY(VarcharType.VARCHAR),\n+    INTEGER(BigintType.BIGINT),\n+    NUMERIC(DecimalType.createDecimalType(BigQueryMetadata.NUMERIC_DATA_TYPE_PRECISION, BigQueryMetadata.NUMERIC_DATA_TYPE_SCALE)),\n+    RECORD(null),\n+    STRING(createUnboundedVarcharType()),\n+    TIME(TimeWithTimeZoneType.TIME_WITH_TIME_ZONE),\n+    TIMESTAMP(TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE);\n+\n+    private static final int[] NANO_FACTOR = {\n+            -1, // 0, no need to multiply\n+            100_000_000, // 1 digit after the dot\n+            10_000_000, // 2 digits after the dot\n+            1_000_000, // 3 digits after the dot\n+            100_000, // 4 digits after the dot\n+            10_000, // 5 digits after the dot\n+            1000, // 6 digits after the dot\n+            100, // 7 digits after the dot\n+            10, // 8 digits after the dot\n+            1, // 9 digits after the dot\n+    };\n+    private static final ImmutableMap<String, Month> MONTH = ImmutableMap.<String, Month>builder()", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1NjU1Mg==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584356552", "bodyText": "Why are most of these enums not used?", "author": "qqibrow", "createdAt": "2021-02-28T20:36:02Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryType.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.BigintType;\n+import com.facebook.presto.common.type.BooleanType;\n+import com.facebook.presto.common.type.DateType;\n+import com.facebook.presto.common.type.DecimalType;\n+import com.facebook.presto.common.type.DoubleType;\n+import com.facebook.presto.common.type.RowType;\n+import com.facebook.presto.common.type.TimeWithTimeZoneType;\n+import com.facebook.presto.common.type.TimestampType;\n+import com.facebook.presto.common.type.TimestampWithTimeZoneType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.VarbinaryType;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.google.cloud.bigquery.Field;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.time.LocalDateTime;\n+import java.time.Month;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.lang.Integer.parseInt;\n+import static java.time.Month.APRIL;\n+import static java.time.Month.AUGUST;\n+import static java.time.Month.DECEMBER;\n+import static java.time.Month.FEBRUARY;\n+import static java.time.Month.JANUARY;\n+import static java.time.Month.JULY;\n+import static java.time.Month.JUNE;\n+import static java.time.Month.MARCH;\n+import static java.time.Month.MAY;\n+import static java.time.Month.NOVEMBER;\n+import static java.time.Month.OCTOBER;\n+import static java.time.Month.SEPTEMBER;\n+import static java.time.ZoneId.systemDefault;\n+import static java.util.stream.Collectors.toList;\n+\n+public enum BigQueryType\n+{\n+    BOOLEAN(BooleanType.BOOLEAN),", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzAwNDA0MA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r587004040", "bodyText": "they are defined for testing, but actual conversion is done by toRawTypeField method", "author": "fgwang7w", "createdAt": "2021-03-04T02:39:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1NjU1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1Nzk0NQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584357945", "bodyText": "Why not just create a custom DataTimeFormatter with control on nano seconds? https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatterBuilder.html#appendFraction-java.time.temporal.TemporalField-int-int-boolean-", "author": "qqibrow", "createdAt": "2021-02-28T20:46:21Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryType.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.BigintType;\n+import com.facebook.presto.common.type.BooleanType;\n+import com.facebook.presto.common.type.DateType;\n+import com.facebook.presto.common.type.DecimalType;\n+import com.facebook.presto.common.type.DoubleType;\n+import com.facebook.presto.common.type.RowType;\n+import com.facebook.presto.common.type.TimeWithTimeZoneType;\n+import com.facebook.presto.common.type.TimestampType;\n+import com.facebook.presto.common.type.TimestampWithTimeZoneType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.VarbinaryType;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.google.cloud.bigquery.Field;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.time.LocalDateTime;\n+import java.time.Month;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.lang.Integer.parseInt;\n+import static java.time.Month.APRIL;\n+import static java.time.Month.AUGUST;\n+import static java.time.Month.DECEMBER;\n+import static java.time.Month.FEBRUARY;\n+import static java.time.Month.JANUARY;\n+import static java.time.Month.JULY;\n+import static java.time.Month.JUNE;\n+import static java.time.Month.MARCH;\n+import static java.time.Month.MAY;\n+import static java.time.Month.NOVEMBER;\n+import static java.time.Month.OCTOBER;\n+import static java.time.Month.SEPTEMBER;\n+import static java.time.ZoneId.systemDefault;\n+import static java.util.stream.Collectors.toList;\n+\n+public enum BigQueryType\n+{\n+    BOOLEAN(BooleanType.BOOLEAN),\n+    BYTES(VarbinaryType.VARBINARY),\n+    DATE(DateType.DATE),\n+    DATETIME(TimestampType.TIMESTAMP),\n+    FLOAT(DoubleType.DOUBLE),\n+    GEOGRAPHY(VarcharType.VARCHAR),\n+    INTEGER(BigintType.BIGINT),\n+    NUMERIC(DecimalType.createDecimalType(BigQueryMetadata.NUMERIC_DATA_TYPE_PRECISION, BigQueryMetadata.NUMERIC_DATA_TYPE_SCALE)),\n+    RECORD(null),\n+    STRING(createUnboundedVarcharType()),\n+    TIME(TimeWithTimeZoneType.TIME_WITH_TIME_ZONE),\n+    TIMESTAMP(TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE);\n+\n+    private static final int[] NANO_FACTOR = {\n+            -1, // 0, no need to multiply\n+            100_000_000, // 1 digit after the dot\n+            10_000_000, // 2 digits after the dot\n+            1_000_000, // 3 digits after the dot\n+            100_000, // 4 digits after the dot\n+            10_000, // 5 digits after the dot\n+            1000, // 6 digits after the dot\n+            100, // 7 digits after the dot\n+            10, // 8 digits after the dot\n+            1, // 9 digits after the dot\n+    };\n+    private static final ImmutableMap<String, Month> MONTH = ImmutableMap.<String, Month>builder()\n+            .put(\"01\", JANUARY)\n+            .put(\"02\", FEBRUARY)\n+            .put(\"03\", MARCH)\n+            .put(\"04\", APRIL)\n+            .put(\"05\", MAY)\n+            .put(\"06\", JUNE)\n+            .put(\"07\", JULY)\n+            .put(\"08\", AUGUST)\n+            .put(\"09\", SEPTEMBER)\n+            .put(\"10\", OCTOBER)\n+            .put(\"11\", NOVEMBER)\n+            .put(\"12\", DECEMBER)\n+            .build();\n+    private final Type nativeType;\n+\n+    BigQueryType(Type nativeType)\n+    {\n+        this.nativeType = nativeType;\n+    }\n+\n+    static RowType.Field toRawTypeField(Map.Entry<String, BigQueryType.Adaptor> entry)\n+    {\n+        return toRawTypeField(entry.getKey(), entry.getValue());\n+    }\n+\n+    static RowType.Field toRawTypeField(String name, BigQueryType.Adaptor typeAdaptor)\n+    {\n+        Type prestoType = typeAdaptor.getPrestoType();\n+        return RowType.field(name, prestoType);\n+    }\n+\n+    static LocalDateTime toLocalDateTime(String datetime)", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1ODY2Nw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584358667", "bodyText": "This implementation actually fetches all result once in List<> and then return Iterator form that List. We'd better implement the logic using https://guava.dev/releases/19.0/api/docs/com/google/common/collect/AbstractIterator.html. to ensure results return in real iterator.", "author": "qqibrow", "createdAt": "2021-02-28T20:52:21Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/ReadRowsHelper.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.google.cloud.bigquery.storage.v1beta1.BigQueryStorageClient;\n+import com.google.cloud.bigquery.storage.v1beta1.Storage.ReadRowsRequest;\n+import com.google.cloud.bigquery.storage.v1beta1.Storage.ReadRowsResponse;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class ReadRowsHelper\n+{\n+    private BigQueryStorageClient client;\n+    private ReadRowsRequest.Builder request;\n+    private int maxReadRowsRetries;\n+\n+    public ReadRowsHelper(BigQueryStorageClient client, ReadRowsRequest.Builder request, int maxReadRowsRetries)\n+    {\n+        this.client = requireNonNull(client, \"client cannot be null\");\n+        this.request = requireNonNull(request, \"client cannot be null\");\n+        this.maxReadRowsRetries = maxReadRowsRetries;\n+    }\n+\n+    public Iterator<ReadRowsResponse> readRows()", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzAwNjI4Mw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r587006283", "bodyText": "this will be revised in the future PR in which TimestampType.TIMESTAMP with TIMESTAMP_MILLIS will be supported", "author": "fgwang7w", "createdAt": "2021-03-04T02:42:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1ODY2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1ODA0MQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594058041", "bodyText": "this will adds memory footprint. please add todo in the code", "author": "zhenxiao", "createdAt": "2021-03-15T05:27:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1ODY2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDE1MjUzNA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594152534", "bodyText": "can you be more specific? not sure what is the todo here @zhenxiao", "author": "fgwang7w", "createdAt": "2021-03-15T08:58:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1ODY2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTY2NzY0Ng==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r595667646", "bodyText": "todo should be:\n// TODO: iterator based implementation, instead of fetching all result at once", "author": "zhenxiao", "createdAt": "2021-03-17T02:26:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1ODY2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1ODkxNQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584358915", "bodyText": "Why filters is not used?", "author": "qqibrow", "createdAt": "2021-02-28T20:54:54Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/ReadSessionCreator.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.cloud.BaseServiceException;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.cloud.bigquery.storage.v1beta1.BigQueryStorageClient;\n+import com.google.cloud.bigquery.storage.v1beta1.ReadOptions;\n+import com.google.cloud.bigquery.storage.v1beta1.Storage;\n+import com.google.cloud.bigquery.storage.v1beta1.TableReferenceProto;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static java.lang.String.format;\n+\n+// A helper class, also handles view materialization\n+public class ReadSessionCreator\n+{\n+    private static final Logger log = Logger.get(ReadSessionCreator.class);\n+\n+    private static Cache<String, TableInfo> destinationTableCache =\n+            CacheBuilder.newBuilder()\n+                    .expireAfterWrite(15, TimeUnit.MINUTES)\n+                    .maximumSize(1000)\n+                    .build();\n+\n+    private final ReadSessionCreatorConfig config;\n+    private final BigQueryClient bigQueryClient;\n+    private final BigQueryStorageClientFactory bigQueryStorageClientFactory;\n+\n+    public ReadSessionCreator(\n+            ReadSessionCreatorConfig config,\n+            BigQueryClient bigQueryClient,\n+            BigQueryStorageClientFactory bigQueryStorageClientFactory)\n+    {\n+        this.config = config;\n+        this.bigQueryClient = bigQueryClient;\n+        this.bigQueryStorageClientFactory = bigQueryStorageClientFactory;\n+    }\n+\n+    public Storage.ReadSession create(TableId table, ImmutableList<String> selectedFields, Optional<String> filter, int parallelism)\n+    {\n+        TableInfo tableDetails = bigQueryClient.getTable(table);\n+\n+        TableInfo actualTable = getActualTable(tableDetails, selectedFields, new String[] {});\n+\n+        try (BigQueryStorageClient bigQueryStorageClient = bigQueryStorageClientFactory.createBigQueryStorageClient()) {\n+            ReadOptions.TableReadOptions.Builder readOptions = ReadOptions.TableReadOptions.newBuilder()\n+                    .addAllSelectedFields(selectedFields);\n+            filter.ifPresent(readOptions::setRowRestriction);\n+\n+            TableReferenceProto.TableReference tableReference = toTableReference(actualTable.getTableId());\n+\n+            Storage.ReadSession readSession = bigQueryStorageClient.createReadSession(\n+                    Storage.CreateReadSessionRequest.newBuilder()\n+                            .setParent(\"projects/\" + bigQueryClient.getProjectId())\n+                            .setFormat(Storage.DataFormat.AVRO)\n+                            .setRequestedStreams(parallelism)\n+                            .setReadOptions(readOptions)\n+                            .setTableReference(tableReference)\n+                            // The BALANCED sharding strategy causes the server to\n+                            // assign roughly the same number of rows to each stream.\n+                            .setShardingStrategy(Storage.ShardingStrategy.BALANCED)\n+                            .build());\n+\n+            return readSession;\n+        }\n+    }\n+\n+    TableReferenceProto.TableReference toTableReference(TableId tableId)\n+    {\n+        return TableReferenceProto.TableReference.newBuilder()\n+                .setProjectId(tableId.getProject())\n+                .setDatasetId(tableId.getDataset())\n+                .setTableId(tableId.getTable())\n+                .build();\n+    }\n+\n+    TableInfo getActualTable(", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzAwNzQyNA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r587007424", "bodyText": "filter pushdown is not supported. Bigquery Storage API supports column filterin to reduce the read of data though", "author": "fgwang7w", "createdAt": "2021-03-04T02:44:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1ODkxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM2Mzk5Mw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r584363993", "bodyText": "Are we ok to add this in code?", "author": "qqibrow", "createdAt": "2021-02-28T21:31:15Z", "path": "presto-bigquery/src/test/resources/test-account.json", "diffHunk": "@@ -0,0 +1,12 @@\n+{\n+  \"type\": \"service_account\",\n+  \"project_id\": \"presto-bq-credentials-test\",\n+  \"private_key_id\": \"ffffffffffffffffffffffffffffffffffffffff\",\n+  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIBVgIBADANBgkqhkiG9w0BAQEFAASCAUAwggE8AgEAAkEAq7BFUpkGp3+LQmlQ\\nYx2eqzDV+xeG8kx/sQFV18S5JhzGeIJNA72wSeukEPojtqUyX2J0CciPBh7eqclQ\\n2zpAswIDAQABAkAgisq4+zRdrzkwH1ITV1vpytnkO/NiHcnePQiOW0VUybPyHoGM\\n/jf75C5xET7ZQpBe5kx5VHsPZj0CBb3b+wSRAiEA2mPWCBytosIU/ODRfq6EiV04\\nlt6waE7I2uSPqIC20LcCIQDJQYIHQII+3YaPqyhGgqMexuuuGx+lDKD6/Fu/JwPb\\n5QIhAKthiYcYKlL9h8bjDsQhZDUACPasjzdsDEdq8inDyLOFAiEAmCr/tZwA3qeA\\nZoBzI10DGPIuoKXBd3nk/eBxPkaxlEECIQCNymjsoI7GldtujVnr1qT+3yedLfHK\\nsrDVjIT3LsvTqw==\\n-----END PRIVATE KEY-----\\n\",", "originalCommit": "5444794efa9a7e1c67788e53097cee9cfd704f6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzAwNzcxNQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r587007715", "bodyText": "this mock crednetial is for testing purpose", "author": "fgwang7w", "createdAt": "2021-03-04T02:44:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM2Mzk5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTY2ODc3NA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r595668774", "bodyText": "same concern, let's use obvious fake keys and ids in testing", "author": "zhenxiao", "createdAt": "2021-03-17T02:30:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM2Mzk5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Nzk1MzE5OA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r597953198", "bodyText": "it is a fake keys that looks like a real one that's being used for testing purpose", "author": "fgwang7w", "createdAt": "2021-03-19T20:21:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM2Mzk5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODA0MDU4NQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r598040585", "bodyText": "let's use a key not looks like a real one. same for key_id, client_id", "author": "zhenxiao", "createdAt": "2021-03-20T01:10:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM2Mzk5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODA1MTg1MA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r598051850", "bodyText": "actually we cannot mock a fake one because the use of google oauth2 for authentication processing on encoding for private key which would result in a failure to validate PKCS8EncodedKey\njava.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: IOException : DerInputStream.getLength(): lengthTag=41, too big.\nThis key is a mock private key which has to be legit for google oauth 2.0 authentication", "author": "fgwang7w", "createdAt": "2021-03-20T02:55:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM2Mzk5Mw=="}], "type": "inlineReview"}, {"oid": "f570e42f2827e772ad4a4544eed5e4ade3b4fac8", "url": "https://github.com/prestodb/presto/commit/f570e42f2827e772ad4a4544eed5e4ade3b4fac8", "message": "revise BigQuery code per review comments", "committedDate": "2021-03-04T02:57:26Z", "type": "forcePushed"}, {"oid": "5a4c9a9cfa42e843c3fe1a8596f11c5c5ead1560", "url": "https://github.com/prestodb/presto/commit/5a4c9a9cfa42e843c3fe1a8596f11c5c5ead1560", "message": "revise BigQuery code per review comments", "committedDate": "2021-03-06T19:19:04Z", "type": "forcePushed"}, {"oid": "f46c798a7ef9266f454a8a86dc5a9a6fe9e9833f", "url": "https://github.com/prestodb/presto/commit/f46c798a7ef9266f454a8a86dc5a9a6fe9e9833f", "message": "revise BigQuery code per review comments", "committedDate": "2021-03-13T09:13:36Z", "type": "forcePushed"}, {"oid": "73531d611e2781f3537c07e41fc4bb849c35a7bd", "url": "https://github.com/prestodb/presto/commit/73531d611e2781f3537c07e41fc4bb849c35a7bd", "message": "revise BigQuery code per review comments", "committedDate": "2021-03-15T00:10:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1MDg0Ng==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594050846", "bodyText": "define pbc as string constant, what does it mean?", "author": "zhenxiao", "createdAt": "2021-03-15T04:59:37Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryClient.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.Dataset;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterators;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.stream.StreamSupport;\n+\n+import static com.facebook.presto.plugin.bigquery.BigQueryErrorCode.BIGQUERY_QUERY_FAILED_UNKNOWN;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.UUID.randomUUID;\n+import static java.util.stream.Collectors.joining;\n+\n+public class BigQueryClient\n+{\n+    private final BigQuery bigQuery;\n+    private final Optional<String> viewMaterializationProject;\n+    private final Optional<String> viewMaterializationDataset;\n+\n+    // holds caches and mappings\n+    // presto converts the dataset and table names to lower case, while BigQuery is case sensitive\n+    // the mappings here keep the mappings\n+    private final ConcurrentMap<TableId, TableId> tableIds = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<DatasetId, DatasetId> datasetIds = new ConcurrentHashMap<>();\n+\n+    BigQueryClient(BigQuery bigQuery, BigQueryConfig config)\n+    {\n+        this.bigQuery = requireNonNull(bigQuery, \"bigQuery is null\");\n+        this.viewMaterializationProject = requireNonNull(config.getViewMaterializationProject(), \"viewMaterializationProject is null\");\n+        this.viewMaterializationDataset = requireNonNull(config.getViewMaterializationDataset(), \"viewMaterializationDataset is null\");\n+    }\n+\n+    public TableInfo getTable(TableId tableId)\n+    {\n+        TableId bigQueryTableId = tableIds.get(tableId);\n+        Table table = bigQuery.getTable(bigQueryTableId != null ? bigQueryTableId : tableId);\n+        if (table != null) {\n+            tableIds.putIfAbsent(tableId, table.getTableId());\n+            datasetIds.putIfAbsent(toDatasetId(tableId), toDatasetId(table.getTableId()));\n+        }\n+        return table;\n+    }\n+\n+    private DatasetId toDatasetId(TableId tableId)\n+    {\n+        return DatasetId.of(tableId.getProject(), tableId.getDataset());\n+    }\n+\n+    protected String getProjectId()\n+    {\n+        return bigQuery.getOptions().getProjectId();\n+    }\n+\n+    protected Iterable<Dataset> listDatasets(String projectId)\n+    {\n+        final Iterator<Dataset> datasets = bigQuery.listDatasets(projectId).iterateAll().iterator();\n+        return () -> Iterators.transform(datasets, this::addDataSetMappingIfNeeded);\n+    }\n+\n+    protected Iterable<Table> listTables(DatasetId datasetId, TableDefinition.Type... types)\n+    {\n+        Set<TableDefinition.Type> allowedTypes = ImmutableSet.copyOf(types);\n+        DatasetId bigQueryDatasetId = datasetIds.getOrDefault(datasetId, datasetId);\n+        Iterable<Table> allTables = bigQuery.listTables(bigQueryDatasetId).iterateAll();\n+        allTables.forEach(table -> addTableMappingIfNeeded(bigQueryDatasetId, table));\n+        return StreamSupport.stream(allTables.spliterator(), false)\n+                .filter(table -> allowedTypes.contains(table.getDefinition().getType()))\n+                .collect(toImmutableList());\n+    }\n+\n+    private void addTableMappingIfNeeded(DatasetId datasetID, Table table)\n+    {\n+        TableId bigQueryTableId = table.getTableId();\n+        TableId prestoTableId = TableId.of(datasetID.getProject(), datasetID.getDataset(), createTableName());\n+        tableIds.putIfAbsent(bigQueryTableId, prestoTableId);\n+    }\n+    private Dataset addDataSetMappingIfNeeded(Dataset dataset)\n+    {\n+        DatasetId bigQueryDatasetId = dataset.getDatasetId();\n+        DatasetId prestoDatasetId = DatasetId.of(bigQueryDatasetId.getProject(), bigQueryDatasetId.getDataset().toLowerCase(ENGLISH));\n+        datasetIds.putIfAbsent(prestoDatasetId, bigQueryDatasetId);\n+        return dataset;\n+    }\n+\n+    protected TableId createDestinationTable(TableId tableId)\n+    {\n+        String project = viewMaterializationProject.orElse(tableId.getProject());\n+        String dataset = viewMaterializationDataset.orElse(tableId.getDataset());\n+        DatasetId datasetId = mapIfNeeded(project, dataset);\n+        return TableId.of(datasetId.getProject(), datasetId.getDataset(), createTableName());\n+    }\n+\n+    private String createTableName()\n+    {\n+        return format(\"_pbc_%s\", randomUUID().toString().toLowerCase(ENGLISH).replace(\"-\", \"\"));", "originalCommit": "73531d611e2781f3537c07e41fc4bb849c35a7bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDEyNDcwNA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594124704", "bodyText": "this is bigquery interally defined as part of tableID", "author": "fgwang7w", "createdAt": "2021-03-15T08:14:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1MDg0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1MDk1OQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594050959", "bodyText": "I think we only need line 54 comment, line 53 and line 55 are not needed", "author": "zhenxiao", "createdAt": "2021-03-15T05:00:06Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryClient.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.Dataset;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterators;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.stream.StreamSupport;\n+\n+import static com.facebook.presto.plugin.bigquery.BigQueryErrorCode.BIGQUERY_QUERY_FAILED_UNKNOWN;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.UUID.randomUUID;\n+import static java.util.stream.Collectors.joining;\n+\n+public class BigQueryClient\n+{\n+    private final BigQuery bigQuery;\n+    private final Optional<String> viewMaterializationProject;\n+    private final Optional<String> viewMaterializationDataset;\n+\n+    // holds caches and mappings\n+    // presto converts the dataset and table names to lower case, while BigQuery is case sensitive", "originalCommit": "73531d611e2781f3537c07e41fc4bb849c35a7bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1MTE5MA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594051190", "bodyText": "rename createSql to createFormatSql, to get rid of the comment", "author": "zhenxiao", "createdAt": "2021-03-15T05:01:02Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryClient.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.Dataset;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterators;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.stream.StreamSupport;\n+\n+import static com.facebook.presto.plugin.bigquery.BigQueryErrorCode.BIGQUERY_QUERY_FAILED_UNKNOWN;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.UUID.randomUUID;\n+import static java.util.stream.Collectors.joining;\n+\n+public class BigQueryClient\n+{\n+    private final BigQuery bigQuery;\n+    private final Optional<String> viewMaterializationProject;\n+    private final Optional<String> viewMaterializationDataset;\n+\n+    // holds caches and mappings\n+    // presto converts the dataset and table names to lower case, while BigQuery is case sensitive\n+    // the mappings here keep the mappings\n+    private final ConcurrentMap<TableId, TableId> tableIds = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<DatasetId, DatasetId> datasetIds = new ConcurrentHashMap<>();\n+\n+    BigQueryClient(BigQuery bigQuery, BigQueryConfig config)\n+    {\n+        this.bigQuery = requireNonNull(bigQuery, \"bigQuery is null\");\n+        this.viewMaterializationProject = requireNonNull(config.getViewMaterializationProject(), \"viewMaterializationProject is null\");\n+        this.viewMaterializationDataset = requireNonNull(config.getViewMaterializationDataset(), \"viewMaterializationDataset is null\");\n+    }\n+\n+    public TableInfo getTable(TableId tableId)\n+    {\n+        TableId bigQueryTableId = tableIds.get(tableId);\n+        Table table = bigQuery.getTable(bigQueryTableId != null ? bigQueryTableId : tableId);\n+        if (table != null) {\n+            tableIds.putIfAbsent(tableId, table.getTableId());\n+            datasetIds.putIfAbsent(toDatasetId(tableId), toDatasetId(table.getTableId()));\n+        }\n+        return table;\n+    }\n+\n+    private DatasetId toDatasetId(TableId tableId)\n+    {\n+        return DatasetId.of(tableId.getProject(), tableId.getDataset());\n+    }\n+\n+    protected String getProjectId()\n+    {\n+        return bigQuery.getOptions().getProjectId();\n+    }\n+\n+    protected Iterable<Dataset> listDatasets(String projectId)\n+    {\n+        final Iterator<Dataset> datasets = bigQuery.listDatasets(projectId).iterateAll().iterator();\n+        return () -> Iterators.transform(datasets, this::addDataSetMappingIfNeeded);\n+    }\n+\n+    protected Iterable<Table> listTables(DatasetId datasetId, TableDefinition.Type... types)\n+    {\n+        Set<TableDefinition.Type> allowedTypes = ImmutableSet.copyOf(types);\n+        DatasetId bigQueryDatasetId = datasetIds.getOrDefault(datasetId, datasetId);\n+        Iterable<Table> allTables = bigQuery.listTables(bigQueryDatasetId).iterateAll();\n+        allTables.forEach(table -> addTableMappingIfNeeded(bigQueryDatasetId, table));\n+        return StreamSupport.stream(allTables.spliterator(), false)\n+                .filter(table -> allowedTypes.contains(table.getDefinition().getType()))\n+                .collect(toImmutableList());\n+    }\n+\n+    private void addTableMappingIfNeeded(DatasetId datasetID, Table table)\n+    {\n+        TableId bigQueryTableId = table.getTableId();\n+        TableId prestoTableId = TableId.of(datasetID.getProject(), datasetID.getDataset(), createTableName());\n+        tableIds.putIfAbsent(bigQueryTableId, prestoTableId);\n+    }\n+    private Dataset addDataSetMappingIfNeeded(Dataset dataset)\n+    {\n+        DatasetId bigQueryDatasetId = dataset.getDatasetId();\n+        DatasetId prestoDatasetId = DatasetId.of(bigQueryDatasetId.getProject(), bigQueryDatasetId.getDataset().toLowerCase(ENGLISH));\n+        datasetIds.putIfAbsent(prestoDatasetId, bigQueryDatasetId);\n+        return dataset;\n+    }\n+\n+    protected TableId createDestinationTable(TableId tableId)\n+    {\n+        String project = viewMaterializationProject.orElse(tableId.getProject());\n+        String dataset = viewMaterializationDataset.orElse(tableId.getDataset());\n+        DatasetId datasetId = mapIfNeeded(project, dataset);\n+        return TableId.of(datasetId.getProject(), datasetId.getDataset(), createTableName());\n+    }\n+\n+    private String createTableName()\n+    {\n+        return format(\"_pbc_%s\", randomUUID().toString().toLowerCase(ENGLISH).replace(\"-\", \"\"));\n+    }\n+\n+    private DatasetId mapIfNeeded(String project, String dataset)\n+    {\n+        DatasetId datasetId = DatasetId.of(project, dataset);\n+        return datasetIds.getOrDefault(datasetId, datasetId);\n+    }\n+\n+    protected Table update(TableInfo table)\n+    {\n+        return bigQuery.update(table);\n+    }\n+\n+    protected Job create(JobInfo jobInfo)\n+    {\n+        return bigQuery.create(jobInfo);\n+    }\n+\n+    protected TableResult query(String sql)\n+    {\n+        try {\n+            return bigQuery.query(QueryJobConfiguration.of(sql));\n+        }\n+        catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            throw new BigQueryException(BIGQUERY_QUERY_FAILED_UNKNOWN.toErrorCode().getCode(), format(\"Failed to run the query [%s]\", sql), e);\n+        }\n+    }\n+\n+    protected String createSql(TableId table, List<String> requiredColumns)\n+    {\n+        String columns = requiredColumns.isEmpty() ? \"*\" :\n+                requiredColumns.stream().map(column -> format(\"`%s`\", column)).collect(joining(\",\"));\n+\n+        return createSql(table, columns, new String[] {});\n+    }\n+\n+    // properly formatting SELECT statement\n+    protected String createSql(TableId table, String requiredColumns, String[] filters)", "originalCommit": "73531d611e2781f3537c07e41fc4bb849c35a7bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1MTQ0Nw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594051447", "bodyText": "static import Field.Mode", "author": "zhenxiao", "createdAt": "2021-03-15T05:02:18Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryColumnHandle.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ColumnMetadata;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.cloud.bigquery.Field;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class BigQueryColumnHandle\n+        implements ColumnHandle, BigQueryType.Adaptor\n+{\n+    private final String name;\n+    private final BigQueryType bigQueryType;\n+    private final Field.Mode mode;", "originalCommit": "73531d611e2781f3537c07e41fc4bb849c35a7bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDEyOTExOA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594129118", "bodyText": "ok", "author": "fgwang7w", "createdAt": "2021-03-15T08:22:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1MTQ0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1MTU1OA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594051558", "bodyText": "static import Adaptor", "author": "zhenxiao", "createdAt": "2021-03-15T05:02:51Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryColumnHandle.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ColumnMetadata;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.cloud.bigquery.Field;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class BigQueryColumnHandle\n+        implements ColumnHandle, BigQueryType.Adaptor\n+{\n+    private final String name;\n+    private final BigQueryType bigQueryType;\n+    private final Field.Mode mode;\n+    private final List<BigQueryColumnHandle> subColumns;\n+    private final String description;\n+\n+    @JsonCreator\n+    public BigQueryColumnHandle(\n+            @JsonProperty(\"name\") String name,\n+            @JsonProperty(\"bigQueryType\") BigQueryType bigQueryType,\n+            @JsonProperty(\"mode\") Field.Mode mode,\n+            @JsonProperty(\"subColumns\") List<BigQueryColumnHandle> subColumns,\n+            @JsonProperty(\"description\") String description)\n+    {\n+        this.name = requireNonNull(name, \"column name cannot be null\");\n+        this.bigQueryType = requireNonNull(bigQueryType, () -> format(\"column type cannot be null for column [%s]\", name));\n+        this.mode = requireNonNull(mode, \"Field mode cannot be null\");\n+        this.subColumns = ImmutableList.copyOf(requireNonNull(subColumns, \"subColumns is null\"));\n+        this.description = description;\n+    }\n+\n+    @JsonProperty\n+    public String getName()\n+    {\n+        return name;\n+    }\n+\n+    @Override\n+    @JsonProperty\n+    public BigQueryType getBigQueryType()\n+    {\n+        return bigQueryType;\n+    }\n+\n+    @Override\n+    public Map<String, BigQueryType.Adaptor> getBigQuerySubTypes()", "originalCommit": "73531d611e2781f3537c07e41fc4bb849c35a7bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1MTYwOQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594051609", "bodyText": "static import NULLABLE", "author": "zhenxiao", "createdAt": "2021-03-15T05:03:06Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryColumnHandle.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ColumnMetadata;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.cloud.bigquery.Field;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class BigQueryColumnHandle\n+        implements ColumnHandle, BigQueryType.Adaptor\n+{\n+    private final String name;\n+    private final BigQueryType bigQueryType;\n+    private final Field.Mode mode;\n+    private final List<BigQueryColumnHandle> subColumns;\n+    private final String description;\n+\n+    @JsonCreator\n+    public BigQueryColumnHandle(\n+            @JsonProperty(\"name\") String name,\n+            @JsonProperty(\"bigQueryType\") BigQueryType bigQueryType,\n+            @JsonProperty(\"mode\") Field.Mode mode,\n+            @JsonProperty(\"subColumns\") List<BigQueryColumnHandle> subColumns,\n+            @JsonProperty(\"description\") String description)\n+    {\n+        this.name = requireNonNull(name, \"column name cannot be null\");\n+        this.bigQueryType = requireNonNull(bigQueryType, () -> format(\"column type cannot be null for column [%s]\", name));\n+        this.mode = requireNonNull(mode, \"Field mode cannot be null\");\n+        this.subColumns = ImmutableList.copyOf(requireNonNull(subColumns, \"subColumns is null\"));\n+        this.description = description;\n+    }\n+\n+    @JsonProperty\n+    public String getName()\n+    {\n+        return name;\n+    }\n+\n+    @Override\n+    @JsonProperty\n+    public BigQueryType getBigQueryType()\n+    {\n+        return bigQueryType;\n+    }\n+\n+    @Override\n+    public Map<String, BigQueryType.Adaptor> getBigQuerySubTypes()\n+    {\n+        return subColumns.stream().collect(toImmutableMap(BigQueryColumnHandle::getName, column -> column));\n+    }\n+\n+    @Override\n+    @JsonProperty\n+    public Field.Mode getMode()\n+    {\n+        return mode;\n+    }\n+\n+    @JsonProperty\n+    public List<BigQueryColumnHandle> getSubColumns()\n+    {\n+        return subColumns;\n+    }\n+\n+    @JsonProperty\n+    public String description()\n+    {\n+        return description;\n+    }\n+\n+    public ColumnMetadata getColumnMetadata()\n+    {\n+        return new ColumnMetadata(\n+                name,\n+                getPrestoType(),\n+                mode == Field.Mode.NULLABLE,", "originalCommit": "73531d611e2781f3537c07e41fc4bb849c35a7bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1MTgxOA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594051818", "bodyText": "// at most one of them should present", "author": "zhenxiao", "createdAt": "2021-03-15T05:03:58Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryConfig.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.airlift.configuration.ConfigDescription;\n+import com.google.auth.oauth2.GoogleCredentials;\n+\n+import javax.validation.constraints.AssertTrue;\n+import javax.validation.constraints.Min;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+public class BigQueryConfig\n+{\n+    public static final int DEFAULT_MAX_READ_ROWS_RETRIES = 3;\n+\n+    private Optional<String> credentialsKey = Optional.empty();\n+    private Optional<String> credentialsFile = Optional.empty();\n+    private Optional<String> projectId = Optional.empty();\n+    private Optional<String> parentProjectId = Optional.empty();\n+    private OptionalInt parallelism = OptionalInt.empty();\n+    private boolean viewsEnabled;\n+    private Optional<String> viewMaterializationProject = Optional.empty();\n+    private Optional<String> viewMaterializationDataset = Optional.empty();\n+    private int maxReadRowsRetries = DEFAULT_MAX_READ_ROWS_RETRIES;\n+\n+    @AssertTrue(message = \"Exactly one of 'bigquery.credentials-key' or 'bigquery.credentials-file' must be specified, or the default GoogleCredentials could be created\")\n+    public boolean isCredentialsConfigurationValid()\n+    {\n+        // only one of them (at most) should be present", "originalCommit": "73531d611e2781f3537c07e41fc4bb849c35a7bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDEzMTUzMw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594131533", "bodyText": "ok", "author": "fgwang7w", "createdAt": "2021-03-15T08:26:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1MTgxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1MTkxNA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594051914", "bodyText": "// if no credentials, try create default ones", "author": "zhenxiao", "createdAt": "2021-03-15T05:04:27Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryConfig.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.airlift.configuration.ConfigDescription;\n+import com.google.auth.oauth2.GoogleCredentials;\n+\n+import javax.validation.constraints.AssertTrue;\n+import javax.validation.constraints.Min;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+public class BigQueryConfig\n+{\n+    public static final int DEFAULT_MAX_READ_ROWS_RETRIES = 3;\n+\n+    private Optional<String> credentialsKey = Optional.empty();\n+    private Optional<String> credentialsFile = Optional.empty();\n+    private Optional<String> projectId = Optional.empty();\n+    private Optional<String> parentProjectId = Optional.empty();\n+    private OptionalInt parallelism = OptionalInt.empty();\n+    private boolean viewsEnabled;\n+    private Optional<String> viewMaterializationProject = Optional.empty();\n+    private Optional<String> viewMaterializationDataset = Optional.empty();\n+    private int maxReadRowsRetries = DEFAULT_MAX_READ_ROWS_RETRIES;\n+\n+    @AssertTrue(message = \"Exactly one of 'bigquery.credentials-key' or 'bigquery.credentials-file' must be specified, or the default GoogleCredentials could be created\")\n+    public boolean isCredentialsConfigurationValid()\n+    {\n+        // only one of them (at most) should be present\n+        if (credentialsKey.isPresent() && credentialsFile.isPresent()) {\n+            return false;\n+        }\n+        // if no credentials were supplied, let's check if we can create the default ones", "originalCommit": "73531d611e2781f3537c07e41fc4bb849c35a7bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1MjMxNw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594052317", "bodyText": "either one of .... or?", "author": "zhenxiao", "createdAt": "2021-03-15T05:05:50Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryConfig.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.airlift.configuration.ConfigDescription;\n+import com.google.auth.oauth2.GoogleCredentials;\n+\n+import javax.validation.constraints.AssertTrue;\n+import javax.validation.constraints.Min;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+public class BigQueryConfig\n+{\n+    public static final int DEFAULT_MAX_READ_ROWS_RETRIES = 3;\n+\n+    private Optional<String> credentialsKey = Optional.empty();\n+    private Optional<String> credentialsFile = Optional.empty();\n+    private Optional<String> projectId = Optional.empty();\n+    private Optional<String> parentProjectId = Optional.empty();\n+    private OptionalInt parallelism = OptionalInt.empty();\n+    private boolean viewsEnabled;\n+    private Optional<String> viewMaterializationProject = Optional.empty();\n+    private Optional<String> viewMaterializationDataset = Optional.empty();\n+    private int maxReadRowsRetries = DEFAULT_MAX_READ_ROWS_RETRIES;\n+\n+    @AssertTrue(message = \"Exactly one of 'bigquery.credentials-key' or 'bigquery.credentials-file' must be specified, or the default GoogleCredentials could be created\")", "originalCommit": "73531d611e2781f3537c07e41fc4bb849c35a7bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDEzMzA5Mg==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594133092", "bodyText": "right, i think \"either one\" makes more sense here", "author": "fgwang7w", "createdAt": "2021-03-15T08:28:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1MjMxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1MjQ0NA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594052444", "bodyText": "JSON credentials file path", "author": "zhenxiao", "createdAt": "2021-03-15T05:06:16Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryConfig.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.airlift.configuration.ConfigDescription;\n+import com.google.auth.oauth2.GoogleCredentials;\n+\n+import javax.validation.constraints.AssertTrue;\n+import javax.validation.constraints.Min;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+public class BigQueryConfig\n+{\n+    public static final int DEFAULT_MAX_READ_ROWS_RETRIES = 3;\n+\n+    private Optional<String> credentialsKey = Optional.empty();\n+    private Optional<String> credentialsFile = Optional.empty();\n+    private Optional<String> projectId = Optional.empty();\n+    private Optional<String> parentProjectId = Optional.empty();\n+    private OptionalInt parallelism = OptionalInt.empty();\n+    private boolean viewsEnabled;\n+    private Optional<String> viewMaterializationProject = Optional.empty();\n+    private Optional<String> viewMaterializationDataset = Optional.empty();\n+    private int maxReadRowsRetries = DEFAULT_MAX_READ_ROWS_RETRIES;\n+\n+    @AssertTrue(message = \"Exactly one of 'bigquery.credentials-key' or 'bigquery.credentials-file' must be specified, or the default GoogleCredentials could be created\")\n+    public boolean isCredentialsConfigurationValid()\n+    {\n+        // only one of them (at most) should be present\n+        if (credentialsKey.isPresent() && credentialsFile.isPresent()) {\n+            return false;\n+        }\n+        // if no credentials were supplied, let's check if we can create the default ones\n+        if (!credentialsKey.isPresent() && !credentialsFile.isPresent()) {\n+            try {\n+                GoogleCredentials.getApplicationDefault();\n+            }\n+            catch (IOException e) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public Optional<String> getCredentialsKey()\n+    {\n+        return credentialsKey;\n+    }\n+\n+    @Config(\"bigquery.credentials-key\")\n+    @ConfigDescription(\"The base64 encoded credentials key\")\n+    public BigQueryConfig setCredentialsKey(String credentialsKey)\n+    {\n+        this.credentialsKey = Optional.of(credentialsKey);\n+        return this;\n+    }\n+\n+    public Optional<String> getCredentialsFile()\n+    {\n+        return credentialsFile;\n+    }\n+\n+    @Config(\"bigquery.credentials-file\")\n+    @ConfigDescription(\"The path to the JSON credentials file\")", "originalCommit": "73531d611e2781f3537c07e41fc4bb849c35a7bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1MjUxMQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594052511", "bodyText": "credentials key (base64 encoded)", "author": "zhenxiao", "createdAt": "2021-03-15T05:06:37Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryConfig.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.airlift.configuration.ConfigDescription;\n+import com.google.auth.oauth2.GoogleCredentials;\n+\n+import javax.validation.constraints.AssertTrue;\n+import javax.validation.constraints.Min;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+public class BigQueryConfig\n+{\n+    public static final int DEFAULT_MAX_READ_ROWS_RETRIES = 3;\n+\n+    private Optional<String> credentialsKey = Optional.empty();\n+    private Optional<String> credentialsFile = Optional.empty();\n+    private Optional<String> projectId = Optional.empty();\n+    private Optional<String> parentProjectId = Optional.empty();\n+    private OptionalInt parallelism = OptionalInt.empty();\n+    private boolean viewsEnabled;\n+    private Optional<String> viewMaterializationProject = Optional.empty();\n+    private Optional<String> viewMaterializationDataset = Optional.empty();\n+    private int maxReadRowsRetries = DEFAULT_MAX_READ_ROWS_RETRIES;\n+\n+    @AssertTrue(message = \"Exactly one of 'bigquery.credentials-key' or 'bigquery.credentials-file' must be specified, or the default GoogleCredentials could be created\")\n+    public boolean isCredentialsConfigurationValid()\n+    {\n+        // only one of them (at most) should be present\n+        if (credentialsKey.isPresent() && credentialsFile.isPresent()) {\n+            return false;\n+        }\n+        // if no credentials were supplied, let's check if we can create the default ones\n+        if (!credentialsKey.isPresent() && !credentialsFile.isPresent()) {\n+            try {\n+                GoogleCredentials.getApplicationDefault();\n+            }\n+            catch (IOException e) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public Optional<String> getCredentialsKey()\n+    {\n+        return credentialsKey;\n+    }\n+\n+    @Config(\"bigquery.credentials-key\")\n+    @ConfigDescription(\"The base64 encoded credentials key\")", "originalCommit": "73531d611e2781f3537c07e41fc4bb849c35a7bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1Mjc1Nw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594052757", "bodyText": "Google Cloud project ID", "author": "zhenxiao", "createdAt": "2021-03-15T05:07:22Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryConfig.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.airlift.configuration.ConfigDescription;\n+import com.google.auth.oauth2.GoogleCredentials;\n+\n+import javax.validation.constraints.AssertTrue;\n+import javax.validation.constraints.Min;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+public class BigQueryConfig\n+{\n+    public static final int DEFAULT_MAX_READ_ROWS_RETRIES = 3;\n+\n+    private Optional<String> credentialsKey = Optional.empty();\n+    private Optional<String> credentialsFile = Optional.empty();\n+    private Optional<String> projectId = Optional.empty();\n+    private Optional<String> parentProjectId = Optional.empty();\n+    private OptionalInt parallelism = OptionalInt.empty();\n+    private boolean viewsEnabled;\n+    private Optional<String> viewMaterializationProject = Optional.empty();\n+    private Optional<String> viewMaterializationDataset = Optional.empty();\n+    private int maxReadRowsRetries = DEFAULT_MAX_READ_ROWS_RETRIES;\n+\n+    @AssertTrue(message = \"Exactly one of 'bigquery.credentials-key' or 'bigquery.credentials-file' must be specified, or the default GoogleCredentials could be created\")\n+    public boolean isCredentialsConfigurationValid()\n+    {\n+        // only one of them (at most) should be present\n+        if (credentialsKey.isPresent() && credentialsFile.isPresent()) {\n+            return false;\n+        }\n+        // if no credentials were supplied, let's check if we can create the default ones\n+        if (!credentialsKey.isPresent() && !credentialsFile.isPresent()) {\n+            try {\n+                GoogleCredentials.getApplicationDefault();\n+            }\n+            catch (IOException e) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public Optional<String> getCredentialsKey()\n+    {\n+        return credentialsKey;\n+    }\n+\n+    @Config(\"bigquery.credentials-key\")\n+    @ConfigDescription(\"The base64 encoded credentials key\")\n+    public BigQueryConfig setCredentialsKey(String credentialsKey)\n+    {\n+        this.credentialsKey = Optional.of(credentialsKey);\n+        return this;\n+    }\n+\n+    public Optional<String> getCredentialsFile()\n+    {\n+        return credentialsFile;\n+    }\n+\n+    @Config(\"bigquery.credentials-file\")\n+    @ConfigDescription(\"The path to the JSON credentials file\")\n+    public BigQueryConfig setCredentialsFile(String credentialsFile)\n+    {\n+        this.credentialsFile = Optional.of(credentialsFile);\n+        return this;\n+    }\n+\n+    public Optional<String> getProjectId()\n+    {\n+        return projectId;\n+    }\n+\n+    @Config(\"bigquery.project-id\")\n+    @ConfigDescription(\"The Google Cloud Project ID where the data resides\")", "originalCommit": "73531d611e2781f3537c07e41fc4bb849c35a7bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1Mjg5Mg==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594052892", "bodyText": "Google Cloud parent project ID", "author": "zhenxiao", "createdAt": "2021-03-15T05:07:40Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryConfig.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.airlift.configuration.ConfigDescription;\n+import com.google.auth.oauth2.GoogleCredentials;\n+\n+import javax.validation.constraints.AssertTrue;\n+import javax.validation.constraints.Min;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+public class BigQueryConfig\n+{\n+    public static final int DEFAULT_MAX_READ_ROWS_RETRIES = 3;\n+\n+    private Optional<String> credentialsKey = Optional.empty();\n+    private Optional<String> credentialsFile = Optional.empty();\n+    private Optional<String> projectId = Optional.empty();\n+    private Optional<String> parentProjectId = Optional.empty();\n+    private OptionalInt parallelism = OptionalInt.empty();\n+    private boolean viewsEnabled;\n+    private Optional<String> viewMaterializationProject = Optional.empty();\n+    private Optional<String> viewMaterializationDataset = Optional.empty();\n+    private int maxReadRowsRetries = DEFAULT_MAX_READ_ROWS_RETRIES;\n+\n+    @AssertTrue(message = \"Exactly one of 'bigquery.credentials-key' or 'bigquery.credentials-file' must be specified, or the default GoogleCredentials could be created\")\n+    public boolean isCredentialsConfigurationValid()\n+    {\n+        // only one of them (at most) should be present\n+        if (credentialsKey.isPresent() && credentialsFile.isPresent()) {\n+            return false;\n+        }\n+        // if no credentials were supplied, let's check if we can create the default ones\n+        if (!credentialsKey.isPresent() && !credentialsFile.isPresent()) {\n+            try {\n+                GoogleCredentials.getApplicationDefault();\n+            }\n+            catch (IOException e) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public Optional<String> getCredentialsKey()\n+    {\n+        return credentialsKey;\n+    }\n+\n+    @Config(\"bigquery.credentials-key\")\n+    @ConfigDescription(\"The base64 encoded credentials key\")\n+    public BigQueryConfig setCredentialsKey(String credentialsKey)\n+    {\n+        this.credentialsKey = Optional.of(credentialsKey);\n+        return this;\n+    }\n+\n+    public Optional<String> getCredentialsFile()\n+    {\n+        return credentialsFile;\n+    }\n+\n+    @Config(\"bigquery.credentials-file\")\n+    @ConfigDescription(\"The path to the JSON credentials file\")\n+    public BigQueryConfig setCredentialsFile(String credentialsFile)\n+    {\n+        this.credentialsFile = Optional.of(credentialsFile);\n+        return this;\n+    }\n+\n+    public Optional<String> getProjectId()\n+    {\n+        return projectId;\n+    }\n+\n+    @Config(\"bigquery.project-id\")\n+    @ConfigDescription(\"The Google Cloud Project ID where the data resides\")\n+    public BigQueryConfig setProjectId(String projectId)\n+    {\n+        this.projectId = Optional.of(projectId);\n+        return this;\n+    }\n+\n+    public Optional<String> getParentProjectId()\n+    {\n+        return parentProjectId;\n+    }\n+\n+    @Config(\"bigquery.parent-project-id\")\n+    @ConfigDescription(\"The Google Cloud Parent Project ID\")", "originalCommit": "73531d611e2781f3537c07e41fc4bb849c35a7bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1MzQ2Mg==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594053462", "bodyText": "set credentials, or\nset credentials if provided", "author": "zhenxiao", "createdAt": "2021-03-15T05:09:41Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryConnectorModule.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.presto.spi.NodeManager;\n+import com.google.api.gax.rpc.FixedHeaderProvider;\n+import com.google.api.gax.rpc.HeaderProvider;\n+import com.google.auth.Credentials;\n+import com.google.auth.oauth2.ServiceAccountCredentials;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.Provides;\n+import com.google.inject.Scopes;\n+import com.google.inject.Singleton;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.airlift.configuration.ConfigBinder.configBinder;\n+\n+public class BigQueryConnectorModule\n+        implements Module\n+{\n+    private final NodeManager nodeManager;\n+\n+    public BigQueryConnectorModule(NodeManager nodeManager)\n+    {\n+        this.nodeManager = nodeManager;\n+    }\n+\n+    @Provides\n+    @Singleton\n+    public static HeaderProvider createHeaderProvider(NodeManager nodeManager)\n+    {\n+        return FixedHeaderProvider.create(\"user-agent\", \"prestodb/\" + nodeManager.getCurrentNode().getVersion());\n+    }\n+\n+    @Override\n+    public void configure(Binder binder)\n+    {\n+        binder.bind(BigQueryStorageClientFactory.class).in(Scopes.SINGLETON);\n+        binder.bind(BigQueryConnector.class).in(Scopes.SINGLETON);\n+        binder.bind(BigQueryMetadata.class).in(Scopes.SINGLETON);\n+        binder.bind(BigQuerySplitManager.class).in(Scopes.SINGLETON);\n+        binder.bind(BigQueryPageSourceProvider.class).in(Scopes.SINGLETON);\n+\n+        configBinder(binder).bindConfig(BigQueryConfig.class);\n+    }\n+\n+    @Provides\n+    @Singleton\n+    public BigQueryCredentialsSupplier provideBigQueryCredentialsSupplier(BigQueryConfig config)\n+    {\n+        return new BigQueryCredentialsSupplier(config.getCredentialsKey(), config.getCredentialsFile());\n+    }\n+\n+    @Provides\n+    @Singleton\n+    public BigQueryClient provideBigQueryClient(BigQueryConfig config, HeaderProvider headerProvider, BigQueryCredentialsSupplier bigQueryCredentialsSupplier)\n+    {\n+        String billingProjectId = calculateBillingProjectId(config.getParentProjectId(), bigQueryCredentialsSupplier.getCredentials());\n+        BigQueryOptions.Builder options = BigQueryOptions.newBuilder()\n+                .setHeaderProvider(headerProvider)\n+                .setProjectId(billingProjectId);\n+        // set credentials of provided", "originalCommit": "73531d611e2781f3537c07e41fc4bb849c35a7bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDEzNTUzMg==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594135532", "bodyText": "the latter one works better, thanks", "author": "fgwang7w", "createdAt": "2021-03-15T08:32:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1MzQ2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1MzYxOA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594053618", "bodyText": "this comment is not understandable. let's remove it", "author": "zhenxiao", "createdAt": "2021-03-15T05:10:15Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryConnectorModule.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.presto.spi.NodeManager;\n+import com.google.api.gax.rpc.FixedHeaderProvider;\n+import com.google.api.gax.rpc.HeaderProvider;\n+import com.google.auth.Credentials;\n+import com.google.auth.oauth2.ServiceAccountCredentials;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.Provides;\n+import com.google.inject.Scopes;\n+import com.google.inject.Singleton;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.airlift.configuration.ConfigBinder.configBinder;\n+\n+public class BigQueryConnectorModule\n+        implements Module\n+{\n+    private final NodeManager nodeManager;\n+\n+    public BigQueryConnectorModule(NodeManager nodeManager)\n+    {\n+        this.nodeManager = nodeManager;\n+    }\n+\n+    @Provides\n+    @Singleton\n+    public static HeaderProvider createHeaderProvider(NodeManager nodeManager)\n+    {\n+        return FixedHeaderProvider.create(\"user-agent\", \"prestodb/\" + nodeManager.getCurrentNode().getVersion());\n+    }\n+\n+    @Override\n+    public void configure(Binder binder)\n+    {\n+        binder.bind(BigQueryStorageClientFactory.class).in(Scopes.SINGLETON);\n+        binder.bind(BigQueryConnector.class).in(Scopes.SINGLETON);\n+        binder.bind(BigQueryMetadata.class).in(Scopes.SINGLETON);\n+        binder.bind(BigQuerySplitManager.class).in(Scopes.SINGLETON);\n+        binder.bind(BigQueryPageSourceProvider.class).in(Scopes.SINGLETON);\n+\n+        configBinder(binder).bindConfig(BigQueryConfig.class);\n+    }\n+\n+    @Provides\n+    @Singleton\n+    public BigQueryCredentialsSupplier provideBigQueryCredentialsSupplier(BigQueryConfig config)\n+    {\n+        return new BigQueryCredentialsSupplier(config.getCredentialsKey(), config.getCredentialsFile());\n+    }\n+\n+    @Provides\n+    @Singleton\n+    public BigQueryClient provideBigQueryClient(BigQueryConfig config, HeaderProvider headerProvider, BigQueryCredentialsSupplier bigQueryCredentialsSupplier)\n+    {\n+        String billingProjectId = calculateBillingProjectId(config.getParentProjectId(), bigQueryCredentialsSupplier.getCredentials());\n+        BigQueryOptions.Builder options = BigQueryOptions.newBuilder()\n+                .setHeaderProvider(headerProvider)\n+                .setProjectId(billingProjectId);\n+        // set credentials of provided\n+        bigQueryCredentialsSupplier.getCredentials().ifPresent(options::setCredentials);\n+        return new BigQueryClient(options.build().getService(), config);\n+    }\n+\n+    // Note that at this point the config has been validated, which means that option 2 or option 3 will always be valid", "originalCommit": "73531d611e2781f3537c07e41fc4bb849c35a7bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1Mzg4MQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594053881", "bodyText": "let's remove 1, 2, 3 from comments.", "author": "zhenxiao", "createdAt": "2021-03-15T05:11:19Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryConnectorModule.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.presto.spi.NodeManager;\n+import com.google.api.gax.rpc.FixedHeaderProvider;\n+import com.google.api.gax.rpc.HeaderProvider;\n+import com.google.auth.Credentials;\n+import com.google.auth.oauth2.ServiceAccountCredentials;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.Provides;\n+import com.google.inject.Scopes;\n+import com.google.inject.Singleton;\n+\n+import java.util.Optional;\n+\n+import static com.facebook.airlift.configuration.ConfigBinder.configBinder;\n+\n+public class BigQueryConnectorModule\n+        implements Module\n+{\n+    private final NodeManager nodeManager;\n+\n+    public BigQueryConnectorModule(NodeManager nodeManager)\n+    {\n+        this.nodeManager = nodeManager;\n+    }\n+\n+    @Provides\n+    @Singleton\n+    public static HeaderProvider createHeaderProvider(NodeManager nodeManager)\n+    {\n+        return FixedHeaderProvider.create(\"user-agent\", \"prestodb/\" + nodeManager.getCurrentNode().getVersion());\n+    }\n+\n+    @Override\n+    public void configure(Binder binder)\n+    {\n+        binder.bind(BigQueryStorageClientFactory.class).in(Scopes.SINGLETON);\n+        binder.bind(BigQueryConnector.class).in(Scopes.SINGLETON);\n+        binder.bind(BigQueryMetadata.class).in(Scopes.SINGLETON);\n+        binder.bind(BigQuerySplitManager.class).in(Scopes.SINGLETON);\n+        binder.bind(BigQueryPageSourceProvider.class).in(Scopes.SINGLETON);\n+\n+        configBinder(binder).bindConfig(BigQueryConfig.class);\n+    }\n+\n+    @Provides\n+    @Singleton\n+    public BigQueryCredentialsSupplier provideBigQueryCredentialsSupplier(BigQueryConfig config)\n+    {\n+        return new BigQueryCredentialsSupplier(config.getCredentialsKey(), config.getCredentialsFile());\n+    }\n+\n+    @Provides\n+    @Singleton\n+    public BigQueryClient provideBigQueryClient(BigQueryConfig config, HeaderProvider headerProvider, BigQueryCredentialsSupplier bigQueryCredentialsSupplier)\n+    {\n+        String billingProjectId = calculateBillingProjectId(config.getParentProjectId(), bigQueryCredentialsSupplier.getCredentials());\n+        BigQueryOptions.Builder options = BigQueryOptions.newBuilder()\n+                .setHeaderProvider(headerProvider)\n+                .setProjectId(billingProjectId);\n+        // set credentials of provided\n+        bigQueryCredentialsSupplier.getCredentials().ifPresent(options::setCredentials);\n+        return new BigQueryClient(options.build().getService(), config);\n+    }\n+\n+    // Note that at this point the config has been validated, which means that option 2 or option 3 will always be valid\n+    static String calculateBillingProjectId(Optional<String> configParentProjectId, Optional<Credentials> credentials)\n+    {\n+        // 1. Get from configuration\n+        if (configParentProjectId.isPresent()) {\n+            return configParentProjectId.get();\n+        }\n+        // 2. Get from the provided credentials, but only ServiceAccountCredentials contains the project id.", "originalCommit": "73531d611e2781f3537c07e41fc4bb849c35a7bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1NDU2OQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594054569", "bodyText": "let's merge all logic in BigQueryEmptySplitPageSource\ninto BigQueryResultPageSource\nwe do not need a class for empty page source\nBigQueryResultPageSource should cover everything", "author": "zhenxiao", "createdAt": "2021-03-15T05:14:07Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryEmptySplitPageSource.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.io.IOException;\n+\n+public class BigQueryEmptySplitPageSource", "originalCommit": "73531d611e2781f3537c07e41fc4bb849c35a7bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDEzNzU5OA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594137598", "bodyText": "can we do this logic change in a separate PR? I do have a number of follow-up items as future roadmap for bigquery connector and this can be an addition to that list", "author": "fgwang7w", "createdAt": "2021-03-15T08:36:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1NDU2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTY2NDMzNQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r595664335", "bodyText": "I am inclined to do the merge in this commit. None of other connectors have separate class for empty page source.", "author": "zhenxiao", "createdAt": "2021-03-17T02:16:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1NDU2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Nzg2ODEyMQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r597868121", "bodyText": "@highker @beinan @qqibrow what do you think of keeping BigQueryEmptySplitPageSource as a separate class? I am inclined to merge BigQueryEmptySplitPageSource into BigQueryResultPageSource to simplify logic, but seems we already have HiveEmptySplitPageSource. Do you think it is fine to keep it as a first step?", "author": "zhenxiao", "createdAt": "2021-03-19T17:46:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1NDU2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTc2NjE5NQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r599766195", "bodyText": "As the first commit of this commit, I'm ok to keep the BigQueryEmptySplitPageSource.  As @zhenxiao  said, we could use BigQueryResultPageSource to cover everything in the future.", "author": "beinan", "createdAt": "2021-03-23T17:06:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1NDU2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1NjU4MQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594056581", "bodyText": "s/in/decoder/g", "author": "zhenxiao", "createdAt": "2021-03-15T05:21:51Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryResultPageSource.java", "diffHunk": "@@ -0,0 +1,346 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.DateTimeEncoding;\n+import com.facebook.presto.common.type.DecimalType;\n+import com.facebook.presto.common.type.Decimals;\n+import com.facebook.presto.common.type.RowType;\n+import com.facebook.presto.common.type.TimeZoneKey;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.common.type.VarbinaryType;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.google.cloud.bigquery.storage.v1beta1.BigQueryStorageClient;\n+import com.google.cloud.bigquery.storage.v1beta1.Storage;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+import org.apache.avro.Conversions;\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericDatumReader;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.io.BinaryDecoder;\n+import org.apache.avro.io.DecoderFactory;\n+import org.apache.avro.util.Utf8;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.math.BigDecimal;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.DateType.DATE;\n+import static com.facebook.presto.common.type.IntegerType.INTEGER;\n+import static com.facebook.presto.common.type.TimeWithTimeZoneType.TIME_WITH_TIME_ZONE;\n+import static com.facebook.presto.common.type.TimestampType.TIMESTAMP;\n+import static com.facebook.presto.common.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static com.facebook.presto.plugin.bigquery.BigQueryErrorCode.BIGQUERY_UNSUPPORTED_COLUMN_TYPE;\n+import static com.facebook.presto.plugin.bigquery.BigQueryErrorCode.BIGQUERY_UNSUPPORTED_TYPE_FOR_BLOCK;\n+import static com.facebook.presto.plugin.bigquery.BigQueryErrorCode.BIGQUERY_UNSUPPORTED_TYPE_FOR_LONG;\n+import static com.facebook.presto.plugin.bigquery.BigQueryErrorCode.BIGQUERY_UNSUPPORTED_TYPE_FOR_SLICE;\n+import static com.facebook.presto.plugin.bigquery.BigQueryErrorCode.BIGQUERY_UNSUPPORTED_TYPE_FOR_VARBINARY;\n+import static com.facebook.presto.plugin.bigquery.BigQueryMetadata.NUMERIC_DATA_TYPE_PRECISION;\n+import static com.facebook.presto.plugin.bigquery.BigQueryMetadata.NUMERIC_DATA_TYPE_SCALE;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.airlift.slice.Slices.utf8Slice;\n+import static java.lang.String.format;\n+\n+public class BigQueryResultPageSource\n+        implements ConnectorPageSource\n+{\n+    static final AvroDecimalConverter DECIMAL_CONVERTER = new AvroDecimalConverter();\n+    private static final Logger log = Logger.get(BigQueryResultPageSource.class);\n+    private final BigQueryStorageClient bigQueryStorageClient;\n+    private final BigQuerySplit split;\n+    private final BigQueryTableHandle table;\n+    private final ImmutableList<BigQueryColumnHandle> columns;\n+    private final ImmutableList<Type> columnTypes;\n+    private final AtomicLong readBytes;\n+    private final PageBuilder pageBuilder;\n+    private Iterator<Storage.ReadRowsResponse> responses;\n+    private boolean closed;\n+    private long completedPositions;\n+\n+    public BigQueryResultPageSource(\n+            BigQueryStorageClientFactory bigQueryStorageClientFactory,\n+            int maxReadRowsRetries,\n+            BigQuerySplit split,\n+            BigQueryTableHandle table,\n+            ImmutableList<BigQueryColumnHandle> columns)\n+    {\n+        this.bigQueryStorageClient = bigQueryStorageClientFactory.createBigQueryStorageClient();\n+        this.split = split;\n+        this.table = table;\n+        this.columns = columns;\n+        this.readBytes = new AtomicLong();\n+        this.columnTypes = columns.stream().map(BigQueryColumnHandle::getPrestoType).collect(toImmutableList());\n+        this.pageBuilder = new PageBuilder(columnTypes);\n+\n+        log.debug(\"Starting to read from %s\", split.getStreamName());\n+        Storage.ReadRowsRequest.Builder readRowsRequest = Storage.ReadRowsRequest.newBuilder()\n+                .setReadPosition(Storage.StreamPosition.newBuilder()\n+                        .setStream(Storage.Stream.newBuilder()\n+                                .setName(split.getStreamName())));\n+        responses = new ReadRowsHelper(bigQueryStorageClient, readRowsRequest, maxReadRowsRetries).readRows();\n+        closed = false;\n+    }\n+\n+    @Override\n+    public long getCompletedBytes()\n+    {\n+        return readBytes.get();\n+    }\n+\n+    @Override\n+    public long getCompletedPositions()\n+    {\n+        return completedPositions;\n+    }\n+\n+    @Override\n+    public long getReadTimeNanos()\n+    {\n+        return 0;\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return !responses.hasNext();\n+    }\n+\n+    @Override\n+    public Page getNextPage()\n+    {\n+        checkState(pageBuilder.isEmpty(), \"PageBuilder is not empty at the beginning of a new page\");\n+        Storage.ReadRowsResponse response = responses.next();\n+        Iterable<GenericRecord> records = parse(response);\n+        for (GenericRecord record : records) {\n+            pageBuilder.declarePosition();\n+            for (int column = 0; column < columnTypes.size(); column++) {\n+                BlockBuilder output = pageBuilder.getBlockBuilder(column);\n+                appendTo(columnTypes.get(column), record.get(column), output);\n+            }\n+        }\n+\n+        Page page = pageBuilder.build();\n+        completedPositions += page.getPositionCount();\n+        pageBuilder.reset();\n+        return page;\n+    }\n+\n+    private void appendTo(Type type, Object value, BlockBuilder output)\n+    {\n+        if (value == null) {\n+            output.appendNull();\n+            return;\n+        }\n+\n+        Class<?> javaType = type.getJavaType();\n+        try {\n+            if (javaType == boolean.class) {\n+                type.writeBoolean(output, (Boolean) value);\n+            }\n+            else if (javaType == long.class) {\n+                writeLong(type, value, output, javaType);\n+            }\n+            else if (javaType == double.class) {\n+                type.writeDouble(output, ((Number) value).doubleValue());\n+            }\n+            else if (javaType == Slice.class) {\n+                writeSlice(output, type, value);\n+            }\n+            else if (javaType == Block.class) {\n+                writeBlock(output, type, value);\n+            }\n+            else {\n+                throw new BigQueryException(BIGQUERY_UNSUPPORTED_COLUMN_TYPE, format(\"Unhandled type for %s: %s\", javaType.getSimpleName(), type));\n+            }\n+        }\n+        catch (ClassCastException exception) {\n+            throw new BigQueryException(BIGQUERY_UNSUPPORTED_COLUMN_TYPE, \"Not support type conversion for BigQuery data type: \" + type, exception);\n+        }\n+    }\n+\n+    private void writeLong(Type type, Object value, BlockBuilder output, Class<?> javaType)\n+    {\n+        if (type.equals(BIGINT)) {\n+            type.writeLong(output, ((Number) value).longValue());\n+        }\n+        else if (type.equals(INTEGER)) {\n+            type.writeLong(output, ((Number) value).intValue());\n+        }\n+        else if (type.equals(DATE)) {\n+            type.writeLong(output, ((Number) value).intValue());\n+        }\n+        else if (type.equals(TIMESTAMP)) {\n+            type.writeLong(output, BigQueryType.toPrestoTimestamp(((org.apache.avro.util.Utf8) value).toString()));\n+        }\n+        else if (type.equals(TIME_WITH_TIME_ZONE) || type.equals(TIMESTAMP_WITH_TIME_ZONE)) {\n+            type.writeLong(output, DateTimeEncoding.packDateTimeWithZone(((Long) value).longValue() / 1000, TimeZoneKey.UTC_KEY));\n+        }\n+        else {\n+            throw new BigQueryException(BIGQUERY_UNSUPPORTED_TYPE_FOR_LONG, format(\"Unhandled type for %s: %s\", javaType.getSimpleName(), type));\n+        }\n+    }\n+\n+    private void writeSlice(BlockBuilder output, Type type, Object value)\n+    {\n+        if (type instanceof VarcharType) {\n+            type.writeSlice(output, utf8Slice(((Utf8) value).toString()));\n+        }\n+        else if (type instanceof DecimalType) {\n+            BigDecimal bdValue = DECIMAL_CONVERTER.convert(value);\n+            type.writeSlice(output, Decimals.encodeScaledValue(bdValue, NUMERIC_DATA_TYPE_SCALE));\n+        }\n+        else if (type instanceof VarbinaryType) {\n+            if (value instanceof ByteBuffer) {\n+                type.writeSlice(output, Slices.wrappedBuffer((ByteBuffer) value));\n+            }\n+            else {\n+                throw new BigQueryException(BIGQUERY_UNSUPPORTED_TYPE_FOR_VARBINARY, \"Unhandled type for VarBinaryType: \" + value.getClass());\n+            }\n+        }\n+        else {\n+            throw new BigQueryException(BIGQUERY_UNSUPPORTED_TYPE_FOR_SLICE, \"Unhandled type for Slice: \" + type.getTypeSignature());\n+        }\n+    }\n+\n+    private void writeBlock(BlockBuilder output, Type type, Object value)\n+    {\n+        if (type instanceof ArrayType && value instanceof List<?>) {\n+            BlockBuilder builder = output.beginBlockEntry();\n+\n+            for (Object element : (List<?>) value) {\n+                appendTo(type.getTypeParameters().get(0), element, builder);\n+            }\n+\n+            output.closeEntry();\n+            return;\n+        }\n+        if (type instanceof RowType && value instanceof GenericRecord) {\n+            GenericRecord record = (GenericRecord) value;\n+            BlockBuilder builder = output.beginBlockEntry();\n+\n+            List<String> fieldNames = new ArrayList<>();\n+            for (int i = 0; i < type.getTypeSignature().getParameters().size(); i++) {\n+                TypeSignatureParameter parameter = type.getTypeSignature().getParameters().get(i);\n+                fieldNames.add(parameter.getNamedTypeSignature().getName().orElse(\"field\" + i));\n+            }\n+            checkState(fieldNames.size() == type.getTypeParameters().size(), \"fieldName doesn't match with type size : %s\", type);\n+            for (int index = 0; index < type.getTypeParameters().size(); index++) {\n+                appendTo(type.getTypeParameters().get(index), record.get(fieldNames.get(index)), builder);\n+            }\n+            output.closeEntry();\n+            return;\n+        }\n+        throw new BigQueryException(BIGQUERY_UNSUPPORTED_TYPE_FOR_BLOCK, \"Unhandled type for Block: \" + type.getTypeSignature());\n+    }\n+\n+    @Override\n+    public long getSystemMemoryUsage()\n+    {\n+        return 0;\n+    }\n+\n+    @Override\n+    public void close()\n+            throws IOException\n+    {\n+        bigQueryStorageClient.close();\n+        closed = true;\n+    }\n+\n+    Iterable<GenericRecord> parse(Storage.ReadRowsResponse response)\n+    {\n+        byte[] buffer = response.getAvroRows().getSerializedBinaryRows().toByteArray();\n+        readBytes.addAndGet(buffer.length);\n+        log.debug(\"Read %d bytes (total %d) from %s\", buffer.length, readBytes.get(), split.getStreamName());\n+        Schema avroSchema = new Schema.Parser().parse(split.getAvroSchema());\n+        return () -> new AvroBinaryIterator(avroSchema, buffer);\n+    }\n+\n+    Stream<GenericRecord> toRecords(Storage.ReadRowsResponse response)\n+    {\n+        byte[] buffer = response.getAvroRows().getSerializedBinaryRows().toByteArray();\n+        readBytes.addAndGet(buffer.length);\n+        log.debug(\"Read %d bytes (total %d) from %s\", buffer.length, readBytes.get(), split.getStreamName());\n+        Schema avroSchema = new Schema.Parser().parse(split.getAvroSchema());\n+        Iterable<GenericRecord> responseRecords = () -> new AvroBinaryIterator(avroSchema, buffer);\n+        return StreamSupport.stream(responseRecords.spliterator(), false);\n+    }\n+\n+    static class AvroBinaryIterator\n+            implements Iterator<GenericRecord>\n+    {\n+        GenericDatumReader<GenericRecord> reader;\n+        BinaryDecoder in;", "originalCommit": "73531d611e2781f3537c07e41fc4bb849c35a7bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1NjY4NQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594056685", "bodyText": "BigQueryException?", "author": "zhenxiao", "createdAt": "2021-03-15T05:22:13Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryResultPageSource.java", "diffHunk": "@@ -0,0 +1,346 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.common.Page;\n+import com.facebook.presto.common.PageBuilder;\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.DateTimeEncoding;\n+import com.facebook.presto.common.type.DecimalType;\n+import com.facebook.presto.common.type.Decimals;\n+import com.facebook.presto.common.type.RowType;\n+import com.facebook.presto.common.type.TimeZoneKey;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.facebook.presto.common.type.VarbinaryType;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.spi.ConnectorPageSource;\n+import com.google.cloud.bigquery.storage.v1beta1.BigQueryStorageClient;\n+import com.google.cloud.bigquery.storage.v1beta1.Storage;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+import org.apache.avro.Conversions;\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericDatumReader;\n+import org.apache.avro.generic.GenericRecord;\n+import org.apache.avro.io.BinaryDecoder;\n+import org.apache.avro.io.DecoderFactory;\n+import org.apache.avro.util.Utf8;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.math.BigDecimal;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.DateType.DATE;\n+import static com.facebook.presto.common.type.IntegerType.INTEGER;\n+import static com.facebook.presto.common.type.TimeWithTimeZoneType.TIME_WITH_TIME_ZONE;\n+import static com.facebook.presto.common.type.TimestampType.TIMESTAMP;\n+import static com.facebook.presto.common.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static com.facebook.presto.plugin.bigquery.BigQueryErrorCode.BIGQUERY_UNSUPPORTED_COLUMN_TYPE;\n+import static com.facebook.presto.plugin.bigquery.BigQueryErrorCode.BIGQUERY_UNSUPPORTED_TYPE_FOR_BLOCK;\n+import static com.facebook.presto.plugin.bigquery.BigQueryErrorCode.BIGQUERY_UNSUPPORTED_TYPE_FOR_LONG;\n+import static com.facebook.presto.plugin.bigquery.BigQueryErrorCode.BIGQUERY_UNSUPPORTED_TYPE_FOR_SLICE;\n+import static com.facebook.presto.plugin.bigquery.BigQueryErrorCode.BIGQUERY_UNSUPPORTED_TYPE_FOR_VARBINARY;\n+import static com.facebook.presto.plugin.bigquery.BigQueryMetadata.NUMERIC_DATA_TYPE_PRECISION;\n+import static com.facebook.presto.plugin.bigquery.BigQueryMetadata.NUMERIC_DATA_TYPE_SCALE;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.airlift.slice.Slices.utf8Slice;\n+import static java.lang.String.format;\n+\n+public class BigQueryResultPageSource\n+        implements ConnectorPageSource\n+{\n+    static final AvroDecimalConverter DECIMAL_CONVERTER = new AvroDecimalConverter();\n+    private static final Logger log = Logger.get(BigQueryResultPageSource.class);\n+    private final BigQueryStorageClient bigQueryStorageClient;\n+    private final BigQuerySplit split;\n+    private final BigQueryTableHandle table;\n+    private final ImmutableList<BigQueryColumnHandle> columns;\n+    private final ImmutableList<Type> columnTypes;\n+    private final AtomicLong readBytes;\n+    private final PageBuilder pageBuilder;\n+    private Iterator<Storage.ReadRowsResponse> responses;\n+    private boolean closed;\n+    private long completedPositions;\n+\n+    public BigQueryResultPageSource(\n+            BigQueryStorageClientFactory bigQueryStorageClientFactory,\n+            int maxReadRowsRetries,\n+            BigQuerySplit split,\n+            BigQueryTableHandle table,\n+            ImmutableList<BigQueryColumnHandle> columns)\n+    {\n+        this.bigQueryStorageClient = bigQueryStorageClientFactory.createBigQueryStorageClient();\n+        this.split = split;\n+        this.table = table;\n+        this.columns = columns;\n+        this.readBytes = new AtomicLong();\n+        this.columnTypes = columns.stream().map(BigQueryColumnHandle::getPrestoType).collect(toImmutableList());\n+        this.pageBuilder = new PageBuilder(columnTypes);\n+\n+        log.debug(\"Starting to read from %s\", split.getStreamName());\n+        Storage.ReadRowsRequest.Builder readRowsRequest = Storage.ReadRowsRequest.newBuilder()\n+                .setReadPosition(Storage.StreamPosition.newBuilder()\n+                        .setStream(Storage.Stream.newBuilder()\n+                                .setName(split.getStreamName())));\n+        responses = new ReadRowsHelper(bigQueryStorageClient, readRowsRequest, maxReadRowsRetries).readRows();\n+        closed = false;\n+    }\n+\n+    @Override\n+    public long getCompletedBytes()\n+    {\n+        return readBytes.get();\n+    }\n+\n+    @Override\n+    public long getCompletedPositions()\n+    {\n+        return completedPositions;\n+    }\n+\n+    @Override\n+    public long getReadTimeNanos()\n+    {\n+        return 0;\n+    }\n+\n+    @Override\n+    public boolean isFinished()\n+    {\n+        return !responses.hasNext();\n+    }\n+\n+    @Override\n+    public Page getNextPage()\n+    {\n+        checkState(pageBuilder.isEmpty(), \"PageBuilder is not empty at the beginning of a new page\");\n+        Storage.ReadRowsResponse response = responses.next();\n+        Iterable<GenericRecord> records = parse(response);\n+        for (GenericRecord record : records) {\n+            pageBuilder.declarePosition();\n+            for (int column = 0; column < columnTypes.size(); column++) {\n+                BlockBuilder output = pageBuilder.getBlockBuilder(column);\n+                appendTo(columnTypes.get(column), record.get(column), output);\n+            }\n+        }\n+\n+        Page page = pageBuilder.build();\n+        completedPositions += page.getPositionCount();\n+        pageBuilder.reset();\n+        return page;\n+    }\n+\n+    private void appendTo(Type type, Object value, BlockBuilder output)\n+    {\n+        if (value == null) {\n+            output.appendNull();\n+            return;\n+        }\n+\n+        Class<?> javaType = type.getJavaType();\n+        try {\n+            if (javaType == boolean.class) {\n+                type.writeBoolean(output, (Boolean) value);\n+            }\n+            else if (javaType == long.class) {\n+                writeLong(type, value, output, javaType);\n+            }\n+            else if (javaType == double.class) {\n+                type.writeDouble(output, ((Number) value).doubleValue());\n+            }\n+            else if (javaType == Slice.class) {\n+                writeSlice(output, type, value);\n+            }\n+            else if (javaType == Block.class) {\n+                writeBlock(output, type, value);\n+            }\n+            else {\n+                throw new BigQueryException(BIGQUERY_UNSUPPORTED_COLUMN_TYPE, format(\"Unhandled type for %s: %s\", javaType.getSimpleName(), type));\n+            }\n+        }\n+        catch (ClassCastException exception) {\n+            throw new BigQueryException(BIGQUERY_UNSUPPORTED_COLUMN_TYPE, \"Not support type conversion for BigQuery data type: \" + type, exception);\n+        }\n+    }\n+\n+    private void writeLong(Type type, Object value, BlockBuilder output, Class<?> javaType)\n+    {\n+        if (type.equals(BIGINT)) {\n+            type.writeLong(output, ((Number) value).longValue());\n+        }\n+        else if (type.equals(INTEGER)) {\n+            type.writeLong(output, ((Number) value).intValue());\n+        }\n+        else if (type.equals(DATE)) {\n+            type.writeLong(output, ((Number) value).intValue());\n+        }\n+        else if (type.equals(TIMESTAMP)) {\n+            type.writeLong(output, BigQueryType.toPrestoTimestamp(((org.apache.avro.util.Utf8) value).toString()));\n+        }\n+        else if (type.equals(TIME_WITH_TIME_ZONE) || type.equals(TIMESTAMP_WITH_TIME_ZONE)) {\n+            type.writeLong(output, DateTimeEncoding.packDateTimeWithZone(((Long) value).longValue() / 1000, TimeZoneKey.UTC_KEY));\n+        }\n+        else {\n+            throw new BigQueryException(BIGQUERY_UNSUPPORTED_TYPE_FOR_LONG, format(\"Unhandled type for %s: %s\", javaType.getSimpleName(), type));\n+        }\n+    }\n+\n+    private void writeSlice(BlockBuilder output, Type type, Object value)\n+    {\n+        if (type instanceof VarcharType) {\n+            type.writeSlice(output, utf8Slice(((Utf8) value).toString()));\n+        }\n+        else if (type instanceof DecimalType) {\n+            BigDecimal bdValue = DECIMAL_CONVERTER.convert(value);\n+            type.writeSlice(output, Decimals.encodeScaledValue(bdValue, NUMERIC_DATA_TYPE_SCALE));\n+        }\n+        else if (type instanceof VarbinaryType) {\n+            if (value instanceof ByteBuffer) {\n+                type.writeSlice(output, Slices.wrappedBuffer((ByteBuffer) value));\n+            }\n+            else {\n+                throw new BigQueryException(BIGQUERY_UNSUPPORTED_TYPE_FOR_VARBINARY, \"Unhandled type for VarBinaryType: \" + value.getClass());\n+            }\n+        }\n+        else {\n+            throw new BigQueryException(BIGQUERY_UNSUPPORTED_TYPE_FOR_SLICE, \"Unhandled type for Slice: \" + type.getTypeSignature());\n+        }\n+    }\n+\n+    private void writeBlock(BlockBuilder output, Type type, Object value)\n+    {\n+        if (type instanceof ArrayType && value instanceof List<?>) {\n+            BlockBuilder builder = output.beginBlockEntry();\n+\n+            for (Object element : (List<?>) value) {\n+                appendTo(type.getTypeParameters().get(0), element, builder);\n+            }\n+\n+            output.closeEntry();\n+            return;\n+        }\n+        if (type instanceof RowType && value instanceof GenericRecord) {\n+            GenericRecord record = (GenericRecord) value;\n+            BlockBuilder builder = output.beginBlockEntry();\n+\n+            List<String> fieldNames = new ArrayList<>();\n+            for (int i = 0; i < type.getTypeSignature().getParameters().size(); i++) {\n+                TypeSignatureParameter parameter = type.getTypeSignature().getParameters().get(i);\n+                fieldNames.add(parameter.getNamedTypeSignature().getName().orElse(\"field\" + i));\n+            }\n+            checkState(fieldNames.size() == type.getTypeParameters().size(), \"fieldName doesn't match with type size : %s\", type);\n+            for (int index = 0; index < type.getTypeParameters().size(); index++) {\n+                appendTo(type.getTypeParameters().get(index), record.get(fieldNames.get(index)), builder);\n+            }\n+            output.closeEntry();\n+            return;\n+        }\n+        throw new BigQueryException(BIGQUERY_UNSUPPORTED_TYPE_FOR_BLOCK, \"Unhandled type for Block: \" + type.getTypeSignature());\n+    }\n+\n+    @Override\n+    public long getSystemMemoryUsage()\n+    {\n+        return 0;\n+    }\n+\n+    @Override\n+    public void close()\n+            throws IOException\n+    {\n+        bigQueryStorageClient.close();\n+        closed = true;\n+    }\n+\n+    Iterable<GenericRecord> parse(Storage.ReadRowsResponse response)\n+    {\n+        byte[] buffer = response.getAvroRows().getSerializedBinaryRows().toByteArray();\n+        readBytes.addAndGet(buffer.length);\n+        log.debug(\"Read %d bytes (total %d) from %s\", buffer.length, readBytes.get(), split.getStreamName());\n+        Schema avroSchema = new Schema.Parser().parse(split.getAvroSchema());\n+        return () -> new AvroBinaryIterator(avroSchema, buffer);\n+    }\n+\n+    Stream<GenericRecord> toRecords(Storage.ReadRowsResponse response)\n+    {\n+        byte[] buffer = response.getAvroRows().getSerializedBinaryRows().toByteArray();\n+        readBytes.addAndGet(buffer.length);\n+        log.debug(\"Read %d bytes (total %d) from %s\", buffer.length, readBytes.get(), split.getStreamName());\n+        Schema avroSchema = new Schema.Parser().parse(split.getAvroSchema());\n+        Iterable<GenericRecord> responseRecords = () -> new AvroBinaryIterator(avroSchema, buffer);\n+        return StreamSupport.stream(responseRecords.spliterator(), false);\n+    }\n+\n+    static class AvroBinaryIterator\n+            implements Iterator<GenericRecord>\n+    {\n+        GenericDatumReader<GenericRecord> reader;\n+        BinaryDecoder in;\n+\n+        AvroBinaryIterator(Schema avroSchema, byte[] buffer)\n+        {\n+            this.reader = new GenericDatumReader<>(avroSchema);\n+            this.in = new DecoderFactory().binaryDecoder(buffer, null);\n+        }\n+\n+        @Override\n+        public boolean hasNext()\n+        {\n+            try {\n+                return !in.isEnd();\n+            }\n+            catch (IOException e) {\n+                throw new UncheckedIOException(\"Error determining the end of Avro buffer\", e);", "originalCommit": "73531d611e2781f3537c07e41fc4bb849c35a7bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDE0NzE3OQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594147179", "bodyText": "ok", "author": "fgwang7w", "createdAt": "2021-03-15T08:50:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1NjY4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1NzI1NQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594057255", "bodyText": "static import Storage.ReadSession", "author": "zhenxiao", "createdAt": "2021-03-15T05:24:19Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQuerySplitManager.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.ConnectorSplitSource;\n+import com.facebook.presto.spi.ConnectorTableLayoutHandle;\n+import com.facebook.presto.spi.FixedSplitSource;\n+import com.facebook.presto.spi.NodeManager;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.connector.ConnectorSplitManager;\n+import com.facebook.presto.spi.connector.ConnectorTransactionHandle;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.cloud.bigquery.storage.v1beta1.Storage;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+import static com.facebook.presto.plugin.bigquery.BigQueryErrorCode.BIGQUERY_FAILED_TO_EXECUTE_QUERY;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.IntStream.range;\n+\n+public class BigQuerySplitManager\n+        implements ConnectorSplitManager\n+{\n+    private static final Logger log = Logger.get(BigQuerySplitManager.class);\n+\n+    private final BigQueryClient bigQueryClient;\n+    private final BigQueryStorageClientFactory bigQueryStorageClientFactory;\n+    private final OptionalInt parallelism;\n+    private final ReadSessionCreatorConfig readSessionCreatorConfig;\n+    private final NodeManager nodeManager;\n+\n+    @Inject\n+    public BigQuerySplitManager(\n+            BigQueryConfig config,\n+            BigQueryClient bigQueryClient,\n+            BigQueryStorageClientFactory bigQueryStorageClientFactory,\n+            NodeManager nodeManager)\n+    {\n+        requireNonNull(config, \"config cannot be null\");\n+\n+        this.bigQueryClient = requireNonNull(bigQueryClient, \"bigQueryClient cannot be null\");\n+        this.bigQueryStorageClientFactory = requireNonNull(bigQueryStorageClientFactory, \"bigQueryStorageClientFactory cannot be null\");\n+        this.parallelism = config.getParallelism();\n+        this.readSessionCreatorConfig = config.createReadSessionCreatorConfig();\n+        this.nodeManager = requireNonNull(nodeManager, \"nodeManager cannot be null\");\n+    }\n+\n+    @Override\n+    public ConnectorSplitSource getSplits(\n+            ConnectorTransactionHandle transactionHandle,\n+            ConnectorSession session,\n+            ConnectorTableLayoutHandle layout,\n+            SplitSchedulingContext splitSchedulingContext)\n+    {\n+        BigQueryTableLayoutHandle bigQueryTableLayoutHandle = (BigQueryTableLayoutHandle) layout;\n+        BigQueryTableHandle bigQueryTableHandle = bigQueryTableLayoutHandle.getTable();\n+\n+        TableId tableId = bigQueryTableHandle.getTableId();\n+        int actualParallelism = parallelism.orElse(nodeManager.getRequiredWorkerNodes().size());\n+        Optional<String> filter = Optional.empty();\n+        List<BigQuerySplit> splits = isEmptyProjectionIsRequired(bigQueryTableHandle.getProjectedColumns()) ?\n+                createEmptyProjection(tableId, actualParallelism, filter) :\n+                readFromBigQuery(tableId, bigQueryTableHandle.getProjectedColumns(), actualParallelism, filter);\n+        return new FixedSplitSource(splits);\n+    }\n+\n+    private boolean isEmptyProjectionIsRequired(Optional<List<ColumnHandle>> projectedColumns)\n+    {\n+        return projectedColumns.isPresent() && projectedColumns.get().isEmpty();\n+    }\n+\n+    private ImmutableList<BigQuerySplit> readFromBigQuery(TableId tableId, Optional<List<ColumnHandle>> projectedColumns, int actualParallelism, Optional<String> filter)\n+    {\n+        List<ColumnHandle> columns = projectedColumns.orElse(ImmutableList.of());\n+        ImmutableList<String> projectedColumnsNames = columns.stream()\n+                .map(column -> ((BigQueryColumnHandle) column).getName())\n+                .collect(toImmutableList());\n+\n+        Storage.ReadSession readSession = new ReadSessionCreator(readSessionCreatorConfig, bigQueryClient, bigQueryStorageClientFactory)", "originalCommit": "73531d611e2781f3537c07e41fc4bb849c35a7bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1Nzg1Nw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594057857", "bodyText": "static import Field.Mode", "author": "zhenxiao", "createdAt": "2021-03-15T05:26:35Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/Conversions.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.presto.spi.ColumnMetadata;\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+\n+public class Conversions\n+{\n+    private Conversions() {}\n+\n+    static BigQueryColumnHandle toColumnHandle(Field field)\n+    {\n+        FieldList subFields = field.getSubFields();\n+        List<BigQueryColumnHandle> subColumns = subFields == null ?\n+                Collections.emptyList() :\n+                subFields.stream()\n+                        .map(Conversions::toColumnHandle)\n+                        .collect(Collectors.toList());\n+        return new BigQueryColumnHandle(\n+                field.getName(),\n+                BigQueryType.valueOf(field.getType().name()),\n+                getMode(field),\n+                subColumns,\n+                field.getDescription());\n+    }\n+\n+    static ColumnMetadata toColumnMetadata(Field field)\n+    {\n+        return new ColumnMetadata(\n+                field.getName(), // name\n+                adapt(field).getPrestoType(),\n+                getMode(field) == Field.Mode.NULLABLE, //nullable\n+                field.getDescription(), // comment\n+                null, // extraInfo\n+                false, // hidden\n+                ImmutableMap.of()); // properties\n+    }\n+\n+    static BigQueryType.Adaptor adapt(Field field)\n+    {\n+        return new BigQueryType.Adaptor()\n+        {\n+            @Override\n+            public BigQueryType getBigQueryType()\n+            {\n+                return BigQueryType.valueOf(field.getType().name());\n+            }\n+\n+            @Override\n+            public ImmutableMap<String, BigQueryType.Adaptor> getBigQuerySubTypes()\n+            {\n+                FieldList subFields = field.getSubFields();\n+                if (subFields == null) {\n+                    return ImmutableMap.of();\n+                }\n+                return subFields.stream().collect(toImmutableMap(Field::getName, Conversions::adapt));\n+            }\n+\n+            @Override\n+            public Field.Mode getMode()", "originalCommit": "73531d611e2781f3537c07e41fc4bb849c35a7bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1ODEzNQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594058135", "bodyText": "// for testing", "author": "zhenxiao", "createdAt": "2021-03-15T05:27:27Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/ReadRowsHelper.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.google.cloud.bigquery.storage.v1beta1.BigQueryStorageClient;\n+import com.google.cloud.bigquery.storage.v1beta1.Storage.ReadRowsRequest;\n+import com.google.cloud.bigquery.storage.v1beta1.Storage.ReadRowsResponse;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class ReadRowsHelper\n+{\n+    private BigQueryStorageClient client;\n+    private ReadRowsRequest.Builder request;\n+    private int maxReadRowsRetries;\n+\n+    public ReadRowsHelper(BigQueryStorageClient client, ReadRowsRequest.Builder request, int maxReadRowsRetries)\n+    {\n+        this.client = requireNonNull(client, \"client cannot be null\");\n+        this.request = requireNonNull(request, \"client cannot be null\");\n+        this.maxReadRowsRetries = maxReadRowsRetries;\n+    }\n+\n+    public Iterator<ReadRowsResponse> readRows()\n+    {\n+        List<ReadRowsResponse> readRowResponses = new ArrayList<>();\n+        long readRowsCount = 0;\n+        int retries = 0;\n+        Iterator<ReadRowsResponse> serverResponses = fetchResponses(request);\n+        while (serverResponses.hasNext()) {\n+            try {\n+                ReadRowsResponse response = serverResponses.next();\n+                readRowsCount += response.getRowCount();\n+                readRowResponses.add(response);\n+            }\n+            catch (RuntimeException e) {\n+                // if relevant, retry the read, from the last read position\n+                if (BigQueryUtil.isRetryable(e) && retries < maxReadRowsRetries) {\n+                    request.getReadPositionBuilder().setOffset(readRowsCount);\n+                    serverResponses = fetchResponses(request);\n+                    retries++;\n+                }\n+                else {\n+                    // to safely close the client\n+                    try (BigQueryStorageClient ignored = client) {\n+                        throw e;\n+                    }\n+                }\n+            }\n+        }\n+        return readRowResponses.iterator();\n+    }\n+\n+    // In order to enable testing", "originalCommit": "73531d611e2781f3537c07e41fc4bb849c35a7bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1ODQxNw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594058417", "bodyText": "static import HOURS", "author": "zhenxiao", "createdAt": "2021-03-15T05:28:26Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/ReadSessionCreator.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.cloud.BaseServiceException;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.cloud.bigquery.storage.v1beta1.BigQueryStorageClient;\n+import com.google.cloud.bigquery.storage.v1beta1.ReadOptions;\n+import com.google.cloud.bigquery.storage.v1beta1.Storage;\n+import com.google.cloud.bigquery.storage.v1beta1.TableReferenceProto;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static java.lang.String.format;\n+\n+// A helper class, also handles view materialization\n+public class ReadSessionCreator\n+{\n+    private static final Logger log = Logger.get(ReadSessionCreator.class);\n+\n+    private static Cache<String, TableInfo> destinationTableCache =\n+            CacheBuilder.newBuilder()\n+                    .expireAfterWrite(15, TimeUnit.MINUTES)\n+                    .maximumSize(1000)\n+                    .build();\n+\n+    private final ReadSessionCreatorConfig config;\n+    private final BigQueryClient bigQueryClient;\n+    private final BigQueryStorageClientFactory bigQueryStorageClientFactory;\n+\n+    public ReadSessionCreator(\n+            ReadSessionCreatorConfig config,\n+            BigQueryClient bigQueryClient,\n+            BigQueryStorageClientFactory bigQueryStorageClientFactory)\n+    {\n+        this.config = config;\n+        this.bigQueryClient = bigQueryClient;\n+        this.bigQueryStorageClientFactory = bigQueryStorageClientFactory;\n+    }\n+\n+    public Storage.ReadSession create(TableId table, ImmutableList<String> selectedFields, Optional<String> filter, int parallelism)\n+    {\n+        TableInfo tableDetails = bigQueryClient.getTable(table);\n+\n+        TableInfo actualTable = getActualTable(tableDetails, selectedFields, new String[] {});\n+\n+        try (BigQueryStorageClient bigQueryStorageClient = bigQueryStorageClientFactory.createBigQueryStorageClient()) {\n+            ReadOptions.TableReadOptions.Builder readOptions = ReadOptions.TableReadOptions.newBuilder()\n+                    .addAllSelectedFields(selectedFields);\n+            filter.ifPresent(readOptions::setRowRestriction);\n+\n+            TableReferenceProto.TableReference tableReference = toTableReference(actualTable.getTableId());\n+\n+            Storage.ReadSession readSession = bigQueryStorageClient.createReadSession(\n+                    Storage.CreateReadSessionRequest.newBuilder()\n+                            .setParent(\"projects/\" + bigQueryClient.getProjectId())\n+                            .setFormat(Storage.DataFormat.AVRO)\n+                            .setRequestedStreams(parallelism)\n+                            .setReadOptions(readOptions)\n+                            .setTableReference(tableReference)\n+                            // The BALANCED sharding strategy causes the server to\n+                            // assign roughly the same number of rows to each stream.\n+                            .setShardingStrategy(Storage.ShardingStrategy.BALANCED)\n+                            .build());\n+\n+            return readSession;\n+        }\n+    }\n+\n+    TableReferenceProto.TableReference toTableReference(TableId tableId)\n+    {\n+        return TableReferenceProto.TableReference.newBuilder()\n+                .setProjectId(tableId.getProject())\n+                .setDatasetId(tableId.getDataset())\n+                .setTableId(tableId.getTable())\n+                .build();\n+    }\n+\n+    TableInfo getActualTable(\n+            TableInfo table,\n+            ImmutableList<String> requiredColumns,\n+            String[] filters)\n+    {\n+        TableDefinition tableDefinition = table.getDefinition();\n+        TableDefinition.Type tableType = tableDefinition.getType();\n+        if (TableDefinition.Type.TABLE == tableType) {\n+            return table;\n+        }\n+        if (TableDefinition.Type.VIEW == tableType) {\n+            if (!config.viewsEnabled) {\n+                throw new PrestoException(NOT_SUPPORTED,\n+                        \"Views are not enabled. You can enable views by setting 'bigquery.views-enabled' to true. Notice additional cost may occur.\");\n+            }\n+            // get it from the view\n+            String querySql = bigQueryClient.createSql(table.getTableId(), requiredColumns);\n+            log.debug(\"querySql is %s\", querySql);\n+            try {\n+                return destinationTableCache.get(querySql, new DestinationTableBuilder(bigQueryClient, config, querySql, table.getTableId()));\n+            }\n+            catch (ExecutionException e) {\n+                throw new PrestoException(BigQueryErrorCode.BIGQUERY_VIEW_DESTINATION_TABLE_CREATION_FAILED, \"Error creating destination table\", e);\n+            }\n+        }\n+        else {\n+            // not regular table or a view\n+            throw new PrestoException(NOT_SUPPORTED, format(\"Table type '%s' of table '%s.%s' is not supported\",\n+                    tableType, table.getTableId().getDataset(), table.getTableId().getTable()));\n+        }\n+    }\n+\n+    static class DestinationTableBuilder\n+            implements Callable<TableInfo>\n+    {\n+        final BigQueryClient bigQueryClient;\n+        final ReadSessionCreatorConfig config;\n+        final String querySql;\n+        final TableId table;\n+\n+        DestinationTableBuilder(BigQueryClient bigQueryClient, ReadSessionCreatorConfig config, String querySql, TableId table)\n+        {\n+            this.bigQueryClient = bigQueryClient;\n+            this.config = config;\n+            this.querySql = querySql;\n+            this.table = table;\n+        }\n+\n+        @Override\n+        public TableInfo call()\n+        {\n+            return createTableFromQuery();\n+        }\n+\n+        TableInfo createTableFromQuery()\n+        {\n+            TableId destinationTable = bigQueryClient.createDestinationTable(table);\n+            log.debug(\"destinationTable is %s\", destinationTable);\n+            JobInfo jobInfo = JobInfo.of(\n+                    QueryJobConfiguration\n+                            .newBuilder(querySql)\n+                            .setDestinationTable(destinationTable)\n+                            .build());\n+            log.debug(\"running query %s\", jobInfo);\n+            Job job = waitForJob(bigQueryClient.create(jobInfo));\n+            log.debug(\"job has finished. %s\", job);\n+            if (job.getStatus().getError() != null) {\n+                throw BigQueryUtil.convertToBigQueryException(job.getStatus().getError());\n+            }\n+            // add expiration time to the table\n+            TableInfo createdTable = bigQueryClient.getTable(destinationTable);\n+            long expirationTime = createdTable.getCreationTime() +\n+                    TimeUnit.HOURS.toMillis(config.viewExpirationTimeInHours);", "originalCommit": "73531d611e2781f3537c07e41fc4bb849c35a7bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDE1ODAzMw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594158033", "bodyText": "ok", "author": "fgwang7w", "createdAt": "2021-03-15T09:06:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1ODQxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1ODc2Ng==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594058766", "bodyText": "could we static import LegacySQLTypeName.RECORD, LegacySQLTypeName.STRING, and all other names?", "author": "zhenxiao", "createdAt": "2021-03-15T05:29:43Z", "path": "presto-bigquery/src/test/java/com/facebook/presto/plugin/bigquery/TestTypeConversions.java", "diffHunk": "@@ -0,0 +1,302 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.BigintType;\n+import com.facebook.presto.common.type.BooleanType;\n+import com.facebook.presto.common.type.DateType;\n+import com.facebook.presto.common.type.DecimalType;\n+import com.facebook.presto.common.type.DoubleType;\n+import com.facebook.presto.common.type.RowType;\n+import com.facebook.presto.common.type.TimeWithTimeZoneType;\n+import com.facebook.presto.common.type.TimestampType;\n+import com.facebook.presto.common.type.TimestampWithTimeZoneType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.VarbinaryType;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.spi.ColumnMetadata;\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.LegacySQLTypeName;\n+import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.Test;\n+\n+import java.time.LocalDateTime;\n+\n+import static com.facebook.presto.plugin.bigquery.BigQueryType.toLocalDateTime;\n+import static java.time.Month.APRIL;\n+import static java.time.Month.FEBRUARY;\n+import static java.time.Month.JANUARY;\n+import static java.time.Month.JUNE;\n+import static java.time.Month.MARCH;\n+import static java.time.Month.MAY;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@Test\n+public class TestTypeConversions\n+{\n+    @Test\n+    public void testConvertBooleanField()\n+    {\n+        assertSimpleFieldTypeConversion(LegacySQLTypeName.BOOLEAN, BooleanType.BOOLEAN);\n+    }\n+\n+    @Test\n+    public void testConvertBytesField()\n+    {\n+        assertSimpleFieldTypeConversion(LegacySQLTypeName.BYTES, VarbinaryType.VARBINARY);\n+    }\n+\n+    @Test\n+    public void testConvertDateField()\n+    {\n+        assertSimpleFieldTypeConversion(LegacySQLTypeName.DATE, DateType.DATE);\n+    }\n+\n+    @Test\n+    public void testConvertDateTimeField()\n+    {\n+        assertSimpleFieldTypeConversion(LegacySQLTypeName.DATETIME, TimestampType.TIMESTAMP);\n+    }\n+\n+    @Test\n+    public void testConvertFloatField()\n+    {\n+        assertSimpleFieldTypeConversion(LegacySQLTypeName.FLOAT, DoubleType.DOUBLE);\n+    }\n+\n+    @Test\n+    public void testConvertGeographyField()\n+    {\n+        assertSimpleFieldTypeConversion(LegacySQLTypeName.GEOGRAPHY, VarcharType.VARCHAR);\n+    }\n+\n+    @Test\n+    public void testConvertIntegerField()\n+    {\n+        assertSimpleFieldTypeConversion(LegacySQLTypeName.INTEGER, BigintType.BIGINT);\n+    }\n+\n+    @Test\n+    public void testConvertNumericField()\n+    {\n+        assertSimpleFieldTypeConversion(LegacySQLTypeName.NUMERIC, DecimalType.createDecimalType(38, 9));\n+    }\n+\n+    @Test\n+    public void testConvertStringField()\n+    {\n+        assertSimpleFieldTypeConversion(LegacySQLTypeName.STRING, VarcharType.VARCHAR);\n+    }\n+\n+    @Test\n+    public void testConvertTimeField()\n+    {\n+        assertSimpleFieldTypeConversion(LegacySQLTypeName.TIME, TimeWithTimeZoneType.TIME_WITH_TIME_ZONE);\n+    }\n+\n+    @Test\n+    public void testConvertTimestampField()\n+    {\n+        assertSimpleFieldTypeConversion(LegacySQLTypeName.TIMESTAMP, TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE);\n+    }\n+\n+    @Test\n+    public void testConvertOneLevelRecordField()\n+    {\n+        Field field = Field.of(\n+                \"rec\",\n+                LegacySQLTypeName.RECORD,\n+                Field.of(\"sub_s\", LegacySQLTypeName.STRING),\n+                Field.of(\"sub_i\", LegacySQLTypeName.INTEGER));\n+        ColumnMetadata metadata = Conversions.toColumnMetadata(field);\n+        RowType targetType = RowType.from(ImmutableList.of(\n+                RowType.field(\"sub_s\", VarcharType.VARCHAR),\n+                RowType.field(\"sub_i\", BigintType.BIGINT)));\n+        assertThat(metadata.getType()).isEqualTo(targetType);\n+    }\n+\n+    @Test\n+    public void testConvertTwoLevelsRecordField()\n+    {\n+        Field field = Field.of(\n+                \"rec\",\n+                LegacySQLTypeName.RECORD,\n+                Field.of(\"sub_rec\", LegacySQLTypeName.RECORD,", "originalCommit": "73531d611e2781f3537c07e41fc4bb849c35a7bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDE2MzI0OA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r594163248", "bodyText": "unable because the type for imported variable is now bigquery.LegacySQLTypeName which does not match with required type which is LegacySQLTypeName", "author": "fgwang7w", "createdAt": "2021-03-15T09:14:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1ODc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTY2ODQ0Mg==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r595668442", "bodyText": "do not understand, could we do:\nstatic import com.google.cloud.bigquery.LegacySQLTypeName.RECORD;\nand use RECORD directly?", "author": "zhenxiao", "createdAt": "2021-03-17T02:29:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1ODc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzkzMzg2Ng==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r597933866", "bodyText": "right, got it, fixed", "author": "fgwang7w", "createdAt": "2021-03-19T19:42:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDA1ODc2Ng=="}], "type": "inlineReview"}, {"oid": "2ad7ab12e781300bd896c5f3edf734978a082b31", "url": "https://github.com/prestodb/presto/commit/2ad7ab12e781300bd896c5f3edf734978a082b31", "message": "revise BigQuery code per review comments", "committedDate": "2021-03-15T09:17:48Z", "type": "forcePushed"}, {"oid": "6a5257e4560f3add320405fc1d709bfacd64aaf5", "url": "https://github.com/prestodb/presto/commit/6a5257e4560f3add320405fc1d709bfacd64aaf5", "message": "Refactor BigQuery connector", "committedDate": "2021-03-16T19:22:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTY2MzE5Nw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r595663197", "bodyText": "let's define pbc as a constant string in this class, or in a constant class", "author": "zhenxiao", "createdAt": "2021-03-17T02:12:26Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryClient.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.Dataset;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterators;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.stream.StreamSupport;\n+\n+import static com.facebook.presto.plugin.bigquery.BigQueryErrorCode.BIGQUERY_QUERY_FAILED_UNKNOWN;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.lang.String.format;\n+import static java.util.Locale.ENGLISH;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.UUID.randomUUID;\n+import static java.util.stream.Collectors.joining;\n+\n+public class BigQueryClient\n+{\n+    private final BigQuery bigQuery;\n+    private final Optional<String> viewMaterializationProject;\n+    private final Optional<String> viewMaterializationDataset;\n+\n+    // presto converts the dataset and table names to lower case, while BigQuery is case sensitive\n+    private final ConcurrentMap<TableId, TableId> tableIds = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<DatasetId, DatasetId> datasetIds = new ConcurrentHashMap<>();\n+\n+    BigQueryClient(BigQuery bigQuery, BigQueryConfig config)\n+    {\n+        this.bigQuery = requireNonNull(bigQuery, \"bigQuery is null\");\n+        this.viewMaterializationProject = requireNonNull(config.getViewMaterializationProject(), \"viewMaterializationProject is null\");\n+        this.viewMaterializationDataset = requireNonNull(config.getViewMaterializationDataset(), \"viewMaterializationDataset is null\");\n+    }\n+\n+    public TableInfo getTable(TableId tableId)\n+    {\n+        TableId bigQueryTableId = tableIds.get(tableId);\n+        Table table = bigQuery.getTable(bigQueryTableId != null ? bigQueryTableId : tableId);\n+        if (table != null) {\n+            tableIds.putIfAbsent(tableId, table.getTableId());\n+            datasetIds.putIfAbsent(toDatasetId(tableId), toDatasetId(table.getTableId()));\n+        }\n+        return table;\n+    }\n+\n+    private DatasetId toDatasetId(TableId tableId)\n+    {\n+        return DatasetId.of(tableId.getProject(), tableId.getDataset());\n+    }\n+\n+    protected String getProjectId()\n+    {\n+        return bigQuery.getOptions().getProjectId();\n+    }\n+\n+    protected Iterable<Dataset> listDatasets(String projectId)\n+    {\n+        final Iterator<Dataset> datasets = bigQuery.listDatasets(projectId).iterateAll().iterator();\n+        return () -> Iterators.transform(datasets, this::addDataSetMappingIfNeeded);\n+    }\n+\n+    protected Iterable<Table> listTables(DatasetId datasetId, TableDefinition.Type... types)\n+    {\n+        Set<TableDefinition.Type> allowedTypes = ImmutableSet.copyOf(types);\n+        DatasetId bigQueryDatasetId = datasetIds.getOrDefault(datasetId, datasetId);\n+        Iterable<Table> allTables = bigQuery.listTables(bigQueryDatasetId).iterateAll();\n+        allTables.forEach(table -> addTableMappingIfNeeded(bigQueryDatasetId, table));\n+        return StreamSupport.stream(allTables.spliterator(), false)\n+                .filter(table -> allowedTypes.contains(table.getDefinition().getType()))\n+                .collect(toImmutableList());\n+    }\n+\n+    private void addTableMappingIfNeeded(DatasetId datasetID, Table table)\n+    {\n+        TableId bigQueryTableId = table.getTableId();\n+        TableId prestoTableId = TableId.of(datasetID.getProject(), datasetID.getDataset(), createTableName());\n+        tableIds.putIfAbsent(bigQueryTableId, prestoTableId);\n+    }\n+    private Dataset addDataSetMappingIfNeeded(Dataset dataset)\n+    {\n+        DatasetId bigQueryDatasetId = dataset.getDatasetId();\n+        DatasetId prestoDatasetId = DatasetId.of(bigQueryDatasetId.getProject(), bigQueryDatasetId.getDataset().toLowerCase(ENGLISH));\n+        datasetIds.putIfAbsent(prestoDatasetId, bigQueryDatasetId);\n+        return dataset;\n+    }\n+\n+    protected TableId createDestinationTable(TableId tableId)\n+    {\n+        String project = viewMaterializationProject.orElse(tableId.getProject());\n+        String dataset = viewMaterializationDataset.orElse(tableId.getDataset());\n+        DatasetId datasetId = mapIfNeeded(project, dataset);\n+        return TableId.of(datasetId.getProject(), datasetId.getDataset(), createTableName());\n+    }\n+\n+    private String createTableName()\n+    {\n+        String tablePrefix = \"_pbc_\";", "originalCommit": "6a5257e4560f3add320405fc1d709bfacd64aaf5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjM1MDIxOQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r596350219", "bodyText": "ok", "author": "fgwang7w", "createdAt": "2021-03-17T20:15:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTY2MzE5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTY2Mzc4MQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r595663781", "bodyText": "is this defined somewhere in bigquery class files? nice to import the constant from bigquery classes", "author": "zhenxiao", "createdAt": "2021-03-17T02:14:41Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryConfig.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.airlift.configuration.ConfigDescription;\n+import com.google.auth.oauth2.GoogleCredentials;\n+\n+import javax.validation.constraints.AssertTrue;\n+import javax.validation.constraints.Min;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+public class BigQueryConfig\n+{\n+    public static final int DEFAULT_MAX_READ_ROWS_RETRIES = 3;\n+\n+    private Optional<String> credentialsKey = Optional.empty();\n+    private Optional<String> credentialsFile = Optional.empty();\n+    private Optional<String> projectId = Optional.empty();\n+    private Optional<String> parentProjectId = Optional.empty();\n+    private OptionalInt parallelism = OptionalInt.empty();\n+    private boolean viewsEnabled;\n+    private Optional<String> viewMaterializationProject = Optional.empty();\n+    private Optional<String> viewMaterializationDataset = Optional.empty();\n+    private int maxReadRowsRetries = DEFAULT_MAX_READ_ROWS_RETRIES;\n+\n+    @AssertTrue(message = \"Either one of 'bigquery.credentials-key' or 'bigquery.credentials-file' must be specified, or the default GoogleCredentials could be created\")\n+    public boolean isCredentialsConfigurationValid()\n+    {\n+        // at most one of them should present\n+        if (credentialsKey.isPresent() && credentialsFile.isPresent()) {\n+            return false;\n+        }\n+        // if no credentials, try create default ones\n+        if (!credentialsKey.isPresent() && !credentialsFile.isPresent()) {\n+            try {\n+                GoogleCredentials.getApplicationDefault();\n+            }\n+            catch (IOException e) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public Optional<String> getCredentialsKey()\n+    {\n+        return credentialsKey;\n+    }\n+\n+    @Config(\"bigquery.credentials-key\")\n+    @ConfigDescription(\"credentials key (base64 encoded)\")\n+    public BigQueryConfig setCredentialsKey(String credentialsKey)\n+    {\n+        this.credentialsKey = Optional.of(credentialsKey);\n+        return this;\n+    }\n+\n+    public Optional<String> getCredentialsFile()\n+    {\n+        return credentialsFile;\n+    }\n+\n+    @Config(\"bigquery.credentials-file\")\n+    @ConfigDescription(\"JSON credentials file path\")\n+    public BigQueryConfig setCredentialsFile(String credentialsFile)\n+    {\n+        this.credentialsFile = Optional.of(credentialsFile);\n+        return this;\n+    }\n+\n+    public Optional<String> getProjectId()\n+    {\n+        return projectId;\n+    }\n+\n+    @Config(\"bigquery.project-id\")\n+    @ConfigDescription(\"Google Cloud project ID\")\n+    public BigQueryConfig setProjectId(String projectId)\n+    {\n+        this.projectId = Optional.of(projectId);\n+        return this;\n+    }\n+\n+    public Optional<String> getParentProjectId()\n+    {\n+        return parentProjectId;\n+    }\n+\n+    @Config(\"bigquery.parent-project-id\")\n+    @ConfigDescription(\"Google Cloud parent project ID\")\n+    public BigQueryConfig setParentProjectId(String parentProjectId)\n+    {\n+        this.parentProjectId = Optional.of(parentProjectId);\n+        return this;\n+    }\n+\n+    public OptionalInt getParallelism()\n+    {\n+        return parallelism;\n+    }\n+\n+    @Config(\"bigquery.parallelism\")\n+    @ConfigDescription(\"The number of partitions to split the data\")\n+    public BigQueryConfig setParallelism(int parallelism)\n+    {\n+        this.parallelism = OptionalInt.of(parallelism);\n+        return this;\n+    }\n+\n+    public boolean isViewsEnabled()\n+    {\n+        return viewsEnabled;\n+    }\n+\n+    @Config(\"bigquery.views-enabled\")\n+    @ConfigDescription(\"Enable BigQuery connector to read views\")\n+    public BigQueryConfig setViewsEnabled(boolean viewsEnabled)\n+    {\n+        this.viewsEnabled = viewsEnabled;\n+        return this;\n+    }\n+\n+    public int getViewExpirationTimeInHours()\n+    {\n+        return 24;", "originalCommit": "6a5257e4560f3add320405fc1d709bfacd64aaf5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjM1NDAxMQ==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r596354011", "bodyText": "no but I can define a constant variable as a default config value", "author": "fgwang7w", "createdAt": "2021-03-17T20:22:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTY2Mzc4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTY2NDk0Mw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r595664943", "bodyText": "could we try return Optional if possible? we try to get rid of return null everywhere in the code", "author": "zhenxiao", "createdAt": "2021-03-17T02:18:06Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryMetadata.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ColumnMetadata;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.ConnectorTableHandle;\n+import com.facebook.presto.spi.ConnectorTableLayout;\n+import com.facebook.presto.spi.ConnectorTableLayoutHandle;\n+import com.facebook.presto.spi.ConnectorTableLayoutResult;\n+import com.facebook.presto.spi.ConnectorTableMetadata;\n+import com.facebook.presto.spi.Constraint;\n+import com.facebook.presto.spi.NotFoundException;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.SchemaTablePrefix;\n+import com.facebook.presto.spi.TableNotFoundException;\n+import com.facebook.presto.spi.connector.ConnectorMetadata;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.Schema;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableDefinition;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableInfo;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Streams;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.facebook.presto.plugin.bigquery.BigQueryErrorCode.BIGQUERY_TABLE_DISAPPEAR_DURING_LIST;\n+import static com.google.cloud.bigquery.TableDefinition.Type.TABLE;\n+import static com.google.cloud.bigquery.TableDefinition.Type.VIEW;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toMap;\n+\n+public class BigQueryMetadata\n+        implements ConnectorMetadata\n+{\n+    static final int NUMERIC_DATA_TYPE_PRECISION = 38;\n+    static final int NUMERIC_DATA_TYPE_SCALE = 9;\n+    private static final String INFORMATION_SCHEMA = \"information_schema\";\n+    private static final Logger log = Logger.get(BigQueryMetadata.class);\n+    private final BigQueryClient bigQueryClient;\n+    private final String projectId;\n+\n+    @Inject\n+    public BigQueryMetadata(BigQueryClient bigQueryClient, BigQueryConfig config)\n+    {\n+        this.bigQueryClient = bigQueryClient;\n+        this.projectId = config.getProjectId().orElse(bigQueryClient.getProjectId());\n+    }\n+\n+    @Override\n+    public List<String> listSchemaNames(ConnectorSession session)\n+    {\n+        return Streams.stream(bigQueryClient.listDatasets(projectId))\n+                .map(dataset -> dataset.getDatasetId().getDataset())\n+                .filter(schemaName -> !schemaName.equalsIgnoreCase(INFORMATION_SCHEMA))\n+                .collect(toImmutableList());\n+    }\n+\n+    @Override\n+    public List<SchemaTableName> listTables(ConnectorSession session, Optional<String> schemaName)\n+    {\n+        log.debug(\"listTables(session=%s, schemaName=%s)\", session, schemaName);\n+        return listTablesWithTypes(session, schemaName, TABLE);\n+    }\n+\n+    @Override\n+    public List<SchemaTableName> listViews(ConnectorSession session, Optional<String> schemaName)\n+    {\n+        log.debug(\"listViews(session=%s, schemaName=%s)\", session, schemaName);\n+        return listTablesWithTypes(session, schemaName, VIEW);\n+    }\n+\n+    private List<SchemaTableName> listTablesWithTypes(ConnectorSession session, Optional<String> schemaName, TableDefinition.Type... types)\n+    {\n+        if (schemaName.isPresent() && schemaName.get().equalsIgnoreCase(INFORMATION_SCHEMA)) {\n+            return ImmutableList.of();\n+        }\n+        Set<String> schemaNames = schemaName.map(ImmutableSet::of)\n+                .orElseGet(() -> ImmutableSet.copyOf(listSchemaNames(session)));\n+\n+        ImmutableList.Builder<SchemaTableName> tableNames = ImmutableList.builder();\n+        for (String datasetId : schemaNames) {\n+            for (Table table : bigQueryClient.listTables(DatasetId.of(projectId, datasetId), types)) {\n+                tableNames.add(new SchemaTableName(datasetId, table.getTableId().getTable()));\n+            }\n+        }\n+        return tableNames.build();\n+    }\n+\n+    @Override\n+    public ConnectorTableHandle getTableHandle(ConnectorSession session, SchemaTableName tableName)\n+    {\n+        log.debug(\"getTableHandle(session=%s, tableName=%s)\", session, tableName);\n+        TableInfo tableInfo = getBigQueryTable(tableName);\n+        if (tableInfo == null) {\n+            log.debug(\"Table [%s.%s] was not found\", tableName.getSchemaName(), tableName.getTableName());\n+            return null;\n+        }\n+        return BigQueryTableHandle.from(tableInfo);\n+    }\n+\n+    @Override\n+    public List<ConnectorTableLayoutResult> getTableLayouts(\n+            ConnectorSession session,\n+            ConnectorTableHandle table,\n+            Constraint<ColumnHandle> constraint,\n+            Optional<Set<ColumnHandle>> desiredColumns)\n+    {\n+        log.debug(\"getTableMetadata(session=%s, table=%s, constraint=%s, desiredColumns=%s)\", session, table, constraint, desiredColumns);\n+        BigQueryTableHandle bigQueryTableHandle = (BigQueryTableHandle) table;\n+        if (desiredColumns.isPresent()) {\n+            bigQueryTableHandle = bigQueryTableHandle.withProjectedColumns(ImmutableList.copyOf(desiredColumns.get()));\n+        }\n+        BigQueryTableLayoutHandle bigQueryTableLayoutHandle = new BigQueryTableLayoutHandle(bigQueryTableHandle);\n+        return ImmutableList.of(new ConnectorTableLayoutResult(new ConnectorTableLayout(bigQueryTableLayoutHandle), constraint.getSummary()));\n+    }\n+\n+    @Override\n+    public ConnectorTableLayout getTableLayout(ConnectorSession session, ConnectorTableLayoutHandle layoutHandle)\n+    {\n+        log.debug(\"getTableMetadata(session=%s, layoutHandle=%s)\", session, layoutHandle);\n+        BigQueryTableLayoutHandle bigQueryTableLayoutHandle = (BigQueryTableLayoutHandle) layoutHandle;\n+        return new ConnectorTableLayout(\n+                bigQueryTableLayoutHandle,\n+                Optional.empty(), // columns of the table, not projected\n+                bigQueryTableLayoutHandle.getTupleDomain(), // predicate\n+                Optional.empty(), // tablePartitioning\n+                Optional.empty(), // streamPartitioningColumns\n+                Optional.empty(), // discretePredicates\n+                ImmutableList.of()); // localProperties\n+    }\n+\n+    // May return null", "originalCommit": "6a5257e4560f3add320405fc1d709bfacd64aaf5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Nzg4MTI5OA==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r597881298", "bodyText": "ok wrap by Optional now", "author": "fgwang7w", "createdAt": "2021-03-19T18:06:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTY2NDk0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTY2NzAzMg==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r595667032", "bodyText": "let's use if else, to simplify the logic", "author": "zhenxiao", "createdAt": "2021-03-17T02:25:05Z", "path": "presto-bigquery/src/main/java/com/facebook/presto/plugin/bigquery/BigQueryType.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.bigquery;\n+\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.BigintType;\n+import com.facebook.presto.common.type.BooleanType;\n+import com.facebook.presto.common.type.DateType;\n+import com.facebook.presto.common.type.DecimalType;\n+import com.facebook.presto.common.type.DoubleType;\n+import com.facebook.presto.common.type.RowType;\n+import com.facebook.presto.common.type.TimeWithTimeZoneType;\n+import com.facebook.presto.common.type.TimestampType;\n+import com.facebook.presto.common.type.TimestampWithTimeZoneType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.VarbinaryType;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.google.cloud.bigquery.Field;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.lang.Integer.parseInt;\n+import static java.time.ZoneId.systemDefault;\n+import static java.util.stream.Collectors.toList;\n+\n+public enum BigQueryType\n+{\n+    BOOLEAN(BooleanType.BOOLEAN),\n+    BYTES(VarbinaryType.VARBINARY),\n+    DATE(DateType.DATE),\n+    DATETIME(TimestampType.TIMESTAMP),\n+    FLOAT(DoubleType.DOUBLE),\n+    GEOGRAPHY(VarcharType.VARCHAR),\n+    INTEGER(BigintType.BIGINT),\n+    NUMERIC(DecimalType.createDecimalType(BigQueryMetadata.NUMERIC_DATA_TYPE_PRECISION, BigQueryMetadata.NUMERIC_DATA_TYPE_SCALE)),\n+    RECORD(null),\n+    STRING(createUnboundedVarcharType()),\n+    TIME(TimeWithTimeZoneType.TIME_WITH_TIME_ZONE),\n+    TIMESTAMP(TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE);\n+\n+    private static final int[] NANO_FACTOR = {\n+            -1, // 0, no need to multiply\n+            100_000_000, // 1 digit after the dot\n+            10_000_000, // 2 digits after the dot\n+            1_000_000, // 3 digits after the dot\n+            100_000, // 4 digits after the dot\n+            10_000, // 5 digits after the dot\n+            1000, // 6 digits after the dot\n+            100, // 7 digits after the dot\n+            10, // 8 digits after the dot\n+            1, // 9 digits after the dot\n+    };\n+\n+    private final Type nativeType;\n+\n+    BigQueryType(Type nativeType)\n+    {\n+        this.nativeType = nativeType;\n+    }\n+\n+    static RowType.Field toRawTypeField(Map.Entry<String, BigQueryType.Adaptor> entry)\n+    {\n+        return toRawTypeField(entry.getKey(), entry.getValue());\n+    }\n+\n+    static RowType.Field toRawTypeField(String name, BigQueryType.Adaptor typeAdaptor)\n+    {\n+        Type prestoType = typeAdaptor.getPrestoType();\n+        return RowType.field(name, prestoType);\n+    }\n+\n+    static LocalDateTime toLocalDateTime(String datetime)\n+    {\n+        int dotPosition = datetime.indexOf('.');\n+        if (dotPosition == -1) {\n+            // no sub-second element\n+            return LocalDateTime.from(DateTimeFormatter.ISO_LOCAL_DATE_TIME.parse(datetime));\n+        }\n+        LocalDateTime result = LocalDateTime.from(DateTimeFormatter.ISO_LOCAL_DATE_TIME.parse(datetime.substring(0, dotPosition)));\n+        // has sub-second element, so convert to nanosecond\n+        String nanosStr = datetime.substring(dotPosition + 1);\n+        int nanoOfSecond = parseInt(nanosStr) * NANO_FACTOR[nanosStr.length()];\n+        return result.withNano(nanoOfSecond);\n+    }\n+\n+    static long toPrestoTimestamp(String datetime)\n+    {\n+        return toLocalDateTime(datetime).atZone(systemDefault()).toInstant().toEpochMilli();\n+    }\n+\n+    public Type getNativeType(BigQueryType.Adaptor typeAdaptor)\n+    {\n+        switch (this) {", "originalCommit": "6a5257e4560f3add320405fc1d709bfacd64aaf5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTY2OTAzMw==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r595669033", "bodyText": "let's make doc aligned with code config descriptions", "author": "zhenxiao", "createdAt": "2021-03-17T02:31:04Z", "path": "presto-docs/src/main/sphinx/connector/bigquery.rst", "diffHunk": "@@ -0,0 +1,175 @@\n+==================\n+BigQuery Connector\n+==================\n+\n+The BigQuery connector allows querying the data stored in `BigQuery\n+<https://cloud.google.com/bigquery/>`_. This can be used to join data between\n+different systems like BigQuery and Hive. The connector uses the `BigQuery\n+Storage API <https://cloud.google.com/bigquery/docs/reference/storage/>`_ to\n+read the data from the tables.\n+\n+Beta Disclaimer\n+---------------\n+\n+The BigQuery Storage API and this connector are in Beta and are subject to change.\n+\n+Changes may include, but are not limited to:\n+\n+* Type conversion\n+* Partitioning\n+* Parameters\n+\n+BigQuery Storage API\n+--------------------\n+\n+The Storage API streams data in parallel directly from BigQuery via gRPC without\n+using Google Cloud Storage as an intermediary.\n+It has a number of advantages over using the previous export-based read flow\n+that should generally lead to better read performance:\n+\n+**Direct Streaming**\n+\n+    It does not leave any temporary files in Google Cloud Storage. Rows are read\n+    directly from BigQuery servers using an Avro wire format.\n+\n+**Column Filtering**\n+\n+    The new API allows column filtering to only read the data you are interested in.\n+    `Backed by a columnar datastore <https://cloud.google.com/blog/big-data/2016/04/inside-capacitor-bigquerys-next-generation-columnar-storage-format>`_,\n+    it can efficiently stream data without reading all columns.\n+\n+**Dynamic Sharding**\n+\n+    The API rebalances records between readers until they all complete. This means\n+    that all Map phases will finish nearly concurrently. See this blog article on\n+    `how dynamic sharding is similarly used in Google Cloud Dataflow\n+    <https://cloud.google.com/blog/big-data/2016/05/no-shard-left-behind-dynamic-work-rebalancing-in-google-cloud-dataflow>`_.\n+\n+Requirements\n+------------\n+\n+Enable the BigQuery Storage API\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Follow `these instructions <https://cloud.google.com/bigquery/docs/reference/storage/#enabling_the_api>`_.\n+\n+Authentication\n+^^^^^^^^^^^^^^\n+\n+**On GCE/Dataproc** the authentication is taken from the machine's role.\n+\n+**Outside GCE/Dataproc** you have 3 options:\n+\n+* Use a service account JSON key and ``GOOGLE_APPLICATION_CREDENTIALS`` as\n+  described `here <https://cloud.google.com/docs/authentication/getting-started>`_.\n+* Set ``bigquery.credentials`` in the catalog properties file.\n+  It should contain the contents of the JSON file, encoded using base64.\n+* Set ``bigquery.credentials-file`` in the catalog properties file.\n+  It should point to the location of the JSON file.\n+\n+Configuration\n+-------------\n+\n+To configure the BigQuery connector, create a catalog properties file in\n+``etc/catalog`` named, for example, ``bigquery.properties``, to mount the\n+BigQuery connector as the ``bigquery`` catalog. Create the file with the\n+following contents, replacing the connection properties as appropriate for\n+your setup:\n+\n+.. code-block:: none\n+\n+    connector.name=bigquery\n+    bigquery.project-id=<your Google Cloud Platform project id>\n+\n+Multiple GCP Projects\n+^^^^^^^^^^^^^^^^^^^^^\n+\n+The BigQuery connector can only access a single GCP project.Thus, if you have\n+data in multiple GCP projects, You need to create several catalogs, each\n+pointingto a different GCP project. For example, if you have two GCP projects,\n+one for the sales and one for analytics, you can create two properties files in\n+``etc/catalog`` named ``sales.properties`` and ``analytics.properties``, both\n+having ``connector.name=bigquery`` but with different ``project-id``. This will\n+create the two catalogs, ``sales`` and ``analytics`` respectively.\n+\n+Configuring Partitioning\n+^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+By default the connector creates one partition per 400MB in the table being\n+read (before filtering). This should roughly correspond to the maximum number\n+of readers supported by the BigQuery Storage API. This can be configured\n+explicitly with the ``bigquery.parallelism`` property. BigQuery may limit the\n+number of partitions based on server constraints.\n+\n+Reading From Views\n+^^^^^^^^^^^^^^^^^^\n+\n+The connector has a preliminary support for reading from `BigQuery views\n+<https://cloud.google.com/bigquery/docs/views-intro>`_. Please note there are\n+a few caveats:\n+\n+* BigQuery views are not materialized by default, which means that the\n+  connector needs to materialize them before it can read them. This process\n+  affects the read performance.\n+* The materialization process can also incur additional costs to your BigQuery bill.\n+* By default, the materialized views are created in the same project and\n+  dataset. Those can be configured by the optional ``bigquery.view-materialization-project``\n+  and ``bigquery.view-materialization-dataset`` properties, respectively. The\n+  service account must have write permission to the project and the dataset in\n+  order to materialize the view.\n+* Reading from views is disabled by default. In order to enable it, set the\n+  ``bigquery.views-enabled`` configuration property to ``true``.\n+\n+Configuration Properties\n+^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+All configuration properties are optional.\n+\n+========================================= ============================================================== ==============================================\n+Property                                  Description                                                    Default\n+========================================= ============================================================== ==============================================\n+``bigquery.project-id``                   The Google Cloud Project ID where the data reside              Taken from the service account", "originalCommit": "6a5257e4560f3add320405fc1d709bfacd64aaf5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODAzMjY1Ng==", "url": "https://github.com/prestodb/presto/pull/15327#discussion_r598032656", "bodyText": "fixed", "author": "fgwang7w", "createdAt": "2021-03-20T00:19:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTY2OTAzMw=="}], "type": "inlineReview"}, {"oid": "5963e7c38cfdb81701ed1158b44b028a778db591", "url": "https://github.com/prestodb/presto/commit/5963e7c38cfdb81701ed1158b44b028a778db591", "message": "Refactor BigQuery connector", "committedDate": "2021-03-19T19:54:28Z", "type": "forcePushed"}, {"oid": "e5bc7c86d235adc7a7eb34cc2b3b3aaa24206f45", "url": "https://github.com/prestodb/presto/commit/e5bc7c86d235adc7a7eb34cc2b3b3aaa24206f45", "message": "Refactor BigQuery connector", "committedDate": "2021-03-20T00:18:53Z", "type": "forcePushed"}, {"oid": "035989095e708de6e0ba5f82c6cc092e770788a5", "url": "https://github.com/prestodb/presto/commit/035989095e708de6e0ba5f82c6cc092e770788a5", "message": "Refactor BigQuery Connector", "committedDate": "2021-03-20T02:44:06Z", "type": "forcePushed"}, {"oid": "820af5c981d3118a2becad3471909e8701597a5e", "url": "https://github.com/prestodb/presto/commit/820af5c981d3118a2becad3471909e8701597a5e", "message": "Refactor BigQuery Connector", "committedDate": "2021-03-23T16:45:12Z", "type": "forcePushed"}, {"oid": "5ceb1d5897aad735cfd4f3862ada24e5adaf5703", "url": "https://github.com/prestodb/presto/commit/5ceb1d5897aad735cfd4f3862ada24e5adaf5703", "message": "Add BigQuery Connector Support\n\nCo-authored-by: David Rabinowitz <davidrab@gmail.com>", "committedDate": "2021-03-23T19:19:12Z", "type": "commit"}, {"oid": "c75a1a7165226cb9f1676c47698f98f78e291156", "url": "https://github.com/prestodb/presto/commit/c75a1a7165226cb9f1676c47698f98f78e291156", "message": "Add BigQuery Connector Catalog", "committedDate": "2021-03-23T19:19:12Z", "type": "commit"}, {"oid": "65d66e96378ff8add65f966059e2e411a20abb0b", "url": "https://github.com/prestodb/presto/commit/65d66e96378ff8add65f966059e2e411a20abb0b", "message": "Add BigQuery Connector doc", "committedDate": "2021-03-23T19:19:12Z", "type": "commit"}, {"oid": "ab967f251161e8e28a21b23fd497657be049eb97", "url": "https://github.com/prestodb/presto/commit/ab967f251161e8e28a21b23fd497657be049eb97", "message": "Refactor BigQuery Connector", "committedDate": "2021-03-23T19:19:12Z", "type": "forcePushed"}, {"oid": "2668f00cd2157354e38bb0a66f25e6f83bf13aab", "url": "https://github.com/prestodb/presto/commit/2668f00cd2157354e38bb0a66f25e6f83bf13aab", "message": "Refactor BigQuery Connector", "committedDate": "2021-03-23T19:23:01Z", "type": "commit"}, {"oid": "2668f00cd2157354e38bb0a66f25e6f83bf13aab", "url": "https://github.com/prestodb/presto/commit/2668f00cd2157354e38bb0a66f25e6f83bf13aab", "message": "Refactor BigQuery Connector", "committedDate": "2021-03-23T19:23:01Z", "type": "forcePushed"}]}