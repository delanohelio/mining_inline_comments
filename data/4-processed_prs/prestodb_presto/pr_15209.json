{"pr_number": 15209, "pr_title": "Collapse nested DEREF expressions into a single one", "pr_createdAt": "2020-09-22T21:10:48Z", "pr_url": "https://github.com/prestodb/presto/pull/15209", "timeline": [{"oid": "9dbe03e1403f953f6061ab158a10494875030056", "url": "https://github.com/prestodb/presto/commit/9dbe03e1403f953f6061ab158a10494875030056", "message": "Collapse nested DEREF expressions into a single one.", "committedDate": "2020-09-22T23:51:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNjI1MA==", "url": "https://github.com/prestodb/presto/pull/15209#discussion_r495616250", "bodyText": "testDereference", "author": "highker", "createdAt": "2020-09-27T21:05:59Z", "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -5376,4 +5376,17 @@ public void testDistinctFrom()\n                 \"SELECT NULL IS DISTINCT FROM R.name FROM nation N LEFT OUTER JOIN region R ON N.regionkey = R.regionkey AND R.regionkey = 2 WHERE N.name='JAPAN'\",\n                 \"SELECT TRUE\");\n     }\n+\n+    @Test\n+    public void derefTest()", "originalCommit": "9dbe03e1403f953f6061ab158a10494875030056", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NDc0NA==", "url": "https://github.com/prestodb/presto/pull/15209#discussion_r496094744", "bodyText": "Done", "author": "kaikalur", "createdAt": "2020-09-28T16:51:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNjI1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNjI3OA==", "url": "https://github.com/prestodb/presto/pull/15209#discussion_r495616278", "bodyText": "put each param to its own line", "author": "highker", "createdAt": "2020-09-27T21:06:13Z", "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -5376,4 +5376,17 @@ public void testDistinctFrom()\n                 \"SELECT NULL IS DISTINCT FROM R.name FROM nation N LEFT OUTER JOIN region R ON N.regionkey = R.regionkey AND R.regionkey = 2 WHERE N.name='JAPAN'\",\n                 \"SELECT TRUE\");\n     }\n+\n+    @Test\n+    public void derefTest()\n+    {\n+        assertQuery(\"select cast(row(row(row(random(10), if(random(10) >= 0, 2)), random(10)), random(100)) AS row(x row(y row(a int, b int), c int), d int)).x.y.b\",\n+                \"select 2\");\n+        assertQuery(\"select cast(row(row(row(random(10), if(random(10) < 0, 2)), random(10)), random(100)) AS row(x row(y row(a int, b int), c int), d int)).x.y.b\",\n+                \"select null\");\n+        assertQuery(\"select cast(row(row(null, random(10)), random(100)) AS row(x row(y row(a int, b int), c int), d int)).x.y.b\",\n+                \"select null\");\n+        assertQuery(\"select cast(row(row(null, if(random(100) >= 0, 4)), random(10)) AS row(x row(y row(a int, b int), c int), d int)).x.c\",\n+                \"select 4\");", "originalCommit": "9dbe03e1403f953f6061ab158a10494875030056", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NDgxNA==", "url": "https://github.com/prestodb/presto/pull/15209#discussion_r496094814", "bodyText": "Done", "author": "kaikalur", "createdAt": "2020-09-28T16:51:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNjI3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNjMzOQ==", "url": "https://github.com/prestodb/presto/pull/15209#discussion_r495616339", "bodyText": "nestedDereferences\nalso, we don't use Stack data structure. Try something different like Deque", "author": "highker", "createdAt": "2020-09-27T21:06:58Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/DereferenceCodeGenerator.java", "diffHunk": "@@ -41,50 +43,67 @@ public BytecodeNode generateExpression(BytecodeGeneratorContext generator, Type\n         checkArgument(arguments.size() == 2);\n         CallSiteBinder callSiteBinder = generator.getCallSiteBinder();\n \n-        BytecodeBlock block = new BytecodeBlock().comment(\"DEREFERENCE\").setDescription(\"DEREFERENCE\");\n-        Variable wasNull = generator.wasNull();\n-        Variable rowBlock = generator.getScope().createTempVariable(Block.class);\n-        int index = ((Number) ((ConstantExpression) arguments.get(1)).getValue()).intValue();\n+        // Collect all nested intermediateDerefs\n+        Stack<RowExpression> nestedDerefs = new Stack<RowExpression>();", "originalCommit": "9dbe03e1403f953f6061ab158a10494875030056", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NzA1Mw==", "url": "https://github.com/prestodb/presto/pull/15209#discussion_r496097053", "bodyText": "Done.\nChanged to List/ArrayList", "author": "kaikalur", "createdAt": "2020-09-28T16:55:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNjMzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNjM5NQ==", "url": "https://github.com/prestodb/presto/pull/15209#discussion_r495616395", "bodyText": "remove final", "author": "highker", "createdAt": "2020-09-27T21:07:35Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/DereferenceCodeGenerator.java", "diffHunk": "@@ -41,50 +43,67 @@ public BytecodeNode generateExpression(BytecodeGeneratorContext generator, Type\n         checkArgument(arguments.size() == 2);\n         CallSiteBinder callSiteBinder = generator.getCallSiteBinder();\n \n-        BytecodeBlock block = new BytecodeBlock().comment(\"DEREFERENCE\").setDescription(\"DEREFERENCE\");\n-        Variable wasNull = generator.wasNull();\n-        Variable rowBlock = generator.getScope().createTempVariable(Block.class);\n-        int index = ((Number) ((ConstantExpression) arguments.get(1)).getValue()).intValue();\n+        // Collect all nested intermediateDerefs\n+        Stack<RowExpression> nestedDerefs = new Stack<RowExpression>();\n+        RowExpression nestedObject = arguments.get(0);\n+        final int leafFieldIndex = ((Number) ((ConstantExpression) arguments.get(1)).getValue()).intValue();", "originalCommit": "9dbe03e1403f953f6061ab158a10494875030056", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5OTU0Ng==", "url": "https://github.com/prestodb/presto/pull/15209#discussion_r496099546", "bodyText": "Done", "author": "kaikalur", "createdAt": "2020-09-28T16:59:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNjM5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNjQ3Ng==", "url": "https://github.com/prestodb/presto/pull/15209#discussion_r495616476", "bodyText": "nestedDereference", "author": "highker", "createdAt": "2020-09-27T21:08:37Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/DereferenceCodeGenerator.java", "diffHunk": "@@ -41,50 +43,67 @@ public BytecodeNode generateExpression(BytecodeGeneratorContext generator, Type\n         checkArgument(arguments.size() == 2);\n         CallSiteBinder callSiteBinder = generator.getCallSiteBinder();\n \n-        BytecodeBlock block = new BytecodeBlock().comment(\"DEREFERENCE\").setDescription(\"DEREFERENCE\");\n-        Variable wasNull = generator.wasNull();\n-        Variable rowBlock = generator.getScope().createTempVariable(Block.class);\n-        int index = ((Number) ((ConstantExpression) arguments.get(1)).getValue()).intValue();\n+        // Collect all nested intermediateDerefs\n+        Stack<RowExpression> nestedDerefs = new Stack<RowExpression>();\n+        RowExpression nestedObject = arguments.get(0);\n+        final int leafFieldIndex = ((Number) ((ConstantExpression) arguments.get(1)).getValue()).intValue();\n \n-        // clear the wasNull flag before evaluating the row value\n-        block.putVariable(wasNull, false);\n-        block.append(generator.generate(arguments.get(0), Optional.empty())).putVariable(rowBlock);\n+        // Find all the intermediate nestedDerefs.\n+        while (nestedObject instanceof SpecialFormExpression &&\n+                ((SpecialFormExpression) nestedObject).getForm() == DEREFERENCE) {\n+            nestedDerefs.push(nestedObject);\n+            nestedObject = ((SpecialFormExpression) nestedObject).getArguments().get(0);\n+        }\n \n-        IfStatement ifRowBlockIsNull = new IfStatement(\"if row block is null...\")\n-                .condition(wasNull);\n+        // Here nestedObject is the inner-most expression (so the toplevel object)\n+        // Just generate a loop\n+        BytecodeBlock block = new BytecodeBlock().comment(\"DEREFERENCE\").setDescription(\"DEREFERENCE\");\n+        Variable rowBlock = generator.getScope().createTempVariable(Block.class);\n+        Variable wasNull = generator.wasNull();\n \n-        Class<?> javaType = returnType.getJavaType();\n+        // Labels for control-flow\n         LabelNode end = new LabelNode(\"end\");\n-        ifRowBlockIsNull.ifTrue()\n-                .comment(\"if row block is null, push null to the stack and goto 'end' label (return)\")\n-                .putVariable(wasNull, true)\n-                .pushJavaDefault(javaType)\n-                .gotoLabel(end);\n-\n-        block.append(ifRowBlockIsNull);\n+        LabelNode returnNull = new LabelNode(\"returnNull\");\n \n-        IfStatement ifFieldIsNull = new IfStatement(\"if row field is null...\");\n-        ifFieldIsNull.condition()\n-                .comment(\"call rowBlock.isNull(index)\")\n-                .append(rowBlock)\n-                .push(index)\n-                .invokeInterface(Block.class, \"isNull\", boolean.class, int.class);\n+        // clear the wasNull flag before evaluating the row value and evaluate the root (innermost) object\n+        block.putVariable(wasNull, false)\n+                .append(generator.generate(nestedObject, Optional.empty()))\n+                .putVariable(rowBlock)\n+                .comment(\"If the object is null return null\")\n+                .append(wasNull)\n+                .ifTrueGoto(returnNull);\n \n-        ifFieldIsNull.ifTrue()\n-                .comment(\"if the field is null, push null to stack\")\n-                .putVariable(wasNull, true)\n-                .pushJavaDefault(javaType);\n+        while (!nestedDerefs.empty()) {\n+            SpecialFormExpression nestedDeref = (SpecialFormExpression) nestedDerefs.pop();", "originalCommit": "9dbe03e1403f953f6061ab158a10494875030056", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5OTQ5MA==", "url": "https://github.com/prestodb/presto/pull/15209#discussion_r496099490", "bodyText": "Done", "author": "kaikalur", "createdAt": "2020-09-28T16:59:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNjQ3Ng=="}], "type": "inlineReview"}, {"oid": "bdf59f78f17ad71a3322ad82c73fe604f0c097b4", "url": "https://github.com/prestodb/presto/commit/bdf59f78f17ad71a3322ad82c73fe604f0c097b4", "message": "Collapse nested DEREF expressions into a single one.", "committedDate": "2020-09-28T16:59:31Z", "type": "forcePushed"}, {"oid": "0110e9819ea032c2aaf48d074c8d042bbd1e299c", "url": "https://github.com/prestodb/presto/commit/0110e9819ea032c2aaf48d074c8d042bbd1e299c", "message": "Collapse nested DEREF expressions into a single one.", "committedDate": "2020-09-29T02:50:29Z", "type": "forcePushed"}, {"oid": "e32c5981ab5729e8e926ac27f10d08093ffe8004", "url": "https://github.com/prestodb/presto/commit/e32c5981ab5729e8e926ac27f10d08093ffe8004", "message": "Collapse nested DEREF expressions into a single one.", "committedDate": "2020-09-29T15:33:05Z", "type": "forcePushed"}, {"oid": "07798425f26a14b2ad459e33bc583b891afa568f", "url": "https://github.com/prestodb/presto/commit/07798425f26a14b2ad459e33bc583b891afa568f", "message": "Collapse nested DEREF expressions into a single one.", "committedDate": "2020-09-29T20:48:58Z", "type": "commit"}, {"oid": "07798425f26a14b2ad459e33bc583b891afa568f", "url": "https://github.com/prestodb/presto/commit/07798425f26a14b2ad459e33bc583b891afa568f", "message": "Collapse nested DEREF expressions into a single one.", "committedDate": "2020-09-29T20:48:58Z", "type": "forcePushed"}]}