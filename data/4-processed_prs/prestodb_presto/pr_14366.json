{"pr_number": 14366, "pr_title": "Support SHOW CREATE FUNCTION", "pr_createdAt": "2020-04-08T08:19:00Z", "pr_url": "https://github.com/prestodb/presto/pull/14366", "timeline": [{"oid": "e71176b84b6f8691c16bb1bec7930082de3c5c93", "url": "https://github.com/prestodb/presto/commit/e71176b84b6f8691c16bb1bec7930082de3c5c93", "message": "Support SHOW CREATE FUNCTION", "committedDate": "2020-04-08T08:19:54Z", "type": "forcePushed"}, {"oid": "d09f8b65ee25f2799952716ca1ff24e5bb05c1d5", "url": "https://github.com/prestodb/presto/commit/d09f8b65ee25f2799952716ca1ff24e5bb05c1d5", "message": "Support SHOW CREATE FUNCTION", "committedDate": "2020-04-08T08:22:08Z", "type": "forcePushed"}, {"oid": "b688080076d327e2f050ab17f2e0c85f97e34bb2", "url": "https://github.com/prestodb/presto/commit/b688080076d327e2f050ab17f2e0c85f97e34bb2", "message": "Support SHOW CREATE FUNCTION", "committedDate": "2020-04-10T19:33:23Z", "type": "forcePushed"}, {"oid": "87d4c458e674ee05f3ab41dbd8be5ae5c6172733", "url": "https://github.com/prestodb/presto/commit/87d4c458e674ee05f3ab41dbd8be5ae5c6172733", "message": "Support SHOW CREATE FUNCTION", "committedDate": "2020-04-10T20:04:46Z", "type": "forcePushed"}, {"oid": "6a79dcd7f4fbf219367905bab86048f312483090", "url": "https://github.com/prestodb/presto/commit/6a79dcd7f4fbf219367905bab86048f312483090", "message": "Support SHOW CREATE FUNCTION", "committedDate": "2020-04-10T20:46:14Z", "type": "forcePushed"}, {"oid": "e9ad9033ce8607b1d521390829eebe8b77c2f5fc", "url": "https://github.com/prestodb/presto/commit/e9ad9033ce8607b1d521390829eebe8b77c2f5fc", "message": "Support SHOW CREATE FUNCTION", "committedDate": "2020-04-10T23:48:59Z", "type": "forcePushed"}, {"oid": "1ad0d6c51ac579a47e09d947a16b488d0c92b9c3", "url": "https://github.com/prestodb/presto/commit/1ad0d6c51ac579a47e09d947a16b488d0c92b9c3", "message": "Support SHOW CREATE FUNCTION", "committedDate": "2020-04-11T00:23:38Z", "type": "forcePushed"}, {"oid": "075d2a6e3b7a019d17cf83bf0512d69d85aff245", "url": "https://github.com/prestodb/presto/commit/075d2a6e3b7a019d17cf83bf0512d69d85aff245", "message": "Support SHOW CREATE FUNCTION", "committedDate": "2020-04-11T00:27:27Z", "type": "forcePushed"}, {"oid": "bba49f899b1d2d36c86abadad1f2b139a27a753d", "url": "https://github.com/prestodb/presto/commit/bba49f899b1d2d36c86abadad1f2b139a27a753d", "message": "Support SHOW CREATE FUNCTION", "committedDate": "2020-04-11T00:29:29Z", "type": "forcePushed"}, {"oid": "5bb96e0e4e6a87ca7a5415bd6620f9b0a8b872ab", "url": "https://github.com/prestodb/presto/commit/5bb96e0e4e6a87ca7a5415bd6620f9b0a8b872ab", "message": "Support SHOW CREATE FUNCTION", "committedDate": "2020-04-11T00:34:04Z", "type": "forcePushed"}, {"oid": "0b5270102dcf0b0741b3e2d6148b9dbf7517e11c", "url": "https://github.com/prestodb/presto/commit/0b5270102dcf0b0741b3e2d6148b9dbf7517e11c", "message": "Support SHOW CREATE FUNCTION", "committedDate": "2020-04-11T00:40:37Z", "type": "forcePushed"}, {"oid": "4f662caf29fc9a98d5d06c06f53d43493feb81f3", "url": "https://github.com/prestodb/presto/commit/4f662caf29fc9a98d5d06c06f53d43493feb81f3", "message": "Support SHOW CREATE FUNCTION", "committedDate": "2020-04-11T00:42:42Z", "type": "forcePushed"}, {"oid": "2f6be7e81477f8d99e6195ee2bbfda6560858f6c", "url": "https://github.com/prestodb/presto/commit/2f6be7e81477f8d99e6195ee2bbfda6560858f6c", "message": "Support SHOW CREATE FUNCTION", "committedDate": "2020-04-11T00:49:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5ODc4MA==", "url": "https://github.com/prestodb/presto/pull/14366#discussion_r406998780", "bodyText": "Wow so we actually rebuild the create function? I thought we remember it in the DB at creation time and just return it.", "author": "kaikalur", "createdAt": "2020-04-11T01:18:07Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/rewrite/ShowQueriesRewrite.java", "diffHunk": "@@ -478,6 +492,66 @@ protected Node visitShowCreate(ShowCreate node, Void context)\n             throw new UnsupportedOperationException(\"SHOW CREATE only supported for tables and views\");\n         }\n \n+        @Override\n+        protected Node visitShowCreateFunction(ShowCreateFunction node, Void context)\n+        {\n+            QualifiedFunctionName functionName = qualifyFunctionName(node.getName());\n+            Collection<? extends SqlFunction> functions = metadata.getFunctionManager().getFunctions(session.getRequiredTransactionId(), functionName);\n+            if (node.getParameterTypes().isPresent()) {\n+                List<TypeSignature> parameterTypes = node.getParameterTypes().get().stream()\n+                        .map(TypeSignature::parseTypeSignature)\n+                        .collect(toImmutableList());\n+                functions = functions.stream()\n+                        .filter(function -> function.getSignature().getArgumentTypes().equals(parameterTypes))\n+                        .collect(toImmutableList());\n+            }\n+            if (functions.isEmpty()) {\n+                String types = node.getParameterTypes().isPresent()\n+                        ? format(\"(%s)\", Joiner.on(\", \").join(node.getParameterTypes().get()))\n+                        : \"\";\n+                throw new PrestoException(FUNCTION_NOT_FOUND, format(\"Function not found: %s%s\", functionName, types));\n+            }\n+\n+            ImmutableList.Builder<Expression> rows = ImmutableList.builder();\n+            for (SqlFunction function : functions) {\n+                if (!(function instanceof SqlInvokedFunction)) {\n+                    throw new PrestoException(GENERIC_USER_ERROR, \"SHOW CREATE FUNCTION only supported for SQL functions\");\n+                }\n+\n+                SqlInvokedFunction sqlFunction = (SqlInvokedFunction) function;\n+                CreateFunction createFunction = new CreateFunction(\n+                        node.getName(),\n+                        false,\n+                        sqlFunction.getParameters().stream()\n+                                .map(parameter -> new SqlParameterDeclaration(new Identifier(parameter.getName(), true), parameter.getType().toString()))", "originalCommit": "2f6be7e81477f8d99e6195ee2bbfda6560858f6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEzODU0Nw==", "url": "https://github.com/prestodb/presto/pull/14366#discussion_r407138547", "bodyText": "Yes, we're storing different component of a SQL function as separate columns in the DB, as opposed to the entire CREATE FUNCTION statement.", "author": "caithagoras", "createdAt": "2020-04-12T03:06:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5ODc4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5OTczMA==", "url": "https://github.com/prestodb/presto/pull/14366#discussion_r406999730", "bodyText": "Also add test for things like 'ARRAY_AGG'. What happens when someone tries that?", "author": "kaikalur", "createdAt": "2020-04-11T01:27:09Z", "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java", "diffHunk": "@@ -73,4 +121,81 @@ public void testDropFunctionInvalidFunctionName()\n                 \"DROP FUNCTION presto.default.sin (double)\",\n                 \"Cannot drop function in built-in function namespace: presto\\\\.default\\\\.sin\");\n     }\n+\n+    @Test\n+    public void testInvalidFunctionName()\n+    {\n+        assertQueryFails(\"SELECT x.y(1)\", \".*Non-builtin functions must be referenced by 'catalog\\\\.schema\\\\.function_name', found: x\\\\.y\");\n+        assertQueryFails(\"SELECT x.y.z.w()\", \".*Non-builtin functions must be referenced by 'catalog\\\\.schema\\\\.function_name', found: x\\\\.y\\\\.z\\\\.w\");\n+    }\n+\n+    @Test\n+    public void testSqlFunctions()\n+    {\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.common.array_append(a array<int>, x int)\\n\" +\n+                \"RETURNS array<int>\\n\" +\n+                \"RETURN concat(a, array[x])\");\n+        assertQuery(\"SELECT testing.common.array_append(ARRAY[1, 2, 4], 8)\", \"SELECT ARRAY[1, 2, 4, 8]\");\n+    }\n+\n+    @Test\n+    public void testShowCreateFunctions()\n+    {\n+        @Language(\"SQL\") String createFunctionInt = \"CREATE FUNCTION testing.common.array_append(a array<int>, x int)\\n\" +\n+                \"RETURNS array<int>\\n\" +\n+                \"RETURN concat(a, array[x])\";\n+        @Language(\"SQL\") String createFunctionDouble = \"CREATE FUNCTION testing.common.array_append(a array<double>, x double)\\n\" +\n+                \"RETURNS array<double>\\n\" +\n+                \"RETURN concat(a, array[x])\";\n+        @Language(\"SQL\") String createFunctionRand = \"CREATE FUNCTION testing.common.rand()\\n\" +\n+                \"RETURNS double\\n\" +\n+                \"RETURN rand()\";\n+        String createFunctionIntFormatted = \"CREATE FUNCTION testing.common.array_append (\\n\" +\n+                \"   \\\"a\\\" ARRAY(integer),\\n\" +\n+                \"   \\\"x\\\" integer\\n\" +\n+                \")\\n\" +\n+                \"RETURNS ARRAY(integer)\\n\" +\n+                \"COMMENT ''\\n\" +\n+                \"LANGUAGE SQL\\n\" +\n+                \"NOT DETERMINISTIC\\n\" +\n+                \"CALLED ON NULL INPUT\\n\" +\n+                \"RETURN \\\"concat\\\"(a, ARRAY[x])\";\n+        String createFunctionDoubleFormatted = \"CREATE FUNCTION testing.common.array_append (\\n\" +\n+                \"   \\\"a\\\" ARRAY(double),\\n\" +\n+                \"   \\\"x\\\" double\\n\" +\n+                \")\\n\" +\n+                \"RETURNS ARRAY(double)\\n\" +\n+                \"COMMENT ''\\n\" +\n+                \"LANGUAGE SQL\\n\" +\n+                \"NOT DETERMINISTIC\\n\" +\n+                \"CALLED ON NULL INPUT\\n\" +\n+                \"RETURN \\\"concat\\\"(a, ARRAY[x])\";\n+        String createFunctionRandFormatted = \"CREATE FUNCTION testing.common.rand ()\\n\" +\n+                \"RETURNS double\\n\" +\n+                \"COMMENT ''\\n\" +\n+                \"LANGUAGE SQL\\n\" +\n+                \"NOT DETERMINISTIC\\n\" +\n+                \"CALLED ON NULL INPUT\\n\" +\n+                \"RETURN \\\"rand\\\"()\";\n+        String parameterTypeInt = \"ARRAY(integer), integer\";\n+        String parameterTypeDouble = \"ARRAY(double), double\";\n+\n+        assertQuerySucceeds(createFunctionInt);\n+        assertQuerySucceeds(createFunctionDouble);\n+        assertQuerySucceeds(createFunctionRand);\n+\n+        MaterializedResult rows = computeActual(\"SHOW CREATE FUNCTION testing.common.array_append\");\n+        assertEquals(rows.getRowCount(), 2);\n+        assertEquals(rows.getMaterializedRows().get(0).getFields(), ImmutableList.of(createFunctionDoubleFormatted, parameterTypeDouble));\n+        assertEquals(rows.getMaterializedRows().get(1).getFields(), ImmutableList.of(createFunctionIntFormatted, parameterTypeInt));\n+\n+        rows = computeActual(\"SHOW CREATE FUNCTION testing.common.array_append(array(int), int)\");\n+        assertEquals(rows.getRowCount(), 1);\n+        assertEquals(rows.getMaterializedRows().get(0).getFields(), ImmutableList.of(createFunctionIntFormatted, parameterTypeInt));\n+\n+        rows = computeActual(\"SHOW CREATE FUNCTION testing.common.rand()\");\n+        assertEquals(rows.getMaterializedRows().get(0).getFields(), ImmutableList.of(createFunctionRandFormatted, \"\"));\n+\n+        assertQueryFails(\"SHOW CREATE FUNCTION testing.common.array_append()\", \"Function not found: testing\\\\.common\\\\.array_append\\\\(\\\\)\");", "originalCommit": "2f6be7e81477f8d99e6195ee2bbfda6560858f6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEzODUyMg==", "url": "https://github.com/prestodb/presto/pull/14366#discussion_r407138522", "bodyText": "test added", "author": "caithagoras", "createdAt": "2020-04-12T03:06:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5OTczMA=="}], "type": "inlineReview"}, {"oid": "07a4ca7bb41226b58e02260f3023ec2b84816582", "url": "https://github.com/prestodb/presto/commit/07a4ca7bb41226b58e02260f3023ec2b84816582", "message": "Support SHOW CREATE FUNCTION", "committedDate": "2020-04-11T01:35:21Z", "type": "forcePushed"}, {"oid": "634a67f45083b328f05fe5e5570ff605c69e6c07", "url": "https://github.com/prestodb/presto/commit/634a67f45083b328f05fe5e5570ff605c69e6c07", "message": "Support SHOW CREATE FUNCTION", "committedDate": "2020-04-11T01:45:34Z", "type": "forcePushed"}, {"oid": "92557b19109af3cf7a1250ab9dc84924ec6217f2", "url": "https://github.com/prestodb/presto/commit/92557b19109af3cf7a1250ab9dc84924ec6217f2", "message": "Support SHOW CREATE FUNCTION", "committedDate": "2020-04-11T01:48:02Z", "type": "forcePushed"}, {"oid": "3674a8880ccde87ebcfadd7a78718866543b4250", "url": "https://github.com/prestodb/presto/commit/3674a8880ccde87ebcfadd7a78718866543b4250", "message": "Support SHOW CREATE FUNCTION", "committedDate": "2020-04-11T01:54:20Z", "type": "forcePushed"}, {"oid": "90a6e64e42d93a4f3393bdbb64ec7638dd21c980", "url": "https://github.com/prestodb/presto/commit/90a6e64e42d93a4f3393bdbb64ec7638dd21c980", "message": "Support SHOW CREATE FUNCTION", "committedDate": "2020-04-11T02:15:13Z", "type": "forcePushed"}, {"oid": "e81cf8ed285fb670deb3cece4cf65d6f3e98d489", "url": "https://github.com/prestodb/presto/commit/e81cf8ed285fb670deb3cece4cf65d6f3e98d489", "message": "Support SHOW CREATE FUNCTION\n\nSupport syntax, semantic analysis, and execution for SHOW CREATE\nFUNCTION. An optional list of parameter types may be specified.\n\nFor each matching signature, returns the canonical CREATE FUNCTION\nthat can be used to create the exact same function, along with\nthe parameter type list of that function signature so that user\ncan differentiate among the functions.", "committedDate": "2020-04-11T02:52:31Z", "type": "forcePushed"}, {"oid": "081aa4802f2e5eaade648c2465b96ff249ca9cf1", "url": "https://github.com/prestodb/presto/commit/081aa4802f2e5eaade648c2465b96ff249ca9cf1", "message": "Support SHOW CREATE FUNCTION\n\nSupport syntax, semantic analysis, and execution for SHOW CREATE\nFUNCTION. An optional list of parameter types may be specified.\n\nFor each matching signature, returns the canonical CREATE FUNCTION\nthat can be used to create the exact same function, along with\nthe parameter type list of that function signature so that user\ncan differentiate among the functions.", "committedDate": "2020-04-11T08:18:00Z", "type": "forcePushed"}, {"oid": "607e638220ed8a0dbaf0729a1833bd2e86364c12", "url": "https://github.com/prestodb/presto/commit/607e638220ed8a0dbaf0729a1833bd2e86364c12", "message": "Support SHOW CREATE FUNCTION\n\nSupport syntax, semantic analysis, and execution for SHOW CREATE\nFUNCTION. An optional list of parameter types may be specified.\n\nFor each matching signature, returns the canonical CREATE FUNCTION\nquery text that can be used to create the exact same function,\nalong with the parameter type list of that function signature so\nthat user can differentiate among the functions.", "committedDate": "2020-04-12T03:05:09Z", "type": "forcePushed"}, {"oid": "7aeec4e652751e31c4f02783b51c50493718e281", "url": "https://github.com/prestodb/presto/commit/7aeec4e652751e31c4f02783b51c50493718e281", "message": "Support SHOW CREATE FUNCTION\n\nSupport syntax, semantic analysis, and execution for SHOW CREATE\nFUNCTION. An optional list of parameter types may be specified.\n\nFor each matching signature, returns the canonical CREATE FUNCTION\nquery text that can be used to create the exact same function,\nalong with the parameter type list of that function signature so\nthat user can differentiate among the functions.", "committedDate": "2020-04-12T03:35:58Z", "type": "forcePushed"}, {"oid": "4caad79326ea9e31ba20dfb9636d09e0e1bb1e89", "url": "https://github.com/prestodb/presto/commit/4caad79326ea9e31ba20dfb9636d09e0e1bb1e89", "message": "Support SHOW CREATE FUNCTION\n\nSupport syntax, semantic analysis, and execution for SHOW CREATE\nFUNCTION. An optional list of parameter types may be specified.\n\nFor each matching signature, returns the canonical CREATE FUNCTION\nquery text that can be used to create the exact same function,\nalong with the parameter type list of that function signature so\nthat user can differentiate among the functions.", "committedDate": "2020-04-12T03:51:56Z", "type": "forcePushed"}, {"oid": "e9fcefe0227e06c634630dfb340311dbcc46f73f", "url": "https://github.com/prestodb/presto/commit/e9fcefe0227e06c634630dfb340311dbcc46f73f", "message": "Support SHOW CREATE FUNCTION\n\nSupport syntax, semantic analysis, and execution for SHOW CREATE\nFUNCTION. An optional list of parameter types may be specified.\n\nFor each matching signature, returns the canonical CREATE FUNCTION\nquery text that can be used to create the exact same function,\nalong with the parameter type list of that function signature so\nthat user can differentiate among the functions.", "committedDate": "2020-04-12T07:27:51Z", "type": "forcePushed"}, {"oid": "78a2667e063bfd1c3f53ae577113db989b0c3e9c", "url": "https://github.com/prestodb/presto/commit/78a2667e063bfd1c3f53ae577113db989b0c3e9c", "message": "Support SHOW CREATE FUNCTION\n\nSupport syntax, semantic analysis, and execution for SHOW CREATE\nFUNCTION. An optional list of parameter types may be specified.\n\nFor each matching signature, returns the canonical CREATE FUNCTION\nquery text that can be used to create the exact same function,\nalong with the parameter type list of that function signature so\nthat user can differentiate among the functions.", "committedDate": "2020-04-12T08:11:32Z", "type": "forcePushed"}, {"oid": "1b22333baf2c4464c060fdcd5fc477fb0ed045c6", "url": "https://github.com/prestodb/presto/commit/1b22333baf2c4464c060fdcd5fc477fb0ed045c6", "message": "Support SHOW CREATE FUNCTION\n\nSupport syntax, semantic analysis, and execution for SHOW CREATE\nFUNCTION. An optional list of parameter types may be specified.\n\nFor each matching signature, returns the canonical CREATE FUNCTION\nquery text that can be used to create the exact same function,\nalong with the parameter type list of that function signature so\nthat user can differentiate among the functions.", "committedDate": "2020-04-12T09:24:59Z", "type": "forcePushed"}, {"oid": "3020959b6dfcc2c1ae01a01b10f317bb8278bf49", "url": "https://github.com/prestodb/presto/commit/3020959b6dfcc2c1ae01a01b10f317bb8278bf49", "message": "Support SHOW CREATE FUNCTION\n\nSupport syntax, semantic analysis, and execution for SHOW CREATE\nFUNCTION. An optional list of parameter types may be specified.\n\nFor each matching signature, returns the canonical CREATE FUNCTION\nquery text that can be used to create the exact same function,\nalong with the parameter type list of that function signature so\nthat user can differentiate among the functions.", "committedDate": "2020-04-12T12:33:33Z", "type": "forcePushed"}, {"oid": "8817300305b5e8dacaae8f67029d49612fea8f89", "url": "https://github.com/prestodb/presto/commit/8817300305b5e8dacaae8f67029d49612fea8f89", "message": "Support SHOW CREATE FUNCTION\n\nSupport syntax, semantic analysis, and execution for SHOW CREATE\nFUNCTION. An optional list of parameter types may be specified.\n\nFor each matching signature, returns the canonical CREATE FUNCTION\nquery text that can be used to create the exact same function,\nalong with the parameter type list of that function signature so\nthat user can differentiate among the functions.", "committedDate": "2020-04-12T23:55:16Z", "type": "forcePushed"}, {"oid": "191f29fe67cd2204adf9bacb388004e4d61a8b2a", "url": "https://github.com/prestodb/presto/commit/191f29fe67cd2204adf9bacb388004e4d61a8b2a", "message": "Support SHOW CREATE FUNCTION\n\nSupport syntax, semantic analysis, and execution for SHOW CREATE\nFUNCTION. An optional list of parameter types may be specified.\n\nFor each matching signature, returns the canonical CREATE FUNCTION\nquery text that can be used to create the exact same function,\nalong with the parameter type list of that function signature so\nthat user can differentiate among the functions.", "committedDate": "2020-04-14T09:28:45Z", "type": "forcePushed"}, {"oid": "f6eac2e9a62d5afc101da28f3f5efefeb64d0749", "url": "https://github.com/prestodb/presto/commit/f6eac2e9a62d5afc101da28f3f5efefeb64d0749", "message": "Support SHOW CREATE FUNCTION\n\nSupport syntax, semantic analysis, and execution for SHOW CREATE\nFUNCTION. An optional list of parameter types may be specified.\n\nFor each matching signature, returns the canonical CREATE FUNCTION\nquery text that can be used to create the exact same function,\nalong with the parameter type list of that function signature so\nthat user can differentiate among the functions.", "committedDate": "2020-04-14T09:44:00Z", "type": "forcePushed"}, {"oid": "bd55b43fe5861c90080b1cc1eb3693c8b8cfb3c9", "url": "https://github.com/prestodb/presto/commit/bd55b43fe5861c90080b1cc1eb3693c8b8cfb3c9", "message": "Support SHOW CREATE FUNCTION\n\nSupport syntax, semantic analysis, and execution for SHOW CREATE\nFUNCTION. An optional list of parameter types may be specified.\n\nFor each matching signature, returns the canonical CREATE FUNCTION\nquery text that can be used to create the exact same function,\nalong with the parameter type list of that function signature so\nthat user can differentiate among the functions.", "committedDate": "2020-04-14T10:10:28Z", "type": "forcePushed"}, {"oid": "892842d2bfc0355b85db98d5e83f72889a2ceb87", "url": "https://github.com/prestodb/presto/commit/892842d2bfc0355b85db98d5e83f72889a2ceb87", "message": "Support SHOW CREATE FUNCTION\n\nSupport syntax, semantic analysis, and execution for SHOW CREATE\nFUNCTION. An optional list of parameter types may be specified.\n\nFor each matching signature, returns the canonical CREATE FUNCTION\nquery text that can be used to create the exact same function,\nalong with the parameter type list of that function signature so\nthat user can differentiate among the functions.", "committedDate": "2020-04-14T22:27:19Z", "type": "forcePushed"}, {"oid": "983b1c8f20259aca7073913305ad2dfcbb719f01", "url": "https://github.com/prestodb/presto/commit/983b1c8f20259aca7073913305ad2dfcbb719f01", "message": "Support SHOW CREATE FUNCTION\n\nSupport syntax, semantic analysis, and execution for SHOW CREATE\nFUNCTION. An optional list of parameter types may be specified.\n\nFor each matching signature, returns the canonical CREATE FUNCTION\nquery text that can be used to create the exact same function,\nalong with the parameter type list of that function signature so\nthat user can differentiate among the functions.", "committedDate": "2020-04-15T22:11:02Z", "type": "forcePushed"}, {"oid": "2a804c92cc315f0e7be3b866dbf90c25886eb9d8", "url": "https://github.com/prestodb/presto/commit/2a804c92cc315f0e7be3b866dbf90c25886eb9d8", "message": "Support SHOW CREATE FUNCTION\n\nSupport syntax, semantic analysis, and execution for SHOW CREATE\nFUNCTION. An optional list of parameter types may be specified.\n\nFor each matching signature, returns the canonical CREATE FUNCTION\nquery text that can be used to create the exact same function,\nalong with the parameter type list of that function signature so\nthat user can differentiate among the functions.", "committedDate": "2020-04-22T00:08:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ0NDQzNQ==", "url": "https://github.com/prestodb/presto/pull/14366#discussion_r413444435", "bodyText": "Hmm, isn't it a little extreme to require transaction to run SHOW CREATE FUNCTION? It's probably ok to just fetch some version?", "author": "rongrong", "createdAt": "2020-04-23T01:32:57Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/rewrite/ShowQueriesRewrite.java", "diffHunk": "@@ -478,6 +492,66 @@ protected Node visitShowCreate(ShowCreate node, Void context)\n             throw new UnsupportedOperationException(\"SHOW CREATE only supported for tables and views\");\n         }\n \n+        @Override\n+        protected Node visitShowCreateFunction(ShowCreateFunction node, Void context)\n+        {\n+            QualifiedFunctionName functionName = qualifyFunctionName(node.getName());\n+            Collection<? extends SqlFunction> functions = metadata.getFunctionManager().getFunctions(session.getRequiredTransactionId(), functionName);", "originalCommit": "2a804c92cc315f0e7be3b866dbf90c25886eb9d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ0NDczMg==", "url": "https://github.com/prestodb/presto/pull/14366#discussion_r413444732", "bodyText": "If you want to require transaction for sql functions, make the error message explicit at least.", "author": "rongrong", "createdAt": "2020-04-23T01:33:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ0NDQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2NTMwMA==", "url": "https://github.com/prestodb/presto/pull/14366#discussion_r414165300", "bodyText": "@rongrong\nFor 1: Transaction ID is guaranteed to exist during query execution, even for any single statement query.\nFor 2: If Transaction ID is missing, we're having an internal error here. The getRequiredTransaction method already checks for transactionId.isPresent() and will throw IllegalArgumentException with an error message, which will then be converted to a GENERIC_INTERNAL_ERROR.", "author": "caithagoras", "createdAt": "2020-04-23T22:27:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ0NDQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE5MjQzOA==", "url": "https://github.com/prestodb/presto/pull/14366#discussion_r416192438", "bodyText": "I don't think missing transaction ID should be an illegal argument exception. I also don't think it's necessary to require transaction ID to exist. The fact that it probably always exist is a different matter. I think function namespaces should still work when there's no transaction. You cannot guarantee versioning consistency, but other than that why it should fail altogether?", "author": "rongrong", "createdAt": "2020-04-27T22:27:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ0NDQzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ0NTMzNA==", "url": "https://github.com/prestodb/presto/pull/14366#discussion_r413445334", "bodyText": "you can probably just do node.getParameterTypes().map(...)", "author": "rongrong", "createdAt": "2020-04-23T01:35:50Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/rewrite/ShowQueriesRewrite.java", "diffHunk": "@@ -478,6 +492,66 @@ protected Node visitShowCreate(ShowCreate node, Void context)\n             throw new UnsupportedOperationException(\"SHOW CREATE only supported for tables and views\");\n         }\n \n+        @Override\n+        protected Node visitShowCreateFunction(ShowCreateFunction node, Void context)\n+        {\n+            QualifiedFunctionName functionName = qualifyFunctionName(node.getName());\n+            Collection<? extends SqlFunction> functions = metadata.getFunctionManager().getFunctions(session.getRequiredTransactionId(), functionName);\n+            if (node.getParameterTypes().isPresent()) {\n+                List<TypeSignature> parameterTypes = node.getParameterTypes().get().stream()\n+                        .map(TypeSignature::parseTypeSignature)\n+                        .collect(toImmutableList());\n+                functions = functions.stream()\n+                        .filter(function -> function.getSignature().getArgumentTypes().equals(parameterTypes))\n+                        .collect(toImmutableList());\n+            }\n+            if (functions.isEmpty()) {\n+                String types = node.getParameterTypes().isPresent()\n+                        ? format(\"(%s)\", Joiner.on(\", \").join(node.getParameterTypes().get()))", "originalCommit": "2a804c92cc315f0e7be3b866dbf90c25886eb9d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ0NTUxNQ==", "url": "https://github.com/prestodb/presto/pull/14366#discussion_r413445515", "bodyText": "is only supported", "author": "rongrong", "createdAt": "2020-04-23T01:36:21Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/rewrite/ShowQueriesRewrite.java", "diffHunk": "@@ -478,6 +492,66 @@ protected Node visitShowCreate(ShowCreate node, Void context)\n             throw new UnsupportedOperationException(\"SHOW CREATE only supported for tables and views\");\n         }\n \n+        @Override\n+        protected Node visitShowCreateFunction(ShowCreateFunction node, Void context)\n+        {\n+            QualifiedFunctionName functionName = qualifyFunctionName(node.getName());\n+            Collection<? extends SqlFunction> functions = metadata.getFunctionManager().getFunctions(session.getRequiredTransactionId(), functionName);\n+            if (node.getParameterTypes().isPresent()) {\n+                List<TypeSignature> parameterTypes = node.getParameterTypes().get().stream()\n+                        .map(TypeSignature::parseTypeSignature)\n+                        .collect(toImmutableList());\n+                functions = functions.stream()\n+                        .filter(function -> function.getSignature().getArgumentTypes().equals(parameterTypes))\n+                        .collect(toImmutableList());\n+            }\n+            if (functions.isEmpty()) {\n+                String types = node.getParameterTypes().isPresent()\n+                        ? format(\"(%s)\", Joiner.on(\", \").join(node.getParameterTypes().get()))\n+                        : \"\";\n+                throw new PrestoException(FUNCTION_NOT_FOUND, format(\"Function not found: %s%s\", functionName, types));\n+            }\n+\n+            ImmutableList.Builder<Expression> rows = ImmutableList.builder();\n+            for (SqlFunction function : functions) {\n+                if (!(function instanceof SqlInvokedFunction)) {\n+                    throw new PrestoException(GENERIC_USER_ERROR, \"SHOW CREATE FUNCTION only supported for SQL functions\");", "originalCommit": "2a804c92cc315f0e7be3b866dbf90c25886eb9d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ0NjY4Mg==", "url": "https://github.com/prestodb/presto/pull/14366#discussion_r413446682", "bodyText": "I like the old way better. It's a bit tedious but it's explicit.", "author": "rongrong", "createdAt": "2020-04-23T01:40:01Z", "path": "presto-parser/src/main/java/com/facebook/presto/sql/parser/AstBuilder.java", "diffHunk": "@@ -2186,11 +2193,14 @@ private static boolean isValidUnicodeEscape(char c)\n         throw new IllegalArgumentException(\"Unsupported quantifier: \" + symbol.getText());\n     }\n \n-    private List<String> getTypes(SqlBaseParser.TypesContext types)\n+    private Optional<List<String>> getTypes(@Nullable SqlBaseParser.TypesContext types)", "originalCommit": "2a804c92cc315f0e7be3b866dbf90c25886eb9d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ0NzIxMw==", "url": "https://github.com/prestodb/presto/pull/14366#discussion_r413447213", "bodyText": "Where is this used?", "author": "rongrong", "createdAt": "2020-04-23T01:41:27Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/StandardErrorCode.java", "diffHunk": "@@ -63,6 +63,7 @@\n     QUERY_HAS_TOO_MANY_STAGES(0x0000_0028, USER_ERROR),\n     INVALID_SPATIAL_PARTITIONING(0x0000_0029, USER_ERROR),\n     INVALID_ANALYZE_PROPERTY(0x0000_002A, USER_ERROR),\n+    INVALID_FUNCTION_NAME(0x0000_002B, USER_ERROR),", "originalCommit": "2a804c92cc315f0e7be3b866dbf90c25886eb9d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2MzA2Nw==", "url": "https://github.com/prestodb/presto/pull/14366#discussion_r414163067", "bodyText": "accidental change, removed.", "author": "caithagoras", "createdAt": "2020-04-23T22:22:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ0NzIxMw=="}], "type": "inlineReview"}, {"oid": "83513d121ab2e1efad7f9c50571ad3b70e58b199", "url": "https://github.com/prestodb/presto/commit/83513d121ab2e1efad7f9c50571ad3b70e58b199", "message": "Support SHOW CREATE FUNCTION\n\nSupport syntax, semantic analysis, and execution for SHOW CREATE\nFUNCTION. An optional list of parameter types may be specified.\n\nFor each matching signature, returns the canonical CREATE FUNCTION\nquery text that can be used to create the exact same function,\nalong with the parameter type list of that function signature so\nthat user can differentiate among the functions.", "committedDate": "2020-04-23T22:22:53Z", "type": "forcePushed"}, {"oid": "5c11203bde898905e90f686e1a0410180c353439", "url": "https://github.com/prestodb/presto/commit/5c11203bde898905e90f686e1a0410180c353439", "message": "Support SHOW CREATE FUNCTION\n\nSupport syntax, semantic analysis, and execution for SHOW CREATE\nFUNCTION. An optional list of parameter types may be specified.\n\nFor each matching signature, returns the canonical CREATE FUNCTION\nquery text that can be used to create the exact same function,\nalong with the parameter type list of that function signature so\nthat user can differentiate among the functions.", "committedDate": "2020-04-23T22:30:05Z", "type": "forcePushed"}, {"oid": "a740174186dab2d20290ebbada2205c6173531b9", "url": "https://github.com/prestodb/presto/commit/a740174186dab2d20290ebbada2205c6173531b9", "message": "Support SHOW CREATE FUNCTION\n\nSupport syntax, semantic analysis, and execution for SHOW CREATE\nFUNCTION. An optional list of parameter types may be specified.\n\nFor each matching signature, returns the canonical CREATE FUNCTION\nquery text that can be used to create the exact same function,\nalong with the parameter type list of that function signature so\nthat user can differentiate among the functions.", "committedDate": "2020-04-23T22:34:30Z", "type": "forcePushed"}, {"oid": "738726321b5293a63729b19cb1451809a1cc3290", "url": "https://github.com/prestodb/presto/commit/738726321b5293a63729b19cb1451809a1cc3290", "message": "Support SHOW CREATE FUNCTION\n\nSupport syntax, semantic analysis, and execution for SHOW CREATE\nFUNCTION. An optional list of parameter types may be specified.\n\nFor each matching signature, returns the canonical CREATE FUNCTION\nquery text that can be used to create the exact same function,\nalong with the parameter type list of that function signature so\nthat user can differentiate among the functions.", "committedDate": "2020-04-24T20:05:50Z", "type": "forcePushed"}, {"oid": "811f0a432004327950f75e551ebad11c4f91d6ce", "url": "https://github.com/prestodb/presto/commit/811f0a432004327950f75e551ebad11c4f91d6ce", "message": "Support SHOW CREATE FUNCTION\n\nSupport syntax, semantic analysis, and execution for SHOW CREATE\nFUNCTION. An optional list of parameter types may be specified.\n\nFor each matching signature, returns the canonical CREATE FUNCTION\nquery text that can be used to create the exact same function,\nalong with the parameter type list of that function signature so\nthat user can differentiate among the functions.", "committedDate": "2020-04-27T19:34:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE5Njg2Ng==", "url": "https://github.com/prestodb/presto/pull/14366#discussion_r416196866", "bodyText": "The implementation here also suggested that TransactionId does not need to be required. FunctionNamespaceManager would happily take an empty transaction handle. So why do you enforce transaction ID as input? It happened to always exists should not be the reason you always require it to exist.", "author": "rongrong", "createdAt": "2020-04-27T22:38:00Z", "path": "presto-main/src/main/java/com/facebook/presto/metadata/FunctionManager.java", "diffHunk": "@@ -200,6 +200,17 @@ public void registerBuiltInFunctions(List<? extends BuiltInFunction> functions)\n                 .collect(toImmutableList());\n     }\n \n+    public Collection<? extends SqlFunction> getFunctions(TransactionId transactionId, QualifiedFunctionName functionName)", "originalCommit": "811f0a432004327950f75e551ebad11c4f91d6ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc2Mzk0Mw==", "url": "https://github.com/prestodb/presto/pull/14366#discussion_r417763943", "bodyText": "Updated to Optional<TransactionId>.\nWell, I don't think FunctionNamespaceManager happily takes an empty transaction handle. Without a transaction id / transaction handle, engine cannot guarantee correctness of function resolution.\nAnd for now, if you supply an empty transaction handle to a MySQL function namespace manager, it would sadly fail. This is an indication that allowing transaction handle to be optional is not a good design choice. I guess we have that optional because the built-in one doesn't care about transaction (since its function set is non-mutable), but I think it's much better to require function handle in the interface, while the built-in one can just use a dummy handle.\nGiven the current interface as is, I'm fine either way. In case TransactionId is empty: If we require transaction id - fail in engine; if we don't require it - fail in FunctionNamespaceManager; both internal error.", "author": "caithagoras", "createdAt": "2020-04-30T05:37:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE5Njg2Ng=="}], "type": "inlineReview"}, {"oid": "c0d0ad6aba978ab10bd364784e3ad21cd6b226e8", "url": "https://github.com/prestodb/presto/commit/c0d0ad6aba978ab10bd364784e3ad21cd6b226e8", "message": "Support SHOW CREATE FUNCTION\n\nSupport syntax, semantic analysis, and execution for SHOW CREATE\nFUNCTION. An optional list of parameter types may be specified.\n\nFor each matching signature, returns the canonical CREATE FUNCTION\nquery text that can be used to create the exact same function,\nalong with the parameter type list of that function signature so\nthat user can differentiate among the functions.", "committedDate": "2020-04-30T05:55:45Z", "type": "forcePushed"}, {"oid": "306872a678fcee60a0b42235025b93f25293183a", "url": "https://github.com/prestodb/presto/commit/306872a678fcee60a0b42235025b93f25293183a", "message": "Unify QualifiedName to QualifiedFunctionName conversion", "committedDate": "2020-04-30T20:05:12Z", "type": "commit"}, {"oid": "9b15386032c40297c6dca88e91d8510e72a35455", "url": "https://github.com/prestodb/presto/commit/9b15386032c40297c6dca88e91d8510e72a35455", "message": "Support SHOW CREATE FUNCTION\n\nSupport syntax, semantic analysis, and execution for SHOW CREATE\nFUNCTION. An optional list of parameter types may be specified.\n\nFor each matching signature, returns the canonical CREATE FUNCTION\nquery text that can be used to create the exact same function,\nalong with the parameter type list of that function signature so\nthat user can differentiate among the functions.", "committedDate": "2020-04-30T20:05:12Z", "type": "commit"}, {"oid": "9b15386032c40297c6dca88e91d8510e72a35455", "url": "https://github.com/prestodb/presto/commit/9b15386032c40297c6dca88e91d8510e72a35455", "message": "Support SHOW CREATE FUNCTION\n\nSupport syntax, semantic analysis, and execution for SHOW CREATE\nFUNCTION. An optional list of parameter types may be specified.\n\nFor each matching signature, returns the canonical CREATE FUNCTION\nquery text that can be used to create the exact same function,\nalong with the parameter type list of that function signature so\nthat user can differentiate among the functions.", "committedDate": "2020-04-30T20:05:12Z", "type": "forcePushed"}]}