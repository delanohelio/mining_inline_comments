{"pr_number": 15257, "pr_title": "Add unit tests on async cache restore", "pr_createdAt": "2020-10-01T00:26:12Z", "pr_url": "https://github.com/prestodb/presto/pull/15257", "timeline": [{"oid": "74b2665c21d5f58234decabdb480e62da181c680", "url": "https://github.com/prestodb/presto/commit/74b2665c21d5f58234decabdb480e62da181c680", "message": "Add unit tests on async cache restore", "committedDate": "2020-10-01T17:00:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0MDEzNQ==", "url": "https://github.com/prestodb/presto/pull/15257#discussion_r498940135", "bodyText": "cacheDirectory", "author": "highker", "createdAt": "2020-10-02T16:58:43Z", "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingFileSystem.java", "diffHunk": "@@ -186,9 +191,29 @@ public void testStress()\n         });\n     }\n \n-    // This test must go first or the LocalCacheManager singleton will be created by other tests\n-    @Test(timeOut = 30_000, expectedExceptions = {IOException.class}, priority = -1)\n-    public void testCreationFailure()\n+    @Test(timeOut = 30_000, expectedExceptions = {IOException.class})\n+    public void testSyncRestoreFailure()\n+            throws Exception\n+    {\n+        URI badCacheDirectory = createTempDirectory(\"alluxio_cache_bad\").toUri();\n+        File cacheDir = new File(badCacheDirectory.getPath());", "originalCommit": "74b2665c21d5f58234decabdb480e62da181c680", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0NjYyNw==", "url": "https://github.com/prestodb/presto/pull/15257#discussion_r498946627", "bodyText": "done", "author": "apc999", "createdAt": "2020-10-02T17:12:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0MDEzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0MDM0NA==", "url": "https://github.com/prestodb/presto/pull/15257#discussion_r498940344", "bodyText": "merge into one line", "author": "highker", "createdAt": "2020-10-02T16:59:11Z", "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingFileSystem.java", "diffHunk": "@@ -199,8 +224,66 @@ public void testCreationFailure()\n                 .setBaseDirectory(cacheDirectory);\n         AlluxioCacheConfig alluxioCacheConfig = new AlluxioCacheConfig();\n         Configuration configuration = getHdfsConfiguration(cacheConfig, alluxioCacheConfig);\n+        configuration.set(\"alluxio.user.client.cache.async.restore.enabled\", String.valueOf(true));\n         try {\n-            cachingFileSystem(configuration);\n+            AlluxioCachingFileSystem fileSystem = cachingFileSystem(configuration);\n+            long state = MetricsSystem.counter(MetricKey.CLIENT_CACHE_STATE.getName()).getCount();\n+            assertTrue(state == CacheManager.State.READ_ONLY.getValue()\n+                    || state == CacheManager.State.NOT_IN_USE.getValue());", "originalCommit": "74b2665c21d5f58234decabdb480e62da181c680", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0Nzg4Mg==", "url": "https://github.com/prestodb/presto/pull/15257#discussion_r498947882", "bodyText": "done", "author": "apc999", "createdAt": "2020-10-02T17:14:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0MDM0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0MTgyNg==", "url": "https://github.com/prestodb/presto/pull/15257#discussion_r498941826", "bodyText": "same", "author": "highker", "createdAt": "2020-10-02T17:02:24Z", "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingFileSystem.java", "diffHunk": "@@ -199,8 +224,66 @@ public void testCreationFailure()\n                 .setBaseDirectory(cacheDirectory);\n         AlluxioCacheConfig alluxioCacheConfig = new AlluxioCacheConfig();\n         Configuration configuration = getHdfsConfiguration(cacheConfig, alluxioCacheConfig);\n+        configuration.set(\"alluxio.user.client.cache.async.restore.enabled\", String.valueOf(true));\n         try {\n-            cachingFileSystem(configuration);\n+            AlluxioCachingFileSystem fileSystem = cachingFileSystem(configuration);\n+            long state = MetricsSystem.counter(MetricKey.CLIENT_CACHE_STATE.getName()).getCount();\n+            assertTrue(state == CacheManager.State.READ_ONLY.getValue()\n+                    || state == CacheManager.State.NOT_IN_USE.getValue());\n+            // different cases of read can still proceed even cache is read-only or not-in-use\n+            byte[] buffer = new byte[PAGE_SIZE * 2];\n+            int pageOffset = PAGE_SIZE;\n+            // new read\n+            resetBaseline();\n+            assertEquals(readFully(fileSystem, pageOffset + 10, buffer, 0, 100), 100);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_READ_CACHE, 0);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_REQUESTED_EXTERNAL, 100);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_READ_EXTERNAL, PAGE_SIZE);\n+            validateBuffer(data, pageOffset + 10, buffer, 0, 100);\n+\n+            // read within the cached page\n+            resetBaseline();\n+            assertEquals(readFully(fileSystem, pageOffset + 20, buffer, 0, 90), 90);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_READ_CACHE, 0);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_REQUESTED_EXTERNAL, 90);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_READ_EXTERNAL, PAGE_SIZE);\n+            validateBuffer(data, pageOffset + 20, buffer, 0, 90);\n+\n+            // read partially after the range of the cache\n+            resetBaseline();\n+            assertEquals(readFully(fileSystem, pageOffset + PAGE_SIZE - 10, buffer, 0, 100), 100);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_READ_CACHE, 0);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_REQUESTED_EXTERNAL, 100);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_READ_EXTERNAL, 2 * PAGE_SIZE);\n+            validateBuffer(data, pageOffset + PAGE_SIZE - 10, buffer, 0, 100);\n+\n+            // read partially before the range of the cache\n+            resetBaseline();\n+            assertEquals(readFully(fileSystem, pageOffset - 10, buffer, 10, 50), 50);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_READ_CACHE, 0);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_REQUESTED_EXTERNAL, 50);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_READ_EXTERNAL, 2 * PAGE_SIZE);\n+            validateBuffer(data, pageOffset - 10, buffer, 10, 50);\n+\n+            // skip one page\n+            resetBaseline();\n+            assertEquals(readFully(fileSystem, pageOffset + PAGE_SIZE * 3, buffer, 40, 50), 50);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_READ_CACHE, 0);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_REQUESTED_EXTERNAL, 50);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_READ_EXTERNAL, PAGE_SIZE);\n+            validateBuffer(data, pageOffset + PAGE_SIZE * 3, buffer, 40, 50);\n+\n+            // read between cached pages\n+            resetBaseline();\n+            assertEquals(readFully(fileSystem, pageOffset + PAGE_SIZE * 2 - 10, buffer, 400, PAGE_SIZE + 20), PAGE_SIZE + 20);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_READ_CACHE, 0);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_REQUESTED_EXTERNAL, PAGE_SIZE + 20);\n+            checkMetrics(MetricKey.CLIENT_CACHE_BYTES_READ_EXTERNAL, 3 * PAGE_SIZE);\n+            validateBuffer(data, pageOffset + PAGE_SIZE * 2 - 10, buffer, 400, PAGE_SIZE + 20);\n+\n+            state = MetricsSystem.counter(MetricKey.CLIENT_CACHE_STATE.getName()).getCount();\n+            assertTrue(state == CacheManager.State.READ_ONLY.getValue()\n+                    || state == CacheManager.State.NOT_IN_USE.getValue());", "originalCommit": "74b2665c21d5f58234decabdb480e62da181c680", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0OTUyNw==", "url": "https://github.com/prestodb/presto/pull/15257#discussion_r498949527", "bodyText": "done. Is there any documented java style guideline for the codebase?", "author": "apc999", "createdAt": "2020-10-02T17:18:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0MTgyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0MjAzMg==", "url": "https://github.com/prestodb/presto/pull/15257#discussion_r498942032", "bodyText": "cacheDirectory", "author": "highker", "createdAt": "2020-10-02T17:02:48Z", "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingFileSystem.java", "diffHunk": "@@ -186,9 +191,29 @@ public void testStress()\n         });\n     }\n \n-    // This test must go first or the LocalCacheManager singleton will be created by other tests\n-    @Test(timeOut = 30_000, expectedExceptions = {IOException.class}, priority = -1)\n-    public void testCreationFailure()\n+    @Test(timeOut = 30_000, expectedExceptions = {IOException.class})\n+    public void testSyncRestoreFailure()\n+            throws Exception\n+    {\n+        URI badCacheDirectory = createTempDirectory(\"alluxio_cache_bad\").toUri();\n+        File cacheDir = new File(badCacheDirectory.getPath());\n+        cacheDir.setWritable(false);\n+        CacheConfig cacheConfig = new CacheConfig()\n+                .setCacheType(ALLUXIO)\n+                .setCachingEnabled(true)\n+                .setBaseDirectory(badCacheDirectory);\n+        AlluxioCacheConfig alluxioCacheConfig = new AlluxioCacheConfig();\n+        Configuration configuration = getHdfsConfiguration(cacheConfig, alluxioCacheConfig);\n+        try {\n+            cachingFileSystem(configuration);\n+        }\n+        finally {\n+            cacheDir.setWritable(true);\n+        }\n+    }\n+\n+    @Test(timeOut = 30_000)\n+    public void testBasicReadWithAsyncRestoreFailure()\n             throws Exception\n     {\n         File cacheDir = new File(cacheDirectory.getPath());", "originalCommit": "74b2665c21d5f58234decabdb480e62da181c680", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0NjgxMw==", "url": "https://github.com/prestodb/presto/pull/15257#discussion_r498946813", "bodyText": "done", "author": "apc999", "createdAt": "2020-10-02T17:12:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0MjAzMg=="}], "type": "inlineReview"}, {"oid": "f040525f76def109094849efb50e4f5aea7c4af5", "url": "https://github.com/prestodb/presto/commit/f040525f76def109094849efb50e4f5aea7c4af5", "message": "Add unit tests on async cache restore", "committedDate": "2020-10-02T17:14:30Z", "type": "forcePushed"}, {"oid": "bf4e64a9f61dc810f137278d88ae987ba6b6cc44", "url": "https://github.com/prestodb/presto/commit/bf4e64a9f61dc810f137278d88ae987ba6b6cc44", "message": "Add unit tests on async cache restore", "committedDate": "2020-10-02T17:50:18Z", "type": "forcePushed"}, {"oid": "5efe135fa2c8a060586d6b6fe4eefcdc15d0ca1d", "url": "https://github.com/prestodb/presto/commit/5efe135fa2c8a060586d6b6fe4eefcdc15d0ca1d", "message": "Add unit tests on async cache restore", "committedDate": "2020-10-02T17:51:01Z", "type": "commit"}, {"oid": "5efe135fa2c8a060586d6b6fe4eefcdc15d0ca1d", "url": "https://github.com/prestodb/presto/commit/5efe135fa2c8a060586d6b6fe4eefcdc15d0ca1d", "message": "Add unit tests on async cache restore", "committedDate": "2020-10-02T17:51:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyODE4MA==", "url": "https://github.com/prestodb/presto/pull/15257#discussion_r499028180", "bodyText": "nit: may be just se literal directly?", "author": "jainxrohit", "createdAt": "2020-10-02T20:09:57Z", "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingFileSystem.java", "diffHunk": "@@ -186,24 +191,100 @@ public void testStress()\n         });\n     }\n \n-    // This test must go first or the LocalCacheManager singleton will be created by other tests\n-    @Test(timeOut = 30_000, expectedExceptions = {IOException.class}, priority = -1)\n-    public void testCreationFailure()\n+    @Test(timeOut = 30_000, expectedExceptions = {IOException.class})\n+    public void testSyncRestoreFailure()\n             throws Exception\n     {\n-        File cacheDir = new File(cacheDirectory.getPath());\n-        cacheDir.setWritable(false);\n+        URI badCacheDirectory = createTempDirectory(\"alluxio_cache_bad\").toUri();\n+        File cacheDirectory = new File(badCacheDirectory.getPath());\n+        cacheDirectory.setWritable(false);\n         CacheConfig cacheConfig = new CacheConfig()\n                 .setCacheType(ALLUXIO)\n                 .setCachingEnabled(true)\n-                .setBaseDirectory(cacheDirectory);\n+                .setBaseDirectory(badCacheDirectory);\n         AlluxioCacheConfig alluxioCacheConfig = new AlluxioCacheConfig();\n         Configuration configuration = getHdfsConfiguration(cacheConfig, alluxioCacheConfig);\n         try {\n             cachingFileSystem(configuration);\n         }\n         finally {\n-            cacheDir.setWritable(true);\n+            cacheDirectory.setWritable(true);\n+        }\n+    }\n+\n+    @Test(timeOut = 30_000)\n+    public void testBasicReadWithAsyncRestoreFailure()\n+            throws Exception\n+    {\n+        File cacheDirectory = new File(this.cacheDirectory.getPath());\n+        cacheDirectory.setWritable(false);\n+        CacheConfig cacheConfig = new CacheConfig()\n+                .setCacheType(ALLUXIO)\n+                .setCachingEnabled(true)\n+                .setBaseDirectory(this.cacheDirectory);\n+        AlluxioCacheConfig alluxioCacheConfig = new AlluxioCacheConfig();\n+        Configuration configuration = getHdfsConfiguration(cacheConfig, alluxioCacheConfig);\n+        configuration.set(\"alluxio.user.client.cache.async.restore.enabled\", String.valueOf(true));", "originalCommit": "5efe135fa2c8a060586d6b6fe4eefcdc15d0ca1d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyODg3NA==", "url": "https://github.com/prestodb/presto/pull/15257#discussion_r499028874", "bodyText": "I understand that this would be made accessible in later versions?", "author": "jainxrohit", "createdAt": "2020-10-02T20:11:20Z", "path": "presto-cache/src/test/java/com/facebook/presto/cache/alluxio/TestAlluxioCachingFileSystem.java", "diffHunk": "@@ -234,6 +315,21 @@ public void testInitialization()\n         assertEquals(metricsDomain, conf.get(\"sink.jmx.domain\", \"bad result\"));\n     }\n \n+    // TODO: update unit tests after CacheManager.reset() is available to avoid using reflection to modify singleton\n+    private void resetCacheManager()\n+            throws Exception\n+    {\n+        Field field = CacheManager.Factory.class.getDeclaredField(\"CACHE_MANAGER\");\n+        field.setAccessible(true);", "originalCommit": "5efe135fa2c8a060586d6b6fe4eefcdc15d0ca1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzODU3OA==", "url": "https://github.com/prestodb/presto/pull/15257#discussion_r499038578", "bodyText": "Correct, i already submitted Alluxio/alluxio#12169 to expose this as an API", "author": "apc999", "createdAt": "2020-10-02T20:36:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyODg3NA=="}], "type": "inlineReview"}]}