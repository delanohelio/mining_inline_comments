{"pr_number": 14010, "pr_title": "Support shuffle on Hive partition columns before write", "pr_createdAt": "2020-01-24T08:56:41Z", "pr_url": "https://github.com/prestodb/presto/pull/14010", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg3NTcyOA==", "url": "https://github.com/prestodb/presto/pull/14010#discussion_r371875728", "bodyText": "!isShufflePartitionedColumnsForTableWriteEnabled(session) || table.getPartitionColumns().isEmpty()?", "author": "arhimondr", "createdAt": "2020-01-28T15:32:44Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2405,6 +2411,39 @@ private static Domain buildColumnDomain(ColumnHandle column, List<HivePartition>\n         return Optional.of(new ConnectorNewTableLayout(partitioningHandle, partitionColumns));\n     }\n \n+    @Override\n+    public Optional<ConnectorNewTableLayout> getPreferredShuffleLayoutForInsert(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        HiveTableHandle hiveTableHandle = (HiveTableHandle) tableHandle;\n+        SchemaTableName tableName = hiveTableHandle.getSchemaTableName();\n+        Table table = metastore.getTable(tableName.getSchemaName(), tableName.getTableName())\n+                .orElseThrow(() -> new TableNotFoundException(tableName));\n+\n+        Optional<HiveBucketHandle> hiveBucketHandle = getHiveBucketHandle(table);\n+        if (hiveBucketHandle.isPresent()) {\n+            // For bucketed table, table partitioning (i.e. the bucketing scheme) should be respected,\n+            // and there is no additional preferred shuffle partitioning\n+            return Optional.empty();\n+        }\n+\n+        if (!(isShufflePartitionedColumnsForTableWriteEnabled(session) || table.getPartitionColumns().isEmpty())) {", "originalCommit": "bb4879b1702f26a5dad5997af3a31bb25241501b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzOTExNA==", "url": "https://github.com/prestodb/presto/pull/14010#discussion_r373139114", "bodyText": "@arhimondr : Nice catch!", "author": "wenleix", "createdAt": "2020-01-30T19:10:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg3NTcyOA=="}], "type": "inlineReview"}, {"oid": "de854efbf57322f5e9e3ae6c089063811773ef7c", "url": "https://github.com/prestodb/presto/commit/de854efbf57322f5e9e3ae6c089063811773ef7c", "message": "Support shuffle on Hive partition columns before write", "committedDate": "2020-01-30T19:10:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NjUxMQ==", "url": "https://github.com/prestodb/presto/pull/14010#discussion_r373756511", "bodyText": "Can we add javadoc to the interface?", "author": "highker", "createdAt": "2020-02-01T04:14:43Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/connector/ConnectorMetadata.java", "diffHunk": "@@ -363,6 +363,11 @@ default void dropColumn(ConnectorSession session, ConnectorTableHandle tableHand\n         return Optional.empty();\n     }\n \n+    default Optional<ConnectorNewTableLayout> getPreferredShuffleLayoutForNewTable(ConnectorSession session, ConnectorTableMetadata tableMetadata)", "originalCommit": "de854efbf57322f5e9e3ae6c089063811773ef7c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NjUxOA==", "url": "https://github.com/prestodb/presto/pull/14010#discussion_r373756518", "bodyText": "same here", "author": "highker", "createdAt": "2020-02-01T04:14:48Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/connector/ConnectorMetadata.java", "diffHunk": "@@ -393,6 +398,11 @@ default void dropColumn(ConnectorSession session, ConnectorTableHandle tableHand\n         return Optional.of(new ConnectorNewTableLayout(partitioningHandle, partitionColumns));\n     }\n ", "originalCommit": "de854efbf57322f5e9e3ae6c089063811773ef7c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "66e83312c63fe34b39b069367c7bf246575c9589", "url": "https://github.com/prestodb/presto/commit/66e83312c63fe34b39b069367c7bf246575c9589", "message": "Support shuffle on Hive partition columns before write", "committedDate": "2020-02-02T23:54:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwMzA2Nw==", "url": "https://github.com/prestodb/presto/pull/14010#discussion_r374303067", "bodyText": "@wenleix I don't understand this TODO. It seems to me that bucketed tables are handled above and would never reach that code. Would you clarify?", "author": "mbasmanova", "createdAt": "2020-02-03T19:45:22Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2418,6 +2425,39 @@ private static Domain buildColumnDomain(ColumnHandle column, List<HivePartition>\n         return Optional.of(new ConnectorNewTableLayout(partitioningHandle, partitionColumns));\n     }\n \n+    @Override\n+    public Optional<ConnectorNewTableLayout> getPreferredShuffleLayoutForInsert(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        HiveTableHandle hiveTableHandle = (HiveTableHandle) tableHandle;\n+        SchemaTableName tableName = hiveTableHandle.getSchemaTableName();\n+        Table table = metastore.getTable(tableName.getSchemaName(), tableName.getTableName())\n+                .orElseThrow(() -> new TableNotFoundException(tableName));\n+\n+        Optional<HiveBucketHandle> hiveBucketHandle = getHiveBucketHandle(table);\n+        if (hiveBucketHandle.isPresent()) {\n+            // For bucketed table, table partitioning (i.e. the bucketing scheme) should be respected,\n+            // and there is no additional preferred shuffle partitioning\n+            return Optional.empty();\n+        }\n+\n+        if (!isShufflePartitionedColumnsForTableWriteEnabled(session) || table.getPartitionColumns().isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        // TODO: the shuffle partitioning doesn't have to be the same as Hive bucket partitioning", "originalCommit": "66e83312c63fe34b39b069367c7bf246575c9589", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxMjE5NQ==", "url": "https://github.com/prestodb/presto/pull/14010#discussion_r374412195", "bodyText": "@mbasmanova : Sorry for the confusion, I mean we don't have to use HivePartitionHandle for the shuffle partitioning. Thinking about implementing a different HiveShufflePartitioningHandle that distribute the keys more uniformly (Hive bucket function is not that great :) )", "author": "wenleix", "createdAt": "2020-02-04T00:09:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwMzA2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwMzg2Ng==", "url": "https://github.com/prestodb/presto/pull/14010#discussion_r374303866", "bodyText": "@wenleix Same question about this TODO", "author": "mbasmanova", "createdAt": "2020-02-03T19:46:55Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2444,6 +2484,41 @@ private static Domain buildColumnDomain(ColumnHandle column, List<HivePartition>\n                 bucketedBy));\n     }\n \n+    @Override\n+    public Optional<ConnectorNewTableLayout> getPreferredShuffleLayoutForNewTable(ConnectorSession session, ConnectorTableMetadata tableMetadata)\n+    {\n+        validatePartitionColumns(tableMetadata);\n+        validateBucketColumns(tableMetadata);\n+        Optional<HiveBucketProperty> bucketProperty = getBucketProperty(tableMetadata.getProperties());\n+        if (bucketProperty.isPresent()) {\n+            // For bucketed table, table partitioning (i.e. the bucketing scheme) should be respected,\n+            // and there is no additional preferred shuffle partitioning\n+            return Optional.empty();\n+        }\n+\n+        List<String> partitionedBy = getPartitionedBy(tableMetadata.getProperties());\n+        if (!isShufflePartitionedColumnsForTableWriteEnabled(session) || partitionedBy.isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        List<HiveColumnHandle> columnHandles = getColumnHandles(tableMetadata, ImmutableSet.copyOf(partitionedBy), typeTranslator);\n+        Map<String, HiveColumnHandle> columnHandlesByName = Maps.uniqueIndex(columnHandles, HiveColumnHandle::getName);\n+        List<Column> partitionColumns = partitionedBy.stream()\n+                .map(columnHandlesByName::get)\n+                .map(column -> new Column(column.getName(), column.getHiveType(), column.getComment()))\n+                .collect(toList());\n+\n+        // TODO: the shuffle partitioning doesn't have to be the same as Hive bucket partitioning", "originalCommit": "66e83312c63fe34b39b069367c7bf246575c9589", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d43d4ce1f09bc56d1763ca93ba98d1f84094507e", "url": "https://github.com/prestodb/presto/commit/d43d4ce1f09bc56d1763ca93ba98d1f84094507e", "message": "Support shuffle on Hive partition columns before write", "committedDate": "2020-02-04T06:59:25Z", "type": "forcePushed"}, {"oid": "df27916000ac487e2d6aa24719468f5824582f57", "url": "https://github.com/prestodb/presto/commit/df27916000ac487e2d6aa24719468f5824582f57", "message": "Support shuffle on Hive partition columns before write\n\nPreviously, writing worker will receive rows in all partitions,\nand thus can write upper to hive.max-partitions-per-writers partitions.\n\nThis session property allows shuffle on partitioned columns when writing\nto partitioned unbucketed Hive tables. As a result, rows in the same\npartition will be sent to the same writing worker. This increase the\nnumber of maximum partitions written in single query by a factor of\nnumber of total writing workers.", "committedDate": "2020-02-04T07:05:06Z", "type": "forcePushed"}, {"oid": "dc5415f2ed2312dfad415cf88ba3758a36a9365b", "url": "https://github.com/prestodb/presto/commit/dc5415f2ed2312dfad415cf88ba3758a36a9365b", "message": "Rename TableWriterNode#partitioningScheme to tablePartitioningScheme", "committedDate": "2020-02-04T23:27:41Z", "type": "commit"}, {"oid": "dd6d2ef346ee392b2564037732fc0abf6086412f", "url": "https://github.com/prestodb/presto/commit/dd6d2ef346ee392b2564037732fc0abf6086412f", "message": "Support shuffle on Hive partition columns before write\n\nPreviously, writing worker will receive rows in all partitions,\nand thus can write upper to hive.max-partitions-per-writers partitions.\n\nThis session property allows shuffle on partitioned columns when writing\nto partitioned unbucketed Hive tables. As a result, rows in the same\npartition will be sent to the same writing worker. This increase the\nnumber of maximum partitions written in single query by a factor of\nnumber of total writing workers.", "committedDate": "2020-02-04T23:27:41Z", "type": "commit"}, {"oid": "dd6d2ef346ee392b2564037732fc0abf6086412f", "url": "https://github.com/prestodb/presto/commit/dd6d2ef346ee392b2564037732fc0abf6086412f", "message": "Support shuffle on Hive partition columns before write\n\nPreviously, writing worker will receive rows in all partitions,\nand thus can write upper to hive.max-partitions-per-writers partitions.\n\nThis session property allows shuffle on partitioned columns when writing\nto partitioned unbucketed Hive tables. As a result, rows in the same\npartition will be sent to the same writing worker. This increase the\nnumber of maximum partitions written in single query by a factor of\nnumber of total writing workers.", "committedDate": "2020-02-04T23:27:41Z", "type": "forcePushed"}]}