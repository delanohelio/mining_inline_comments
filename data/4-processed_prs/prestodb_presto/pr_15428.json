{"pr_number": 15428, "pr_title": "Use serialized plan hash for fragment result caching", "pr_createdAt": "2020-11-12T00:25:36Z", "pr_url": "https://github.com/prestodb/presto/pull/15428", "timeline": [{"oid": "d6e99fcbd44b9fcd60c53d86b584212bf331e830", "url": "https://github.com/prestodb/presto/commit/d6e99fcbd44b9fcd60c53d86b584212bf331e830", "message": "Use serialized plan for fragment result caching", "committedDate": "2020-11-12T00:36:42Z", "type": "forcePushed"}, {"oid": "41f220984be794c0db5439b215a358655e06b0fe", "url": "https://github.com/prestodb/presto/commit/41f220984be794c0db5439b215a358655e06b0fe", "message": "Use serialized plan for fragment result caching", "committedDate": "2020-11-12T00:47:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg3NTM5OA==", "url": "https://github.com/prestodb/presto/pull/15428#discussion_r523875398", "bodyText": "remove this method?", "author": "highker", "createdAt": "2020-11-16T03:00:40Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/FragmentResultCacheContext.java", "diffHunk": "@@ -85,4 +106,9 @@ public CanonicalPlanFragment getCanonicalPlanFragment()\n     {\n         return canonicalPlanFragment;\n     }", "originalCommit": "41f220984be794c0db5439b215a358655e06b0fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ4MDY0Mg==", "url": "https://github.com/prestodb/presto/pull/15428#discussion_r524480642", "bodyText": "For the scope of this PR, we could remove canonicalPlanFragment and its getter method in this class. We probably would introduce them back when trying to support partition-stats based predicate stripping.", "author": "shixuan-fan", "createdAt": "2020-11-16T18:23:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg3NTM5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg3NTcxOQ==", "url": "https://github.com/prestodb/presto/pull/15428#discussion_r523875719", "bodyText": "if (!canonicalPlanFragment.isPresent()) {\n    return Optional.empty();\n}\n\ntry {\n...", "author": "highker", "createdAt": "2020-11-16T03:01:59Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/FragmentResultCacheContext.java", "diffHunk": "@@ -24,34 +25,53 @@\n import com.facebook.presto.sql.planner.CanonicalPlanFragment;\n import com.facebook.presto.sql.planner.PartitioningScheme;\n import com.facebook.presto.sql.planner.plan.GroupIdNode;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import com.google.common.collect.ImmutableSet;\n \n import java.util.Optional;\n import java.util.Set;\n \n import static com.facebook.presto.spi.plan.AggregationNode.Step.PARTIAL;\n import static com.facebook.presto.sql.planner.CanonicalPlanGenerator.generateCanonicalPlan;\n+import static com.google.common.hash.Hashing.sha256;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.Objects.requireNonNull;\n \n public class FragmentResultCacheContext\n {\n+    private static final Logger log = Logger.get(FragmentResultCacheContext.class);\n     private static final Set<Class<? extends PlanNode>> ALLOWED_CHILDREN_NODES = ImmutableSet.of(TableScanNode.class, FilterNode.class, ProjectNode.class, GroupIdNode.class);\n \n     private final FragmentResultCacheManager fragmentResultCacheManager;\n     private final CanonicalPlanFragment canonicalPlanFragment;\n+    private final String hashedCanonicalPlanFragment;\n \n     public static Optional<FragmentResultCacheContext> createFragmentResultCacheContext(\n             FragmentResultCacheManager fragmentResultCacheManager,\n             PlanNode root,\n             PartitioningScheme partitioningScheme,\n-            Session session)\n+            Session session,\n+            ObjectMapper objectMapper)\n     {\n         if (!SystemSessionProperties.isFragmentResultCachingEnabled(session) || !isEligibleForFragmentResultCaching(root)) {\n             return Optional.empty();\n         }\n \n         Optional<CanonicalPlanFragment> canonicalPlanFragment = generateCanonicalPlan(root, partitioningScheme);\n-        return canonicalPlanFragment.map(fragment -> new FragmentResultCacheContext(fragmentResultCacheManager, fragment));\n+        if (canonicalPlanFragment.isPresent()) {", "originalCommit": "41f220984be794c0db5439b215a358655e06b0fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "43a62bfa3f2d2f6a550ff4119f34b17c02ba9c43", "url": "https://github.com/prestodb/presto/commit/43a62bfa3f2d2f6a550ff4119f34b17c02ba9c43", "message": "Use serialized plan for fragment result caching", "committedDate": "2020-11-16T18:27:37Z", "type": "commit"}, {"oid": "43a62bfa3f2d2f6a550ff4119f34b17c02ba9c43", "url": "https://github.com/prestodb/presto/commit/43a62bfa3f2d2f6a550ff4119f34b17c02ba9c43", "message": "Use serialized plan for fragment result caching", "committedDate": "2020-11-16T18:27:37Z", "type": "forcePushed"}]}