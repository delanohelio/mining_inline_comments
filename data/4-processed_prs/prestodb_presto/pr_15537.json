{"pr_number": 15537, "pr_title": "Deprecate Joda library for Presto Teradata functions", "pr_createdAt": "2020-12-16T23:51:09Z", "pr_url": "https://github.com/prestodb/presto/pull/15537", "timeline": [{"oid": "025073af7012a3f4d134458b9ebfd7ff445b5547", "url": "https://github.com/prestodb/presto/commit/025073af7012a3f4d134458b9ebfd7ff445b5547", "message": "Deprecate Joda library for Presto Teradata functions", "committedDate": "2020-12-17T16:31:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA5MjU0OQ==", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r547092549", "bodyText": "lets add a comment telling why we need a different parser and formatter", "author": "ajaygeorge", "createdAt": "2020-12-22T06:27:25Z", "path": "presto-teradata-functions/src/main/java/com/facebook/presto/teradata/functions/TeradataDateFunctions.java", "diffHunk": "@@ -35,23 +39,30 @@\n import static com.facebook.presto.common.type.TimeZoneKey.getTimeZoneKeys;\n import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n-import static com.facebook.presto.teradata.functions.dateformat.DateFormatParser.createDateTimeFormatter;\n import static com.google.common.base.Throwables.throwIfInstanceOf;\n import static io.airlift.slice.Slices.utf8Slice;\n import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n public final class TeradataDateFunctions\n {\n+    private static final ThreadLocalCache<Slice, DateTimeFormatter> DATETIME_PARSER_CACHE =", "originalCommit": "025073af7012a3f4d134458b9ebfd7ff445b5547", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5MDIzNw==", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r547290237", "bodyText": "Resolved in 2b89c16", "author": "rk13", "createdAt": "2020-12-22T13:54:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA5MjU0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA5MjcwNQ==", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r547092705", "bodyText": "Is this comment still valid ?", "author": "ajaygeorge", "createdAt": "2020-12-22T06:28:00Z", "path": "presto-teradata-functions/src/main/java/com/facebook/presto/teradata/functions/dateformat/DateFormatParser.java", "diffHunk": "@@ -40,28 +70,29 @@ public static DateTimeFormatter createDateTimeFormatter(String format)\n                     builder.appendLiteral(token.getText());\n                     break;\n                 case DateFormat.DD:\n-                    builder.appendDayOfMonth(2);\n+                    builder.appendValue(ChronoField.DAY_OF_MONTH, mode.minTwoPositionFieldWidth, 2, SignStyle.NOT_NEGATIVE);\n                     break;\n                 case DateFormat.HH24:\n-                    builder.appendHourOfDay(2);\n+                    builder.appendValue(ChronoField.HOUR_OF_DAY, mode.minTwoPositionFieldWidth, 2, SignStyle.NOT_NEGATIVE);\n                     break;\n                 case DateFormat.HH:\n-                    builder.appendHourOfHalfday(2);\n+                    // ChronoField.HOUR_OF_AMPM should be used for HH after format extended to include AM/PM token", "originalCommit": "025073af7012a3f4d134458b9ebfd7ff445b5547", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5MTczOQ==", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r547291739", "bodyText": "At the moment format does not allow to include AM/PM token, thus it was never possible to specify f.e. PM hours using 'HH' token in format. In 2b89c16 added more explanation on the matter.", "author": "rk13", "createdAt": "2020-12-22T13:57:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA5MjcwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA5MzQzNw==", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r547093437", "bodyText": "aren't these all testing the same thing?", "author": "ajaygeorge", "createdAt": "2020-12-22T06:30:18Z", "path": "presto-teradata-functions/src/test/java/com/facebook/presto/teradata/functions/TestTeradataDateFunctions.java", "diffHunk": "@@ -93,16 +93,23 @@ public void testYY()\n         assertVarchar(\"to_char(TIMESTAMP '1988-04-08','yy')\", \"88\");\n         assertTimestamp(\"to_timestamp('88/04/08','yy/mm/dd')\", 2088, 4, 8, 0, 0, 0);\n         assertDate(\"to_date('88/04/08','yy/mm/dd')\", 2088, 4, 8);\n+\n+        assertTimestamp(\"to_timestamp('00/04/08','yy/mm/dd')\", 2000, 4, 8, 0, 0, 0);\n+        assertTimestamp(\"to_timestamp('20/04/08','yy/mm/dd')\", 2020, 4, 8, 0, 0, 0);\n+        assertTimestamp(\"to_timestamp('40/04/08','yy/mm/dd')\", 2040, 4, 8, 0, 0, 0);\n+        assertTimestamp(\"to_timestamp('60/04/08','yy/mm/dd')\", 2060, 4, 8, 0, 0, 0);\n+        assertTimestamp(\"to_timestamp('80/04/08','yy/mm/dd')\", 2080, 4, 8, 0, 0, 0);\n+        assertTimestamp(\"to_timestamp('99/04/08','yy/mm/dd')\", 2099, 4, 8, 0, 0, 0);", "originalCommit": "025073af7012a3f4d134458b9ebfd7ff445b5547", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5NDE4NQ==", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r547294185", "bodyText": "Thank you, good point. Removed unnecessary asserts in 2b89c16", "author": "rk13", "createdAt": "2020-12-22T14:02:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA5MzQzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA5Mzg5MQ==", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r547093891", "bodyText": "ZoneRulesException is a runtime exception.\nIf we are catching it let us log the error so that we are not silently moving on.", "author": "ajaygeorge", "createdAt": "2020-12-22T06:31:52Z", "path": "presto-teradata-functions/src/main/java/com/facebook/presto/teradata/functions/TeradataDateFunctions.java", "diffHunk": "@@ -35,23 +39,30 @@\n import static com.facebook.presto.common.type.TimeZoneKey.getTimeZoneKeys;\n import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n-import static com.facebook.presto.teradata.functions.dateformat.DateFormatParser.createDateTimeFormatter;\n import static com.google.common.base.Throwables.throwIfInstanceOf;\n import static io.airlift.slice.Slices.utf8Slice;\n import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n public final class TeradataDateFunctions\n {\n+    private static final ThreadLocalCache<Slice, DateTimeFormatter> DATETIME_PARSER_CACHE =\n+            new ThreadLocalCache<>(100, format -> DateFormatParser.createDateTimeParser(format.toStringUtf8()));\n+\n     private static final ThreadLocalCache<Slice, DateTimeFormatter> DATETIME_FORMATTER_CACHE =\n-            new ThreadLocalCache<>(100, format -> createDateTimeFormatter(format.toStringUtf8()));\n+            new ThreadLocalCache<>(100, format -> DateFormatParser.createDateTimeFormatter(format.toStringUtf8()));\n \n-    private static final ISOChronology[] CHRONOLOGIES = new ISOChronology[MAX_TIME_ZONE_KEY + 1];\n+    private static final ZoneId[] ZONE_IDS = new ZoneId[MAX_TIME_ZONE_KEY + 1];\n \n     static {\n         for (TimeZoneKey timeZoneKey : getTimeZoneKeys()) {\n-            DateTimeZone dateTimeZone = DateTimeZone.forID(timeZoneKey.getId());\n-            CHRONOLOGIES[timeZoneKey.getKey()] = ISOChronology.getInstance(dateTimeZone);\n+            try {\n+                ZONE_IDS[timeZoneKey.getKey()] = ZoneId.of(timeZoneKey.getId());\n+            }\n+            catch (ZoneRulesException ignored) {", "originalCommit": "025073af7012a3f4d134458b9ebfd7ff445b5547", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5NTExNQ==", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r547295115", "bodyText": "Log added in 2b89c16", "author": "rk13", "createdAt": "2020-12-22T14:03:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA5Mzg5MQ=="}], "type": "inlineReview"}, {"oid": "2b89c16c48091e5d9b71b81270ae7ea21bfdd918", "url": "https://github.com/prestodb/presto/commit/2b89c16c48091e5d9b71b81270ae7ea21bfdd918", "message": "Add additional improvements for deprecating Joda library in Presto Teradata functions", "committedDate": "2020-12-22T13:37:58Z", "type": "forcePushed"}, {"oid": "3e88847c691fcd6fd26f347d64f64eb6a840e08d", "url": "https://github.com/prestodb/presto/commit/3e88847c691fcd6fd26f347d64f64eb6a840e08d", "message": "Add additional improvements for deprecating Joda-Time library in Presto Teradata functions", "committedDate": "2020-12-23T07:32:47Z", "type": "forcePushed"}, {"oid": "db480f36b0f5b431c9e8c0c4d5dc022a8949f5c3", "url": "https://github.com/prestodb/presto/commit/db480f36b0f5b431c9e8c0c4d5dc022a8949f5c3", "message": "Add additional improvements for deprecating Joda-Time library in Presto Teradata functions", "committedDate": "2020-12-23T15:38:32Z", "type": "forcePushed"}, {"oid": "b5aee06525dcf26c833371433f655eda9d135358", "url": "https://github.com/prestodb/presto/commit/b5aee06525dcf26c833371433f655eda9d135358", "message": "Add additional improvements for deprecating Joda-Time library in Presto Teradata functions", "committedDate": "2020-12-24T00:13:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1MTY2OQ==", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r552251669", "bodyText": "static import DAY_OF_MONTH and all the various ChronoFields you use here.\nstatic import NOT_NEGATIVE", "author": "rschlussel", "createdAt": "2021-01-05T23:05:54Z", "path": "presto-teradata-functions/src/main/java/com/facebook/presto/teradata/functions/dateformat/DateFormatParser.java", "diffHunk": "@@ -18,50 +18,82 @@\n import com.facebook.presto.teradata.functions.DateFormat;\n import org.antlr.v4.runtime.ANTLRInputStream;\n import org.antlr.v4.runtime.Token;\n-import org.joda.time.format.DateTimeFormatter;\n-import org.joda.time.format.DateTimeFormatterBuilder;\n \n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.SignStyle;\n+import java.time.temporal.ChronoField;\n import java.util.List;\n \n import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n \n public class DateFormatParser\n {\n+    private enum Mode\n+    {\n+        // Do not require leading zero for parsing two position date fields (MM, DD, HH, HH24, MI, SS)\n+        // E.g. \"to_timestamp('1988/4/8 2:3:4','yyyy/mm/dd hh24:mi:ss')\"\n+        PARSER(1),\n+\n+        // Add leading zero for formatting single valued two position date fields (MM, DD, HH, HH24, MI, SS)\n+        // E.g. \"to_char(TIMESTAMP '1988-4-8 2:3:4','yyyy/mm/dd hh24:mi:ss')\" evaluates to \"1988/04/08 02:03:04\"\n+        FORMATTER(2);\n+\n+        final int minTwoPositionFieldWidth;\n+\n+        Mode(int value)\n+        {\n+            this.minTwoPositionFieldWidth = value;\n+        }\n+    }\n+\n     private DateFormatParser()\n     {\n     }\n \n     public static DateTimeFormatter createDateTimeFormatter(String format)\n+    {\n+        return createDateTimeFormatterImpl(format, Mode.FORMATTER);\n+    }\n+\n+    public static DateTimeFormatter createDateTimeParser(String format)\n+    {\n+        return createDateTimeFormatterImpl(format, Mode.PARSER);\n+    }\n+\n+    private static DateTimeFormatter createDateTimeFormatterImpl(String format, Mode mode)\n     {\n         DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\n+        boolean formatContainsHourOfAMPM = false;\n         for (Token token : tokenize(format)) {\n             switch (token.getType()) {\n                 case DateFormat.TEXT:\n                     builder.appendLiteral(token.getText());\n                     break;\n                 case DateFormat.DD:\n-                    builder.appendDayOfMonth(2);\n+                    builder.appendValue(ChronoField.DAY_OF_MONTH, mode.minTwoPositionFieldWidth, 2, SignStyle.NOT_NEGATIVE);", "originalCommit": "b5aee06525dcf26c833371433f655eda9d135358", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1NTY1Nw==", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r552255657", "bodyText": "Could we set all three of the parseDefaultings regardless of whether the format contains hour of AMPM (if a format doesn't have HOUR_OF_AMPM, then this won't be relevant, and similarly for HOUR_OF_DAY if it does have HOUR_OF_AMPM)?", "author": "rschlussel", "createdAt": "2021-01-05T23:17:09Z", "path": "presto-teradata-functions/src/main/java/com/facebook/presto/teradata/functions/dateformat/DateFormatParser.java", "diffHunk": "@@ -70,9 +102,22 @@ public static DateTimeFormatter createDateTimeFormatter(String format)\n                             String.format(\"Failed to tokenize string [%s] at offset [%d]\", token.getText(), token.getCharPositionInLine()));\n             }\n         }\n-\n         try {\n-            return builder.toFormatter();\n+            // Append default values(0) for time fields(HH24, HH, MI, SS) because JSR-310 does not accept bare Date value as DateTime\n+\n+            if (formatContainsHourOfAMPM) {\n+                // At the moment format does not allow to include AM/PM token, thus it was never possible to specify PM hours using 'HH' token in format\n+                // Keep existing behaviour by defaulting to 0(AM) for AMPM_OF_DAY if format string contains 'HH'\n+                builder.parseDefaulting(ChronoField.HOUR_OF_AMPM, 0)", "originalCommit": "b5aee06525dcf26c833371433f655eda9d135358", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI2NDcwNg==", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r552264706", "bodyText": "Unfortunately, not.\nConflicts can happen if both HOUR_OF_DAY and HOUR_OF_AMPM values provided (e.g. one with parseDefaultings and another in the input).\nExample: to_timestamp('1988/04/08 2','yyyy/mm/dd hh') will trigger \"Conflict found: HourOfDay 0 differs from HourOfDay 2\" error if we set all three of the parseDefaultings", "author": "rk13", "createdAt": "2021-01-05T23:43:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1NTY1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1NjM2Ng==", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r552256366", "bodyText": "Personally, I find these extra methods don't add much.  I would just have a single method createDateTimeFormatter(String format, Mode mode), i.e. just what's called createDateTimeFormatterImpl() here.", "author": "rschlussel", "createdAt": "2021-01-05T23:18:57Z", "path": "presto-teradata-functions/src/main/java/com/facebook/presto/teradata/functions/dateformat/DateFormatParser.java", "diffHunk": "@@ -18,50 +18,82 @@\n import com.facebook.presto.teradata.functions.DateFormat;\n import org.antlr.v4.runtime.ANTLRInputStream;\n import org.antlr.v4.runtime.Token;\n-import org.joda.time.format.DateTimeFormatter;\n-import org.joda.time.format.DateTimeFormatterBuilder;\n \n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.SignStyle;\n+import java.time.temporal.ChronoField;\n import java.util.List;\n \n import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n \n public class DateFormatParser\n {\n+    private enum Mode\n+    {\n+        // Do not require leading zero for parsing two position date fields (MM, DD, HH, HH24, MI, SS)\n+        // E.g. \"to_timestamp('1988/4/8 2:3:4','yyyy/mm/dd hh24:mi:ss')\"\n+        PARSER(1),\n+\n+        // Add leading zero for formatting single valued two position date fields (MM, DD, HH, HH24, MI, SS)\n+        // E.g. \"to_char(TIMESTAMP '1988-4-8 2:3:4','yyyy/mm/dd hh24:mi:ss')\" evaluates to \"1988/04/08 02:03:04\"\n+        FORMATTER(2);\n+\n+        final int minTwoPositionFieldWidth;\n+\n+        Mode(int value)\n+        {\n+            this.minTwoPositionFieldWidth = value;\n+        }\n+    }\n+\n     private DateFormatParser()\n     {\n     }\n \n     public static DateTimeFormatter createDateTimeFormatter(String format)", "originalCommit": "b5aee06525dcf26c833371433f655eda9d135358", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1NjY1OA==", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r552256658", "bodyText": "static import createDateTimeFormatter", "author": "rschlussel", "createdAt": "2021-01-05T23:19:49Z", "path": "presto-teradata-functions/src/main/java/com/facebook/presto/teradata/functions/TeradataDateFunctions.java", "diffHunk": "@@ -35,23 +40,38 @@\n import static com.facebook.presto.common.type.TimeZoneKey.getTimeZoneKeys;\n import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n-import static com.facebook.presto.teradata.functions.dateformat.DateFormatParser.createDateTimeFormatter;\n import static com.google.common.base.Throwables.throwIfInstanceOf;\n import static io.airlift.slice.Slices.utf8Slice;\n import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n public final class TeradataDateFunctions\n {\n+    // Separate DateTimeFormatter instance caches (for formatting and parsing) in order to keep support the following use cases:\n+    // 1. Do not require leading zero for parsing two position date fields (MM, DD, HH, HH24, MI, SS)\n+    //    e.g. allow \"to_timestamp('1988/4/8 2:3:4','yyyy/mm/dd hh24:mi:ss')\"\n+    // 2. Always add leading zero for formatting single valued two position date fields (MM, DD, HH, HH24, MI, SS)\n+    //    e.g. evaluate \"to_char(TIMESTAMP '1988-4-8 2:3:4','yyyy/mm/dd hh24:mi:ss')\" to \"1988/04/08 02:03:04\"\n+\n+    private static final ThreadLocalCache<Slice, DateTimeFormatter> DATETIME_PARSER_CACHE =\n+            new ThreadLocalCache<>(100, format -> DateFormatParser.createDateTimeParser(format.toStringUtf8()));\n+\n     private static final ThreadLocalCache<Slice, DateTimeFormatter> DATETIME_FORMATTER_CACHE =\n-            new ThreadLocalCache<>(100, format -> createDateTimeFormatter(format.toStringUtf8()));\n+            new ThreadLocalCache<>(100, format -> DateFormatParser.createDateTimeFormatter(format.toStringUtf8()));", "originalCommit": "b5aee06525dcf26c833371433f655eda9d135358", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1Njc4OA==", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r552256788", "bodyText": "static import createDateTimeParser", "author": "rschlussel", "createdAt": "2021-01-05T23:20:10Z", "path": "presto-teradata-functions/src/main/java/com/facebook/presto/teradata/functions/TeradataDateFunctions.java", "diffHunk": "@@ -35,23 +40,38 @@\n import static com.facebook.presto.common.type.TimeZoneKey.getTimeZoneKeys;\n import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n-import static com.facebook.presto.teradata.functions.dateformat.DateFormatParser.createDateTimeFormatter;\n import static com.google.common.base.Throwables.throwIfInstanceOf;\n import static io.airlift.slice.Slices.utf8Slice;\n import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n public final class TeradataDateFunctions\n {\n+    // Separate DateTimeFormatter instance caches (for formatting and parsing) in order to keep support the following use cases:\n+    // 1. Do not require leading zero for parsing two position date fields (MM, DD, HH, HH24, MI, SS)\n+    //    e.g. allow \"to_timestamp('1988/4/8 2:3:4','yyyy/mm/dd hh24:mi:ss')\"\n+    // 2. Always add leading zero for formatting single valued two position date fields (MM, DD, HH, HH24, MI, SS)\n+    //    e.g. evaluate \"to_char(TIMESTAMP '1988-4-8 2:3:4','yyyy/mm/dd hh24:mi:ss')\" to \"1988/04/08 02:03:04\"\n+\n+    private static final ThreadLocalCache<Slice, DateTimeFormatter> DATETIME_PARSER_CACHE =\n+            new ThreadLocalCache<>(100, format -> DateFormatParser.createDateTimeParser(format.toStringUtf8()));", "originalCommit": "b5aee06525dcf26c833371433f655eda9d135358", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1NzI2NA==", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r552257264", "bodyText": "Is there any reason we couldn't  or shouldn't support an AM/PM token?", "author": "rschlussel", "createdAt": "2021-01-05T23:21:39Z", "path": "presto-teradata-functions/src/main/java/com/facebook/presto/teradata/functions/dateformat/DateFormatParser.java", "diffHunk": "@@ -70,9 +102,22 @@ public static DateTimeFormatter createDateTimeFormatter(String format)\n                             String.format(\"Failed to tokenize string [%s] at offset [%d]\", token.getText(), token.getCharPositionInLine()));\n             }\n         }\n-\n         try {\n-            return builder.toFormatter();\n+            // Append default values(0) for time fields(HH24, HH, MI, SS) because JSR-310 does not accept bare Date value as DateTime\n+\n+            if (formatContainsHourOfAMPM) {\n+                // At the moment format does not allow to include AM/PM token, thus it was never possible to specify PM hours using 'HH' token in format", "originalCommit": "b5aee06525dcf26c833371433f655eda9d135358", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI4MDQyMw==", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r552280423", "bodyText": "No, I do not know about any reason why we should not.\nTeradata date format arguments support AM/PM actually (https://www.docs.teradata.com/r/~_sY_PYVxZzTnqKq45UXkQ/DlNXnvtMQTAeWXYLHvEarQ).\nOriginal grammar used to tokenise input should be extended in this case\nhttps://github.com/prestodb/presto/blob/master/presto-teradata-functions/src/main/antlr4/com/facebook/presto/teradata/functions/DateFormat.g4\nIt is better to be implemented in separate PR as a new feature I think.", "author": "rk13", "createdAt": "2021-01-06T00:17:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1NzI2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1NzUwNA==", "url": "https://github.com/prestodb/presto/pull/15537#discussion_r552257504", "bodyText": "make this private and add a getter", "author": "rschlussel", "createdAt": "2021-01-05T23:22:21Z", "path": "presto-teradata-functions/src/main/java/com/facebook/presto/teradata/functions/dateformat/DateFormatParser.java", "diffHunk": "@@ -18,50 +18,82 @@\n import com.facebook.presto.teradata.functions.DateFormat;\n import org.antlr.v4.runtime.ANTLRInputStream;\n import org.antlr.v4.runtime.Token;\n-import org.joda.time.format.DateTimeFormatter;\n-import org.joda.time.format.DateTimeFormatterBuilder;\n \n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.SignStyle;\n+import java.time.temporal.ChronoField;\n import java.util.List;\n \n import static com.facebook.presto.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n \n public class DateFormatParser\n {\n+    private enum Mode\n+    {\n+        // Do not require leading zero for parsing two position date fields (MM, DD, HH, HH24, MI, SS)\n+        // E.g. \"to_timestamp('1988/4/8 2:3:4','yyyy/mm/dd hh24:mi:ss')\"\n+        PARSER(1),\n+\n+        // Add leading zero for formatting single valued two position date fields (MM, DD, HH, HH24, MI, SS)\n+        // E.g. \"to_char(TIMESTAMP '1988-4-8 2:3:4','yyyy/mm/dd hh24:mi:ss')\" evaluates to \"1988/04/08 02:03:04\"\n+        FORMATTER(2);\n+\n+        final int minTwoPositionFieldWidth;", "originalCommit": "b5aee06525dcf26c833371433f655eda9d135358", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "63a5fa32d98e18d92f63f3f8d6c80e20b52466b8", "url": "https://github.com/prestodb/presto/commit/63a5fa32d98e18d92f63f3f8d6c80e20b52466b8", "message": "Deprecate Joda library for Presto Teradata functions", "committedDate": "2021-01-07T13:42:43Z", "type": "forcePushed"}, {"oid": "3779262c735b7e6eb6a8e8af056d914aa783eb1c", "url": "https://github.com/prestodb/presto/commit/3779262c735b7e6eb6a8e8af056d914aa783eb1c", "message": "Deprecate Joda library in Presto Teradata functions", "committedDate": "2021-01-07T15:20:41Z", "type": "forcePushed"}, {"oid": "e8dddaae96c9e25e01abe6892e6b0851b8ac1961", "url": "https://github.com/prestodb/presto/commit/e8dddaae96c9e25e01abe6892e6b0851b8ac1961", "message": "Deprecate Joda library in Presto Teradata functions", "committedDate": "2021-02-03T23:35:23Z", "type": "commit"}, {"oid": "e8dddaae96c9e25e01abe6892e6b0851b8ac1961", "url": "https://github.com/prestodb/presto/commit/e8dddaae96c9e25e01abe6892e6b0851b8ac1961", "message": "Deprecate Joda library in Presto Teradata functions", "committedDate": "2021-02-03T23:35:23Z", "type": "forcePushed"}]}