{"pr_number": 15565, "pr_title": "Add QueryInterceptor to presto-jdbc", "pr_createdAt": "2020-12-28T22:10:27Z", "pr_url": "https://github.com/prestodb/presto/pull/15565", "timeline": [{"oid": "9f0f97e8b50b0377fc98bb7b3ba6ba800d6eee68", "url": "https://github.com/prestodb/presto/commit/9f0f97e8b50b0377fc98bb7b3ba6ba800d6eee68", "message": "[WIP] Add QueryInterceptor to presto-jdbc", "committedDate": "2020-12-29T20:36:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3MDQ3Ng==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r549870476", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        catch (Throwable e) {\n          \n          \n            \n                            System.err.print(\"Could not load QueryInterceptor class\");\n          \n          \n            \n                            e.printStackTrace();\n          \n          \n            \n                            return null;\n          \n          \n            \n                        }\n          \n          \n            \n                        catch (Throwable e) {\n          \n          \n            \n                            throw new IllegalArgumentException(format(\"Could not load QueryInterceptor classes from %s\", value), e);\n          \n          \n            \n                        }", "author": "tdcmeehan", "createdAt": "2020-12-29T22:12:47Z", "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/AbstractConnectionProperty.java", "diffHunk": "@@ -190,6 +193,34 @@ private StringMapConverter() {}\n         }\n     }\n \n+    protected static final class ClassListConverter\n+            implements Converter<LinkedList<QueryInterceptor>>\n+    {\n+        public static final ClassListConverter CLASS_LIST_CONVERTER = new ClassListConverter();\n+        private ClassListConverter() {}\n+\n+        @Override\n+        public LinkedList<QueryInterceptor> convert(String value)\n+        {\n+            return Splitter.on(';').splitToList(value).stream()\n+                    .map(this::loadClass)\n+                    .filter(Objects::nonNull)\n+                    .collect(Collectors.toCollection(LinkedList::new));\n+        }\n+\n+        public QueryInterceptor loadClass(String interceptor)\n+        {\n+            try {\n+                return (QueryInterceptor) Class.forName(interceptor).getDeclaredConstructor().newInstance();\n+            }\n+            catch (Throwable e) {\n+                System.err.print(\"Could not load QueryInterceptor class\");\n+                e.printStackTrace();\n+                return null;\n+            }", "originalCommit": "9f0f97e8b50b0377fc98bb7b3ba6ba800d6eee68", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3MTY0NA==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r549871644", "bodyText": "I think for autocommit queries, this won't have a transaction ID.  So it could be done outside of the if check above.  Also, we should take care to handle exceptions.  Something like this:\n\n  \n    \n      presto/presto-common/src/main/java/com/facebook/presto/common/block/ClosingBlockLease.java\n    \n    \n        Lines 66 to 84\n      in\n      04138bc\n    \n    \n    \n    \n\n        \n          \n           Throwable innerException = null; \n        \n\n        \n          \n           for (Closer closer : closers) { \n        \n\n        \n          \n               try { \n        \n\n        \n          \n                   closer.close(); \n        \n\n        \n          \n               } \n        \n\n        \n          \n               catch (Throwable t) { \n        \n\n        \n          \n                   if (innerException == null) { \n        \n\n        \n          \n                       innerException = t; \n        \n\n        \n          \n                   } \n        \n\n        \n          \n                   else if (innerException != t) { \n        \n\n        \n          \n                       // Self-suppression not permitted \n        \n\n        \n          \n                       innerException.addSuppressed(t); \n        \n\n        \n          \n                   } \n        \n\n        \n          \n               } \n        \n\n        \n          \n           } \n        \n\n        \n          \n           if (innerException != null) { \n        \n\n        \n          \n               // Convert to unchecked exception \n        \n\n        \n          \n               throw new RuntimeException(innerException); \n        \n\n        \n          \n           }", "author": "tdcmeehan", "createdAt": "2020-12-29T22:17:41Z", "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoConnection.java", "diffHunk": "@@ -201,6 +206,9 @@ public void close()\n                 try (PrestoStatement statement = new PrestoStatement(this)) {\n                     statement.internalExecute(\"ROLLBACK\");\n                 }\n+                for (QueryInterceptor queryInterceptor : this.queryInterceptorInstances) {", "originalCommit": "9f0f97e8b50b0377fc98bb7b3ba6ba800d6eee68", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3MTk4MQ==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r549871981", "bodyText": "Let's do a defensive copy just to be safe.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.queryInterceptorInstances = uri.getQueryInterceptors();\n          \n          \n            \n                    this.queryInterceptorInstances = ImmutableList.of(uri.getQueryInterceptors());", "author": "tdcmeehan", "createdAt": "2020-12-29T22:19:09Z", "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoConnection.java", "diffHunk": "@@ -113,6 +115,9 @@\n \n         timeZoneId.set(TimeZone.getDefault().getID());\n         locale.set(Locale.getDefault());\n+\n+        this.queryInterceptorInstances = uri.getQueryInterceptors();", "originalCommit": "9f0f97e8b50b0377fc98bb7b3ba6ba800d6eee68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI3NjAxNQ==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r550276015", "bodyText": "Unless I'm missing something, it looks like we can't easily do this with a LinkedList. Would it make more sense to make the return type of ClassListConverter in AbstractConnectionProperty an ImmutableList instead of a LinkedList? We don't expect to modify it after it's built and I don't think we're seeing many benefits to using a LinkedList for our usage.", "author": "robbypete", "createdAt": "2020-12-30T17:49:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3MTk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI3NjczNg==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r550276736", "bodyText": "My suggestion had a typo, it should be:\nthis.queryInterceptorInstances = ImmutableList.copyOf(uri.getQueryInterceptors());", "author": "tdcmeehan", "createdAt": "2020-12-30T17:52:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3MTk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI3OTIxNw==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r550279217", "bodyText": "We don't expect to modify it after it's built and I don't think we're seeing many benefits to using a LinkedList for our usage.\n\nI agree", "author": "mayankgarg1990", "createdAt": "2020-12-30T18:00:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3MTk4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3MjQyOA==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r549872428", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                QueryInterceptor init(PrestoConnection conn, Map<String, String> props);\n          \n          \n            \n                QueryInterceptor init(PrestoConnection connection, Map<String, String> properties);", "author": "tdcmeehan", "createdAt": "2020-12-29T22:21:25Z", "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/QueryInterceptor.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.jdbc;\n+\n+import java.sql.Statement;\n+import java.util.Map;\n+\n+public interface QueryInterceptor\n+{\n+    QueryInterceptor init(PrestoConnection conn, Map<String, String> props);", "originalCommit": "9f0f97e8b50b0377fc98bb7b3ba6ba800d6eee68", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg3MjQ3MQ==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r549872471", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public QueryInterceptor init(PrestoConnection conn, Map<String, String> props)\n          \n          \n            \n                public QueryInterceptor init(PrestoConnection connection, Map<String, String> properties)", "author": "tdcmeehan", "createdAt": "2020-12-29T22:21:33Z", "path": "presto-jdbc/src/test/java/com/facebook/presto/jdbc/BaseQueryInterceptor.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.jdbc;\n+\n+import java.sql.Statement;\n+import java.util.Map;\n+\n+public class BaseQueryInterceptor\n+        implements QueryInterceptor\n+{\n+    public QueryInterceptor init(PrestoConnection conn, Map<String, String> props)", "originalCommit": "9f0f97e8b50b0377fc98bb7b3ba6ba800d6eee68", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "751b8504203a62117e6409a56d0e2032c561b384", "url": "https://github.com/prestodb/presto/commit/751b8504203a62117e6409a56d0e2032c561b384", "message": "[WIP] Add QueryInterceptor to presto-jdbc", "committedDate": "2020-12-30T18:06:06Z", "type": "forcePushed"}, {"oid": "63b561138b1d66bef8454bdab12f24a17c0a39ab", "url": "https://github.com/prestodb/presto/commit/63b561138b1d66bef8454bdab12f24a17c0a39ab", "message": "[WIP] Add QueryInterceptor to presto-jdbc", "committedDate": "2020-12-30T19:34:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI3ODkxMQ==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r550278911", "bodyText": "As you mentioned in your comment, there is no real need for a LinkedList here - you can just use List<QueryInterceptor> as the type and use toImmutableList() from Guava here to create an immutable list", "author": "mayankgarg1990", "createdAt": "2020-12-30T17:59:45Z", "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/AbstractConnectionProperty.java", "diffHunk": "@@ -190,6 +193,34 @@ private StringMapConverter() {}\n         }\n     }\n \n+    protected static final class ClassListConverter\n+            implements Converter<LinkedList<QueryInterceptor>>\n+    {\n+        public static final ClassListConverter CLASS_LIST_CONVERTER = new ClassListConverter();\n+        private ClassListConverter() {}\n+\n+        @Override\n+        public LinkedList<QueryInterceptor> convert(String value)\n+        {\n+            return Splitter.on(';').splitToList(value).stream()\n+                    .map(this::loadClass)\n+                    .filter(Objects::nonNull)\n+                    .collect(Collectors.toCollection(LinkedList::new));", "originalCommit": "9f0f97e8b50b0377fc98bb7b3ba6ba800d6eee68", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI3OTYxMg==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r550279612", "bodyText": "This member variable is not used anywhere - rather we are just parsing this value in the method itself.", "author": "mayankgarg1990", "createdAt": "2020-12-30T18:02:39Z", "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoDriverUri.java", "diffHunk": "@@ -84,6 +86,8 @@\n     private String catalog;\n     private String schema;\n \n+    private LinkedList queryInterceptors;", "originalCommit": "9f0f97e8b50b0377fc98bb7b3ba6ba800d6eee68", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMxMjYxNQ==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r550312615", "bodyText": "We should add some documentation to these functions about the arguments and expected behavior since people in open source might want to implement these and not having to read the actual implementation will be helpful to quickly onboard people and move ahead with their business logic.", "author": "mayankgarg1990", "createdAt": "2020-12-30T20:05:02Z", "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/QueryInterceptor.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.jdbc;\n+\n+import java.sql.Statement;\n+import java.util.Map;\n+\n+public interface QueryInterceptor\n+{\n+    QueryInterceptor init(PrestoConnection connection, Map<String, String> properties);\n+    void destroy();\n+    PrestoResultSet preProcess(String sql, Statement interceptedStatement);\n+    PrestoResultSet postProcess(String sql, Statement interceptedStatement, PrestoResultSet originalResultSet);", "originalCommit": "63b561138b1d66bef8454bdab12f24a17c0a39ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMyNjgxMA==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r550326810", "bodyText": "I added some documentation to these methods", "author": "robbypete", "createdAt": "2020-12-30T21:04:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMxMjYxNQ=="}], "type": "inlineReview"}, {"oid": "a790ec66bd3928e6eaf55d3094413aeb554ac993", "url": "https://github.com/prestodb/presto/commit/a790ec66bd3928e6eaf55d3094413aeb554ac993", "message": "[WIP] Add QueryInterceptor to presto-jdbc", "committedDate": "2020-12-30T21:03:08Z", "type": "forcePushed"}, {"oid": "dc6f6c678975ecb29e7ceeddd54327e913b91cc7", "url": "https://github.com/prestodb/presto/commit/dc6f6c678975ecb29e7ceeddd54327e913b91cc7", "message": "Add QueryInterceptor to presto-jdbc", "committedDate": "2021-01-06T21:16:01Z", "type": "forcePushed"}, {"oid": "fb3fdb36a8ebbbf4f10f9a469b5374e9b036e847", "url": "https://github.com/prestodb/presto/commit/fb3fdb36a8ebbbf4f10f9a469b5374e9b036e847", "message": "Add QueryInterceptor to presto-jdbc", "committedDate": "2021-01-08T05:17:59Z", "type": "forcePushed"}, {"oid": "c1490b172653e263a5c7c885945a47b9d206c747", "url": "https://github.com/prestodb/presto/commit/c1490b172653e263a5c7c885945a47b9d206c747", "message": "Add QueryInterceptor to presto-jdbc", "committedDate": "2021-01-08T20:31:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU0MDUxNQ==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r555540515", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int currentDepth = this.statementDepth.get();\n          \n          \n            \n                    this.statementDepth.set(currentDepth + 1);\n          \n          \n            \n                    statementDepth.getAndIncrement();", "author": "tdcmeehan", "createdAt": "2021-01-12T06:29:05Z", "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoConnection.java", "diffHunk": "@@ -602,6 +627,24 @@ public int getNetworkTimeout()\n         return networkTimeoutMillis.get();\n     }\n \n+    public void incrementStatementDepth()\n+    {\n+        int currentDepth = this.statementDepth.get();\n+        this.statementDepth.set(currentDepth + 1);", "originalCommit": "c1490b172653e263a5c7c885945a47b9d206c747", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU0MjM4NA==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r555542384", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int currentDepth = this.statementDepth.get();\n          \n          \n            \n                    checkArgument(currentDepth > 0, \"Statement depth cannot go below 0\");\n          \n          \n            \n                    this.statementDepth.set(currentDepth - 1);\n          \n          \n            \n                    int currentDepth = statementDepth.get();\n          \n          \n            \n                    checkArgument(currentDepth > 0, \"Statement depth cannot go below 0\");\n          \n          \n            \n                    statementDepth.decrementAndGet();", "author": "tdcmeehan", "createdAt": "2021-01-12T06:35:16Z", "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoConnection.java", "diffHunk": "@@ -602,6 +627,24 @@ public int getNetworkTimeout()\n         return networkTimeoutMillis.get();\n     }\n \n+    public void incrementStatementDepth()\n+    {\n+        int currentDepth = this.statementDepth.get();\n+        this.statementDepth.set(currentDepth + 1);\n+    }\n+\n+    public void decrementStatementDepth()\n+    {\n+        int currentDepth = this.statementDepth.get();\n+        checkArgument(currentDepth > 0, \"Statement depth cannot go below 0\");\n+        this.statementDepth.set(currentDepth - 1);", "originalCommit": "c1490b172653e263a5c7c885945a47b9d206c747", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU0MzY5Mg==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r555543692", "bodyText": "I think we should move this state into PrestoStatement.  A connection can create multiple statements, all of which can be executed independently and in different threads.  On the other hand, there is always just one statement per result set, so the state really should apply to just the statement.", "author": "tdcmeehan", "createdAt": "2021-01-12T06:39:03Z", "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoConnection.java", "diffHunk": "@@ -80,6 +83,7 @@\n     private final AtomicReference<Integer> networkTimeoutMillis = new AtomicReference<>(Ints.saturatedCast(MINUTES.toMillis(2)));\n     private final AtomicReference<ServerInfo> serverInfo = new AtomicReference<>();\n     private final AtomicLong nextStatementId = new AtomicLong(1);\n+    private final AtomicInteger statementDepth = new AtomicInteger(0);", "originalCommit": "c1490b172653e263a5c7c885945a47b9d206c747", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkyMzUwNA==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r555923504", "bodyText": "Yeah that's what I was afraid of. If we put the depth inside the statement, wouldn't we lose that depth if the QueryInterceptor creates another Statement? I can test it to make sure.", "author": "robbypete", "createdAt": "2021-01-12T16:53:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU0MzY5Mg=="}], "type": "inlineReview"}, {"oid": "f7ec2f068c20eede3bd284f2be0f4c8fae9a6f98", "url": "https://github.com/prestodb/presto/commit/f7ec2f068c20eede3bd284f2be0f4c8fae9a6f98", "message": "Add QueryInterceptor to presto-jdbc", "committedDate": "2021-01-12T21:01:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjA5NDc2NA==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r556094764", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Map<String, String> properties;\n          \n          \n            \n                private Map<String, String> properties;", "author": "tdcmeehan", "createdAt": "2021-01-12T21:06:33Z", "path": "presto-jdbc/src/test/java/com/facebook/presto/jdbc/BaseQueryInterceptor.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.jdbc;\n+\n+import java.sql.Statement;\n+import java.util.Map;\n+\n+public class BaseQueryInterceptor\n+        implements QueryInterceptor\n+{\n+    Map<String, String> properties;", "originalCommit": "f7ec2f068c20eede3bd284f2be0f4c8fae9a6f98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjA5NTAwMQ==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r556095001", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.properties = properties;\n          \n          \n            \n                    this.properties = ImmutableMap.copyOf(properties);", "author": "tdcmeehan", "createdAt": "2021-01-12T21:06:58Z", "path": "presto-jdbc/src/test/java/com/facebook/presto/jdbc/BaseQueryInterceptor.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.jdbc;\n+\n+import java.sql.Statement;\n+import java.util.Map;\n+\n+public class BaseQueryInterceptor\n+        implements QueryInterceptor\n+{\n+    Map<String, String> properties;\n+\n+    public QueryInterceptor init(Map<String, String> properties)\n+    {\n+        this.properties = properties;", "originalCommit": "f7ec2f068c20eede3bd284f2be0f4c8fae9a6f98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ff3dffdf37319e44db04ecddaa8f48d3b0739905", "url": "https://github.com/prestodb/presto/commit/ff3dffdf37319e44db04ecddaa8f48d3b0739905", "message": "Add QueryInterceptor to presto-jdbc", "committedDate": "2021-01-13T16:31:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjcwNjAzNw==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r556706037", "bodyText": "private", "author": "mayankgarg1990", "createdAt": "2021-01-13T17:34:23Z", "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/AbstractConnectionProperty.java", "diffHunk": "@@ -190,6 +191,31 @@ private StringMapConverter() {}\n         }\n     }\n \n+    protected static final class ClassListConverter\n+            implements Converter<List<QueryInterceptor>>\n+    {\n+        public static final ClassListConverter CLASS_LIST_CONVERTER = new ClassListConverter();\n+        private ClassListConverter() {}\n+\n+        @Override\n+        public List<QueryInterceptor> convert(String value)\n+        {\n+            return Splitter.on(';').splitToList(value).stream()\n+                    .map(this::loadClass)\n+                    .collect(toImmutableList());\n+        }\n+\n+        public QueryInterceptor loadClass(String interceptor)", "originalCommit": "ff3dffdf37319e44db04ecddaa8f48d3b0739905", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjcwNzIwNg==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r556707206", "bodyText": "nit: we just use List<QueryInterceptor> as the type", "author": "mayankgarg1990", "createdAt": "2021-01-13T17:36:10Z", "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoConnection.java", "diffHunk": "@@ -94,6 +97,7 @@\n     private final AtomicReference<String> transactionId = new AtomicReference<>();\n     private final QueryExecutor queryExecutor;\n     private final WarningsManager warningsManager = new WarningsManager();\n+    private final ImmutableList<QueryInterceptor> queryInterceptorInstances;", "originalCommit": "ff3dffdf37319e44db04ecddaa8f48d3b0739905", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjcwODAyNw==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r556708027", "bodyText": "nit: this. is redundant here", "author": "mayankgarg1990", "createdAt": "2021-01-13T17:37:25Z", "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoConnection.java", "diffHunk": "@@ -655,6 +679,11 @@ ServerInfo getServerInfo()\n         return serverInfo.get();\n     }\n \n+    List<QueryInterceptor> getQueryInterceptorInstances()\n+    {\n+        return this.queryInterceptorInstances;", "originalCommit": "ff3dffdf37319e44db04ecddaa8f48d3b0739905", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjcwODYwNA==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r556708604", "bodyText": "you might want to mark this as @VisibleForTesting since that is the only place where I believe that this will be used.", "author": "mayankgarg1990", "createdAt": "2021-01-13T17:38:23Z", "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoConnection.java", "diffHunk": "@@ -655,6 +679,11 @@ ServerInfo getServerInfo()\n         return serverInfo.get();\n     }\n \n+    List<QueryInterceptor> getQueryInterceptorInstances()", "originalCommit": "ff3dffdf37319e44db04ecddaa8f48d3b0739905", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjcxNDg5OQ==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r556714899", "bodyText": "we should ensure that these are invoked even if the rollback fails - otherwse we might hold onto resources and not release them", "author": "mayankgarg1990", "createdAt": "2021-01-13T17:47:53Z", "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoConnection.java", "diffHunk": "@@ -202,6 +209,23 @@ public void close()\n                     statement.internalExecute(\"ROLLBACK\");\n                 }\n             }\n+            Throwable innerException = null;\n+            for (QueryInterceptor queryInterceptor : this.queryInterceptorInstances) {\n+                try {\n+                    queryInterceptor.destroy();\n+                }\n+                catch (Throwable t) {\n+                    if (innerException == null) {\n+                        innerException = t;\n+                    }\n+                    else if (innerException != t) {\n+                        innerException.addSuppressed(t);\n+                    }\n+                }\n+            }\n+            if (innerException != null) {\n+                throw new RuntimeException(innerException);\n+            }", "originalCommit": "ff3dffdf37319e44db04ecddaa8f48d3b0739905", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njg0NTczNg==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r556845736", "bodyText": "should this be returning a void instead of returning a QueryInterceptor ? There is only one usage of this function and that is not using this return type.", "author": "mayankgarg1990", "createdAt": "2021-01-13T21:29:15Z", "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/QueryInterceptor.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.jdbc;\n+\n+import java.sql.Statement;\n+import java.util.Map;\n+\n+public interface QueryInterceptor\n+{\n+    /**\n+     * Called once per PrestoConnection at instantiation.\n+     *\n+     * @param properties the session properties supplied in the URI\n+     * @return QueryInterceptor\n+     */\n+    QueryInterceptor init(Map<String, String> properties);", "originalCommit": "ff3dffdf37319e44db04ecddaa8f48d3b0739905", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njg0NzEzNQ==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r556847135", "bodyText": "Should we return an Optional<PrestoResultSet> here ? That will make the API clear that the interceptor may or not have a side effect and ensure that appropriate existence checks exist in the calling code.", "author": "mayankgarg1990", "createdAt": "2021-01-13T21:30:22Z", "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/QueryInterceptor.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.jdbc;\n+\n+import java.sql.Statement;\n+import java.util.Map;\n+\n+public interface QueryInterceptor\n+{\n+    /**\n+     * Called once per PrestoConnection at instantiation.\n+     *\n+     * @param properties the session properties supplied in the URI\n+     * @return QueryInterceptor\n+     */\n+    QueryInterceptor init(Map<String, String> properties);\n+\n+    /**\n+     * Called once to release any resources when PrestoConnection is closing.\n+     */\n+    void destroy();\n+\n+    /**\n+     * Called before the query has been sent to the server. This method is only called on\n+     * top-level queries i.e. queries executed by QueryInterceptors are not intercepted.\n+     *\n+     * This method can optionally return a PrestoResultSet. If a PrestoResultSet is returned from\n+     * from preProcess then the intercepted query is not executed and that PrestoResultSet is\n+     * returned instead. If there are multiple QueryInterceptors, preProcess will be called\n+     * on each and the last PrestoResultSet is returned.\n+     *\n+     * @param sql the SQL string of the query.\n+     * @param interceptedStatement the Statement being executed.\n+     * @return optional PrestoResultSet to be returned\n+     */\n+    PrestoResultSet preProcess(String sql, Statement interceptedStatement);", "originalCommit": "ff3dffdf37319e44db04ecddaa8f48d3b0739905", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njg0OTI4Mw==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r556849283", "bodyText": "Based on the style document for javadocs, we should mark everything that is a class name or a symbol with {@link <classname>} and the further instances with simply <code></code>\nReference - https://www.oracle.com/technical-resources/articles/java/javadoc-tool.html#styleguide", "author": "mayankgarg1990", "createdAt": "2021-01-13T21:32:19Z", "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/QueryInterceptor.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.jdbc;\n+\n+import java.sql.Statement;\n+import java.util.Map;\n+\n+public interface QueryInterceptor\n+{\n+    /**\n+     * Called once per PrestoConnection at instantiation.\n+     *\n+     * @param properties the session properties supplied in the URI\n+     * @return QueryInterceptor\n+     */\n+    QueryInterceptor init(Map<String, String> properties);\n+\n+    /**\n+     * Called once to release any resources when PrestoConnection is closing.\n+     */\n+    void destroy();\n+\n+    /**\n+     * Called before the query has been sent to the server. This method is only called on\n+     * top-level queries i.e. queries executed by QueryInterceptors are not intercepted.", "originalCommit": "ff3dffdf37319e44db04ecddaa8f48d3b0739905", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njg1ODM0OQ==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r556858349", "bodyText": "we can just move this to the interface as a default implementation -\ndefault void destroy()\n{\n}", "author": "mayankgarg1990", "createdAt": "2021-01-13T21:40:53Z", "path": "presto-jdbc/src/test/java/com/facebook/presto/jdbc/BaseQueryInterceptor.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.jdbc;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.sql.Statement;\n+import java.util.Map;\n+\n+public class BaseQueryInterceptor\n+        implements QueryInterceptor\n+{\n+    private Map<String, String> properties;\n+\n+    public QueryInterceptor init(Map<String, String> properties)\n+    {\n+        this.properties = ImmutableMap.copyOf(properties);\n+        return this;\n+    }\n+\n+    public void destroy()\n+    {\n+    }", "originalCommit": "ff3dffdf37319e44db04ecddaa8f48d3b0739905", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njg1ODY2OA==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r556858668", "bodyText": "same as above - just move this to the interface", "author": "mayankgarg1990", "createdAt": "2021-01-13T21:41:10Z", "path": "presto-jdbc/src/test/java/com/facebook/presto/jdbc/BaseQueryInterceptor.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.jdbc;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.sql.Statement;\n+import java.util.Map;\n+\n+public class BaseQueryInterceptor\n+        implements QueryInterceptor\n+{\n+    private Map<String, String> properties;\n+\n+    public QueryInterceptor init(Map<String, String> properties)\n+    {\n+        this.properties = ImmutableMap.copyOf(properties);\n+        return this;\n+    }\n+\n+    public void destroy()\n+    {\n+    }\n+\n+    public PrestoResultSet preProcess(String sql, Statement interceptedStatement)\n+    {\n+        return null;\n+    }\n+\n+    public PrestoResultSet postProcess(String sql, Statement interceptedStatement, PrestoResultSet originalResultSet)\n+    {\n+        return originalResultSet;\n+    }", "originalCommit": "ff3dffdf37319e44db04ecddaa8f48d3b0739905", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njg2MDc2OQ==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r556860769", "bodyText": "currently, we are getting the properties and storing this as a private member which means that no implementation will have access to this and we are not using properties within the scope of this class.\nMy recommendation for this whole class given my other comments on this class is to remove this class. The default implementations shall take care of what happens with the other 3 functions in this class and we should let me implementations figure out what they want to do with the properties that are passed in. They can choose to store the whole map or just keep reference to specific properties that they care about.", "author": "mayankgarg1990", "createdAt": "2021-01-13T21:43:12Z", "path": "presto-jdbc/src/test/java/com/facebook/presto/jdbc/BaseQueryInterceptor.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.jdbc;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.sql.Statement;\n+import java.util.Map;\n+\n+public class BaseQueryInterceptor\n+        implements QueryInterceptor\n+{\n+    private Map<String, String> properties;\n+\n+    public QueryInterceptor init(Map<String, String> properties)\n+    {\n+        this.properties = ImmutableMap.copyOf(properties);\n+        return this;\n+    }", "originalCommit": "ff3dffdf37319e44db04ecddaa8f48d3b0739905", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njk1MTk1OA==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r556951958", "bodyText": "I am curious as to why use this approach as compared to an approach similar to pre where in you just return a null instead of originalResultSet", "author": "mayankgarg1990", "createdAt": "2021-01-13T23:48:35Z", "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/QueryInterceptor.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.jdbc;\n+\n+import java.sql.Statement;\n+import java.util.Map;\n+\n+public interface QueryInterceptor\n+{\n+    /**\n+     * Called once per PrestoConnection at instantiation.\n+     *\n+     * @param properties the session properties supplied in the URI\n+     * @return QueryInterceptor\n+     */\n+    QueryInterceptor init(Map<String, String> properties);\n+\n+    /**\n+     * Called once to release any resources when PrestoConnection is closing.\n+     */\n+    void destroy();\n+\n+    /**\n+     * Called before the query has been sent to the server. This method is only called on\n+     * top-level queries i.e. queries executed by QueryInterceptors are not intercepted.\n+     *\n+     * This method can optionally return a PrestoResultSet. If a PrestoResultSet is returned from\n+     * from preProcess then the intercepted query is not executed and that PrestoResultSet is\n+     * returned instead. If there are multiple QueryInterceptors, preProcess will be called\n+     * on each and the last PrestoResultSet is returned.\n+     *\n+     * @param sql the SQL string of the query.\n+     * @param interceptedStatement the Statement being executed.\n+     * @return optional PrestoResultSet to be returned\n+     */\n+    PrestoResultSet preProcess(String sql, Statement interceptedStatement);\n+\n+    /**\n+     * Called after the query has been sent to the server. This method is only called on\n+     * top-level queries i.e. queries executed by QueryInterceptors are not intercepted.\n+     *\n+     * This method can optionally return a PrestoResultSet. If a PrestoResultSet is returned\n+     * from postProcess then that PrestoResultSet is returned instead. If there are multiple\n+     * QueryInterceptors, postProcess will be called on each and the last PrestoResultSet is returned.\n+     *\n+     * @param sql the SQL string of the query.\n+     * @param interceptedStatement the Statement being executed.\n+     * @param originalResultSet the intercepted ResultSet\n+     * @return optional PrestoResultSet to be returned instead of the original PrestoResultSet", "originalCommit": "ff3dffdf37319e44db04ecddaa8f48d3b0739905", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU4NjM4Nw==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r557586387", "bodyText": "It's the same approach. I think the implementation in the BaseQueryInterceptor threw you off. In the default implementation in the interface I changed it to just return null.", "author": "robbypete", "createdAt": "2021-01-14T17:59:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njk1MTk1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYxMDk1OQ==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r557610959", "bodyText": "@robbypete - This code was the part that made me write this comment -\nif (shouldIntercept) {\n                    resultSet = connection().invokeQueryInterceptorsPost(sql, this, resultSet);\n                    verifyNotNull(resultSet, \"invokeQueryInterceptorsPost should never return a null ResultSet\");\n                }\n\nAs I read it again carefully, it should be fine since the processInterceptors will just return the original ResultSet here.", "author": "mayankgarg1990", "createdAt": "2021-01-14T18:42:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njk1MTk1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njk2OTkxMA==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r556969910", "bodyText": "in this function - we are passing a fixed reference to the originalResultSet rather than the one returned by the previous post processor - in my opinion we should ensure that the correct and latest result set is being passed", "author": "mayankgarg1990", "createdAt": "2021-01-14T00:40:17Z", "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoConnection.java", "diffHunk": "@@ -741,6 +770,31 @@ WarningsManager getWarningsManager()\n         return warningsManager;\n     }\n \n+    PrestoResultSet invokeQueryInterceptorsPre(String sql, Statement interceptedStatement)\n+    {\n+        return processInterceptors(interceptor -> interceptor.preProcess(sql, interceptedStatement), null);\n+    }\n+\n+    PrestoResultSet invokeQueryInterceptorsPost(String sql, Statement interceptedStatement, PrestoResultSet originalResultSet)\n+    {\n+        return processInterceptors(interceptor -> interceptor.postProcess(sql, interceptedStatement, originalResultSet), originalResultSet);\n+    }", "originalCommit": "ff3dffdf37319e44db04ecddaa8f48d3b0739905", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d3f21a187a01e2090940a7c26dfb0f6b6ed70105", "url": "https://github.com/prestodb/presto/commit/d3f21a187a01e2090940a7c26dfb0f6b6ed70105", "message": "Add QueryInterceptor to presto-jdbc", "committedDate": "2021-01-14T19:34:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY2MDg3NA==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r557660874", "bodyText": "we should use Optional in the proper way for these 2 functions -\n    Optional<PrestoResultSet> invokeQueryInterceptorsPre(String sql, Statement interceptedStatement)\n    {\n        Optional<PrestoResultSet> interceptedResultSet = Optional.empty();\n\n        for (QueryInterceptor interceptor : this.queryInterceptorInstances) {\n            Optional<PrestoResultSet> newResultSet = interceptor.preProcess(sql, interceptedStatement);\n            if (newResultSet.isPresent()) {\n                interceptedResultSet = newResultSet;\n            }\n        }\n        return interceptedResultSet;\n    }\n\n    PrestoResultSet invokeQueryInterceptorsPost(String sql, Statement interceptedStatement, PrestoResultSet originalResultSet)\n    {\n        PrestoResultSet interceptedResultSet = originalResultSet;\n\n        for (QueryInterceptor interceptor : this.queryInterceptorInstances) {\n            Optional<PrestoResultSet> newResultSet = interceptor.postProcess(sql, interceptedStatement, interceptedResultSet);\n            if (newResultSet.isPresent()) {\n                interceptedResultSet = newResultSet.get();\n            }\n        }\n        return interceptedResultSet;\n    }", "author": "mayankgarg1990", "createdAt": "2021-01-14T19:56:10Z", "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoConnection.java", "diffHunk": "@@ -741,6 +770,32 @@ WarningsManager getWarningsManager()\n         return warningsManager;\n     }\n \n+    PrestoResultSet invokeQueryInterceptorsPre(String sql, Statement interceptedStatement)", "originalCommit": "d3f21a187a01e2090940a7c26dfb0f6b6ed70105", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY2MTQ0MA==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r557661440", "bodyText": "we can simplify this logic now since there is no innerResultSet and just say if the interceptor passes a resultset, we use it. My code block above includes this suggestion.", "author": "mayankgarg1990", "createdAt": "2021-01-14T19:56:58Z", "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoConnection.java", "diffHunk": "@@ -741,6 +770,32 @@ WarningsManager getWarningsManager()\n         return warningsManager;\n     }\n \n+    PrestoResultSet invokeQueryInterceptorsPre(String sql, Statement interceptedStatement)\n+    {\n+        PrestoResultSet interceptedResultSet = null;\n+\n+        for (QueryInterceptor interceptor : this.queryInterceptorInstances) {\n+            PrestoResultSet newResultSet = interceptor.preProcess(sql, interceptedStatement).orElse(null);\n+            if (newResultSet != null && newResultSet != interceptedResultSet) {", "originalCommit": "d3f21a187a01e2090940a7c26dfb0f6b6ed70105", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY2MjU1Ng==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r557662556", "bodyText": "can you clarify why this is needed?", "author": "mayankgarg1990", "createdAt": "2021-01-14T19:58:36Z", "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoStatement.java", "diffHunk": "@@ -236,25 +238,48 @@ final boolean internalExecute(String sql)\n \n         StatementClient client = null;\n         PrestoResultSet resultSet = null;\n+        boolean intercepted = false;\n+\n         try {\n-            client = connection().startQuery(sql, getStatementSessionProperties());\n-            if (client.isFinished()) {\n-                QueryStatusInfo finalStatusInfo = client.finalStatusInfo();\n-                if (finalStatusInfo.getError() != null) {\n-                    throw resultsException(finalStatusInfo);\n-                }\n-            }\n-            executingClient.set(client);\n             WarningsManager warningsManager = new WarningsManager();\n             currentWarningsManager.set(Optional.of(warningsManager));\n-            resultSet = new PrestoResultSet(this, client, maxRows.get(), progressConsumer, warningsManager);\n \n-            for (Map.Entry<String, SelectedRole> entry : client.getSetRoles().entrySet()) {\n-                connection.get().setRole(entry.getKey(), entry.getValue());\n+            int statementDepth = this.statementDepth.incrementAndGet();\n+            boolean shouldIntercept = !connection().getQueryInterceptorInstances().isEmpty() && statementDepth == 1;\n+\n+            if (shouldIntercept) {\n+                resultSet = connection().invokeQueryInterceptorsPre(sql, this);\n+            }\n+\n+            // Check if no resultSet is returned from an interceptor\n+            if (resultSet != null) {\n+                currentResult.set(resultSet);\n+                intercepted = true;\n+            }\n+            else {\n+                client = connection().startQuery(sql, getStatementSessionProperties());\n+                if (client.isFinished()) {\n+                    QueryStatusInfo finalStatusInfo = client.finalStatusInfo();\n+                    if (finalStatusInfo.getError() != null) {\n+                        throw resultsException(finalStatusInfo);\n+                    }\n+                }\n+                executingClient.set(client);\n+\n+                resultSet = new PrestoResultSet(this, client, maxRows.get(), progressConsumer, warningsManager);\n+\n+                for (Map.Entry<String, SelectedRole> entry : client.getSetRoles().entrySet()) {\n+                    connection.get().setRole(entry.getKey(), entry.getValue());\n+                }\n             }\n \n             // check if this is a query\n-            if (client.currentStatusInfo().getUpdateType() == null) {\n+            if (intercepted || client.currentStatusInfo().getUpdateType() == null) {\n+                currentResult.set(resultSet);", "originalCommit": "d3f21a187a01e2090940a7c26dfb0f6b6ed70105", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4NTc2Nw==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r557685767", "bodyText": "Previously (without innerResultSet logic), if an interceptor's postProcess() executes a query using the intercepted Statement and returns a ResultSet then we'll lose the reference to the top level query's ResultSet and it will stay opened past the lifetime of the Statement. Adding it here means it can be cleared in clearCurrentResults() when the interceptor's postProcess() executes another query.", "author": "robbypete", "createdAt": "2021-01-14T20:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY2MjU1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4NzEzMw==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r557687133", "bodyText": "Makes sense ! Should we move the second set() on line 283 to be inside the if condition then ?", "author": "mayankgarg1990", "createdAt": "2021-01-14T20:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY2MjU1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY5MjUyNQ==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r557692525", "bodyText": "Ah of course", "author": "robbypete", "createdAt": "2021-01-14T20:54:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY2MjU1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY2MzM3Ng==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r557663376", "bodyText": "we generally mark test functions as public", "author": "mayankgarg1990", "createdAt": "2021-01-14T19:59:47Z", "path": "presto-jdbc/src/test/java/com/facebook/presto/jdbc/TestQueryInterceptor.java", "diffHunk": "@@ -0,0 +1,284 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.jdbc;\n+\n+import com.facebook.airlift.log.Logging;\n+import com.facebook.presto.Session;\n+import com.facebook.presto.execution.QueryManager;\n+import com.facebook.presto.execution.QueryState;\n+import com.facebook.presto.server.BasicQueryInfo;\n+import com.facebook.presto.server.testing.TestingPrestoServer;\n+import com.facebook.presto.tests.DistributedQueryRunner;\n+import com.facebook.presto.tpch.TpchPlugin;\n+import com.google.common.collect.ImmutableMap;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.facebook.presto.jdbc.TestPrestoDriver.closeQuietly;\n+import static com.facebook.presto.testing.TestingSession.testSessionBuilder;\n+import static java.lang.String.format;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+@Test(singleThreaded = true)\n+public class TestQueryInterceptor\n+{\n+    private TestingPrestoServer server;\n+    private QueryManager qm;\n+\n+    @BeforeClass\n+    public void setup()\n+            throws Exception\n+    {\n+        Logging.initialize();\n+    }\n+\n+    @BeforeMethod\n+    public void setupServer()\n+            throws Exception\n+    {\n+        DistributedQueryRunner distributedQueryRunner = createTpchQueryRunner();\n+        server = distributedQueryRunner.getCoordinator();\n+        qm = server.getQueryManager();\n+    }\n+\n+    @AfterMethod(alwaysRun = true)\n+    public void teardownServer()\n+    {\n+        closeQuietly(server);\n+    }\n+\n+    public static DistributedQueryRunner createTpchQueryRunner()\n+            throws Exception\n+    {\n+        Session session = testSessionBuilder()\n+                .setCatalog(\"tpch\")\n+                .setSchema(\"tiny\")\n+                .build();\n+\n+        DistributedQueryRunner queryRunner = DistributedQueryRunner.builder(session).build();\n+        try {\n+            queryRunner.installPlugin(new TpchPlugin());\n+            queryRunner.createCatalog(\"tpch\", \"tpch\", ImmutableMap.of());\n+            return queryRunner;\n+        }\n+        catch (Exception e) {\n+            queryRunner.close();\n+            throw e;\n+        }\n+    }\n+\n+    @Test\n+    private void testBasicPrePreprocess()", "originalCommit": "d3f21a187a01e2090940a7c26dfb0f6b6ed70105", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY2NDQ4Mw==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r557664483", "bodyText": "thinking a bit more - how do you feel about having a default empty implementation for this as well. The caller can choose to implement it or ignore the - the interface itself does not require an implementation to implement this function.", "author": "mayankgarg1990", "createdAt": "2021-01-14T20:01:47Z", "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/QueryInterceptor.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.jdbc;\n+\n+import java.sql.Statement;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public interface QueryInterceptor\n+{\n+    /**\n+     * Called once per {@link <PrestoConnection>} at instantiation.\n+     *\n+     * @param properties the session properties supplied in the URI\n+     */\n+    void init(Map<String, String> properties);", "originalCommit": "d3f21a187a01e2090940a7c26dfb0f6b6ed70105", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MTIyMw==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r557681223", "bodyText": "Good point, I like it", "author": "robbypete", "createdAt": "2021-01-14T20:32:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY2NDQ4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY2NzExNw==", "url": "https://github.com/prestodb/presto/pull/15565#discussion_r557667117", "bodyText": "You can just say {@link PrestoConnection}", "author": "mayankgarg1990", "createdAt": "2021-01-14T20:06:33Z", "path": "presto-jdbc/src/main/java/com/facebook/presto/jdbc/QueryInterceptor.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.jdbc;\n+\n+import java.sql.Statement;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public interface QueryInterceptor\n+{\n+    /**\n+     * Called once per {@link <PrestoConnection>} at instantiation.", "originalCommit": "d3f21a187a01e2090940a7c26dfb0f6b6ed70105", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "77002e40dfa81c96f18f959179bb8734ab675f74", "url": "https://github.com/prestodb/presto/commit/77002e40dfa81c96f18f959179bb8734ab675f74", "message": "Add QueryInterceptor to presto-jdbc", "committedDate": "2021-01-14T21:12:18Z", "type": "commit"}, {"oid": "77002e40dfa81c96f18f959179bb8734ab675f74", "url": "https://github.com/prestodb/presto/commit/77002e40dfa81c96f18f959179bb8734ab675f74", "message": "Add QueryInterceptor to presto-jdbc", "committedDate": "2021-01-14T21:12:18Z", "type": "forcePushed"}]}