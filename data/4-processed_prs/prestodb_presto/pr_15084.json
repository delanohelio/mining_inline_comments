{"pr_number": 15084, "pr_title": "Adds support for microsecond timestamp precision", "pr_createdAt": "2020-08-26T01:18:21Z", "pr_url": "https://github.com/prestodb/presto/pull/15084", "timeline": [{"oid": "eed4b19ecc109b58de3df506ede18e46b3c7e9c9", "url": "https://github.com/prestodb/presto/commit/eed4b19ecc109b58de3df506ede18e46b3c7e9c9", "message": "Adds support for microsecond timestamp precision", "committedDate": "2020-08-26T01:19:15Z", "type": "forcePushed"}, {"oid": "886a6ddccfd31f5112bb484e38353adea80a3429", "url": "https://github.com/prestodb/presto/commit/886a6ddccfd31f5112bb484e38353adea80a3429", "message": "Adds support for microsecond timestamp precision", "committedDate": "2020-08-26T18:50:15Z", "type": "forcePushed"}, {"oid": "69fe2d46c523b09f9a2f7f10958d06e5c9d5c603", "url": "https://github.com/prestodb/presto/commit/69fe2d46c523b09f9a2f7f10958d06e5c9d5c603", "message": "Adds support for microsecond timestamp precision", "committedDate": "2020-08-26T21:33:52Z", "type": "forcePushed"}, {"oid": "a165602e5141d14c6142a977c3f810a92cefd50f", "url": "https://github.com/prestodb/presto/commit/a165602e5141d14c6142a977c3f810a92cefd50f", "message": "Adds support for microsecond timestamp precision", "committedDate": "2020-08-27T01:06:05Z", "type": "forcePushed"}, {"oid": "07d5482832f0d2cb45a1d07976b73db99abb7792", "url": "https://github.com/prestodb/presto/commit/07d5482832f0d2cb45a1d07976b73db99abb7792", "message": "Adds support for microsecond timestamp precision", "committedDate": "2020-08-27T01:07:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY5MTM1OA==", "url": "https://github.com/prestodb/presto/pull/15084#discussion_r478691358", "bodyText": "getTimestampTimeUnit", "author": "bhhari", "createdAt": "2020-08-27T20:57:35Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcReaderOptions.java", "diffHunk": "@@ -63,4 +73,9 @@ public boolean mapNullKeysEnabled()\n     {\n         return mapNullKeysEnabled;\n     }\n+\n+    public TimeUnit timestampTimeUnit()", "originalCommit": "07d5482832f0d2cb45a1d07976b73db99abb7792", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY5MjUzMw==", "url": "https://github.com/prestodb/presto/pull/15084#discussion_r478692533", "bodyText": "timeStampTimeUnit.compareTo(TimeUnit.SECONDS) <=0 and move the convert into getter\nsomething like this\n\npublic class DecodeTimestampOptions\n{\n    private static final int MILLIS_PER_SECOND = 1000;\n\n    private final TimeUnit timeUnit;\n    private final long baseTimestampInSeconds;\n\n    public DecodeTimestampOptions(\n            DateTimeZone hiveStorageTimeZone, TimeUnit timestampTimeUnit)\n    {\n        checkState(timestampTimeUnit.compareTo(TimeUnit.SECONDS) <=0 && timestampTimeUnit.compareTo(TimeUnit.NANOSECONDS)>=0);\n        this.timeUnit = timestampTimeUnit;\n        this.baseTimestampInSeconds = new DateTime(2015, 1, 1, 0, 0, requireNonNull(hiveStorageTimeZone, \"hiveStorageTimeZone is null\")).getMillis() / MILLIS_PER_SECOND;\n    }\n\n    public long timestampUnitsPerSecond()\n    {\n        return timeUnit.convert(1, TimeUnit.SECONDS);\n    }\n\n    public long nanosecondsPerTimestampUnit()\n    {\n        return timeUnit.convert(1, TimeUnit.NANOSECONDS);\n    }\n\n    public long baseTimestampInSeconds()\n    {\n        return baseTimestampInSeconds;\n    }\n}", "author": "bhhari", "createdAt": "2020-08-27T20:59:51Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/DecodeTimestampOptions.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc;\n+\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class DecodeTimestampOptions\n+{\n+    private static final int MILLIS_PER_SECOND = 1000;\n+\n+    private final long timestampUnitsPerSecond;\n+    private final long nanosecondsPerTimeUnit;\n+    private final long baseTimestampInSeconds;\n+\n+    public DecodeTimestampOptions(\n+            DateTimeZone hiveStorageTimeZone, TimeUnit timestampTimeUnit)\n+    {\n+        this.timestampUnitsPerSecond = requireNonNull(timestampTimeUnit).convert(1, TimeUnit.SECONDS);", "originalCommit": "07d5482832f0d2cb45a1d07976b73db99abb7792", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwMTA5MA==", "url": "https://github.com/prestodb/presto/pull/15084#discussion_r478701090", "bodyText": "I wanted to materialize nanosecondsPerTimeUnit/timestampUnitsPerSecond in ctor to avoid multiple virtual function calls on critical path (ApacheHiveTimestampDecoder#decodeTimestamp). Do you think it's ok?", "author": "borovsky-d", "createdAt": "2020-08-27T21:17:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY5MjUzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgwMjQ2Nw==", "url": "https://github.com/prestodb/presto/pull/15084#discussion_r478802467", "bodyText": "thanks, you are right.", "author": "bhhari", "createdAt": "2020-08-28T02:55:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY5MjUzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY5NDIzMA==", "url": "https://github.com/prestodb/presto/pull/15084#discussion_r478694230", "bodyText": "timeStampTimeUnit.compareTo(TimeUnit.NANOSECONDS) >=0", "author": "bhhari", "createdAt": "2020-08-27T21:03:21Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/DecodeTimestampOptions.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc;\n+\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class DecodeTimestampOptions\n+{\n+    private static final int MILLIS_PER_SECOND = 1000;\n+\n+    private final long timestampUnitsPerSecond;\n+    private final long nanosecondsPerTimeUnit;\n+    private final long baseTimestampInSeconds;\n+\n+    public DecodeTimestampOptions(\n+            DateTimeZone hiveStorageTimeZone, TimeUnit timestampTimeUnit)\n+    {\n+        this.timestampUnitsPerSecond = requireNonNull(timestampTimeUnit).convert(1, TimeUnit.SECONDS);\n+        if (this.timestampUnitsPerSecond == 0) {\n+            throw new IllegalArgumentException(timestampTimeUnit + \" should be <= second\");\n+        }\n+        this.nanosecondsPerTimeUnit = TimeUnit.NANOSECONDS.convert(1, requireNonNull(timestampTimeUnit));", "originalCommit": "07d5482832f0d2cb45a1d07976b73db99abb7792", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4ff542c296baa4a675691c66f7d0a4fb952dfa30", "url": "https://github.com/prestodb/presto/commit/4ff542c296baa4a675691c66f7d0a4fb952dfa30", "message": "Adds support for microsecond timestamp precision", "committedDate": "2020-08-27T21:21:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1MzcyMw==", "url": "https://github.com/prestodb/presto/pull/15084#discussion_r478753723", "bodyText": "It looks like there are only 2 possible values for timestampTimeUnit: MILLISECONDS and MICROSECONDS. Perhaps, add a check that this is so and also consider using a boolean to distinguish between the two possibilities.\nnit: timestampTimeUnit -> timeUnit since class name includes \"timestamp\"", "author": "mbasmanova", "createdAt": "2020-08-27T23:42:13Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/DecodeTimestampOptions.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc;\n+\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class DecodeTimestampOptions\n+{\n+    private static final int MILLIS_PER_SECOND = 1000;\n+\n+    private final long timestampUnitsPerSecond;\n+    private final long nanosecondsPerTimeUnit;\n+    private final long baseTimestampInSeconds;\n+\n+    public DecodeTimestampOptions(\n+            DateTimeZone hiveStorageTimeZone, TimeUnit timestampTimeUnit)", "originalCommit": "4ff542c296baa4a675691c66f7d0a4fb952dfa30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1OTk3Mw==", "url": "https://github.com/prestodb/presto/pull/15084#discussion_r478759973", "bodyText": "ok, using boolean flag instead of time unit", "author": "borovsky-d", "createdAt": "2020-08-28T00:05:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1MzcyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1NDEyNg==", "url": "https://github.com/prestodb/presto/pull/15084#discussion_r478754126", "bodyText": "This error message seems too cryptic. Wouldn't it be enough to assert that timestampTimeUnit is either MILLI or MICROSECONDS?", "author": "mbasmanova", "createdAt": "2020-08-27T23:43:39Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/DecodeTimestampOptions.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc;\n+\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class DecodeTimestampOptions\n+{\n+    private static final int MILLIS_PER_SECOND = 1000;\n+\n+    private final long timestampUnitsPerSecond;\n+    private final long nanosecondsPerTimeUnit;\n+    private final long baseTimestampInSeconds;\n+\n+    public DecodeTimestampOptions(\n+            DateTimeZone hiveStorageTimeZone, TimeUnit timestampTimeUnit)\n+    {\n+        this.timestampUnitsPerSecond = requireNonNull(timestampTimeUnit).convert(1, TimeUnit.SECONDS);\n+        if (this.timestampUnitsPerSecond == 0) {\n+            throw new IllegalArgumentException(timestampTimeUnit + \" should be <= second\");", "originalCommit": "4ff542c296baa4a675691c66f7d0a4fb952dfa30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2MDA5Ng==", "url": "https://github.com/prestodb/presto/pull/15084#discussion_r478760096", "bodyText": "I'm using boolean flag instead of time unit, so non relevant anymore.", "author": "borovsky-d", "createdAt": "2020-08-28T00:05:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1NDEyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1NDIzOA==", "url": "https://github.com/prestodb/presto/pull/15084#discussion_r478754238", "bodyText": "Why is this particular date? A comment is needed. Using TimeUnit instead of / MILLIS_PER_SECOND", "author": "mbasmanova", "createdAt": "2020-08-27T23:44:08Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/DecodeTimestampOptions.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc;\n+\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class DecodeTimestampOptions\n+{\n+    private static final int MILLIS_PER_SECOND = 1000;\n+\n+    private final long timestampUnitsPerSecond;\n+    private final long nanosecondsPerTimeUnit;\n+    private final long baseTimestampInSeconds;\n+\n+    public DecodeTimestampOptions(\n+            DateTimeZone hiveStorageTimeZone, TimeUnit timestampTimeUnit)\n+    {\n+        this.timestampUnitsPerSecond = requireNonNull(timestampTimeUnit).convert(1, TimeUnit.SECONDS);\n+        if (this.timestampUnitsPerSecond == 0) {\n+            throw new IllegalArgumentException(timestampTimeUnit + \" should be <= second\");\n+        }\n+        this.nanosecondsPerTimeUnit = TimeUnit.NANOSECONDS.convert(1, requireNonNull(timestampTimeUnit));\n+        if (this.nanosecondsPerTimeUnit == 0) {\n+            throw new IllegalArgumentException(timestampTimeUnit + \" should be >= nanosecond\");\n+        }\n+        this.baseTimestampInSeconds = new DateTime(2015, 1, 1, 0, 0, requireNonNull(hiveStorageTimeZone, \"hiveStorageTimeZone is null\")).getMillis() / MILLIS_PER_SECOND;", "originalCommit": "4ff542c296baa4a675691c66f7d0a4fb952dfa30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2MDc2Mw==", "url": "https://github.com/prestodb/presto/pull/15084#discussion_r478760763", "bodyText": "I didn't change it from original code https://github.com/prestodb/presto/blob/master/presto-orc/src/main/java/com/facebook/presto/orc/reader/TimestampBatchStreamReader.java#L81 but let me add comment to improve it", "author": "borovsky-d", "createdAt": "2020-08-28T00:07:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1NDIzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1NDM4Mw==", "url": "https://github.com/prestodb/presto/pull/15084#discussion_r478754383", "bodyText": "nit: getTimestampUnitsPerSecond -> getUnitsPerSecond", "author": "mbasmanova", "createdAt": "2020-08-27T23:44:36Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/DecodeTimestampOptions.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc;\n+\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class DecodeTimestampOptions\n+{\n+    private static final int MILLIS_PER_SECOND = 1000;\n+\n+    private final long timestampUnitsPerSecond;\n+    private final long nanosecondsPerTimeUnit;\n+    private final long baseTimestampInSeconds;\n+\n+    public DecodeTimestampOptions(\n+            DateTimeZone hiveStorageTimeZone, TimeUnit timestampTimeUnit)\n+    {\n+        this.timestampUnitsPerSecond = requireNonNull(timestampTimeUnit).convert(1, TimeUnit.SECONDS);\n+        if (this.timestampUnitsPerSecond == 0) {\n+            throw new IllegalArgumentException(timestampTimeUnit + \" should be <= second\");\n+        }\n+        this.nanosecondsPerTimeUnit = TimeUnit.NANOSECONDS.convert(1, requireNonNull(timestampTimeUnit));\n+        if (this.nanosecondsPerTimeUnit == 0) {\n+            throw new IllegalArgumentException(timestampTimeUnit + \" should be >= nanosecond\");\n+        }\n+        this.baseTimestampInSeconds = new DateTime(2015, 1, 1, 0, 0, requireNonNull(hiveStorageTimeZone, \"hiveStorageTimeZone is null\")).getMillis() / MILLIS_PER_SECOND;\n+    }\n+\n+    public long getTimestampUnitsPerSecond()", "originalCommit": "4ff542c296baa4a675691c66f7d0a4fb952dfa30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1NDQ0NQ==", "url": "https://github.com/prestodb/presto/pull/15084#discussion_r478754445", "bodyText": "nit: getNanosecondsPerTimestampUnit -> getNanosPerUnit", "author": "mbasmanova", "createdAt": "2020-08-27T23:44:46Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/DecodeTimestampOptions.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc;\n+\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class DecodeTimestampOptions\n+{\n+    private static final int MILLIS_PER_SECOND = 1000;\n+\n+    private final long timestampUnitsPerSecond;\n+    private final long nanosecondsPerTimeUnit;\n+    private final long baseTimestampInSeconds;\n+\n+    public DecodeTimestampOptions(\n+            DateTimeZone hiveStorageTimeZone, TimeUnit timestampTimeUnit)\n+    {\n+        this.timestampUnitsPerSecond = requireNonNull(timestampTimeUnit).convert(1, TimeUnit.SECONDS);\n+        if (this.timestampUnitsPerSecond == 0) {\n+            throw new IllegalArgumentException(timestampTimeUnit + \" should be <= second\");\n+        }\n+        this.nanosecondsPerTimeUnit = TimeUnit.NANOSECONDS.convert(1, requireNonNull(timestampTimeUnit));\n+        if (this.nanosecondsPerTimeUnit == 0) {\n+            throw new IllegalArgumentException(timestampTimeUnit + \" should be >= nanosecond\");\n+        }\n+        this.baseTimestampInSeconds = new DateTime(2015, 1, 1, 0, 0, requireNonNull(hiveStorageTimeZone, \"hiveStorageTimeZone is null\")).getMillis() / MILLIS_PER_SECOND;\n+    }\n+\n+    public long getTimestampUnitsPerSecond()\n+    {\n+        return timestampUnitsPerSecond;\n+    }\n+\n+    public long getNanosecondsPerTimestampUnit()", "originalCommit": "4ff542c296baa4a675691c66f7d0a4fb952dfa30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1NDU3OA==", "url": "https://github.com/prestodb/presto/pull/15084#discussion_r478754578", "bodyText": "nit: getBaseTimestampInSeconds -> getBaseSeconds + comment explaining what this is", "author": "mbasmanova", "createdAt": "2020-08-27T23:45:09Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/DecodeTimestampOptions.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.orc;\n+\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class DecodeTimestampOptions\n+{\n+    private static final int MILLIS_PER_SECOND = 1000;\n+\n+    private final long timestampUnitsPerSecond;\n+    private final long nanosecondsPerTimeUnit;\n+    private final long baseTimestampInSeconds;\n+\n+    public DecodeTimestampOptions(\n+            DateTimeZone hiveStorageTimeZone, TimeUnit timestampTimeUnit)\n+    {\n+        this.timestampUnitsPerSecond = requireNonNull(timestampTimeUnit).convert(1, TimeUnit.SECONDS);\n+        if (this.timestampUnitsPerSecond == 0) {\n+            throw new IllegalArgumentException(timestampTimeUnit + \" should be <= second\");\n+        }\n+        this.nanosecondsPerTimeUnit = TimeUnit.NANOSECONDS.convert(1, requireNonNull(timestampTimeUnit));\n+        if (this.nanosecondsPerTimeUnit == 0) {\n+            throw new IllegalArgumentException(timestampTimeUnit + \" should be >= nanosecond\");\n+        }\n+        this.baseTimestampInSeconds = new DateTime(2015, 1, 1, 0, 0, requireNonNull(hiveStorageTimeZone, \"hiveStorageTimeZone is null\")).getMillis() / MILLIS_PER_SECOND;\n+    }\n+\n+    public long getTimestampUnitsPerSecond()\n+    {\n+        return timestampUnitsPerSecond;\n+    }\n+\n+    public long getNanosecondsPerTimestampUnit()\n+    {\n+        return nanosecondsPerTimeUnit;\n+    }\n+\n+    public long getBaseTimestampInSeconds()", "originalCommit": "4ff542c296baa4a675691c66f7d0a4fb952dfa30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1NDc5OQ==", "url": "https://github.com/prestodb/presto/pull/15084#discussion_r478754799", "bodyText": "nit: message is missing\nthis.timestampTimeUnit = requireNonNull(timestampTimeUnit, \"timestampTimeUnit is null\");", "author": "mbasmanova", "createdAt": "2020-08-27T23:45:47Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcRecordReaderOptions.java", "diffHunk": "@@ -23,18 +25,25 @@\n     private final DataSize tinyStripeThreshold;\n     private final DataSize maxBlockSize;\n     private final boolean mapNullKeysEnabled;\n+    private final TimeUnit timestampTimeUnit;\n \n     public OrcRecordReaderOptions(OrcReaderOptions options)\n     {\n-        this(options.getMaxMergeDistance(), options.getTinyStripeThreshold(), options.getMaxBlockSize(), options.mapNullKeysEnabled());\n+        this(options.getMaxMergeDistance(), options.getTinyStripeThreshold(), options.getMaxBlockSize(), options.mapNullKeysEnabled(), options.getTimestampTimeUnit());\n     }\n \n-    public OrcRecordReaderOptions(DataSize maxMergeDistance, DataSize tinyStripeThreshold, DataSize maxBlockSize, boolean mapNullKeysEnabled)\n+    public OrcRecordReaderOptions(\n+            DataSize maxMergeDistance,\n+            DataSize tinyStripeThreshold,\n+            DataSize maxBlockSize,\n+            boolean mapNullKeysEnabled,\n+            TimeUnit timestampTimeUnit)\n     {\n         this.maxMergeDistance = requireNonNull(maxMergeDistance, \"maxMergeDistance is null\");\n         this.maxBlockSize = requireNonNull(maxBlockSize, \"maxBlockSize is null\");\n         this.tinyStripeThreshold = requireNonNull(tinyStripeThreshold, \"tinyStripeThreshold is null\");\n         this.mapNullKeysEnabled = mapNullKeysEnabled;\n+        this.timestampTimeUnit = requireNonNull(timestampTimeUnit);", "originalCommit": "4ff542c296baa4a675691c66f7d0a4fb952dfa30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc2MjU4OA==", "url": "https://github.com/prestodb/presto/pull/15084#discussion_r478762588", "bodyText": "changed to boolean", "author": "borovsky-d", "createdAt": "2020-08-28T00:15:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1NDc5OQ=="}], "type": "inlineReview"}, {"oid": "a6576bf7a5e31718c2c0a24a6fef8d634f1309f1", "url": "https://github.com/prestodb/presto/commit/a6576bf7a5e31718c2c0a24a6fef8d634f1309f1", "message": "Adds support for microsecond timestamp precision", "committedDate": "2020-08-28T00:21:22Z", "type": "forcePushed"}, {"oid": "2d178fad48595cbfea7e6efc39beb691ebb3c88a", "url": "https://github.com/prestodb/presto/commit/2d178fad48595cbfea7e6efc39beb691ebb3c88a", "message": "Adds support for microsecond timestamp precision", "committedDate": "2020-08-28T00:25:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc3MDAxMg==", "url": "https://github.com/prestodb/presto/pull/15084#discussion_r478770012", "bodyText": "typo: Micros -> Micro", "author": "mbasmanova", "createdAt": "2020-08-28T00:45:14Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcReaderOptions.java", "diffHunk": "@@ -63,4 +71,9 @@ public boolean mapNullKeysEnabled()\n     {\n         return mapNullKeysEnabled;\n     }\n+\n+    public boolean enableTimestampMicrosPrecision()", "originalCommit": "2d178fad48595cbfea7e6efc39beb691ebb3c88a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc3MDExMQ==", "url": "https://github.com/prestodb/presto/pull/15084#discussion_r478770111", "bodyText": "typo: Micros -> Micro", "author": "mbasmanova", "createdAt": "2020-08-28T00:45:39Z", "path": "presto-orc/src/main/java/com/facebook/presto/orc/OrcRecordReaderOptions.java", "diffHunk": "@@ -23,18 +23,25 @@\n     private final DataSize tinyStripeThreshold;\n     private final DataSize maxBlockSize;\n     private final boolean mapNullKeysEnabled;\n+    private final boolean enableTimestampMicrosPrecision;", "originalCommit": "2d178fad48595cbfea7e6efc39beb691ebb3c88a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cd1c5bead9ce3871245d766d0dff8d6e8ae63534", "url": "https://github.com/prestodb/presto/commit/cd1c5bead9ce3871245d766d0dff8d6e8ae63534", "message": "Adds support for microsecond timestamp precision", "committedDate": "2020-08-28T00:48:26Z", "type": "commit"}, {"oid": "cd1c5bead9ce3871245d766d0dff8d6e8ae63534", "url": "https://github.com/prestodb/presto/commit/cd1c5bead9ce3871245d766d0dff8d6e8ae63534", "message": "Adds support for microsecond timestamp precision", "committedDate": "2020-08-28T00:48:26Z", "type": "forcePushed"}]}