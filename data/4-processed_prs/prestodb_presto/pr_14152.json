{"pr_number": 14152, "pr_title": "Optimize configuration distribution in Presto on Spark", "pr_createdAt": "2020-02-24T21:10:37Z", "pr_url": "https://github.com/prestodb/presto/pull/14152", "timeline": [{"oid": "7d20ae9296967dde28dcb24a08ad8c1d62dc9ce8", "url": "https://github.com/prestodb/presto/commit/7d20ae9296967dde28dcb24a08ad8c1d62dc9ce8", "message": "Make sure spark service is created only once\n\nIf VM is recycled it is possible to reuse Presto service.\nGenerally it is not expected for a VM to be reused between different queries.\nIf (for some strange reason) VM is reused between queries, and the Presto\npackage or configuration is different for these queries - we prefer to fail\ninstead of keep creating Presto services. Immediate failure is preferred to\navoid hidden liveness issues (such as memory leaks, etc.)", "committedDate": "2020-02-25T14:46:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzOTU2NA==", "url": "https://github.com/prestodb/presto/pull/14152#discussion_r384139564", "bodyText": "why cannot we do\n        String connectorName = properties.remove(\"connector.name\");\nSimilar to the logic in \n  \n    \n      presto/presto-main/src/main/java/com/facebook/presto/metadata/StaticCatalogStore.java\n    \n    \n         Line 93\n      in\n      20aa322\n    \n    \n    \n    \n\n        \n          \n           String connectorName = properties.remove(\"connector.name\");", "author": "wenleix", "createdAt": "2020-02-25T21:34:31Z", "path": "presto-main/src/main/java/com/facebook/presto/metadata/StaticCatalogStore.java", "diffHunk": "@@ -75,25 +82,46 @@ public void loadCatalogs()\n             }\n         }\n \n+        additionalCatalogs.forEach(this::loadCatalog);\n+\n         catalogsLoaded.set(true);\n     }\n \n     private void loadCatalog(File file)\n             throws Exception\n     {\n         String catalogName = Files.getNameWithoutExtension(file.getName());\n+\n+        log.info(\"-- Loading catalog properties %s --\", file);\n+        Map<String, String> properties = new HashMap<>(loadProperties(file));\n+        checkState(properties.containsKey(\"connector.name\"), \"Catalog configuration %s does not contain connector.name\", file.getAbsoluteFile());\n+\n+        loadCatalog(catalogName, properties);\n+    }\n+\n+    private void loadCatalog(String catalogName, Map<String, String> properties)\n+    {\n         if (disabledCatalogs.contains(catalogName)) {\n             log.info(\"Skipping disabled catalog %s\", catalogName);\n             return;\n         }\n \n-        log.info(\"-- Loading catalog %s --\", file);\n-        Map<String, String> properties = new HashMap<>(loadProperties(file));\n+        log.info(\"-- Loading catalog %s --\", catalogName);\n+\n+        String connectorName = null;\n+        ImmutableMap.Builder<String, String> connectorProperties = ImmutableMap.builder();\n+        for (Entry<String, String> entry : properties.entrySet()) {\n+            if (entry.getKey().equals(\"connector.name\")) {", "originalCommit": "4d8e7e658b13ce71c89f2fab515f5f461e640bb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE1MTI0Mw==", "url": "https://github.com/prestodb/presto/pull/14152#discussion_r384151243", "bodyText": "Now\nprivate void loadCatalog(String catalogName, Map<String, String> properties)\n\nis used by the\npublic void loadCatalogs(Map<String, Map<String, String>> additionalCatalogs)\n\nwhere the additionalCatalogs parameter comes from the outside, and might be immutable.\nBefore a copy of the properties map was created here: https://github.com/prestodb/presto/pull/14152/files/4d8e7e658b13ce71c89f2fab515f5f461e640bb8#diff-665defb947f4d22b0cf16cb75130fcddR96\nAnd actually, we don't have to create a copy any longer", "author": "arhimondr", "createdAt": "2020-02-25T21:57:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzOTU2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE0MTMzNA==", "url": "https://github.com/prestodb/presto/pull/14152#discussion_r384141334", "bodyText": "defensive deep copy :)", "author": "wenleix", "createdAt": "2020-02-25T21:38:17Z", "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/PrestoSparkInjectorFactory.java", "diffHunk": "@@ -33,18 +33,23 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n \n import static com.facebook.presto.server.PrestoSystemRequirements.verifySystemTimeIsReasonable;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n import static java.util.Objects.requireNonNull;\n \n public class PrestoSparkInjectorFactory\n {\n-    private final Map<String, String> properties;\n+    private final Map<String, String> configProperties;\n+    private final Map<String, Map<String, String>> catalogProperties;\n     private final List<Module> additionalModules;\n \n-    public PrestoSparkInjectorFactory(Map<String, String> properties, List<Module> additionalModules)\n+    public PrestoSparkInjectorFactory(Map<String, String> configProperties, Map<String, Map<String, String>> catalogProperties, List<Module> additionalModules)\n     {\n-        this.properties = ImmutableMap.copyOf(requireNonNull(properties, \"properties is null\"));\n+        this.configProperties = ImmutableMap.copyOf(requireNonNull(configProperties, \"configProperties is null\"));\n+        this.catalogProperties = requireNonNull(catalogProperties, \"catalogProperties is null\").entrySet().stream()\n+                .collect(toImmutableMap(Entry::getKey, entry -> ImmutableMap.copyOf(entry.getValue())));", "originalCommit": "4d8e7e658b13ce71c89f2fab515f5f461e640bb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE0MjkyOA==", "url": "https://github.com/prestodb/presto/pull/14152#discussion_r384142928", "bodyText": "Any reason why we don't use Map<ConnectorId, Map<String, String>> (see \n  \n    \n      presto/presto-main/src/main/java/com/facebook/presto/SessionRepresentation.java\n    \n    \n         Line 58\n      in\n      20aa322\n    \n    \n    \n    \n\n        \n          \n           private final Map<ConnectorId, Map<String, String>> catalogProperties; \n        \n    \n  \n\n ) ?", "author": "wenleix", "createdAt": "2020-02-25T21:41:19Z", "path": "presto-spark-base/src/main/java/com/facebook/presto/spark/PrestoSparkInjectorFactory.java", "diffHunk": "@@ -33,18 +33,23 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n \n import static com.facebook.presto.server.PrestoSystemRequirements.verifySystemTimeIsReasonable;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n import static java.util.Objects.requireNonNull;\n \n public class PrestoSparkInjectorFactory\n {\n-    private final Map<String, String> properties;\n+    private final Map<String, String> configProperties;\n+    private final Map<String, Map<String, String>> catalogProperties;", "originalCommit": "4d8e7e658b13ce71c89f2fab515f5f461e640bb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE1MjgwMg==", "url": "https://github.com/prestodb/presto/pull/14152#discussion_r384152802", "bodyText": "The StaticCatalogStore takes catalog name as a string: https://github.com/prestodb/presto/pull/14152/files/4d8e7e658b13ce71c89f2fab515f5f461e640bb8#diff-665defb947f4d22b0cf16cb75130fcddR102 because further the ConnectorManager also takes the catalog name as a string: https://github.com/prestodb/presto/pull/14152/files/4d8e7e658b13ce71c89f2fab515f5f461e640bb8#diff-665defb947f4d22b0cf16cb75130fcddR124. The ConnectorManager#createConnection returns the ConnectorId.", "author": "arhimondr", "createdAt": "2020-02-25T22:00:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE0MjkyOA=="}], "type": "inlineReview"}, {"oid": "b0b62be002c63732e6d8b37b94e93adc5e40d306", "url": "https://github.com/prestodb/presto/commit/b0b62be002c63732e6d8b37b94e93adc5e40d306", "message": "Optimize presto on spark configuration deployment", "committedDate": "2020-02-25T22:04:27Z", "type": "commit"}, {"oid": "b3e982a23ceb5f01f4ea911d2843edb60833e6c3", "url": "https://github.com/prestodb/presto/commit/b3e982a23ceb5f01f4ea911d2843edb60833e6c3", "message": "Make sure spark service is created only once\n\nIf VM is recycled it is possible to reuse Presto service.\nGenerally it is not expected for a VM to be reused between different queries.\nIf (for some strange reason) VM is reused between queries, and the Presto\npackage or configuration is different for these queries - we prefer to fail\ninstead of keep creating Presto services. Immediate failure is preferred to\navoid hidden liveness issues (such as memory leaks, etc.)", "committedDate": "2020-02-25T22:04:28Z", "type": "commit"}, {"oid": "b3e982a23ceb5f01f4ea911d2843edb60833e6c3", "url": "https://github.com/prestodb/presto/commit/b3e982a23ceb5f01f4ea911d2843edb60833e6c3", "message": "Make sure spark service is created only once\n\nIf VM is recycled it is possible to reuse Presto service.\nGenerally it is not expected for a VM to be reused between different queries.\nIf (for some strange reason) VM is reused between queries, and the Presto\npackage or configuration is different for these queries - we prefer to fail\ninstead of keep creating Presto services. Immediate failure is preferred to\navoid hidden liveness issues (such as memory leaks, etc.)", "committedDate": "2020-02-25T22:04:28Z", "type": "forcePushed"}]}