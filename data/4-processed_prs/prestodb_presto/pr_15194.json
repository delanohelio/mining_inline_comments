{"pr_number": 15194, "pr_title": "Add support for Prometheus plugin", "pr_createdAt": "2020-09-20T05:56:15Z", "pr_url": "https://github.com/prestodb/presto/pull/15194", "timeline": [{"oid": "00b34010eb28dc04a9ac68e4c4de04c5edcffa04", "url": "https://github.com/prestodb/presto/commit/00b34010eb28dc04a9ac68e4c4de04c5edcffa04", "message": "add support for Prometheus plugin", "committedDate": "2020-09-21T18:23:47Z", "type": "forcePushed"}, {"oid": "8130526941a69be435f174ce15b7292c143703e2", "url": "https://github.com/prestodb/presto/commit/8130526941a69be435f174ce15b7292c143703e2", "message": "add support for Prometheus plugin", "committedDate": "2020-09-21T18:24:48Z", "type": "forcePushed"}, {"oid": "e10d819cfb640dd2203e33349a17f400659e1627", "url": "https://github.com/prestodb/presto/commit/e10d819cfb640dd2203e33349a17f400659e1627", "message": "Add support for Prometheus plugin", "committedDate": "2020-09-24T06:16:44Z", "type": "forcePushed"}, {"oid": "8809b41e584fc65893111a0cc33277e2f0b08e41", "url": "https://github.com/prestodb/presto/commit/8809b41e584fc65893111a0cc33277e2f0b08e41", "message": "Add support for Prometheus plugin", "committedDate": "2020-09-24T08:31:36Z", "type": "forcePushed"}, {"oid": "652ff8d916d3c68ae6b6972a667002b72a34fe28", "url": "https://github.com/prestodb/presto/commit/652ff8d916d3c68ae6b6972a667002b72a34fe28", "message": "Add support for Prometheus plugin", "committedDate": "2020-09-25T00:23:38Z", "type": "forcePushed"}, {"oid": "423b634fa53942319c2062c98800456e318bec43", "url": "https://github.com/prestodb/presto/commit/423b634fa53942319c2062c98800456e318bec43", "message": "fix pom", "committedDate": "2020-09-25T21:29:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNDQwNQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r495614405", "bodyText": "this is too specialized an interface; move to the connector package", "author": "highker", "createdAt": "2020-09-27T20:47:33Z", "path": "presto-common/src/main/java/com/facebook/presto/common/type/TypeSignature.java", "diffHunk": "@@ -403,4 +403,9 @@ public int hashCode()\n     {\n         return Objects.hash(base.toLowerCase(Locale.ENGLISH), parameters);\n     }\n+\n+    public static TypeSignature mapType(TypeSignature keyType, TypeSignature valueType)", "originalCommit": "423b634fa53942319c2062c98800456e318bec43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMTUzMQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r496301531", "bodyText": "sure, is moved to connector package under column class", "author": "fgwang7w", "createdAt": "2020-09-29T00:07:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNDQwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNDkzMA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r495614930", "bodyText": "Let's avoid using apache stuff. Use com.facebook.airlift.http.client instead.", "author": "highker", "createdAt": "2020-09-27T20:52:51Z", "path": "presto-prometheus/pom.xml", "diffHunk": "@@ -0,0 +1,240 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>com.facebook.presto</groupId>\n+        <artifactId>presto-root</artifactId>\n+        <version>0.242-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>presto-prometheus</artifactId>\n+    <description>Presto - Prometheus Connector</description>\n+    <packaging>presto-plugin</packaging>\n+\n+    <properties>\n+        <air.main.basedir>${project.parent.basedir}</air.main.basedir>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.facebook.airlift</groupId>\n+            <artifactId>bootstrap</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.facebook.airlift</groupId>\n+            <artifactId>configuration</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.facebook.airlift</groupId>\n+            <artifactId>json</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.google.inject</groupId>\n+            <artifactId>guice</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.facebook.airlift</groupId>\n+            <artifactId>log</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>io.airlift</groupId>\n+            <artifactId>units</artifactId>\n+            <scope>provided</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-core</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-databind</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.datatype</groupId>\n+            <artifactId>jackson-datatype-jsr310</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.google.guava</groupId>\n+            <artifactId>guava</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.squareup.okhttp3</groupId>\n+            <artifactId>okhttp</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>javax.annotation</groupId>\n+            <artifactId>javax.annotation-api</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>javax.inject</groupId>\n+            <artifactId>javax.inject</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>javax.validation</groupId>\n+            <artifactId>validation-api</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.apache.httpcomponents</groupId>\n+            <artifactId>httpclient</artifactId>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>commons-logging</groupId>\n+                    <artifactId>commons-logging</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.apache.httpcomponents</groupId>\n+            <artifactId>httpcore</artifactId>\n+            <version>4.4.13</version>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>commons-logging</groupId>\n+                    <artifactId>commons-logging</artifactId>\n+                </exclusion>\n+                <exclusion>\n+                    <groupId>org.slf4j</groupId>\n+                    <artifactId>jcl-over-slf4j</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>", "originalCommit": "423b634fa53942319c2062c98800456e318bec43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNjMzMg==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r496316332", "bodyText": "sure, i only need the package to support HttpUriBuilder", "author": "fgwang7w", "createdAt": "2020-09-29T01:04:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNDkzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNDk3Nw==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r495614977", "bodyText": "public", "author": "highker", "createdAt": "2020-09-27T20:53:30Z", "path": "presto-prometheus/src/main/java/com.facebook.presto.plugin.prometheus/PrometheusClient.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.airlift.json.JsonCodec;\n+import com.facebook.presto.common.type.DoubleType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.facebook.presto.common.type.TimestampType.TIMESTAMP;\n+import static com.facebook.presto.common.type.TypeSignature.mapType;\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_TABLES_METRICS_RETRIEVE_ERROR;\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_UNKNOWN_ERROR;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+public class PrometheusClient\n+{\n+    static final Type TIMESTAMP_COLUMN_TYPE = TIMESTAMP;\n+    static final String METRICS_ENDPOINT = \"/api/v1/label/__name__/values\";", "originalCommit": "423b634fa53942319c2062c98800456e318bec43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNDk4OA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r495614988", "bodyText": "break a line before this", "author": "highker", "createdAt": "2020-09-27T20:53:37Z", "path": "presto-prometheus/src/main/java/com.facebook.presto.plugin.prometheus/PrometheusClient.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.airlift.json.JsonCodec;\n+import com.facebook.presto.common.type.DoubleType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.facebook.presto.common.type.TimestampType.TIMESTAMP;\n+import static com.facebook.presto.common.type.TypeSignature.mapType;\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_TABLES_METRICS_RETRIEVE_ERROR;\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_UNKNOWN_ERROR;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+public class PrometheusClient\n+{\n+    static final Type TIMESTAMP_COLUMN_TYPE = TIMESTAMP;\n+    static final String METRICS_ENDPOINT = \"/api/v1/label/__name__/values\";\n+    private static final OkHttpClient httpClient = new OkHttpClient.Builder().build();", "originalCommit": "423b634fa53942319c2062c98800456e318bec43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNTAxMw==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r495615013", "bodyText": "remove final; same for all other class definitions", "author": "highker", "createdAt": "2020-09-27T20:53:59Z", "path": "presto-prometheus/src/main/java/com.facebook.presto.plugin.prometheus/PrometheusClock.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import javax.inject.Inject;\n+\n+import java.time.Clock;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+\n+/**\n+ * allow for settable Clock for testing\n+ */\n+public final class PrometheusClock", "originalCommit": "423b634fa53942319c2062c98800456e318bec43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNTE2MA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r495615160", "bodyText": "use dot \".\" for domain and dash (\"-\") for the names. e.g., \"prometheus.query-chunk-size-duration\"", "author": "highker", "createdAt": "2020-09-27T20:55:11Z", "path": "presto-prometheus/src/main/java/com.facebook.presto.plugin.prometheus/PrometheusConnectorConfig.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.airlift.configuration.ConfigDescription;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.ConfigurationException;\n+import com.google.inject.spi.Message;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MinDuration;\n+\n+import javax.annotation.PostConstruct;\n+import javax.validation.constraints.NotNull;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+\n+public class PrometheusConnectorConfig\n+{\n+    private URI prometheusURI = URI.create(\"http://localhost:9090\");\n+    private Duration queryChunkSizeDuration = new Duration(1, TimeUnit.DAYS);\n+    private Duration maxQueryRangeDuration = new Duration(21, TimeUnit.DAYS);\n+    private Duration cacheDuration = new Duration(30, TimeUnit.SECONDS);\n+    private File bearerTokenFile;\n+\n+    @NotNull\n+    public URI getPrometheusURI()\n+    {\n+        return prometheusURI;\n+    }\n+\n+    @Config(\"prometheus.uri\")\n+    @ConfigDescription(\"Where to find Prometheus coordinator host\")\n+    public PrometheusConnectorConfig setPrometheusURI(URI prometheusURI)\n+    {\n+        this.prometheusURI = prometheusURI;\n+        return this;\n+    }\n+\n+    @MinDuration(\"1ms\")\n+    public Duration getQueryChunkSizeDuration()\n+    {\n+        return queryChunkSizeDuration;\n+    }\n+\n+    @Config(\"prometheus.query.chunk.size.duration\")", "originalCommit": "423b634fa53942319c2062c98800456e318bec43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM1ODQ4Mg==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r496358482", "bodyText": "revised all related changes", "author": "fgwang7w", "createdAt": "2020-09-29T03:36:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNTE2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNTIyMA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r495615220", "bodyText": "private final static", "author": "highker", "createdAt": "2020-09-27T20:55:41Z", "path": "presto-prometheus/src/main/java/com.facebook.presto.plugin.prometheus/PrometheusConnectorFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.airlift.bootstrap.Bootstrap;\n+import com.facebook.airlift.json.JsonModule;\n+import com.facebook.presto.spi.ConnectorHandleResolver;\n+import com.facebook.presto.spi.connector.Connector;\n+import com.facebook.presto.spi.connector.ConnectorContext;\n+import com.facebook.presto.spi.connector.ConnectorFactory;\n+import com.google.inject.Injector;\n+\n+import java.util.Map;\n+\n+import static com.google.common.base.Throwables.throwIfUnchecked;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrometheusConnectorFactory\n+        implements ConnectorFactory\n+{\n+    String name = \"prometheus\";", "originalCommit": "423b634fa53942319c2062c98800456e318bec43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNTM2NA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r495615364", "bodyText": "When do we need to set values? Can we make it immutable?", "author": "highker", "createdAt": "2020-09-27T20:57:36Z", "path": "presto-prometheus/src/main/java/com.facebook.presto.plugin.prometheus/PrometheusMetricResult.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonSetter;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrometheusMetricResult\n+{\n+    private final Map<String, String> metricHeader;\n+    private PrometheusTimeSeriesValueArray timeSeriesValues;\n+\n+    @JsonCreator\n+    public PrometheusMetricResult(\n+            @JsonProperty(\"metric\") Map<String, String> metricHeader,\n+            @JsonProperty(\"values\") PrometheusTimeSeriesValueArray timeSeriesValues)\n+    {\n+        requireNonNull(metricHeader, \"metricHeader is null\");\n+        this.metricHeader = metricHeader;\n+        this.timeSeriesValues = timeSeriesValues;\n+    }\n+\n+    @JsonSetter(\"value\")\n+    private void setTimeSeriesValues(PrometheusTimeSeriesValue timeSeriesValue)", "originalCommit": "423b634fa53942319c2062c98800456e318bec43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM2MTYxOQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r496361619", "bodyText": "it's never used. removed", "author": "fgwang7w", "createdAt": "2020-09-29T03:49:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNTM2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNTQ5NQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r495615495", "bodyText": "PrometheusQueryResponse", "author": "highker", "createdAt": "2020-09-27T20:59:07Z", "path": "presto-prometheus/src/main/java/com.facebook.presto.plugin.prometheus/PrometheusQueryResponseParse.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonToken;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_PARSE_ERROR;\n+import static java.util.Collections.singletonList;\n+\n+public class PrometheusQueryResponseParse", "originalCommit": "423b634fa53942319c2062c98800456e318bec43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNTUyNQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r495615525", "bodyText": "everything should be final", "author": "highker", "createdAt": "2020-09-27T20:59:23Z", "path": "presto-prometheus/src/main/java/com.facebook.presto.plugin.prometheus/PrometheusQueryResponseParse.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonToken;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_PARSE_ERROR;\n+import static java.util.Collections.singletonList;\n+\n+public class PrometheusQueryResponseParse\n+{\n+    private boolean status;\n+\n+    private String error;\n+    private String errorType;\n+    private String resultType;\n+    private String result;\n+    private List<PrometheusMetricResult> results;", "originalCommit": "423b634fa53942319c2062c98800456e318bec43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM2MzM3OA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r496363378", "bodyText": "these varilables are set in a loop and may be set multiple times, we don't need to enforce immutable type here.", "author": "fgwang7w", "createdAt": "2020-09-29T03:57:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNTUyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNTY0Mg==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r495615642", "bodyText": "this can be a static helper function to be\nPrometheusQueryResponse parsePrometheusQueryResponse(InputStream inputStream)", "author": "highker", "createdAt": "2020-09-27T21:00:17Z", "path": "presto-prometheus/src/main/java/com.facebook.presto.plugin.prometheus/PrometheusQueryResponseParse.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonToken;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_PARSE_ERROR;\n+import static java.util.Collections.singletonList;\n+\n+public class PrometheusQueryResponseParse\n+{\n+    private boolean status;\n+\n+    private String error;\n+    private String errorType;\n+    private String resultType;\n+    private String result;\n+    private List<PrometheusMetricResult> results;\n+\n+    public PrometheusQueryResponseParse(InputStream response)", "originalCommit": "423b634fa53942319c2062c98800456e318bec43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNTY4MQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r495615681", "bodyText": "this could be static right?", "author": "highker", "createdAt": "2020-09-27T21:00:36Z", "path": "presto-prometheus/src/main/java/com.facebook.presto.plugin.prometheus/PrometheusQueryResponseParse.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonToken;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_PARSE_ERROR;\n+import static java.util.Collections.singletonList;\n+\n+public class PrometheusQueryResponseParse\n+{\n+    private boolean status;\n+\n+    private String error;\n+    private String errorType;\n+    private String resultType;\n+    private String result;\n+    private List<PrometheusMetricResult> results;\n+\n+    public PrometheusQueryResponseParse(InputStream response)\n+            throws IOException\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new JavaTimeModule());", "originalCommit": "423b634fa53942319c2062c98800456e318bec43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQxMTY2MQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r496411661", "bodyText": "changed this class to call a helper function which is in private static.", "author": "fgwang7w", "createdAt": "2020-09-29T05:13:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNTY4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNTg1OQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r495615859", "bodyText": "This is always going to be false as we are comparing String with Type", "author": "highker", "createdAt": "2020-09-27T21:02:03Z", "path": "presto-prometheus/src/main/java/com.facebook.presto.plugin.prometheus/PrometheusRecordCursor.java", "diffHunk": "@@ -0,0 +1,298 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.MapType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeUtils;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.RecordCursor;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.io.ByteSource;\n+import com.google.common.io.CountingInputStream;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.sql.Timestamp;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.common.type.DoubleType.DOUBLE;\n+import static com.facebook.presto.common.type.StandardTypes.BIGINT;\n+import static com.facebook.presto.common.type.StandardTypes.BOOLEAN;\n+import static com.facebook.presto.common.type.StandardTypes.INTEGER;\n+import static com.facebook.presto.common.type.StandardTypes.SMALLINT;\n+import static com.facebook.presto.common.type.StandardTypes.TINYINT;\n+import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n+import static com.facebook.presto.plugin.prometheus.PrometheusClient.TIMESTAMP_COLUMN_TYPE;\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrometheusRecordCursor\n+        implements RecordCursor\n+{\n+    private final List<PrometheusColumnHandle> columnHandles;\n+    private final int[] fieldToColumnIndex;\n+\n+    private final Iterator<PrometheusStandardizedRow> metricsItr;\n+    private final long totalBytes;\n+\n+    private PrometheusStandardizedRow fields;\n+\n+    public PrometheusRecordCursor(List<PrometheusColumnHandle> columnHandles, ByteSource byteSource)\n+    {\n+        this.columnHandles = columnHandles;\n+\n+        fieldToColumnIndex = new int[columnHandles.size()];\n+        for (int i = 0; i < columnHandles.size(); i++) {\n+            PrometheusColumnHandle columnHandle = columnHandles.get(i);\n+            fieldToColumnIndex[i] = columnHandle.getOrdinalPosition();\n+        }\n+\n+        try (CountingInputStream input = new CountingInputStream(byteSource.openStream())) {\n+            metricsItr = prometheusResultsInStandardizedForm(new PrometheusQueryResponseParse(input).getResults()).iterator();\n+            totalBytes = input.getCount();\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    static Block getBlockFromMap(Type mapType, Map<?, ?> map)\n+    {\n+        // on functions like COUNT() the Type won't be a MapType\n+        if (!(mapType instanceof MapType)) {\n+            return null;\n+        }\n+        Type keyType = mapType.getTypeParameters().get(0);\n+        Type valueType = mapType.getTypeParameters().get(1);\n+\n+        BlockBuilder mapBlockBuilder = mapType.createBlockBuilder(null, 1);\n+        BlockBuilder builder = mapBlockBuilder.beginBlockEntry();\n+\n+        for (Map.Entry<?, ?> entry : map.entrySet()) {\n+            writeObject(builder, keyType, entry.getKey());\n+            writeObject(builder, valueType, entry.getValue());\n+        }\n+\n+        mapBlockBuilder.closeEntry();\n+        return (Block) mapType.getObject(mapBlockBuilder, 0);\n+    }\n+\n+    static Map<Object, Object> getMapFromBlock(Type type, Block block)\n+    {\n+        MapType mapType = (MapType) type;\n+        Type keyType = mapType.getKeyType();\n+        Type valueType = mapType.getValueType();\n+        Map<Object, Object> map = new HashMap<>(block.getPositionCount() / 2);\n+        for (int i = 0; i < block.getPositionCount(); i += 2) {\n+            map.put(readObject(keyType, block, i), readObject(valueType, block, i + 1));\n+        }\n+        return map;\n+    }\n+\n+    private static void writeObject(BlockBuilder builder, Type type, Object obj)\n+    {\n+        if (type instanceof ArrayType) {\n+            Type elementType = ((ArrayType) type).getElementType();\n+            BlockBuilder arrayBuilder = builder.beginBlockEntry();\n+            for (Object item : (List<?>) obj) {\n+                writeObject(arrayBuilder, elementType, item);\n+            }\n+            builder.closeEntry();\n+        }\n+        else if (type instanceof MapType) {\n+            MapType mapType = (MapType) type;\n+            BlockBuilder mapBlockBuilder = builder.beginBlockEntry();\n+            for (Map.Entry<?, ?> entry : ((Map<?, ?>) obj).entrySet()) {\n+                writeObject(mapBlockBuilder, mapType.getKeyType(), entry.getKey());\n+                writeObject(mapBlockBuilder, mapType.getValueType(), entry.getValue());\n+            }\n+            builder.closeEntry();\n+        }\n+        else {\n+            if (BOOLEAN.equals(type)\n+                    || TINYINT.equals(type)\n+                    || SMALLINT.equals(type)\n+                    || INTEGER.equals(type)\n+                    || BIGINT.equals(type)\n+                    || DOUBLE.equals(type)", "originalCommit": "423b634fa53942319c2062c98800456e318bec43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ0OTk5Mw==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r496449993", "bodyText": "I'm not sure I understand what you mean here. Type is an interface but looks like the caller will pass in from getKeyType or getTypeParameters. I verify using TestPrometheusMetricsIntegration and break at the line to check which evaluates correctly.", "author": "fgwang7w", "createdAt": "2020-09-29T06:37:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNTg1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNjE1Nw==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r495616157", "bodyText": "Instead of using 1, 2, 3, give them specific names to indicate the purpose", "author": "highker", "createdAt": "2020-09-27T21:05:09Z", "path": "presto-prometheus/src/test/java/com.facebook.presto.plugin.prometheus/TestPrometheusIntegrationTests1.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.presto.common.type.DoubleType;\n+import com.facebook.presto.spi.ColumnMetadata;\n+import com.facebook.presto.spi.ConnectorTableMetadata;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.RecordSet;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.net.URI;\n+\n+import static com.facebook.presto.common.type.BigintType.BIGINT;\n+import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n+import static com.facebook.presto.plugin.prometheus.PrometheusClient.TIMESTAMP_COLUMN_TYPE;\n+import static com.facebook.presto.plugin.prometheus.PrometheusQueryRunner.createPrometheusClient;\n+import static com.facebook.presto.testing.TestingConnectorSession.SESSION;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNull;\n+import static org.testng.Assert.assertTrue;\n+\n+/**\n+ * Integration tests against Prometheus container\n+ */\n+@Test(singleThreaded = true)\n+public class TestPrometheusIntegrationTests1", "originalCommit": "423b634fa53942319c2062c98800456e318bec43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ0MTg1Nw==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r496441857", "bodyText": "revised, thanks", "author": "fgwang7w", "createdAt": "2020-09-29T06:17:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxNjE1Nw=="}], "type": "inlineReview"}, {"oid": "3c32b653baaf2c9effc5db660bc22ac4a4454979", "url": "https://github.com/prestodb/presto/commit/3c32b653baaf2c9effc5db660bc22ac4a4454979", "message": "Add support for Prometheus plugin", "committedDate": "2020-09-29T06:14:09Z", "type": "forcePushed"}, {"oid": "0ba115c02a8ad2cdf73cd0fe81e9918165b79cf8", "url": "https://github.com/prestodb/presto/commit/0ba115c02a8ad2cdf73cd0fe81e9918165b79cf8", "message": "Add support for Prometheus plugin\n\nCherry-pick of https://github.com/prestosql/presto/pull/2321\n\nCo-authored by: bentito <btofel@redhat.com>", "committedDate": "2020-10-30T06:46:00Z", "type": "forcePushed"}, {"oid": "cd154257d2f133c1ed070ae986b71a8b9744e19a", "url": "https://github.com/prestodb/presto/commit/cd154257d2f133c1ed070ae986b71a8b9744e19a", "message": "Add support for Prometheus plugin\n\nCherry-pick of https://github.com/prestosql/presto/pull/2321\n\nCo-authored by: bentito <btofel@redhat.com>", "committedDate": "2020-11-03T03:48:08Z", "type": "forcePushed"}, {"oid": "21311db1d1e955b244d0108c80ebe7f218a01b84", "url": "https://github.com/prestodb/presto/commit/21311db1d1e955b244d0108c80ebe7f218a01b84", "message": "Add support for Prometheus plugin\n\nCherry-pick of https://github.com/prestosql/presto/pull/2321\n\nCo-authored by: bentito <btofel@redhat.com>", "committedDate": "2020-11-08T05:52:50Z", "type": "forcePushed"}, {"oid": "ef7daaca079fd6e92a31a9e6c8f3669ae5f31ff0", "url": "https://github.com/prestodb/presto/commit/ef7daaca079fd6e92a31a9e6c8f3669ae5f31ff0", "message": "Add support for Prometheus plugin\n\nCherry-pick of https://github.com/prestosql/presto/pull/2321\n\nCo-authored by: bentito <btofel@redhat.com>", "committedDate": "2020-11-08T22:18:02Z", "type": "forcePushed"}, {"oid": "3ad4102ac0230538b7bafb6bff44e451e2c1a81c", "url": "https://github.com/prestodb/presto/commit/3ad4102ac0230538b7bafb6bff44e451e2c1a81c", "message": "Add support for Prometheus plugin\n\nCherry-pick of https://github.com/prestosql/presto/pull/2321\n\nCo-authored by: bentito <btofel@redhat.com>", "committedDate": "2020-12-10T00:03:41Z", "type": "forcePushed"}, {"oid": "1015ef5d13f7589937eb7489dd2574d96964b23a", "url": "https://github.com/prestodb/presto/commit/1015ef5d13f7589937eb7489dd2574d96964b23a", "message": "Add support for Prometheus plugin\n\nCherry-pick of https://github.com/prestosql/presto/pull/2321\n\nCo-authored by: bentito <btofel@redhat.com>", "committedDate": "2020-12-10T03:17:16Z", "type": "forcePushed"}, {"oid": "802273d71c154f72d5ad08389823c564fe2b5b95", "url": "https://github.com/prestodb/presto/commit/802273d71c154f72d5ad08389823c564fe2b5b95", "message": "Add support for Prometheus plugin\n\nCherry-pick of https://github.com/prestosql/presto/pull/2321\n\nCo-authored by: bentito <btofel@redhat.com>", "committedDate": "2020-12-10T03:40:19Z", "type": "forcePushed"}, {"oid": "65976e877a3dd7a09b5195b32a728e0049a8e802", "url": "https://github.com/prestodb/presto/commit/65976e877a3dd7a09b5195b32a728e0049a8e802", "message": "Add support for Prometheus plugin\n\nCherry-pick of https://github.com/prestosql/presto/pull/2321\n\nCo-authored by: bentito <btofel@redhat.com>", "committedDate": "2020-12-10T07:38:50Z", "type": "forcePushed"}, {"oid": "ac3288496eb93bcbfab36721bbfc8cff9f769e5c", "url": "https://github.com/prestodb/presto/commit/ac3288496eb93bcbfab36721bbfc8cff9f769e5c", "message": "Add support for Prometheus plugin\n\nCherry-pick of https://github.com/prestosql/presto/pull/2321\n\nCo-authored by: bentito <btofel@redhat.com>", "committedDate": "2020-12-11T23:54:29Z", "type": "forcePushed"}, {"oid": "67b312b8fc72988e62464430f98e21a505845817", "url": "https://github.com/prestodb/presto/commit/67b312b8fc72988e62464430f98e21a505845817", "message": "enable TIMESTAMP WITH TIME ZONE from Prometheus connector", "committedDate": "2020-12-13T20:31:38Z", "type": "forcePushed"}, {"oid": "450b897257dbe7117b33b352d5f3fbe321aee818", "url": "https://github.com/prestodb/presto/commit/450b897257dbe7117b33b352d5f3fbe321aee818", "message": "enable TIMESTAMP WITH TIME ZONE from Prometheus connector", "committedDate": "2020-12-14T00:43:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg1ODU1MA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r569858550", "bodyText": "put it the same line?", "author": "zhenxiao", "createdAt": "2021-02-04T00:39:04Z", "path": "presto-docs/src/main/sphinx/connector/prometheus.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+====================\n+Prometheus Connector\n+====================\n+\n+The Prometheus connector allows reading\n+`Prometheus <https://prometheus.io/>`_.", "originalCommit": "450b897257dbe7117b33b352d5f3fbe321aee818", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg1ODY2OA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r569858668", "bodyText": "Prometheus coordinator host address", "author": "zhenxiao", "createdAt": "2021-02-04T00:39:28Z", "path": "presto-docs/src/main/sphinx/connector/prometheus.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+====================\n+Prometheus Connector\n+====================\n+\n+The Prometheus connector allows reading\n+`Prometheus <https://prometheus.io/>`_.\n+metrics as tables in Presto.\n+\n+The mechanism for querying Prometheus is to use the Prometheus HTTP API. Specifically, all queries are resolved to Prometheus Instant queries\n+with a form like: http://localhost:9090/api/v1/query?query=up[21d]&time=1568229904.000\"\n+In this case the ``up`` metric is taken from the Presto query table name. ``21d`` is the duration of the query. The Prometheus ``time`` value\n+corresponds to the ``timestamp`` field. Presto queries are translated from their use of the ``timestamp`` field to a duration and time value\n+as needed. Presto splits are generated by dividing the query range into attempted equal chunks.\n+\n+Configuration\n+-------------\n+\n+Create ``etc/catalog/prometheus.properties``\n+to mount the Prometheus connector as the ``prometheus`` catalog,\n+replacing the properties as appropriate:\n+\n+.. code-block:: none\n+\n+    connector.name=prometheus\n+    prometheus.uri=http://localhost:9090\n+    prometheus.query-chunk-size-duration=1d\n+    prometheus.max-query-range-duration=21d\n+    prometheus.cache-ttl=30s\n+    prometheus.bearer-token-file=/path/to/bearer/token/file\n+\n+Configuration Properties\n+------------------------\n+\n+The following configuration properties are available:\n+\n+======================================== ============================================================================================\n+Property Name                                   Description\n+======================================== ============================================================================================\n+``prometheus.uri``                       Where to find Prometheus coordinator host", "originalCommit": "450b897257dbe7117b33b352d5f3fbe321aee818", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2MTAyMQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r569861021", "bodyText": "just call it query-chunk-duration?", "author": "zhenxiao", "createdAt": "2021-02-04T00:46:40Z", "path": "presto-docs/src/main/sphinx/connector/prometheus.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+====================\n+Prometheus Connector\n+====================\n+\n+The Prometheus connector allows reading\n+`Prometheus <https://prometheus.io/>`_.\n+metrics as tables in Presto.\n+\n+The mechanism for querying Prometheus is to use the Prometheus HTTP API. Specifically, all queries are resolved to Prometheus Instant queries\n+with a form like: http://localhost:9090/api/v1/query?query=up[21d]&time=1568229904.000\"\n+In this case the ``up`` metric is taken from the Presto query table name. ``21d`` is the duration of the query. The Prometheus ``time`` value\n+corresponds to the ``timestamp`` field. Presto queries are translated from their use of the ``timestamp`` field to a duration and time value\n+as needed. Presto splits are generated by dividing the query range into attempted equal chunks.\n+\n+Configuration\n+-------------\n+\n+Create ``etc/catalog/prometheus.properties``\n+to mount the Prometheus connector as the ``prometheus`` catalog,\n+replacing the properties as appropriate:\n+\n+.. code-block:: none\n+\n+    connector.name=prometheus\n+    prometheus.uri=http://localhost:9090\n+    prometheus.query-chunk-size-duration=1d\n+    prometheus.max-query-range-duration=21d\n+    prometheus.cache-ttl=30s\n+    prometheus.bearer-token-file=/path/to/bearer/token/file\n+\n+Configuration Properties\n+------------------------\n+\n+The following configuration properties are available:\n+\n+======================================== ============================================================================================\n+Property Name                                   Description\n+======================================== ============================================================================================\n+``prometheus.uri``                       Where to find Prometheus coordinator host\n+``prometheus.query-chunk-size-duration`` The duration of each query to Prometheus", "originalCommit": "450b897257dbe7117b33b352d5f3fbe321aee818", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjUwMzE1MQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r576503151", "bodyText": "ok", "author": "fgwang7w", "createdAt": "2021-02-16T01:54:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2MTAyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2MTA3OQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r569861079", "bodyText": "max-query-duration?", "author": "zhenxiao", "createdAt": "2021-02-04T00:46:51Z", "path": "presto-docs/src/main/sphinx/connector/prometheus.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+====================\n+Prometheus Connector\n+====================\n+\n+The Prometheus connector allows reading\n+`Prometheus <https://prometheus.io/>`_.\n+metrics as tables in Presto.\n+\n+The mechanism for querying Prometheus is to use the Prometheus HTTP API. Specifically, all queries are resolved to Prometheus Instant queries\n+with a form like: http://localhost:9090/api/v1/query?query=up[21d]&time=1568229904.000\"\n+In this case the ``up`` metric is taken from the Presto query table name. ``21d`` is the duration of the query. The Prometheus ``time`` value\n+corresponds to the ``timestamp`` field. Presto queries are translated from their use of the ``timestamp`` field to a duration and time value\n+as needed. Presto splits are generated by dividing the query range into attempted equal chunks.\n+\n+Configuration\n+-------------\n+\n+Create ``etc/catalog/prometheus.properties``\n+to mount the Prometheus connector as the ``prometheus`` catalog,\n+replacing the properties as appropriate:\n+\n+.. code-block:: none\n+\n+    connector.name=prometheus\n+    prometheus.uri=http://localhost:9090\n+    prometheus.query-chunk-size-duration=1d\n+    prometheus.max-query-range-duration=21d\n+    prometheus.cache-ttl=30s\n+    prometheus.bearer-token-file=/path/to/bearer/token/file\n+\n+Configuration Properties\n+------------------------\n+\n+The following configuration properties are available:\n+\n+======================================== ============================================================================================\n+Property Name                                   Description\n+======================================== ============================================================================================\n+``prometheus.uri``                       Where to find Prometheus coordinator host\n+``prometheus.query-chunk-size-duration`` The duration of each query to Prometheus\n+``prometheus.max-query-range-duration``  Width of overall query to Prometheus, will be divided into query-chunk-size-duration queries", "originalCommit": "450b897257dbe7117b33b352d5f3fbe321aee818", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjUwMzU5Mg==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r576503592", "bodyText": "ok", "author": "fgwang7w", "createdAt": "2021-02-16T01:55:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2MTA3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2MTIxMg==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r569861212", "bodyText": "how long the config values are cached", "author": "zhenxiao", "createdAt": "2021-02-04T00:47:12Z", "path": "presto-docs/src/main/sphinx/connector/prometheus.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+====================\n+Prometheus Connector\n+====================\n+\n+The Prometheus connector allows reading\n+`Prometheus <https://prometheus.io/>`_.\n+metrics as tables in Presto.\n+\n+The mechanism for querying Prometheus is to use the Prometheus HTTP API. Specifically, all queries are resolved to Prometheus Instant queries\n+with a form like: http://localhost:9090/api/v1/query?query=up[21d]&time=1568229904.000\"\n+In this case the ``up`` metric is taken from the Presto query table name. ``21d`` is the duration of the query. The Prometheus ``time`` value\n+corresponds to the ``timestamp`` field. Presto queries are translated from their use of the ``timestamp`` field to a duration and time value\n+as needed. Presto splits are generated by dividing the query range into attempted equal chunks.\n+\n+Configuration\n+-------------\n+\n+Create ``etc/catalog/prometheus.properties``\n+to mount the Prometheus connector as the ``prometheus`` catalog,\n+replacing the properties as appropriate:\n+\n+.. code-block:: none\n+\n+    connector.name=prometheus\n+    prometheus.uri=http://localhost:9090\n+    prometheus.query-chunk-size-duration=1d\n+    prometheus.max-query-range-duration=21d\n+    prometheus.cache-ttl=30s\n+    prometheus.bearer-token-file=/path/to/bearer/token/file\n+\n+Configuration Properties\n+------------------------\n+\n+The following configuration properties are available:\n+\n+======================================== ============================================================================================\n+Property Name                                   Description\n+======================================== ============================================================================================\n+``prometheus.uri``                       Where to find Prometheus coordinator host\n+``prometheus.query-chunk-size-duration`` The duration of each query to Prometheus\n+``prometheus.max-query-range-duration``  Width of overall query to Prometheus, will be divided into query-chunk-size-duration queries\n+``prometheus.cache-ttl``                 How long values from this config file are cached", "originalCommit": "450b897257dbe7117b33b352d5f3fbe321aee818", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2MTQ3Mw==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r569861473", "bodyText": "remove 'if needed', we could add explanation it is optional in detail section below", "author": "zhenxiao", "createdAt": "2021-02-04T00:47:51Z", "path": "presto-docs/src/main/sphinx/connector/prometheus.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+====================\n+Prometheus Connector\n+====================\n+\n+The Prometheus connector allows reading\n+`Prometheus <https://prometheus.io/>`_.\n+metrics as tables in Presto.\n+\n+The mechanism for querying Prometheus is to use the Prometheus HTTP API. Specifically, all queries are resolved to Prometheus Instant queries\n+with a form like: http://localhost:9090/api/v1/query?query=up[21d]&time=1568229904.000\"\n+In this case the ``up`` metric is taken from the Presto query table name. ``21d`` is the duration of the query. The Prometheus ``time`` value\n+corresponds to the ``timestamp`` field. Presto queries are translated from their use of the ``timestamp`` field to a duration and time value\n+as needed. Presto splits are generated by dividing the query range into attempted equal chunks.\n+\n+Configuration\n+-------------\n+\n+Create ``etc/catalog/prometheus.properties``\n+to mount the Prometheus connector as the ``prometheus`` catalog,\n+replacing the properties as appropriate:\n+\n+.. code-block:: none\n+\n+    connector.name=prometheus\n+    prometheus.uri=http://localhost:9090\n+    prometheus.query-chunk-size-duration=1d\n+    prometheus.max-query-range-duration=21d\n+    prometheus.cache-ttl=30s\n+    prometheus.bearer-token-file=/path/to/bearer/token/file\n+\n+Configuration Properties\n+------------------------\n+\n+The following configuration properties are available:\n+\n+======================================== ============================================================================================\n+Property Name                                   Description\n+======================================== ============================================================================================\n+``prometheus.uri``                       Where to find Prometheus coordinator host\n+``prometheus.query-chunk-size-duration`` The duration of each query to Prometheus\n+``prometheus.max-query-range-duration``  Width of overall query to Prometheus, will be divided into query-chunk-size-duration queries\n+``prometheus.cache-ttl``                 How long values from this config file are cached\n+``prometheus.bearer-token-file``         File holding bearer token if needed for access to Prometheus", "originalCommit": "450b897257dbe7117b33b352d5f3fbe321aee818", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2MjMzNw==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r569862337", "bodyText": "from fetching too much data from Prometheus", "author": "zhenxiao", "createdAt": "2021-02-04T00:50:03Z", "path": "presto-docs/src/main/sphinx/connector/prometheus.rst", "diffHunk": "@@ -0,0 +1,75 @@\n+====================\n+Prometheus Connector\n+====================\n+\n+The Prometheus connector allows reading\n+`Prometheus <https://prometheus.io/>`_.\n+metrics as tables in Presto.\n+\n+The mechanism for querying Prometheus is to use the Prometheus HTTP API. Specifically, all queries are resolved to Prometheus Instant queries\n+with a form like: http://localhost:9090/api/v1/query?query=up[21d]&time=1568229904.000\"\n+In this case the ``up`` metric is taken from the Presto query table name. ``21d`` is the duration of the query. The Prometheus ``time`` value\n+corresponds to the ``timestamp`` field. Presto queries are translated from their use of the ``timestamp`` field to a duration and time value\n+as needed. Presto splits are generated by dividing the query range into attempted equal chunks.\n+\n+Configuration\n+-------------\n+\n+Create ``etc/catalog/prometheus.properties``\n+to mount the Prometheus connector as the ``prometheus`` catalog,\n+replacing the properties as appropriate:\n+\n+.. code-block:: none\n+\n+    connector.name=prometheus\n+    prometheus.uri=http://localhost:9090\n+    prometheus.query-chunk-size-duration=1d\n+    prometheus.max-query-range-duration=21d\n+    prometheus.cache-ttl=30s\n+    prometheus.bearer-token-file=/path/to/bearer/token/file\n+\n+Configuration Properties\n+------------------------\n+\n+The following configuration properties are available:\n+\n+======================================== ============================================================================================\n+Property Name                                   Description\n+======================================== ============================================================================================\n+``prometheus.uri``                       Where to find Prometheus coordinator host\n+``prometheus.query-chunk-size-duration`` The duration of each query to Prometheus\n+``prometheus.max-query-range-duration``  Width of overall query to Prometheus, will be divided into query-chunk-size-duration queries\n+``prometheus.cache-ttl``                 How long values from this config file are cached\n+``prometheus.bearer-token-file``         File holding bearer token if needed for access to Prometheus\n+======================================== ============================================================================================\n+\n+Not Exhausting Your Presto Available Heap\n+-----------------------------------------\n+\n+The ``prometheus.query-chunk-size-duration`` and ``prometheus.max-query-range-duration`` are values to protect Presto from\n+too much data coming back from Prometheus. The ``prometheus.max-query-range-duration`` is the item of", "originalCommit": "450b897257dbe7117b33b352d5f3fbe321aee818", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2MjUxOA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r569862518", "bodyText": "format: all xmlns and xsi in the same line", "author": "zhenxiao", "createdAt": "2021-02-04T00:50:36Z", "path": "presto-prometheus/pom.xml", "diffHunk": "@@ -0,0 +1,238 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"", "originalCommit": "450b897257dbe7117b33b352d5f3fbe321aee818", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2MjU4Mw==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r569862583", "bodyText": "update to latest version", "author": "zhenxiao", "createdAt": "2021-02-04T00:50:46Z", "path": "presto-prometheus/pom.xml", "diffHunk": "@@ -0,0 +1,238 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>com.facebook.presto</groupId>\n+        <artifactId>presto-root</artifactId>\n+        <version>0.246-SNAPSHOT</version>", "originalCommit": "450b897257dbe7117b33b352d5f3fbe321aee818", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2Mjk0Nw==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r569862947", "bodyText": "why not use TIMESTAMP_WITH_TIME_ZONE directly, instead of defining another constant?", "author": "zhenxiao", "createdAt": "2021-02-04T00:51:51Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusClient.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.airlift.json.JsonCodec;\n+import com.facebook.presto.common.type.DoubleType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.facebook.presto.common.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.plugin.prometheus.PrometheusColumn.mapType;\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_TABLES_METRICS_RETRIEVE_ERROR;\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_UNKNOWN_ERROR;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+public class PrometheusClient\n+{\n+    public static final Type TIMESTAMP_COLUMN_TYPE = TIMESTAMP_WITH_TIME_ZONE;", "originalCommit": "450b897257dbe7117b33b352d5f3fbe321aee818", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2MzU3Ng==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r569863576", "bodyText": "shall we have type checks? instead of using explicit type casting? same for following lines, e.g. (List)", "author": "zhenxiao", "createdAt": "2021-02-04T00:53:45Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusClient.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.airlift.json.JsonCodec;\n+import com.facebook.presto.common.type.DoubleType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.facebook.presto.common.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.plugin.prometheus.PrometheusColumn.mapType;\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_TABLES_METRICS_RETRIEVE_ERROR;\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_UNKNOWN_ERROR;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+public class PrometheusClient\n+{\n+    public static final Type TIMESTAMP_COLUMN_TYPE = TIMESTAMP_WITH_TIME_ZONE;\n+    public static final String METRICS_ENDPOINT = \"/api/v1/label/__name__/values\";\n+\n+    private static final OkHttpClient httpClient = new OkHttpClient.Builder().build();\n+\n+    private final Optional<File> bearerTokenFile;\n+    private final Supplier<Map<String, Object>> tableSupplier;\n+    private final Type varcharMapType;\n+\n+    @Inject\n+    public PrometheusClient(PrometheusConnectorConfig config, JsonCodec<Map<String, Object>> metricCodec, TypeManager typeManager)\n+    {\n+        requireNonNull(config, \"config is null\");\n+        requireNonNull(metricCodec, \"metricCodec is null\");\n+        requireNonNull(typeManager, \"typeManager is null\");\n+\n+        bearerTokenFile = config.getBearerTokenFile();\n+        URI prometheusMetricsUri = getPrometheusMetricsURI(config.getPrometheusURI());\n+        tableSupplier = Suppliers.memoizeWithExpiration(\n+                () -> fetchMetrics(metricCodec, prometheusMetricsUri),\n+                config.getCacheDuration().toMillis(),\n+                MILLISECONDS);\n+        varcharMapType = typeManager.getType(mapType(VARCHAR.getTypeSignature(), VARCHAR.getTypeSignature()));\n+    }\n+\n+    private static URI getPrometheusMetricsURI(URI prometheusUri)\n+    {\n+        try {\n+            // endpoint to retrieve metric names from Prometheus\n+            return new URI(prometheusUri.getScheme(), prometheusUri.getAuthority(), prometheusUri.getPath() + METRICS_ENDPOINT, null, null);\n+        }\n+        catch (URISyntaxException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public Set<String> getTableNames(String schema)\n+    {\n+        requireNonNull(schema, \"schema is null\");\n+        String status = \"\";\n+        if (schema.equals(\"default\")) {\n+            status = (String) tableSupplier.get().get(\"status\");", "originalCommit": "450b897257dbe7117b33b352d5f3fbe321aee818", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjUyODQwOA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r576528408", "bodyText": "sure, add a type handling", "author": "fgwang7w", "createdAt": "2021-02-16T03:32:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2MzU3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2MzY3NQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r569863675", "bodyText": "let's add cases for error and warning", "author": "zhenxiao", "createdAt": "2021-02-04T00:54:01Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusClient.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.airlift.json.JsonCodec;\n+import com.facebook.presto.common.type.DoubleType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.facebook.presto.common.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.plugin.prometheus.PrometheusColumn.mapType;\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_TABLES_METRICS_RETRIEVE_ERROR;\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_UNKNOWN_ERROR;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+public class PrometheusClient\n+{\n+    public static final Type TIMESTAMP_COLUMN_TYPE = TIMESTAMP_WITH_TIME_ZONE;\n+    public static final String METRICS_ENDPOINT = \"/api/v1/label/__name__/values\";\n+\n+    private static final OkHttpClient httpClient = new OkHttpClient.Builder().build();\n+\n+    private final Optional<File> bearerTokenFile;\n+    private final Supplier<Map<String, Object>> tableSupplier;\n+    private final Type varcharMapType;\n+\n+    @Inject\n+    public PrometheusClient(PrometheusConnectorConfig config, JsonCodec<Map<String, Object>> metricCodec, TypeManager typeManager)\n+    {\n+        requireNonNull(config, \"config is null\");\n+        requireNonNull(metricCodec, \"metricCodec is null\");\n+        requireNonNull(typeManager, \"typeManager is null\");\n+\n+        bearerTokenFile = config.getBearerTokenFile();\n+        URI prometheusMetricsUri = getPrometheusMetricsURI(config.getPrometheusURI());\n+        tableSupplier = Suppliers.memoizeWithExpiration(\n+                () -> fetchMetrics(metricCodec, prometheusMetricsUri),\n+                config.getCacheDuration().toMillis(),\n+                MILLISECONDS);\n+        varcharMapType = typeManager.getType(mapType(VARCHAR.getTypeSignature(), VARCHAR.getTypeSignature()));\n+    }\n+\n+    private static URI getPrometheusMetricsURI(URI prometheusUri)\n+    {\n+        try {\n+            // endpoint to retrieve metric names from Prometheus\n+            return new URI(prometheusUri.getScheme(), prometheusUri.getAuthority(), prometheusUri.getPath() + METRICS_ENDPOINT, null, null);\n+        }\n+        catch (URISyntaxException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public Set<String> getTableNames(String schema)\n+    {\n+        requireNonNull(schema, \"schema is null\");\n+        String status = \"\";\n+        if (schema.equals(\"default\")) {\n+            status = (String) tableSupplier.get().get(\"status\");\n+            //TODO prometheus warnings (success|error|warning) could be handled separately\n+            if (status.equals(\"success\")) {", "originalCommit": "450b897257dbe7117b33b352d5f3fbe321aee818", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjUyODU0Mw==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r576528543", "bodyText": "log for warning, for error, it will throw a prestoException at the end of the logic by fall-thru", "author": "fgwang7w", "createdAt": "2021-02-16T03:33:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2MzY3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2Mzc4OQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r569863789", "bodyText": "we only support default schema?", "author": "zhenxiao", "createdAt": "2021-02-04T00:54:22Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusClient.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.airlift.json.JsonCodec;\n+import com.facebook.presto.common.type.DoubleType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.facebook.presto.common.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.plugin.prometheus.PrometheusColumn.mapType;\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_TABLES_METRICS_RETRIEVE_ERROR;\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_UNKNOWN_ERROR;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+public class PrometheusClient\n+{\n+    public static final Type TIMESTAMP_COLUMN_TYPE = TIMESTAMP_WITH_TIME_ZONE;\n+    public static final String METRICS_ENDPOINT = \"/api/v1/label/__name__/values\";\n+\n+    private static final OkHttpClient httpClient = new OkHttpClient.Builder().build();\n+\n+    private final Optional<File> bearerTokenFile;\n+    private final Supplier<Map<String, Object>> tableSupplier;\n+    private final Type varcharMapType;\n+\n+    @Inject\n+    public PrometheusClient(PrometheusConnectorConfig config, JsonCodec<Map<String, Object>> metricCodec, TypeManager typeManager)\n+    {\n+        requireNonNull(config, \"config is null\");\n+        requireNonNull(metricCodec, \"metricCodec is null\");\n+        requireNonNull(typeManager, \"typeManager is null\");\n+\n+        bearerTokenFile = config.getBearerTokenFile();\n+        URI prometheusMetricsUri = getPrometheusMetricsURI(config.getPrometheusURI());\n+        tableSupplier = Suppliers.memoizeWithExpiration(\n+                () -> fetchMetrics(metricCodec, prometheusMetricsUri),\n+                config.getCacheDuration().toMillis(),\n+                MILLISECONDS);\n+        varcharMapType = typeManager.getType(mapType(VARCHAR.getTypeSignature(), VARCHAR.getTypeSignature()));\n+    }\n+\n+    private static URI getPrometheusMetricsURI(URI prometheusUri)\n+    {\n+        try {\n+            // endpoint to retrieve metric names from Prometheus\n+            return new URI(prometheusUri.getScheme(), prometheusUri.getAuthority(), prometheusUri.getPath() + METRICS_ENDPOINT, null, null);\n+        }\n+        catch (URISyntaxException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public Set<String> getTableNames(String schema)\n+    {\n+        requireNonNull(schema, \"schema is null\");\n+        String status = \"\";\n+        if (schema.equals(\"default\")) {\n+            status = (String) tableSupplier.get().get(\"status\");\n+            //TODO prometheus warnings (success|error|warning) could be handled separately\n+            if (status.equals(\"success\")) {\n+                List<String> tableNames = (List<String>) tableSupplier.get().get(\"data\");\n+                if (tableNames == null) {\n+                    return ImmutableSet.of();\n+                }\n+                return ImmutableSet.copyOf(tableNames);\n+            }\n+        }\n+        throw new PrestoException(PROMETHEUS_TABLES_METRICS_RETRIEVE_ERROR, String.format(\"Prometheus did no return metrics list (table names): %s\", status));\n+    }\n+\n+    public PrometheusTable getTable(String schema, String tableName)\n+    {\n+        requireNonNull(schema, \"schema is null\");\n+        requireNonNull(tableName, \"tableName is null\");\n+        if (!schema.equals(\"default\")) {", "originalCommit": "450b897257dbe7117b33b352d5f3fbe321aee818", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjU0MzkzMg==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r576543932", "bodyText": "yes, only support query against prometheus.default.tablename", "author": "fgwang7w", "createdAt": "2021-02-16T04:37:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2Mzc4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2NDAzMA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r569864030", "bodyText": "do we need varcharMapType as a private data member? Or we could inline the value", "author": "zhenxiao", "createdAt": "2021-02-04T00:55:06Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusClient.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.airlift.json.JsonCodec;\n+import com.facebook.presto.common.type.DoubleType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.facebook.presto.common.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.plugin.prometheus.PrometheusColumn.mapType;\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_TABLES_METRICS_RETRIEVE_ERROR;\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_UNKNOWN_ERROR;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+public class PrometheusClient\n+{\n+    public static final Type TIMESTAMP_COLUMN_TYPE = TIMESTAMP_WITH_TIME_ZONE;\n+    public static final String METRICS_ENDPOINT = \"/api/v1/label/__name__/values\";\n+\n+    private static final OkHttpClient httpClient = new OkHttpClient.Builder().build();\n+\n+    private final Optional<File> bearerTokenFile;\n+    private final Supplier<Map<String, Object>> tableSupplier;\n+    private final Type varcharMapType;\n+\n+    @Inject\n+    public PrometheusClient(PrometheusConnectorConfig config, JsonCodec<Map<String, Object>> metricCodec, TypeManager typeManager)\n+    {\n+        requireNonNull(config, \"config is null\");\n+        requireNonNull(metricCodec, \"metricCodec is null\");\n+        requireNonNull(typeManager, \"typeManager is null\");\n+\n+        bearerTokenFile = config.getBearerTokenFile();\n+        URI prometheusMetricsUri = getPrometheusMetricsURI(config.getPrometheusURI());\n+        tableSupplier = Suppliers.memoizeWithExpiration(\n+                () -> fetchMetrics(metricCodec, prometheusMetricsUri),\n+                config.getCacheDuration().toMillis(),\n+                MILLISECONDS);\n+        varcharMapType = typeManager.getType(mapType(VARCHAR.getTypeSignature(), VARCHAR.getTypeSignature()));", "originalCommit": "450b897257dbe7117b33b352d5f3fbe321aee818", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjU0NTc1OQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r576545759", "bodyText": "varcharMapType cannot be inline because it's derived from typeManager when create a new PrometheusClient. We need to keep a local copy of TypeManager then derive which is unncessary", "author": "fgwang7w", "createdAt": "2021-02-16T04:43:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2NDAzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2NDM3MQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r569864371", "bodyText": "use one line comment:\n// settable clock for testing", "author": "zhenxiao", "createdAt": "2021-02-04T00:56:03Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusClock.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import javax.inject.Inject;\n+\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+\n+import static java.time.ZoneOffset.UTC;\n+\n+/**\n+ * allow for settable Clock for testing", "originalCommit": "450b897257dbe7117b33b352d5f3fbe321aee818", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2NDgwMQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r569864801", "bodyText": "same as comment in documentation: Prometheus coordinator host address", "author": "zhenxiao", "createdAt": "2021-02-04T00:57:16Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusConnectorConfig.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.airlift.configuration.ConfigDescription;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.ConfigurationException;\n+import com.google.inject.spi.Message;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MinDuration;\n+\n+import javax.annotation.PostConstruct;\n+import javax.validation.constraints.NotNull;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+\n+public class PrometheusConnectorConfig\n+{\n+    private URI prometheusURI = URI.create(\"http://localhost:9090\");\n+    private Duration queryChunkSizeDuration = new Duration(1, TimeUnit.DAYS);\n+    private Duration maxQueryRangeDuration = new Duration(21, TimeUnit.DAYS);\n+    private Duration cacheDuration = new Duration(30, TimeUnit.SECONDS);\n+    private File bearerTokenFile;\n+\n+    @NotNull\n+    public URI getPrometheusURI()\n+    {\n+        return prometheusURI;\n+    }\n+\n+    @Config(\"prometheus.uri\")\n+    @ConfigDescription(\"Where to find Prometheus coordinator host\")", "originalCommit": "450b897257dbe7117b33b352d5f3fbe321aee818", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2NTA0NA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r569865044", "bodyText": "same as comment in documentation, let's rephrase the words", "author": "zhenxiao", "createdAt": "2021-02-04T00:57:48Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusConnectorConfig.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.airlift.configuration.Config;\n+import com.facebook.airlift.configuration.ConfigDescription;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.ConfigurationException;\n+import com.google.inject.spi.Message;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MinDuration;\n+\n+import javax.annotation.PostConstruct;\n+import javax.validation.constraints.NotNull;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+\n+public class PrometheusConnectorConfig\n+{\n+    private URI prometheusURI = URI.create(\"http://localhost:9090\");\n+    private Duration queryChunkSizeDuration = new Duration(1, TimeUnit.DAYS);\n+    private Duration maxQueryRangeDuration = new Duration(21, TimeUnit.DAYS);\n+    private Duration cacheDuration = new Duration(30, TimeUnit.SECONDS);\n+    private File bearerTokenFile;\n+\n+    @NotNull\n+    public URI getPrometheusURI()\n+    {\n+        return prometheusURI;\n+    }\n+\n+    @Config(\"prometheus.uri\")\n+    @ConfigDescription(\"Where to find Prometheus coordinator host\")\n+    public PrometheusConnectorConfig setPrometheusURI(URI prometheusURI)\n+    {\n+        this.prometheusURI = prometheusURI;\n+        return this;\n+    }\n+\n+    @MinDuration(\"1ms\")\n+    public Duration getQueryChunkSizeDuration()\n+    {\n+        return queryChunkSizeDuration;\n+    }\n+\n+    @Config(\"prometheus.query-chunk-size-duration\")", "originalCommit": "450b897257dbe7117b33b352d5f3fbe321aee818", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2NTUwNw==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r569865507", "bodyText": "first line this.prometheusClient = requireNonNull(prometheusClient, \"client is null\")", "author": "zhenxiao", "createdAt": "2021-02-04T00:58:57Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusMetadata.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ColumnMetadata;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.ConnectorTableHandle;\n+import com.facebook.presto.spi.ConnectorTableLayout;\n+import com.facebook.presto.spi.ConnectorTableLayoutHandle;\n+import com.facebook.presto.spi.ConnectorTableLayoutResult;\n+import com.facebook.presto.spi.ConnectorTableMetadata;\n+import com.facebook.presto.spi.Constraint;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.facebook.presto.spi.SchemaTablePrefix;\n+import com.facebook.presto.spi.TableNotFoundException;\n+import com.facebook.presto.spi.connector.ConnectorMetadata;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrometheusMetadata\n+        implements ConnectorMetadata\n+{\n+    private final PrometheusClient prometheusClient;\n+\n+    @Inject\n+    public PrometheusMetadata(PrometheusClient prometheusClient)\n+    {\n+        this.prometheusClient = prometheusClient;\n+        requireNonNull(this.prometheusClient, \"client is null\");", "originalCommit": "450b897257dbe7117b33b352d5f3fbe321aee818", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2NTk2Ng==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r569865966", "bodyText": "static import FIELD_NAME", "author": "zhenxiao", "createdAt": "2021-02-04T01:00:20Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusQueryResponse.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonToken;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_PARSE_ERROR;\n+import static java.util.Collections.singletonList;\n+\n+public class PrometheusQueryResponse\n+{\n+    private boolean status;\n+\n+    private String error;\n+    private String errorType;\n+    private String resultType;\n+    private String result;\n+    private List<PrometheusMetricResult> results;\n+\n+    public PrometheusQueryResponse(InputStream response)\n+            throws IOException\n+    {\n+        parsePrometheusQueryResponse(response);\n+    }\n+\n+    private void parsePrometheusQueryResponse(InputStream response)\n+            throws IOException\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new JavaTimeModule());\n+        JsonParser parser = new JsonFactory().createParser(response);\n+        while (!parser.isClosed()) {\n+            JsonToken jsonToken = parser.nextToken();\n+            if (JsonToken.FIELD_NAME.equals(jsonToken)) {", "originalCommit": "450b897257dbe7117b33b352d5f3fbe321aee818", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjU0NzU0MA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r576547540", "bodyText": "ok", "author": "fgwang7w", "createdAt": "2021-02-16T04:50:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2NTk2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2NjIwMw==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r569866203", "bodyText": "why calling 2 consecutive nextToken()? add comments?", "author": "zhenxiao", "createdAt": "2021-02-04T01:01:05Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusQueryResponse.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonToken;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_PARSE_ERROR;\n+import static java.util.Collections.singletonList;\n+\n+public class PrometheusQueryResponse\n+{\n+    private boolean status;\n+\n+    private String error;\n+    private String errorType;\n+    private String resultType;\n+    private String result;\n+    private List<PrometheusMetricResult> results;\n+\n+    public PrometheusQueryResponse(InputStream response)\n+            throws IOException\n+    {\n+        parsePrometheusQueryResponse(response);\n+    }\n+\n+    private void parsePrometheusQueryResponse(InputStream response)\n+            throws IOException\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new JavaTimeModule());\n+        JsonParser parser = new JsonFactory().createParser(response);\n+        while (!parser.isClosed()) {\n+            JsonToken jsonToken = parser.nextToken();\n+            if (JsonToken.FIELD_NAME.equals(jsonToken)) {\n+                if (parser.getCurrentName().equals(\"status\")) {\n+                    parser.nextToken();\n+                    if (parser.getValueAsString().equals(\"success\")) {\n+                        this.status = true;\n+                        while (!parser.isClosed()) {\n+                            parser.nextToken();\n+                            if (JsonToken.FIELD_NAME.equals(jsonToken)) {\n+                                if (parser.getCurrentName().equals(\"resultType\")) {\n+                                    parser.nextToken();\n+                                    resultType = parser.getValueAsString();\n+                                }\n+                                if (parser.getCurrentName().equals(\"result\")) {\n+                                    parser.nextToken();\n+                                    ArrayNode node = mapper.readTree(parser);\n+                                    result = node.toString();\n+                                    break;\n+                                }\n+                            }\n+                        }\n+                    }\n+                    else {\n+                        //error path\n+                        String parsedStatus = parser.getValueAsString();\n+                        parser.nextToken();", "originalCommit": "450b897257dbe7117b33b352d5f3fbe321aee818", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjU1NDg3MA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r576554870", "bodyText": "parsing json is key-value based, so first nextToken is advanced to the key, nextToken advances to the value. Added comment for clarification", "author": "fgwang7w", "createdAt": "2021-02-16T05:18:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2NjIwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2NjMyOA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r569866328", "bodyText": "remove this blank line", "author": "zhenxiao", "createdAt": "2021-02-04T01:01:32Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusRecordCursor.java", "diffHunk": "@@ -0,0 +1,302 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.MapType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeUtils;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.RecordCursor;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.io.ByteSource;\n+import com.google.common.io.CountingInputStream;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.common.type.DateTimeEncoding.packDateTimeWithZone;\n+import static com.facebook.presto.common.type.DoubleType.DOUBLE;\n+import static com.facebook.presto.common.type.StandardTypes.BIGINT;\n+import static com.facebook.presto.common.type.StandardTypes.BOOLEAN;\n+import static com.facebook.presto.common.type.StandardTypes.INTEGER;\n+import static com.facebook.presto.common.type.StandardTypes.SMALLINT;\n+import static com.facebook.presto.common.type.StandardTypes.TINYINT;\n+import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n+import static com.facebook.presto.plugin.prometheus.PrometheusClient.TIMESTAMP_COLUMN_TYPE;\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrometheusRecordCursor\n+        implements RecordCursor\n+{\n+    private final List<PrometheusColumnHandle> columnHandles;\n+    private final int[] fieldToColumnIndex;\n+", "originalCommit": "450b897257dbe7117b33b352d5f3fbe321aee818", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2NjUyNw==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r569866527", "bodyText": "shall we define an error code, and add some information to the exception?", "author": "zhenxiao", "createdAt": "2021-02-04T01:02:16Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusRecordCursor.java", "diffHunk": "@@ -0,0 +1,302 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.MapType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeUtils;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.RecordCursor;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.io.ByteSource;\n+import com.google.common.io.CountingInputStream;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.common.type.DateTimeEncoding.packDateTimeWithZone;\n+import static com.facebook.presto.common.type.DoubleType.DOUBLE;\n+import static com.facebook.presto.common.type.StandardTypes.BIGINT;\n+import static com.facebook.presto.common.type.StandardTypes.BOOLEAN;\n+import static com.facebook.presto.common.type.StandardTypes.INTEGER;\n+import static com.facebook.presto.common.type.StandardTypes.SMALLINT;\n+import static com.facebook.presto.common.type.StandardTypes.TINYINT;\n+import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n+import static com.facebook.presto.plugin.prometheus.PrometheusClient.TIMESTAMP_COLUMN_TYPE;\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrometheusRecordCursor\n+        implements RecordCursor\n+{\n+    private final List<PrometheusColumnHandle> columnHandles;\n+    private final int[] fieldToColumnIndex;\n+\n+    private final Iterator<PrometheusStandardizedRow> metricsItr;\n+    private final long totalBytes;\n+\n+    private PrometheusStandardizedRow fields;\n+\n+    public PrometheusRecordCursor(List<PrometheusColumnHandle> columnHandles, ByteSource byteSource)\n+    {\n+        this.columnHandles = columnHandles;\n+\n+        fieldToColumnIndex = new int[columnHandles.size()];\n+        for (int i = 0; i < columnHandles.size(); i++) {\n+            PrometheusColumnHandle columnHandle = columnHandles.get(i);\n+            fieldToColumnIndex[i] = columnHandle.getOrdinalPosition();\n+        }\n+\n+        try (CountingInputStream input = new CountingInputStream(byteSource.openStream())) {\n+            metricsItr = prometheusResultsInStandardizedForm(new PrometheusQueryResponse(input).getResults()).iterator();\n+            totalBytes = input.getCount();\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(e);", "originalCommit": "450b897257dbe7117b33b352d5f3fbe321aee818", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjU1Nzk0OQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r576557949", "bodyText": "sure, I added 2 catches, one from parsing ofPrometheusQueryResponse, one for mapping the result", "author": "fgwang7w", "createdAt": "2021-02-16T05:29:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2NjUyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2NzAyMA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r569867020", "bodyText": "have requireNonNull in the return value is not good. Let's add checks or throw exception in getFieldValue", "author": "zhenxiao", "createdAt": "2021-02-04T01:03:54Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusRecordCursor.java", "diffHunk": "@@ -0,0 +1,302 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.MapType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeUtils;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.RecordCursor;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.io.ByteSource;\n+import com.google.common.io.CountingInputStream;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.common.type.DateTimeEncoding.packDateTimeWithZone;\n+import static com.facebook.presto.common.type.DoubleType.DOUBLE;\n+import static com.facebook.presto.common.type.StandardTypes.BIGINT;\n+import static com.facebook.presto.common.type.StandardTypes.BOOLEAN;\n+import static com.facebook.presto.common.type.StandardTypes.INTEGER;\n+import static com.facebook.presto.common.type.StandardTypes.SMALLINT;\n+import static com.facebook.presto.common.type.StandardTypes.TINYINT;\n+import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n+import static com.facebook.presto.plugin.prometheus.PrometheusClient.TIMESTAMP_COLUMN_TYPE;\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrometheusRecordCursor\n+        implements RecordCursor\n+{\n+    private final List<PrometheusColumnHandle> columnHandles;\n+    private final int[] fieldToColumnIndex;\n+\n+    private final Iterator<PrometheusStandardizedRow> metricsItr;\n+    private final long totalBytes;\n+\n+    private PrometheusStandardizedRow fields;\n+\n+    public PrometheusRecordCursor(List<PrometheusColumnHandle> columnHandles, ByteSource byteSource)\n+    {\n+        this.columnHandles = columnHandles;\n+\n+        fieldToColumnIndex = new int[columnHandles.size()];\n+        for (int i = 0; i < columnHandles.size(); i++) {\n+            PrometheusColumnHandle columnHandle = columnHandles.get(i);\n+            fieldToColumnIndex[i] = columnHandle.getOrdinalPosition();\n+        }\n+\n+        try (CountingInputStream input = new CountingInputStream(byteSource.openStream())) {\n+            metricsItr = prometheusResultsInStandardizedForm(new PrometheusQueryResponse(input).getResults()).iterator();\n+            totalBytes = input.getCount();\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    static Block getBlockFromMap(Type mapType, Map<?, ?> map)\n+    {\n+        // on functions like COUNT() the Type won't be a MapType\n+        if (!(mapType instanceof MapType)) {\n+            return null;\n+        }\n+        Type keyType = mapType.getTypeParameters().get(0);\n+        Type valueType = mapType.getTypeParameters().get(1);\n+\n+        BlockBuilder mapBlockBuilder = mapType.createBlockBuilder(null, 1);\n+        BlockBuilder builder = mapBlockBuilder.beginBlockEntry();\n+\n+        for (Map.Entry<?, ?> entry : map.entrySet()) {\n+            writeObject(builder, keyType, entry.getKey());\n+            writeObject(builder, valueType, entry.getValue());\n+        }\n+\n+        mapBlockBuilder.closeEntry();\n+        return (Block) mapType.getObject(mapBlockBuilder, 0);\n+    }\n+\n+    static Map<Object, Object> getMapFromBlock(Type type, Block block)\n+    {\n+        MapType mapType = (MapType) type;\n+        Type keyType = mapType.getKeyType();\n+        Type valueType = mapType.getValueType();\n+        Map<Object, Object> map = new HashMap<>(block.getPositionCount() / 2);\n+        for (int i = 0; i < block.getPositionCount(); i += 2) {\n+            map.put(readObject(keyType, block, i), readObject(valueType, block, i + 1));\n+        }\n+        return map;\n+    }\n+\n+    private static void writeObject(BlockBuilder builder, Type type, Object obj)\n+    {\n+        if (type instanceof ArrayType) {\n+            Type elementType = ((ArrayType) type).getElementType();\n+            BlockBuilder arrayBuilder = builder.beginBlockEntry();\n+            for (Object item : (List<?>) obj) {\n+                writeObject(arrayBuilder, elementType, item);\n+            }\n+            builder.closeEntry();\n+        }\n+        else if (type instanceof MapType) {\n+            MapType mapType = (MapType) type;\n+            BlockBuilder mapBlockBuilder = builder.beginBlockEntry();\n+            for (Map.Entry<?, ?> entry : ((Map<?, ?>) obj).entrySet()) {\n+                writeObject(mapBlockBuilder, mapType.getKeyType(), entry.getKey());\n+                writeObject(mapBlockBuilder, mapType.getValueType(), entry.getValue());\n+            }\n+            builder.closeEntry();\n+        }\n+        else {\n+            if (BOOLEAN.equals(type)\n+                    || TINYINT.equals(type)\n+                    || SMALLINT.equals(type)\n+                    || INTEGER.equals(type)\n+                    || BIGINT.equals(type)\n+                    || DOUBLE.equals(type)\n+                    || type instanceof VarcharType) {\n+                TypeUtils.writeNativeValue(type, builder, obj);\n+            }\n+        }\n+    }\n+\n+    private static Object readObject(Type type, Block block, int position)\n+    {\n+        if (type instanceof ArrayType) {\n+            Type elementType = ((ArrayType) type).getElementType();\n+            return getArrayFromBlock(elementType, block.getBlock(position));\n+        }\n+        else if (type instanceof MapType) {\n+            return getMapFromBlock(type, block.getBlock(position));\n+        }\n+        else {\n+            if (type.getJavaType() == Slice.class) {\n+                Slice slice = (Slice) requireNonNull(TypeUtils.readNativeValue(type, block, position));\n+                return (type instanceof VarcharType) ? slice.toStringUtf8() : slice.getBytes();\n+            }\n+\n+            return TypeUtils.readNativeValue(type, block, position);\n+        }\n+    }\n+\n+    private static List<Object> getArrayFromBlock(Type elementType, Block block)\n+    {\n+        ImmutableList.Builder<Object> arrayBuilder = ImmutableList.builder();\n+        for (int i = 0; i < block.getPositionCount(); ++i) {\n+            arrayBuilder.add(readObject(elementType, block, i));\n+        }\n+        return arrayBuilder.build();\n+    }\n+\n+    private static Map<String, String> metricHeaderToMap(Map<String, String> mapToConvert)\n+    {\n+        return ImmutableMap.<String, String>builder().putAll(mapToConvert).build();\n+    }\n+\n+    @Override\n+    public long getCompletedBytes()\n+    {\n+        return totalBytes;\n+    }\n+\n+    @Override\n+    public long getReadTimeNanos()\n+    {\n+        return 0;\n+    }\n+\n+    @Override\n+    public Type getType(int field)\n+    {\n+        checkArgument(field < columnHandles.size(), \"Invalid field index\");\n+        return columnHandles.get(field).getColumnType();\n+    }\n+\n+    @Override\n+    public boolean advanceNextPosition()\n+    {\n+        if (!metricsItr.hasNext()) {\n+            return false;\n+        }\n+        fields = metricsItr.next();\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean getBoolean(int field)\n+    {\n+        return true;\n+    }\n+\n+    @Override\n+    public long getLong(int field)\n+    {\n+        Type type = getType(field);\n+        if (type.equals(TIMESTAMP_COLUMN_TYPE)) {\n+            Instant dateTime = (Instant) requireNonNull(getFieldValue(field));\n+            // render with the fixed offset of the Presto server\n+            int offsetMinutes = dateTime.atZone(ZoneId.systemDefault()).getOffset().getTotalSeconds() / 60;\n+            return packDateTimeWithZone(dateTime.toEpochMilli(), offsetMinutes);\n+        }\n+        else {\n+            throw new PrestoException(NOT_SUPPORTED, \"Unsupported type \" + getType(field));\n+        }\n+    }\n+\n+    @Override\n+    public double getDouble(int field)\n+    {\n+        checkFieldType(field, DOUBLE);\n+        return (double) requireNonNull(getFieldValue(field));", "originalCommit": "450b897257dbe7117b33b352d5f3fbe321aee818", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjU1OTk1Mg==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r576559952", "bodyText": "ok", "author": "fgwang7w", "createdAt": "2021-02-16T05:37:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2NzAyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTg2NzEyOQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r569867129", "bodyText": "let's throw exception or add checks, instead of return null here", "author": "zhenxiao", "createdAt": "2021-02-04T01:04:14Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusRecordCursor.java", "diffHunk": "@@ -0,0 +1,302 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.MapType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeUtils;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.RecordCursor;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.io.ByteSource;\n+import com.google.common.io.CountingInputStream;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.common.type.DateTimeEncoding.packDateTimeWithZone;\n+import static com.facebook.presto.common.type.DoubleType.DOUBLE;\n+import static com.facebook.presto.common.type.StandardTypes.BIGINT;\n+import static com.facebook.presto.common.type.StandardTypes.BOOLEAN;\n+import static com.facebook.presto.common.type.StandardTypes.INTEGER;\n+import static com.facebook.presto.common.type.StandardTypes.SMALLINT;\n+import static com.facebook.presto.common.type.StandardTypes.TINYINT;\n+import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n+import static com.facebook.presto.plugin.prometheus.PrometheusClient.TIMESTAMP_COLUMN_TYPE;\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrometheusRecordCursor\n+        implements RecordCursor\n+{\n+    private final List<PrometheusColumnHandle> columnHandles;\n+    private final int[] fieldToColumnIndex;\n+\n+    private final Iterator<PrometheusStandardizedRow> metricsItr;\n+    private final long totalBytes;\n+\n+    private PrometheusStandardizedRow fields;\n+\n+    public PrometheusRecordCursor(List<PrometheusColumnHandle> columnHandles, ByteSource byteSource)\n+    {\n+        this.columnHandles = columnHandles;\n+\n+        fieldToColumnIndex = new int[columnHandles.size()];\n+        for (int i = 0; i < columnHandles.size(); i++) {\n+            PrometheusColumnHandle columnHandle = columnHandles.get(i);\n+            fieldToColumnIndex[i] = columnHandle.getOrdinalPosition();\n+        }\n+\n+        try (CountingInputStream input = new CountingInputStream(byteSource.openStream())) {\n+            metricsItr = prometheusResultsInStandardizedForm(new PrometheusQueryResponse(input).getResults()).iterator();\n+            totalBytes = input.getCount();\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    static Block getBlockFromMap(Type mapType, Map<?, ?> map)\n+    {\n+        // on functions like COUNT() the Type won't be a MapType\n+        if (!(mapType instanceof MapType)) {\n+            return null;\n+        }\n+        Type keyType = mapType.getTypeParameters().get(0);\n+        Type valueType = mapType.getTypeParameters().get(1);\n+\n+        BlockBuilder mapBlockBuilder = mapType.createBlockBuilder(null, 1);\n+        BlockBuilder builder = mapBlockBuilder.beginBlockEntry();\n+\n+        for (Map.Entry<?, ?> entry : map.entrySet()) {\n+            writeObject(builder, keyType, entry.getKey());\n+            writeObject(builder, valueType, entry.getValue());\n+        }\n+\n+        mapBlockBuilder.closeEntry();\n+        return (Block) mapType.getObject(mapBlockBuilder, 0);\n+    }\n+\n+    static Map<Object, Object> getMapFromBlock(Type type, Block block)\n+    {\n+        MapType mapType = (MapType) type;\n+        Type keyType = mapType.getKeyType();\n+        Type valueType = mapType.getValueType();\n+        Map<Object, Object> map = new HashMap<>(block.getPositionCount() / 2);\n+        for (int i = 0; i < block.getPositionCount(); i += 2) {\n+            map.put(readObject(keyType, block, i), readObject(valueType, block, i + 1));\n+        }\n+        return map;\n+    }\n+\n+    private static void writeObject(BlockBuilder builder, Type type, Object obj)\n+    {\n+        if (type instanceof ArrayType) {\n+            Type elementType = ((ArrayType) type).getElementType();\n+            BlockBuilder arrayBuilder = builder.beginBlockEntry();\n+            for (Object item : (List<?>) obj) {\n+                writeObject(arrayBuilder, elementType, item);\n+            }\n+            builder.closeEntry();\n+        }\n+        else if (type instanceof MapType) {\n+            MapType mapType = (MapType) type;\n+            BlockBuilder mapBlockBuilder = builder.beginBlockEntry();\n+            for (Map.Entry<?, ?> entry : ((Map<?, ?>) obj).entrySet()) {\n+                writeObject(mapBlockBuilder, mapType.getKeyType(), entry.getKey());\n+                writeObject(mapBlockBuilder, mapType.getValueType(), entry.getValue());\n+            }\n+            builder.closeEntry();\n+        }\n+        else {\n+            if (BOOLEAN.equals(type)\n+                    || TINYINT.equals(type)\n+                    || SMALLINT.equals(type)\n+                    || INTEGER.equals(type)\n+                    || BIGINT.equals(type)\n+                    || DOUBLE.equals(type)\n+                    || type instanceof VarcharType) {\n+                TypeUtils.writeNativeValue(type, builder, obj);\n+            }\n+        }\n+    }\n+\n+    private static Object readObject(Type type, Block block, int position)\n+    {\n+        if (type instanceof ArrayType) {\n+            Type elementType = ((ArrayType) type).getElementType();\n+            return getArrayFromBlock(elementType, block.getBlock(position));\n+        }\n+        else if (type instanceof MapType) {\n+            return getMapFromBlock(type, block.getBlock(position));\n+        }\n+        else {\n+            if (type.getJavaType() == Slice.class) {\n+                Slice slice = (Slice) requireNonNull(TypeUtils.readNativeValue(type, block, position));\n+                return (type instanceof VarcharType) ? slice.toStringUtf8() : slice.getBytes();\n+            }\n+\n+            return TypeUtils.readNativeValue(type, block, position);\n+        }\n+    }\n+\n+    private static List<Object> getArrayFromBlock(Type elementType, Block block)\n+    {\n+        ImmutableList.Builder<Object> arrayBuilder = ImmutableList.builder();\n+        for (int i = 0; i < block.getPositionCount(); ++i) {\n+            arrayBuilder.add(readObject(elementType, block, i));\n+        }\n+        return arrayBuilder.build();\n+    }\n+\n+    private static Map<String, String> metricHeaderToMap(Map<String, String> mapToConvert)\n+    {\n+        return ImmutableMap.<String, String>builder().putAll(mapToConvert).build();\n+    }\n+\n+    @Override\n+    public long getCompletedBytes()\n+    {\n+        return totalBytes;\n+    }\n+\n+    @Override\n+    public long getReadTimeNanos()\n+    {\n+        return 0;\n+    }\n+\n+    @Override\n+    public Type getType(int field)\n+    {\n+        checkArgument(field < columnHandles.size(), \"Invalid field index\");\n+        return columnHandles.get(field).getColumnType();\n+    }\n+\n+    @Override\n+    public boolean advanceNextPosition()\n+    {\n+        if (!metricsItr.hasNext()) {\n+            return false;\n+        }\n+        fields = metricsItr.next();\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean getBoolean(int field)\n+    {\n+        return true;\n+    }\n+\n+    @Override\n+    public long getLong(int field)\n+    {\n+        Type type = getType(field);\n+        if (type.equals(TIMESTAMP_COLUMN_TYPE)) {\n+            Instant dateTime = (Instant) requireNonNull(getFieldValue(field));\n+            // render with the fixed offset of the Presto server\n+            int offsetMinutes = dateTime.atZone(ZoneId.systemDefault()).getOffset().getTotalSeconds() / 60;\n+            return packDateTimeWithZone(dateTime.toEpochMilli(), offsetMinutes);\n+        }\n+        else {\n+            throw new PrestoException(NOT_SUPPORTED, \"Unsupported type \" + getType(field));\n+        }\n+    }\n+\n+    @Override\n+    public double getDouble(int field)\n+    {\n+        checkFieldType(field, DOUBLE);\n+        return (double) requireNonNull(getFieldValue(field));\n+    }\n+\n+    @Override\n+    public Slice getSlice(int field)\n+    {\n+        checkFieldType(field, createUnboundedVarcharType());\n+        return Slices.utf8Slice((String) requireNonNull(getFieldValue(field)));\n+    }\n+\n+    @Override\n+    public Object getObject(int field)\n+    {\n+        return getFieldValue(field);\n+    }\n+\n+    @Override\n+    public boolean isNull(int field)\n+    {\n+        checkArgument(field < columnHandles.size(), \"Invalid field index\");\n+        if (getFieldValue(field) == null) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private Object getFieldValue(int field)\n+    {\n+        checkState(fields != null, \"Cursor has not been advanced yet\");\n+\n+        int columnIndex = fieldToColumnIndex[field];\n+        switch (columnIndex) {\n+            case 0:\n+                return fields.getLabels();\n+            case 1:\n+                return fields.getTimestamp();\n+            case 2:\n+                return fields.getValue();\n+        }\n+        return null;", "originalCommit": "450b897257dbe7117b33b352d5f3fbe321aee818", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "acec742be21763f744f0472641d3756fde330fca", "url": "https://github.com/prestodb/presto/commit/acec742be21763f744f0472641d3756fde330fca", "message": "enable TIMESTAMP WITH TIME ZONE from Prometheus connector", "committedDate": "2021-02-16T17:59:51Z", "type": "forcePushed"}, {"oid": "c58a4df4a5585b5f8f93d6cd2773b16025c5d43a", "url": "https://github.com/prestodb/presto/commit/c58a4df4a5585b5f8f93d6cd2773b16025c5d43a", "message": "enable TIMESTAMP WITH TIME ZONE from Prometheus connector", "committedDate": "2021-02-27T20:27:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM3MTk2MA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r584371960", "bodyText": "Here we actually implicitly enforce schema must be \"default\". How about we add a checkArgument in Metadata::listTables to check this condition there?", "author": "qqibrow", "createdAt": "2021-02-28T22:31:54Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusClient.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.airlift.json.JsonCodec;\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.common.type.DoubleType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.facebook.presto.common.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.plugin.prometheus.PrometheusColumn.mapType;\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_TABLES_METRICS_RETRIEVE_ERROR;\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_UNKNOWN_ERROR;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+public class PrometheusClient\n+{\n+    public static final String METRICS_ENDPOINT = \"/api/v1/label/__name__/values\";\n+\n+    private static final OkHttpClient httpClient = new OkHttpClient.Builder().build();\n+\n+    private final Optional<File> bearerTokenFile;\n+    private final Supplier<Map<String, Object>> tableSupplier;\n+    private final Type varcharMapType;\n+\n+    private static final Logger log = Logger.get(PrometheusClient.class);\n+\n+    @Inject\n+    public PrometheusClient(PrometheusConnectorConfig config, JsonCodec<Map<String, Object>> metricCodec, TypeManager typeManager)\n+    {\n+        requireNonNull(config, \"config is null\");\n+        requireNonNull(metricCodec, \"metricCodec is null\");\n+        requireNonNull(typeManager, \"typeManager is null\");\n+\n+        bearerTokenFile = config.getBearerTokenFile();\n+        URI prometheusMetricsUri = getPrometheusMetricsURI(config.getPrometheusURI());\n+        tableSupplier = Suppliers.memoizeWithExpiration(\n+                () -> fetchMetrics(metricCodec, prometheusMetricsUri),\n+                config.getCacheDuration().toMillis(),\n+                MILLISECONDS);\n+        varcharMapType = typeManager.getType(mapType(VARCHAR.getTypeSignature(), VARCHAR.getTypeSignature()));\n+    }\n+\n+    private static URI getPrometheusMetricsURI(URI prometheusUri)\n+    {\n+        try {\n+            // endpoint to retrieve metric names from Prometheus\n+            return new URI(prometheusUri.getScheme(), prometheusUri.getAuthority(), prometheusUri.getPath() + METRICS_ENDPOINT, null, null);\n+        }\n+        catch (URISyntaxException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public Set<String> getTableNames(String schema)\n+    {\n+        requireNonNull(schema, \"schema is null\");\n+        String status = \"\";\n+        if (schema.equals(\"default\")) {", "originalCommit": "c58a4df4a5585b5f8f93d6cd2773b16025c5d43a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODkyOTQxMA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r588929410", "bodyText": "PrometheusMetadata::listTables returns tables from default schema only if schema name is provided. it's not a hard enforcer so no explicitcheckArgument is needed", "author": "fgwang7w", "createdAt": "2021-03-06T20:48:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM3MTk2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM3MjIzMg==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r584372232", "bodyText": "create a member variable for this list?", "author": "qqibrow", "createdAt": "2021-02-28T22:34:11Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusClient.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.airlift.json.JsonCodec;\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.common.type.DoubleType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.facebook.presto.common.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.plugin.prometheus.PrometheusColumn.mapType;\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_TABLES_METRICS_RETRIEVE_ERROR;\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_UNKNOWN_ERROR;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+public class PrometheusClient\n+{\n+    public static final String METRICS_ENDPOINT = \"/api/v1/label/__name__/values\";\n+\n+    private static final OkHttpClient httpClient = new OkHttpClient.Builder().build();\n+\n+    private final Optional<File> bearerTokenFile;\n+    private final Supplier<Map<String, Object>> tableSupplier;\n+    private final Type varcharMapType;\n+\n+    private static final Logger log = Logger.get(PrometheusClient.class);\n+\n+    @Inject\n+    public PrometheusClient(PrometheusConnectorConfig config, JsonCodec<Map<String, Object>> metricCodec, TypeManager typeManager)\n+    {\n+        requireNonNull(config, \"config is null\");\n+        requireNonNull(metricCodec, \"metricCodec is null\");\n+        requireNonNull(typeManager, \"typeManager is null\");\n+\n+        bearerTokenFile = config.getBearerTokenFile();\n+        URI prometheusMetricsUri = getPrometheusMetricsURI(config.getPrometheusURI());\n+        tableSupplier = Suppliers.memoizeWithExpiration(\n+                () -> fetchMetrics(metricCodec, prometheusMetricsUri),\n+                config.getCacheDuration().toMillis(),\n+                MILLISECONDS);\n+        varcharMapType = typeManager.getType(mapType(VARCHAR.getTypeSignature(), VARCHAR.getTypeSignature()));\n+    }\n+\n+    private static URI getPrometheusMetricsURI(URI prometheusUri)\n+    {\n+        try {\n+            // endpoint to retrieve metric names from Prometheus\n+            return new URI(prometheusUri.getScheme(), prometheusUri.getAuthority(), prometheusUri.getPath() + METRICS_ENDPOINT, null, null);\n+        }\n+        catch (URISyntaxException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public Set<String> getTableNames(String schema)\n+    {\n+        requireNonNull(schema, \"schema is null\");\n+        String status = \"\";\n+        if (schema.equals(\"default\")) {\n+            if (!tableSupplier.get().isEmpty()) {\n+                Object tableSupplierStatus = tableSupplier.get().get(\"status\");\n+                if (tableSupplierStatus instanceof String) {\n+                    status = (String) tableSupplierStatus;\n+                }\n+            }\n+\n+            //TODO prometheus warnings (success|error|warning) could be handled separately\n+            if (status.equals(\"success\")) {\n+                List<String> tableNames = (List<String>) tableSupplier.get().get(\"data\");\n+                if (tableNames == null) {\n+                    return ImmutableSet.of();\n+                }\n+                return ImmutableSet.copyOf(tableNames);\n+            }\n+            else\n+                if (status.equals(\"warning\")) {\n+                    log.warn(\"Prometheus client gets a warning by retrieving table name from metric list\");\n+                }\n+        }\n+        throw new PrestoException(PROMETHEUS_TABLES_METRICS_RETRIEVE_ERROR, String.format(\"Prometheus did no return metrics list (table names): %s\", status));\n+    }\n+\n+    public PrometheusTable getTable(String schema, String tableName)\n+    {\n+        requireNonNull(schema, \"schema is null\");\n+        requireNonNull(tableName, \"tableName is null\");\n+        if (!schema.equals(\"default\")) {\n+            return null;\n+        }\n+\n+        List<String> tableNames = (List<String>) tableSupplier.get().get(\"data\");\n+        if (tableNames == null) {\n+            return null;\n+        }\n+        if (!tableNames.contains(tableName)) {\n+            return null;\n+        }\n+        return new PrometheusTable(\n+                tableName,\n+                ImmutableList.of(", "originalCommit": "c58a4df4a5585b5f8f93d6cd2773b16025c5d43a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODkyOTU4NA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r588929584", "bodyText": "no necessary, it can be done as inlined", "author": "fgwang7w", "createdAt": "2021-03-06T20:50:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM3MjIzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM3MjQyOQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r584372429", "bodyText": "checkArgument(name is in (labels, timestamp, value))", "author": "qqibrow", "createdAt": "2021-02-28T22:35:40Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusColumn.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.presto.common.type.StandardTypes;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeSignature;\n+import com.facebook.presto.common.type.TypeSignatureParameter;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Objects;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrometheusColumn\n+{\n+    private final String name;\n+    private final Type type;\n+\n+    @JsonCreator\n+    public PrometheusColumn(\n+            @JsonProperty(\"name\") String name,\n+            @JsonProperty(\"type\") Type type)\n+    {\n+        checkArgument(!isNullOrEmpty(name), \"name is null or is empty\");", "originalCommit": "c58a4df4a5585b5f8f93d6cd2773b16025c5d43a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODk2NjY1MQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r588966651", "bodyText": "yes good catch, include a sanity check here", "author": "fgwang7w", "createdAt": "2021-03-07T03:38:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM3MjQyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM3Mjg3MQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r584372871", "bodyText": "why noStrictConfig?", "author": "qqibrow", "createdAt": "2021-02-28T22:38:24Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusConnectorFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.airlift.bootstrap.Bootstrap;\n+import com.facebook.airlift.json.JsonModule;\n+import com.facebook.presto.spi.ConnectorHandleResolver;\n+import com.facebook.presto.spi.connector.Connector;\n+import com.facebook.presto.spi.connector.ConnectorContext;\n+import com.facebook.presto.spi.connector.ConnectorFactory;\n+import com.google.inject.Injector;\n+\n+import java.util.Map;\n+\n+import static com.google.common.base.Throwables.throwIfUnchecked;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrometheusConnectorFactory\n+        implements ConnectorFactory\n+{\n+    private static final String name = \"prometheus\";\n+\n+    @Override\n+    public String getName()\n+    {\n+        return name;\n+    }\n+\n+    @Override\n+    public ConnectorHandleResolver getHandleResolver()\n+    {\n+        return new PrometheusHandleResolver();\n+    }\n+\n+    @Override\n+    public Connector create(String catalogName, Map<String, String> config, ConnectorContext context)\n+    {\n+        requireNonNull(config, \"requiredConfig is null\");\n+        try {\n+            // A plugin is not required to use Guice; it is just very convenient\n+            Bootstrap app = new Bootstrap(\n+                    new JsonModule(),\n+                    new PrometheusModule(context.getTypeManager()));\n+\n+            Injector injector = app\n+                    .noStrictConfig()", "originalCommit": "c58a4df4a5585b5f8f93d6cd2773b16025c5d43a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODk2Nzg3Ng==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r588967876", "bodyText": "no need, removed, bootstrap.strict-config by default is on", "author": "fgwang7w", "createdAt": "2021-03-07T03:53:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM3Mjg3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM3MzUyMg==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r584373522", "bodyText": "Where will this method be used?", "author": "qqibrow", "createdAt": "2021-02-28T22:43:38Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusMetricResult.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonSetter;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrometheusMetricResult\n+{\n+    private final Map<String, String> metricHeader;\n+    private PrometheusTimeSeriesValueArray timeSeriesValues;\n+\n+    @JsonCreator\n+    public PrometheusMetricResult(\n+            @JsonProperty(\"metric\") Map<String, String> metricHeader,\n+            @JsonProperty(\"values\") PrometheusTimeSeriesValueArray timeSeriesValues)\n+    {\n+        requireNonNull(metricHeader, \"metricHeader is null\");\n+        this.metricHeader = metricHeader;\n+        this.timeSeriesValues = timeSeriesValues;\n+    }\n+\n+    @JsonSetter(\"value\")\n+    private final void setTimeSeriesValues(PrometheusTimeSeriesValue timeSeriesValue)", "originalCommit": "c58a4df4a5585b5f8f93d6cd2773b16025c5d43a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODk2NzE5MA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r588967190", "bodyText": "this method is used as the setter of the \"value\" property in PrometheusMetricResult entity", "author": "fgwang7w", "createdAt": "2021-03-07T03:45:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM3MzUyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM3MzgwMQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r584373801", "bodyText": "Why we need this? Exactly same code exists in ServerMain module", "author": "qqibrow", "createdAt": "2021-02-28T22:45:44Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusModule.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.Scopes;\n+\n+import javax.inject.Inject;\n+\n+import static com.facebook.airlift.configuration.ConfigBinder.configBinder;\n+import static com.facebook.airlift.json.JsonBinder.jsonBinder;\n+import static com.facebook.airlift.json.JsonCodec.listJsonCodec;\n+import static com.facebook.airlift.json.JsonCodecBinder.jsonCodecBinder;\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrometheusModule\n+        implements Module\n+{\n+    private final TypeManager typeManager;\n+\n+    public PrometheusModule(TypeManager typeManager)\n+    {\n+        this.typeManager = requireNonNull(typeManager, \"typeManager is null\");\n+    }\n+\n+    @Override\n+    public void configure(Binder binder)\n+    {\n+        binder.bind(TypeManager.class).toInstance(typeManager);\n+\n+        binder.bind(PrometheusConnector.class).in(Scopes.SINGLETON);\n+        binder.bind(PrometheusMetadata.class).in(Scopes.SINGLETON);\n+        binder.bind(PrometheusClient.class).in(Scopes.SINGLETON);\n+        binder.bind(PrometheusSplitManager.class).in(Scopes.SINGLETON);\n+        binder.bind(PrometheusClock.class).in(Scopes.SINGLETON);\n+        binder.bind(PrometheusRecordSetProvider.class).in(Scopes.SINGLETON);\n+        configBinder(binder).bindConfig(PrometheusConnectorConfig.class);\n+\n+        jsonBinder(binder).addDeserializerBinding(Type.class).to(TypeDeserializer.class);", "originalCommit": "c58a4df4a5585b5f8f93d6cd2773b16025c5d43a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODk3MTEzMg==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r588971132", "bodyText": "redundant, removed", "author": "fgwang7w", "createdAt": "2021-03-07T04:35:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM3MzgwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM3NTg4OA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r584375888", "bodyText": "Could we improve the readability by using JsonNode api?:\nJsonNode rootNode = mapper.readTree(response);\nString status = rootNode.path(\"status\").asText();\nString resultType = rootNode.path(\"data\").(\"resultType\");\nif (\"matrix\".equals(resultType)) {\n// convert values into list of list ... \n} else if (.....)", "author": "qqibrow", "createdAt": "2021-02-28T23:00:07Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusQueryResponse.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonToken;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_PARSE_ERROR;\n+import static com.fasterxml.jackson.core.JsonToken.FIELD_NAME;\n+import static java.util.Collections.singletonList;\n+\n+public class PrometheusQueryResponse\n+{\n+    private boolean status;\n+\n+    private String error;\n+    private String errorType;\n+    private String resultType;\n+    private String result;\n+    private List<PrometheusMetricResult> results;\n+\n+    public PrometheusQueryResponse(InputStream response)\n+            throws IOException\n+    {\n+        parsePrometheusQueryResponse(response);\n+    }\n+\n+    private void parsePrometheusQueryResponse(InputStream response)\n+            throws IOException\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new JavaTimeModule());\n+        JsonParser parser = new JsonFactory().createParser(response);", "originalCommit": "c58a4df4a5585b5f8f93d6cd2773b16025c5d43a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODk3MTg5OQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r588971899", "bodyText": "this refactor is going to be included in the next commit, separate PR", "author": "fgwang7w", "createdAt": "2021-03-07T04:43:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM3NTg4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM3NjYwNQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r584376605", "bodyText": "QQ: Will result always return in single http call?", "author": "qqibrow", "createdAt": "2021-02-28T23:06:07Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusRecordCursor.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.presto.common.block.Block;\n+import com.facebook.presto.common.block.BlockBuilder;\n+import com.facebook.presto.common.type.ArrayType;\n+import com.facebook.presto.common.type.MapType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeUtils;\n+import com.facebook.presto.common.type.VarcharType;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.RecordCursor;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.io.ByteSource;\n+import com.google.common.io.CountingInputStream;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.common.type.DateTimeEncoding.packDateTimeWithZone;\n+import static com.facebook.presto.common.type.DoubleType.DOUBLE;\n+import static com.facebook.presto.common.type.StandardTypes.BIGINT;\n+import static com.facebook.presto.common.type.StandardTypes.BOOLEAN;\n+import static com.facebook.presto.common.type.StandardTypes.INTEGER;\n+import static com.facebook.presto.common.type.StandardTypes.SMALLINT;\n+import static com.facebook.presto.common.type.StandardTypes.TINYINT;\n+import static com.facebook.presto.common.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static com.facebook.presto.common.type.VarcharType.createUnboundedVarcharType;\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_OUTPUT_ERROR;\n+import static com.facebook.presto.spi.StandardErrorCode.NOT_SUPPORTED;\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrometheusRecordCursor\n+        implements RecordCursor\n+{\n+    private final List<PrometheusColumnHandle> columnHandles;\n+    private final int[] fieldToColumnIndex;\n+    private final Iterator<PrometheusStandardizedRow> metricsItr;\n+    private final long totalBytes;\n+\n+    private PrometheusStandardizedRow fields;\n+\n+    public PrometheusRecordCursor(List<PrometheusColumnHandle> columnHandles, ByteSource byteSource)\n+    {\n+        this.columnHandles = columnHandles;\n+\n+        fieldToColumnIndex = new int[columnHandles.size()];\n+        for (int i = 0; i < columnHandles.size(); i++) {\n+            PrometheusColumnHandle columnHandle = columnHandles.get(i);\n+            fieldToColumnIndex[i] = columnHandle.getOrdinalPosition();\n+        }\n+\n+        try (CountingInputStream input = new CountingInputStream(byteSource.openStream())) {\n+            metricsItr = prometheusResultsInStandardizedForm(new PrometheusQueryResponse(input).getResults()).iterator();", "originalCommit": "c58a4df4a5585b5f8f93d6cd2773b16025c5d43a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODk3MzM3MQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r588973371", "bodyText": "The result after serde of query response is positioned by record cursor, so can be fetched in rows from cursor's block as a RecordPageSource", "author": "fgwang7w", "createdAt": "2021-03-07T05:00:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM3NjYwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM3ODMwNQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r584378305", "bodyText": "Is the url related to prometheus cluster? if so, we should return empty list in getPreferredNodes interface.", "author": "qqibrow", "createdAt": "2021-02-28T23:15:19Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusSplit.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.presto.spi.ConnectorSplit;\n+import com.facebook.presto.spi.HostAddress;\n+import com.facebook.presto.spi.schedule.NodeSelectionStrategy;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.net.URI;\n+import java.util.List;\n+\n+import static com.facebook.presto.spi.schedule.NodeSelectionStrategy.NO_PREFERENCE;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrometheusSplit\n+        implements ConnectorSplit\n+{\n+    private final URI uri;", "originalCommit": "c58a4df4a5585b5f8f93d6cd2773b16025c5d43a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTA4NTI3Mg==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r589085272", "bodyText": "no need, host address can be derived from uri which can be set for Prometheus coordinator's host address via prometheus.uri config", "author": "fgwang7w", "createdAt": "2021-03-07T20:41:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM3ODMwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM4MjQ4Mw==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r584382483", "bodyText": "Nit: Use https://guava.dev/releases/19.0/api/docs/com/google/common/base/Preconditions.html#checkState(boolean)", "author": "qqibrow", "createdAt": "2021-02-28T23:43:21Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusSplitManager.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.airlift.http.client.HttpUriBuilder;\n+import com.facebook.presto.common.predicate.Domain;\n+import com.facebook.presto.common.predicate.Marker;\n+import com.facebook.presto.common.predicate.TupleDomain;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.ConnectorSplit;\n+import com.facebook.presto.spi.ConnectorSplitSource;\n+import com.facebook.presto.spi.ConnectorTableLayoutHandle;\n+import com.facebook.presto.spi.FixedSplitSource;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.TableNotFoundException;\n+import com.facebook.presto.spi.connector.ConnectorSplitManager;\n+import com.facebook.presto.spi.connector.ConnectorTransactionHandle;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Lists;\n+import io.airlift.units.Duration;\n+\n+import javax.inject.Inject;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import static com.facebook.presto.common.type.DateTimeEncoding.unpackMillisUtc;\n+import static com.facebook.presto.common.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_UNKNOWN_ERROR;\n+import static java.time.Instant.ofEpochMilli;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrometheusSplitManager\n+        implements ConnectorSplitManager\n+{\n+    static final long OFFSET_MILLIS = 1L;\n+    private final PrometheusClient prometheusClient;\n+    private final PrometheusClock prometheusClock;\n+\n+    private final URI prometheusURI;\n+    private final Duration maxQueryRangeDuration;\n+    private final Duration queryChunkSizeDuration;\n+\n+    @Inject\n+    public PrometheusSplitManager(PrometheusClient prometheusClient, PrometheusClock prometheusClock, PrometheusConnectorConfig config)\n+    {\n+        this.prometheusClient = requireNonNull(prometheusClient, \"client is null\");\n+        this.prometheusClock = requireNonNull(prometheusClock, \"prometheusClock is null\");\n+\n+        requireNonNull(config, \"config is null\");\n+        this.prometheusURI = config.getPrometheusURI();\n+        this.maxQueryRangeDuration = config.getMaxQueryRangeDuration();\n+        this.queryChunkSizeDuration = config.getQueryChunkSizeDuration();\n+    }\n+\n+    /**\n+     * Utility method to get the end times in decimal seconds that divide up the query into chunks\n+     * The times will be used in queries to Prometheus like: `http://localhost:9090/api/v1/query?query=up[21d]&time=1568229904.000\"`\n+     * ** NOTE: Prometheus instant query wants the duration and end time specified.\n+     * We use now() for the defaultUpperBound when none is specified, for instance, from predicate push down\n+     *\n+     * @param defaultUpperBound a LocalDateTime likely from PrometheusTimeMachine class for testability\n+     * @return list of end times as decimal epoch seconds, like [\"1568053244.143\", \"1568926595.321\"]\n+     */\n+    protected static List<String> generateTimesForSplits(Instant defaultUpperBound, Duration maxQueryRangeDurationRequested, Duration queryChunkSizeDurationRequested,\n+            PrometheusTableHandle tableHandle)\n+    {\n+        Optional<PrometheusPredicateTimeInfo> predicateRange = tableHandle.getPredicate()\n+                .flatMap(PrometheusSplitManager::determinePredicateTimes);\n+\n+        EffectiveLimits effectiveLimits = new EffectiveLimits(defaultUpperBound, maxQueryRangeDurationRequested, predicateRange);\n+        Instant upperBound = effectiveLimits.getUpperBound();\n+        java.time.Duration maxQueryRangeDuration = effectiveLimits.getMaxQueryRangeDuration();\n+\n+        java.time.Duration queryChunkSizeDuration = java.time.Duration.ofMillis(queryChunkSizeDurationRequested.toMillis());\n+        if (maxQueryRangeDuration.isNegative()) {", "originalCommit": "c58a4df4a5585b5f8f93d6cd2773b16025c5d43a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM4MzAxMQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r584383011", "bodyText": "Shall we add precheck for tableHandle.getPredicate()? What if it's a fixed set like (1,2,3) ?", "author": "qqibrow", "createdAt": "2021-02-28T23:47:17Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusSplitManager.java", "diffHunk": "@@ -0,0 +1,276 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.airlift.http.client.HttpUriBuilder;\n+import com.facebook.presto.common.predicate.Domain;\n+import com.facebook.presto.common.predicate.Marker;\n+import com.facebook.presto.common.predicate.TupleDomain;\n+import com.facebook.presto.spi.ColumnHandle;\n+import com.facebook.presto.spi.ConnectorSession;\n+import com.facebook.presto.spi.ConnectorSplit;\n+import com.facebook.presto.spi.ConnectorSplitSource;\n+import com.facebook.presto.spi.ConnectorTableLayoutHandle;\n+import com.facebook.presto.spi.FixedSplitSource;\n+import com.facebook.presto.spi.PrestoException;\n+import com.facebook.presto.spi.TableNotFoundException;\n+import com.facebook.presto.spi.connector.ConnectorSplitManager;\n+import com.facebook.presto.spi.connector.ConnectorTransactionHandle;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Lists;\n+import io.airlift.units.Duration;\n+\n+import javax.inject.Inject;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import static com.facebook.presto.common.type.DateTimeEncoding.unpackMillisUtc;\n+import static com.facebook.presto.common.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_UNKNOWN_ERROR;\n+import static java.time.Instant.ofEpochMilli;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrometheusSplitManager\n+        implements ConnectorSplitManager\n+{\n+    static final long OFFSET_MILLIS = 1L;\n+    private final PrometheusClient prometheusClient;\n+    private final PrometheusClock prometheusClock;\n+\n+    private final URI prometheusURI;\n+    private final Duration maxQueryRangeDuration;\n+    private final Duration queryChunkSizeDuration;\n+\n+    @Inject\n+    public PrometheusSplitManager(PrometheusClient prometheusClient, PrometheusClock prometheusClock, PrometheusConnectorConfig config)\n+    {\n+        this.prometheusClient = requireNonNull(prometheusClient, \"client is null\");\n+        this.prometheusClock = requireNonNull(prometheusClock, \"prometheusClock is null\");\n+\n+        requireNonNull(config, \"config is null\");\n+        this.prometheusURI = config.getPrometheusURI();\n+        this.maxQueryRangeDuration = config.getMaxQueryRangeDuration();\n+        this.queryChunkSizeDuration = config.getQueryChunkSizeDuration();\n+    }\n+\n+    /**\n+     * Utility method to get the end times in decimal seconds that divide up the query into chunks\n+     * The times will be used in queries to Prometheus like: `http://localhost:9090/api/v1/query?query=up[21d]&time=1568229904.000\"`\n+     * ** NOTE: Prometheus instant query wants the duration and end time specified.\n+     * We use now() for the defaultUpperBound when none is specified, for instance, from predicate push down\n+     *\n+     * @param defaultUpperBound a LocalDateTime likely from PrometheusTimeMachine class for testability\n+     * @return list of end times as decimal epoch seconds, like [\"1568053244.143\", \"1568926595.321\"]\n+     */\n+    protected static List<String> generateTimesForSplits(Instant defaultUpperBound, Duration maxQueryRangeDurationRequested, Duration queryChunkSizeDurationRequested,\n+            PrometheusTableHandle tableHandle)\n+    {\n+        Optional<PrometheusPredicateTimeInfo> predicateRange = tableHandle.getPredicate()", "originalCommit": "c58a4df4a5585b5f8f93d6cd2773b16025c5d43a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTA4OTAxOQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r589089019", "bodyText": "good point, the predicate validation is done inside PrometheusSplitManager::determinePredicateTimes on filter to apply of PrometheusColumnHandle.class", "author": "fgwang7w", "createdAt": "2021-03-07T21:12:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM4MzAxMQ=="}], "type": "inlineReview"}, {"oid": "d842de8574b100c06d6cd3674515c32fc2e50575", "url": "https://github.com/prestodb/presto/commit/d842de8574b100c06d6cd3674515c32fc2e50575", "message": "enable TIMESTAMP WITH TIME ZONE from Prometheus connector", "committedDate": "2021-03-07T21:29:24Z", "type": "forcePushed"}, {"oid": "112818598589397957728e1038be90f63132a6ea", "url": "https://github.com/prestodb/presto/commit/112818598589397957728e1038be90f63132a6ea", "message": "enable TIMESTAMP WITH TIME ZONE from Prometheus connector", "committedDate": "2021-03-08T01:09:44Z", "type": "forcePushed"}, {"oid": "440d76125886acc241b70106889ad14ae801a123", "url": "https://github.com/prestodb/presto/commit/440d76125886acc241b70106889ad14ae801a123", "message": "enable TIMESTAMP WITH TIME ZONE from Prometheus connector", "committedDate": "2021-04-27T21:58:01Z", "type": "forcePushed"}, {"oid": "7d6ae372ecc476622ad82c2e6069de84fbe830e9", "url": "https://github.com/prestodb/presto/commit/7d6ae372ecc476622ad82c2e6069de84fbe830e9", "message": "enable TIMESTAMP WITH TIME ZONE from Prometheus connector", "committedDate": "2021-06-04T18:50:18Z", "type": "forcePushed"}, {"oid": "5c5e7ebc30ef337f26ddfa78fbe01347ba88b23f", "url": "https://github.com/prestodb/presto/commit/5c5e7ebc30ef337f26ddfa78fbe01347ba88b23f", "message": "enable TIMESTAMP WITH TIME ZONE from Prometheus connector", "committedDate": "2021-06-04T22:47:29Z", "type": "forcePushed"}, {"oid": "dabba900d7cd8ae3467f6d9e89c18294449aa545", "url": "https://github.com/prestodb/presto/commit/dabba900d7cd8ae3467f6d9e89c18294449aa545", "message": "enable TIMESTAMP WITH TIME ZONE from Prometheus connector", "committedDate": "2021-06-05T06:15:23Z", "type": "forcePushed"}, {"oid": "9707e1b8674c6564cb8bd776fab88f0c9bb51b9e", "url": "https://github.com/prestodb/presto/commit/9707e1b8674c6564cb8bd776fab88f0c9bb51b9e", "message": "enable TIMESTAMP WITH TIME ZONE from Prometheus connector", "committedDate": "2021-06-06T04:44:19Z", "type": "forcePushed"}, {"oid": "c9b8c584c9fb84b7af9dece017d5394d2cb6da09", "url": "https://github.com/prestodb/presto/commit/c9b8c584c9fb84b7af9dece017d5394d2cb6da09", "message": "enable TIMESTAMP WITH TIME ZONE from Prometheus connector", "committedDate": "2021-06-07T00:37:48Z", "type": "forcePushed"}, {"oid": "6b7751db3a3c81168a009ac890e15d83f9b82c5d", "url": "https://github.com/prestodb/presto/commit/6b7751db3a3c81168a009ac890e15d83f9b82c5d", "message": "enable TIMESTAMP WITH TIME ZONE from Prometheus connector", "committedDate": "2021-06-07T06:03:20Z", "type": "forcePushed"}, {"oid": "2466a7bdb8b5342db47956937cb1ad5419c2bd0d", "url": "https://github.com/prestodb/presto/commit/2466a7bdb8b5342db47956937cb1ad5419c2bd0d", "message": "enable TIMESTAMP WITH TIME ZONE from Prometheus connector", "committedDate": "2021-06-18T05:50:51Z", "type": "forcePushed"}, {"oid": "c9c6505ddfb9fe8745f714353cc6e5983eb529f2", "url": "https://github.com/prestodb/presto/commit/c9c6505ddfb9fe8745f714353cc6e5983eb529f2", "message": "Return TIMESTAMP WITH TIME ZONE from Prometheus connector\n\nThis commit enable `TIMESTAMP WITH TIME ZONE`, and some code cleanup\n\nCherry-pick of https://github.com/trinodb/trino/pull/4756\n\nCo-authored by: Dain Sundstrom <dain@iq80.com>", "committedDate": "2021-06-23T00:52:16Z", "type": "forcePushed"}, {"oid": "9d444ef13a1d961bad3260c2e5a766e030a42239", "url": "https://github.com/prestodb/presto/commit/9d444ef13a1d961bad3260c2e5a766e030a42239", "message": "Return TIMESTAMP WITH TIME ZONE from Prometheus connector\n\nThis commit enables `TIMESTAMP WITH TIME ZONE`, and some code cleanup\n\nCherry-pick of https://github.com/trinodb/trino/pull/4756\n\nCo-authored by: Dain Sundstrom <dain@iq80.com>", "committedDate": "2021-06-23T03:18:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDkyNzU2MA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r664927560", "bodyText": "Just curious, at last memory related settings (e.g, query.max-memory) should be good to protect the cluster right?", "author": "qqibrow", "createdAt": "2021-07-06T22:56:57Z", "path": "presto-docs/src/main/sphinx/connector/prometheus.rst", "diffHunk": "@@ -0,0 +1,73 @@\n+====================\n+Prometheus Connector\n+====================\n+\n+The Prometheus connector allows reading `Prometheus <https://prometheus.io/>`_.metrics as tables in Presto.\n+\n+The mechanism for querying Prometheus is to use the Prometheus HTTP API. Specifically, all queries are resolved to Prometheus Instant queries\n+with a form like: http://localhost:9090/api/v1/query?query=up[21d]&time=1568229904.000\"\n+In this case the ``up`` metric is taken from the Presto query table name. ``21d`` is the duration of the query. The Prometheus ``time`` value\n+corresponds to the ``timestamp`` field. Presto queries are translated from their use of the ``timestamp`` field to a duration and time value\n+as needed. Presto splits are generated by dividing the query range into attempted equal chunks.\n+\n+Configuration\n+-------------\n+\n+Create ``etc/catalog/prometheus.properties``\n+to mount the Prometheus connector as the ``prometheus`` catalog,\n+replacing the properties as appropriate:\n+\n+.. code-block:: none\n+\n+    connector.name=prometheus\n+    prometheus.uri=http://localhost:9090\n+    prometheus.query-chunk-duration=1d\n+    prometheus.max-query-duration=21d\n+    prometheus.cache-ttl=30s\n+    prometheus.bearer-token-file=/path/to/bearer/token/file\n+\n+Configuration Properties\n+------------------------\n+\n+The following configuration properties are available:\n+\n+======================================== ============================================================================================\n+Property Name                                   Description\n+======================================== ============================================================================================\n+``prometheus.uri``                       Prometheus coordinator host address\n+``prometheus.query-chunk-duration``      The duration of each query to Prometheus\n+``prometheus.max-query-duration``        Width of overall query to Prometheus, will be divided into query-chunk-duration queries\n+``prometheus.cache-ttl``                 How long the config values are cached\n+``prometheus.bearer-token-file``         File holding bearer token for access to Prometheus\n+======================================== ============================================================================================\n+\n+Not Exhausting Your Presto Available Heap", "originalCommit": "9d444ef13a1d961bad3260c2e5a766e030a42239", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MjU4MTEwOA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r672581108", "bodyText": "yes the query memory is controlled by presto memory management to prevent any overloading", "author": "fgwang7w", "createdAt": "2021-07-19T19:44:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDkyNzU2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDkyODI1Nw==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r664928257", "bodyText": "Shall we change to 1h and 10min given the above documentation?", "author": "qqibrow", "createdAt": "2021-07-06T22:59:01Z", "path": "presto-main/etc/catalog/prometheus.properties", "diffHunk": "@@ -0,0 +1,5 @@\n+connector.name=prometheus\n+prometheus.uri=http://localhost:9090\n+prometheus.query-chunk-duration=1d\n+prometheus.max-query-duration=21d", "originalCommit": "9d444ef13a1d961bad3260c2e5a766e030a42239", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MjU4MTY5Nw==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r672581697", "bodyText": "sure,1h makes more sense to set as default", "author": "fgwang7w", "createdAt": "2021-07-19T19:45:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDkyODI1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDkzNTc3Mw==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r664935773", "bodyText": "What does this line do?", "author": "qqibrow", "createdAt": "2021-07-06T23:20:36Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusModule.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.Scopes;\n+\n+import javax.inject.Inject;\n+\n+import static com.facebook.airlift.configuration.ConfigBinder.configBinder;\n+import static com.facebook.airlift.json.JsonCodec.listJsonCodec;\n+import static com.facebook.airlift.json.JsonCodecBinder.jsonCodecBinder;\n+import static com.facebook.presto.common.type.TypeSignature.parseTypeSignature;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrometheusModule\n+        implements Module\n+{\n+    private final TypeManager typeManager;\n+\n+    public PrometheusModule(TypeManager typeManager)\n+    {\n+        this.typeManager = requireNonNull(typeManager, \"typeManager is null\");\n+    }\n+\n+    @Override\n+    public void configure(Binder binder)\n+    {\n+        binder.bind(TypeManager.class).toInstance(typeManager);\n+\n+        binder.bind(PrometheusConnector.class).in(Scopes.SINGLETON);\n+        binder.bind(PrometheusMetadata.class).in(Scopes.SINGLETON);\n+        binder.bind(PrometheusClient.class).in(Scopes.SINGLETON);\n+        binder.bind(PrometheusSplitManager.class).in(Scopes.SINGLETON);\n+        binder.bind(PrometheusClock.class).in(Scopes.SINGLETON);\n+        binder.bind(PrometheusRecordSetProvider.class).in(Scopes.SINGLETON);\n+        configBinder(binder).bindConfig(PrometheusConnectorConfig.class);\n+\n+        jsonCodecBinder(binder).bindMapJsonCodec(String.class, listJsonCodec(PrometheusTable.class));\n+        jsonCodecBinder(binder).bindMapJsonCodec(String.class, Object.class);", "originalCommit": "9d444ef13a1d961bad3260c2e5a766e030a42239", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MjU4Mzk2NQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r672583965", "bodyText": "this is for json codec serDe for PrometheusClient class", "author": "fgwang7w", "createdAt": "2021-07-19T19:49:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDkzNTc3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDk1MDM2OQ==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r664950369", "bodyText": "Is it possible to add more tests besides SELECT * FROM prometheus.default.up LIMIT 1 ? e.g, without limit, add timestamp range etc.", "author": "qqibrow", "createdAt": "2021-07-07T00:05:10Z", "path": "presto-prometheus/src/test/java/com/facebook/presto/plugin/prometheus/TestPrometheusMetricsIntegration.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.Session;\n+import com.facebook.presto.testing.MaterializedResult;\n+import com.facebook.presto.testing.MaterializedRow;\n+import com.facebook.presto.testing.QueryRunner;\n+import com.facebook.presto.tests.AbstractTestQueryFramework;\n+import okhttp3.HttpUrl;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import static com.facebook.presto.plugin.prometheus.PrometheusQueryRunner.createPrometheusQueryRunner;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.fail;\n+\n+/**\n+ * Integration tests against Prometheus container\n+ */\n+\n+@Test(priority = 1, singleThreaded = true)\n+public class TestPrometheusMetricsIntegration\n+        extends AbstractTestQueryFramework\n+{\n+    private PrometheusServer server;\n+    private Session session;\n+    private QueryRunner runner;\n+\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        this.server = new PrometheusServer();\n+        return createPrometheusQueryRunner(server);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        if (server != null) {\n+            server.close();\n+        }\n+    }\n+\n+    @Test\n+    public void testConfirmMetricAvailableAndCheckUp()\n+            throws Exception\n+    {\n+        int maxTries = 60;\n+        int timeBetweenTriesMillis = 1000;\n+        runner = createQueryRunner();\n+        session = runner.getDefaultSession();\n+        int tries = 0;\n+        final OkHttpClient httpClient = new OkHttpClient.Builder()\n+                .connectTimeout(120, TimeUnit.SECONDS)\n+                .readTimeout(120, TimeUnit.SECONDS)\n+                .build();\n+        HttpUrl.Builder urlBuilder = HttpUrl.parse(server.getUri().toString()).newBuilder().encodedPath(\"/api/v1/query\");\n+        urlBuilder.addQueryParameter(\"query\", \"up[1d]\");\n+        String url = urlBuilder.build().toString();\n+        Request request = new Request.Builder()\n+                .url(url)\n+                .build();\n+        String responseBody;\n+        // this seems to be a reliable way to ensure Prometheus has `up` metric data\n+        while (tries < maxTries) {\n+            responseBody = httpClient.newCall(request).execute().body().string();\n+            if (responseBody.contains(\"values\")) {\n+                Logger log = Logger.get(TestPrometheusMetricsIntegration.class);\n+                log.info(\"prometheus response: %s\", responseBody);\n+                break;\n+            }\n+            Thread.sleep(timeBetweenTriesMillis);\n+            tries++;\n+        }\n+        if (tries == maxTries) {\n+            fail(\"Prometheus container not available for metrics query in \" + maxTries * timeBetweenTriesMillis + \" milliseconds.\");\n+        }\n+        // now we're making sure the client is ready\n+        tries = 0;\n+        while (tries < maxTries) {\n+            if (session != null && runner.tableExists(session, \"up\")) {\n+                break;\n+            }\n+            Thread.sleep(timeBetweenTriesMillis);\n+            tries++;\n+        }\n+        if (tries == maxTries) {\n+            fail(\"Prometheus container, or client, not available for metrics query in \" + maxTries * timeBetweenTriesMillis + \" milliseconds.\");\n+        }\n+\n+        MaterializedResult results = runner.execute(session, \"SELECT * FROM prometheus.default.up LIMIT 1\").toTestTypes();", "originalCommit": "9d444ef13a1d961bad3260c2e5a766e030a42239", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MjU4NjY4NA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r672586684", "bodyText": "some testing logic are implemented in TestPrometheusRetrieveUpValueIntegrationTests", "author": "fgwang7w", "createdAt": "2021-07-19T19:53:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDk1MDM2OQ=="}], "type": "inlineReview"}, {"oid": "e4cffac87e39cbb41c8d428518a29148c6b8f204", "url": "https://github.com/prestodb/presto/commit/e4cffac87e39cbb41c8d428518a29148c6b8f204", "message": "Return TIMESTAMP WITH TIME ZONE from Prometheus connector\n\nThis commit enables `TIMESTAMP WITH TIME ZONE`, and some code cleanup\n\nCherry-pick of https://github.com/trinodb/trino/pull/4756\n\nCo-authored by: Dain Sundstrom <dain@iq80.com>", "committedDate": "2021-07-19T19:55:09Z", "type": "forcePushed"}, {"oid": "a76a01961df0c4a5abfa1977f6f943ae665557a3", "url": "https://github.com/prestodb/presto/commit/a76a01961df0c4a5abfa1977f6f943ae665557a3", "message": "Return TIMESTAMP WITH TIME ZONE from Prometheus connector\n\nThis commit enables `TIMESTAMP WITH TIME ZONE`, and some code cleanup\n\nCherry-pick of https://github.com/trinodb/trino/pull/4756\n\nCo-authored by: Dain Sundstrom <dain@iq80.com>", "committedDate": "2021-07-20T04:40:49Z", "type": "forcePushed"}, {"oid": "a5180486b26b1902b3a5b8ac46365ab1795bc7ab", "url": "https://github.com/prestodb/presto/commit/a5180486b26b1902b3a5b8ac46365ab1795bc7ab", "message": "Return TIMESTAMP WITH TIME ZONE from Prometheus connector\n\nThis commit enables `TIMESTAMP WITH TIME ZONE`, and some code cleanup\n\nCherry-pick of https://github.com/trinodb/trino/pull/4756\n\nCo-authored by: Dain Sundstrom <dain@iq80.com>", "committedDate": "2021-08-08T20:37:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjM2Nzg5OA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r686367898", "bodyText": "add curly braces {} for \"else\"", "author": "beinan", "createdAt": "2021-08-10T22:40:53Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusClient.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.airlift.json.JsonCodec;\n+import com.facebook.airlift.log.Logger;\n+import com.facebook.presto.common.type.DoubleType;\n+import com.facebook.presto.common.type.Type;\n+import com.facebook.presto.common.type.TypeManager;\n+import com.facebook.presto.spi.PrestoException;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.facebook.presto.common.type.TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE;\n+import static com.facebook.presto.common.type.VarcharType.VARCHAR;\n+import static com.facebook.presto.plugin.prometheus.PrometheusColumn.mapType;\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_TABLES_METRICS_RETRIEVE_ERROR;\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_UNKNOWN_ERROR;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+public class PrometheusClient\n+{\n+    public static final String METRICS_ENDPOINT = \"/api/v1/label/__name__/values\";\n+\n+    private static final OkHttpClient httpClient = new OkHttpClient.Builder().build();\n+\n+    private final Optional<File> bearerTokenFile;\n+    private final Supplier<Map<String, Object>> tableSupplier;\n+    private final Type varcharMapType;\n+\n+    private static final Logger log = Logger.get(PrometheusClient.class);\n+\n+    @Inject\n+    public PrometheusClient(PrometheusConnectorConfig config, JsonCodec<Map<String, Object>> metricCodec, TypeManager typeManager)\n+    {\n+        requireNonNull(config, \"config is null\");\n+        requireNonNull(metricCodec, \"metricCodec is null\");\n+        requireNonNull(typeManager, \"typeManager is null\");\n+\n+        bearerTokenFile = config.getBearerTokenFile();\n+        URI prometheusMetricsUri = getPrometheusMetricsURI(config.getPrometheusURI());\n+        tableSupplier = Suppliers.memoizeWithExpiration(\n+                () -> fetchMetrics(metricCodec, prometheusMetricsUri),\n+                config.getCacheDuration().toMillis(),\n+                MILLISECONDS);\n+        varcharMapType = typeManager.getType(mapType(VARCHAR.getTypeSignature(), VARCHAR.getTypeSignature()));\n+    }\n+\n+    private static URI getPrometheusMetricsURI(URI prometheusUri)\n+    {\n+        try {\n+            // endpoint to retrieve metric names from Prometheus\n+            return new URI(prometheusUri.getScheme(), prometheusUri.getAuthority(), prometheusUri.getPath() + METRICS_ENDPOINT, null, null);\n+        }\n+        catch (URISyntaxException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public Set<String> getTableNames(String schema)\n+    {\n+        requireNonNull(schema, \"schema is null\");\n+        String status = \"\";\n+        if (schema.equals(\"default\")) {\n+            if (!tableSupplier.get().isEmpty()) {\n+                Object tableSupplierStatus = tableSupplier.get().get(\"status\");\n+                if (tableSupplierStatus instanceof String) {\n+                    status = (String) tableSupplierStatus;\n+                }\n+            }\n+\n+            //TODO prometheus warnings (success|error|warning) could be handled separately\n+            if (status.equals(\"success\")) {\n+                List<String> tableNames = (List<String>) tableSupplier.get().get(\"data\");\n+                if (tableNames == null) {\n+                    return ImmutableSet.of();\n+                }\n+                return ImmutableSet.copyOf(tableNames);\n+            }\n+            else", "originalCommit": "a5180486b26b1902b3a5b8ac46365ab1795bc7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjM3MDc2NA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r686370764", "bodyText": "nit: I would extract \"status\", \"success\" and \"resultType\" into constants, looks like they occurred a couple of times in this PR.  Your call.", "author": "beinan", "createdAt": "2021-08-10T22:47:37Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusQueryResponse.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonToken;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_PARSE_ERROR;\n+import static com.fasterxml.jackson.core.JsonToken.FIELD_NAME;\n+import static java.util.Collections.singletonList;\n+\n+public class PrometheusQueryResponse\n+{\n+    private boolean status;\n+\n+    private String error;\n+    private String errorType;\n+    private String resultType;\n+    private String result;\n+    private List<PrometheusMetricResult> results;\n+\n+    public PrometheusQueryResponse(InputStream response)\n+            throws IOException\n+    {\n+        parsePrometheusQueryResponse(response);\n+    }\n+\n+    private void parsePrometheusQueryResponse(InputStream response)\n+            throws IOException\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new JavaTimeModule());\n+        JsonParser parser = new JsonFactory().createParser(response);\n+        while (!parser.isClosed()) {\n+            JsonToken jsonToken = parser.nextToken();\n+            if (FIELD_NAME.equals(jsonToken)) {\n+                if (parser.getCurrentName().equals(\"status\")) {", "originalCommit": "a5180486b26b1902b3a5b8ac46365ab1795bc7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjM3MTIzNA==", "url": "https://github.com/prestodb/presto/pull/15194#discussion_r686371234", "bodyText": "nit: resultType could be an enum I think", "author": "beinan", "createdAt": "2021-08-10T22:48:36Z", "path": "presto-prometheus/src/main/java/com/facebook/presto/plugin/prometheus/PrometheusQueryResponse.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.plugin.prometheus;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonToken;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.facebook.presto.plugin.prometheus.PrometheusErrorCode.PROMETHEUS_PARSE_ERROR;\n+import static com.fasterxml.jackson.core.JsonToken.FIELD_NAME;\n+import static java.util.Collections.singletonList;\n+\n+public class PrometheusQueryResponse\n+{\n+    private boolean status;\n+\n+    private String error;\n+    private String errorType;\n+    private String resultType;\n+    private String result;\n+    private List<PrometheusMetricResult> results;\n+\n+    public PrometheusQueryResponse(InputStream response)\n+            throws IOException\n+    {\n+        parsePrometheusQueryResponse(response);\n+    }\n+\n+    private void parsePrometheusQueryResponse(InputStream response)\n+            throws IOException\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new JavaTimeModule());\n+        JsonParser parser = new JsonFactory().createParser(response);\n+        while (!parser.isClosed()) {\n+            JsonToken jsonToken = parser.nextToken();\n+            if (FIELD_NAME.equals(jsonToken)) {\n+                if (parser.getCurrentName().equals(\"status\")) {\n+                    parser.nextToken();\n+                    if (parser.getValueAsString().equals(\"success\")) {\n+                        this.status = true;\n+                        while (!parser.isClosed()) {\n+                            parser.nextToken();\n+                            if (FIELD_NAME.equals(jsonToken)) {\n+                                if (parser.getCurrentName().equals(\"resultType\")) {\n+                                    parser.nextToken();\n+                                    resultType = parser.getValueAsString();\n+                                }\n+                                if (parser.getCurrentName().equals(\"result\")) {\n+                                    parser.nextToken();\n+                                    ArrayNode node = mapper.readTree(parser);\n+                                    result = node.toString();\n+                                    break;\n+                                }\n+                            }\n+                        }\n+                    }\n+                    else {\n+                        //error path\n+                        String parsedStatus = parser.getValueAsString();\n+                        //parsing json is key-value based, so first nextToken is advanced to the key, nextToken advances to the value.\n+                        parser.nextToken(); // for \"errorType\" key\n+                        parser.nextToken(); // for \"errorType\" key's value\n+                        errorType = parser.getValueAsString();\n+                        parser.nextToken(); // advance to \"error\" key\n+                        parser.nextToken(); // advance to \"error\" key's value\n+                        error = parser.getValueAsString();\n+                        throw new PrestoException(PROMETHEUS_PARSE_ERROR, \"Unable to parse Prometheus response: \" + parsedStatus + \" \" + errorType + \" \" + error);\n+                    }\n+                }\n+            }\n+            if (result != null) {\n+                break;\n+            }\n+        }\n+        if (result != null && resultType != null) {\n+            switch (resultType) {\n+                case \"matrix\":", "originalCommit": "a5180486b26b1902b3a5b8ac46365ab1795bc7ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "816d191bc478fd699fb8d0e9775dabdfb43b6806", "url": "https://github.com/prestodb/presto/commit/816d191bc478fd699fb8d0e9775dabdfb43b6806", "message": "Add support for Prometheus plugin\n\nCherry-pick of https://github.com/prestosql/presto/pull/2321\n\nCo-authored by: bentito <btofel@redhat.com>", "committedDate": "2021-08-11T17:07:48Z", "type": "commit"}, {"oid": "3210abc5a3ca81086c2c8c7af744eadc058adc76", "url": "https://github.com/prestodb/presto/commit/3210abc5a3ca81086c2c8c7af744eadc058adc76", "message": "Return TIMESTAMP WITH TIME ZONE from Prometheus connector\n\nThis commit enables `TIMESTAMP WITH TIME ZONE`, and some code cleanup\n\nCherry-pick of https://github.com/trinodb/trino/pull/4756\n\nCo-authored by: Dain Sundstrom <dain@iq80.com>", "committedDate": "2021-08-11T17:56:14Z", "type": "forcePushed"}, {"oid": "2975bb4a5f7089ee6449766c5f33e754bc5f3b99", "url": "https://github.com/prestodb/presto/commit/2975bb4a5f7089ee6449766c5f33e754bc5f3b99", "message": "Return TIMESTAMP WITH TIME ZONE from Prometheus connector\n\nThis commit enables `TIMESTAMP WITH TIME ZONE`, and some code cleanup\n\nCherry-pick of https://github.com/trinodb/trino/pull/4756\n\nCo-authored by: Dain Sundstrom <dain@iq80.com>", "committedDate": "2021-08-11T18:50:02Z", "type": "commit"}, {"oid": "2975bb4a5f7089ee6449766c5f33e754bc5f3b99", "url": "https://github.com/prestodb/presto/commit/2975bb4a5f7089ee6449766c5f33e754bc5f3b99", "message": "Return TIMESTAMP WITH TIME ZONE from Prometheus connector\n\nThis commit enables `TIMESTAMP WITH TIME ZONE`, and some code cleanup\n\nCherry-pick of https://github.com/trinodb/trino/pull/4756\n\nCo-authored by: Dain Sundstrom <dain@iq80.com>", "committedDate": "2021-08-11T18:50:02Z", "type": "forcePushed"}]}