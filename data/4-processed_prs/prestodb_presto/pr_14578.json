{"pr_number": 14578, "pr_title": "Filtering nulls from joins when possible", "pr_createdAt": "2020-05-26T01:56:32Z", "pr_url": "https://github.com/prestodb/presto/pull/14578", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyMDk3OA==", "url": "https://github.com/prestodb/presto/pull/14578#discussion_r430120978", "bodyText": "I tried to add this optimisation in PlanOptimizers where all the other optimizers live . ssaumitra@07ca92e\nThe problem was that, RelationPlanner converts equality join expressions to JoinNode.EquiJoinClause. So IsNotNullPredicate can no longer be constructed over there. If there is a way to make that work, please let me know.\nCC. @rschlussel", "author": "ssaumitra", "createdAt": "2020-05-26T02:02:09Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java", "diffHunk": "@@ -315,17 +316,21 @@ else if (firstDependencies.stream().allMatch(right::canResolve) && secondDepende\n             rightPlanBuilder = rightPlanBuilder.appendProjections(rightComparisonExpressions, variableAllocator, idAllocator);\n \n             for (int i = 0; i < leftComparisonExpressions.size(); i++) {\n+                Expression leftExpression = leftPlanBuilder.rewrite(leftComparisonExpressions.get(i));\n+                Expression rightExpression = rightPlanBuilder.rewrite(rightComparisonExpressions.get(i));\n                 if (joinConditionComparisonOperators.get(i) == ComparisonExpression.Operator.EQUAL) {\n                     VariableReferenceExpression leftVariable = leftPlanBuilder.translateToVariable(leftComparisonExpressions.get(i));\n                     VariableReferenceExpression righVariable = rightPlanBuilder.translateToVariable(rightComparisonExpressions.get(i));\n \n                     equiClauses.add(new JoinNode.EquiJoinClause(leftVariable, righVariable));\n                 }\n                 else {\n-                    Expression leftExpression = leftPlanBuilder.rewrite(leftComparisonExpressions.get(i));\n-                    Expression rightExpression = rightPlanBuilder.rewrite(rightComparisonExpressions.get(i));\n                     postInnerJoinConditions.add(new ComparisonExpression(joinConditionComparisonOperators.get(i), leftExpression, rightExpression));\n                 }\n+                if (node.getType() == INNER) {\n+                    postInnerJoinConditions.add(new IsNotNullPredicate(leftExpression));\n+                    postInnerJoinConditions.add(new IsNotNullPredicate(rightExpression));\n+                }", "originalCommit": "46ddbe8099ccf247447e0af24a517325cc140c9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU4NjY5Mg==", "url": "https://github.com/prestodb/presto/pull/14578#discussion_r430586692", "bodyText": "Looks good.\nWhen you are at it, also add it to the inner table of an outer join - so right side of left join and left side of right join can use the same optimization", "author": "kaikalur", "createdAt": "2020-05-26T17:32:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyMDk3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgxMTU1Mg==", "url": "https://github.com/prestodb/presto/pull/14578#discussion_r430811552", "bodyText": "Makes sense. I will add that.", "author": "ssaumitra", "createdAt": "2020-05-27T01:42:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyMDk3OA=="}], "type": "inlineReview"}, {"oid": "2fba2b2715023631fe2ae94fcb1e8b1973ce98cf", "url": "https://github.com/prestodb/presto/commit/2fba2b2715023631fe2ae94fcb1e8b1973ce98cf", "message": "Filtering nulls from left and right in inner join", "committedDate": "2020-05-28T01:32:33Z", "type": "forcePushed"}, {"oid": "544f810a7c23ede1716b6f497a526a7e2635daec", "url": "https://github.com/prestodb/presto/commit/544f810a7c23ede1716b6f497a526a7e2635daec", "message": "Join optimisation: filtering null rows explicitly", "committedDate": "2020-05-28T01:34:19Z", "type": "forcePushed"}, {"oid": "22abb119b07dad959282be488522ecce68cda6cc", "url": "https://github.com/prestodb/presto/commit/22abb119b07dad959282be488522ecce68cda6cc", "message": "Join optimisation: filtering null rows explicitly", "committedDate": "2020-05-28T17:57:10Z", "type": "forcePushed"}, {"oid": "42b4c9f7dbddbc897a81702475d3b9be12fc6e54", "url": "https://github.com/prestodb/presto/commit/42b4c9f7dbddbc897a81702475d3b9be12fc6e54", "message": "Join optimisation: filtering null rows explicitly", "committedDate": "2020-05-28T21:03:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI1ODQ5OA==", "url": "https://github.com/prestodb/presto/pull/14578#discussion_r432258498", "bodyText": "Are you sure these are just the keys not any other expressions?", "author": "kaikalur", "createdAt": "2020-05-29T05:10:34Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java", "diffHunk": "@@ -290,11 +291,13 @@ else if (conjunct instanceof ComparisonExpression) {\n                     if (firstDependencies.stream().allMatch(left::canResolve) && secondDependencies.stream().allMatch(right::canResolve)) {\n                         leftComparisonExpressions.add(firstExpression);\n                         rightComparisonExpressions.add(secondExpression);\n+                        addNullFilters(complexJoinExpressions, node.getType(), firstExpression, secondExpression);\n                         joinConditionComparisonOperators.add(comparisonOperator);\n                     }\n                     else if (firstDependencies.stream().allMatch(right::canResolve) && secondDependencies.stream().allMatch(left::canResolve)) {\n                         leftComparisonExpressions.add(secondExpression);\n                         rightComparisonExpressions.add(firstExpression);\n+                        addNullFilters(complexJoinExpressions, node.getType(), secondExpression, firstExpression);", "originalCommit": "42b4c9f7dbddbc897a81702475d3b9be12fc6e54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcxOTQ0MA==", "url": "https://github.com/prestodb/presto/pull/14578#discussion_r432719440", "bodyText": "@kaikalur These can be expressions as well, which can be completely resolved from left and right. For example, for the query\nSELECT DISTINCT a.orderkey FROM \n(SELECT CASE WHEN orderkey > 10 THEN orderkey END orderkey FROM orders WHERE orderkey < 100) a \nRIGHT OUTER JOIN \n(SELECT * FROM orders WHERE orderkey < 100) b ON a.orderkey = b.orderkey\n\nI am expecting optimised version as\nSELECT DISTINCT a.orderkey FROM \n(SELECT CASE WHEN orderkey > 10 THEN orderkey END orderkey FROM orders WHERE orderkey < 100) a \nRIGHT OUTER JOIN \n(SELECT * FROM orders WHERE orderkey < 100) b ON a.orderkey = b.orderkey\nWHERE CASE WHEN orderkey > 10 THEN orderkey END IS NOT NULL\n\nWhich is okay IMO, because CASE WHEN orderkey > 10 THEN orderkey END IS NOT NULL can get pushed down to scan operator for orders table.", "author": "ssaumitra", "createdAt": "2020-05-29T20:28:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI1ODQ5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkwMjQ1OQ==", "url": "https://github.com/prestodb/presto/pull/14578#discussion_r436902459", "bodyText": "This might end up introducing a regression, especially when NULLs are rare and/or expression is expensive. I think a better way to implement this is to do this in plan optimization (add an additional filter node after project to avoid recompute the expression). If nothing else, the default of this flag should be false. Maybe we should run some benchmarking first.", "author": "rongrong", "createdAt": "2020-06-08T18:17:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI1ODQ5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUyODY3MA==", "url": "https://github.com/prestodb/presto/pull/14578#discussion_r442528670", "bodyText": "As discussed offline, we were thinking of doing performance testing. In the meantime, planned CSE changes will solve this problem.\nWe will roll out this optimisation in disabled state. And when CSE changes are released, we will re-enable this.", "author": "ssaumitra", "createdAt": "2020-06-18T22:07:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI1ODQ5OA=="}], "type": "inlineReview"}, {"oid": "55e9cff980d19a41ba6e87a9a8894ef346813bac", "url": "https://github.com/prestodb/presto/commit/55e9cff980d19a41ba6e87a9a8894ef346813bac", "message": "Join optimisation: filtering null rows explicitly", "committedDate": "2020-05-31T19:57:27Z", "type": "forcePushed"}, {"oid": "93a924f64acba19e39f7c4b0394f5fe6a3f7729c", "url": "https://github.com/prestodb/presto/commit/93a924f64acba19e39f7c4b0394f5fe6a3f7729c", "message": "Join optimisation: filtering null rows explicitly", "committedDate": "2020-05-31T20:07:16Z", "type": "forcePushed"}, {"oid": "7d5e2eb74aba2f2c8cca95eaa623bc99ef999010", "url": "https://github.com/prestodb/presto/commit/7d5e2eb74aba2f2c8cca95eaa623bc99ef999010", "message": "New system property to control null optimization in join", "committedDate": "2020-06-01T22:39:11Z", "type": "forcePushed"}, {"oid": "c509184874298c9c87adb2aad06cd861340a61ec", "url": "https://github.com/prestodb/presto/commit/c509184874298c9c87adb2aad06cd861340a61ec", "message": "New system property to control null optimization in join", "committedDate": "2020-06-02T00:36:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU5MDUwMg==", "url": "https://github.com/prestodb/presto/pull/14578#discussion_r433590502", "bodyText": "Looks good. Just add one more test with some conditions like:\nWHERE a.x IS NULL\netc. so we can ensure that we did not push that down.", "author": "kaikalur", "createdAt": "2020-06-02T02:43:24Z", "path": "presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java", "diffHunk": "@@ -8186,6 +8186,22 @@ public void testLateralJoin()\n                 \"line .*: LATERAL on other than the right side of CROSS JOIN is not supported\");\n     }\n \n+    @Test\n+    public void testJoinsWithNulls()\n+    {\n+        assertQuery(\"SELECT * FROM (VALUES 2, 3, null) a(x) INNER JOIN (VALUES 3, 4, null) b(x) ON a.x = b.x\",\n+                \"SELECT * FROM VALUES (3, 3)\");\n+\n+        assertQuery(\"SELECT * FROM (VALUES 2, 3, null) a(x) LEFT JOIN (VALUES 3, 4, null) b(x) ON a.x = b.x\",\n+                \"SELECT * FROM VALUES (3, 3), (2, NULL), (NULL, NULL)\");\n+\n+        assertQuery(\"SELECT * FROM (VALUES 2, 3, null) a(x) RIGHT JOIN (VALUES 3, 4, null) b(x) ON a.x = b.x\",\n+                \"SELECT * FROM VALUES (3, 3), (NULL, 4), (NULL, NULL)\");\n+\n+        assertQuery(\"SELECT * FROM (VALUES 2, 3, null) a(x) FULL OUTER JOIN (VALUES 3, 4, null) b(x) ON a.x = b.x\",\n+                \"SELECT * FROM VALUES (3, 3), (NULL, 4), (2, NULL), (NULL, NULL), (NULL, NULL)\");\n+    }", "originalCommit": "c509184874298c9c87adb2aad06cd861340a61ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk4NjMxMA==", "url": "https://github.com/prestodb/presto/pull/14578#discussion_r433986310", "bodyText": "Added now. It's interesting to see how NULL filtering works in FULL OUTER JOIN.", "author": "ssaumitra", "createdAt": "2020-06-02T15:53:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU5MDUwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA0ODYyMA==", "url": "https://github.com/prestodb/presto/pull/14578#discussion_r434048620", "bodyText": "I actually meant WHERE clauses not AND in ON clauses because we should not be pushing those down.", "author": "kaikalur", "createdAt": "2020-06-02T17:27:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU5MDUwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyODU3Mg==", "url": "https://github.com/prestodb/presto/pull/14578#discussion_r434128572", "bodyText": "@kaikalur Sure. My code does not touch Predicate pushdown. So this should not change. Updating test just for completeness.", "author": "ssaumitra", "createdAt": "2020-06-02T19:33:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU5MDUwMg=="}], "type": "inlineReview"}, {"oid": "7c9d9a72041865f47b39f03688e5057131a0279a", "url": "https://github.com/prestodb/presto/commit/7c9d9a72041865f47b39f03688e5057131a0279a", "message": "New system property to control null optimization in join", "committedDate": "2020-06-02T15:35:13Z", "type": "forcePushed"}, {"oid": "81366374205b9cea987d6fe476c2cd40c637e718", "url": "https://github.com/prestodb/presto/commit/81366374205b9cea987d6fe476c2cd40c637e718", "message": "New system property to control null optimization in join", "committedDate": "2020-06-02T15:42:20Z", "type": "forcePushed"}, {"oid": "c51d19c1c5359eb56ce6381e41acfd089b1c5961", "url": "https://github.com/prestodb/presto/commit/c51d19c1c5359eb56ce6381e41acfd089b1c5961", "message": "New system property to control null optimization in join", "committedDate": "2020-06-02T19:29:16Z", "type": "forcePushed"}, {"oid": "da58bb920078a9cb3804aecfe633ec436a0bf40e", "url": "https://github.com/prestodb/presto/commit/da58bb920078a9cb3804aecfe633ec436a0bf40e", "message": "New system property to control null optimization in join", "committedDate": "2020-06-02T19:31:44Z", "type": "forcePushed"}, {"oid": "05fd272d7cd2be63611d47c5ac00c3b89a9f4f41", "url": "https://github.com/prestodb/presto/commit/05fd272d7cd2be63611d47c5ac00c3b89a9f4f41", "message": "New system property to control null optimization in join", "committedDate": "2020-06-07T18:41:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkwNDI5Ng==", "url": "https://github.com/prestodb/presto/pull/14578#discussion_r436904296", "bodyText": "Formatting seems off here.", "author": "rongrong", "createdAt": "2020-06-08T18:20:47Z", "path": "presto-main/src/test/java/com/facebook/presto/sql/planner/TestPredicatePushdown.java", "diffHunk": "@@ -61,10 +60,12 @@ public void testNonStraddlingJoinExpression()\n         assertPlan(\"SELECT * FROM orders JOIN lineitem ON orders.orderkey = lineitem.orderkey AND cast(lineitem.linenumber AS varchar) = '2'\",\n                 anyTree(\n                         join(INNER, ImmutableList.of(equiJoinClause(\"ORDERS_OK\", \"LINEITEM_OK\")),\n-                                any(\n-                                        tableScan(\"orders\", ImmutableMap.of(\"ORDERS_OK\", \"orderkey\"))),\n                                 anyTree(\n-                                        filter(\"cast('2' as varchar) = cast(LINEITEM_LINENUMBER as varchar)\",\n+                                    filter(\"ORDERS_OK IS NOT NULL\",", "originalCommit": "05fd272d7cd2be63611d47c5ac00c3b89a9f4f41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkyMjgxOQ==", "url": "https://github.com/prestodb/presto/pull/14578#discussion_r436922819", "bodyText": "Corrected formatting.", "author": "ssaumitra", "createdAt": "2020-06-08T18:54:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkwNDI5Ng=="}], "type": "inlineReview"}, {"oid": "14c65b5460fc30bf3ee9c3d71ed87b5e9e0ff7c5", "url": "https://github.com/prestodb/presto/commit/14c65b5460fc30bf3ee9c3d71ed87b5e9e0ff7c5", "message": "New system property to control null optimization in join", "committedDate": "2020-06-08T22:10:12Z", "type": "forcePushed"}, {"oid": "b915b31d11f95363d795781ed4be2126100f7413", "url": "https://github.com/prestodb/presto/commit/b915b31d11f95363d795781ed4be2126100f7413", "message": "New system property to control null optimization in join.\n\nAlso updating tests.", "committedDate": "2020-06-18T23:07:02Z", "type": "forcePushed"}, {"oid": "7e5d140057a091dc53ab054e36c119cdde042b89", "url": "https://github.com/prestodb/presto/commit/7e5d140057a091dc53ab054e36c119cdde042b89", "message": "New system property to control null optimization in join.\n\nAlso updating tests.", "committedDate": "2020-06-18T23:11:57Z", "type": "forcePushed"}, {"oid": "463ee9d8cc1b2d8b41946a566059a8916adbf6ba", "url": "https://github.com/prestodb/presto/commit/463ee9d8cc1b2d8b41946a566059a8916adbf6ba", "message": "New system property to control null optimization in join.\n\nAlso updating tests.", "committedDate": "2020-06-18T23:50:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MTMxMQ==", "url": "https://github.com/prestodb/presto/pull/14578#discussion_r442981311", "bodyText": "Do we understand why this would change?", "author": "rongrong", "createdAt": "2020-06-19T18:11:41Z", "path": "presto-benchto-benchmarks/src/test/resources/sql/presto/tpch/q13.plan.txt", "diffHunk": "@@ -8,9 +8,9 @@ remote exchange (GATHER, SINGLE, [])\n                             final aggregation over (custkey)\n                                 local exchange (GATHER, SINGLE, [])\n                                     partial aggregation over (custkey)\n-                                        join (LEFT, PARTITIONED):\n-                                            remote exchange (REPARTITION, HASH, [custkey])\n-                                                scan customer\n+                                        join (RIGHT, PARTITIONED):", "originalCommit": "6f4de1920e1cd2970e66a4d11f54cafe9a79e69b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk5ODM0OQ==", "url": "https://github.com/prestodb/presto/pull/14578#discussion_r442998349", "bodyText": "This won't change actually. It's reverted it a while ago. These are the latest changes https://github.com/prestodb/presto/pull/14578/files", "author": "ssaumitra", "createdAt": "2020-06-19T18:55:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MTMxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAwNjMxMg==", "url": "https://github.com/prestodb/presto/pull/14578#discussion_r443006312", "bodyText": "Please do not introduce change and revert in later commit. I think for this PR, you can merge the two commits into one. If you want to keep 2 separate commits, please keep each one as only introducing the feature mentioned (one for adding null filter, one for introducing the session) and nothing else. Thanks!", "author": "rongrong", "createdAt": "2020-06-19T19:16:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MTMxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA4NTM2OQ==", "url": "https://github.com/prestodb/presto/pull/14578#discussion_r443085369", "bodyText": "@rongrong I understand. I have now squashed all the changes in a single commit.\nJust so I can avoid this in the future, what's the recommended workflow in Presto to review multi-commit PRs? For example, pandas advises to accommodate code review changes in separate commits (https://pandas.pydata.org/docs/development/contributing.html#updating-your-pull-request) Apache Flink advises to squash everything in single amended commit (https://flink.apache.org/contributing/improve-website.html#submit-your-contribution) . What's the recommended way for Presto?", "author": "ssaumitra", "createdAt": "2020-06-20T00:39:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MTMxMQ=="}], "type": "inlineReview"}, {"oid": "3a78565aa22e5d4477f0e07d604ce342643185c3", "url": "https://github.com/prestodb/presto/commit/3a78565aa22e5d4477f0e07d604ce342643185c3", "message": "New system property to control null optimization in join.\n\nAlso updating tests.", "committedDate": "2020-06-19T18:51:27Z", "type": "forcePushed"}, {"oid": "37e49683113dc0c916f758e98b76b4b63920a21d", "url": "https://github.com/prestodb/presto/commit/37e49683113dc0c916f758e98b76b4b63920a21d", "message": "Join optimisation: filtering null rows explicitly", "committedDate": "2020-06-19T20:00:20Z", "type": "commit"}, {"oid": "37e49683113dc0c916f758e98b76b4b63920a21d", "url": "https://github.com/prestodb/presto/commit/37e49683113dc0c916f758e98b76b4b63920a21d", "message": "Join optimisation: filtering null rows explicitly", "committedDate": "2020-06-19T20:00:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgyOTgxOQ==", "url": "https://github.com/prestodb/presto/pull/14578#discussion_r443829819", "bodyText": "Why is the null filter added to complexJoinExpressions rather than leftComparisonExpressions or rightComparisonExpressions?", "author": "rongrong", "createdAt": "2020-06-22T21:13:39Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java", "diffHunk": "@@ -290,11 +291,13 @@ else if (conjunct instanceof ComparisonExpression) {\n                     if (firstDependencies.stream().allMatch(left::canResolve) && secondDependencies.stream().allMatch(right::canResolve)) {\n                         leftComparisonExpressions.add(firstExpression);\n                         rightComparisonExpressions.add(secondExpression);\n+                        addNullFilters(complexJoinExpressions, node.getType(), firstExpression, secondExpression);", "originalCommit": "37e49683113dc0c916f758e98b76b4b63920a21d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgzODA0OA==", "url": "https://github.com/prestodb/presto/pull/14578#discussion_r443838048", "bodyText": "@rongrong leftComparisonExpressions or rightComparisonExpressions have different meaning in this function. As of today, in current master branch (where  my changes are not added), if I run the query\nexplain SELECT * FROM customer a INNER JOIN orders b ON a.custkey = b.custkey and a.phone is not null;\n\nleftComparisonExpressions is a.custkey, rightComparisonExpressions is b.custkey and complexJoinExpressions is a.phone is not null.", "author": "ssaumitra", "createdAt": "2020-06-22T21:31:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgyOTgxOQ=="}], "type": "inlineReview"}]}