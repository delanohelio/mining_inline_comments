{"pr_number": 15333, "pr_title": "Fix access control checks for USING clause", "pr_createdAt": "2020-10-19T20:10:20Z", "pr_url": "https://github.com/prestodb/presto/pull/15333", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1MjA3OQ==", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508052079", "bodyText": "Doesn't this cause problem if I have\nSELECT ...\nFROM T1\nJOIN T2\nUSING(x)\nORDER BY x\nAdd a test case for this.", "author": "kaikalur", "createdAt": "2020-10-19T20:46:59Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/AggregationAnalyzer.java", "diffHunk": "@@ -360,9 +362,10 @@ protected Boolean visitFunctionCall(FunctionCall node, Void context)\n                                     .map(NodeRef::of)\n                                     .map(columnReferences::get)\n                                     .filter(Objects::nonNull)\n+                                    .flatMap(List::stream)\n                                     .collect(toImmutableList());\n                             for (Expression sortKey : sortKeys) {\n-                                if (!node.getArguments().contains(sortKey) && !fieldIds.contains(columnReferences.get(NodeRef.of(sortKey)))) {\n+                                if (!node.getArguments().contains(sortKey) && !fieldIds.containsAll(columnReferences.get(NodeRef.of(sortKey)))) {", "originalCommit": "20ebd11aa4b37354fc8e9eb142ce7925fe8f569f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1ODcxOQ==", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508058719", "bodyText": "I'm not sure I follow, what is the problem? This is analyzing ORDER BY of aggregation expression, not the whole query.", "author": "prithvip", "createdAt": "2020-10-19T20:59:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1MjA3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyMjAwOA==", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508722008", "bodyText": "I'm not sure I follow, what is the problem? This is analyzing ORDER BY of aggregation expression, not the whole query.\n\nSince you are touching in the ORDER BY clause, I think it's good have the test as I suggested.", "author": "kaikalur", "createdAt": "2020-10-20T17:47:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1MjA3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1MjgwNA==", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508052804", "bodyText": "Add a getter for this instead of duplicating this check multiple places.", "author": "kaikalur", "createdAt": "2020-10-19T20:48:25Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/AggregationAnalyzer.java", "diffHunk": "@@ -516,7 +520,9 @@ protected Boolean visitFieldReference(FieldReference node, Void context)\n                 return true;\n             }\n \n-            FieldId fieldId = requireNonNull(columnReferences.get(NodeRef.<Expression>of(node)), \"No FieldId for FieldReference\");\n+            List<FieldId> fieldIdList = columnReferences.get(NodeRef.<Expression>of(node));\n+            checkState(fieldIdList.size() == 1, \"No FieldId for FieldReference\");\n+            FieldId fieldId = fieldIdList.get(0);", "originalCommit": "20ebd11aa4b37354fc8e9eb142ce7925fe8f569f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MjE5Mg==", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508072192", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-10-19T21:26:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1MjgwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1MzMyOQ==", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508053329", "bodyText": "Shouldn't it be allMatch?", "author": "kaikalur", "createdAt": "2020-10-19T20:49:26Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ScopeReferenceExtractor.java", "diffHunk": "@@ -38,20 +36,18 @@ public static boolean hasReferencesToScope(Node node, Analysis analysis, Scope s\n \n     public static Stream<Expression> getReferencesToScope(Node node, Analysis analysis, Scope scope)\n     {\n-        Map<NodeRef<Expression>, FieldId> columnReferences = analysis.getColumnReferenceFields();\n+        ListMultimap<NodeRef<Expression>, FieldId> columnReferences = analysis.getColumnReferenceFields();\n \n         return AstUtils.preOrder(node)\n                 .filter(Expression.class::isInstance)\n                 .map(Expression.class::cast)\n                 .filter(expression -> columnReferences.containsKey(NodeRef.of(expression)))\n-                .filter(expression -> isReferenceToScope(expression, scope, columnReferences));\n+                .filter(expression -> hasReferenceToScope(expression, scope, columnReferences));\n     }\n \n-    private static boolean isReferenceToScope(Expression node, Scope scope, Map<NodeRef<Expression>, FieldId> columnReferences)\n+    private static boolean hasReferenceToScope(Expression node, Scope scope, ListMultimap<NodeRef<Expression>, FieldId> columnReferences)\n     {\n-        FieldId fieldId = columnReferences.get(NodeRef.of(node));\n-        requireNonNull(fieldId, () -> \"No FieldId for \" + node);\n-        return isFieldFromScope(fieldId, scope);\n+        return columnReferences.get(NodeRef.of(node)).stream().anyMatch(fieldId -> isFieldFromScope(fieldId, scope));", "originalCommit": "20ebd11aa4b37354fc8e9eb142ce7925fe8f569f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1OTYyNg==", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508059626", "bodyText": "This function is finding references to the given scope, so as long as there is some reference (any), we should include it.", "author": "prithvip", "createdAt": "2020-10-19T21:01:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1MzMyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1NDgxMQ==", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508054811", "bodyText": "refactor this into a getter/helper function", "author": "kaikalur", "createdAt": "2020-10-19T20:52:10Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/planner/GroupingOperationRewriter.java", "diffHunk": "@@ -54,13 +54,16 @@ public static Expression rewriteGroupingOperation(GroupingOperation expression,\n         }\n         else {\n             checkState(groupIdVariable.isPresent(), \"groupId symbol is missing\");\n+            List<FieldId> fieldIdList = columnReferenceFields.get(NodeRef.of(expression.getGroupingColumns().get(0)));\n+            checkState(fieldIdList.size() == 1, \"grouping column must reference exactly one field\");\n \n-            RelationId relationId = columnReferenceFields.get(NodeRef.of(expression.getGroupingColumns().get(0))).getRelationId();\n+            RelationId relationId = fieldIdList.get(0).getRelationId();", "originalCommit": "20ebd11aa4b37354fc8e9eb142ce7925fe8f569f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MjA5NQ==", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508072095", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-10-19T21:26:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1NDgxMQ=="}], "type": "inlineReview"}, {"oid": "c3e3304b5ba7b8a2d565fcf809961c9ecbdabee3", "url": "https://github.com/prestodb/presto/commit/c3e3304b5ba7b8a2d565fcf809961c9ecbdabee3", "message": "Fix access control checks for USING clause\n\nThis change fixes a bug where columns referenced in the USING clause of\na join were not checked for column access permissions. Since an\nidentifier in a USING clause refers to multiple columns, the\n``columnReferences`` field in Analysis is changed to a Multimap.", "committedDate": "2020-10-19T21:25:44Z", "type": "forcePushed"}, {"oid": "700a6633a9c9d544e048da8a5333cddb0a40ebba", "url": "https://github.com/prestodb/presto/commit/700a6633a9c9d544e048da8a5333cddb0a40ebba", "message": "Fix access control checks for USING clause\n\nThis change fixes a bug where columns referenced in the USING clause of\na join were not checked for column access permissions. Since an\nidentifier in a USING clause refers to multiple columns, the\n``columnReferences`` field in Analysis is changed to a Multimap.", "committedDate": "2020-10-19T22:01:30Z", "type": "forcePushed"}, {"oid": "252c68fcbd050facf886879a46073b1b4b768d23", "url": "https://github.com/prestodb/presto/commit/252c68fcbd050facf886879a46073b1b4b768d23", "message": "Fix access control checks for USING clause\n\nThis change fixes a bug where columns referenced in the USING clause of\na join were not checked for column access permissions. Since an\nidentifier in a USING clause refers to multiple columns, the\n``columnReferences`` field in Analysis is changed to a Multimap.", "committedDate": "2020-10-19T22:14:38Z", "type": "forcePushed"}, {"oid": "00834b9638fc2bf8eb3c2d061e479a973a833775", "url": "https://github.com/prestodb/presto/commit/00834b9638fc2bf8eb3c2d061e479a973a833775", "message": "Fix access control checks for USING clause\n\nThis change fixes a bug where columns referenced in the USING clause of\na join were not checked for column access permissions. Since an\nidentifier in a USING clause refers to multiple columns, the\n``columnReferences`` field in Analysis is changed to a Multimap.", "committedDate": "2020-10-20T00:32:06Z", "type": "forcePushed"}, {"oid": "12cd933ce63d12ef650775a7229b4884de8a3a10", "url": "https://github.com/prestodb/presto/commit/12cd933ce63d12ef650775a7229b4884de8a3a10", "message": "Fix access control checks for USING clause\n\nThis change fixes a bug where columns referenced in the USING clause of\na join were not checked for column access permissions. Since an\nidentifier in a USING clause refers to multiple columns, the\n``columnReferences`` field in Analysis is changed to a Multimap.", "committedDate": "2020-10-20T07:40:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcxNTcyMQ==", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508715721", "bodyText": "We normally use the most generic type. So use MultiMap here instead.", "author": "rongrong", "createdAt": "2020-10-20T17:37:39Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/AggregationAnalyzer.java", "diffHunk": "@@ -103,7 +104,7 @@\n     // fields and expressions in the group by clause\n     private final Set<FieldId> groupingFields;\n     private final List<Expression> expressions;\n-    private final Map<NodeRef<Expression>, FieldId> columnReferences;\n+    private final ListMultimap<NodeRef<Expression>, FieldId> columnReferences;", "originalCommit": "12cd933ce63d12ef650775a7229b4884de8a3a10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwMzk4Mw==", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508803983", "bodyText": "Ok, changed all the ListMultimap to Multimap.", "author": "prithvip", "createdAt": "2020-10-20T20:03:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcxNTcyMQ=="}], "type": "inlineReview"}, {"oid": "d14d8d42520eda659ad04ce4a2b754e7918cc5f1", "url": "https://github.com/prestodb/presto/commit/d14d8d42520eda659ad04ce4a2b754e7918cc5f1", "message": "Fix access control checks for USING clause\n\nThis change fixes a bug where columns referenced in the USING clause of\na join were not checked for column access permissions. Since an\nidentifier in a USING clause refers to multiple columns, the\n``columnReferences`` field in Analysis is changed to a Multimap.", "committedDate": "2020-10-20T19:55:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0ODk3NA==", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508848974", "bodyText": "Nits: Multimap", "author": "rongrong", "createdAt": "2020-10-20T21:24:42Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analysis.java", "diffHunk": "@@ -83,7 +85,7 @@\n     private final Map<NodeRef<Table>, Query> namedQueries = new LinkedHashMap<>();\n \n     private final Map<NodeRef<Node>, Scope> scopes = new LinkedHashMap<>();\n-    private final Map<NodeRef<Expression>, FieldId> columnReferences = new LinkedHashMap<>();\n+    private final ListMultimap<NodeRef<Expression>, FieldId> columnReferences = ArrayListMultimap.create();", "originalCommit": "d14d8d42520eda659ad04ce4a2b754e7918cc5f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg3MTMzNg==", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508871336", "bodyText": "Fixed", "author": "prithvip", "createdAt": "2020-10-20T22:12:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0ODk3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0OTQ4MA==", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508849480", "bodyText": "Nits: Multimap", "author": "rongrong", "createdAt": "2020-10-20T21:25:46Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analysis.java", "diffHunk": "@@ -480,9 +487,9 @@ public void addFunctionHandles(Map<NodeRef<FunctionCall>, FunctionHandle> infos)\n         return unmodifiableSet(columnReferences.keySet());\n     }\n \n-    public Map<NodeRef<Expression>, FieldId> getColumnReferenceFields()\n+    public ListMultimap<NodeRef<Expression>, FieldId> getColumnReferenceFields()", "originalCommit": "d14d8d42520eda659ad04ce4a2b754e7918cc5f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg3MTM1Mg==", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508871352", "bodyText": "Fixed", "author": "prithvip", "createdAt": "2020-10-20T22:12:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg0OTQ4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MDA1NA==", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508850054", "bodyText": "It makes more sense to use \"column reference\" rather than \"field reference\". Or maybe checkAndGetColumnReferenceField.", "author": "rongrong", "createdAt": "2020-10-20T21:26:51Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionTreeUtils.java", "diffHunk": "@@ -169,4 +171,12 @@ private static boolean isEnumLiteral(DereferenceExpression node, Type nodeType)\n         Object enumValue = enumType.getEnumMap().get(enumKey);\n         return enumValue instanceof String ? Optional.of(utf8Slice((String) enumValue)) : Optional.of(enumValue);\n     }\n+\n+    public static FieldId checkAndGetFieldReferenceForExpression(Expression expression, Multimap<NodeRef<Expression>, FieldId> columnReferences)", "originalCommit": "d14d8d42520eda659ad04ce4a2b754e7918cc5f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg3MTM4MA==", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508871380", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-10-20T22:12:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MDA1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MjA1OA==", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508852058", "bodyText": "analysis.getColumnReferenceFields().get(NodeRef.of(expression))\n    .forEach(context:: addFieldIdToExplore);", "author": "rongrong", "createdAt": "2020-10-20T21:30:34Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/analyzer/UtilizedColumnsAnalyzer.java", "diffHunk": "@@ -429,7 +441,9 @@ private void handleRelation(Relation relation, Context context, Relation... chil\n         private void handleExpression(Expression expression, Context context)\n         {\n             if (analysis.getColumnReferenceFields().containsKey(NodeRef.of(expression))) {\n-                context.addFieldIdToExplore(analysis.getColumnReferenceFields().get(NodeRef.of(expression)));\n+                for (FieldId fieldId : analysis.getColumnReferenceFields().get(NodeRef.of(expression))) {", "originalCommit": "d14d8d42520eda659ad04ce4a2b754e7918cc5f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg3MTQwNA==", "url": "https://github.com/prestodb/presto/pull/15333#discussion_r508871404", "bodyText": "Done", "author": "prithvip", "createdAt": "2020-10-20T22:12:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MjA1OA=="}], "type": "inlineReview"}, {"oid": "2f270f078f067f0e6432f29356558a089cc4329e", "url": "https://github.com/prestodb/presto/commit/2f270f078f067f0e6432f29356558a089cc4329e", "message": "Fix access control checks for USING clause\n\nThis change fixes a bug where columns referenced in the USING clause of\na join were not checked for column access permissions. Since an\nidentifier in a USING clause refers to multiple columns, the\n``columnReferences`` field in Analysis is changed to a Multimap.", "committedDate": "2020-10-20T22:11:39Z", "type": "commit"}, {"oid": "2f270f078f067f0e6432f29356558a089cc4329e", "url": "https://github.com/prestodb/presto/commit/2f270f078f067f0e6432f29356558a089cc4329e", "message": "Fix access control checks for USING clause\n\nThis change fixes a bug where columns referenced in the USING clause of\na join were not checked for column access permissions. Since an\nidentifier in a USING clause refers to multiple columns, the\n``columnReferences`` field in Analysis is changed to a Multimap.", "committedDate": "2020-10-20T22:11:39Z", "type": "forcePushed"}]}