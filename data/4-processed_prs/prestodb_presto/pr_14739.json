{"pr_number": 14739, "pr_title": "Add a limit on total number of bytes read from storage in table scan", "pr_createdAt": "2020-06-28T04:40:43Z", "pr_url": "https://github.com/prestodb/presto/pull/14739", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2NTc5OQ==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r446965799", "bodyText": "getQueryMaxScanPhysicalBytes(session) returns a value that can be used as is without further checking.\nThis code ensures that this property defaults to what's specified in config:\n                dataSizeProperty(\n                        QUERY_MAX_SCAN_PHYSICAL_BYTES,\n                        \"Maximum scan physical bytes of a query\",\n                        queryManagerConfig.getQueryMaxScanPhysicalBytes(),\n                        false),\n\nand this code defines the default value that is used if nothing is specified in config file:\nprivate DataSize queryMaxScanPhysicalBytes = DataSize.succinctDataSize(1, PETABYTE);\n\nHence, the code can be simplified like this:\n        for (QueryExecution query : queryTracker.getAllQueries()) {\n            DataSize limit = getQueryMaxScanPhysicalBytes(query.getSession());\n            DataSize scan = query.getQueryInfo().getQueryStats().getRawInputDataSize();\n            if (scan.compareTo(limit) >= 0) {\n                query.fail(new ExceededScanLimitException(limit));\n            }\n        }", "author": "mbasmanova", "createdAt": "2020-06-29T13:21:14Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java", "diffHunk": "@@ -312,4 +326,22 @@ private void enforceCpuLimits()\n             }\n         }\n     }\n+\n+    /**\n+     * Enforce query scan physical bytes limits\n+     */\n+    private void enforceScanLimits()\n+    {\n+        for (QueryExecution query : queryTracker.getAllQueries()) {\n+            DataSize limitOpt = Optional.ofNullable(getQueryMaxScanPhysicalBytes(query.getSession()))", "originalCommit": "0b8fd9a9e8219a758ed73ca0f5cf857fd59678cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgwNjY5Mw==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r448806693", "bodyText": "Many thanks for the proposal. I have made another version of how to implement this limit based on your suggestion. The new version is now includes a method defines in QueryExecution to collect scanned data size which is implemented in SqlQueryExecution to collect finalQueryInfo's rawInputDataSize. Please help review again.", "author": "fgwang7w", "createdAt": "2020-07-02T07:37:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2NTc5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2NjY3OQ==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r446966679", "bodyText": "Let's clarify what does the limit applies to? E.g. whether it applies to amount of data read from storage before or after compression?", "author": "mbasmanova", "createdAt": "2020-06-29T13:22:29Z", "path": "presto-main/src/main/java/com/facebook/presto/ExceededScanLimitException.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto;\n+\n+import com.facebook.presto.spi.PrestoException;\n+import io.airlift.units.DataSize;\n+\n+import static com.facebook.presto.spi.StandardErrorCode.EXCEEDED_SCAN_LIMIT;\n+\n+public class ExceededScanLimitException\n+        extends PrestoException\n+{\n+    public ExceededScanLimitException(DataSize limit)\n+    {\n+        super(EXCEEDED_SCAN_LIMIT, \"Exceeded Scan limit of \" + limit.toString());", "originalCommit": "0b8fd9a9e8219a758ed73ca0f5cf857fd59678cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgwNDE2MA==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r448804160", "bodyText": "This is the amount of consumed input bytes read from storage via QueryInfo's getQueryStats().getRawInputDataSize()", "author": "fgwang7w", "createdAt": "2020-07-02T07:32:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2NjY3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEzNzM5Nw==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r449137397", "bodyText": "Concurring @mbasmanova's comment - we should be clear about what scan limit has been exceeded. I will recommend EXCEEDED_SCAN_RAW_BYTES_READ_LIMIT. The message can also be made more explicit", "author": "mayankgarg1990", "createdAt": "2020-07-02T16:32:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2NjY3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0NzE4Mw==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r460347183", "bodyText": "the message has been fixed to indicate the scan bytes limit has exceeded for this exception", "author": "fgwang7w", "createdAt": "2020-07-25T01:26:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2NjY3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2NzMxNA==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r446967314", "bodyText": "Let's clarify. Is this before or after compression? Before or after filtering? I assume it is after compression but before filtering.", "author": "mbasmanova", "createdAt": "2020-06-29T13:23:23Z", "path": "presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java", "diffHunk": "@@ -423,6 +425,11 @@ public SystemSessionProperties(\n                         \"Use resources which are not guaranteed to be available to the query\",\n                         false,\n                         false),\n+                dataSizeProperty(\n+                        QUERY_MAX_SCAN_PHYSICAL_BYTES,\n+                        \"Maximum scan physical bytes of a query\",", "originalCommit": "0b8fd9a9e8219a758ed73ca0f5cf857fd59678cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgwMzE2Mw==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r448803163", "bodyText": "Thank you Maria, this is a good point. So to clarify the confusion how the scan size is measured, I have implicitly implemented the SqlQueryExecution.getScannedBytes method to extract the query scanned size from QueryInfo's rawInputDataSize stats which is the consumed input bytes, and yes it should be the actual data size before filtering.", "author": "fgwang7w", "createdAt": "2020-07-02T07:30:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2NzMxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEzODE4Mw==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r449138183", "bodyText": "Should we just say QUERY_MAX_SCAN_RAW_INPUT_BYTES that way it matches the public stat that we publish and it is easy for people to understand which metric did they exceed? @mbasmanova thoughts?", "author": "mayankgarg1990", "createdAt": "2020-07-02T16:33:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2NzMxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMwMjM4Mg==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r447302382", "bodyText": "Is QueryStats::rawInputDataSize equivalent to scanPhysicalBytes?  does reading from materialized intermediate table included? cc @arhimondr", "author": "viczhang861", "createdAt": "2020-06-29T22:47:31Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "diffHunk": "@@ -66,6 +69,8 @@\n     private Duration queryMaxExecutionTime = new Duration(100, TimeUnit.DAYS);\n     private Duration queryMaxCpuTime = new Duration(1_000_000_000, TimeUnit.DAYS);\n \n+    private DataSize queryMaxScanPhysicalBytes = DataSize.succinctDataSize(1, PETABYTE);", "originalCommit": "0b8fd9a9e8219a758ed73ca0f5cf857fd59678cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxODE5Mw==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r460418193", "bodyText": "Same comment as in SystemSessionProperties - lets use the same name as the actual metric - queryMaxRawInputBytes. In accordance with that lets change the config name as well - query.max-raw-input-bytes.", "author": "mayankgarg1990", "createdAt": "2020-07-25T16:00:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMwMjM4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMwMjY5NA==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r447302694", "bodyText": "Remember to remove this.", "author": "viczhang861", "createdAt": "2020-06-29T22:48:22Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java", "diffHunk": "@@ -70,6 +74,8 @@\n \n     private final Duration maxQueryCpuTime;\n \n+    private final Optional<DataSize> maxQueryScanPhysicalBytes;", "originalCommit": "0b8fd9a9e8219a758ed73ca0f5cf857fd59678cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgwODcyNw==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r448808727", "bodyText": "consider it done, thanks", "author": "fgwang7w", "createdAt": "2020-07-02T07:41:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMwMjY5NA=="}], "type": "inlineReview"}, {"oid": "ebe957c3885b44e0ab1a2cba02d9ec86db94bc37", "url": "https://github.com/prestodb/presto/commit/ebe957c3885b44e0ab1a2cba02d9ec86db94bc37", "message": "to #14701: collect scanned size from query stats", "committedDate": "2020-07-02T08:24:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3MjY3Mw==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r448972673", "bodyText": "Given that there is only 1 implementation, any reason to go for a default implementation?", "author": "mayankgarg1990", "createdAt": "2020-07-02T12:42:51Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryExecution.java", "diffHunk": "@@ -53,6 +53,11 @@\n \n     QueryInfo getQueryInfo();\n \n+    default DataSize getScannedBytes()\n+    {\n+        return new DataSize(0, DataSize.Unit.BYTE);\n+    }\n+", "originalCommit": "1949ae3d7718a55bf865074aaee6ab95071c2e12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIyNDIzNA==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r449224234", "bodyText": "The thought here is that we are implementing limit for scanned bytes from raw input's perspective, eventually we can add more knobs to control the scanned bytes for output data size, post-compressed size, etc. the default scannedBytes gives a general guideline for all implementations with datasize=0b to start with", "author": "fgwang7w", "createdAt": "2020-07-02T19:25:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3MjY3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzNTI4NA==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r449235284", "bodyText": "My apologies - your point is not very clear to me. scannedBytes for output data size - should we just not call it getOutputDataBytes. I am not sure what kind of guidance are we offering when we start with datasize=0b", "author": "mayankgarg1990", "createdAt": "2020-07-02T19:52:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3MjY3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc5MzA2Ng==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r458793066", "bodyText": "I was reading through this again and have the same question.  Why make this a default, why not just move this default method to DataDefinitionExecution?", "author": "tdcmeehan", "createdAt": "2020-07-22T13:31:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3MjY3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1MTQwMw==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r460351403", "bodyText": "Sorry, missed this comment. yes agree with you all, so instead of going to default value, I will just remove this definition and simply take session value and config value into account. If we want to implement further based on scannedbyte config like scan limit for different connectors, we can add it back to set a bar as a default scan byte limit for general purpose, but for now I will remove this block of code", "author": "fgwang7w", "createdAt": "2020-07-25T02:08:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3MjY3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0MTIzMw==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r449141233", "bodyText": "I can see a lot of issues with this logic:\n\nWe are reading finalQueryInfo which is published only when the query is finished - can you test and see if this number is actually published when the query is running ?\nFor every stage that is a scan stage, we take the whole query's bytes read and add it. So if there are 2 scan stages - in that case, you will just return 2 * bytesreadbyquery.\ngetAllStages does a DFS traversal every time - and given that it will be called in a loop, this might be an expensive operation and we don't really care about the ordering here.\n\nIn my opinion - we should do something similar to the existing logic that exists for getTotalCpuTime. That will help ensure that the logics are similar and it is easy to change them together if we ever decide to head that path.", "author": "mayankgarg1990", "createdAt": "2020-07-02T16:38:59Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java", "diffHunk": "@@ -752,6 +753,23 @@ public void setUpdateType(String updateType)\n         this.updateType.set(updateType);\n     }\n \n+    public long getScannedBytes(StageInfo rootStage)\n+    {\n+        long rawInputDataSize = 0;\n+        for (StageInfo stageInfo : getAllStages(Optional.of(rootStage))) {\n+            if (stageInfo.getPlan().isPresent()) {\n+                PlanFragment plan = stageInfo.getPlan().get();\n+                if (!plan.getTableScanSchedulingOrder().isEmpty()) {\n+                    Optional<QueryInfo> queryInfo = finalQueryInfo.get();\n+                    if (queryInfo.isPresent()) {\n+                        QueryStats queryStats = queryInfo.get().getQueryStats();\n+                        rawInputDataSize += queryStats.getRawInputDataSize().toBytes();\n+                    }\n+                }\n+            }\n+        }", "originalCommit": "1949ae3d7718a55bf865074aaee6ab95071c2e12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzNDQyMQ==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r449234421", "bodyText": "ok so this is newly implemented, the original proposal was a simple approach which is to obtain the scanned data size from queryInfo::queryStats if the final resolution is to do something similiar to the existing logic with getTotalCpuTime.\nDataSize scan = query.getQueryInfo().getQueryStats().getRawInputDataSize();\n@mbasmanova what's your suggestion on this one?", "author": "fgwang7w", "createdAt": "2020-07-02T19:50:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0MTIzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1MDc0NA==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r449250744", "bodyText": "query.getQueryInfo().getQueryStats() is a sort of expensive method since it aggregates all the stats and not just bytes read. We should keep this data collection as light as possible in my opinion.", "author": "mayankgarg1990", "createdAt": "2020-07-02T20:28:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0MTIzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM2NDEyOA==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r450364128", "bodyText": "Agree with @mayankgarg1990 -- this can be made to be less expensive and consistent with how we calculate CPU time.", "author": "tdcmeehan", "createdAt": "2020-07-06T17:09:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0MTIzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM2OTY4OQ==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r450369689", "bodyText": "thank you @mayankgarg1990 @tdcmeehan for the comment, will revise this code accordingly to align with general data collection logic", "author": "fgwang7w", "createdAt": "2020-07-06T17:20:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0MTIzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc5MjI4NA==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r458792284", "bodyText": "Were these comments addressed?", "author": "tdcmeehan", "createdAt": "2020-07-22T13:30:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0MTIzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0OTI2Ng==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r460349266", "bodyText": "yes this code block has been removed as to make it simple and similar to how cpu limits enforcement is handled", "author": "fgwang7w", "createdAt": "2020-07-25T01:46:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0MTIzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0MTUzMw==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r449141533", "bodyText": "nit: remove", "author": "mayankgarg1990", "createdAt": "2020-07-02T16:39:30Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java", "diffHunk": "@@ -312,4 +322,19 @@ private void enforceCpuLimits()\n             }\n         }\n     }\n+\n+    /**\n+     * Enforce query scan physical bytes limits\n+     */\n+    private void enforceScanLimits()\n+    {\n+        for (QueryExecution query : queryTracker.getAllQueries()) {\n+            DataSize limit = getQueryMaxScanPhysicalBytes(query.getSession());\n+            // DataSize scan = query.getQueryInfo().getQueryStats().getRawInputDataSize();", "originalCommit": "1949ae3d7718a55bf865074aaee6ab95071c2e12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIyNTgyMw==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r449225823", "bodyText": "done", "author": "fgwang7w", "createdAt": "2020-07-02T19:29:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0MTUzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0MjI0NA==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r449142244", "bodyText": "Over here we are just using the session property - which a user can override. Similar to how this is being done for enforceCpuLimits where in we take the min of the cluster setting and session property and enforce based on that.", "author": "mayankgarg1990", "createdAt": "2020-07-02T16:40:48Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java", "diffHunk": "@@ -312,4 +322,19 @@ private void enforceCpuLimits()\n             }\n         }\n     }\n+\n+    /**\n+     * Enforce query scan physical bytes limits\n+     */\n+    private void enforceScanLimits()\n+    {\n+        for (QueryExecution query : queryTracker.getAllQueries()) {\n+            DataSize limit = getQueryMaxScanPhysicalBytes(query.getSession());", "originalCommit": "1949ae3d7718a55bf865074aaee6ab95071c2e12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzMjI3NA==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r449232274", "bodyText": "right that's the idea, getQueryMaxScanPhysicalBytes obtains the value set from system property so that it can be compared with the actual scanned value", "author": "fgwang7w", "createdAt": "2020-07-02T19:44:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0MjI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI1MzYwNg==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r449253606", "bodyText": "Properties defined in SystemSessionProperties are properties that can be overridden by users by saying:\nSET SESSION query_max_scan_physical_bytes=100000000000000000;\nSELECT * FROM very_large_table;\n\nIf as a system administrator I want to cap the amountt of data a query can read - then this doesn't work since any user can override it.\nIf you check enforceCpuLimit, there we do:\nDuration sessionLimit = getQueryMaxCpuTime(query.getSession()); // value from SystemSessionProperties\nDuration limit = Ordering.natural().min(maxQueryCpuTime, sessionLimit);  // maxQueryCpuTime is from QueryManagerConfig\n\nAnd hence in this example - a user can lower their allowed limit, but not go beyond what the system administrator has set as the cluster setting.", "author": "mayankgarg1990", "createdAt": "2020-07-02T20:35:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0MjI0NA=="}], "type": "inlineReview"}, {"oid": "8f3188da1f4351fc1f94ba30c91de280b8f3875c", "url": "https://github.com/prestodb/presto/commit/8f3188da1f4351fc1f94ba30c91de280b8f3875c", "message": "to #14701: Support query level scan bytes limits", "committedDate": "2020-07-02T19:12:52Z", "type": "forcePushed"}, {"oid": "0bb45275a35341b80d17f20d4abd466fda60f796", "url": "https://github.com/prestodb/presto/commit/0bb45275a35341b80d17f20d4abd466fda60f796", "message": "to #14701: Support query level scan bytes limits", "committedDate": "2020-07-02T19:15:05Z", "type": "forcePushed"}, {"oid": "d2d5b4ebe988e4385b145e567c35fdd4c8c4de91", "url": "https://github.com/prestodb/presto/commit/d2d5b4ebe988e4385b145e567c35fdd4c8c4de91", "message": "to #14701: Support query level scan bytes limits", "committedDate": "2020-07-02T20:12:39Z", "type": "forcePushed"}, {"oid": "c733355b682d22751867203b7c6b8e2f6fd63b31", "url": "https://github.com/prestodb/presto/commit/c733355b682d22751867203b7c6b8e2f6fd63b31", "message": "Add a limit on total number of bytes read from storage in table scan\n\nAdd query.max-scan-physical-bytes configuration and query_max_scan_physical_bytes\nsession properties to limit the total number of bytes reads from storage during table scan.\nThe default limit is 1PB.", "committedDate": "2020-07-21T06:24:50Z", "type": "forcePushed"}, {"oid": "3196c11c670f50055a21aa57cc14b840ec04aa96", "url": "https://github.com/prestodb/presto/commit/3196c11c670f50055a21aa57cc14b840ec04aa96", "message": "Add a limit on total number of bytes read from storage in table scan\n\nAdd query.max-scan-physical-bytes configuration and query_max_scan_physical_bytes\nsession properties to limit the total number of bytes reads from storage during table scan.\nThe default limit is 1PB.", "committedDate": "2020-07-21T19:39:15Z", "type": "forcePushed"}, {"oid": "2f7fffb64ef18e48fa3946de94d4e817602b561f", "url": "https://github.com/prestodb/presto/commit/2f7fffb64ef18e48fa3946de94d4e817602b561f", "message": "Add a limit on total number of bytes read from storage in table scan\n\nAdd query.max-scan-physical-bytes configuration and query_max_scan_physical_bytes\nsession properties to limit the total number of bytes reads from storage during table scan.\nThe default limit is 1PB.", "committedDate": "2020-07-21T21:32:45Z", "type": "forcePushed"}, {"oid": "e714b67d68ff68b39a131c283013a1c634b79ea8", "url": "https://github.com/prestodb/presto/commit/e714b67d68ff68b39a131c283013a1c634b79ea8", "message": "Add a limit on total number of bytes read from storage in table scan\n\nAdd query.max-scan-physical-bytes configuration and query_max_scan_physical_bytes\nsession properties to limit the total number of bytes reads from storage during table scan.\nThe default limit is 1PB.", "committedDate": "2020-07-25T02:03:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxNzg1MA==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r460417850", "bodyText": "Putting a new comment since the old comment was marked as resolved. Lets match this with the actual metric (rawInputBytes) and the exception name - QUERY_MAX_SCAN_RAW_INPUT_BYTES", "author": "mayankgarg1990", "createdAt": "2020-07-25T15:56:43Z", "path": "presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java", "diffHunk": "@@ -424,6 +426,11 @@ public SystemSessionProperties(\n                         \"Use resources which are not guaranteed to be available to the query\",\n                         false,\n                         false),\n+                dataSizeProperty(\n+                        QUERY_MAX_SCAN_PHYSICAL_BYTES,", "originalCommit": "e714b67d68ff68b39a131c283013a1c634b79ea8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3ODg0Mg==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r460478842", "bodyText": "sure actually I would synchronize all method call names and varilables to QueryMaxScanRawInputBytes to map with rawInputBytes", "author": "fgwang7w", "createdAt": "2020-07-26T05:01:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxNzg1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxOTI3NQ==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r460419275", "bodyText": "these 2 are not being used - remove these", "author": "mayankgarg1990", "createdAt": "2020-07-25T16:12:29Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java", "diffHunk": "@@ -312,4 +324,21 @@ private void enforceCpuLimits()\n             }\n         }\n     }\n+\n+    /**\n+     * Enforce query scan physical bytes limits\n+     */\n+    private void enforceScanLimits()\n+    {\n+        for (QueryExecution query : queryTracker.getAllQueries()) {\n+            BasicQueryStats basicQueryStats = query.getBasicQueryInfo().getQueryStats();\n+            QueryStats queryStats = query.getQueryInfo().getQueryStats();", "originalCommit": "e714b67d68ff68b39a131c283013a1c634b79ea8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3OTA3NQ==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r460479075", "bodyText": "sure, it's removed", "author": "fgwang7w", "createdAt": "2020-07-26T05:04:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQxOTI3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMTg4OQ==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r460421889", "bodyText": "This is still a bit expensive since getting querystats involves -> for all stages, for all tasks, for all metrics.\nThe way CPU does it is still cheaper -> all stages, all tasks, just the cpu - so we can do something similar here and make it even cheaper -\nWe can follow a similar flow here\nSqlQueryManager -> SqlQuerySchedulerInterface#getTotalCpuTime -> SqlStageExecution#getTotalCpuTime\nand just sum up the bytes involved.", "author": "mayankgarg1990", "createdAt": "2020-07-25T16:40:37Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java", "diffHunk": "@@ -312,4 +324,21 @@ private void enforceCpuLimits()\n             }\n         }\n     }\n+\n+    /**\n+     * Enforce query scan physical bytes limits\n+     */\n+    private void enforceScanLimits()\n+    {\n+        for (QueryExecution query : queryTracker.getAllQueries()) {\n+            BasicQueryStats basicQueryStats = query.getBasicQueryInfo().getQueryStats();\n+            QueryStats queryStats = query.getQueryInfo().getQueryStats();\n+            DataSize scan = query.getBasicQueryInfo().getQueryStats().getRawInputDataSize();", "originalCommit": "e714b67d68ff68b39a131c283013a1c634b79ea8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ4MDMzOQ==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r460480339", "bodyText": "I'm not certain if your approach about summing up bytes from SqlStageExecution#getTotalScanBytes is accurate... it's always the best practice to inherit scanned byte size from existing querystats to ensure the result is correct. I suggest we maintain current implementation with SqlQueryManager:getBasicQueryInfo-> BasicQueryStats:getQueryStats . How much cheaper are we suggesting to reduce if we want to bypass the existing logic with a risk that we might have a false result?\nMy option is that rawInputDataSize should be the only reliable source of truth when setting against with the hard scan limit.", "author": "fgwang7w", "createdAt": "2020-07-26T05:22:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMTg4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAwODkxNA==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r461008914", "bodyText": "I don't agree that BasicQueryStats:getQueryStats is the only trusted source. As you can see, we are already doing this for total cpu ms and memory limits so I don't see why raw input bytes will be any different here. Again, my only concern is that this is a single thread already doing cpu and memory enforcements and we should keep it as light weight as possible and by keeping this trend, we will ensure that the new entries that are added also follow this lighter weight approach.", "author": "mayankgarg1990", "createdAt": "2020-07-27T16:18:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMTg4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEwNzQ2OA==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r462107468", "bodyText": "understood, thank you! I have implemented your approach, I think it is safer and cheaper to acquire actual number via SqlQuerySchedulerInterface::getRawInputDataSize -> QueryExecution::getRawInputDataSize, and sum up all task's stats via SqlStageExecution::getRawInputDataSize. Please review the revised commit again, many thanks!", "author": "fgwang7w", "createdAt": "2020-07-29T07:52:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQyMTg4OQ=="}], "type": "inlineReview"}, {"oid": "711df3e6a9a7cb47564b67341d97ef5761fa7fe8", "url": "https://github.com/prestodb/presto/commit/711df3e6a9a7cb47564b67341d97ef5761fa7fe8", "message": "Add a limit on total number of bytes read from storage in table scan\n\nAdd query.max-scan-physical-bytes configuration and query_max_scan_physical_bytes\nsession properties to limit the total number of bytes reads from storage during table scan.\nThe default limit is 1PB.", "committedDate": "2020-07-26T05:23:49Z", "type": "forcePushed"}, {"oid": "0d8cff09d81e0b3697a2f5895482707c8cb49f27", "url": "https://github.com/prestodb/presto/commit/0d8cff09d81e0b3697a2f5895482707c8cb49f27", "message": "Add a limit on total number of bytes read from storage in table scan\n\nAdd query.max-scan-physical-bytes configuration and query_max_scan_physical_bytes\nsession properties to limit the total number of bytes reads from storage during table scan.\nThe default limit is 1PB.", "committedDate": "2020-07-26T06:23:16Z", "type": "forcePushed"}, {"oid": "7837b6b1f5179afb8be2f09ebf34d61aee45f3be", "url": "https://github.com/prestodb/presto/commit/7837b6b1f5179afb8be2f09ebf34d61aee45f3be", "message": "Add a limit on total number of bytes read from storage in table scan\n\nAdd query.max-scan-physical-bytes configuration and query_max_scan_physical_bytes\nsession properties to limit the total number of bytes reads from storage during table scan.\nThe default limit is 1PB.", "committedDate": "2020-07-29T07:45:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxODgyNw==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r462418827", "bodyText": "nit - lets rename this as rawInputSize", "author": "mayankgarg1990", "createdAt": "2020-07-29T16:11:22Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java", "diffHunk": "@@ -312,4 +323,19 @@ private void enforceCpuLimits()\n             }\n         }\n     }\n+\n+    /**\n+     * Enforce query scan physical bytes limits\n+     */\n+    private void enforceScanLimits()\n+    {\n+        for (QueryExecution query : queryTracker.getAllQueries()) {\n+            DataSize scan = query.getRawInputDataSize();", "originalCommit": "7837b6b1f5179afb8be2f09ebf34d61aee45f3be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NDI5NQ==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r462484295", "bodyText": "fixed, thanks", "author": "fgwang7w", "createdAt": "2020-07-29T17:58:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxODgyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQyMjg0NQ==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r462422845", "bodyText": "Lets add this check at the top to ensure that we are only considering table scan nodes -\nif (planFragment.getTableScanSchedulingOrder().isEmpty()) {\n    return new DataSize(0, BYTE);\n}", "author": "mayankgarg1990", "createdAt": "2020-07-29T16:17:24Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/SqlStageExecution.java", "diffHunk": "@@ -333,6 +334,14 @@ public synchronized Duration getTotalCpuTime()\n         return new Duration(millis, TimeUnit.MILLISECONDS);\n     }\n \n+    public synchronized DataSize getRawInputDataSize()\n+    {\n+        long datasize = getAllTasks().stream()", "originalCommit": "7837b6b1f5179afb8be2f09ebf34d61aee45f3be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5MDI4MA==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r462490280", "bodyText": "agree, we need to bypass when source is empty, fixed", "author": "fgwang7w", "createdAt": "2020-07-29T18:08:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQyMjg0NQ=="}], "type": "inlineReview"}, {"oid": "e4279dc5593d2d8e1a745059458ba4417bc10eef", "url": "https://github.com/prestodb/presto/commit/e4279dc5593d2d8e1a745059458ba4417bc10eef", "message": "Add a limit on total number of bytes read from storage in table scan\n\nAdd query.max-scan-physical-bytes configuration and query_max_scan_physical_bytes\nsession properties to limit the total number of bytes reads from storage during table scan.\nThe default limit is 1PB.", "committedDate": "2020-07-29T18:06:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwNTIyMw==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r462505223", "bodyText": "Lets set the default to a higher number to avoid unexpected failures when people deploy this new version. Every sys admin should be able to set a reasonable value in their configurations. How about an exabyte (1000, PETABYTE)?", "author": "mayankgarg1990", "createdAt": "2020-07-29T18:34:08Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java", "diffHunk": "@@ -66,6 +69,8 @@\n     private Duration queryMaxExecutionTime = new Duration(100, TimeUnit.DAYS);\n     private Duration queryMaxCpuTime = new Duration(1_000_000_000, TimeUnit.DAYS);\n \n+    private DataSize queryMaxScanRawInputBytes = DataSize.succinctDataSize(1, PETABYTE);", "originalCommit": "e4279dc5593d2d8e1a745059458ba4417bc10eef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNDkzNA==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r462514934", "bodyText": "sure, this field is adjustable anytime by DBAs. Default is revised to 1000PB.", "author": "fgwang7w", "createdAt": "2020-07-29T18:51:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwNTIyMw=="}], "type": "inlineReview"}, {"oid": "fce6be09e7ce26be4f24d4a44411905597b0a3cd", "url": "https://github.com/prestodb/presto/commit/fce6be09e7ce26be4f24d4a44411905597b0a3cd", "message": "Add a limit on total number of bytes read from storage in table scan\n\nAdd query.max-scan-physical-bytes configuration and query_max_scan_physical_bytes\nsession properties to limit the total number of bytes reads from storage during table scan.\nThe default limit is 1PB.", "committedDate": "2020-07-29T18:48:43Z", "type": "forcePushed"}, {"oid": "0c712cb2388bf21af26703e90f5b4e011c8a0b49", "url": "https://github.com/prestodb/presto/commit/0c712cb2388bf21af26703e90f5b4e011c8a0b49", "message": "Add a limit on total number of bytes read from storage in table scan\n\nAdd query.max-scan-physical-bytes configuration and query_max_scan_physical_bytes\nsession properties to limit the total number of bytes reads from storage during table scan.\nThe default limit is 1PB.", "committedDate": "2020-07-29T18:50:27Z", "type": "commit"}, {"oid": "0c712cb2388bf21af26703e90f5b4e011c8a0b49", "url": "https://github.com/prestodb/presto/commit/0c712cb2388bf21af26703e90f5b4e011c8a0b49", "message": "Add a limit on total number of bytes read from storage in table scan\n\nAdd query.max-scan-physical-bytes configuration and query_max_scan_physical_bytes\nsession properties to limit the total number of bytes reads from storage during table scan.\nThe default limit is 1PB.", "committedDate": "2020-07-29T18:50:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAyNDkxNQ==", "url": "https://github.com/prestodb/presto/pull/14739#discussion_r463024915", "bodyText": "Nice", "author": "tdcmeehan", "createdAt": "2020-07-30T14:10:58Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/session/PropertyMetadata.java", "diffHunk": "@@ -199,4 +200,17 @@ public Object encode(T value)\n                 String.class::cast,\n                 object -> object);\n     }\n+\n+    public static PropertyMetadata<DataSize> dataSizeProperty(String name, String description, DataSize defaultValue, boolean hidden)", "originalCommit": "0c712cb2388bf21af26703e90f5b4e011c8a0b49", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}