{"pr_number": 14341, "pr_title": "Best effort push down distinct count to pinot", "pr_createdAt": "2020-04-05T08:30:24Z", "pr_url": "https://github.com/prestodb/presto/pull/14341", "timeline": [{"oid": "29ec42687b4d761eeb264c8aef40f350cadaff3a", "url": "https://github.com/prestodb/presto/commit/29ec42687b4d761eeb264c8aef40f350cadaff3a", "message": "Best effort push down distinct count to pinot", "committedDate": "2020-04-05T08:57:20Z", "type": "forcePushed"}, {"oid": "e3f1e1305d74af0af0d70c821d5a5ce9776a03c9", "url": "https://github.com/prestodb/presto/commit/e3f1e1305d74af0af0d70c821d5a5ce9776a03c9", "message": "Best effort to push down distinct count to pinot.", "committedDate": "2020-04-05T10:17:59Z", "type": "forcePushed"}, {"oid": "e63f110cf0e2fe0d1a65ec9d6676c120e1e66433", "url": "https://github.com/prestodb/presto/commit/e63f110cf0e2fe0d1a65ec9d6676c120e1e66433", "message": "Best effort to push down distinct count function to pinot.", "committedDate": "2020-04-05T10:30:53Z", "type": "forcePushed"}, {"oid": "05770437addd3244f49dc7061848cdf19b886459", "url": "https://github.com/prestodb/presto/commit/05770437addd3244f49dc7061848cdf19b886459", "message": "Best effort to push down distinct count function to pinot", "committedDate": "2020-04-05T21:59:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MTc2Mg==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405191762", "bodyText": "Will this message show the agg mask too or reflect that we have a distinct operation ?", "author": "agrawaldevesh", "createdAt": "2020-04-08T00:32:38Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -147,10 +154,25 @@ public ExpressionType getExpressionType()\n             if (agg != null) {\n                 if (agg.getFilter().isPresent()\n                         || agg.isDistinct()\n-                        || agg.getOrderBy().isPresent()\n-                        || agg.getMask().isPresent()) {\n+                        || agg.getOrderBy().isPresent()) {\n+                    throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), \"Unsupported aggregation node \" + aggregationNode);\n+                }\n+                if (agg.getMask().isPresent()) {\n+                    /**\n+                     * This if-block handles the case of pushing down distinct count as one of the aggregation expression along with other aggregation functions.\n+                     * E.g. `SELECT count(distinct COL_A), sum(COL_B) FROM (SELECT COL_A, COL_B FROM myTable)` to Pinot as `SELECT distinctCount(COL_A), sum(COL_B) FROM myTable`\n+                     *\n+                     */\n+                    if (agg.getCall().getDisplayName().equalsIgnoreCase(COUNT_FUNCTION_NAME) && agg.getMask().get().getName().equalsIgnoreCase(agg.getArguments().get(0) + DISTINCT_MASK)) {\n+                        nodeBuilder.add(new AggregationFunctionColumnNode(outputColumn, new CallExpression(DISTINCT_COUNT_FUNCTION_NAME, agg.getCall().getFunctionHandle(), agg.getCall().getType(), agg.getCall().getArguments())));\n+                        continue;\n+                    }\n+                    // Pinot doesn't support push down aggregation functions other than count on top of distinct function.\n                     throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), \"Unsupported aggregation node \" + aggregationNode);", "originalCommit": "05770437addd3244f49dc7061848cdf19b886459", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5ODMxNQ==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405198315", "bodyText": "Both. We only handle distinct mask + count function, which means it will throw exception on  sum(distinct a) or count with other masks", "author": "xiangfu0", "createdAt": "2020-04-08T00:57:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MTc2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MjIyMw==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405192223", "bodyText": "I am wondering if this comment can be simplified to saying that: This block handles the case when a distinct aggregation is present in addition to another aggregation function. And the example need not contain a subquery ?", "author": "agrawaldevesh", "createdAt": "2020-04-08T00:34:14Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -147,10 +154,25 @@ public ExpressionType getExpressionType()\n             if (agg != null) {\n                 if (agg.getFilter().isPresent()\n                         || agg.isDistinct()\n-                        || agg.getOrderBy().isPresent()\n-                        || agg.getMask().isPresent()) {\n+                        || agg.getOrderBy().isPresent()) {\n+                    throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), \"Unsupported aggregation node \" + aggregationNode);\n+                }\n+                if (agg.getMask().isPresent()) {\n+                    /**", "originalCommit": "05770437addd3244f49dc7061848cdf19b886459", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5ODU2MQ==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405198561", "bodyText": "will do", "author": "xiangfu0", "createdAt": "2020-04-08T00:58:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MjIyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MjY2Mw==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405192663", "bodyText": "remove commented code ?", "author": "agrawaldevesh", "createdAt": "2020-04-08T00:36:08Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -163,6 +185,56 @@ public ExpressionType getExpressionType()\n         return nodeBuilder.build();\n     }\n \n+    /**\n+     * Try to push down query like: `SELECT count(distinct $COLUMN) FROM myTable` to Pinot as `SELECT distinctCount($COLUMN) FROM myTable`.\n+     * This function only handles the case of an AggregationNode (COUNT on $COLUMN) on top of an AggregationNode(of non-aggregate on $COLUMN).\n+     *\n+     * @param nodeBuilder\n+     * @param aggregationNode\n+     * @param outputColumn\n+     * @param aggregation\n+     * @return true if push down successfully otherwise false.\n+     */\n+    private static boolean handlePushDownSingleDistinctCount(ImmutableList.Builder<AggregationColumnNode> nodeBuilder, AggregationNode aggregationNode, VariableReferenceExpression outputColumn, AggregationNode.Aggregation aggregation)\n+    {\n+        if (aggregation.getCall().getDisplayName().equalsIgnoreCase(COUNT_FUNCTION_NAME)) {\n+            List<RowExpression> arguments = aggregation.getCall().getArguments();\n+            if (arguments.size() == 1) {\n+                RowExpression aggregationArgument = arguments.get(0);\n+                // Handle the case of Count Aggregation on top of a Non-Agg GroupBy Aggregation.\n+                if (aggregationNode.getSource() instanceof AggregationNode) {\n+                    AggregationNode sourceAggregationNode = (AggregationNode) aggregationNode.getSource();\n+                    Set<String> sourceAggregationGroupSet = getGroupKeys(sourceAggregationNode.getGroupingKeys());\n+                    Set<String> aggregationGroupSet = getGroupKeys(aggregationNode.getGroupingKeys());\n+                    aggregationGroupSet.add(aggregationArgument.toString());\n+                    if (sourceAggregationGroupSet.containsAll(aggregationGroupSet) && aggregationGroupSet.containsAll(sourceAggregationGroupSet)) {\n+                        //(sourceAggregationNode.getGroupingKeys().containsAll(aggregationNode.getGroupingKeys()))", "originalCommit": "05770437addd3244f49dc7061848cdf19b886459", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5ODU0MA==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405198540", "bodyText": "will do", "author": "xiangfu0", "createdAt": "2020-04-08T00:57:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MjY2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mjg0NQ==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405192845", "bodyText": "Why is the return type unconditionally a BIGINT ?", "author": "agrawaldevesh", "createdAt": "2020-04-08T00:36:52Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -163,6 +185,56 @@ public ExpressionType getExpressionType()\n         return nodeBuilder.build();\n     }\n \n+    /**\n+     * Try to push down query like: `SELECT count(distinct $COLUMN) FROM myTable` to Pinot as `SELECT distinctCount($COLUMN) FROM myTable`.\n+     * This function only handles the case of an AggregationNode (COUNT on $COLUMN) on top of an AggregationNode(of non-aggregate on $COLUMN).\n+     *\n+     * @param nodeBuilder\n+     * @param aggregationNode\n+     * @param outputColumn\n+     * @param aggregation\n+     * @return true if push down successfully otherwise false.\n+     */\n+    private static boolean handlePushDownSingleDistinctCount(ImmutableList.Builder<AggregationColumnNode> nodeBuilder, AggregationNode aggregationNode, VariableReferenceExpression outputColumn, AggregationNode.Aggregation aggregation)\n+    {\n+        if (aggregation.getCall().getDisplayName().equalsIgnoreCase(COUNT_FUNCTION_NAME)) {\n+            List<RowExpression> arguments = aggregation.getCall().getArguments();\n+            if (arguments.size() == 1) {\n+                RowExpression aggregationArgument = arguments.get(0);\n+                // Handle the case of Count Aggregation on top of a Non-Agg GroupBy Aggregation.\n+                if (aggregationNode.getSource() instanceof AggregationNode) {\n+                    AggregationNode sourceAggregationNode = (AggregationNode) aggregationNode.getSource();\n+                    Set<String> sourceAggregationGroupSet = getGroupKeys(sourceAggregationNode.getGroupingKeys());\n+                    Set<String> aggregationGroupSet = getGroupKeys(aggregationNode.getGroupingKeys());\n+                    aggregationGroupSet.add(aggregationArgument.toString());\n+                    if (sourceAggregationGroupSet.containsAll(aggregationGroupSet) && aggregationGroupSet.containsAll(sourceAggregationGroupSet)) {\n+                        //(sourceAggregationNode.getGroupingKeys().containsAll(aggregationNode.getGroupingKeys()))\n+                        //aggregationArgument.equalsIgnoreCase(sourceAggregationNode.getGroupingKeys().get(0).getName()))\n+                        nodeBuilder.add(\n+                                new AggregationFunctionColumnNode(\n+                                        outputColumn,\n+                                        new CallExpression(\n+                                                DISTINCT_COUNT_FUNCTION_NAME,\n+                                                aggregation.getFunctionHandle(),\n+                                                BigintType.BIGINT,", "originalCommit": "05770437addd3244f49dc7061848cdf19b886459", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5ODY0NQ==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405198645", "bodyText": "cause Pinot always returns a LONG value for this", "author": "xiangfu0", "createdAt": "2020-04-08T00:58:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mjg0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwMDQwMQ==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405200401", "bodyText": "Hmm. I wonder if the return type should match the return type expected in the presto plan ? Perhaps we should only push down if the return type is a long ?\nI can't think of count-distinct returning anything other than a Long in presto, but just in case.", "author": "agrawaldevesh", "createdAt": "2020-04-08T01:04:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mjg0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwNDM0OQ==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405204349", "bodyText": "will add the check.", "author": "xiangfu0", "createdAt": "2020-04-08T01:20:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mjg0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwNjM4MA==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405206380", "bodyText": "I will passing the original type from the aggregation call and let PlanType to translate the return value.", "author": "xiangfu0", "createdAt": "2020-04-08T01:27:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mjg0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MzA2MA==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405193060", "bodyText": "Seems like a helpful helper function. Can it be used elsewhere too ?", "author": "agrawaldevesh", "createdAt": "2020-04-08T00:37:42Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -163,6 +185,56 @@ public ExpressionType getExpressionType()\n         return nodeBuilder.build();\n     }\n \n+    /**\n+     * Try to push down query like: `SELECT count(distinct $COLUMN) FROM myTable` to Pinot as `SELECT distinctCount($COLUMN) FROM myTable`.\n+     * This function only handles the case of an AggregationNode (COUNT on $COLUMN) on top of an AggregationNode(of non-aggregate on $COLUMN).\n+     *\n+     * @param nodeBuilder\n+     * @param aggregationNode\n+     * @param outputColumn\n+     * @param aggregation\n+     * @return true if push down successfully otherwise false.\n+     */\n+    private static boolean handlePushDownSingleDistinctCount(ImmutableList.Builder<AggregationColumnNode> nodeBuilder, AggregationNode aggregationNode, VariableReferenceExpression outputColumn, AggregationNode.Aggregation aggregation)\n+    {\n+        if (aggregation.getCall().getDisplayName().equalsIgnoreCase(COUNT_FUNCTION_NAME)) {\n+            List<RowExpression> arguments = aggregation.getCall().getArguments();\n+            if (arguments.size() == 1) {\n+                RowExpression aggregationArgument = arguments.get(0);\n+                // Handle the case of Count Aggregation on top of a Non-Agg GroupBy Aggregation.\n+                if (aggregationNode.getSource() instanceof AggregationNode) {\n+                    AggregationNode sourceAggregationNode = (AggregationNode) aggregationNode.getSource();\n+                    Set<String> sourceAggregationGroupSet = getGroupKeys(sourceAggregationNode.getGroupingKeys());\n+                    Set<String> aggregationGroupSet = getGroupKeys(aggregationNode.getGroupingKeys());\n+                    aggregationGroupSet.add(aggregationArgument.toString());\n+                    if (sourceAggregationGroupSet.containsAll(aggregationGroupSet) && aggregationGroupSet.containsAll(sourceAggregationGroupSet)) {\n+                        //(sourceAggregationNode.getGroupingKeys().containsAll(aggregationNode.getGroupingKeys()))\n+                        //aggregationArgument.equalsIgnoreCase(sourceAggregationNode.getGroupingKeys().get(0).getName()))\n+                        nodeBuilder.add(\n+                                new AggregationFunctionColumnNode(\n+                                        outputColumn,\n+                                        new CallExpression(\n+                                                DISTINCT_COUNT_FUNCTION_NAME,\n+                                                aggregation.getFunctionHandle(),\n+                                                BigintType.BIGINT,\n+                                                ImmutableList.of(aggregationArgument))));\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static Set<String> getGroupKeys(List<VariableReferenceExpression> groupingKeys)", "originalCommit": "05770437addd3244f49dc7061848cdf19b886459", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5OTMxOA==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405199318", "bodyText": "I will make it public then, will see if other place could use it also.", "author": "xiangfu0", "createdAt": "2020-04-08T01:00:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MzA2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MzE3Nw==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405193177", "bodyText": "Commented code", "author": "agrawaldevesh", "createdAt": "2020-04-08T00:38:08Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -151,7 +154,19 @@ public PinotQueryGeneratorContext withAggregation(\n             Set<VariableReferenceExpression> hiddenColumnSet)\n     {\n         // there is only one aggregation supported.\n-        checkSupported(!hasAggregation(), \"Pinot doesn't support aggregation on top of the aggregated data\");\n+        // checkSupported(!hasAggregation(), \"Pinot doesn't support aggregation on top of the aggregated data\");", "originalCommit": "05770437addd3244f49dc7061848cdf19b886459", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5OTQ1NQ==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405199455", "bodyText": "will remove", "author": "xiangfu0", "createdAt": "2020-04-08T01:01:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MzE3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MzY5Nw==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405193697", "bodyText": "I didn't understand fully the need to change hiddenColumnSet here ?\nAlso, can this loop be written using some java8 streams way ?", "author": "agrawaldevesh", "createdAt": "2020-04-08T00:39:57Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -151,7 +154,19 @@ public PinotQueryGeneratorContext withAggregation(\n             Set<VariableReferenceExpression> hiddenColumnSet)\n     {\n         // there is only one aggregation supported.\n-        checkSupported(!hasAggregation(), \"Pinot doesn't support aggregation on top of the aggregated data\");\n+        // checkSupported(!hasAggregation(), \"Pinot doesn't support aggregation on top of the aggregated data\");\n+        // there is only one aggregation supported unless distinct is used.\n+        Iterator<Selection> selectionIterator = newSelections.values().iterator();\n+        boolean passed = false;\n+        while (selectionIterator.hasNext()) {\n+            if (selectionIterator.next().getDefinition().startsWith(DISTINCT_COUNT_FUNCTION_NAME.toUpperCase(Locale.ENGLISH))) {\n+                hiddenColumnSet = Collections.emptySet();", "originalCommit": "05770437addd3244f49dc7061848cdf19b886459", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwMDY2Ng==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405200666", "bodyText": "Current code will translate the underlying non-agg groupby query select A from myTable group by A to   select A, count(*) from myTable group by A and count(*) is hidden column.\nSo the upper level distinctCount shouldn't inherited this hiddenColumnSet.", "author": "xiangfu0", "createdAt": "2020-04-08T01:06:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MzY5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI2MTk2OA==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405261968", "bodyText": "I didn't fully understand this. What distinct query is leading to a hiddenColumnSet being populated?\nPerhaps you mean that a \"select count(distinct a) from T\", is going to show up here are as \"select a from T group by T\" with an additional distinct added on top?\nIs it possible for a query like: \"select b, count(distinct a) from T group by b\" to end up here ? ie, would we support grouped count-distinct in this PR? If not, then its okay to clear the hiddenColumnSet. I would suggest adding this comment in the code.\nIn any case, this whole hiddenColumnSet stuff is a sad hack and I am sorry you are having to deal with it :-(.", "author": "agrawaldevesh", "createdAt": "2020-04-08T05:12:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MzY5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI2NzAxOA==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405267018", "bodyText": "Yes, this only works for single distinctCount with/without groupby.\nThe query plan is different, there is no markDistinctNode for single count distinct query.\nFor select count(distinct origin), dest from airlineStats group by dest;\nBelow is the query plan:\n\nExpended:\n\nFrom top to bottom,\nAggregationNode@14771 is a non-agg groupby dest, origin\nAggregationNode@14754 is a count(origin) group by dest.\nIn PinotQueryGenerator, it will first visit AggregationNode@14771 and generate a hidden column count(*), as it's a non-agg groupby.\nThen comes to AggregationNode@14754, we check if this is a distinctCount function, then we will discard the hidden column and only keep group by dest", "author": "xiangfu0", "createdAt": "2020-04-08T05:32:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MzY5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI5MzkzOQ==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405293939", "bodyText": "Got it. So is there a way to only discard the hiddenColumnSet iff this is a case of an aggregation atop an aggregation (as will be generated in this example query)", "author": "agrawaldevesh", "createdAt": "2020-04-08T06:47:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MzY5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI5ODg1MA==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405298850", "bodyText": "so this plan is common for count distinct and count distinct group by query, and we only discard hidden column under this circumstance.", "author": "xiangfu0", "createdAt": "2020-04-08T06:58:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MzY5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI5OTg0MA==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405299840", "bodyText": "Thank you. So its safe to discard then ! :-). This is certainly worth documenting more clearly in the code.", "author": "agrawaldevesh", "createdAt": "2020-04-08T07:01:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MzY5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mzg3NQ==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405193875", "bodyText": "Is this used anywhere ?", "author": "agrawaldevesh", "createdAt": "2020-04-08T00:40:40Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -242,6 +257,20 @@ private boolean hasOrderBy()\n         return !topNColumnOrderingMap.isEmpty();\n     }\n \n+    public boolean isNonAggregateGroupBy()", "originalCommit": "05770437addd3244f49dc7061848cdf19b886459", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwMTIxMA==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405201210", "bodyText": "no, will remove it.", "author": "xiangfu0", "createdAt": "2020-04-08T01:08:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mzg3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5NDM1Nw==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405194357", "bodyText": "Should we be spelling out __expressions__ here and above ?", "author": "agrawaldevesh", "createdAt": "2020-04-08T00:42:25Z", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGenerator.java", "diffHunk": "@@ -131,6 +132,52 @@ public void testCountStar()\n         testUnaryAggregationHelper((planBuilder, aggregationBuilder) -> aggregationBuilder.addAggregation(planBuilder.variable(\"agg\"), getRowExpression(\"count(*)\", defaultSessionHolder)), \"count(*)\");\n     }\n \n+    @Test\n+    public void testDistinctCountPushdown()\n+    {\n+        PlanNode justScan = buildPlan(planBuilder -> tableScan(planBuilder, pinotTable, regionId, secondsSinceEpoch, city, fare));\n+        PlanNode distinctAggregation = buildPlan(planBuilder -> planBuilder.aggregation(aggBuilder -> aggBuilder.source(justScan).singleGroupingSet(v(\"regionid\"))));\n+        testPQL(planBuilder -> planBuilder.aggregation(aggBuilder -> aggBuilder.source(distinctAggregation).globalGrouping().addAggregation(v(\"count_regionid\"), getRowExpression(\"count(regionid)\", defaultSessionHolder))),\n+                \"SELECT DISTINCTCOUNT(regionId) FROM realtimeOnly\");\n+    }\n+\n+    @Test\n+    public void testDistinctCountGroupByPushdown()\n+    {\n+        PlanNode justScan = buildPlan(planBuilder -> tableScan(planBuilder, pinotTable, regionId, secondsSinceEpoch, city, fare));\n+        PlanNode distinctAggregation = buildPlan(planBuilder -> planBuilder.aggregation(aggBuilder -> aggBuilder.source(justScan).singleGroupingSet(v(\"city\"), v(\"regionid\"))));\n+        testPQL(planBuilder -> planBuilder.aggregation(aggBuilder -> aggBuilder.source(distinctAggregation).singleGroupingSet(v(\"city\")).addAggregation(v(\"count_regionid\"), getRowExpression(\"count(regionid)\", defaultSessionHolder))),\n+                \"SELECT DISTINCTCOUNT(regionId) FROM realtimeOnly GROUP BY city TOP 10000\");\n+    }\n+\n+    @Test\n+    public void testDistinctCountWithOtherAggregationPushdown()\n+    {\n+        Map<String, String> outputVariables = ImmutableMap.of(\"agg\", \"count(*)\", \"count(regionid)\", \"DISTINCTCOUNT(regionId)\");\n+        PlanNode justScan = buildPlan(planBuilder -> tableScan(planBuilder, pinotTable, regionId, secondsSinceEpoch, city, fare));\n+        PlanNode markDistinct = buildPlan(planBuilder -> markDistinct(planBuilder, v(\"regionid$distinct\"), ImmutableList.of(v(\"regionid\")), justScan));\n+        testPQL(\n+                new PinotConfig().setAllowMultipleAggregations(true),\n+                planBuilder -> planBuilder.aggregation(aggBuilder -> aggBuilder.source(markDistinct).addAggregation(planBuilder.variable(\"agg\"), getRowExpression(\"count(*)\", defaultSessionHolder)).addAggregation(planBuilder.variable(\"count(regionid)\"), getRowExpression(\"count(regionid)\", defaultSessionHolder), Optional.empty(), Optional.empty(), false, Optional.of(v(\"regionid$distinct\"))).globalGrouping()),\n+                \"SELECT __expressions__ FROM realtimeOnly\",\n+                defaultSessionHolder,\n+                outputVariables);\n+    }\n+\n+    @Test\n+    public void testDistinctCountWithOtherAggregationGroupByPushdown()\n+    {\n+        Map<String, String> outputVariables = ImmutableMap.of(\"agg\", \"count(*)\", \"count(regionid)\", \"DISTINCTCOUNT(regionId)\");\n+        PlanNode justScan = buildPlan(planBuilder -> tableScan(planBuilder, pinotTable, regionId, secondsSinceEpoch, city, fare));\n+        PlanNode markDistinct = buildPlan(planBuilder -> markDistinct(planBuilder, v(\"regionid$distinct\"), ImmutableList.of(v(\"regionid\")), justScan));\n+        testPQL(\n+                new PinotConfig().setAllowMultipleAggregations(true),\n+                planBuilder -> planBuilder.aggregation(aggBuilder -> aggBuilder.source(markDistinct).singleGroupingSet(v(\"city\")).addAggregation(planBuilder.variable(\"agg\"), getRowExpression(\"count(*)\", defaultSessionHolder)).addAggregation(planBuilder.variable(\"count(regionid)\"), getRowExpression(\"count(regionid)\", defaultSessionHolder), Optional.empty(), Optional.empty(), false, Optional.of(v(\"regionid$distinct\")))),\n+                \"SELECT __expressions__ FROM realtimeOnly GROUP BY city TOP 10000\",", "originalCommit": "05770437addd3244f49dc7061848cdf19b886459", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwMTYyNA==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405201624", "bodyText": "will do", "author": "xiangfu0", "createdAt": "2020-04-08T01:09:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5NDM1Nw=="}], "type": "inlineReview"}, {"oid": "e0fc017d548cd5373840e234b5cad461e48cbf50", "url": "https://github.com/prestodb/presto/commit/e0fc017d548cd5373840e234b5cad461e48cbf50", "message": "Address comments", "committedDate": "2020-04-08T01:25:10Z", "type": "forcePushed"}, {"oid": "92208bf69c95f178fabebe74d416261e94fe893c", "url": "https://github.com/prestodb/presto/commit/92208bf69c95f178fabebe74d416261e94fe893c", "message": "Address comments", "committedDate": "2020-04-08T02:08:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NDQzNQ==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405694435", "bodyText": "Can you use a more descriptive name than passed, please?", "author": "agrawaldevesh", "createdAt": "2020-04-08T17:31:18Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -150,8 +154,18 @@ public PinotQueryGeneratorContext withAggregation(\n             int aggregations,\n             Set<VariableReferenceExpression> hiddenColumnSet)\n     {\n-        // there is only one aggregation supported.\n-        checkSupported(!hasAggregation(), \"Pinot doesn't support aggregation on top of the aggregated data\");\n+        // there is only one aggregation supported unless distinct is used.\n+        boolean passed = false;", "originalCommit": "92208bf69c95f178fabebe74d416261e94fe893c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1NjU2OQ==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405756569", "bodyText": "will do", "author": "xiangfu0", "createdAt": "2020-04-08T19:18:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NDQzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NzM3OQ==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405697379", "bodyText": "The hiddenColumnSet should be changed here, such that the loop above becomes read-only.\nAlso, would this check make sense to guard the overwriting of hiddenColumnSet:\nif (!passed) { checkSupported(!hashAggregation(), \"....\"); } else if (hasAggregation()) { hiddenColumnSet = ImmutableSet.of(); } \nAlso, please use either ImmutableSet.of() if the intention is for hiddenColumnSet to be never added to again for the life of this context. Or use a new HashSet<> if you want to allow future additions. Presto does not encourage Collections.emptySet.\nI wonder if it is possible to have another aggregation on top of a distinct ? Like can we have three aggregations stacked together ? What should we do in that case ? The safest thing would be to detect and back out.", "author": "agrawaldevesh", "createdAt": "2020-04-08T17:36:28Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -150,8 +154,18 @@ public PinotQueryGeneratorContext withAggregation(\n             int aggregations,\n             Set<VariableReferenceExpression> hiddenColumnSet)\n     {\n-        // there is only one aggregation supported.\n-        checkSupported(!hasAggregation(), \"Pinot doesn't support aggregation on top of the aggregated data\");\n+        // there is only one aggregation supported unless distinct is used.\n+        boolean passed = false;\n+        Collection<Selection> selections = newSelections.values();\n+        for (Selection selection : selections) {\n+            if (selection.getDefinition().startsWith(DISTINCT_COUNT_FUNCTION_NAME.toUpperCase(Locale.ENGLISH))) {\n+                hiddenColumnSet = Collections.emptySet();\n+                passed = true;\n+            }\n+        }\n+        if (!passed) {\n+            checkSupported(!hasAggregation(), \"Pinot doesn't support aggregation on top of the aggregated data\");\n+        }", "originalCommit": "92208bf69c95f178fabebe74d416261e94fe893c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1NjUwNQ==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405756505", "bodyText": "Agreed.\nIf it's triple aggregation, then the most outer layer will check and found out there is an aggregation on top of an aggregation, then fail.", "author": "xiangfu0", "createdAt": "2020-04-08T19:18:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NzM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5MDgxNQ==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405790815", "bodyText": "Refined this logic.", "author": "xiangfu0", "createdAt": "2020-04-08T20:21:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NzM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5NDIzMw==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405794233", "bodyText": "Thanks !. Reads better now :-)", "author": "agrawaldevesh", "createdAt": "2020-04-08T20:28:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NzM3OQ=="}], "type": "inlineReview"}, {"oid": "b7ea11c5bfbed5e7db3f1e9e85437782140437c0", "url": "https://github.com/prestodb/presto/commit/b7ea11c5bfbed5e7db3f1e9e85437782140437c0", "message": "Best effort to push down distinct count function to pinot", "committedDate": "2020-04-09T03:05:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMjIzNQ==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405932235", "bodyText": "ImmutableMap.<String, String>builder()", "author": "highker", "createdAt": "2020-04-09T03:13:58Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -74,12 +75,15 @@\n public class PinotQueryGenerator\n {\n     private static final Logger log = Logger.get(PinotQueryGenerator.class);\n-    private static final Map<String, String> UNARY_AGGREGATION_MAP = ImmutableMap.of(\n-            \"min\", \"min\",\n-            \"max\", \"max\",\n-            \"avg\", \"avg\",\n-            \"sum\", \"sum\",\n-            \"approx_distinct\", \"DISTINCTCOUNTHLL\");\n+    private static final Map<String, String> UNARY_AGGREGATION_MAP =\n+            new ImmutableMap.Builder<String, String>()", "originalCommit": "b7ea11c5bfbed5e7db3f1e9e85437782140437c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk1NDgwMQ==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405954801", "bodyText": "done", "author": "xiangfu0", "createdAt": "2020-04-09T04:51:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMjIzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMjU2Mw==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405932563", "bodyText": "put this to the first line.", "author": "highker", "createdAt": "2020-04-09T03:15:14Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -244,6 +248,14 @@ protected VariableReferenceExpression getVariableReference(RowExpression express\n             throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), \"Expected a variable reference but got \" + expression);\n         }\n \n+        @Override\n+        public PinotQueryGeneratorContext visitMarkDistinct(MarkDistinctNode node, PinotQueryGeneratorContext context)\n+        {\n+            context = node.getSource().accept(this, context);\n+            requireNonNull(context, \"context is null\");", "originalCommit": "b7ea11c5bfbed5e7db3f1e9e85437782140437c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk1NTEyNg==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405955126", "bodyText": "done.", "author": "xiangfu0", "createdAt": "2020-04-09T04:52:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMjU2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMjYyMg==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405932622", "bodyText": "return node.getSource().accept(this, context);", "author": "highker", "createdAt": "2020-04-09T03:15:28Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGenerator.java", "diffHunk": "@@ -244,6 +248,14 @@ protected VariableReferenceExpression getVariableReference(RowExpression express\n             throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), \"Expected a variable reference but got \" + expression);\n         }\n \n+        @Override\n+        public PinotQueryGeneratorContext visitMarkDistinct(MarkDistinctNode node, PinotQueryGeneratorContext context)\n+        {\n+            context = node.getSource().accept(this, context);\n+            requireNonNull(context, \"context is null\");\n+            return context;", "originalCommit": "b7ea11c5bfbed5e7db3f1e9e85437782140437c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk1NTE0OQ==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405955149", "bodyText": "done.", "author": "xiangfu0", "createdAt": "2020-04-09T04:52:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMjYyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMzA3MA==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405933070", "bodyText": "where do we have this function?", "author": "highker", "createdAt": "2020-04-09T03:17:23Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -48,6 +51,10 @@\n \n public class PinotPushdownUtils\n {\n+    public static final String DISTINCT_COUNT_FUNCTION_NAME = \"distinctCount\";", "originalCommit": "b7ea11c5bfbed5e7db3f1e9e85437782140437c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk1MzU2Mg==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405953562", "bodyText": "This function is defined in Pinot , please refer to here", "author": "xiangfu0", "createdAt": "2020-04-09T04:46:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMzA3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk1OTQyNQ==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405959425", "bodyText": "Let's put PINOT_ for these consts to denote they are Pinot functions. Also break an empty between public and private consts.", "author": "highker", "createdAt": "2020-04-09T05:10:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMzA3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3Njc5NA==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405976794", "bodyText": "Done. Thanks!", "author": "xiangfu0", "createdAt": "2020-04-09T06:12:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMzA3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMzI3NQ==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405933275", "bodyText": "rename this to aggregation", "author": "highker", "createdAt": "2020-04-09T03:18:04Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -147,10 +154,25 @@ public ExpressionType getExpressionType()\n             if (agg != null) {", "originalCommit": "b7ea11c5bfbed5e7db3f1e9e85437782140437c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk1NDU4OA==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405954588", "bodyText": "done", "author": "xiangfu0", "createdAt": "2020-04-09T04:50:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMzI3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMzQxNw==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405933417", "bodyText": "We don't use javadoc in the body of a function use comments instead\n// ...\n// ...\n// ...", "author": "highker", "createdAt": "2020-04-09T03:18:44Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -147,10 +154,25 @@ public ExpressionType getExpressionType()\n             if (agg != null) {\n                 if (agg.getFilter().isPresent()\n                         || agg.isDistinct()\n-                        || agg.getOrderBy().isPresent()\n-                        || agg.getMask().isPresent()) {\n+                        || agg.getOrderBy().isPresent()) {\n                     throw new PinotException(PINOT_UNSUPPORTED_EXPRESSION, Optional.empty(), \"Unsupported aggregation node \" + aggregationNode);\n                 }\n+                if (agg.getMask().isPresent()) {\n+                    /**", "originalCommit": "b7ea11c5bfbed5e7db3f1e9e85437782140437c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk1NDU2OA==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405954568", "bodyText": "done", "author": "xiangfu0", "createdAt": "2020-04-09T04:50:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMzQxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMzY5Mg==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405933692", "bodyText": "Can we return early in this function for most of the ifs; so we don't have to deal with all these braces\nif (!aggregation.getCall().getDisplayName().equalsIgnoreCase(COUNT_FUNCTION_NAME)) {\n    return false;\n}\n\n...", "author": "highker", "createdAt": "2020-04-09T03:19:49Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -163,6 +185,52 @@ public ExpressionType getExpressionType()\n         return nodeBuilder.build();\n     }\n \n+    /**\n+     * Try to push down query like: `SELECT count(distinct $COLUMN) FROM myTable` to Pinot as `SELECT distinctCount($COLUMN) FROM myTable`.\n+     * This function only handles the case of an AggregationNode (COUNT on $COLUMN) on top of an AggregationNode(of non-aggregate on $COLUMN).\n+     *\n+     * @param nodeBuilder\n+     * @param aggregationNode\n+     * @param outputColumn\n+     * @param aggregation\n+     * @return true if push down successfully otherwise false.\n+     */\n+    private static boolean handlePushDownSingleDistinctCount(ImmutableList.Builder<AggregationColumnNode> nodeBuilder, AggregationNode aggregationNode, VariableReferenceExpression outputColumn, AggregationNode.Aggregation aggregation)\n+    {\n+        if (aggregation.getCall().getDisplayName().equalsIgnoreCase(COUNT_FUNCTION_NAME)) {", "originalCommit": "b7ea11c5bfbed5e7db3f1e9e85437782140437c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk1NDU0Mg==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405954542", "bodyText": "done.", "author": "xiangfu0", "createdAt": "2020-04-09T04:50:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMzY5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMzgxMQ==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405933811", "bodyText": "no javadoc", "author": "highker", "createdAt": "2020-04-09T03:20:18Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/query/PinotQueryGeneratorContext.java", "diffHunk": "@@ -150,8 +154,22 @@ public PinotQueryGeneratorContext withAggregation(\n             int aggregations,\n             Set<VariableReferenceExpression> hiddenColumnSet)\n     {\n-        // there is only one aggregation supported.\n-        checkSupported(!hasAggregation(), \"Pinot doesn't support aggregation on top of the aggregated data\");\n+        // there is only one aggregation supported unless distinct is used.\n+        AtomicBoolean pushDownDistinctCount = new AtomicBoolean(false);\n+        newSelections.values().forEach(selection -> {\n+            if (selection.getDefinition().startsWith(DISTINCT_COUNT_FUNCTION_NAME.toUpperCase(Locale.ENGLISH))) {\n+                pushDownDistinctCount.set(true);\n+            }\n+        });\n+        if (pushDownDistinctCount.get()) {\n+            /**", "originalCommit": "b7ea11c5bfbed5e7db3f1e9e85437782140437c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk1NTMwNw==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405955307", "bodyText": "done", "author": "xiangfu0", "createdAt": "2020-04-09T04:53:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMzgxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzNDAyMA==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405934020", "bodyText": "ImmutableMap.<.., ..>builder()", "author": "highker", "createdAt": "2020-04-09T03:21:14Z", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/TestPinotQueryBase.java", "diffHunk": "@@ -98,12 +99,16 @@\n \n     protected final PinotConfig pinotConfig = new PinotConfig();\n \n-    protected static final Map<VariableReferenceExpression, PinotQueryGeneratorContext.Selection> testInput = ImmutableMap.of(\n-            new VariableReferenceExpression(\"regionid\", BIGINT), new PinotQueryGeneratorContext.Selection(\"regionId\", TABLE_COLUMN), // direct column reference\n-            new VariableReferenceExpression(\"city\", VARCHAR), new PinotQueryGeneratorContext.Selection(\"city\", TABLE_COLUMN), // direct column reference\n-            new VariableReferenceExpression(\"fare\", DOUBLE), new PinotQueryGeneratorContext.Selection(\"fare\", TABLE_COLUMN), // direct column reference\n-            new VariableReferenceExpression(\"totalfare\", DOUBLE), new PinotQueryGeneratorContext.Selection(\"(fare + trip)\", DERIVED), // derived column\n-            new VariableReferenceExpression(\"secondssinceepoch\", BIGINT), new PinotQueryGeneratorContext.Selection(\"secondsSinceEpoch\", TABLE_COLUMN)); // column for datetime functions\n+    protected static final Map<VariableReferenceExpression, PinotQueryGeneratorContext.Selection> testInput =\n+            new ImmutableMap.Builder()", "originalCommit": "b7ea11c5bfbed5e7db3f1e9e85437782140437c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk1NTU0NA==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r405955544", "bodyText": "done", "author": "xiangfu0", "createdAt": "2020-04-09T04:54:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzNDAyMA=="}], "type": "inlineReview"}, {"oid": "cdd63993651da7167ef8145b54143fefbd11ab9e", "url": "https://github.com/prestodb/presto/commit/cdd63993651da7167ef8145b54143fefbd11ab9e", "message": "Best effort to push down distinct count function to pinot", "committedDate": "2020-04-09T04:54:59Z", "type": "forcePushed"}, {"oid": "62fc19899ebb26212e1649ca5b6968ac5e04297c", "url": "https://github.com/prestodb/presto/commit/62fc19899ebb26212e1649ca5b6968ac5e04297c", "message": "Best effort to push down distinct count function to pinot", "committedDate": "2020-04-09T06:12:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxNTI0NA==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r406015244", "bodyText": "break a line after this", "author": "highker", "createdAt": "2020-04-09T07:43:06Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -163,6 +183,55 @@ public ExpressionType getExpressionType()\n         return nodeBuilder.build();\n     }\n \n+    /**\n+     * Try to push down query like: `SELECT count(distinct $COLUMN) FROM myTable` to Pinot as `SELECT distinctCount($COLUMN) FROM myTable`.\n+     * This function only handles the case of an AggregationNode (COUNT on $COLUMN) on top of an AggregationNode(of non-aggregate on $COLUMN).\n+     *\n+     * @param nodeBuilder\n+     * @param aggregationNode\n+     * @param outputColumn\n+     * @param aggregation\n+     * @return true if push down successfully otherwise false.\n+     */\n+    private static boolean handlePushDownSingleDistinctCount(ImmutableList.Builder<AggregationColumnNode> nodeBuilder, AggregationNode aggregationNode, VariableReferenceExpression outputColumn, AggregationNode.Aggregation aggregation)\n+    {\n+        if (!aggregation.getCall().getDisplayName().equalsIgnoreCase(COUNT_FUNCTION_NAME)) {\n+            return false;\n+        }", "originalCommit": "62fc19899ebb26212e1649ca5b6968ac5e04297c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxNTI4MQ==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r406015281", "bodyText": "break a line after this", "author": "highker", "createdAt": "2020-04-09T07:43:10Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -163,6 +183,55 @@ public ExpressionType getExpressionType()\n         return nodeBuilder.build();\n     }\n \n+    /**\n+     * Try to push down query like: `SELECT count(distinct $COLUMN) FROM myTable` to Pinot as `SELECT distinctCount($COLUMN) FROM myTable`.\n+     * This function only handles the case of an AggregationNode (COUNT on $COLUMN) on top of an AggregationNode(of non-aggregate on $COLUMN).\n+     *\n+     * @param nodeBuilder\n+     * @param aggregationNode\n+     * @param outputColumn\n+     * @param aggregation\n+     * @return true if push down successfully otherwise false.\n+     */\n+    private static boolean handlePushDownSingleDistinctCount(ImmutableList.Builder<AggregationColumnNode> nodeBuilder, AggregationNode aggregationNode, VariableReferenceExpression outputColumn, AggregationNode.Aggregation aggregation)\n+    {\n+        if (!aggregation.getCall().getDisplayName().equalsIgnoreCase(COUNT_FUNCTION_NAME)) {\n+            return false;\n+        }\n+        List<RowExpression> arguments = aggregation.getCall().getArguments();\n+        if (arguments.size() != 1) {\n+            return false;\n+        }\n+        RowExpression aggregationArgument = arguments.get(0);\n+        // Handle the case of Count Aggregation on top of a Non-Agg GroupBy Aggregation.\n+        if (!(aggregationNode.getSource() instanceof AggregationNode)) {\n+            return false;\n+        }", "originalCommit": "62fc19899ebb26212e1649ca5b6968ac5e04297c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxNTI5OQ==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r406015299", "bodyText": "break a line after this", "author": "highker", "createdAt": "2020-04-09T07:43:12Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -163,6 +183,55 @@ public ExpressionType getExpressionType()\n         return nodeBuilder.build();\n     }\n \n+    /**\n+     * Try to push down query like: `SELECT count(distinct $COLUMN) FROM myTable` to Pinot as `SELECT distinctCount($COLUMN) FROM myTable`.\n+     * This function only handles the case of an AggregationNode (COUNT on $COLUMN) on top of an AggregationNode(of non-aggregate on $COLUMN).\n+     *\n+     * @param nodeBuilder\n+     * @param aggregationNode\n+     * @param outputColumn\n+     * @param aggregation\n+     * @return true if push down successfully otherwise false.\n+     */\n+    private static boolean handlePushDownSingleDistinctCount(ImmutableList.Builder<AggregationColumnNode> nodeBuilder, AggregationNode aggregationNode, VariableReferenceExpression outputColumn, AggregationNode.Aggregation aggregation)\n+    {\n+        if (!aggregation.getCall().getDisplayName().equalsIgnoreCase(COUNT_FUNCTION_NAME)) {\n+            return false;\n+        }\n+        List<RowExpression> arguments = aggregation.getCall().getArguments();\n+        if (arguments.size() != 1) {\n+            return false;\n+        }", "originalCommit": "62fc19899ebb26212e1649ca5b6968ac5e04297c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxNTM1MA==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r406015350", "bodyText": "break a line after this", "author": "highker", "createdAt": "2020-04-09T07:43:16Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -163,6 +183,55 @@ public ExpressionType getExpressionType()\n         return nodeBuilder.build();\n     }\n \n+    /**\n+     * Try to push down query like: `SELECT count(distinct $COLUMN) FROM myTable` to Pinot as `SELECT distinctCount($COLUMN) FROM myTable`.\n+     * This function only handles the case of an AggregationNode (COUNT on $COLUMN) on top of an AggregationNode(of non-aggregate on $COLUMN).\n+     *\n+     * @param nodeBuilder\n+     * @param aggregationNode\n+     * @param outputColumn\n+     * @param aggregation\n+     * @return true if push down successfully otherwise false.\n+     */\n+    private static boolean handlePushDownSingleDistinctCount(ImmutableList.Builder<AggregationColumnNode> nodeBuilder, AggregationNode aggregationNode, VariableReferenceExpression outputColumn, AggregationNode.Aggregation aggregation)\n+    {\n+        if (!aggregation.getCall().getDisplayName().equalsIgnoreCase(COUNT_FUNCTION_NAME)) {\n+            return false;\n+        }\n+        List<RowExpression> arguments = aggregation.getCall().getArguments();\n+        if (arguments.size() != 1) {\n+            return false;\n+        }\n+        RowExpression aggregationArgument = arguments.get(0);\n+        // Handle the case of Count Aggregation on top of a Non-Agg GroupBy Aggregation.\n+        if (!(aggregationNode.getSource() instanceof AggregationNode)) {\n+            return false;\n+        }\n+        AggregationNode sourceAggregationNode = (AggregationNode) aggregationNode.getSource();\n+        Set<String> sourceAggregationGroupSet = getGroupKeys(sourceAggregationNode.getGroupingKeys());\n+        Set<String> aggregationGroupSet = getGroupKeys(aggregationNode.getGroupingKeys());\n+        aggregationGroupSet.add(aggregationArgument.toString());\n+        if (!sourceAggregationGroupSet.containsAll(aggregationGroupSet) && aggregationGroupSet.containsAll(sourceAggregationGroupSet)) {\n+            return false;\n+        }", "originalCommit": "62fc19899ebb26212e1649ca5b6968ac5e04297c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxNTU4NQ==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r406015585", "bodyText": "private", "author": "highker", "createdAt": "2020-04-09T07:43:45Z", "path": "presto-pinot-toolkit/src/main/java/com/facebook/presto/pinot/PinotPushdownUtils.java", "diffHunk": "@@ -163,6 +183,55 @@ public ExpressionType getExpressionType()\n         return nodeBuilder.build();\n     }\n \n+    /**\n+     * Try to push down query like: `SELECT count(distinct $COLUMN) FROM myTable` to Pinot as `SELECT distinctCount($COLUMN) FROM myTable`.\n+     * This function only handles the case of an AggregationNode (COUNT on $COLUMN) on top of an AggregationNode(of non-aggregate on $COLUMN).\n+     *\n+     * @param nodeBuilder\n+     * @param aggregationNode\n+     * @param outputColumn\n+     * @param aggregation\n+     * @return true if push down successfully otherwise false.\n+     */\n+    private static boolean handlePushDownSingleDistinctCount(ImmutableList.Builder<AggregationColumnNode> nodeBuilder, AggregationNode aggregationNode, VariableReferenceExpression outputColumn, AggregationNode.Aggregation aggregation)\n+    {\n+        if (!aggregation.getCall().getDisplayName().equalsIgnoreCase(COUNT_FUNCTION_NAME)) {\n+            return false;\n+        }\n+        List<RowExpression> arguments = aggregation.getCall().getArguments();\n+        if (arguments.size() != 1) {\n+            return false;\n+        }\n+        RowExpression aggregationArgument = arguments.get(0);\n+        // Handle the case of Count Aggregation on top of a Non-Agg GroupBy Aggregation.\n+        if (!(aggregationNode.getSource() instanceof AggregationNode)) {\n+            return false;\n+        }\n+        AggregationNode sourceAggregationNode = (AggregationNode) aggregationNode.getSource();\n+        Set<String> sourceAggregationGroupSet = getGroupKeys(sourceAggregationNode.getGroupingKeys());\n+        Set<String> aggregationGroupSet = getGroupKeys(aggregationNode.getGroupingKeys());\n+        aggregationGroupSet.add(aggregationArgument.toString());\n+        if (!sourceAggregationGroupSet.containsAll(aggregationGroupSet) && aggregationGroupSet.containsAll(sourceAggregationGroupSet)) {\n+            return false;\n+        }\n+        nodeBuilder.add(\n+                new AggregationFunctionColumnNode(\n+                        outputColumn,\n+                        new CallExpression(\n+                                PINOT_DISTINCT_COUNT_FUNCTION_NAME,\n+                                aggregation.getFunctionHandle(),\n+                                aggregation.getCall().getType(),\n+                                ImmutableList.of(aggregationArgument))));\n+        return true;\n+    }\n+\n+    public static Set<String> getGroupKeys(List<VariableReferenceExpression> groupingKeys)", "originalCommit": "62fc19899ebb26212e1649ca5b6968ac5e04297c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxNjkyNg==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r406016926", "bodyText": "rename function v to variable....", "author": "highker", "createdAt": "2020-04-09T07:46:27Z", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGenerator.java", "diffHunk": "@@ -131,6 +142,56 @@ public void testCountStar()\n         testUnaryAggregationHelper((planBuilder, aggregationBuilder) -> aggregationBuilder.addAggregation(planBuilder.variable(\"agg\"), getRowExpression(\"count(*)\", defaultSessionHolder)), \"count(*)\");\n     }\n \n+    @Test\n+    public void testDistinctCountPushdown()\n+    {\n+        PlanNode justScan = buildPlan(planBuilder -> tableScan(planBuilder, pinotTable, regionId, secondsSinceEpoch, city, fare));\n+        PlanNode distinctAggregation = buildPlan(planBuilder -> planBuilder.aggregation(aggBuilder -> aggBuilder.source(justScan).singleGroupingSet(v(\"regionid\"))));", "originalCommit": "62fc19899ebb26212e1649ca5b6968ac5e04297c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxNzIyOQ==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r406017229", "bodyText": "put one param per line and the first line without any param", "author": "highker", "createdAt": "2020-04-09T07:47:03Z", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGenerator.java", "diffHunk": "@@ -131,6 +142,56 @@ public void testCountStar()\n         testUnaryAggregationHelper((planBuilder, aggregationBuilder) -> aggregationBuilder.addAggregation(planBuilder.variable(\"agg\"), getRowExpression(\"count(*)\", defaultSessionHolder)), \"count(*)\");\n     }\n \n+    @Test\n+    public void testDistinctCountPushdown()\n+    {\n+        PlanNode justScan = buildPlan(planBuilder -> tableScan(planBuilder, pinotTable, regionId, secondsSinceEpoch, city, fare));\n+        PlanNode distinctAggregation = buildPlan(planBuilder -> planBuilder.aggregation(aggBuilder -> aggBuilder.source(justScan).singleGroupingSet(v(\"regionid\"))));\n+        testPQL(planBuilder -> planBuilder.aggregation(aggBuilder -> aggBuilder.source(distinctAggregation).globalGrouping().addAggregation(v(\"count_regionid\"), getRowExpression(\"count(regionid)\", defaultSessionHolder))),", "originalCommit": "62fc19899ebb26212e1649ca5b6968ac5e04297c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxNzI1OA==", "url": "https://github.com/prestodb/presto/pull/14341#discussion_r406017258", "bodyText": "put one param per line and the first line without any param", "author": "highker", "createdAt": "2020-04-09T07:47:07Z", "path": "presto-pinot-toolkit/src/test/java/com/facebook/presto/pinot/query/TestPinotQueryGenerator.java", "diffHunk": "@@ -131,6 +142,56 @@ public void testCountStar()\n         testUnaryAggregationHelper((planBuilder, aggregationBuilder) -> aggregationBuilder.addAggregation(planBuilder.variable(\"agg\"), getRowExpression(\"count(*)\", defaultSessionHolder)), \"count(*)\");\n     }\n \n+    @Test\n+    public void testDistinctCountPushdown()\n+    {\n+        PlanNode justScan = buildPlan(planBuilder -> tableScan(planBuilder, pinotTable, regionId, secondsSinceEpoch, city, fare));\n+        PlanNode distinctAggregation = buildPlan(planBuilder -> planBuilder.aggregation(aggBuilder -> aggBuilder.source(justScan).singleGroupingSet(v(\"regionid\"))));\n+        testPQL(planBuilder -> planBuilder.aggregation(aggBuilder -> aggBuilder.source(distinctAggregation).globalGrouping().addAggregation(v(\"count_regionid\"), getRowExpression(\"count(regionid)\", defaultSessionHolder))),\n+                \"SELECT DISTINCTCOUNT(regionId) FROM realtimeOnly\");\n+    }\n+\n+    @Test\n+    public void testDistinctCountGroupByPushdown()\n+    {\n+        PlanNode justScan = buildPlan(planBuilder -> tableScan(planBuilder, pinotTable, regionId, secondsSinceEpoch, city, fare));\n+        PlanNode distinctAggregation = buildPlan(planBuilder -> planBuilder.aggregation(aggBuilder -> aggBuilder.source(justScan).singleGroupingSet(v(\"city\"), v(\"regionid\"))));\n+        testPQL(planBuilder -> planBuilder.aggregation(aggBuilder -> aggBuilder.source(distinctAggregation).singleGroupingSet(v(\"city\")).addAggregation(v(\"count_regionid\"), getRowExpression(\"count(regionid)\", defaultSessionHolder))),", "originalCommit": "62fc19899ebb26212e1649ca5b6968ac5e04297c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0e4ec97c67dbc2224063fa9490513e322ce11f04", "url": "https://github.com/prestodb/presto/commit/0e4ec97c67dbc2224063fa9490513e322ce11f04", "message": "Best effort to push down distinct count function to pinot", "committedDate": "2020-04-09T07:59:47Z", "type": "commit"}, {"oid": "0e4ec97c67dbc2224063fa9490513e322ce11f04", "url": "https://github.com/prestodb/presto/commit/0e4ec97c67dbc2224063fa9490513e322ce11f04", "message": "Best effort to push down distinct count function to pinot", "committedDate": "2020-04-09T07:59:47Z", "type": "forcePushed"}]}