{"pr_number": 14303, "pr_title": "Extract common subexpression in page projection at codegen", "pr_createdAt": "2020-03-28T00:09:15Z", "pr_url": "https://github.com/prestodb/presto/pull/14303", "timeline": [{"oid": "d8ce0b2c1c66df6e1931211e3f8161644e286804", "url": "https://github.com/prestodb/presto/commit/d8ce0b2c1c66df6e1931211e3f8161644e286804", "message": "Prototype common sub expression", "committedDate": "2020-03-31T01:15:02Z", "type": "forcePushed"}, {"oid": "946081ed93d3b079f625e8eabb83f0dc09c2334c", "url": "https://github.com/prestodb/presto/commit/946081ed93d3b079f625e8eabb83f0dc09c2334c", "message": "Prototype common sub expression", "committedDate": "2020-03-31T18:38:39Z", "type": "forcePushed"}, {"oid": "7ff097ced412410a277176e43d11591d665ed64c", "url": "https://github.com/prestodb/presto/commit/7ff097ced412410a277176e43d11591d665ed64c", "message": "Prototype common sub expression", "committedDate": "2020-03-31T18:49:33Z", "type": "forcePushed"}, {"oid": "66994e59285ba121b8a1eea26230a75d35db536d", "url": "https://github.com/prestodb/presto/commit/66994e59285ba121b8a1eea26230a75d35db536d", "message": "Prototype common sub expression", "committedDate": "2020-04-01T17:35:00Z", "type": "forcePushed"}, {"oid": "4bb98e645febaec592457914a8fa3fcbddf36d8b", "url": "https://github.com/prestodb/presto/commit/4bb98e645febaec592457914a8fa3fcbddf36d8b", "message": "Prototype common sub expression", "committedDate": "2020-04-01T18:04:37Z", "type": "forcePushed"}, {"oid": "f530635764adad741943d6fdda11e34c41b4d45f", "url": "https://github.com/prestodb/presto/commit/f530635764adad741943d6fdda11e34c41b4d45f", "message": "Prototype common sub expression", "committedDate": "2020-04-06T19:28:55Z", "type": "forcePushed"}, {"oid": "e3bee69b07a37d470e2887452a4a702da42f0796", "url": "https://github.com/prestodb/presto/commit/e3bee69b07a37d470e2887452a4a702da42f0796", "message": "Refactor PageProjection to produce List<Block>", "committedDate": "2020-04-07T03:35:56Z", "type": "forcePushed"}, {"oid": "19da110d730d18f4e51269a5d8b4b3b47cc6d5a3", "url": "https://github.com/prestodb/presto/commit/19da110d730d18f4e51269a5d8b4b3b47cc6d5a3", "message": "Refactor PageProjection to produce List<Block>", "committedDate": "2020-04-07T06:23:25Z", "type": "forcePushed"}, {"oid": "cbd39b8bfe46b9236213d9076c2adcb937c9eca1", "url": "https://github.com/prestodb/presto/commit/cbd39b8bfe46b9236213d9076c2adcb937c9eca1", "message": "Allow PageProjection to produce List<Block>", "committedDate": "2020-04-07T06:30:40Z", "type": "forcePushed"}, {"oid": "b1760988234e10d46abb30912b402d6c9db7264e", "url": "https://github.com/prestodb/presto/commit/b1760988234e10d46abb30912b402d6c9db7264e", "message": "Allow PageProjection to produce List<Block>", "committedDate": "2020-04-07T19:11:42Z", "type": "forcePushed"}, {"oid": "6718851a5a9999dd75b65676391ce63d32715969", "url": "https://github.com/prestodb/presto/commit/6718851a5a9999dd75b65676391ce63d32715969", "message": "Allow PageProjection to produce List<Block>", "committedDate": "2020-04-07T19:43:09Z", "type": "forcePushed"}, {"oid": "38cf17c09fdfd7699cdf037f4652a79a5b3fe08e", "url": "https://github.com/prestodb/presto/commit/38cf17c09fdfd7699cdf037f4652a79a5b3fe08e", "message": "Allow PageProjection to produce List<Block>", "committedDate": "2020-04-07T21:57:09Z", "type": "forcePushed"}, {"oid": "f4931f696b30b6d424a2a88ea7ac174081c238e9", "url": "https://github.com/prestodb/presto/commit/f4931f696b30b6d424a2a88ea7ac174081c238e9", "message": "Add API in PageFunctionCompiler to compile a list of projections", "committedDate": "2020-04-08T01:28:05Z", "type": "forcePushed"}, {"oid": "6eecccd7e728b621c597fca5685eeb4da9844c7f", "url": "https://github.com/prestodb/presto/commit/6eecccd7e728b621c597fca5685eeb4da9844c7f", "message": "Generate projection bytecode based on common sub expression", "committedDate": "2020-04-10T23:15:26Z", "type": "forcePushed"}, {"oid": "e1eb3c66da2be75bc9b32358ff82a3b82242952f", "url": "https://github.com/prestodb/presto/commit/e1eb3c66da2be75bc9b32358ff82a3b82242952f", "message": "Generate projection bytecode based on common sub expression", "committedDate": "2020-04-11T04:31:03Z", "type": "forcePushed"}, {"oid": "723ec6a2c244d1621fda956c30d334be0b1603ed", "url": "https://github.com/prestodb/presto/commit/723ec6a2c244d1621fda956c30d334be0b1603ed", "message": "Add CSE logging for testing (testing only will remove)", "committedDate": "2020-04-11T04:32:48Z", "type": "forcePushed"}, {"oid": "7b9af11c81fb2a9ec18b3e0dabf10d1f1f175d1b", "url": "https://github.com/prestodb/presto/commit/7b9af11c81fb2a9ec18b3e0dabf10d1f1f175d1b", "message": "Add CSE logging for testing (testing only will remove)", "committedDate": "2020-04-13T20:01:21Z", "type": "forcePushed"}, {"oid": "a0faed75a168b4a6fee70fca7372f2619bc535e1", "url": "https://github.com/prestodb/presto/commit/a0faed75a168b4a6fee70fca7372f2619bc535e1", "message": "Performance benchmark for common sub expression projection\n\nBenchmark                             (dictionaryBlocks)  (functionType)  (optimizeCommonSubExpression)  Mode  Cnt        Score       Error  Units\nCommonSubExpressionBenchmark.compute                true            json                           true  avgt   20     9633.238 \u00b1   395.197  ns/op\nCommonSubExpressionBenchmark.compute                true            json                          false  avgt   20    10515.592 \u00b1   409.112  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                           true  avgt   20     4345.824 \u00b1   224.361  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                          false  avgt   20     4989.348 \u00b1   178.232  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                           true  avgt   20     4335.683 \u00b1   142.163  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                          false  avgt   20     5079.818 \u00b1   226.231  ns/op\nCommonSubExpressionBenchmark.compute               false            json                           true  avgt   20  1306270.790 \u00b1 45640.515  ns/op\nCommonSubExpressionBenchmark.compute               false            json                          false  avgt   20  1757459.750 \u00b1 89664.951  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                           true  avgt   20    11733.285 \u00b1   621.099  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                          false  avgt   20    12266.889 \u00b1   408.858  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                           true  avgt   20   101828.239 \u00b1  2372.572  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                          false  avgt   20   133340.871 \u00b1  4959.539  ns/op", "committedDate": "2020-04-14T19:52:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4MjgwNA==", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r409082804", "bodyText": "int channel", "author": "highker", "createdAt": "2020-04-15T19:29:25Z", "path": "presto-main/src/main/java/com/facebook/presto/operator/project/PageProcessor.java", "diffHunk": "@@ -283,32 +295,39 @@ private ProcessBatchResult processBatch(int batchSize)\n                 }\n \n                 // if possible, use previouslyComputedResults produced in prior optimistic failure attempt\n-                PageProjection projection = projections.get(i);\n-                if (previouslyComputedResults[i] != null && previouslyComputedResults[i].getPositionCount() >= batchSize) {\n-                    blocks[i] = previouslyComputedResults[i].getRegion(0, batchSize);\n+                int[] outputChannels = projection.getOutputChannels();\n+                // The progress on all output channels of a projection should be the same, so we just use the first one.\n+                if (previouslyComputedResults[outputChannels[0]] != null && previouslyComputedResults[outputChannels[0]].getPositionCount() >= batchSize) {\n+                    for (Integer channel : outputChannels) {", "originalCommit": "837fa3721c77492d94d1fbbe7f2c80212edd3bc2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4b484fe748adee59ce4e150ed52ebdee95be7bcd", "url": "https://github.com/prestodb/presto/commit/4b484fe748adee59ce4e150ed52ebdee95be7bcd", "message": "Add CSE logging for testing (testing only will remove)", "committedDate": "2020-04-15T20:30:23Z", "type": "forcePushed"}, {"oid": "fa7f31d3adfcb1a5efcac52d9605dd30a413344f", "url": "https://github.com/prestodb/presto/commit/fa7f31d3adfcb1a5efcac52d9605dd30a413344f", "message": "Add CSE logging for testing (testing only will remove)", "committedDate": "2020-04-15T20:41:52Z", "type": "forcePushed"}, {"oid": "bad9a818f1ceb2353b719024906d7b349e2850a7", "url": "https://github.com/prestodb/presto/commit/bad9a818f1ceb2353b719024906d7b349e2850a7", "message": "Add CSE logging for testing (testing only will remove)", "committedDate": "2020-04-15T22:09:53Z", "type": "forcePushed"}, {"oid": "bdbc6b007b39d13e67b178aef8f0b5dd5d317150", "url": "https://github.com/prestodb/presto/commit/bdbc6b007b39d13e67b178aef8f0b5dd5d317150", "message": "Add CSE logging for testing (testing only will remove)", "committedDate": "2020-04-20T21:27:57Z", "type": "forcePushed"}, {"oid": "95ba58a7998b7bd2f4ab9b6fe4cbfb1b3a8e1b4e", "url": "https://github.com/prestodb/presto/commit/95ba58a7998b7bd2f4ab9b6fe4cbfb1b3a8e1b4e", "message": "Performance benchmark for common sub expression projection\n\nBenchmark                             (dictionaryBlocks)  (functionType)  (optimizeCommonSubExpression)  Mode  Cnt        Score       Error  Units\nCommonSubExpressionBenchmark.compute                true            json                           true  avgt   20     9633.238 \u00b1   395.197  ns/op\nCommonSubExpressionBenchmark.compute                true            json                          false  avgt   20    10515.592 \u00b1   409.112  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                           true  avgt   20     4345.824 \u00b1   224.361  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                          false  avgt   20     4989.348 \u00b1   178.232  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                           true  avgt   20     4335.683 \u00b1   142.163  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                          false  avgt   20     5079.818 \u00b1   226.231  ns/op\nCommonSubExpressionBenchmark.compute               false            json                           true  avgt   20  1306270.790 \u00b1 45640.515  ns/op\nCommonSubExpressionBenchmark.compute               false            json                          false  avgt   20  1757459.750 \u00b1 89664.951  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                           true  avgt   20    11733.285 \u00b1   621.099  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                          false  avgt   20    12266.889 \u00b1   408.858  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                           true  avgt   20   101828.239 \u00b1  2372.572  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                          false  avgt   20   133340.871 \u00b1  4959.539  ns/op", "committedDate": "2020-04-20T23:39:06Z", "type": "forcePushed"}, {"oid": "4b9e90b8493cf32c293ff9b82519ed6b3133b7bc", "url": "https://github.com/prestodb/presto/commit/4b9e90b8493cf32c293ff9b82519ed6b3133b7bc", "message": "Add CSE logging for testing (testing only will remove)", "committedDate": "2020-04-21T03:24:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMjA3Mw==", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r412702073", "bodyText": "hmmmm under what circumstances will we skip the end label?", "author": "highker", "createdAt": "2020-04-22T06:22:58Z", "path": "presto-bytecode/src/main/java/com/facebook/presto/bytecode/control/SwitchStatement.java", "diffHunk": "@@ -41,23 +41,31 @@ public static SwitchBuilder switchBuilder()\n         return new SwitchBuilder();\n     }\n \n+    public static SwitchBuilder switchBuilder(boolean skipEndLabel)\n+    {\n+        return new SwitchBuilder(skipEndLabel);\n+    }\n+\n     private final LabelNode endLabel = new LabelNode(\"switchEnd\");\n     private final LabelNode defaultLabel = new LabelNode(\"switchDefault\");\n     private final String comment;\n     private final BytecodeExpression expression;\n     private final SortedSet<CaseStatement> cases;\n     private final BytecodeNode defaultBody;\n+    private final boolean skipEndLabel;\n \n     private SwitchStatement(\n             String comment,\n             BytecodeExpression expression,\n             Iterable<CaseStatement> cases,\n-            BytecodeNode defaultBody)\n+            BytecodeNode defaultBody,\n+            boolean skipEndLabel)", "originalCommit": "956d82c8b6d2b0f3224dd2c8a9fc0f54caa5eadc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyMzE4OQ==", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r413423189", "bodyText": "Was using switch statement to generate goto label at the end of cse evaluation. Because each case is a GOTO there's no need for another GOTO. @kaikalur was complaining about the generated bytecode looks strange so I added this. Anyways this change is removed as I'm abandoning the switch + GOTO approach and opted for cse evaluation functions instead.", "author": "rongrong", "createdAt": "2020-04-23T00:28:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMjA3Mw=="}], "type": "inlineReview"}, {"oid": "3e42abdc7f734870575f5964ca25fee32838bac8", "url": "https://github.com/prestodb/presto/commit/3e42abdc7f734870575f5964ca25fee32838bac8", "message": "Add CSE logging for testing (testing only will remove)", "committedDate": "2020-04-22T22:46:44Z", "type": "forcePushed"}, {"oid": "c28e19cff6f361335aee76dd6a9493fd3776b320", "url": "https://github.com/prestodb/presto/commit/c28e19cff6f361335aee76dd6a9493fd3776b320", "message": "Add CSE logging for testing (testing only will remove)", "committedDate": "2020-04-23T01:00:36Z", "type": "forcePushed"}, {"oid": "7f9623da934b65e3dc5ab0ca78dee8576d121263", "url": "https://github.com/prestodb/presto/commit/7f9623da934b65e3dc5ab0ca78dee8576d121263", "message": "Add CSE logging for testing (testing only will remove)", "committedDate": "2020-04-23T02:59:26Z", "type": "forcePushed"}, {"oid": "3d892f282ec0181f371ad089de8af657775fe788", "url": "https://github.com/prestodb/presto/commit/3d892f282ec0181f371ad089de8af657775fe788", "message": "Add CSE logging for testing (testing only will remove)", "committedDate": "2020-04-23T03:24:23Z", "type": "forcePushed"}, {"oid": "936e3744f9cee997c953584aa66749e1700e174c", "url": "https://github.com/prestodb/presto/commit/936e3744f9cee997c953584aa66749e1700e174c", "message": "Add CSE logging for testing (testing only will remove)", "committedDate": "2020-04-23T19:27:59Z", "type": "forcePushed"}, {"oid": "792de9d82270d2e5c58da135759e20882de52821", "url": "https://github.com/prestodb/presto/commit/792de9d82270d2e5c58da135759e20882de52821", "message": "Add CSE logging for testing (testing only will remove)", "committedDate": "2020-04-23T19:42:42Z", "type": "forcePushed"}, {"oid": "fb713d45275193f987f52113075e981f5a39051a", "url": "https://github.com/prestodb/presto/commit/fb713d45275193f987f52113075e981f5a39051a", "message": "Add CSE logging for testing (testing only will remove)", "committedDate": "2020-04-23T20:22:44Z", "type": "forcePushed"}, {"oid": "b4e75c8b90284266381dc929450e4f22bf450c84", "url": "https://github.com/prestodb/presto/commit/b4e75c8b90284266381dc929450e4f22bf450c84", "message": "Add CSE logging for testing (testing only will remove)", "committedDate": "2020-04-24T00:03:32Z", "type": "forcePushed"}, {"oid": "57269af89e11a5fed1657b1e462dea66ecbf913b", "url": "https://github.com/prestodb/presto/commit/57269af89e11a5fed1657b1e462dea66ecbf913b", "message": "Performance benchmark for common sub expression projection\n\nBenchmark                             (dictionaryBlocks)  (functionType)  (optimizeCommonSubExpression)  Mode  Cnt        Score       Error  Units\nCommonSubExpressionBenchmark.compute                true            json                           true  avgt   20     9633.238 \u00b1   395.197  ns/op\nCommonSubExpressionBenchmark.compute                true            json                          false  avgt   20    10515.592 \u00b1   409.112  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                           true  avgt   20     4345.824 \u00b1   224.361  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                          false  avgt   20     4989.348 \u00b1   178.232  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                           true  avgt   20     4335.683 \u00b1   142.163  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                          false  avgt   20     5079.818 \u00b1   226.231  ns/op\nCommonSubExpressionBenchmark.compute               false            json                           true  avgt   20  1306270.790 \u00b1 45640.515  ns/op\nCommonSubExpressionBenchmark.compute               false            json                          false  avgt   20  1757459.750 \u00b1 89664.951  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                           true  avgt   20    11733.285 \u00b1   621.099  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                          false  avgt   20    12266.889 \u00b1   408.858  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                           true  avgt   20   101828.239 \u00b1  2372.572  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                          false  avgt   20   133340.871 \u00b1  4959.539  ns/op", "committedDate": "2020-04-24T21:56:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4NjgzNg==", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r415386836", "bodyText": "type(List.class, BlockBuilder.class) I guess? IIRC, without parametric, the code will be List<Object>\ncausing casting overhead. Same for many other places", "author": "highker", "createdAt": "2020-04-26T19:51:45Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -242,31 +249,33 @@ private ClassDefinition definePageProjectWorkClass(SqlFunctionProperties sqlFunc\n         CachedInstanceBinder cachedInstanceBinder = new CachedInstanceBinder(classDefinition, callSiteBinder);\n \n         // process\n-        generateProcessMethod(classDefinition, blockBuilderField, propertiesField, pageField, selectedPositionsField, nextIndexOrPositionField, resultField);\n+        generateProcessMethod(classDefinition, blockBuilderFields, projections.size(), propertiesField, pageField, selectedPositionsField, nextIndexOrPositionField, resultField);\n \n         // getResult\n         MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), \"getResult\", type(Object.class), ImmutableList.of());\n         method.getBody().append(method.getThis().getField(resultField)).ret(Object.class);\n \n         // evaluate\n-        Map<LambdaDefinitionExpression, CompiledLambda> compiledLambdaMap = generateMethodsForLambda(classDefinition, callSiteBinder, cachedInstanceBinder, projection, metadata, sqlFunctionProperties);\n-        generateEvaluateMethod(sqlFunctionProperties, classDefinition, callSiteBinder, cachedInstanceBinder, compiledLambdaMap, projection, blockBuilderField);\n+        Map<LambdaDefinitionExpression, CompiledLambda> compiledLambdaMap = generateMethodsForLambda(classDefinition, callSiteBinder, cachedInstanceBinder, projections, metadata, sqlFunctionProperties, \"\");\n+        generateEvaluateMethod(sqlFunctionProperties, classDefinition, callSiteBinder, cachedInstanceBinder, compiledLambdaMap, projections, blockBuilderFields);\n \n         // constructor\n-        Parameter blockBuilder = arg(\"blockBuilder\", BlockBuilder.class);\n+        Parameter blockBuilders = arg(\"blockBuilders\", List.class);", "originalCommit": "790306ff807826122fd01f631f9b86667886d04e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDA1NQ==", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r417010055", "bodyText": "Hmm, turns out Java being Java I still have to keep the cast.\njava.lang.NoSuchMethodError: java.util.List.get(I)Lcom/facebook/presto/spi/block/BlockBuilder;\n\nlacking real generics \ud83e\udd37\u200d\u2640\ufe0f", "author": "rongrong", "createdAt": "2020-04-29T00:49:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4NjgzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4NzQ4Mg==", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r415387482", "bodyText": "hmmmm.... why .get(0) here?", "author": "highker", "createdAt": "2020-04-26T19:55:27Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -135,7 +140,7 @@ public PageFunctionCompiler(Metadata metadata, int expressionCacheSize)\n             filterCache = CacheBuilder.newBuilder()\n                     .recordStats()\n                     .maximumSize(expressionCacheSize)\n-                    .build(CacheLoader.from(cacheKey -> compileFilterInternal(cacheKey.sqlFunctionProperties, cacheKey.rowExpression, Optional.empty())));\n+                    .build(CacheLoader.from(cacheKey -> compileFilterInternal(cacheKey.sqlFunctionProperties, cacheKey.rowExpressions.get(0), Optional.empty())));", "originalCommit": "790306ff807826122fd01f631f9b86667886d04e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwMTg5NA==", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r417001894", "bodyText": "CacheKey takes List<RowExpression> now and for filter there's one and only one expression.", "author": "rongrong", "createdAt": "2020-04-29T00:22:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4NzQ4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4NzkzMg==", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r415387932", "bodyText": "What happens to other types of RowExpressions?", "author": "highker", "createdAt": "2020-04-26T19:57:32Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -197,12 +187,29 @@ public CacheStatsMBean getFilterCache()\n             return () -> projectionFunction;\n         }\n \n-        PageFieldsToInputParametersRewriter.Result result = rewritePageFieldsToInputParameters(projection);\n+        if (projectionCache == null) {\n+            return compileProjectionInternal(sqlFunctionProperties, ImmutableList.of(projection), classNameSuffix);\n+        }\n+        return projectionCache.getUnchecked(new CacheKey(sqlFunctionProperties, ImmutableList.of(projection)));\n+    }\n+\n+    private Supplier<PageProjectionWithOutputs> toPageProjectionWithOutputs(Supplier<PageProjection> pageProjection, int[] outputChannels)\n+    {\n+        return () -> new PageProjectionWithOutputs(pageProjection.get(), outputChannels);\n+    }\n+\n+    private Supplier<PageProjection> compileProjectionInternal(SqlFunctionProperties sqlFunctionProperties, List<RowExpression> projections, Optional<String> classNameSuffix)\n+    {\n+        requireNonNull(projections, \"projections is null\");\n+        checkArgument(projections.stream().allMatch(projection -> projection instanceof CallExpression || projection instanceof SpecialFormExpression));", "originalCommit": "790306ff807826122fd01f631f9b86667886d04e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwMjQxOA==", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r417002418", "bodyText": "InputReferenceExpression and ConstantExpression are moved to compileProjection. I don't think they need to be cached.", "author": "rongrong", "createdAt": "2020-04-29T00:23:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4NzkzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4ODIzNQ==", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r415388235", "bodyText": "I guess we don't have to do a copy if the list is immutable?", "author": "highker", "createdAt": "2020-04-26T19:59:09Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -242,31 +249,33 @@ private ClassDefinition definePageProjectWorkClass(SqlFunctionProperties sqlFunc\n         CachedInstanceBinder cachedInstanceBinder = new CachedInstanceBinder(classDefinition, callSiteBinder);\n \n         // process\n-        generateProcessMethod(classDefinition, blockBuilderField, propertiesField, pageField, selectedPositionsField, nextIndexOrPositionField, resultField);\n+        generateProcessMethod(classDefinition, blockBuilderFields, projections.size(), propertiesField, pageField, selectedPositionsField, nextIndexOrPositionField, resultField);\n \n         // getResult\n         MethodDefinition method = classDefinition.declareMethod(a(PUBLIC), \"getResult\", type(Object.class), ImmutableList.of());\n         method.getBody().append(method.getThis().getField(resultField)).ret(Object.class);\n \n         // evaluate\n-        Map<LambdaDefinitionExpression, CompiledLambda> compiledLambdaMap = generateMethodsForLambda(classDefinition, callSiteBinder, cachedInstanceBinder, projection, metadata, sqlFunctionProperties);\n-        generateEvaluateMethod(sqlFunctionProperties, classDefinition, callSiteBinder, cachedInstanceBinder, compiledLambdaMap, projection, blockBuilderField);\n+        Map<LambdaDefinitionExpression, CompiledLambda> compiledLambdaMap = generateMethodsForLambda(classDefinition, callSiteBinder, cachedInstanceBinder, projections, metadata, sqlFunctionProperties, \"\");\n+        generateEvaluateMethod(sqlFunctionProperties, classDefinition, callSiteBinder, cachedInstanceBinder, compiledLambdaMap, projections, blockBuilderFields);\n \n         // constructor\n-        Parameter blockBuilder = arg(\"blockBuilder\", BlockBuilder.class);\n+        Parameter blockBuilders = arg(\"blockBuilders\", List.class);\n         Parameter properties = arg(\"properties\", SqlFunctionProperties.class);\n         Parameter page = arg(\"page\", Page.class);\n         Parameter selectedPositions = arg(\"selectedPositions\", SelectedPositions.class);\n \n-        MethodDefinition constructorDefinition = classDefinition.declareConstructor(a(PUBLIC), blockBuilder, properties, page, selectedPositions);\n+        MethodDefinition constructorDefinition = classDefinition.declareConstructor(a(PUBLIC), blockBuilders, properties, page, selectedPositions);\n \n         BytecodeBlock body = constructorDefinition.getBody();\n         Variable thisVariable = constructorDefinition.getThis();\n \n         body.comment(\"super();\")\n                 .append(thisVariable)\n                 .invokeConstructor(Object.class)\n-                .append(thisVariable.setField(blockBuilderField, blockBuilder))\n+                .append(thisVariable)\n+                .append(invokeStatic(ImmutableList.class, \"copyOf\", ImmutableList.class, blockBuilders.cast(Collection.class)))", "originalCommit": "790306ff807826122fd01f631f9b86667886d04e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwMzMyNw==", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r417003327", "bodyText": "Can't tell whether it's immutable list from the interface. But I think it's safe to do. Should I just do this.blockbuilders = blockBuilders?", "author": "rongrong", "createdAt": "2020-04-29T00:26:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM4ODIzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU5MDgwNA==", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r399590804", "bodyText": "spelling", "author": "kaikalur", "createdAt": "2020-03-28T00:13:28Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/CommonSubExpressionRewriter.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.gen;\n+\n+import com.facebook.presto.spi.relation.CallExpression;\n+import com.facebook.presto.spi.relation.ConstantExpression;\n+import com.facebook.presto.spi.relation.InputReferenceExpression;\n+import com.facebook.presto.spi.relation.LambdaDefinitionExpression;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.RowExpressionVisitor;\n+import com.facebook.presto.spi.relation.SpecialFormExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.facebook.presto.sql.planner.PlanVariableAllocator;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+\n+public class CommonSubExpressionRewriter\n+{\n+    public static Map<Integer, Map<RowExpression, VariableReferenceExpression>> rewriteWithCSEByLevel(List<RowExpression> expressions)\n+    {\n+        if (expressions.isEmpty()) {\n+            return ImmutableMap.of();\n+        }\n+\n+        CommonSubExpressionCollector expressionCollector = new CommonSubExpressionCollector();\n+        expressions.forEach(expression -> expression.accept(expressionCollector, null));\n+        Map<Integer, Set<RowExpression>> cseByLevel = expressionCollector.cseByLevel;\n+        if (cseByLevel.isEmpty()) {\n+            return ImmutableMap.of();\n+        }\n+\n+        PlanVariableAllocator variableAllocator = new PlanVariableAllocator();\n+        ImmutableMap.Builder<Integer, Map<RowExpression, VariableReferenceExpression>> commonSubExpressions = ImmutableMap.builder();\n+        Map<RowExpression, VariableReferenceExpression> rewriteWith = new HashMap<>();\n+        int startCSELevel = cseByLevel.keySet().stream().reduce(Math::min).get();\n+        int maxCSELevel = cseByLevel.keySet().stream().reduce(Math::max).get();\n+        for (int i = startCSELevel; i <= maxCSELevel; i++) {\n+            if (cseByLevel.containsKey(i)) {\n+                ExpressionRewritter rewritter = new ExpressionRewritter(rewriteWith);\n+                ImmutableMap.Builder<RowExpression, VariableReferenceExpression> expressionVariableMapBuilder = ImmutableMap.builder();\n+                for (RowExpression expression : cseByLevel.get(i)) {\n+                    RowExpression rewritten = expression.accept(rewritter, null);\n+                    expressionVariableMapBuilder.put(rewritten, variableAllocator.newVariable(rewritten));\n+                }\n+                Map<RowExpression, VariableReferenceExpression> expressionVariableMap = expressionVariableMapBuilder.build();\n+                commonSubExpressions.put(i, expressionVariableMap);\n+                rewriteWith.putAll(expressionVariableMap);\n+            }\n+        }\n+        return commonSubExpressions.build();\n+    }\n+\n+    public static Map<Integer, Map<RowExpression, VariableReferenceExpression>> rewriteWithCSEByLevel(RowExpression expression)\n+    {\n+        return rewriteWithCSEByLevel(ImmutableList.of(expression));\n+    }\n+\n+    public static RowExpression rewriteExpressionWithCSE(RowExpression expression, Map<RowExpression, VariableReferenceExpression> rewriteWith)\n+    {\n+        ExpressionRewritter rewritter = new ExpressionRewritter(rewriteWith);", "originalCommit": "7fbce588bc0f1da060b361d1fb2be97c8ee9dcf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwMzk4NQ==", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r417003985", "bodyText": "\"Rewriter\"? InteliJ said rewriter is also wrong \ud83d\ude02", "author": "rongrong", "createdAt": "2020-04-29T00:28:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU5MDgwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyOTUzMw==", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r401229533", "bodyText": "plural - expressions - will be good", "author": "kaikalur", "createdAt": "2020-03-31T21:35:32Z", "path": "presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java", "diffHunk": "@@ -149,6 +149,7 @@\n     public static final String PARTITIONING_PRECISION_STRATEGY = \"partitioning_precision_strategy\";\n     public static final String EXPERIMENTAL_FUNCTIONS_ENABLED = \"experimental_functions_enabled\";\n     public static final String USE_LEGACY_SCHEDULER = \"use_legacy_scheduler\";\n+    public static final String OPTIMIZE_COMMON_SUB_EXPRESSION = \"optimize_common_sub_expression\";", "originalCommit": "7ff097ced412410a277176e43d11591d665ed64c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5NzQyNw==", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r401697427", "bodyText": "subexpression (no underscore)\nSo\noptimize_common_subexpressions", "author": "kaikalur", "createdAt": "2020-04-01T15:18:39Z", "path": "presto-main/src/main/java/com/facebook/presto/SystemSessionProperties.java", "diffHunk": "@@ -149,6 +149,7 @@\n     public static final String PARTITIONING_PRECISION_STRATEGY = \"partitioning_precision_strategy\";\n     public static final String EXPERIMENTAL_FUNCTIONS_ENABLED = \"experimental_functions_enabled\";\n     public static final String USE_LEGACY_SCHEDULER = \"use_legacy_scheduler\";\n+    public static final String OPTIMIZE_COMMON_SUB_EXPRESSION = \"optimize_common_sub_expression\";", "originalCommit": "7ff097ced412410a277176e43d11591d665ed64c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxNzA4Mg==", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r417517082", "bodyText": "Changed to optimize_common_sub_expressions (added the \"s\" but kept the \"_\"). I don't quite like the look of isOptimizeCommonSubexprssions vs isOptimizeCommonSubExprssions\ud83d\ude02", "author": "rongrong", "createdAt": "2020-04-29T18:16:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5NzQyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg3MTYwMg==", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r415871602", "bodyText": "Please breakup complex expression for readability or one arg per line", "author": "kaikalur", "createdAt": "2020-04-27T14:41:19Z", "path": "presto-benchmark/src/main/java/com/facebook/presto/benchmark/HandTpchQuery6.java", "diffHunk": "@@ -71,12 +72,12 @@ public HandTpchQuery6(LocalQueryRunner localQueryRunner)\n         //    and quantity < 24;\n         OperatorFactory tableScanOperator = createTableScanOperator(0, new PlanNodeId(\"test\"), \"lineitem\", \"extendedprice\", \"discount\", \"shipdate\", \"quantity\");\n \n-        Supplier<PageProjection> projection = new PageFunctionCompiler(localQueryRunner.getMetadata(), 0).compileProjection(session.getSqlFunctionProperties(), field(0, BIGINT), Optional.empty());\n+        List<Supplier<PageProjectionWithOutputs>> projection = new PageFunctionCompiler(localQueryRunner.getMetadata(), 0).compileProjections(session.getSqlFunctionProperties(), ImmutableList.of(field(0, BIGINT)), false, Optional.empty());", "originalCommit": "57269af89e11a5fed1657b1e462dea66ecbf913b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg3Njc3MQ==", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r415876771", "bodyText": "Spelling", "author": "kaikalur", "createdAt": "2020-04-27T14:47:12Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/CommonSubExpressionRewriter.java", "diffHunk": "@@ -0,0 +1,324 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.sql.gen;\n+\n+import com.facebook.presto.spi.relation.CallExpression;\n+import com.facebook.presto.spi.relation.ConstantExpression;\n+import com.facebook.presto.spi.relation.InputReferenceExpression;\n+import com.facebook.presto.spi.relation.LambdaDefinitionExpression;\n+import com.facebook.presto.spi.relation.RowExpression;\n+import com.facebook.presto.spi.relation.RowExpressionVisitor;\n+import com.facebook.presto.spi.relation.SpecialFormExpression;\n+import com.facebook.presto.spi.relation.VariableReferenceExpression;\n+import com.facebook.presto.sql.planner.PlanVariableAllocator;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static com.facebook.presto.spi.relation.SpecialFormExpression.Form.WHEN;\n+import static com.facebook.presto.sql.relational.Expressions.subExpressions;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+import static java.util.function.Function.identity;\n+\n+public class CommonSubExpressionRewriter\n+{\n+    private CommonSubExpressionRewriter() {}\n+\n+    public static Map<Integer, Map<RowExpression, VariableReferenceExpression>> collectCSEByLevel(List<? extends RowExpression> expressions)\n+    {\n+        if (expressions.isEmpty()) {\n+            return ImmutableMap.of();\n+        }\n+\n+        CommonSubExpressionCollector expressionCollector = new CommonSubExpressionCollector();\n+        expressions.forEach(expression -> expression.accept(expressionCollector, null));\n+        if (expressionCollector.cseByLevel.isEmpty()) {\n+            return ImmutableMap.of();\n+        }\n+\n+        Map<Integer, Map<RowExpression, Integer>> cseByLevel = removeRedundantCSE(expressionCollector.cseByLevel, expressionCollector.expressionCount);\n+\n+        PlanVariableAllocator variableAllocator = new PlanVariableAllocator();\n+        ImmutableMap.Builder<Integer, Map<RowExpression, VariableReferenceExpression>> commonSubExpressions = ImmutableMap.builder();\n+        Map<RowExpression, VariableReferenceExpression> rewriteWith = new HashMap<>();\n+        int startCSELevel = cseByLevel.keySet().stream().reduce(Math::min).get();\n+        int maxCSELevel = cseByLevel.keySet().stream().reduce(Math::max).get();\n+        for (int i = startCSELevel; i <= maxCSELevel; i++) {\n+            if (cseByLevel.containsKey(i)) {\n+                ExpressionRewritter rewritter = new ExpressionRewritter(rewriteWith);\n+                ImmutableMap.Builder<RowExpression, VariableReferenceExpression> expressionVariableMapBuilder = ImmutableMap.builder();\n+                for (Map.Entry<RowExpression, Integer> entry : cseByLevel.get(i).entrySet()) {\n+                    RowExpression rewrittenExpression = entry.getKey().accept(rewritter, null);\n+                    expressionVariableMapBuilder.put(rewrittenExpression, variableAllocator.newVariable(rewrittenExpression, \"cse\"));\n+                }\n+                Map<RowExpression, VariableReferenceExpression> expressionVariableMap = expressionVariableMapBuilder.build();\n+                commonSubExpressions.put(i, expressionVariableMap);\n+                rewriteWith.putAll(expressionVariableMap.entrySet().stream().collect(toImmutableMap(Map.Entry::getKey, entry -> entry.getValue())));\n+            }\n+        }\n+        return commonSubExpressions.build();\n+    }\n+\n+    public static Map<Integer, Map<RowExpression, VariableReferenceExpression>> collectCSEByLevel(RowExpression expression)\n+    {\n+        return collectCSEByLevel(ImmutableList.of(expression));\n+    }\n+\n+    public static List<RowExpression> getExpressionsWithCSE(List<? extends RowExpression> expressions)\n+    {\n+        if (expressions.isEmpty()) {\n+            return ImmutableList.of();\n+        }\n+        CommonSubExpressionCollector expressionCollector = new CommonSubExpressionCollector();\n+        expressions.forEach(expression -> expression.accept(expressionCollector, null));\n+        Set<RowExpression> cse = expressionCollector.cseByLevel.values().stream().flatMap(Set::stream).collect(toImmutableSet());\n+        SubExpressionChecker subExpressionChecker = new SubExpressionChecker(cse);\n+        return expressions.stream().filter(expression -> expression.accept(subExpressionChecker, null)).collect(toImmutableList());\n+    }\n+\n+    public static RowExpression rewriteExpressionWithCSE(RowExpression expression, Map<RowExpression, VariableReferenceExpression> rewriteWith)\n+    {\n+        ExpressionRewritter rewritter = new ExpressionRewritter(rewriteWith);\n+        return expression.accept(rewritter, null);\n+    }\n+\n+    private static Map<Integer, Map<RowExpression, Integer>> removeRedundantCSE(Map<Integer, Set<RowExpression>> cseByLevel, Map<RowExpression, Integer> expressionCount)\n+    {\n+        Map<Integer, Map<RowExpression, Integer>> results = new HashMap<>();\n+        int startCSELevel = cseByLevel.keySet().stream().reduce(Math::max).get();\n+        int stopCSELevel = cseByLevel.keySet().stream().reduce(Math::min).get();\n+        for (int i = startCSELevel; i > stopCSELevel; i--) {\n+            Map<RowExpression, Integer> expressions = cseByLevel.get(i).stream().filter(expression -> expressionCount.get(expression) > 0).collect(toImmutableMap(identity(), expressionCount::get));\n+            if (!expressions.isEmpty()) {\n+                results.put(i, expressions);\n+            }\n+            for (RowExpression expression : expressions.keySet()) {\n+                int expressionOccurrence = expressionCount.get(expression);\n+                subExpressions(expression).stream()\n+                        .filter(subExpression -> !subExpression.equals(expression))\n+                        .forEach(subExpression -> {\n+                            if (expressionCount.containsKey(subExpression)) {\n+                                expressionCount.put(subExpression, expressionCount.get(subExpression) - expressionOccurrence);\n+                            }\n+                        });\n+            }\n+        }\n+        Map<RowExpression, Integer> expressions = cseByLevel.get(stopCSELevel).stream().filter(expression -> expressionCount.get(expression) > 0).collect(toImmutableMap(identity(), expression -> expressionCount.get(expression) + 1));\n+        if (!expressions.isEmpty()) {\n+            results.put(stopCSELevel, expressions);\n+        }\n+        return results;\n+    }\n+\n+    static class SubExpressionChecker\n+            implements RowExpressionVisitor<Boolean, Void>\n+    {\n+        private final Set<RowExpression> subExpressions;\n+\n+        SubExpressionChecker(Set<RowExpression> subExpressions)\n+        {\n+            this.subExpressions = subExpressions;\n+        }\n+\n+        @Override\n+        public Boolean visitCall(CallExpression call, Void context)\n+        {\n+            if (subExpressions.contains(call)) {\n+                return true;\n+            }\n+            if (call.getArguments().isEmpty()) {\n+                return false;\n+            }\n+            return call.getArguments().stream().anyMatch(expression -> expression.accept(this, null));\n+        }\n+\n+        @Override\n+        public Boolean visitInputReference(InputReferenceExpression reference, Void context)\n+        {\n+            return subExpressions.contains(reference);\n+        }\n+\n+        @Override\n+        public Boolean visitConstant(ConstantExpression literal, Void context)\n+        {\n+            return subExpressions.contains(literal);\n+        }\n+\n+        @Override\n+        public Boolean visitLambda(LambdaDefinitionExpression lambda, Void context)\n+        {\n+            return false;\n+        }\n+\n+        @Override\n+        public Boolean visitVariableReference(VariableReferenceExpression reference, Void context)\n+        {\n+            return subExpressions.contains(reference);\n+        }\n+\n+        @Override\n+        public Boolean visitSpecialForm(SpecialFormExpression specialForm, Void context)\n+        {\n+            if (subExpressions.contains(specialForm)) {\n+                return true;\n+            }\n+            if (specialForm.getArguments().isEmpty()) {\n+                return false;\n+            }\n+            return specialForm.getArguments().stream().anyMatch(expression -> expression.accept(this, null));\n+        }\n+    }\n+\n+    static class ExpressionRewritter", "originalCommit": "57269af89e11a5fed1657b1e462dea66ecbf913b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg5Mzc5MQ==", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r415893791", "bodyText": "To maintain symmetry and clean logic, keep this check in the method itself.", "author": "kaikalur", "createdAt": "2020-04-27T15:06:33Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -597,15 +777,96 @@ private static void declareBlockVariables(RowExpression expression, Parameter pa\n                 callSiteBinder);\n     }\n \n+    private static class CommonSubExpressionFields\n+    {\n+        private final FieldDefinition evaluatedField;\n+        private final FieldDefinition resultField;\n+        private final Class<?> resultType;\n+        private final String methodName;\n+\n+        public CommonSubExpressionFields(FieldDefinition evaluatedField, FieldDefinition resultField, Class<?> resultType, String methodName)\n+        {\n+            this.evaluatedField = evaluatedField;\n+            this.resultField = resultField;\n+            this.resultType = resultType;\n+            this.methodName = methodName;\n+        }\n+    }\n+\n+    private static class CSEFieldAndVariableReferenceCompiler\n+            implements RowExpressionVisitor<BytecodeNode, Scope>\n+    {\n+        private final InputReferenceCompiler inputReferenceCompiler;\n+        private final Map<VariableReferenceExpression, CommonSubExpressionFields> variableMap;\n+        private final Variable thisVariable;\n+\n+        public CSEFieldAndVariableReferenceCompiler(CallSiteBinder callSiteBinder, Map<VariableReferenceExpression, CommonSubExpressionFields> variableMap, Variable thisVariable)\n+        {\n+            this.inputReferenceCompiler = new InputReferenceCompiler(\n+                    (scope, field) -> scope.getVariable(\"block_\" + field),\n+                    (scope, field) -> scope.getVariable(\"position\"),\n+                    callSiteBinder);\n+            this.variableMap = ImmutableMap.copyOf(variableMap);\n+            this.thisVariable = thisVariable;\n+        }\n+        @Override\n+        public BytecodeNode visitCall(CallExpression call, Scope context)\n+        {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public BytecodeNode visitInputReference(InputReferenceExpression reference, Scope context)\n+        {\n+            return inputReferenceCompiler.visitInputReference(reference, context);\n+        }\n+\n+        @Override\n+        public BytecodeNode visitConstant(ConstantExpression literal, Scope context)\n+        {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public BytecodeNode visitLambda(LambdaDefinitionExpression lambda, Scope context)\n+        {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public BytecodeNode visitVariableReference(VariableReferenceExpression reference, Scope context)\n+        {\n+            CommonSubExpressionFields fields = variableMap.get(reference);\n+            IfStatement ifStatement = new IfStatement()", "originalCommit": "57269af89e11a5fed1657b1e462dea66ecbf913b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg5NDY2Ng==", "url": "https://github.com/prestodb/presto/pull/14303#discussion_r415894666", "bodyText": "Can we guarantee this is invokespecial?", "author": "kaikalur", "createdAt": "2020-04-27T15:07:39Z", "path": "presto-main/src/main/java/com/facebook/presto/sql/gen/PageFunctionCompiler.java", "diffHunk": "@@ -597,15 +777,96 @@ private static void declareBlockVariables(RowExpression expression, Parameter pa\n                 callSiteBinder);\n     }\n \n+    private static class CommonSubExpressionFields\n+    {\n+        private final FieldDefinition evaluatedField;\n+        private final FieldDefinition resultField;\n+        private final Class<?> resultType;\n+        private final String methodName;\n+\n+        public CommonSubExpressionFields(FieldDefinition evaluatedField, FieldDefinition resultField, Class<?> resultType, String methodName)\n+        {\n+            this.evaluatedField = evaluatedField;\n+            this.resultField = resultField;\n+            this.resultType = resultType;\n+            this.methodName = methodName;\n+        }\n+    }\n+\n+    private static class CSEFieldAndVariableReferenceCompiler\n+            implements RowExpressionVisitor<BytecodeNode, Scope>\n+    {\n+        private final InputReferenceCompiler inputReferenceCompiler;\n+        private final Map<VariableReferenceExpression, CommonSubExpressionFields> variableMap;\n+        private final Variable thisVariable;\n+\n+        public CSEFieldAndVariableReferenceCompiler(CallSiteBinder callSiteBinder, Map<VariableReferenceExpression, CommonSubExpressionFields> variableMap, Variable thisVariable)\n+        {\n+            this.inputReferenceCompiler = new InputReferenceCompiler(\n+                    (scope, field) -> scope.getVariable(\"block_\" + field),\n+                    (scope, field) -> scope.getVariable(\"position\"),\n+                    callSiteBinder);\n+            this.variableMap = ImmutableMap.copyOf(variableMap);\n+            this.thisVariable = thisVariable;\n+        }\n+        @Override\n+        public BytecodeNode visitCall(CallExpression call, Scope context)\n+        {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public BytecodeNode visitInputReference(InputReferenceExpression reference, Scope context)\n+        {\n+            return inputReferenceCompiler.visitInputReference(reference, context);\n+        }\n+\n+        @Override\n+        public BytecodeNode visitConstant(ConstantExpression literal, Scope context)\n+        {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public BytecodeNode visitLambda(LambdaDefinitionExpression lambda, Scope context)\n+        {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        @Override\n+        public BytecodeNode visitVariableReference(VariableReferenceExpression reference, Scope context)\n+        {\n+            CommonSubExpressionFields fields = variableMap.get(reference);\n+            IfStatement ifStatement = new IfStatement()\n+                    .condition(thisVariable.getField(fields.evaluatedField))\n+                    .ifFalse(new BytecodeBlock()\n+                            .append(thisVariable.invoke(fields.methodName, void.class, context.getVariable(\"properties\"), context.getVariable(\"page\"), context.getVariable(\"position\"))));", "originalCommit": "57269af89e11a5fed1657b1e462dea66ecbf913b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d2a64222b8976e178ac94f7d23bd770116d57a57", "url": "https://github.com/prestodb/presto/commit/d2a64222b8976e178ac94f7d23bd770116d57a57", "message": "Performance benchmark for common sub expression projection\n\nBenchmark                             (dictionaryBlocks)  (functionType)  (optimizeCommonSubExpression)  Mode  Cnt        Score       Error  Units\nCommonSubExpressionBenchmark.compute                true            json                           true  avgt   20     9633.238 \u00b1   395.197  ns/op\nCommonSubExpressionBenchmark.compute                true            json                          false  avgt   20    10515.592 \u00b1   409.112  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                           true  avgt   20     4345.824 \u00b1   224.361  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                          false  avgt   20     4989.348 \u00b1   178.232  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                           true  avgt   20     4335.683 \u00b1   142.163  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                          false  avgt   20     5079.818 \u00b1   226.231  ns/op\nCommonSubExpressionBenchmark.compute               false            json                           true  avgt   20  1306270.790 \u00b1 45640.515  ns/op\nCommonSubExpressionBenchmark.compute               false            json                          false  avgt   20  1757459.750 \u00b1 89664.951  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                           true  avgt   20    11733.285 \u00b1   621.099  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                          false  avgt   20    12266.889 \u00b1   408.858  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                           true  avgt   20   101828.239 \u00b1  2372.572  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                          false  avgt   20   133340.871 \u00b1  4959.539  ns/op", "committedDate": "2020-04-29T17:48:12Z", "type": "forcePushed"}, {"oid": "d772fa4d3d0d43634d7a5a537fb59ea6f318f724", "url": "https://github.com/prestodb/presto/commit/d772fa4d3d0d43634d7a5a537fb59ea6f318f724", "message": "Performance benchmark for common sub expression projection\n\nBenchmark                             (dictionaryBlocks)  (functionType)  (optimizeCommonSubExpression)  Mode  Cnt        Score       Error  Units\nCommonSubExpressionBenchmark.compute                true            json                           true  avgt   20     9633.238 \u00b1   395.197  ns/op\nCommonSubExpressionBenchmark.compute                true            json                          false  avgt   20    10515.592 \u00b1   409.112  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                           true  avgt   20     4345.824 \u00b1   224.361  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                          false  avgt   20     4989.348 \u00b1   178.232  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                           true  avgt   20     4335.683 \u00b1   142.163  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                          false  avgt   20     5079.818 \u00b1   226.231  ns/op\nCommonSubExpressionBenchmark.compute               false            json                           true  avgt   20  1306270.790 \u00b1 45640.515  ns/op\nCommonSubExpressionBenchmark.compute               false            json                          false  avgt   20  1757459.750 \u00b1 89664.951  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                           true  avgt   20    11733.285 \u00b1   621.099  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                          false  avgt   20    12266.889 \u00b1   408.858  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                           true  avgt   20   101828.239 \u00b1  2372.572  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                          false  avgt   20   133340.871 \u00b1  4959.539  ns/op", "committedDate": "2020-04-29T18:13:56Z", "type": "forcePushed"}, {"oid": "e5d4b030e8de0a6d9dc045c7a811a19c3f51889a", "url": "https://github.com/prestodb/presto/commit/e5d4b030e8de0a6d9dc045c7a811a19c3f51889a", "message": "Performance benchmark for common sub expression projection\n\nBenchmark                             (dictionaryBlocks)  (functionType)  (optimizeCommonSubExpression)  Mode  Cnt        Score       Error  Units\nCommonSubExpressionBenchmark.compute                true            json                           true  avgt   20     9633.238 \u00b1   395.197  ns/op\nCommonSubExpressionBenchmark.compute                true            json                          false  avgt   20    10515.592 \u00b1   409.112  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                           true  avgt   20     4345.824 \u00b1   224.361  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                          false  avgt   20     4989.348 \u00b1   178.232  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                           true  avgt   20     4335.683 \u00b1   142.163  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                          false  avgt   20     5079.818 \u00b1   226.231  ns/op\nCommonSubExpressionBenchmark.compute               false            json                           true  avgt   20  1306270.790 \u00b1 45640.515  ns/op\nCommonSubExpressionBenchmark.compute               false            json                          false  avgt   20  1757459.750 \u00b1 89664.951  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                           true  avgt   20    11733.285 \u00b1   621.099  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                          false  avgt   20    12266.889 \u00b1   408.858  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                           true  avgt   20   101828.239 \u00b1  2372.572  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                          false  avgt   20   133340.871 \u00b1  4959.539  ns/op", "committedDate": "2020-04-29T18:29:52Z", "type": "forcePushed"}, {"oid": "4369099cd3aaed5e2870418b519dd54642657a30", "url": "https://github.com/prestodb/presto/commit/4369099cd3aaed5e2870418b519dd54642657a30", "message": "Change PageProjection to produce List<Block>", "committedDate": "2020-04-30T20:00:29Z", "type": "commit"}, {"oid": "a518852d5e3f1986fdfb3cef7a8701c6ecb07041", "url": "https://github.com/prestodb/presto/commit/a518852d5e3f1986fdfb3cef7a8701c6ecb07041", "message": "Add API in PageFunctionCompiler to compile a list of projections", "committedDate": "2020-04-30T20:00:29Z", "type": "commit"}, {"oid": "a3a39866678131e30c49516c04c1af617f4f57a2", "url": "https://github.com/prestodb/presto/commit/a3a39866678131e30c49516c04c1af617f4f57a2", "message": "Remove PageProjection::getType", "committedDate": "2020-04-30T20:00:29Z", "type": "commit"}, {"oid": "9e36c801ac4fe51b1c89a0ec002e921989df50f1", "url": "https://github.com/prestodb/presto/commit/9e36c801ac4fe51b1c89a0ec002e921989df50f1", "message": "Change PageFunctionCompiler to compile a list of projections", "committedDate": "2020-04-30T20:00:29Z", "type": "commit"}, {"oid": "5990f72e31b87e9e6948211a20b35ea4a355d956", "url": "https://github.com/prestodb/presto/commit/5990f72e31b87e9e6948211a20b35ea4a355d956", "message": "Performance benchmark for common sub expression projection\n\nBenchmark                             (dictionaryBlocks)  (functionType)  (optimizeCommonSubExpression)  Mode  Cnt        Score       Error  Units\nCommonSubExpressionBenchmark.compute                true            json                           true  avgt   20     9633.238 \u00b1   395.197  ns/op\nCommonSubExpressionBenchmark.compute                true            json                          false  avgt   20    10515.592 \u00b1   409.112  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                           true  avgt   20     4345.824 \u00b1   224.361  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                          false  avgt   20     4989.348 \u00b1   178.232  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                           true  avgt   20     4335.683 \u00b1   142.163  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                          false  avgt   20     5079.818 \u00b1   226.231  ns/op\nCommonSubExpressionBenchmark.compute               false            json                           true  avgt   20  1306270.790 \u00b1 45640.515  ns/op\nCommonSubExpressionBenchmark.compute               false            json                          false  avgt   20  1757459.750 \u00b1 89664.951  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                           true  avgt   20    11733.285 \u00b1   621.099  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                          false  avgt   20    12266.889 \u00b1   408.858  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                           true  avgt   20   101828.239 \u00b1  2372.572  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                          false  avgt   20   133340.871 \u00b1  4959.539  ns/op", "committedDate": "2020-04-30T20:00:45Z", "type": "forcePushed"}, {"oid": "0cfd30fdd16319dced15f32141385b1775420766", "url": "https://github.com/prestodb/presto/commit/0cfd30fdd16319dced15f32141385b1775420766", "message": "Generate projection bytecode based on common sub expression", "committedDate": "2020-04-30T20:29:52Z", "type": "commit"}, {"oid": "de77438330d4a54ac6e366cfbcabe7ca0c9be189", "url": "https://github.com/prestodb/presto/commit/de77438330d4a54ac6e366cfbcabe7ca0c9be189", "message": "Performance benchmark for common sub expression projection\n\nBenchmark                             (dictionaryBlocks)  (functionType)  (optimizeCommonSubExpression)  Mode  Cnt        Score       Error  Units\nCommonSubExpressionBenchmark.compute                true            json                           true  avgt   20     9633.238 \u00b1   395.197  ns/op\nCommonSubExpressionBenchmark.compute                true            json                          false  avgt   20    10515.592 \u00b1   409.112  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                           true  avgt   20     4345.824 \u00b1   224.361  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                          false  avgt   20     4989.348 \u00b1   178.232  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                           true  avgt   20     4335.683 \u00b1   142.163  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                          false  avgt   20     5079.818 \u00b1   226.231  ns/op\nCommonSubExpressionBenchmark.compute               false            json                           true  avgt   20  1306270.790 \u00b1 45640.515  ns/op\nCommonSubExpressionBenchmark.compute               false            json                          false  avgt   20  1757459.750 \u00b1 89664.951  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                           true  avgt   20    11733.285 \u00b1   621.099  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                          false  avgt   20    12266.889 \u00b1   408.858  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                           true  avgt   20   101828.239 \u00b1  2372.572  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                          false  avgt   20   133340.871 \u00b1  4959.539  ns/op", "committedDate": "2020-04-30T20:29:52Z", "type": "commit"}, {"oid": "de77438330d4a54ac6e366cfbcabe7ca0c9be189", "url": "https://github.com/prestodb/presto/commit/de77438330d4a54ac6e366cfbcabe7ca0c9be189", "message": "Performance benchmark for common sub expression projection\n\nBenchmark                             (dictionaryBlocks)  (functionType)  (optimizeCommonSubExpression)  Mode  Cnt        Score       Error  Units\nCommonSubExpressionBenchmark.compute                true            json                           true  avgt   20     9633.238 \u00b1   395.197  ns/op\nCommonSubExpressionBenchmark.compute                true            json                          false  avgt   20    10515.592 \u00b1   409.112  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                           true  avgt   20     4345.824 \u00b1   224.361  ns/op\nCommonSubExpressionBenchmark.compute                true          bigint                          false  avgt   20     4989.348 \u00b1   178.232  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                           true  avgt   20     4335.683 \u00b1   142.163  ns/op\nCommonSubExpressionBenchmark.compute                true         varchar                          false  avgt   20     5079.818 \u00b1   226.231  ns/op\nCommonSubExpressionBenchmark.compute               false            json                           true  avgt   20  1306270.790 \u00b1 45640.515  ns/op\nCommonSubExpressionBenchmark.compute               false            json                          false  avgt   20  1757459.750 \u00b1 89664.951  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                           true  avgt   20    11733.285 \u00b1   621.099  ns/op\nCommonSubExpressionBenchmark.compute               false          bigint                          false  avgt   20    12266.889 \u00b1   408.858  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                           true  avgt   20   101828.239 \u00b1  2372.572  ns/op\nCommonSubExpressionBenchmark.compute               false         varchar                          false  avgt   20   133340.871 \u00b1  4959.539  ns/op", "committedDate": "2020-04-30T20:29:52Z", "type": "forcePushed"}]}