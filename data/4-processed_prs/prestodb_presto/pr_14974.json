{"pr_number": 14974, "pr_title": "Rename files written by PageSink", "pr_createdAt": "2020-08-06T02:18:14Z", "pr_url": "https://github.com/prestodb/presto/pull/14974", "timeline": [{"oid": "5b2a34e2cfe0a6b6e8cb907edcc8db15d26b39e8", "url": "https://github.com/prestodb/presto/commit/5b2a34e2cfe0a6b6e8cb907edcc8db15d26b39e8", "message": "Rename files written by PageSink", "committedDate": "2020-08-06T21:41:09Z", "type": "forcePushed"}, {"oid": "3e915b5ad0e6bdfc75d56646ea4328ec2e202d93", "url": "https://github.com/prestodb/presto/commit/3e915b5ad0e6bdfc75d56646ea4328ec2e202d93", "message": "Rename files written by PageSink", "committedDate": "2020-08-07T00:26:45Z", "type": "forcePushed"}, {"oid": "0424516a187ccd553533d905c31eb9f1495b6907", "url": "https://github.com/prestodb/presto/commit/0424516a187ccd553533d905c31eb9f1495b6907", "message": "POST the metadata results to worker", "committedDate": "2020-08-13T21:09:55Z", "type": "forcePushed"}, {"oid": "3af11051e252f743f259f1058cdb5b8466555759", "url": "https://github.com/prestodb/presto/commit/3af11051e252f743f259f1058cdb5b8466555759", "message": "POST the metadata results to worker", "committedDate": "2020-08-14T07:30:25Z", "type": "forcePushed"}, {"oid": "5d6184142450389abd0dd005f6eb093cb3bd9dac", "url": "https://github.com/prestodb/presto/commit/5d6184142450389abd0dd005f6eb093cb3bd9dac", "message": "POST the metadata results to worker", "committedDate": "2020-08-14T23:25:58Z", "type": "forcePushed"}, {"oid": "4565e27ac2aeb2c9b74917bce395b8dbce04b809", "url": "https://github.com/prestodb/presto/commit/4565e27ac2aeb2c9b74917bce395b8dbce04b809", "message": "Add config parameter to enable file renaming", "committedDate": "2020-08-16T01:46:56Z", "type": "forcePushed"}, {"oid": "0dbf2bf2bab7321ff14d8ad42cc02277b7e2fcb0", "url": "https://github.com/prestodb/presto/commit/0dbf2bf2bab7321ff14d8ad42cc02277b7e2fcb0", "message": "Add config parameter to enable file renaming", "committedDate": "2020-08-16T07:29:52Z", "type": "forcePushed"}, {"oid": "c89651f81df712cdb7f81a73d1f625a0c36d0c93", "url": "https://github.com/prestodb/presto/commit/c89651f81df712cdb7f81a73d1f625a0c36d0c93", "message": "Add config parameter to enable file renaming", "committedDate": "2020-08-16T16:58:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY5MjI4NQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r471692285", "bodyText": "I think we can directly inject ConnectorDistributedMetadataUpdater into the underlying page sink provider then passing through SPI? The design principle is to keep spi as simple as possible", "author": "highker", "createdAt": "2020-08-17T18:34:26Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/connector/ConnectorPageSinkProvider.java", "diffHunk": "@@ -19,9 +19,11 @@\n import com.facebook.presto.spi.ConnectorSession;\n import com.facebook.presto.spi.PageSinkProperties;\n \n+import java.util.Optional;\n+\n public interface ConnectorPageSinkProvider\n {\n-    ConnectorPageSink createPageSink(ConnectorTransactionHandle transactionHandle, ConnectorSession session, ConnectorOutputTableHandle outputTableHandle, PageSinkProperties pageSinkProperties);\n+    ConnectorPageSink createPageSink(ConnectorTransactionHandle transactionHandle, ConnectorSession session, ConnectorOutputTableHandle outputTableHandle, Optional<ConnectorDistributedMetadataUpdater> distributedMetadataUpdater, PageSinkProperties pageSinkProperties);\n \n-    ConnectorPageSink createPageSink(ConnectorTransactionHandle transactionHandle, ConnectorSession session, ConnectorInsertTableHandle insertTableHandle, PageSinkProperties pageSinkProperties);\n+    ConnectorPageSink createPageSink(ConnectorTransactionHandle transactionHandle, ConnectorSession session, ConnectorInsertTableHandle insertTableHandle, Optional<ConnectorDistributedMetadataUpdater> distributedMetadataUpdater, PageSinkProperties pageSinkProperties);", "originalCommit": "c89651f81df712cdb7f81a73d1f625a0c36d0c93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkxMTc5NA==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r471911794", "bodyText": "Got it.", "author": "NikhilCollooru", "createdAt": "2020-08-18T04:48:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY5MjI4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwODQ3Nw==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r471708477", "bodyText": "ConnectorMetadataUpdateHandle updateMetadata(ConnectorSession session, ConnectorMetadataUpdateHandle handle)\nLikely you can squeeze input and output into one object. But if not, feel free to create two handle interfaces", "author": "highker", "createdAt": "2020-08-17T18:49:38Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/connector/ConnectorMetadata.java", "diffHunk": "@@ -700,6 +702,14 @@ default void revokeTablePrivileges(ConnectorSession session, SchemaTableName tab\n         throw new PrestoException(NOT_SUPPORTED, \"This connector does not support page sink commit\");\n     }\n \n+    /**\n+     * Handles metadata update requests and sends the results back to worker\n+     */\n+    default List<MetadataUpdateResult> updateMetadata(List<MetadataUpdateRequest> metadataUpdateRequests, String queryId)", "originalCommit": "c89651f81df712cdb7f81a73d1f625a0c36d0c93", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwODkyMg==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r471708922", "bodyText": "ConnectorMetadataUpdateHandle. We don't need to define anything in the field. Check how other handle interfaces are defined.", "author": "highker", "createdAt": "2020-08-17T18:50:26Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/MetadataUpdateRequest.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi;\n+\n+public interface MetadataUpdateRequest", "originalCommit": "c89651f81df712cdb7f81a73d1f625a0c36d0c93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkxOTIwNg==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r471919206", "bodyText": "We need to create update request object before sending to coordinator. To create that object we need ConnectorMetadataUpdateHandle to have basic interface functions right ?", "author": "NikhilCollooru", "createdAt": "2020-08-18T05:16:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwODkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMyMzA0Mg==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r472323042", "bodyText": "All these functions are called hive connector. We usually don't put anything in engine level. If we wanna delegate to underlying connectors, we do downcast within its connector.", "author": "highker", "createdAt": "2020-08-18T16:24:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwODkyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcxMTM4OA==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r471711388", "bodyText": "We only need to expose interfaces that are accessed at engine level. For all that are used by connectors only, we don't need to expose them.", "author": "highker", "createdAt": "2020-08-17T18:55:20Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/connector/ConnectorDistributedMetadataUpdater.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi.connector;\n+\n+import com.facebook.presto.spi.MetadataUpdateRequest;\n+import com.facebook.presto.spi.MetadataUpdateResult;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+public interface ConnectorDistributedMetadataUpdater\n+{\n+    long addMetadataUpdateRequest(int count);\n+\n+    List<MetadataUpdateRequest> getPendingMetadataUpdateRequests();\n+\n+    void removeResultFuture(long requestId);\n+\n+    CompletableFuture<List<String>> getMetadataResult(long requestID);\n+\n+    void setMetadataUpdateResults(List<MetadataUpdateResult> results);", "originalCommit": "c89651f81df712cdb7f81a73d1f625a0c36d0c93", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcxMjQwNA==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r471712404", "bodyText": "same", "author": "highker", "createdAt": "2020-08-17T18:57:08Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/MetadataUpdateResult.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi;\n+\n+import java.util.List;\n+\n+public interface MetadataUpdateResult\n+{\n+    long getRequestId();\n+\n+    List<String> getUpdates();\n+}", "originalCommit": "c89651f81df712cdb7f81a73d1f625a0c36d0c93", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b9687fb488427964e4026d6b21f9b3d63e1d5341", "url": "https://github.com/prestodb/presto/commit/b9687fb488427964e4026d6b21f9b3d63e1d5341", "message": "Add config parameter to enable file renaming", "committedDate": "2020-08-18T04:28:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMzODk1MQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r472338951", "bodyText": "Within a connector, we need to use the concrete implementation as much as possible. Just downcast", "author": "highker", "createdAt": "2020-08-18T16:49:56Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveDistributedMetadataUpdater.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.airlift.concurrent.MoreFutures;\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.facebook.presto.spi.connector.ConnectorDistributedMetadataUpdater;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.SettableFuture;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class HiveDistributedMetadataUpdater\n+        implements ConnectorDistributedMetadataUpdater\n+{\n+    public static final Optional<ConnectorDistributedMetadataUpdater> DEFAULT_HIVE_METADATA_UPDATER = Optional.of(new HiveDistributedMetadataUpdater());\n+\n+    private final ConcurrentMap<Long, SettableFuture<List<String>>> requestResultFutureMap = new ConcurrentHashMap<>();\n+    private final Queue<HiveMetadataUpdate> metadataUpdateRequestQueue = new ConcurrentLinkedQueue<>();\n+    private final AtomicLong requestIdGenerator = new AtomicLong();\n+\n+    @Inject\n+    public HiveDistributedMetadataUpdater() {}\n+\n+    @Override\n+    public List<ConnectorMetadataUpdateHandle> getPendingMetadataUpdateRequests()\n+    {\n+        ImmutableList.Builder<ConnectorMetadataUpdateHandle> result = new ImmutableList.Builder<>();\n+        for (ConnectorMetadataUpdateHandle request : metadataUpdateRequestQueue) {\n+            result.add(request);\n+        }\n+        return result.build();\n+    }\n+\n+    @Override\n+    public void setMetadataUpdateResults(List<ConnectorMetadataUpdateHandle> results)\n+    {\n+        for (ConnectorMetadataUpdateHandle updateResult : results) {", "originalCommit": "02a0ef734dc5159c630566ad477661b252e3fd3b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMzOTgxOQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r472339819", "bodyText": "Map<...>\nI think the key should be a pair of QueryId and partition values", "author": "highker", "createdAt": "2020-08-18T16:51:20Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveDistributedMetadataUpdater.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.airlift.concurrent.MoreFutures;\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.facebook.presto.spi.connector.ConnectorDistributedMetadataUpdater;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.SettableFuture;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class HiveDistributedMetadataUpdater\n+        implements ConnectorDistributedMetadataUpdater\n+{\n+    public static final Optional<ConnectorDistributedMetadataUpdater> DEFAULT_HIVE_METADATA_UPDATER = Optional.of(new HiveDistributedMetadataUpdater());\n+\n+    private final ConcurrentMap<Long, SettableFuture<List<String>>> requestResultFutureMap = new ConcurrentHashMap<>();", "originalCommit": "02a0ef734dc5159c630566ad477661b252e3fd3b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMzOTg3Mw==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r472339873", "bodyText": "not used", "author": "highker", "createdAt": "2020-08-18T16:51:26Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveDistributedMetadataUpdater.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.airlift.concurrent.MoreFutures;\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.facebook.presto.spi.connector.ConnectorDistributedMetadataUpdater;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.SettableFuture;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class HiveDistributedMetadataUpdater\n+        implements ConnectorDistributedMetadataUpdater\n+{\n+    public static final Optional<ConnectorDistributedMetadataUpdater> DEFAULT_HIVE_METADATA_UPDATER = Optional.of(new HiveDistributedMetadataUpdater());", "originalCommit": "02a0ef734dc5159c630566ad477661b252e3fd3b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM0MjI1OQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r472342259", "bodyText": "We might need to inject something light-weighted to track the lifecycle of a query. SqlTaskManager is the closest I can think of. But that is too heavy and not accessible through connectors. We may in the end hook callbacks from HivePageSink to remove dead queries.\nclean up hashmap by hooking it to HiveFileWriter::commit/rollback\nadd an assertion to any integration or smoke tests to assert we don't leak requests. Check 9f89256 as an example", "author": "highker", "createdAt": "2020-08-18T16:55:13Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveDistributedMetadataUpdater.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.airlift.concurrent.MoreFutures;\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.facebook.presto.spi.connector.ConnectorDistributedMetadataUpdater;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.SettableFuture;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class HiveDistributedMetadataUpdater\n+        implements ConnectorDistributedMetadataUpdater\n+{\n+    public static final Optional<ConnectorDistributedMetadataUpdater> DEFAULT_HIVE_METADATA_UPDATER = Optional.of(new HiveDistributedMetadataUpdater());\n+\n+    private final ConcurrentMap<Long, SettableFuture<List<String>>> requestResultFutureMap = new ConcurrentHashMap<>();\n+    private final Queue<HiveMetadataUpdate> metadataUpdateRequestQueue = new ConcurrentLinkedQueue<>();\n+    private final AtomicLong requestIdGenerator = new AtomicLong();\n+\n+    @Inject\n+    public HiveDistributedMetadataUpdater() {}", "originalCommit": "02a0ef734dc5159c630566ad477661b252e3fd3b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM5MDQxNA==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r472390414", "bodyText": "use removeIf", "author": "highker", "createdAt": "2020-08-18T18:15:11Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveDistributedMetadataUpdater.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.airlift.concurrent.MoreFutures;\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.facebook.presto.spi.connector.ConnectorDistributedMetadataUpdater;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.SettableFuture;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class HiveDistributedMetadataUpdater\n+        implements ConnectorDistributedMetadataUpdater\n+{\n+    public static final Optional<ConnectorDistributedMetadataUpdater> DEFAULT_HIVE_METADATA_UPDATER = Optional.of(new HiveDistributedMetadataUpdater());\n+\n+    private final ConcurrentMap<Long, SettableFuture<List<String>>> requestResultFutureMap = new ConcurrentHashMap<>();\n+    private final Queue<HiveMetadataUpdate> metadataUpdateRequestQueue = new ConcurrentLinkedQueue<>();\n+    private final AtomicLong requestIdGenerator = new AtomicLong();\n+\n+    @Inject\n+    public HiveDistributedMetadataUpdater() {}\n+\n+    @Override\n+    public List<ConnectorMetadataUpdateHandle> getPendingMetadataUpdateRequests()\n+    {\n+        ImmutableList.Builder<ConnectorMetadataUpdateHandle> result = new ImmutableList.Builder<>();\n+        for (ConnectorMetadataUpdateHandle request : metadataUpdateRequestQueue) {\n+            result.add(request);\n+        }\n+        return result.build();\n+    }\n+\n+    @Override\n+    public void setMetadataUpdateResults(List<ConnectorMetadataUpdateHandle> results)\n+    {\n+        for (ConnectorMetadataUpdateHandle updateResult : results) {\n+            long requestId = updateResult.getRequestId();\n+            List<String> updates = updateResult.getUpdates();\n+\n+            if (!requestResultFutureMap.containsKey(requestId)) {\n+                return;\n+            }\n+\n+            requestResultFutureMap.get(requestId).set(updates);\n+\n+            // remove the request from queue\n+            for (HiveMetadataUpdate request : metadataUpdateRequestQueue) {", "originalCommit": "02a0ef734dc5159c630566ad477661b252e3fd3b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM5MjI4MQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r472392281", "bodyText": "tabeName, partitionValues, fileName -> count", "author": "highker", "createdAt": "2020-08-18T18:18:22Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadataUpdate.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+\n+public class HiveMetadataUpdate\n+        implements ConnectorMetadataUpdateHandle\n+{\n+    private final long requestId;\n+    private final int count;\n+    private final List<String> updates;", "originalCommit": "02a0ef734dc5159c630566ad477661b252e3fd3b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM5NDE4Mg==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r472394182", "bodyText": "addMetadataUpdateRequest((tableName, partitionValues)/Path, writerIndex)\nadd checkState to make sure the input is alway unique", "author": "highker", "createdAt": "2020-08-18T18:21:39Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveDistributedMetadataUpdater.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.airlift.concurrent.MoreFutures;\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.facebook.presto.spi.connector.ConnectorDistributedMetadataUpdater;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.SettableFuture;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class HiveDistributedMetadataUpdater\n+        implements ConnectorDistributedMetadataUpdater\n+{\n+    public static final Optional<ConnectorDistributedMetadataUpdater> DEFAULT_HIVE_METADATA_UPDATER = Optional.of(new HiveDistributedMetadataUpdater());\n+\n+    private final ConcurrentMap<Long, SettableFuture<List<String>>> requestResultFutureMap = new ConcurrentHashMap<>();\n+    private final Queue<HiveMetadataUpdate> metadataUpdateRequestQueue = new ConcurrentLinkedQueue<>();\n+    private final AtomicLong requestIdGenerator = new AtomicLong();\n+\n+    @Inject\n+    public HiveDistributedMetadataUpdater() {}\n+\n+    @Override\n+    public List<ConnectorMetadataUpdateHandle> getPendingMetadataUpdateRequests()\n+    {\n+        ImmutableList.Builder<ConnectorMetadataUpdateHandle> result = new ImmutableList.Builder<>();\n+        for (ConnectorMetadataUpdateHandle request : metadataUpdateRequestQueue) {\n+            result.add(request);\n+        }\n+        return result.build();\n+    }\n+\n+    @Override\n+    public void setMetadataUpdateResults(List<ConnectorMetadataUpdateHandle> results)\n+    {\n+        for (ConnectorMetadataUpdateHandle updateResult : results) {\n+            long requestId = updateResult.getRequestId();\n+            List<String> updates = updateResult.getUpdates();\n+\n+            if (!requestResultFutureMap.containsKey(requestId)) {\n+                return;\n+            }\n+\n+            requestResultFutureMap.get(requestId).set(updates);\n+\n+            // remove the request from queue\n+            for (HiveMetadataUpdate request : metadataUpdateRequestQueue) {\n+                if (request.getRequestId() == requestId) {\n+                    metadataUpdateRequestQueue.remove(request);\n+                }\n+            }\n+        }\n+    }\n+\n+    public long addMetadataUpdateRequest(int count)", "originalCommit": "02a0ef734dc5159c630566ad477661b252e3fd3b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM5NjYwNw==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r472396607", "bodyText": "in this function, when you create a new writer, add a new request\n// new writer -> table, partition, fileName?? 1:1 writer index", "author": "highker", "createdAt": "2020-08-18T18:26:04Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSink.java", "diffHunk": "@@ -336,6 +372,37 @@ private void writePage(Page page)\n         }\n     }\n \n+    private void sendMetadataUpdateRequest()\n+    {\n+        if (!fileRenamingEnabled || bucketFunction != null) {\n+            return;\n+        }\n+        this.requestId = hiveDistributedMetadataUpdater.addMetadataUpdateRequest(writers.size());\n+        waitForFileRenaming = true;\n+    }\n+\n+    private void renameFiles(List<String> fileNames)\n+    {\n+        Iterator<String> fileNamesIterator = fileNames.iterator();\n+        HdfsContext context = new HdfsContext(session, schemaName, tableName);\n+        for (HiveWriter writer : writers) {\n+            PartitionUpdate partitionUpdate = writer.getPartitionUpdate();\n+            for (FileWriteInfo fileWriteInfo : partitionUpdate.getFileWriteInfos()) {\n+                Path fromPath = new Path(partitionUpdate.getWritePath(), fileWriteInfo.getWriteFileName());\n+                Path toPath = new Path(partitionUpdate.getWritePath(), fileNamesIterator.next());\n+                try {\n+                    ExtendedFileSystem fileSystem = hdfsEnvironment.getFileSystem(context, fromPath);\n+                    fileSystem.renameFileAsync(fromPath, toPath);\n+                }\n+                catch (IOException e) {\n+                    throw new PrestoException(HIVE_FILESYSTEM_ERROR, format(\"Error renaming file. fromPath: %s toPath: %s\", fromPath, toPath), e);\n+                }\n+            }\n+        }\n+        hiveDistributedMetadataUpdater.removeResultFuture(requestId);\n+        renamingFuture.set(null);\n+    }\n+\n     private int[] getWriterIndexes(Page page)", "originalCommit": "b9687fb488427964e4026d6b21f9b3d63e1d5341", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQwMDkyMw==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r472400923", "bodyText": "Add jmx counters to track the sizes of the map and queue", "author": "highker", "createdAt": "2020-08-18T18:34:12Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveDistributedMetadataUpdater.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.airlift.concurrent.MoreFutures;\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.facebook.presto.spi.connector.ConnectorDistributedMetadataUpdater;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.SettableFuture;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class HiveDistributedMetadataUpdater", "originalCommit": "b9687fb488427964e4026d6b21f9b3d63e1d5341", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQwMzc4Mw==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r472403783", "bodyText": "Ideally, renaming can happen here. But let's leave it for now and revisit this in the next iteration", "author": "highker", "createdAt": "2020-08-18T18:39:49Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveDistributedMetadataUpdater.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.airlift.concurrent.MoreFutures;\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.facebook.presto.spi.connector.ConnectorDistributedMetadataUpdater;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.SettableFuture;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class HiveDistributedMetadataUpdater\n+        implements ConnectorDistributedMetadataUpdater\n+{\n+    public static final Optional<ConnectorDistributedMetadataUpdater> DEFAULT_HIVE_METADATA_UPDATER = Optional.of(new HiveDistributedMetadataUpdater());\n+\n+    private final ConcurrentMap<Long, SettableFuture<List<String>>> requestResultFutureMap = new ConcurrentHashMap<>();\n+    private final Queue<HiveMetadataUpdate> metadataUpdateRequestQueue = new ConcurrentLinkedQueue<>();\n+    private final AtomicLong requestIdGenerator = new AtomicLong();\n+\n+    @Inject\n+    public HiveDistributedMetadataUpdater() {}\n+\n+    @Override\n+    public List<ConnectorMetadataUpdateHandle> getPendingMetadataUpdateRequests()\n+    {\n+        ImmutableList.Builder<ConnectorMetadataUpdateHandle> result = new ImmutableList.Builder<>();\n+        for (ConnectorMetadataUpdateHandle request : metadataUpdateRequestQueue) {\n+            result.add(request);\n+        }\n+        return result.build();\n+    }\n+\n+    @Override\n+    public void setMetadataUpdateResults(List<ConnectorMetadataUpdateHandle> results)\n+    {\n+        for (ConnectorMetadataUpdateHandle updateResult : results) {\n+            long requestId = updateResult.getRequestId();\n+            List<String> updates = updateResult.getUpdates();\n+\n+            if (!requestResultFutureMap.containsKey(requestId)) {\n+                return;\n+            }\n+\n+            requestResultFutureMap.get(requestId).set(updates);\n+\n+            // remove the request from queue\n+            for (HiveMetadataUpdate request : metadataUpdateRequestQueue) {\n+                if (request.getRequestId() == requestId) {\n+                    metadataUpdateRequestQueue.remove(request);", "originalCommit": "b9687fb488427964e4026d6b21f9b3d63e1d5341", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3e1ad69ed1fe9d1be6ff295e8131f009b6b3fd6a", "url": "https://github.com/prestodb/presto/commit/3e1ad69ed1fe9d1be6ff295e8131f009b6b3fd6a", "message": "Add config parameter to enable file renaming", "committedDate": "2020-08-20T19:52:32Z", "type": "forcePushed"}, {"oid": "fb128cf33c52d22a01d54d6af27e18073c39e19d", "url": "https://github.com/prestodb/presto/commit/fb128cf33c52d22a01d54d6af27e18073c39e19d", "message": "Add config parameter to enable file renaming", "committedDate": "2020-08-25T02:10:18Z", "type": "forcePushed"}, {"oid": "00f121b5ac91f64583dab987c15c12d334a36483", "url": "https://github.com/prestodb/presto/commit/00f121b5ac91f64583dab987c15c12d334a36483", "message": "Add config parameter to enable file renaming", "committedDate": "2020-08-25T07:42:03Z", "type": "forcePushed"}, {"oid": "5100427232dcb7609c16060128041a94d547709b", "url": "https://github.com/prestodb/presto/commit/5100427232dcb7609c16060128041a94d547709b", "message": "Add config parameter to enable file renaming", "committedDate": "2020-08-25T16:44:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzMTI2Ng==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r479931266", "bodyText": "HiveMetadataUpdateHandle", "author": "highker", "createdAt": "2020-08-31T06:53:19Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadataUpdate.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import javax.annotation.Nullable;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class HiveMetadataUpdate", "originalCommit": "682fa5cbd90db93b6eb676484f88af3d84c300dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzMjI5MQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r479932291", "bodyText": "getMetadataUpdater", "author": "highker", "createdAt": "2020-08-31T06:55:40Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/connector/ConnectorMetadataUpdaterProvider.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi.connector;\n+\n+public interface ConnectorMetadataUpdaterProvider\n+{\n+    ConnectorMetadataUpdater createMetadataUpdater();", "originalCommit": "682fa5cbd90db93b6eb676484f88af3d84c300dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzMjQxMQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r479932411", "bodyText": "We need good javadoc for this class", "author": "highker", "createdAt": "2020-08-31T06:55:56Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/connector/ConnectorMetadataUpdaterProvider.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi.connector;\n+\n+public interface ConnectorMetadataUpdaterProvider", "originalCommit": "682fa5cbd90db93b6eb676484f88af3d84c300dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzMjQ1MQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r479932451", "bodyText": "We need good javadoc for this class", "author": "highker", "createdAt": "2020-08-31T06:56:00Z", "path": "presto-spi/src/main/java/com/facebook/presto/spi/connector/ConnectorMetadataUpdater.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.spi.connector;\n+\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+\n+import java.util.List;\n+\n+public interface ConnectorMetadataUpdater", "originalCommit": "682fa5cbd90db93b6eb676484f88af3d84c300dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzMzM3OA==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r479933378", "bodyText": "final", "author": "highker", "createdAt": "2020-08-31T06:58:10Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/TaskMetadataContext.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution;\n+\n+import com.facebook.presto.spi.ConnectorId;\n+import com.facebook.presto.spi.connector.ConnectorMetadataUpdater;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+public class TaskMetadataContext\n+{\n+    private ConnectorId connectorId;\n+    private List<ConnectorMetadataUpdater> metadataUpdaters;", "originalCommit": "682fa5cbd90db93b6eb676484f88af3d84c300dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzMzkxNQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r479933915", "bodyText": "Not a big fan of making this thing mutable here. I think we could make it immutable wither in TableWriterOperatorFactory's constructor or somewhere even higher level.", "author": "highker", "createdAt": "2020-08-31T06:59:31Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/TaskMetadataContext.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.execution;\n+\n+import com.facebook.presto.spi.ConnectorId;\n+import com.facebook.presto.spi.connector.ConnectorMetadataUpdater;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+public class TaskMetadataContext\n+{\n+    private ConnectorId connectorId;\n+    private List<ConnectorMetadataUpdater> metadataUpdaters;\n+\n+    public TaskMetadataContext()\n+    {\n+        this.metadataUpdaters = new CopyOnWriteArrayList<>();\n+    }\n+\n+    public void setConnectorId(ConnectorId id)", "originalCommit": "682fa5cbd90db93b6eb676484f88af3d84c300dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ5OTg1NA==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r481499854", "bodyText": "I made TaskMetadataContext an optional parameter in TaskContext and initiated it inside TableWriterOperatorFactory, as we can know the connectorId only when we reach there.", "author": "NikhilCollooru", "createdAt": "2020-09-02T00:10:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzMzkxNQ=="}], "type": "inlineReview"}, {"oid": "bdb099c88572c3b46aece7faa6bed576ac7a8bff", "url": "https://github.com/prestodb/presto/commit/bdb099c88572c3b46aece7faa6bed576ac7a8bff", "message": "Add config parameter to enable file renaming", "committedDate": "2020-09-02T00:01:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyODU5MA==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r482228590", "bodyText": "one param per line for function compileProjection", "author": "highker", "createdAt": "2020-09-02T17:07:38Z", "path": "presto-benchmark/src/main/java/com/facebook/presto/benchmark/AbstractOperatorBenchmark.java", "diffHunk": "@@ -224,7 +224,8 @@ protected final OperatorFactory createHashProjectOperator(int operatorId, PlanNo\n         RowExpression translatedHashExpression = translate(hashExpression.get(), variableToInputMapping.build());\n \n         PageFunctionCompiler functionCompiler = new PageFunctionCompiler(localQueryRunner.getMetadata(), 0);\n-        projections.add(new PageProjectionWithOutputs(functionCompiler.compileProjection(session.getSqlFunctionProperties(), translatedHashExpression, Optional.empty()).get(), new int[] {types.size()}));\n+        projections.add(new PageProjectionWithOutputs(functionCompiler.compileProjection(session.getSqlFunctionProperties(), translatedHashExpression, Optional.empty()).get(), new int[] {", "originalCommit": "48884b358e204e41559b4ca6b71ae1535c65f360", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyOTg4Nw==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r482229887", "bodyText": "I guess you don't need this as it has already been bound below.", "author": "highker", "createdAt": "2020-09-02T17:08:51Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java", "diffHunk": "@@ -124,6 +125,8 @@ public void configure(Binder binder)\n         binder.bind(HiveWriterStats.class).in(Scopes.SINGLETON);\n         newExporter(binder).export(HiveWriterStats.class).as(generatedNameOf(HiveWriterStats.class, connectorId));\n \n+        binder.bind(HiveMetadataUpdaterProvider.class).in(Scopes.SINGLETON);", "originalCommit": "48884b358e204e41559b4ca6b71ae1535c65f360", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI0MTc0OQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r482241749", "bodyText": "Use SchemaTableName", "author": "highker", "createdAt": "2020-09-02T17:24:46Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadataUpdateHandle.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.Objects;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class HiveMetadataUpdateHandle\n+        implements ConnectorMetadataUpdateHandle\n+{\n+    private final String requestId;\n+    private final String schemaName;\n+    private final String tableName;", "originalCommit": "48884b358e204e41559b4ca6b71ae1535c65f360", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI0MjQyMA==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r482242420", "bodyText": "Just use UUID maybe", "author": "highker", "createdAt": "2020-09-02T17:25:50Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadataUpdateHandle.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.Objects;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class HiveMetadataUpdateHandle\n+        implements ConnectorMetadataUpdateHandle\n+{\n+    private final String requestId;", "originalCommit": "48884b358e204e41559b4ca6b71ae1535c65f360", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI0MzA4Ng==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r482243086", "bodyText": "Use Optional<String>; same for the one below", "author": "highker", "createdAt": "2020-09-02T17:26:59Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadataUpdateHandle.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.Objects;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class HiveMetadataUpdateHandle\n+        implements ConnectorMetadataUpdateHandle\n+{\n+    private final String requestId;\n+    private final String schemaName;\n+    private final String tableName;\n+    private final String partitionName;", "originalCommit": "48884b358e204e41559b4ca6b71ae1535c65f360", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI0NDE1OQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r482244159", "bodyText": "fileName. Also add a comment to explain when it would be non-null", "author": "highker", "createdAt": "2020-09-02T17:28:53Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadataUpdateHandle.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.Objects;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class HiveMetadataUpdateHandle\n+        implements ConnectorMetadataUpdateHandle\n+{\n+    private final String requestId;\n+    private final String schemaName;\n+    private final String tableName;\n+    private final String partitionName;\n+    private final String metadataUpdate;", "originalCommit": "48884b358e204e41559b4ca6b71ae1535c65f360", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI0NDM3OQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r482244379", "bodyText": "public Optional<String> getMetadataUpdate()\n    {\n        return fileName;\n    }", "author": "highker", "createdAt": "2020-09-02T17:29:15Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadataUpdateHandle.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.Objects;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class HiveMetadataUpdateHandle\n+        implements ConnectorMetadataUpdateHandle\n+{\n+    private final String requestId;\n+    private final String schemaName;\n+    private final String tableName;\n+    private final String partitionName;\n+    private final String metadataUpdate;\n+\n+    public HiveMetadataUpdateHandle(String requestId, String schemaName, String tableName, String partitionName)\n+    {\n+        this(requestId, schemaName, tableName, partitionName, null);\n+    }\n+\n+    @JsonCreator\n+    public HiveMetadataUpdateHandle(\n+            @JsonProperty(\"requestId\") String requestId,\n+            @JsonProperty(\"schemaName\") String schemaName,\n+            @JsonProperty(\"tableName\") String tableName,\n+            @JsonProperty(\"partitionName\") @Nullable String partitionName,\n+            @JsonProperty(\"metadataUpdate\") @Nullable String metadataUpdate)\n+    {\n+        this.requestId = requireNonNull(requestId, \"requestId is null\");\n+        this.schemaName = requireNonNull(schemaName, \"schemaName is null\");\n+        this.tableName = requireNonNull(tableName, \"tableName is null\");\n+        this.partitionName = partitionName;\n+        this.metadataUpdate = metadataUpdate;\n+    }\n+\n+    @JsonProperty\n+    public String getRequestId()\n+    {\n+        return requestId;\n+    }\n+\n+    @JsonProperty\n+    public String getSchemaName()\n+    {\n+        return schemaName;\n+    }\n+\n+    @JsonProperty\n+    public String getTableName()\n+    {\n+        return tableName;\n+    }\n+\n+    @JsonProperty\n+    public String getPartitionName()\n+    {\n+        return partitionName;\n+    }\n+\n+    @JsonProperty\n+    public String getMetadataUpdate()\n+    {\n+        return metadataUpdate;\n+    }", "originalCommit": "48884b358e204e41559b4ca6b71ae1535c65f360", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI0NDczNQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r482244735", "bodyText": "Seems missing a field here.", "author": "highker", "createdAt": "2020-09-02T17:29:52Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadataUpdateHandle.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.Objects;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class HiveMetadataUpdateHandle\n+        implements ConnectorMetadataUpdateHandle\n+{\n+    private final String requestId;\n+    private final String schemaName;\n+    private final String tableName;\n+    private final String partitionName;\n+    private final String metadataUpdate;\n+\n+    public HiveMetadataUpdateHandle(String requestId, String schemaName, String tableName, String partitionName)\n+    {\n+        this(requestId, schemaName, tableName, partitionName, null);\n+    }\n+\n+    @JsonCreator\n+    public HiveMetadataUpdateHandle(\n+            @JsonProperty(\"requestId\") String requestId,\n+            @JsonProperty(\"schemaName\") String schemaName,\n+            @JsonProperty(\"tableName\") String tableName,\n+            @JsonProperty(\"partitionName\") @Nullable String partitionName,\n+            @JsonProperty(\"metadataUpdate\") @Nullable String metadataUpdate)\n+    {\n+        this.requestId = requireNonNull(requestId, \"requestId is null\");\n+        this.schemaName = requireNonNull(schemaName, \"schemaName is null\");\n+        this.tableName = requireNonNull(tableName, \"tableName is null\");\n+        this.partitionName = partitionName;\n+        this.metadataUpdate = metadataUpdate;\n+    }\n+\n+    @JsonProperty\n+    public String getRequestId()\n+    {\n+        return requestId;\n+    }\n+\n+    @JsonProperty\n+    public String getSchemaName()\n+    {\n+        return schemaName;\n+    }\n+\n+    @JsonProperty\n+    public String getTableName()\n+    {\n+        return tableName;\n+    }\n+\n+    @JsonProperty\n+    public String getPartitionName()\n+    {\n+        return partitionName;\n+    }\n+\n+    @JsonProperty\n+    public String getMetadataUpdate()\n+    {\n+        return metadataUpdate;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj)\n+    {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null || getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        HiveMetadataUpdateHandle o = (HiveMetadataUpdateHandle) obj;\n+        return requestId.equals(o.requestId) &&\n+                schemaName.equals(o.schemaName) &&\n+                tableName.equals(o.tableName) &&\n+                Objects.equals(partitionName, o.partitionName);\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        return Objects.hash(requestId, schemaName, tableName, partitionName);\n+    }", "originalCommit": "48884b358e204e41559b4ca6b71ae1535c65f360", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMyNTYzOQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r482325639", "bodyText": "redundant", "author": "highker", "createdAt": "2020-09-02T19:15:40Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadataUpdater.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.airlift.concurrent.MoreFutures;\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.facebook.presto.spi.connector.ConnectorMetadataUpdater;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.SettableFuture;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+public class HiveMetadataUpdater\n+        implements ConnectorMetadataUpdater\n+{\n+    private final Map<String, SettableFuture<String>> requestFutureMap = new ConcurrentHashMap<>();\n+    private final Map<Integer, String> writerRequestMap = new ConcurrentHashMap<>();\n+    private final Queue<HiveMetadataUpdateHandle> hiveMetadataRequestQueue = new ConcurrentLinkedQueue<>();\n+\n+    public HiveMetadataUpdater() {}", "originalCommit": "48884b358e204e41559b4ca6b71ae1535c65f360", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMyNzU2MQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r482327561", "bodyText": "... ImmutableList.builder<>();", "author": "highker", "createdAt": "2020-09-02T19:17:45Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadataUpdater.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.airlift.concurrent.MoreFutures;\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.facebook.presto.spi.connector.ConnectorMetadataUpdater;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.SettableFuture;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+public class HiveMetadataUpdater\n+        implements ConnectorMetadataUpdater\n+{\n+    private final Map<String, SettableFuture<String>> requestFutureMap = new ConcurrentHashMap<>();\n+    private final Map<Integer, String> writerRequestMap = new ConcurrentHashMap<>();\n+    private final Queue<HiveMetadataUpdateHandle> hiveMetadataRequestQueue = new ConcurrentLinkedQueue<>();\n+\n+    public HiveMetadataUpdater() {}\n+\n+    @Override\n+    public List<ConnectorMetadataUpdateHandle> getPendingMetadataUpdateRequests()\n+    {\n+        ImmutableList.Builder<ConnectorMetadataUpdateHandle> result = new ImmutableList.Builder<>();", "originalCommit": "48884b358e204e41559b4ca6b71ae1535c65f360", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM4NjI4MQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r482386281", "bodyText": "Is this thread-safe? Wonder what would happen if two threads set the same future. Might be fine, but worth digging and comment here.", "author": "highker", "createdAt": "2020-09-02T20:03:49Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadataUpdater.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.airlift.concurrent.MoreFutures;\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.facebook.presto.spi.connector.ConnectorMetadataUpdater;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.SettableFuture;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+public class HiveMetadataUpdater\n+        implements ConnectorMetadataUpdater\n+{\n+    private final Map<String, SettableFuture<String>> requestFutureMap = new ConcurrentHashMap<>();\n+    private final Map<Integer, String> writerRequestMap = new ConcurrentHashMap<>();\n+    private final Queue<HiveMetadataUpdateHandle> hiveMetadataRequestQueue = new ConcurrentLinkedQueue<>();\n+\n+    public HiveMetadataUpdater() {}\n+\n+    @Override\n+    public List<ConnectorMetadataUpdateHandle> getPendingMetadataUpdateRequests()\n+    {\n+        ImmutableList.Builder<ConnectorMetadataUpdateHandle> result = new ImmutableList.Builder<>();\n+        for (HiveMetadataUpdateHandle request : hiveMetadataRequestQueue) {\n+            result.add(request);\n+        }\n+        return result.build();\n+    }\n+\n+    @Override\n+    public void setMetadataUpdateResults(List<ConnectorMetadataUpdateHandle> results)\n+    {\n+        for (ConnectorMetadataUpdateHandle connectorMetadataUpdateHandle : results) {\n+            HiveMetadataUpdateHandle updateResult = (HiveMetadataUpdateHandle) connectorMetadataUpdateHandle;\n+            String requestId = updateResult.getRequestId();\n+\n+            if (!requestFutureMap.containsKey(requestId)) {\n+                continue;\n+            }\n+\n+            requestFutureMap.get(requestId).set(updateResult.getMetadataUpdate());", "originalCommit": "48884b358e204e41559b4ca6b71ae1535c65f360", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM5Mjk3Nw==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r482392977", "bodyText": "Shall we have more multi-threading tests for this class?", "author": "highker", "createdAt": "2020-09-02T20:08:51Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveMetadataUpdater.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+import static com.facebook.presto.hive.TestHiveMetadataUpdateHandle.TEST_PARTITION_NAME;\n+import static com.facebook.presto.hive.TestHiveMetadataUpdateHandle.TEST_SCHEMA;\n+import static com.facebook.presto.hive.TestHiveMetadataUpdateHandle.TEST_TABLE;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestHiveMetadataUpdater", "originalCommit": "48884b358e204e41559b4ca6b71ae1535c65f360", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA3OTQwNw==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r494079407", "bodyText": "As per our new design , we have one HiveMetadataUpdater instance per each task. On other hand we need multi-threaded tests for HiveFileRenamer as we have a singleton on coordinator for all tasks. So added multi-threaded tests for HiveFileRenamer", "author": "NikhilCollooru", "createdAt": "2020-09-24T06:55:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM5Mjk3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM5NTM2Nw==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r482395367", "bodyText": "Let's put some comments to the data structures. BTW, seems we don't need a Queue type for hiveMetadataRequestQueue because there is no order. But let's keep that because we might come back to getPendingMetadataUpdateRequests and optimize it. The current impl for getPendingMetadataUpdateRequests is a bit brute force.", "author": "highker", "createdAt": "2020-09-02T20:10:31Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadataUpdater.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.airlift.concurrent.MoreFutures;\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.facebook.presto.spi.connector.ConnectorMetadataUpdater;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.SettableFuture;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+public class HiveMetadataUpdater\n+        implements ConnectorMetadataUpdater\n+{\n+    private final Map<String, SettableFuture<String>> requestFutureMap = new ConcurrentHashMap<>();\n+    private final Map<Integer, String> writerRequestMap = new ConcurrentHashMap<>();\n+    private final Queue<HiveMetadataUpdateHandle> hiveMetadataRequestQueue = new ConcurrentLinkedQueue<>();", "originalCommit": "48884b358e204e41559b4ca6b71ae1535c65f360", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQwNTc4Mw==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r482405783", "bodyText": "This looks like an expensive call directly executed from HTTP thread (from TaskResource.updateMetadataResults). Potentially, this will exhaust jetty threads. A good way is to make it async and move it to a CPU thread.", "author": "highker", "createdAt": "2020-09-02T20:18:32Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadataUpdater.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.airlift.concurrent.MoreFutures;\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.facebook.presto.spi.connector.ConnectorMetadataUpdater;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.SettableFuture;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+public class HiveMetadataUpdater\n+        implements ConnectorMetadataUpdater\n+{\n+    private final Map<String, SettableFuture<String>> requestFutureMap = new ConcurrentHashMap<>();\n+    private final Map<Integer, String> writerRequestMap = new ConcurrentHashMap<>();\n+    private final Queue<HiveMetadataUpdateHandle> hiveMetadataRequestQueue = new ConcurrentLinkedQueue<>();\n+\n+    public HiveMetadataUpdater() {}\n+\n+    @Override\n+    public List<ConnectorMetadataUpdateHandle> getPendingMetadataUpdateRequests()\n+    {\n+        ImmutableList.Builder<ConnectorMetadataUpdateHandle> result = new ImmutableList.Builder<>();\n+        for (HiveMetadataUpdateHandle request : hiveMetadataRequestQueue) {\n+            result.add(request);\n+        }\n+        return result.build();\n+    }\n+\n+    @Override\n+    public void setMetadataUpdateResults(List<ConnectorMetadataUpdateHandle> results)", "originalCommit": "48884b358e204e41559b4ca6b71ae1535c65f360", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQwODAwNQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r482408005", "bodyText": "use isPresent rather than making it null", "author": "highker", "createdAt": "2020-09-02T20:20:12Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSinkProvider.java", "diffHunk": "@@ -113,17 +114,21 @@ public HivePageSinkProvider(\n     public ConnectorPageSink createPageSink(ConnectorTransactionHandle transaction, ConnectorSession session, ConnectorOutputTableHandle tableHandle, PageSinkContext pageSinkProperties)\n     {\n         HiveWritableTableHandle handle = (HiveOutputTableHandle) tableHandle;\n-        return createPageSink(handle, true, session, pageSinkProperties.isCommitRequired());\n+        HiveMetadataUpdater hiveMetadataUpdater = (HiveMetadataUpdater) pageSinkProperties.getMetadataUpdater().orElse(null);\n+        checkArgument(hiveMetadataUpdater != null, \"Metadata Updater for HivePageSink is null\");", "originalCommit": "48884b358e204e41559b4ca6b71ae1535c65f360", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQwOTU0Nw==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r482409547", "bodyText": "PageSinkContext pageSinkProperties: seems you forgot to change the param names from the type renaming", "author": "highker", "createdAt": "2020-09-02T20:21:22Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSinkProvider.java", "diffHunk": "@@ -113,17 +114,21 @@ public HivePageSinkProvider(\n     public ConnectorPageSink createPageSink(ConnectorTransactionHandle transaction, ConnectorSession session, ConnectorOutputTableHandle tableHandle, PageSinkContext pageSinkProperties)", "originalCommit": "48884b358e204e41559b4ca6b71ae1535c65f360", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQxMzQ5Mw==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r482413493", "bodyText": "Remove this. Put @Inject at class definition", "author": "highker", "createdAt": "2020-09-02T20:24:21Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadataUpdaterProvider.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.spi.connector.ConnectorMetadataUpdater;\n+import com.facebook.presto.spi.connector.ConnectorMetadataUpdaterProvider;\n+\n+import javax.inject.Inject;\n+\n+public class HiveMetadataUpdaterProvider\n+        implements ConnectorMetadataUpdaterProvider\n+{\n+    @Inject\n+    public HiveMetadataUpdaterProvider() {}", "originalCommit": "48884b358e204e41559b4ca6b71ae1535c65f360", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "315351c6a7209b5d6a5bb68105e6394272e22c5c", "url": "https://github.com/prestodb/presto/commit/315351c6a7209b5d6a5bb68105e6394272e22c5c", "message": "Add config parameter to enable file renaming", "committedDate": "2020-09-10T07:53:12Z", "type": "forcePushed"}, {"oid": "28bbdc07f3387a9a8d9dc86f8011ce0175aa2361", "url": "https://github.com/prestodb/presto/commit/28bbdc07f3387a9a8d9dc86f8011ce0175aa2361", "message": "Add integration tests for file renaming", "committedDate": "2020-09-21T07:19:42Z", "type": "forcePushed"}, {"oid": "011ff1e0a782c36b8cf3b7cf75d5dce2f1cbd642", "url": "https://github.com/prestodb/presto/commit/011ff1e0a782c36b8cf3b7cf75d5dce2f1cbd642", "message": "Add integration tests for file renaming", "committedDate": "2020-09-21T08:22:52Z", "type": "forcePushed"}, {"oid": "30a1019e49e830a36b13965953d114241b3e5973", "url": "https://github.com/prestodb/presto/commit/30a1019e49e830a36b13965953d114241b3e5973", "message": "Add integration tests for file renaming", "committedDate": "2020-09-24T01:25:53Z", "type": "forcePushed"}, {"oid": "78d5cc58481947ad5ac9c3d09dc15ee8d9d90cfa", "url": "https://github.com/prestodb/presto/commit/78d5cc58481947ad5ac9c3d09dc15ee8d9d90cfa", "message": "Add integration tests for file renaming", "committedDate": "2020-09-24T05:05:23Z", "type": "forcePushed"}, {"oid": "d9a220838bf71277c99b14b885d029bfc6cba9e1", "url": "https://github.com/prestodb/presto/commit/d9a220838bf71277c99b14b885d029bfc6cba9e1", "message": "Add integration tests for file renaming", "committedDate": "2020-09-24T19:09:44Z", "type": "forcePushed"}, {"oid": "1dc330649d8e828968c6f5e85a6161ee87e448c9", "url": "https://github.com/prestodb/presto/commit/1dc330649d8e828968c6f5e85a6161ee87e448c9", "message": "Add integration tests for file renaming", "committedDate": "2020-09-25T08:37:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEwMDg5Nw==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r495100897", "bodyText": "add a comment to this if", "author": "highker", "createdAt": "2020-09-25T16:28:33Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSink.java", "diffHunk": "@@ -339,6 +347,14 @@ private void writePage(Page page)\n         }\n     }\n \n+    private void sendMetadataUpdateRequest(Optional<String> partitionName, int writerIndex)\n+    {\n+        if (bucketFunction != null) {", "originalCommit": "7cb8ba99dcbc8d524d4ff16dc518770b54084787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEwMTY5MA==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r495101690", "bodyText": "private", "author": "highker", "createdAt": "2020-09-25T16:29:53Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/SqlTask.java", "diffHunk": "@@ -313,6 +318,24 @@ private TaskStats getTaskStats(TaskHolder taskHolder)\n         return new TaskStats(taskStateMachine.getCreatedTime(), endTime);\n     }\n \n+    public MetadataUpdates getMetadataUpdateRequests(TaskHolder taskHolder)", "originalCommit": "7cb8ba99dcbc8d524d4ff16dc518770b54084787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEwMTg4Ng==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r495101886", "bodyText": "Use list builder", "author": "highker", "createdAt": "2020-09-25T16:30:18Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/SqlTask.java", "diffHunk": "@@ -313,6 +318,24 @@ private TaskStats getTaskStats(TaskHolder taskHolder)\n         return new TaskStats(taskStateMachine.getCreatedTime(), endTime);\n     }\n \n+    public MetadataUpdates getMetadataUpdateRequests(TaskHolder taskHolder)\n+    {\n+        ConnectorId connectorId = null;\n+        List<ConnectorMetadataUpdateHandle> connectorMetadataUpdates = new ArrayList<>();", "originalCommit": "7cb8ba99dcbc8d524d4ff16dc518770b54084787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEwMjY1NA==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r495102654", "bodyText": "both are final", "author": "highker", "createdAt": "2020-09-25T16:31:43Z", "path": "presto-main/src/main/java/com/facebook/presto/metadata/MetadataUpdates.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.metadata;\n+\n+import com.facebook.presto.spi.ConnectorId;\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableList;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class MetadataUpdates\n+{\n+    public static final MetadataUpdates DEFAULT_METADATA_UPDATES = new MetadataUpdates(ImmutableList.of());\n+\n+    private ConnectorId connectorId;\n+    private List<ConnectorMetadataUpdateHandle> metadataUpdates;", "originalCommit": "7cb8ba99dcbc8d524d4ff16dc518770b54084787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTExNzMyMg==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r495117322", "bodyText": "Make this interface async: ListenableFuture<Void> renameFileAsync", "author": "highker", "createdAt": "2020-09-25T16:59:55Z", "path": "presto-hive-common/src/main/java/com/facebook/presto/hive/filesystem/ExtendedFileSystem.java", "diffHunk": "@@ -43,4 +43,10 @@ public FSDataInputStream openFile(Path path, HiveFileContext hiveFileContext)\n     {\n         throw new UnsupportedOperationException();\n     }\n+\n+    public boolean renameFile(Path source, Path destination)", "originalCommit": "1dc330649d8e828968c6f5e85a6161ee87e448c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTExODYzOA==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r495118638", "bodyText": "this assignment looks unnecessary", "author": "highker", "createdAt": "2020-09-25T17:02:24Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSink.java", "diffHunk": "@@ -228,6 +238,19 @@ public long getValidationCpuNanos()\n                 .mapToLong(HiveWriter::getValidationCpuNanos)\n                 .sum();\n \n+        if (waitForFileRenaming && verificationTasks.isEmpty()) {\n+            ImmutableList.Builder<Slice> partitionUpdatesWithRenamedFileNames = ImmutableList.builder();\n+            List<ListenableFuture<?>> futures = new ArrayList<>();\n+            for (int i = 0; i < writers.size(); i++) {\n+                ListenableFuture<?> fileNameFuture = toListenableFuture(hiveMetadataUpdater.getMetadataResult(i));\n+                SettableFuture renamingFuture = SettableFuture.create();\n+                futures.add(renamingFuture);\n+                int writerIndex = i;", "originalCommit": "32a2a616909a6e6f6f94f42c4d857334f70ad170", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNDUzOQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r495204539", "bodyText": "If i use i as input param to lambda function then i am getting syntax error Variable used in lambda expression should be final or effectivelyfinal. Hence added this line.", "author": "NikhilCollooru", "createdAt": "2020-09-25T20:01:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTExODYzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTExODc4NA==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r495118784", "bodyText": "s/i/writerIndex", "author": "highker", "createdAt": "2020-09-25T17:02:39Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSink.java", "diffHunk": "@@ -228,6 +238,19 @@ public long getValidationCpuNanos()\n                 .mapToLong(HiveWriter::getValidationCpuNanos)\n                 .sum();\n \n+        if (waitForFileRenaming && verificationTasks.isEmpty()) {\n+            ImmutableList.Builder<Slice> partitionUpdatesWithRenamedFileNames = ImmutableList.builder();\n+            List<ListenableFuture<?>> futures = new ArrayList<>();\n+            for (int i = 0; i < writers.size(); i++) {", "originalCommit": "32a2a616909a6e6f6f94f42c4d857334f70ad170", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIyODgxOQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r497228819", "bodyText": "Comment not addressed? i -> writerIndex", "author": "highker", "createdAt": "2020-09-30T03:55:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTExODc4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkwNjYyOQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r497906629", "bodyText": "Like i said above. If i use i as input param to lambda function then i am getting syntax error Variable used in lambda expression should be final or effectivelyfinal. Hence used i here and assigned it a new int variable writerIndex below.", "author": "NikhilCollooru", "createdAt": "2020-10-01T01:14:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTExODc4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEyMTE4OA==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r495121188", "bodyText": "assert list size is one", "author": "highker", "createdAt": "2020-09-25T17:06:59Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSink.java", "diffHunk": "@@ -353,6 +376,41 @@ private void sendMetadataUpdateRequest(Optional<String> partitionName, int write\n             return;\n         }\n         hiveMetadataUpdater.addMetadataUpdateRequest(schemaName, tableName, partitionName, writerIndex);\n+        waitForFileRenaming = true;\n+    }\n+\n+    private void renameFiles(String fileName, int writerIndex, SettableFuture<?> renamingFuture, ImmutableList.Builder<Slice> partitionUpdatesWithRenamedFileNames)\n+    {\n+        HdfsContext context = new HdfsContext(session, schemaName, tableName);\n+        HiveWriter writer = writers.get(writerIndex);\n+        PartitionUpdate partitionUpdate = writer.getPartitionUpdate();\n+\n+        // Only one file is written by a writer\n+        FileWriteInfo fileWriteInfo = partitionUpdate.getFileWriteInfos().get(0);", "originalCommit": "32a2a616909a6e6f6f94f42c4d857334f70ad170", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "51666201cbb71c369910bca6e976328238aa62f9", "url": "https://github.com/prestodb/presto/commit/51666201cbb71c369910bca6e976328238aa62f9", "message": "Add integration tests for file renaming", "committedDate": "2020-09-25T19:53:29Z", "type": "forcePushed"}, {"oid": "c77545f32735fd699c6ce3e5eab7bd21a17547dc", "url": "https://github.com/prestodb/presto/commit/c77545f32735fd699c6ce3e5eab7bd21a17547dc", "message": "Disable listFiles call to underlying storage\n\nGet the filenames and filesizes from Metastore partition object\nand use them to create splits. This way we can avoid listFiles()\ncall to underlying storage.", "committedDate": "2020-09-26T01:00:10Z", "type": "forcePushed"}, {"oid": "33d310c1ebf5b89c04b8c3320e24d98764254964", "url": "https://github.com/prestodb/presto/commit/33d310c1ebf5b89c04b8c3320e24d98764254964", "message": "Disable listFiles call to underlying storage\n\nGet the filenames and filesizes from Metastore partition object\nand use them to create splits. This way we can avoid listFiles()\ncall to underlying storage.", "committedDate": "2020-09-26T04:12:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUyMTE1MQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r495521151", "bodyText": "Use QueryId as the type for the second param", "author": "highker", "createdAt": "2020-09-27T03:11:49Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveMetadata.java", "diffHunk": "@@ -2879,6 +2883,12 @@ public void revokeTablePrivileges(ConnectorSession session, SchemaTableName sche\n         return toCompletableFuture(stagingFileCommitter.commitFiles(session, handle.getSchemaName(), handle.getTableName(), getPartitionUpdates(fragments)));\n     }\n \n+    @Override\n+    public List<ConnectorMetadataUpdateHandle> getMetadataUpdateResults(List<ConnectorMetadataUpdateHandle> metadataUpdateRequests, String queryId)", "originalCommit": "16eab906bf207049fd524cd1ad55c91488a457cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUyMTk3Nw==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r495521977", "bodyText": "We should use a concurrent hash map or something like to to remember everything. We purged finished queries by adding a callback to QueryManager.addStateChangeListener. Note that the callback itself could unfortunately introduce another interface in connector metadata. Let me know if you might come up with better solution than that.", "author": "highker", "createdAt": "2020-09-27T03:22:21Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveFileRenamer.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import org.weakref.jmx.Managed;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class HiveFileRenamer\n+{\n+    private final LoadingCache<HiveMetadataUpdateKey, AtomicLong> partitionFileCounterCache;\n+    private final LoadingCache<HiveMetadataUpdateHandle, String> hiveMetadataResultCache;", "originalCommit": "16eab906bf207049fd524cd1ad55c91488a457cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYwMjk1MA==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r495602950", "bodyText": "How about we inject QueryManager directly into HiveFileRenamer because this is to help purges entries in HiveFileRenamer specifically. WDYT ?", "author": "NikhilCollooru", "createdAt": "2020-09-27T18:50:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUyMTk3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUyMjI3NQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r495522275", "bodyText": "We don't need this if we have good way to purge queries", "author": "highker", "createdAt": "2020-09-27T03:26:28Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java", "diffHunk": "@@ -181,6 +181,10 @@\n     private boolean isPartialAggregationPushdownEnabled;\n     private boolean isPartialAggregationPushdownForVariableLengthDatatypesEnabled;\n \n+    private boolean fileRenamingEnabled;\n+    private long fileRenamerCacheSize = 1000000;\n+    private Duration fileRenamerCacheTtl = new Duration(15, TimeUnit.MINUTES);", "originalCommit": "2213f94daaa54e31f11b2485c6b9c9f016bf2f84", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "aec75b5969a75df8e37f118700a0bb0ed5d1ccb3", "url": "https://github.com/prestodb/presto/commit/aec75b5969a75df8e37f118700a0bb0ed5d1ccb3", "message": "Add integration tests for file renaming", "committedDate": "2020-09-29T01:10:52Z", "type": "forcePushed"}, {"oid": "eeb61e097cf67d78d192ccfa89a25e3acf01ea30", "url": "https://github.com/prestodb/presto/commit/eeb61e097cf67d78d192ccfa89a25e3acf01ea30", "message": "Add integration tests for file renaming", "committedDate": "2020-09-29T01:42:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIyOTM1OQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r497229359", "bodyText": "we need to handle the future. Ideally, we can have the processing after file renaming into a callback.", "author": "highker", "createdAt": "2020-09-30T03:57:53Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HivePageSink.java", "diffHunk": "@@ -354,6 +378,43 @@ private void sendMetadataUpdateRequest(Optional<String> partitionName, int write\n             return;\n         }\n         hiveMetadataUpdater.addMetadataUpdateRequest(schemaName, tableName, partitionName, writerIndex);\n+        waitForFileRenaming = true;\n+    }\n+\n+    private void renameFiles(String fileName, int writerIndex, SettableFuture<?> renamingFuture, ImmutableList.Builder<Slice> partitionUpdatesWithRenamedFileNames)\n+    {\n+        HdfsContext context = new HdfsContext(session, schemaName, tableName);\n+        HiveWriter writer = writers.get(writerIndex);\n+        PartitionUpdate partitionUpdate = writer.getPartitionUpdate();\n+\n+        // Check that only one file is written by a writer\n+        checkArgument(partitionUpdate.getFileWriteInfos().size() == 1, \"HiveWriter wrote data to more than one file\");\n+\n+        FileWriteInfo fileWriteInfo = partitionUpdate.getFileWriteInfos().get(0);\n+        Path fromPath = new Path(partitionUpdate.getWritePath(), fileWriteInfo.getWriteFileName());\n+        Path toPath = new Path(partitionUpdate.getWritePath(), fileName);\n+        try {\n+            ExtendedFileSystem fileSystem = hdfsEnvironment.getFileSystem(context, fromPath);\n+            fileSystem.renameFileAsync(fromPath, toPath);", "originalCommit": "205ac4d15a6488255a2a8f12c913b5db14098f74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIzMDMzOA==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r497230338", "bodyText": "Map<...>", "author": "highker", "createdAt": "2020-09-30T04:02:18Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveFileRenamer.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.facebook.presto.spi.QueryId;\n+import com.facebook.presto.spi.SchemaTableName;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class HiveFileRenamer\n+{\n+    private final ConcurrentMap<QueryId, Map<HiveMetadataUpdateKey, AtomicLong>> queryPartitionFileCounterMap = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<QueryId, Map<HiveMetadataUpdateHandle, String>> queryHiveMetadataResultMap = new ConcurrentHashMap<>();", "originalCommit": "08755ed300c8bb8ffc8f50cca06704b97e8ffe65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIzMDY5MA==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r497230690", "bodyText": "use immutable list builder", "author": "highker", "createdAt": "2020-09-30T04:03:54Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveFileRenamer.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.facebook.presto.spi.QueryId;\n+import com.facebook.presto.spi.SchemaTableName;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class HiveFileRenamer\n+{\n+    private final ConcurrentMap<QueryId, Map<HiveMetadataUpdateKey, AtomicLong>> queryPartitionFileCounterMap = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<QueryId, Map<HiveMetadataUpdateHandle, String>> queryHiveMetadataResultMap = new ConcurrentHashMap<>();\n+\n+    public List<ConnectorMetadataUpdateHandle> getMetadataUpdateResults(List<ConnectorMetadataUpdateHandle> metadataUpdateRequests, QueryId queryId)\n+    {\n+        List<ConnectorMetadataUpdateHandle> metadataUpdateResults = new ArrayList<>();", "originalCommit": "08755ed300c8bb8ffc8f50cca06704b97e8ffe65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIzMjQ3OQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r497232479", "bodyText": "Let's add a test to TestHiveDistributedQueries or any other integration tests to make sure after test ends, there is no dangling queries in the map. #14784 is an example.", "author": "highker", "createdAt": "2020-09-30T04:11:44Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveFileRenamer.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.facebook.presto.spi.QueryId;\n+import com.facebook.presto.spi.SchemaTableName;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class HiveFileRenamer", "originalCommit": "08755ed300c8bb8ffc8f50cca06704b97e8ffe65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIzMjU1OQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r497232559", "bodyText": "static", "author": "highker", "createdAt": "2020-09-30T04:12:07Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveFileRenamer.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.facebook.presto.spi.QueryId;\n+import com.facebook.presto.spi.SchemaTableName;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class HiveFileRenamer\n+{\n+    private final ConcurrentMap<QueryId, Map<HiveMetadataUpdateKey, AtomicLong>> queryPartitionFileCounterMap = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<QueryId, Map<HiveMetadataUpdateHandle, String>> queryHiveMetadataResultMap = new ConcurrentHashMap<>();\n+\n+    public List<ConnectorMetadataUpdateHandle> getMetadataUpdateResults(List<ConnectorMetadataUpdateHandle> metadataUpdateRequests, QueryId queryId)\n+    {\n+        List<ConnectorMetadataUpdateHandle> metadataUpdateResults = new ArrayList<>();\n+\n+        for (ConnectorMetadataUpdateHandle connectorMetadataUpdateHandle : metadataUpdateRequests) {\n+            HiveMetadataUpdateHandle request = (HiveMetadataUpdateHandle) connectorMetadataUpdateHandle;\n+            String fileName = getFileName(request, queryId);\n+            metadataUpdateResults.add(new HiveMetadataUpdateHandle(request.getRequestId(), request.getSchemaTableName(), request.getPartitionName(), Optional.of(fileName)));\n+        }\n+        return metadataUpdateResults;\n+    }\n+\n+    public void cleanup(QueryId queryId)\n+    {\n+        queryPartitionFileCounterMap.remove(queryId);\n+        queryHiveMetadataResultMap.remove(queryId);\n+    }\n+\n+    private String getFileName(HiveMetadataUpdateHandle request, QueryId queryId)\n+    {\n+        if (!queryPartitionFileCounterMap.containsKey(queryId) || !queryHiveMetadataResultMap.containsKey(queryId)) {\n+            queryPartitionFileCounterMap.putIfAbsent(queryId, new ConcurrentHashMap<>());\n+            queryHiveMetadataResultMap.putIfAbsent(queryId, new ConcurrentHashMap<>());\n+        }\n+\n+        // To keep track of the file counter per query per partition\n+        Map<HiveMetadataUpdateKey, AtomicLong> partitionFileCounterMap = queryPartitionFileCounterMap.get(queryId);\n+\n+        // To keep track of the file name result per query per request\n+        // This is to make sure that request - fileName mapping is 1:1\n+        Map<HiveMetadataUpdateHandle, String> hiveMetadataResultMap = queryHiveMetadataResultMap.get(queryId);\n+\n+        // If we have seen this request before then directly return the result.\n+        if (hiveMetadataResultMap.containsKey(request)) {\n+            // We come here if for some reason the worker did not receive the fileName and it retried the request.\n+            return hiveMetadataResultMap.get(request);\n+        }\n+\n+        HiveMetadataUpdateKey key = new HiveMetadataUpdateKey(request);\n+        partitionFileCounterMap.putIfAbsent(key, new AtomicLong());\n+\n+        AtomicLong fileCount = partitionFileCounterMap.get(key);\n+        String fileName = Long.valueOf(fileCount.incrementAndGet()).toString();\n+\n+        // Store the request - fileName mapping\n+        hiveMetadataResultMap.put(request, fileName);\n+\n+        return fileName;\n+    }\n+\n+    private class HiveMetadataUpdateKey", "originalCommit": "08755ed300c8bb8ffc8f50cca06704b97e8ffe65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIzMzQ5OA==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r497233498", "bodyText": "Do we wanna start with new AtomicLong(1)? Actually, check the bucketed case. If bucketed file name started with 1 then we can use AtomicLong(1); otherwise AtomicLong(0).", "author": "highker", "createdAt": "2020-09-30T04:16:25Z", "path": "presto-hive/src/main/java/com/facebook/presto/hive/HiveFileRenamer.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.facebook.presto.spi.QueryId;\n+import com.facebook.presto.spi.SchemaTableName;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class HiveFileRenamer\n+{\n+    private final ConcurrentMap<QueryId, Map<HiveMetadataUpdateKey, AtomicLong>> queryPartitionFileCounterMap = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<QueryId, Map<HiveMetadataUpdateHandle, String>> queryHiveMetadataResultMap = new ConcurrentHashMap<>();\n+\n+    public List<ConnectorMetadataUpdateHandle> getMetadataUpdateResults(List<ConnectorMetadataUpdateHandle> metadataUpdateRequests, QueryId queryId)\n+    {\n+        List<ConnectorMetadataUpdateHandle> metadataUpdateResults = new ArrayList<>();\n+\n+        for (ConnectorMetadataUpdateHandle connectorMetadataUpdateHandle : metadataUpdateRequests) {\n+            HiveMetadataUpdateHandle request = (HiveMetadataUpdateHandle) connectorMetadataUpdateHandle;\n+            String fileName = getFileName(request, queryId);\n+            metadataUpdateResults.add(new HiveMetadataUpdateHandle(request.getRequestId(), request.getSchemaTableName(), request.getPartitionName(), Optional.of(fileName)));\n+        }\n+        return metadataUpdateResults;\n+    }\n+\n+    public void cleanup(QueryId queryId)\n+    {\n+        queryPartitionFileCounterMap.remove(queryId);\n+        queryHiveMetadataResultMap.remove(queryId);\n+    }\n+\n+    private String getFileName(HiveMetadataUpdateHandle request, QueryId queryId)\n+    {\n+        if (!queryPartitionFileCounterMap.containsKey(queryId) || !queryHiveMetadataResultMap.containsKey(queryId)) {\n+            queryPartitionFileCounterMap.putIfAbsent(queryId, new ConcurrentHashMap<>());\n+            queryHiveMetadataResultMap.putIfAbsent(queryId, new ConcurrentHashMap<>());\n+        }\n+\n+        // To keep track of the file counter per query per partition\n+        Map<HiveMetadataUpdateKey, AtomicLong> partitionFileCounterMap = queryPartitionFileCounterMap.get(queryId);\n+\n+        // To keep track of the file name result per query per request\n+        // This is to make sure that request - fileName mapping is 1:1\n+        Map<HiveMetadataUpdateHandle, String> hiveMetadataResultMap = queryHiveMetadataResultMap.get(queryId);\n+\n+        // If we have seen this request before then directly return the result.\n+        if (hiveMetadataResultMap.containsKey(request)) {\n+            // We come here if for some reason the worker did not receive the fileName and it retried the request.\n+            return hiveMetadataResultMap.get(request);\n+        }\n+\n+        HiveMetadataUpdateKey key = new HiveMetadataUpdateKey(request);\n+        partitionFileCounterMap.putIfAbsent(key, new AtomicLong());", "originalCommit": "08755ed300c8bb8ffc8f50cca06704b97e8ffe65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkwNjU2Mg==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r497906562", "bodyText": "In bucketed case the file name starts with 0. AtomicLong() is same as AtomicLong(0) . But will change it to AtomicLong(0) as suggested, to be on safe side.", "author": "NikhilCollooru", "createdAt": "2020-10-01T01:14:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIzMzQ5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIzMzc2NQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r497233765", "bodyText": "TEST_QUERY_ID", "author": "highker", "createdAt": "2020-09-30T04:17:39Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileRenamer.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.facebook.presto.spi.QueryId;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.TestHiveMetadataUpdateHandle.TEST_HIVE_METADATA_UPDATE_REQUEST;\n+import static com.facebook.presto.hive.TestHiveMetadataUpdateHandle.TEST_PARTITION_NAME;\n+import static com.facebook.presto.hive.TestHiveMetadataUpdateHandle.TEST_REQUEST_ID;\n+import static com.facebook.presto.hive.TestHiveMetadataUpdateHandle.TEST_SCHEMA_NAME;\n+import static com.facebook.presto.hive.TestHiveMetadataUpdateHandle.TEST_SCHEMA_TABLE_NAME;\n+import static com.facebook.presto.hive.TestHiveMetadataUpdateHandle.TEST_TABLE_NAME;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+@Test\n+public class TestHiveFileRenamer\n+{\n+    private static final QueryId TEST_QUERYID = new QueryId(\"test\");", "originalCommit": "08755ed300c8bb8ffc8f50cca06704b97e8ffe65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIzMzkyMw==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r497233923", "bodyText": "List<String> aggregatedFileNames = new ArrayList<>(fileNames);", "author": "highker", "createdAt": "2020-09-30T04:18:24Z", "path": "presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileRenamer.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.facebook.presto.hive;\n+\n+import com.facebook.presto.spi.ConnectorMetadataUpdateHandle;\n+import com.facebook.presto.spi.QueryId;\n+import com.facebook.presto.spi.SchemaTableName;\n+import com.google.common.collect.ImmutableList;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Collectors;\n+\n+import static com.facebook.presto.hive.TestHiveMetadataUpdateHandle.TEST_HIVE_METADATA_UPDATE_REQUEST;\n+import static com.facebook.presto.hive.TestHiveMetadataUpdateHandle.TEST_PARTITION_NAME;\n+import static com.facebook.presto.hive.TestHiveMetadataUpdateHandle.TEST_REQUEST_ID;\n+import static com.facebook.presto.hive.TestHiveMetadataUpdateHandle.TEST_SCHEMA_NAME;\n+import static com.facebook.presto.hive.TestHiveMetadataUpdateHandle.TEST_SCHEMA_TABLE_NAME;\n+import static com.facebook.presto.hive.TestHiveMetadataUpdateHandle.TEST_TABLE_NAME;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+@Test\n+public class TestHiveFileRenamer\n+{\n+    private static final QueryId TEST_QUERYID = new QueryId(\"test\");\n+    private static final int REQUEST_COUNT = 10;\n+    private static final int PARTITION_COUNT = 10;\n+    private static final int TABLE_COUNT = 10;\n+    private static final int THREAD_COUNT = 100;\n+    private static final int THREAD_POOL_SIZE = 10;\n+\n+    @Test\n+    public void testHiveFileRenamer()\n+    {\n+        HiveFileRenamer hiveFileRenamer = new HiveFileRenamer();\n+        List<ConnectorMetadataUpdateHandle> requests = ImmutableList.of(TEST_HIVE_METADATA_UPDATE_REQUEST);\n+        List<ConnectorMetadataUpdateHandle> results = hiveFileRenamer.getMetadataUpdateResults(requests, TEST_QUERYID);\n+\n+        // Assert # of requests is equal to # of results\n+        assertEquals(requests.size(), results.size());\n+\n+        HiveMetadataUpdateHandle result = (HiveMetadataUpdateHandle) results.get(0);\n+\n+        assertEquals(result.getRequestId(), TEST_REQUEST_ID);\n+        assertEquals(result.getSchemaTableName(), TEST_SCHEMA_TABLE_NAME);\n+        assertEquals(result.getPartitionName(), Optional.of(TEST_PARTITION_NAME));\n+\n+        // Assert file name returned is \"1\"\n+        assertEquals(result.getMetadataUpdate(), Optional.of(\"1\"));\n+    }\n+\n+    @Test\n+    public void testFileNamesForSinglePartition()\n+    {\n+        HiveFileRenamer hiveFileRenamer = new HiveFileRenamer();\n+        List<String> aggregatedFileNames = new ArrayList<>();\n+        List<ConnectorMetadataUpdateHandle> requests = createHiveMetadataUpdateRequests(TEST_SCHEMA_NAME, TEST_TABLE_NAME, TEST_PARTITION_NAME);\n+        List<String> fileNames = getFileNames(hiveFileRenamer, requests);\n+        aggregatedFileNames.addAll(fileNames);", "originalCommit": "08755ed300c8bb8ffc8f50cca06704b97e8ffe65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIzNDY3Nw==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r497234677", "bodyText": "Do we actually need this?", "author": "highker", "createdAt": "2020-09-30T04:21:43Z", "path": "presto-main/src/main/java/com/facebook/presto/metadata/MetadataManager.java", "diffHunk": "@@ -138,6 +141,7 @@\n     private final TransactionManager transactionManager;\n \n     private final ConcurrentMap<String, Collection<ConnectorMetadata>> catalogsByQueryId = new ConcurrentHashMap<>();\n+    private final Set<QueryId> queriesWithRegisteredCallbacks = new HashSet<>();", "originalCommit": "08755ed300c8bb8ffc8f50cca06704b97e8ffe65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIzOTE2OA==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r497239168", "bodyText": "This is to make sure that we add only 1 callback for a query.", "author": "NikhilCollooru", "createdAt": "2020-09-30T04:41:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIzNDY3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIzNDc4NA==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r497234784", "bodyText": "It's ok to remove multiple times as long as we can make sure they are cleaned up", "author": "highker", "createdAt": "2020-09-30T04:22:05Z", "path": "presto-main/src/main/java/com/facebook/presto/metadata/MetadataManager.java", "diffHunk": "@@ -1210,6 +1214,28 @@ public void revokeTablePrivileges(Session session, QualifiedObjectName tableName\n         return toListenableFuture(metadata.commitPageSinkAsync(connectorSession, tableHandle.getConnectorHandle(), fragments));\n     }\n \n+    @Override\n+    public MetadataUpdates getMetadataUpdateResults(Session session, QueryManager queryManager, MetadataUpdates metadataUpdateRequests, QueryId queryId)\n+    {\n+        ConnectorId connectorId = metadataUpdateRequests.getConnectorId();\n+        ConnectorMetadata metadata = getCatalogMetadata(session, connectorId).getMetadata();\n+\n+        if (queryManager != null && !queriesWithRegisteredCallbacks.contains(queryId)) {", "originalCommit": "08755ed300c8bb8ffc8f50cca06704b97e8ffe65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIzOTM0NA==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r497239344", "bodyText": "We want to add only 1 callback for a given queryId. If we don't check, we will end up adding callback everytime we call getMetadataUpdateResults. That might result is adding 10's of callbacks just for 1 query.", "author": "NikhilCollooru", "createdAt": "2020-09-30T04:42:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIzNDc4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIzNTE4MA==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r497235180", "bodyText": "if (!metadataUpdateRequests.getMetadataUpdates().isEmpty())", "author": "highker", "createdAt": "2020-09-30T04:23:41Z", "path": "presto-main/src/main/java/com/facebook/presto/server/remotetask/TaskInfoFetcher.java", "diffHunk": "@@ -225,6 +250,11 @@ private synchronized void sendNextRequest()\n             return;\n         }\n \n+        MetadataUpdates metadataUpdateRequests = taskInfo.getMetadataUpdates();\n+        if (metadataUpdateRequests.getMetadataUpdates().size() > 0) {", "originalCommit": "08755ed300c8bb8ffc8f50cca06704b97e8ffe65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0ee1a54d087ae85fd607a8b00dcbfe24788758e7", "url": "https://github.com/prestodb/presto/commit/0ee1a54d087ae85fd607a8b00dcbfe24788758e7", "message": "Add integration tests for file renaming", "committedDate": "2020-10-01T01:08:52Z", "type": "forcePushed"}, {"oid": "6c40f9b7f45be0f93c61c4427d7b14f9abf97ca6", "url": "https://github.com/prestodb/presto/commit/6c40f9b7f45be0f93c61c4427d7b14f9abf97ca6", "message": "Add integration tests for file renaming", "committedDate": "2020-10-01T02:12:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk3NTUzMQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r497975531", "bodyText": "!taskMetadataContext.getMetadataUpdaters().isEmpty()", "author": "highker", "createdAt": "2020-10-01T04:21:24Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/SqlTask.java", "diffHunk": "@@ -313,6 +317,24 @@ private TaskStats getTaskStats(TaskHolder taskHolder)\n         return new TaskStats(taskStateMachine.getCreatedTime(), endTime);\n     }\n \n+    private MetadataUpdates getMetadataUpdateRequests(TaskHolder taskHolder)\n+    {\n+        ConnectorId connectorId = null;\n+        ImmutableList.Builder<ConnectorMetadataUpdateHandle> connectorMetadataUpdatesBuilder = ImmutableList.builder();\n+\n+        if (taskHolder.getTaskExecution() != null) {\n+            TaskMetadataContext taskMetadataContext = taskHolder.getTaskExecution().getTaskContext().getTaskMetadataContext();\n+            if (taskMetadataContext.getMetadataUpdaters().size() > 0) {", "originalCommit": "88dc3c3d0e51037e93ed4d70ca7e74ef8c7fdfaf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk3NjIzNQ==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r497976235", "bodyText": "remove default; throw exception for all other implementations.", "author": "highker", "createdAt": "2020-10-01T04:24:34Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/TaskManager.java", "diffHunk": "@@ -142,4 +143,11 @@ TaskInfo updateTask(\n      * from {@code remoteSourceTaskId} will be ignored.\n      */\n     void removeRemoteSource(TaskId taskId, TaskId remoteSourceTaskId);\n+\n+    /**\n+     * Update the results of metadata requests sent\n+     */\n+    default void updateMetadataResults(TaskId taskId, MetadataUpdates metadataUpdates)", "originalCommit": "489fe81d5cb1ab91a096f91faf15751f747fda46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk3ODk4Mw==", "url": "https://github.com/prestodb/presto/pull/14974#discussion_r497978983", "bodyText": "ConcurrentHashMap.newKeySet();", "author": "highker", "createdAt": "2020-10-01T04:37:33Z", "path": "presto-main/src/main/java/com/facebook/presto/metadata/MetadataManager.java", "diffHunk": "@@ -138,6 +141,7 @@\n     private final TransactionManager transactionManager;\n \n     private final ConcurrentMap<String, Collection<ConnectorMetadata>> catalogsByQueryId = new ConcurrentHashMap<>();\n+    private final Set<QueryId> queriesWithRegisteredCallbacks = new HashSet<>();", "originalCommit": "9818eed3128df866247529ace986988308a15abb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "801401bdca41234053d85f4e4bc4b52a9d24418e", "url": "https://github.com/prestodb/presto/commit/801401bdca41234053d85f4e4bc4b52a9d24418e", "message": "Piggyback MetadataUpdateRequests to coordinator as part of TaskInfo\n\nCollect all the metadata update requests and send them to coordinator\nas part of the TaskInfo.", "committedDate": "2020-10-01T05:49:59Z", "type": "commit"}, {"oid": "ce16bc3555b8e85f661a9261da0b102c51bf305d", "url": "https://github.com/prestodb/presto/commit/ce16bc3555b8e85f661a9261da0b102c51bf305d", "message": "Add new POST {taskId}/metadataresults endpoint on worker", "committedDate": "2020-10-01T06:06:31Z", "type": "commit"}, {"oid": "2d122fd4a380ab3e833487bf8241851d5ed3182c", "url": "https://github.com/prestodb/presto/commit/2d122fd4a380ab3e833487bf8241851d5ed3182c", "message": "Rename files written by HivePageSink", "committedDate": "2020-10-01T06:06:38Z", "type": "commit"}, {"oid": "c137ae4eb786d1b7151fea92345ee531a7111381", "url": "https://github.com/prestodb/presto/commit/c137ae4eb786d1b7151fea92345ee531a7111381", "message": "POST the metadata results to worker", "committedDate": "2020-10-01T06:08:03Z", "type": "commit"}, {"oid": "1b377d2f72ac5856874d8f62597653d8b5b4a3b1", "url": "https://github.com/prestodb/presto/commit/1b377d2f72ac5856874d8f62597653d8b5b4a3b1", "message": "Add config parameters to enable hive file renaming", "committedDate": "2020-10-01T06:08:09Z", "type": "commit"}, {"oid": "665045ac6d31be352e57c033905171f748ec2f81", "url": "https://github.com/prestodb/presto/commit/665045ac6d31be352e57c033905171f748ec2f81", "message": "Add integration tests for file renaming", "committedDate": "2020-10-01T06:08:09Z", "type": "commit"}, {"oid": "665045ac6d31be352e57c033905171f748ec2f81", "url": "https://github.com/prestodb/presto/commit/665045ac6d31be352e57c033905171f748ec2f81", "message": "Add integration tests for file renaming", "committedDate": "2020-10-01T06:08:09Z", "type": "forcePushed"}]}