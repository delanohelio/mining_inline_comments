{"pr_number": 14822, "pr_title": "Support return type coercion in CREATE FUNCTION", "pr_createdAt": "2020-07-10T01:37:00Z", "pr_url": "https://github.com/prestodb/presto/pull/14822", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5NzYyNw==", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r453097627", "bodyText": "As we discussed offline. We want to test that those functions can not only be created, but also be executed. Please add test cases that invokes this created function.", "author": "caithagoras", "createdAt": "2020-07-10T22:03:11Z", "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java", "diffHunk": "@@ -86,9 +86,7 @@ public void testCreateFunctionInvalidFunctionName()\n     @Test\n     public void testCreateFunctionInvalidSemantics()\n     {\n-        assertQueryFails(\n-                \"CREATE FUNCTION testing.common.tan (x int) RETURNS varchar COMMENT 'tangent trigonometric function' RETURN sin(x) / cos(x)\",\n-                \"Function implementation type 'double' does not match declared return type 'varchar'\");\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.common.tan (x int) RETURNS varchar COMMENT 'tangent trigonometric function' RETURN sin(x) / cos(x)\");", "originalCommit": "b7f2926e498aaf995bc308246590258b4688ded9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAyNjIzMQ==", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454026231", "bodyText": "Fixed, added unit tests to test execution.", "author": "jetsasank", "createdAt": "2020-07-14T00:31:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5NzYyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2MTcxMQ==", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454561711", "bodyText": "nit: Let use lower-underscore format for function names (as a convention) in the test. e.g. testing.test.return_double. Same and below.", "author": "caithagoras", "createdAt": "2020-07-14T18:33:25Z", "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java", "diffHunk": "@@ -112,6 +112,42 @@ public void testCreateFunction()\n         assertQueryFails(\"CREATE FUNCTION testing.test.foo(x smallint) RETURNS bigint LANGUAGE JAVA EXTERNAL NAME 'foo.from.another.library'\", \".*mismatched input ''foo.from.another.library''. Expecting: <identifier>\");\n         assertQueryFails(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE JAVA EXTERNAL NAME\", \".*mismatched input '<EOF>'. Expecting: <identifier>\");\n         assertQueryFails(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE UNSUPPORTED EXTERNAL\", \"Catalog testing does not support functions implemented in language UNSUPPORTED\");\n+\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.returnDouble() RETURNS DOUBLE RETURN 1\");\n+        String createFunctionReturnDoubleFormatted = \"CREATE FUNCTION testing.test.\\\"returnDouble\\\" ()\\n\" +", "originalCommit": "0b8dc562f386707188baf24294a4a1b4b2da59f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2NTEyNQ==", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454565125", "bodyText": "Let's also add some assertion to this case trying to run this function\ncomputeActual(\"SELECT testing.test.return_double() + 1\")\nassert ...", "author": "caithagoras", "createdAt": "2020-07-14T18:39:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2MTcxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU3Nzg3NA==", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454577874", "bodyText": "fixed.", "author": "jetsasank", "createdAt": "2020-07-14T19:02:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2MTcxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2MzM0OA==", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454563348", "bodyText": "Let's place those test cases into a test separate method.\n@Test\npublic void testCreateFunctionWithCoercion() {\n    ...\n}", "author": "caithagoras", "createdAt": "2020-07-14T18:36:21Z", "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java", "diffHunk": "@@ -112,6 +112,42 @@ public void testCreateFunction()\n         assertQueryFails(\"CREATE FUNCTION testing.test.foo(x smallint) RETURNS bigint LANGUAGE JAVA EXTERNAL NAME 'foo.from.another.library'\", \".*mismatched input ''foo.from.another.library''. Expecting: <identifier>\");\n         assertQueryFails(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE JAVA EXTERNAL NAME\", \".*mismatched input '<EOF>'. Expecting: <identifier>\");\n         assertQueryFails(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE UNSUPPORTED EXTERNAL\", \"Catalog testing does not support functions implemented in language UNSUPPORTED\");\n+\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.returnDouble() RETURNS DOUBLE RETURN 1\");", "originalCommit": "0b8dc562f386707188baf24294a4a1b4b2da59f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU3NjY2Mw==", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454576663", "bodyText": "fixed.", "author": "jetsasank", "createdAt": "2020-07-14T18:59:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2MzM0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2NDA1Mw==", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454564053", "bodyText": "This is a case where we're testing that cast is not added. Let's move it to the bottom and add a comment\n// no explicit cast added", "author": "caithagoras", "createdAt": "2020-07-14T18:37:36Z", "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java", "diffHunk": "@@ -112,6 +112,42 @@ public void testCreateFunction()\n         assertQueryFails(\"CREATE FUNCTION testing.test.foo(x smallint) RETURNS bigint LANGUAGE JAVA EXTERNAL NAME 'foo.from.another.library'\", \".*mismatched input ''foo.from.another.library''. Expecting: <identifier>\");\n         assertQueryFails(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE JAVA EXTERNAL NAME\", \".*mismatched input '<EOF>'. Expecting: <identifier>\");\n         assertQueryFails(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE UNSUPPORTED EXTERNAL\", \"Catalog testing does not support functions implemented in language UNSUPPORTED\");\n+\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.returnDouble() RETURNS DOUBLE RETURN 1\");\n+        String createFunctionReturnDoubleFormatted = \"CREATE FUNCTION testing.test.\\\"returnDouble\\\" ()\\n\" +\n+                \"RETURNS DOUBLE\\n\" +\n+                \"COMMENT ''\\n\" +\n+                \"LANGUAGE SQL\\n\" +\n+                \"NOT DETERMINISTIC\\n\" +\n+                \"CALLED ON NULL INPUT\\n\" +\n+                \"RETURN CAST(1 AS double)\";\n+\n+        MaterializedResult rows = computeActual(\"SHOW CREATE FUNCTION testing.test.returnDouble()\");\n+        assertEquals(rows.getMaterializedRows().get(0).getFields(), ImmutableList.of(createFunctionReturnDoubleFormatted, \"\"));\n+\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.returnInt() RETURNS INTEGER RETURN 1\");\n+        String createFunctionReturnIntFormatted = \"CREATE FUNCTION testing.test.\\\"returnInt\\\" ()\\n\" +\n+                \"RETURNS INTEGER\\n\" +\n+                \"COMMENT ''\\n\" +\n+                \"LANGUAGE SQL\\n\" +\n+                \"NOT DETERMINISTIC\\n\" +\n+                \"CALLED ON NULL INPUT\\n\" +\n+                \"RETURN 1\";\n+\n+        rows = computeActual(\"SHOW CREATE FUNCTION testing.test.returnInt()\");\n+        assertEquals(rows.getMaterializedRows().get(0).getFields(), ImmutableList.of(createFunctionReturnIntFormatted, \"\"));", "originalCommit": "0b8dc562f386707188baf24294a4a1b4b2da59f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU3NjU5Ng==", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454576596", "bodyText": "fixed.", "author": "jetsasank", "createdAt": "2020-07-14T18:59:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2NDA1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2NjMyOQ==", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454566329", "bodyText": "nit: ... since we have verified that the actual type of the body is coercible to declared return type.", "author": "caithagoras", "createdAt": "2020-07-14T18:41:36Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java", "diffHunk": "@@ -95,6 +98,17 @@ private SqlInvokedFunction createSqlInvokedFunction(CreateFunction statement)\n                 .build();\n         String body = formatSql(statement.getBody(), Optional.empty());\n \n+        if (statement.getBody() instanceof Return) {\n+            Expression bodyExpression = ((Return) statement.getBody()).getExpression();\n+            Type bodyType = analysis.getType(bodyExpression);\n+\n+            if (!bodyType.equals(metadata.getType(returnType))) {\n+                // Casting is safe-here, since the check to verify if the two types are Coercible is verified as part of the statement analyzer step.", "originalCommit": "0b8dc562f386707188baf24294a4a1b4b2da59f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU3MTQyNw==", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454571427", "bodyText": "fixed.", "author": "jetsasank", "createdAt": "2020-07-14T18:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2NjMyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2NzE4Mw==", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454567183", "bodyText": "String body;\nif () {\n    body = ...\n}\nelse {\n    body = ...\n}\nSo that you don't need to do any extra format when body is a Return.", "author": "caithagoras", "createdAt": "2020-07-14T18:43:07Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java", "diffHunk": "@@ -95,6 +98,17 @@ private SqlInvokedFunction createSqlInvokedFunction(CreateFunction statement)\n                 .build();\n         String body = formatSql(statement.getBody(), Optional.empty());\n \n+        if (statement.getBody() instanceof Return) {\n+            Expression bodyExpression = ((Return) statement.getBody()).getExpression();\n+            Type bodyType = analysis.getType(bodyExpression);\n+\n+            if (!bodyType.equals(metadata.getType(returnType))) {\n+                // Casting is safe-here, since the check to verify if the two types are Coercible is verified as part of the statement analyzer step.\n+                Expression castExpression = new Cast(bodyExpression, statement.getReturnType());\n+                body = formatSql(new Return(castExpression), Optional.empty());\n+            }\n+        }", "originalCommit": "0b8dc562f386707188baf24294a4a1b4b2da59f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU3MTcwMQ==", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454571701", "bodyText": "fixed.", "author": "jetsasank", "createdAt": "2020-07-14T18:51:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2NzE4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU4MDU5NQ==", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454580595", "bodyText": "Similar to what we're doing with the previous test case, let's also verify the execution of the function. e.g\ne.g.\ncomputeActual(\"SELECT lower(testing.test.return_varchar())\", ...", "author": "caithagoras", "createdAt": "2020-07-14T19:07:16Z", "path": "presto-tests/src/test/java/com/facebook/presto/tests/TestSqlFunctions.java", "diffHunk": "@@ -114,6 +114,50 @@ public void testCreateFunction()\n         assertQueryFails(\"CREATE FUNCTION testing.test.foo(x varchar) RETURNS varchar LANGUAGE UNSUPPORTED EXTERNAL\", \"Catalog testing does not support functions implemented in language UNSUPPORTED\");\n     }\n \n+    @Test\n+    public void testCreateFunctionWithCoercion()\n+    {\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.return_double() RETURNS DOUBLE RETURN 1\");\n+        String createFunctionReturnDoubleFormatted = \"CREATE FUNCTION testing.test.return_double ()\\n\" +\n+                \"RETURNS DOUBLE\\n\" +\n+                \"COMMENT ''\\n\" +\n+                \"LANGUAGE SQL\\n\" +\n+                \"NOT DETERMINISTIC\\n\" +\n+                \"CALLED ON NULL INPUT\\n\" +\n+                \"RETURN CAST(1 AS double)\";\n+\n+        MaterializedResult rows = computeActual(\"SHOW CREATE FUNCTION testing.test.return_double()\");\n+        assertEquals(rows.getMaterializedRows().get(0).getFields(), ImmutableList.of(createFunctionReturnDoubleFormatted, \"\"));\n+\n+        rows = computeActual(\"SELECT testing.test.return_double() + 1\");\n+        assertEquals(rows.getMaterializedRows().get(0).getFields().get(0), 2.0);\n+\n+        assertQuerySucceeds(\"CREATE FUNCTION testing.test.return_varchar() RETURNS VARCHAR RETURN 'ABC'\");\n+        String createFunctionReturnVarcharFormatted = \"CREATE FUNCTION testing.test.return_varchar ()\\n\" +\n+                \"RETURNS varchar\\n\" +\n+                \"COMMENT ''\\n\" +\n+                \"LANGUAGE SQL\\n\" +\n+                \"NOT DETERMINISTIC\\n\" +\n+                \"CALLED ON NULL INPUT\\n\" +\n+                \"RETURN CAST('ABC' AS varchar)\";\n+\n+        rows = computeActual(\"SHOW CREATE FUNCTION testing.test.return_varchar()\");\n+        assertEquals(rows.getMaterializedRows().get(0).getFields(), ImmutableList.of(createFunctionReturnVarcharFormatted, \"\"));", "originalCommit": "245ba41960e4cef0ab3c9fa6e579f1acc9a1e467", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxNDc1MA==", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454614750", "bodyText": "add the unit test case", "author": "jetsasank", "createdAt": "2020-07-14T20:10:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU4MDU5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU4MjMyNA==", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454582324", "bodyText": "Sorry, I didn't meant to introduce those duplicate lines. How about:\nRoutineBody body = statement.getBody();\nif (...) {\n    // update body in some cases\n}\n\nreturn new SqlInvokedFunction(\n    ...\n    formatSql(...)\n    ...\n);", "author": "caithagoras", "createdAt": "2020-07-14T19:10:19Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java", "diffHunk": "@@ -93,7 +96,26 @@ private SqlInvokedFunction createSqlInvokedFunction(CreateFunction statement)\n                 .setDeterminism(RoutineCharacteristics.Determinism.valueOf(statement.getCharacteristics().getDeterminism().name()))\n                 .setNullCallClause(RoutineCharacteristics.NullCallClause.valueOf(statement.getCharacteristics().getNullCallClause().name()))\n                 .build();\n-        String body = formatSql(statement.getBody(), Optional.empty());\n+        String body;\n+\n+        if (statement.getBody() instanceof Return) {\n+            Expression bodyExpression = ((Return) statement.getBody()).getExpression();\n+            Type bodyType = analysis.getType(bodyExpression);\n+\n+            if (!bodyType.equals(metadata.getType(returnType))) {\n+                // Casting is safe-here, since we have verified that the actual type of the body is coercible to declared return type.\n+                Expression castExpression = new Cast(bodyExpression, statement.getReturnType());\n+                body = formatSql(new Return(castExpression), Optional.empty());\n+            }\n+            else\n+            {\n+                body = formatSql(statement.getBody(), Optional.empty());\n+            }\n+        }\n+        else\n+        {\n+            body = formatSql(statement.getBody(), Optional.empty());\n+        }", "originalCommit": "245ba41960e4cef0ab3c9fa6e579f1acc9a1e467", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY0Mzk4Ng==", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454643986", "bodyText": "Inline line 108 and line 109.\nbody = new Return(new Cast(...));", "author": "caithagoras", "createdAt": "2020-07-14T21:03:56Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java", "diffHunk": "@@ -105,14 +106,8 @@ private SqlInvokedFunction createSqlInvokedFunction(CreateFunction statement, Me\n             if (!bodyType.equals(metadata.getType(returnType))) {\n                 // Casting is safe-here, since we have verified that the actual type of the body is coercible to declared return type.\n                 Expression castExpression = new Cast(bodyExpression, statement.getReturnType());\n-                body = formatSql(new Return(castExpression), Optional.empty());\n+                body = new Return(castExpression);", "originalCommit": "c98b7266b468ae8569ae7c1638e7d2c59904e573", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3MjgyNQ==", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454672825", "bodyText": "Somehow you introduced duplicated code blocks. I guess that's during the squash?", "author": "caithagoras", "createdAt": "2020-07-14T22:05:17Z", "path": "presto-main/src/main/java/com/facebook/presto/execution/CreateFunctionTask.java", "diffHunk": "@@ -93,15 +97,36 @@ private SqlInvokedFunction createSqlInvokedFunction(CreateFunction statement)\n                 .setDeterminism(RoutineCharacteristics.Determinism.valueOf(statement.getCharacteristics().getDeterminism().name()))\n                 .setNullCallClause(RoutineCharacteristics.NullCallClause.valueOf(statement.getCharacteristics().getNullCallClause().name()))\n                 .build();\n-        String body = formatSql(statement.getBody(), Optional.empty());\n+        RoutineBody body = statement.getBody();\n+\n+        if (statement.getBody() instanceof Return) {\n+            Expression bodyExpression = ((Return) statement.getBody()).getExpression();\n+            Type bodyType = analysis.getType(bodyExpression);\n+\n+            if (!bodyType.equals(metadata.getType(returnType))) {\n+                // Casting is safe-here, since we have verified that the actual type of the body is coercible to declared return type.\n+                body = new Return(new Cast(bodyExpression, statement.getReturnType()));\n+            }\n+        }\n+\n+        if (statement.getBody() instanceof Return) {\n+            Expression bodyExpression = ((Return) statement.getBody()).getExpression();\n+            Type bodyType = analysis.getType(bodyExpression);\n+\n+            if (!bodyType.equals(metadata.getType(returnType))) {\n+                // Casting is safe-here, since the check to verify if the two types are Coercible is verified as part of the statement analyzer step.\n+                Expression castExpression = new Cast(bodyExpression, statement.getReturnType());\n+                body = formatSql(new Return(castExpression), Optional.empty());\n+            }\n+        }", "originalCommit": "e5b5dcec97531a35b90d80ffdba009ef33fe3f67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3NDYxOQ==", "url": "https://github.com/prestodb/presto/pull/14822#discussion_r454674619", "bodyText": "Fixed the rebase issues manually and pushed the changes.", "author": "jetsasank", "createdAt": "2020-07-14T22:10:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3MjgyNQ=="}], "type": "inlineReview"}, {"oid": "499c6efd4a90fd0f9b7ea62e58642b20eda2febf", "url": "https://github.com/prestodb/presto/commit/499c6efd4a90fd0f9b7ea62e58642b20eda2febf", "message": "Support return type coercion in CREATE FUNCTION", "committedDate": "2020-07-14T22:08:36Z", "type": "commit"}]}