{"pr_number": 3606, "pr_title": "TRUNK-5970: Encounter to handle voided conditions.", "pr_createdAt": "2020-10-22T11:19:23Z", "pr_url": "https://github.com/openmrs/openmrs-core/pull/3606", "timeline": [{"oid": "034b801e0e9a18c9a94d7f84852c1d5c500432f9", "url": "https://github.com/openmrs/openmrs-core/commit/034b801e0e9a18c9a94d7f84852c1d5c500432f9", "message": "Allow encounters to handle voided conditions.", "committedDate": "2020-10-22T11:15:02Z", "type": "commit"}, {"oid": "7be99c6c4ae75bceb407d5cf908f4dccdca7e87c", "url": "https://github.com/openmrs/openmrs-core/commit/7be99c6c4ae75bceb407d5cf908f4dccdca7e87c", "message": "Added filters to remove condition.\nAdded test for remove condition.", "committedDate": "2020-10-22T11:15:03Z", "type": "commit"}, {"oid": "db8bd0b4c7f3ff8634d33e52f816dd5156552b98", "url": "https://github.com/openmrs/openmrs-core/commit/db8bd0b4c7f3ff8634d33e52f816dd5156552b98", "message": "Updated removeCondition conditions.", "committedDate": "2020-10-22T11:15:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE1OTY4Mg==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r515159682", "bodyText": "Let's cleanup this class a little. I believe that 1) it should not extend BaseContextSensitiveTest and that 2) the two mocked services are not needed.\nCan you confirm those two points?\nThen I'd simplify your test so that you setup your encounter with a bunch of conditions in a setup method so that you can work on a reference encounter across all your test cases.", "author": "mks-d", "createdAt": "2020-10-30T14:56:18Z", "path": "api/src/test/java/org/openmrs/EncounterTest.java", "diffHunk": "@@ -1397,4 +1397,85 @@ public void hasDiagnosis_shouldReturnFalseIfEncounterDoesNotHaveDiagnosis(){\n \t\tassertFalse(encounter.hasDiagnosis(diagnosis));\n \t}\n \n+\t/**\n+\t * @see Encounter#getConditions()\n+\t */\n+\t@Test\n+\tpublic void getAllConditions_shouldReturnAllCondition(){\n+\t\tEncounter encounter = new Encounter();\n+\n+\t\tCondition activeCondition = new Condition();\n+\t\tactiveCondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n+\t\tCodedOrFreeText freeText = new CodedOrFreeText();\n+\t\tfreeText.setNonCoded(\"Free text\");\n+\t\tactiveCondition.setCondition(freeText);\n+\t\tencounter.addCondition(activeCondition);\n+\n+\t\tCondition voidedCondition = new Condition();\n+\t\tvoidedCondition.setVoided(true);\n+\t\tvoidedCondition.setClinicalStatus(ConditionClinicalStatus.HISTORY_OF);\n+\t\tCodedOrFreeText freeText01 = new CodedOrFreeText();\n+\t\tfreeText01.setNonCoded(\"Free text\");\n+\t\tvoidedCondition.setCondition(freeText01);\n+\t\tencounter.addCondition(voidedCondition);\n+\n+\t\tassertEquals(2,encounter.getAllConditions(true).size());\n+\t}\n+\n+\t/**\n+\t * @see Encounter#getConditions()\n+\t */\n+\t@Test\n+\tpublic void getConditions_shouldReturnActiveCondition(){\n+\t\tEncounter encounter = new Encounter();\n+\n+\t\tCondition activeCondition = new Condition();\n+\t\tactiveCondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n+\t\tCodedOrFreeText freeText = new CodedOrFreeText();\n+\t\tfreeText.setNonCoded(\"Free text\");\n+\t\tactiveCondition.setCondition(freeText);\n+\t\tencounter.addCondition(activeCondition);\n+\n+\t\tCondition voidedCondition = new Condition();\n+\t\tvoidedCondition.setVoided(true);\n+\t\tvoidedCondition.setClinicalStatus(ConditionClinicalStatus.HISTORY_OF);\n+\t\tCodedOrFreeText freeText01 = new CodedOrFreeText();\n+\t\tfreeText01.setNonCoded(\"Free text\");\n+\t\tvoidedCondition.setCondition(freeText01);\n+\t\tencounter.addCondition(voidedCondition);\n+\t\t\n+\t\tassertEquals(1,encounter.getConditions().size());\n+\t}\n+\n+\t/**\n+\t * @see Encounter#getConditions()\n+\t */\n+\t@Test\n+\tpublic void removeConditions_shouldRemoveCondition(){\n+\t\tEncounter encounter = new Encounter();\n+\n+\t\tCondition activeCondition = new Condition();\n+\t\tactiveCondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n+\t\tCodedOrFreeText freeText = new CodedOrFreeText();\n+\t\tfreeText.setNonCoded(\"Free text\");\n+\t\tactiveCondition.setCondition(freeText);\n+\t\tencounter.addCondition(activeCondition);\n+\t\t// The condition should be voided\n+\t\tencounter.removeCondition(activeCondition);\n+\n+\n+\t\tCondition voidedCondition = new Condition();\n+\t\tvoidedCondition.setVoided(true);\n+\t\tvoidedCondition.setClinicalStatus(ConditionClinicalStatus.HISTORY_OF);\n+\t\tCodedOrFreeText freeText01 = new CodedOrFreeText();\n+\t\tfreeText01.setNonCoded(\"Free text\");\n+\t\tvoidedCondition.setCondition(freeText01);\n+\t\tencounter.addCondition(voidedCondition);\n+\n+\n+\t\tSet<Condition> a = encounter.getConditions();\n+\t\tSet<Condition> b = encounter.getAllConditions(true);\n+\t\tassertEquals(0,encounter.getConditions().size());\n+\t\tassertEquals(2,encounter.getAllConditions(true).size());\n+\t}", "originalCommit": "db8bd0b4c7f3ff8634d33e52f816dd5156552b98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3ab481772cb687e73ad3eb46724a93301635c178", "url": "https://github.com/openmrs/openmrs-core/commit/3ab481772cb687e73ad3eb46724a93301635c178", "message": "Added filters to remove condition.\nAdded test for remove condition.", "committedDate": "2020-10-30T17:05:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI2Nzc3NQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r515267775", "bodyText": "private", "author": "mks-d", "createdAt": "2020-10-30T17:34:51Z", "path": "api/src/test/java/org/openmrs/EncounterTest.java", "diffHunk": "@@ -26,25 +26,29 @@\n import java.util.Set;\n \n import org.apache.commons.lang3.reflect.FieldUtils;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.mockito.Mock;\n import org.openmrs.api.EncounterService;\n-import org.openmrs.api.ProviderService;\n import org.openmrs.test.jupiter.BaseContextSensitiveTest;\n \n /**\n  * This class tests the all of the {@link Encounter} non-trivial object methods.\n- * \n+ *\n  * @see Encounter\n  */\n public class EncounterTest extends BaseContextSensitiveTest {\n-\t\n-\t@Mock\n-\tEncounterService encounterService;\n-\t\n+\n \t@Mock\n-\tProviderService providerService;\n-\t\n+\tprivate EncounterService encounterService;\n+\n+\tEncounter encounter;", "originalCommit": "3ab481772cb687e73ad3eb46724a93301635c178", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI2ODYyNw==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r515268627", "bodyText": "The tested method is named removeCondition (singular).", "author": "mks-d", "createdAt": "2020-10-30T17:35:47Z", "path": "api/src/test/java/org/openmrs/EncounterTest.java", "diffHunk": "@@ -1397,4 +1401,80 @@ public void hasDiagnosis_shouldReturnFalseIfEncounterDoesNotHaveDiagnosis(){\n \t\tassertFalse(encounter.hasDiagnosis(diagnosis));\n \t}\n \n+\t/**\n+\t * @see Encounter#getConditions()\n+\t */\n+\t@Test\n+\tpublic void getAllConditions_shouldReturnAllConditions() {\n+\n+\t\tCondition activeCondition = new Condition();\n+\t\tactiveCondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n+\t\tCodedOrFreeText freeText = new CodedOrFreeText();\n+\t\tfreeText.setNonCoded(\"Free text\");\n+\t\tactiveCondition.setCondition(freeText);\n+\t\tencounter.addCondition(activeCondition);\n+\n+\t\tCondition voidedCondition = new Condition();\n+\t\tvoidedCondition.setVoided(true);\n+\t\tvoidedCondition.setClinicalStatus(ConditionClinicalStatus.HISTORY_OF);\n+\t\tCodedOrFreeText freeText01 = new CodedOrFreeText();\n+\t\tfreeText01.setNonCoded(\"Free text\");\n+\t\tvoidedCondition.setCondition(freeText01);\n+\t\tencounter.addCondition(voidedCondition);\n+\n+\t\tassertEquals(2, encounter.getAllConditions(true).size());\n+\t}\n+\n+\t/**\n+\t * @see Encounter#getConditions()\n+\t */\n+\t@Test\n+\tpublic void getConditions_shouldReturnActiveConditions() {\n+\n+\t\tCondition activeCondition = new Condition();\n+\t\tactiveCondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n+\t\tCodedOrFreeText freeText = new CodedOrFreeText();\n+\t\tfreeText.setNonCoded(\"Free text\");\n+\t\tactiveCondition.setCondition(freeText);\n+\t\tencounter.addCondition(activeCondition);\n+\n+\t\tCondition voidedCondition = new Condition();\n+\t\tvoidedCondition.setVoided(true);\n+\t\tvoidedCondition.setClinicalStatus(ConditionClinicalStatus.HISTORY_OF);\n+\t\tCodedOrFreeText freeText01 = new CodedOrFreeText();\n+\t\tfreeText01.setNonCoded(\"Free text\");\n+\t\tvoidedCondition.setCondition(freeText01);\n+\t\tencounter.addCondition(voidedCondition);\n+\n+\t\tassertEquals(1, encounter.getConditions().size());\n+\t}\n+\n+\t/**\n+\t * @see Encounter#getConditions()\n+\t */\n+\t@Test\n+\tpublic void removeConditions_shouldRemoveConditions() {", "originalCommit": "3ab481772cb687e73ad3eb46724a93301635c178", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI2OTQyMg==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r515269422", "bodyText": "Make this extend BaseContextMockTest as discussed on Slack.", "author": "mks-d", "createdAt": "2020-10-30T17:36:58Z", "path": "api/src/test/java/org/openmrs/EncounterTest.java", "diffHunk": "@@ -26,25 +26,29 @@\n import java.util.Set;\n \n import org.apache.commons.lang3.reflect.FieldUtils;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.mockito.Mock;\n import org.openmrs.api.EncounterService;\n-import org.openmrs.api.ProviderService;\n import org.openmrs.test.jupiter.BaseContextSensitiveTest;\n \n /**\n  * This class tests the all of the {@link Encounter} non-trivial object methods.\n- * \n+ *\n  * @see Encounter\n  */\n public class EncounterTest extends BaseContextSensitiveTest {", "originalCommit": "3ab481772cb687e73ad3eb46724a93301635c178", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "15c5e5e8b2e89418550a84e4c65bbdf72db89582", "url": "https://github.com/openmrs/openmrs-core/commit/15c5e5e8b2e89418550a84e4c65bbdf72db89582", "message": "PR review changes.", "committedDate": "2020-11-02T08:43:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA2MDI0MA==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r516060240", "bodyText": "Just name this getCondition(Boolean), there is no need for a different name.\nI know you borrowed this from the logic for the obs getters, but obs is a different situation, the distinction between \"obs\" and \"all obs\" is \"top level\" vs \"including nested in groups\" obs.", "author": "mks-d", "createdAt": "2020-11-02T15:41:02Z", "path": "api/src/main/java/org/openmrs/Encounter.java", "diffHunk": "@@ -496,12 +496,42 @@ public void setDiagnoses(Set<Diagnosis> diagnoses) {\n \t * @since 2.4.0, 2.3.1\n \t */\n \tpublic Set<Condition> getConditions() {\n-\t\tif (conditions == null) {\n-\t\t\tconditions = new LinkedHashSet<>();\n+\n+\t\treturn getAllConditions();\n+\t}\n+\n+\t/**\n+\t * Returns all conditions where conditions.encounterId = Encounter.encounterId In practice, this method should\n+\t * not be used very often...\n+\t *\n+\t * @param includeVoided specifies whether or not to include voided Conditions\n+\t * @return Returns the all Conditions.\n+\t * <strong>Should</strong> not return null with null conditions set\n+\t * <strong>Should</strong> get conditions\n+\t */\n+\tpublic Set<Condition> getAllConditions(boolean includeVoided) {", "originalCommit": "15c5e5e8b2e89418550a84e4c65bbdf72db89582", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA2NTcwNw==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r516065707", "bodyText": "The whole thing could be done with a one-liner:\nreturn Optional.of(conditions).orElse(new LinkedHashSet<>())\n  .stream().filter(o -> includeVoided || !o.getVoided()).collect(Collectors.toSet());", "author": "mks-d", "createdAt": "2020-11-02T15:48:27Z", "path": "api/src/main/java/org/openmrs/Encounter.java", "diffHunk": "@@ -496,12 +496,42 @@ public void setDiagnoses(Set<Diagnosis> diagnoses) {\n \t * @since 2.4.0, 2.3.1\n \t */\n \tpublic Set<Condition> getConditions() {\n-\t\tif (conditions == null) {\n-\t\t\tconditions = new LinkedHashSet<>();\n+\n+\t\treturn getAllConditions();\n+\t}\n+\n+\t/**\n+\t * Returns all conditions where conditions.encounterId = Encounter.encounterId In practice, this method should\n+\t * not be used very often...\n+\t *\n+\t * @param includeVoided specifies whether or not to include voided Conditions\n+\t * @return Returns the all Conditions.\n+\t * <strong>Should</strong> not return null with null conditions set\n+\t * <strong>Should</strong> get conditions\n+\t */\n+\tpublic Set<Condition> getAllConditions(boolean includeVoided) {\n+\t\tif (includeVoided && conditions != null) {\n+\t\t\treturn conditions;\n+\t\t}\n+\n+\t\tSet<Condition> ret = new LinkedHashSet<>();\n+\n+\t\tif (this.conditions != null) {\n+\t\t\tret = this.conditions.stream().filter(o -> includeVoided || !o.getVoided()).collect(Collectors.toSet());\n \t\t}", "originalCommit": "15c5e5e8b2e89418550a84e4c65bbdf72db89582", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA2OTY0NQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r516069645", "bodyText": "Use Optional.of(conditions).orElse(new LinkedHashSet<>()).", "author": "mks-d", "createdAt": "2020-11-02T15:53:50Z", "path": "api/src/main/java/org/openmrs/Encounter.java", "diffHunk": "@@ -518,19 +548,32 @@ public void setConditions(Set<Condition> conditions) {\n \t * @param condition - the condition to add\n \t */\n \tpublic void addCondition(Condition condition) {\n-\t\tcondition.setEncounter(this);\n-\t\tgetConditions().add(condition);\n+\t\tif (conditions == null) {\n+\t\t\tconditions = new LinkedHashSet<>();\n+\t\t}\n+\n+\t\tif (condition != null) {\n+\t\t\tcondition.setEncounter(this);\n+\t\t\tconditions.add(condition);\n+\t\t}\n \t}\n-\t\n+\n \t/**\n \t * Remove the given condition from the set of conditions for this Encounter\n \t *\n \t * @param condition - the condition to remove\n \t */\n \tpublic void removeCondition(Condition condition) {\n-\t\tif (conditions != null) {\n-\t\t\tconditions.remove(condition);\n+\n+\t\tif (conditions == null) {\n+\t\t\treturn;\n \t\t}\n+\n+\t\tconditions.stream().filter(c -> !c.getVoided() && c.getUuid().equals(condition.getUuid())).forEach(c -> {", "originalCommit": "15c5e5e8b2e89418550a84e4c65bbdf72db89582", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3MTU1Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r516071556", "bodyText": "Put all this in the before() method.", "author": "mks-d", "createdAt": "2020-11-02T15:56:22Z", "path": "api/src/test/java/org/openmrs/EncounterTest.java", "diffHunk": "@@ -1397,4 +1401,80 @@ public void hasDiagnosis_shouldReturnFalseIfEncounterDoesNotHaveDiagnosis(){\n \t\tassertFalse(encounter.hasDiagnosis(diagnosis));\n \t}\n \n+\t/**\n+\t * @see Encounter#getConditions()\n+\t */\n+\t@Test\n+\tpublic void getAllConditions_shouldReturnAllConditions() {\n+\n+\t\tCondition activeCondition = new Condition();\n+\t\tactiveCondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n+\t\tCodedOrFreeText freeText = new CodedOrFreeText();\n+\t\tfreeText.setNonCoded(\"Free text\");\n+\t\tactiveCondition.setCondition(freeText);\n+\t\tencounter.addCondition(activeCondition);\n+\n+\t\tCondition voidedCondition = new Condition();\n+\t\tvoidedCondition.setVoided(true);\n+\t\tvoidedCondition.setClinicalStatus(ConditionClinicalStatus.HISTORY_OF);\n+\t\tCodedOrFreeText freeText01 = new CodedOrFreeText();\n+\t\tfreeText01.setNonCoded(\"Free text\");\n+\t\tvoidedCondition.setCondition(freeText01);\n+\t\tencounter.addCondition(voidedCondition);", "originalCommit": "15c5e5e8b2e89418550a84e4c65bbdf72db89582", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3MTk4MA==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r516071980", "bodyText": "Also assert that you get the conditions that you are supposed to get, not just the size of the resulting collection.", "author": "mks-d", "createdAt": "2020-11-02T15:56:58Z", "path": "api/src/test/java/org/openmrs/EncounterTest.java", "diffHunk": "@@ -1397,4 +1401,80 @@ public void hasDiagnosis_shouldReturnFalseIfEncounterDoesNotHaveDiagnosis(){\n \t\tassertFalse(encounter.hasDiagnosis(diagnosis));\n \t}\n \n+\t/**\n+\t * @see Encounter#getConditions()\n+\t */\n+\t@Test\n+\tpublic void getAllConditions_shouldReturnAllConditions() {\n+\n+\t\tCondition activeCondition = new Condition();\n+\t\tactiveCondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n+\t\tCodedOrFreeText freeText = new CodedOrFreeText();\n+\t\tfreeText.setNonCoded(\"Free text\");\n+\t\tactiveCondition.setCondition(freeText);\n+\t\tencounter.addCondition(activeCondition);\n+\n+\t\tCondition voidedCondition = new Condition();\n+\t\tvoidedCondition.setVoided(true);\n+\t\tvoidedCondition.setClinicalStatus(ConditionClinicalStatus.HISTORY_OF);\n+\t\tCodedOrFreeText freeText01 = new CodedOrFreeText();\n+\t\tfreeText01.setNonCoded(\"Free text\");\n+\t\tvoidedCondition.setCondition(freeText01);\n+\t\tencounter.addCondition(voidedCondition);\n+\n+\t\tassertEquals(2, encounter.getAllConditions(true).size());", "originalCommit": "15c5e5e8b2e89418550a84e4c65bbdf72db89582", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3MjE0Nw==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r516072147", "bodyText": "Same remarks.", "author": "mks-d", "createdAt": "2020-11-02T15:57:12Z", "path": "api/src/test/java/org/openmrs/EncounterTest.java", "diffHunk": "@@ -1397,4 +1401,80 @@ public void hasDiagnosis_shouldReturnFalseIfEncounterDoesNotHaveDiagnosis(){\n \t\tassertFalse(encounter.hasDiagnosis(diagnosis));\n \t}\n \n+\t/**\n+\t * @see Encounter#getConditions()\n+\t */\n+\t@Test\n+\tpublic void getAllConditions_shouldReturnAllConditions() {\n+\n+\t\tCondition activeCondition = new Condition();\n+\t\tactiveCondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n+\t\tCodedOrFreeText freeText = new CodedOrFreeText();\n+\t\tfreeText.setNonCoded(\"Free text\");\n+\t\tactiveCondition.setCondition(freeText);\n+\t\tencounter.addCondition(activeCondition);\n+\n+\t\tCondition voidedCondition = new Condition();\n+\t\tvoidedCondition.setVoided(true);\n+\t\tvoidedCondition.setClinicalStatus(ConditionClinicalStatus.HISTORY_OF);\n+\t\tCodedOrFreeText freeText01 = new CodedOrFreeText();\n+\t\tfreeText01.setNonCoded(\"Free text\");\n+\t\tvoidedCondition.setCondition(freeText01);\n+\t\tencounter.addCondition(voidedCondition);\n+\n+\t\tassertEquals(2, encounter.getAllConditions(true).size());\n+\t}\n+\n+\t/**\n+\t * @see Encounter#getConditions()\n+\t */\n+\t@Test\n+\tpublic void getConditions_shouldReturnActiveConditions() {\n+\n+\t\tCondition activeCondition = new Condition();\n+\t\tactiveCondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n+\t\tCodedOrFreeText freeText = new CodedOrFreeText();\n+\t\tfreeText.setNonCoded(\"Free text\");\n+\t\tactiveCondition.setCondition(freeText);\n+\t\tencounter.addCondition(activeCondition);\n+\n+\t\tCondition voidedCondition = new Condition();\n+\t\tvoidedCondition.setVoided(true);\n+\t\tvoidedCondition.setClinicalStatus(ConditionClinicalStatus.HISTORY_OF);\n+\t\tCodedOrFreeText freeText01 = new CodedOrFreeText();\n+\t\tfreeText01.setNonCoded(\"Free text\");\n+\t\tvoidedCondition.setCondition(freeText01);\n+\t\tencounter.addCondition(voidedCondition);\n+\n+\t\tassertEquals(1, encounter.getConditions().size());", "originalCommit": "15c5e5e8b2e89418550a84e4c65bbdf72db89582", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3MjQ2Nw==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r516072467", "bodyText": "Same remarks.", "author": "mks-d", "createdAt": "2020-11-02T15:57:39Z", "path": "api/src/test/java/org/openmrs/EncounterTest.java", "diffHunk": "@@ -1397,4 +1401,80 @@ public void hasDiagnosis_shouldReturnFalseIfEncounterDoesNotHaveDiagnosis(){\n \t\tassertFalse(encounter.hasDiagnosis(diagnosis));\n \t}\n \n+\t/**\n+\t * @see Encounter#getConditions()\n+\t */\n+\t@Test\n+\tpublic void getAllConditions_shouldReturnAllConditions() {\n+\n+\t\tCondition activeCondition = new Condition();\n+\t\tactiveCondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n+\t\tCodedOrFreeText freeText = new CodedOrFreeText();\n+\t\tfreeText.setNonCoded(\"Free text\");\n+\t\tactiveCondition.setCondition(freeText);\n+\t\tencounter.addCondition(activeCondition);\n+\n+\t\tCondition voidedCondition = new Condition();\n+\t\tvoidedCondition.setVoided(true);\n+\t\tvoidedCondition.setClinicalStatus(ConditionClinicalStatus.HISTORY_OF);\n+\t\tCodedOrFreeText freeText01 = new CodedOrFreeText();\n+\t\tfreeText01.setNonCoded(\"Free text\");\n+\t\tvoidedCondition.setCondition(freeText01);\n+\t\tencounter.addCondition(voidedCondition);\n+\n+\t\tassertEquals(2, encounter.getAllConditions(true).size());\n+\t}\n+\n+\t/**\n+\t * @see Encounter#getConditions()\n+\t */\n+\t@Test\n+\tpublic void getConditions_shouldReturnActiveConditions() {\n+\n+\t\tCondition activeCondition = new Condition();\n+\t\tactiveCondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n+\t\tCodedOrFreeText freeText = new CodedOrFreeText();\n+\t\tfreeText.setNonCoded(\"Free text\");\n+\t\tactiveCondition.setCondition(freeText);\n+\t\tencounter.addCondition(activeCondition);\n+\n+\t\tCondition voidedCondition = new Condition();\n+\t\tvoidedCondition.setVoided(true);\n+\t\tvoidedCondition.setClinicalStatus(ConditionClinicalStatus.HISTORY_OF);\n+\t\tCodedOrFreeText freeText01 = new CodedOrFreeText();\n+\t\tfreeText01.setNonCoded(\"Free text\");\n+\t\tvoidedCondition.setCondition(freeText01);\n+\t\tencounter.addCondition(voidedCondition);\n+\n+\t\tassertEquals(1, encounter.getConditions().size());\n+\t}\n+\n+\t/**\n+\t * @see Encounter#removeCondition()\n+\t */\n+\t@Test\n+\tpublic void removeCondition_shouldRemoveConditions() {\n+\n+\t\tCondition activeCondition = new Condition();\n+\t\tactiveCondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n+\t\tCodedOrFreeText freeText = new CodedOrFreeText();\n+\t\tfreeText.setNonCoded(\"Free text\");\n+\t\tactiveCondition.setCondition(freeText);\n+\t\tencounter.addCondition(activeCondition);\n+\t\t// The condition should be voided\n+\t\tencounter.removeCondition(activeCondition);\n+\n+\t\tCondition voidedCondition = new Condition();\n+\t\tvoidedCondition.setVoided(true);\n+\t\tvoidedCondition.setClinicalStatus(ConditionClinicalStatus.HISTORY_OF);\n+\t\tCodedOrFreeText freeText01 = new CodedOrFreeText();\n+\t\tfreeText01.setNonCoded(\"Free text\");\n+\t\tvoidedCondition.setCondition(freeText01);\n+\t\tencounter.addCondition(voidedCondition);\n+\n+\t\tSet<Condition> a = encounter.getConditions();\n+\t\tSet<Condition> b = encounter.getAllConditions(true);\n+\t\tassertEquals(0, encounter.getConditions().size());\n+\t\tassertEquals(2, encounter.getAllConditions(true).size());", "originalCommit": "15c5e5e8b2e89418550a84e4c65bbdf72db89582", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a49c1394df8fc655add9c2af397f2f6d95307908", "url": "https://github.com/openmrs/openmrs-core/commit/a49c1394df8fc655add9c2af397f2f6d95307908", "message": "PR review changes.", "committedDate": "2020-11-03T10:08:06Z", "type": "commit"}, {"oid": "b9bd57d759fdfe1060ba406eb186fb6df64c1c35", "url": "https://github.com/openmrs/openmrs-core/commit/b9bd57d759fdfe1060ba406eb186fb6df64c1c35", "message": "PR review changes.", "committedDate": "2020-11-03T10:08:57Z", "type": "commit"}, {"oid": "80b7e344a3c373f7b95ff1ff344988baa59cbdcf", "url": "https://github.com/openmrs/openmrs-core/commit/80b7e344a3c373f7b95ff1ff344988baa59cbdcf", "message": "PR review changes.", "committedDate": "2020-11-03T12:23:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1MjAxMg==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r519652012", "bodyText": "Avoid wildcard imports.", "author": "mks-d", "createdAt": "2020-11-09T09:09:07Z", "path": "api/src/main/java/org/openmrs/Encounter.java", "diffHunk": "@@ -9,15 +9,7 @@\n  */\n package org.openmrs;\n \n-import java.util.ArrayDeque;\n-import java.util.ArrayList;\n-import java.util.Date;\n-import java.util.Deque;\n-import java.util.HashMap;\n-import java.util.LinkedHashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;", "originalCommit": "b9bd57d759fdfe1060ba406eb186fb6df64c1c35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1MzAzNg==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r519653036", "bodyText": "Do not just assert the size, assert that the content is the one that is expected.", "author": "mks-d", "createdAt": "2020-11-09T09:10:50Z", "path": "api/src/test/java/org/openmrs/EncounterTest.java", "diffHunk": "@@ -1406,75 +1425,31 @@ public void hasDiagnosis_shouldReturnFalseIfEncounterDoesNotHaveDiagnosis() {\n \t */\n \t@Test\n \tpublic void getAllConditions_shouldReturnAllConditions() {\n-\n-\t\tCondition activeCondition = new Condition();\n-\t\tactiveCondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n-\t\tCodedOrFreeText freeText = new CodedOrFreeText();\n-\t\tfreeText.setNonCoded(\"Free text\");\n-\t\tactiveCondition.setCondition(freeText);\n-\t\tencounter.addCondition(activeCondition);\n-\n-\t\tCondition voidedCondition = new Condition();\n-\t\tvoidedCondition.setVoided(true);\n-\t\tvoidedCondition.setClinicalStatus(ConditionClinicalStatus.HISTORY_OF);\n-\t\tCodedOrFreeText freeText01 = new CodedOrFreeText();\n-\t\tfreeText01.setNonCoded(\"Free text\");\n-\t\tvoidedCondition.setCondition(freeText01);\n-\t\tencounter.addCondition(voidedCondition);\n-\n-\t\tassertEquals(2, encounter.getAllConditions(true).size());\n+\t\t\n+\t\tassertEquals(2, encounter.getConditions(true).size());", "originalCommit": "b9bd57d759fdfe1060ba406eb186fb6df64c1c35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcwNjU1Mw==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r519706553", "bodyText": "It's already been done in one of the older commits.", "author": "icrc-loliveira", "createdAt": "2020-11-09T10:34:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1MzAzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1MzE0Mw==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r519653143", "bodyText": "Same here.", "author": "mks-d", "createdAt": "2020-11-09T09:11:03Z", "path": "api/src/test/java/org/openmrs/EncounterTest.java", "diffHunk": "@@ -1406,75 +1425,31 @@ public void hasDiagnosis_shouldReturnFalseIfEncounterDoesNotHaveDiagnosis() {\n \t */\n \t@Test\n \tpublic void getAllConditions_shouldReturnAllConditions() {\n-\n-\t\tCondition activeCondition = new Condition();\n-\t\tactiveCondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n-\t\tCodedOrFreeText freeText = new CodedOrFreeText();\n-\t\tfreeText.setNonCoded(\"Free text\");\n-\t\tactiveCondition.setCondition(freeText);\n-\t\tencounter.addCondition(activeCondition);\n-\n-\t\tCondition voidedCondition = new Condition();\n-\t\tvoidedCondition.setVoided(true);\n-\t\tvoidedCondition.setClinicalStatus(ConditionClinicalStatus.HISTORY_OF);\n-\t\tCodedOrFreeText freeText01 = new CodedOrFreeText();\n-\t\tfreeText01.setNonCoded(\"Free text\");\n-\t\tvoidedCondition.setCondition(freeText01);\n-\t\tencounter.addCondition(voidedCondition);\n-\n-\t\tassertEquals(2, encounter.getAllConditions(true).size());\n+\t\t\n+\t\tassertEquals(2, encounter.getConditions(true).size());\n \t}\n \n \t/**\n \t * @see Encounter#getConditions()\n \t */\n \t@Test\n \tpublic void getConditions_shouldReturnActiveConditions() {\n-\n-\t\tCondition activeCondition = new Condition();\n-\t\tactiveCondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n-\t\tCodedOrFreeText freeText = new CodedOrFreeText();\n-\t\tfreeText.setNonCoded(\"Free text\");\n-\t\tactiveCondition.setCondition(freeText);\n-\t\tencounter.addCondition(activeCondition);\n-\n-\t\tCondition voidedCondition = new Condition();\n-\t\tvoidedCondition.setVoided(true);\n-\t\tvoidedCondition.setClinicalStatus(ConditionClinicalStatus.HISTORY_OF);\n-\t\tCodedOrFreeText freeText01 = new CodedOrFreeText();\n-\t\tfreeText01.setNonCoded(\"Free text\");\n-\t\tvoidedCondition.setCondition(freeText01);\n-\t\tencounter.addCondition(voidedCondition);\n-\n+\t\t\n \t\tassertEquals(1, encounter.getConditions().size());", "originalCommit": "b9bd57d759fdfe1060ba406eb186fb6df64c1c35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcwNTg2MA==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r519705860", "bodyText": "It's already been done in one of the older commits.", "author": "icrc-loliveira", "createdAt": "2020-11-09T10:32:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1MzE0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1MzUxOQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r519653519", "bodyText": "getConditions_shouldReturnNonVoidedConditionsByDefault", "author": "mks-d", "createdAt": "2020-11-09T09:11:38Z", "path": "api/src/test/java/org/openmrs/EncounterTest.java", "diffHunk": "@@ -1406,75 +1425,31 @@ public void hasDiagnosis_shouldReturnFalseIfEncounterDoesNotHaveDiagnosis() {\n \t */\n \t@Test\n \tpublic void getAllConditions_shouldReturnAllConditions() {\n-\n-\t\tCondition activeCondition = new Condition();\n-\t\tactiveCondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n-\t\tCodedOrFreeText freeText = new CodedOrFreeText();\n-\t\tfreeText.setNonCoded(\"Free text\");\n-\t\tactiveCondition.setCondition(freeText);\n-\t\tencounter.addCondition(activeCondition);\n-\n-\t\tCondition voidedCondition = new Condition();\n-\t\tvoidedCondition.setVoided(true);\n-\t\tvoidedCondition.setClinicalStatus(ConditionClinicalStatus.HISTORY_OF);\n-\t\tCodedOrFreeText freeText01 = new CodedOrFreeText();\n-\t\tfreeText01.setNonCoded(\"Free text\");\n-\t\tvoidedCondition.setCondition(freeText01);\n-\t\tencounter.addCondition(voidedCondition);\n-\n-\t\tassertEquals(2, encounter.getAllConditions(true).size());\n+\t\t\n+\t\tassertEquals(2, encounter.getConditions(true).size());\n \t}\n \n \t/**\n \t * @see Encounter#getConditions()\n \t */\n \t@Test\n \tpublic void getConditions_shouldReturnActiveConditions() {", "originalCommit": "b9bd57d759fdfe1060ba406eb186fb6df64c1c35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcwODM4Nw==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r519708387", "bodyText": "Done.", "author": "icrc-loliveira", "createdAt": "2020-11-09T10:36:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1MzUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1Mzk0NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r519653944", "bodyText": "getConditions_shouldReturnAllConditionsWhenFlagIsTrue", "author": "mks-d", "createdAt": "2020-11-09T09:12:20Z", "path": "api/src/test/java/org/openmrs/EncounterTest.java", "diffHunk": "@@ -1406,75 +1425,31 @@ public void hasDiagnosis_shouldReturnFalseIfEncounterDoesNotHaveDiagnosis() {\n \t */\n \t@Test\n \tpublic void getAllConditions_shouldReturnAllConditions() {", "originalCommit": "b9bd57d759fdfe1060ba406eb186fb6df64c1c35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1NTEwNA==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r519655104", "bodyText": "What is this test actually testing?", "author": "mks-d", "createdAt": "2020-11-09T09:14:19Z", "path": "api/src/test/java/org/openmrs/EncounterTest.java", "diffHunk": "@@ -1406,75 +1425,31 @@ public void hasDiagnosis_shouldReturnFalseIfEncounterDoesNotHaveDiagnosis() {\n \t */\n \t@Test\n \tpublic void getAllConditions_shouldReturnAllConditions() {\n-\n-\t\tCondition activeCondition = new Condition();\n-\t\tactiveCondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n-\t\tCodedOrFreeText freeText = new CodedOrFreeText();\n-\t\tfreeText.setNonCoded(\"Free text\");\n-\t\tactiveCondition.setCondition(freeText);\n-\t\tencounter.addCondition(activeCondition);\n-\n-\t\tCondition voidedCondition = new Condition();\n-\t\tvoidedCondition.setVoided(true);\n-\t\tvoidedCondition.setClinicalStatus(ConditionClinicalStatus.HISTORY_OF);\n-\t\tCodedOrFreeText freeText01 = new CodedOrFreeText();\n-\t\tfreeText01.setNonCoded(\"Free text\");\n-\t\tvoidedCondition.setCondition(freeText01);\n-\t\tencounter.addCondition(voidedCondition);\n-\n-\t\tassertEquals(2, encounter.getAllConditions(true).size());\n+\t\t\n+\t\tassertEquals(2, encounter.getConditions(true).size());\n \t}\n \n \t/**\n \t * @see Encounter#getConditions()\n \t */\n \t@Test\n \tpublic void getConditions_shouldReturnActiveConditions() {\n-\n-\t\tCondition activeCondition = new Condition();\n-\t\tactiveCondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n-\t\tCodedOrFreeText freeText = new CodedOrFreeText();\n-\t\tfreeText.setNonCoded(\"Free text\");\n-\t\tactiveCondition.setCondition(freeText);\n-\t\tencounter.addCondition(activeCondition);\n-\n-\t\tCondition voidedCondition = new Condition();\n-\t\tvoidedCondition.setVoided(true);\n-\t\tvoidedCondition.setClinicalStatus(ConditionClinicalStatus.HISTORY_OF);\n-\t\tCodedOrFreeText freeText01 = new CodedOrFreeText();\n-\t\tfreeText01.setNonCoded(\"Free text\");\n-\t\tvoidedCondition.setCondition(freeText01);\n-\t\tencounter.addCondition(voidedCondition);\n-\n+\t\t\n \t\tassertEquals(1, encounter.getConditions().size());\n \t}\n \n \t/**\n-\t * @see Encounter#removeCondition()\n+\t * @see Encounter#removeCondition(Condition)\n \t */\n \t@Test\n \tpublic void removeCondition_shouldRemoveConditions() {\n \n-\t\tCondition activeCondition = new Condition();\n-\t\tactiveCondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n-\t\tCodedOrFreeText freeText = new CodedOrFreeText();\n-\t\tfreeText.setNonCoded(\"Free text\");\n-\t\tactiveCondition.setCondition(freeText);\n-\t\tencounter.addCondition(activeCondition);\n \t\t// The condition should be voided\n \t\tencounter.removeCondition(activeCondition);\n \n-\t\tCondition voidedCondition = new Condition();\n-\t\tvoidedCondition.setVoided(true);\n-\t\tvoidedCondition.setClinicalStatus(ConditionClinicalStatus.HISTORY_OF);\n-\t\tCodedOrFreeText freeText01 = new CodedOrFreeText();\n-\t\tfreeText01.setNonCoded(\"Free text\");\n-\t\tvoidedCondition.setCondition(freeText01);\n-\t\tencounter.addCondition(voidedCondition);\n-\n \t\tSet<Condition> a = encounter.getConditions();\n-\t\tSet<Condition> b = encounter.getAllConditions(true);\n+\t\tSet<Condition> b = encounter.getConditions(true);\n \t\tassertEquals(0, encounter.getConditions().size());\n-\t\tassertEquals(2, encounter.getAllConditions(true).size());\n+\t\tassertEquals(2, encounter.getConditions(true).size());\n \t}", "originalCommit": "b9bd57d759fdfe1060ba406eb186fb6df64c1c35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcwODY1OQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r519708659", "bodyText": "That the conditions are voided and not deleted.", "author": "icrc-loliveira", "createdAt": "2020-11-09T10:37:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1NTEwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1ODE5Mw==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r519658193", "bodyText": "Give it a real name, that helps people understand what things are about:\nfreeText1.setNonCoded(\"Asthma non-coded\");", "author": "mks-d", "createdAt": "2020-11-09T09:19:24Z", "path": "api/src/test/java/org/openmrs/EncounterTest.java", "diffHunk": "@@ -43,10 +43,29 @@\n \tprivate EncounterService encounterService;\n \n \tprivate Encounter encounter;\n+\t\n+\tprivate Condition activeCondition;\n+\t\n+\tprivate Condition voidedCondition;\n \n \t@BeforeEach\n \tpublic void before() {\n \t\tencounter = new Encounter();\n+\n+\t\tactiveCondition = new Condition();\n+\t\tactiveCondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n+\t\tCodedOrFreeText freeText = new CodedOrFreeText();\n+\t\tfreeText.setNonCoded(\"Free text\");", "originalCommit": "b9bd57d759fdfe1060ba406eb186fb6df64c1c35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1ODcxNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r519658715", "bodyText": "Let's name them freeText1 and freeText2.", "author": "mks-d", "createdAt": "2020-11-09T09:20:11Z", "path": "api/src/test/java/org/openmrs/EncounterTest.java", "diffHunk": "@@ -43,10 +43,29 @@\n \tprivate EncounterService encounterService;\n \n \tprivate Encounter encounter;\n+\t\n+\tprivate Condition activeCondition;\n+\t\n+\tprivate Condition voidedCondition;\n \n \t@BeforeEach\n \tpublic void before() {\n \t\tencounter = new Encounter();\n+\n+\t\tactiveCondition = new Condition();\n+\t\tactiveCondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n+\t\tCodedOrFreeText freeText = new CodedOrFreeText();", "originalCommit": "b9bd57d759fdfe1060ba406eb186fb6df64c1c35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1OTA2MQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r519659061", "bodyText": "Same here:\nfreeText2.setNonCoded(\"Glaucoma non-coded\");", "author": "mks-d", "createdAt": "2020-11-09T09:20:44Z", "path": "api/src/test/java/org/openmrs/EncounterTest.java", "diffHunk": "@@ -43,10 +43,29 @@\n \tprivate EncounterService encounterService;\n \n \tprivate Encounter encounter;\n+\t\n+\tprivate Condition activeCondition;\n+\t\n+\tprivate Condition voidedCondition;\n \n \t@BeforeEach\n \tpublic void before() {\n \t\tencounter = new Encounter();\n+\n+\t\tactiveCondition = new Condition();\n+\t\tactiveCondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n+\t\tCodedOrFreeText freeText = new CodedOrFreeText();\n+\t\tfreeText.setNonCoded(\"Free text\");\n+\t\tactiveCondition.setCondition(freeText);\n+\t\tencounter.addCondition(activeCondition);\n+\n+\t\tvoidedCondition = new Condition();\n+\t\tvoidedCondition.setVoided(true);\n+\t\tvoidedCondition.setClinicalStatus(ConditionClinicalStatus.HISTORY_OF);\n+\t\tCodedOrFreeText freeText01 = new CodedOrFreeText();\n+\t\tfreeText01.setNonCoded(\"Free text\");", "originalCommit": "b9bd57d759fdfe1060ba406eb186fb6df64c1c35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "75f1a0a7732d930edcf7601921eb661d46b0e15a", "url": "https://github.com/openmrs/openmrs-core/commit/75f1a0a7732d930edcf7601921eb661d46b0e15a", "message": "Replaced wildcard imports.", "committedDate": "2020-11-09T10:25:19Z", "type": "commit"}, {"oid": "7e2af8868405b4dfc4a6a33c2c2e17e0713a8779", "url": "https://github.com/openmrs/openmrs-core/commit/7e2af8868405b4dfc4a6a33c2c2e17e0713a8779", "message": "PR review changes.", "committedDate": "2020-11-09T10:37:57Z", "type": "commit"}, {"oid": "12f16de66bde193bb0063c22aa7fa082c1f43bb3", "url": "https://github.com/openmrs/openmrs-core/commit/12f16de66bde193bb0063c22aa7fa082c1f43bb3", "message": "PR review changes.", "committedDate": "2020-11-09T10:41:05Z", "type": "commit"}, {"oid": "4cebf27418091842ae1fd254839106111b2aed8a", "url": "https://github.com/openmrs/openmrs-core/commit/4cebf27418091842ae1fd254839106111b2aed8a", "message": "PR review changes.", "committedDate": "2020-11-09T10:43:55Z", "type": "commit"}, {"oid": "2a66f864d81a0503f2c5ce855e602c855dc6b6da", "url": "https://github.com/openmrs/openmrs-core/commit/2a66f864d81a0503f2c5ce855e602c855dc6b6da", "message": "Removed untouched changes.", "committedDate": "2020-11-12T09:45:56Z", "type": "commit"}, {"oid": "2e70e45ba0a59c2482484175ca53981459723925", "url": "https://github.com/openmrs/openmrs-core/commit/2e70e45ba0a59c2482484175ca53981459723925", "message": "Fixed header comment.", "committedDate": "2020-11-13T15:52:44Z", "type": "commit"}, {"oid": "b3340d8c4be232e606229d56736bc8d2b2890403", "url": "https://github.com/openmrs/openmrs-core/commit/b3340d8c4be232e606229d56736bc8d2b2890403", "message": "Removed untouched changes.", "committedDate": "2020-11-16T15:38:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3MjE5Mg==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r524372192", "bodyText": "Rename a to conditions or allConditions.\nRename b to voidedConditions.", "author": "mks-d", "createdAt": "2020-11-16T15:52:46Z", "path": "api/src/test/java/org/openmrs/EncounterTest.java", "diffHunk": "@@ -1397,4 +1420,40 @@ public void hasDiagnosis_shouldReturnFalseIfEncounterDoesNotHaveDiagnosis(){\n \t\tassertFalse(encounter.hasDiagnosis(diagnosis));\n \t}\n \n+\t/**\n+\t * @see Encounter#getConditions()\n+\t */\n+\t@Test\n+\tpublic void getConditions_shouldReturnAllConditionsWhenFlagIsTrue() {\n+\n+\t\tassertEquals(2, encounter.getConditions(true).size());\n+\t\tassertTrue(encounter.getConditions(true).contains(activeCondition));\n+\t\tassertTrue(encounter.getConditions(true).contains(voidedCondition));\n+\t}\n+\n+\t/**\n+\t * @see Encounter#getConditions()\n+\t */\n+\t@Test\n+\tpublic void getConditions_shouldReturnNonVoidedConditionsByDefault() {\n+\n+\t\tassertEquals(1, encounter.getConditions().size());\n+\t\tassertTrue(encounter.getConditions().contains(activeCondition));\n+\t\tassertFalse(encounter.getConditions().contains(voidedCondition));\n+\t}\n+\n+\t/**\n+\t * @see Encounter#removeCondition(Condition)\n+\t */\n+\t@Test\n+\tpublic void removeCondition_shouldRemoveConditions() {\n+\n+\t\t// The condition should be voided\n+\t\tencounter.removeCondition(activeCondition);\n+\n+\t\tSet<Condition> a = encounter.getConditions();", "originalCommit": "b3340d8c4be232e606229d56736bc8d2b2890403", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3NTIxOA==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r524375218", "bodyText": "Did you need to touch that test?", "author": "mks-d", "createdAt": "2020-11-16T15:56:28Z", "path": "api/src/test/java/org/openmrs/api/EncounterServiceTest.java", "diffHunk": "@@ -414,9 +414,9 @@ public void saveEncounter_shouldCascadeSaveToContainedConditions() {\n \t\tedema = (Condition) conditionsArray[1];\n \t\tassertEquals(2, conditionsArray.length);\n \t\tassertNotNull(pregnancy.getId());\n-\t\tassertEquals(\"Pregnancy\", pregnancy.getCondition().getNonCoded());\n+\t\tassertNotNull(pregnancy.getCondition().getNonCoded());\n \t\tassertNotNull(edema.getId());\n-\t\tassertEquals(\"Edema\", edema.getCondition().getNonCoded());\n+\t\tassertNotNull(edema.getCondition().getNonCoded());", "originalCommit": "b3340d8c4be232e606229d56736bc8d2b2890403", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM5MzQ2OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r524393468", "bodyText": "Yes.\nThe way that it was done was inconsistent.\nSometimes they would come flipped, Emma would be Pregnancy and Pregnancy would be Emma.", "author": "icrc-loliveira", "createdAt": "2020-11-16T16:20:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3NTIxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUzNDYyOQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r524534629", "bodyText": "@icrc-loliveira this is burying the issue. We need to understand why our changes are affecting an order that used to be stable.", "author": "mks-d", "createdAt": "2020-11-16T19:56:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3NTIxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEwODU0Mg==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r525108542", "bodyText": "Used equal method.", "author": "icrc-loliveira", "createdAt": "2020-11-17T12:14:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3NTIxOA=="}], "type": "inlineReview"}, {"oid": "43c03c90891c2636ecc14e2be8021b26f70cbc19", "url": "https://github.com/openmrs/openmrs-core/commit/43c03c90891c2636ecc14e2be8021b26f70cbc19", "message": "PR review changes.", "committedDate": "2020-11-16T16:17:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MzI1Ng==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r524553256", "bodyText": "While the implementation here is simpler, it does potentially break existing code which relies on being able to do, say, getConditions().add(newCondition).", "author": "ibacher", "createdAt": "2020-11-16T20:30:25Z", "path": "api/src/main/java/org/openmrs/Encounter.java", "diffHunk": "@@ -492,16 +493,31 @@ public void setDiagnoses(Set<Diagnosis> diagnoses) {\n \t/**\n \t * Basic property getter for conditions\n \t * \n-\t * @return conditions - set of conditions\n+\t * @return all non-voided conditions\n+\t * <strong>Should</strong> not get voided conditions\n \t * @since 2.4.0, 2.3.1\n \t */\n \tpublic Set<Condition> getConditions() {\n-\t\tif (conditions == null) {\n-\t\t\tconditions = new LinkedHashSet<>();\n-\t\t}", "originalCommit": "43c03c90891c2636ecc14e2be8021b26f70cbc19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI0MDc3Nw==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r525240777", "bodyText": "@ibacher you're right, but given that there is a addCondition(Condition) method, I guess we should assume that this is just bad practise no?", "author": "mks-d", "createdAt": "2020-11-17T15:22:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MzI1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI0NjcxNQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r525246715", "bodyText": "@mks-d I suppose that's fair. And realistically, I don't expect there to be much actual code out there that uses this.", "author": "ibacher", "createdAt": "2020-11-17T15:27:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MzI1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MzMwMQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r524553301", "bodyText": "Shouldn't we just be explicitly relying on the notion of equality here, e.g., filter(c -> !c.getVoided && condition.equals(c))?", "author": "ibacher", "createdAt": "2020-11-16T20:30:30Z", "path": "api/src/main/java/org/openmrs/Encounter.java", "diffHunk": "@@ -518,19 +534,28 @@ public void setConditions(Set<Condition> conditions) {\n \t * @param condition - the condition to add\n \t */\n \tpublic void addCondition(Condition condition) {\n-\t\tcondition.setEncounter(this);\n-\t\tgetConditions().add(condition);\n+\t\tif (conditions == null) {\n+\t\t\tconditions = new LinkedHashSet<>();\n+\t\t}\n+\n+\t\tif (condition != null) {\n+\t\t\tcondition.setEncounter(this);\n+\t\t\tconditions.add(condition);\n+\t\t}\n \t}\n-\t\n+\n \t/**\n \t * Remove the given condition from the set of conditions for this Encounter\n \t *\n \t * @param condition - the condition to remove\n \t */\n \tpublic void removeCondition(Condition condition) {\n-\t\tif (conditions != null) {\n-\t\t\tconditions.remove(condition);\n-\t\t}\n+\t\t\n+\t\tOptional.ofNullable(conditions).orElse(new LinkedHashSet<>()).stream().filter(c -> !c.getVoided() && c.getUuid().equals(condition.getUuid())).forEach(c -> {", "originalCommit": "43c03c90891c2636ecc14e2be8021b26f70cbc19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1NDY1Mg==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r524554652", "bodyText": "I know that condition.equals() doesn't work that way right now, but I thought it was agreed that we'd proceed with an implementation of condition.equals() that only verifies UUID.", "author": "ibacher", "createdAt": "2020-11-16T20:33:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MzMwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEwODkwOQ==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r525108909", "bodyText": "Done.", "author": "icrc-loliveira", "createdAt": "2020-11-17T12:15:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MzMwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MzcyMg==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r524553722", "bodyText": "We should have a void reason when voiding the condition, even if it's as simple as \"Voided by the API\"", "author": "ibacher", "createdAt": "2020-11-16T20:31:19Z", "path": "api/src/main/java/org/openmrs/Encounter.java", "diffHunk": "@@ -518,19 +534,28 @@ public void setConditions(Set<Condition> conditions) {\n \t * @param condition - the condition to add\n \t */\n \tpublic void addCondition(Condition condition) {\n-\t\tcondition.setEncounter(this);\n-\t\tgetConditions().add(condition);\n+\t\tif (conditions == null) {\n+\t\t\tconditions = new LinkedHashSet<>();\n+\t\t}\n+\n+\t\tif (condition != null) {\n+\t\t\tcondition.setEncounter(this);\n+\t\t\tconditions.add(condition);\n+\t\t}\n \t}\n-\t\n+\n \t/**\n \t * Remove the given condition from the set of conditions for this Encounter\n \t *\n \t * @param condition - the condition to remove\n \t */\n \tpublic void removeCondition(Condition condition) {\n-\t\tif (conditions != null) {\n-\t\t\tconditions.remove(condition);\n-\t\t}\n+\t\t\n+\t\tOptional.ofNullable(conditions).orElse(new LinkedHashSet<>()).stream().filter(c -> !c.getVoided() && c.getUuid().equals(condition.getUuid())).forEach(c -> {\n+\t\t\tc.setVoided(true);\n+\t\t\tc.setDateVoided(new Date());\n+\t\t\tc.setVoidedBy(Context.getAuthenticatedUser());", "originalCommit": "43c03c90891c2636ecc14e2be8021b26f70cbc19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEwOTc0OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r525109748", "bodyText": "Done.", "author": "icrc-loliveira", "createdAt": "2020-11-17T12:16:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MzcyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI0MTQxMA==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r525241410", "bodyText": "@ibacher I didn't find any good example in Core, so we went for the message that you suggested.", "author": "mks-d", "createdAt": "2020-11-17T15:23:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MzcyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1NTE0OA==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r524555148", "bodyText": "Shouldn't we also verify that one of the voided conditions has the same UUID as the activeCondition?", "author": "ibacher", "createdAt": "2020-11-16T20:34:03Z", "path": "api/src/test/java/org/openmrs/EncounterTest.java", "diffHunk": "@@ -1397,4 +1420,40 @@ public void hasDiagnosis_shouldReturnFalseIfEncounterDoesNotHaveDiagnosis(){\n \t\tassertFalse(encounter.hasDiagnosis(diagnosis));\n \t}\n \n+\t/**\n+\t * @see Encounter#getConditions()\n+\t */\n+\t@Test\n+\tpublic void getConditions_shouldReturnAllConditionsWhenFlagIsTrue() {\n+\n+\t\tassertEquals(2, encounter.getConditions(true).size());\n+\t\tassertTrue(encounter.getConditions(true).contains(activeCondition));\n+\t\tassertTrue(encounter.getConditions(true).contains(voidedCondition));\n+\t}\n+\n+\t/**\n+\t * @see Encounter#getConditions()\n+\t */\n+\t@Test\n+\tpublic void getConditions_shouldReturnNonVoidedConditionsByDefault() {\n+\n+\t\tassertEquals(1, encounter.getConditions().size());\n+\t\tassertTrue(encounter.getConditions().contains(activeCondition));\n+\t\tassertFalse(encounter.getConditions().contains(voidedCondition));\n+\t}\n+\n+\t/**\n+\t * @see Encounter#removeCondition(Condition)\n+\t */\n+\t@Test\n+\tpublic void removeCondition_shouldRemoveConditions() {\n+\n+\t\t// The condition should be voided\n+\t\tencounter.removeCondition(activeCondition);\n+\n+\t\tSet<Condition> allConditions = encounter.getConditions();\n+\t\tSet<Condition> voidedConditions = encounter.getConditions(true);\n+\t\tassertEquals(0, encounter.getConditions().size());\n+\t\tassertEquals(2, encounter.getConditions(true).size());", "originalCommit": "43c03c90891c2636ecc14e2be8021b26f70cbc19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEwOTAzOA==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r525109038", "bodyText": "done.", "author": "icrc-loliveira", "createdAt": "2020-11-17T12:15:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1NTE0OA=="}], "type": "inlineReview"}, {"oid": "f6b5c8d26253a85c338e84bc92f72e990f88638e", "url": "https://github.com/openmrs/openmrs-core/commit/f6b5c8d26253a85c338e84bc92f72e990f88638e", "message": "PR review changes.", "committedDate": "2020-11-17T12:13:26Z", "type": "commit"}, {"oid": "90cba56516ee6ce68fa2577fe8940cede8615cef", "url": "https://github.com/openmrs/openmrs-core/commit/90cba56516ee6ce68fa2577fe8940cede8615cef", "message": "PR review changes.", "committedDate": "2020-11-17T12:15:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI1MTI4NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r525251284", "bodyText": "I'd honestly feel more comfortable with the changes here if we can prove that the same test still passes or, if it doesn't, that the reason it doesn't pass is because of an expected change in behaviour.", "author": "ibacher", "createdAt": "2020-11-17T15:30:18Z", "path": "api/src/test/java/org/openmrs/api/EncounterServiceTest.java", "diffHunk": "@@ -409,14 +409,10 @@ public void saveEncounter_shouldCascadeSaveToContainedConditions() {\n \t\tContext.getEncounterService().saveEncounter(encounter);\n \t\t\n \t\t// verify\n-\t\tObject[] conditionsArray = encounter.getConditions().toArray();\n-\t\tpregnancy = (Condition) conditionsArray[0];\n-\t\tedema = (Condition) conditionsArray[1];\n-\t\tassertEquals(2, conditionsArray.length);\n-\t\tassertNotNull(pregnancy.getId());\n-\t\tassertEquals(\"Pregnancy\", pregnancy.getCondition().getNonCoded());\n-\t\tassertNotNull(edema.getId());\n-\t\tassertEquals(\"Edema\", edema.getCondition().getNonCoded());\n+\t\tSet<Condition> savedConditions = encounter.getConditions();", "originalCommit": "90cba56516ee6ce68fa2577fe8940cede8615cef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI1NzgyNw==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r525257827", "bodyText": "@ibacher I had the same concern yesterday. But looking closer, it appears that there is no specific care being given at the order in which those conditions are returned (before or after this PR). So I suggested to @icrc-loliveira to simply test that those two conditions were part of the returned set.", "author": "mks-d", "createdAt": "2020-11-17T15:35:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI1MTI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI2MjU4NA==", "url": "https://github.com/openmrs/openmrs-core/pull/3606#discussion_r525262584", "bodyText": "@mks-d That's fair. My main worry was that the condition non-coded value might not be being preserved (since that's no longer verified). Order-wise, it's probably not too important.", "author": "ibacher", "createdAt": "2020-11-17T15:41:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI1MTI4NA=="}], "type": "inlineReview"}, {"oid": "d28a73677edee16950caf7bb16e90e284860f84b", "url": "https://github.com/openmrs/openmrs-core/commit/d28a73677edee16950caf7bb16e90e284860f84b", "message": "Improved JavaDoc + renamed 'o' to 'c' for condition.", "committedDate": "2020-11-18T21:46:29Z", "type": "commit"}, {"oid": "d68c6eca2dec7d814f4cb0e78bea7c29f2801635", "url": "https://github.com/openmrs/openmrs-core/commit/d68c6eca2dec7d814f4cb0e78bea7c29f2801635", "message": "Improved JavaDoc.", "committedDate": "2020-11-18T21:47:58Z", "type": "commit"}]}