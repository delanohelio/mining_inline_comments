{"pr_number": 169, "pr_title": "Fix bug that would cause pdl encoder to import types conflicting with inline types.", "pr_createdAt": "2020-02-13T04:03:21Z", "pr_url": "https://github.com/linkedin/rest.li/pull/169", "timeline": [{"oid": "39310c032b48b12d60a9cc67d5e42da179257ab8", "url": "https://github.com/linkedin/rest.li/commit/39310c032b48b12d60a9cc67d5e42da179257ab8", "message": "Fix bug that would cause pdl encoder to import types conflicting with\ninline types.\nAlso improves how imports for includes are handled.", "committedDate": "2020-02-13T03:27:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY3MDQ4NQ==", "url": "https://github.com/linkedin/rest.li/pull/169#discussion_r378670485", "bodyText": "why do we delete this one?", "author": "nickibi", "createdAt": "2020-02-13T06:22:02Z", "path": "generator-test/src/test/pegasus/com/linkedin/pegasus/generator/test/idl/enums/EscapedSymbols.pdl", "diffHunk": "@@ -5,7 +5,6 @@ namespace com.linkedin.pegasus.generator.test.idl.enums\n  */\n enum EscapedSymbols {\n   ENUM,\n-  `enum`,", "originalCommit": "39310c032b48b12d60a9cc67d5e42da179257ab8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAyNjUxMQ==", "url": "https://github.com/linkedin/rest.li/pull/169#discussion_r379026511", "bodyText": "This was an issue introduced in previous commit. enum cannot be used as it is reserved keyword in java. The template generation step fails for this.", "author": "karthikbalasub", "createdAt": "2020-02-13T18:01:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY3MDQ4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA0OTQyMA==", "url": "https://github.com/linkedin/rest.li/pull/169#discussion_r379049420", "bodyText": "Oops", "author": "evanw555", "createdAt": "2020-02-13T18:45:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY3MDQ4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1MDg3OA==", "url": "https://github.com/linkedin/rest.li/pull/169#discussion_r379050878", "bodyText": "Nice catch.", "author": "evanw555", "createdAt": "2020-02-13T18:48:14Z", "path": "data/src/main/java/com/linkedin/data/schema/SchemaToPdlEncoder.java", "diffHunk": "@@ -782,7 +782,7 @@ private void gatherTypes(DataSchema schema, boolean isDeclaredInline, Set<Name>\n         }\n         for (NamedDataSchema include : recordSchema.getInclude())\n         {\n-          gatherTypes(include, true, encounteredTypes, inlinedTypes);\n+          gatherTypes(include, recordSchema.isIncludeDeclaredInline(include), encounteredTypes, inlinedTypes);", "originalCommit": "39310c032b48b12d60a9cc67d5e42da179257ab8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1MTg3NQ==", "url": "https://github.com/linkedin/rest.li/pull/169#discussion_r379051875", "bodyText": "We should clarify that this set is a collection of simple names, not full names.", "author": "evanw555", "createdAt": "2020-02-13T18:50:08Z", "path": "data/src/main/java/com/linkedin/data/schema/SchemaToPdlEncoder.java", "diffHunk": "@@ -756,7 +756,7 @@ private void writeDocAndProperties(RecordDataSchema.Field field) throws IOExcept\n    * @param inlinedTypes cumulative set of all inlined types in this schema (and its descendents).", "originalCommit": "39310c032b48b12d60a9cc67d5e42da179257ab8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1NDI0Nw==", "url": "https://github.com/linkedin/rest.li/pull/169#discussion_r379054247", "bodyText": "nit: reference -> references", "author": "evanw555", "createdAt": "2020-02-13T18:54:21Z", "path": "generator-test/src/test/pegasus/com/linkedin/pegasus/generator/test/idl/imports/InlineTypeConflict.pdl", "diffHunk": "@@ -0,0 +1,28 @@\n+namespace com.linkedin.pegasus.generator.test.idl.imports\n+\n+/**\n+ * Simple type cannot be imported as it conflicts with an inline type\n+ */\n+record InlineTypeConflict includes com.linkedin.pegasus.generator.test.idl.records.Simple {\n+  /**\n+   * This inline type takes precedence over 'Simple' record from external namespace.\n+   */\n+  inlineType: record Simple {\n+    /**\n+     * Fields with conflicting types should also have fully qualified name.\n+     */\n+    foo: com.linkedin.pegasus.generator.test.idl.records.Simple\n+  }\n+\n+  /**\n+   * Inline type can also conflict with types used for other fields.\n+   */\n+  inlineType2: record Note {\n+    a: int\n+  }\n+\n+  /**\n+   * This field reference a type (Note) that conflicts with Note defined inline, and thus must use fully qualified name.", "originalCommit": "39310c032b48b12d60a9cc67d5e42da179257ab8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3894a5755537501ab021f98a60d4cd831e7eeb85", "url": "https://github.com/linkedin/rest.li/commit/3894a5755537501ab021f98a60d4cd831e7eeb85", "message": "Addressing Evan's review comments", "committedDate": "2020-02-13T19:38:49Z", "type": "commit"}]}