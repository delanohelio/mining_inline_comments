{"pr_number": 446, "pr_title": "Add partition support in relative load balancer inGraph", "pr_createdAt": "2020-10-15T00:29:57Z", "pr_url": "https://github.com/linkedin/rest.li/pull/446", "timeline": [{"oid": "5dff5aefd1491f2b11fc92b373041a732ec4dd27", "url": "https://github.com/linkedin/rest.li/commit/5dff5aefd1491f2b11fc92b373041a732ec4dd27", "message": "Add partition support in relative load balancer inGraph", "committedDate": "2020-10-15T00:20:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM2ODk2Mw==", "url": "https://github.com/linkedin/rest.li/pull/446#discussion_r505368963", "bodyText": "getFirstValidPartitionId()?", "author": "rickzx", "createdAt": "2020-10-15T08:56:05Z", "path": "d2/src/main/java/com/linkedin/d2/balancer/strategies/relative/StateUpdater.java", "diffHunk": "@@ -140,14 +141,19 @@ else if (clusterGenerationId != _partitionLoadBalancerStateMap.get(partitionId).\n         : _partitionLoadBalancerStateMap.get(partitionId).getPointsMap();\n   }\n \n-  /**\n-   * Exposed for testings\n-   */\n   PartitionState getPartitionState(int partitionId)\n   {\n     return _partitionLoadBalancerStateMap.get(partitionId);\n   }\n \n+  /**\n+   * Return the first valid partition id. This is mainly used for monitoring at least one valid partition.\n+   */\n+  int getValidPartitionId()", "originalCommit": "5dff5aefd1491f2b11fc92b373041a732ec4dd27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM2OTE4Ng==", "url": "https://github.com/linkedin/rest.li/pull/446#discussion_r505369186", "bodyText": "getFirstValidPartitionId()?", "author": "rickzx", "createdAt": "2020-10-15T08:56:19Z", "path": "d2/src/main/java/com/linkedin/d2/balancer/strategies/relative/RelativeLoadBalancerStrategy.java", "diffHunk": "@@ -96,6 +96,11 @@ public PartitionState getPartitionState(int partitionId)\n     return _stateUpdater.getPartitionState(partitionId);\n   }\n \n+  public int getValidPartitionId()", "originalCommit": "5dff5aefd1491f2b11fc92b373041a732ec4dd27", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4MjQwNQ==", "url": "https://github.com/linkedin/rest.li/pull/446#discussion_r505382405", "bodyText": "Just to confirm, in a real situation, this function should always return true right?", "author": "rickzx", "createdAt": "2020-10-15T09:11:53Z", "path": "d2/src/main/java/com/linkedin/d2/jmx/RelativeLoadBalancerStrategyJmx.java", "diffHunk": "@@ -98,12 +119,17 @@ public double getMaxLatencyRelativeFactor()\n   @Override\n   public double getNthPercentileLatencyRelativeFactor(double pct)\n   {\n+    if (isPartitionDataUnavailable())", "originalCommit": "5dff5aefd1491f2b11fc92b373041a732ec4dd27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgzMTE1NQ==", "url": "https://github.com/linkedin/rest.li/pull/446#discussion_r505831155", "bodyText": "Correct, it will always return false.", "author": "rachelhanhan", "createdAt": "2020-10-15T20:43:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4MjQwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgzNDMzMQ==", "url": "https://github.com/linkedin/rest.li/pull/446#discussion_r505834331", "bodyText": "I just realized it can be a NPE if we always pass partition 0, but when it's using the first valid partition, there shouldn't be NPE anymore, but just to be careful I still added this check.", "author": "rachelhanhan", "createdAt": "2020-10-15T20:46:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4MjQwNQ=="}], "type": "inlineReview"}, {"oid": "e1eeca07de710bddae135cd7af85ce69bec5591e", "url": "https://github.com/linkedin/rest.li/commit/e1eeca07de710bddae135cd7af85ce69bec5591e", "message": "Address comments", "committedDate": "2020-10-15T21:12:03Z", "type": "commit"}]}