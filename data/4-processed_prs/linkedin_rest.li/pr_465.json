{"pr_number": 465, "pr_title": "Support symbolTable requests with suffixes", "pr_createdAt": "2020-10-29T07:16:50Z", "pr_url": "https://github.com/linkedin/rest.li/pull/465", "timeline": [{"oid": "cc262b6977a6699d30e8e001b2352faf0f54a45a", "url": "https://github.com/linkedin/rest.li/commit/cc262b6977a6699d30e8e001b2352faf0f54a45a", "message": "Support symbolTable requests with suffixes\n\nWe have a client who adds suffix to the request path.\n\nGiven an applicaiton named `foo` and a resource with `bar`\n\n```\n@RestLiCollection(name = \"bar\", namespace = \"com.foo\")\n```\n\nthey want to support a d2 URL such as\n\n```\nd2://bar?action=...\n```\n\nthe resolved url becomes\n\n```\nsome-host.com/foo/bar?action=...\n```\n\nWhen we enable protobuf for them, the `RestLiSymbolTableRequestHandler` sees\n\n```\nsome-host.com/foo/bar/symbolTable\nsome-host.com/foo/bar/symbolTable/<tableName>\n```\n\nIn this PR, we are adding support to check the last 2 arguments given a path so\nwe can support the above case.\n\nTo prevent naming collision and backwards compatibility, we are guarding the\nlogic behind a header", "committedDate": "2020-10-29T07:18:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ0MzYxMA==", "url": "https://github.com/linkedin/rest.li/pull/465#discussion_r514443610", "bodyText": "I don't like the idea of adding another header for this. It will complicate the exchange protocol further. Is there some other way we can do this? Like say check routing to see if a resource with that name exists or not?\nOr even better add a rule to disallow a rest.li resource from being named symbolTable.\n@kbalasub wdyt?", "author": "karthikrg", "createdAt": "2020-10-29T17:35:14Z", "path": "restli-server/src/main/java/com/linkedin/restli/server/symbol/RestLiSymbolTableRequestHandler.java", "diffHunk": "@@ -95,13 +97,22 @@ public boolean shouldHandle(Request request)\n     // is in the form of /symbolTable or /symbolTable/<TABLENAME>\n     //\n     boolean isServiceScopedPath = request.getHeaders().containsKey(RestConstants.HEADER_SERVICE_SCOPED_PATH);\n+    boolean isSymbolTableHeaderPresent = request.getHeaders().containsKey(SYMBOL_TABLE_REQUEST_HEADER);\n+    int pathSize = pathSegments.size();\n     if (isServiceScopedPath)\n     {\n-      return (pathSegments.size() == 3 && pathSegments.get(2).getPath().equals(SYMBOL_TABLE_URI_PATH));\n+      return (pathSize == 3 && pathSegments.get(2).getPath().equals(SYMBOL_TABLE_URI_PATH));\n+    }\n+    else if (isSymbolTableHeaderPresent)", "originalCommit": "ebc7525107c7b916f10b827dcf0195ec3c5f8726", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ3OTQ2NQ==", "url": "https://github.com/linkedin/rest.li/pull/465#discussion_r514479465", "bodyText": "Having a reserved resource would make sense and seems most straightforward.", "author": "sangm", "createdAt": "2020-10-29T18:31:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ0MzYxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY3NzYwNw==", "url": "https://github.com/linkedin/rest.li/pull/465#discussion_r514677607", "bodyText": "@aman1309 can you please work with @sangm on the best path forward here?", "author": "karthikrg", "createdAt": "2020-10-30T01:40:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ0MzYxMA=="}], "type": "inlineReview"}, {"oid": "28fbbefccfd0480d7c5707d3ff7984601261cfe1", "url": "https://github.com/linkedin/rest.li/commit/28fbbefccfd0480d7c5707d3ff7984601261cfe1", "message": "Support symbolTable requests with suffixes (#465)\n\nRefactor `RestLiSymbolTableRequestHandler`/`RestLiSymbolTableProvider` to handle\nURLs with additional suffixes. Before this change we expected the string\n`symbolTable` to be present in a specific location in the URL. After this\nchange, we check the last 2 paths.", "committedDate": "2020-11-05T06:00:05Z", "type": "forcePushed"}, {"oid": "4344c1131dae6e2a32249593c64153a4450182a5", "url": "https://github.com/linkedin/rest.li/commit/4344c1131dae6e2a32249593c64153a4450182a5", "message": "Support symbolTable requests with suffixes (#465)\n\nRefactor `RestLiSymbolTableRequestHandler`/`RestLiSymbolTableProvider` to handle\nURLs with additional suffixes. Before this change we expected the string\n`symbolTable` to be present in a specific location in the URL. After this\nchange, we check the last 2 paths.", "committedDate": "2020-11-05T06:06:02Z", "type": "forcePushed"}, {"oid": "7c4e6a171e7dc3bccf5e5201cae5f5e90b8ba2da", "url": "https://github.com/linkedin/rest.li/commit/7c4e6a171e7dc3bccf5e5201cae5f5e90b8ba2da", "message": "Support symbolTable requests with suffixes (#465)\n\nRefactor `RestLiSymbolTableRequestHandler`/`RestLiSymbolTableProvider` to handle\nURLs with additional suffixes. Before this change we expected the string\n`symbolTable` to be present in a specific location in the URL. After this\nchange, we check the last 2 paths.", "committedDate": "2020-11-05T06:06:38Z", "type": "forcePushed"}, {"oid": "e2b59e19d7e845f0047c7640344be97960bcd6bf", "url": "https://github.com/linkedin/rest.li/commit/e2b59e19d7e845f0047c7640344be97960bcd6bf", "message": "Support symbolTable requests with suffixes (#465)\n\nRefactor `RestLiSymbolTableRequestHandler`/`RestLiSymbolTableProvider` to handle\nURLs with additional suffixes. Before this change we expected the string\n`symbolTable` to be present in a specific location in the URL. After this\nchange, we check the last 2 paths.", "committedDate": "2020-11-09T20:52:20Z", "type": "commit"}, {"oid": "e2b59e19d7e845f0047c7640344be97960bcd6bf", "url": "https://github.com/linkedin/rest.li/commit/e2b59e19d7e845f0047c7640344be97960bcd6bf", "message": "Support symbolTable requests with suffixes (#465)\n\nRefactor `RestLiSymbolTableRequestHandler`/`RestLiSymbolTableProvider` to handle\nURLs with additional suffixes. Before this change we expected the string\n`symbolTable` to be present in a specific location in the URL. After this\nchange, we check the last 2 paths.", "committedDate": "2020-11-09T20:52:20Z", "type": "forcePushed"}]}