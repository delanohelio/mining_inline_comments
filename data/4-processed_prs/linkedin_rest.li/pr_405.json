{"pr_number": 405, "pr_title": "Fix a bug when check with entry prefix", "pr_createdAt": "2020-09-03T07:24:06Z", "pr_url": "https://github.com/linkedin/rest.li/pull/405", "timeline": [{"oid": "08a857d8c1f1d9e73e515f04196a2c4963527f85", "url": "https://github.com/linkedin/rest.li/commit/08a857d8c1f1d9e73e515f04196a2c4963527f85", "message": "Fix a bug when check with entry prefix, we ignored the pegasus entry name", "committedDate": "2020-09-03T17:28:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0ODU0MA==", "url": "https://github.com/linkedin/rest.li/pull/405#discussion_r483148540", "bodyText": "I don't see why \"parseSources\" should load from both locations.\nBased on my understanding: When SchemaDirectoryName == EXTENSION, the ExtensionSchemaResolver will be configured to resolve from both locations.\nAnd parseSource should only parse the extension schemas, right?", "author": "karthikbalasub", "createdAt": "2020-09-03T17:40:37Z", "path": "generator/src/main/java/com/linkedin/pegasus/generator/FileFormatDataSchemaParser.java", "diffHunk": "@@ -92,8 +92,10 @@ public FileFormatDataSchemaParser(String resolverPath, DataSchemaResolver schema\n               while (entries.hasMoreElements())\n               {\n                 final JarEntry entry = entries.nextElement();\n-                if (!entry.isDirectory() && entry.getName().endsWith(_schemaParserFactory.getLanguageExtension()) &&\n-                    (entry.getName().startsWith(_schemaResolver.getSchemasDirectoryName().getName()) || isExtensionEntry(entry)))\n+                if (!entry.isDirectory() &&\n+                    entry.getName().endsWith(_schemaParserFactory.getLanguageExtension()) &&\n+                    (entry.getName().startsWith(SchemaDirectoryName.PEGASUS.getName()) ||", "originalCommit": "08a857d8c1f1d9e73e515f04196a2c4963527f85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE4MDQxNg==", "url": "https://github.com/linkedin/rest.li/pull/405#discussion_r483180416", "bodyText": "The reason for doing this change is for users who don't want to create two parsers to call parse sources twice.\nThe other reason is that when I add the condition in this FileFormatDataSchemaParser, I had the pegasus base entry in mind.\nI also feel that extension schema only also make sense.\nFor the other question that resolve from both location, it is true, and it is in my existing unit test cases.", "author": "BrianPin", "createdAt": "2020-09-03T18:37:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0ODU0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5Njc3OA==", "url": "https://github.com/linkedin/rest.li/pull/405#discussion_r483296778", "bodyText": "After offline discussion, I removed the support of parsing pegasus PDL by ExtensionSchemaResolver", "author": "BrianPin", "createdAt": "2020-09-03T22:59:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0ODU0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE4NDcxNQ==", "url": "https://github.com/linkedin/rest.li/pull/405#discussion_r483184715", "bodyText": "I'd like to make a comment on the original condition logic itself. It took me a while to understand what this if-statement is checking for because it's unnecessarily convoluted. The original logic basically said:\nif entryName.startsWith(schemasDirectoryName) or isExtensionEntry()\n...where isExtensionEntry() checks that the schemas directory name is extensions and that the entry name starts with extensions/\nCouldn't this just be reduced to\nif entryName.startsWith(schemasDirectoryName + '/')? Since if the schema directory name is extensions, then it would be checking that it starts with extensions/ anyway\nIgnoring the fact that the name isExtensionEntry() is misleading and inaccurate (since it also checks the resolver's schemas directory name value, not just the entry), it doesn't even seem like this method is needed.\nSince you're changing this logic, though, my suggestion is that you simplify this if-statement to make it more comprehensible.", "author": "evanw555", "createdAt": "2020-09-03T18:45:38Z", "path": "generator/src/main/java/com/linkedin/pegasus/generator/FileFormatDataSchemaParser.java", "diffHunk": "@@ -92,8 +92,10 @@ public FileFormatDataSchemaParser(String resolverPath, DataSchemaResolver schema\n               while (entries.hasMoreElements())\n               {\n                 final JarEntry entry = entries.nextElement();\n-                if (!entry.isDirectory() && entry.getName().endsWith(_schemaParserFactory.getLanguageExtension()) &&\n-                    (entry.getName().startsWith(_schemaResolver.getSchemasDirectoryName().getName()) || isExtensionEntry(entry)))\n+                if (!entry.isDirectory() &&\n+                    entry.getName().endsWith(_schemaParserFactory.getLanguageExtension()) &&\n+                    (entry.getName().startsWith(SchemaDirectoryName.PEGASUS.getName()) ||", "originalCommit": "08a857d8c1f1d9e73e515f04196a2c4963527f85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5NjkwNA==", "url": "https://github.com/linkedin/rest.li/pull/405#discussion_r483296904", "bodyText": "@evanw555 , I modified the logic, please have a look", "author": "BrianPin", "createdAt": "2020-09-03T23:00:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE4NDcxNQ=="}], "type": "inlineReview"}, {"oid": "1a8186b784921e2b91f6ee366590c77cfcccd484", "url": "https://github.com/linkedin/rest.li/commit/1a8186b784921e2b91f6ee366590c77cfcccd484", "message": "Fix in-jar entry mismatch because of case", "committedDate": "2020-09-03T22:58:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwOTgwMg==", "url": "https://github.com/linkedin/rest.li/pull/405#discussion_r483309802", "bodyText": "Update the changelog according to current version.", "author": "nickibi", "createdAt": "2020-09-03T23:44:53Z", "path": "CHANGELOG.md", "diffHunk": "@@ -13,6 +13,7 @@ When updating the changelog, remember to be very clear about what behavior has c\n and what APIs have changed, if applicable.\n \n ## [Unreleased]\n+- Fix a bug in FileFormatDataSchemaParser, where jar entry match failed because of case", "originalCommit": "71c0a06342e9c00e0d685134f2eac931bc97a782", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2MzMzNA==", "url": "https://github.com/linkedin/rest.li/pull/405#discussion_r483363334", "bodyText": "I'm not sure what the original logic (before the SchemaDirectoryName change) looked like, but would it make sense to add a + \"/\" to the check? Otherwise cases like pegasusFoo/Foo.pdl would not be filtered out. However, we need to make sure we don't break existing behavior.\n\n\nI'm curious about this bug. Why do we want to allow case-insensitive matches? I'll follow up offline.", "author": "evanw555", "createdAt": "2020-09-04T03:22:04Z", "path": "generator/src/main/java/com/linkedin/pegasus/generator/FileFormatDataSchemaParser.java", "diffHunk": "@@ -92,8 +92,9 @@ public FileFormatDataSchemaParser(String resolverPath, DataSchemaResolver schema\n               while (entries.hasMoreElements())\n               {\n                 final JarEntry entry = entries.nextElement();\n-                if (!entry.isDirectory() && entry.getName().endsWith(_schemaParserFactory.getLanguageExtension()) &&\n-                    (entry.getName().startsWith(_schemaResolver.getSchemasDirectoryName().getName()) || isExtensionEntry(entry)))\n+                if (!entry.isDirectory() &&\n+                    entry.getName().endsWith(_schemaParserFactory.getLanguageExtension()) &&\n+                    (entry.getName().toLowerCase().startsWith(_schemaResolver.getSchemasDirectoryName().name().toLowerCase())))", "originalCommit": "71c0a06342e9c00e0d685134f2eac931bc97a782", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2NjE0Nw==", "url": "https://github.com/linkedin/rest.li/pull/405#discussion_r483366147", "bodyText": "For #1 , yeah more or less your idea is great, but the original logic is like this\nFor #2, it is because we add to jar with lower cases, but the directory name defined Resolver is in upper case. That is why we need case insensitive. Follow up with me offline anytime", "author": "BrianPin", "createdAt": "2020-09-04T03:34:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2MzMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2NzMzNA==", "url": "https://github.com/linkedin/rest.li/pull/405#discussion_r483367334", "bodyText": "If this is the case, ignoring the case is generally ok.\nbut why did we add to jar using lower case ?", "author": "junchuanwang", "createdAt": "2020-09-04T03:40:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2MzMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2ODgyMA==", "url": "https://github.com/linkedin/rest.li/pull/405#discussion_r483368820", "bodyText": "It is one of the original choice I guess", "author": "BrianPin", "createdAt": "2020-09-04T03:46:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2MzMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3NzQxNw==", "url": "https://github.com/linkedin/rest.li/pull/405#discussion_r483377417", "bodyText": "When a enum is being used, the method name() will return its original form which in our case is all upper cases. On the other hand, the method getName() will return the actual coded content literal, which in our is all lower cases.\nIn the beginning of my very first PR of this parser, I was using name() so it is not matching the configured entry prefix in jar, but I have the isExtensionEntry to help to rescue.", "author": "BrianPin", "createdAt": "2020-09-04T04:22:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM2MzMzNA=="}], "type": "inlineReview"}, {"oid": "b9029df60c6419dc82addc24909d6ffbc6e8ffee", "url": "https://github.com/linkedin/rest.li/commit/b9029df60c6419dc82addc24909d6ffbc6e8ffee", "message": "Fix in-jar entry mismatch because of case", "committedDate": "2020-09-04T04:28:49Z", "type": "commit"}, {"oid": "421570fe59f9a01a5d1ba199a018c8d1483deacf", "url": "https://github.com/linkedin/rest.li/commit/421570fe59f9a01a5d1ba199a018c8d1483deacf", "message": "remove un-used function", "committedDate": "2020-09-04T04:28:49Z", "type": "commit"}, {"oid": "0d0d110ed70ad188f62ea5012cf29938308d2d86", "url": "https://github.com/linkedin/rest.li/commit/0d0d110ed70ad188f62ea5012cf29938308d2d86", "message": "Modify the logic check according to comment", "committedDate": "2020-09-04T04:36:41Z", "type": "commit"}, {"oid": "0d0d110ed70ad188f62ea5012cf29938308d2d86", "url": "https://github.com/linkedin/rest.li/commit/0d0d110ed70ad188f62ea5012cf29938308d2d86", "message": "Modify the logic check according to comment", "committedDate": "2020-09-04T04:36:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ4ODU3OA==", "url": "https://github.com/linkedin/rest.li/pull/405#discussion_r483488578", "bodyText": "I don't think this test is covering the change made in the code.\nCan you add a test case that also has extension schemas in the jar?\nAnd a case where the extension schema includes a schema in /pegasus/ directory.", "author": "karthikbalasub", "createdAt": "2020-09-04T09:03:47Z", "path": "generator/src/test/java/com/linkedin/pegasus/generator/TestDataSchemaParser.java", "diffHunk": "@@ -172,6 +172,54 @@ public void testSchemaFilesInExtensionPathInJar(String[] files, String[] expecte\n     }\n   }\n \n+  @DataProvider(name = \"PegasusSchemasWithExtensionResolver\")\n+  private Object[][] createPegasusSchemasWithExtensionResolver()\n+  {\n+    return new Object[][]\n+        {\n+            {\n+                new String[]{\n+                    \"pegasus/Foo.pdl\",\n+                    \"pegasus/Bar.pdl\",\n+                    \"pegasus/Fuzz.pdsc\"\n+                },\n+                new String[]{}\n+            },\n+        };\n+  }\n+\n+  @Test(dataProvider = \"PegasusSchemasWithExtensionResolver\")\n+  public void testBaseSchemaFilesInExtensionResolverInJar(String[] files, String[] expected) throws Exception", "originalCommit": "0d0d110ed70ad188f62ea5012cf29938308d2d86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc5NjAyNQ==", "url": "https://github.com/linkedin/rest.li/pull/405#discussion_r483796025", "bodyText": "Karthik, The scenario you described is already in the same test class.  For extension schema project\nThere were 2 test scenario here\n\nextensions and pegasus in jar\nextensions and pegasus in path\n\nThe one I added here is to guarantee we dont parse pegasus schema in the jar\nWhich is a conclusion after viewing your comment and discuss with the team", "author": "BrianPin", "createdAt": "2020-09-04T18:53:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ4ODU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc5NzY4OA==", "url": "https://github.com/linkedin/rest.li/pull/405#discussion_r483797688", "bodyText": "In that case, can we merge this testcase with the dataprovider above? No need to keep them separate", "author": "karthikbalasub", "createdAt": "2020-09-04T18:57:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ4ODU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgxOTI0Mw==", "url": "https://github.com/linkedin/rest.li/pull/405#discussion_r483819243", "bodyText": "Yes, merged the tests, resolving this comment for now.", "author": "BrianPin", "createdAt": "2020-09-04T19:54:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ4ODU3OA=="}], "type": "inlineReview"}, {"oid": "91d4bc56c25e268cd018692d799def41912e7fd2", "url": "https://github.com/linkedin/rest.li/commit/91d4bc56c25e268cd018692d799def41912e7fd2", "message": "Address unit test comment", "committedDate": "2020-09-04T20:08:36Z", "type": "commit"}, {"oid": "91d4bc56c25e268cd018692d799def41912e7fd2", "url": "https://github.com/linkedin/rest.li/commit/91d4bc56c25e268cd018692d799def41912e7fd2", "message": "Address unit test comment", "committedDate": "2020-09-04T20:08:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzMzIzMw==", "url": "https://github.com/linkedin/rest.li/pull/405#discussion_r483833233", "bodyText": "Just use SchemaDirectorName::getName here. Also I agree that we shouldn't ignore case.\nFollowing check should be enough:\nentry.getName().startsWith(_schemaResolver.getSchemasDirectoryName().getName() + \"/\")", "author": "karthikbalasub", "createdAt": "2020-09-04T20:33:52Z", "path": "generator/src/main/java/com/linkedin/pegasus/generator/FileFormatDataSchemaParser.java", "diffHunk": "@@ -92,8 +92,9 @@ public FileFormatDataSchemaParser(String resolverPath, DataSchemaResolver schema\n               while (entries.hasMoreElements())\n               {\n                 final JarEntry entry = entries.nextElement();\n-                if (!entry.isDirectory() && entry.getName().endsWith(_schemaParserFactory.getLanguageExtension()) &&\n-                    (entry.getName().startsWith(_schemaResolver.getSchemasDirectoryName().getName()) || isExtensionEntry(entry)))\n+                if (!entry.isDirectory() &&\n+                    entry.getName().endsWith(_schemaParserFactory.getLanguageExtension()) &&\n+                    (entry.getName().toLowerCase().startsWith(_schemaResolver.getSchemasDirectoryName().name().toLowerCase() + \"/\")))", "originalCommit": "91d4bc56c25e268cd018692d799def41912e7fd2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0MDMxOQ==", "url": "https://github.com/linkedin/rest.li/pull/405#discussion_r483840319", "bodyText": "Ok", "author": "BrianPin", "createdAt": "2020-09-04T20:55:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzMzIzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg0MjY1Ng==", "url": "https://github.com/linkedin/rest.li/pull/405#discussion_r483842656", "bodyText": "Addressed", "author": "BrianPin", "createdAt": "2020-09-04T21:02:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzMzIzMw=="}], "type": "inlineReview"}, {"oid": "11682aa9947369f537adb006d6dfe1c0c8300f64", "url": "https://github.com/linkedin/rest.li/commit/11682aa9947369f537adb006d6dfe1c0c8300f64", "message": "address comment regarding directory name comparison", "committedDate": "2020-09-04T21:01:24Z", "type": "commit"}]}