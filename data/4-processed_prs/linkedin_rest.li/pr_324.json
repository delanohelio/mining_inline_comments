{"pr_number": 324, "pr_title": "Added annotation processor introduction", "pr_createdAt": "2020-06-08T17:09:40Z", "pr_url": "https://github.com/linkedin/rest.li/pull/324", "timeline": [{"oid": "f74fd02aa09f582593bc40a69bd16c3787950f33", "url": "https://github.com/linkedin/rest.li/commit/f74fd02aa09f582593bc40a69bd16c3787950f33", "message": "Added annotation processor introduction", "committedDate": "2020-06-08T17:06:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg2NjA1Mw==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r436866053", "bodyText": "Can we add a content table here?", "author": "nickibi", "createdAt": "2020-06-08T17:16:03Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4OTc2MQ==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r437789761", "bodyText": "Should we use \"pegasus schemas\" instead of Rest.Li?\nPegasus schemas can be used without rest.li framework and the annotation can still be applied", "author": "karthikbalasub", "createdAt": "2020-06-10T00:10:55Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwMzI4OQ==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r441703289", "bodyText": "I have changed. Meanwhile I really think this is subtle difference and reader might get confused by the term \"Pegasus\"", "author": "junchuanwang", "createdAt": "2020-06-17T17:17:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4OTc2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4OTg4NA==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r437789884", "bodyText": "annotate -> Annotation", "author": "karthikbalasub", "createdAt": "2020-06-10T00:11:15Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4OTkxOQ==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r437789919", "bodyText": "annotation", "author": "karthikbalasub", "createdAt": "2020-06-10T00:11:24Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5MDAyMg==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r437790022", "bodyText": "Remove this line( redundant) or better say: \"The data_classifcation annotation is specified at record level\"", "author": "karthikbalasub", "createdAt": "2020-06-10T00:11:48Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5MDM0MA==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r437790340", "bodyText": "\"are able to add annotations to schema\" -> are able to add annotations using @ syntax to schema", "author": "karthikbalasub", "createdAt": "2020-06-10T00:12:58Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5MTQ0OQ==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r437791449", "bodyText": "Keep all text in third person, so avoid \"we\" \"you\" etc.\nWe let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.\n->\nThe Rest.Li framework did not provide specification on how these annotations should be interpreted and if was left to the user to add logic for interpreting them.\n(Written syntax and read as properties are specified by framework)", "author": "karthikbalasub", "createdAt": "2020-06-10T00:16:55Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.\n+\n+The support that Rest.Li provided for processing annotation in Rest.Li schema has been quite limited. These annotations in above examples are later stored as a `DataSchema`'s class attribute called \"property\". Just as the example shows, both field and the DataSchema can have this \"property\". We let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNDk1MA==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r441724950", "bodyText": "Good advice. Thanks", "author": "junchuanwang", "createdAt": "2020-06-17T17:53:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5MTQ0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5MTc4Nw==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r437791787", "bodyText": "Do not start a new section with \"But\", try to re-word this similar to my suggestion above.", "author": "karthikbalasub", "createdAt": "2020-06-10T00:18:00Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.\n+\n+The support that Rest.Li provided for processing annotation in Rest.Li schema has been quite limited. These annotations in above examples are later stored as a `DataSchema`'s class attribute called \"property\". Just as the example shows, both field and the DataSchema can have this \"property\". We let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.\n+\n+## Inherit and override schema annotations\n+But Rest.Li users found it useful to process annotations during schema processing. One use case is to introduce \"inheritance\" and \"overrides\" to annotations so those annotations can be dynamically processed in the way user defines, when for example the schemas were reused. This gives annotation extensibility and adds to schema reusability.", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5MjYxMQ==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r437792611", "bodyText": "\"inherited from the  parent record.\"\nDon't say re-use.. inherited is the right work.\nAnd we don't allow inhertiance other than from records. righ?", "author": "karthikbalasub", "createdAt": "2020-06-10T00:20:56Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.\n+\n+The support that Rest.Li provided for processing annotation in Rest.Li schema has been quite limited. These annotations in above examples are later stored as a `DataSchema`'s class attribute called \"property\". Just as the example shows, both field and the DataSchema can have this \"property\". We let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.\n+\n+## Inherit and override schema annotations\n+But Rest.Li users found it useful to process annotations during schema processing. One use case is to introduce \"inheritance\" and \"overrides\" to annotations so those annotations can be dynamically processed in the way user defines, when for example the schemas were reused. This gives annotation extensibility and adds to schema reusability.\n+\n+Here are examples:\n+Example case 1: Users might want the annotation of a field be inherited. The fields can reuse the annotations from upper level.", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNjkzOA==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r441726938", "bodyText": "we don't allow inhertiance other than from records\nI think this is also our own interpretation. It is not necessarily the case for others.", "author": "junchuanwang", "createdAt": "2020-06-17T17:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5MjYxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5MzM3NQ==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r437793375", "bodyText": "The // is visible in doc. check.", "author": "karthikbalasub", "createdAt": "2020-06-10T00:23:48Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.\n+\n+The support that Rest.Li provided for processing annotation in Rest.Li schema has been quite limited. These annotations in above examples are later stored as a `DataSchema`'s class attribute called \"property\". Just as the example shows, both field and the DataSchema can have this \"property\". We let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.\n+\n+## Inherit and override schema annotations\n+But Rest.Li users found it useful to process annotations during schema processing. One use case is to introduce \"inheritance\" and \"overrides\" to annotations so those annotations can be dynamically processed in the way user defines, when for example the schemas were reused. This gives annotation extensibility and adds to schema reusability.\n+\n+Here are examples:\n+Example case 1: Users might want the annotation of a field be inherited. The fields can reuse the annotations from upper level.\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, we might find both `visitedUrls` and `visitedUserProfiles` have `persistencePolicyInDays` annotated as 30.\n+//<inheritance example>", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyNzU2Mg==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r441727562", "bodyText": "Yes. These were actually marker for myself and forgot to remove, thanks", "author": "junchuanwang", "createdAt": "2020-06-17T17:57:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5MzM3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5MzQxOA==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r437793418", "bodyText": "same for //", "author": "karthikbalasub", "createdAt": "2020-06-10T00:23:56Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.\n+\n+The support that Rest.Li provided for processing annotation in Rest.Li schema has been quite limited. These annotations in above examples are later stored as a `DataSchema`'s class attribute called \"property\". Just as the example shows, both field and the DataSchema can have this \"property\". We let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.\n+\n+## Inherit and override schema annotations\n+But Rest.Li users found it useful to process annotations during schema processing. One use case is to introduce \"inheritance\" and \"overrides\" to annotations so those annotations can be dynamically processed in the way user defines, when for example the schemas were reused. This gives annotation extensibility and adds to schema reusability.\n+\n+Here are examples:\n+Example case 1: Users might want the annotation of a field be inherited. The fields can reuse the annotations from upper level.\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, we might find both `visitedUrls` and `visitedUserProfiles` have `persistencePolicyInDays` annotated as 30.\n+//<inheritance example>\n+\n+Example case 2: Users might want the annotation of a field be overriden. Override is where the annotation on a field or a schema might get updated when other annotations assign it another value.\n+//<override example>", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5Mzg1Nw==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r437793857", "bodyText": "some 's are not formatted correctly.", "author": "karthikbalasub", "createdAt": "2020-06-10T00:25:40Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.\n+\n+The support that Rest.Li provided for processing annotation in Rest.Li schema has been quite limited. These annotations in above examples are later stored as a `DataSchema`'s class attribute called \"property\". Just as the example shows, both field and the DataSchema can have this \"property\". We let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.\n+\n+## Inherit and override schema annotations\n+But Rest.Li users found it useful to process annotations during schema processing. One use case is to introduce \"inheritance\" and \"overrides\" to annotations so those annotations can be dynamically processed in the way user defines, when for example the schemas were reused. This gives annotation extensibility and adds to schema reusability.\n+\n+Here are examples:\n+Example case 1: Users might want the annotation of a field be inherited. The fields can reuse the annotations from upper level.\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, we might find both `visitedUrls` and `visitedUserProfiles` have `persistencePolicyInDays` annotated as 30.\n+//<inheritance example>\n+\n+Example case 2: Users might want the annotation of a field be overriden. Override is where the annotation on a field or a schema might get updated when other annotations assign it another value.\n+//<override example>\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, a user might find the field `visitedUserProfiles`s `persistencePolicyInDays` annotation is 30 but `visitedUrls`'s `persistencePolicyInDays` annotation has value 10, which overrides the original value inherited(which was 30).", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyODMwMw==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r441728303", "bodyText": "I think they are. for example visitedUrls itself is one word. It is not plural.", "author": "junchuanwang", "createdAt": "2020-06-17T17:59:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5Mzg1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NDExMw==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r437794113", "bodyText": "imambigous -> unambiguous\nAlso use third person:\nWe call this processing step to figure out the eventual value of a field or schema's annotation \"resolution\" and we call such value \"resolved\" value.\nThis processing step .. is called \"resolution\" and the final value is \"resolved\" value.", "author": "karthikbalasub", "createdAt": "2020-06-10T00:26:40Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.\n+\n+The support that Rest.Li provided for processing annotation in Rest.Li schema has been quite limited. These annotations in above examples are later stored as a `DataSchema`'s class attribute called \"property\". Just as the example shows, both field and the DataSchema can have this \"property\". We let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.\n+\n+## Inherit and override schema annotations\n+But Rest.Li users found it useful to process annotations during schema processing. One use case is to introduce \"inheritance\" and \"overrides\" to annotations so those annotations can be dynamically processed in the way user defines, when for example the schemas were reused. This gives annotation extensibility and adds to schema reusability.\n+\n+Here are examples:\n+Example case 1: Users might want the annotation of a field be inherited. The fields can reuse the annotations from upper level.\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, we might find both `visitedUrls` and `visitedUserProfiles` have `persistencePolicyInDays` annotated as 30.\n+//<inheritance example>\n+\n+Example case 2: Users might want the annotation of a field be overriden. Override is where the annotation on a field or a schema might get updated when other annotations assign it another value.\n+//<override example>\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, a user might find the field `visitedUserProfiles`s `persistencePolicyInDays` annotation is 30 but `visitedUrls`'s `persistencePolicyInDays` annotation has value 10, which overrides the original value inherited(which was 30).\n+\n+\n+Example case 3:  Override might also happen when some annotation needs to be updated by another value assigned from another annotation location\n+```pdl\n+record UserVisitRecord {\n+  //...\n+  @persistencePolicyInDays = 365\n+  recycledChatHistories: array[chat]\n+\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  //...\n+}\n+\n+record EnterpriseUserRecord {\n+  userName: UserName\n+  //...\n+  @persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}\n+  visitRecord: UserVisitRecord\n+  //...\n+}\n+```\n+In this example, schema `EnterpriseUserRecord` reused `UserVisitRecord` and its annotation in the field `visitRecord`, but it overrides the annotation value of `recycledChatHistories`.\n+\n+\n+All above examples shows that inheritance and overrides gives more extensibility to the schema annotations. Users should be free to define their own rules regarding how those annotations can be read. There should be an imambigous annotation value for the fields after user's rules are applied. We call this processing step to figure out the eventual value of a field or schema's annotation \"resolution\" and we call such value \"resolved\" value.", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NDYyNg==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r437794626", "bodyText": "\"annotations is\" -> \"annotations are\"", "author": "karthikbalasub", "createdAt": "2020-06-10T00:28:30Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.\n+\n+The support that Rest.Li provided for processing annotation in Rest.Li schema has been quite limited. These annotations in above examples are later stored as a `DataSchema`'s class attribute called \"property\". Just as the example shows, both field and the DataSchema can have this \"property\". We let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.\n+\n+## Inherit and override schema annotations\n+But Rest.Li users found it useful to process annotations during schema processing. One use case is to introduce \"inheritance\" and \"overrides\" to annotations so those annotations can be dynamically processed in the way user defines, when for example the schemas were reused. This gives annotation extensibility and adds to schema reusability.\n+\n+Here are examples:\n+Example case 1: Users might want the annotation of a field be inherited. The fields can reuse the annotations from upper level.\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, we might find both `visitedUrls` and `visitedUserProfiles` have `persistencePolicyInDays` annotated as 30.\n+//<inheritance example>\n+\n+Example case 2: Users might want the annotation of a field be overriden. Override is where the annotation on a field or a schema might get updated when other annotations assign it another value.\n+//<override example>\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, a user might find the field `visitedUserProfiles`s `persistencePolicyInDays` annotation is 30 but `visitedUrls`'s `persistencePolicyInDays` annotation has value 10, which overrides the original value inherited(which was 30).\n+\n+\n+Example case 3:  Override might also happen when some annotation needs to be updated by another value assigned from another annotation location\n+```pdl\n+record UserVisitRecord {\n+  //...\n+  @persistencePolicyInDays = 365\n+  recycledChatHistories: array[chat]\n+\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  //...\n+}\n+\n+record EnterpriseUserRecord {\n+  userName: UserName\n+  //...\n+  @persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}\n+  visitRecord: UserVisitRecord\n+  //...\n+}\n+```\n+In this example, schema `EnterpriseUserRecord` reused `UserVisitRecord` and its annotation in the field `visitRecord`, but it overrides the annotation value of `recycledChatHistories`.\n+\n+\n+All above examples shows that inheritance and overrides gives more extensibility to the schema annotations. Users should be free to define their own rules regarding how those annotations can be read. There should be an imambigous annotation value for the fields after user's rules are applied. We call this processing step to figure out the eventual value of a field or schema's annotation \"resolution\" and we call such value \"resolved\" value.\n+\n+What is more, users could have their own customized logic to process the annotations and define the custom behavior when annotations is overriden or inheritted, and even have the flexibility to set a customized resolved value by calling another local function or remote procedure.  The need for such extensibility gives the motivation for Annotation Processor. We aim to build a tool that can process annotations during schema resolution, process all interested annotations by plugin-ing user's own logic and save the \"resolved\" value back to corresponding DataSchema.", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NDk1NQ==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r437794955", "bodyText": "inambigously -> unambiguously", "author": "karthikbalasub", "createdAt": "2020-06-10T00:29:52Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.\n+\n+The support that Rest.Li provided for processing annotation in Rest.Li schema has been quite limited. These annotations in above examples are later stored as a `DataSchema`'s class attribute called \"property\". Just as the example shows, both field and the DataSchema can have this \"property\". We let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.\n+\n+## Inherit and override schema annotations\n+But Rest.Li users found it useful to process annotations during schema processing. One use case is to introduce \"inheritance\" and \"overrides\" to annotations so those annotations can be dynamically processed in the way user defines, when for example the schemas were reused. This gives annotation extensibility and adds to schema reusability.\n+\n+Here are examples:\n+Example case 1: Users might want the annotation of a field be inherited. The fields can reuse the annotations from upper level.\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, we might find both `visitedUrls` and `visitedUserProfiles` have `persistencePolicyInDays` annotated as 30.\n+//<inheritance example>\n+\n+Example case 2: Users might want the annotation of a field be overriden. Override is where the annotation on a field or a schema might get updated when other annotations assign it another value.\n+//<override example>\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, a user might find the field `visitedUserProfiles`s `persistencePolicyInDays` annotation is 30 but `visitedUrls`'s `persistencePolicyInDays` annotation has value 10, which overrides the original value inherited(which was 30).\n+\n+\n+Example case 3:  Override might also happen when some annotation needs to be updated by another value assigned from another annotation location\n+```pdl\n+record UserVisitRecord {\n+  //...\n+  @persistencePolicyInDays = 365\n+  recycledChatHistories: array[chat]\n+\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  //...\n+}\n+\n+record EnterpriseUserRecord {\n+  userName: UserName\n+  //...\n+  @persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}\n+  visitRecord: UserVisitRecord\n+  //...\n+}\n+```\n+In this example, schema `EnterpriseUserRecord` reused `UserVisitRecord` and its annotation in the field `visitRecord`, but it overrides the annotation value of `recycledChatHistories`.\n+\n+\n+All above examples shows that inheritance and overrides gives more extensibility to the schema annotations. Users should be free to define their own rules regarding how those annotations can be read. There should be an imambigous annotation value for the fields after user's rules are applied. We call this processing step to figure out the eventual value of a field or schema's annotation \"resolution\" and we call such value \"resolved\" value.\n+\n+What is more, users could have their own customized logic to process the annotations and define the custom behavior when annotations is overriden or inheritted, and even have the flexibility to set a customized resolved value by calling another local function or remote procedure.  The need for such extensibility gives the motivation for Annotation Processor. We aim to build a tool that can process annotations during schema resolution, process all interested annotations by plugin-ing user's own logic and save the \"resolved\" value back to corresponding DataSchema.\n+\n+### A common application of overriding annotation using PathSpec\n+In the above `EnterpriseUserRecord` example, we use `@persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}` do denote the field we are overriding is `recycledChatHistories`. This is basically using PathSpec to reference the field or child schema that needs to be overriden. PathSpec <insert-linke-here> can be used as a path to associate relations between fields among nested schemas. Users can use PathSpec to inambigously specifcy all the paths to the child fields that they want to override.", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NTU1OA==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r437795558", "bodyText": "Needs rewording.\nSuggestion: \" The above usage is very common at LinkedIn so an implementation of annotation processing based on this behavior is provided as part of annotation framework\"", "author": "karthikbalasub", "createdAt": "2020-06-10T00:32:17Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.\n+\n+The support that Rest.Li provided for processing annotation in Rest.Li schema has been quite limited. These annotations in above examples are later stored as a `DataSchema`'s class attribute called \"property\". Just as the example shows, both field and the DataSchema can have this \"property\". We let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.\n+\n+## Inherit and override schema annotations\n+But Rest.Li users found it useful to process annotations during schema processing. One use case is to introduce \"inheritance\" and \"overrides\" to annotations so those annotations can be dynamically processed in the way user defines, when for example the schemas were reused. This gives annotation extensibility and adds to schema reusability.\n+\n+Here are examples:\n+Example case 1: Users might want the annotation of a field be inherited. The fields can reuse the annotations from upper level.\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, we might find both `visitedUrls` and `visitedUserProfiles` have `persistencePolicyInDays` annotated as 30.\n+//<inheritance example>\n+\n+Example case 2: Users might want the annotation of a field be overriden. Override is where the annotation on a field or a schema might get updated when other annotations assign it another value.\n+//<override example>\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, a user might find the field `visitedUserProfiles`s `persistencePolicyInDays` annotation is 30 but `visitedUrls`'s `persistencePolicyInDays` annotation has value 10, which overrides the original value inherited(which was 30).\n+\n+\n+Example case 3:  Override might also happen when some annotation needs to be updated by another value assigned from another annotation location\n+```pdl\n+record UserVisitRecord {\n+  //...\n+  @persistencePolicyInDays = 365\n+  recycledChatHistories: array[chat]\n+\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  //...\n+}\n+\n+record EnterpriseUserRecord {\n+  userName: UserName\n+  //...\n+  @persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}\n+  visitRecord: UserVisitRecord\n+  //...\n+}\n+```\n+In this example, schema `EnterpriseUserRecord` reused `UserVisitRecord` and its annotation in the field `visitRecord`, but it overrides the annotation value of `recycledChatHistories`.\n+\n+\n+All above examples shows that inheritance and overrides gives more extensibility to the schema annotations. Users should be free to define their own rules regarding how those annotations can be read. There should be an imambigous annotation value for the fields after user's rules are applied. We call this processing step to figure out the eventual value of a field or schema's annotation \"resolution\" and we call such value \"resolved\" value.\n+\n+What is more, users could have their own customized logic to process the annotations and define the custom behavior when annotations is overriden or inheritted, and even have the flexibility to set a customized resolved value by calling another local function or remote procedure.  The need for such extensibility gives the motivation for Annotation Processor. We aim to build a tool that can process annotations during schema resolution, process all interested annotations by plugin-ing user's own logic and save the \"resolved\" value back to corresponding DataSchema.\n+\n+### A common application of overriding annotation using PathSpec\n+In the above `EnterpriseUserRecord` example, we use `@persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}` do denote the field we are overriding is `recycledChatHistories`. This is basically using PathSpec to reference the field or child schema that needs to be overriden. PathSpec <insert-linke-here> can be used as a path to associate relations between fields among nested schemas. Users can use PathSpec to inambigously specifcy all the paths to the child fields that they want to override.\n+\n+\n+In Linkedin, such usage is so common that we want to use \n+we provided `PathSpecBaseVisitor`. ", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczNjk0OA==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r441736948", "bodyText": "Sorry this is incomplete. But I think your reply is good and I will adopt.", "author": "junchuanwang", "createdAt": "2020-06-17T18:14:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NTU1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NTc2NQ==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r437795765", "bodyText": "Introducing Visitor without explaining what it is. I suggest moving the references to PathSpecBaseVisitor to a later seciton.", "author": "karthikbalasub", "createdAt": "2020-06-10T00:33:13Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.\n+\n+The support that Rest.Li provided for processing annotation in Rest.Li schema has been quite limited. These annotations in above examples are later stored as a `DataSchema`'s class attribute called \"property\". Just as the example shows, both field and the DataSchema can have this \"property\". We let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.\n+\n+## Inherit and override schema annotations\n+But Rest.Li users found it useful to process annotations during schema processing. One use case is to introduce \"inheritance\" and \"overrides\" to annotations so those annotations can be dynamically processed in the way user defines, when for example the schemas were reused. This gives annotation extensibility and adds to schema reusability.\n+\n+Here are examples:\n+Example case 1: Users might want the annotation of a field be inherited. The fields can reuse the annotations from upper level.\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, we might find both `visitedUrls` and `visitedUserProfiles` have `persistencePolicyInDays` annotated as 30.\n+//<inheritance example>\n+\n+Example case 2: Users might want the annotation of a field be overriden. Override is where the annotation on a field or a schema might get updated when other annotations assign it another value.\n+//<override example>\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, a user might find the field `visitedUserProfiles`s `persistencePolicyInDays` annotation is 30 but `visitedUrls`'s `persistencePolicyInDays` annotation has value 10, which overrides the original value inherited(which was 30).\n+\n+\n+Example case 3:  Override might also happen when some annotation needs to be updated by another value assigned from another annotation location\n+```pdl\n+record UserVisitRecord {\n+  //...\n+  @persistencePolicyInDays = 365\n+  recycledChatHistories: array[chat]\n+\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  //...\n+}\n+\n+record EnterpriseUserRecord {\n+  userName: UserName\n+  //...\n+  @persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}\n+  visitRecord: UserVisitRecord\n+  //...\n+}\n+```\n+In this example, schema `EnterpriseUserRecord` reused `UserVisitRecord` and its annotation in the field `visitRecord`, but it overrides the annotation value of `recycledChatHistories`.\n+\n+\n+All above examples shows that inheritance and overrides gives more extensibility to the schema annotations. Users should be free to define their own rules regarding how those annotations can be read. There should be an imambigous annotation value for the fields after user's rules are applied. We call this processing step to figure out the eventual value of a field or schema's annotation \"resolution\" and we call such value \"resolved\" value.\n+\n+What is more, users could have their own customized logic to process the annotations and define the custom behavior when annotations is overriden or inheritted, and even have the flexibility to set a customized resolved value by calling another local function or remote procedure.  The need for such extensibility gives the motivation for Annotation Processor. We aim to build a tool that can process annotations during schema resolution, process all interested annotations by plugin-ing user's own logic and save the \"resolved\" value back to corresponding DataSchema.\n+\n+### A common application of overriding annotation using PathSpec\n+In the above `EnterpriseUserRecord` example, we use `@persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}` do denote the field we are overriding is `recycledChatHistories`. This is basically using PathSpec to reference the field or child schema that needs to be overriden. PathSpec <insert-linke-here> can be used as a path to associate relations between fields among nested schemas. Users can use PathSpec to inambigously specifcy all the paths to the child fields that they want to override.\n+\n+\n+In Linkedin, such usage is so common that we want to use \n+we provided `PathSpecBaseVisitor`. ", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NTk2Mg==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r437795962", "bodyText": "reesolved -> resolved", "author": "karthikbalasub", "createdAt": "2020-06-10T00:34:02Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.\n+\n+The support that Rest.Li provided for processing annotation in Rest.Li schema has been quite limited. These annotations in above examples are later stored as a `DataSchema`'s class attribute called \"property\". Just as the example shows, both field and the DataSchema can have this \"property\". We let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.\n+\n+## Inherit and override schema annotations\n+But Rest.Li users found it useful to process annotations during schema processing. One use case is to introduce \"inheritance\" and \"overrides\" to annotations so those annotations can be dynamically processed in the way user defines, when for example the schemas were reused. This gives annotation extensibility and adds to schema reusability.\n+\n+Here are examples:\n+Example case 1: Users might want the annotation of a field be inherited. The fields can reuse the annotations from upper level.\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, we might find both `visitedUrls` and `visitedUserProfiles` have `persistencePolicyInDays` annotated as 30.\n+//<inheritance example>\n+\n+Example case 2: Users might want the annotation of a field be overriden. Override is where the annotation on a field or a schema might get updated when other annotations assign it another value.\n+//<override example>\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, a user might find the field `visitedUserProfiles`s `persistencePolicyInDays` annotation is 30 but `visitedUrls`'s `persistencePolicyInDays` annotation has value 10, which overrides the original value inherited(which was 30).\n+\n+\n+Example case 3:  Override might also happen when some annotation needs to be updated by another value assigned from another annotation location\n+```pdl\n+record UserVisitRecord {\n+  //...\n+  @persistencePolicyInDays = 365\n+  recycledChatHistories: array[chat]\n+\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  //...\n+}\n+\n+record EnterpriseUserRecord {\n+  userName: UserName\n+  //...\n+  @persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}\n+  visitRecord: UserVisitRecord\n+  //...\n+}\n+```\n+In this example, schema `EnterpriseUserRecord` reused `UserVisitRecord` and its annotation in the field `visitRecord`, but it overrides the annotation value of `recycledChatHistories`.\n+\n+\n+All above examples shows that inheritance and overrides gives more extensibility to the schema annotations. Users should be free to define their own rules regarding how those annotations can be read. There should be an imambigous annotation value for the fields after user's rules are applied. We call this processing step to figure out the eventual value of a field or schema's annotation \"resolution\" and we call such value \"resolved\" value.\n+\n+What is more, users could have their own customized logic to process the annotations and define the custom behavior when annotations is overriden or inheritted, and even have the flexibility to set a customized resolved value by calling another local function or remote procedure.  The need for such extensibility gives the motivation for Annotation Processor. We aim to build a tool that can process annotations during schema resolution, process all interested annotations by plugin-ing user's own logic and save the \"resolved\" value back to corresponding DataSchema.\n+\n+### A common application of overriding annotation using PathSpec\n+In the above `EnterpriseUserRecord` example, we use `@persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}` do denote the field we are overriding is `recycledChatHistories`. This is basically using PathSpec to reference the field or child schema that needs to be overriden. PathSpec <insert-linke-here> can be used as a path to associate relations between fields among nested schemas. Users can use PathSpec to inambigously specifcy all the paths to the child fields that they want to override.\n+\n+\n+In Linkedin, such usage is so common that we want to use \n+we provided `PathSpecBaseVisitor`. \n+\n+It assumes \\\\\n+(1) All *overrides* to the fields are specified using PathSpecs to the fields. \\\\\n+(2) All *overrides* are applied on fields, not on the record\n+\n+For more examples regarding the syntax, one can read the java doc from `PathSpecBaseVisitor`.//<insert Link about > and the test cases //<insert Link about >\n+\n+\n+One can seek to extend this case to adapt to their own use cases. Please see next section regarding what class to extend to fit the best use cases.\n+\n+## Use the schema annotation processor\n+We have created a paradigm of processing Rest.Li schema annotations and wrapped them into `com.linkedin.data.schema.annotation` package.\n+First thing to understand is that `DataSchema` object internally is stored recursively. We added `resolvedProperties` attribute, in order to store the final reesolved annotation.", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NjY3NA==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r437796674", "bodyText": "You need to clean up this section.\nNot all schemas are recursive.\nAlso even without recursion in schemas, there are scenarios where you need differnt resolved Properties. Eg, a record used as two fields with different overrides.", "author": "karthikbalasub", "createdAt": "2020-06-10T00:37:09Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.\n+\n+The support that Rest.Li provided for processing annotation in Rest.Li schema has been quite limited. These annotations in above examples are later stored as a `DataSchema`'s class attribute called \"property\". Just as the example shows, both field and the DataSchema can have this \"property\". We let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.\n+\n+## Inherit and override schema annotations\n+But Rest.Li users found it useful to process annotations during schema processing. One use case is to introduce \"inheritance\" and \"overrides\" to annotations so those annotations can be dynamically processed in the way user defines, when for example the schemas were reused. This gives annotation extensibility and adds to schema reusability.\n+\n+Here are examples:\n+Example case 1: Users might want the annotation of a field be inherited. The fields can reuse the annotations from upper level.\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, we might find both `visitedUrls` and `visitedUserProfiles` have `persistencePolicyInDays` annotated as 30.\n+//<inheritance example>\n+\n+Example case 2: Users might want the annotation of a field be overriden. Override is where the annotation on a field or a schema might get updated when other annotations assign it another value.\n+//<override example>\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, a user might find the field `visitedUserProfiles`s `persistencePolicyInDays` annotation is 30 but `visitedUrls`'s `persistencePolicyInDays` annotation has value 10, which overrides the original value inherited(which was 30).\n+\n+\n+Example case 3:  Override might also happen when some annotation needs to be updated by another value assigned from another annotation location\n+```pdl\n+record UserVisitRecord {\n+  //...\n+  @persistencePolicyInDays = 365\n+  recycledChatHistories: array[chat]\n+\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  //...\n+}\n+\n+record EnterpriseUserRecord {\n+  userName: UserName\n+  //...\n+  @persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}\n+  visitRecord: UserVisitRecord\n+  //...\n+}\n+```\n+In this example, schema `EnterpriseUserRecord` reused `UserVisitRecord` and its annotation in the field `visitRecord`, but it overrides the annotation value of `recycledChatHistories`.\n+\n+\n+All above examples shows that inheritance and overrides gives more extensibility to the schema annotations. Users should be free to define their own rules regarding how those annotations can be read. There should be an imambigous annotation value for the fields after user's rules are applied. We call this processing step to figure out the eventual value of a field or schema's annotation \"resolution\" and we call such value \"resolved\" value.\n+\n+What is more, users could have their own customized logic to process the annotations and define the custom behavior when annotations is overriden or inheritted, and even have the flexibility to set a customized resolved value by calling another local function or remote procedure.  The need for such extensibility gives the motivation for Annotation Processor. We aim to build a tool that can process annotations during schema resolution, process all interested annotations by plugin-ing user's own logic and save the \"resolved\" value back to corresponding DataSchema.\n+\n+### A common application of overriding annotation using PathSpec\n+In the above `EnterpriseUserRecord` example, we use `@persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}` do denote the field we are overriding is `recycledChatHistories`. This is basically using PathSpec to reference the field or child schema that needs to be overriden. PathSpec <insert-linke-here> can be used as a path to associate relations between fields among nested schemas. Users can use PathSpec to inambigously specifcy all the paths to the child fields that they want to override.\n+\n+\n+In Linkedin, such usage is so common that we want to use \n+we provided `PathSpecBaseVisitor`. \n+\n+It assumes \\\\\n+(1) All *overrides* to the fields are specified using PathSpecs to the fields. \\\\\n+(2) All *overrides* are applied on fields, not on the record\n+\n+For more examples regarding the syntax, one can read the java doc from `PathSpecBaseVisitor`.//<insert Link about > and the test cases //<insert Link about >\n+\n+\n+One can seek to extend this case to adapt to their own use cases. Please see next section regarding what class to extend to fit the best use cases.\n+\n+## Use the schema annotation processor\n+We have created a paradigm of processing Rest.Li schema annotations and wrapped them into `com.linkedin.data.schema.annotation` package.\n+First thing to understand is that `DataSchema` object internally is stored recursively. We added `resolvedProperties` attribute, in order to store the final reesolved annotation.", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5Njk1OA==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r437796958", "bodyText": "Should this example show different resolved values for Employee::id field?", "author": "karthikbalasub", "createdAt": "2020-06-10T00:38:23Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.\n+\n+The support that Rest.Li provided for processing annotation in Rest.Li schema has been quite limited. These annotations in above examples are later stored as a `DataSchema`'s class attribute called \"property\". Just as the example shows, both field and the DataSchema can have this \"property\". We let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.\n+\n+## Inherit and override schema annotations\n+But Rest.Li users found it useful to process annotations during schema processing. One use case is to introduce \"inheritance\" and \"overrides\" to annotations so those annotations can be dynamically processed in the way user defines, when for example the schemas were reused. This gives annotation extensibility and adds to schema reusability.\n+\n+Here are examples:\n+Example case 1: Users might want the annotation of a field be inherited. The fields can reuse the annotations from upper level.\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, we might find both `visitedUrls` and `visitedUserProfiles` have `persistencePolicyInDays` annotated as 30.\n+//<inheritance example>\n+\n+Example case 2: Users might want the annotation of a field be overriden. Override is where the annotation on a field or a schema might get updated when other annotations assign it another value.\n+//<override example>\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, a user might find the field `visitedUserProfiles`s `persistencePolicyInDays` annotation is 30 but `visitedUrls`'s `persistencePolicyInDays` annotation has value 10, which overrides the original value inherited(which was 30).\n+\n+\n+Example case 3:  Override might also happen when some annotation needs to be updated by another value assigned from another annotation location\n+```pdl\n+record UserVisitRecord {\n+  //...\n+  @persistencePolicyInDays = 365\n+  recycledChatHistories: array[chat]\n+\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  //...\n+}\n+\n+record EnterpriseUserRecord {\n+  userName: UserName\n+  //...\n+  @persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}\n+  visitRecord: UserVisitRecord\n+  //...\n+}\n+```\n+In this example, schema `EnterpriseUserRecord` reused `UserVisitRecord` and its annotation in the field `visitRecord`, but it overrides the annotation value of `recycledChatHistories`.\n+\n+\n+All above examples shows that inheritance and overrides gives more extensibility to the schema annotations. Users should be free to define their own rules regarding how those annotations can be read. There should be an imambigous annotation value for the fields after user's rules are applied. We call this processing step to figure out the eventual value of a field or schema's annotation \"resolution\" and we call such value \"resolved\" value.\n+\n+What is more, users could have their own customized logic to process the annotations and define the custom behavior when annotations is overriden or inheritted, and even have the flexibility to set a customized resolved value by calling another local function or remote procedure.  The need for such extensibility gives the motivation for Annotation Processor. We aim to build a tool that can process annotations during schema resolution, process all interested annotations by plugin-ing user's own logic and save the \"resolved\" value back to corresponding DataSchema.\n+\n+### A common application of overriding annotation using PathSpec\n+In the above `EnterpriseUserRecord` example, we use `@persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}` do denote the field we are overriding is `recycledChatHistories`. This is basically using PathSpec to reference the field or child schema that needs to be overriden. PathSpec <insert-linke-here> can be used as a path to associate relations between fields among nested schemas. Users can use PathSpec to inambigously specifcy all the paths to the child fields that they want to override.\n+\n+\n+In Linkedin, such usage is so common that we want to use \n+we provided `PathSpecBaseVisitor`. \n+\n+It assumes \\\\\n+(1) All *overrides* to the fields are specified using PathSpecs to the fields. \\\\\n+(2) All *overrides* are applied on fields, not on the record\n+\n+For more examples regarding the syntax, one can read the java doc from `PathSpecBaseVisitor`.//<insert Link about > and the test cases //<insert Link about >\n+\n+\n+One can seek to extend this case to adapt to their own use cases. Please see next section regarding what class to extend to fit the best use cases.\n+\n+## Use the schema annotation processor\n+We have created a paradigm of processing Rest.Li schema annotations and wrapped them into `com.linkedin.data.schema.annotation` package.\n+First thing to understand is that `DataSchema` object internally is stored recursively. We added `resolvedProperties` attribute, in order to store the final reesolved annotation.\n+\n+For an example schema:\n+\n+```pdl\n+record Employee {\n+  id: long\n+  supervisor: Employee\n+}\n+```\n+\n+Its memory presentation is as followed:\n+<center>\n+<b>DataSchema Example</b><br><img src=\"{{ 'assets/images/DataSchema_with_resolvedProperties.png' | relative_url }}\" />", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzMDg2NQ==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r442530865", "bodyText": "I think this is going to complicate this example(because different resolved value in recursive schema would be an advanced example). I really meant to show how DataSchema is stored as a reference here.", "author": "junchuanwang", "createdAt": "2020-06-18T22:14:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5Njk1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NzA0NA==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r437797044", "bodyText": "Add links for the classes referenced", "author": "karthikbalasub", "createdAt": "2020-06-10T00:38:44Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.\n+\n+The support that Rest.Li provided for processing annotation in Rest.Li schema has been quite limited. These annotations in above examples are later stored as a `DataSchema`'s class attribute called \"property\". Just as the example shows, both field and the DataSchema can have this \"property\". We let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.\n+\n+## Inherit and override schema annotations\n+But Rest.Li users found it useful to process annotations during schema processing. One use case is to introduce \"inheritance\" and \"overrides\" to annotations so those annotations can be dynamically processed in the way user defines, when for example the schemas were reused. This gives annotation extensibility and adds to schema reusability.\n+\n+Here are examples:\n+Example case 1: Users might want the annotation of a field be inherited. The fields can reuse the annotations from upper level.\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, we might find both `visitedUrls` and `visitedUserProfiles` have `persistencePolicyInDays` annotated as 30.\n+//<inheritance example>\n+\n+Example case 2: Users might want the annotation of a field be overriden. Override is where the annotation on a field or a schema might get updated when other annotations assign it another value.\n+//<override example>\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, a user might find the field `visitedUserProfiles`s `persistencePolicyInDays` annotation is 30 but `visitedUrls`'s `persistencePolicyInDays` annotation has value 10, which overrides the original value inherited(which was 30).\n+\n+\n+Example case 3:  Override might also happen when some annotation needs to be updated by another value assigned from another annotation location\n+```pdl\n+record UserVisitRecord {\n+  //...\n+  @persistencePolicyInDays = 365\n+  recycledChatHistories: array[chat]\n+\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  //...\n+}\n+\n+record EnterpriseUserRecord {\n+  userName: UserName\n+  //...\n+  @persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}\n+  visitRecord: UserVisitRecord\n+  //...\n+}\n+```\n+In this example, schema `EnterpriseUserRecord` reused `UserVisitRecord` and its annotation in the field `visitRecord`, but it overrides the annotation value of `recycledChatHistories`.\n+\n+\n+All above examples shows that inheritance and overrides gives more extensibility to the schema annotations. Users should be free to define their own rules regarding how those annotations can be read. There should be an imambigous annotation value for the fields after user's rules are applied. We call this processing step to figure out the eventual value of a field or schema's annotation \"resolution\" and we call such value \"resolved\" value.\n+\n+What is more, users could have their own customized logic to process the annotations and define the custom behavior when annotations is overriden or inheritted, and even have the flexibility to set a customized resolved value by calling another local function or remote procedure.  The need for such extensibility gives the motivation for Annotation Processor. We aim to build a tool that can process annotations during schema resolution, process all interested annotations by plugin-ing user's own logic and save the \"resolved\" value back to corresponding DataSchema.\n+\n+### A common application of overriding annotation using PathSpec\n+In the above `EnterpriseUserRecord` example, we use `@persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}` do denote the field we are overriding is `recycledChatHistories`. This is basically using PathSpec to reference the field or child schema that needs to be overriden. PathSpec <insert-linke-here> can be used as a path to associate relations between fields among nested schemas. Users can use PathSpec to inambigously specifcy all the paths to the child fields that they want to override.\n+\n+\n+In Linkedin, such usage is so common that we want to use \n+we provided `PathSpecBaseVisitor`. \n+\n+It assumes \\\\\n+(1) All *overrides* to the fields are specified using PathSpecs to the fields. \\\\\n+(2) All *overrides* are applied on fields, not on the record\n+\n+For more examples regarding the syntax, one can read the java doc from `PathSpecBaseVisitor`.//<insert Link about > and the test cases //<insert Link about >\n+\n+\n+One can seek to extend this case to adapt to their own use cases. Please see next section regarding what class to extend to fit the best use cases.\n+\n+## Use the schema annotation processor\n+We have created a paradigm of processing Rest.Li schema annotations and wrapped them into `com.linkedin.data.schema.annotation` package.\n+First thing to understand is that `DataSchema` object internally is stored recursively. We added `resolvedProperties` attribute, in order to store the final reesolved annotation.\n+\n+For an example schema:\n+\n+```pdl\n+record Employee {\n+  id: long\n+  supervisor: Employee\n+}\n+```\n+\n+Its memory presentation is as followed:\n+<center>\n+<b>DataSchema Example</b><br><img src=\"{{ 'assets/images/DataSchema_with_resolvedProperties.png' | relative_url }}\" />\n+</center>\n+\n+The SchemaAnnotationProcessor will process `DataSchema` using `DataSchemaRichContextTraverser` and resolve the annotation for fields in the schemas.", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NzMzNQ==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r437797335", "bodyText": "extra quote for SchemaVisitor\noroginal -> original\nComment about immutable not very clear. Can you add more details?", "author": "karthikbalasub", "createdAt": "2020-06-10T00:39:46Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.\n+\n+The support that Rest.Li provided for processing annotation in Rest.Li schema has been quite limited. These annotations in above examples are later stored as a `DataSchema`'s class attribute called \"property\". Just as the example shows, both field and the DataSchema can have this \"property\". We let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.\n+\n+## Inherit and override schema annotations\n+But Rest.Li users found it useful to process annotations during schema processing. One use case is to introduce \"inheritance\" and \"overrides\" to annotations so those annotations can be dynamically processed in the way user defines, when for example the schemas were reused. This gives annotation extensibility and adds to schema reusability.\n+\n+Here are examples:\n+Example case 1: Users might want the annotation of a field be inherited. The fields can reuse the annotations from upper level.\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, we might find both `visitedUrls` and `visitedUserProfiles` have `persistencePolicyInDays` annotated as 30.\n+//<inheritance example>\n+\n+Example case 2: Users might want the annotation of a field be overriden. Override is where the annotation on a field or a schema might get updated when other annotations assign it another value.\n+//<override example>\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, a user might find the field `visitedUserProfiles`s `persistencePolicyInDays` annotation is 30 but `visitedUrls`'s `persistencePolicyInDays` annotation has value 10, which overrides the original value inherited(which was 30).\n+\n+\n+Example case 3:  Override might also happen when some annotation needs to be updated by another value assigned from another annotation location\n+```pdl\n+record UserVisitRecord {\n+  //...\n+  @persistencePolicyInDays = 365\n+  recycledChatHistories: array[chat]\n+\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  //...\n+}\n+\n+record EnterpriseUserRecord {\n+  userName: UserName\n+  //...\n+  @persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}\n+  visitRecord: UserVisitRecord\n+  //...\n+}\n+```\n+In this example, schema `EnterpriseUserRecord` reused `UserVisitRecord` and its annotation in the field `visitRecord`, but it overrides the annotation value of `recycledChatHistories`.\n+\n+\n+All above examples shows that inheritance and overrides gives more extensibility to the schema annotations. Users should be free to define their own rules regarding how those annotations can be read. There should be an imambigous annotation value for the fields after user's rules are applied. We call this processing step to figure out the eventual value of a field or schema's annotation \"resolution\" and we call such value \"resolved\" value.\n+\n+What is more, users could have their own customized logic to process the annotations and define the custom behavior when annotations is overriden or inheritted, and even have the flexibility to set a customized resolved value by calling another local function or remote procedure.  The need for such extensibility gives the motivation for Annotation Processor. We aim to build a tool that can process annotations during schema resolution, process all interested annotations by plugin-ing user's own logic and save the \"resolved\" value back to corresponding DataSchema.\n+\n+### A common application of overriding annotation using PathSpec\n+In the above `EnterpriseUserRecord` example, we use `@persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}` do denote the field we are overriding is `recycledChatHistories`. This is basically using PathSpec to reference the field or child schema that needs to be overriden. PathSpec <insert-linke-here> can be used as a path to associate relations between fields among nested schemas. Users can use PathSpec to inambigously specifcy all the paths to the child fields that they want to override.\n+\n+\n+In Linkedin, such usage is so common that we want to use \n+we provided `PathSpecBaseVisitor`. \n+\n+It assumes \\\\\n+(1) All *overrides* to the fields are specified using PathSpecs to the fields. \\\\\n+(2) All *overrides* are applied on fields, not on the record\n+\n+For more examples regarding the syntax, one can read the java doc from `PathSpecBaseVisitor`.//<insert Link about > and the test cases //<insert Link about >\n+\n+\n+One can seek to extend this case to adapt to their own use cases. Please see next section regarding what class to extend to fit the best use cases.\n+\n+## Use the schema annotation processor\n+We have created a paradigm of processing Rest.Li schema annotations and wrapped them into `com.linkedin.data.schema.annotation` package.\n+First thing to understand is that `DataSchema` object internally is stored recursively. We added `resolvedProperties` attribute, in order to store the final reesolved annotation.\n+\n+For an example schema:\n+\n+```pdl\n+record Employee {\n+  id: long\n+  supervisor: Employee\n+}\n+```\n+\n+Its memory presentation is as followed:\n+<center>\n+<b>DataSchema Example</b><br><img src=\"{{ 'assets/images/DataSchema_with_resolvedProperties.png' | relative_url }}\" />\n+</center>\n+\n+The SchemaAnnotationProcessor will process `DataSchema` using `DataSchemaRichContextTraverser` and resolve the annotation for fields in the schemas.\n+\n+\n+<center>\n+<b>Sequence Diagram</b><br><img src=\"{{ 'assets/images/AnnotationProcessor_UML_sequence_diagram.png' | relative_url }}\"  />\n+</center>\n+\n+The `DataSchemaRichContextTraverser` travsers the data schema and in turn calls an implementation of `SchemaVisitor`. It is the `SchemaVisitor`' that resolves the annotations for fields in the schemas, based on the context provided by the `DataSchemaRichContextTraverser`. `SchemaVisitor` may also create copy of original data schema if the oroginal data schema needs to be immutable.", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5ODE3NA==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r437798174", "bodyText": "Maybe adding a table or a flow chart to pick the approach would be nicer.\nAnnotation based on pathspec based overriding -> create new handler\nAnnotation based on pathspec with custom traversal -> override visitor and create handler\nAnnotation not using pathspec based overriding -> create visitor and handler", "author": "karthikbalasub", "createdAt": "2020-06-10T00:43:17Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.\n+\n+The support that Rest.Li provided for processing annotation in Rest.Li schema has been quite limited. These annotations in above examples are later stored as a `DataSchema`'s class attribute called \"property\". Just as the example shows, both field and the DataSchema can have this \"property\". We let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.\n+\n+## Inherit and override schema annotations\n+But Rest.Li users found it useful to process annotations during schema processing. One use case is to introduce \"inheritance\" and \"overrides\" to annotations so those annotations can be dynamically processed in the way user defines, when for example the schemas were reused. This gives annotation extensibility and adds to schema reusability.\n+\n+Here are examples:\n+Example case 1: Users might want the annotation of a field be inherited. The fields can reuse the annotations from upper level.\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, we might find both `visitedUrls` and `visitedUserProfiles` have `persistencePolicyInDays` annotated as 30.\n+//<inheritance example>\n+\n+Example case 2: Users might want the annotation of a field be overriden. Override is where the annotation on a field or a schema might get updated when other annotations assign it another value.\n+//<override example>\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, a user might find the field `visitedUserProfiles`s `persistencePolicyInDays` annotation is 30 but `visitedUrls`'s `persistencePolicyInDays` annotation has value 10, which overrides the original value inherited(which was 30).\n+\n+\n+Example case 3:  Override might also happen when some annotation needs to be updated by another value assigned from another annotation location\n+```pdl\n+record UserVisitRecord {\n+  //...\n+  @persistencePolicyInDays = 365\n+  recycledChatHistories: array[chat]\n+\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  //...\n+}\n+\n+record EnterpriseUserRecord {\n+  userName: UserName\n+  //...\n+  @persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}\n+  visitRecord: UserVisitRecord\n+  //...\n+}\n+```\n+In this example, schema `EnterpriseUserRecord` reused `UserVisitRecord` and its annotation in the field `visitRecord`, but it overrides the annotation value of `recycledChatHistories`.\n+\n+\n+All above examples shows that inheritance and overrides gives more extensibility to the schema annotations. Users should be free to define their own rules regarding how those annotations can be read. There should be an imambigous annotation value for the fields after user's rules are applied. We call this processing step to figure out the eventual value of a field or schema's annotation \"resolution\" and we call such value \"resolved\" value.\n+\n+What is more, users could have their own customized logic to process the annotations and define the custom behavior when annotations is overriden or inheritted, and even have the flexibility to set a customized resolved value by calling another local function or remote procedure.  The need for such extensibility gives the motivation for Annotation Processor. We aim to build a tool that can process annotations during schema resolution, process all interested annotations by plugin-ing user's own logic and save the \"resolved\" value back to corresponding DataSchema.\n+\n+### A common application of overriding annotation using PathSpec\n+In the above `EnterpriseUserRecord` example, we use `@persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}` do denote the field we are overriding is `recycledChatHistories`. This is basically using PathSpec to reference the field or child schema that needs to be overriden. PathSpec <insert-linke-here> can be used as a path to associate relations between fields among nested schemas. Users can use PathSpec to inambigously specifcy all the paths to the child fields that they want to override.\n+\n+\n+In Linkedin, such usage is so common that we want to use \n+we provided `PathSpecBaseVisitor`. \n+\n+It assumes \\\\\n+(1) All *overrides* to the fields are specified using PathSpecs to the fields. \\\\\n+(2) All *overrides* are applied on fields, not on the record\n+\n+For more examples regarding the syntax, one can read the java doc from `PathSpecBaseVisitor`.//<insert Link about > and the test cases //<insert Link about >\n+\n+\n+One can seek to extend this case to adapt to their own use cases. Please see next section regarding what class to extend to fit the best use cases.\n+\n+## Use the schema annotation processor\n+We have created a paradigm of processing Rest.Li schema annotations and wrapped them into `com.linkedin.data.schema.annotation` package.\n+First thing to understand is that `DataSchema` object internally is stored recursively. We added `resolvedProperties` attribute, in order to store the final reesolved annotation.\n+\n+For an example schema:\n+\n+```pdl\n+record Employee {\n+  id: long\n+  supervisor: Employee\n+}\n+```\n+\n+Its memory presentation is as followed:\n+<center>\n+<b>DataSchema Example</b><br><img src=\"{{ 'assets/images/DataSchema_with_resolvedProperties.png' | relative_url }}\" />\n+</center>\n+\n+The SchemaAnnotationProcessor will process `DataSchema` using `DataSchemaRichContextTraverser` and resolve the annotation for fields in the schemas.\n+\n+\n+<center>\n+<b>Sequence Diagram</b><br><img src=\"{{ 'assets/images/AnnotationProcessor_UML_sequence_diagram.png' | relative_url }}\"  />\n+</center>\n+\n+The `DataSchemaRichContextTraverser` travsers the data schema and in turn calls an implementation of `SchemaVisitor`. It is the `SchemaVisitor`' that resolves the annotations for fields in the schemas, based on the context provided by the `DataSchemaRichContextTraverser`. `SchemaVisitor` may also create copy of original data schema if the oroginal data schema needs to be immutable.\n+\n+If the overriding of annotations are specified using the `PathSpec` syntax, the `PathSpecBaseVisitor` and `SchemaHandler` class are implemented for such use case. If a user want to implement their own logic, one should look for reimplementing the `SchemaVisitor`, or extending `PathSpecBaseVisitor`, or simply implement `SchemaHandler`\n+", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5ODIzMg==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r437798232", "bodyText": "ook -> look", "author": "karthikbalasub", "createdAt": "2020-06-10T00:43:31Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.\n+\n+The support that Rest.Li provided for processing annotation in Rest.Li schema has been quite limited. These annotations in above examples are later stored as a `DataSchema`'s class attribute called \"property\". Just as the example shows, both field and the DataSchema can have this \"property\". We let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.\n+\n+## Inherit and override schema annotations\n+But Rest.Li users found it useful to process annotations during schema processing. One use case is to introduce \"inheritance\" and \"overrides\" to annotations so those annotations can be dynamically processed in the way user defines, when for example the schemas were reused. This gives annotation extensibility and adds to schema reusability.\n+\n+Here are examples:\n+Example case 1: Users might want the annotation of a field be inherited. The fields can reuse the annotations from upper level.\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, we might find both `visitedUrls` and `visitedUserProfiles` have `persistencePolicyInDays` annotated as 30.\n+//<inheritance example>\n+\n+Example case 2: Users might want the annotation of a field be overriden. Override is where the annotation on a field or a schema might get updated when other annotations assign it another value.\n+//<override example>\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, a user might find the field `visitedUserProfiles`s `persistencePolicyInDays` annotation is 30 but `visitedUrls`'s `persistencePolicyInDays` annotation has value 10, which overrides the original value inherited(which was 30).\n+\n+\n+Example case 3:  Override might also happen when some annotation needs to be updated by another value assigned from another annotation location\n+```pdl\n+record UserVisitRecord {\n+  //...\n+  @persistencePolicyInDays = 365\n+  recycledChatHistories: array[chat]\n+\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  //...\n+}\n+\n+record EnterpriseUserRecord {\n+  userName: UserName\n+  //...\n+  @persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}\n+  visitRecord: UserVisitRecord\n+  //...\n+}\n+```\n+In this example, schema `EnterpriseUserRecord` reused `UserVisitRecord` and its annotation in the field `visitRecord`, but it overrides the annotation value of `recycledChatHistories`.\n+\n+\n+All above examples shows that inheritance and overrides gives more extensibility to the schema annotations. Users should be free to define their own rules regarding how those annotations can be read. There should be an imambigous annotation value for the fields after user's rules are applied. We call this processing step to figure out the eventual value of a field or schema's annotation \"resolution\" and we call such value \"resolved\" value.\n+\n+What is more, users could have their own customized logic to process the annotations and define the custom behavior when annotations is overriden or inheritted, and even have the flexibility to set a customized resolved value by calling another local function or remote procedure.  The need for such extensibility gives the motivation for Annotation Processor. We aim to build a tool that can process annotations during schema resolution, process all interested annotations by plugin-ing user's own logic and save the \"resolved\" value back to corresponding DataSchema.\n+\n+### A common application of overriding annotation using PathSpec\n+In the above `EnterpriseUserRecord` example, we use `@persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}` do denote the field we are overriding is `recycledChatHistories`. This is basically using PathSpec to reference the field or child schema that needs to be overriden. PathSpec <insert-linke-here> can be used as a path to associate relations between fields among nested schemas. Users can use PathSpec to inambigously specifcy all the paths to the child fields that they want to override.\n+\n+\n+In Linkedin, such usage is so common that we want to use \n+we provided `PathSpecBaseVisitor`. \n+\n+It assumes \\\\\n+(1) All *overrides* to the fields are specified using PathSpecs to the fields. \\\\\n+(2) All *overrides* are applied on fields, not on the record\n+\n+For more examples regarding the syntax, one can read the java doc from `PathSpecBaseVisitor`.//<insert Link about > and the test cases //<insert Link about >\n+\n+\n+One can seek to extend this case to adapt to their own use cases. Please see next section regarding what class to extend to fit the best use cases.\n+\n+## Use the schema annotation processor\n+We have created a paradigm of processing Rest.Li schema annotations and wrapped them into `com.linkedin.data.schema.annotation` package.\n+First thing to understand is that `DataSchema` object internally is stored recursively. We added `resolvedProperties` attribute, in order to store the final reesolved annotation.\n+\n+For an example schema:\n+\n+```pdl\n+record Employee {\n+  id: long\n+  supervisor: Employee\n+}\n+```\n+\n+Its memory presentation is as followed:\n+<center>\n+<b>DataSchema Example</b><br><img src=\"{{ 'assets/images/DataSchema_with_resolvedProperties.png' | relative_url }}\" />\n+</center>\n+\n+The SchemaAnnotationProcessor will process `DataSchema` using `DataSchemaRichContextTraverser` and resolve the annotation for fields in the schemas.\n+\n+\n+<center>\n+<b>Sequence Diagram</b><br><img src=\"{{ 'assets/images/AnnotationProcessor_UML_sequence_diagram.png' | relative_url }}\"  />\n+</center>\n+\n+The `DataSchemaRichContextTraverser` travsers the data schema and in turn calls an implementation of `SchemaVisitor`. It is the `SchemaVisitor`' that resolves the annotations for fields in the schemas, based on the context provided by the `DataSchemaRichContextTraverser`. `SchemaVisitor` may also create copy of original data schema if the oroginal data schema needs to be immutable.\n+\n+If the overriding of annotations are specified using the `PathSpec` syntax, the `PathSpecBaseVisitor` and `SchemaHandler` class are implemented for such use case. If a user want to implement their own logic, one should look for reimplementing the `SchemaVisitor`, or extending `PathSpecBaseVisitor`, or simply implement `SchemaHandler`\n+\n+<center>\n+<b>Class Diagram</b><br><img src=\"{{ 'assets/images/AnnotationProcessor_UML_class_diagram.png' | relative_url }}\"  />\n+</center>\n+\n+\n+\n+\n+For more, please ook at the test cases. <insert-me-the-link>", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE3MTI4NQ==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r439171285", "bodyText": "I think you meant to update this to Schema Annotation Processing", "author": "evanw555", "createdAt": "2020-06-12T02:17:15Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE3MTQ1Nw==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r439171457", "bodyText": "I notice that you strictly refer to Rest.li as \"Rest.Li\", I'd suggest doing a search-and-replace to change all instances of \"Rest.Li\" to \"Rest.li\"", "author": "evanw555", "createdAt": "2020-06-12T02:18:00Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczOTYxMw==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r441739613", "bodyText": "Yes you are right and I replaced them all now.", "author": "junchuanwang", "createdAt": "2020-06-17T18:19:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE3MTQ1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE3MjYwMA==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r439172600", "bodyText": "nits:\n\nbe inherited -> to be inherited\nfrom upper level -> from the upper level", "author": "evanw555", "createdAt": "2020-06-12T02:22:36Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.\n+\n+The support that Rest.Li provided for processing annotation in Rest.Li schema has been quite limited. These annotations in above examples are later stored as a `DataSchema`'s class attribute called \"property\". Just as the example shows, both field and the DataSchema can have this \"property\". We let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.\n+\n+## Inherit and override schema annotations\n+But Rest.Li users found it useful to process annotations during schema processing. One use case is to introduce \"inheritance\" and \"overrides\" to annotations so those annotations can be dynamically processed in the way user defines, when for example the schemas were reused. This gives annotation extensibility and adds to schema reusability.\n+\n+Here are examples:\n+Example case 1: Users might want the annotation of a field be inherited. The fields can reuse the annotations from upper level.", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE3Mjk1NQ==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r439172955", "bodyText": "The way you say \"schema writers\" sounds impersonal and almost implies that the \"writers\" are Java Writer classes. I would say \"authors\"", "author": "evanw555", "createdAt": "2020-06-12T02:24:06Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE3Mzc3MA==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r439173770", "bodyText": "What does the first sentence mean? It sounds like you're saying support was and still is currently limited. Also, I'd recommend not presenting information about features as a story detailing the old support and the new support. This will confuse new users; why does it matter to them that support used to be one way, but now it's another way? It doesn't provide much of a value for users to know that we previously didn't support this. That's my opinion.\nnits:\n\nlet the user chooses -> let the user choose\nhow they want to interpret -> how they want it to be interpreted\nno preferrabled way -> no preferable ways\nwritten, read and interpreted -> written, read, and interpreted", "author": "evanw555", "createdAt": "2020-06-12T02:27:30Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.\n+\n+The support that Rest.Li provided for processing annotation in Rest.Li schema has been quite limited. These annotations in above examples are later stored as a `DataSchema`'s class attribute called \"property\". Just as the example shows, both field and the DataSchema can have this \"property\". We let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwMDQzNw==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r441800437", "bodyText": "All re-worded", "author": "junchuanwang", "createdAt": "2020-06-17T20:01:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE3Mzc3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE3NDk0OA==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r439174948", "bodyText": "nit: field be overridden -> field to be overridden", "author": "evanw555", "createdAt": "2020-06-12T02:32:40Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.\n+\n+The support that Rest.Li provided for processing annotation in Rest.Li schema has been quite limited. These annotations in above examples are later stored as a `DataSchema`'s class attribute called \"property\". Just as the example shows, both field and the DataSchema can have this \"property\". We let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.\n+\n+## Inherit and override schema annotations\n+But Rest.Li users found it useful to process annotations during schema processing. One use case is to introduce \"inheritance\" and \"overrides\" to annotations so those annotations can be dynamically processed in the way user defines, when for example the schemas were reused. This gives annotation extensibility and adds to schema reusability.\n+\n+Here are examples:\n+Example case 1: Users might want the annotation of a field be inherited. The fields can reuse the annotations from upper level.\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, we might find both `visitedUrls` and `visitedUserProfiles` have `persistencePolicyInDays` annotated as 30.\n+//<inheritance example>\n+\n+Example case 2: Users might want the annotation of a field be overriden. Override is where the annotation on a field or a schema might get updated when other annotations assign it another value.", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE3NDk5OA==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r439174998", "bodyText": "nit: too much whitespace", "author": "evanw555", "createdAt": "2020-06-12T02:32:50Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.\n+\n+The support that Rest.Li provided for processing annotation in Rest.Li schema has been quite limited. These annotations in above examples are later stored as a `DataSchema`'s class attribute called \"property\". Just as the example shows, both field and the DataSchema can have this \"property\". We let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.\n+\n+## Inherit and override schema annotations\n+But Rest.Li users found it useful to process annotations during schema processing. One use case is to introduce \"inheritance\" and \"overrides\" to annotations so those annotations can be dynamically processed in the way user defines, when for example the schemas were reused. This gives annotation extensibility and adds to schema reusability.\n+\n+Here are examples:\n+Example case 1: Users might want the annotation of a field be inherited. The fields can reuse the annotations from upper level.\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, we might find both `visitedUrls` and `visitedUserProfiles` have `persistencePolicyInDays` annotated as 30.\n+//<inheritance example>\n+\n+Example case 2: Users might want the annotation of a field be overriden. Override is where the annotation on a field or a schema might get updated when other annotations assign it another value.\n+//<override example>\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE3NTg5OA==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r439175898", "bodyText": "nits:\n\nexamples shows -> examples show\noverrides gives -> overrides give\nto the schema annotations -> to schema annotations\nhow those annotations can be read -> how those annotations are read\nimambiguous -> unambiguous\nuser's rules -> the user's rules\ncall such value \"resolved\" value -> call this value the \"resolved\" value", "author": "evanw555", "createdAt": "2020-06-12T02:36:55Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.\n+\n+The support that Rest.Li provided for processing annotation in Rest.Li schema has been quite limited. These annotations in above examples are later stored as a `DataSchema`'s class attribute called \"property\". Just as the example shows, both field and the DataSchema can have this \"property\". We let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.\n+\n+## Inherit and override schema annotations\n+But Rest.Li users found it useful to process annotations during schema processing. One use case is to introduce \"inheritance\" and \"overrides\" to annotations so those annotations can be dynamically processed in the way user defines, when for example the schemas were reused. This gives annotation extensibility and adds to schema reusability.\n+\n+Here are examples:\n+Example case 1: Users might want the annotation of a field be inherited. The fields can reuse the annotations from upper level.\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, we might find both `visitedUrls` and `visitedUserProfiles` have `persistencePolicyInDays` annotated as 30.\n+//<inheritance example>\n+\n+Example case 2: Users might want the annotation of a field be overriden. Override is where the annotation on a field or a schema might get updated when other annotations assign it another value.\n+//<override example>\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, a user might find the field `visitedUserProfiles`s `persistencePolicyInDays` annotation is 30 but `visitedUrls`'s `persistencePolicyInDays` annotation has value 10, which overrides the original value inherited(which was 30).\n+\n+\n+Example case 3:  Override might also happen when some annotation needs to be updated by another value assigned from another annotation location\n+```pdl\n+record UserVisitRecord {\n+  //...\n+  @persistencePolicyInDays = 365\n+  recycledChatHistories: array[chat]\n+\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  //...\n+}\n+\n+record EnterpriseUserRecord {\n+  userName: UserName\n+  //...\n+  @persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}\n+  visitRecord: UserVisitRecord\n+  //...\n+}\n+```\n+In this example, schema `EnterpriseUserRecord` reused `UserVisitRecord` and its annotation in the field `visitRecord`, but it overrides the annotation value of `recycledChatHistories`.\n+\n+", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE3NjU4OQ==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r439176589", "bodyText": "nits:\n\ninheritted -> inherited\nFirst sentence is a run-on sentence.\nExtra space at the beginning of the second sentence.\ninterested annotations -> relevant annotations or applicable annotations\nplugin-ing -> plugging in\nuser's own logic -> the user's logic\nand save the -> and saving the\nback to corresponding DataSchema -> back to the corresponding DataSchema", "author": "evanw555", "createdAt": "2020-06-12T02:40:14Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.\n+\n+The support that Rest.Li provided for processing annotation in Rest.Li schema has been quite limited. These annotations in above examples are later stored as a `DataSchema`'s class attribute called \"property\". Just as the example shows, both field and the DataSchema can have this \"property\". We let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.\n+\n+## Inherit and override schema annotations\n+But Rest.Li users found it useful to process annotations during schema processing. One use case is to introduce \"inheritance\" and \"overrides\" to annotations so those annotations can be dynamically processed in the way user defines, when for example the schemas were reused. This gives annotation extensibility and adds to schema reusability.\n+\n+Here are examples:\n+Example case 1: Users might want the annotation of a field be inherited. The fields can reuse the annotations from upper level.\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, we might find both `visitedUrls` and `visitedUserProfiles` have `persistencePolicyInDays` annotated as 30.\n+//<inheritance example>\n+\n+Example case 2: Users might want the annotation of a field be overriden. Override is where the annotation on a field or a schema might get updated when other annotations assign it another value.\n+//<override example>\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, a user might find the field `visitedUserProfiles`s `persistencePolicyInDays` annotation is 30 but `visitedUrls`'s `persistencePolicyInDays` annotation has value 10, which overrides the original value inherited(which was 30).\n+\n+\n+Example case 3:  Override might also happen when some annotation needs to be updated by another value assigned from another annotation location\n+```pdl\n+record UserVisitRecord {\n+  //...\n+  @persistencePolicyInDays = 365\n+  recycledChatHistories: array[chat]\n+\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  //...\n+}\n+\n+record EnterpriseUserRecord {\n+  userName: UserName\n+  //...\n+  @persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}\n+  visitRecord: UserVisitRecord\n+  //...\n+}\n+```\n+In this example, schema `EnterpriseUserRecord` reused `UserVisitRecord` and its annotation in the field `visitRecord`, but it overrides the annotation value of `recycledChatHistories`.\n+\n+\n+All above examples shows that inheritance and overrides gives more extensibility to the schema annotations. Users should be free to define their own rules regarding how those annotations can be read. There should be an imambigous annotation value for the fields after user's rules are applied. We call this processing step to figure out the eventual value of a field or schema's annotation \"resolution\" and we call such value \"resolved\" value.\n+\n+What is more, users could have their own customized logic to process the annotations and define the custom behavior when annotations is overriden or inheritted, and even have the flexibility to set a customized resolved value by calling another local function or remote procedure.  The need for such extensibility gives the motivation for Annotation Processor. We aim to build a tool that can process annotations during schema resolution, process all interested annotations by plugin-ing user's own logic and save the \"resolved\" value back to corresponding DataSchema.", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE3NzE1NQ==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r439177155", "bodyText": "nits:\n\ndo denote -> to denote\nthe field we are overriding is -> that the field being overridden is\nassociate relations -> define relationships or define associations\nspecifcy -> specifcy\nto the child fields -> to child fields", "author": "evanw555", "createdAt": "2020-06-12T02:42:42Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.\n+\n+The support that Rest.Li provided for processing annotation in Rest.Li schema has been quite limited. These annotations in above examples are later stored as a `DataSchema`'s class attribute called \"property\". Just as the example shows, both field and the DataSchema can have this \"property\". We let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.\n+\n+## Inherit and override schema annotations\n+But Rest.Li users found it useful to process annotations during schema processing. One use case is to introduce \"inheritance\" and \"overrides\" to annotations so those annotations can be dynamically processed in the way user defines, when for example the schemas were reused. This gives annotation extensibility and adds to schema reusability.\n+\n+Here are examples:\n+Example case 1: Users might want the annotation of a field be inherited. The fields can reuse the annotations from upper level.\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, we might find both `visitedUrls` and `visitedUserProfiles` have `persistencePolicyInDays` annotated as 30.\n+//<inheritance example>\n+\n+Example case 2: Users might want the annotation of a field be overriden. Override is where the annotation on a field or a schema might get updated when other annotations assign it another value.\n+//<override example>\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, a user might find the field `visitedUserProfiles`s `persistencePolicyInDays` annotation is 30 but `visitedUrls`'s `persistencePolicyInDays` annotation has value 10, which overrides the original value inherited(which was 30).\n+\n+\n+Example case 3:  Override might also happen when some annotation needs to be updated by another value assigned from another annotation location\n+```pdl\n+record UserVisitRecord {\n+  //...\n+  @persistencePolicyInDays = 365\n+  recycledChatHistories: array[chat]\n+\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  //...\n+}\n+\n+record EnterpriseUserRecord {\n+  userName: UserName\n+  //...\n+  @persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}\n+  visitRecord: UserVisitRecord\n+  //...\n+}\n+```\n+In this example, schema `EnterpriseUserRecord` reused `UserVisitRecord` and its annotation in the field `visitRecord`, but it overrides the annotation value of `recycledChatHistories`.\n+\n+\n+All above examples shows that inheritance and overrides gives more extensibility to the schema annotations. Users should be free to define their own rules regarding how those annotations can be read. There should be an imambigous annotation value for the fields after user's rules are applied. We call this processing step to figure out the eventual value of a field or schema's annotation \"resolution\" and we call such value \"resolved\" value.\n+\n+What is more, users could have their own customized logic to process the annotations and define the custom behavior when annotations is overriden or inheritted, and even have the flexibility to set a customized resolved value by calling another local function or remote procedure.  The need for such extensibility gives the motivation for Annotation Processor. We aim to build a tool that can process annotations during schema resolution, process all interested annotations by plugin-ing user's own logic and save the \"resolved\" value back to corresponding DataSchema.\n+\n+### A common application of overriding annotation using PathSpec\n+In the above `EnterpriseUserRecord` example, we use `@persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}` do denote the field we are overriding is `recycledChatHistories`. This is basically using PathSpec to reference the field or child schema that needs to be overriden. PathSpec <insert-linke-here> can be used as a path to associate relations between fields among nested schemas. Users can use PathSpec to inambigously specifcy all the paths to the child fields that they want to override.", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE3NzIzOQ==", "url": "https://github.com/linkedin/rest.li/pull/324#discussion_r439177239", "bodyText": "nit: Linkedin -> LinkedIn", "author": "evanw555", "createdAt": "2020-06-12T02:43:06Z", "path": "src/annotation_processor.md", "diffHunk": "@@ -0,0 +1,149 @@\n+---\n+layout: guide\n+title: PDL Schema\n+permalink: /annotation_processor\n+excerpt: Documentation of using annotation processor in Rest.Li\n+---\n+\n+# Annotation Processor\n+This sections introduces a generic schema annotation processing tool in Rest.Li. Before reading this, it is recommended to be familiar with the concept of PathSpec in Rest.Li. [Insert link here]\n+\n+## Annotating Rest.Li Schemas\n+In Rest.Li, schema writers are able to add annotations to schema fields or the schema itself.\n+\n+**Example**: annotate on the schema fields\n+```pdl\n+record UserPersonallyIdentifiableInformation {\n+  @data_classification = \"MEDIUM\"\n+  firstName: string,\n+  @data_classification = \"MEDIUM\"\n+  lastName: string,\n+  @data_classification = \"LOW\"\n+  userId: long,\n+  @data_classification = \"HIGH\"\n+  socialSecurityNumber: string,\n+}\n+```\n+\n+**Example**: annotate directly on the schema\n+```pdl\n+@data_classification = \"HIGH\"\n+record UserPersonallyIdentifiableInformation {\n+  firstName: string,\n+  lastName: string,\n+  userId: long,\n+  socialSecurityNumber: string,\n+}\n+```\n+Note that these annotations are on the schema level.\n+\n+The support that Rest.Li provided for processing annotation in Rest.Li schema has been quite limited. These annotations in above examples are later stored as a `DataSchema`'s class attribute called \"property\". Just as the example shows, both field and the DataSchema can have this \"property\". We let the user chooses where they want to have the schema annotated and how they want to interpret. There were no preferrabled way regarding how annotation should be written, read and interpreted.\n+\n+## Inherit and override schema annotations\n+But Rest.Li users found it useful to process annotations during schema processing. One use case is to introduce \"inheritance\" and \"overrides\" to annotations so those annotations can be dynamically processed in the way user defines, when for example the schemas were reused. This gives annotation extensibility and adds to schema reusability.\n+\n+Here are examples:\n+Example case 1: Users might want the annotation of a field be inherited. The fields can reuse the annotations from upper level.\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, we might find both `visitedUrls` and `visitedUserProfiles` have `persistencePolicyInDays` annotated as 30.\n+//<inheritance example>\n+\n+Example case 2: Users might want the annotation of a field be overriden. Override is where the annotation on a field or a schema might get updated when other annotations assign it another value.\n+//<override example>\n+```pdl\n+@persistencePolicyInDays = 30\n+record  UserVisitRecord {\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  visitedUserProfiles: array[UserRecord]\n+}\n+```\n+Reading from the schema, a user might find the field `visitedUserProfiles`s `persistencePolicyInDays` annotation is 30 but `visitedUrls`'s `persistencePolicyInDays` annotation has value 10, which overrides the original value inherited(which was 30).\n+\n+\n+Example case 3:  Override might also happen when some annotation needs to be updated by another value assigned from another annotation location\n+```pdl\n+record UserVisitRecord {\n+  //...\n+  @persistencePolicyInDays = 365\n+  recycledChatHistories: array[chat]\n+\n+  @persistencePolicyInDays = 10\n+  visitedUrls: array[URL]\n+  //...\n+}\n+\n+record EnterpriseUserRecord {\n+  userName: UserName\n+  //...\n+  @persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}\n+  visitRecord: UserVisitRecord\n+  //...\n+}\n+```\n+In this example, schema `EnterpriseUserRecord` reused `UserVisitRecord` and its annotation in the field `visitRecord`, but it overrides the annotation value of `recycledChatHistories`.\n+\n+\n+All above examples shows that inheritance and overrides gives more extensibility to the schema annotations. Users should be free to define their own rules regarding how those annotations can be read. There should be an imambigous annotation value for the fields after user's rules are applied. We call this processing step to figure out the eventual value of a field or schema's annotation \"resolution\" and we call such value \"resolved\" value.\n+\n+What is more, users could have their own customized logic to process the annotations and define the custom behavior when annotations is overriden or inheritted, and even have the flexibility to set a customized resolved value by calling another local function or remote procedure.  The need for such extensibility gives the motivation for Annotation Processor. We aim to build a tool that can process annotations during schema resolution, process all interested annotations by plugin-ing user's own logic and save the \"resolved\" value back to corresponding DataSchema.\n+\n+### A common application of overriding annotation using PathSpec\n+In the above `EnterpriseUserRecord` example, we use `@persistencePolicyInDays = {\"/recycledChatHistories\" : 3650}` do denote the field we are overriding is `recycledChatHistories`. This is basically using PathSpec to reference the field or child schema that needs to be overriden. PathSpec <insert-linke-here> can be used as a path to associate relations between fields among nested schemas. Users can use PathSpec to inambigously specifcy all the paths to the child fields that they want to override.\n+\n+\n+In Linkedin, such usage is so common that we want to use ", "originalCommit": "f74fd02aa09f582593bc40a69bd16c3787950f33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ae27d657ed37ee70a64773d1e221668e88de897e", "url": "https://github.com/linkedin/rest.li/commit/ae27d657ed37ee70a64773d1e221668e88de897e", "message": "Address comments and proof-read", "committedDate": "2020-06-18T17:51:40Z", "type": "commit"}, {"oid": "7880c1044d569c63ab23dc2ca29ba10126aacdbb", "url": "https://github.com/linkedin/rest.li/commit/7880c1044d569c63ab23dc2ca29ba10126aacdbb", "message": "Some edits", "committedDate": "2020-06-19T19:52:01Z", "type": "commit"}, {"oid": "a1d0093df912a7da1909ad0099552675896ae22c", "url": "https://github.com/linkedin/rest.li/commit/a1d0093df912a7da1909ad0099552675896ae22c", "message": "Merge branch 'gh-pages-source' into gh-pages-source_annotation_processor_wiki", "committedDate": "2020-06-25T23:01:27Z", "type": "commit"}]}