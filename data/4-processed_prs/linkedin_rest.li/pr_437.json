{"pr_number": 437, "pr_title": "Add an option to configure ProtoWriter buffer size. Set the default to 4096 to prevent thrashing", "pr_createdAt": "2020-10-03T08:56:43Z", "pr_url": "https://github.com/linkedin/rest.li/pull/437", "timeline": [{"oid": "881ecad0bc53d0df1a04cf51f785d6565d4c7787", "url": "https://github.com/linkedin/rest.li/commit/881ecad0bc53d0df1a04cf51f785d6565d4c7787", "message": "Add an option to configure ProtoWriter buffer size. Set the default to 4096 to prevent thrashing", "committedDate": "2020-10-03T08:58:51Z", "type": "forcePushed"}, {"oid": "89f85d43420ad2254928f9cb8a075f371b14f13f", "url": "https://github.com/linkedin/rest.li/commit/89f85d43420ad2254928f9cb8a075f371b14f13f", "message": "Add an option to configure ProtoWriter buffer size. Set the default to 4096 to prevent thrashing\nUse an identity hashmap implementation that uses DataComplex#dataComplexHashCode under the hood for better performance", "committedDate": "2020-10-03T09:32:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE1ODU4NA==", "url": "https://github.com/linkedin/rest.li/pull/437#discussion_r499158584", "bodyText": "We haven't traditionally cared about this, but can we copy the HashedMap implementation from Apache Commons if we need it? This is a 500 KB artifact that will be forced on consumers since pegasus:data is pulled in by anything that uses pegasus.", "author": "tjni", "createdAt": "2020-10-03T15:46:43Z", "path": "build.gradle", "diffHunk": "@@ -52,6 +52,7 @@ project.ext.externalDependency = [\n   'codemodel': 'com.sun.codemodel:codemodel:2.2',\n   'commonsCli': 'commons-cli:commons-cli:1.0',\n   'commonsCodec': 'commons-codec:commons-codec:1.3',\n+  'commonsCollections4': 'org.apache.commons:commons-collections4:4.0',", "originalCommit": "89f85d43420ad2254928f9cb8a075f371b14f13f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIxNzg4Nw==", "url": "https://github.com/linkedin/rest.li/pull/437#discussion_r499217887", "bodyText": "Fixed", "author": "karthikrg", "createdAt": "2020-10-04T08:03:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE1ODU4NA=="}], "type": "inlineReview"}, {"oid": "71808f5465eaa4f654457a45c88bbb578ec656c7", "url": "https://github.com/linkedin/rest.li/commit/71808f5465eaa4f654457a45c88bbb578ec656c7", "message": "Add an option to configure ProtoWriter buffer size. Set the default to 4096 to prevent thrashing\nUse a custom identity hashset implementation that uses DataComplex#dataComplexHashCode under the hood for better performance when checking for cycles", "committedDate": "2020-10-04T08:02:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4OTU4Nw==", "url": "https://github.com/linkedin/rest.li/pull/437#discussion_r499289587", "bodyText": "Should be _table[index] = node.next", "author": "karthikbalasub", "createdAt": "2020-10-04T21:15:08Z", "path": "data/src/main/java/com/linkedin/data/DataComplexIdentitySet.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.data;\n+\n+import java.util.IdentityHashMap;\n+\n+\n+/**\n+ * A space and time efficient {@link IdentityHashMap} equivalent optimized forr checking {@link DataComplex} by\n+ * identity. We don't use {@link IdentityHashMap} as-is since {@link System#identityHashCode(Object)} performs\n+ * significantly worse than {@link DataComplex#dataComplexHashCode()} under multi-threaded conditions.\n+ *\n+ * <p>Instances of this class are typically used for cycle detection.</p>\n+ */\n+class DataComplexIdentitySet\n+{\n+  private static final int CAPACITY = 16;\n+\n+  private final Node[] _table;\n+\n+  /**\n+   * Constructor.\n+   */\n+  DataComplexIdentitySet()\n+  {\n+    _table = new Node[CAPACITY];\n+  }\n+\n+  /**\n+   * Add the given {@link DataComplex} to the set.\n+   *\n+   * @param dataComplex The {@link DataComplex} to add.\n+   *\n+   * @return True if the {@link DataComplex} was already present and not added, false otherwise.\n+   */\n+  boolean add(DataComplex dataComplex)\n+  {\n+    final int index = dataComplex.dataComplexHashCode() & (CAPACITY - 1);\n+    Node node = _table[index];\n+\n+    // No entries in bucket, add and return false.\n+    if (node == null)\n+    {\n+      _table[index] = new Node(dataComplex);\n+      return false;\n+    }\n+\n+    Node previous = null;\n+    while (node != null)\n+    {\n+      if (node._dataComplex == dataComplex)\n+      {\n+        // Entry found, return true and bail!\n+        return true;\n+      }\n+\n+      previous = node;\n+      node = node._next;\n+    }\n+\n+    // No entry found for given data complex. Add it to the end, and return false.\n+    previous._next = new Node(dataComplex);\n+    return false;\n+  }\n+\n+  /**\n+   * Removes the given {@link DataComplex} from the set if it exists.\n+   *\n+   * @param dataComplex The {@link DataComplex} to remove.\n+   */\n+  void remove(DataComplex dataComplex)\n+  {\n+    final int index = dataComplex.dataComplexHashCode() & (CAPACITY - 1);\n+    Node node = _table[index];\n+\n+    // If there is no node at the given index there is nothing to do.\n+    if (node == null)\n+    {\n+      return;\n+    }\n+\n+    Node previous = null;\n+    while (node != null)\n+    {\n+      if (node._dataComplex == dataComplex)\n+      {\n+        // Entry found, remove it.\n+        if (previous == null)\n+        {\n+          // This is the first node, set table index to null.\n+          _table[index] = null;", "originalCommit": "71808f5465eaa4f654457a45c88bbb578ec656c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4OTk1Mw==", "url": "https://github.com/linkedin/rest.li/pull/437#discussion_r499289953", "bodyText": "Isn't that the same as setting to null since this is the 1st node?", "author": "karthikrg", "createdAt": "2020-10-04T21:19:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4OTU4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5Njg3NQ==", "url": "https://github.com/linkedin/rest.li/pull/437#discussion_r499296875", "bodyText": "It wouldn't work if the index has more than one element.\n_table[i] = A -> B -> null\nremove A\n_table[i] = null\nit should be\n_table[i] = B -> null", "author": "karthikbalasub", "createdAt": "2020-10-04T22:46:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4OTU4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4OTY3Nw==", "url": "https://github.com/linkedin/rest.li/pull/437#discussion_r499289677", "bodyText": "forr -> for", "author": "karthikbalasub", "createdAt": "2020-10-04T21:16:21Z", "path": "data/src/main/java/com/linkedin/data/DataComplexIdentitySet.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.data;\n+\n+import java.util.IdentityHashMap;\n+\n+\n+/**\n+ * A space and time efficient {@link IdentityHashMap} equivalent optimized forr checking {@link DataComplex} by", "originalCommit": "71808f5465eaa4f654457a45c88bbb578ec656c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4OTY5Nw==", "url": "https://github.com/linkedin/rest.li/pull/437#discussion_r499289697", "bodyText": "Please add unittests", "author": "karthikbalasub", "createdAt": "2020-10-04T21:16:42Z", "path": "data/src/main/java/com/linkedin/data/DataComplexIdentitySet.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+\n+package com.linkedin.data;\n+\n+import java.util.IdentityHashMap;\n+\n+\n+/**\n+ * A space and time efficient {@link IdentityHashMap} equivalent optimized forr checking {@link DataComplex} by\n+ * identity. We don't use {@link IdentityHashMap} as-is since {@link System#identityHashCode(Object)} performs\n+ * significantly worse than {@link DataComplex#dataComplexHashCode()} under multi-threaded conditions.\n+ *\n+ * <p>Instances of this class are typically used for cycle detection.</p>\n+ */\n+class DataComplexIdentitySet", "originalCommit": "71808f5465eaa4f654457a45c88bbb578ec656c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MTE0OQ==", "url": "https://github.com/linkedin/rest.li/pull/437#discussion_r499291149", "bodyText": "Fixed!", "author": "karthikrg", "createdAt": "2020-10-04T21:34:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI4OTY5Nw=="}], "type": "inlineReview"}, {"oid": "a0fc4400aa23f44cfe4023cc7006c040be557cb7", "url": "https://github.com/linkedin/rest.li/commit/a0fc4400aa23f44cfe4023cc7006c040be557cb7", "message": "Add an option to configure ProtoWriter buffer size. Set the default to 4096 to prevent thrashing\nUse a custom identity hashset implementation that uses DataComplex#dataComplexHashCode under the hood for better performance when checking for cycles", "committedDate": "2020-10-04T21:34:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5NjY4NA==", "url": "https://github.com/linkedin/rest.li/pull/437#discussion_r499296684", "bodyText": "Remove dataMap and then add sameHashCodeMap, it should return true, but will return false.", "author": "karthikbalasub", "createdAt": "2020-10-04T22:44:03Z", "path": "data/src/test/java/com/linkedin/data/TestDataComplexIdentitySet.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+   Copyright (c) 2020 LinkedIn Corp.\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+ */\n+\n+package com.linkedin.data;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestDataComplexIdentitySet\n+{\n+  @Test\n+  void testBasicOperations() throws CloneNotSupportedException\n+  {\n+    DataComplexIdentitySet set = new DataComplexIdentitySet();\n+    DataMap dataMap = new DataMap();\n+\n+    // Adding a DataComplex that doesn't exist should return false.\n+    Assert.assertFalse(set.add(dataMap));\n+\n+    // Adding a DataComplex that already exists should return true.\n+    Assert.assertTrue(set.add(dataMap));\n+\n+    DataMap clone = dataMap.clone();\n+\n+    // Adding a clone, ie. equal but not the same instance must return false.\n+    Assert.assertFalse(set.add(clone));\n+\n+    // Remove the original map.\n+    set.remove(dataMap);\n+\n+    // Ensure that the original map got removed by testing that adding it again returns false.\n+    Assert.assertFalse(set.add(dataMap));\n+\n+    // Ensure that the clone still exists in the map by testing that adding it again returns true.\n+    Assert.assertTrue(set.add(clone));\n+\n+    // Create a new map and override its hashcode to be same as the original map.\n+    DataMap sameHashCodeMap = new DataMap();\n+    sameHashCodeMap._dataComplexHashCode = dataMap.dataComplexHashCode();\n+\n+    // Ensure that adding the same hashcode map returns false the first time since it doesn't yet exist.\n+    Assert.assertFalse(set.add(sameHashCodeMap));\n+\n+    // Ensure that adding the same hashcod map again returns true.\n+    Assert.assertTrue(set.add(sameHashCodeMap));\n+\n+    // Ensure that the original and cloned maps still exist.\n+    Assert.assertTrue(set.add(dataMap));\n+    Assert.assertTrue(set.add(clone));", "originalCommit": "a0fc4400aa23f44cfe4023cc7006c040be557cb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5ODEwNA==", "url": "https://github.com/linkedin/rest.li/pull/437#discussion_r499298104", "bodyText": "Got it. Fixed and added this test.", "author": "karthikrg", "createdAt": "2020-10-04T23:03:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5NjY4NA=="}], "type": "inlineReview"}, {"oid": "e4d902e77fcf9744e3687ccf7e4b21c7cae12008", "url": "https://github.com/linkedin/rest.li/commit/e4d902e77fcf9744e3687ccf7e4b21c7cae12008", "message": "Add an option to configure ProtoWriter buffer size. Set the default to 4096 to prevent thrashing\nUse a custom identity hashset implementation that uses DataComplex#dataComplexHashCode under the hood for better performance when checking for cycles", "committedDate": "2020-10-04T23:03:26Z", "type": "forcePushed"}, {"oid": "bd0c10743495c3f54c8095107c1d24664562b4e6", "url": "https://github.com/linkedin/rest.li/commit/bd0c10743495c3f54c8095107c1d24664562b4e6", "message": "Add an option to configure ProtoWriter buffer size. Set the default to 4096 to prevent thrashing\nUse a custom identity hashset implementation that uses DataComplex#dataComplexHashCode under the hood for better performance when checking for cycles", "committedDate": "2020-10-05T18:38:44Z", "type": "commit"}, {"oid": "bd0c10743495c3f54c8095107c1d24664562b4e6", "url": "https://github.com/linkedin/rest.li/commit/bd0c10743495c3f54c8095107c1d24664562b4e6", "message": "Add an option to configure ProtoWriter buffer size. Set the default to 4096 to prevent thrashing\nUse a custom identity hashset implementation that uses DataComplex#dataComplexHashCode under the hood for better performance when checking for cycles", "committedDate": "2020-10-05T18:38:44Z", "type": "forcePushed"}]}