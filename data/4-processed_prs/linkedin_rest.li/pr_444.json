{"pr_number": 444, "pr_title": "Minimize memory copies and object creation during encoding", "pr_createdAt": "2020-10-13T22:03:09Z", "pr_url": "https://github.com/linkedin/rest.li/pull/444", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyODM2MQ==", "url": "https://github.com/linkedin/rest.li/pull/444#discussion_r504328361", "bodyText": "1\nPreviously it didn't handle the orderedEntrySet is null case, is this condition handling here a bug fix?\n2\nAnd line 490's callback.orderMap(map); is getting the map's entrySet internally and return orderedEntrySet.\nBut here I see we are using map.forEach... is it actually going to do anything in the case that there is no entries?", "author": "BrianPin", "createdAt": "2020-10-14T00:14:28Z", "path": "data/src/main/java/com/linkedin/data/Data.java", "diffHunk": "@@ -491,11 +488,49 @@ private static void traverse(Object obj, TraverseCallback callback, CycleChecker\n             cycleChecker.startMap(map);\n             callback.startMap(map);\n             Iterable<Map.Entry<String, Object>> orderedEntrySet = callback.orderMap(map);\n-            for (Map.Entry<String, Object> entry : orderedEntrySet)\n+\n+            //\n+            // If the ordered entry set is null, use Java 8 forEach to avoid intermediary object\n+            // creation for better performance.\n+            //\n+            if (orderedEntrySet == null)", "originalCommit": "df81658d53646c99a7e84fd0325400446916b681", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMzNDg5NA==", "url": "https://github.com/linkedin/rest.li/pull/444#discussion_r504334894", "bodyText": "Not a bug fix. I changed the contract to return null if we were ok with the map's natural ordering. This enables faster iteration on the map and lesser garbage since we can directly use forEach. It is backward compatible as well.\n\n\norderMap will return an ordered iterable if it cares about order, else null. We will process it accordingly.", "author": "karthikrg", "createdAt": "2020-10-14T00:38:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyODM2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMzNjk2MA==", "url": "https://github.com/linkedin/rest.li/pull/444#discussion_r504336960", "bodyText": "I see, so it depends on what actual map it is.\nIf it is a tree map, then the orderedEntrySet will not be null\nin hash map, the orderedEntrySet will be null and goes into this condition.\nIn both cases the entries are there.\nGood learn for me", "author": "BrianPin", "createdAt": "2020-10-14T00:46:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyODM2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyOTg3Nw==", "url": "https://github.com/linkedin/rest.li/pull/444#discussion_r504329877", "bodyText": "Is it somewhat more visible if we put this two util functions to DataMapUtils.java", "author": "BrianPin", "createdAt": "2020-10-14T00:19:49Z", "path": "data/src/main/java/com/linkedin/data/codec/DataCodec.java", "diffHunk": "@@ -54,6 +55,34 @@\n    */\n   byte[] listToBytes(DataList list) throws IOException;\n \n+  /**\n+   * Serialize a {@link DataMap} to a {@link ByteString}.\n+   *\n+   * @param map to serialize.\n+   * @return the output serialized from the {@link DataMap}.\n+   * @throws IOException if there is a serialization error.\n+   */\n+  default ByteString mapToByteString(DataMap map) throws IOException", "originalCommit": "df81658d53646c99a7e84fd0325400446916b681", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMzNTYzNg==", "url": "https://github.com/linkedin/rest.li/pull/444#discussion_r504335636", "bodyText": "We already have equivalents of these in DataMapUtils. The entire point behind introducing them here and invoking these versions from DataMapUtils is to optimize memory copies, instead of just wrapping a ByteString around a merged byte array.\nBefore this change, memory copies are 3x:\nDataMap -> Codec Buffer -> FastByteArrayOutputStream internal buffer -> join bytes\nAfter this change it becomes 2x for JSON:\nDataMap -> Codec Buffer -> FastByteArrayOutputStream internal buffer\nAnd 1x for Protobuf:\nDataMap -> FastByteArrayOutputStream internal buffer", "author": "karthikrg", "createdAt": "2020-10-14T00:41:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyOTg3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMzODM0OQ==", "url": "https://github.com/linkedin/rest.li/pull/444#discussion_r504338349", "bodyText": "Well, for understanding it more,\ncan you tell me where the join bytes is saved\nand where the Codec Buffer  is saved", "author": "BrianPin", "createdAt": "2020-10-14T00:51:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyOTg3Nw=="}], "type": "inlineReview"}, {"oid": "7f841eab2d6c8abc762ef567da88bd6477ef1977", "url": "https://github.com/linkedin/rest.li/commit/7f841eab2d6c8abc762ef567da88bd6477ef1977", "message": "Minimize memory copies and object creation during encoding", "committedDate": "2020-10-14T00:46:44Z", "type": "forcePushed"}, {"oid": "c3ab9d9d947ad5b6a2003f07f0607b655378b287", "url": "https://github.com/linkedin/rest.li/commit/c3ab9d9d947ad5b6a2003f07f0607b655378b287", "message": "Minimize memory copies and object creation during encoding", "committedDate": "2020-10-14T03:19:43Z", "type": "forcePushed"}, {"oid": "cafbb183d2e32c938fc84329a572bc2ae6652f66", "url": "https://github.com/linkedin/rest.li/commit/cafbb183d2e32c938fc84329a572bc2ae6652f66", "message": "Minimize memory copies and object creation during encoding\nUse String switch instead of map lookup in traverse callback for better performance", "committedDate": "2020-10-14T05:45:39Z", "type": "forcePushed"}, {"oid": "8b33854e649fcf7e8c6348856aff7e272c46a41b", "url": "https://github.com/linkedin/rest.li/commit/8b33854e649fcf7e8c6348856aff7e272c46a41b", "message": "Minimize memory copies and object creation during encoding\nUse String switch instead of map lookup in traverse callback for better performance\nReset isTraversing when cloning", "committedDate": "2020-10-15T03:42:33Z", "type": "forcePushed"}, {"oid": "69ea1478d72e41e5ea392edec9bee6468c71c97f", "url": "https://github.com/linkedin/rest.li/commit/69ea1478d72e41e5ea392edec9bee6468c71c97f", "message": "Minimize memory copies and object creation during encoding\nUse String switch instead of map lookup in traverse callback for better performance\nReset isTraversing when cloning", "committedDate": "2020-10-15T03:45:16Z", "type": "forcePushed"}, {"oid": "f729857dd08763310fbb6ac3a9d3844cc53274bd", "url": "https://github.com/linkedin/rest.li/commit/f729857dd08763310fbb6ac3a9d3844cc53274bd", "message": "Minimize memory copies and object creation during encoding\nUse String switch instead of map lookup in traverse callback for better performance\nReset isTraversing when cloning\nCache data objects in wrapped mapped/lists lazily on get.\nCompute dataComplexHashCode lazily for DataList and DataMap", "committedDate": "2020-10-15T06:05:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYzMDk5Nw==", "url": "https://github.com/linkedin/rest.li/pull/444#discussion_r505630997", "bodyText": "nit: a space after 'String,'", "author": "nickibi", "createdAt": "2020-10-15T15:21:00Z", "path": "data/src/main/java/com/linkedin/data/DataMap.java", "diffHunk": "@@ -415,17 +428,12 @@ private void instrumentAccess(Object key)\n     }\n   }\n \n-  private final static MapChecker<String,Object> _checker = new MapChecker<String,Object>()\n-  {\n-    @Override\n-    public void checkKeyValue(CommonMap<String, Object> map, String key, Object value)\n+  private final static MapChecker<String,Object> _checker = (map, key, value) -> {", "originalCommit": "f729857dd08763310fbb6ac3a9d3844cc53274bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9186badca8dcf0bbe49506d4f5993c383a580b73", "url": "https://github.com/linkedin/rest.li/commit/9186badca8dcf0bbe49506d4f5993c383a580b73", "message": "Minimize memory copies and object creation during encoding\nUse String switch instead of map lookup in traverse callback for better performance\nReset isTraversing when cloning\nCache data objects in wrapped mapped/lists lazily on get.\nCompute dataComplexHashCode lazily for DataList and DataMap", "committedDate": "2020-10-15T17:31:00Z", "type": "forcePushed"}, {"oid": "d43a2a9f93a3f2b8a825d232f21ff4d994179ee5", "url": "https://github.com/linkedin/rest.li/commit/d43a2a9f93a3f2b8a825d232f21ff4d994179ee5", "message": "Minimize memory copies and object creation during encoding\nUse String switch instead of map lookup in traverse callback for better performance\nReset isTraversing when cloning\nCache data objects in wrapped mapped/lists lazily on get.\nCompute dataComplexHashCode lazily for DataList and DataMap", "committedDate": "2020-10-15T18:08:01Z", "type": "forcePushed"}, {"oid": "37212dca1e9ebcf317a00bcdd6a1b4f31c28599c", "url": "https://github.com/linkedin/rest.li/commit/37212dca1e9ebcf317a00bcdd6a1b4f31c28599c", "message": "Minimize memory copies and object creation during encoding\nUse String switch instead of map lookup in traverse callback for better performance\nReset isTraversing when cloning\nCache data objects in wrapped mapped/lists lazily on get.\nCompute dataComplexHashCode lazily for DataList and DataMap", "committedDate": "2020-10-15T20:12:03Z", "type": "forcePushed"}, {"oid": "0ba209566c41f13aca5afabecfe54d58f7f3ed64", "url": "https://github.com/linkedin/rest.li/commit/0ba209566c41f13aca5afabecfe54d58f7f3ed64", "message": "Minimize memory copies and object creation during encoding\nUse String switch instead of map lookup in traverse callback for better performance\nReset isTraversing when cloning\nCache data objects in wrapped mapped/lists lazily on get.\nCompute dataComplexHashCode lazily for DataList and DataMap", "committedDate": "2020-10-15T21:01:40Z", "type": "forcePushed"}, {"oid": "2cd9b8fe800d74111d93cc34c455c455c3b1e1c0", "url": "https://github.com/linkedin/rest.li/commit/2cd9b8fe800d74111d93cc34c455c455c3b1e1c0", "message": "Minimize memory copies and object creation during encoding\nUse String switch instead of map lookup in traverse callback for better performance\nReset isTraversing when cloning\nCache data objects in wrapped mapped/lists lazily on get.\nCompute dataComplexHashCode lazily for DataList and DataMap", "committedDate": "2020-10-15T23:26:28Z", "type": "forcePushed"}, {"oid": "af799ef1278b56c461c761fe826af0720294e0fb", "url": "https://github.com/linkedin/rest.li/commit/af799ef1278b56c461c761fe826af0720294e0fb", "message": "Minimize memory copies and object creation during encoding\nUse String switch instead of map lookup in traverse callback for better performance\nReset isTraversing when cloning\nCache data objects in wrapped mapped/lists lazily on get.\nCompute dataComplexHashCode lazily for DataList and DataMap", "committedDate": "2020-10-15T23:52:16Z", "type": "forcePushed"}, {"oid": "c50f2ea9be786becb6cd9d3c1affb4e3aa8c1594", "url": "https://github.com/linkedin/rest.li/commit/c50f2ea9be786becb6cd9d3c1affb4e3aa8c1594", "message": "Minimize memory copies and object creation during encoding\nUse String switch instead of map lookup in traverse callback for better performance\nReset isTraversing when cloning\nCache data objects in wrapped mapped/lists lazily on get.\nCompute dataComplexHashCode lazily for DataList and DataMap", "committedDate": "2020-10-16T00:56:22Z", "type": "commit"}, {"oid": "c50f2ea9be786becb6cd9d3c1affb4e3aa8c1594", "url": "https://github.com/linkedin/rest.li/commit/c50f2ea9be786becb6cd9d3c1affb4e3aa8c1594", "message": "Minimize memory copies and object creation during encoding\nUse String switch instead of map lookup in traverse callback for better performance\nReset isTraversing when cloning\nCache data objects in wrapped mapped/lists lazily on get.\nCompute dataComplexHashCode lazily for DataList and DataMap", "committedDate": "2020-10-16T00:56:22Z", "type": "forcePushed"}]}