{"pr_number": 285, "pr_title": "Initial pdl schemas for relative load balancing.", "pr_createdAt": "2020-05-04T20:48:20Z", "pr_url": "https://github.com/linkedin/rest.li/pull/285", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0OTc4NQ==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r419749785", "bodyText": "Since this is an optional field, we can also explicitly mention not setting it means disabled.", "author": "rachelhanhan", "createdAt": "2020-05-04T21:49:14Z", "path": "d2-schemas/src/main/pegasus/com/linkedin/d2/D2QuarantineProperties.pdl", "diffHunk": "@@ -0,0 +1,27 @@\n+namespace com.linkedin.d2\n+\n+/**\n+ * Properties for D2 quarantine.\n+ *\n+ * Uhealthy hosts can be placed in quarantine, in which a predefined method is used\n+ * to check endpoint health without routing real request traffic to them.\n+ */\n+record D2QuarantineProperties {\n+\n+  /**\n+   * The max percentage of hosts in the cluster that can be quarantined at the same time.\n+   * Values are from 0.0 - 1.0. A value of 0.0 means quarantine is disabled.", "originalCommit": "57c8ae9ffd1f234e122046eb61b0e038b515071a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MDg1MQ==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r419780851", "bodyText": "Actually, this will probably be overridden by cfg2 default so it would be misleading to users to say it's disabled if they don't explicitly configure this value", "author": "zhang-chris", "createdAt": "2020-05-04T23:09:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0OTc4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1MzMxMA==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r419753310", "bodyText": "For optional fields, some old doc did not mention the default value, let's mention the default value and range? The default value for this field is 0.2?", "author": "rachelhanhan", "createdAt": "2020-05-04T21:56:47Z", "path": "d2-schemas/src/main/pegasus/com/linkedin/d2/D2RingProperties.pdl", "diffHunk": "@@ -0,0 +1,92 @@\n+namespace com.linkedin.d2\n+\n+/**\n+ * D2 hash ring properties used for load balancing.\n+ */\n+record D2RingProperties {\n+\n+  /**\n+   * How fast should load balancer ramp up node that has been 100% degraded and is being recovered. Defaults to 1.0.\n+   */\n+  ringRampFactor: optional double\n+\n+  /**\n+   * The number of points per weight given for a particular node in a hash ring. Defaults to 100.\n+   */\n+  pointsPerWeight: optional int\n+\n+  /**\n+   * What hashing method used to hash incoming request. Used to determine which node should serve the request. Choices are Random, UriRegex\n+   */\n+  @symbolDocs = {\n+    \"URI_REGEX\" : \"Extract a key from URI and use it to hash\",\n+    \"RANDOM\" : \"The default fall back value\"\n+  }\n+  hashMethod: optional enum hashMethodEnum {\n+    RANDOM\n+    URI_REGEX\n+  }\n+\n+  /**\n+   * Configuration used to supplement the hash method.\n+   */\n+  hashConfig: optional record hashConfigType {\n+\n+    /**\n+     * List of Regex to match against the URI of incoming request and compute hash value. The hash value is computed based on the contents of the first capture group of the first expression that matches the request URI\n+     */\n+    uriRegexes: optional array[string]\n+\n+    /**\n+     * Optional config value. if true, fail if no regex matches, otherwise fall back to random.\n+     */\n+    failOnNoMatch: boolean = false\n+\n+    /**\n+     *  Optional config value. if false, don't warn on falling back to random if the uri doesn't match the regex\n+     */\n+    warnOnNoMatch: boolean = true\n+  }\n+\n+  /**\n+   * The highest ratio of unused entries over the total entries of the Ring points that d2 maintains.", "originalCommit": "57c8ae9ffd1f234e122046eb61b0e038b515071a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MjM1OQ==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r419782359", "bodyText": "Discussed offline about defaults, I want to not include defaults in pdl to avoid having an extra layer of \"defaults\". Currently the priority is:\n\nuser-configured cfg2\nglobal cfg2\ncode\npdl\n\nI'd rather just get rid of all pdl defaults since they are commonly overridden anyway and will be more misleading than helpful.", "author": "zhang-chris", "createdAt": "2020-05-04T23:14:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1MzMxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1Mzk0Mg==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r419753942", "bodyText": "Let's mention the default is 0.2", "author": "rachelhanhan", "createdAt": "2020-05-04T21:58:15Z", "path": "d2-schemas/src/main/pegasus/com/linkedin/d2/D2RelativeStrategyProperties.pdl", "diffHunk": "@@ -0,0 +1,125 @@\n+namespace com.linkedin.d2\n+\n+/**\n+ * Relative load balancer strategy properties for a particular D2 service.\n+ *\n+ * Balances traffic to hosts within a service by dynamically adjusting a server's health score\n+ * based on call statitics compared relatively to the performance of the entire cluster.\n+ *\n+ * Health score is rated on a scale from 0.0 - 1.0, with 0.0 meaning most unhealthy (all traffic\n+ * routed away) and 1.0 meaning most healthy (no traffic routed away). Note that this behavior is\n+ * inverse of dropRate in the degrader strategy.\n+ */\n+record D2RelativeStrategyProperties {\n+\n+  /**\n+   * Step function delta size for increasing a server's health score. Values are from 0.0 - 1.0.\n+   */\n+  upStep: optional double\n+\n+  /**\n+   * Step function delta size for decreasing a server's health score. Values are from 0.0 - 1.0.\n+   */\n+  downStep: optional double", "originalCommit": "57c8ae9ffd1f234e122046eb61b0e038b515071a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1NDc5MA==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r419754790", "bodyText": "Since this is optional, we should come up with a default factor in case client does not set it. We can discuss about the default value and mention it in the doc", "author": "rachelhanhan", "createdAt": "2020-05-04T21:59:59Z", "path": "d2-schemas/src/main/pegasus/com/linkedin/d2/D2RelativeStrategyProperties.pdl", "diffHunk": "@@ -0,0 +1,125 @@\n+namespace com.linkedin.d2\n+\n+/**\n+ * Relative load balancer strategy properties for a particular D2 service.\n+ *\n+ * Balances traffic to hosts within a service by dynamically adjusting a server's health score\n+ * based on call statitics compared relatively to the performance of the entire cluster.\n+ *\n+ * Health score is rated on a scale from 0.0 - 1.0, with 0.0 meaning most unhealthy (all traffic\n+ * routed away) and 1.0 meaning most healthy (no traffic routed away). Note that this behavior is\n+ * inverse of dropRate in the degrader strategy.\n+ */\n+record D2RelativeStrategyProperties {\n+\n+  /**\n+   * Step function delta size for increasing a server's health score. Values are from 0.0 - 1.0.\n+   */\n+  upStep: optional double\n+\n+  /**\n+   * Step function delta size for decreasing a server's health score. Values are from 0.0 - 1.0.\n+   */\n+  downStep: optional double\n+\n+  /**\n+   * A server whose latency is above this specified factor of the cluster average is considered unhealthy,\n+   * and its health score will be decreased by downStep.\n+   * Values must be greater than both 1.0 and relativeLatencyLowThresholdFactor.\n+   */\n+  relativeLatencyHighThresholdFactor: optional double", "originalCommit": "57c8ae9ffd1f234e122046eb61b0e038b515071a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1NTA2Ng==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r419755066", "bodyText": "What's the default value here?", "author": "rachelhanhan", "createdAt": "2020-05-04T22:00:43Z", "path": "d2-schemas/src/main/pegasus/com/linkedin/d2/D2RelativeStrategyProperties.pdl", "diffHunk": "@@ -0,0 +1,125 @@\n+namespace com.linkedin.d2\n+\n+/**\n+ * Relative load balancer strategy properties for a particular D2 service.\n+ *\n+ * Balances traffic to hosts within a service by dynamically adjusting a server's health score\n+ * based on call statitics compared relatively to the performance of the entire cluster.\n+ *\n+ * Health score is rated on a scale from 0.0 - 1.0, with 0.0 meaning most unhealthy (all traffic\n+ * routed away) and 1.0 meaning most healthy (no traffic routed away). Note that this behavior is\n+ * inverse of dropRate in the degrader strategy.\n+ */\n+record D2RelativeStrategyProperties {\n+\n+  /**\n+   * Step function delta size for increasing a server's health score. Values are from 0.0 - 1.0.\n+   */\n+  upStep: optional double\n+\n+  /**\n+   * Step function delta size for decreasing a server's health score. Values are from 0.0 - 1.0.\n+   */\n+  downStep: optional double\n+\n+  /**\n+   * A server whose latency is above this specified factor of the cluster average is considered unhealthy,\n+   * and its health score will be decreased by downStep.\n+   * Values must be greater than both 1.0 and relativeLatencyLowThresholdFactor.\n+   */\n+  relativeLatencyHighThresholdFactor: optional double\n+\n+  /**\n+   * A server whose latency is below this specified factor of the cluster average is considered healthy,\n+   * and its health score will be increased by upStep.\n+   * Values must be greater than 1.0 and below relativeLatencyHighThresholdFactor.\n+   */\n+  relativeLatencyLowThresholdFactor: optional double\n+\n+  /**\n+   * If the error rate during the interval exceeds this value, then we will decrease the health score by downStep.\n+   * Values are from 0.0 - 1.0.\n+   */\n+  highErrorRate: optional double\n+\n+  /**\n+   * If the error rate during the interval is under this value, then we will increase the health score by upStep.\n+   * Values are from 0.0 - 1.0.\n+   */\n+  lowErrorRate: optional double", "originalCommit": "57c8ae9ffd1f234e122046eb61b0e038b515071a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1NTMzOA==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r419755338", "bodyText": "Same applied to all other optional fields", "author": "rachelhanhan", "createdAt": "2020-05-04T22:01:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1NTA2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1NjI1NQ==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r419756255", "bodyText": "The term \"degrader strategy\" can be changed to \"load balancer strategy\"?", "author": "rachelhanhan", "createdAt": "2020-05-04T22:03:33Z", "path": "d2-schemas/src/main/pegasus/com/linkedin/d2/D2RelativeStrategyProperties.pdl", "diffHunk": "@@ -0,0 +1,125 @@\n+namespace com.linkedin.d2\n+\n+/**\n+ * Relative load balancer strategy properties for a particular D2 service.\n+ *\n+ * Balances traffic to hosts within a service by dynamically adjusting a server's health score\n+ * based on call statitics compared relatively to the performance of the entire cluster.\n+ *\n+ * Health score is rated on a scale from 0.0 - 1.0, with 0.0 meaning most unhealthy (all traffic\n+ * routed away) and 1.0 meaning most healthy (no traffic routed away). Note that this behavior is\n+ * inverse of dropRate in the degrader strategy.", "originalCommit": "57c8ae9ffd1f234e122046eb61b0e038b515071a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4Mjg3Mg==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r419782872", "bodyText": "\"Degrader\" strategy is more specific imo since that is the actual name of the strategy using drop rate. Load balancer strategy is generic and could mean both degrader and relative.", "author": "zhang-chris", "createdAt": "2020-05-04T23:15:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1NjI1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI4Nzc1Mg==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r420287752", "bodyText": "Do we need to mark these 2 old fields as optional since when client migrates, they can only set relativeStrategyProperties and get rid of these 2 old property fields", "author": "rachelhanhan", "createdAt": "2020-05-05T17:36:24Z", "path": "d2-schemas/src/main/pegasus/com/linkedin/d2/D2Service.pdl", "diffHunk": "@@ -63,15 +69,24 @@ record D2Service includes D2ChangeTimeStamps {\n   cluster: string\n \n   /**\n-   * The load balancer strategy properties for this service\n+   * The load balancer strategy properties for this service.\n+   *\n+   * Required along with D2DegraderProperties for the degrader strategy.\n    */\n   loadBalancerStrategyProperties: D2LoadBalancerStrategyProperties\n \n   /**\n-   * The degrader properties for this service\n+   * The degrader properties for this service.\n+   *\n+   * Required along with D2DegraderProperties for the degrader strategy.\n    */\n   degraderProperties: D2DegraderProperties", "originalCommit": "4d3fec05d7e44fbbb93f13612c8c250094d3aa68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI5MDM2NA==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r420290364", "bodyText": "Wondering why this not optional even today, if user specify RANDOM, then these properties are not used either. Is it not optional for a purpose?", "author": "rachelhanhan", "createdAt": "2020-05-05T17:40:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI4Nzc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwNjMxMQ==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r420506311", "bodyText": "I assume it's because any normal use case will have these fields. Random is really for testing I think. I will mark these 2 as optional.", "author": "zhang-chris", "createdAt": "2020-05-06T01:56:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI4Nzc1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk2OTc5Mw==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r423969793", "bodyText": "This field is not used anymore -- instead we use lowLatency as the threshold. For relative LB will this become required? If yes it should not be optional.", "author": "cx-super", "createdAt": "2020-05-12T19:09:50Z", "path": "d2-schemas/src/main/pegasus/com/linkedin/d2/D2QuarantineProperties.pdl", "diffHunk": "@@ -0,0 +1,27 @@\n+namespace com.linkedin.d2\n+\n+/**\n+ * Properties for D2 quarantine.\n+ *\n+ * Uhealthy hosts can be placed in quarantine, in which a predefined method is used\n+ * to check endpoint health without routing real request traffic to them.\n+ */\n+record D2QuarantineProperties {\n+\n+  /**\n+   * The max percentage of hosts in the cluster that can be quarantined at the same time.\n+   * Values are from 0.0 - 1.0. A value of 0.0 means quarantine is disabled.\n+   */\n+  quarantineMaxPercent: optional double\n+\n+  /**\n+   * Specifies the method used for health checking. Format: <METHOD>:<FULL_PATH>. Defaults to OPTIONS method.\n+   */\n+  quarantineMethod: optional string\n+\n+  /**\n+   * The latency threshold (in milliseconds) for health check requests. Response times longer\n+   * than this threshold are considered as unhealthy.\n+   */\n+  quarantineLatency: optional long", "originalCommit": "ee3a2e0b87edb71335063334d58054a4fc5b7b11", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAwMzQ3MQ==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r424003471", "bodyText": "Removed.\n\"For relative LB will this become required?\" What are you referring to?", "author": "zhang-chris", "createdAt": "2020-05-12T20:09:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk2OTc5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk3MzY0MA==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r423973640", "bodyText": "Does this field still make sense for relative LB?", "author": "cx-super", "createdAt": "2020-05-12T19:16:51Z", "path": "d2-schemas/src/main/pegasus/com/linkedin/d2/D2RingProperties.pdl", "diffHunk": "@@ -0,0 +1,92 @@\n+namespace com.linkedin.d2\n+\n+/**\n+ * D2 hash ring properties used for load balancing.\n+ */\n+record D2RingProperties {\n+\n+  /**\n+   * How fast should load balancer ramp up node that has been 100% degraded and is being recovered. Defaults to 1.0.\n+   */\n+  ringRampFactor: optional double\n+\n+  /**\n+   * The number of points per weight given for a particular node in a hash ring. Defaults to 100.\n+   */\n+  pointsPerWeight: optional int", "originalCommit": "ee3a2e0b87edb71335063334d58054a4fc5b7b11", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAwMjk2Ng==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r424002966", "bodyText": "Yes, see comment below.", "author": "zhang-chris", "createdAt": "2020-05-12T20:09:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk3MzY0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk3NDkwNw==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r423974907", "bodyText": "I thought relative LB does not support affinity routing? If that's the case you do not need these fields.", "author": "cx-super", "createdAt": "2020-05-12T19:19:10Z", "path": "d2-schemas/src/main/pegasus/com/linkedin/d2/D2RingProperties.pdl", "diffHunk": "@@ -0,0 +1,92 @@\n+namespace com.linkedin.d2\n+\n+/**\n+ * D2 hash ring properties used for load balancing.\n+ */\n+record D2RingProperties {\n+\n+  /**\n+   * How fast should load balancer ramp up node that has been 100% degraded and is being recovered. Defaults to 1.0.\n+   */\n+  ringRampFactor: optional double\n+\n+  /**\n+   * The number of points per weight given for a particular node in a hash ring. Defaults to 100.\n+   */\n+  pointsPerWeight: optional int\n+\n+  /**\n+   * What hashing method used to hash incoming request. Used to determine which node should serve the request. Choices are Random, UriRegex\n+   */\n+  @symbolDocs = {\n+    \"URI_REGEX\" : \"Extract a key from URI and use it to hash\",\n+    \"RANDOM\" : \"The default fall back value\"\n+  }\n+  hashMethod: optional enum HashMethod {\n+    RANDOM\n+    URI_REGEX\n+  }\n+\n+  /**\n+   * Configuration used to supplement the hash method.\n+   */\n+  hashConfig: optional record HashConfig {\n+\n+    /**\n+     * List of Regex to match against the URI of incoming request and compute hash value. The hash value is computed based on the contents of the first capture group of the first expression that matches the request URI\n+     */\n+    uriRegexes: optional array[string]\n+\n+    /**\n+     * Optional config value. if true, fail if no regex matches, otherwise fall back to random.\n+     */\n+    failOnNoMatch: boolean = false\n+\n+    /**\n+     *  Optional config value. if false, don't warn on falling back to random if the uri doesn't match the regex\n+     */\n+    warnOnNoMatch: boolean = true\n+  }", "originalCommit": "ee3a2e0b87edb71335063334d58054a4fc5b7b11", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAwMjU1Ng==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r424002556", "bodyText": "It is supported. Underlying ring behavior is unchanged. Relative LB is for adjusting health of servers (points on ring).", "author": "zhang-chris", "createdAt": "2020-05-12T20:08:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk3NDkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA1NTQ5Mg==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r424055492", "bodyText": "OK I misunderstood that part.", "author": "cx-super", "createdAt": "2020-05-12T21:52:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk3NDkwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk3NTYwMg==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r423975602", "bodyText": "Ditto", "author": "cx-super", "createdAt": "2020-05-12T19:20:24Z", "path": "d2-schemas/src/main/pegasus/com/linkedin/d2/D2RingProperties.pdl", "diffHunk": "@@ -0,0 +1,92 @@\n+namespace com.linkedin.d2\n+\n+/**\n+ * D2 hash ring properties used for load balancing.\n+ */\n+record D2RingProperties {\n+\n+  /**\n+   * How fast should load balancer ramp up node that has been 100% degraded and is being recovered. Defaults to 1.0.\n+   */\n+  ringRampFactor: optional double\n+\n+  /**\n+   * The number of points per weight given for a particular node in a hash ring. Defaults to 100.\n+   */\n+  pointsPerWeight: optional int\n+\n+  /**\n+   * What hashing method used to hash incoming request. Used to determine which node should serve the request. Choices are Random, UriRegex\n+   */\n+  @symbolDocs = {\n+    \"URI_REGEX\" : \"Extract a key from URI and use it to hash\",\n+    \"RANDOM\" : \"The default fall back value\"\n+  }\n+  hashMethod: optional enum HashMethod {\n+    RANDOM\n+    URI_REGEX\n+  }\n+\n+  /**\n+   * Configuration used to supplement the hash method.\n+   */\n+  hashConfig: optional record HashConfig {\n+\n+    /**\n+     * List of Regex to match against the URI of incoming request and compute hash value. The hash value is computed based on the contents of the first capture group of the first expression that matches the request URI\n+     */\n+    uriRegexes: optional array[string]\n+\n+    /**\n+     * Optional config value. if true, fail if no regex matches, otherwise fall back to random.\n+     */\n+    failOnNoMatch: boolean = false\n+\n+    /**\n+     *  Optional config value. if false, don't warn on falling back to random if the uri doesn't match the regex\n+     */\n+    warnOnNoMatch: boolean = true\n+  }\n+\n+  /**\n+   * The highest ratio of unused entries over the total entries of the Ring points that d2 maintains.\n+   */\n+  hashRingPointCleanupRate: optional double\n+\n+  /**\n+   * Consistent hash algorithm the d2 load balancer should use. Defaults to POINT_BASED.\n+   */\n+  consistentHashAlgorithm: optional enum ConsistentHashAlgorithm {", "originalCommit": "ee3a2e0b87edb71335063334d58054a4fc5b7b11", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAwMjcyNw==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r424002727", "bodyText": "See above.", "author": "zhang-chris", "createdAt": "2020-05-12T20:08:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk3NTYwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1MzA4OQ==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r424653089", "bodyText": "Have you thought about using an array of tuples to describe a list of ranges, rather than using a regex?", "author": "asakusuma", "createdAt": "2020-05-13T18:41:18Z", "path": "d2-schemas/src/main/pegasus/com/linkedin/d2/D2RelativeStrategyProperties.pdl", "diffHunk": "@@ -0,0 +1,125 @@\n+namespace com.linkedin.d2\n+\n+/**\n+ * Relative load balancer strategy properties for a particular D2 service.\n+ *\n+ * Balances traffic to hosts within a service by dynamically adjusting a server's health score\n+ * based on call statitics compared relatively to the performance of the entire cluster.\n+ *\n+ * Health score is rated on a scale from 0.0 - 1.0, with 0.0 meaning most unhealthy (all traffic\n+ * routed away) and 1.0 meaning most healthy (no traffic routed away). Note that this behavior is\n+ * inverse of dropRate in the degrader strategy.\n+ */\n+record D2RelativeStrategyProperties {\n+\n+  /**\n+   * Step function delta size for increasing a server's health score. Values are from 0.0 - 1.0.\n+   */\n+  upStep: optional double\n+\n+  /**\n+   * Step function delta size for decreasing a server's health score. Values are from 0.0 - 1.0.\n+   */\n+  downStep: optional double\n+\n+  /**\n+   * A server whose latency is above this specified factor of the cluster average is considered unhealthy,\n+   * and its health score will be decreased by downStep.\n+   * Values must be greater than both 1.0 and relativeLatencyLowThresholdFactor.\n+   */\n+  relativeLatencyHighThresholdFactor: optional double\n+\n+  /**\n+   * A server whose latency is below this specified factor of the cluster average is considered healthy,\n+   * and its health score will be increased by upStep.\n+   * Values must be greater than 1.0 and below relativeLatencyHighThresholdFactor.\n+   */\n+  relativeLatencyLowThresholdFactor: optional double\n+\n+  /**\n+   * If the error rate during the interval exceeds this value, then we will decrease the health score by downStep.\n+   * Values are from 0.0 - 1.0.\n+   */\n+  highErrorRate: optional double\n+\n+  /**\n+   * If the error rate during the interval is under this value, then we will increase the health score by upStep.\n+   * Values are from 0.0 - 1.0.\n+   */\n+  lowErrorRate: optional double\n+\n+  /**\n+   * The health score for a server will not be calculated unless the number of calls to it in the interval\n+   * meets or exceeds the minimum call count.\n+   */\n+  minCallCount: optional int\n+\n+  /**\n+   * The interval (in milliseconds) between each round of health score calculations.\n+   */\n+  updateIntervalMs: optional long\n+\n+  /**\n+   * The latency metric type used to calculate the health score.\n+   */\n+  latencyMetricType: optional enum LatencyMetricType {\n+\n+    /**\n+     * Average latency.\n+     */\n+    AVERAGE\n+\n+    /**\n+     * 50th percentile latency.\n+     */\n+    PCT50\n+\n+    /**\n+     * 90th percentile latency.\n+     */\n+    PCT90\n+\n+    /**\n+     * 95th percentile latency.\n+     */\n+    PCT95\n+\n+    /**\n+     * 99th percentile latency.\n+     */\n+    PCT99\n+  }\n+\n+  /**\n+   * The initial health score that a server starts with.\n+   * Values are from 0.0 - 1.0.\n+   */\n+  initialHealthScore: optional double\n+\n+  /**\n+   * The health score threshold that determines whether D2 should perform slow start\n+   * (by doubling the health score) or the normal stepUp/Down operation.\n+   * Values are from 0.0 - 1.0. A value of 0.0 means slow start is disabled.\n+   */\n+  slowStartThreshold: optional double\n+\n+  /**\n+   * Regular expression used to match a request status code and indicate a server-side error.\n+   */\n+  errorStatusRegex: optional string", "originalCommit": "3a1e7d7319719beceedb4763c4d09d89676e05de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgzODMwMg==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r424838302", "bodyText": "an array of tuples is not as flexible so I'd rather use regex.", "author": "zhang-chris", "createdAt": "2020-05-14T02:38:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1MzA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI1MzQxOA==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r425253418", "bodyText": "Given that the domain is pretty narrow (3 digit integers), can you give an example of how a regex is more flexible than a list of tuples?", "author": "asakusuma", "createdAt": "2020-05-14T16:04:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1MzA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM2MTE3NQ==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r425361175", "bodyText": "For example, if I wanted to consider any 5xx and 404 as errors I would write (5..|404). I'm not sure I understand your suggestion. What would it look like using an array of tuples?", "author": "zhang-chris", "createdAt": "2020-05-14T18:54:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1MzA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM3MjU5Mg==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r425372592", "bodyText": "You could encode that requirement as:\n[[500,599], [404]]\n\nAs in array[array[int]]\nYou could also introduce a more sophisticated record type to model a set of error codes. Like:\nrecord ErrorCodeRange {\n  lowerBound: int\n  upperBound: int\n}\n\nerrorStatusFilter: array[ErrorCodeRange]\n\nThe point here is that it would be nice if we could model a set of ints in a stricter fashion than a string.", "author": "asakusuma", "createdAt": "2020-05-14T19:15:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1MzA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQxODQ1Mw==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r425418453", "bodyText": "I see, I like the ErrorCodeRange suggestion. I will do that, thanks.", "author": "zhang-chris", "createdAt": "2020-05-14T20:43:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1MzA4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1NDAyMg==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r424654022", "bodyText": "Could this possibly be an enum for the method, combined with another field for the path? Rather than just a string.", "author": "asakusuma", "createdAt": "2020-05-13T18:42:50Z", "path": "d2-schemas/src/main/pegasus/com/linkedin/d2/D2QuarantineProperties.pdl", "diffHunk": "@@ -0,0 +1,21 @@\n+namespace com.linkedin.d2\n+\n+/**\n+ * Properties for D2 quarantine.\n+ *\n+ * Uhealthy hosts can be placed in quarantine, in which a predefined method is used\n+ * to check endpoint health without routing real request traffic to them.\n+ */\n+record D2QuarantineProperties {\n+\n+  /**\n+   * The max percentage of hosts in the cluster that can be quarantined at the same time.\n+   * Values are from 0.0 - 1.0. A value of 0.0 means quarantine is disabled.\n+   */\n+  quarantineMaxPercent: optional double\n+\n+  /**\n+   * Specifies the method used for health checking. Format: <METHOD>:<FULL_PATH>. Defaults to OPTIONS method.\n+   */\n+  quarantineMethod: optional string", "originalCommit": "3a1e7d7319719beceedb4763c4d09d89676e05de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4NzMxMw==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r424887313", "bodyText": "Yes, I can separate it out into 2 fields:\n\nhealthCheckMethod: optional enum )\nhealthCheckPath: optional string", "author": "zhang-chris", "createdAt": "2020-05-14T05:57:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1NDAyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI1NDkwNw==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r425254907", "bodyText": "Looks good, thanks", "author": "asakusuma", "createdAt": "2020-05-14T16:06:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1NDAyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzMTY0MQ==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r425431641", "bodyText": "Just to be extra explicit and avoid confusion, can you change \"falls within the provided ranges\" to \"falls within any of the provided ranges\"\nBasically saying that this is OR, not AND logic. Seems obvious but this sort of thing can trip up external readers.", "author": "asakusuma", "createdAt": "2020-05-14T21:08:33Z", "path": "d2-schemas/src/main/pegasus/com/linkedin/d2/D2RelativeStrategyProperties.pdl", "diffHunk": "@@ -0,0 +1,136 @@\n+namespace com.linkedin.d2\n+\n+/**\n+ * Relative load balancer strategy properties for a particular D2 service.\n+ *\n+ * Balances traffic to hosts within a service by dynamically adjusting a server's health score\n+ * based on call statitics compared relatively to the performance of the entire cluster.\n+ *\n+ * Health score is rated on a scale from 0.0 - 1.0, with 0.0 meaning most unhealthy (all traffic\n+ * routed away) and 1.0 meaning most healthy (no traffic routed away). Note that this behavior is\n+ * inverse of dropRate in the degrader strategy.\n+ */\n+record D2RelativeStrategyProperties {\n+\n+  /**\n+   * Step function delta size for increasing a server's health score. Values are from 0.0 - 1.0.\n+   */\n+  upStep: optional double\n+\n+  /**\n+   * Step function delta size for decreasing a server's health score. Values are from 0.0 - 1.0.\n+   */\n+  downStep: optional double\n+\n+  /**\n+   * A server whose latency is above this specified factor of the cluster average is considered unhealthy,\n+   * and its health score will be decreased by downStep.\n+   * Values must be greater than both 1.0 and relativeLatencyLowThresholdFactor.\n+   */\n+  relativeLatencyHighThresholdFactor: optional double\n+\n+  /**\n+   * A server whose latency is below this specified factor of the cluster average is considered healthy,\n+   * and its health score will be increased by upStep.\n+   * Values must be greater than 1.0 and below relativeLatencyHighThresholdFactor.\n+   */\n+  relativeLatencyLowThresholdFactor: optional double\n+\n+  /**\n+   * If the error rate during the interval exceeds this value, then we will decrease the health score by downStep.\n+   * Values are from 0.0 - 1.0.\n+   */\n+  highErrorRate: optional double\n+\n+  /**\n+   * If the error rate during the interval is under this value, then we will increase the health score by upStep.\n+   * Values are from 0.0 - 1.0.\n+   */\n+  lowErrorRate: optional double\n+\n+  /**\n+   * The health score for a server will not be calculated unless the number of calls to it in the interval\n+   * meets or exceeds the minimum call count.\n+   */\n+  minCallCount: optional int\n+\n+  /**\n+   * The interval (in milliseconds) between each round of health score calculations.\n+   */\n+  updateIntervalMs: optional long\n+\n+\n+  /**\n+   * The latency metric type used to calculate the health score.\n+   */\n+  latencyMetricType: optional enum LatencyMetricType {\n+\n+    /**\n+     * Average latency.\n+     */\n+    AVERAGE\n+\n+    /**\n+     * 50th percentile latency.\n+     */\n+    PCT50\n+\n+    /**\n+     * 90th percentile latency.\n+     */\n+    PCT90\n+\n+    /**\n+     * 95th percentile latency.\n+     */\n+    PCT95\n+\n+    /**\n+     * 99th percentile latency.\n+     */\n+    PCT99\n+  }\n+\n+  /**\n+   * The initial health score that a server starts with.\n+   * Values are from 0.0 - 1.0.\n+   */\n+  initialHealthScore: optional double\n+\n+  /**\n+   * The health score threshold that determines whether D2 should perform slow start\n+   * (by doubling the health score) or the normal stepUp/Down operation.\n+   * Values are from 0.0 - 1.0. A value of 0.0 means slow start is disabled.\n+   */\n+  slowStartThreshold: optional double\n+\n+  /**\n+   * A request status code that falls within the provided ranges will be considered as a server-side error.", "originalCommit": "273aeba73497d99e2a0fdcd582e8b32fa12b088f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzMjc4NA==", "url": "https://github.com/linkedin/rest.li/pull/285#discussion_r425432784", "bodyText": "good point, will do.", "author": "zhang-chris", "createdAt": "2020-05-14T21:10:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzMTY0MQ=="}], "type": "inlineReview"}, {"oid": "a90d513b10aab48b303f044122beb125b337e686", "url": "https://github.com/linkedin/rest.li/commit/a90d513b10aab48b303f044122beb125b337e686", "message": "Add schemas for relative load balancing.", "committedDate": "2020-05-19T21:56:45Z", "type": "commit"}, {"oid": "a90d513b10aab48b303f044122beb125b337e686", "url": "https://github.com/linkedin/rest.li/commit/a90d513b10aab48b303f044122beb125b337e686", "message": "Add schemas for relative load balancing.", "committedDate": "2020-05-19T21:56:45Z", "type": "forcePushed"}, {"oid": "a833bd6c9e6cb9ce2544a196550ddce50b7aeaa9", "url": "https://github.com/linkedin/rest.li/commit/a833bd6c9e6cb9ce2544a196550ddce50b7aeaa9", "message": "Merge branch 'master' into feature/d2_relative_schema", "committedDate": "2020-05-19T21:58:12Z", "type": "commit"}]}