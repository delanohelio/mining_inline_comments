{"pr_number": 1121, "pr_title": "HBASE-20623: [WIP]Introduce the helper method \"getCellBuilder()\" to Mutation", "pr_createdAt": "2020-02-04T08:00:39Z", "pr_url": "https://github.com/apache/hbase/pull/1121", "timeline": [{"oid": "a83428b849a2ea3c8e565ea14450baca73a9c25c", "url": "https://github.com/apache/hbase/commit/a83428b849a2ea3c8e565ea14450baca73a9c25c", "message": "HBASE-20623: Introduce the helper method \"getCellBuilder()\" to Mutation", "committedDate": "2020-02-04T07:57:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0MzUxMA==", "url": "https://github.com/apache/hbase/pull/1121#discussion_r374943510", "bodyText": "So you shutdown setting row, type, etc., with the below?", "author": "saintstack", "createdAt": "2020-02-04T21:51:55Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/Mutation.java", "diffHunk": "@@ -784,6 +787,104 @@ Mutation add(Cell cell) throws IOException {\n     return this;\n   }\n \n+  /**\n+   * get a CellBuilder instance that already has relevant Type and Row set.\n+   * @param cellBuilderType e.g CellBuilderType.SHALLOW_COPY\n+   * @return CellBuilder which already has relevant Type and Row set.\n+   */\n+  public abstract CellBuilder getCellBuilder(CellBuilderType cellBuilderType);\n+\n+  /**\n+   * get a CellBuilder instance that already has relevant Type and Row set.\n+   * the default CellBuilderType is CellBuilderType.SHALLOW_COPY\n+   * @return CellBuilder which already has relevant Type and Row set.\n+   */\n+  public CellBuilder getCellBuilder() {\n+    return getCellBuilder(CellBuilderType.SHALLOW_COPY);\n+  }\n+\n+  /**\n+   * get a CellBuilder instance that already has relevant Type and Row set.\n+   * @param cellBuilderType e.g CellBuilderType.SHALLOW_COPY\n+   * @param cellType e.g Cell.Type.Put\n+   * @return CellBuilder which already has relevant Type and Row set.\n+     */\n+  protected CellBuilder getCellBuilder(CellBuilderType cellBuilderType, Cell.Type cellType) {", "originalCommit": "a83428b849a2ea3c8e565ea14450baca73a9c25c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0NjU1OQ==", "url": "https://github.com/apache/hbase/pull/1121#discussion_r374946559", "bodyText": "Should it throw an exception? Maybe it can't?", "author": "saintstack", "createdAt": "2020-02-04T21:58:30Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMutationGetCellBuilder.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.client;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import org.apache.hadoop.hbase.Cell;\n+import org.apache.hadoop.hbase.CellBuilder;\n+import org.apache.hadoop.hbase.CellUtil;\n+import org.apache.hadoop.hbase.HBaseClassTestRule;\n+import org.apache.hadoop.hbase.HBaseTestingUtility;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.testclassification.ClientTests;\n+import org.apache.hadoop.hbase.testclassification.MediumTests;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.TestName;\n+\n+@Category({MediumTests.class, ClientTests.class})\n+public class TestMutationGetCellBuilder {\n+\n+  @ClassRule\n+  public static final HBaseClassTestRule CLASS_RULE =\n+      HBaseClassTestRule.forClass(TestMutationGetCellBuilder.class);\n+\n+  private static final HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();\n+\n+  @Rule\n+  public TestName name = new TestName();\n+\n+  @BeforeClass\n+  public static void setUpBeforeClass() throws Exception {\n+    TEST_UTIL.startMiniCluster();\n+  }\n+\n+  @AfterClass\n+  public static void tearDownAfterClass() throws Exception {\n+    TEST_UTIL.shutdownMiniCluster();\n+  }\n+\n+  @Test\n+  public void testMutationGetCellBuilder() throws Exception {\n+    final TableName tableName = TableName.valueOf(name.getMethodName());\n+    final byte[] rowKey = Bytes.toBytes(\"12345678\");\n+    final byte[] uselessRowKey = Bytes.toBytes(\"123\");\n+    final byte[] family = Bytes.toBytes(\"cf\");\n+    final byte[] qualifier = Bytes.toBytes(\"foo\");\n+    final long now = System.currentTimeMillis();\n+    try (Table table = TEST_UTIL.createTable(tableName, family)) {\n+      TEST_UTIL.waitTableAvailable(tableName.getName(), 5000);\n+      // put one row\n+      Put put = new Put(rowKey);\n+      CellBuilder cellBuilder = put.getCellBuilder().setQualifier(qualifier)\n+              .setFamily(family).setValue(Bytes.toBytes(\"bar\")).setTimestamp(now);\n+      //setRow is useless\n+      cellBuilder.setRow(uselessRowKey);", "originalCommit": "a83428b849a2ea3c8e565ea14450baca73a9c25c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0Nzc5NA==", "url": "https://github.com/apache/hbase/pull/1121#discussion_r374947794", "bodyText": "Could write this as put.addColumn()? It'd be easier? What you see advantage of this being able to do it by Cell? Will it confuse the user?", "author": "saintstack", "createdAt": "2020-02-04T22:01:10Z", "path": "src/main/asciidoc/_chapters/datamodel.adoc", "diffHunk": "@@ -471,6 +471,26 @@ Caution: the version timestamp is used internally by HBase for things like time-\n It's usually best to avoid setting this timestamp yourself.\n Prefer using a separate timestamp attribute of the row, or have the timestamp as a part of the row key, or both.\n \n+===== Cell Version Example\n+\n+The following Put uses a method getCellBuilder() to get a CellBuilder instance\n+that already has relevant Type and Row set.\n+\n+[source,java]\n+----\n+\n+public static final byte[] CF = \"cf\".getBytes();\n+public static final byte[] ATTR = \"attr\".getBytes();\n+...\n+\n+Put put = new Put(Bytes.toBytes(row));\n+put.add(put.getCellBuilder().setQualifier(ATTR)\n+   .setFamily(CF)\n+   .setValue(Bytes.toBytes(data))\n+   .build());", "originalCommit": "a83428b849a2ea3c8e565ea14450baca73a9c25c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA4NTQxMA==", "url": "https://github.com/apache/hbase/pull/1121#discussion_r375085410", "bodyText": "@saintstack Thanks for your review.\n\nYes, put.addColumn() can have the same effect.\nthis design was discussed in this email thread which had a user case provided by Sean Busbey. AFAIU, it wants to simplify the put.add(cell) api, because sometimes when users use this cell api:\n\n    CellBuilder cb = CellBuilderFactory.create(CellBuilderType.SHALLOW_COPY);\n    cb.setRow(Bytes.toBytes(\"row3\"));\n    cb.setFamily(Bytes.toBytes(\"cf\"));\n    cb.setQualifier(\"qualifier1\".getBytes());\n    cb.setValue(Bytes.toBytes(\"mjj2\"));\n    cb.setType(Type.Put);\n    Cell cell = cb.build();\n    Put p = new Put(Bytes.toBytes(\"row3\"));\n    p.add(cell);\n\ncb.setType(Type.Put) is a little redundant and getCellBuilder() can help users to reuse the row, even Family and Qualifier they set last time to make the code short and clean.", "author": "maoling", "createdAt": "2020-02-05T06:56:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0Nzc5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIyNDkwNw==", "url": "https://github.com/apache/hbase/pull/1121#discussion_r377224907", "bodyText": "I see. Usability. A fix that came of discussion. Good.", "author": "saintstack", "createdAt": "2020-02-10T18:01:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0Nzc5NA=="}], "type": "inlineReview"}]}