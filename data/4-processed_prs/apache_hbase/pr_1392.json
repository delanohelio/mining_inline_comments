{"pr_number": 1392, "pr_title": "HBASE-24081 Provide documentation for running Yetus with HBase", "pr_createdAt": "2020-03-30T20:47:18Z", "pr_url": "https://github.com/apache/hbase/pull/1392", "timeline": [{"oid": "18fa98b8b41610ecf676428e5fe9722e2cd6e1dc", "url": "https://github.com/apache/hbase/commit/18fa98b8b41610ecf676428e5fe9722e2cd6e1dc", "message": "HBASE-24081 Provide documentation for running Yetus with HBase", "committedDate": "2020-03-30T20:51:52Z", "type": "forcePushed"}, {"oid": "ec5dbfa1c6c8189dcdd1b25edd10724a5d34d47b", "url": "https://github.com/apache/hbase/commit/ec5dbfa1c6c8189dcdd1b25edd10724a5d34d47b", "message": "HBASE-24081 Provide documentation for running Yetus with HBase", "committedDate": "2020-03-30T20:54:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5MDY3Nw==", "url": "https://github.com/apache/hbase/pull/1392#discussion_r400490677", "bodyText": "s/to/to the/", "author": "saintstack", "createdAt": "2020-03-30T21:00:23Z", "path": "dev-support/HOW_TO_YETUS_LOCAL.md", "diffHunk": "@@ -0,0 +1,166 @@\n+# How To Use Apache Yetus with Apache HBase\n+\n+This document describes how to get up and running with [Apache Yetus][yetus],\n+as pertains to development of Apache HBase. Specifically this covers the use", "originalCommit": "ec5dbfa1c6c8189dcdd1b25edd10724a5d34d47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5MDgzMg==", "url": "https://github.com/apache/hbase/pull/1392#discussion_r400490832", "bodyText": "link?", "author": "saintstack", "createdAt": "2020-03-30T21:00:43Z", "path": "dev-support/HOW_TO_YETUS_LOCAL.md", "diffHunk": "@@ -0,0 +1,166 @@\n+# How To Use Apache Yetus with Apache HBase\n+\n+This document describes how to get up and running with [Apache Yetus][yetus],\n+as pertains to development of Apache HBase. Specifically this covers the use\n+of `test-patch`, of which HBase developers make use for tasks related to code\n+quality. These are normally run via automation in the foundation's\n+[Build][builds] infrastructure. They can also be run locally, which is the", "originalCommit": "ec5dbfa1c6c8189dcdd1b25edd10724a5d34d47b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUwMjQxNQ==", "url": "https://github.com/apache/hbase/pull/1392#discussion_r400502415", "bodyText": "The links are pulled out to the bottom of the doc.", "author": "ndimiduk", "createdAt": "2020-03-30T21:22:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5MDgzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5MDkzMQ==", "url": "https://github.com/apache/hbase/pull/1392#discussion_r400490931", "bodyText": "s/this/of this/", "author": "saintstack", "createdAt": "2020-03-30T21:00:55Z", "path": "dev-support/HOW_TO_YETUS_LOCAL.md", "diffHunk": "@@ -0,0 +1,166 @@\n+# How To Use Apache Yetus with Apache HBase\n+\n+This document describes how to get up and running with [Apache Yetus][yetus],\n+as pertains to development of Apache HBase. Specifically this covers the use\n+of `test-patch`, of which HBase developers make use for tasks related to code\n+quality. These are normally run via automation in the foundation's\n+[Build][builds] infrastructure. They can also be run locally, which is the\n+subject this document.", "originalCommit": "ec5dbfa1c6c8189dcdd1b25edd10724a5d34d47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5MTMwOA==", "url": "https://github.com/apache/hbase/pull/1392#discussion_r400491308", "bodyText": "s/it's/its/", "author": "saintstack", "createdAt": "2020-03-30T21:01:40Z", "path": "dev-support/HOW_TO_YETUS_LOCAL.md", "diffHunk": "@@ -0,0 +1,166 @@\n+# How To Use Apache Yetus with Apache HBase\n+\n+This document describes how to get up and running with [Apache Yetus][yetus],\n+as pertains to development of Apache HBase. Specifically this covers the use\n+of `test-patch`, of which HBase developers make use for tasks related to code\n+quality. These are normally run via automation in the foundation's\n+[Build][builds] infrastructure. They can also be run locally, which is the\n+subject this document.\n+\n+The Yetus project provides it's own documentation of `test-patch` in", "originalCommit": "ec5dbfa1c6c8189dcdd1b25edd10724a5d34d47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5MTUxNw==", "url": "https://github.com/apache/hbase/pull/1392#discussion_r400491517", "bodyText": "Do these links work?", "author": "saintstack", "createdAt": "2020-03-30T21:02:05Z", "path": "dev-support/HOW_TO_YETUS_LOCAL.md", "diffHunk": "@@ -0,0 +1,166 @@\n+# How To Use Apache Yetus with Apache HBase\n+\n+This document describes how to get up and running with [Apache Yetus][yetus],\n+as pertains to development of Apache HBase. Specifically this covers the use\n+of `test-patch`, of which HBase developers make use for tasks related to code\n+quality. These are normally run via automation in the foundation's\n+[Build][builds] infrastructure. They can also be run locally, which is the\n+subject this document.\n+\n+The Yetus project provides it's own documentation of `test-patch` in\n+[Basic PreCommit][yetus-basic-precommit]. By comparison, this document is\n+intended to be highly abbreviated, hands-on, and focused on the HBase use-case.\n+See that document for more complete explanations and further details.\n+\n+## Installation\n+\n+In order to run Yetus, you'll need to first install Yetus and its dependencies.\n+This is somewhat simplified when used in Docker mode. Yetus can be retrieved\n+from a [distribution artifact][yetus-downloads]. Homebrew/Linuxbrew users can", "originalCommit": "ec5dbfa1c6c8189dcdd1b25edd10724a5d34d47b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0OTc3NQ==", "url": "https://github.com/apache/hbase/pull/1392#discussion_r404449775", "bodyText": "Yes they appear to. I'm not sure if this is GH-specific syntax, but click on the \"Rich Diff\" icon (up by the \"viewed\" check box) and you'll see the rendered version of this file.", "author": "ndimiduk", "createdAt": "2020-04-06T23:32:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5MTUxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5MzEwNA==", "url": "https://github.com/apache/hbase/pull/1392#discussion_r400493104", "bodyText": "Change s/way of/way of a/ or pluralize override.", "author": "saintstack", "createdAt": "2020-03-30T21:04:53Z", "path": "dev-support/HOW_TO_YETUS_LOCAL.md", "diffHunk": "@@ -0,0 +1,166 @@\n+# How To Use Apache Yetus with Apache HBase\n+\n+This document describes how to get up and running with [Apache Yetus][yetus],\n+as pertains to development of Apache HBase. Specifically this covers the use\n+of `test-patch`, of which HBase developers make use for tasks related to code\n+quality. These are normally run via automation in the foundation's\n+[Build][builds] infrastructure. They can also be run locally, which is the\n+subject this document.\n+\n+The Yetus project provides it's own documentation of `test-patch` in\n+[Basic PreCommit][yetus-basic-precommit]. By comparison, this document is\n+intended to be highly abbreviated, hands-on, and focused on the HBase use-case.\n+See that document for more complete explanations and further details.\n+\n+## Installation\n+\n+In order to run Yetus, you'll need to first install Yetus and its dependencies.\n+This is somewhat simplified when used in Docker mode. Yetus can be retrieved\n+from a [distribution artifact][yetus-downloads]. Homebrew/Linuxbrew users can\n+install from the tap, the process for which is also described on the downloads\n+page.\n+\n+# Usage Basics\n+\n+Apache Yetus is comprised of a number of different components. The focus of our\n+interest is `test-patch`. `test-patch` is a modular system. Many modules depend\n+on some external tool to provide the underlying functionality. For example, the\n+`compile` check delegates to a number of provider modules, for example `maven`\n+or `gradle` for JVM projects. In order to use these modules, those tools must\n+be installed. Yetus calls these modules \"plugins\".\n+\n+To see a list of all plugins available to `test-patch`, use\n+\n+```shell script\n+$ test-patch --list-plugins\n+```\n+\n+To see a list of all the options available in both the core modules as well as\n+all the plugins, use\n+\n+```shell script\n+$ test-patch --plugins=all --help\n+```\n+\n+An invocation of `test-patch` requires use of one or more plugins. Often times,\n+when the full suite of checks are run, specify the meta-plugin \"all\". Otherwise,\n+a limited selection of plugins can be selected using the `--plugins` argument.\n+\n+## The Workspace, The Patch\n+\n+`test-patch` operates within a \"workspace,\" a checkout from a source control\n+repository. It has a number of options pertaining to this workspace, such as\n+the path to the workspace (`--basedir`) and whether it will permit the presence\n+of uncommitted changes therein (`--dirty-workspace`).\n+\n+Onto this workspace, it can optionally apply a change, a.k.a., the \"patch\" in\n+\"test patch.\" The patch can come from a number of sources, including a patch\n+file, a JIRA ID, a Pull Request, &c. Or, explicitly inform Yetus that no patch\n+file is provided, and the repository should be checked as is, by passing\n+`--empty-patch`.\n+\n+## Personalities\n+\n+`test-patch` is extremely extensible. Even the functionality of its core\n+modules can be extended or overridden. It allows for this type of\n+\"personalization\" by way of \"personality\" override. Yetus ships a number of", "originalCommit": "ec5dbfa1c6c8189dcdd1b25edd10724a5d34d47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5MzYzNQ==", "url": "https://github.com/apache/hbase/pull/1392#discussion_r400493635", "bodyText": "s/as/at/", "author": "saintstack", "createdAt": "2020-03-30T21:05:58Z", "path": "dev-support/HOW_TO_YETUS_LOCAL.md", "diffHunk": "@@ -0,0 +1,166 @@\n+# How To Use Apache Yetus with Apache HBase\n+\n+This document describes how to get up and running with [Apache Yetus][yetus],\n+as pertains to development of Apache HBase. Specifically this covers the use\n+of `test-patch`, of which HBase developers make use for tasks related to code\n+quality. These are normally run via automation in the foundation's\n+[Build][builds] infrastructure. They can also be run locally, which is the\n+subject this document.\n+\n+The Yetus project provides it's own documentation of `test-patch` in\n+[Basic PreCommit][yetus-basic-precommit]. By comparison, this document is\n+intended to be highly abbreviated, hands-on, and focused on the HBase use-case.\n+See that document for more complete explanations and further details.\n+\n+## Installation\n+\n+In order to run Yetus, you'll need to first install Yetus and its dependencies.\n+This is somewhat simplified when used in Docker mode. Yetus can be retrieved\n+from a [distribution artifact][yetus-downloads]. Homebrew/Linuxbrew users can\n+install from the tap, the process for which is also described on the downloads\n+page.\n+\n+# Usage Basics\n+\n+Apache Yetus is comprised of a number of different components. The focus of our\n+interest is `test-patch`. `test-patch` is a modular system. Many modules depend\n+on some external tool to provide the underlying functionality. For example, the\n+`compile` check delegates to a number of provider modules, for example `maven`\n+or `gradle` for JVM projects. In order to use these modules, those tools must\n+be installed. Yetus calls these modules \"plugins\".\n+\n+To see a list of all plugins available to `test-patch`, use\n+\n+```shell script\n+$ test-patch --list-plugins\n+```\n+\n+To see a list of all the options available in both the core modules as well as\n+all the plugins, use\n+\n+```shell script\n+$ test-patch --plugins=all --help\n+```\n+\n+An invocation of `test-patch` requires use of one or more plugins. Often times,\n+when the full suite of checks are run, specify the meta-plugin \"all\". Otherwise,\n+a limited selection of plugins can be selected using the `--plugins` argument.\n+\n+## The Workspace, The Patch\n+\n+`test-patch` operates within a \"workspace,\" a checkout from a source control\n+repository. It has a number of options pertaining to this workspace, such as\n+the path to the workspace (`--basedir`) and whether it will permit the presence\n+of uncommitted changes therein (`--dirty-workspace`).\n+\n+Onto this workspace, it can optionally apply a change, a.k.a., the \"patch\" in\n+\"test patch.\" The patch can come from a number of sources, including a patch\n+file, a JIRA ID, a Pull Request, &c. Or, explicitly inform Yetus that no patch\n+file is provided, and the repository should be checked as is, by passing\n+`--empty-patch`.\n+\n+## Personalities\n+\n+`test-patch` is extremely extensible. Even the functionality of its core\n+modules can be extended or overridden. It allows for this type of\n+\"personalization\" by way of \"personality\" override. Yetus ships a number of\n+these personalities; a pre-packaged personality can be selected via the\n+`--project` parameter. There is a provided HBase personality in Yetus, however\n+the HBase project maintains its own within the HBase source repository. Specify\n+the path to the personality file using `--personality`. The HBase repository\n+places this file under `dev-support/hbase-personality.sh`. \n+\n+## Docker mode\n+\n+Running Yetus in Docker mode simplifies the concerns of dependencies because\n+the provided `Dockerfile` handles their installation automatically. However,\n+for MacOS users, there are a number of known issues with running Docker on OSX,\n+so it may be preferable to instead run outside of the container.\n+\n+To run in Docker, of course you must install `docker` or some container runtime\n+equivalent. [Docker Desktop][docker-desktop] is an option for Mac and Windows\n+users.\n+\n+When running `test-patch` with HBase in docker mode, two parameters must be\n+provided. `--docker` activates the `docker` module, enabling the feature.\n+Additionally, `--dockerfile` points Yetus as HBase's provided `Dockerfile`,", "originalCommit": "ec5dbfa1c6c8189dcdd1b25edd10724a5d34d47b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5NTExMg==", "url": "https://github.com/apache/hbase/pull/1392#discussion_r400495112", "bodyText": "test-patch.sh is in the PATH? That an expectation?", "author": "saintstack", "createdAt": "2020-03-30T21:08:34Z", "path": "dev-support/HOW_TO_YETUS_LOCAL.md", "diffHunk": "@@ -0,0 +1,166 @@\n+# How To Use Apache Yetus with Apache HBase\n+\n+This document describes how to get up and running with [Apache Yetus][yetus],\n+as pertains to development of Apache HBase. Specifically this covers the use\n+of `test-patch`, of which HBase developers make use for tasks related to code\n+quality. These are normally run via automation in the foundation's\n+[Build][builds] infrastructure. They can also be run locally, which is the\n+subject this document.\n+\n+The Yetus project provides it's own documentation of `test-patch` in\n+[Basic PreCommit][yetus-basic-precommit]. By comparison, this document is\n+intended to be highly abbreviated, hands-on, and focused on the HBase use-case.\n+See that document for more complete explanations and further details.\n+\n+## Installation\n+\n+In order to run Yetus, you'll need to first install Yetus and its dependencies.\n+This is somewhat simplified when used in Docker mode. Yetus can be retrieved\n+from a [distribution artifact][yetus-downloads]. Homebrew/Linuxbrew users can\n+install from the tap, the process for which is also described on the downloads\n+page.\n+\n+# Usage Basics\n+\n+Apache Yetus is comprised of a number of different components. The focus of our\n+interest is `test-patch`. `test-patch` is a modular system. Many modules depend\n+on some external tool to provide the underlying functionality. For example, the\n+`compile` check delegates to a number of provider modules, for example `maven`\n+or `gradle` for JVM projects. In order to use these modules, those tools must\n+be installed. Yetus calls these modules \"plugins\".\n+\n+To see a list of all plugins available to `test-patch`, use\n+\n+```shell script\n+$ test-patch --list-plugins\n+```\n+\n+To see a list of all the options available in both the core modules as well as\n+all the plugins, use\n+\n+```shell script\n+$ test-patch --plugins=all --help\n+```\n+\n+An invocation of `test-patch` requires use of one or more plugins. Often times,\n+when the full suite of checks are run, specify the meta-plugin \"all\". Otherwise,\n+a limited selection of plugins can be selected using the `--plugins` argument.\n+\n+## The Workspace, The Patch\n+\n+`test-patch` operates within a \"workspace,\" a checkout from a source control\n+repository. It has a number of options pertaining to this workspace, such as\n+the path to the workspace (`--basedir`) and whether it will permit the presence\n+of uncommitted changes therein (`--dirty-workspace`).\n+\n+Onto this workspace, it can optionally apply a change, a.k.a., the \"patch\" in\n+\"test patch.\" The patch can come from a number of sources, including a patch\n+file, a JIRA ID, a Pull Request, &c. Or, explicitly inform Yetus that no patch\n+file is provided, and the repository should be checked as is, by passing\n+`--empty-patch`.\n+\n+## Personalities\n+\n+`test-patch` is extremely extensible. Even the functionality of its core\n+modules can be extended or overridden. It allows for this type of\n+\"personalization\" by way of \"personality\" override. Yetus ships a number of\n+these personalities; a pre-packaged personality can be selected via the\n+`--project` parameter. There is a provided HBase personality in Yetus, however\n+the HBase project maintains its own within the HBase source repository. Specify\n+the path to the personality file using `--personality`. The HBase repository\n+places this file under `dev-support/hbase-personality.sh`. \n+\n+## Docker mode\n+\n+Running Yetus in Docker mode simplifies the concerns of dependencies because\n+the provided `Dockerfile` handles their installation automatically. However,\n+for MacOS users, there are a number of known issues with running Docker on OSX,\n+so it may be preferable to instead run outside of the container.\n+\n+To run in Docker, of course you must install `docker` or some container runtime\n+equivalent. [Docker Desktop][docker-desktop] is an option for Mac and Windows\n+users.\n+\n+When running `test-patch` with HBase in docker mode, two parameters must be\n+provided. `--docker` activates the `docker` module, enabling the feature.\n+Additionally, `--dockerfile` points Yetus as HBase's provided `Dockerfile`,\n+instead of using the one provided out-of-the-box by Yetus. The HBase repository\n+places this file under `dev-support/docker/Dockerfile`.\n+\n+## JVM and JAVA_HOME\n+\n+HBase supports compilation and test execution on a number of different JVM\n+versions. To facilitate this, the `Dockerfile` installs multiple JVMs. An\n+invocation of `test-patch` requires additional parameters in order to specify\n+the target JVM. How you do this is slightly different based on whether you run\n+with or without Docker mode.\n+\n+### Setting `JAVA_HOME` Outside of Docker Mode\n+\n+Simply specify `JAVA_HOME` in the environment in which `test-patch` is launched.\n+\n+### Setting `JAVA_HOME` Inside of Docker Mode\n+\n+The docker image JDKs are available under `/usr/lib/jvm`. Symlinks are provided\n+for each supported major version, i.e., `java-11`. Use the `test-patch` argument\n+`--java-home`.\n+\n+# Example: Run SpotBugs\n+\n+One of the checks supported by Yetus is the static analysis tool\n+[SpotBugs][spotbugs]. Let's put together all the above and run SpotBugs with\n+`test-patch`.\n+\n+The SpotBugs check depends on a SpotBugs installation. This is provided by the\n+docker file. For running without docker, you'll need to download and unpack the\n+SpotBugs binary distribution.\n+\n+Running the SpotBugs check also depends on [Apache Maven][maven], the build\n+system used by HBase. In order for the check to function, both the `maven`\n+and `spotbugs` plugins must be specified. If this dependency is omitted, Yetus\n+will error with a message similar to\n+\n+```\n+ERROR: you can't specify maven as the buildtool if you don't enable the plugin.\n+```\n+\n+To run just the SpotBugs check, we must explicitly specify `spotbugs` and its\n+dependency using `--plugins=maven,spotbugs`.\n+\n+## Without Docker\n+\n+Putting it all together, without using docker:\n+\n+```shell script\n+$ cd /path/to/hbase\n+$ JAVA_HOME=/path/to/jdk-8 test-patch.sh \\", "originalCommit": "ec5dbfa1c6c8189dcdd1b25edd10724a5d34d47b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUwMzAzNA==", "url": "https://github.com/apache/hbase/pull/1392#discussion_r400503034", "bodyText": "Yeah, the installation section says \"go install this\". Pulling it in from the homebrew tap places test-patch on the PATH.", "author": "ndimiduk", "createdAt": "2020-03-30T21:24:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5NTExMg=="}], "type": "inlineReview"}, {"oid": "abebd150bcc44a53910c2775ca0a8e12aa0bf503", "url": "https://github.com/apache/hbase/commit/abebd150bcc44a53910c2775ca0a8e12aa0bf503", "message": "HBASE-24081 Provide documentation for running Yetus with HBase\n\nSigned-off-by: stack <stack@apache.org>", "committedDate": "2020-04-06T23:34:28Z", "type": "commit"}, {"oid": "abebd150bcc44a53910c2775ca0a8e12aa0bf503", "url": "https://github.com/apache/hbase/commit/abebd150bcc44a53910c2775ca0a8e12aa0bf503", "message": "HBASE-24081 Provide documentation for running Yetus with HBase\n\nSigned-off-by: stack <stack@apache.org>", "committedDate": "2020-04-06T23:34:28Z", "type": "forcePushed"}]}