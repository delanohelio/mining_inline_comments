{"pr_number": 2596, "pr_title": "Backport \"HBASE-24419 Normalizer merge plans should consider more than 2 region\u2026\" to branch-2", "pr_createdAt": "2020-10-29T20:45:06Z", "pr_url": "https://github.com/apache/hbase/pull/2596", "timeline": [{"oid": "63ce3be7c945581eb9c5e20f0c38facc4e0c6ab2", "url": "https://github.com/apache/hbase/commit/63ce3be7c945581eb9c5e20f0c38facc4e0c6ab2", "message": "HBASE-24419 Normalizer merge plans should consider more than 2 regions when possible\n\nThe core change here is to the loop in\n`SimpleRegionNormalizer#computeMergeNormalizationPlans`. It's a nested\nloop that walks the table's region chain once, looking for contiguous\nsequences of regions that meet the criteria for merge. The outer loop\ntracks the starting point of the next sequence, the inner loop looks\nfor the end of that sequence. A single sequence becomes an instance of\n`MergeNormalizationPlan`.\n\nSigned-off-by: Huaxiang Sun <huaxiangsun@apache.org>", "committedDate": "2020-10-29T20:43:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NzAwODE5NA==", "url": "https://github.com/apache/hbase/pull/2596#discussion_r657008194", "bodyText": "I know this is an old PR but can you explain while we skip merging if our average region size is low?\nLet's say min region size is 2GB but my average region size is 750MB then this would not do anything while we'd like to merge.", "author": "lfrancke", "createdAt": "2021-06-23T11:34:25Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SimpleRegionNormalizer.java", "diffHunk": "@@ -315,35 +316,60 @@ private boolean skipForMerge(final RegionStates regionStates, final RegionInfo r\n    * towards target average or target region count.\n    */\n   private List<NormalizationPlan> computeMergeNormalizationPlans(final NormalizeContext ctx) {\n-    if (ctx.getTableRegions().size() < minRegionCount) {\n+    if (isEmpty(ctx.getTableRegions()) || ctx.getTableRegions().size() < minRegionCount) {\n       LOG.debug(\"Table {} has {} regions, required min number of regions for normalizer to run\"\n         + \" is {}, not computing merge plans.\", ctx.getTableName(), ctx.getTableRegions().size(),\n         minRegionCount);\n       return Collections.emptyList();\n     }\n \n-    final double avgRegionSizeMb = ctx.getAverageRegionSizeMb();\n+    final long avgRegionSizeMb = (long) ctx.getAverageRegionSizeMb();\n+    if (avgRegionSizeMb < mergeMinRegionSizeMb) {", "originalCommit": "63ce3be7c945581eb9c5e20f0c38facc4e0c6ab2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NzI2MTgxOA==", "url": "https://github.com/apache/hbase/pull/2596#discussion_r657261818", "bodyText": "I'd have to look back through the original JIRA and PR, but I believe there was a concern that normalizer would merge away the splits made on table creation, between the time when the table was created and when the operator got around to loading it with data. The \"minimum table size\" configuration was designed to prevent this. This behavior pre-dated HBASE-24419 ; the functionality was preserved when this optimization was implemented.\nI personally am not a fan, and prefer the \"minimum table age\" configuration for handling of this concern.", "author": "ndimiduk", "createdAt": "2021-06-23T16:13:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NzAwODE5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1Nzg1Njc3NQ==", "url": "https://github.com/apache/hbase/pull/2596#discussion_r657856775", "bodyText": "Thank you Nick for the prompt response. Much appreciated!\nThis is not really the place for it but I've been working on a backport of the HBase 3 normalizer to an old version over here https://github.com/opencore/hbase-normalizer which includes a few other improvements. The work was triggered because the current Normalizer doesn't consider a minimum size when splitting (unless I'm completely mistaken). For various bad reasons we had tens of thousands of regions with an average size of 7 MB or so. Which means even a 14MB region (twice the average) would be split leading to even more regions etc. so we introduced customizable multipliers and minimum size for splits.\nYour context helps. I hope to have the time to contribute these changes back.", "author": "lfrancke", "createdAt": "2021-06-24T11:19:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NzAwODE5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1ODEwOTI2Ng==", "url": "https://github.com/apache/hbase/pull/2596#discussion_r658109266", "bodyText": "I haven't done a JIRA/git audit recently, but the normalizer on master and branch-2 should be identical. branch-2.4 has most of the big improvements that I'm aware of, including support for rate-limiting.\nBe advised that its settings for merging are still very coarse. I've been using it recently on large tables containing large regions and find that the 2x-off-average is not practical. It needs more tuning and possibly new settings in order to work well in a large ranges of table topologies.\nDepending on how old of an HBase you're targeting, there was a bug where it would always force-merge, which could cause errors in meta. I advise against running normalizer before 2.3.", "author": "ndimiduk", "createdAt": "2021-06-24T16:33:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NzAwODE5NA=="}], "type": "inlineReview"}]}