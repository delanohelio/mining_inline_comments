{"pr_number": 1793, "pr_title": "HBASE-23941 : FilterBy operator support in get_slowlog_responses API", "pr_createdAt": "2020-05-27T20:12:39Z", "pr_url": "https://github.com/apache/hbase/pull/1793", "timeline": [{"oid": "42d5ee966c4b0a3d0bacdc3e2680b5b1ae4625e5", "url": "https://github.com/apache/hbase/commit/42d5ee966c4b0a3d0bacdc3e2680b5b1ae4625e5", "message": "HBASE-23941 : FilterBy operator support in get_slowlog_responses API", "committedDate": "2020-05-27T20:10:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwNDMyOQ==", "url": "https://github.com/apache/hbase/pull/1793#discussion_r432604329", "bodyText": "if (filterCount == 0) {\nreturn ...\n}", "author": "bharathv", "createdAt": "2020-05-29T16:38:20Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogHandlerUtils.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.AdminProtos;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Event Handler utility class\n+ */\n+@InterfaceAudience.Private\n+class LogHandlerUtils {\n+\n+  private static int getTotalFiltersCount(AdminProtos.SlowLogResponseRequest request) {\n+    int totalFilters = 0;\n+    if (StringUtils.isNotEmpty(request.getRegionName())) {\n+      totalFilters++;\n+    }\n+    if (StringUtils.isNotEmpty(request.getTableName())) {\n+      totalFilters++;\n+    }\n+    if (StringUtils.isNotEmpty(request.getClientAddress())) {\n+      totalFilters++;\n+    }\n+    if (StringUtils.isNotEmpty(request.getUserName())) {\n+      totalFilters++;\n+    }\n+    return totalFilters;\n+  }\n+\n+  private static List<TooSlowLog.SlowLogPayload> filterLogs(\n+      AdminProtos.SlowLogResponseRequest request,\n+      List<TooSlowLog.SlowLogPayload> slowLogPayloadList) {\n+    List<TooSlowLog.SlowLogPayload> filteredSlowLogPayloads = new ArrayList<>();\n+    int totalFilters = getTotalFiltersCount(request);", "originalCommit": "42d5ee966c4b0a3d0bacdc3e2680b5b1ae4625e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwNTU2MA==", "url": "https://github.com/apache/hbase/pull/1793#discussion_r432605560", "bodyText": "Apply only the filters that are actually in the request, why check if a filter exists in every iteration?", "author": "bharathv", "createdAt": "2020-05-29T16:40:43Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogHandlerUtils.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.AdminProtos;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Event Handler utility class\n+ */\n+@InterfaceAudience.Private\n+class LogHandlerUtils {\n+\n+  private static int getTotalFiltersCount(AdminProtos.SlowLogResponseRequest request) {\n+    int totalFilters = 0;\n+    if (StringUtils.isNotEmpty(request.getRegionName())) {\n+      totalFilters++;\n+    }\n+    if (StringUtils.isNotEmpty(request.getTableName())) {\n+      totalFilters++;\n+    }\n+    if (StringUtils.isNotEmpty(request.getClientAddress())) {\n+      totalFilters++;\n+    }\n+    if (StringUtils.isNotEmpty(request.getUserName())) {\n+      totalFilters++;\n+    }\n+    return totalFilters;\n+  }\n+\n+  private static List<TooSlowLog.SlowLogPayload> filterLogs(\n+      AdminProtos.SlowLogResponseRequest request,\n+      List<TooSlowLog.SlowLogPayload> slowLogPayloadList) {\n+    List<TooSlowLog.SlowLogPayload> filteredSlowLogPayloads = new ArrayList<>();\n+    int totalFilters = getTotalFiltersCount(request);\n+    for (TooSlowLog.SlowLogPayload slowLogPayload : slowLogPayloadList) {\n+      int totalFilterMatches = 0;\n+      if (StringUtils.isNotEmpty(request.getRegionName())) {", "originalCommit": "42d5ee966c4b0a3d0bacdc3e2680b5b1ae4625e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwNjY0MQ==", "url": "https://github.com/apache/hbase/pull/1793#discussion_r432606641", "bodyText": "no need for this if you implement the above logic I suggested..", "author": "bharathv", "createdAt": "2020-05-29T16:42:45Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogHandlerUtils.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.AdminProtos;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Event Handler utility class\n+ */\n+@InterfaceAudience.Private\n+class LogHandlerUtils {\n+\n+  private static int getTotalFiltersCount(AdminProtos.SlowLogResponseRequest request) {\n+    int totalFilters = 0;\n+    if (StringUtils.isNotEmpty(request.getRegionName())) {\n+      totalFilters++;\n+    }\n+    if (StringUtils.isNotEmpty(request.getTableName())) {\n+      totalFilters++;\n+    }\n+    if (StringUtils.isNotEmpty(request.getClientAddress())) {\n+      totalFilters++;\n+    }\n+    if (StringUtils.isNotEmpty(request.getUserName())) {\n+      totalFilters++;\n+    }\n+    return totalFilters;\n+  }\n+\n+  private static List<TooSlowLog.SlowLogPayload> filterLogs(\n+      AdminProtos.SlowLogResponseRequest request,\n+      List<TooSlowLog.SlowLogPayload> slowLogPayloadList) {\n+    List<TooSlowLog.SlowLogPayload> filteredSlowLogPayloads = new ArrayList<>();\n+    int totalFilters = getTotalFiltersCount(request);\n+    for (TooSlowLog.SlowLogPayload slowLogPayload : slowLogPayloadList) {\n+      int totalFilterMatches = 0;\n+      if (StringUtils.isNotEmpty(request.getRegionName())) {\n+        if (slowLogPayload.getRegionName().equals(request.getRegionName())) {\n+          totalFilterMatches++;\n+        }\n+      }\n+      if (StringUtils.isNotEmpty(request.getTableName())) {\n+        if (slowLogPayload.getRegionName().startsWith(request.getTableName())) {\n+          totalFilterMatches++;\n+        }\n+      }\n+      if (StringUtils.isNotEmpty(request.getClientAddress())) {\n+        if (slowLogPayload.getClientAddress().equals(request.getClientAddress())) {\n+          totalFilterMatches++;\n+        }\n+      }\n+      if (StringUtils.isNotEmpty(request.getUserName())) {\n+        if (slowLogPayload.getUserName().equals(request.getUserName())) {\n+          totalFilterMatches++;\n+        }\n+      }\n+      if (request.hasFilterByOperator() && request.getFilterByOperator()\n+        .equals(AdminProtos.SlowLogResponseRequest.FilterByOperator.AND)) {\n+        // Filter by AND operator\n+        if (totalFilterMatches == totalFilters) {\n+          filteredSlowLogPayloads.add(slowLogPayload);\n+        }\n+      } else {\n+        // Filter by OR operator\n+        if (totalFilterMatches > 0) {\n+          filteredSlowLogPayloads.add(slowLogPayload);\n+        }\n+      }\n+    }\n+    return filteredSlowLogPayloads;\n+  }\n+\n+  static List<TooSlowLog.SlowLogPayload> getFilteredLogs(\n+      AdminProtos.SlowLogResponseRequest request, List<TooSlowLog.SlowLogPayload> logPayloadList) {\n+    if (isFilterProvided(request)) {", "originalCommit": "42d5ee966c4b0a3d0bacdc3e2680b5b1ae4625e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwNjcyMg==", "url": "https://github.com/apache/hbase/pull/1793#discussion_r432606722", "bodyText": "and you can remove this..", "author": "bharathv", "createdAt": "2020-05-29T16:42:53Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogHandlerUtils.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.AdminProtos;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Event Handler utility class\n+ */\n+@InterfaceAudience.Private\n+class LogHandlerUtils {\n+\n+  private static int getTotalFiltersCount(AdminProtos.SlowLogResponseRequest request) {\n+    int totalFilters = 0;\n+    if (StringUtils.isNotEmpty(request.getRegionName())) {\n+      totalFilters++;\n+    }\n+    if (StringUtils.isNotEmpty(request.getTableName())) {\n+      totalFilters++;\n+    }\n+    if (StringUtils.isNotEmpty(request.getClientAddress())) {\n+      totalFilters++;\n+    }\n+    if (StringUtils.isNotEmpty(request.getUserName())) {\n+      totalFilters++;\n+    }\n+    return totalFilters;\n+  }\n+\n+  private static List<TooSlowLog.SlowLogPayload> filterLogs(\n+      AdminProtos.SlowLogResponseRequest request,\n+      List<TooSlowLog.SlowLogPayload> slowLogPayloadList) {\n+    List<TooSlowLog.SlowLogPayload> filteredSlowLogPayloads = new ArrayList<>();\n+    int totalFilters = getTotalFiltersCount(request);\n+    for (TooSlowLog.SlowLogPayload slowLogPayload : slowLogPayloadList) {\n+      int totalFilterMatches = 0;\n+      if (StringUtils.isNotEmpty(request.getRegionName())) {\n+        if (slowLogPayload.getRegionName().equals(request.getRegionName())) {\n+          totalFilterMatches++;\n+        }\n+      }\n+      if (StringUtils.isNotEmpty(request.getTableName())) {\n+        if (slowLogPayload.getRegionName().startsWith(request.getTableName())) {\n+          totalFilterMatches++;\n+        }\n+      }\n+      if (StringUtils.isNotEmpty(request.getClientAddress())) {\n+        if (slowLogPayload.getClientAddress().equals(request.getClientAddress())) {\n+          totalFilterMatches++;\n+        }\n+      }\n+      if (StringUtils.isNotEmpty(request.getUserName())) {\n+        if (slowLogPayload.getUserName().equals(request.getUserName())) {\n+          totalFilterMatches++;\n+        }\n+      }\n+      if (request.hasFilterByOperator() && request.getFilterByOperator()\n+        .equals(AdminProtos.SlowLogResponseRequest.FilterByOperator.AND)) {\n+        // Filter by AND operator\n+        if (totalFilterMatches == totalFilters) {\n+          filteredSlowLogPayloads.add(slowLogPayload);\n+        }\n+      } else {\n+        // Filter by OR operator\n+        if (totalFilterMatches > 0) {\n+          filteredSlowLogPayloads.add(slowLogPayload);\n+        }\n+      }\n+    }\n+    return filteredSlowLogPayloads;\n+  }\n+\n+  static List<TooSlowLog.SlowLogPayload> getFilteredLogs(\n+      AdminProtos.SlowLogResponseRequest request, List<TooSlowLog.SlowLogPayload> logPayloadList) {\n+    if (isFilterProvided(request)) {\n+      logPayloadList = filterLogs(request, logPayloadList);\n+    }\n+    int limit = Math.min(request.getLimit(), logPayloadList.size());\n+    return logPayloadList.subList(0, limit);\n+  }\n+\n+  private static boolean isFilterProvided(AdminProtos.SlowLogResponseRequest request) {", "originalCommit": "42d5ee966c4b0a3d0bacdc3e2680b5b1ae4625e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "67823ff42d21efb36f8860b3f016b09bc98c72eb", "url": "https://github.com/apache/hbase/commit/67823ff42d21efb36f8860b3f016b09bc98c72eb", "message": "address review", "committedDate": "2020-05-29T18:09:11Z", "type": "commit"}]}