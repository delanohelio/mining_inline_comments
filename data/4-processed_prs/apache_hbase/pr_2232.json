{"pr_number": 2232, "pr_title": "HBASE-24806 Small Updates to Functionality of Shell IRB Workspace", "pr_createdAt": "2020-08-10T14:56:57Z", "pr_url": "https://github.com/apache/hbase/pull/2232", "timeline": [{"oid": "ba7c57ec936731563392d7fcf9008c72fa3a15e0", "url": "https://github.com/apache/hbase/commit/ba7c57ec936731563392d7fcf9008c72fa3a15e0", "message": "HBASE-24806 Small Updates to Functionality of Shell IRB Workspace\n\n- Move exception handler from Shell::Shell#eval_io to new method,\n  Shell::Shell#exception_handler\n- Add unit tests for Shell::Shell#exception_handler\n- Change Shell::Shell#eval_io to no longer raise SystemExit when any error is\n  seen and update unit test\n- Update ruby test runner to catch SystemExit and fail to avoid tests that\n  cause the test runner to incorrectly exit successfully\n- Add Hbase::Loader module to find ruby scripts in the $LOAD_PATH and classpath\n  using JRuby's loader.\n- In hbase-shell, install IRB commands before exporting HBase commands. The\n  HBase commands will override the IRB commands, and no warning will be\n  printed.", "committedDate": "2020-08-10T14:44:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA0MDY1OQ==", "url": "https://github.com/apache/hbase/pull/2232#discussion_r468040659", "bodyText": "Control flow returns to this line after a raise ? raise is an expression in this language..?", "author": "ndimiduk", "createdAt": "2020-08-10T16:47:21Z", "path": "hbase-shell/src/main/ruby/shell.rb", "diffHunk": "@@ -335,12 +348,9 @@ def eval_io(io)\n         # Include the 'ERROR' string to try to make transition easier for scripts that\n         # may have already been relying on grepping output.\n         puts \"ERROR #{e.class}: #{message}\"\n-        if $fullBacktrace\n-          # re-raising the will include a backtrace and exit.\n-          raise e\n-        else\n-          exit 1\n-        end\n+        raise e unless hide_traceback\n+\n+        exit 1", "originalCommit": "ba7c57ec936731563392d7fcf9008c72fa3a15e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2MTI2Mw==", "url": "https://github.com/apache/hbase/pull/2232#discussion_r468061263", "bodyText": "Ruby allows one-line conditionals such as <statement> if <condition>, which is equivalent to if <condition>; <statement>; end. It's a fun feature of Ruby \ud83d\ude04.\nSo, this logic will raise SystemExit (via exit 1) if we want to hide the traceback.", "author": "bitoffdev", "createdAt": "2020-08-10T17:24:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA0MDY1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2NjQ1Ng==", "url": "https://github.com/apache/hbase/pull/2232#discussion_r468066456", "bodyText": "I also added unit tests that cover/verify this.", "author": "bitoffdev", "createdAt": "2020-08-10T17:33:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA0MDY1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA0MTI2OA==", "url": "https://github.com/apache/hbase/pull/2232#discussion_r468041268", "bodyText": "this propagates source files and line numbers for the purpose of error handling? nice!", "author": "ndimiduk", "createdAt": "2020-08-10T16:48:27Z", "path": "hbase-shell/src/main/ruby/shell.rb", "diffHunk": "@@ -320,10 +323,20 @@ def eval_io(io)\n       scanner = RubyLex.new\n       scanner.set_input(io)\n \n+      scanner.each_top_level_statement do |statement, linenum|\n+        puts(workspace.evaluate(nil, statement, filename, linenum))", "originalCommit": "ba7c57ec936731563392d7fcf9008c72fa3a15e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2ODQyOQ==", "url": "https://github.com/apache/hbase/pull/2232#discussion_r468068429", "bodyText": "Yup! Credit to @busbey for figuring this out in HBASE-11658 (this code used to exist in bin/hirb.rb).", "author": "bitoffdev", "createdAt": "2020-08-10T17:37:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA0MTI2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA0MjM1Nw==", "url": "https://github.com/apache/hbase/pull/2232#discussion_r468042357", "bodyText": "why do you both define a variable hide_traceback = true and also pass true to the exception_handler -- it's redundant?", "author": "ndimiduk", "createdAt": "2020-08-10T16:50:21Z", "path": "hbase-shell/src/test/ruby/shell/shell_test.rb", "diffHunk": "@@ -123,14 +124,35 @@ class FooC; end\n \n     # check that at least one of the HBase constants is present while evaluating\n     io = StringIO.new <<~EOF\n-      ROWPREFIXFILTER\n+      ROWPREFIXFILTER.dump\n     EOF\n     output = capture_stdout { @shell.eval_io(io) }\n     assert_match(/\"ROWPREFIXFILTER\"/, output)\n   end\n \n   #-----------------------------------------------------------------------------\n \n+  define_test 'Shell::Shell#exception_handler should hide traceback' do\n+    class TestException < RuntimeError; end\n+    hide_traceback = true", "originalCommit": "ba7c57ec936731563392d7fcf9008c72fa3a15e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2NTU1Mw==", "url": "https://github.com/apache/hbase/pull/2232#discussion_r468065553", "bodyText": "Agreed. I removed the unused variables.", "author": "bitoffdev", "createdAt": "2020-08-10T17:31:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA0MjM1Nw=="}], "type": "inlineReview"}, {"oid": "4323aae535e3a273338095157893a21c2d1d2112", "url": "https://github.com/apache/hbase/commit/4323aae535e3a273338095157893a21c2d1d2112", "message": "Remove unused variables from shell_test", "committedDate": "2020-08-10T17:19:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkxNjQ2Ng==", "url": "https://github.com/apache/hbase/pull/2232#discussion_r471916466", "bodyText": "Whats going on here? We are skipping output of the exception stack trace?", "author": "saintstack", "createdAt": "2020-08-18T05:06:28Z", "path": "hbase-shell/src/main/ruby/shell.rb", "diffHunk": "@@ -320,10 +323,20 @@ def eval_io(io)\n       scanner = RubyLex.new\n       scanner.set_input(io)\n \n+      scanner.each_top_level_statement do |statement, linenum|\n+        puts(workspace.evaluate(nil, statement, filename, linenum))\n+      end\n+      nil\n+    end\n+\n+    ##\n+    # Runs a block and logs exception from both Ruby and Java, optionally discarding the traceback\n+    #\n+    # @param [Boolean] hide_traceback if true, Exceptions will be converted to\n+    #   a SystemExit so that the traceback is not printed\n+    def self.exception_handler(hide_traceback)\n       begin\n-        scanner.each_top_level_statement do |statement, linenum|\n-          puts(workspace.evaluate(nil, statement, 'stdin', linenum))\n-        end\n+        yield", "originalCommit": "4323aae535e3a273338095157893a21c2d1d2112", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkxNjcwMg==", "url": "https://github.com/apache/hbase/pull/2232#discussion_r471916702", "bodyText": "We need this begin/rescue w/ a yield in the middle of it?", "author": "saintstack", "createdAt": "2020-08-18T05:07:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkxNjQ2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE4MDAyNg==", "url": "https://github.com/apache/hbase/pull/2232#discussion_r472180026", "bodyText": "The yield ensures that whatever block is passed to exception_handler is executed within our begin/rescue, which is how we are able to catch and translate exceptions to a SystemExit to avoid printing the full traceback.", "author": "bitoffdev", "createdAt": "2020-08-18T13:12:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkxNjQ2Ng=="}], "type": "inlineReview"}]}