{"pr_number": 571, "pr_title": "DPC-954: Refactoring of API integration and related web app modeling", "pr_createdAt": "2020-01-29T19:27:00Z", "pr_url": "https://github.com/CMSgov/dpc-app/pull/571", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MzgxMQ==", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372593811", "bodyText": "Annotation keywords like TODO should be all upper case, followed by a colon, and a space, then a note describing the problem.", "author": "codeclimate", "createdAt": "2020-01-29T19:45:40Z", "path": "dpc-web/app/models/organization.rb", "diffHunk": "@@ -3,23 +3,22 @@\n class Organization < ApplicationRecord\n   include OrganizationTypable\n \n-  has_one :address, as: :addressable\n+  has_one :address, as: :addressable, dependent: :destroy\n   has_many :organization_user_assignments, dependent: :destroy\n   has_many :users, through: :organization_user_assignments\n-  has_many :fhir_endpoints\n-  has_many :registered_organizations\n+  has_many :registered_organizations, dependent: :destroy\n \n   enum organization_type: ORGANIZATION_TYPES\n \n   validates :organization_type, inclusion: { in: ORGANIZATION_TYPES.keys }\n   validates :name, uniqueness: true, presence: true\n-  validate :api_environments_allowed\n   validates :npi, uniqueness: { allow_blank: true }\n \n   delegate :street, :street_2, :city, :state, :zip, to: :address, allow_nil: true, prefix: true\n-  accepts_nested_attributes_for :address, :fhir_endpoints, reject_if: :all_blank\n+  accepts_nested_attributes_for :address, reject_if: :all_blank\n \n-  after_save :update_registered_organizations\n+  # TODO update this", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MzgxNQ==", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372593815", "bodyText": "Use the return of the conditional for variable assignment and comparison.", "author": "codeclimate", "createdAt": "2020-01-29T19:45:40Z", "path": "dpc-web/app/services/api_client.rb", "diffHunk": "@@ -143,7 +143,11 @@ def http_request(request, uri)\n \n     response = http.request(request)\n     @response_status = response.code.to_i\n-    @response_body = parsed_response(response)\n+    if response_successful?", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MzgyMQ==", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372593821", "bodyText": "Do not use space inside array brackets.", "author": "codeclimate", "createdAt": "2020-01-29T19:45:41Z", "path": "dpc-web/app/serializers/organization_submit_serializer.rb", "diffHunk": "@@ -63,14 +63,14 @@ def address\n   end\n \n   def endpoint_resources\n-    object.fhir_endpoints.map { |fhir_endpoint| endpoint_resource(fhir_endpoint) }\n+    [ endpoint_resource(instance_options[:fhir_endpoint]) ]", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MzgyNA==", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372593824", "bodyText": "Do not use space inside array brackets.", "author": "codeclimate", "createdAt": "2020-01-29T19:45:41Z", "path": "dpc-web/app/serializers/organization_submit_serializer.rb", "diffHunk": "@@ -63,14 +63,14 @@ def address\n   end\n \n   def endpoint_resources\n-    object.fhir_endpoints.map { |fhir_endpoint| endpoint_resource(fhir_endpoint) }\n+    [ endpoint_resource(instance_options[:fhir_endpoint]) ]", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3MzI2Mw==", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372773263", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "author": "codeclimate", "createdAt": "2020-01-30T06:08:07Z", "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,85 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id'],\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']\n+      api_response\n+    else\n+      errors.add(:base, \"couldn't be registered with #{api_env} API: #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_organization", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3MzI2NQ==", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372773265", "bodyText": "Similar blocks of code found in 2 locations. Consider refactoring.", "author": "codeclimate", "createdAt": "2020-01-30T06:08:07Z", "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,85 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id'],\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']\n+      api_response\n+    else\n+      errors.add(:base, \"couldn't be registered with #{api_env} API: #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_organization\n+    api_request = APIClient.new(api_env).update_organization(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?\n+      errors.add(:base, \"couldn't be registered with #{api_env} API (organization update): #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_endpoint", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3MzI2Ng==", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372773266", "bodyText": "Align the elements of an array literal if they span more than one line.", "author": "codeclimate", "createdAt": "2020-01-30T06:08:07Z", "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,85 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id'],\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3MzI2Nw==", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372773267", "bodyText": "Use a guard clause instead of wrapping the code inside a conditional expression.", "author": "codeclimate", "createdAt": "2020-01-30T06:08:08Z", "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,85 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id'],\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']\n+      api_response\n+    else\n+      errors.add(:base, \"couldn't be registered with #{api_env} API: #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_organization\n+    api_request = APIClient.new(api_env).update_organization(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3MzI2OQ==", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r372773269", "bodyText": "Use a guard clause instead of wrapping the code inside a conditional expression.", "author": "codeclimate", "createdAt": "2020-01-30T06:08:08Z", "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,85 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id'],\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']\n+      api_response\n+    else\n+      errors.add(:base, \"couldn't be registered with #{api_env} API: #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_organization\n+    api_request = APIClient.new(api_env).update_organization(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?\n+      errors.add(:base, \"couldn't be registered with #{api_env} API (organization update): #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_endpoint\n+    api_request = APIClient.new(api_env).update_endpoint(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyODY1MA==", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373228650", "bodyText": "Similar blocks of code found in 3 locations. Consider refactoring.", "author": "codeclimate", "createdAt": "2020-01-30T22:29:23Z", "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,97 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+  before_destroy :delete_api_organization\n+  # TODO do we need to delete api endpoint too?\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id']\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']\n+      api_response\n+    else\n+      errors.add(:base, \"couldn't be registered with #{api_env} API: #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_organization", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5NzE2Mg==", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373497162", "bodyText": "Ignoring. There are enough differences. DRYing up the code would make it harder to understand.", "author": "switzersc-usds", "createdAt": "2020-01-31T14:10:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyODY1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyODY1NA==", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373228654", "bodyText": "Similar blocks of code found in 3 locations. Consider refactoring.", "author": "codeclimate", "createdAt": "2020-01-30T22:29:23Z", "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,97 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+  before_destroy :delete_api_organization\n+  # TODO do we need to delete api endpoint too?\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id']\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']\n+      api_response\n+    else\n+      errors.add(:base, \"couldn't be registered with #{api_env} API: #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_organization\n+    api_request = APIClient.new(api_env).update_organization(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?\n+      errors.add(:base, \"couldn't be updated with #{api_env} API (organization update): #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_endpoint", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyODY1Nw==", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373228657", "bodyText": "Similar blocks of code found in 3 locations. Consider refactoring.", "author": "codeclimate", "createdAt": "2020-01-30T22:29:23Z", "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,97 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+  before_destroy :delete_api_organization\n+  # TODO do we need to delete api endpoint too?\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id']\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']\n+      api_response\n+    else\n+      errors.add(:base, \"couldn't be registered with #{api_env} API: #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_organization\n+    api_request = APIClient.new(api_env).update_organization(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?\n+      errors.add(:base, \"couldn't be updated with #{api_env} API (organization update): #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_endpoint\n+    api_request = APIClient.new(api_env).update_endpoint(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?\n+      errors.add(:base, \"couldn't be updated with #{api_env} API (endpoint update): #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def delete_api_organization", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyODY1OQ==", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373228659", "bodyText": "Annotation keywords like TODO should be all upper case, followed by a colon, and a space, then a note describing the problem.", "author": "codeclimate", "createdAt": "2020-01-30T22:29:24Z", "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,97 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+  before_destroy :delete_api_organization\n+  # TODO do we need to delete api endpoint too?", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyODY2MQ==", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373228661", "bodyText": "Use a guard clause instead of wrapping the code inside a conditional expression.", "author": "codeclimate", "createdAt": "2020-01-30T22:29:24Z", "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,97 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+  before_destroy :delete_api_organization\n+  # TODO do we need to delete api endpoint too?\n+\n+  delegate :name, :status, :uri, to: :fhir_endpoint, allow_nil: true, prefix: true\n+\n+  accepts_nested_attributes_for :fhir_endpoint\n \n   enum api_env: {\n     'sandbox' => 0,\n     'production' => 1\n   }\n \n-  validates :api_id, :api_env, :organization, presence: true\n+  validates :api_env, :organization, presence: true\n+\n+  def fhir_endpoint_id\n+    return unless api_endpoint_ref\n+\n+    api_endpoint_ref.split('/')[1]\n+  end\n \n   def client_tokens\n-    ClientTokenManager.new(api_env: api_env, organization: organization).client_tokens\n+    ClientTokenManager.new(api_env: api_env, registered_organization: self).client_tokens\n   end\n \n   def public_keys\n-    PublicKeyManager.new(api_env: api_env, organization: organization).public_keys\n+    PublicKeyManager.new(api_env: api_env, registered_organization: self).public_keys\n+  end\n+\n+  def create_api_organization\n+    api_request = APIClient.new(api_env).create_organization(\n+      organization,\n+      fhir_endpoint: fhir_endpoint.attributes.slice('name', 'status', 'uri')\n+    )\n+\n+    api_response = api_request.response_body\n+\n+    if api_request.response_successful?\n+      self[:api_id] = api_response['id']\n+      self[:api_endpoint_ref] = api_response['endpoint'][0]['reference']\n+      api_response\n+    else\n+      errors.add(:base, \"couldn't be registered with #{api_env} API: #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_organization\n+    api_request = APIClient.new(api_env).update_organization(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?\n+      errors.add(:base, \"couldn't be updated with #{api_env} API (organization update): #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def update_api_endpoint\n+    api_request = APIClient.new(api_env).update_endpoint(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?\n+      errors.add(:base, \"couldn't be updated with #{api_env} API (endpoint update): #{api_response}\")\n+      throw(:abort)\n+    end\n+  end\n+\n+  def delete_api_organization\n+    api_request = APIClient.new(api_env).delete_organization(self)\n+    api_response = api_request.response_body\n+\n+    unless api_request.response_successful?", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUwOTU2Mw==", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373509563", "bodyText": "Extra empty line detected before the rescue.", "author": "codeclimate", "createdAt": "2020-01-31T14:35:16Z", "path": "dpc-web/app/services/api_client.rb", "diffHunk": "@@ -143,25 +148,18 @@ def http_request(request, uri)\n \n     response = http.request(request)\n     @response_status = response.code.to_i\n-    @response_body = parsed_response(response)\n+    @response_body = response_successful? ? parsed_response(response) : response.body\n+", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyMTQ1Ng==", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373521456", "bodyText": "@nickrobison-usds Does the API delete an org's endpoint when the org is deleted, or do we need to make an API call to do that from the web app?", "author": "switzersc-usds", "createdAt": "2020-01-31T14:57:29Z", "path": "dpc-web/app/models/registered_organization.rb", "diffHunk": "@@ -2,19 +2,95 @@\n \n class RegisteredOrganization < ApplicationRecord\n   belongs_to :organization\n+  has_one :fhir_endpoint, dependent: :destroy\n+\n+  before_create :create_api_organization\n+  after_create :notify_users_of_sandbox_access, if: :sandbox?\n+  before_update :update_api_organization\n+  before_update :update_api_endpoint\n+  before_destroy :delete_api_organization\n+  # TODO: do we need to delete api endpoint too?", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxNjkzNA==", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373616934", "bodyText": "Deleting an org removes all of its dependent resources (e.g. Providers, Patients, Endpoints, etc).", "author": "nickrobison-usds", "createdAt": "2020-01-31T18:19:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyMTQ1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyMjU0Mg==", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373522542", "bodyText": "To discuss: What kind of data cleanup in sandbox should we do? Should we write a data migration to move FHIR Endpoints to belong to the registered_organization instead of the organization_id?", "author": "switzersc-usds", "createdAt": "2020-01-31T14:59:18Z", "path": "dpc-web/db/migrate/20200124204655_drop_index_from_fhir_endpoints.rb", "diffHunk": "@@ -0,0 +1,6 @@\n+class DropIndexFromFhirEndpoints < ActiveRecord::Migration[5.2]\n+  def change\n+    change_column_null :fhir_endpoints, :organization_id, true\n+    remove_index :fhir_endpoints, :organization_id", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyNjU3NQ==", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373626575", "bodyText": "Discussed synchronously: Because this is pretty instantaneous, small, and low-cost, let's do that data migration. Let's do this in two separate PRs.", "author": "switzersc-usds", "createdAt": "2020-01-31T18:41:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyMjU0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyMjg2MQ==", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373522861", "bodyText": "Should we go ahead and also remove the api_environments column from organizations now that we don't use it?", "author": "switzersc-usds", "createdAt": "2020-01-31T14:59:51Z", "path": "dpc-web/db/migrate/20200127141604_change_null_api_id_for_registered_organizations.rb", "diffHunk": "@@ -0,0 +1,5 @@\n+class ChangeNullApiIdForRegisteredOrganizations < ActiveRecord::Migration[5.2]\n+  def change\n+    change_column_null :registered_organizations, :api_id, true", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyNjY4Mw==", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373626683", "bodyText": "Did this.", "author": "switzersc-usds", "createdAt": "2020-01-31T18:42:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyMjg2MQ=="}], "type": "inlineReview"}, {"oid": "59cd484262a62744d0a191ba900fd6333ce60eb8", "url": "https://github.com/CMSgov/dpc-app/commit/59cd484262a62744d0a191ba900fd6333ce60eb8", "message": "WIP initial work refactoring registered orgs", "committedDate": "2020-01-31T17:52:09Z", "type": "commit"}, {"oid": "c5157f16d5a9168e994e1d44514e02dbb0c0dff1", "url": "https://github.com/CMSgov/dpc-app/commit/c5157f16d5a9168e994e1d44514e02dbb0c0dff1", "message": "Flesh out views and workflow for registered orgs\n\n* Make a separate page for editing a registered org and its fhir\n  endpoint, to simplify showing error messages\n* Use a callback to create org in API before the registered org gets\n  saved on the Rails side\n* Remove not-null contraint for organization_id on fhir_endpoints -\n  will remove this column altogether after data cleanup", "committedDate": "2020-01-31T17:52:09Z", "type": "commit"}, {"oid": "a4a2f3b0fc32262ad6827b5e06b6a322d06c06db", "url": "https://github.com/CMSgov/dpc-app/commit/a4a2f3b0fc32262ad6827b5e06b6a322d06c06db", "message": "Refactor RegisteredOrganization logic, Part 1\n\n* Move sandbox email notification to happen if API org creation has been\n  successful in RegisteredOrganization model. This doesn\u2019t feel quite\n  right but it\u2019s the best place to do it right now.\n* Set a RegisteredOrganization\u2019s api_id from the API request *after*\n  creation, not before. This simplifies the flow, even though\n* Surface API errors to the user if the API org can\u2019t be created. Then\n  the user can retry from the edit page\n* Make prod API access a feature flag (with an env var) so we can flip\n  this on more easily when we\u2019re ready\n* Stop using OrganizationRegistrar for api org creation and just make\n  API syncing logic that belongs to the RegisteredOrganization model;\n  this simplifies things for now\n* FhirEndpoint now belongs to RegisteredOrganization and tests/logic is\n  up to date for that. We may need a data migration before we remove the\n  organization_id column from the fhir_endpoints table\n* Do not JSON parse error response from API because it is sometimes not\n  JSON\n* Add more tests, although some are still pending part 2 of the refactor", "committedDate": "2020-01-31T17:52:09Z", "type": "commit"}, {"oid": "37976b2148b8a496aaabd853da0bf4ad11f9c9db", "url": "https://github.com/CMSgov/dpc-app/commit/37976b2148b8a496aaabd853da0bf4ad11f9c9db", "message": "WIP Refactor RegisteredOrganization Part 2", "committedDate": "2020-01-31T17:52:09Z", "type": "commit"}, {"oid": "4e7f042fce2cfb075f931324f61015c057849849", "url": "https://github.com/CMSgov/dpc-app/commit/4e7f042fce2cfb075f931324f61015c057849849", "message": "Update tests for refactor work", "committedDate": "2020-01-31T17:52:09Z", "type": "commit"}, {"oid": "1d0da901c35eee3aabb8da27d6aa6e559a5e89f3", "url": "https://github.com/CMSgov/dpc-app/commit/1d0da901c35eee3aabb8da27d6aa6e559a5e89f3", "message": "delete method and delete test", "committedDate": "2020-01-31T17:52:09Z", "type": "commit"}, {"oid": "ca502e771fcdd59ae7790899f8db519c558f27b8", "url": "https://github.com/CMSgov/dpc-app/commit/ca502e771fcdd59ae7790899f8db519c558f27b8", "message": "Add disable API functionality\n\n* Adds link on org page to disable sandbox (or prod) access\n* Delete corresponding API organization from API as callback on\n  RegisteredOrganization", "committedDate": "2020-01-31T17:52:09Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "1e932d20ddd512764874b372e8c3d54c76ebd9de", "url": "https://github.com/CMSgov/dpc-app/commit/1e932d20ddd512764874b372e8c3d54c76ebd9de", "message": "Remove no longer needed column from orgs", "committedDate": "2020-01-31T17:56:46Z", "type": "commit"}, {"oid": "1e932d20ddd512764874b372e8c3d54c76ebd9de", "url": "https://github.com/CMSgov/dpc-app/commit/1e932d20ddd512764874b372e8c3d54c76ebd9de", "message": "Remove no longer needed column from orgs", "committedDate": "2020-01-31T17:56:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyMzc2MQ==", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373623761", "bodyText": "move this to next section (only show if prod has been enabled for this org)", "author": "switzersc-usds", "createdAt": "2020-01-31T18:35:33Z", "path": "dpc-web/app/views/internal/organizations/show.html.erb", "diffHunk": "@@ -94,17 +94,76 @@\n \n <section class=\"box\">\n     <div class=\"box__content\">\n-      <h2 class=\"box__heading\">FHIR Endpoint</h2>\n-      <% @organization.fhir_endpoints.each do |fhir_endpoint| %>\n+      <h2 class=\"box__heading\">Enabled Environments</h2>\n+\n+      <h3>Sandbox</h3>\n+      <% if @organization.sandbox_enabled? %>\n+        <div class=\"ds-u-margin-bottom--1\">\n+          API ID: <%= @organization.sandbox_registered_organization.api_id %>\n+        </div>\n+        <h4>FHIR Endpoint</h4>\n+        <div class=\"ds-u-margin-bottom--1\">\n+          API Reference: <%= @organization.sandbox_registered_organization.api_endpoint_ref %>\n+        </div>\n         <div class=\"ds-u-margin-bottom--1\">\n-          Name: <%= fhir_endpoint.name %>\n+          Name: <%= @organization.sandbox_fhir_endpoint.name %>\n         </div>\n         <div class=\"ds-u-margin-bottom--1\">\n-          URI: <%= fhir_endpoint.uri %>\n+          URI: <%= @organization.sandbox_fhir_endpoint.uri %>\n         </div>\n         <div class=\"ds-u-margin-bottom--1\">\n-          Status: <%= fhir_endpoint.status.titleize %>\n+          Status: <%= @organization.sandbox_fhir_endpoint.status.titleize %>\n         </div>\n+\n+        <%= link_to \"Edit\", edit_internal_organization_registered_organization_path(\n+          organization_id: @organization.id,\n+          id: @organization.sandbox_registered_organization.id,\n+          api_env: 'sandbox'\n+          ) %>\n+        <%= link_to \"Disable Sandbox\", internal_organization_registered_organization_path(\n+          organization_id: @organization.id,\n+          id: @organization.sandbox_registered_organization.id,\n+          ), method: :delete, data: { test: 'disable-sandbox' } %>\n+      <% else %>\n+        <%= link_to 'Enable Sandbox',\n+                    new_internal_organization_registered_organization_path(organization_id: @organization.id, api_env: 'sandbox'),\n+                    data: { test: 'enable-sandbox' } %>\n+      <% end %>\n+\n+      <h3>Production</h3>\n+      <% if production_api_access_enabled? %>\n+        <div class=\"ds-u-margin-bottom--1\">\n+          API ID: <%= @organization.production_registered_organization.api_id %>\n+        </div>", "originalCommit": "1e932d20ddd512764874b372e8c3d54c76ebd9de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyNDAzMQ==", "url": "https://github.com/CMSgov/dpc-app/pull/571#discussion_r373624031", "bodyText": "Move these up to be in the if organization.production_enabled? section", "author": "switzersc-usds", "createdAt": "2020-01-31T18:36:08Z", "path": "dpc-web/app/views/internal/organizations/show.html.erb", "diffHunk": "@@ -94,17 +94,76 @@\n \n <section class=\"box\">\n     <div class=\"box__content\">\n-      <h2 class=\"box__heading\">FHIR Endpoint</h2>\n-      <% @organization.fhir_endpoints.each do |fhir_endpoint| %>\n+      <h2 class=\"box__heading\">Enabled Environments</h2>\n+\n+      <h3>Sandbox</h3>\n+      <% if @organization.sandbox_enabled? %>\n+        <div class=\"ds-u-margin-bottom--1\">\n+          API ID: <%= @organization.sandbox_registered_organization.api_id %>\n+        </div>\n+        <h4>FHIR Endpoint</h4>\n+        <div class=\"ds-u-margin-bottom--1\">\n+          API Reference: <%= @organization.sandbox_registered_organization.api_endpoint_ref %>\n+        </div>\n         <div class=\"ds-u-margin-bottom--1\">\n-          Name: <%= fhir_endpoint.name %>\n+          Name: <%= @organization.sandbox_fhir_endpoint.name %>\n         </div>\n         <div class=\"ds-u-margin-bottom--1\">\n-          URI: <%= fhir_endpoint.uri %>\n+          URI: <%= @organization.sandbox_fhir_endpoint.uri %>\n         </div>\n         <div class=\"ds-u-margin-bottom--1\">\n-          Status: <%= fhir_endpoint.status.titleize %>\n+          Status: <%= @organization.sandbox_fhir_endpoint.status.titleize %>\n         </div>\n+\n+        <%= link_to \"Edit\", edit_internal_organization_registered_organization_path(\n+          organization_id: @organization.id,\n+          id: @organization.sandbox_registered_organization.id,\n+          api_env: 'sandbox'\n+          ) %>\n+        <%= link_to \"Disable Sandbox\", internal_organization_registered_organization_path(\n+          organization_id: @organization.id,\n+          id: @organization.sandbox_registered_organization.id,\n+          ), method: :delete, data: { test: 'disable-sandbox' } %>\n+      <% else %>\n+        <%= link_to 'Enable Sandbox',\n+                    new_internal_organization_registered_organization_path(organization_id: @organization.id, api_env: 'sandbox'),\n+                    data: { test: 'enable-sandbox' } %>\n+      <% end %>\n+\n+      <h3>Production</h3>\n+      <% if production_api_access_enabled? %>\n+        <div class=\"ds-u-margin-bottom--1\">\n+          API ID: <%= @organization.production_registered_organization.api_id %>\n+        </div>\n+        <% if @organization.production_enabled? %>\n+          <div class=\"ds-u-margin-bottom--1\">\n+            API Reference: <%= @organization.production_registered_organization.api_endpoint_ref %>\n+          </div>\n+          <h4>FHIR Endpoint</h4>\n+          <div class=\"ds-u-margin-bottom--1\">\n+            Name: <%= @organization.production_fhir_endpoint.name %>\n+          </div>\n+          <div class=\"ds-u-margin-bottom--1\">\n+            URI: <%= @organization.production_fhir_endpoint.uri %>\n+          </div>\n+          <div class=\"ds-u-margin-bottom--1\">\n+            Status: <%= @organization.production_fhir_endpoint.status.titleize %>\n+          </div>\n+        <% else %>\n+          <%= link_to 'Enable Production', new_internal_organization_registered_organization_path(organization_id: @organization.id, api_env: 'production') %>\n+        <% end %>\n+\n+        <%= link_to \"Edit\", edit_internal_organization_registered_organization_path(\n+          organization_id: @organization.id,\n+          id: @organization.production_registered_organization.id,\n+          api_env: 'production'\n+          ) %>\n+        <%= link_to \"Disable Production\", internal_organization_registered_organization_path(\n+          organization_id: @organization.id,\n+          id: @organization.production_registered_organization.id,\n+          ), method: :delete, data: { test: 'disable-production' } %>\n+      <% else %>", "originalCommit": "1e932d20ddd512764874b372e8c3d54c76ebd9de", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fae311cbc43880d570b14ceef602e1e67718e97a", "url": "https://github.com/CMSgov/dpc-app/commit/fae311cbc43880d570b14ceef602e1e67718e97a", "message": "More readable argument name and fixed html", "committedDate": "2020-01-31T19:20:48Z", "type": "commit"}, {"oid": "1df34c9fd3231a34e94127d640d4d2e1fdf1d5f0", "url": "https://github.com/CMSgov/dpc-app/commit/1df34c9fd3231a34e94127d640d4d2e1fdf1d5f0", "message": "Update flaky test for travis", "committedDate": "2020-01-31T19:34:41Z", "type": "commit"}, {"oid": "b7d8cbd4ad70f2c1e2aadcd5b537d754ce386e9f", "url": "https://github.com/CMSgov/dpc-app/commit/b7d8cbd4ad70f2c1e2aadcd5b537d754ce386e9f", "message": "Fix time compare in test\n\nhttps://stackoverflow.com/questions/20403063/trouble-comparing-time-with-rspec", "committedDate": "2020-01-31T20:23:38Z", "type": "commit"}]}