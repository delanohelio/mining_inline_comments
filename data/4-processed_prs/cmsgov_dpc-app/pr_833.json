{"pr_number": 833, "pr_title": "DPC-136: Add support for creating and updating Consent resources", "pr_createdAt": "2020-06-05T13:35:16Z", "pr_url": "https://github.com/CMSgov/dpc-app/pull/833", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAwNjYzNQ==", "url": "https://github.com/CMSgov/dpc-app/pull/833#discussion_r436006635", "bodyText": "Method fromFhir has 35 lines of code (exceeds 25 allowed). Consider refactoring.", "author": "codeclimate", "createdAt": "2020-06-05T15:43:26Z", "path": "dpc-common/src/main/java/gov/cms/dpc/fhir/converters/entities/ConsentEntityConverter.java", "diffHunk": "@@ -70,14 +79,101 @@ private static String policyRule(String value) {\n         return code;\n     }\n \n+    private static String policyUriToCode(String uri) {\n+        if (OPT_IN_MAGIC.equals(uri)) {\n+            return OPT_IN;\n+        } else if (OPT_OUT_MAGIC.equals(uri)) {\n+            return OPT_OUT;\n+        }\n+        throw new WebApplicationException(String.format(\"Policy rule must be %s or %s.\", OPT_IN_MAGIC, OPT_OUT_MAGIC), Response.Status.BAD_REQUEST);\n+    }\n+\n     private static List<CodeableConcept> category(String loincCode) {\n         // there must code to look up the code systems used in these CodeableConcept values. What is it?\n         CodeableConcept category = new CodeableConcept();\n-        category.addCoding().setSystem(\"http://loinc.org\").setCode(loincCode).setDisplay(ConsentEntity.CATEGORY_DISPLAY);\n+        category.addCoding().setSystem(SYSTEM_LOINC).setCode(loincCode).setDisplay(ConsentEntity.CATEGORY_DISPLAY);\n         return List.of(category);\n     }\n \n-    public static Consent convert(ConsentEntity consentEntity, String orgURL, String fhirURL) {\n+    private static String categoriesToLoincCode(List<CodeableConcept> categories) {\n+        if (categories == null || categories.size() != 1) {\n+            throw new WebApplicationException(\"Must include one category\", HttpStatus.UNPROCESSABLE_ENTITY_422);\n+        }\n+\n+        CodeableConcept category = categories.get(0);\n+        List<Coding> codings = category.getCoding();\n+        if (codings == null || codings.size() != 1) {\n+            throw new WebApplicationException(\"Category must have one coding\", HttpStatus.UNPROCESSABLE_ENTITY_422);\n+        }\n+\n+        Coding coding = category.getCodingFirstRep();\n+        if (!SYSTEM_LOINC.equals(coding.getSystem()) || !CATEGORY_LOINC_CODE.equals(coding.getCode())) {\n+            throw new WebApplicationException(String.format(\"Category coding must have system %s and code %s\", SYSTEM_LOINC, CATEGORY_LOINC_CODE), HttpStatus.UNPROCESSABLE_ENTITY_422);\n+        }\n+\n+        return coding.getCode();\n+    }\n+\n+    private static UUID organizationsToCustodianUUID(List<Reference> orgRefs) {\n+        if (orgRefs == null || orgRefs.size() != 1) {\n+            throw new WebApplicationException(\"Must include one organization\", HttpStatus.UNPROCESSABLE_ENTITY_422);\n+        }\n+\n+        Reference orgRef = orgRefs.get(0);\n+        if (StringUtils.isBlank(orgRef.getReference())) {\n+            throw new WebApplicationException(\"Organization must include reference\", HttpStatus.UNPROCESSABLE_ENTITY_422);\n+        }\n+        return FHIRExtractors.getEntityUUID(orgRef.getReference());\n+    }\n+\n+    public static ConsentEntity fromFhir(Consent consent) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAzNzMzNQ==", "url": "https://github.com/CMSgov/dpc-app/pull/833#discussion_r436037335", "bodyText": "Method fromFhir has 27 lines of code (exceeds 25 allowed). Consider refactoring.", "author": "codeclimate", "createdAt": "2020-06-05T16:40:04Z", "path": "dpc-common/src/main/java/gov/cms/dpc/fhir/converters/entities/ConsentEntityConverter.java", "diffHunk": "@@ -70,14 +79,102 @@ private static String policyRule(String value) {\n         return code;\n     }\n \n+    private static String policyUriToCode(String uri) {\n+        if (OPT_IN_MAGIC.equals(uri)) {\n+            return OPT_IN;\n+        } else if (OPT_OUT_MAGIC.equals(uri)) {\n+            return OPT_OUT;\n+        }\n+        throw new WebApplicationException(String.format(\"Policy rule must be %s or %s.\", OPT_IN_MAGIC, OPT_OUT_MAGIC), Response.Status.BAD_REQUEST);\n+    }\n+\n     private static List<CodeableConcept> category(String loincCode) {\n         // there must code to look up the code systems used in these CodeableConcept values. What is it?\n         CodeableConcept category = new CodeableConcept();\n-        category.addCoding().setSystem(\"http://loinc.org\").setCode(loincCode).setDisplay(ConsentEntity.CATEGORY_DISPLAY);\n+        category.addCoding().setSystem(SYSTEM_LOINC).setCode(loincCode).setDisplay(ConsentEntity.CATEGORY_DISPLAY);\n         return List.of(category);\n     }\n \n-    public static Consent convert(ConsentEntity consentEntity, String orgURL, String fhirURL) {\n+    private static String categoriesToLoincCode(List<CodeableConcept> categories) {\n+        if (categories == null || categories.size() != 1) {\n+            throw new WebApplicationException(\"Must include one category\", HttpStatus.UNPROCESSABLE_ENTITY_422);\n+        }\n+\n+        CodeableConcept category = categories.get(0);\n+        List<Coding> codings = category.getCoding();\n+        if (codings == null || codings.size() != 1) {\n+            throw new WebApplicationException(\"Category must have one coding\", HttpStatus.UNPROCESSABLE_ENTITY_422);\n+        }\n+\n+        Coding coding = category.getCodingFirstRep();\n+        if (!SYSTEM_LOINC.equals(coding.getSystem()) || !CATEGORY_LOINC_CODE.equals(coding.getCode())) {\n+            throw new WebApplicationException(String.format(\"Category coding must have system %s and code %s\", SYSTEM_LOINC, CATEGORY_LOINC_CODE), HttpStatus.UNPROCESSABLE_ENTITY_422);\n+        }\n+\n+        return coding.getCode();\n+    }\n+\n+    private static UUID organizationsToCustodianUUID(List<Reference> orgRefs) {\n+        if (orgRefs == null || orgRefs.size() != 1) {\n+            throw new WebApplicationException(\"Must include one organization\", HttpStatus.UNPROCESSABLE_ENTITY_422);\n+        }\n+\n+        Reference orgRef = orgRefs.get(0);\n+        if (StringUtils.isBlank(orgRef.getReference())) {\n+            throw new WebApplicationException(\"Organization must include reference\", HttpStatus.UNPROCESSABLE_ENTITY_422);\n+        }\n+        return FHIRExtractors.getEntityUUID(orgRef.getReference());\n+    }\n+\n+    private static String mbiFromPatientReference(String patientRefStr) {\n+        String mbi = \"\";\n+        Pattern patientIdPattern = Pattern.compile(\"/Patient\\\\?identity=\\\\|(?<mbi>\\\\d[a-zA-Z][a-zA-Z0-9]\\\\d[a-zA-Z][a-zA-Z0-9]\\\\d[a-zA-Z]{2}\\\\d{2})\");\n+        Matcher matcher = patientIdPattern.matcher(patientRefStr);\n+        if (matcher.find()) {\n+            mbi = matcher.group(\"mbi\");\n+        }\n+        return mbi;\n+    }\n+\n+    public static ConsentEntity fromFhir(Consent consent) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c9e58d87ec36f79210b3db129d4ee5473675a6af", "url": "https://github.com/CMSgov/dpc-app/commit/c9e58d87ec36f79210b3db129d4ee5473675a6af", "message": "Consent create and update WIP", "committedDate": "2020-06-10T15:27:40Z", "type": "commit"}, {"oid": "c4eb33775bf981e09b9788a2f13876b2426ed116", "url": "https://github.com/CMSgov/dpc-app/commit/c4eb33775bf981e09b9788a2f13876b2426ed116", "message": "Update consent", "committedDate": "2020-06-10T15:27:43Z", "type": "commit"}, {"oid": "011f997ff398e6a0367bafb43cf82f629918bee0", "url": "https://github.com/CMSgov/dpc-app/commit/011f997ff398e6a0367bafb43cf82f629918bee0", "message": "More consent fields for converter", "committedDate": "2020-06-10T15:27:43Z", "type": "commit"}, {"oid": "69dc62433ff7abf18d846f47388909c7756e6ad1", "url": "https://github.com/CMSgov/dpc-app/commit/69dc62433ff7abf18d846f47388909c7756e6ad1", "message": "Create/update consent Postman tests", "committedDate": "2020-06-10T15:27:43Z", "type": "commit"}, {"oid": "897bef0abb5b61bc53f0c4f598c86284003530d1", "url": "https://github.com/CMSgov/dpc-app/commit/897bef0abb5b61bc53f0c4f598c86284003530d1", "message": "Tests", "committedDate": "2020-06-10T15:27:44Z", "type": "commit"}, {"oid": "3a896de802e589bb53df821e775d6ddb50dd81db", "url": "https://github.com/CMSgov/dpc-app/commit/3a896de802e589bb53df821e775d6ddb50dd81db", "message": "Postman test startup fix", "committedDate": "2020-06-10T15:27:44Z", "type": "commit"}, {"oid": "2ea1011d69f512ad26bb342960b6e4a57658f07d", "url": "https://github.com/CMSgov/dpc-app/commit/2ea1011d69f512ad26bb342960b6e4a57658f07d", "message": "Shorten fromFhir() a bit (but not enough for Code Climate)", "committedDate": "2020-06-10T15:27:44Z", "type": "commit"}, {"oid": "2ea1011d69f512ad26bb342960b6e4a57658f07d", "url": "https://github.com/CMSgov/dpc-app/commit/2ea1011d69f512ad26bb342960b6e4a57658f07d", "message": "Shorten fromFhir() a bit (but not enough for Code Climate)", "committedDate": "2020-06-10T15:27:44Z", "type": "forcePushed"}]}