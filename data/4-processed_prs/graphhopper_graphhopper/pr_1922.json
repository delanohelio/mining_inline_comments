{"pr_number": 1922, "pr_title": "Use new profiles section to configure LM&CH preparations", "pr_createdAt": "2020-02-19T07:14:29Z", "pr_url": "https://github.com/graphhopper/graphhopper/pull/1922", "timeline": [{"oid": "e1bed8e74f4611a20d5cc0b3257bc81f71338fd7", "url": "https://github.com/graphhopper/graphhopper/commit/e1bed8e74f4611a20d5cc0b3257bc81f71338fd7", "message": "Make sure CH enabled/disabled is chosen explicitly everywhere\n\n* for any usage of GraphHopper there should either be a setCHEnabled(false) call or some CH profile strings should be set\n\n* -> now we can remove it again :)", "committedDate": "2020-02-16T10:22:26Z", "type": "commit"}, {"oid": "8974338cdd7ddb5f968ca5c3e982579efaf2357d", "url": "https://github.com/graphhopper/graphhopper/commit/8974338cdd7ddb5f968ca5c3e982579efaf2357d", "message": "No longer enable CH by default in GraphHopper class\n\n* remove enabled flag in CH/LMPreparationHandlers", "committedDate": "2020-02-16T13:19:49Z", "type": "commit"}, {"oid": "a2f8bd950906c66d852d5b1089a2328a795447b0", "url": "https://github.com/graphhopper/graphhopper/commit/a2f8bd950906c66d852d5b1089a2328a795447b0", "message": "Remove outdated comment", "committedDate": "2020-02-16T15:34:28Z", "type": "commit"}, {"oid": "a1280914179889c4431891236ddb27dff49424b1", "url": "https://github.com/graphhopper/graphhopper/commit/a1280914179889c4431891236ddb27dff49424b1", "message": "Merge branch 'master' into no_ch_by_default", "committedDate": "2020-02-17T10:08:22Z", "type": "commit"}, {"oid": "5293dd960668798161b3ae3b7325104f711e5402", "url": "https://github.com/graphhopper/graphhopper/commit/5293dd960668798161b3ae3b7325104f711e5402", "message": "Remove CH for PT, update PT readme", "committedDate": "2020-02-17T10:30:06Z", "type": "commit"}, {"oid": "a7ff358bcb4af31abbe06339fd828f1d35c7f7f9", "url": "https://github.com/graphhopper/graphhopper/commit/a7ff358bcb4af31abbe06339fd828f1d35c7f7f9", "message": "Minor cleanup in RoutingAlgorithmWithOSMIT", "committedDate": "2020-02-17T10:54:06Z", "type": "commit"}, {"oid": "d9267e0786574dee3aacfe8ae8394ca27478d465", "url": "https://github.com/graphhopper/graphhopper/commit/d9267e0786574dee3aacfe8ae8394ca27478d465", "message": "Merge branch 'master' into no_ch_by_default\n\n# Conflicts:\n#\treader-gtfs/README.md", "committedDate": "2020-02-17T11:01:42Z", "type": "commit"}, {"oid": "e6e1ffa4f2858e9d8feff099b883e2eabf429363", "url": "https://github.com/graphhopper/graphhopper/commit/e6e1ffa4f2858e9d8feff099b883e2eabf429363", "message": "Introduce routing profiles (so far only used to define CH/LM preparations)", "committedDate": "2020-02-17T11:15:19Z", "type": "commit"}, {"oid": "9895e0f8d15fc694bc1dee0812e75c21d1b0de22", "url": "https://github.com/graphhopper/graphhopper/commit/9895e0f8d15fc694bc1dee0812e75c21d1b0de22", "message": "Merge branch 'master' into profiles\n\n# Conflicts:\n#\tcore/files/changelog.txt\n#\tcore/src/main/java/com/graphhopper/GraphHopper.java\n#\tcore/src/main/java/com/graphhopper/routing/ch/CHPreparationHandler.java\n#\tcore/src/main/java/com/graphhopper/routing/lm/LMPreparationHandler.java\n#\tcore/src/test/java/com/graphhopper/routing/ch/CHPreparationHandlerTest.java\n#\tcore/src/test/java/com/graphhopper/routing/lm/LMPreparationHandlerTest.java\n#\tcore/src/test/java/com/graphhopper/storage/GraphHopperStorageLMTest.java\n#\tcore/src/test/java/com/graphhopper/storage/GraphHopperStorageTest.java\n#\treader-osm/src/test/java/com/graphhopper/GraphHopperIT.java\n#\treader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java\n#\treader-osm/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMIT.java", "committedDate": "2020-02-17T13:56:33Z", "type": "commit"}, {"oid": "8f67a76d79b36ad0e6824de5a93db8e68affe51d", "url": "https://github.com/graphhopper/graphhopper/commit/8f67a76d79b36ad0e6824de5a93db8e68affe51d", "message": "Merge branch 'master' into profiles", "committedDate": "2020-02-19T06:42:55Z", "type": "commit"}, {"oid": "9d99325e2e2b141b72f2799a65bd0b7962990761", "url": "https://github.com/graphhopper/graphhopper/commit/9d99325e2e2b141b72f2799a65bd0b7962990761", "message": "Fix LM profile in measurement if no turn costs", "committedDate": "2020-02-19T06:51:15Z", "type": "commit"}, {"oid": "d36aa8bcec0df108ede5c3d1fb8a18f85b29de07", "url": "https://github.com/graphhopper/graphhopper/commit/d36aa8bcec0df108ede5c3d1fb8a18f85b29de07", "message": "Do not run edge-based LM if no turn cost is set on encoder", "committedDate": "2020-02-19T06:59:06Z", "type": "commit"}, {"oid": "f832c6454eb154f25deee0522499bf0e2658c984", "url": "https://github.com/graphhopper/graphhopper/commit/f832c6454eb154f25deee0522499bf0e2658c984", "message": "Do not run edge-based measurement if no turn cost is set on encoder", "committedDate": "2020-02-19T07:01:27Z", "type": "commit"}, {"oid": "34450abe47f9cfcb96c648bae91f504663c3d560", "url": "https://github.com/graphhopper/graphhopper/commit/34450abe47f9cfcb96c648bae91f504663c3d560", "message": "Merge branch 'master' into profiles\n\n# Conflicts:\n#\tcore/files/changelog.txt\n#\tgraphhopper.sh\n#\treader-osm/src/test/java/com/graphhopper/GraphHopperIT.java", "committedDate": "2020-02-22T07:57:21Z", "type": "commit"}, {"oid": "d7ad54a3f9fea16f6c645a4f7dd7e146163c8cb0", "url": "https://github.com/graphhopper/graphhopper/commit/d7ad54a3f9fea16f6c645a4f7dd7e146163c8cb0", "message": "Remove explicit snake case conversion", "committedDate": "2020-02-22T08:04:15Z", "type": "commit"}, {"oid": "29edad3f4b4a0095bd18a1f671955024fc9a7b0b", "url": "https://github.com/graphhopper/graphhopper/commit/29edad3f4b4a0095bd18a1f671955024fc9a7b0b", "message": "Merge branch 'master' into profiles", "committedDate": "2020-02-22T19:14:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyNzY5Mg==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r382927692", "bodyText": "Can we remove dashes from the accepted characters or is dash intended to be used for the future query parameter guessing?", "author": "karussell", "createdAt": "2020-02-22T17:22:29Z", "path": "api/src/main/java/com/graphhopper/config/ProfileConfig.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.graphhopper.config;\n+\n+import com.graphhopper.util.PMap;\n+\n+public class ProfileConfig {\n+    private String name = \"car\";\n+    private String vehicle = \"car\";\n+    private String weighting = \"fastest\";\n+    private boolean turnCosts = false;\n+    private PMap hints = new PMap();\n+\n+    public static void validateProfileName(String profileName) {\n+        if (!profileName.matches(\"^[a-z0-9_\\\\-]*$\")) {\n+            throw new IllegalArgumentException(\"Profile names may only contain lower case letters, numbers, underscores and dashs, given: \" + profileName);", "originalCommit": "d7ad54a3f9fea16f6c645a4f7dd7e146163c8cb0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAyMjgxMw==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r383022813", "bodyText": "The dash might also be a minus and we have it currently for example as utc-1 in the default naming scheme for CHProfile. There would probably be a way to change this and no longer allow dash/minus, but then again this character makes no problems when used in url parameters or filenames, so I thought its ok to allow it.", "author": "easbar", "createdAt": "2020-02-23T17:25:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyNzY5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAzMzUyMg==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r383033522", "bodyText": "utc-1\n\nAh, ok. Ugly. Would be nice to change this (likely in another issue & later)", "author": "karussell", "createdAt": "2020-02-23T19:56:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyNzY5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyNzcxMg==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r382927712", "bodyText": "Why is the pre-initialization necessary? I.e. why not an empty or null string?", "author": "karussell", "createdAt": "2020-02-22T17:22:58Z", "path": "api/src/main/java/com/graphhopper/config/CHProfileConfig.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.graphhopper.config;\n+\n+import java.util.Objects;\n+\n+import static com.graphhopper.config.ProfileConfig.validateProfileName;\n+\n+public class CHProfileConfig {\n+    private String profile = \"unset_ch_profile\";", "originalCommit": "d7ad54a3f9fea16f6c645a4f7dd7e146163c8cb0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAyMjgxOQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r383022819", "bodyText": "Its certainly not necessary, but I thought its a bit more explicit like that. I do not like using null, because then it could actually be null after deserialization (not sure if this is good or bad, but for example if we always make sure everything is initialized it would be sufficient to check for empty string (if even) and we do not need null checks. -> I changed it to be initialized with an empty string now.", "author": "easbar", "createdAt": "2020-02-23T17:25:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyNzcxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyNzk1Mg==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r382927952", "bodyText": "Wouldn't it be possible to remove the graph.flag_encoders list now and use the vehicle property of all profiles instead? (btw minor typo of missing 's' in both cases)", "author": "karussell", "createdAt": "2020-02-22T17:26:35Z", "path": "config-example.yml", "diffHunk": "@@ -20,6 +20,50 @@ graphhopper:\n   # More are: surface,max_width,max_height,max_weight,max_axle_load,max_length,hazmat,hazmat_tunnel,hazmat_water,toll,track_type\n   # graph.encoded_values: surface,toll,track_type\n \n+  ##### Routing Profiles ####\n+\n+  # Routing can be done for the following list of profiles. The fields of each profile are as follows:\n+  # - name (required): a unique string identifier for the profile\n+  # - vehicle (required): refers to the `graph.flag_encoder` used for this profile\n+  # - weighting (required): the weighting used for this profile, e.g. fastest,shortest or short_fastest\n+  # - turn_costs (true/false, default: false): whether or not turn restrictions should be applied for this profile.\n+  #   this will only work if the `graph.flag_encoder` for the given `vehicle` is configured with `|turn_costs=true`.", "originalCommit": "d7ad54a3f9fea16f6c645a4f7dd7e146163c8cb0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAyMjgzOQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r383022839", "bodyText": "Yes it might be possible, but lets say this would be another/next step (which is not strictly required here). The problem I am having with this is that the flag encoders are not simply something like car, but rather car|turn_costs=true or motorcycle|your_property=here. So right now if we would do any kind of such configurations of the flag encoders like this we would have to repeat it in each profile? Or somehow merge them? Or choose one by some (possibley not so obvious) rule? And even if we think a bit about future development when the flag encoders become collections of encoded values, then we will probably want to configure these collections of encoded values, give them a name and refer to this name in the profile (just like we are doing here).\n\nbtw minor typo of missing 's' in both cases\n\nfixed, thanks", "author": "easbar", "createdAt": "2020-02-23T17:25:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyNzk1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAzMTM5NQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r383031395", "bodyText": "Ok, yeah. Probably for another issue\n\nwe would have to repeat it in each profile\n\nYeah, now I understand the problem. If one profile requests \"car with turn instruction\" and the other \"car without turn instruction\" it would be required to create two flag encoders but they would collide due to the same name.", "author": "karussell", "createdAt": "2020-02-23T19:26:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyNzk1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAzMjM0NQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r383032345", "bodyText": "If we assume there is one encoder per profile, thats the problem. Otherwise it would be unclear whether the (one) car encoder would have turn instructions or not (and probably similar problems for other encoder properties), there would no longer be a single place to define the encoder.", "author": "easbar", "createdAt": "2020-02-23T19:40:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyNzk1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyODE0NQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r382928145", "bodyText": "I would prefer to throw an IllegalStateException for everything that is not called very often instead of an assert, because assert is only active for our tests. Or why / when do you use assert?", "author": "karussell", "createdAt": "2020-02-22T17:30:13Z", "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -797,31 +857,22 @@ public final CHPreparationHandler getCHPreparationHandler() {\n     }\n \n     private void initCHPreparationHandler() {\n-        if (!chPreparationHandler.hasCHProfiles()) {\n-            if (chPreparationHandler.getCHProfileStrings().isEmpty())\n-                throw new IllegalStateException(\"Potential bug: chProfileStrings is empty\");\n-\n-            for (FlagEncoder encoder : encodingManager.fetchEdgeEncoders()) {\n-                for (String chWeightingStr : chPreparationHandler.getCHProfileStrings()) {\n-                    // ghStorage is null at this point\n-\n-                    // extract weighting string and u-turn-costs\n-                    String configStr = \"\";\n-                    if (chWeightingStr.contains(\"|\")) {\n-                        configStr = chWeightingStr;\n-                        chWeightingStr = chWeightingStr.split(\"\\\\|\")[0];\n-                    }\n-                    PMap config = new PMap(configStr);\n-                    int uTurnCosts = config.getInt(Routing.U_TURN_COSTS, INFINITE_U_TURN_COSTS);\n-\n-                    EdgeBasedCHMode edgeBasedCHMode = chPreparationHandler.getEdgeBasedCHMode();\n-                    if (!(edgeBasedCHMode == EDGE_OR_NODE && encoder.supportsTurnCosts())) {\n-                        chPreparationHandler.addCHProfile(CHProfile.nodeBased(createWeighting(new HintsMap(chWeightingStr), encoder, NO_TURN_COST_PROVIDER)));\n-                    }\n-                    if (edgeBasedCHMode != OFF && encoder.supportsTurnCosts()) {\n-                        chPreparationHandler.addCHProfile(CHProfile.edgeBased(createWeighting(new HintsMap(chWeightingStr), encoder, new DefaultTurnCostProvider(encoder, ghStorage.getTurnCostStorage(), uTurnCosts))));\n-                    }\n-                }\n+        if (chPreparationHandler.hasCHProfiles()) {\n+            return;\n+        }\n+\n+        Map<String, ProfileConfig> profilesByName = getProfilesByName();\n+        for (CHProfileConfig chConfig : chPreparationHandler.getCHProfileConfigs()) {\n+            ProfileConfig profile = profilesByName.get(chConfig.getProfile());\n+            assert profile != null : \"there is no profile \" + chConfig.getProfile();", "originalCommit": "d7ad54a3f9fea16f6c645a4f7dd7e146163c8cb0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAyMjg2NQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r383022865", "bodyText": "The reason I am using assert here is that this is a private method and the existence of the profile is already checked in checkProfilesConsistency before. So at this point its clear that the profile exists (unless there is some programming error and my assumption that it was checked before is false). So we could either skip this check here entirely, or repeat the check again, or use an assert as a bit of a reminder that (if nothing is broken) we can be sure the profile exists. In general of course you are right and the program logic should not depend on an assert. Here it does not because the same check is done before already. If you think this is confusing somehow I think we should just remove this assert here (and use the null pointer exception to figure out what is going on if this ever pops up). I have to admit the assert message here is not chosen very well it would better be: \"There is no profile ... even though this should have been checked before\"", "author": "easbar", "createdAt": "2020-02-23T17:25:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyODE0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAzMjE3Mg==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r383032172", "bodyText": "An assert statement always distracts a bit and should have some reason it is no if+throw because even if there is a bug we'll never know with assert, because in production it is disabled and in tests it does not happen. (except we create some randomization tests that randomize the initialization too)\nSo for higher level code where speed does not matter I would always use an if statement + throw an IllegalStateException OR decide it is not worth the clutter and remove it.\nInterestingly even for code where speed matters I observed that \"if+throw\" can often be removed via JIT and does not hurt. E.g. recently I introduced this in RAMDataAccess.setInt and I should probably replace the remaining assert too or remove it.", "author": "karussell", "createdAt": "2020-02-23T19:37:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyODE0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAzMjg3Mg==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r383032872", "bodyText": "An assert statement always distracts a bit\n\nThats a bit subjective :) I think asserts can do a great job in communicating intend (even though the present case is not a particularly good example for this).\n\nit is no if+throw because even if there is a bug we'll never know with assert, because in production it is disabled and in tests it does not happen\n\nYes and like I said I did not add the assert because its supposed to throw anything (we check wether or not the profile exists in checkConsistency() already.\n\nSo for higher level code where speed does not matter I would always use an if statement\n\nI did not decide to use assert for performance reasons here. Performing a single if is probably very rarely a performance issue (and especially not here).\nWhat do you prefer?\n// option 1:\nProfile profile = profiles.get(profileName);\n// profile cannot be null because we checked already\nprofile.doSth();\n\n// option2\nProfile profile = profiles.get(profile);\nprofile.doSth();\n\n// option3\nProfile profile = profiles.get(profile);\nassert profile != null : \"profile does not exist even though this should have been checked already\";\nprofile.doSth();\nHere, I am happy with any of the options, but I would not agree if we tried to never use assert whatsoever. Like I said this is not a particular good/important use-case here.", "author": "easbar", "createdAt": "2020-02-23T19:48:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyODE0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAzNTExMg==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r383035112", "bodyText": "If I'm confident that it is really not null I would probably use option 2.\nIf not, I would pick option 4: throw an IllegalStateException ;)\nI still do not see the benefit of an assert that is never thrown in production. Why should I continue in production when we are in a wrong situation? It feels worse than catching an exception and then just logging it :)", "author": "karussell", "createdAt": "2020-02-23T20:18:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyODE0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAzNzk4NQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r383037985", "bodyText": "If I'm confident that it is really not null I would probably use option 2.\n\nThen the next person might ask the same question and maybe he/she is not as confident :)\n\nIf not, I would pick option 4: throw an IllegalStateException ;)\n\nOk that also works for me.\n\nI still do not see the benefit of an assert that is never thrown in production. Why should I continue in production when we are in a wrong situation? It feels worse than catching an exception and then just logging it :)\n\nThe idea is that this code never goes to production, because some tests will fail. I think assertions can:\n\n\nhelp finding the source of an error (you know something goes wrong at some place, but assertions might tell you that the real reason something went wrong was that something else went wrong before this)\n\n\nhelp communicate under which assumptions some code was written\n\n\nYou are right because both things can be achieved equally well by throwing IllegalStateException (or some shorter helper method that does this) as long as performance is not an issue. My idea here was that the assert tells me that we are checking something that has already been checked anyway, but I see this is not easy to follow for others.\nIf however assertions are used more extensively (and possibly using some assertions that are more expensive than a simple boolean check) they can certainly be useful because they can be disabled for production. The present case is not a good example for that, but generally I think using more asserts is a good thing to do (especially in code where calculating some precondition only to find out whether or not we are in a sane state is expensive). For example RoutingKit does this a lot and its almost like you do not need tests anymore (or only a few), because when running the code with enabled assertions there is a very high chance some assertions fail when you are making a programming error and it improves readability when you are told what the expectations for the current method call were when the method was written. You are also able to easily test internal things that would never be easy to cover using tests. Ok, this is a whole other use-case than what we are talking about here, but I would just not go as far as saying that asserts are always bad or distracting.\n-> I'll remove the assert :)", "author": "easbar", "createdAt": "2020-02-23T20:58:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyODE0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyODI3Mg==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r382928272", "bodyText": "In both exceptions I would link to this issue #1922 to give more context.", "author": "karussell", "createdAt": "2020-02-22T17:31:38Z", "path": "core/src/main/java/com/graphhopper/routing/ch/CHPreparationHandler.java", "diffHunk": "@@ -60,36 +60,21 @@ public CHPreparationHandler() {\n \n     public void init(GraphHopperConfig ghConfig) {\n         // throw explicit error for deprecated configs\n-        if (!ghConfig.get(\"prepare.threads\", \"\").isEmpty())\n+        if (ghConfig.has(\"prepare.threads\"))\n             throw new IllegalStateException(\"Use \" + CH.PREPARE + \"threads instead of prepare.threads\");\n-        if (!ghConfig.get(\"prepare.chWeighting\", \"\").isEmpty() || !ghConfig.get(\"prepare.chWeightings\", \"\").isEmpty())\n-            throw new IllegalStateException(\"Use \" + CH.PREPARE + \"weightings and a comma separated list instead of prepare.chWeighting or prepare.chWeightings\");\n+        if (ghConfig.has(\"prepare.chWeighting\") || ghConfig.has(\"prepare.chWeightings\") || ghConfig.has(\"prepare.ch.weightings\"))\n+            throw new IllegalStateException(\"Use profiles_ch instead of prepare.chWeighting, prepare.chWeightings or prepare.ch.weightings\");\n+        if (ghConfig.has(\"prepare.ch.edge_based\"))\n+            throw new IllegalStateException(\"Use profiles_ch instead of prepare.ch.edge_based\");", "originalCommit": "d7ad54a3f9fea16f6c645a4f7dd7e146163c8cb0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAyMjg5MQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r383022891", "bodyText": "Good idea, done", "author": "easbar", "createdAt": "2020-02-23T17:25:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyODI3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkyODMyNA==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r382928324", "bodyText": "(I also would put here a link to this issue in the error message)", "author": "karussell", "createdAt": "2020-02-22T17:32:38Z", "path": "core/src/main/java/com/graphhopper/routing/lm/LMPreparationHandler.java", "diffHunk": "@@ -70,7 +71,14 @@ public LMPreparationHandler() {\n     }\n \n     public void init(GraphHopperConfig ghConfig) {\n+        // throw explicit error for deprecated configs\n+        if (ghConfig.has(\"prepare.lm.weightings\")) {\n+            throw new IllegalStateException(\"Use profiles_lm instead of prepare.lm.weightings\");", "originalCommit": "d7ad54a3f9fea16f6c645a4f7dd7e146163c8cb0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk5NTY2OA==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r382995668", "bodyText": "Should we better make this method package protected to only allow jackson access to it?", "author": "karussell", "createdAt": "2020-02-23T11:31:39Z", "path": "api/src/main/java/com/graphhopper/config/CHProfileConfig.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.graphhopper.config;\n+\n+import java.util.Objects;\n+\n+import static com.graphhopper.config.ProfileConfig.validateProfileName;\n+\n+public class CHProfileConfig {\n+    private String profile = \"unset_ch_profile\";\n+\n+    private CHProfileConfig() {\n+        // default constructor needed for jackson\n+    }\n+\n+    public CHProfileConfig(String profile) {\n+        setProfile(profile);\n+    }\n+\n+    public String getProfile() {\n+        return profile;\n+    }\n+\n+    public CHProfileConfig setProfile(String profile) {", "originalCommit": "d7ad54a3f9fea16f6c645a4f7dd7e146163c8cb0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAyMjg5Ng==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r383022896", "bodyText": "Ok", "author": "easbar", "createdAt": "2020-02-23T17:26:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk5NTY2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk5Nzg2MA==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r382997860", "bodyText": "Some javadocs would be good here, also how to set the LM/CHProfileConfig. Or link to this PR.", "author": "karussell", "createdAt": "2020-02-23T12:02:01Z", "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -297,6 +298,16 @@ private GraphHopper setUnsafeMemory() {\n         return this;\n     }\n \n+    public GraphHopper setProfiles(ProfileConfig... profiles) {\n+        return setProfiles(Arrays.asList(profiles));\n+    }\n+\n+    public GraphHopper setProfiles(List<ProfileConfig> profiles) {", "originalCommit": "d7ad54a3f9fea16f6c645a4f7dd7e146163c8cb0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAyMjkwMg==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r383022902", "bodyText": "Yes will do as soon as we have agreed on a final design", "author": "easbar", "createdAt": "2020-02-23T17:26:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk5Nzg2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk5OTk3NQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r382999975", "bodyText": "you can add the profile directly to the set as the hashcode & equals is already implemented for that (?)\nOr maybe shouldn't we do the check when calling setProfileConfigs or create a\nLinkedHashMap<String, ProfileConfig> profiles in the GraphHopper class on setProfileConfigs? This would also avoid the method getProfilesByName.", "author": "karussell", "createdAt": "2020-02-23T12:30:58Z", "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -772,6 +788,50 @@ public boolean load(String graphHopperFolder) {\n         }\n     }\n \n+    private void checkProfilesConsistency() {\n+        Set<String> profileSet = new LinkedHashSet<>(profiles.size());\n+        for (ProfileConfig profile : profiles) {\n+            boolean added = profileSet.add(profile.getName());", "originalCommit": "d7ad54a3f9fea16f6c645a4f7dd7e146163c8cb0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAyMzUwNA==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r383023504", "bodyText": "Yes using a map is better, also because later when resolving the profile during a request we have to obtain the profile by name again. I used a map before and then changed it back to list, but now I do not remember why anymore -> its a map now \ud83d\udc4d", "author": "easbar", "createdAt": "2020-02-23T17:35:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk5OTk3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAwMDM4MQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r383000381", "bodyText": "Why is it not named getHints?", "author": "karussell", "createdAt": "2020-02-23T12:37:02Z", "path": "api/src/main/java/com/graphhopper/config/ProfileConfig.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.graphhopper.config;\n+\n+import com.graphhopper.util.PMap;\n+\n+public class ProfileConfig {\n+    private String name = \"car\";\n+    private String vehicle = \"car\";\n+    private String weighting = \"fastest\";\n+    private boolean turnCosts = false;\n+    private PMap hints = new PMap();\n+\n+    public static void validateProfileName(String profileName) {\n+        if (!profileName.matches(\"^[a-z0-9_\\\\-]*$\")) {\n+            throw new IllegalArgumentException(\"Profile names may only contain lower case letters, numbers, underscores and dashs, given: \" + profileName);\n+        }\n+    }\n+\n+    private ProfileConfig() {\n+        // default constructor needed for jackson\n+    }\n+\n+    public ProfileConfig(String name) {\n+        setName(name);\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public ProfileConfig setName(String name) {\n+        validateProfileName(name);\n+        this.name = name;\n+        return this;\n+    }\n+\n+    public String getVehicle() {\n+        return vehicle;\n+    }\n+\n+    public ProfileConfig setVehicle(String vehicle) {\n+        this.vehicle = vehicle;\n+        return this;\n+    }\n+\n+    public String getWeighting() {\n+        return weighting;\n+    }\n+\n+    public ProfileConfig setWeighting(String weighting) {\n+        this.weighting = weighting;\n+        return this;\n+    }\n+\n+    public boolean isTurnCosts() {\n+        return turnCosts;\n+    }\n+\n+    public ProfileConfig setTurnCosts(boolean turnCosts) {\n+        this.turnCosts = turnCosts;\n+        return this;\n+    }\n+\n+    public PMap hints() {", "originalCommit": "d7ad54a3f9fea16f6c645a4f7dd7e146163c8cb0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAyMjkwNQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r383022905", "bodyText": "Because of the jackson conventions. If there was getHints() Jackson would allow a hints sub-node, but we want all the other fields on the top level (see the @JsonAnySetter in the corresponding mixin)", "author": "easbar", "createdAt": "2020-02-23T17:26:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAwMDM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAzMjc4NA==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r383032784", "bodyText": "What do you mean with \"would allow a hints sub-node\" - when would it allow this? As there is no setHints method.", "author": "karussell", "createdAt": "2020-02-23T19:46:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAwMDM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAzMzU2OA==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r383033568", "bodyText": "The getter makes the hints serializable and deserializable: https://www.baeldung.com/jackson-field-serializable-deserializable-or-not#a-getter-makes-a-non-public-field-serializable-and-deserializable. So if we put getHints by convention the deserialized config would look like:\nprofile:\n  name: my_name\n  hints: \n      foo: bar\n      baz: foo\nbut (afaik) we want:\nprofile:\n  name: my_name\n  foo: bar\n  baz: foo", "author": "easbar", "createdAt": "2020-02-23T19:57:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAwMDM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAzNDI4NQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r383034285", "bodyText": "And can we use JsonIgnore?", "author": "karussell", "createdAt": "2020-02-23T20:07:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAwMDM4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2MDI1Nw==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r383760257", "bodyText": "Yes with @JsonIgnore we can have getHints and Jackson will still not consider hints to be a property. -> I renamed to getHints().", "author": "easbar", "createdAt": "2020-02-25T09:39:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAwMDM4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAwMTAxNQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r383001015", "bodyText": "Here some JavaDoc would be good with a link to LM/CHProfileConfig", "author": "karussell", "createdAt": "2020-02-23T12:45:15Z", "path": "api/src/main/java/com/graphhopper/config/ProfileConfig.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.graphhopper.config;\n+\n+import com.graphhopper.util.PMap;\n+\n+public class ProfileConfig {", "originalCommit": "d7ad54a3f9fea16f6c645a4f7dd7e146163c8cb0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAyMjkxOA==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r383022918", "bodyText": "Yes will do as soon as we have agreed on a final design", "author": "easbar", "createdAt": "2020-02-23T17:26:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAwMTAxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAwMTI0MA==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r383001240", "bodyText": "Can you add , see #1922?", "author": "karussell", "createdAt": "2020-02-23T12:48:30Z", "path": "core/files/changelog.txt", "diffHunk": "@@ -1,4 +1,5 @@\n 1.0\n+    add profiles parameter and replace prepare.ch/lm.weightings and prepare.ch.edge_based with profiles_ch/lm config parameters", "originalCommit": "d7ad54a3f9fea16f6c645a4f7dd7e146163c8cb0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f9ef480f04f67b225f3b9d75aa0ef90d505a6f62", "url": "https://github.com/graphhopper/graphhopper/commit/f9ef480f04f67b225f3b9d75aa0ef90d505a6f62", "message": "Merge branch 'master' into profiles\n\n# Conflicts:\n#\tcore/src/main/java/com/graphhopper/routing/lm/LMPreparationHandler.java", "committedDate": "2020-02-23T16:57:11Z", "type": "commit"}, {"oid": "abe6ca751174437dcc5f6a06c86dc5291f41e038", "url": "https://github.com/graphhopper/graphhopper/commit/abe6ca751174437dcc5f6a06c86dc5291f41e038", "message": "Set initial value of CH/LMProfileConfig#profile to an empty string", "committedDate": "2020-02-23T17:06:29Z", "type": "commit"}, {"oid": "82eb3b908e1d63ba006e679baef1c38f807e3b39", "url": "https://github.com/graphhopper/graphhopper/commit/82eb3b908e1d63ba006e679baef1c38f807e3b39", "message": "Fix typo in config-example.yml: flag_encoder(s)", "committedDate": "2020-02-23T17:07:53Z", "type": "commit"}, {"oid": "5fbb3d46d83e27b87d52e641fe2afd156ff127b4", "url": "https://github.com/graphhopper/graphhopper/commit/5fbb3d46d83e27b87d52e641fe2afd156ff127b4", "message": "Refer to #1922 in error messages for deprecated configurations.", "committedDate": "2020-02-23T17:18:58Z", "type": "commit"}, {"oid": "f2ff2e5d8154cb8d0bcad3239624b1a18b5f1afd", "url": "https://github.com/graphhopper/graphhopper/commit/f2ff2e5d8154cb8d0bcad3239624b1a18b5f1afd", "message": "Make CH/LMProfileConfig#setProfile package visible", "committedDate": "2020-02-23T17:20:53Z", "type": "commit"}, {"oid": "08dda4020ce9a7a50b8f9398ff08de70ced5fb53", "url": "https://github.com/graphhopper/graphhopper/commit/08dda4020ce9a7a50b8f9398ff08de70ced5fb53", "message": "Link to #1922 in changelog", "committedDate": "2020-02-23T17:23:55Z", "type": "commit"}, {"oid": "cd6bb5a8c8b0fdbe12bf2f59f4946b842a75d209", "url": "https://github.com/graphhopper/graphhopper/commit/cd6bb5a8c8b0fdbe12bf2f59f4946b842a75d209", "message": "Use a map instead of a list for profiles in GraphHopper", "committedDate": "2020-02-23T17:35:37Z", "type": "commit"}, {"oid": "d007f582f895577625840544bc6e430956400630", "url": "https://github.com/graphhopper/graphhopper/commit/d007f582f895577625840544bc6e430956400630", "message": "Remove asserts", "committedDate": "2020-02-23T21:58:28Z", "type": "commit"}, {"oid": "af4555b86d2e3b03691d9134c4ce7b774fc10945", "url": "https://github.com/graphhopper/graphhopper/commit/af4555b86d2e3b03691d9134c4ce7b774fc10945", "message": "Rename ProfileConfig#hints to #getHints", "committedDate": "2020-02-25T09:37:14Z", "type": "commit"}, {"oid": "76cbdcef33ad0af051c7ec5f5c6f4ebcd5fcdc9d", "url": "https://github.com/graphhopper/graphhopper/commit/76cbdcef33ad0af051c7ec5f5c6f4ebcd5fcdc9d", "message": "Add some java docs for profile configs", "committedDate": "2020-02-25T09:58:25Z", "type": "commit"}, {"oid": "7caca668bff4bef2970ea4df6931653501c97f8f", "url": "https://github.com/graphhopper/graphhopper/commit/7caca668bff4bef2970ea4df6931653501c97f8f", "message": "Add some more java docs", "committedDate": "2020-02-25T10:08:04Z", "type": "commit"}, {"oid": "d6fef6698125b1350b6d55d27b892b9eb8890c63", "url": "https://github.com/graphhopper/graphhopper/commit/d6fef6698125b1350b6d55d27b892b9eb8890c63", "message": "Merge branch 'master' into profiles", "committedDate": "2020-02-25T18:45:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY5MjI1MQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r416692251", "bodyText": "Sorry for being a bit lat to look at the changes. I was wondering why are we creating an instance of the weighting here? Wouldn't it be enough to check if a weighting with a certain name is \"registered\"/\"available\"? Or is this the easiest option to check if the weighting is available?", "author": "boldtrn", "createdAt": "2020-04-28T15:09:03Z", "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -772,6 +822,45 @@ public boolean load(String graphHopperFolder) {\n         }\n     }\n \n+    private void checkProfilesConsistency() {\n+        for (ProfileConfig profile : profilesByName.values()) {\n+            if (!encodingManager.hasEncoder(profile.getVehicle())) {\n+                throw new IllegalArgumentException(\"Unknown vehicle '\" + profile.getVehicle() + \"' in profile: \" + profile + \". Make sure to add all vehicle used in profiles to 'graph.flag_encoders'\");\n+            }\n+            FlagEncoder encoder = encodingManager.getEncoder(profile.getVehicle());\n+            if (profile.isTurnCosts() && !encoder.supportsTurnCosts()) {\n+                throw new IllegalArgumentException(\"The profile '\" + profile.getName() + \"' was configured with \" +\n+                        \"'turn_costs=true', but the corresponding vehicle '\" + profile.getVehicle() + \"' does not support turn costs.\" +\n+                        \"\\nYou need to add `|turn_costs=true` to the vehicle in `graph.flag_encoders`\");\n+            }\n+            try {\n+                createWeighting(new HintsMap(profile.getWeighting()), encoder, NO_TURN_COST_PROVIDER);", "originalCommit": "d6fef6698125b1350b6d55d27b892b9eb8890c63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc3Njc3OQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r416776779", "bodyText": "Well yes the weighting is only created to check whether or not this is possible. Simply creating it seems like the easiest (and certainly most complete) way to do this. For example with custom weightings in #1776 we also get an error if something is wrong about the custom model YAML configuration this way. Then again, like you observed, there is no real need to create the weighting. Do you see a problem with this?", "author": "easbar", "createdAt": "2020-04-28T17:01:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY5MjI1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExODc1Mw==", "url": "https://github.com/graphhopper/graphhopper/pull/1922#discussion_r417118753", "bodyText": "For example with custom weightings in #1776 we also get an error if something is wrong about the custom model YAML configuration this way.\n\nAh I see, that's a strong point to do this and makes sense.\n\nThen again, like you observed, there is no real need to create the weighting. Do you see a problem with this?\n\nThis created an exception for me. I use a weighting that requires certain parameters in the HintsMap, otherwise an exception is thrown. It is easy enough to fix, so that's no problem.", "author": "boldtrn", "createdAt": "2020-04-29T07:31:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY5MjI1MQ=="}], "type": "inlineReview"}]}