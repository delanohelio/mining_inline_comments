{"pr_number": 1880, "pr_title": "SpatialRule interface rework", "pr_createdAt": "2020-01-29T16:26:06Z", "pr_url": "https://github.com/graphhopper/graphhopper/pull/1880", "timeline": [{"oid": "a50b674aa2dc2d1e2a49699a2cb682142a5ebb15", "url": "https://github.com/graphhopper/graphhopper/commit/a50b674aa2dc2d1e2a49699a2cb682142a5ebb15", "message": "Allow SpatialRules to overwrite exisiting values", "committedDate": "2020-02-10T08:36:03Z", "type": "forcePushed"}, {"oid": "f5fc729c61e10fc5b54cd124e555d5ea08f0b919", "url": "https://github.com/graphhopper/graphhopper/commit/f5fc729c61e10fc5b54cd124e555d5ea08f0b919", "message": "Allow SpatialRules to overwrite exisiting values", "committedDate": "2020-02-10T08:49:24Z", "type": "forcePushed"}, {"oid": "9c32c1731350bdbfbb4f93429e0c1535e02f499a", "url": "https://github.com/graphhopper/graphhopper/commit/9c32c1731350bdbfbb4f93429e0c1535e02f499a", "message": "Allow SpatialRules to overwrite exisiting values", "committedDate": "2020-02-10T09:03:38Z", "type": "forcePushed"}, {"oid": "eeadcd56dc8cfd1bb4e7a7dce5fffc31957704f8", "url": "https://github.com/graphhopper/graphhopper/commit/eeadcd56dc8cfd1bb4e7a7dce5fffc31957704f8", "message": "Retrieve maxspeed dependent on the transportation mode", "committedDate": "2020-02-13T13:00:10Z", "type": "forcePushed"}, {"oid": "6b033e559a214da32a850c582c116fcc174e1069", "url": "https://github.com/graphhopper/graphhopper/commit/6b033e559a214da32a850c582c116fcc174e1069", "message": "Retrieve maxspeed dependent on the transportation mode", "committedDate": "2020-02-17T09:04:52Z", "type": "forcePushed"}, {"oid": "a7c8cd04b11e506771075d4011b3f5ff4439d749", "url": "https://github.com/graphhopper/graphhopper/commit/a7c8cd04b11e506771075d4011b3f5ff4439d749", "message": "Enforce that subclasses implement `getId()`", "committedDate": "2020-02-24T08:44:16Z", "type": "commit"}, {"oid": "04cf3b0ae9c4958fa103fa04de9cde5316c4f76e", "url": "https://github.com/graphhopper/graphhopper/commit/04cf3b0ae9c4958fa103fa04de9cde5316c4f76e", "message": "Pass border polygons via the constructor", "committedDate": "2020-02-24T08:50:35Z", "type": "commit"}, {"oid": "93e46de711b3da0be77ea9e000108b363ebd52b6", "url": "https://github.com/graphhopper/graphhopper/commit/93e46de711b3da0be77ea9e000108b363ebd52b6", "message": "Merge DefaultSpatialRule into AbstractSpatialRule", "committedDate": "2020-02-24T08:53:17Z", "type": "commit"}, {"oid": "e0026d4be0d87c97f50152f9c02f1b9a57b9dbf6", "url": "https://github.com/graphhopper/graphhopper/commit/e0026d4be0d87c97f50152f9c02f1b9a57b9dbf6", "message": "Use RoadClass constants instead of Strings", "committedDate": "2020-02-24T08:53:17Z", "type": "commit"}, {"oid": "3b1013e9cac928332e3a848ff2a73e8e769498ab", "url": "https://github.com/graphhopper/graphhopper/commit/3b1013e9cac928332e3a848ff2a73e8e769498ab", "message": "Allow SpatialRules to overwrite exisiting values", "committedDate": "2020-02-24T08:53:17Z", "type": "commit"}, {"oid": "ecbda78dfab87239db598e444e4c9f2e7183303d", "url": "https://github.com/graphhopper/graphhopper/commit/ecbda78dfab87239db598e444e4c9f2e7183303d", "message": "Improve `AbstractSpatialRule.equals()`", "committedDate": "2020-02-24T08:53:17Z", "type": "commit"}, {"oid": "ddcb8605a3d2c203902c7504b1dce2c205a9468e", "url": "https://github.com/graphhopper/graphhopper/commit/ddcb8605a3d2c203902c7504b1dce2c205a9468e", "message": "Properly differentiate between fallback/override handling", "committedDate": "2020-02-24T08:53:17Z", "type": "commit"}, {"oid": "aae59500050978d3a157fe74cf822fdf7fecad29", "url": "https://github.com/graphhopper/graphhopper/commit/aae59500050978d3a157fe74cf822fdf7fecad29", "message": "Retrieve maxspeed dependent on the transportation mode", "committedDate": "2020-02-24T08:53:17Z", "type": "commit"}, {"oid": "f32f4b0c178e8491687d4ef85346566c3de82585", "url": "https://github.com/graphhopper/graphhopper/commit/f32f4b0c178e8491687d4ef85346566c3de82585", "message": "Remove getDefault methods from interface", "committedDate": "2020-02-24T08:53:17Z", "type": "forcePushed"}, {"oid": "eebb99b11233b6f222c7ca650c7775b9975cbda2", "url": "https://github.com/graphhopper/graphhopper/commit/eebb99b11233b6f222c7ca650c7775b9975cbda2", "message": "Remove getDefault methods from interface", "committedDate": "2020-02-25T08:25:00Z", "type": "commit"}, {"oid": "eebb99b11233b6f222c7ca650c7775b9975cbda2", "url": "https://github.com/graphhopper/graphhopper/commit/eebb99b11233b6f222c7ca650c7775b9975cbda2", "message": "Remove getDefault methods from interface", "committedDate": "2020-02-25T08:25:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4NTY2NQ==", "url": "https://github.com/graphhopper/graphhopper/pull/1880#discussion_r383785665", "bodyText": "Should we make it compatible with our MaxSpeed EncodedValue and return MaxSpeed.UNLIMITED_SIGN_SPEED?", "author": "karussell", "createdAt": "2020-02-25T10:20:29Z", "path": "core/src/main/java/com/graphhopper/routing/util/spatialrules/countries/GermanySpatialRule.java", "diffHunk": "@@ -17,46 +17,81 @@\n  */\n package com.graphhopper.routing.util.spatialrules.countries;\n \n+import java.util.List;\n+\n+import org.locationtech.jts.geom.Polygon;\n+\n import com.graphhopper.routing.profiles.Country;\n import com.graphhopper.routing.profiles.RoadAccess;\n-import com.graphhopper.routing.util.spatialrules.DefaultSpatialRule;\n+import com.graphhopper.routing.profiles.RoadClass;\n+import com.graphhopper.routing.util.spatialrules.AbstractSpatialRule;\n import com.graphhopper.routing.util.spatialrules.TransportationMode;\n \n /**\n  * Defines the default rules for German roads\n  *\n  * @author Robin Boldt\n  */\n-public class GermanySpatialRule extends DefaultSpatialRule {\n+public class GermanySpatialRule extends AbstractSpatialRule {\n+    \n+    public GermanySpatialRule(List<Polygon> borders) {\n+        super(borders);\n+    }\n \n     /**\n      * Germany contains roads with no speed limit. For these roads, this method will return Integer.MAX_VALUE.\n      * Your implementation should be able to handle these cases.\n      */\n     @Override\n-    public double getMaxSpeed(String highwayTag, double _default) {\n+    public double getMaxSpeed(RoadClass roadClass, TransportationMode transport, double currentMaxSpeed) {\n+        if (currentMaxSpeed > 0 || transport != TransportationMode.MOTOR_VEHICLE) {\n+            return currentMaxSpeed;\n+        }\n+        \n         // As defined in: https://wiki.openstreetmap.org/wiki/OSM_tags_for_routing/Maxspeed#Motorcar\n-        switch (highwayTag) {\n-            case \"motorway\":\n-            case \"trunk\":\n+        switch (roadClass) {\n+            case MOTORWAY:\n+            case TRUNK:\n                 return Integer.MAX_VALUE;", "originalCommit": "eebb99b11233b6f222c7ca650c7775b9975cbda2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6a717692b9e70ed612fe59a049c7f3ea9c6aa8b9", "url": "https://github.com/graphhopper/graphhopper/commit/6a717692b9e70ed612fe59a049c7f3ea9c6aa8b9", "message": "Return `MaxSpeed.UNLIMITED_SIGN_SPEED` instead of `Integer.MAX_VALUE`", "committedDate": "2020-02-25T10:28:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxMjIxMw==", "url": "https://github.com/graphhopper/graphhopper/pull/1880#discussion_r383812213", "bodyText": "Thanks again for adapting the code! It seems we also documented this Integer.MAX_VALUE here in the javadocs. Would you mind adapting also this :) ? Last thing I hope ;)", "author": "karussell", "createdAt": "2020-02-25T11:08:39Z", "path": "core/src/main/java/com/graphhopper/routing/util/spatialrules/countries/GermanySpatialRule.java", "diffHunk": "@@ -17,46 +17,82 @@\n  */\n package com.graphhopper.routing.util.spatialrules.countries;\n \n+import java.util.List;\n+\n+import org.locationtech.jts.geom.Polygon;\n+\n import com.graphhopper.routing.profiles.Country;\n+import com.graphhopper.routing.profiles.MaxSpeed;\n import com.graphhopper.routing.profiles.RoadAccess;\n-import com.graphhopper.routing.util.spatialrules.DefaultSpatialRule;\n+import com.graphhopper.routing.profiles.RoadClass;\n+import com.graphhopper.routing.util.spatialrules.AbstractSpatialRule;\n import com.graphhopper.routing.util.spatialrules.TransportationMode;\n \n /**\n  * Defines the default rules for German roads\n  *\n  * @author Robin Boldt\n  */\n-public class GermanySpatialRule extends DefaultSpatialRule {\n+public class GermanySpatialRule extends AbstractSpatialRule {\n+    \n+    public GermanySpatialRule(List<Polygon> borders) {\n+        super(borders);\n+    }\n \n     /**\n      * Germany contains roads with no speed limit. For these roads, this method will return Integer.MAX_VALUE.\n      * Your implementation should be able to handle these cases.", "originalCommit": "6a717692b9e70ed612fe59a049c7f3ea9c6aa8b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c30955fdd01843e677ae40badea4897aed55e3ba", "url": "https://github.com/graphhopper/graphhopper/commit/c30955fdd01843e677ae40badea4897aed55e3ba", "message": "Adapt Javadoc for `MaxSpeed.UNLIMITED_SIGN_SPEED`", "committedDate": "2020-02-25T12:28:29Z", "type": "commit"}]}