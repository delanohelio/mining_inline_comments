{"pr_number": 2057, "pr_title": "Remove routing templates, remove RoutingAlgorithmFactory interface for CH", "pr_createdAt": "2020-06-06T13:55:20Z", "pr_url": "https://github.com/graphhopper/graphhopper/pull/2057", "timeline": [{"oid": "7dd5d67076e80a51bfe098b28df72f68c69c71c6", "url": "https://github.com/graphhopper/graphhopper/commit/7dd5d67076e80a51bfe098b28df72f68c69c71c6", "message": "Big refactoring to make CHGraph an implementation detail of the route calculation, remove routing templates as well", "committedDate": "2020-05-31T21:19:02Z", "type": "commit"}, {"oid": "485625c9bb3c0271c6a44440199046f6b2d20f22", "url": "https://github.com/graphhopper/graphhopper/commit/485625c9bb3c0271c6a44440199046f6b2d20f22", "message": "Respect algorithm parameter also for alternatives, clean up a bit", "committedDate": "2020-06-01T07:39:21Z", "type": "commit"}, {"oid": "c223f61271ea017d6b810f91de2f1ed42acdbebd", "url": "https://github.com/graphhopper/graphhopper/commit/c223f61271ea017d6b810f91de2f1ed42acdbebd", "message": "Fix for LM+empty algo", "committedDate": "2020-06-01T11:39:35Z", "type": "commit"}, {"oid": "d8c5b9b5932649a7df9364ac72c805f1793b97e9", "url": "https://github.com/graphhopper/graphhopper/commit/d8c5b9b5932649a7df9364ac72c805f1793b97e9", "message": "Fix also for simple algo factory", "committedDate": "2020-06-01T21:33:38Z", "type": "commit"}, {"oid": "edece63251684ea16073ea5c16c97c9c34c62fc1", "url": "https://github.com/graphhopper/graphhopper/commit/edece63251684ea16073ea5c16c97c9c34c62fc1", "message": "Include sources for GitHub Packages deployments", "committedDate": "2020-06-02T06:54:37Z", "type": "commit"}, {"oid": "1c57aaf7dedbe8696e2b46d7aeb2abf6aef80fed", "url": "https://github.com/graphhopper/graphhopper/commit/1c57aaf7dedbe8696e2b46d7aeb2abf6aef80fed", "message": "Extract PathCalculator interface", "committedDate": "2020-06-02T16:54:20Z", "type": "commit"}, {"oid": "1ecd26ea967306fc89900faee815cbf330740bf3", "url": "https://github.com/graphhopper/graphhopper/commit/1ecd26ea967306fc89900faee815cbf330740bf3", "message": "Inline template package", "committedDate": "2020-06-02T16:56:23Z", "type": "commit"}, {"oid": "32ad2fb059836ef3ab26b949922f7e1d089d00a2", "url": "https://github.com/graphhopper/graphhopper/commit/32ad2fb059836ef3ab26b949922f7e1d089d00a2", "message": "Add measurement for via-routing", "committedDate": "2020-06-02T17:58:20Z", "type": "commit"}, {"oid": "0e92a825e0839e94d1ba43a33971fb156441f59a", "url": "https://github.com/graphhopper/graphhopper/commit/0e92a825e0839e94d1ba43a33971fb156441f59a", "message": "Clean up some remaining todos", "committedDate": "2020-06-02T19:09:38Z", "type": "commit"}, {"oid": "65bb269f5217b78c2a3026e874da8543d107456c", "url": "https://github.com/graphhopper/graphhopper/commit/65bb269f5217b78c2a3026e874da8543d107456c", "message": "Fix", "committedDate": "2020-06-03T05:45:45Z", "type": "commit"}, {"oid": "6c9a47a2a0e2596903ed639f0e31440cd723b9e6", "url": "https://github.com/graphhopper/graphhopper/commit/6c9a47a2a0e2596903ed639f0e31440cd723b9e6", "message": "Merge branch 'master' into hide_ch_graph", "committedDate": "2020-06-04T14:39:54Z", "type": "commit"}, {"oid": "2d93005f0d4f3c23b01fafcd8e7975b5d19fd98a", "url": "https://github.com/graphhopper/graphhopper/commit/2d93005f0d4f3c23b01fafcd8e7975b5d19fd98a", "message": "Merge branch 'master' into via_measurement", "committedDate": "2020-06-04T15:47:25Z", "type": "commit"}, {"oid": "cac1006828c7fd2892329bc9cd4d3dfe731dcf09", "url": "https://github.com/graphhopper/graphhopper/commit/cac1006828c7fd2892329bc9cd4d3dfe731dcf09", "message": "Merge branch 'master' into via_measurement", "committedDate": "2020-06-05T06:07:22Z", "type": "commit"}, {"oid": "a376cff699240c81e06bafe19124a63ff1d79259", "url": "https://github.com/graphhopper/graphhopper/commit/a376cff699240c81e06bafe19124a63ff1d79259", "message": "Merge branch 'master' into hide_ch_graph", "committedDate": "2020-06-05T06:07:55Z", "type": "commit"}, {"oid": "bb527edab61b7b5573e40522a3e792a4493b9ecb", "url": "https://github.com/graphhopper/graphhopper/commit/bb527edab61b7b5573e40522a3e792a4493b9ecb", "message": "Merge branch 'master' into via_measurement", "committedDate": "2020-06-05T19:13:30Z", "type": "commit"}, {"oid": "c0e7afdf5620f3f09d3cb785de00198d7bfc1b42", "url": "https://github.com/graphhopper/graphhopper/commit/c0e7afdf5620f3f09d3cb785de00198d7bfc1b42", "message": "Merge branch 'master' into hide_ch_graph\n\n# Conflicts:\n#\tcore/src/main/java/com/graphhopper/routing/Router.java\n#\tcore/src/main/java/com/graphhopper/routing/RoutingAlgorithmFactorySimple.java\n#\tcore/src/main/java/com/graphhopper/routing/ch/CHRoutingAlgorithmFactory.java\n#\tcore/src/main/java/com/graphhopper/routing/lm/LMRoutingAlgorithmFactory.java", "committedDate": "2020-06-05T19:20:10Z", "type": "commit"}, {"oid": "d77d3cbfa022239ecb655eb13868f761b221d0c8", "url": "https://github.com/graphhopper/graphhopper/commit/d77d3cbfa022239ecb655eb13868f761b221d0c8", "message": "Merge branch 'via_measurement' into hide_ch_graph", "committedDate": "2020-06-05T19:21:28Z", "type": "commit"}, {"oid": "b028238e34e896333cbe4f4f2b1956af7acc1ebf", "url": "https://github.com/graphhopper/graphhopper/commit/b028238e34e896333cbe4f4f2b1956af7acc1ebf", "message": "Merge branch 'master' into via_measurement", "committedDate": "2020-06-05T19:34:53Z", "type": "commit"}, {"oid": "665da36713768acca185e6828a40f1dcd451369b", "url": "https://github.com/graphhopper/graphhopper/commit/665da36713768acca185e6828a40f1dcd451369b", "message": "Merge branch 'via_measurement' into hide_ch_graph", "committedDate": "2020-06-05T19:35:03Z", "type": "commit"}, {"oid": "243472851c9f979e3252d95a38763a210e856023", "url": "https://github.com/graphhopper/graphhopper/commit/243472851c9f979e3252d95a38763a210e856023", "message": "Remove get/setAlgoOpts from PathCalculator interface", "committedDate": "2020-06-06T07:47:46Z", "type": "commit"}, {"oid": "42487d43f255f5e21064b18ab596c6d45e423129", "url": "https://github.com/graphhopper/graphhopper/commit/42487d43f255f5e21064b18ab596c6d45e423129", "message": "Minor cleanup", "committedDate": "2020-06-06T07:53:23Z", "type": "commit"}, {"oid": "510c2e87d83415747791c0f07c0e36ae40a441d1", "url": "https://github.com/graphhopper/graphhopper/commit/510c2e87d83415747791c0f07c0e36ae40a441d1", "message": "Move setting of algorithm for round trip", "committedDate": "2020-06-06T08:18:51Z", "type": "commit"}, {"oid": "bcd8eb668e1f72ac1e2ffb0b8374f1fe42facae0", "url": "https://github.com/graphhopper/graphhopper/commit/bcd8eb668e1f72ac1e2ffb0b8374f1fe42facae0", "message": "Remove RoutingAlgorithmFactory interface from CHRoutingAlgorithmFactory", "committedDate": "2020-06-06T08:21:26Z", "type": "commit"}, {"oid": "0076e973e9b98ff0cf586558e99b2676fd70ae6f", "url": "https://github.com/graphhopper/graphhopper/commit/0076e973e9b98ff0cf586558e99b2676fd70ae6f", "message": "Use PMap instead of AlgoOpts for CHRoutingAlgorithmFactory", "committedDate": "2020-06-06T10:17:17Z", "type": "commit"}, {"oid": "123abd922680667e0dcd616b454082780e2afb45", "url": "https://github.com/graphhopper/graphhopper/commit/123abd922680667e0dcd616b454082780e2afb45", "message": "Merge branch 'master' into hide_ch_graph\n\n# Conflicts:\n#\ttools/src/main/java/com/graphhopper/tools/Measurement.java", "committedDate": "2020-06-06T10:34:04Z", "type": "commit"}, {"oid": "8ab3445907a8b3d4302bbcca3af6c6f5e4feff93", "url": "https://github.com/graphhopper/graphhopper/commit/8ab3445907a8b3d4302bbcca3af6c6f5e4feff93", "message": "Merge branch 'master' into hide_ch_graph\n\n# Conflicts:\n#\tcore/src/main/java/com/graphhopper/routing/Router.java\n#\tcore/src/main/java/com/graphhopper/routing/template/RoundTripRoutingTemplate.java\n#\tcore/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java\n#\tcore/src/test/java/com/graphhopper/routing/ch/CHTurnCostTest.java", "committedDate": "2020-06-06T11:41:14Z", "type": "commit"}, {"oid": "3a366ba8e3c9f014e6e98936ee27e7f621dca6fb", "url": "https://github.com/graphhopper/graphhopper/commit/3a366ba8e3c9f014e6e98936ee27e7f621dca6fb", "message": "Minor/docs", "committedDate": "2020-06-06T11:54:08Z", "type": "commit"}, {"oid": "ee613b1352673023367f0dc8b14788a7b7887a36", "url": "https://github.com/graphhopper/graphhopper/commit/ee613b1352673023367f0dc8b14788a7b7887a36", "message": "Move shiftEdgeId method", "committedDate": "2020-06-06T12:15:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzMTUxNQ==", "url": "https://github.com/graphhopper/graphhopper/pull/2057#discussion_r437431515", "bodyText": "We should remove MultiException from web-api module now (?) and avoid two identical named classes.", "author": "karussell", "createdAt": "2020-06-09T13:46:34Z", "path": "core/src/main/java/com/graphhopper/routing/MultiException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.graphhopper.routing;\n+\n+import java.util.List;\n+\n+public class MultiException extends RuntimeException {", "originalCommit": "ee613b1352673023367f0dc8b14788a7b7887a36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY4ODc2OA==", "url": "https://github.com/graphhopper/graphhopper/pull/2057#discussion_r437688768", "bodyText": "How would you remove it? Its still being used. This new MultiException is also a bit of a workaround only used so we are able to return all points not found.", "author": "easbar", "createdAt": "2020-06-09T20:09:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzMTUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyMDQ4OQ==", "url": "https://github.com/graphhopper/graphhopper/pull/2057#discussion_r437720489", "bodyText": "We could get rid of it by returning some kind of Result type (that includes a list of errors) for ViaRouting#lookup as well... Or we use a less generic name like MultiPointsNotFoundException and catch it right after calling ViaRouting#lookup.", "author": "easbar", "createdAt": "2020-06-09T21:01:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzMTUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEzMjE2NA==", "url": "https://github.com/graphhopper/graphhopper/pull/2057#discussion_r438132164", "bodyText": "Couldn't we always use this new com.graphhopper.routing.MultiException class instead of com.graphhopper.MultiException? (see https://github.com/graphhopper/graphhopper/blob/master/web-api/src/main/java/com/graphhopper/MultiException.java)", "author": "karussell", "createdAt": "2020-06-10T13:43:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzMTUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0NTA4Nw==", "url": "https://github.com/graphhopper/graphhopper/pull/2057#discussion_r438145087", "bodyText": "The reason I did not want to use the existing MultiException class is that the existing one is used at the web boundary (there is a MultiExceptionMapper), but all I wanted to achieve here is to make it possible for ViaRouting#lookup to report that multiple points could not be found. We could just call it MultiPointsNotFoundException, but since its just a list of Throwable this does not seem to be right either. We could make it more specific and attach to it the point indices and point coordinates instead, but this seemed a bit overkill at first (but now I think maybe this would be a bit better).", "author": "easbar", "createdAt": "2020-06-10T14:00:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzMTUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIzNzk1Mw==", "url": "https://github.com/graphhopper/graphhopper/pull/2057#discussion_r438237953", "bodyText": "The reason I did not want to use the existing MultiException class is that the existing one is used at the web boundary\n\nWhat do you mean here? What would be the problem if web-api uses a core class instead?\n\nWe could just call it MultiPointsNotFoundException, but since its just a list of Throwable this does not seem to be right either.\n\nYes, this sounds wrong.\nHow was this done before the refactoring?", "author": "karussell", "createdAt": "2020-06-10T16:02:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzMTUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI0MTkwMw==", "url": "https://github.com/graphhopper/graphhopper/pull/2057#discussion_r438241903", "bodyText": "Ah you mean the other way around: Use the new MultiException also for web... Sorry I misread this. Ok yes we could also do this. I have already renamed it to MultiplePointsNotFound exception carrying the point indices of the points that were not found though. How do you like this? For example if we wrote a test for ViaRouting#lookup I think this would be useful.\n\nHow was this done before the refactoring?\n\nBefore the refactoring the GHResponse object was accessible by the code that does the lookup and the errors were added to it right away (but then the calling code had to check for errors and return). So there was no boundary at all which I think is bad (from a testing perspective for example).", "author": "easbar", "createdAt": "2020-06-10T16:08:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzMTUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI3MTk5OQ==", "url": "https://github.com/graphhopper/graphhopper/pull/2057#discussion_r438271999", "bodyText": "I have already renamed it to MultiplePointsNotFound exception carrying the point indices of the points that were not found though. How do you like this?\n\nLooks also fine. Ah ... shouldn't it be possible to remove the \"public\" of the class?\n\nBefore the refactoring the GHResponse object was accessible by the code that does the lookup and the errors were added to it right away (but then the calling code had to check for errors and return).\n\nOk, makes sense.", "author": "karussell", "createdAt": "2020-06-10T16:54:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzMTUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI3NjY3Ng==", "url": "https://github.com/graphhopper/graphhopper/pull/2057#discussion_r438276676", "bodyText": "Looks also fine. Ah ... shouldn't it be possible to remove the \"public\" of the class?\n\nAh yes, its in this big routing package, but still better than public \ud83d\udc4d", "author": "easbar", "createdAt": "2020-06-10T17:01:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzMTUxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzMzQxOA==", "url": "https://github.com/graphhopper/graphhopper/pull/2057#discussion_r437433418", "bodyText": "I know naming is hard but having it named PathCalculator without implementing PathCalculator seems suboptimal.\nOr maybe we make this class and the static method only package protected and hide it a bit from public usage?", "author": "karussell", "createdAt": "2020-06-09T13:48:24Z", "path": "core/src/main/java/com/graphhopper/routing/PathCalculatorWithAvoidedEdges.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.graphhopper.routing;\n+\n+import com.carrotsearch.hppc.IntSet;\n+import com.graphhopper.routing.weighting.AvoidEdgesWeighting;\n+\n+/**\n+ * This path calculator allows calculating a path with a set of avoided edges\n+ */\n+public class PathCalculatorWithAvoidedEdges {", "originalCommit": "ee613b1352673023367f0dc8b14788a7b7887a36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY5MjQ1Mg==", "url": "https://github.com/graphhopper/graphhopper/pull/2057#discussion_r437692452", "bodyText": "Ok good idea I made it a private inner class in RoundTripRouting. I do not have an idea for a much better name though :) I just named it RoundTripCalculator.", "author": "easbar", "createdAt": "2020-06-09T20:16:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzMzQxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzOTc1Ng==", "url": "https://github.com/graphhopper/graphhopper/pull/2057#discussion_r437439756", "bodyText": "Should we create a common \"Result\" class (it is very similar anyway), so we would avoid repeating these two lines here? Or do you plan to move other objects into it?\nWe could even refactor the PathCalculator interface and remove the getter methods and only return Result for calcPaths.", "author": "karussell", "createdAt": "2020-06-09T13:54:11Z", "path": "core/src/main/java/com/graphhopper/routing/Router.java", "diffHunk": "@@ -102,111 +102,210 @@ public Router(GraphHopperStorage ghStorage, LocationIndex locationIndex,\n             if (!profile.isTurnCosts() && !request.getCurbsides().isEmpty())\n                 throw new IllegalArgumentException(\"To make use of the \" + CURBSIDE + \" parameter you need to use a profile that supports turn costs\" +\n                         \"\\nThe following profiles do support turn costs: \" + getTurnCostProfiles());\n-\n             // todo later: should we be able to control this using the edge_based parameter?\n-            TraversalMode tMode = profile.isTurnCosts() ? TraversalMode.EDGE_BASED : TraversalMode.NODE_BASED;\n-            RoutingAlgorithmFactory algorithmFactory = getAlgorithmFactory(profile.getName(), disableCH, disableLM);\n-            Weighting weighting;\n-            Graph graph = ghStorage;\n-            if (chEnabled && !disableCH) {\n-                if (!(algorithmFactory instanceof CHRoutingAlgorithmFactory))\n-                    throw new IllegalStateException(\"Although CH was enabled a non-CH algorithm factory was returned \" + algorithmFactory);\n-\n-                if (request.getHints().has(Parameters.Routing.BLOCK_AREA))\n-                    throw new IllegalArgumentException(\"When CH is enabled the \" + Parameters.Routing.BLOCK_AREA + \" cannot be specified\");\n-\n-                CHConfig chConfig = ((CHRoutingAlgorithmFactory) algorithmFactory).getCHConfig();\n-                weighting = chConfig.getWeighting();\n-                graph = chGraphs.get(chConfig.getName());\n-                // we know this exists because we already got the algorithm factory this way -> will be cleaned up soon\n-            } else {\n-                checkNonChMaxWaypointDistance(request.getPoints());\n-                final int uTurnCostsInt = request.getHints().getInt(Parameters.Routing.U_TURN_COSTS, INFINITE_U_TURN_COSTS);\n-                if (uTurnCostsInt != INFINITE_U_TURN_COSTS && !tMode.isEdgeBased()) {\n-                    throw new IllegalArgumentException(\"Finite u-turn costs can only be used for edge-based routing, you need to use a profile that\" +\n-                            \" supports turn costs. Currently the following profiles that support turn costs are available: \" + getTurnCostProfiles());\n-                }\n-                FlagEncoder encoder = encodingManager.getEncoder(profile.getVehicle());\n-                weighting = weightingFactory.createWeighting(profile, request.getHints(), false);\n-                if (request.getHints().has(Parameters.Routing.BLOCK_AREA))\n-                    weighting = new BlockAreaWeighting(weighting, GraphEdgeIdFinder.createBlockArea(ghStorage, locationIndex,\n-                            request.getPoints(), request.getHints(), DefaultEdgeFilter.allEdges(encoder)));\n+            TraversalMode traversalMode = profile.isTurnCosts() ? TraversalMode.EDGE_BASED : TraversalMode.NODE_BASED;\n+            final int uTurnCostsInt = request.getHints().getInt(Parameters.Routing.U_TURN_COSTS, INFINITE_U_TURN_COSTS);\n+            if (uTurnCostsInt != INFINITE_U_TURN_COSTS && !traversalMode.isEdgeBased()) {\n+                throw new IllegalArgumentException(\"Finite u-turn costs can only be used for edge-based routing, you need to use a profile that\" +\n+                        \" supports turn costs. Currently the following profiles that support turn costs are available: \" + getTurnCostProfiles());\n             }\n-            ghRsp.addDebugInfo(\"tmode:\" + tMode.toString());\n-\n-            RoutingTemplate routingTemplate = createRoutingTemplate(request, ghRsp, request.getAlgorithm(), weighting);\n-\n-            StopWatch sw = new StopWatch().start();\n-            List<QueryResult> qResults = routingTemplate.lookup(request.getPoints());\n-            ghRsp.addDebugInfo(\"idLookup:\" + sw.stop().getSeconds() + \"s\");\n-            if (ghRsp.hasErrors())\n-                return Collections.emptyList();\n-\n-            QueryGraph queryGraph = QueryGraph.create(graph, qResults);\n+            ghRsp.addDebugInfo(\"traversal-mode:\" + traversalMode.toString());\n+            final boolean passThrough = getPassThrough(request.getHints());\n+            final boolean forceCurbsides = request.getHints().getBool(FORCE_CURBSIDE, true);\n             int maxVisitedNodesForRequest = request.getHints().getInt(Parameters.Routing.MAX_VISITED_NODES, routerConfig.getMaxVisitedNodes());\n             if (maxVisitedNodesForRequest > routerConfig.getMaxVisitedNodes())\n                 throw new IllegalArgumentException(\"The max_visited_nodes parameter has to be below or equal to:\" + routerConfig.getMaxVisitedNodes());\n \n+            // determine weighting\n+            final boolean useCH = chEnabled && !disableCH;\n+            Weighting weighting = createWeighting(profile, request.getHints(), request.getPoints(), useCH);\n+\n             AlgorithmOptions algoOpts = AlgorithmOptions.start().\n                     algorithm(request.getAlgorithm()).\n-                    traversalMode(tMode).\n+                    traversalMode(traversalMode).\n                     weighting(weighting).\n                     maxVisitedNodes(maxVisitedNodesForRequest).\n                     hints(request.getHints()).\n                     build();\n \n-            // do the actual route calculation !\n-            List<Path> altPaths = routingTemplate.calcPaths(queryGraph, algorithmFactory, algoOpts);\n-\n-            boolean tmpEnableInstructions = request.getHints().getBool(Parameters.Routing.INSTRUCTIONS, encodingManager.isEnableInstructions());\n-            boolean tmpCalcPoints = request.getHints().getBool(Parameters.Routing.CALC_POINTS, routerConfig.isCalcPoints());\n-            double wayPointMaxDistance = request.getHints().getDouble(Parameters.Routing.WAY_POINT_MAX_DISTANCE, 1d);\n-\n-            DouglasPeucker peucker = new DouglasPeucker().setMaxDistance(wayPointMaxDistance);\n-            PathMerger pathMerger = new PathMerger(queryGraph.getBaseGraph(), weighting).\n-                    setCalcPoints(tmpCalcPoints).\n-                    setDouglasPeucker(peucker).\n-                    setEnableInstructions(tmpEnableInstructions).\n-                    setPathDetailsBuilders(pathDetailsBuilderFactory, request.getPathDetails()).\n-                    setSimplifyResponse(routerConfig.isSimplifyResponse() && wayPointMaxDistance > 0);\n-\n-            if (!request.getHeadings().isEmpty())\n-                pathMerger.setFavoredHeading(request.getHeadings().get(0));\n-\n-            routingTemplate.finish(pathMerger, translationMap.getWithFallBack(request.getLocale()));\n-            return altPaths;\n+            if (ROUND_TRIP.equalsIgnoreCase(request.getAlgorithm())) {\n+                // ROUND TRIP\n+                StopWatch sw = new StopWatch().start();\n+                double startHeading = request.getHeadings().isEmpty() ? Double.NaN : request.getHeadings().get(0);\n+                RoundTripRouting.Params params = new RoundTripRouting.Params(request.getHints(), startHeading, routerConfig.getMaxRoundTripRetries());\n+                List<QueryResult> qResults = RoundTripRouting.lookup(request.getPoints(), weighting, locationIndex, params);\n+                ghRsp.addDebugInfo(\"idLookup:\" + sw.stop().getSeconds() + \"s\");\n+\n+                // use A* for round trips\n+                AlgorithmOptions roundTripAlgoOpts = AlgorithmOptions\n+                        .start(algoOpts)\n+                        .algorithm(Parameters.Algorithms.ASTAR_BI)\n+                        .build();\n+                roundTripAlgoOpts.getHints().putObject(Parameters.Algorithms.AStarBi.EPSILON, 2);\n+                FlexiblePathCalculator pathCalculator = createFlexiblePathCalculator(qResults, profile, roundTripAlgoOpts, disableLM);\n+                QueryGraph queryGraph = QueryGraph.create(ghStorage, qResults);\n+\n+                PathCalculatorWithAvoidedEdges roundTripPathCalculator = new PathCalculatorWithAvoidedEdges(pathCalculator);\n+                RoundTripRouting.Result result = RoundTripRouting.calcPaths(qResults, roundTripPathCalculator);\n+                // we merge the different legs of the roundtrip into one response path\n+                ResponsePath responsePath = concatenatePaths(request, weighting, queryGraph, result.paths, getWaypoints(qResults));\n+                ghRsp.add(responsePath);\n+                ghRsp.getHints().putObject(\"visited_nodes.sum\", result.visitedNodes);\n+                ghRsp.getHints().putObject(\"visited_nodes.average\", (float) result.visitedNodes / (qResults.size() - 1));\n+                return result.paths;\n+            } else if (ALT_ROUTE.equalsIgnoreCase(request.getAlgorithm())) {\n+                // ALTERNATIVE ROUTES\n+                if (request.getPoints().size() > 2)\n+                    throw new IllegalArgumentException(\"Currently alternative routes work only with start and end point. You tried to use: \" + request.getPoints().size() + \" points\");\n+                StopWatch sw = new StopWatch().start();\n+                List<QueryResult> qResults = ViaRouting.lookup(encodingManager, request.getPoints(), weighting, locationIndex, request.getSnapPreventions(), request.getPointHints());\n+                ghRsp.addDebugInfo(\"idLookup:\" + sw.stop().getSeconds() + \"s\");\n+                PathCalculator pathCalculator = createPathCalculator(qResults, profile, algoOpts, disableCH, disableLM);\n+                QueryGraph queryGraph = QueryGraph.create(ghStorage, qResults);\n+\n+                if (passThrough)\n+                    throw new IllegalArgumentException(\"Alternative paths and \" + PASS_THROUGH + \" at the same time is currently not supported\");\n+                if (!request.getCurbsides().isEmpty())\n+                    throw new IllegalArgumentException(\"Alternative paths do not support the \" + CURBSIDE + \" parameter yet\");\n+\n+                ViaRouting.Result result = ViaRouting.calcPaths(request.getPoints(), queryGraph, qResults, weighting.getFlagEncoder().getAccessEnc(), pathCalculator, request.getCurbsides(), forceCurbsides, request.getHeadings(), passThrough);\n+                if (result.paths.isEmpty())\n+                    throw new RuntimeException(\"Empty paths for alternative route calculation not expected\");\n+\n+                // each path represents a different alternative and we do the path merging for each of them\n+                PathMerger pathMerger = createPathMerger(request, weighting, queryGraph);\n+                for (Path path : result.paths) {\n+                    ResponsePath responsePath = new ResponsePath();\n+                    responsePath.setWaypoints(getWaypoints(qResults));\n+                    pathMerger.doWork(responsePath, Collections.singletonList(path), encodingManager, translationMap.getWithFallBack(request.getLocale()));\n+                    ghRsp.add(responsePath);\n+                }\n+                ghRsp.getHints().putObject(\"visited_nodes.sum\", result.visitedNodes);\n+                ghRsp.getHints().putObject(\"visited_nodes.average\", (float) result.visitedNodes / (qResults.size() - 1));\n+                return result.paths;\n+            } else {\n+                StopWatch sw = new StopWatch().start();\n+                List<QueryResult> qResults = ViaRouting.lookup(encodingManager, request.getPoints(), weighting, locationIndex, request.getSnapPreventions(), request.getPointHints());\n+                ghRsp.addDebugInfo(\"idLookup:\" + sw.stop().getSeconds() + \"s\");\n+                PathCalculator pathCalculator = createPathCalculator(qResults, profile, algoOpts, disableCH, disableLM);\n+                // (base) query graph used to resolve headings, curbsides etc. this is not necessarily the same thing as\n+                // the (possibly implementation specific) query graph used by PathCalculator\n+                QueryGraph queryGraph = QueryGraph.create(ghStorage, qResults);\n+                ViaRouting.Result result = ViaRouting.calcPaths(request.getPoints(), queryGraph, qResults, weighting.getFlagEncoder().getAccessEnc(), pathCalculator, request.getCurbsides(), forceCurbsides, request.getHeadings(), passThrough);\n+\n+                if (request.getPoints().size() != result.paths.size() + 1)\n+                    throw new RuntimeException(\"There should be exactly one more point than paths. points:\" + request.getPoints().size() + \", paths:\" + result.paths.size());\n+\n+                // here each path represents one leg of the via-route and we merge them all together into one response path\n+                ResponsePath responsePath = concatenatePaths(request, weighting, queryGraph, result.paths, getWaypoints(qResults));\n+                responsePath.addDebugInfo(result.debug);\n+                ghRsp.add(responsePath);\n+                ghRsp.getHints().putObject(\"visited_nodes.sum\", result.visitedNodes);\n+                ghRsp.getHints().putObject(\"visited_nodes.average\", (float) result.visitedNodes / (qResults.size() - 1));", "originalCommit": "ee613b1352673023367f0dc8b14788a7b7887a36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcxNzM0NA==", "url": "https://github.com/graphhopper/graphhopper/pull/2057#discussion_r437717344", "bodyText": "Returning some kind of Result type from PathCalculator makes a lot of sense to me yes. For RoundTripRouting and ViaRouting I am not so sure. Should they also use the same Result class we would use in PathCalculator then? And how do you want to avoid these two lines this way? At some point we have to put the stuff from the result into the GHResponse. Ah you mean when the Results are the same we can do the same in all three cases? Or should we go back to manipulating the GHResponse inside ViaRouting etc.? I was trying to reduce side effects here, but not sure about this (and also this wasn't the focus here/there is definitely room for improvements architecture-wise here). Should we use some kind of generic Result type for such purposes (something like a `class Result that can carry T=List plus a debug string and some hash map or something)?", "author": "easbar", "createdAt": "2020-06-09T20:57:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzOTc1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkzNjU2Mg==", "url": "https://github.com/graphhopper/graphhopper/pull/2057#discussion_r437936562", "bodyText": "I tried using a result type for PathCalculator here: 5c7c22d, but I am not sure if this is really an improvement. WDYT?", "author": "easbar", "createdAt": "2020-06-10T08:04:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzOTc1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEzMDMwOA==", "url": "https://github.com/graphhopper/graphhopper/pull/2057#discussion_r438130308", "bodyText": "Ah you mean when the Results are the same we can do the same in all three cases?\n\nYes, I meant only this and indeed I'm now unsure too if this is an improvement.", "author": "karussell", "createdAt": "2020-06-10T13:40:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzOTc1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIwMTQ4Mg==", "url": "https://github.com/graphhopper/graphhopper/pull/2057#discussion_r438201482", "bodyText": "Ok lets leave it as it is for now and consider this later again", "author": "easbar", "createdAt": "2020-06-10T15:13:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzOTc1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NTMwNA==", "url": "https://github.com/graphhopper/graphhopper/pull/2057#discussion_r437445304", "bodyText": "Can we somehow use this Router class (or something else in the future) to avoid the BlockAreaWeighting creation in SPTResource and IsochroneResource? (not really related to this PR)", "author": "karussell", "createdAt": "2020-06-09T14:00:08Z", "path": "core/src/main/java/com/graphhopper/routing/Router.java", "diffHunk": "@@ -102,111 +102,210 @@ public Router(GraphHopperStorage ghStorage, LocationIndex locationIndex,\n             if (!profile.isTurnCosts() && !request.getCurbsides().isEmpty())\n                 throw new IllegalArgumentException(\"To make use of the \" + CURBSIDE + \" parameter you need to use a profile that supports turn costs\" +\n                         \"\\nThe following profiles do support turn costs: \" + getTurnCostProfiles());\n-\n             // todo later: should we be able to control this using the edge_based parameter?\n-            TraversalMode tMode = profile.isTurnCosts() ? TraversalMode.EDGE_BASED : TraversalMode.NODE_BASED;\n-            RoutingAlgorithmFactory algorithmFactory = getAlgorithmFactory(profile.getName(), disableCH, disableLM);\n-            Weighting weighting;\n-            Graph graph = ghStorage;\n-            if (chEnabled && !disableCH) {\n-                if (!(algorithmFactory instanceof CHRoutingAlgorithmFactory))\n-                    throw new IllegalStateException(\"Although CH was enabled a non-CH algorithm factory was returned \" + algorithmFactory);\n-\n-                if (request.getHints().has(Parameters.Routing.BLOCK_AREA))\n-                    throw new IllegalArgumentException(\"When CH is enabled the \" + Parameters.Routing.BLOCK_AREA + \" cannot be specified\");\n-\n-                CHConfig chConfig = ((CHRoutingAlgorithmFactory) algorithmFactory).getCHConfig();\n-                weighting = chConfig.getWeighting();\n-                graph = chGraphs.get(chConfig.getName());\n-                // we know this exists because we already got the algorithm factory this way -> will be cleaned up soon\n-            } else {\n-                checkNonChMaxWaypointDistance(request.getPoints());\n-                final int uTurnCostsInt = request.getHints().getInt(Parameters.Routing.U_TURN_COSTS, INFINITE_U_TURN_COSTS);\n-                if (uTurnCostsInt != INFINITE_U_TURN_COSTS && !tMode.isEdgeBased()) {\n-                    throw new IllegalArgumentException(\"Finite u-turn costs can only be used for edge-based routing, you need to use a profile that\" +\n-                            \" supports turn costs. Currently the following profiles that support turn costs are available: \" + getTurnCostProfiles());\n-                }\n-                FlagEncoder encoder = encodingManager.getEncoder(profile.getVehicle());\n-                weighting = weightingFactory.createWeighting(profile, request.getHints(), false);\n-                if (request.getHints().has(Parameters.Routing.BLOCK_AREA))\n-                    weighting = new BlockAreaWeighting(weighting, GraphEdgeIdFinder.createBlockArea(ghStorage, locationIndex,\n-                            request.getPoints(), request.getHints(), DefaultEdgeFilter.allEdges(encoder)));\n+            TraversalMode traversalMode = profile.isTurnCosts() ? TraversalMode.EDGE_BASED : TraversalMode.NODE_BASED;\n+            final int uTurnCostsInt = request.getHints().getInt(Parameters.Routing.U_TURN_COSTS, INFINITE_U_TURN_COSTS);\n+            if (uTurnCostsInt != INFINITE_U_TURN_COSTS && !traversalMode.isEdgeBased()) {\n+                throw new IllegalArgumentException(\"Finite u-turn costs can only be used for edge-based routing, you need to use a profile that\" +\n+                        \" supports turn costs. Currently the following profiles that support turn costs are available: \" + getTurnCostProfiles());\n             }\n-            ghRsp.addDebugInfo(\"tmode:\" + tMode.toString());\n-\n-            RoutingTemplate routingTemplate = createRoutingTemplate(request, ghRsp, request.getAlgorithm(), weighting);\n-\n-            StopWatch sw = new StopWatch().start();\n-            List<QueryResult> qResults = routingTemplate.lookup(request.getPoints());\n-            ghRsp.addDebugInfo(\"idLookup:\" + sw.stop().getSeconds() + \"s\");\n-            if (ghRsp.hasErrors())\n-                return Collections.emptyList();\n-\n-            QueryGraph queryGraph = QueryGraph.create(graph, qResults);\n+            ghRsp.addDebugInfo(\"traversal-mode:\" + traversalMode.toString());\n+            final boolean passThrough = getPassThrough(request.getHints());\n+            final boolean forceCurbsides = request.getHints().getBool(FORCE_CURBSIDE, true);\n             int maxVisitedNodesForRequest = request.getHints().getInt(Parameters.Routing.MAX_VISITED_NODES, routerConfig.getMaxVisitedNodes());\n             if (maxVisitedNodesForRequest > routerConfig.getMaxVisitedNodes())\n                 throw new IllegalArgumentException(\"The max_visited_nodes parameter has to be below or equal to:\" + routerConfig.getMaxVisitedNodes());\n \n+            // determine weighting\n+            final boolean useCH = chEnabled && !disableCH;\n+            Weighting weighting = createWeighting(profile, request.getHints(), request.getPoints(), useCH);\n+\n             AlgorithmOptions algoOpts = AlgorithmOptions.start().\n                     algorithm(request.getAlgorithm()).\n-                    traversalMode(tMode).\n+                    traversalMode(traversalMode).\n                     weighting(weighting).\n                     maxVisitedNodes(maxVisitedNodesForRequest).\n                     hints(request.getHints()).\n                     build();\n \n-            // do the actual route calculation !\n-            List<Path> altPaths = routingTemplate.calcPaths(queryGraph, algorithmFactory, algoOpts);\n-\n-            boolean tmpEnableInstructions = request.getHints().getBool(Parameters.Routing.INSTRUCTIONS, encodingManager.isEnableInstructions());\n-            boolean tmpCalcPoints = request.getHints().getBool(Parameters.Routing.CALC_POINTS, routerConfig.isCalcPoints());\n-            double wayPointMaxDistance = request.getHints().getDouble(Parameters.Routing.WAY_POINT_MAX_DISTANCE, 1d);\n-\n-            DouglasPeucker peucker = new DouglasPeucker().setMaxDistance(wayPointMaxDistance);\n-            PathMerger pathMerger = new PathMerger(queryGraph.getBaseGraph(), weighting).\n-                    setCalcPoints(tmpCalcPoints).\n-                    setDouglasPeucker(peucker).\n-                    setEnableInstructions(tmpEnableInstructions).\n-                    setPathDetailsBuilders(pathDetailsBuilderFactory, request.getPathDetails()).\n-                    setSimplifyResponse(routerConfig.isSimplifyResponse() && wayPointMaxDistance > 0);\n-\n-            if (!request.getHeadings().isEmpty())\n-                pathMerger.setFavoredHeading(request.getHeadings().get(0));\n-\n-            routingTemplate.finish(pathMerger, translationMap.getWithFallBack(request.getLocale()));\n-            return altPaths;\n+            if (ROUND_TRIP.equalsIgnoreCase(request.getAlgorithm())) {\n+                // ROUND TRIP\n+                StopWatch sw = new StopWatch().start();\n+                double startHeading = request.getHeadings().isEmpty() ? Double.NaN : request.getHeadings().get(0);\n+                RoundTripRouting.Params params = new RoundTripRouting.Params(request.getHints(), startHeading, routerConfig.getMaxRoundTripRetries());\n+                List<QueryResult> qResults = RoundTripRouting.lookup(request.getPoints(), weighting, locationIndex, params);\n+                ghRsp.addDebugInfo(\"idLookup:\" + sw.stop().getSeconds() + \"s\");\n+\n+                // use A* for round trips\n+                AlgorithmOptions roundTripAlgoOpts = AlgorithmOptions\n+                        .start(algoOpts)\n+                        .algorithm(Parameters.Algorithms.ASTAR_BI)\n+                        .build();\n+                roundTripAlgoOpts.getHints().putObject(Parameters.Algorithms.AStarBi.EPSILON, 2);\n+                FlexiblePathCalculator pathCalculator = createFlexiblePathCalculator(qResults, profile, roundTripAlgoOpts, disableLM);\n+                QueryGraph queryGraph = QueryGraph.create(ghStorage, qResults);\n+\n+                PathCalculatorWithAvoidedEdges roundTripPathCalculator = new PathCalculatorWithAvoidedEdges(pathCalculator);\n+                RoundTripRouting.Result result = RoundTripRouting.calcPaths(qResults, roundTripPathCalculator);\n+                // we merge the different legs of the roundtrip into one response path\n+                ResponsePath responsePath = concatenatePaths(request, weighting, queryGraph, result.paths, getWaypoints(qResults));\n+                ghRsp.add(responsePath);\n+                ghRsp.getHints().putObject(\"visited_nodes.sum\", result.visitedNodes);\n+                ghRsp.getHints().putObject(\"visited_nodes.average\", (float) result.visitedNodes / (qResults.size() - 1));\n+                return result.paths;\n+            } else if (ALT_ROUTE.equalsIgnoreCase(request.getAlgorithm())) {\n+                // ALTERNATIVE ROUTES\n+                if (request.getPoints().size() > 2)\n+                    throw new IllegalArgumentException(\"Currently alternative routes work only with start and end point. You tried to use: \" + request.getPoints().size() + \" points\");\n+                StopWatch sw = new StopWatch().start();\n+                List<QueryResult> qResults = ViaRouting.lookup(encodingManager, request.getPoints(), weighting, locationIndex, request.getSnapPreventions(), request.getPointHints());\n+                ghRsp.addDebugInfo(\"idLookup:\" + sw.stop().getSeconds() + \"s\");\n+                PathCalculator pathCalculator = createPathCalculator(qResults, profile, algoOpts, disableCH, disableLM);\n+                QueryGraph queryGraph = QueryGraph.create(ghStorage, qResults);\n+\n+                if (passThrough)\n+                    throw new IllegalArgumentException(\"Alternative paths and \" + PASS_THROUGH + \" at the same time is currently not supported\");\n+                if (!request.getCurbsides().isEmpty())\n+                    throw new IllegalArgumentException(\"Alternative paths do not support the \" + CURBSIDE + \" parameter yet\");\n+\n+                ViaRouting.Result result = ViaRouting.calcPaths(request.getPoints(), queryGraph, qResults, weighting.getFlagEncoder().getAccessEnc(), pathCalculator, request.getCurbsides(), forceCurbsides, request.getHeadings(), passThrough);\n+                if (result.paths.isEmpty())\n+                    throw new RuntimeException(\"Empty paths for alternative route calculation not expected\");\n+\n+                // each path represents a different alternative and we do the path merging for each of them\n+                PathMerger pathMerger = createPathMerger(request, weighting, queryGraph);\n+                for (Path path : result.paths) {\n+                    ResponsePath responsePath = new ResponsePath();\n+                    responsePath.setWaypoints(getWaypoints(qResults));\n+                    pathMerger.doWork(responsePath, Collections.singletonList(path), encodingManager, translationMap.getWithFallBack(request.getLocale()));\n+                    ghRsp.add(responsePath);\n+                }\n+                ghRsp.getHints().putObject(\"visited_nodes.sum\", result.visitedNodes);\n+                ghRsp.getHints().putObject(\"visited_nodes.average\", (float) result.visitedNodes / (qResults.size() - 1));\n+                return result.paths;\n+            } else {\n+                StopWatch sw = new StopWatch().start();\n+                List<QueryResult> qResults = ViaRouting.lookup(encodingManager, request.getPoints(), weighting, locationIndex, request.getSnapPreventions(), request.getPointHints());\n+                ghRsp.addDebugInfo(\"idLookup:\" + sw.stop().getSeconds() + \"s\");\n+                PathCalculator pathCalculator = createPathCalculator(qResults, profile, algoOpts, disableCH, disableLM);\n+                // (base) query graph used to resolve headings, curbsides etc. this is not necessarily the same thing as\n+                // the (possibly implementation specific) query graph used by PathCalculator\n+                QueryGraph queryGraph = QueryGraph.create(ghStorage, qResults);\n+                ViaRouting.Result result = ViaRouting.calcPaths(request.getPoints(), queryGraph, qResults, weighting.getFlagEncoder().getAccessEnc(), pathCalculator, request.getCurbsides(), forceCurbsides, request.getHeadings(), passThrough);\n+\n+                if (request.getPoints().size() != result.paths.size() + 1)\n+                    throw new RuntimeException(\"There should be exactly one more point than paths. points:\" + request.getPoints().size() + \", paths:\" + result.paths.size());\n+\n+                // here each path represents one leg of the via-route and we merge them all together into one response path\n+                ResponsePath responsePath = concatenatePaths(request, weighting, queryGraph, result.paths, getWaypoints(qResults));\n+                responsePath.addDebugInfo(result.debug);\n+                ghRsp.add(responsePath);\n+                ghRsp.getHints().putObject(\"visited_nodes.sum\", result.visitedNodes);\n+                ghRsp.getHints().putObject(\"visited_nodes.average\", (float) result.visitedNodes / (qResults.size() - 1));\n+                return result.paths;\n+            }\n+        } catch (MultiException ex) {\n+            for (Throwable t : ex.getErrors()) {\n+                ghRsp.addError(t);\n+            }\n+            return emptyList();\n         } catch (IllegalArgumentException ex) {\n             ghRsp.addError(ex);\n-            return Collections.emptyList();\n+            return emptyList();\n         }\n     }\n \n-    public RoutingAlgorithmFactory getAlgorithmFactory(String profile, boolean disableCH, boolean disableLM) {\n-        if (chEnabled && disableCH && !routerConfig.isCHDisablingAllowed()) {\n-            throw new IllegalArgumentException(\"Disabling CH is not allowed on the server side\");\n+    private Weighting createWeighting(Profile profile, PMap requestHints, List<GHPoint> points, boolean forCH) {\n+        if (forCH) {\n+            // todo: do not allow things like short_fastest.distance_factor or u_turn_costs unless CH is disabled\n+            // and only under certain conditions for LM\n+\n+            // the request hints are ignored for CH as we cannot change the profile after the preparation like this.\n+            // the weighting here has to be created the same way as we did when we created the weighting for the preparation\n+            return weightingFactory.createWeighting(profile, new PMap(), false);\n+        } else {\n+            Weighting weighting = weightingFactory.createWeighting(profile, requestHints, false);\n+            if (requestHints.has(Parameters.Routing.BLOCK_AREA)) {\n+                FlagEncoder encoder = encodingManager.getEncoder(profile.getVehicle());\n+                GraphEdgeIdFinder.BlockArea blockArea = GraphEdgeIdFinder.createBlockArea(ghStorage, locationIndex,\n+                        points, requestHints, DefaultEdgeFilter.allEdges(encoder));\n+                weighting = new BlockAreaWeighting(weighting, blockArea);", "originalCommit": "ee613b1352673023367f0dc8b14788a7b7887a36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcxODIzMQ==", "url": "https://github.com/graphhopper/graphhopper/pull/2057#discussion_r437718231", "bodyText": "To me it looks like the block area stuff seems to belong to the weighting factory (but of course its not entirely clear because we need the 'points' here...). If all this was in weighting factory SPT/Isochrone could just use it.\nRouter is kind of 'the thing that does routing when everything is ready', so in theory it might be the right place to do map matching, isochrone etc. as well. Or maybe not and we will just have similar classes next to Router (MapMatcher, Isochrone*thing* etc.). They all have in common that they need to have access to the same 'infrastructure' like the routing graphs, profiles etc.", "author": "easbar", "createdAt": "2020-06-09T20:58:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NTMwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEzMjk5Ng==", "url": "https://github.com/graphhopper/graphhopper/pull/2057#discussion_r438132996", "bodyText": "Yes, it is a bit ugly (-> unrelated to this PR -> will resolve conversation)", "author": "karussell", "createdAt": "2020-06-10T13:44:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NTMwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NjQ3Nw==", "url": "https://github.com/graphhopper/graphhopper/pull/2057#discussion_r437446477", "bodyText": "I know you only copied this, but we should make it consistent. E.g. in Measurement we use us instead of micros. Or use \u00b5s :) ?", "author": "karussell", "createdAt": "2020-06-09T14:01:43Z", "path": "core/src/main/java/com/graphhopper/routing/CHPathCalculator.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.graphhopper.routing;\n+\n+import com.graphhopper.routing.ch.CHRoutingAlgorithmFactory;\n+import com.graphhopper.routing.querygraph.QueryGraph;\n+import com.graphhopper.util.PMap;\n+import com.graphhopper.util.Parameters;\n+import com.graphhopper.util.StopWatch;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.graphhopper.util.EdgeIterator.ANY_EDGE;\n+import static com.graphhopper.util.Parameters.Routing.MAX_VISITED_NODES;\n+\n+public class CHPathCalculator implements PathCalculator {\n+    private final QueryGraph queryGraph;\n+    private final CHRoutingAlgorithmFactory algoFactory;\n+    private final PMap algoOpts;\n+    private String debug;\n+    private int visitedNodes;\n+\n+    public CHPathCalculator(QueryGraph queryGraph, CHRoutingAlgorithmFactory algoFactory, PMap algoOpts) {\n+        this.queryGraph = queryGraph;\n+        this.algoFactory = algoFactory;\n+        this.algoOpts = algoOpts;\n+    }\n+\n+    @Override\n+    public List<Path> calcPaths(int from, int to, EdgeRestrictions edgeRestrictions) {\n+        if (!edgeRestrictions.getUnfavoredEdges().isEmpty())\n+            throw new IllegalArgumentException(\"Using unfavored edges is currently not supported for CH\");\n+        RoutingAlgorithm algo = createAlgo();\n+        return calcPaths(from, to, edgeRestrictions, algo);\n+    }\n+\n+    private RoutingAlgorithm createAlgo() {\n+        StopWatch sw = new StopWatch().start();\n+        RoutingAlgorithm algo = algoFactory.createAlgo(queryGraph, algoOpts);\n+        debug = \", algoInit:\" + (sw.stop().getNanos() / 1000) + \" micros\";", "originalCommit": "ee613b1352673023367f0dc8b14788a7b7887a36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcxODM0Mg==", "url": "https://github.com/graphhopper/graphhopper/pull/2057#discussion_r437718342", "bodyText": "I like using the actual greek letter, I just need to figure out how to type it on my keyboard :) There shouldn't be any problem using it?", "author": "easbar", "createdAt": "2020-06-09T20:58:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NjQ3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEzMzkxNg==", "url": "https://github.com/graphhopper/graphhopper/pull/2057#discussion_r438133916", "bodyText": "I was able to create it via AltGr+m", "author": "karussell", "createdAt": "2020-06-10T13:45:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NjQ3Nw=="}], "type": "inlineReview"}, {"oid": "abd85ebedc00d5ad60a6ced8a8f41112b655eb87", "url": "https://github.com/graphhopper/graphhopper/commit/abd85ebedc00d5ad60a6ced8a8f41112b655eb87", "message": "Move round trip calculator into RoundTripRouting", "committedDate": "2020-06-09T20:15:26Z", "type": "commit"}, {"oid": "6c182d08cbc96ac86ec07128f3d758b73de7ace8", "url": "https://github.com/graphhopper/graphhopper/commit/6c182d08cbc96ac86ec07128f3d758b73de7ace8", "message": "Move previous edge set inside RoundTripCalculator", "committedDate": "2020-06-09T21:18:44Z", "type": "commit"}, {"oid": "f1454953448bf98da8c886b133cd45a3d5d35928", "url": "https://github.com/graphhopper/graphhopper/commit/f1454953448bf98da8c886b133cd45a3d5d35928", "message": "Merge branch 'master' into hide_ch_graph", "committedDate": "2020-06-09T21:19:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyOTg1NQ==", "url": "https://github.com/graphhopper/graphhopper/pull/2057#discussion_r437729855", "bodyText": "Ok yes this needs a better name and maybe more documentation, but we can consider this work in progress and it will be removed again soon anyway :)", "author": "easbar", "createdAt": "2020-06-09T21:21:23Z", "path": "core/src/main/java/com/graphhopper/routing/querygraph/QueryGraph.java", "diffHunk": "@@ -340,4 +340,16 @@ private UnsupportedOperationException exc() {\n     public Graph getMainGraph() {\n         return mainGraph;\n     }\n+\n+    public int shiftEdgeId(int edgeId) {", "originalCommit": "f1454953448bf98da8c886b133cd45a3d5d35928", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEzNDIyMA==", "url": "https://github.com/graphhopper/graphhopper/pull/2057#discussion_r438134220", "bodyText": "Ok, sure.", "author": "karussell", "createdAt": "2020-06-10T13:46:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyOTg1NQ=="}], "type": "inlineReview"}, {"oid": "d98edc35d38add6962a6f93071be2b1bde82c89e", "url": "https://github.com/graphhopper/graphhopper/commit/d98edc35d38add6962a6f93071be2b1bde82c89e", "message": "Merge branch 'master' into hide_ch_graph\n\n# Conflicts:\n#\tcore/src/main/java/com/graphhopper/routing/ch/CHRoutingAlgorithmFactory.java", "committedDate": "2020-06-10T08:07:29Z", "type": "commit"}, {"oid": "c836432a629dab369c4a6bd9f52a3a421fca88da", "url": "https://github.com/graphhopper/graphhopper/commit/c836432a629dab369c4a6bd9f52a3a421fca88da", "message": "Merge branch 'master' into hide_ch_graph", "committedDate": "2020-06-10T12:35:21Z", "type": "commit"}, {"oid": "e6e4c74d18150d9f117f10ff3555aefe5b9b6a49", "url": "https://github.com/graphhopper/graphhopper/commit/e6e4c74d18150d9f117f10ff3555aefe5b9b6a49", "message": "micros -> \u03bcs", "committedDate": "2020-06-10T14:10:57Z", "type": "commit"}, {"oid": "0079941592d8642fcaecc25e0d2026a047221759", "url": "https://github.com/graphhopper/graphhopper/commit/0079941592d8642fcaecc25e0d2026a047221759", "message": "Rename exception to MultiplePointsNotFoundException", "committedDate": "2020-06-10T15:56:01Z", "type": "commit"}, {"oid": "a519ed1bdf5501f8301b7d5042bca329e1cd3404", "url": "https://github.com/graphhopper/graphhopper/commit/a519ed1bdf5501f8301b7d5042bca329e1cd3404", "message": "Merge branch 'master' into hide_ch_graph", "committedDate": "2020-06-10T16:14:39Z", "type": "commit"}, {"oid": "2f682ec4341228535886852ff4c590fdbc799b90", "url": "https://github.com/graphhopper/graphhopper/commit/2f682ec4341228535886852ff4c590fdbc799b90", "message": "Make exception  package private", "committedDate": "2020-06-10T17:02:11Z", "type": "commit"}]}