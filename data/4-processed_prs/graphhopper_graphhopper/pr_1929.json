{"pr_number": 1929, "pr_title": "Mapzen (skadi) elevation provider", "pr_createdAt": "2020-02-25T10:51:27Z", "pr_url": "https://github.com/graphhopper/graphhopper/pull/1929", "timeline": [{"oid": "167fd49b69f6793f30aea1cd14e6c109f2b7ae40", "url": "https://github.com/graphhopper/graphhopper/commit/167fd49b69f6793f30aea1cd14e6c109f2b7ae40", "message": "implement skadi elevation provider", "committedDate": "2020-02-25T10:26:21Z", "type": "commit"}, {"oid": "47f7c4d6d29deed8fa1a02d20e8746a592c5bb00", "url": "https://github.com/graphhopper/graphhopper/commit/47f7c4d6d29deed8fa1a02d20e8746a592c5bb00", "message": "Merge branch 'master' into skadi-provider", "committedDate": "2020-02-25T10:26:36Z", "type": "commit"}, {"oid": "bd87ee11750433c9e50faf7a32d81287dffec8ac", "url": "https://github.com/graphhopper/graphhopper/commit/bd87ee11750433c9e50faf7a32d81287dffec8ac", "message": "add integration test for skadi", "committedDate": "2020-02-25T10:50:51Z", "type": "commit"}, {"oid": "b34ea8890f14df98169434e65f8b51568cd39a4c", "url": "https://github.com/graphhopper/graphhopper/commit/b34ea8890f14df98169434e65f8b51568cd39a4c", "message": "dont use String.format", "committedDate": "2020-02-25T11:07:12Z", "type": "commit"}, {"oid": "09a1eaea70b763b6495262364edad8eb68ca6da9", "url": "https://github.com/graphhopper/graphhopper/commit/09a1eaea70b763b6495262364edad8eb68ca6da9", "message": "Merge branch 'master' into skadi-provider", "committedDate": "2020-02-28T10:59:46Z", "type": "commit"}, {"oid": "7de85b56f5bdb96d9c2767f8f9b1fdfd7c1905d6", "url": "https://github.com/graphhopper/graphhopper/commit/7de85b56f5bdb96d9c2767f8f9b1fdfd7c1905d6", "message": "Merge branch 'master' into skadi-provider", "committedDate": "2020-03-05T01:34:19Z", "type": "commit"}, {"oid": "adcf7654505071e510e4600e3e1c3a453be64407", "url": "https://github.com/graphhopper/graphhopper/commit/adcf7654505071e510e4600e3e1c3a453be64407", "message": "Merge branch 'master' into skadi-provider", "committedDate": "2020-03-10T12:50:08Z", "type": "commit"}, {"oid": "9222b172e9bd265f536bac0798bfcc33468d0057", "url": "https://github.com/graphhopper/graphhopper/commit/9222b172e9bd265f536bac0798bfcc33468d0057", "message": "Merge branch 'master' into skadi-provider", "committedDate": "2020-03-12T09:59:37Z", "type": "commit"}, {"oid": "051ccecc38c5baf9700c1cc5f5f895c664a300a1", "url": "https://github.com/graphhopper/graphhopper/commit/051ccecc38c5baf9700c1cc5f5f895c664a300a1", "message": "Merge branch 'master' into skadi-provider", "committedDate": "2020-03-15T10:52:41Z", "type": "commit"}, {"oid": "c4c29cc53214c52a8de07e05e10088923e8dbf20", "url": "https://github.com/graphhopper/graphhopper/commit/c4c29cc53214c52a8de07e05e10088923e8dbf20", "message": "fix integration test", "committedDate": "2020-03-15T10:55:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk2MjA1Ng==", "url": "https://github.com/graphhopper/graphhopper/pull/1929#discussion_r392962056", "bodyText": "Can you add it also to this table? https://github.com/graphhopper/graphhopper/blob/master/NOTICE.md#data", "author": "karussell", "createdAt": "2020-03-16T11:51:10Z", "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -625,6 +625,8 @@ private static ElevationProvider createElevationProvider(GraphHopperConfig ghCon\n             elevationProvider = new SRTMGL1Provider(cacheDirStr);\n         } else if (eleProviderStr.equalsIgnoreCase(\"multi\")) {\n             elevationProvider = new MultiSourceElevationProvider(cacheDirStr);\n+        } else if (eleProviderStr.equalsIgnoreCase(\"skadi\")) {\n+            elevationProvider = new SkadiProvider(cacheDirStr);", "originalCommit": "c4c29cc53214c52a8de07e05e10088923e8dbf20", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk2MjY1Mw==", "url": "https://github.com/graphhopper/graphhopper/pull/1929#discussion_r392962653", "bodyText": "Due to consistency I would just return \"skadi\" here", "author": "karussell", "createdAt": "2020-03-16T11:52:17Z", "path": "core/src/main/java/com/graphhopper/reader/dem/SkadiProvider.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.graphhopper.reader.dem;\n+\n+import java.io.*;\n+import java.util.zip.GZIPInputStream;\n+\n+import static com.graphhopper.util.Helper.close;\n+import static com.graphhopper.util.Helper.toLowerCase;\n+\n+/**\n+ * Skadi contains elevation data for the entire world with 1 arc second (~30m) accuracy in SRTM format stitched\n+ * together from many sources (https://github.com/tilezen/joerd/blob/master/docs/data-sources.md).\n+ *\n+ * We use the hosted AWS Open Data mirror (https://registry.opendata.aws/terrain-tiles/) by default but you can\n+ * change to any mirror by updating the base URL.\n+ *\n+ * See https://github.com/tilezen/joerd/blob/master/docs/attribution.md for required attribution of any project\n+ * using this data.\n+ *\n+ * Detailed information can be found here: https://github.com/tilezen/joerd\n+ */\n+public class SkadiProvider extends AbstractSRTMElevationProvider {\n+    public SkadiProvider() {\n+        this(\"\");\n+    }\n+    public SkadiProvider(String cacheDir) {\n+        super(\n+                \"https://elevation-tiles-prod.s3.amazonaws.com/skadi/\",\n+                cacheDir.isEmpty()? \"/tmp/srtm\": cacheDir,\n+                \"GraphHopper SRTMReader\",\n+                -90,\n+                90,\n+                3601\n+        );\n+    }\n+\n+    public static void main(String[] args) throws IOException {\n+        SkadiProvider provider = new SkadiProvider();\n+        // 338\n+        System.out.println(provider.getEle(49.949784, 11.57517));\n+        // 468\n+        System.out.println(provider.getEle(49.968668, 11.575127));\n+        // 467\n+        System.out.println(provider.getEle(49.968682, 11.574842));\n+        // 3110\n+        System.out.println(provider.getEle(-22.532854, -65.110474));\n+        // 115\n+        System.out.println(provider.getEle(38.065392, -87.099609));\n+        // 1612\n+        System.out.println(provider.getEle(40, -105.2277023));\n+        System.out.println(provider.getEle(39.99999999, -105.2277023));\n+        System.out.println(provider.getEle(39.9999999, -105.2277023));\n+        System.out.println(provider.getEle(39.999999, -105.2277023));\n+        // 1015\n+        System.out.println(provider.getEle(47.468668, 14.575127));\n+        // 1107\n+        System.out.println(provider.getEle(47.467753, 14.573911));\n+        // 1930\n+        System.out.println(provider.getEle(46.468835, 12.578777));\n+        // 844\n+        System.out.println(provider.getEle(48.469123, 9.576393));\n+    }\n+\n+    @Override\n+    byte[] readFile(File file) throws IOException {\n+        InputStream is = new FileInputStream(file);\n+        GZIPInputStream gzis = new GZIPInputStream(is);\n+        BufferedInputStream buff = new BufferedInputStream(gzis);\n+        ByteArrayOutputStream os = new ByteArrayOutputStream();\n+        byte[] buffer = new byte[0xFFFF];\n+        int len;\n+        while ((len = buff.read(buffer)) > 0) {\n+            os.write(buffer, 0, len);\n+        }\n+        os.flush();\n+        close(buff);\n+        return os.toByteArray();\n+    }\n+\n+    private String getLatString(double lat) {\n+        int minLat = (int) Math.floor(lat);\n+        return (minLat < 0 ? \"S\" : \"N\") + getPaddedLatString(minLat);\n+    }\n+\n+    private String getLonString(double lon) {\n+        int minLon = (int) Math.floor(lon);\n+        return (minLon < 0 ? \"W\" : \"E\") + getPaddedLonString(minLon);\n+    }\n+\n+    String getFileName(double lat, double lon) {\n+        String latStr = getLatString(lat);\n+        String lonStr = getLonString(lon);\n+        return toLowerCase(latStr + lonStr);\n+    }\n+\n+    String getDownloadURL(double lat, double lon) {\n+        String latStr = getLatString(lat);\n+        String lonStr = getLonString(lon);\n+\n+        return latStr + \"/\" + latStr + lonStr + \".hgt.gz\";\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"skadi(\" + baseUrl + \")\";", "originalCommit": "c4c29cc53214c52a8de07e05e10088923e8dbf20", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk2Mjk1Mg==", "url": "https://github.com/graphhopper/graphhopper/pull/1929#discussion_r392962952", "bodyText": "Are you ok with adding the usual License header here?", "author": "karussell", "createdAt": "2020-03-16T11:52:54Z", "path": "core/src/main/java/com/graphhopper/reader/dem/SkadiProvider.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.graphhopper.reader.dem;", "originalCommit": "c4c29cc53214c52a8de07e05e10088923e8dbf20", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4ff5558c25359d17db65ad11aa0d5f8e383b83b0", "url": "https://github.com/graphhopper/graphhopper/commit/4ff5558c25359d17db65ad11aa0d5f8e383b83b0", "message": "respond to comments", "committedDate": "2020-03-17T00:32:38Z", "type": "commit"}]}