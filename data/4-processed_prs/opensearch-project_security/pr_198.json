{"pr_number": 198, "pr_title": "[Optimization] Implement faster version of implies type perm", "pr_createdAt": "2020-01-10T18:30:46Z", "pr_url": "https://github.com/opensearch-project/security/pull/198", "timeline": [{"oid": "23adcbc01bee07da3fc8c19ebb58f7b94dbbf29a", "url": "https://github.com/opensearch-project/security/commit/23adcbc01bee07da3fc8c19ebb58f7b94dbbf29a", "message": "Implement faster version of implies type perm", "committedDate": "2020-02-22T10:18:28Z", "type": "commit"}, {"oid": "23adcbc01bee07da3fc8c19ebb58f7b94dbbf29a", "url": "https://github.com/opensearch-project/security/commit/23adcbc01bee07da3fc8c19ebb58f7b94dbbf29a", "message": "Implement faster version of implies type perm", "committedDate": "2020-02-22T10:18:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5Mzk3Mw==", "url": "https://github.com/opensearch-project/security/pull/198#discussion_r385993973", "bodyText": "can we rename it to resolvedRequestedIndices? (as these are indices requested from user.) It will help code more readable down into method where we added lot more complexity.", "author": "hardik-k-shah", "createdAt": "2020-02-29T02:41:05Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "diffHunk": "@@ -936,38 +936,30 @@ private static String toQuotedCommaSeparatedString(final Set<String> roles) {\n         }));\n     }\n \n-    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,\n-            IndexNameExpressionResolver resolver, ClusterService cs) {\n-        Set<String> matchingIndex = new HashSet<>(resolved.getAllIndices());\n-\n-        for (String in : resolved.getAllIndices()) {\n-            //find index patterns who are matching\n-            Set<String> matchingActions = new HashSet<>(Arrays.asList(actions));\n-            //Set<String> matchingTypes = new HashSet<>(resolved.getTypes(-));\n-            for (IndexPattern p : ipatterns) {\n-                if (WildcardMatcher.matchAny(p.getResolvedIndexPattern(user, resolver, cs), in)) {\n-                    //per resolved index per pattern\n-                    //for (String t : resolved.getTypes(-)) {\n-                        //for (TypePerm tp : p.typePerms) {\n-                            //if (WildcardMatcher.match(tp.typePattern, t)) {\n-                                //matchingTypes.remove(t);\n-                                for (String a : Arrays.asList(actions)) {\n-                                    if (WildcardMatcher.matchAny(p.perms, a)) {\n-                                        matchingActions.remove(a);\n-                                    }\n-                                }\n-                            //}\n-                        //}\n-                    //}\n-                }\n-            }\n-\n-            if (matchingActions.isEmpty() /*&& matchingTypes.isEmpty()*/) {\n-                matchingIndex.remove(in);\n-            }\n+    static final class ResolvedIndexPattern{\n+        public String[] pattern;\n+        public Set<String> perms;\n+        public ResolvedIndexPattern(String[] pattern, Set<String> perms) {\n+            this.pattern = pattern;\n+            this.perms = perms;\n         }\n+    }\n \n-        return matchingIndex.isEmpty();\n+    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,\n+                                           IndexNameExpressionResolver resolver, ClusterService cs) {\n+        Set<String> resolvedIndices = resolved.getAllIndices();", "originalCommit": "23adcbc01bee07da3fc8c19ebb58f7b94dbbf29a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NDA3Nw==", "url": "https://github.com/opensearch-project/security/pull/198#discussion_r385994077", "bodyText": "Can we rename actions to requestedActions? (As these are actions requested by user and not coming from roles definition) It will help understanding code better.", "author": "hardik-k-shah", "createdAt": "2020-02-29T02:42:35Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "diffHunk": "@@ -936,38 +936,30 @@ private static String toQuotedCommaSeparatedString(final Set<String> roles) {\n         }));\n     }\n \n-    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,\n-            IndexNameExpressionResolver resolver, ClusterService cs) {\n-        Set<String> matchingIndex = new HashSet<>(resolved.getAllIndices());\n-\n-        for (String in : resolved.getAllIndices()) {\n-            //find index patterns who are matching\n-            Set<String> matchingActions = new HashSet<>(Arrays.asList(actions));\n-            //Set<String> matchingTypes = new HashSet<>(resolved.getTypes(-));\n-            for (IndexPattern p : ipatterns) {\n-                if (WildcardMatcher.matchAny(p.getResolvedIndexPattern(user, resolver, cs), in)) {\n-                    //per resolved index per pattern\n-                    //for (String t : resolved.getTypes(-)) {\n-                        //for (TypePerm tp : p.typePerms) {\n-                            //if (WildcardMatcher.match(tp.typePattern, t)) {\n-                                //matchingTypes.remove(t);\n-                                for (String a : Arrays.asList(actions)) {\n-                                    if (WildcardMatcher.matchAny(p.perms, a)) {\n-                                        matchingActions.remove(a);\n-                                    }\n-                                }\n-                            //}\n-                        //}\n-                    //}\n-                }\n-            }\n-\n-            if (matchingActions.isEmpty() /*&& matchingTypes.isEmpty()*/) {\n-                matchingIndex.remove(in);\n-            }\n+    static final class ResolvedIndexPattern{\n+        public String[] pattern;\n+        public Set<String> perms;\n+        public ResolvedIndexPattern(String[] pattern, Set<String> perms) {\n+            this.pattern = pattern;\n+            this.perms = perms;\n         }\n+    }\n \n-        return matchingIndex.isEmpty();\n+    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,", "originalCommit": "23adcbc01bee07da3fc8c19ebb58f7b94dbbf29a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NDE4Mw==", "url": "https://github.com/opensearch-project/security/pull/198#discussion_r385994183", "bodyText": "Can we rename it ResolvedIndexPattern to indexPatternsAndPermissions ? (as it has patterns and permissions)", "author": "hardik-k-shah", "createdAt": "2020-02-29T02:43:58Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "diffHunk": "@@ -936,38 +936,30 @@ private static String toQuotedCommaSeparatedString(final Set<String> roles) {\n         }));\n     }\n \n-    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,\n-            IndexNameExpressionResolver resolver, ClusterService cs) {\n-        Set<String> matchingIndex = new HashSet<>(resolved.getAllIndices());\n-\n-        for (String in : resolved.getAllIndices()) {\n-            //find index patterns who are matching\n-            Set<String> matchingActions = new HashSet<>(Arrays.asList(actions));\n-            //Set<String> matchingTypes = new HashSet<>(resolved.getTypes(-));\n-            for (IndexPattern p : ipatterns) {\n-                if (WildcardMatcher.matchAny(p.getResolvedIndexPattern(user, resolver, cs), in)) {\n-                    //per resolved index per pattern\n-                    //for (String t : resolved.getTypes(-)) {\n-                        //for (TypePerm tp : p.typePerms) {\n-                            //if (WildcardMatcher.match(tp.typePattern, t)) {\n-                                //matchingTypes.remove(t);\n-                                for (String a : Arrays.asList(actions)) {\n-                                    if (WildcardMatcher.matchAny(p.perms, a)) {\n-                                        matchingActions.remove(a);\n-                                    }\n-                                }\n-                            //}\n-                        //}\n-                    //}\n-                }\n-            }\n-\n-            if (matchingActions.isEmpty() /*&& matchingTypes.isEmpty()*/) {\n-                matchingIndex.remove(in);\n-            }\n+    static final class ResolvedIndexPattern{", "originalCommit": "23adcbc01bee07da3fc8c19ebb58f7b94dbbf29a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEwODMyMg==", "url": "https://github.com/opensearch-project/security/pull/198#discussion_r386108322", "bodyText": "starting with lowercase? Or did you mean IndexPatternsAndPermissions ?", "author": "DmitryOlshansky", "createdAt": "2020-03-01T13:28:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NDE4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NDQ2Mg==", "url": "https://github.com/opensearch-project/security/pull/198#discussion_r385994462", "bodyText": "Can we rename resolvedIndexPatterns to indexPatternsAndPermsFromRole? (as these are resolved index patterns and permissions from role)", "author": "hardik-k-shah", "createdAt": "2020-02-29T02:48:05Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "diffHunk": "@@ -936,38 +936,30 @@ private static String toQuotedCommaSeparatedString(final Set<String> roles) {\n         }));\n     }\n \n-    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,\n-            IndexNameExpressionResolver resolver, ClusterService cs) {\n-        Set<String> matchingIndex = new HashSet<>(resolved.getAllIndices());\n-\n-        for (String in : resolved.getAllIndices()) {\n-            //find index patterns who are matching\n-            Set<String> matchingActions = new HashSet<>(Arrays.asList(actions));\n-            //Set<String> matchingTypes = new HashSet<>(resolved.getTypes(-));\n-            for (IndexPattern p : ipatterns) {\n-                if (WildcardMatcher.matchAny(p.getResolvedIndexPattern(user, resolver, cs), in)) {\n-                    //per resolved index per pattern\n-                    //for (String t : resolved.getTypes(-)) {\n-                        //for (TypePerm tp : p.typePerms) {\n-                            //if (WildcardMatcher.match(tp.typePattern, t)) {\n-                                //matchingTypes.remove(t);\n-                                for (String a : Arrays.asList(actions)) {\n-                                    if (WildcardMatcher.matchAny(p.perms, a)) {\n-                                        matchingActions.remove(a);\n-                                    }\n-                                }\n-                            //}\n-                        //}\n-                    //}\n-                }\n-            }\n-\n-            if (matchingActions.isEmpty() /*&& matchingTypes.isEmpty()*/) {\n-                matchingIndex.remove(in);\n-            }\n+    static final class ResolvedIndexPattern{\n+        public String[] pattern;\n+        public Set<String> perms;\n+        public ResolvedIndexPattern(String[] pattern, Set<String> perms) {\n+            this.pattern = pattern;\n+            this.perms = perms;\n         }\n+    }\n \n-        return matchingIndex.isEmpty();\n+    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,\n+                                           IndexNameExpressionResolver resolver, ClusterService cs) {\n+        Set<String> resolvedIndices = resolved.getAllIndices();\n+        List<ResolvedIndexPattern> resolvedIndexPatterns = ipatterns", "originalCommit": "23adcbc01bee07da3fc8c19ebb58f7b94dbbf29a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "980ca990ff184b30655cf02aecc25901b4551257", "url": "https://github.com/opensearch-project/security/commit/980ca990ff184b30655cf02aecc25901b4551257", "message": "Address review comments - use more descriptive names", "committedDate": "2020-03-01T18:33:00Z", "type": "commit"}, {"oid": "980ca990ff184b30655cf02aecc25901b4551257", "url": "https://github.com/opensearch-project/security/commit/980ca990ff184b30655cf02aecc25901b4551257", "message": "Address review comments - use more descriptive names", "committedDate": "2020-03-01T18:33:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1OTc4Nw==", "url": "https://github.com/opensearch-project/security/pull/198#discussion_r390559787", "bodyText": "nit: declare class private", "author": "vrozov", "createdAt": "2020-03-10T19:29:30Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "diffHunk": "@@ -936,38 +935,30 @@ private static String toQuotedCommaSeparatedString(final Set<String> roles) {\n         }));\n     }\n \n-    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,\n-            IndexNameExpressionResolver resolver, ClusterService cs) {\n-        Set<String> matchingIndex = new HashSet<>(resolved.getAllIndices());\n-\n-        for (String in : resolved.getAllIndices()) {\n-            //find index patterns who are matching\n-            Set<String> matchingActions = new HashSet<>(Arrays.asList(actions));\n-            //Set<String> matchingTypes = new HashSet<>(resolved.getTypes(-));\n-            for (IndexPattern p : ipatterns) {\n-                if (WildcardMatcher.matchAny(p.getResolvedIndexPattern(user, resolver, cs), in)) {\n-                    //per resolved index per pattern\n-                    //for (String t : resolved.getTypes(-)) {\n-                        //for (TypePerm tp : p.typePerms) {\n-                            //if (WildcardMatcher.match(tp.typePattern, t)) {\n-                                //matchingTypes.remove(t);\n-                                for (String a : Arrays.asList(actions)) {\n-                                    if (WildcardMatcher.matchAny(p.perms, a)) {\n-                                        matchingActions.remove(a);\n-                                    }\n-                                }\n-                            //}\n-                        //}\n-                    //}\n-                }\n-            }\n-\n-            if (matchingActions.isEmpty() /*&& matchingTypes.isEmpty()*/) {\n-                matchingIndex.remove(in);\n-            }\n+    static final class IndexPatternsAndPermissions {", "originalCommit": "980ca990ff184b30655cf02aecc25901b4551257", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3NTQzNQ==", "url": "https://github.com/opensearch-project/security/pull/198#discussion_r392575435", "bodyText": "Also covered", "author": "DmitryOlshansky", "createdAt": "2020-03-14T10:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1OTc4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU2MDkyMA==", "url": "https://github.com/opensearch-project/security/pull/198#discussion_r390560920", "bodyText": "Declare both pattern and perms as private and final. Introduce public boolean matches(String index, String action).", "author": "vrozov", "createdAt": "2020-03-10T19:31:44Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "diffHunk": "@@ -936,38 +935,30 @@ private static String toQuotedCommaSeparatedString(final Set<String> roles) {\n         }));\n     }\n \n-    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,\n-            IndexNameExpressionResolver resolver, ClusterService cs) {\n-        Set<String> matchingIndex = new HashSet<>(resolved.getAllIndices());\n-\n-        for (String in : resolved.getAllIndices()) {\n-            //find index patterns who are matching\n-            Set<String> matchingActions = new HashSet<>(Arrays.asList(actions));\n-            //Set<String> matchingTypes = new HashSet<>(resolved.getTypes(-));\n-            for (IndexPattern p : ipatterns) {\n-                if (WildcardMatcher.matchAny(p.getResolvedIndexPattern(user, resolver, cs), in)) {\n-                    //per resolved index per pattern\n-                    //for (String t : resolved.getTypes(-)) {\n-                        //for (TypePerm tp : p.typePerms) {\n-                            //if (WildcardMatcher.match(tp.typePattern, t)) {\n-                                //matchingTypes.remove(t);\n-                                for (String a : Arrays.asList(actions)) {\n-                                    if (WildcardMatcher.matchAny(p.perms, a)) {\n-                                        matchingActions.remove(a);\n-                                    }\n-                                }\n-                            //}\n-                        //}\n-                    //}\n-                }\n-            }\n-\n-            if (matchingActions.isEmpty() /*&& matchingTypes.isEmpty()*/) {\n-                matchingIndex.remove(in);\n-            }\n+    static final class IndexPatternsAndPermissions {\n+        public String[] pattern;", "originalCommit": "980ca990ff184b30655cf02aecc25901b4551257", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3NTM1OA==", "url": "https://github.com/opensearch-project/security/pull/198#discussion_r392575358", "bodyText": "Done", "author": "DmitryOlshansky", "createdAt": "2020-03-14T10:40:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU2MDkyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU3NDM4Ng==", "url": "https://github.com/opensearch-project/security/pull/198#discussion_r390574386", "bodyText": "consider using IndexPatternsAndPermissions[] instead of List<> and collect toArray().", "author": "vrozov", "createdAt": "2020-03-10T19:57:26Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "diffHunk": "@@ -936,38 +935,30 @@ private static String toQuotedCommaSeparatedString(final Set<String> roles) {\n         }));\n     }\n \n-    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,\n-            IndexNameExpressionResolver resolver, ClusterService cs) {\n-        Set<String> matchingIndex = new HashSet<>(resolved.getAllIndices());\n-\n-        for (String in : resolved.getAllIndices()) {\n-            //find index patterns who are matching\n-            Set<String> matchingActions = new HashSet<>(Arrays.asList(actions));\n-            //Set<String> matchingTypes = new HashSet<>(resolved.getTypes(-));\n-            for (IndexPattern p : ipatterns) {\n-                if (WildcardMatcher.matchAny(p.getResolvedIndexPattern(user, resolver, cs), in)) {\n-                    //per resolved index per pattern\n-                    //for (String t : resolved.getTypes(-)) {\n-                        //for (TypePerm tp : p.typePerms) {\n-                            //if (WildcardMatcher.match(tp.typePattern, t)) {\n-                                //matchingTypes.remove(t);\n-                                for (String a : Arrays.asList(actions)) {\n-                                    if (WildcardMatcher.matchAny(p.perms, a)) {\n-                                        matchingActions.remove(a);\n-                                    }\n-                                }\n-                            //}\n-                        //}\n-                    //}\n-                }\n-            }\n-\n-            if (matchingActions.isEmpty() /*&& matchingTypes.isEmpty()*/) {\n-                matchingIndex.remove(in);\n-            }\n+    static final class IndexPatternsAndPermissions {\n+        public String[] pattern;\n+        public Set<String> perms;\n+        public IndexPatternsAndPermissions(String[] pattern, Set<String> perms) {\n+            this.pattern = pattern;\n+            this.perms = perms;\n         }\n+    }\n \n-        return matchingIndex.isEmpty();\n+    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] requestedActions,\n+                                           IndexNameExpressionResolver resolver, ClusterService cs) {\n+        Set<String> resolvedRequestedIndices = resolved.getAllIndices();\n+        List<IndexPatternsAndPermissions> indexPatternsAndPermissions = ipatterns", "originalCommit": "980ca990ff184b30655cf02aecc25901b4551257", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3NTQyOQ==", "url": "https://github.com/opensearch-project/security/pull/198#discussion_r392575429", "bodyText": "Done", "author": "DmitryOlshansky", "createdAt": "2020-03-14T10:41:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU3NDM4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU3ODE4Mw==", "url": "https://github.com/opensearch-project/security/pull/198#discussion_r390578183", "bodyText": "rename rip to indexPatternsAndPermissions (or less preferable ipap).", "author": "vrozov", "createdAt": "2020-03-10T20:04:14Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/ConfigModelV7.java", "diffHunk": "@@ -936,38 +935,30 @@ private static String toQuotedCommaSeparatedString(final Set<String> roles) {\n         }));\n     }\n \n-    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] actions,\n-            IndexNameExpressionResolver resolver, ClusterService cs) {\n-        Set<String> matchingIndex = new HashSet<>(resolved.getAllIndices());\n-\n-        for (String in : resolved.getAllIndices()) {\n-            //find index patterns who are matching\n-            Set<String> matchingActions = new HashSet<>(Arrays.asList(actions));\n-            //Set<String> matchingTypes = new HashSet<>(resolved.getTypes(-));\n-            for (IndexPattern p : ipatterns) {\n-                if (WildcardMatcher.matchAny(p.getResolvedIndexPattern(user, resolver, cs), in)) {\n-                    //per resolved index per pattern\n-                    //for (String t : resolved.getTypes(-)) {\n-                        //for (TypePerm tp : p.typePerms) {\n-                            //if (WildcardMatcher.match(tp.typePattern, t)) {\n-                                //matchingTypes.remove(t);\n-                                for (String a : Arrays.asList(actions)) {\n-                                    if (WildcardMatcher.matchAny(p.perms, a)) {\n-                                        matchingActions.remove(a);\n-                                    }\n-                                }\n-                            //}\n-                        //}\n-                    //}\n-                }\n-            }\n-\n-            if (matchingActions.isEmpty() /*&& matchingTypes.isEmpty()*/) {\n-                matchingIndex.remove(in);\n-            }\n+    static final class IndexPatternsAndPermissions {\n+        public String[] pattern;\n+        public Set<String> perms;\n+        public IndexPatternsAndPermissions(String[] pattern, Set<String> perms) {\n+            this.pattern = pattern;\n+            this.perms = perms;\n         }\n+    }\n \n-        return matchingIndex.isEmpty();\n+    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] requestedActions,\n+                                           IndexNameExpressionResolver resolver, ClusterService cs) {\n+        Set<String> resolvedRequestedIndices = resolved.getAllIndices();\n+        List<IndexPatternsAndPermissions> indexPatternsAndPermissions = ipatterns\n+                .stream()\n+                .map(p -> new IndexPatternsAndPermissions(p.getResolvedIndexPattern(user, resolver, cs), p.perms))\n+                .collect(Collectors.toList());\n+        return resolvedRequestedIndices\n+                .stream()\n+                .allMatch(index ->\n+                        Arrays.stream(requestedActions).allMatch(action -> indexPatternsAndPermissions\n+                                .stream()\n+                                .anyMatch(rip -> WildcardMatcher.matchAny(rip.pattern, index) && WildcardMatcher.matchAny(rip.perms, action))", "originalCommit": "980ca990ff184b30655cf02aecc25901b4551257", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU3NTQwNQ==", "url": "https://github.com/opensearch-project/security/pull/198#discussion_r392575405", "bodyText": "used ipap as the scope is 3 lines and I believe in short names for short scopes.", "author": "DmitryOlshansky", "createdAt": "2020-03-14T10:40:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU3ODE4Mw=="}], "type": "inlineReview"}, {"oid": "7f79c849504b7bf4fa780e29c200684bdeea7be1", "url": "https://github.com/opensearch-project/security/commit/7f79c849504b7bf4fa780e29c200684bdeea7be1", "message": "Another round of review comments, List -> Array", "committedDate": "2020-03-14T10:39:19Z", "type": "commit"}]}