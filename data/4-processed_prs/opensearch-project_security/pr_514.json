{"pr_number": 514, "pr_title": "Added kibana attribute to security config which will be used by tenan\u2026", "pr_createdAt": "2020-06-19T23:37:36Z", "pr_url": "https://github.com/opensearch-project/security/pull/514", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA4NzUzMA==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r443087530", "bodyText": "nit: change variable name to cr or something relevant.", "author": "sujithvm", "createdAt": "2020-06-20T01:01:46Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/rest/TenantInfoAction.java", "diffHunk": "@@ -71,14 +77,17 @@\n     private final ThreadContext threadContext;\n     private final ClusterService clusterService;\n     private final AdminDNs adminDns;\n+    private final ConfigurationRepository cl;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0NTYwNA==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r443145604", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final ConfigurationRepository cl;\n          \n          \n            \n                private final ConfigurationRepository configurationRepository;", "author": "vrozov", "createdAt": "2020-06-20T17:11:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA4NzUzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA4Nzk2Nw==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r443087967", "bodyText": "Doesnt the privileges evaluator already check for role mappings for the user ?\nhttps://github.com/opendistro-for-elasticsearch/security/blob/master/securityconfig/roles_mapping.yml#L46", "author": "sujithvm", "createdAt": "2020-06-20T01:06:51Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/rest/TenantInfoAction.java", "diffHunk": "@@ -137,7 +144,37 @@ public void accept(RestChannel channel) throws Exception {\n             }\n         };\n     }\n-    \n+\n+    private boolean isUnAuthorized() {\n+        final User user = (User)threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+\n+        // check if the user is a kibanauser or super admin\n+        boolean initialCheck =   user == null ||\n+                (!user.getName().equals(evaluator.kibanaServerUsername()))\n+                        && !adminDns.isAdmin(user);\n+        if(!initialCheck){\n+            return false;\n+        }\n+\n+        // check if the roles belong to kibana opendistro role\n+        final SecurityDynamicConfiguration<?> configuration = load(CType.ROLESMAPPING, true);\n+\n+        String kibanaOpendistroRole = evaluator.kibanaOpendistroRole();\n+\n+        if (configuration.exists(kibanaOpendistroRole)) {\n+            RoleMappings rolesMapping = (RoleMappings) configuration.getCEntries().get(kibanaOpendistroRole);\n+            if(rolesMapping.getUsers().contains(user.getName())){", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA4ODA2OA==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r443088068", "bodyText": "Also the rolemappings can be done via opendistro security roles inside an internal users so check that as well?", "author": "sujithvm", "createdAt": "2020-06-20T01:08:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA4Nzk2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE2MzUzNw==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r451163537", "bodyText": "opendistro security roles inside an internal us\n\nWe cant use this as this is relevant from es 7.4 and above.\nBelow 7.4 doesnt have the same.", "author": "palashhedau", "createdAt": "2020-07-07T21:49:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA4Nzk2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxMDI2NA==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r451210264", "bodyText": "Doesnt the privileges evaluator already check for role mappings for the user ?\nhttps://github.com/opendistro-for-elasticsearch/security/blob/master/securityconfig/roles_mapping.yml#L46\n\nIt doesnt look like, it has any method or config which will give me role mappings for the user", "author": "palashhedau", "createdAt": "2020-07-08T00:06:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA4Nzk2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0NTY1Mw==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r443145653", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        final ConfigurationRepository cl) {\n          \n          \n            \n                                        final ConfigurationRepository configurationRepository) {", "author": "vrozov", "createdAt": "2020-06-20T17:12:04Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/rest/TenantInfoAction.java", "diffHunk": "@@ -71,14 +77,17 @@\n     private final ThreadContext threadContext;\n     private final ClusterService clusterService;\n     private final AdminDNs adminDns;\n+    private final ConfigurationRepository cl;\n \n     public TenantInfoAction(final Settings settings, final RestController controller, \n-    \t\tfinal PrivilegesEvaluator evaluator, final ThreadPool threadPool, final ClusterService clusterService, final AdminDNs adminDns) {\n+    \t\tfinal PrivilegesEvaluator evaluator, final ThreadPool threadPool, final ClusterService clusterService, final AdminDNs adminDns,\n+                            final ConfigurationRepository cl) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxMzI4OA==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r451213288", "bodyText": "Missing copyright header", "author": "vrozov", "createdAt": "2020-07-08T00:18:30Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/RoleMappings.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.amazon.opendistroforelasticsearch.security.securityconf;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxMzgyNQ==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r451213825", "bodyText": "I don't think this class should be abstract.", "author": "vrozov", "createdAt": "2020-07-08T00:20:19Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/RoleMappings.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.amazon.opendistroforelasticsearch.security.securityconf;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+public abstract class RoleMappings {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc2NDA3OQ==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r451764079", "bodyText": "made it a normal class", "author": "palashhedau", "createdAt": "2020-07-08T19:04:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxMzgyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxMzk3MA==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r451213970", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected java.util.List<String> users= Collections.emptyList();\n          \n          \n            \n                protected List<String> users= Collections.emptyList();", "author": "vrozov", "createdAt": "2020-07-08T00:20:54Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/RoleMappings.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.amazon.opendistroforelasticsearch.security.securityconf;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+public abstract class RoleMappings {\n+    protected List<String> hosts= Collections.emptyList();\n+    protected java.util.List<String> users= Collections.emptyList();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4Mjk4NQ==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r456582985", "bodyText": "Change to isAuthorized()", "author": "vrozov", "createdAt": "2020-07-17T17:40:38Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/rest/TenantInfoAction.java", "diffHunk": "@@ -137,7 +144,37 @@ public void accept(RestChannel channel) throws Exception {\n             }\n         };\n     }\n-    \n+\n+    private boolean isUnAuthorized() {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4NjcxMw==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r456686713", "bodyText": "Agree. By reversing it, you an simplify the code inside the function.", "author": "dinusX", "createdAt": "2020-07-17T21:42:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4Mjk4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4NDU1MA==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r456584550", "bodyText": "nit: initialCheck is not a good name. The flag is used only once, inline it.", "author": "vrozov", "createdAt": "2020-07-17T17:43:50Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/rest/TenantInfoAction.java", "diffHunk": "@@ -137,7 +144,37 @@ public void accept(RestChannel channel) throws Exception {\n             }\n         };\n     }\n-    \n+\n+    private boolean isUnAuthorized() {\n+        final User user = (User)threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+\n+        // check if the user is a kibanauser or super admin\n+        boolean initialCheck =   user == null ||", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4NjMzOQ==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r456586339", "bodyText": "avoid double get() (check rolesMapping for null instead).", "author": "vrozov", "createdAt": "2020-07-17T17:47:18Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/rest/TenantInfoAction.java", "diffHunk": "@@ -137,7 +144,37 @@ public void accept(RestChannel channel) throws Exception {\n             }\n         };\n     }\n-    \n+\n+    private boolean isUnAuthorized() {\n+        final User user = (User)threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+\n+        // check if the user is a kibanauser or super admin\n+        boolean initialCheck =   user == null ||\n+                (!user.getName().equals(evaluator.kibanaServerUsername()))\n+                        && !adminDns.isAdmin(user);\n+        if(!initialCheck){\n+            return false;\n+        }\n+\n+        // check if the roles belong to kibana opendistro role\n+        final SecurityDynamicConfiguration<?> configuration = load(CType.ROLESMAPPING, true);\n+\n+        String kibanaOpendistroRole = evaluator.kibanaOpendistroRole();\n+\n+        if (configuration.exists(kibanaOpendistroRole)) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NzQwMA==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r456597400", "bodyText": "Can't setters be also part of RoleMappings?", "author": "vrozov", "createdAt": "2020-07-17T18:08:40Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/impl/v7/RoleMappingsV7.java", "diffHunk": "@@ -67,24 +66,12 @@ public void setBackend_roles(List<String> backend_roles) {\n \n \n \n-    public List<String> getHosts() {\n-        return hosts;\n-    }\n-\n-\n-\n     public void setHosts(List<String> hosts) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5NzU1Nw==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r456597557", "bodyText": "Missing copyright.", "author": "vrozov", "createdAt": "2020-07-17T18:09:03Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/TenantInfoActionTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwMzQxNg==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r456603416", "bodyText": "nit: put return config.dynamic.kibana.opendistro_role; on a separate line.", "author": "vrozov", "createdAt": "2020-07-17T18:21:38Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/DynamicConfigModelV6.java", "diffHunk": "@@ -114,6 +114,8 @@ public String getKibanaServerUsername() {\n         return config.dynamic.kibana.server_username;\n     }\n     @Override\n+    public String getKibanaOpendistroRole() { return config.dynamic.kibana.opendistro_role;}", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4NjQ5Ng==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r456686496", "bodyText": "not sure if this operation is expensive, but you can move it inside the \"if\" section where you check if \"kibanaOpendistroRole\" is present", "author": "dinusX", "createdAt": "2020-07-17T21:42:11Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/rest/TenantInfoAction.java", "diffHunk": "@@ -137,7 +144,37 @@ public void accept(RestChannel channel) throws Exception {\n             }\n         };\n     }\n-    \n+\n+    private boolean isUnAuthorized() {\n+        final User user = (User)threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+\n+        // check if the user is a kibanauser or super admin\n+        boolean initialCheck =   user == null ||\n+                (!user.getName().equals(evaluator.kibanaServerUsername()))\n+                        && !adminDns.isAdmin(user);\n+        if(!initialCheck){\n+            return false;\n+        }\n+\n+        // check if the roles belong to kibana opendistro role\n+        final SecurityDynamicConfiguration<?> configuration = load(CType.ROLESMAPPING, true);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4ODMxOA==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r457588318", "bodyText": "checking kibanaOpendistroRole itself require configuration.\nif (configuration.exists(kibanaOpendistroRole)) {\nboth configuration and kibanaOpendistroRole initialization should be before the check", "author": "palashhedau", "createdAt": "2020-07-20T17:51:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4NjQ5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4ODQ1OA==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r457588458", "bodyText": "correct me if I am missing something here", "author": "palashhedau", "createdAt": "2020-07-20T17:52:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4NjQ5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4NzExOQ==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r456687119", "bodyText": "should we make this class abstract?", "author": "dinusX", "createdAt": "2020-07-17T21:44:14Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/RoleMappings.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Portions Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.securityconf;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class RoleMappings {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5NDA2Ng==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r456694066", "bodyText": "it was abstract. Vlad suggested not be abstract.", "author": "palashhedau", "createdAt": "2020-07-17T22:07:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4NzExOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMzOTI5Nw==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r458339297", "bodyText": "It is a self contained class with no abstract methods.", "author": "vrozov", "createdAt": "2020-07-21T19:33:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4NzExOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4ODY5Mg==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r456688692", "bodyText": "Do you need to check \"SC_OK\" in response status?", "author": "dinusX", "createdAt": "2020-07-17T21:49:24Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/TenantInfoActionTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.amazon.opendistroforelasticsearch.security.dlic.rest.api;\n+\n+import com.amazon.opendistroforelasticsearch.security.privileges.PrivilegesEvaluator;\n+import com.amazon.opendistroforelasticsearch.security.support.ConfigConstants;\n+import com.amazon.opendistroforelasticsearch.security.test.helper.file.FileHelper;\n+import com.amazon.opendistroforelasticsearch.security.test.helper.rest.RestHelper;\n+import org.apache.http.Header;\n+import org.apache.http.HttpStatus;\n+import org.elasticsearch.common.settings.Settings;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+public class TenantInfoActionTest extends AbstractRestApiUnitTest {\n+    private String payload = \"{\\\"hosts\\\":[],\\\"users\\\":[\\\"sarek\\\"],\" +\n+            \"\\\"backend_roles\\\":[\\\"starfleet*\\\",\\\"ambassador\\\"],\\\"and_backend_roles\\\":[],\\\"description\\\":\\\"Migrated \" +\n+            \"from v6\\\"}\";\n+\n+    @Test\n+    public void testTenantInfoAPI() throws Exception {\n+        Settings settings = Settings.builder().put(ConfigConstants.OPENDISTRO_SECURITY_UNSUPPORTED_RESTAPI_ALLOW_SECURITYCONFIG_MODIFICATION, true).build();\n+        setup(settings);\n+\n+        rh.keystore = \"restapi/kirk-keystore.jks\";\n+        rh.sendAdminCertificate = true;\n+        RestHelper.HttpResponse response = rh.executeGetRequest(\"_opendistro/_security/tenantinfo\");\n+        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n+\n+        rh.sendAdminCertificate = false;\n+        response = rh.executeGetRequest(\"_opendistro/_security/tenantinfo\");\n+        Assert.assertEquals(HttpStatus.SC_UNAUTHORIZED, response.getStatusCode());\n+\n+        rh.sendHTTPClientCredentials = true;\n+        response = rh.executeGetRequest(\"_opendistro/_security/tenantinfo\");\n+        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n+\n+        rh.sendAdminCertificate = true;\n+\n+        //update security config\n+        response = rh.executePatchRequest(\"/_opendistro/_security/api/securityconfig\", \"[{\\\"op\\\": \\\"replace\\\",\\\"path\\\": \\\"/config/dynamic/kibana/opendistro_role\\\",\\\"value\\\": \\\"opendistro_security_role_internal\\\"}]\", new Header[0]);\n+        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n+\n+        response = rh.executePutRequest(\"/_opendistro/_security/api/rolesmapping/opendistro_security_role_internal\", payload, new Header[0]);\n+        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n+\n+        response = rh.executeGetRequest(\"_opendistro/_security/api/rolesmapping/opendistro_security_role_internal\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwNjI1MQ==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r457606251", "bodyText": "This is a old code, which is removed now in the latest commit. It was for testing", "author": "palashhedau", "createdAt": "2020-07-20T18:24:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4ODY5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMzODA5OQ==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r458338099", "bodyText": "Please change to full 2020 copyright", "author": "vrozov", "createdAt": "2020-07-21T19:31:18Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/RoleMappings.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Portions Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0MTY1OQ==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r458341659", "bodyText": "nit: private. There are public getters and setters.", "author": "vrozov", "createdAt": "2020-07-21T19:38:32Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/RoleMappings.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Portions Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.security.securityconf;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class RoleMappings {\n+\n+    protected List<String> hosts= Collections.emptyList();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2MDY2Nw==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r461260667", "bodyText": "instead of checking multiple times \"user != null\", can you add just one line above:\nif user == null:\n  return false;", "author": "dinusX", "createdAt": "2020-07-28T01:18:24Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/rest/TenantInfoAction.java", "diffHunk": "@@ -137,7 +144,35 @@ public void accept(RestChannel channel) throws Exception {\n             }\n         };\n     }\n-    \n+\n+    private boolean isAuthorized() {\n+        final User user = (User)threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+\n+        // check if the user is a kibanauser or super admin\n+        boolean validateUserByName = (user != null) && (user.getName().equals(evaluator.kibanaServerUsername()) || adminDns.isAdmin(user));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2MDk1Nw==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r461260957", "bodyText": "What happens if this is empty/null ? Should we add additional checks?", "author": "dinusX", "createdAt": "2020-07-28T01:19:32Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/rest/TenantInfoAction.java", "diffHunk": "@@ -137,7 +144,35 @@ public void accept(RestChannel channel) throws Exception {\n             }\n         };\n     }\n-    \n+\n+    private boolean isAuthorized() {\n+        final User user = (User)threadContext.getTransient(ConfigConstants.OPENDISTRO_SECURITY_USER);\n+\n+        // check if the user is a kibanauser or super admin\n+        boolean validateUserByName = (user != null) && (user.getName().equals(evaluator.kibanaServerUsername()) || adminDns.isAdmin(user));\n+\n+        if (validateUserByName) {\n+            return true;\n+        }\n+\n+        // If user check failed by name and admin, check if the users belong to kibana opendistro role\n+        final SecurityDynamicConfiguration<?> rolesMappingConfiguration = load(CType.ROLESMAPPING, true);\n+\n+        // check if kibanaOpendistroRole is present in RolesMapping and if yes, check if user is a part of this role\n+        if (rolesMappingConfiguration != null && user != null) {\n+            String kibanaOpendistroRole = evaluator.kibanaOpendistroRole();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3NDM5MQ==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r461274391", "bodyText": "returning false in this case.", "author": "palashhedau", "createdAt": "2020-07-28T02:08:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2MDk1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2NjM0NQ==", "url": "https://github.com/opensearch-project/security/pull/514#discussion_r461266345", "bodyText": "Can we change to not have any default role (set to blank/null) ?\nIf we plan to add a default role, we should update default roles and roles_mapping configuration.\nIf users will want to use this feature, they'll have to manually update the domain configuration and create the required role and role_mapping\nSimilar for V6 config.", "author": "dinusX", "createdAt": "2020-07-28T01:39:05Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/securityconf/impl/v7/ConfigV7.java", "diffHunk": "@@ -105,10 +105,12 @@ public String toString() {\n \n         public boolean multitenancy_enabled = true;\n         public String server_username = \"kibanaserver\";\n+        public String opendistro_role = \"kibana_server\";", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c8c7bf611733c3c30d4f80096a13b947a3ff6a4f", "url": "https://github.com/opensearch-project/security/commit/c8c7bf611733c3c30d4f80096a13b947a3ff6a4f", "message": "Added kibana attribute to security config which will be used by tenantinfo api.\n\nAdded test cases", "committedDate": "2020-07-28T04:08:37Z", "type": "commit"}]}