{"pr_number": 402, "pr_title": "Implement put if absent behavior for security config", "pr_createdAt": "2020-04-22T18:42:47Z", "pr_url": "https://github.com/opensearch-project/security/pull/402", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxNjI0NA==", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r414816244", "bodyText": "This code will be executed every time you restart an instance, which means that it will always override the existing config with default values, which is not what we want.\nWhy not use instead some API to update the config values ?", "author": "dinusX", "createdAt": "2020-04-24T19:36:30Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/ConfigurationRepository.java", "diffHunk": "@@ -130,11 +131,21 @@ public void run() {\n                                     indexSettings.put(\"index.number_of_shards\", 1);\n                                     indexSettings.put(\"index.auto_expand_replicas\", \"0-all\");\n \n-                                    boolean ok = client.admin().indices().create(new CreateIndexRequest(opendistrosecurityIndex)\n-                                            .settings(indexSettings))\n-                                            .actionGet().isAcknowledged();\n-                                    LOGGER.info(\"Index {} created?: {}\", opendistrosecurityIndex, ok);\n-                                    if(ok) {\n+                                    boolean existsOrCreated = client.admin().indices()\n+                                            .exists(new IndicesExistsRequest(opendistrosecurityIndex))\n+                                            .actionGet().isExists();\n+\n+                                    if (existsOrCreated) {\n+                                        LOGGER.info(\"Security index {} exists.\", opendistrosecurityIndex);\n+                                    } else {\n+                                        LOGGER.info(\"Security index {} does not exist. Attempting to create new index.\", opendistrosecurityIndex);\n+                                        existsOrCreated = client.admin().indices().create(new CreateIndexRequest(opendistrosecurityIndex)\n+                                                .settings(indexSettings))\n+                                                .actionGet().isAcknowledged();\n+                                        LOGGER.info(\"Index {} created?: {}\", opendistrosecurityIndex, existsOrCreated);\n+                                    }\n+\n+                                    if (existsOrCreated) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxOTQyNg==", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r414819426", "bodyText": "Yes, this will be executed on every restart.\nIt will attempt to create config document with put-if-absent behavior by setting OpType to CREATE in ConfigHelper.\nIf config exists, elastic throws a version conflict exception as specified here https://www.elastic.co/guide/en/elasticsearch/client/java-rest/master/java-rest-high-document-index.html#java-rest-high-document-index-response so plugin will simply skip config documents that already exist.", "author": "sujithvm", "createdAt": "2020-04-24T19:42:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxNjI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg2NTE1OA==", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r414865158", "bodyText": "How this will help you to load \"audit.yml\" ? Won't this simply throw an exception during first attempt to put the \"config.yml\" file ?", "author": "dinusX", "createdAt": "2020-04-24T21:10:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxNjI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwNTg4Mw==", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r414905883", "bodyText": "Say the existing cluster has documents roles, rolemapping, internalusers ... already loaded from their yml files when the cluster first started.\nNow you want to include audit configuration from audit.yml file.\nWith this change, you include the audit.yml file and restart the cluster.\nUpdates will fail for roles, rolemapping, internalusers .. (throwing exception) but will pass for audit as the document does not exist in the index yet (Put-If-Absent) behavior.", "author": "sujithvm", "createdAt": "2020-04-24T22:52:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxNjI0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNDU0MQ==", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r418324541", "bodyText": "What is the benefit of checking if the index already exists? Now there will be possibly two requests instead of one when one seems to provide exactly the same functionality. The create request should not be much more heavyweight compared to the does exist request to try to avoid it.", "author": "vrozov", "createdAt": "2020-04-30T22:27:36Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/ConfigurationRepository.java", "diffHunk": "@@ -130,11 +131,21 @@ public void run() {\n                                     indexSettings.put(\"index.number_of_shards\", 1);\n                                     indexSettings.put(\"index.auto_expand_replicas\", \"0-all\");\n \n-                                    boolean ok = client.admin().indices().create(new CreateIndexRequest(opendistrosecurityIndex)\n-                                            .settings(indexSettings))\n-                                            .actionGet().isAcknowledged();\n-                                    LOGGER.info(\"Index {} created?: {}\", opendistrosecurityIndex, ok);\n-                                    if(ok) {\n+                                    boolean existsOrCreated = client.admin().indices()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM4Mjk0NQ==", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r418382945", "bodyText": "Do you mean to always try creating and catch the failure as index exists case?\nOnly the exists condition is going to be executed after the index is created.\nIMO why do something that we know node will always cry about and will throw an error ?", "author": "sujithvm", "createdAt": "2020-05-01T01:56:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQwNzg0NQ==", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r418407845", "bodyText": "Is there already a check that the index does not exist on line 235 before installDefaultConfig is set to true? Is this additional check prevents race condition between nodes or it is a different check?", "author": "vrozov", "createdAt": "2020-05-01T04:07:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyOTcyOA==", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r418429728", "bodyText": "ES resolves concurrency for document updates amongst the nodes via document versioning.\nSo that looks like some different check (maybe threads within the same node).", "author": "sujithvm", "createdAt": "2020-05-01T06:06:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzOTcwOQ==", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r418439709", "bodyText": "Based on the comments the code on line 235 checks if the index exists (but does it using different API). What is the difference between using clusterService.state().metaData().hasConcreteIndex(opendistrosecurityIndex) and client.admin().indices().exists(new IndicesExistsRequest(opendistrosecurityIndex))? As an attempt to create the index would be done only if installDefaultConfig is true, so clusterService.state().metaData().hasConcreteIndex(opendistrosecurityIndex) must be false, what is the purpose of client.admin().indices().exists(new IndicesExistsRequest(opendistrosecurityIndex)) check?", "author": "vrozov", "createdAt": "2020-05-01T06:56:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4ODYyNw==", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r418688627", "bodyText": "IndicesExistsRequest uses admin client to check if index exists. Maybe at some point the index was not concrete index and that api was used or need admin client \ud83e\udd14 I did try with clusterService.state().metaData().hasConcreteIndex(opendistrosecurityIndex) and it returns false", "author": "sujithvm", "createdAt": "2020-05-01T19:01:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODcxMDY4Mw==", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r418710683", "bodyText": "I still don't understand the difference between using admin client and cluster service state metadata (Yes, I understand that the former one is a network call while the last one uses in-memory state. But should both be consistent and if not, why one will be different than the other?)\nIn addition, exists() and IndicesExistsRequest are removed from the latest ES. IMO, we should try to avoid introducing a dependency on it now.\nPlease check other ES plugins to see how they check whether or not an index exists and create it.", "author": "vrozov", "createdAt": "2020-05-01T19:56:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNDU0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyOTY3Nw==", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r418329677", "bodyText": "Is there a way to get an error message with the details of why the index can't be created? There is no yet attempt to \"use\" the index, is the error message should be \"Failed to create {} index\"?", "author": "vrozov", "createdAt": "2020-04-30T22:41:44Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/ConfigurationRepository.java", "diffHunk": "@@ -147,7 +158,7 @@ public void run() {\n                                         ConfigHelper.uploadFile(client, cd+\"nodes_dn.yml\", opendistrosecurityIndex, CType.NODESDN, DEFAULT_CONFIG_VERSION, populateEmptyIfFileMissing);\n                                         LOGGER.info(\"Default config applied\");\n                                     } else {\n-                                        LOGGER.error(\"Can not create {} index\", opendistrosecurityIndex);\n+                                        LOGGER.error(\"Can not use or create {} index\", opendistrosecurityIndex);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM4Mzc2Nw==", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r418383767", "bodyText": "Well I just wanted to mean that \"not ok\" means, it could not attempt to use the index to update the documents.\nI don't mind changing the grammar. Let me know", "author": "sujithvm", "createdAt": "2020-05-01T02:00:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyOTY3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMDE4NQ==", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r418410185", "bodyText": "Do you mean to say \"Request to create index {} is not acknowledged. The index may not be usable to load dynamic configuration.\"?", "author": "vrozov", "createdAt": "2020-05-01T04:20:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyOTY3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0MDIwNg==", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r418340206", "bodyText": "IMO, the warning level is not appropriate as it is not a misconfiguration or something went wrong. On a multi-node cluster, only one node will update the index, all other nodes are supposed to fail and would log the warning message.", "author": "vrozov", "createdAt": "2020-04-30T23:13:28Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/support/ConfigHelper.java", "diffHunk": "@@ -71,13 +73,16 @@ public static void uploadFile(Client tc, String filepath, String index, CType cT\n         try (Reader reader = createFileOrStringReader(cType, configVersion, filepath, populateEmptyIfFileMissing)) {\n \n             final String res = tc\n-                    .index(new IndexRequest(index).type(configVersion==1?\"security\":\"_doc\").id(cType.toLCString()).setRefreshPolicy(RefreshPolicy.IMMEDIATE)\n+                    .index(new IndexRequest(index).type(configVersion==1?\"security\":\"_doc\").id(cType.toLCString()).opType(DocWriteRequest.OpType.CREATE).setRefreshPolicy(RefreshPolicy.IMMEDIATE)\n                             .source(cType.toLCString(), readXContent(reader, XContentType.YAML))).actionGet().getId();\n \n             if (!cType.toLCString().equals(res)) {\n                 throw new Exception(\"   FAIL: Configuration for '\" + cType.toLCString()\n                         + \"' failed for unknown reasons. Pls. consult logfile of elasticsearch\");\n             }\n+            LOGGER.info(\"Doc '{}' with version {} is updated.\", cType, configVersion);\n+        } catch (VersionConflictEngineException versionConflictEngineException) {\n+            LOGGER.warn(\"Doc with id {} in index {} already exists. Doing nothing.\", cType.toLCString(), index);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM4MTIzOA==", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r418381238", "bodyText": "What do you think is the appropriate level ?\nIMO the node tried to do something and failure is expected so put as warning. These logs are on the node level.", "author": "sujithvm", "createdAt": "2020-05-01T01:49:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0MDIwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMzA5MQ==", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r418413091", "bodyText": "It depends on who is the target of the message. If it is intended for ES admin, it should be INFO (but admin should be able to do something, like delete index or upload it manually) or DEBUG, if it is intended for plugin developers.", "author": "vrozov", "createdAt": "2020-05-01T04:36:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0MDIwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5NDE4NQ==", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r441894185", "bodyText": "Do we need to add audit.yml here?\nor it is cover in separate PR?", "author": "hardik-k-shah", "createdAt": "2020-06-17T23:52:27Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/ConfigurationRepository.java", "diffHunk": "@@ -136,27 +133,30 @@ public void run() {\n                                             .settings(indexSettings))\n                                             .actionGet().isAcknowledged();\n                                     LOGGER.info(\"Index {} created?: {}\", opendistrosecurityIndex, ok);\n-                                    if(ok) {\n-                                        ConfigHelper.uploadFile(client, cd+\"config.yml\", opendistrosecurityIndex, CType.CONFIG, DEFAULT_CONFIG_VERSION);\n-                                        ConfigHelper.uploadFile(client, cd+\"roles.yml\", opendistrosecurityIndex, CType.ROLES, DEFAULT_CONFIG_VERSION);\n-                                        ConfigHelper.uploadFile(client, cd+\"roles_mapping.yml\", opendistrosecurityIndex, CType.ROLESMAPPING, DEFAULT_CONFIG_VERSION);\n-                                        ConfigHelper.uploadFile(client, cd+\"internal_users.yml\", opendistrosecurityIndex, CType.INTERNALUSERS, DEFAULT_CONFIG_VERSION);\n-                                        ConfigHelper.uploadFile(client, cd+\"action_groups.yml\", opendistrosecurityIndex, CType.ACTIONGROUPS, DEFAULT_CONFIG_VERSION);\n-                                        if(DEFAULT_CONFIG_VERSION == 2) {\n-                                            ConfigHelper.uploadFile(client, cd+\"tenants.yml\", opendistrosecurityIndex, CType.TENANTS, DEFAULT_CONFIG_VERSION);\n-                                        }\n-                                        final boolean populateEmptyIfFileMissing = true;\n-                                        ConfigHelper.uploadFile(client, cd+\"nodes_dn.yml\", opendistrosecurityIndex, CType.NODESDN, DEFAULT_CONFIG_VERSION, populateEmptyIfFileMissing);\n-                                        LOGGER.info(\"Default config applied\");\n-                                    } else {\n-                                        LOGGER.error(\"Can not create {} index\", opendistrosecurityIndex);\n-                                    }\n+                                } catch (Exception e) {\n+                                    LOGGER.error(\"Can not create {} index\", opendistrosecurityIndex, e);\n+                                }\n+                            }\n+\n+                            if (createConfigIfAbsent.get()) {\n+                                try {\n+                                    String lookupDir = System.getProperty(\"security.default_init.dir\");\n+                                    final String cd = lookupDir != null ? (lookupDir + \"/\") : new Environment(settings, configPath).pluginsFile().toAbsolutePath().toString() + \"/opendistro_security/securityconfig/\";\n+\n+                                    ConfigHelper.uploadFile(client, cd + \"config.yml\", opendistrosecurityIndex, CType.CONFIG, DEFAULT_CONFIG_VERSION);\n+                                    ConfigHelper.uploadFile(client, cd + \"roles.yml\", opendistrosecurityIndex, CType.ROLES, DEFAULT_CONFIG_VERSION);\n+                                    ConfigHelper.uploadFile(client, cd + \"roles_mapping.yml\", opendistrosecurityIndex, CType.ROLESMAPPING, DEFAULT_CONFIG_VERSION);\n+                                    ConfigHelper.uploadFile(client, cd + \"internal_users.yml\", opendistrosecurityIndex, CType.INTERNALUSERS, DEFAULT_CONFIG_VERSION);\n+                                    ConfigHelper.uploadFile(client, cd + \"action_groups.yml\", opendistrosecurityIndex, CType.ACTIONGROUPS, DEFAULT_CONFIG_VERSION);\n+                                    ConfigHelper.uploadFile(client, cd + \"tenants.yml\", opendistrosecurityIndex, CType.TENANTS, DEFAULT_CONFIG_VERSION);\n+", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5NTk3Mg==", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r441895972", "bodyText": "Yes. It is going to be covered in #409", "author": "sujithvm", "createdAt": "2020-06-17T23:58:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5NDE4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5NDcwOQ==", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r441894709", "bodyText": "why are we moving to client.admin() from clusterService.state().metaData().hasConcreteIndex(opendistrosecurityIndex)", "author": "hardik-k-shah", "createdAt": "2020-06-17T23:54:15Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/ConfigurationRepository.java", "diffHunk": "@@ -213,19 +213,27 @@ public void run() {\n \n     }\n \n-    public void initOnNodeStart() {\n+    private boolean indexExists(String index) {\n+        GetIndexResponse getIndexResponse = client.admin().indices()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxOTg2OA==", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r442419868", "bodyText": "clusterService.state() maintains a cached copy of the cluster state.\nTo reproduce the behavior:\n\ninstall plugin\nstart elasticsearch\nrestart elasticsearch\nrestart elasticsearch\n\nWhen it starts up, the cluster state is not updated correctly because of which plugin thinks the index does not exist.\nYou would see this printed everytime coming from here\n[2020-06-18T11:19:36,804][INFO ][c.a.o.s.c.ConfigurationRepository] [smoketestnode] .opendistro_security index does not exist yet, so we create a default config\n\nDoing the GetIndexResponse would query the ES cluster and get the status whether the index exists or not.", "author": "sujithvm", "createdAt": "2020-06-18T18:25:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5NDcwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMjAwMQ==", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r442422001", "bodyText": "Why we dont see the impact is because this log level is debug here\nIf you change this to error or info, you would that its throwing error every time in opendistro.", "author": "sujithvm", "createdAt": "2020-06-18T18:29:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5NDcwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkyNzUzOQ==", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r443927539", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.elasticsearch.action.DocWriteRequest;\n          \n          \n            \n            import org.elasticsearch.action.DocWriteRequest.OpType;\n          \n      \n    \n    \n  \n\nor\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.elasticsearch.action.DocWriteRequest;\n          \n          \n            \n            import static org.elasticsearch.action.DocWriteRequest.OpType.CREATE;", "author": "vrozov", "createdAt": "2020-06-23T02:33:56Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/support/ConfigHelper.java", "diffHunk": "@@ -39,6 +39,7 @@\n import com.amazon.opendistroforelasticsearch.security.securityconf.impl.Meta;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.DocWriteRequest;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkyOTA2OA==", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r443929068", "bodyText": "nit: introduce local variable IndexRequest indexRequest = ...", "author": "vrozov", "createdAt": "2020-06-23T02:40:00Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/support/ConfigHelper.java", "diffHunk": "@@ -64,22 +66,26 @@ public static void uploadFile(Client tc, String filepath, String index, CType cT\n     }\n \n     public static void uploadFile(Client tc, String filepath, String index, CType cType, int configVersion, boolean populateEmptyIfFileMissing) throws Exception {\n-        LOGGER.info(\"Will update '\" + cType + \"' with \" + filepath + \" and populate it with empty doc if file missing and populateEmptyIfFileMissing=\" + populateEmptyIfFileMissing);\n+        final String configType = cType.toLCString();\n+        LOGGER.info(\"Will update '\" + configType + \"' with \" + filepath + \" and populate it with empty doc if file missing and populateEmptyIfFileMissing=\" + populateEmptyIfFileMissing);\n \n         if (!populateEmptyIfFileMissing) {\n             ConfigHelper.fromYamlFile(filepath, cType, configVersion, 0, 0);\n         }\n-        \n+\n         try (Reader reader = createFileOrStringReader(cType, configVersion, filepath, populateEmptyIfFileMissing)) {\n \n             final String res = tc\n-                    .index(new IndexRequest(index).type(configVersion==1?\"security\":\"_doc\").id(cType.toLCString()).setRefreshPolicy(RefreshPolicy.IMMEDIATE)\n+                    .index(new IndexRequest(index).type(configVersion==1?\"security\":\"_doc\").id(configType).opType(DocWriteRequest.OpType.CREATE).setRefreshPolicy(RefreshPolicy.IMMEDIATE)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkzMjIxMQ==", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r443932211", "bodyText": "cType.toLCString() -> configType", "author": "vrozov", "createdAt": "2020-06-23T02:52:19Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/support/ConfigHelper.java", "diffHunk": "@@ -64,22 +66,26 @@ public static void uploadFile(Client tc, String filepath, String index, CType cT\n     }\n \n     public static void uploadFile(Client tc, String filepath, String index, CType cType, int configVersion, boolean populateEmptyIfFileMissing) throws Exception {\n-        LOGGER.info(\"Will update '\" + cType + \"' with \" + filepath + \" and populate it with empty doc if file missing and populateEmptyIfFileMissing=\" + populateEmptyIfFileMissing);\n+        final String configType = cType.toLCString();\n+        LOGGER.info(\"Will update '\" + configType + \"' with \" + filepath + \" and populate it with empty doc if file missing and populateEmptyIfFileMissing=\" + populateEmptyIfFileMissing);\n \n         if (!populateEmptyIfFileMissing) {\n             ConfigHelper.fromYamlFile(filepath, cType, configVersion, 0, 0);\n         }\n-        \n+\n         try (Reader reader = createFileOrStringReader(cType, configVersion, filepath, populateEmptyIfFileMissing)) {\n \n             final String res = tc\n-                    .index(new IndexRequest(index).type(configVersion==1?\"security\":\"_doc\").id(cType.toLCString()).setRefreshPolicy(RefreshPolicy.IMMEDIATE)\n+                    .index(new IndexRequest(index).type(configVersion==1?\"security\":\"_doc\").id(configType).opType(DocWriteRequest.OpType.CREATE).setRefreshPolicy(RefreshPolicy.IMMEDIATE)\n                             .source(cType.toLCString(), readXContent(reader, XContentType.YAML))).actionGet().getId();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkzNTE3OA==", "url": "https://github.com/opensearch-project/security/pull/402#discussion_r443935178", "bodyText": "nit: \"Index {} already contains doc with id {}, skipping update.\"", "author": "vrozov", "createdAt": "2020-06-23T03:04:27Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/support/ConfigHelper.java", "diffHunk": "@@ -64,22 +66,26 @@ public static void uploadFile(Client tc, String filepath, String index, CType cT\n     }\n \n     public static void uploadFile(Client tc, String filepath, String index, CType cType, int configVersion, boolean populateEmptyIfFileMissing) throws Exception {\n-        LOGGER.info(\"Will update '\" + cType + \"' with \" + filepath + \" and populate it with empty doc if file missing and populateEmptyIfFileMissing=\" + populateEmptyIfFileMissing);\n+        final String configType = cType.toLCString();\n+        LOGGER.info(\"Will update '\" + configType + \"' with \" + filepath + \" and populate it with empty doc if file missing and populateEmptyIfFileMissing=\" + populateEmptyIfFileMissing);\n \n         if (!populateEmptyIfFileMissing) {\n             ConfigHelper.fromYamlFile(filepath, cType, configVersion, 0, 0);\n         }\n-        \n+\n         try (Reader reader = createFileOrStringReader(cType, configVersion, filepath, populateEmptyIfFileMissing)) {\n \n             final String res = tc\n-                    .index(new IndexRequest(index).type(configVersion==1?\"security\":\"_doc\").id(cType.toLCString()).setRefreshPolicy(RefreshPolicy.IMMEDIATE)\n+                    .index(new IndexRequest(index).type(configVersion==1?\"security\":\"_doc\").id(configType).opType(DocWriteRequest.OpType.CREATE).setRefreshPolicy(RefreshPolicy.IMMEDIATE)\n                             .source(cType.toLCString(), readXContent(reader, XContentType.YAML))).actionGet().getId();\n \n-            if (!cType.toLCString().equals(res)) {\n-                throw new Exception(\"   FAIL: Configuration for '\" + cType.toLCString()\n+            if (!configType.equals(res)) {\n+                throw new Exception(\"   FAIL: Configuration for '\" + configType\n                         + \"' failed for unknown reasons. Pls. consult logfile of elasticsearch\");\n             }\n+            LOGGER.info(\"Doc with id '{}' and version {} is updated in {} index.\", configType, configVersion, index);\n+        } catch (VersionConflictEngineException versionConflictEngineException) {\n+            LOGGER.info(\"Doc with id '{}' already exists in {} index. Doing nothing.\", configType, index);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ff103ac7fa6b02a1ba39ff12278b381642918282", "url": "https://github.com/opensearch-project/security/commit/ff103ac7fa6b02a1ba39ff12278b381642918282", "message": "Put if absent for documents in the security index", "committedDate": "2020-06-23T06:18:59Z", "type": "commit"}]}