{"pr_number": 661, "pr_title": "Support ES 7.9.0", "pr_createdAt": "2020-08-24T23:22:17Z", "pr_url": "https://github.com/opensearch-project/security/pull/661", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2NzgyNA==", "url": "https://github.com/opensearch-project/security/pull/661#discussion_r478567824", "bodyText": "Why was this change done ?\nThe previous version was keeping in sync with all the fields form Elasticsearch, and now it might get out of sync in the future.", "author": "dinusX", "createdAt": "2020-08-27T17:05:03Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/OpenDistroSecurityFlsDlsIndexSearcherWrapper.java", "diffHunk": "@@ -42,8 +42,9 @@\n \n public class OpenDistroSecurityFlsDlsIndexSearcherWrapper extends OpenDistroSecurityIndexSearcherWrapper {\n \n-    private static final Set<String> metaFields = Sets.union(Sets.newHashSet(\"_source\", \"_version\", \"_field_names\", \"_seq_no\", \"_primary_term\"),\n-            Sets.newHashSet(MapperService.getAllMetaFields()));\n+    // TODO: the list is outdated. It is necessary to change how meta fields are handled\n+    private static final Set<String> metaFields = Sets.newHashSet(\"_source\", \"_version\", \"_field_names\",", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYwNTM2MA==", "url": "https://github.com/opensearch-project/security/pull/661#discussion_r478605360", "bodyText": "getAllMetaFields() was removed from MapperService in 7.9", "author": "vrozov", "createdAt": "2020-08-27T18:11:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2NzgyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYyNzk3Nw==", "url": "https://github.com/opensearch-project/security/pull/661#discussion_r478627977", "bodyText": "You might consider using IndicesModule.getBuiltInMetadataFields() instead.\nSee commit: elastic/elasticsearch@70e63a3", "author": "dinusX", "createdAt": "2020-08-27T18:53:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2NzgyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3MjAxNA==", "url": "https://github.com/opensearch-project/security/pull/661#discussion_r478672014", "bodyText": "Yes, I considered using IndicesModule.getBuiltInMetadataFields() and opted out of using it:\n\nthe Set returned by IndicesModule.getBuiltInMetadataFields() is not complete and still requires more entries to be added to it.\nthe Set returned by IndicesModule.getBuiltInMetadataFields() is not the same as what MapperService.getAllMetaFields() returns and requires changes to extra entries that are added to it.\nthe Set seems to be outdated anyway (note TODO: comment) and we should consider switching from static Set to using MapperService.isMetadataField().", "author": "vrozov", "createdAt": "2020-08-27T20:18:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2NzgyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU4OTMwMw==", "url": "https://github.com/opensearch-project/security/pull/661#discussion_r478589303", "bodyText": "FieldCapabilitiesIndexRequest has also a method to return a list of indices().\nDo we need to merge the values together, similar to the above if section with SingleShardRequest ?\nhttps://github.com/elastic/elasticsearch/blob/b0f402487946d52a5d54b7ad289b800b6772fd6b/server/src/main/java/org/elasticsearch/action/fieldcaps/FieldCapabilitiesIndexRequest.java#L79", "author": "dinusX", "createdAt": "2020-08-27T17:42:40Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/resolver/IndexResolverReplacer.java", "diffHunk": "@@ -705,10 +706,23 @@ private boolean getOrReplaceAllIndices(final Object request, final IndicesProvid\n             }\n \n             String[] newIndices = provider.provide(indicesL.toArray(new String[0]), request, true);\n-            if(checkIndices(request, newIndices, true, allowEmptyIndices) == false) {\n+            if (!checkIndices(request, newIndices, true, allowEmptyIndices)) {\n                 return false;\n             }\n             ((SingleShardRequest) request).index(newIndices.length!=1?null:newIndices[0]);\n+        } else if (request instanceof FieldCapabilitiesIndexRequest) {\n+            FieldCapabilitiesIndexRequest fieldCapabilitiesRequest = (FieldCapabilitiesIndexRequest) request;\n+\n+            String index = fieldCapabilitiesRequest.index();\n+", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYwNTc1NQ==", "url": "https://github.com/opensearch-project/security/pull/661#discussion_r478605755", "bodyText": "No, it is not necessary.", "author": "vrozov", "createdAt": "2020-08-27T18:12:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU4OTMwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYyODA1OQ==", "url": "https://github.com/opensearch-project/security/pull/661#discussion_r478628059", "bodyText": "Can you explain why ?", "author": "dinusX", "createdAt": "2020-08-27T18:54:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU4OTMwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY4NDE5Ng==", "url": "https://github.com/opensearch-project/security/pull/661#discussion_r478684196", "bodyText": "Please check the comment below. FieldCapabilitiesIndexRequest is derived from FieldCapabilitiesRequest that process indices(), so it is not necessary to reprocess them in FieldCapabilitiesIndexRequest.", "author": "vrozov", "createdAt": "2020-08-27T20:43:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU4OTMwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU5OTYzMA==", "url": "https://github.com/opensearch-project/security/pull/661#discussion_r478599630", "bodyText": "How was it taking care of sending responses before adding this catch(Ex) code ?\nWill this send entire stack trace or just the message ? Is it possible that we might expose something important here ?", "author": "dinusX", "createdAt": "2020-08-27T18:00:56Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/dlic/rest/api/AbstractApiAction.java", "diffHunk": "@@ -401,19 +401,23 @@ protected final RestChannelConsumer prepareRequest(RestRequest request, NodeClie\n \t\t\t\t.getTransient(ConfigConstants.OPENDISTRO_SECURITY_REMOTE_ADDRESS);\n \t\tfinal Object originalOrigin = threadPool.getThreadContext().getTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN);\n \n-\t\treturn channel -> {\n-\n-\t\t\ttry (StoredContext ctx = threadPool.getThreadContext().stashContext()) {\n-\n+\t\treturn channel -> threadPool.generic().submit(() -> {\n+\t\t\ttry (StoredContext ignore = threadPool.getThreadContext().stashContext()) {\n \t\t\t\tthreadPool.getThreadContext().putHeader(ConfigConstants.OPENDISTRO_SECURITY_CONF_REQUEST_HEADER, \"true\");\n \t\t\t\tthreadPool.getThreadContext().putTransient(ConfigConstants.OPENDISTRO_SECURITY_USER, originalUser);\n \t\t\t\tthreadPool.getThreadContext().putTransient(ConfigConstants.OPENDISTRO_SECURITY_REMOTE_ADDRESS, originalRemoteAddress);\n \t\t\t\tthreadPool.getThreadContext().putTransient(ConfigConstants.OPENDISTRO_SECURITY_ORIGIN, originalOrigin);\n \n \t\t\t\thandleApiRequest(channel, request, client);\n-\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tlog.error(\"Error processing request {}\", request, e);\n+\t\t\t\ttry {\n+\t\t\t\t\tchannel.sendResponse(new BytesRestResponse(channel, e));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYwOTM1OQ==", "url": "https://github.com/opensearch-project/security/pull/661#discussion_r478609359", "bodyText": "It was relying on the\n        } catch (Exception e) {\n            responseChannel.sendResponse(new BytesRestResponse(responseChannel, e));\n        }\n\nin RestController.dispatchRequest().", "author": "vrozov", "createdAt": "2020-08-27T18:18:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU5OTYzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYyOTk5MQ==", "url": "https://github.com/opensearch-project/security/pull/661#discussion_r478629991", "bodyText": "Since you are re-raising the Exception in here, wouldn't this cause RestController to also write the response in channel ? Do we need to do it twice ?", "author": "dinusX", "createdAt": "2020-08-27T18:57:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU5OTYzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3NTgxMw==", "url": "https://github.com/opensearch-project/security/pull/661#discussion_r478675813", "bodyText": "The exception is raised in the Runnable() submitted to generic() ExecutionService for execution and is not part of the RestController. dispatchRequest () thread stack (only submit() is part of that stack now).", "author": "vrozov", "createdAt": "2020-08-27T20:26:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU5OTYzMA=="}], "type": "inlineReview"}, {"oid": "0dd1c43b5e98b4eab36362a435b7e03e7d5ee148", "url": "https://github.com/opensearch-project/security/commit/0dd1c43b5e98b4eab36362a435b7e03e7d5ee148", "message": "Support ES 7.9.0", "committedDate": "2020-08-27T21:50:13Z", "type": "commit"}, {"oid": "0dd1c43b5e98b4eab36362a435b7e03e7d5ee148", "url": "https://github.com/opensearch-project/security/commit/0dd1c43b5e98b4eab36362a435b7e03e7d5ee148", "message": "Support ES 7.9.0", "committedDate": "2020-08-27T21:50:13Z", "type": "forcePushed"}]}