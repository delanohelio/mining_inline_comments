{"pr_number": 765, "pr_title": "When replacing .kibana index with multi-tenant index, create index with alias if one already does not exist", "pr_createdAt": "2020-10-13T05:45:17Z", "pr_url": "https://github.com/opensearch-project/security/pull/765", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIxNDI1NA==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r504214254", "bodyText": "Just out of curiosity, does CreateIndexReqeust come to here at all? I tried doing same thing, but it didn't work.", "author": "cliu123", "createdAt": "2020-10-13T19:48:41Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -192,7 +230,7 @@ private void replaceIndex(final ActionRequest request, final String oldIndexName\n \n         // CreateIndexRequest\n         if (request instanceof CreateIndexRequest) {\n-            ((CreateIndexRequest) request).index(newIndexName);\n+            ((CreateIndexRequest) request).index(newIndexName + \"_0\").alias(new Alias(newIndexName));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNDg4OQ==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r504234889", "bodyText": "CreateIndexRequest  may be submitted using REST API, it won't be submitted as part of regular Kibana workflow. The change is required for the consistent behavior in index re-write.", "author": "vrozov", "createdAt": "2020-10-13T20:22:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIxNDI1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI1NzgzMg==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r504257832", "bodyText": "That makes sense. Thanks for explanatinon!", "author": "cliu123", "createdAt": "2020-10-13T21:05:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIxNDI1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI3NTA0MQ==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r504275041", "bodyText": "This looks interesting. Before this change, does the logic not even check whether the index exists before starting indexing? Looks like a bug to me if there really isn't this check existing. Have we not faced any problems because of this at all?", "author": "cliu123", "createdAt": "2020-10-13T21:41:04Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -203,6 +241,7 @@ private void replaceIndex(final ActionRequest request, final String oldIndexName\n                 }\n \n                 if (ar instanceof IndexRequest) {\n+                    createIndexAndAliasIfAbsent(newIndexName);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3ODg3NA==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r504378874", "bodyText": "ES implicitly (auto) creates index if it does not exist.", "author": "vrozov", "createdAt": "2020-10-14T03:28:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI3NTA0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5MTcyMg==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r504291722", "bodyText": "Is there need to set this as auto expand? This index is created for every user and may flood with replicas based on the number of nodes and users in the system.", "author": "sujithvm", "createdAt": "2020-10-13T22:20:37Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -49,10 +54,16 @@\n import com.amazon.opendistroforelasticsearch.security.securityconf.DynamicConfigModel;\n import com.amazon.opendistroforelasticsearch.security.user.User;\n \n+import com.google.common.collect.ImmutableMap;\n+\n public class PrivilegesInterceptorImpl extends PrivilegesInterceptor {\n \n     private static final String USER_TENANT = \"__user__\";\n     private static final String EMPTY_STRING = \"\";\n+    private static final Map<String, Object> KIBANA_INDEX_SETTINGS = ImmutableMap.of(\n+            IndexMetadata.SETTING_NUMBER_OF_SHARDS, 1,\n+            IndexMetadata.SETTING_AUTO_EXPAND_REPLICAS, \"0-all\"", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3ODU5MQ==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r504378591", "bodyText": "Likely not required, I copied settings from .kibana index.", "author": "vrozov", "createdAt": "2020-10-14T03:27:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5MTcyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5MjIzNg==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r504292236", "bodyText": "Why _0 suffix?", "author": "sujithvm", "createdAt": "2020-10-13T22:21:57Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -173,6 +184,33 @@ public Boolean replaceKibanaIndex(final ActionRequest request, final String acti\n         return null;\n     }\n \n+    private boolean createIndexAndAliasIfAbsent(final String name) {\n+        final IndexAbstraction indexAbstraction = clusterService.state().getMetadata().getIndicesLookup().get(name);\n+        if (indexAbstraction != null) {\n+            log.debug(\"{} {} already exists\", indexAbstraction.getType(), indexAbstraction.getName());\n+            return false;\n+        }\n+        final CreateIndexRequest createIndexRequest = new CreateIndexRequest(name + \"_0\")", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5OTI4OA==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r504299288", "bodyText": "nit: avoid duplication and factor out error message.", "author": "sujithvm", "createdAt": "2020-10-13T22:41:01Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -173,6 +184,33 @@ public Boolean replaceKibanaIndex(final ActionRequest request, final String acti\n         return null;\n     }\n \n+    private boolean createIndexAndAliasIfAbsent(final String name) {\n+        final IndexAbstraction indexAbstraction = clusterService.state().getMetadata().getIndicesLookup().get(name);\n+        if (indexAbstraction != null) {\n+            log.debug(\"{} {} already exists\", indexAbstraction.getType(), indexAbstraction.getName());\n+            return false;\n+        }\n+        final CreateIndexRequest createIndexRequest = new CreateIndexRequest(name + \"_0\")\n+                .settings(KIBANA_INDEX_SETTINGS)\n+                .alias(new Alias(name));\n+        try {\n+            final boolean acknowledged = client.admin()\n+                    .indices()\n+                    .create(createIndexRequest)\n+                    .actionGet()\n+                    .isAcknowledged();\n+            if (acknowledged) {\n+                log.info(\"Created new index {} with aliases {}\", createIndexRequest.index(), createIndexRequest.aliases());\n+                return true;\n+            }\n+        } catch (ResourceAlreadyExistsException resourceAlreadyExistsException) {\n+            log.warn(\"Index {} or aliases {} already exist\", createIndexRequest.index(), createIndexRequest.aliases());\n+            return false;\n+        }\n+        log.warn(\"Request to create new index {} with aliases {} was not acknowledged\", createIndexRequest.index(), createIndexRequest.aliases());\n+        throw new ElasticsearchException(\"Request to create new index {} with aliases {} was not acknowledged\", createIndexRequest.index(), createIndexRequest.aliases());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd", "url": "https://github.com/opensearch-project/security/commit/dd94e5f93445a5b25196d7ce7387f503a628b7cd", "message": "When replacing .kibana index with multi-tenant index, create index with alias if one already does not exist", "committedDate": "2020-10-17T01:08:44Z", "type": "commit"}, {"oid": "dd94e5f93445a5b25196d7ce7387f503a628b7cd", "url": "https://github.com/opensearch-project/security/commit/dd94e5f93445a5b25196d7ce7387f503a628b7cd", "message": "When replacing .kibana index with multi-tenant index, create index with alias if one already does not exist", "committedDate": "2020-10-17T01:08:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkxMTUyMA==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r507911520", "bodyText": "Will this always be CreateIndexRequest when reached here? What about bulk request?", "author": "palashhedau", "createdAt": "2020-10-19T17:02:54Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityFilter.java", "diffHunk": "@@ -283,7 +293,30 @@ public int order() {\n                 if(!dlsFlsValve.invoke(request, listener, pres.getAllowedFlsFields(), pres.getMaskedFields(), pres.getQueries())) {\n                     return;\n                 }\n-                chain.proceed(task, action, request, listener);\n+                final CreateIndexRequest createIndexRequest = pres.getRequest();", "originalCommit": "dd94e5f93445a5b25196d7ce7387f503a628b7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyOTA1OQ==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r507929059", "bodyText": "It will be always CreateIndexRequest", "author": "vrozov", "createdAt": "2020-10-19T17:31:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkxMTUyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzMzg2OQ==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r507933869", "bodyText": "Just wondering as I saw couple of bulk request reached here. What happens to those? Not sure if you noticed the bulk request", "author": "palashhedau", "createdAt": "2020-10-19T17:38:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkxMTUyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk0MTE3OA==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r507941178", "bodyText": "It is not the original request.", "author": "vrozov", "createdAt": "2020-10-19T17:46:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkxMTUyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNDc5MQ==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r507924791", "bodyText": "All the request will be treated as CreateIndexRequest?", "author": "palashhedau", "createdAt": "2020-10-19T17:25:11Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -170,18 +179,30 @@ public Boolean replaceKibanaIndex(final ActionRequest request, final String acti\n \n         }\n \n+        return CONTINUE_EVALUATION_REPLACE_RESULT;\n+    }\n+\n+    private CreateIndexRequest checkAndCreateRequestIfAbsent(final String name) {\n+        final IndexAbstraction indexAbstraction = clusterService.state().getMetadata().getIndicesLookup().get(name);\n+        if (indexAbstraction == null) {\n+            return new CreateIndexRequest(name + \"_1\")\n+                    .settings(KIBANA_INDEX_SETTINGS)\n+                    .alias(new Alias(name));\n+        }\n+        log.debug(\"{} {} already exists\", indexAbstraction.getType(), indexAbstraction.getName());\n         return null;\n     }\n \n-    private void replaceIndex(final ActionRequest request, final String oldIndexName, final String newIndexName, final String action) {\n+    private CreateIndexRequest replaceIndex(final ActionRequest request, final String oldIndexName, final String newIndexName, final String action) {\n         boolean kibOk = false;\n+        CreateIndexRequest createIndexRequest = null;", "originalCommit": "dd94e5f93445a5b25196d7ce7387f503a628b7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzMDQ2Mg==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r507930462", "bodyText": "CreateIndexRequest replaces auto create index request.", "author": "vrozov", "createdAt": "2020-10-19T17:34:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNDc5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNjUyNA==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r507926524", "bodyText": "Who sets this?", "author": "palashhedau", "createdAt": "2020-10-19T17:27:57Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/privileges/PrivilegesEvaluatorResponse.java", "diffHunk": "@@ -41,6 +43,7 @@\n     Map<String,Set<String>> maskedFields;\n     Map<String,Set<String>> queries;\n     PrivilegesEvaluatorResponseState state = PrivilegesEvaluatorResponseState.PENDING;\n+    CreateIndexRequest request;", "originalCommit": "dd94e5f93445a5b25196d7ce7387f503a628b7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzMDg5OA==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r507930898", "bodyText": "checkAndCreateRequestIfAbsent()", "author": "vrozov", "createdAt": "2020-10-19T17:34:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNjUyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEzODg5MQ==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r508138891", "bodyText": "Can we use some opposite wording for \"was not acknowledged\".\nMaybe something like: \"Request to create a new index {} with aliases {} has failed.\" or \"was rejected.\"", "author": "dinusX", "createdAt": "2020-10-20T00:32:46Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityFilter.java", "diffHunk": "@@ -92,6 +98,8 @@\n \n public class OpenDistroSecurityFilter implements ActionFilter {\n \n+    private static final String CREATE_INDEX_ERROR_MSG = \"Request to create new index {} with aliases {} was not acknowledged\";", "originalCommit": "dd94e5f93445a5b25196d7ce7387f503a628b7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM1NjU2Ng==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509356566", "bodyText": "I'd like to add one important detail here: isAcknowledged() == false does not mean that the index creation failed. If it failed, we'll enter the onFailed callback below. isAcknowledged() == false just means that acknowledgement from the shards timed out. It is still possible that the index will be created. If I am not mistaken, the default timeout is 30 seconds. Thus, this probably only occurs in high-load situations.\nConsidering that immediately after this call we might want to write documents using the alias name, it seems to be correct to abort the operation. However, the error message should probably reflect this.", "author": "nibix", "createdAt": "2020-10-21T14:52:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEzODg5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0MzY2OA==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r508143668", "bodyText": "Is there any risk in using \"startsWith(..)\".\nCan this allow me to create indices with the same prefix as the .kibana+tenant index, even if I don't have write permissions ?\nShould we replace this with 2 equals: one for index name and another for name + \"_1\".\nOr we can even check if request has any aliases with the same name?", "author": "dinusX", "createdAt": "2020-10-20T00:49:47Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -132,13 +141,13 @@ public Boolean replaceKibanaIndex(final ActionRequest request, final String acti\n         }\n \n         //request not made by the kibana server and user index is the only index/alias involved\n-        if (!user.getName().equals(kibanaserverUsername) && requestedResolved.getAllIndices().size() == 1\n-                && requestedResolved.getAllIndices().contains(toUserIndexName(kibanaIndexName, requestedTenant))) {\n-\n-            if (isTenantAllowed(request, action, user, tenants, requestedTenant)) {\n-                return Boolean.FALSE;\n+        if (!user.getName().equals(kibanaserverUsername)) {\n+            final Set<String> indices = requestedResolved.getAllIndices();\n+            final String tenantIndexName = toUserIndexName(kibanaIndexName, requestedTenant);\n+            if (indices.size() == 1 && indices.iterator().next().startsWith(tenantIndexName) &&", "originalCommit": "dd94e5f93445a5b25196d7ce7387f503a628b7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg1NDI0NQ==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509854245", "bodyText": "Discussed with @dinusX offline. Option to use alias is not available and will require modification beyond the scope of the current PR. Using two equals will lead to inconsistent behavior after upgrade and kibana tenant index migration. Using startsWith() indeed will allow user to create .kibana_<hash>_<user>* indices similar how user could read/write/delete documents in .kibana_<hash>_user index without permissions being explicitly granted.", "author": "vrozov", "createdAt": "2020-10-22T03:13:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0MzY2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0NDY1OA==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r508144658", "bodyText": "Can you return here \"null\" explicitly, even if the createIndexRequest is also null.\nThis will make easier to understand the code behavior.", "author": "dinusX", "createdAt": "2020-10-20T00:53:41Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -170,18 +179,30 @@ public Boolean replaceKibanaIndex(final ActionRequest request, final String acti\n \n         }\n \n+        return CONTINUE_EVALUATION_REPLACE_RESULT;\n+    }\n+\n+    private CreateIndexRequest checkAndCreateRequestIfAbsent(final String name) {\n+        final IndexAbstraction indexAbstraction = clusterService.state().getMetadata().getIndicesLookup().get(name);\n+        if (indexAbstraction == null) {\n+            return new CreateIndexRequest(name + \"_1\")\n+                    .settings(KIBANA_INDEX_SETTINGS)\n+                    .alias(new Alias(name));\n+        }\n+        log.debug(\"{} {} already exists\", indexAbstraction.getType(), indexAbstraction.getName());\n         return null;\n     }\n \n-    private void replaceIndex(final ActionRequest request, final String oldIndexName, final String newIndexName, final String action) {\n+    private CreateIndexRequest replaceIndex(final ActionRequest request, final String oldIndexName, final String newIndexName, final String action) {\n         boolean kibOk = false;\n+        CreateIndexRequest createIndexRequest = null;\n \n         if (log.isDebugEnabled()) {\n             log.debug(\"{} index will be replaced with {} in this {} request\", oldIndexName, newIndexName, request.getClass().getName());\n         }\n \n         if (request instanceof GetFieldMappingsIndexRequest || request instanceof GetFieldMappingsRequest) {\n-            return;\n+            return createIndexRequest;", "originalCommit": "dd94e5f93445a5b25196d7ce7387f503a628b7cd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0NDcwMw==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r508144703", "bodyText": "Would be great to add a comment explaining this line.", "author": "dinusX", "createdAt": "2020-10-20T00:53:53Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -192,7 +213,7 @@ private void replaceIndex(final ActionRequest request, final String oldIndexName\n \n         // CreateIndexRequest\n         if (request instanceof CreateIndexRequest) {\n-            ((CreateIndexRequest) request).index(newIndexName);\n+            ((CreateIndexRequest) request).index(newIndexName + \"_1\").alias(new Alias(newIndexName));", "originalCommit": "dd94e5f93445a5b25196d7ce7387f503a628b7cd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkzMDM4Ng==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r508930386", "bodyText": "Is there any way to avoid failures during concurrent create index requests.\nFor example if another Node was also trying to create the same index in parallel and succeeded first, can we detect this here from error and continue with operation instead of failing ?", "author": "dinusX", "createdAt": "2020-10-21T01:10:41Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityFilter.java", "diffHunk": "@@ -283,7 +293,30 @@ public int order() {\n                 if(!dlsFlsValve.invoke(request, listener, pres.getAllowedFlsFields(), pres.getMaskedFields(), pres.getQueries())) {\n                     return;\n                 }\n-                chain.proceed(task, action, request, listener);\n+                final CreateIndexRequest createIndexRequest = pres.getRequest();\n+                if (createIndexRequest == null) {\n+                    chain.proceed(task, action, request, listener);\n+                } else {\n+                    client.admin().indices().create(createIndexRequest, new ActionListener<CreateIndexResponse>() {\n+                        @Override\n+                        public void onResponse(CreateIndexResponse createIndexResponse) {\n+                            log.debug(\"CreateIndexRequest {}, CreateIndexResponse {}\", createIndexRequest, createIndexResponse);\n+                            if (createIndexResponse.isAcknowledged()) {", "originalCommit": "dd94e5f93445a5b25196d7ce7387f503a628b7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQyMDU5MA==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509420590", "bodyText": "Assuming that such requests are originated from user interaction with the Kibana UI, I don't expect multiple concurrent requests from the same user. In a rear case when it happens, retrying operation on Kibana UI will allow user to proceed.", "author": "vrozov", "createdAt": "2020-10-21T16:14:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkzMDM4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk4Mjg2Mw==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r508982863", "bodyText": "Not sure how often there might be bulk requests, but do you think that it's worth to add some optimization here, and generate the object only once for the first Index Request (in case if there are N write requests to the same kibana+tenant index).", "author": "dinusX", "createdAt": "2020-10-21T04:31:05Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -203,6 +224,7 @@ private void replaceIndex(final ActionRequest request, final String oldIndexName\n                 }\n \n                 if (ar instanceof IndexRequest) {\n+                    createIndexRequest = checkAndCreateRequestIfAbsent(newIndexName);", "originalCommit": "dd94e5f93445a5b25196d7ce7387f503a628b7cd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk4Mzc3Nw==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r508983777", "bodyText": "Was not able to add comment to the below code (see below 3 lines).\nShould we create the kibana+tenant index for UpdateRequest as well?", "author": "dinusX", "createdAt": "2020-10-21T04:34:40Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -203,6 +224,7 @@ private void replaceIndex(final ActionRequest request, final String oldIndexName\n                 }\n \n                 if (ar instanceof IndexRequest) {\n+                    createIndexRequest = checkAndCreateRequestIfAbsent(newIndexName);\n                     ((IndexRequest) ar).index(newIndexName);\n                 }\n ", "originalCommit": "dd94e5f93445a5b25196d7ce7387f503a628b7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQyMTkwOA==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509421908", "bodyText": "My understanding of UpdateRequest is that it tries to update an existing document. It means that both document and index should already exist.", "author": "vrozov", "createdAt": "2020-10-21T16:16:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk4Mzc3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxMjg4Nw==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509012887", "bodyText": "Can any suffix like \"security\" be used? My understanding is that migrated index will the number suffix added.", "author": "sujithvm", "createdAt": "2020-10-21T06:11:50Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -170,18 +179,30 @@ public Boolean replaceKibanaIndex(final ActionRequest request, final String acti\n \n         }\n \n+        return CONTINUE_EVALUATION_REPLACE_RESULT;\n+    }\n+\n+    private CreateIndexRequest checkAndCreateRequestIfAbsent(final String name) {\n+        final IndexAbstraction indexAbstraction = clusterService.state().getMetadata().getIndicesLookup().get(name);\n+        if (indexAbstraction == null) {\n+            return new CreateIndexRequest(name + \"_1\")", "originalCommit": "dd94e5f93445a5b25196d7ce7387f503a628b7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxNDg1NA==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509014854", "bodyText": "Can the suffix logic be consolidated into a separate function to avoid missing any logic in the future. I see \"_1\" used in the subsequent create index logic too.", "author": "sujithvm", "createdAt": "2020-10-21T06:16:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxMjg4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQyMzc2OA==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509423768", "bodyText": "The suffix is consistent with the suffix used by Kibana. Kibana creates .kibana_1 index with .kibana alias. I'd prefer to follow the same convention.", "author": "vrozov", "createdAt": "2020-10-21T16:19:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxMjg4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgzNzA4Ng==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509837086", "bodyText": "I was wondering if it safe to interfere with what Kibana does. My understanding is that we just shouldn't have an index terminating with a long number. As long as that is met, Kibana index migration would work correctly.", "author": "sujithvm", "createdAt": "2020-10-22T02:09:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxMjg4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkwODUwMg==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509908502", "bodyText": "We do not interfere with Kibana, we simply follow the same convention as Kibana.", "author": "vrozov", "createdAt": "2020-10-22T06:27:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxMjg4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxMzY0Ng==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509013646", "bodyText": "Can we rename this to just \"createIndexRequestIfAbsent\" ? not clear from the name what the check is", "author": "sujithvm", "createdAt": "2020-10-21T06:13:59Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -170,18 +179,30 @@ public Boolean replaceKibanaIndex(final ActionRequest request, final String acti\n \n         }\n \n+        return CONTINUE_EVALUATION_REPLACE_RESULT;\n+    }\n+\n+    private CreateIndexRequest checkAndCreateRequestIfAbsent(final String name) {", "originalCommit": "dd94e5f93445a5b25196d7ce7387f503a628b7cd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxOTc0Nw==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509019747", "bodyText": "Why are these requests done differently ?\ncreateIndexRequest = checkAndCreateRequestIfAbsent(newIndexName);\nand\n((CreateIndexRequest) request).index(newIndexName + \"_1\").alias(new Alias(newIndexName));", "author": "sujithvm", "createdAt": "2020-10-21T06:29:28Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -203,6 +224,7 @@ private void replaceIndex(final ActionRequest request, final String oldIndexName\n                 }\n \n                 if (ar instanceof IndexRequest) {\n+                    createIndexRequest = checkAndCreateRequestIfAbsent(newIndexName);", "originalCommit": "dd94e5f93445a5b25196d7ce7387f503a628b7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQyNjAyOQ==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509426029", "bodyText": "One creates new CreateIndexRequest, another modifies an existing CreateIndexRequest. For CreateIndexRequest we don't need to create another request.", "author": "vrozov", "createdAt": "2020-10-21T16:22:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxOTc0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ3MTY2Mg==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509471662", "bodyText": "Why is this line 227 and line 265 done differently ?", "author": "sujithvm", "createdAt": "2020-10-21T17:24:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxOTc0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYxMDA0NA==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509610044", "bodyText": "The code on line 227 and 265 are the same:\ncreateIndexRequest = checkAndCreateRequestIfAbsent(newIndexName);", "author": "vrozov", "createdAt": "2020-10-21T19:30:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxOTc0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgzNjIzNg==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509836236", "bodyText": "I meant to ask about 216 but I see its a CreateIndexRequest", "author": "sujithvm", "createdAt": "2020-10-22T02:06:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxOTc0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyMTY1Nw==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509021657", "bodyText": "Is it possible to factor out to separate function for replacing kibana index to avoid duplication ?", "author": "sujithvm", "createdAt": "2020-10-21T06:34:03Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/privileges/PrivilegesEvaluator.java", "diffHunk": "@@ -338,19 +337,19 @@ public PrivilegesEvaluatorResponse evaluate(final User user, String action0, fin\n \n         if(privilegesInterceptor.getClass() != PrivilegesInterceptor.class) {\n \n-            final Boolean replaceResult = privilegesInterceptor.replaceKibanaIndex(request, action0, user, dcm, requestedResolved, mapTenants(user, mappedRoles));\n+            final PrivilegesInterceptor.ReplaceResult replaceResult = privilegesInterceptor.replaceKibanaIndex(request, action0, user, dcm, requestedResolved, mapTenants(user, mappedRoles));\n \n             if(log.isDebugEnabled()) {\n                 log.debug(\"Result from privileges interceptor: {}\", replaceResult);\n             }\n \n-            if (replaceResult == Boolean.TRUE) {\n-                auditLog.logMissingPrivileges(action0, request, task);\n-                return presponse;\n-            }\n-\n-            if (replaceResult == Boolean.FALSE) {\n-                presponse.allowed = true;\n+            if (!replaceResult.continueEvaluation) {\n+                if (replaceResult.accessDenied) {\n+                    auditLog.logMissingPrivileges(action0, request, task);\n+                } else {\n+                    presponse.allowed = true;\n+                    presponse.request = replaceResult.createIndexRequest;\n+                }", "originalCommit": "dd94e5f93445a5b25196d7ce7387f503a628b7cd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMyMzUxMA==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509323510", "bodyText": "Is this a normal setting for the Kibana index?", "author": "nibix", "createdAt": "2020-10-21T14:13:46Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -49,10 +53,15 @@\n import com.amazon.opendistroforelasticsearch.security.securityconf.DynamicConfigModel;\n import com.amazon.opendistroforelasticsearch.security.user.User;\n \n+import com.google.common.collect.ImmutableMap;\n+\n public class PrivilegesInterceptorImpl extends PrivilegesInterceptor {\n \n     private static final String USER_TENANT = \"__user__\";\n     private static final String EMPTY_STRING = \"\";\n+    private static final Map<String, Object> KIBANA_INDEX_SETTINGS = ImmutableMap.of(\n+            IndexMetadata.SETTING_NUMBER_OF_SHARDS, 1", "originalCommit": "dd94e5f93445a5b25196d7ce7387f503a628b7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYwMzkxNw==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509603917", "bodyText": "Yes, this is the default setting for .kibana_1 index.", "author": "vrozov", "createdAt": "2020-10-21T19:19:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMyMzUxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMyNjQ1OA==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509326458", "bodyText": "This (in combination with the code executing the CreateIndexRequest inside OpenDistroSecurityFilter) might suffer from concurrency problems if several index requests are done in quick succession. Possibly one should give ResourceAlreadyExistsException a special treatment when handling errors.\nAlso, is it safe to have a CreateIndexRequest directly followed by an IndexRequest? I am a bit worried that this might be unreliable in high-load situations. So, extensive testing might be sensible here.", "author": "nibix", "createdAt": "2020-10-21T14:17:03Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -170,18 +179,30 @@ public Boolean replaceKibanaIndex(final ActionRequest request, final String acti\n \n         }\n \n+        return CONTINUE_EVALUATION_REPLACE_RESULT;\n+    }\n+\n+    private CreateIndexRequest checkAndCreateRequestIfAbsent(final String name) {", "originalCommit": "dd94e5f93445a5b25196d7ce7387f503a628b7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5OTIwMQ==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r510299201", "bodyText": "I do not expect multiple concurrent requests that interact with the same multi-tenant index as such requests are originated from Kibana UI and it should mean that the same user is used by multiple sessions. I am not even sure that Kibana supports such use case. Anyway, I added handling for ResourceAlreadyExistsException as a safety net.\nThe existing implementation relies on ES to auto create index on IndexRequest and the difference with the new approach is that it is security plugin that submits CreateIndexRequest instead of ES submitting similar request as part of auto create.", "author": "vrozov", "createdAt": "2020-10-22T16:29:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMyNjQ1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMzMjczMg==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509332732", "bodyText": "Style: This is somewhat a breach of separation of concerns. This might lead to confusion (as illustrated by the existing comments) and hard to understand logic. One should try to concentrate the logic in PrivilegesInterceptorImpl. I can think of two alternatives:\n\nProvide a generic callback instead of the CreateIndexRequest\nDynamically extend the ActionFilterChain. This would however probably require extension of a couple of method interfaces.", "author": "nibix", "createdAt": "2020-10-21T14:24:14Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityFilter.java", "diffHunk": "@@ -283,7 +293,30 @@ public int order() {\n                 if(!dlsFlsValve.invoke(request, listener, pres.getAllowedFlsFields(), pres.getMaskedFields(), pres.getQueries())) {\n                     return;\n                 }\n-                chain.proceed(task, action, request, listener);\n+                final CreateIndexRequest createIndexRequest = pres.getRequest();", "originalCommit": "dd94e5f93445a5b25196d7ce7387f503a628b7cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ3NDc2NQ==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509474765", "bodyText": "In the current implementation OpenDistroSecurityFilter is responsible for executing the chain and pre-processing (submitting)CreateIndexRequest while PrivilegesInterceptorImpl is responsible for creating CreateIndexRequest instance if one is necessary.\nI don't think that introducing callback will add more clarity, unless I miss something in your proposal. The same for ActionFilterChain, it is possible to return new instance of ActionFilterChain instead of CreateIndexRequest that will either call client.admin().indices().create() or chain.proceed() directly. This will require passing chain all the way to PrivilegesInterceptorImpl and propagating new ActionFilterChain back to OpenDistroSecurityFilter.", "author": "vrozov", "createdAt": "2020-10-21T17:27:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMzMjczMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk4OTUxNA==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r509989514", "bodyText": "So far, OpenDistroSecurityFilter was a very generic module and not concerned with multi-tenancy at all. All multi-tenancy logic was concentrated in PrivilegesInterceptorImpl. This separation would be no longer valid any more.\nA callback would bring more clarity by still being able to keep the logic in PrivilegesInterceptorImpl.\nAs I wrote, this is just a style issue. I can understand that callbacks would also complicate the code. When keeping the code in OpenDistroSecurityFilter, however, I'd recommend to clearly separate this code from the generic request handling and mark this as multi-tenancy handling.", "author": "nibix", "createdAt": "2020-10-22T08:49:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMzMjczMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMwNjQ1Mg==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r510306452", "bodyText": "All logic related to multi-tenancy and whether or not it is necessary to create multi-tenancy index and details of such request is encapsulated in the PrivilegesInterceptorImpl. OpenDistroSecurityFilter is only responsible for submitting CreateIndexRequest and has no knowledge about multi-tenancy.", "author": "vrozov", "createdAt": "2020-10-22T16:40:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMzMjczMg=="}], "type": "inlineReview"}, {"oid": "a2ce08f5cdf920f0dece6ace053bb8f91f53ba1b", "url": "https://github.com/opensearch-project/security/commit/a2ce08f5cdf920f0dece6ace053bb8f91f53ba1b", "message": "Code review", "committedDate": "2020-10-22T06:01:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1NDk0Mw==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r510454943", "bodyText": "Does the original \".kibana_1\" index have a similar setting ? If not, should we use the same settings as original kibana index ?", "author": "dinusX", "createdAt": "2020-10-22T21:02:11Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -49,10 +55,17 @@\n import com.amazon.opendistroforelasticsearch.security.securityconf.DynamicConfigModel;\n import com.amazon.opendistroforelasticsearch.security.user.User;\n \n+import com.google.common.collect.ImmutableMap;\n+\n public class PrivilegesInterceptorImpl extends PrivilegesInterceptor {\n \n     private static final String USER_TENANT = \"__user__\";\n     private static final String EMPTY_STRING = \"\";\n+    private static final String SUFFIX = \"_1\";\n+    private static final Map<String, Object> KIBANA_INDEX_SETTINGS = ImmutableMap.of(\n+            IndexMetadata.SETTING_NUMBER_OF_SHARDS, 1,\n+            IndexMetadata.SETTING_AUTO_EXPAND_REPLICAS, \"0-1\"", "originalCommit": "a2ce08f5cdf920f0dece6ace053bb8f91f53ba1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1ODg0MQ==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r510458841", "bodyText": "\".kibana_1\" is created with the same settings, number of shards 1 and auto expand replicas \"0-1\".", "author": "vrozov", "createdAt": "2020-10-22T21:09:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1NDk0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1NTE2MQ==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r510455161", "bodyText": "Can we rename this to something more clear, like \"KIBANA_INDEX_SUFFIX\"", "author": "dinusX", "createdAt": "2020-10-22T21:02:37Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/configuration/PrivilegesInterceptorImpl.java", "diffHunk": "@@ -49,10 +55,17 @@\n import com.amazon.opendistroforelasticsearch.security.securityconf.DynamicConfigModel;\n import com.amazon.opendistroforelasticsearch.security.user.User;\n \n+import com.google.common.collect.ImmutableMap;\n+\n public class PrivilegesInterceptorImpl extends PrivilegesInterceptor {\n \n     private static final String USER_TENANT = \"__user__\";\n     private static final String EMPTY_STRING = \"\";\n+    private static final String SUFFIX = \"_1\";", "originalCommit": "a2ce08f5cdf920f0dece6ace053bb8f91f53ba1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1NTU2Ng==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r510455566", "bodyText": "Should we add a null check for \"aliases\" ?", "author": "dinusX", "createdAt": "2020-10-22T21:03:24Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/filter/OpenDistroSecurityFilter.java", "diffHunk": "@@ -138,6 +149,10 @@ public int order() {\n             apply0(task, action, request, listener, chain);\n         }\n     }\n+\n+    private static Set<String> alias2Name(Set<Alias> aliases) {\n+        return aliases.stream().map(a -> a.name()).collect(ImmutableSet.toImmutableSet());", "originalCommit": "a2ce08f5cdf920f0dece6ace053bb8f91f53ba1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ2MjM1OQ==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r510462359", "bodyText": "It assumes not null aliases that is always true for CreateIndexResponse.aliases().", "author": "vrozov", "createdAt": "2020-10-22T21:16:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1NTU2Ng=="}], "type": "inlineReview"}, {"oid": "a0687e3deabf68b20a2cf733d0156120b25efae6", "url": "https://github.com/opensearch-project/security/commit/a0687e3deabf68b20a2cf733d0156120b25efae6", "message": "Code review and unit tests", "committedDate": "2020-10-22T23:20:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA1NTMzMg==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r511055332", "bodyText": "Should we add a test for kibana tenant index ending with a large number ?", "author": "sujithvm", "createdAt": "2020-10-23T18:09:56Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/security/multitenancy/test/MultitenancyTests.java", "diffHunk": "@@ -243,11 +249,12 @@ public void testMtMulti() throws Exception {\n             Map indexSettings = new HashMap();\n             indexSettings.put(\"number_of_shards\", 1);\n             indexSettings.put(\"number_of_replicas\", 0);\n-            tc.admin().indices().create(new CreateIndexRequest(\".kibana_92668751_admin\")\n-                .settings(indexSettings))\n+            tc.admin().indices().create(new CreateIndexRequest(kibanaIndex)\n+                .settings(indexSettings)\n+                .alias(new Alias(\".kibana_92668751_admin\")))", "originalCommit": "a0687e3deabf68b20a2cf733d0156120b25efae6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA1ODAyMg==", "url": "https://github.com/opensearch-project/security/pull/765#discussion_r511058022", "bodyText": "Or is it taken care of by Kibana?", "author": "sujithvm", "createdAt": "2020-10-23T18:15:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA1NTMzMg=="}], "type": "inlineReview"}]}