{"pr_number": 691, "pr_title": "Redact request body for APIs that may contain plaintext password", "pr_createdAt": "2020-09-04T03:40:09Z", "pr_url": "https://github.com/opensearch-project/security/pull/691", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3MTYzOA==", "url": "https://github.com/opensearch-project/security/pull/691#discussion_r483371638", "bodyText": "Should we check if request body contains \"password\"?", "author": "vrozov", "createdAt": "2020-09-04T03:58:30Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AuditMessage.java", "diffHunk": "@@ -323,12 +323,19 @@ void addRestMethod(final RestRequest.Method method) {\n \n     void addRestRequestInfo(final RestRequest request, final AuditConfig.Filter filter) {\n         if (request != null) {\n-            addPath(request.path());\n+            final String path = request.path();\n+            addPath(path);\n             addRestHeaders(request.getHeaders(), filter.shouldExcludeSensitiveHeaders());\n             addRestParams(request.params());\n             addRestMethod(request.method());\n             if (filter.shouldLogRequestBody() && request.hasContentOrSourceParam()) {\n-                addTupleToRequestBody(request.contentOrSourceParam());\n+                if (path.startsWith(\"/_opendistro/_security/api/account\")\n+                        || path.startsWith(\"/_opendistro/_security/api/internalusers\")\n+                        || path.startsWith(\"/_opendistro/_security/api/user\")) {\n+                    auditInfo.put(REQUEST_BODY, \"__SENSITIVE__\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3NDY3OA==", "url": "https://github.com/opensearch-project/security/pull/691#discussion_r483374678", "bodyText": "public static final String SENSITIVE = \"__SENSITIVE__\";", "author": "vrozov", "createdAt": "2020-09-04T04:10:47Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AuditMessage.java", "diffHunk": "@@ -323,12 +323,19 @@ void addRestMethod(final RestRequest.Method method) {\n \n     void addRestRequestInfo(final RestRequest request, final AuditConfig.Filter filter) {\n         if (request != null) {\n-            addPath(request.path());\n+            final String path = request.path();\n+            addPath(path);\n             addRestHeaders(request.getHeaders(), filter.shouldExcludeSensitiveHeaders());\n             addRestParams(request.params());\n             addRestMethod(request.method());\n             if (filter.shouldLogRequestBody() && request.hasContentOrSourceParam()) {\n-                addTupleToRequestBody(request.contentOrSourceParam());\n+                if (path.startsWith(\"/_opendistro/_security/api/account\")\n+                        || path.startsWith(\"/_opendistro/_security/api/internalusers\")\n+                        || path.startsWith(\"/_opendistro/_security/api/user\")) {\n+                    auditInfo.put(REQUEST_BODY, \"__SENSITIVE__\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM4MTgyMw==", "url": "https://github.com/opensearch-project/security/pull/691#discussion_r483381823", "bodyText": "private static Pattern PATH = Pattern.compile(\"/_opendistro/_security/api/(account.*|internalusers.*|user.*)\");", "author": "vrozov", "createdAt": "2020-09-04T04:39:12Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AuditMessage.java", "diffHunk": "@@ -323,12 +323,19 @@ void addRestMethod(final RestRequest.Method method) {\n \n     void addRestRequestInfo(final RestRequest request, final AuditConfig.Filter filter) {\n         if (request != null) {\n-            addPath(request.path());\n+            final String path = request.path();\n+            addPath(path);\n             addRestHeaders(request.getHeaders(), filter.shouldExcludeSensitiveHeaders());\n             addRestParams(request.params());\n             addRestMethod(request.method());\n             if (filter.shouldLogRequestBody() && request.hasContentOrSourceParam()) {\n-                addTupleToRequestBody(request.contentOrSourceParam());\n+                if (path.startsWith(\"/_opendistro/_security/api/account\")", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM5MjA3NA==", "url": "https://github.com/opensearch-project/security/pull/691#discussion_r483392074", "bodyText": "Is this used anywhere? I might be overlooking", "author": "palashhedau", "createdAt": "2020-09-04T05:18:08Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AuditMessage.java", "diffHunk": "@@ -55,6 +56,10 @@\n \n     //clustername and cluster uuid\n     private static final WildcardMatcher AUTHORIZATION_HEADER = WildcardMatcher.from(\"Authorization\", false);\n+    private static final String SENSITIVE = \"__SENSITIVE__\";", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM5NjgzNQ==", "url": "https://github.com/opensearch-project/security/pull/691#discussion_r483396835", "bodyText": "In case requestBody is null, this will work right?", "author": "palashhedau", "createdAt": "2020-09-04T05:35:39Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AuditMessage.java", "diffHunk": "@@ -323,12 +327,25 @@ void addRestMethod(final RestRequest.Method method) {\n \n     void addRestRequestInfo(final RestRequest request, final AuditConfig.Filter filter) {\n         if (request != null) {\n-            addPath(request.path());\n+            final String path = request.path();\n+            addPath(path);\n             addRestHeaders(request.getHeaders(), filter.shouldExcludeSensitiveHeaders());\n             addRestParams(request.params());\n             addRestMethod(request.method());\n             if (filter.shouldLogRequestBody() && request.hasContentOrSourceParam()) {\n-                addTupleToRequestBody(request.contentOrSourceParam());\n+                try {\n+                    final Tuple<XContentType, BytesReference> xContentTuple = request.contentOrSourceParam();\n+                    final String requestBody =  XContentHelper.convertToJson(xContentTuple.v2(), false, xContentTuple.v1());\n+                    if (path != null && requestBody != null\n+                            && SENSITIVE_PATHS.matcher(path).find()\n+                            && requestBody.contains(SENSITIVE_KEY)) {\n+                        auditInfo.put(REQUEST_BODY, SENSITIVE_REPLACEMENT_VALUE);\n+                    } else {\n+                        auditInfo.put(REQUEST_BODY, requestBody);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQwMDcwMA==", "url": "https://github.com/opensearch-project/security/pull/691#discussion_r483400700", "bodyText": "Actually requestBody must not be null there as per original behavior. Let me check if the null check can be removed", "author": "sujithvm", "createdAt": "2020-09-04T05:49:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM5NjgzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQwMTg4Ng==", "url": "https://github.com/opensearch-project/security/pull/691#discussion_r483401886", "bodyText": "nit: matches() is IMO a better fit.", "author": "vrozov", "createdAt": "2020-09-04T05:53:00Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/auditlog/impl/AuditMessage.java", "diffHunk": "@@ -323,12 +327,25 @@ void addRestMethod(final RestRequest.Method method) {\n \n     void addRestRequestInfo(final RestRequest request, final AuditConfig.Filter filter) {\n         if (request != null) {\n-            addPath(request.path());\n+            final String path = request.path();\n+            addPath(path);\n             addRestHeaders(request.getHeaders(), filter.shouldExcludeSensitiveHeaders());\n             addRestParams(request.params());\n             addRestMethod(request.method());\n             if (filter.shouldLogRequestBody() && request.hasContentOrSourceParam()) {\n-                addTupleToRequestBody(request.contentOrSourceParam());\n+                try {\n+                    final Tuple<XContentType, BytesReference> xContentTuple = request.contentOrSourceParam();\n+                    final String requestBody =  XContentHelper.convertToJson(xContentTuple.v2(), false, xContentTuple.v1());\n+                    if (path != null && requestBody != null\n+                            && SENSITIVE_PATHS.matcher(path).find()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "87ba30b02dd499e1f70c52b1e927feca8805dd29", "url": "https://github.com/opensearch-project/security/commit/87ba30b02dd499e1f70c52b1e927feca8805dd29", "message": "Redact request body for APIs that may contain plaintext password", "committedDate": "2020-09-04T06:03:17Z", "type": "commit"}]}