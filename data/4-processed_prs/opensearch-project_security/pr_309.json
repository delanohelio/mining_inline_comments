{"pr_number": 309, "pr_title": "[Optimization] Memoize results of resolveIndexPatterns for Bulk requests", "pr_createdAt": "2020-03-23T11:34:51Z", "pr_url": "https://github.com/opensearch-project/security/pull/309", "timeline": [{"oid": "28735a232083be890efd184e2373c0b35f90664d", "url": "https://github.com/opensearch-project/security/commit/28735a232083be890efd184e2373c0b35f90664d", "message": "Speedup resolveIndexPatterns, using per-request resolve mask\n\nIntroduce per request resolve mask, this allows us to bypass the whole resolveIndexPatterns+builder.add combo\nif multiple writes in one request go to the same alias/index. This is the common case in bulk indexing.", "committedDate": "2020-03-23T12:05:38Z", "type": "commit"}, {"oid": "28735a232083be890efd184e2373c0b35f90664d", "url": "https://github.com/opensearch-project/security/commit/28735a232083be890efd184e2373c0b35f90664d", "message": "Speedup resolveIndexPatterns, using per-request resolve mask\n\nIntroduce per request resolve mask, this allows us to bypass the whole resolveIndexPatterns+builder.add combo\nif multiple writes in one request go to the same alias/index. This is the common case in bulk indexing.", "committedDate": "2020-03-23T12:05:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAwOTMyNA==", "url": "https://github.com/opensearch-project/security/pull/309#discussion_r399009324", "bodyText": "The only comment that is related to new variable name. Not very intuitive.\nI was thinking initially to renamed it to \"isSearchOrFieldsCapabilitiesRequest\", but Vlad suggested a better one \"enableCrossClusterResolution\", since this variable is basically indicating if we need to do cross-cluster resolution based on type of the request.", "author": "dinusX", "createdAt": "2020-03-27T03:00:37Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/resolver/IndexResolverReplacer.java", "diffHunk": "@@ -161,7 +159,7 @@ private static final boolean isLocalAll(final String... requestedPatterns) {\n         return false;\n     }\n \n-    private Resolved resolveIndexPatterns(final IndicesOptions indicesOptions, final Object request, final String... requestedPatterns0) {\n+    private Resolved resolveIndexPatterns(final IndicesOptions indicesOptions, final boolean isSearchOrFieldsCapabilities, final String... requestedPatterns0) {", "originalCommit": "28735a232083be890efd184e2373c0b35f90664d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxMzgxOA==", "url": "https://github.com/opensearch-project/security/pull/309#discussion_r399313818", "bodyText": "Done, sounds  better for sure", "author": "DmitryOlshansky", "createdAt": "2020-03-27T14:41:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAwOTMyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0NjU4Nw==", "url": "https://github.com/opensearch-project/security/pull/309#discussion_r399346587", "bodyText": "Either inline or rename to enableCrossClusterResolution.", "author": "vrozov", "createdAt": "2020-03-27T15:26:20Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/resolver/IndexResolverReplacer.java", "diffHunk": "@@ -316,28 +313,59 @@ public boolean replace(final TransportRequest request, boolean retainMode, Strin\n         }, false);\n     }\n \n+    private static final class IndexResolveKey {\n+        private final IndicesOptions opts;\n+        private final boolean enableCrossClusterResolution;\n+        private final String[] original;\n+        public IndexResolveKey(IndicesOptions opts, boolean isSearchOrFieldCapabilities, String[] original) {\n+            this.opts = opts;\n+            this.enableCrossClusterResolution = isSearchOrFieldCapabilities;\n+            this.original = original;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            IndexResolveKey that = (IndexResolveKey) o;\n+            return enableCrossClusterResolution == that.enableCrossClusterResolution &&\n+                    opts.equals(that.opts) &&\n+                    Arrays.equals(original, that.original);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Boolean.hashCode(enableCrossClusterResolution) + 31 * opts.hashCode() + 127*Arrays.hashCode(original);\n+        }\n+    }\n+\n     public Resolved resolveRequest(final Object request) {\n         if(log.isDebugEnabled()) {\n             log.debug(\"Resolve aliases, indices and types from {}\", request.getClass().getSimpleName());\n         }\n \n         final Resolved.Builder resolvedBuilder = new Resolved.Builder();\n         final AtomicBoolean isIndicesRequest = new AtomicBoolean();\n-        getOrReplaceAllIndices(request, new IndicesProvider() {\n-\n-            @Override\n-            public String[] provide(String[] original, Object localRequest, boolean supportsReplace) {\n-                final IndicesOptions indicesOptions = indicesOptionsFrom(localRequest);\n-                final Resolved iResolved = resolveIndexPatterns(indicesOptions, localRequest, original);\n+        // set of previously resolved index requests to avoid resolving\n+        // the same index more than once while processing bulk requests\n+        final Set<IndexResolveKey> alreadyResolved = new HashSet<>();\n+\n+        getOrReplaceAllIndices(request, (original, localRequest, supportsReplace) -> {\n+            final IndicesOptions indicesOptions = indicesOptionsFrom(localRequest);\n+            final boolean isSearchOrFieldCapabilities = localRequest instanceof FieldCapabilitiesRequest || localRequest instanceof SearchRequest;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2ODM4NQ==", "url": "https://github.com/opensearch-project/security/pull/309#discussion_r399368385", "bodyText": "Yeah, missed that one - fixed!", "author": "DmitryOlshansky", "createdAt": "2020-03-27T15:57:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0NjU4Nw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM3NDcxMQ==", "url": "https://github.com/opensearch-project/security/pull/309#discussion_r399374711", "bodyText": "one more occurrence :)", "author": "vrozov", "createdAt": "2020-03-27T16:06:40Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/security/resolver/IndexResolverReplacer.java", "diffHunk": "@@ -316,28 +313,59 @@ public boolean replace(final TransportRequest request, boolean retainMode, Strin\n         }, false);\n     }\n \n+    private static final class IndexResolveKey {\n+        private final IndicesOptions opts;\n+        private final boolean enableCrossClusterResolution;\n+        private final String[] original;\n+        public IndexResolveKey(IndicesOptions opts, boolean isSearchOrFieldCapabilities, String[] original) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM4NTY4Ng==", "url": "https://github.com/opensearch-project/security/pull/309#discussion_r399385686", "bodyText": "renaming is hard ;)\nDone", "author": "DmitryOlshansky", "createdAt": "2020-03-27T16:23:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM3NDcxMQ=="}], "type": "inlineReview"}, {"oid": "3141e3b4785168b07ffa8715c73d6836ccd26bc7", "url": "https://github.com/opensearch-project/security/commit/3141e3b4785168b07ffa8715c73d6836ccd26bc7", "message": "Rename parameter as per review", "committedDate": "2020-03-27T16:17:23Z", "type": "commit"}, {"oid": "3141e3b4785168b07ffa8715c73d6836ccd26bc7", "url": "https://github.com/opensearch-project/security/commit/3141e3b4785168b07ffa8715c73d6836ccd26bc7", "message": "Rename parameter as per review", "committedDate": "2020-03-27T16:17:23Z", "type": "forcePushed"}]}