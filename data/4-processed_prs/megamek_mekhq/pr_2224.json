{"pr_number": 2224, "pr_title": "Add some basic Refit tests and fix an Armor location bug", "pr_createdAt": "2020-11-11T20:40:59Z", "pr_url": "https://github.com/MegaMek/mekhq/pull/2224", "timeline": [{"oid": "5de452f9c57e3831fadbadb860782b23ba4a308f", "url": "https://github.com/MegaMek/mekhq/commit/5de452f9c57e3831fadbadb860782b23ba4a308f", "message": "Add some basic Refit tests", "committedDate": "2020-11-11T20:39:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYzMTE4Nw==", "url": "https://github.com/MegaMek/mekhq/pull/2224#discussion_r521631187", "bodyText": "What's the .1, is that like a tolerance?", "author": "NickAragua", "createdAt": "2020-11-11T20:51:43Z", "path": "MekHQ/unittests/mekhq/campaign/parts/RefitTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright (C) 2020 MegaMek team\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.parts;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.Entity;\n+import megamek.common.IPlayer;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.parts.equipment.AmmoBin;\n+import mekhq.campaign.parts.equipment.EquipmentPart;\n+import mekhq.campaign.parts.equipment.MissingEquipmentPart;\n+import mekhq.campaign.unit.Unit;\n+import mekhq.campaign.unit.UnitTestUtilities;\n+\n+public class RefitTest {\n+    @Test\n+    public void deserializationCtor() {\n+        Refit refit = new Refit();\n+        assertNotNull(refit);\n+    }\n+\n+    @Test\n+    public void newRefitCtor() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        // Should be old parts...\n+        assertFalse(refit.getOldUnitParts().isEmpty());\n+\n+        // ...and new parts.\n+        assertFalse(refit.getNewUnitParts().isEmpty());\n+\n+        // ...and we'll need to buy some parts\n+        assertFalse(refit.getShoppingList().isEmpty());\n+    }\n+\n+    @Test\n+    public void locust1Vto1ETest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        //\n+        // Locust 1V to 1E Class D refit steps (in no particular order):\n+        //     1. Remove excess Machine Gun (LA) [120 mins]\n+        //     2. Remove excess Machine Gun (RA) [120 mins]\n+        //     3. Remove Machine Gun Ammo Bin (CT) [120 mins]\n+        //     4. Move Medium Laser (CT) to (RA) [120 mins]\n+        //     5. Add Medium Laser to (LA) [120 mins]\n+        //     6. Add Small Laser to (RA) [120 mins]\n+        //     7. Add Small Laser to (LA) [120 mins]\n+        //\n+        // Everything else is the same.\n+        //\n+\n+        // TODO: confirm this\n+        assertEquals(Refit.CLASS_D, refit.getRefitClass());\n+\n+        // Time?\n+        //     + 3 removals @ 120 mins ea\n+        //     + 1 move @ 120 mins ea\n+        //     + 3 adds @ 120 mins ea\n+        //     x 3 (Class D)\n+        assertEquals((120.0 * 7.0) * 3.0, refit.getActualTime(), 0.1);", "originalCommit": "5de452f9c57e3831fadbadb860782b23ba4a308f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY0MzE0Mg==", "url": "https://github.com/MegaMek/mekhq/pull/2224#discussion_r521643142", "bodyText": "Yes. That's to deal with floating point errors when comparing floats or doubles.", "author": "neoancient", "createdAt": "2020-11-11T21:15:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYzMTE4Nw=="}], "type": "inlineReview"}, {"oid": "45a642c0a7f23484338bd94b3f986a629e1a3572", "url": "https://github.com/MegaMek/mekhq/commit/45a642c0a7f23484338bd94b3f986a629e1a3572", "message": "Update tests after double checking SO", "committedDate": "2020-11-12T19:16:54Z", "type": "commit"}, {"oid": "b5698ddb8d7d1e9f82543101e58a348ebf5c5ec4", "url": "https://github.com/MegaMek/mekhq/commit/b5698ddb8d7d1e9f82543101e58a348ebf5c5ec4", "message": "Spot check more values", "committedDate": "2020-11-12T19:25:27Z", "type": "commit"}, {"oid": "79ac01af9cdf4aaba393b7212679667cd8e1243c", "url": "https://github.com/MegaMek/mekhq/commit/79ac01af9cdf4aaba393b7212679667cd8e1243c", "message": "Add Javelin 10N to 10A test", "committedDate": "2020-11-12T20:01:04Z", "type": "commit"}, {"oid": "405bb8e9031dd40922d03465c139ff0dcdd52c74", "url": "https://github.com/MegaMek/mekhq/commit/405bb8e9031dd40922d03465c139ff0dcdd52c74", "message": "Add FLE-4 to FLE-15 test and fix Refit armor location bug", "committedDate": "2020-11-12T21:04:22Z", "type": "commit"}, {"oid": "71f33cf6363e14bd0053bbeb35a6808a00cf120b", "url": "https://github.com/MegaMek/mekhq/commit/71f33cf6363e14bd0053bbeb35a6808a00cf120b", "message": "Add missing Nullable annotations per static analysis", "committedDate": "2020-11-13T18:02:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE5MzA3OQ==", "url": "https://github.com/MegaMek/mekhq/pull/2224#discussion_r523193079", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n          \n          \n            \n             * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the", "author": "Windchild292", "createdAt": "2020-11-13T20:01:05Z", "path": "MekHQ/unittests/mekhq/campaign/parts/RefitTest.java", "diffHunk": "@@ -0,0 +1,705 @@\n+/*\n+ * Copyright (C) 2020 MegaMek team\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "originalCommit": "71f33cf6363e14bd0053bbeb35a6808a00cf120b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE5MzEzNA==", "url": "https://github.com/MegaMek/mekhq/pull/2224#discussion_r523193134", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n          \n          \n            \n             * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.", "author": "Windchild292", "createdAt": "2020-11-13T20:01:12Z", "path": "MekHQ/unittests/mekhq/campaign/parts/RefitTest.java", "diffHunk": "@@ -0,0 +1,705 @@\n+/*\n+ * Copyright (C) 2020 MegaMek team\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.", "originalCommit": "71f33cf6363e14bd0053bbeb35a6808a00cf120b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE5NDI1MA==", "url": "https://github.com/MegaMek/mekhq/pull/2224#discussion_r523194250", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...and new parts.\n          \n          \n            \n                    // ... and new parts.", "author": "Windchild292", "createdAt": "2020-11-13T20:03:45Z", "path": "MekHQ/unittests/mekhq/campaign/parts/RefitTest.java", "diffHunk": "@@ -0,0 +1,705 @@\n+/*\n+ * Copyright (C) 2020 MegaMek team\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.parts;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.Entity;\n+import megamek.common.EquipmentType;\n+import megamek.common.IPlayer;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.CampaignOptions;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.parts.equipment.AmmoBin;\n+import mekhq.campaign.parts.equipment.EquipmentPart;\n+import mekhq.campaign.parts.equipment.MissingEquipmentPart;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+import mekhq.campaign.unit.UnitTestUtilities;\n+\n+public class RefitTest {\n+    @Test\n+    public void deserializationCtor() {\n+        Refit refit = new Refit();\n+        assertNotNull(refit);\n+    }\n+\n+    @Test\n+    public void newRefitCtor() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        // Should be old parts...\n+        assertFalse(refit.getOldUnitParts().isEmpty());\n+\n+        // ...and new parts.", "originalCommit": "71f33cf6363e14bd0053bbeb35a6808a00cf120b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE5NDI5Ng==", "url": "https://github.com/MegaMek/mekhq/pull/2224#discussion_r523194296", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...and we'll need to buy some parts\n          \n          \n            \n                    // ... and we'll need to buy some parts", "author": "Windchild292", "createdAt": "2020-11-13T20:03:52Z", "path": "MekHQ/unittests/mekhq/campaign/parts/RefitTest.java", "diffHunk": "@@ -0,0 +1,705 @@\n+/*\n+ * Copyright (C) 2020 MegaMek team\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.parts;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.Entity;\n+import megamek.common.EquipmentType;\n+import megamek.common.IPlayer;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.CampaignOptions;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.parts.equipment.AmmoBin;\n+import mekhq.campaign.parts.equipment.EquipmentPart;\n+import mekhq.campaign.parts.equipment.MissingEquipmentPart;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+import mekhq.campaign.unit.UnitTestUtilities;\n+\n+public class RefitTest {\n+    @Test\n+    public void deserializationCtor() {\n+        Refit refit = new Refit();\n+        assertNotNull(refit);\n+    }\n+\n+    @Test\n+    public void newRefitCtor() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        // Should be old parts...\n+        assertFalse(refit.getOldUnitParts().isEmpty());\n+\n+        // ...and new parts.\n+        assertFalse(refit.getNewUnitParts().isEmpty());\n+\n+        // ...and we'll need to buy some parts", "originalCommit": "71f33cf6363e14bd0053bbeb35a6808a00cf120b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIxMDYzNQ==", "url": "https://github.com/MegaMek/mekhq/pull/2224#discussion_r523210635", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...then make sure they're the \"same\" by removing them one by one...\n          \n          \n            \n                    // ... then make sure they're the \"same\" by removing them one by one...", "author": "Windchild292", "createdAt": "2020-11-13T20:38:12Z", "path": "MekHQ/unittests/mekhq/campaign/parts/RefitTest.java", "diffHunk": "@@ -0,0 +1,705 @@\n+/*\n+ * Copyright (C) 2020 MegaMek team\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.parts;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.Entity;\n+import megamek.common.EquipmentType;\n+import megamek.common.IPlayer;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.CampaignOptions;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.parts.equipment.AmmoBin;\n+import mekhq.campaign.parts.equipment.EquipmentPart;\n+import mekhq.campaign.parts.equipment.MissingEquipmentPart;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+import mekhq.campaign.unit.UnitTestUtilities;\n+\n+public class RefitTest {\n+    @Test\n+    public void deserializationCtor() {\n+        Refit refit = new Refit();\n+        assertNotNull(refit);\n+    }\n+\n+    @Test\n+    public void newRefitCtor() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        // Should be old parts...\n+        assertFalse(refit.getOldUnitParts().isEmpty());\n+\n+        // ...and new parts.\n+        assertFalse(refit.getNewUnitParts().isEmpty());\n+\n+        // ...and we'll need to buy some parts\n+        assertFalse(refit.getShoppingList().isEmpty());\n+    }\n+\n+    @Test\n+    public void locust1Vto1ETest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        //\n+        // Locust 1V to 1E Class D refit steps (in no particular order):\n+        //     1. Remove excess Machine Gun (LA) [120 mins]\n+        //     2. Remove excess Machine Gun (RA) [120 mins]\n+        //     3. Remove Machine Gun Ammo Bin (CT) [120 mins]\n+        //     4. Move Medium Laser (CT) to (RA) [120 mins]\n+        //     5. Add Medium Laser to (LA) [120 mins]\n+        //     6. Add Small Laser to (RA) [120 mins]\n+        //     7. Add Small Laser to (LA) [120 mins]\n+        //\n+        // Everything else is the same.\n+        //\n+\n+        // Per SO p188:\n+        //     \"This kit permits players to install a new item\n+        //      where previously there was none...\"\n+        assertEquals(Refit.CLASS_D, refit.getRefitClass());\n+\n+        // Time?\n+        //     + 3 removals @ 120 mins ea\n+        //     + 1 move @ 120 mins ea\n+        //     + 3 adds @ 120 mins ea\n+        //     x 3 (Class D)\n+        assertEquals((120.0 * 7.0) * 3.0, refit.getActualTime(), 0.1);\n+\n+        // Cost?\n+        //    + 1 Medium Laser @ 40,000 ea\n+        //    + 2 Small Lasers @ 11,250 ea\n+        //    x 1.1 (Refit Kit cost, SO p188)\n+        assertEquals(Money.of((40000 + 11250 + 11250) * 1.1), refit.getCost());\n+\n+        // We're removing 2 machine guns and an ammo bin\n+        List<Part> removedParts = refit.getOldUnitParts();\n+        assertEquals(3, removedParts.size());\n+        assertEquals(2, removedParts.stream()\n+                .filter(p -> (p instanceof EquipmentPart) && p.getName().equals(\"Machine Gun\")).count());\n+        assertEquals(1, removedParts.stream()\n+                .filter(p -> (p instanceof AmmoBin) && p.getName().equals(\"Machine Gun Ammo Bin\")).count());\n+\n+        // All of the new parts should be from the old unit\n+        List<Part> newParts = refit.getNewUnitParts();\n+        assertTrue(newParts.stream().allMatch(p -> p.getUnit().equals(oldUnit)));\n+\n+        // We need to buy one Medium Laser and two Small Lasers\n+        List<Part> shoppingCart = refit.getShoppingList();\n+        assertEquals(1, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"Medium Laser\")).count());\n+        assertEquals(2, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"Small Laser\")).count());\n+    }\n+\n+    @Test\n+    public void testLocust1Vto1EWriteToXml() throws ParserConfigurationException, SAXException, IOException {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        when(mockCampaign.getEntities()).thenReturn(new ArrayList<>());\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Make sure the unit parts have an ID before we serialize them\n+        int partId = 1;\n+        for (Part part : oldUnit.getParts()) {\n+            part.setId(partId++);\n+        }\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+\n+        // Write the Refit XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        refit.writeToXml(pw, 0);\n+\n+        // Get the Refit XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element refitElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"refit\", refitElt.getNodeName());\n+\n+        // Deserialize the refit\n+        Refit deserialized = Refit.generateInstanceFromXML(refitElt, oldUnit, new Version(\"1.0.0\"));\n+        assertNotNull(deserialized);\n+\n+        // Spot check the values\n+        assertEquals(refit.getTime(), deserialized.getTime());\n+        assertEquals(refit.getActualTime(), deserialized.getActualTime());\n+        assertEquals(refit.getCost(), deserialized.getCost());\n+        assertEquals(refit.isSameArmorType(), deserialized.isSameArmorType());\n+        assertEquals(refit.hasFailedCheck(), deserialized.hasFailedCheck());\n+        assertEquals(refit.getRefitClass(), deserialized.getRefitClass());\n+        assertEquals(refit.getTimeSpent(), deserialized.getTimeSpent());\n+        assertEquals(refit.getTimeLeft(), deserialized.getTimeLeft());\n+        assertEquals(refit.isCustomJob(), deserialized.isCustomJob());\n+        assertEquals(refit.kitFound(), deserialized.kitFound());\n+        assertEquals(refit.isBeingRefurbished(), deserialized.isBeingRefurbished());\n+        assertEquals(refit.getTech(), deserialized.getTech());\n+\n+        // Check that we got all the correct old parts in the XML\n+        Set<Integer> oldUnitParts = refit.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedOldParts = deserialized.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(oldUnitParts, serializedOldParts);\n+\n+        // Check that we got all the correct new parts in the XML\n+        Set<Integer> newUnitParts = refit.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedNewParts = deserialized.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(newUnitParts, serializedNewParts);\n+\n+        // Check that we got all the shopping list entries (by name, not amazing but reasonable)\n+        List<String> shoppingList = refit.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+        List<String> serializedShoppingList = deserialized.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+\n+        // Make sure they're the same length first...\n+        assertEquals(shoppingList.size(), serializedShoppingList.size());\n+\n+        // ...then make sure they're the \"same\" by removing them one by one...", "originalCommit": "71f33cf6363e14bd0053bbeb35a6808a00cf120b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIxMDY5OA==", "url": "https://github.com/MegaMek/mekhq/pull/2224#discussion_r523210698", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...and ensuring nothing is left.\n          \n          \n            \n                    // ... and ensuring nothing is left.", "author": "Windchild292", "createdAt": "2020-11-13T20:38:17Z", "path": "MekHQ/unittests/mekhq/campaign/parts/RefitTest.java", "diffHunk": "@@ -0,0 +1,705 @@\n+/*\n+ * Copyright (C) 2020 MegaMek team\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.parts;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.Entity;\n+import megamek.common.EquipmentType;\n+import megamek.common.IPlayer;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.CampaignOptions;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.parts.equipment.AmmoBin;\n+import mekhq.campaign.parts.equipment.EquipmentPart;\n+import mekhq.campaign.parts.equipment.MissingEquipmentPart;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+import mekhq.campaign.unit.UnitTestUtilities;\n+\n+public class RefitTest {\n+    @Test\n+    public void deserializationCtor() {\n+        Refit refit = new Refit();\n+        assertNotNull(refit);\n+    }\n+\n+    @Test\n+    public void newRefitCtor() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        // Should be old parts...\n+        assertFalse(refit.getOldUnitParts().isEmpty());\n+\n+        // ...and new parts.\n+        assertFalse(refit.getNewUnitParts().isEmpty());\n+\n+        // ...and we'll need to buy some parts\n+        assertFalse(refit.getShoppingList().isEmpty());\n+    }\n+\n+    @Test\n+    public void locust1Vto1ETest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        //\n+        // Locust 1V to 1E Class D refit steps (in no particular order):\n+        //     1. Remove excess Machine Gun (LA) [120 mins]\n+        //     2. Remove excess Machine Gun (RA) [120 mins]\n+        //     3. Remove Machine Gun Ammo Bin (CT) [120 mins]\n+        //     4. Move Medium Laser (CT) to (RA) [120 mins]\n+        //     5. Add Medium Laser to (LA) [120 mins]\n+        //     6. Add Small Laser to (RA) [120 mins]\n+        //     7. Add Small Laser to (LA) [120 mins]\n+        //\n+        // Everything else is the same.\n+        //\n+\n+        // Per SO p188:\n+        //     \"This kit permits players to install a new item\n+        //      where previously there was none...\"\n+        assertEquals(Refit.CLASS_D, refit.getRefitClass());\n+\n+        // Time?\n+        //     + 3 removals @ 120 mins ea\n+        //     + 1 move @ 120 mins ea\n+        //     + 3 adds @ 120 mins ea\n+        //     x 3 (Class D)\n+        assertEquals((120.0 * 7.0) * 3.0, refit.getActualTime(), 0.1);\n+\n+        // Cost?\n+        //    + 1 Medium Laser @ 40,000 ea\n+        //    + 2 Small Lasers @ 11,250 ea\n+        //    x 1.1 (Refit Kit cost, SO p188)\n+        assertEquals(Money.of((40000 + 11250 + 11250) * 1.1), refit.getCost());\n+\n+        // We're removing 2 machine guns and an ammo bin\n+        List<Part> removedParts = refit.getOldUnitParts();\n+        assertEquals(3, removedParts.size());\n+        assertEquals(2, removedParts.stream()\n+                .filter(p -> (p instanceof EquipmentPart) && p.getName().equals(\"Machine Gun\")).count());\n+        assertEquals(1, removedParts.stream()\n+                .filter(p -> (p instanceof AmmoBin) && p.getName().equals(\"Machine Gun Ammo Bin\")).count());\n+\n+        // All of the new parts should be from the old unit\n+        List<Part> newParts = refit.getNewUnitParts();\n+        assertTrue(newParts.stream().allMatch(p -> p.getUnit().equals(oldUnit)));\n+\n+        // We need to buy one Medium Laser and two Small Lasers\n+        List<Part> shoppingCart = refit.getShoppingList();\n+        assertEquals(1, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"Medium Laser\")).count());\n+        assertEquals(2, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"Small Laser\")).count());\n+    }\n+\n+    @Test\n+    public void testLocust1Vto1EWriteToXml() throws ParserConfigurationException, SAXException, IOException {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        when(mockCampaign.getEntities()).thenReturn(new ArrayList<>());\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Make sure the unit parts have an ID before we serialize them\n+        int partId = 1;\n+        for (Part part : oldUnit.getParts()) {\n+            part.setId(partId++);\n+        }\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+\n+        // Write the Refit XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        refit.writeToXml(pw, 0);\n+\n+        // Get the Refit XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element refitElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"refit\", refitElt.getNodeName());\n+\n+        // Deserialize the refit\n+        Refit deserialized = Refit.generateInstanceFromXML(refitElt, oldUnit, new Version(\"1.0.0\"));\n+        assertNotNull(deserialized);\n+\n+        // Spot check the values\n+        assertEquals(refit.getTime(), deserialized.getTime());\n+        assertEquals(refit.getActualTime(), deserialized.getActualTime());\n+        assertEquals(refit.getCost(), deserialized.getCost());\n+        assertEquals(refit.isSameArmorType(), deserialized.isSameArmorType());\n+        assertEquals(refit.hasFailedCheck(), deserialized.hasFailedCheck());\n+        assertEquals(refit.getRefitClass(), deserialized.getRefitClass());\n+        assertEquals(refit.getTimeSpent(), deserialized.getTimeSpent());\n+        assertEquals(refit.getTimeLeft(), deserialized.getTimeLeft());\n+        assertEquals(refit.isCustomJob(), deserialized.isCustomJob());\n+        assertEquals(refit.kitFound(), deserialized.kitFound());\n+        assertEquals(refit.isBeingRefurbished(), deserialized.isBeingRefurbished());\n+        assertEquals(refit.getTech(), deserialized.getTech());\n+\n+        // Check that we got all the correct old parts in the XML\n+        Set<Integer> oldUnitParts = refit.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedOldParts = deserialized.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(oldUnitParts, serializedOldParts);\n+\n+        // Check that we got all the correct new parts in the XML\n+        Set<Integer> newUnitParts = refit.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedNewParts = deserialized.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(newUnitParts, serializedNewParts);\n+\n+        // Check that we got all the shopping list entries (by name, not amazing but reasonable)\n+        List<String> shoppingList = refit.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+        List<String> serializedShoppingList = deserialized.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+\n+        // Make sure they're the same length first...\n+        assertEquals(shoppingList.size(), serializedShoppingList.size());\n+\n+        // ...then make sure they're the \"same\" by removing them one by one...\n+        for (String partName : shoppingList) {\n+            assertTrue(serializedShoppingList.remove(partName));\n+        }\n+\n+        // ...and ensuring nothing is left.", "originalCommit": "71f33cf6363e14bd0053bbeb35a6808a00cf120b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIxMDgwNw==", "url": "https://github.com/MegaMek/mekhq/pull/2224#discussion_r523210807", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...except the second list needs to be mutable.\n          \n          \n            \n                    // ... except the second list needs to be mutable.", "author": "Windchild292", "createdAt": "2020-11-13T20:38:23Z", "path": "MekHQ/unittests/mekhq/campaign/parts/RefitTest.java", "diffHunk": "@@ -0,0 +1,705 @@\n+/*\n+ * Copyright (C) 2020 MegaMek team\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.parts;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.Entity;\n+import megamek.common.EquipmentType;\n+import megamek.common.IPlayer;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.CampaignOptions;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.parts.equipment.AmmoBin;\n+import mekhq.campaign.parts.equipment.EquipmentPart;\n+import mekhq.campaign.parts.equipment.MissingEquipmentPart;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+import mekhq.campaign.unit.UnitTestUtilities;\n+\n+public class RefitTest {\n+    @Test\n+    public void deserializationCtor() {\n+        Refit refit = new Refit();\n+        assertNotNull(refit);\n+    }\n+\n+    @Test\n+    public void newRefitCtor() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        // Should be old parts...\n+        assertFalse(refit.getOldUnitParts().isEmpty());\n+\n+        // ...and new parts.\n+        assertFalse(refit.getNewUnitParts().isEmpty());\n+\n+        // ...and we'll need to buy some parts\n+        assertFalse(refit.getShoppingList().isEmpty());\n+    }\n+\n+    @Test\n+    public void locust1Vto1ETest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        //\n+        // Locust 1V to 1E Class D refit steps (in no particular order):\n+        //     1. Remove excess Machine Gun (LA) [120 mins]\n+        //     2. Remove excess Machine Gun (RA) [120 mins]\n+        //     3. Remove Machine Gun Ammo Bin (CT) [120 mins]\n+        //     4. Move Medium Laser (CT) to (RA) [120 mins]\n+        //     5. Add Medium Laser to (LA) [120 mins]\n+        //     6. Add Small Laser to (RA) [120 mins]\n+        //     7. Add Small Laser to (LA) [120 mins]\n+        //\n+        // Everything else is the same.\n+        //\n+\n+        // Per SO p188:\n+        //     \"This kit permits players to install a new item\n+        //      where previously there was none...\"\n+        assertEquals(Refit.CLASS_D, refit.getRefitClass());\n+\n+        // Time?\n+        //     + 3 removals @ 120 mins ea\n+        //     + 1 move @ 120 mins ea\n+        //     + 3 adds @ 120 mins ea\n+        //     x 3 (Class D)\n+        assertEquals((120.0 * 7.0) * 3.0, refit.getActualTime(), 0.1);\n+\n+        // Cost?\n+        //    + 1 Medium Laser @ 40,000 ea\n+        //    + 2 Small Lasers @ 11,250 ea\n+        //    x 1.1 (Refit Kit cost, SO p188)\n+        assertEquals(Money.of((40000 + 11250 + 11250) * 1.1), refit.getCost());\n+\n+        // We're removing 2 machine guns and an ammo bin\n+        List<Part> removedParts = refit.getOldUnitParts();\n+        assertEquals(3, removedParts.size());\n+        assertEquals(2, removedParts.stream()\n+                .filter(p -> (p instanceof EquipmentPart) && p.getName().equals(\"Machine Gun\")).count());\n+        assertEquals(1, removedParts.stream()\n+                .filter(p -> (p instanceof AmmoBin) && p.getName().equals(\"Machine Gun Ammo Bin\")).count());\n+\n+        // All of the new parts should be from the old unit\n+        List<Part> newParts = refit.getNewUnitParts();\n+        assertTrue(newParts.stream().allMatch(p -> p.getUnit().equals(oldUnit)));\n+\n+        // We need to buy one Medium Laser and two Small Lasers\n+        List<Part> shoppingCart = refit.getShoppingList();\n+        assertEquals(1, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"Medium Laser\")).count());\n+        assertEquals(2, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"Small Laser\")).count());\n+    }\n+\n+    @Test\n+    public void testLocust1Vto1EWriteToXml() throws ParserConfigurationException, SAXException, IOException {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        when(mockCampaign.getEntities()).thenReturn(new ArrayList<>());\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Make sure the unit parts have an ID before we serialize them\n+        int partId = 1;\n+        for (Part part : oldUnit.getParts()) {\n+            part.setId(partId++);\n+        }\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+\n+        // Write the Refit XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        refit.writeToXml(pw, 0);\n+\n+        // Get the Refit XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element refitElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"refit\", refitElt.getNodeName());\n+\n+        // Deserialize the refit\n+        Refit deserialized = Refit.generateInstanceFromXML(refitElt, oldUnit, new Version(\"1.0.0\"));\n+        assertNotNull(deserialized);\n+\n+        // Spot check the values\n+        assertEquals(refit.getTime(), deserialized.getTime());\n+        assertEquals(refit.getActualTime(), deserialized.getActualTime());\n+        assertEquals(refit.getCost(), deserialized.getCost());\n+        assertEquals(refit.isSameArmorType(), deserialized.isSameArmorType());\n+        assertEquals(refit.hasFailedCheck(), deserialized.hasFailedCheck());\n+        assertEquals(refit.getRefitClass(), deserialized.getRefitClass());\n+        assertEquals(refit.getTimeSpent(), deserialized.getTimeSpent());\n+        assertEquals(refit.getTimeLeft(), deserialized.getTimeLeft());\n+        assertEquals(refit.isCustomJob(), deserialized.isCustomJob());\n+        assertEquals(refit.kitFound(), deserialized.kitFound());\n+        assertEquals(refit.isBeingRefurbished(), deserialized.isBeingRefurbished());\n+        assertEquals(refit.getTech(), deserialized.getTech());\n+\n+        // Check that we got all the correct old parts in the XML\n+        Set<Integer> oldUnitParts = refit.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedOldParts = deserialized.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(oldUnitParts, serializedOldParts);\n+\n+        // Check that we got all the correct new parts in the XML\n+        Set<Integer> newUnitParts = refit.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedNewParts = deserialized.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(newUnitParts, serializedNewParts);\n+\n+        // Check that we got all the shopping list entries (by name, not amazing but reasonable)\n+        List<String> shoppingList = refit.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+        List<String> serializedShoppingList = deserialized.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+\n+        // Make sure they're the same length first...\n+        assertEquals(shoppingList.size(), serializedShoppingList.size());\n+\n+        // ...then make sure they're the \"same\" by removing them one by one...\n+        for (String partName : shoppingList) {\n+            assertTrue(serializedShoppingList.remove(partName));\n+        }\n+\n+        // ...and ensuring nothing is left.\n+        assertTrue(serializedShoppingList.isEmpty());\n+\n+        // Do the same for their descriptions, which include the quantities...\n+        List<String> shoppingListDescs = Arrays.asList(refit.getShoppingListDescription());\n+        // ...except the second list needs to be mutable.", "originalCommit": "71f33cf6363e14bd0053bbeb35a6808a00cf120b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIxMTMyOA==", "url": "https://github.com/MegaMek/mekhq/pull/2224#discussion_r523211328", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...then make sure they're the \"same\" by removing them one by one...\n          \n          \n            \n                    // ... then make sure they're the \"same\" by removing them one by one...", "author": "Windchild292", "createdAt": "2020-11-13T20:38:58Z", "path": "MekHQ/unittests/mekhq/campaign/parts/RefitTest.java", "diffHunk": "@@ -0,0 +1,705 @@\n+/*\n+ * Copyright (C) 2020 MegaMek team\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.parts;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.Entity;\n+import megamek.common.EquipmentType;\n+import megamek.common.IPlayer;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.CampaignOptions;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.parts.equipment.AmmoBin;\n+import mekhq.campaign.parts.equipment.EquipmentPart;\n+import mekhq.campaign.parts.equipment.MissingEquipmentPart;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+import mekhq.campaign.unit.UnitTestUtilities;\n+\n+public class RefitTest {\n+    @Test\n+    public void deserializationCtor() {\n+        Refit refit = new Refit();\n+        assertNotNull(refit);\n+    }\n+\n+    @Test\n+    public void newRefitCtor() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        // Should be old parts...\n+        assertFalse(refit.getOldUnitParts().isEmpty());\n+\n+        // ...and new parts.\n+        assertFalse(refit.getNewUnitParts().isEmpty());\n+\n+        // ...and we'll need to buy some parts\n+        assertFalse(refit.getShoppingList().isEmpty());\n+    }\n+\n+    @Test\n+    public void locust1Vto1ETest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        //\n+        // Locust 1V to 1E Class D refit steps (in no particular order):\n+        //     1. Remove excess Machine Gun (LA) [120 mins]\n+        //     2. Remove excess Machine Gun (RA) [120 mins]\n+        //     3. Remove Machine Gun Ammo Bin (CT) [120 mins]\n+        //     4. Move Medium Laser (CT) to (RA) [120 mins]\n+        //     5. Add Medium Laser to (LA) [120 mins]\n+        //     6. Add Small Laser to (RA) [120 mins]\n+        //     7. Add Small Laser to (LA) [120 mins]\n+        //\n+        // Everything else is the same.\n+        //\n+\n+        // Per SO p188:\n+        //     \"This kit permits players to install a new item\n+        //      where previously there was none...\"\n+        assertEquals(Refit.CLASS_D, refit.getRefitClass());\n+\n+        // Time?\n+        //     + 3 removals @ 120 mins ea\n+        //     + 1 move @ 120 mins ea\n+        //     + 3 adds @ 120 mins ea\n+        //     x 3 (Class D)\n+        assertEquals((120.0 * 7.0) * 3.0, refit.getActualTime(), 0.1);\n+\n+        // Cost?\n+        //    + 1 Medium Laser @ 40,000 ea\n+        //    + 2 Small Lasers @ 11,250 ea\n+        //    x 1.1 (Refit Kit cost, SO p188)\n+        assertEquals(Money.of((40000 + 11250 + 11250) * 1.1), refit.getCost());\n+\n+        // We're removing 2 machine guns and an ammo bin\n+        List<Part> removedParts = refit.getOldUnitParts();\n+        assertEquals(3, removedParts.size());\n+        assertEquals(2, removedParts.stream()\n+                .filter(p -> (p instanceof EquipmentPart) && p.getName().equals(\"Machine Gun\")).count());\n+        assertEquals(1, removedParts.stream()\n+                .filter(p -> (p instanceof AmmoBin) && p.getName().equals(\"Machine Gun Ammo Bin\")).count());\n+\n+        // All of the new parts should be from the old unit\n+        List<Part> newParts = refit.getNewUnitParts();\n+        assertTrue(newParts.stream().allMatch(p -> p.getUnit().equals(oldUnit)));\n+\n+        // We need to buy one Medium Laser and two Small Lasers\n+        List<Part> shoppingCart = refit.getShoppingList();\n+        assertEquals(1, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"Medium Laser\")).count());\n+        assertEquals(2, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"Small Laser\")).count());\n+    }\n+\n+    @Test\n+    public void testLocust1Vto1EWriteToXml() throws ParserConfigurationException, SAXException, IOException {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        when(mockCampaign.getEntities()).thenReturn(new ArrayList<>());\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Make sure the unit parts have an ID before we serialize them\n+        int partId = 1;\n+        for (Part part : oldUnit.getParts()) {\n+            part.setId(partId++);\n+        }\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+\n+        // Write the Refit XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        refit.writeToXml(pw, 0);\n+\n+        // Get the Refit XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element refitElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"refit\", refitElt.getNodeName());\n+\n+        // Deserialize the refit\n+        Refit deserialized = Refit.generateInstanceFromXML(refitElt, oldUnit, new Version(\"1.0.0\"));\n+        assertNotNull(deserialized);\n+\n+        // Spot check the values\n+        assertEquals(refit.getTime(), deserialized.getTime());\n+        assertEquals(refit.getActualTime(), deserialized.getActualTime());\n+        assertEquals(refit.getCost(), deserialized.getCost());\n+        assertEquals(refit.isSameArmorType(), deserialized.isSameArmorType());\n+        assertEquals(refit.hasFailedCheck(), deserialized.hasFailedCheck());\n+        assertEquals(refit.getRefitClass(), deserialized.getRefitClass());\n+        assertEquals(refit.getTimeSpent(), deserialized.getTimeSpent());\n+        assertEquals(refit.getTimeLeft(), deserialized.getTimeLeft());\n+        assertEquals(refit.isCustomJob(), deserialized.isCustomJob());\n+        assertEquals(refit.kitFound(), deserialized.kitFound());\n+        assertEquals(refit.isBeingRefurbished(), deserialized.isBeingRefurbished());\n+        assertEquals(refit.getTech(), deserialized.getTech());\n+\n+        // Check that we got all the correct old parts in the XML\n+        Set<Integer> oldUnitParts = refit.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedOldParts = deserialized.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(oldUnitParts, serializedOldParts);\n+\n+        // Check that we got all the correct new parts in the XML\n+        Set<Integer> newUnitParts = refit.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedNewParts = deserialized.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(newUnitParts, serializedNewParts);\n+\n+        // Check that we got all the shopping list entries (by name, not amazing but reasonable)\n+        List<String> shoppingList = refit.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+        List<String> serializedShoppingList = deserialized.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+\n+        // Make sure they're the same length first...\n+        assertEquals(shoppingList.size(), serializedShoppingList.size());\n+\n+        // ...then make sure they're the \"same\" by removing them one by one...\n+        for (String partName : shoppingList) {\n+            assertTrue(serializedShoppingList.remove(partName));\n+        }\n+\n+        // ...and ensuring nothing is left.\n+        assertTrue(serializedShoppingList.isEmpty());\n+\n+        // Do the same for their descriptions, which include the quantities...\n+        List<String> shoppingListDescs = Arrays.asList(refit.getShoppingListDescription());\n+        // ...except the second list needs to be mutable.\n+        List<String> serializedShoppingListDescs = new ArrayList<>(Arrays.asList(deserialized.getShoppingListDescription()));\n+\n+        assertEquals(shoppingListDescs.size(), serializedShoppingListDescs.size());\n+        for (String desc : shoppingListDescs) {\n+            assertTrue(serializedShoppingListDescs.remove(desc));\n+        }\n+\n+        assertTrue(serializedShoppingListDescs.isEmpty());\n+    }\n+\n+    @Test\n+    public void javelinJVN10Nto10ATest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        CampaignOptions mockCampaignOptions = mock(CampaignOptions.class);\n+        when(mockCampaign.getCampaignOptions()).thenReturn(mockCampaignOptions);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getJavelinJVN10N();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getJavelinJVN10A();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        //\n+        // Javelin 10N to 10A Class C refit steps (in no particular order):\n+        //     1. Remove excess SRM 6 (LT) [120 mins]\n+        //     2. Remove excess SRM 6 (RT) [120 mins]\n+        //     3. Remove SRM 6 Ammo Bin (LT) [120 mins]\n+        //     4. Remove SRM 6 Ammo Bin (RT) [120 mins]\n+        //     5. Add LRM 15 to (RT) [120 mins]\n+        //     6. Add LRM 15 Ammo Bin to (RT) [120 mins]\n+        //\n+        // Everything else is the same.\n+        //\n+\n+        // Per SO p188:\n+        //     \"A Class C kit also enables replacement of a weapon\n+        //      or item of equipment with any other, even if it is\n+        //      larger than the item(s) being replaced; for example,\n+        //      replacing an ER large laser with an LRM-10 launcher\n+        //      and ammunition.\"\n+        assertEquals(Refit.CLASS_C, refit.getRefitClass());\n+\n+        // Time?\n+        //     + 4 removals @ 120 mins ea\n+        //     + 2 adds @ 120 mins ea\n+        //     x 2 (Class C)\n+        assertEquals((120.0 * 6.0) * 2.0, refit.getActualTime(), 0.1);\n+\n+        // Cost?\n+        //    + 1 LRM 15 @ 175,000 ea\n+        //    + 1 ton LRM 15 Ammo @ 30,000 ea\n+        //    x 1.1 (Refit Kit cost, SO p188)\n+        assertEquals(Money.of(175000.0 + 30000.0).multipliedBy(1.1), refit.getCost());\n+\n+        // We're removing 2 SRM 6s and two ammo bins\n+        List<Part> removedParts = refit.getOldUnitParts();\n+        assertEquals(4, removedParts.size());\n+        assertEquals(2, removedParts.stream()\n+                .filter(p -> (p instanceof EquipmentPart) && p.getName().equals(\"SRM 6\")).count());\n+        assertEquals(2, removedParts.stream()\n+                .filter(p -> (p instanceof AmmoBin) && p.getName().equals(\"SRM 6 Ammo Bin\")).count());\n+\n+        // All of the new parts should be from the old unit\n+        List<Part> newParts = refit.getNewUnitParts();\n+        assertTrue(newParts.stream().allMatch(p -> p.getUnit().equals(oldUnit)));\n+\n+        // We need to buy one LRM 15 and one LRM 15 Ammo Bin\n+        List<Part> shoppingCart = refit.getShoppingList();\n+        assertEquals(1, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"LRM 15\")).count());\n+        assertEquals(1, shoppingCart.stream()\n+                .filter(p -> (p instanceof AmmoBin) && p.getName().equals(\"LRM 15 Ammo Bin\")).count());\n+    }\n+\n+    @Test\n+    public void testJavelinJVN10Nto10AWriteToXml() throws ParserConfigurationException, SAXException, IOException {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        when(mockCampaign.getEntities()).thenReturn(new ArrayList<>());\n+        CampaignOptions mockCampaignOptions = mock(CampaignOptions.class);\n+        when(mockCampaign.getCampaignOptions()).thenReturn(mockCampaignOptions);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+        Person mockTech = mock(Person.class);\n+        UUID techId = UUID.randomUUID();\n+        when(mockTech.getId()).thenReturn(techId);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getJavelinJVN10N();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getJavelinJVN10A();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Make sure the unit parts have an ID before we serialize them\n+        int partId = 1;\n+        for (Part part : oldUnit.getParts()) {\n+            part.setId(partId++);\n+        }\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        refit.setTech(mockTech);\n+        refit.addTimeSpent(60); // 1 hour of work!\n+\n+        // Write the Refit XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        refit.writeToXml(pw, 0);\n+\n+        // Get the Refit XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element refitElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"refit\", refitElt.getNodeName());\n+\n+        // Deserialize the refit\n+        Refit deserialized = Refit.generateInstanceFromXML(refitElt, oldUnit, new Version(\"1.0.0\"));\n+        assertNotNull(deserialized);\n+\n+        // Spot check the values\n+        assertEquals(refit.getTime(), deserialized.getTime());\n+        assertEquals(refit.getActualTime(), deserialized.getActualTime());\n+        assertEquals(refit.getCost(), deserialized.getCost());\n+        assertEquals(refit.isSameArmorType(), deserialized.isSameArmorType());\n+        assertEquals(refit.hasFailedCheck(), deserialized.hasFailedCheck());\n+        assertEquals(refit.getRefitClass(), deserialized.getRefitClass());\n+        assertEquals(refit.getTimeSpent(), deserialized.getTimeSpent());\n+        assertEquals(refit.getTimeLeft(), deserialized.getTimeLeft());\n+        assertEquals(refit.isCustomJob(), deserialized.isCustomJob());\n+        assertEquals(refit.kitFound(), deserialized.kitFound());\n+        assertEquals(refit.isBeingRefurbished(), deserialized.isBeingRefurbished());\n+        assertEquals(refit.getTech().getId(), deserialized.getTech().getId());\n+\n+        // Check that we got all the correct old parts in the XML\n+        Set<Integer> oldUnitParts = refit.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedOldParts = deserialized.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(oldUnitParts, serializedOldParts);\n+\n+        // Check that we got all the correct new parts in the XML\n+        Set<Integer> newUnitParts = refit.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedNewParts = deserialized.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(newUnitParts, serializedNewParts);\n+\n+        // Check that we got all the shopping list entries (by name, not amazing but reasonable)\n+        List<String> shoppingList = refit.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+        List<String> serializedShoppingList = deserialized.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+\n+        // Make sure they're the same length first...\n+        assertEquals(shoppingList.size(), serializedShoppingList.size());\n+\n+        // ...then make sure they're the \"same\" by removing them one by one...", "originalCommit": "71f33cf6363e14bd0053bbeb35a6808a00cf120b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIxMTM4OQ==", "url": "https://github.com/MegaMek/mekhq/pull/2224#discussion_r523211389", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...and ensuring nothing is left.\n          \n          \n            \n                    // ... and ensuring nothing is left.", "author": "Windchild292", "createdAt": "2020-11-13T20:39:02Z", "path": "MekHQ/unittests/mekhq/campaign/parts/RefitTest.java", "diffHunk": "@@ -0,0 +1,705 @@\n+/*\n+ * Copyright (C) 2020 MegaMek team\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.parts;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.Entity;\n+import megamek.common.EquipmentType;\n+import megamek.common.IPlayer;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.CampaignOptions;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.parts.equipment.AmmoBin;\n+import mekhq.campaign.parts.equipment.EquipmentPart;\n+import mekhq.campaign.parts.equipment.MissingEquipmentPart;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+import mekhq.campaign.unit.UnitTestUtilities;\n+\n+public class RefitTest {\n+    @Test\n+    public void deserializationCtor() {\n+        Refit refit = new Refit();\n+        assertNotNull(refit);\n+    }\n+\n+    @Test\n+    public void newRefitCtor() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        // Should be old parts...\n+        assertFalse(refit.getOldUnitParts().isEmpty());\n+\n+        // ...and new parts.\n+        assertFalse(refit.getNewUnitParts().isEmpty());\n+\n+        // ...and we'll need to buy some parts\n+        assertFalse(refit.getShoppingList().isEmpty());\n+    }\n+\n+    @Test\n+    public void locust1Vto1ETest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        //\n+        // Locust 1V to 1E Class D refit steps (in no particular order):\n+        //     1. Remove excess Machine Gun (LA) [120 mins]\n+        //     2. Remove excess Machine Gun (RA) [120 mins]\n+        //     3. Remove Machine Gun Ammo Bin (CT) [120 mins]\n+        //     4. Move Medium Laser (CT) to (RA) [120 mins]\n+        //     5. Add Medium Laser to (LA) [120 mins]\n+        //     6. Add Small Laser to (RA) [120 mins]\n+        //     7. Add Small Laser to (LA) [120 mins]\n+        //\n+        // Everything else is the same.\n+        //\n+\n+        // Per SO p188:\n+        //     \"This kit permits players to install a new item\n+        //      where previously there was none...\"\n+        assertEquals(Refit.CLASS_D, refit.getRefitClass());\n+\n+        // Time?\n+        //     + 3 removals @ 120 mins ea\n+        //     + 1 move @ 120 mins ea\n+        //     + 3 adds @ 120 mins ea\n+        //     x 3 (Class D)\n+        assertEquals((120.0 * 7.0) * 3.0, refit.getActualTime(), 0.1);\n+\n+        // Cost?\n+        //    + 1 Medium Laser @ 40,000 ea\n+        //    + 2 Small Lasers @ 11,250 ea\n+        //    x 1.1 (Refit Kit cost, SO p188)\n+        assertEquals(Money.of((40000 + 11250 + 11250) * 1.1), refit.getCost());\n+\n+        // We're removing 2 machine guns and an ammo bin\n+        List<Part> removedParts = refit.getOldUnitParts();\n+        assertEquals(3, removedParts.size());\n+        assertEquals(2, removedParts.stream()\n+                .filter(p -> (p instanceof EquipmentPart) && p.getName().equals(\"Machine Gun\")).count());\n+        assertEquals(1, removedParts.stream()\n+                .filter(p -> (p instanceof AmmoBin) && p.getName().equals(\"Machine Gun Ammo Bin\")).count());\n+\n+        // All of the new parts should be from the old unit\n+        List<Part> newParts = refit.getNewUnitParts();\n+        assertTrue(newParts.stream().allMatch(p -> p.getUnit().equals(oldUnit)));\n+\n+        // We need to buy one Medium Laser and two Small Lasers\n+        List<Part> shoppingCart = refit.getShoppingList();\n+        assertEquals(1, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"Medium Laser\")).count());\n+        assertEquals(2, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"Small Laser\")).count());\n+    }\n+\n+    @Test\n+    public void testLocust1Vto1EWriteToXml() throws ParserConfigurationException, SAXException, IOException {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        when(mockCampaign.getEntities()).thenReturn(new ArrayList<>());\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Make sure the unit parts have an ID before we serialize them\n+        int partId = 1;\n+        for (Part part : oldUnit.getParts()) {\n+            part.setId(partId++);\n+        }\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+\n+        // Write the Refit XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        refit.writeToXml(pw, 0);\n+\n+        // Get the Refit XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element refitElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"refit\", refitElt.getNodeName());\n+\n+        // Deserialize the refit\n+        Refit deserialized = Refit.generateInstanceFromXML(refitElt, oldUnit, new Version(\"1.0.0\"));\n+        assertNotNull(deserialized);\n+\n+        // Spot check the values\n+        assertEquals(refit.getTime(), deserialized.getTime());\n+        assertEquals(refit.getActualTime(), deserialized.getActualTime());\n+        assertEquals(refit.getCost(), deserialized.getCost());\n+        assertEquals(refit.isSameArmorType(), deserialized.isSameArmorType());\n+        assertEquals(refit.hasFailedCheck(), deserialized.hasFailedCheck());\n+        assertEquals(refit.getRefitClass(), deserialized.getRefitClass());\n+        assertEquals(refit.getTimeSpent(), deserialized.getTimeSpent());\n+        assertEquals(refit.getTimeLeft(), deserialized.getTimeLeft());\n+        assertEquals(refit.isCustomJob(), deserialized.isCustomJob());\n+        assertEquals(refit.kitFound(), deserialized.kitFound());\n+        assertEquals(refit.isBeingRefurbished(), deserialized.isBeingRefurbished());\n+        assertEquals(refit.getTech(), deserialized.getTech());\n+\n+        // Check that we got all the correct old parts in the XML\n+        Set<Integer> oldUnitParts = refit.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedOldParts = deserialized.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(oldUnitParts, serializedOldParts);\n+\n+        // Check that we got all the correct new parts in the XML\n+        Set<Integer> newUnitParts = refit.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedNewParts = deserialized.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(newUnitParts, serializedNewParts);\n+\n+        // Check that we got all the shopping list entries (by name, not amazing but reasonable)\n+        List<String> shoppingList = refit.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+        List<String> serializedShoppingList = deserialized.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+\n+        // Make sure they're the same length first...\n+        assertEquals(shoppingList.size(), serializedShoppingList.size());\n+\n+        // ...then make sure they're the \"same\" by removing them one by one...\n+        for (String partName : shoppingList) {\n+            assertTrue(serializedShoppingList.remove(partName));\n+        }\n+\n+        // ...and ensuring nothing is left.\n+        assertTrue(serializedShoppingList.isEmpty());\n+\n+        // Do the same for their descriptions, which include the quantities...\n+        List<String> shoppingListDescs = Arrays.asList(refit.getShoppingListDescription());\n+        // ...except the second list needs to be mutable.\n+        List<String> serializedShoppingListDescs = new ArrayList<>(Arrays.asList(deserialized.getShoppingListDescription()));\n+\n+        assertEquals(shoppingListDescs.size(), serializedShoppingListDescs.size());\n+        for (String desc : shoppingListDescs) {\n+            assertTrue(serializedShoppingListDescs.remove(desc));\n+        }\n+\n+        assertTrue(serializedShoppingListDescs.isEmpty());\n+    }\n+\n+    @Test\n+    public void javelinJVN10Nto10ATest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        CampaignOptions mockCampaignOptions = mock(CampaignOptions.class);\n+        when(mockCampaign.getCampaignOptions()).thenReturn(mockCampaignOptions);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getJavelinJVN10N();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getJavelinJVN10A();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        //\n+        // Javelin 10N to 10A Class C refit steps (in no particular order):\n+        //     1. Remove excess SRM 6 (LT) [120 mins]\n+        //     2. Remove excess SRM 6 (RT) [120 mins]\n+        //     3. Remove SRM 6 Ammo Bin (LT) [120 mins]\n+        //     4. Remove SRM 6 Ammo Bin (RT) [120 mins]\n+        //     5. Add LRM 15 to (RT) [120 mins]\n+        //     6. Add LRM 15 Ammo Bin to (RT) [120 mins]\n+        //\n+        // Everything else is the same.\n+        //\n+\n+        // Per SO p188:\n+        //     \"A Class C kit also enables replacement of a weapon\n+        //      or item of equipment with any other, even if it is\n+        //      larger than the item(s) being replaced; for example,\n+        //      replacing an ER large laser with an LRM-10 launcher\n+        //      and ammunition.\"\n+        assertEquals(Refit.CLASS_C, refit.getRefitClass());\n+\n+        // Time?\n+        //     + 4 removals @ 120 mins ea\n+        //     + 2 adds @ 120 mins ea\n+        //     x 2 (Class C)\n+        assertEquals((120.0 * 6.0) * 2.0, refit.getActualTime(), 0.1);\n+\n+        // Cost?\n+        //    + 1 LRM 15 @ 175,000 ea\n+        //    + 1 ton LRM 15 Ammo @ 30,000 ea\n+        //    x 1.1 (Refit Kit cost, SO p188)\n+        assertEquals(Money.of(175000.0 + 30000.0).multipliedBy(1.1), refit.getCost());\n+\n+        // We're removing 2 SRM 6s and two ammo bins\n+        List<Part> removedParts = refit.getOldUnitParts();\n+        assertEquals(4, removedParts.size());\n+        assertEquals(2, removedParts.stream()\n+                .filter(p -> (p instanceof EquipmentPart) && p.getName().equals(\"SRM 6\")).count());\n+        assertEquals(2, removedParts.stream()\n+                .filter(p -> (p instanceof AmmoBin) && p.getName().equals(\"SRM 6 Ammo Bin\")).count());\n+\n+        // All of the new parts should be from the old unit\n+        List<Part> newParts = refit.getNewUnitParts();\n+        assertTrue(newParts.stream().allMatch(p -> p.getUnit().equals(oldUnit)));\n+\n+        // We need to buy one LRM 15 and one LRM 15 Ammo Bin\n+        List<Part> shoppingCart = refit.getShoppingList();\n+        assertEquals(1, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"LRM 15\")).count());\n+        assertEquals(1, shoppingCart.stream()\n+                .filter(p -> (p instanceof AmmoBin) && p.getName().equals(\"LRM 15 Ammo Bin\")).count());\n+    }\n+\n+    @Test\n+    public void testJavelinJVN10Nto10AWriteToXml() throws ParserConfigurationException, SAXException, IOException {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        when(mockCampaign.getEntities()).thenReturn(new ArrayList<>());\n+        CampaignOptions mockCampaignOptions = mock(CampaignOptions.class);\n+        when(mockCampaign.getCampaignOptions()).thenReturn(mockCampaignOptions);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+        Person mockTech = mock(Person.class);\n+        UUID techId = UUID.randomUUID();\n+        when(mockTech.getId()).thenReturn(techId);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getJavelinJVN10N();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getJavelinJVN10A();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Make sure the unit parts have an ID before we serialize them\n+        int partId = 1;\n+        for (Part part : oldUnit.getParts()) {\n+            part.setId(partId++);\n+        }\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        refit.setTech(mockTech);\n+        refit.addTimeSpent(60); // 1 hour of work!\n+\n+        // Write the Refit XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        refit.writeToXml(pw, 0);\n+\n+        // Get the Refit XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element refitElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"refit\", refitElt.getNodeName());\n+\n+        // Deserialize the refit\n+        Refit deserialized = Refit.generateInstanceFromXML(refitElt, oldUnit, new Version(\"1.0.0\"));\n+        assertNotNull(deserialized);\n+\n+        // Spot check the values\n+        assertEquals(refit.getTime(), deserialized.getTime());\n+        assertEquals(refit.getActualTime(), deserialized.getActualTime());\n+        assertEquals(refit.getCost(), deserialized.getCost());\n+        assertEquals(refit.isSameArmorType(), deserialized.isSameArmorType());\n+        assertEquals(refit.hasFailedCheck(), deserialized.hasFailedCheck());\n+        assertEquals(refit.getRefitClass(), deserialized.getRefitClass());\n+        assertEquals(refit.getTimeSpent(), deserialized.getTimeSpent());\n+        assertEquals(refit.getTimeLeft(), deserialized.getTimeLeft());\n+        assertEquals(refit.isCustomJob(), deserialized.isCustomJob());\n+        assertEquals(refit.kitFound(), deserialized.kitFound());\n+        assertEquals(refit.isBeingRefurbished(), deserialized.isBeingRefurbished());\n+        assertEquals(refit.getTech().getId(), deserialized.getTech().getId());\n+\n+        // Check that we got all the correct old parts in the XML\n+        Set<Integer> oldUnitParts = refit.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedOldParts = deserialized.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(oldUnitParts, serializedOldParts);\n+\n+        // Check that we got all the correct new parts in the XML\n+        Set<Integer> newUnitParts = refit.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedNewParts = deserialized.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(newUnitParts, serializedNewParts);\n+\n+        // Check that we got all the shopping list entries (by name, not amazing but reasonable)\n+        List<String> shoppingList = refit.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+        List<String> serializedShoppingList = deserialized.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+\n+        // Make sure they're the same length first...\n+        assertEquals(shoppingList.size(), serializedShoppingList.size());\n+\n+        // ...then make sure they're the \"same\" by removing them one by one...\n+        for (String partName : shoppingList) {\n+            assertTrue(serializedShoppingList.remove(partName));\n+        }\n+\n+        // ...and ensuring nothing is left.", "originalCommit": "71f33cf6363e14bd0053bbeb35a6808a00cf120b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIxMTQ3Mw==", "url": "https://github.com/MegaMek/mekhq/pull/2224#discussion_r523211473", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...except the second list needs to be mutable.\n          \n          \n            \n                    // ... except the second list needs to be mutable.", "author": "Windchild292", "createdAt": "2020-11-13T20:39:08Z", "path": "MekHQ/unittests/mekhq/campaign/parts/RefitTest.java", "diffHunk": "@@ -0,0 +1,705 @@\n+/*\n+ * Copyright (C) 2020 MegaMek team\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.parts;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.Entity;\n+import megamek.common.EquipmentType;\n+import megamek.common.IPlayer;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.CampaignOptions;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.parts.equipment.AmmoBin;\n+import mekhq.campaign.parts.equipment.EquipmentPart;\n+import mekhq.campaign.parts.equipment.MissingEquipmentPart;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+import mekhq.campaign.unit.UnitTestUtilities;\n+\n+public class RefitTest {\n+    @Test\n+    public void deserializationCtor() {\n+        Refit refit = new Refit();\n+        assertNotNull(refit);\n+    }\n+\n+    @Test\n+    public void newRefitCtor() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        // Should be old parts...\n+        assertFalse(refit.getOldUnitParts().isEmpty());\n+\n+        // ...and new parts.\n+        assertFalse(refit.getNewUnitParts().isEmpty());\n+\n+        // ...and we'll need to buy some parts\n+        assertFalse(refit.getShoppingList().isEmpty());\n+    }\n+\n+    @Test\n+    public void locust1Vto1ETest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        //\n+        // Locust 1V to 1E Class D refit steps (in no particular order):\n+        //     1. Remove excess Machine Gun (LA) [120 mins]\n+        //     2. Remove excess Machine Gun (RA) [120 mins]\n+        //     3. Remove Machine Gun Ammo Bin (CT) [120 mins]\n+        //     4. Move Medium Laser (CT) to (RA) [120 mins]\n+        //     5. Add Medium Laser to (LA) [120 mins]\n+        //     6. Add Small Laser to (RA) [120 mins]\n+        //     7. Add Small Laser to (LA) [120 mins]\n+        //\n+        // Everything else is the same.\n+        //\n+\n+        // Per SO p188:\n+        //     \"This kit permits players to install a new item\n+        //      where previously there was none...\"\n+        assertEquals(Refit.CLASS_D, refit.getRefitClass());\n+\n+        // Time?\n+        //     + 3 removals @ 120 mins ea\n+        //     + 1 move @ 120 mins ea\n+        //     + 3 adds @ 120 mins ea\n+        //     x 3 (Class D)\n+        assertEquals((120.0 * 7.0) * 3.0, refit.getActualTime(), 0.1);\n+\n+        // Cost?\n+        //    + 1 Medium Laser @ 40,000 ea\n+        //    + 2 Small Lasers @ 11,250 ea\n+        //    x 1.1 (Refit Kit cost, SO p188)\n+        assertEquals(Money.of((40000 + 11250 + 11250) * 1.1), refit.getCost());\n+\n+        // We're removing 2 machine guns and an ammo bin\n+        List<Part> removedParts = refit.getOldUnitParts();\n+        assertEquals(3, removedParts.size());\n+        assertEquals(2, removedParts.stream()\n+                .filter(p -> (p instanceof EquipmentPart) && p.getName().equals(\"Machine Gun\")).count());\n+        assertEquals(1, removedParts.stream()\n+                .filter(p -> (p instanceof AmmoBin) && p.getName().equals(\"Machine Gun Ammo Bin\")).count());\n+\n+        // All of the new parts should be from the old unit\n+        List<Part> newParts = refit.getNewUnitParts();\n+        assertTrue(newParts.stream().allMatch(p -> p.getUnit().equals(oldUnit)));\n+\n+        // We need to buy one Medium Laser and two Small Lasers\n+        List<Part> shoppingCart = refit.getShoppingList();\n+        assertEquals(1, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"Medium Laser\")).count());\n+        assertEquals(2, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"Small Laser\")).count());\n+    }\n+\n+    @Test\n+    public void testLocust1Vto1EWriteToXml() throws ParserConfigurationException, SAXException, IOException {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        when(mockCampaign.getEntities()).thenReturn(new ArrayList<>());\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Make sure the unit parts have an ID before we serialize them\n+        int partId = 1;\n+        for (Part part : oldUnit.getParts()) {\n+            part.setId(partId++);\n+        }\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+\n+        // Write the Refit XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        refit.writeToXml(pw, 0);\n+\n+        // Get the Refit XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element refitElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"refit\", refitElt.getNodeName());\n+\n+        // Deserialize the refit\n+        Refit deserialized = Refit.generateInstanceFromXML(refitElt, oldUnit, new Version(\"1.0.0\"));\n+        assertNotNull(deserialized);\n+\n+        // Spot check the values\n+        assertEquals(refit.getTime(), deserialized.getTime());\n+        assertEquals(refit.getActualTime(), deserialized.getActualTime());\n+        assertEquals(refit.getCost(), deserialized.getCost());\n+        assertEquals(refit.isSameArmorType(), deserialized.isSameArmorType());\n+        assertEquals(refit.hasFailedCheck(), deserialized.hasFailedCheck());\n+        assertEquals(refit.getRefitClass(), deserialized.getRefitClass());\n+        assertEquals(refit.getTimeSpent(), deserialized.getTimeSpent());\n+        assertEquals(refit.getTimeLeft(), deserialized.getTimeLeft());\n+        assertEquals(refit.isCustomJob(), deserialized.isCustomJob());\n+        assertEquals(refit.kitFound(), deserialized.kitFound());\n+        assertEquals(refit.isBeingRefurbished(), deserialized.isBeingRefurbished());\n+        assertEquals(refit.getTech(), deserialized.getTech());\n+\n+        // Check that we got all the correct old parts in the XML\n+        Set<Integer> oldUnitParts = refit.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedOldParts = deserialized.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(oldUnitParts, serializedOldParts);\n+\n+        // Check that we got all the correct new parts in the XML\n+        Set<Integer> newUnitParts = refit.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedNewParts = deserialized.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(newUnitParts, serializedNewParts);\n+\n+        // Check that we got all the shopping list entries (by name, not amazing but reasonable)\n+        List<String> shoppingList = refit.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+        List<String> serializedShoppingList = deserialized.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+\n+        // Make sure they're the same length first...\n+        assertEquals(shoppingList.size(), serializedShoppingList.size());\n+\n+        // ...then make sure they're the \"same\" by removing them one by one...\n+        for (String partName : shoppingList) {\n+            assertTrue(serializedShoppingList.remove(partName));\n+        }\n+\n+        // ...and ensuring nothing is left.\n+        assertTrue(serializedShoppingList.isEmpty());\n+\n+        // Do the same for their descriptions, which include the quantities...\n+        List<String> shoppingListDescs = Arrays.asList(refit.getShoppingListDescription());\n+        // ...except the second list needs to be mutable.\n+        List<String> serializedShoppingListDescs = new ArrayList<>(Arrays.asList(deserialized.getShoppingListDescription()));\n+\n+        assertEquals(shoppingListDescs.size(), serializedShoppingListDescs.size());\n+        for (String desc : shoppingListDescs) {\n+            assertTrue(serializedShoppingListDescs.remove(desc));\n+        }\n+\n+        assertTrue(serializedShoppingListDescs.isEmpty());\n+    }\n+\n+    @Test\n+    public void javelinJVN10Nto10ATest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        CampaignOptions mockCampaignOptions = mock(CampaignOptions.class);\n+        when(mockCampaign.getCampaignOptions()).thenReturn(mockCampaignOptions);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getJavelinJVN10N();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getJavelinJVN10A();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        //\n+        // Javelin 10N to 10A Class C refit steps (in no particular order):\n+        //     1. Remove excess SRM 6 (LT) [120 mins]\n+        //     2. Remove excess SRM 6 (RT) [120 mins]\n+        //     3. Remove SRM 6 Ammo Bin (LT) [120 mins]\n+        //     4. Remove SRM 6 Ammo Bin (RT) [120 mins]\n+        //     5. Add LRM 15 to (RT) [120 mins]\n+        //     6. Add LRM 15 Ammo Bin to (RT) [120 mins]\n+        //\n+        // Everything else is the same.\n+        //\n+\n+        // Per SO p188:\n+        //     \"A Class C kit also enables replacement of a weapon\n+        //      or item of equipment with any other, even if it is\n+        //      larger than the item(s) being replaced; for example,\n+        //      replacing an ER large laser with an LRM-10 launcher\n+        //      and ammunition.\"\n+        assertEquals(Refit.CLASS_C, refit.getRefitClass());\n+\n+        // Time?\n+        //     + 4 removals @ 120 mins ea\n+        //     + 2 adds @ 120 mins ea\n+        //     x 2 (Class C)\n+        assertEquals((120.0 * 6.0) * 2.0, refit.getActualTime(), 0.1);\n+\n+        // Cost?\n+        //    + 1 LRM 15 @ 175,000 ea\n+        //    + 1 ton LRM 15 Ammo @ 30,000 ea\n+        //    x 1.1 (Refit Kit cost, SO p188)\n+        assertEquals(Money.of(175000.0 + 30000.0).multipliedBy(1.1), refit.getCost());\n+\n+        // We're removing 2 SRM 6s and two ammo bins\n+        List<Part> removedParts = refit.getOldUnitParts();\n+        assertEquals(4, removedParts.size());\n+        assertEquals(2, removedParts.stream()\n+                .filter(p -> (p instanceof EquipmentPart) && p.getName().equals(\"SRM 6\")).count());\n+        assertEquals(2, removedParts.stream()\n+                .filter(p -> (p instanceof AmmoBin) && p.getName().equals(\"SRM 6 Ammo Bin\")).count());\n+\n+        // All of the new parts should be from the old unit\n+        List<Part> newParts = refit.getNewUnitParts();\n+        assertTrue(newParts.stream().allMatch(p -> p.getUnit().equals(oldUnit)));\n+\n+        // We need to buy one LRM 15 and one LRM 15 Ammo Bin\n+        List<Part> shoppingCart = refit.getShoppingList();\n+        assertEquals(1, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"LRM 15\")).count());\n+        assertEquals(1, shoppingCart.stream()\n+                .filter(p -> (p instanceof AmmoBin) && p.getName().equals(\"LRM 15 Ammo Bin\")).count());\n+    }\n+\n+    @Test\n+    public void testJavelinJVN10Nto10AWriteToXml() throws ParserConfigurationException, SAXException, IOException {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        when(mockCampaign.getEntities()).thenReturn(new ArrayList<>());\n+        CampaignOptions mockCampaignOptions = mock(CampaignOptions.class);\n+        when(mockCampaign.getCampaignOptions()).thenReturn(mockCampaignOptions);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+        Person mockTech = mock(Person.class);\n+        UUID techId = UUID.randomUUID();\n+        when(mockTech.getId()).thenReturn(techId);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getJavelinJVN10N();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getJavelinJVN10A();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Make sure the unit parts have an ID before we serialize them\n+        int partId = 1;\n+        for (Part part : oldUnit.getParts()) {\n+            part.setId(partId++);\n+        }\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        refit.setTech(mockTech);\n+        refit.addTimeSpent(60); // 1 hour of work!\n+\n+        // Write the Refit XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        refit.writeToXml(pw, 0);\n+\n+        // Get the Refit XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element refitElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"refit\", refitElt.getNodeName());\n+\n+        // Deserialize the refit\n+        Refit deserialized = Refit.generateInstanceFromXML(refitElt, oldUnit, new Version(\"1.0.0\"));\n+        assertNotNull(deserialized);\n+\n+        // Spot check the values\n+        assertEquals(refit.getTime(), deserialized.getTime());\n+        assertEquals(refit.getActualTime(), deserialized.getActualTime());\n+        assertEquals(refit.getCost(), deserialized.getCost());\n+        assertEquals(refit.isSameArmorType(), deserialized.isSameArmorType());\n+        assertEquals(refit.hasFailedCheck(), deserialized.hasFailedCheck());\n+        assertEquals(refit.getRefitClass(), deserialized.getRefitClass());\n+        assertEquals(refit.getTimeSpent(), deserialized.getTimeSpent());\n+        assertEquals(refit.getTimeLeft(), deserialized.getTimeLeft());\n+        assertEquals(refit.isCustomJob(), deserialized.isCustomJob());\n+        assertEquals(refit.kitFound(), deserialized.kitFound());\n+        assertEquals(refit.isBeingRefurbished(), deserialized.isBeingRefurbished());\n+        assertEquals(refit.getTech().getId(), deserialized.getTech().getId());\n+\n+        // Check that we got all the correct old parts in the XML\n+        Set<Integer> oldUnitParts = refit.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedOldParts = deserialized.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(oldUnitParts, serializedOldParts);\n+\n+        // Check that we got all the correct new parts in the XML\n+        Set<Integer> newUnitParts = refit.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedNewParts = deserialized.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(newUnitParts, serializedNewParts);\n+\n+        // Check that we got all the shopping list entries (by name, not amazing but reasonable)\n+        List<String> shoppingList = refit.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+        List<String> serializedShoppingList = deserialized.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+\n+        // Make sure they're the same length first...\n+        assertEquals(shoppingList.size(), serializedShoppingList.size());\n+\n+        // ...then make sure they're the \"same\" by removing them one by one...\n+        for (String partName : shoppingList) {\n+            assertTrue(serializedShoppingList.remove(partName));\n+        }\n+\n+        // ...and ensuring nothing is left.\n+        assertTrue(serializedShoppingList.isEmpty());\n+\n+        // Do the same for their descriptions, which include the quantities...\n+        List<String> shoppingListDescs = Arrays.asList(refit.getShoppingListDescription());\n+        // ...except the second list needs to be mutable.", "originalCommit": "71f33cf6363e14bd0053bbeb35a6808a00cf120b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIxMTcyNA==", "url": "https://github.com/MegaMek/mekhq/pull/2224#discussion_r523211724", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...except the second list needs to be mutable.\n          \n          \n            \n                    // ... except the second list needs to be mutable.", "author": "Windchild292", "createdAt": "2020-11-13T20:39:18Z", "path": "MekHQ/unittests/mekhq/campaign/parts/RefitTest.java", "diffHunk": "@@ -0,0 +1,705 @@\n+/*\n+ * Copyright (C) 2020 MegaMek team\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.parts;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.Entity;\n+import megamek.common.EquipmentType;\n+import megamek.common.IPlayer;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.CampaignOptions;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.parts.equipment.AmmoBin;\n+import mekhq.campaign.parts.equipment.EquipmentPart;\n+import mekhq.campaign.parts.equipment.MissingEquipmentPart;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+import mekhq.campaign.unit.UnitTestUtilities;\n+\n+public class RefitTest {\n+    @Test\n+    public void deserializationCtor() {\n+        Refit refit = new Refit();\n+        assertNotNull(refit);\n+    }\n+\n+    @Test\n+    public void newRefitCtor() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        // Should be old parts...\n+        assertFalse(refit.getOldUnitParts().isEmpty());\n+\n+        // ...and new parts.\n+        assertFalse(refit.getNewUnitParts().isEmpty());\n+\n+        // ...and we'll need to buy some parts\n+        assertFalse(refit.getShoppingList().isEmpty());\n+    }\n+\n+    @Test\n+    public void locust1Vto1ETest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        //\n+        // Locust 1V to 1E Class D refit steps (in no particular order):\n+        //     1. Remove excess Machine Gun (LA) [120 mins]\n+        //     2. Remove excess Machine Gun (RA) [120 mins]\n+        //     3. Remove Machine Gun Ammo Bin (CT) [120 mins]\n+        //     4. Move Medium Laser (CT) to (RA) [120 mins]\n+        //     5. Add Medium Laser to (LA) [120 mins]\n+        //     6. Add Small Laser to (RA) [120 mins]\n+        //     7. Add Small Laser to (LA) [120 mins]\n+        //\n+        // Everything else is the same.\n+        //\n+\n+        // Per SO p188:\n+        //     \"This kit permits players to install a new item\n+        //      where previously there was none...\"\n+        assertEquals(Refit.CLASS_D, refit.getRefitClass());\n+\n+        // Time?\n+        //     + 3 removals @ 120 mins ea\n+        //     + 1 move @ 120 mins ea\n+        //     + 3 adds @ 120 mins ea\n+        //     x 3 (Class D)\n+        assertEquals((120.0 * 7.0) * 3.0, refit.getActualTime(), 0.1);\n+\n+        // Cost?\n+        //    + 1 Medium Laser @ 40,000 ea\n+        //    + 2 Small Lasers @ 11,250 ea\n+        //    x 1.1 (Refit Kit cost, SO p188)\n+        assertEquals(Money.of((40000 + 11250 + 11250) * 1.1), refit.getCost());\n+\n+        // We're removing 2 machine guns and an ammo bin\n+        List<Part> removedParts = refit.getOldUnitParts();\n+        assertEquals(3, removedParts.size());\n+        assertEquals(2, removedParts.stream()\n+                .filter(p -> (p instanceof EquipmentPart) && p.getName().equals(\"Machine Gun\")).count());\n+        assertEquals(1, removedParts.stream()\n+                .filter(p -> (p instanceof AmmoBin) && p.getName().equals(\"Machine Gun Ammo Bin\")).count());\n+\n+        // All of the new parts should be from the old unit\n+        List<Part> newParts = refit.getNewUnitParts();\n+        assertTrue(newParts.stream().allMatch(p -> p.getUnit().equals(oldUnit)));\n+\n+        // We need to buy one Medium Laser and two Small Lasers\n+        List<Part> shoppingCart = refit.getShoppingList();\n+        assertEquals(1, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"Medium Laser\")).count());\n+        assertEquals(2, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"Small Laser\")).count());\n+    }\n+\n+    @Test\n+    public void testLocust1Vto1EWriteToXml() throws ParserConfigurationException, SAXException, IOException {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        when(mockCampaign.getEntities()).thenReturn(new ArrayList<>());\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Make sure the unit parts have an ID before we serialize them\n+        int partId = 1;\n+        for (Part part : oldUnit.getParts()) {\n+            part.setId(partId++);\n+        }\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+\n+        // Write the Refit XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        refit.writeToXml(pw, 0);\n+\n+        // Get the Refit XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element refitElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"refit\", refitElt.getNodeName());\n+\n+        // Deserialize the refit\n+        Refit deserialized = Refit.generateInstanceFromXML(refitElt, oldUnit, new Version(\"1.0.0\"));\n+        assertNotNull(deserialized);\n+\n+        // Spot check the values\n+        assertEquals(refit.getTime(), deserialized.getTime());\n+        assertEquals(refit.getActualTime(), deserialized.getActualTime());\n+        assertEquals(refit.getCost(), deserialized.getCost());\n+        assertEquals(refit.isSameArmorType(), deserialized.isSameArmorType());\n+        assertEquals(refit.hasFailedCheck(), deserialized.hasFailedCheck());\n+        assertEquals(refit.getRefitClass(), deserialized.getRefitClass());\n+        assertEquals(refit.getTimeSpent(), deserialized.getTimeSpent());\n+        assertEquals(refit.getTimeLeft(), deserialized.getTimeLeft());\n+        assertEquals(refit.isCustomJob(), deserialized.isCustomJob());\n+        assertEquals(refit.kitFound(), deserialized.kitFound());\n+        assertEquals(refit.isBeingRefurbished(), deserialized.isBeingRefurbished());\n+        assertEquals(refit.getTech(), deserialized.getTech());\n+\n+        // Check that we got all the correct old parts in the XML\n+        Set<Integer> oldUnitParts = refit.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedOldParts = deserialized.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(oldUnitParts, serializedOldParts);\n+\n+        // Check that we got all the correct new parts in the XML\n+        Set<Integer> newUnitParts = refit.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedNewParts = deserialized.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(newUnitParts, serializedNewParts);\n+\n+        // Check that we got all the shopping list entries (by name, not amazing but reasonable)\n+        List<String> shoppingList = refit.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+        List<String> serializedShoppingList = deserialized.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+\n+        // Make sure they're the same length first...\n+        assertEquals(shoppingList.size(), serializedShoppingList.size());\n+\n+        // ...then make sure they're the \"same\" by removing them one by one...\n+        for (String partName : shoppingList) {\n+            assertTrue(serializedShoppingList.remove(partName));\n+        }\n+\n+        // ...and ensuring nothing is left.\n+        assertTrue(serializedShoppingList.isEmpty());\n+\n+        // Do the same for their descriptions, which include the quantities...\n+        List<String> shoppingListDescs = Arrays.asList(refit.getShoppingListDescription());\n+        // ...except the second list needs to be mutable.\n+        List<String> serializedShoppingListDescs = new ArrayList<>(Arrays.asList(deserialized.getShoppingListDescription()));\n+\n+        assertEquals(shoppingListDescs.size(), serializedShoppingListDescs.size());\n+        for (String desc : shoppingListDescs) {\n+            assertTrue(serializedShoppingListDescs.remove(desc));\n+        }\n+\n+        assertTrue(serializedShoppingListDescs.isEmpty());\n+    }\n+\n+    @Test\n+    public void javelinJVN10Nto10ATest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        CampaignOptions mockCampaignOptions = mock(CampaignOptions.class);\n+        when(mockCampaign.getCampaignOptions()).thenReturn(mockCampaignOptions);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getJavelinJVN10N();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getJavelinJVN10A();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        //\n+        // Javelin 10N to 10A Class C refit steps (in no particular order):\n+        //     1. Remove excess SRM 6 (LT) [120 mins]\n+        //     2. Remove excess SRM 6 (RT) [120 mins]\n+        //     3. Remove SRM 6 Ammo Bin (LT) [120 mins]\n+        //     4. Remove SRM 6 Ammo Bin (RT) [120 mins]\n+        //     5. Add LRM 15 to (RT) [120 mins]\n+        //     6. Add LRM 15 Ammo Bin to (RT) [120 mins]\n+        //\n+        // Everything else is the same.\n+        //\n+\n+        // Per SO p188:\n+        //     \"A Class C kit also enables replacement of a weapon\n+        //      or item of equipment with any other, even if it is\n+        //      larger than the item(s) being replaced; for example,\n+        //      replacing an ER large laser with an LRM-10 launcher\n+        //      and ammunition.\"\n+        assertEquals(Refit.CLASS_C, refit.getRefitClass());\n+\n+        // Time?\n+        //     + 4 removals @ 120 mins ea\n+        //     + 2 adds @ 120 mins ea\n+        //     x 2 (Class C)\n+        assertEquals((120.0 * 6.0) * 2.0, refit.getActualTime(), 0.1);\n+\n+        // Cost?\n+        //    + 1 LRM 15 @ 175,000 ea\n+        //    + 1 ton LRM 15 Ammo @ 30,000 ea\n+        //    x 1.1 (Refit Kit cost, SO p188)\n+        assertEquals(Money.of(175000.0 + 30000.0).multipliedBy(1.1), refit.getCost());\n+\n+        // We're removing 2 SRM 6s and two ammo bins\n+        List<Part> removedParts = refit.getOldUnitParts();\n+        assertEquals(4, removedParts.size());\n+        assertEquals(2, removedParts.stream()\n+                .filter(p -> (p instanceof EquipmentPart) && p.getName().equals(\"SRM 6\")).count());\n+        assertEquals(2, removedParts.stream()\n+                .filter(p -> (p instanceof AmmoBin) && p.getName().equals(\"SRM 6 Ammo Bin\")).count());\n+\n+        // All of the new parts should be from the old unit\n+        List<Part> newParts = refit.getNewUnitParts();\n+        assertTrue(newParts.stream().allMatch(p -> p.getUnit().equals(oldUnit)));\n+\n+        // We need to buy one LRM 15 and one LRM 15 Ammo Bin\n+        List<Part> shoppingCart = refit.getShoppingList();\n+        assertEquals(1, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"LRM 15\")).count());\n+        assertEquals(1, shoppingCart.stream()\n+                .filter(p -> (p instanceof AmmoBin) && p.getName().equals(\"LRM 15 Ammo Bin\")).count());\n+    }\n+\n+    @Test\n+    public void testJavelinJVN10Nto10AWriteToXml() throws ParserConfigurationException, SAXException, IOException {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        when(mockCampaign.getEntities()).thenReturn(new ArrayList<>());\n+        CampaignOptions mockCampaignOptions = mock(CampaignOptions.class);\n+        when(mockCampaign.getCampaignOptions()).thenReturn(mockCampaignOptions);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+        Person mockTech = mock(Person.class);\n+        UUID techId = UUID.randomUUID();\n+        when(mockTech.getId()).thenReturn(techId);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getJavelinJVN10N();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getJavelinJVN10A();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Make sure the unit parts have an ID before we serialize them\n+        int partId = 1;\n+        for (Part part : oldUnit.getParts()) {\n+            part.setId(partId++);\n+        }\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        refit.setTech(mockTech);\n+        refit.addTimeSpent(60); // 1 hour of work!\n+\n+        // Write the Refit XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        refit.writeToXml(pw, 0);\n+\n+        // Get the Refit XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element refitElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"refit\", refitElt.getNodeName());\n+\n+        // Deserialize the refit\n+        Refit deserialized = Refit.generateInstanceFromXML(refitElt, oldUnit, new Version(\"1.0.0\"));\n+        assertNotNull(deserialized);\n+\n+        // Spot check the values\n+        assertEquals(refit.getTime(), deserialized.getTime());\n+        assertEquals(refit.getActualTime(), deserialized.getActualTime());\n+        assertEquals(refit.getCost(), deserialized.getCost());\n+        assertEquals(refit.isSameArmorType(), deserialized.isSameArmorType());\n+        assertEquals(refit.hasFailedCheck(), deserialized.hasFailedCheck());\n+        assertEquals(refit.getRefitClass(), deserialized.getRefitClass());\n+        assertEquals(refit.getTimeSpent(), deserialized.getTimeSpent());\n+        assertEquals(refit.getTimeLeft(), deserialized.getTimeLeft());\n+        assertEquals(refit.isCustomJob(), deserialized.isCustomJob());\n+        assertEquals(refit.kitFound(), deserialized.kitFound());\n+        assertEquals(refit.isBeingRefurbished(), deserialized.isBeingRefurbished());\n+        assertEquals(refit.getTech().getId(), deserialized.getTech().getId());\n+\n+        // Check that we got all the correct old parts in the XML\n+        Set<Integer> oldUnitParts = refit.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedOldParts = deserialized.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(oldUnitParts, serializedOldParts);\n+\n+        // Check that we got all the correct new parts in the XML\n+        Set<Integer> newUnitParts = refit.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedNewParts = deserialized.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(newUnitParts, serializedNewParts);\n+\n+        // Check that we got all the shopping list entries (by name, not amazing but reasonable)\n+        List<String> shoppingList = refit.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+        List<String> serializedShoppingList = deserialized.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+\n+        // Make sure they're the same length first...\n+        assertEquals(shoppingList.size(), serializedShoppingList.size());\n+\n+        // ...then make sure they're the \"same\" by removing them one by one...\n+        for (String partName : shoppingList) {\n+            assertTrue(serializedShoppingList.remove(partName));\n+        }\n+\n+        // ...and ensuring nothing is left.\n+        assertTrue(serializedShoppingList.isEmpty());\n+\n+        // Do the same for their descriptions, which include the quantities...\n+        List<String> shoppingListDescs = Arrays.asList(refit.getShoppingListDescription());\n+        // ...except the second list needs to be mutable.\n+        List<String> serializedShoppingListDescs = new ArrayList<>(Arrays.asList(deserialized.getShoppingListDescription()));\n+\n+        assertEquals(shoppingListDescs.size(), serializedShoppingListDescs.size());\n+        for (String desc : shoppingListDescs) {\n+            assertTrue(serializedShoppingListDescs.remove(desc));\n+        }\n+\n+        assertTrue(serializedShoppingListDescs.isEmpty());\n+    }\n+\n+    @Test\n+    public void fleaFLE4toFLE15Test() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        CampaignOptions mockCampaignOptions = mock(CampaignOptions.class);\n+        when(mockCampaign.getCampaignOptions()).thenReturn(mockCampaignOptions);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getFleaFLE4();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getFleaFLE15();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        //\n+        // Flea 4 to 15 Class D refit steps (in no particular order):\n+        //     1. Remove excess Large Laser (RA) [120 mins]\n+        //     2. Move Small Laser (LA) to (LT)(R) [120 mins]\n+        //     3. Move Small Laser (LA) to (RT)(R) [120 mins]\n+        //     4. Add Medium Laser (LA) [120 mins]\n+        //     5. Add Medium Laser (RA) [120 mins]\n+        //     6. Add Machine Gun (LA) [120 mins]\n+        //     7. Add Machine Gun (RA) [120 mins]\n+        //     8. Add Machine Gun Ammo Bin to (CT) [120 mins]\n+        //     9. Add 16 points of armor to 10 locations (except the HD).\n+        //        a. Add 1 point to (LA) [5 mins]\n+        //        b. Add 1 point to (RA) [5 mins]\n+        //        c. Add 2 points to (LT) [10 mins]\n+        //        d. Add 2 points to (RT) [10 mins]\n+        //        e. Add 3 points to (CT) [15 mins]\n+        //        g. Add 1 point to (LL) [5 mins]\n+        //        h. Add 1 point to (RL) [5 mins]\n+        //        i. Add 2 points to (RTL) [10 mins]\n+        //        j. Add 2 points to (RTR) [10 mins]\n+        //        k. Add 1 point to (RTC) [5 mins]\n+        //    10. Switch Flamer (CT) facing to (CT)(R) [120 mins]\n+        //\n+        // Everything else is the same.\n+        //\n+\n+        // Per SO p188:\n+        //     \"This kit permits players to install a new item\n+        //      where previously there was none...\"\n+        assertEquals(Refit.CLASS_D, refit.getRefitClass());\n+\n+        // Time?\n+        //     + 1 removal @ 120 mins ea\n+        //     + 2 moves @ 120 mins ea\n+        //     + 1 facing change @ 120 mins ea\n+        //     + 5 adds @ 120 mins ea\n+        //     + 16 armor changes @ 5 mins ea\n+        //     x 3 (Class D)\n+        assertEquals(((120.0 * 9.0) + (5.0 * 16.0)) * 3.0, refit.getActualTime(), 0.1);\n+\n+        // Cost?\n+        //    + 2 Medium Lasers @ 40,000 ea\n+        //    + 2 Machine Guns @ 5,000 ea\n+        //    + 1 ton Machine Gun Ammo @ 1,000 ea\n+        //    + 1 ton Armor (Standard) @ 10,000 ea\n+        //    x 1.1 (Refit Kit cost, SO p188)\n+        assertEquals(Money.of(40000.0 + 40000.0 + 5000.0 + 5000.0 + 1000.0 + 10000.0).multipliedBy(1.1), refit.getCost());\n+\n+        // We're removing 1 Large Laser and using existing armor in 10 locations\n+        List<Part> removedParts = refit.getOldUnitParts();\n+        assertEquals(11, removedParts.size());\n+        assertEquals(1, removedParts.stream()\n+                .filter(p -> (p instanceof EquipmentPart) && p.getName().equals(\"Large Laser\")).count());\n+        assertEquals(10, removedParts.stream()\n+                .filter(p -> (p instanceof Armor)).count());\n+\n+        // All of the new parts should be from the old unit\n+        List<Part> newParts = refit.getNewUnitParts();\n+        assertTrue(newParts.stream().allMatch(p -> p.getUnit().equals(oldUnit)));\n+\n+        // We need to buy two Medium Lasers, two Machine Guns, and Machine Gun Ammo\n+        List<Part> shoppingCart = refit.getShoppingList();\n+        assertEquals(2, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"Medium Laser\")).count());\n+        assertEquals(2, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"Machine Gun\")).count());\n+        assertEquals(1, shoppingCart.stream()\n+                .filter(p -> (p instanceof AmmoBin) && p.getName().equals(\"Machine Gun Ammo Bin\")).count());\n+\n+        // We should have 16 points of standard armor on order\n+        assertNotNull(refit.getNewArmorSupplies());\n+        assertEquals(refit.getNewArmorSupplies().getType(), EquipmentType.T_ARMOR_STANDARD);\n+        assertEquals(16, refit.getNewArmorSupplies().getAmountNeeded());\n+    }\n+\n+    @Test\n+    public void testFleaFLE4toFLE15WriteToXml() throws ParserConfigurationException, SAXException, IOException {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        when(mockCampaign.getEntities()).thenReturn(new ArrayList<>());\n+        CampaignOptions mockCampaignOptions = mock(CampaignOptions.class);\n+        when(mockCampaign.getCampaignOptions()).thenReturn(mockCampaignOptions);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+        doReturn(null).when(mockWarehouse).findSparePart(any());\n+        Person mockTech = mock(Person.class);\n+        UUID techId = UUID.randomUUID();\n+        when(mockTech.getId()).thenReturn(techId);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getFleaFLE4();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getFleaFLE15();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Make sure the unit parts have an ID before we serialize them\n+        int partId = 1;\n+        for (Part part : oldUnit.getParts()) {\n+            part.setId(partId++);\n+        }\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        refit.setTech(mockTech);\n+        refit.addTimeSpent(60); // 1 hour of work!\n+\n+        // Write the Refit XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        refit.writeToXml(pw, 0);\n+\n+        // Get the Refit XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element refitElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"refit\", refitElt.getNodeName());\n+\n+        // Deserialize the refit\n+        Refit deserialized = Refit.generateInstanceFromXML(refitElt, oldUnit, new Version(\"1.0.0\"));\n+        assertNotNull(deserialized);\n+        deserialized.reCalc();\n+\n+        // Spot check the values\n+        assertEquals(refit.getTime(), deserialized.getTime());\n+        assertEquals(refit.getActualTime(), deserialized.getActualTime());\n+        assertEquals(refit.getCost(), deserialized.getCost());\n+        assertEquals(refit.isSameArmorType(), deserialized.isSameArmorType());\n+        assertEquals(refit.hasFailedCheck(), deserialized.hasFailedCheck());\n+        assertEquals(refit.getRefitClass(), deserialized.getRefitClass());\n+        assertEquals(refit.getTimeSpent(), deserialized.getTimeSpent());\n+        assertEquals(refit.getTimeLeft(), deserialized.getTimeLeft());\n+        assertEquals(refit.isCustomJob(), deserialized.isCustomJob());\n+        assertEquals(refit.kitFound(), deserialized.kitFound());\n+        assertEquals(refit.isBeingRefurbished(), deserialized.isBeingRefurbished());\n+        assertEquals(refit.getTech().getId(), deserialized.getTech().getId());\n+\n+        // Check that we got all the correct old parts in the XML\n+        Set<Integer> oldUnitParts = refit.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedOldParts = deserialized.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(oldUnitParts, serializedOldParts);\n+\n+        // Check that we got all the correct new parts in the XML\n+        Set<Integer> newUnitParts = refit.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedNewParts = deserialized.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(newUnitParts, serializedNewParts);\n+\n+        // Check that we got all the shopping list entries (by name, not amazing but reasonable)\n+        List<String> shoppingList = refit.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+        List<String> serializedShoppingList = deserialized.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+\n+        // Make sure they're the same length first...\n+        assertEquals(shoppingList.size(), serializedShoppingList.size());\n+\n+        // ...then make sure they're the \"same\" by removing them one by one...\n+        for (String partName : shoppingList) {\n+            assertTrue(serializedShoppingList.remove(partName));\n+        }\n+\n+        // ...and ensuring nothing is left.\n+        assertTrue(serializedShoppingList.isEmpty());\n+\n+        // Do the same for their descriptions, which include the quantities...\n+        List<String> shoppingListDescs = Arrays.asList(refit.getShoppingListDescription());\n+        // ...except the second list needs to be mutable.", "originalCommit": "71f33cf6363e14bd0053bbeb35a6808a00cf120b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIxMTg2MA==", "url": "https://github.com/MegaMek/mekhq/pull/2224#discussion_r523211860", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...then make sure they're the \"same\" by removing them one by one...\n          \n          \n            \n                    // ... then make sure they're the \"same\" by removing them one by one...", "author": "Windchild292", "createdAt": "2020-11-13T20:39:24Z", "path": "MekHQ/unittests/mekhq/campaign/parts/RefitTest.java", "diffHunk": "@@ -0,0 +1,705 @@\n+/*\n+ * Copyright (C) 2020 MegaMek team\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.parts;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.Entity;\n+import megamek.common.EquipmentType;\n+import megamek.common.IPlayer;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.CampaignOptions;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.parts.equipment.AmmoBin;\n+import mekhq.campaign.parts.equipment.EquipmentPart;\n+import mekhq.campaign.parts.equipment.MissingEquipmentPart;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+import mekhq.campaign.unit.UnitTestUtilities;\n+\n+public class RefitTest {\n+    @Test\n+    public void deserializationCtor() {\n+        Refit refit = new Refit();\n+        assertNotNull(refit);\n+    }\n+\n+    @Test\n+    public void newRefitCtor() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        // Should be old parts...\n+        assertFalse(refit.getOldUnitParts().isEmpty());\n+\n+        // ...and new parts.\n+        assertFalse(refit.getNewUnitParts().isEmpty());\n+\n+        // ...and we'll need to buy some parts\n+        assertFalse(refit.getShoppingList().isEmpty());\n+    }\n+\n+    @Test\n+    public void locust1Vto1ETest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        //\n+        // Locust 1V to 1E Class D refit steps (in no particular order):\n+        //     1. Remove excess Machine Gun (LA) [120 mins]\n+        //     2. Remove excess Machine Gun (RA) [120 mins]\n+        //     3. Remove Machine Gun Ammo Bin (CT) [120 mins]\n+        //     4. Move Medium Laser (CT) to (RA) [120 mins]\n+        //     5. Add Medium Laser to (LA) [120 mins]\n+        //     6. Add Small Laser to (RA) [120 mins]\n+        //     7. Add Small Laser to (LA) [120 mins]\n+        //\n+        // Everything else is the same.\n+        //\n+\n+        // Per SO p188:\n+        //     \"This kit permits players to install a new item\n+        //      where previously there was none...\"\n+        assertEquals(Refit.CLASS_D, refit.getRefitClass());\n+\n+        // Time?\n+        //     + 3 removals @ 120 mins ea\n+        //     + 1 move @ 120 mins ea\n+        //     + 3 adds @ 120 mins ea\n+        //     x 3 (Class D)\n+        assertEquals((120.0 * 7.0) * 3.0, refit.getActualTime(), 0.1);\n+\n+        // Cost?\n+        //    + 1 Medium Laser @ 40,000 ea\n+        //    + 2 Small Lasers @ 11,250 ea\n+        //    x 1.1 (Refit Kit cost, SO p188)\n+        assertEquals(Money.of((40000 + 11250 + 11250) * 1.1), refit.getCost());\n+\n+        // We're removing 2 machine guns and an ammo bin\n+        List<Part> removedParts = refit.getOldUnitParts();\n+        assertEquals(3, removedParts.size());\n+        assertEquals(2, removedParts.stream()\n+                .filter(p -> (p instanceof EquipmentPart) && p.getName().equals(\"Machine Gun\")).count());\n+        assertEquals(1, removedParts.stream()\n+                .filter(p -> (p instanceof AmmoBin) && p.getName().equals(\"Machine Gun Ammo Bin\")).count());\n+\n+        // All of the new parts should be from the old unit\n+        List<Part> newParts = refit.getNewUnitParts();\n+        assertTrue(newParts.stream().allMatch(p -> p.getUnit().equals(oldUnit)));\n+\n+        // We need to buy one Medium Laser and two Small Lasers\n+        List<Part> shoppingCart = refit.getShoppingList();\n+        assertEquals(1, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"Medium Laser\")).count());\n+        assertEquals(2, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"Small Laser\")).count());\n+    }\n+\n+    @Test\n+    public void testLocust1Vto1EWriteToXml() throws ParserConfigurationException, SAXException, IOException {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        when(mockCampaign.getEntities()).thenReturn(new ArrayList<>());\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Make sure the unit parts have an ID before we serialize them\n+        int partId = 1;\n+        for (Part part : oldUnit.getParts()) {\n+            part.setId(partId++);\n+        }\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+\n+        // Write the Refit XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        refit.writeToXml(pw, 0);\n+\n+        // Get the Refit XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element refitElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"refit\", refitElt.getNodeName());\n+\n+        // Deserialize the refit\n+        Refit deserialized = Refit.generateInstanceFromXML(refitElt, oldUnit, new Version(\"1.0.0\"));\n+        assertNotNull(deserialized);\n+\n+        // Spot check the values\n+        assertEquals(refit.getTime(), deserialized.getTime());\n+        assertEquals(refit.getActualTime(), deserialized.getActualTime());\n+        assertEquals(refit.getCost(), deserialized.getCost());\n+        assertEquals(refit.isSameArmorType(), deserialized.isSameArmorType());\n+        assertEquals(refit.hasFailedCheck(), deserialized.hasFailedCheck());\n+        assertEquals(refit.getRefitClass(), deserialized.getRefitClass());\n+        assertEquals(refit.getTimeSpent(), deserialized.getTimeSpent());\n+        assertEquals(refit.getTimeLeft(), deserialized.getTimeLeft());\n+        assertEquals(refit.isCustomJob(), deserialized.isCustomJob());\n+        assertEquals(refit.kitFound(), deserialized.kitFound());\n+        assertEquals(refit.isBeingRefurbished(), deserialized.isBeingRefurbished());\n+        assertEquals(refit.getTech(), deserialized.getTech());\n+\n+        // Check that we got all the correct old parts in the XML\n+        Set<Integer> oldUnitParts = refit.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedOldParts = deserialized.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(oldUnitParts, serializedOldParts);\n+\n+        // Check that we got all the correct new parts in the XML\n+        Set<Integer> newUnitParts = refit.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedNewParts = deserialized.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(newUnitParts, serializedNewParts);\n+\n+        // Check that we got all the shopping list entries (by name, not amazing but reasonable)\n+        List<String> shoppingList = refit.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+        List<String> serializedShoppingList = deserialized.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+\n+        // Make sure they're the same length first...\n+        assertEquals(shoppingList.size(), serializedShoppingList.size());\n+\n+        // ...then make sure they're the \"same\" by removing them one by one...\n+        for (String partName : shoppingList) {\n+            assertTrue(serializedShoppingList.remove(partName));\n+        }\n+\n+        // ...and ensuring nothing is left.\n+        assertTrue(serializedShoppingList.isEmpty());\n+\n+        // Do the same for their descriptions, which include the quantities...\n+        List<String> shoppingListDescs = Arrays.asList(refit.getShoppingListDescription());\n+        // ...except the second list needs to be mutable.\n+        List<String> serializedShoppingListDescs = new ArrayList<>(Arrays.asList(deserialized.getShoppingListDescription()));\n+\n+        assertEquals(shoppingListDescs.size(), serializedShoppingListDescs.size());\n+        for (String desc : shoppingListDescs) {\n+            assertTrue(serializedShoppingListDescs.remove(desc));\n+        }\n+\n+        assertTrue(serializedShoppingListDescs.isEmpty());\n+    }\n+\n+    @Test\n+    public void javelinJVN10Nto10ATest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        CampaignOptions mockCampaignOptions = mock(CampaignOptions.class);\n+        when(mockCampaign.getCampaignOptions()).thenReturn(mockCampaignOptions);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getJavelinJVN10N();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getJavelinJVN10A();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        //\n+        // Javelin 10N to 10A Class C refit steps (in no particular order):\n+        //     1. Remove excess SRM 6 (LT) [120 mins]\n+        //     2. Remove excess SRM 6 (RT) [120 mins]\n+        //     3. Remove SRM 6 Ammo Bin (LT) [120 mins]\n+        //     4. Remove SRM 6 Ammo Bin (RT) [120 mins]\n+        //     5. Add LRM 15 to (RT) [120 mins]\n+        //     6. Add LRM 15 Ammo Bin to (RT) [120 mins]\n+        //\n+        // Everything else is the same.\n+        //\n+\n+        // Per SO p188:\n+        //     \"A Class C kit also enables replacement of a weapon\n+        //      or item of equipment with any other, even if it is\n+        //      larger than the item(s) being replaced; for example,\n+        //      replacing an ER large laser with an LRM-10 launcher\n+        //      and ammunition.\"\n+        assertEquals(Refit.CLASS_C, refit.getRefitClass());\n+\n+        // Time?\n+        //     + 4 removals @ 120 mins ea\n+        //     + 2 adds @ 120 mins ea\n+        //     x 2 (Class C)\n+        assertEquals((120.0 * 6.0) * 2.0, refit.getActualTime(), 0.1);\n+\n+        // Cost?\n+        //    + 1 LRM 15 @ 175,000 ea\n+        //    + 1 ton LRM 15 Ammo @ 30,000 ea\n+        //    x 1.1 (Refit Kit cost, SO p188)\n+        assertEquals(Money.of(175000.0 + 30000.0).multipliedBy(1.1), refit.getCost());\n+\n+        // We're removing 2 SRM 6s and two ammo bins\n+        List<Part> removedParts = refit.getOldUnitParts();\n+        assertEquals(4, removedParts.size());\n+        assertEquals(2, removedParts.stream()\n+                .filter(p -> (p instanceof EquipmentPart) && p.getName().equals(\"SRM 6\")).count());\n+        assertEquals(2, removedParts.stream()\n+                .filter(p -> (p instanceof AmmoBin) && p.getName().equals(\"SRM 6 Ammo Bin\")).count());\n+\n+        // All of the new parts should be from the old unit\n+        List<Part> newParts = refit.getNewUnitParts();\n+        assertTrue(newParts.stream().allMatch(p -> p.getUnit().equals(oldUnit)));\n+\n+        // We need to buy one LRM 15 and one LRM 15 Ammo Bin\n+        List<Part> shoppingCart = refit.getShoppingList();\n+        assertEquals(1, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"LRM 15\")).count());\n+        assertEquals(1, shoppingCart.stream()\n+                .filter(p -> (p instanceof AmmoBin) && p.getName().equals(\"LRM 15 Ammo Bin\")).count());\n+    }\n+\n+    @Test\n+    public void testJavelinJVN10Nto10AWriteToXml() throws ParserConfigurationException, SAXException, IOException {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        when(mockCampaign.getEntities()).thenReturn(new ArrayList<>());\n+        CampaignOptions mockCampaignOptions = mock(CampaignOptions.class);\n+        when(mockCampaign.getCampaignOptions()).thenReturn(mockCampaignOptions);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+        Person mockTech = mock(Person.class);\n+        UUID techId = UUID.randomUUID();\n+        when(mockTech.getId()).thenReturn(techId);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getJavelinJVN10N();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getJavelinJVN10A();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Make sure the unit parts have an ID before we serialize them\n+        int partId = 1;\n+        for (Part part : oldUnit.getParts()) {\n+            part.setId(partId++);\n+        }\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        refit.setTech(mockTech);\n+        refit.addTimeSpent(60); // 1 hour of work!\n+\n+        // Write the Refit XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        refit.writeToXml(pw, 0);\n+\n+        // Get the Refit XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element refitElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"refit\", refitElt.getNodeName());\n+\n+        // Deserialize the refit\n+        Refit deserialized = Refit.generateInstanceFromXML(refitElt, oldUnit, new Version(\"1.0.0\"));\n+        assertNotNull(deserialized);\n+\n+        // Spot check the values\n+        assertEquals(refit.getTime(), deserialized.getTime());\n+        assertEquals(refit.getActualTime(), deserialized.getActualTime());\n+        assertEquals(refit.getCost(), deserialized.getCost());\n+        assertEquals(refit.isSameArmorType(), deserialized.isSameArmorType());\n+        assertEquals(refit.hasFailedCheck(), deserialized.hasFailedCheck());\n+        assertEquals(refit.getRefitClass(), deserialized.getRefitClass());\n+        assertEquals(refit.getTimeSpent(), deserialized.getTimeSpent());\n+        assertEquals(refit.getTimeLeft(), deserialized.getTimeLeft());\n+        assertEquals(refit.isCustomJob(), deserialized.isCustomJob());\n+        assertEquals(refit.kitFound(), deserialized.kitFound());\n+        assertEquals(refit.isBeingRefurbished(), deserialized.isBeingRefurbished());\n+        assertEquals(refit.getTech().getId(), deserialized.getTech().getId());\n+\n+        // Check that we got all the correct old parts in the XML\n+        Set<Integer> oldUnitParts = refit.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedOldParts = deserialized.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(oldUnitParts, serializedOldParts);\n+\n+        // Check that we got all the correct new parts in the XML\n+        Set<Integer> newUnitParts = refit.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedNewParts = deserialized.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(newUnitParts, serializedNewParts);\n+\n+        // Check that we got all the shopping list entries (by name, not amazing but reasonable)\n+        List<String> shoppingList = refit.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+        List<String> serializedShoppingList = deserialized.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+\n+        // Make sure they're the same length first...\n+        assertEquals(shoppingList.size(), serializedShoppingList.size());\n+\n+        // ...then make sure they're the \"same\" by removing them one by one...\n+        for (String partName : shoppingList) {\n+            assertTrue(serializedShoppingList.remove(partName));\n+        }\n+\n+        // ...and ensuring nothing is left.\n+        assertTrue(serializedShoppingList.isEmpty());\n+\n+        // Do the same for their descriptions, which include the quantities...\n+        List<String> shoppingListDescs = Arrays.asList(refit.getShoppingListDescription());\n+        // ...except the second list needs to be mutable.\n+        List<String> serializedShoppingListDescs = new ArrayList<>(Arrays.asList(deserialized.getShoppingListDescription()));\n+\n+        assertEquals(shoppingListDescs.size(), serializedShoppingListDescs.size());\n+        for (String desc : shoppingListDescs) {\n+            assertTrue(serializedShoppingListDescs.remove(desc));\n+        }\n+\n+        assertTrue(serializedShoppingListDescs.isEmpty());\n+    }\n+\n+    @Test\n+    public void fleaFLE4toFLE15Test() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        CampaignOptions mockCampaignOptions = mock(CampaignOptions.class);\n+        when(mockCampaign.getCampaignOptions()).thenReturn(mockCampaignOptions);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getFleaFLE4();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getFleaFLE15();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        //\n+        // Flea 4 to 15 Class D refit steps (in no particular order):\n+        //     1. Remove excess Large Laser (RA) [120 mins]\n+        //     2. Move Small Laser (LA) to (LT)(R) [120 mins]\n+        //     3. Move Small Laser (LA) to (RT)(R) [120 mins]\n+        //     4. Add Medium Laser (LA) [120 mins]\n+        //     5. Add Medium Laser (RA) [120 mins]\n+        //     6. Add Machine Gun (LA) [120 mins]\n+        //     7. Add Machine Gun (RA) [120 mins]\n+        //     8. Add Machine Gun Ammo Bin to (CT) [120 mins]\n+        //     9. Add 16 points of armor to 10 locations (except the HD).\n+        //        a. Add 1 point to (LA) [5 mins]\n+        //        b. Add 1 point to (RA) [5 mins]\n+        //        c. Add 2 points to (LT) [10 mins]\n+        //        d. Add 2 points to (RT) [10 mins]\n+        //        e. Add 3 points to (CT) [15 mins]\n+        //        g. Add 1 point to (LL) [5 mins]\n+        //        h. Add 1 point to (RL) [5 mins]\n+        //        i. Add 2 points to (RTL) [10 mins]\n+        //        j. Add 2 points to (RTR) [10 mins]\n+        //        k. Add 1 point to (RTC) [5 mins]\n+        //    10. Switch Flamer (CT) facing to (CT)(R) [120 mins]\n+        //\n+        // Everything else is the same.\n+        //\n+\n+        // Per SO p188:\n+        //     \"This kit permits players to install a new item\n+        //      where previously there was none...\"\n+        assertEquals(Refit.CLASS_D, refit.getRefitClass());\n+\n+        // Time?\n+        //     + 1 removal @ 120 mins ea\n+        //     + 2 moves @ 120 mins ea\n+        //     + 1 facing change @ 120 mins ea\n+        //     + 5 adds @ 120 mins ea\n+        //     + 16 armor changes @ 5 mins ea\n+        //     x 3 (Class D)\n+        assertEquals(((120.0 * 9.0) + (5.0 * 16.0)) * 3.0, refit.getActualTime(), 0.1);\n+\n+        // Cost?\n+        //    + 2 Medium Lasers @ 40,000 ea\n+        //    + 2 Machine Guns @ 5,000 ea\n+        //    + 1 ton Machine Gun Ammo @ 1,000 ea\n+        //    + 1 ton Armor (Standard) @ 10,000 ea\n+        //    x 1.1 (Refit Kit cost, SO p188)\n+        assertEquals(Money.of(40000.0 + 40000.0 + 5000.0 + 5000.0 + 1000.0 + 10000.0).multipliedBy(1.1), refit.getCost());\n+\n+        // We're removing 1 Large Laser and using existing armor in 10 locations\n+        List<Part> removedParts = refit.getOldUnitParts();\n+        assertEquals(11, removedParts.size());\n+        assertEquals(1, removedParts.stream()\n+                .filter(p -> (p instanceof EquipmentPart) && p.getName().equals(\"Large Laser\")).count());\n+        assertEquals(10, removedParts.stream()\n+                .filter(p -> (p instanceof Armor)).count());\n+\n+        // All of the new parts should be from the old unit\n+        List<Part> newParts = refit.getNewUnitParts();\n+        assertTrue(newParts.stream().allMatch(p -> p.getUnit().equals(oldUnit)));\n+\n+        // We need to buy two Medium Lasers, two Machine Guns, and Machine Gun Ammo\n+        List<Part> shoppingCart = refit.getShoppingList();\n+        assertEquals(2, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"Medium Laser\")).count());\n+        assertEquals(2, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"Machine Gun\")).count());\n+        assertEquals(1, shoppingCart.stream()\n+                .filter(p -> (p instanceof AmmoBin) && p.getName().equals(\"Machine Gun Ammo Bin\")).count());\n+\n+        // We should have 16 points of standard armor on order\n+        assertNotNull(refit.getNewArmorSupplies());\n+        assertEquals(refit.getNewArmorSupplies().getType(), EquipmentType.T_ARMOR_STANDARD);\n+        assertEquals(16, refit.getNewArmorSupplies().getAmountNeeded());\n+    }\n+\n+    @Test\n+    public void testFleaFLE4toFLE15WriteToXml() throws ParserConfigurationException, SAXException, IOException {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        when(mockCampaign.getEntities()).thenReturn(new ArrayList<>());\n+        CampaignOptions mockCampaignOptions = mock(CampaignOptions.class);\n+        when(mockCampaign.getCampaignOptions()).thenReturn(mockCampaignOptions);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+        doReturn(null).when(mockWarehouse).findSparePart(any());\n+        Person mockTech = mock(Person.class);\n+        UUID techId = UUID.randomUUID();\n+        when(mockTech.getId()).thenReturn(techId);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getFleaFLE4();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getFleaFLE15();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Make sure the unit parts have an ID before we serialize them\n+        int partId = 1;\n+        for (Part part : oldUnit.getParts()) {\n+            part.setId(partId++);\n+        }\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        refit.setTech(mockTech);\n+        refit.addTimeSpent(60); // 1 hour of work!\n+\n+        // Write the Refit XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        refit.writeToXml(pw, 0);\n+\n+        // Get the Refit XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element refitElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"refit\", refitElt.getNodeName());\n+\n+        // Deserialize the refit\n+        Refit deserialized = Refit.generateInstanceFromXML(refitElt, oldUnit, new Version(\"1.0.0\"));\n+        assertNotNull(deserialized);\n+        deserialized.reCalc();\n+\n+        // Spot check the values\n+        assertEquals(refit.getTime(), deserialized.getTime());\n+        assertEquals(refit.getActualTime(), deserialized.getActualTime());\n+        assertEquals(refit.getCost(), deserialized.getCost());\n+        assertEquals(refit.isSameArmorType(), deserialized.isSameArmorType());\n+        assertEquals(refit.hasFailedCheck(), deserialized.hasFailedCheck());\n+        assertEquals(refit.getRefitClass(), deserialized.getRefitClass());\n+        assertEquals(refit.getTimeSpent(), deserialized.getTimeSpent());\n+        assertEquals(refit.getTimeLeft(), deserialized.getTimeLeft());\n+        assertEquals(refit.isCustomJob(), deserialized.isCustomJob());\n+        assertEquals(refit.kitFound(), deserialized.kitFound());\n+        assertEquals(refit.isBeingRefurbished(), deserialized.isBeingRefurbished());\n+        assertEquals(refit.getTech().getId(), deserialized.getTech().getId());\n+\n+        // Check that we got all the correct old parts in the XML\n+        Set<Integer> oldUnitParts = refit.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedOldParts = deserialized.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(oldUnitParts, serializedOldParts);\n+\n+        // Check that we got all the correct new parts in the XML\n+        Set<Integer> newUnitParts = refit.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedNewParts = deserialized.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(newUnitParts, serializedNewParts);\n+\n+        // Check that we got all the shopping list entries (by name, not amazing but reasonable)\n+        List<String> shoppingList = refit.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+        List<String> serializedShoppingList = deserialized.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+\n+        // Make sure they're the same length first...\n+        assertEquals(shoppingList.size(), serializedShoppingList.size());\n+\n+        // ...then make sure they're the \"same\" by removing them one by one...", "originalCommit": "71f33cf6363e14bd0053bbeb35a6808a00cf120b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIxMTk0MQ==", "url": "https://github.com/MegaMek/mekhq/pull/2224#discussion_r523211941", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // ...and ensuring nothing is left.\n          \n          \n            \n                    // ... and ensuring nothing is left.", "author": "Windchild292", "createdAt": "2020-11-13T20:39:29Z", "path": "MekHQ/unittests/mekhq/campaign/parts/RefitTest.java", "diffHunk": "@@ -0,0 +1,705 @@\n+/*\n+ * Copyright (C) 2020 MegaMek team\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign.parts;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import org.junit.Test;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.xml.sax.SAXException;\n+\n+import megamek.common.Entity;\n+import megamek.common.EquipmentType;\n+import megamek.common.IPlayer;\n+import mekhq.MekHqXmlUtil;\n+import mekhq.Version;\n+import mekhq.campaign.Campaign;\n+import mekhq.campaign.CampaignOptions;\n+import mekhq.campaign.Warehouse;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.parts.equipment.AmmoBin;\n+import mekhq.campaign.parts.equipment.EquipmentPart;\n+import mekhq.campaign.parts.equipment.MissingEquipmentPart;\n+import mekhq.campaign.personnel.Person;\n+import mekhq.campaign.unit.Unit;\n+import mekhq.campaign.unit.UnitTestUtilities;\n+\n+public class RefitTest {\n+    @Test\n+    public void deserializationCtor() {\n+        Refit refit = new Refit();\n+        assertNotNull(refit);\n+    }\n+\n+    @Test\n+    public void newRefitCtor() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        // Should be old parts...\n+        assertFalse(refit.getOldUnitParts().isEmpty());\n+\n+        // ...and new parts.\n+        assertFalse(refit.getNewUnitParts().isEmpty());\n+\n+        // ...and we'll need to buy some parts\n+        assertFalse(refit.getShoppingList().isEmpty());\n+    }\n+\n+    @Test\n+    public void locust1Vto1ETest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        //\n+        // Locust 1V to 1E Class D refit steps (in no particular order):\n+        //     1. Remove excess Machine Gun (LA) [120 mins]\n+        //     2. Remove excess Machine Gun (RA) [120 mins]\n+        //     3. Remove Machine Gun Ammo Bin (CT) [120 mins]\n+        //     4. Move Medium Laser (CT) to (RA) [120 mins]\n+        //     5. Add Medium Laser to (LA) [120 mins]\n+        //     6. Add Small Laser to (RA) [120 mins]\n+        //     7. Add Small Laser to (LA) [120 mins]\n+        //\n+        // Everything else is the same.\n+        //\n+\n+        // Per SO p188:\n+        //     \"This kit permits players to install a new item\n+        //      where previously there was none...\"\n+        assertEquals(Refit.CLASS_D, refit.getRefitClass());\n+\n+        // Time?\n+        //     + 3 removals @ 120 mins ea\n+        //     + 1 move @ 120 mins ea\n+        //     + 3 adds @ 120 mins ea\n+        //     x 3 (Class D)\n+        assertEquals((120.0 * 7.0) * 3.0, refit.getActualTime(), 0.1);\n+\n+        // Cost?\n+        //    + 1 Medium Laser @ 40,000 ea\n+        //    + 2 Small Lasers @ 11,250 ea\n+        //    x 1.1 (Refit Kit cost, SO p188)\n+        assertEquals(Money.of((40000 + 11250 + 11250) * 1.1), refit.getCost());\n+\n+        // We're removing 2 machine guns and an ammo bin\n+        List<Part> removedParts = refit.getOldUnitParts();\n+        assertEquals(3, removedParts.size());\n+        assertEquals(2, removedParts.stream()\n+                .filter(p -> (p instanceof EquipmentPart) && p.getName().equals(\"Machine Gun\")).count());\n+        assertEquals(1, removedParts.stream()\n+                .filter(p -> (p instanceof AmmoBin) && p.getName().equals(\"Machine Gun Ammo Bin\")).count());\n+\n+        // All of the new parts should be from the old unit\n+        List<Part> newParts = refit.getNewUnitParts();\n+        assertTrue(newParts.stream().allMatch(p -> p.getUnit().equals(oldUnit)));\n+\n+        // We need to buy one Medium Laser and two Small Lasers\n+        List<Part> shoppingCart = refit.getShoppingList();\n+        assertEquals(1, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"Medium Laser\")).count());\n+        assertEquals(2, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"Small Laser\")).count());\n+    }\n+\n+    @Test\n+    public void testLocust1Vto1EWriteToXml() throws ParserConfigurationException, SAXException, IOException {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        when(mockCampaign.getEntities()).thenReturn(new ArrayList<>());\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getLocustLCT1V();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getLocustLCT1E();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Make sure the unit parts have an ID before we serialize them\n+        int partId = 1;\n+        for (Part part : oldUnit.getParts()) {\n+            part.setId(partId++);\n+        }\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+\n+        // Write the Refit XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        refit.writeToXml(pw, 0);\n+\n+        // Get the Refit XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element refitElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"refit\", refitElt.getNodeName());\n+\n+        // Deserialize the refit\n+        Refit deserialized = Refit.generateInstanceFromXML(refitElt, oldUnit, new Version(\"1.0.0\"));\n+        assertNotNull(deserialized);\n+\n+        // Spot check the values\n+        assertEquals(refit.getTime(), deserialized.getTime());\n+        assertEquals(refit.getActualTime(), deserialized.getActualTime());\n+        assertEquals(refit.getCost(), deserialized.getCost());\n+        assertEquals(refit.isSameArmorType(), deserialized.isSameArmorType());\n+        assertEquals(refit.hasFailedCheck(), deserialized.hasFailedCheck());\n+        assertEquals(refit.getRefitClass(), deserialized.getRefitClass());\n+        assertEquals(refit.getTimeSpent(), deserialized.getTimeSpent());\n+        assertEquals(refit.getTimeLeft(), deserialized.getTimeLeft());\n+        assertEquals(refit.isCustomJob(), deserialized.isCustomJob());\n+        assertEquals(refit.kitFound(), deserialized.kitFound());\n+        assertEquals(refit.isBeingRefurbished(), deserialized.isBeingRefurbished());\n+        assertEquals(refit.getTech(), deserialized.getTech());\n+\n+        // Check that we got all the correct old parts in the XML\n+        Set<Integer> oldUnitParts = refit.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedOldParts = deserialized.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(oldUnitParts, serializedOldParts);\n+\n+        // Check that we got all the correct new parts in the XML\n+        Set<Integer> newUnitParts = refit.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedNewParts = deserialized.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(newUnitParts, serializedNewParts);\n+\n+        // Check that we got all the shopping list entries (by name, not amazing but reasonable)\n+        List<String> shoppingList = refit.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+        List<String> serializedShoppingList = deserialized.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+\n+        // Make sure they're the same length first...\n+        assertEquals(shoppingList.size(), serializedShoppingList.size());\n+\n+        // ...then make sure they're the \"same\" by removing them one by one...\n+        for (String partName : shoppingList) {\n+            assertTrue(serializedShoppingList.remove(partName));\n+        }\n+\n+        // ...and ensuring nothing is left.\n+        assertTrue(serializedShoppingList.isEmpty());\n+\n+        // Do the same for their descriptions, which include the quantities...\n+        List<String> shoppingListDescs = Arrays.asList(refit.getShoppingListDescription());\n+        // ...except the second list needs to be mutable.\n+        List<String> serializedShoppingListDescs = new ArrayList<>(Arrays.asList(deserialized.getShoppingListDescription()));\n+\n+        assertEquals(shoppingListDescs.size(), serializedShoppingListDescs.size());\n+        for (String desc : shoppingListDescs) {\n+            assertTrue(serializedShoppingListDescs.remove(desc));\n+        }\n+\n+        assertTrue(serializedShoppingListDescs.isEmpty());\n+    }\n+\n+    @Test\n+    public void javelinJVN10Nto10ATest() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        CampaignOptions mockCampaignOptions = mock(CampaignOptions.class);\n+        when(mockCampaign.getCampaignOptions()).thenReturn(mockCampaignOptions);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getJavelinJVN10N();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getJavelinJVN10A();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        //\n+        // Javelin 10N to 10A Class C refit steps (in no particular order):\n+        //     1. Remove excess SRM 6 (LT) [120 mins]\n+        //     2. Remove excess SRM 6 (RT) [120 mins]\n+        //     3. Remove SRM 6 Ammo Bin (LT) [120 mins]\n+        //     4. Remove SRM 6 Ammo Bin (RT) [120 mins]\n+        //     5. Add LRM 15 to (RT) [120 mins]\n+        //     6. Add LRM 15 Ammo Bin to (RT) [120 mins]\n+        //\n+        // Everything else is the same.\n+        //\n+\n+        // Per SO p188:\n+        //     \"A Class C kit also enables replacement of a weapon\n+        //      or item of equipment with any other, even if it is\n+        //      larger than the item(s) being replaced; for example,\n+        //      replacing an ER large laser with an LRM-10 launcher\n+        //      and ammunition.\"\n+        assertEquals(Refit.CLASS_C, refit.getRefitClass());\n+\n+        // Time?\n+        //     + 4 removals @ 120 mins ea\n+        //     + 2 adds @ 120 mins ea\n+        //     x 2 (Class C)\n+        assertEquals((120.0 * 6.0) * 2.0, refit.getActualTime(), 0.1);\n+\n+        // Cost?\n+        //    + 1 LRM 15 @ 175,000 ea\n+        //    + 1 ton LRM 15 Ammo @ 30,000 ea\n+        //    x 1.1 (Refit Kit cost, SO p188)\n+        assertEquals(Money.of(175000.0 + 30000.0).multipliedBy(1.1), refit.getCost());\n+\n+        // We're removing 2 SRM 6s and two ammo bins\n+        List<Part> removedParts = refit.getOldUnitParts();\n+        assertEquals(4, removedParts.size());\n+        assertEquals(2, removedParts.stream()\n+                .filter(p -> (p instanceof EquipmentPart) && p.getName().equals(\"SRM 6\")).count());\n+        assertEquals(2, removedParts.stream()\n+                .filter(p -> (p instanceof AmmoBin) && p.getName().equals(\"SRM 6 Ammo Bin\")).count());\n+\n+        // All of the new parts should be from the old unit\n+        List<Part> newParts = refit.getNewUnitParts();\n+        assertTrue(newParts.stream().allMatch(p -> p.getUnit().equals(oldUnit)));\n+\n+        // We need to buy one LRM 15 and one LRM 15 Ammo Bin\n+        List<Part> shoppingCart = refit.getShoppingList();\n+        assertEquals(1, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"LRM 15\")).count());\n+        assertEquals(1, shoppingCart.stream()\n+                .filter(p -> (p instanceof AmmoBin) && p.getName().equals(\"LRM 15 Ammo Bin\")).count());\n+    }\n+\n+    @Test\n+    public void testJavelinJVN10Nto10AWriteToXml() throws ParserConfigurationException, SAXException, IOException {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        when(mockCampaign.getEntities()).thenReturn(new ArrayList<>());\n+        CampaignOptions mockCampaignOptions = mock(CampaignOptions.class);\n+        when(mockCampaign.getCampaignOptions()).thenReturn(mockCampaignOptions);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+        Person mockTech = mock(Person.class);\n+        UUID techId = UUID.randomUUID();\n+        when(mockTech.getId()).thenReturn(techId);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getJavelinJVN10N();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getJavelinJVN10A();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Make sure the unit parts have an ID before we serialize them\n+        int partId = 1;\n+        for (Part part : oldUnit.getParts()) {\n+            part.setId(partId++);\n+        }\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        refit.setTech(mockTech);\n+        refit.addTimeSpent(60); // 1 hour of work!\n+\n+        // Write the Refit XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        refit.writeToXml(pw, 0);\n+\n+        // Get the Refit XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element refitElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"refit\", refitElt.getNodeName());\n+\n+        // Deserialize the refit\n+        Refit deserialized = Refit.generateInstanceFromXML(refitElt, oldUnit, new Version(\"1.0.0\"));\n+        assertNotNull(deserialized);\n+\n+        // Spot check the values\n+        assertEquals(refit.getTime(), deserialized.getTime());\n+        assertEquals(refit.getActualTime(), deserialized.getActualTime());\n+        assertEquals(refit.getCost(), deserialized.getCost());\n+        assertEquals(refit.isSameArmorType(), deserialized.isSameArmorType());\n+        assertEquals(refit.hasFailedCheck(), deserialized.hasFailedCheck());\n+        assertEquals(refit.getRefitClass(), deserialized.getRefitClass());\n+        assertEquals(refit.getTimeSpent(), deserialized.getTimeSpent());\n+        assertEquals(refit.getTimeLeft(), deserialized.getTimeLeft());\n+        assertEquals(refit.isCustomJob(), deserialized.isCustomJob());\n+        assertEquals(refit.kitFound(), deserialized.kitFound());\n+        assertEquals(refit.isBeingRefurbished(), deserialized.isBeingRefurbished());\n+        assertEquals(refit.getTech().getId(), deserialized.getTech().getId());\n+\n+        // Check that we got all the correct old parts in the XML\n+        Set<Integer> oldUnitParts = refit.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedOldParts = deserialized.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(oldUnitParts, serializedOldParts);\n+\n+        // Check that we got all the correct new parts in the XML\n+        Set<Integer> newUnitParts = refit.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedNewParts = deserialized.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(newUnitParts, serializedNewParts);\n+\n+        // Check that we got all the shopping list entries (by name, not amazing but reasonable)\n+        List<String> shoppingList = refit.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+        List<String> serializedShoppingList = deserialized.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+\n+        // Make sure they're the same length first...\n+        assertEquals(shoppingList.size(), serializedShoppingList.size());\n+\n+        // ...then make sure they're the \"same\" by removing them one by one...\n+        for (String partName : shoppingList) {\n+            assertTrue(serializedShoppingList.remove(partName));\n+        }\n+\n+        // ...and ensuring nothing is left.\n+        assertTrue(serializedShoppingList.isEmpty());\n+\n+        // Do the same for their descriptions, which include the quantities...\n+        List<String> shoppingListDescs = Arrays.asList(refit.getShoppingListDescription());\n+        // ...except the second list needs to be mutable.\n+        List<String> serializedShoppingListDescs = new ArrayList<>(Arrays.asList(deserialized.getShoppingListDescription()));\n+\n+        assertEquals(shoppingListDescs.size(), serializedShoppingListDescs.size());\n+        for (String desc : shoppingListDescs) {\n+            assertTrue(serializedShoppingListDescs.remove(desc));\n+        }\n+\n+        assertTrue(serializedShoppingListDescs.isEmpty());\n+    }\n+\n+    @Test\n+    public void fleaFLE4toFLE15Test() {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        CampaignOptions mockCampaignOptions = mock(CampaignOptions.class);\n+        when(mockCampaign.getCampaignOptions()).thenReturn(mockCampaignOptions);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getFleaFLE4();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getFleaFLE15();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        assertEquals(mockCampaign, refit.getCampaign());\n+\n+        //\n+        // Flea 4 to 15 Class D refit steps (in no particular order):\n+        //     1. Remove excess Large Laser (RA) [120 mins]\n+        //     2. Move Small Laser (LA) to (LT)(R) [120 mins]\n+        //     3. Move Small Laser (LA) to (RT)(R) [120 mins]\n+        //     4. Add Medium Laser (LA) [120 mins]\n+        //     5. Add Medium Laser (RA) [120 mins]\n+        //     6. Add Machine Gun (LA) [120 mins]\n+        //     7. Add Machine Gun (RA) [120 mins]\n+        //     8. Add Machine Gun Ammo Bin to (CT) [120 mins]\n+        //     9. Add 16 points of armor to 10 locations (except the HD).\n+        //        a. Add 1 point to (LA) [5 mins]\n+        //        b. Add 1 point to (RA) [5 mins]\n+        //        c. Add 2 points to (LT) [10 mins]\n+        //        d. Add 2 points to (RT) [10 mins]\n+        //        e. Add 3 points to (CT) [15 mins]\n+        //        g. Add 1 point to (LL) [5 mins]\n+        //        h. Add 1 point to (RL) [5 mins]\n+        //        i. Add 2 points to (RTL) [10 mins]\n+        //        j. Add 2 points to (RTR) [10 mins]\n+        //        k. Add 1 point to (RTC) [5 mins]\n+        //    10. Switch Flamer (CT) facing to (CT)(R) [120 mins]\n+        //\n+        // Everything else is the same.\n+        //\n+\n+        // Per SO p188:\n+        //     \"This kit permits players to install a new item\n+        //      where previously there was none...\"\n+        assertEquals(Refit.CLASS_D, refit.getRefitClass());\n+\n+        // Time?\n+        //     + 1 removal @ 120 mins ea\n+        //     + 2 moves @ 120 mins ea\n+        //     + 1 facing change @ 120 mins ea\n+        //     + 5 adds @ 120 mins ea\n+        //     + 16 armor changes @ 5 mins ea\n+        //     x 3 (Class D)\n+        assertEquals(((120.0 * 9.0) + (5.0 * 16.0)) * 3.0, refit.getActualTime(), 0.1);\n+\n+        // Cost?\n+        //    + 2 Medium Lasers @ 40,000 ea\n+        //    + 2 Machine Guns @ 5,000 ea\n+        //    + 1 ton Machine Gun Ammo @ 1,000 ea\n+        //    + 1 ton Armor (Standard) @ 10,000 ea\n+        //    x 1.1 (Refit Kit cost, SO p188)\n+        assertEquals(Money.of(40000.0 + 40000.0 + 5000.0 + 5000.0 + 1000.0 + 10000.0).multipliedBy(1.1), refit.getCost());\n+\n+        // We're removing 1 Large Laser and using existing armor in 10 locations\n+        List<Part> removedParts = refit.getOldUnitParts();\n+        assertEquals(11, removedParts.size());\n+        assertEquals(1, removedParts.stream()\n+                .filter(p -> (p instanceof EquipmentPart) && p.getName().equals(\"Large Laser\")).count());\n+        assertEquals(10, removedParts.stream()\n+                .filter(p -> (p instanceof Armor)).count());\n+\n+        // All of the new parts should be from the old unit\n+        List<Part> newParts = refit.getNewUnitParts();\n+        assertTrue(newParts.stream().allMatch(p -> p.getUnit().equals(oldUnit)));\n+\n+        // We need to buy two Medium Lasers, two Machine Guns, and Machine Gun Ammo\n+        List<Part> shoppingCart = refit.getShoppingList();\n+        assertEquals(2, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"Medium Laser\")).count());\n+        assertEquals(2, shoppingCart.stream()\n+                .filter(p -> (p instanceof MissingEquipmentPart) && p.getName().equals(\"Machine Gun\")).count());\n+        assertEquals(1, shoppingCart.stream()\n+                .filter(p -> (p instanceof AmmoBin) && p.getName().equals(\"Machine Gun Ammo Bin\")).count());\n+\n+        // We should have 16 points of standard armor on order\n+        assertNotNull(refit.getNewArmorSupplies());\n+        assertEquals(refit.getNewArmorSupplies().getType(), EquipmentType.T_ARMOR_STANDARD);\n+        assertEquals(16, refit.getNewArmorSupplies().getAmountNeeded());\n+    }\n+\n+    @Test\n+    public void testFleaFLE4toFLE15WriteToXml() throws ParserConfigurationException, SAXException, IOException {\n+        Campaign mockCampaign = mock(Campaign.class);\n+        when(mockCampaign.getEntities()).thenReturn(new ArrayList<>());\n+        CampaignOptions mockCampaignOptions = mock(CampaignOptions.class);\n+        when(mockCampaign.getCampaignOptions()).thenReturn(mockCampaignOptions);\n+        Warehouse mockWarehouse = mock(Warehouse.class);\n+        when(mockCampaign.getWarehouse()).thenReturn(mockWarehouse);\n+        doReturn(null).when(mockWarehouse).findSparePart(any());\n+        Person mockTech = mock(Person.class);\n+        UUID techId = UUID.randomUUID();\n+        when(mockTech.getId()).thenReturn(techId);\n+\n+        // Create the original entity backing the unit\n+        Entity oldEntity = UnitTestUtilities.getFleaFLE4();\n+        IPlayer mockPlayer = mock(IPlayer.class);\n+        when(mockPlayer.getName()).thenReturn(\"Test Player\");\n+        oldEntity.setOwner(mockPlayer);\n+\n+        // Create the entity we're going to refit to\n+        Entity newEntity = UnitTestUtilities.getFleaFLE15();\n+\n+        // Create the unit which will be refit\n+        Unit oldUnit = new Unit(oldEntity, mockCampaign);\n+        oldUnit.setId(UUID.randomUUID());\n+        oldUnit.initializeParts(false);\n+\n+        // Make sure the unit parts have an ID before we serialize them\n+        int partId = 1;\n+        for (Part part : oldUnit.getParts()) {\n+            part.setId(partId++);\n+        }\n+\n+        // Create the Refit\n+        Refit refit = new Refit(oldUnit, newEntity, false, false);\n+        refit.setTech(mockTech);\n+        refit.addTimeSpent(60); // 1 hour of work!\n+\n+        // Write the Refit XML\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw);\n+        refit.writeToXml(pw, 0);\n+\n+        // Get the Refit XML\n+        String xml = sw.toString();\n+        assertFalse(xml.trim().isEmpty());\n+\n+        // Using factory get an instance of document builder\n+        DocumentBuilder db = MekHqXmlUtil.newSafeDocumentBuilder();\n+\n+        // Parse using builder to get DOM representation of the XML file\n+        Document xmlDoc = db.parse(new ByteArrayInputStream(xml.getBytes()));\n+\n+        Element refitElt = xmlDoc.getDocumentElement();\n+        assertEquals(\"refit\", refitElt.getNodeName());\n+\n+        // Deserialize the refit\n+        Refit deserialized = Refit.generateInstanceFromXML(refitElt, oldUnit, new Version(\"1.0.0\"));\n+        assertNotNull(deserialized);\n+        deserialized.reCalc();\n+\n+        // Spot check the values\n+        assertEquals(refit.getTime(), deserialized.getTime());\n+        assertEquals(refit.getActualTime(), deserialized.getActualTime());\n+        assertEquals(refit.getCost(), deserialized.getCost());\n+        assertEquals(refit.isSameArmorType(), deserialized.isSameArmorType());\n+        assertEquals(refit.hasFailedCheck(), deserialized.hasFailedCheck());\n+        assertEquals(refit.getRefitClass(), deserialized.getRefitClass());\n+        assertEquals(refit.getTimeSpent(), deserialized.getTimeSpent());\n+        assertEquals(refit.getTimeLeft(), deserialized.getTimeLeft());\n+        assertEquals(refit.isCustomJob(), deserialized.isCustomJob());\n+        assertEquals(refit.kitFound(), deserialized.kitFound());\n+        assertEquals(refit.isBeingRefurbished(), deserialized.isBeingRefurbished());\n+        assertEquals(refit.getTech().getId(), deserialized.getTech().getId());\n+\n+        // Check that we got all the correct old parts in the XML\n+        Set<Integer> oldUnitParts = refit.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedOldParts = deserialized.getOldUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(oldUnitParts, serializedOldParts);\n+\n+        // Check that we got all the correct new parts in the XML\n+        Set<Integer> newUnitParts = refit.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        Set<Integer> serializedNewParts = deserialized.getNewUnitParts()\n+                .stream().map(p -> p.getId()).collect(Collectors.toSet());\n+        assertEquals(newUnitParts, serializedNewParts);\n+\n+        // Check that we got all the shopping list entries (by name, not amazing but reasonable)\n+        List<String> shoppingList = refit.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+        List<String> serializedShoppingList = deserialized.getShoppingList()\n+                .stream().map(p -> p.getName()).collect(Collectors.toList());\n+\n+        // Make sure they're the same length first...\n+        assertEquals(shoppingList.size(), serializedShoppingList.size());\n+\n+        // ...then make sure they're the \"same\" by removing them one by one...\n+        for (String partName : shoppingList) {\n+            assertTrue(serializedShoppingList.remove(partName));\n+        }\n+\n+        // ...and ensuring nothing is left.", "originalCommit": "71f33cf6363e14bd0053bbeb35a6808a00cf120b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "579e17e870936d973e098d13adb38774aca5eb84", "url": "https://github.com/MegaMek/mekhq/commit/579e17e870936d973e098d13adb38774aca5eb84", "message": "Apply suggestions from code review\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>", "committedDate": "2020-11-14T21:35:39Z", "type": "commit"}]}