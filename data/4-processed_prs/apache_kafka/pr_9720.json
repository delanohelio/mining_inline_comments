{"pr_number": 9720, "pr_title": "KAFKA-10555: Improve client state machine", "pr_createdAt": "2020-12-09T20:52:06Z", "pr_url": "https://github.com/apache/kafka/pull/9720", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4MzczNw==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r540483737", "bodyText": "This will not be needed with the new error definition", "author": "wcarlson5", "createdAt": "2020-12-10T20:44:14Z", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -532,22 +537,6 @@ public void setGlobalStateRestoreListener(final StateRestoreListener globalState\n             this.threadStatesLock = new Object();\n         }\n \n-        /**\n-         * If all threads are dead set to ERROR\n-         */\n-        private void maybeSetError() {", "originalCommit": "aed6ce1b8bfd42f0905f44352937cfdc54e29de0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4NDM0MQ==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r540484341", "bodyText": "we will be doing the same thing but closing the client for now. Maybe a replace globalThread will be added later", "author": "wcarlson5", "createdAt": "2020-12-10T20:45:13Z", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -594,9 +581,8 @@ public synchronized void onChange(final Thread thread,\n                     if (newState == GlobalStreamThread.State.RUNNING) {\n                         maybeSetRunning();\n                     } else if (newState == GlobalStreamThread.State.DEAD) {\n-                        if (setState(State.ERROR)) {", "originalCommit": "aed6ce1b8bfd42f0905f44352937cfdc54e29de0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4NjA5OA==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r540486098", "bodyText": "We want to make close() idempotent and not throw an exception but we will log a warning, but only for close so that is why these logs are not in the setState() method.", "author": "wcarlson5", "createdAt": "2020-12-10T20:48:17Z", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -1142,11 +1128,21 @@ private Thread shutdownHelper(final boolean error) {\n             metrics.close();\n             if (!error) {\n                 setState(State.NOT_RUNNING);\n+            } else {\n+                setState(State.ERROR);\n             }\n         }, \"kafka-streams-close-thread\");\n     }\n \n     private boolean close(final long timeoutMs) {\n+        if (state == State.ERROR) {", "originalCommit": "aed6ce1b8bfd42f0905f44352937cfdc54e29de0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4NjM5OA==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r540486398", "bodyText": "This will let Streams shutdown uncleanly when in EOS mode", "author": "wcarlson5", "createdAt": "2020-12-10T20:48:50Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -546,7 +546,7 @@ public void run() {\n      * @throws IllegalStateException If store gets registered after initialized is already finished\n      * @throws StreamsException      if the store's change log does not contain the partition\n      */\n-    void runLoop() {\n+    boolean runLoop() {", "originalCommit": "aed6ce1b8bfd42f0905f44352937cfdc54e29de0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4NjU1OQ==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r540486559", "bodyText": "This test is for the functionality we are removing", "author": "wcarlson5", "createdAt": "2020-12-10T20:49:10Z", "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -418,70 +418,6 @@ public void stateShouldTransitToRunningIfNonDeadThreadsBackToRunning() throws In\n         Assert.assertEquals(KafkaStreams.State.NOT_RUNNING, streams.state());\n     }\n \n-    @Test", "originalCommit": "aed6ce1b8bfd42f0905f44352937cfdc54e29de0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4OTk5Nw==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r540489997", "bodyText": "removing stream threads does not put the client in error anymore. The global does", "author": "wcarlson5", "createdAt": "2020-12-10T20:55:09Z", "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -625,8 +561,7 @@ public void shouldNotAddThreadWhenError() {\n         final KafkaStreams streams = new KafkaStreams(getBuilderWithSource().build(), props, supplier, time);\n         final int oldSize = streams.threads.size();\n         streams.start();\n-        streamThreadOne.shutdown();\n-        streamThreadTwo.shutdown();\n+        globalStreamThread.shutdown();", "originalCommit": "aed6ce1b8bfd42f0905f44352937cfdc54e29de0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ5NDE3NQ==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r540494175", "bodyText": "There is no transition to Error here anymore", "author": "wcarlson5", "createdAt": "2020-12-10T21:02:27Z", "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -524,9 +460,6 @@ public void testStateThreadClose() throws Exception {\n                     \"Thread never stopped.\");\n                 streams.threads.get(i).join();\n             }\n-            TestUtils.waitForCondition(", "originalCommit": "3772bf41fd473f9c8dd72adbd2917731b5c4717c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2MzY1NA==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r547563654", "bodyText": "Should we add a check that the thread count went down to zero? We could use the corresponding metrics.", "author": "mjsax", "createdAt": "2020-12-22T23:57:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ5NDE3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1ODU1OA==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r551458558", "bodyText": "thats probably a good idea", "author": "wcarlson5", "createdAt": "2021-01-04T17:27:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ5NDE3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ5NDc0Mg==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r540494742", "bodyText": "remove deprecation", "author": "wcarlson5", "createdAt": "2020-12-10T21:03:26Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EOSUncleanShutdownIntegrationTest.java", "diffHunk": "@@ -99,7 +99,6 @@ public static void setupConfigsAndUtils() {\n     }\n \n     @Test\n-    @SuppressWarnings(\"deprecation\")", "originalCommit": "3772bf41fd473f9c8dd72adbd2917731b5c4717c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2NDIyMw==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r547564223", "bodyText": "Why did we even set the exception handler that does not do anything? \ud83e\udd14", "author": "mjsax", "createdAt": "2020-12-22T23:59:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ5NDc0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1OTg4MA==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r551459880", "bodyText": "It made it so that the new default was not used until we updated the Error transition as we are doing in this PR. :)", "author": "wcarlson5", "createdAt": "2021-01-04T17:30:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ5NDc0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAyMzA5Mg==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r553023092", "bodyText": "Ah. Thanks for clarifying.", "author": "mjsax", "createdAt": "2021-01-06T23:51:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ5NDc0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MDA3Nw==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r540580077", "bodyText": "Just wait for ERROR because you don't close crashed", "author": "wcarlson5", "createdAt": "2020-12-10T23:36:11Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -411,7 +405,8 @@ public void shouldUpgradeFromEosAlphaToEosBeta() throws Exception {\n                 errorInjectedClient1.set(false);\n                 stateTransitions1.clear();\n                 streams1Alpha.close();\n-                waitForStateTransition(stateTransitions1, CLOSE_CRASHED);\n+                final KafkaStreams finalStreams1Alpha = streams1Alpha;\n+                waitForCondition(() -> finalStreams1Alpha.state() == State.ERROR, \"Stream did not go to ERROR\");", "originalCommit": "96751a586e54e8a74f940abef8004a574897e2d2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MDIzNQ==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r540580235", "bodyText": "No longer do you need to close crashed", "author": "wcarlson5", "createdAt": "2020-12-10T23:36:33Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -526,12 +521,10 @@ public void shouldUpgradeFromEosAlphaToEosBeta() throws Exception {\n \n                 assignmentListener.waitForNextStableAssignment(MAX_WAIT_TIME_MS);\n \n-                waitForStateTransition(stateTransitions2, CRASH);\n-\n                 commitErrorInjectedClient2.set(false);\n                 stateTransitions2.clear();\n                 streams2Alpha.close();\n-                waitForStateTransition(stateTransitions2, CLOSE_CRASHED);", "originalCommit": "96751a586e54e8a74f940abef8004a574897e2d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2NjQ5NQ==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r547566495", "bodyText": "Why this change? client2 should transit from PENDING_ERROR to ERROR (not from PENDING_SHUTDOWN to CLOSED, and thus the new CLOSE check seem not to be right? Or do I miss something?", "author": "mjsax", "createdAt": "2020-12-23T00:09:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MDIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2NDMzMg==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r551464332", "bodyText": "My thoughts where that we are calling close and so its is going to just be closed as the state transitions are cleared. This is the test that made me want you to review the PR I was worried that I might have broken the integrity of the tests as it is not behaving as I expected. However no other test was having this problem so I was not sure if I was understanding it correctly.", "author": "wcarlson5", "createdAt": "2021-01-04T17:38:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MDIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAyNTUxNg==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r553025516", "bodyText": "From my understanding/ according to the new state transition diagram, if there is an error we go to PENDING_ERROR and if we call close() we transit PENDING_ERROR -> ERROR?", "author": "mjsax", "createdAt": "2021-01-07T00:00:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MDIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzYxMzY5OQ==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r553613699", "bodyText": "the call to close() will have no effect. The PENDING_ERROR -> ERROR transition is like the PENDING_SHUTDOWN -> NOT_RUNNING  where the transition from the PENDING... state is automatic", "author": "wcarlson5", "createdAt": "2021-01-07T21:56:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MDIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE5NjEwMA==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r556196100", "bodyText": "Thanks for clarifying.", "author": "mjsax", "createdAt": "2021-01-13T01:04:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MDIzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MDU3MQ==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r540580571", "bodyText": "remove deprecated handler", "author": "wcarlson5", "createdAt": "2020-12-10T23:37:15Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/StandbyTaskEOSIntegrationTest.java", "diffHunk": "@@ -174,8 +177,8 @@ private KafkaStreams buildStreamWithDirtyStateDir(final String stateDirPath,\n     }\n \n     @Test\n-    @Deprecated", "originalCommit": "96751a586e54e8a74f940abef8004a574897e2d2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MDg0Nw==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r540580847", "bodyText": "There was a problem with the cleaner thread sometimes wiping out old segments because they were expired", "author": "wcarlson5", "createdAt": "2020-12-10T23:38:00Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/StandbyTaskEOSIntegrationTest.java", "diffHunk": "@@ -174,8 +177,8 @@ private KafkaStreams buildStreamWithDirtyStateDir(final String stateDirPath,\n     }\n \n     @Test\n-    @Deprecated\n     public void shouldWipeOutStandbyStateDirectoryIfCheckpointIsMissing() throws Exception {\n+        final long time = System.currentTimeMillis();", "originalCommit": "96751a586e54e8a74f940abef8004a574897e2d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2NzIxMA==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r547567210", "bodyText": "Not sure if I understand. Can you elaborate?", "author": "mjsax", "createdAt": "2020-12-23T00:12:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MDg0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2NjI0NA==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r551466244", "bodyText": "My theory (based on logs) is that the cleaner thread was sometimes activating and removing the segment before it should so the record that makes the thread crash was not being consumed by the recovery thread sometimes. I just changed the time stamps so that the cleaner thread would not find them old and if it did activate it would not clean them.", "author": "wcarlson5", "createdAt": "2021-01-04T17:42:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MDg0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAyNzQxMA==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r553027410", "bodyText": "I see. You are talking about the broker side log cleaner thread -- not the local state directory cleaner thread. (windowed stores also use the concept of segments, not just topic-partitions).\nHowever, it seems we want to extract this fix into a separate PR to be able to cherry-pick it to older branches? Seems to be unrelated to this PR.", "author": "mjsax", "createdAt": "2021-01-07T00:07:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MDg0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzYxNTI3Mg==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r553615272", "bodyText": "Maybe we will. It doesn't seems to be a problem for the other branches but something with how the test changes in this PR exposed it. This happened in the handler int tests too. I think as long as the other tests don't change it won't be a problem and if those tests change we can fix it then.\nBut if you think it should be fixed in the other branches anyways I'll trust your judgement.", "author": "wcarlson5", "createdAt": "2021-01-07T21:59:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MDg0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE5Njg4NA==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r556196884", "bodyText": "I don't understand why other branches would not be affected, or to what extend this PR would expose a new issue? Can you elaborate? -- If this PR introduces an issue that requires this change, I agree that we don't need to port it to other branches -- but I don't see the connection. What do I miss?", "author": "mjsax", "createdAt": "2021-01-13T01:06:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MDg0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDQxMzY3Ng==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r560413676", "bodyText": "It looks like this issue is fixed by another PR. #9733 (comment) So I am closing this now", "author": "wcarlson5", "createdAt": "2021-01-19T19:02:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MDg0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjIwMzIyNg==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r562203226", "bodyText": "The PR you liked seems to be unrelated to this test.\nStill wondering if we should extract this change to a dedicated PR and cherry-pick to older branches? -- Or do we have a good explanation why older branches would not be affected?", "author": "mjsax", "createdAt": "2021-01-21T21:18:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MDg0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MjI4Ng==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r540582286", "bodyText": "When the client is shutdown it now goes to ERROR", "author": "wcarlson5", "createdAt": "2020-12-10T23:41:41Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -139,7 +139,7 @@ public void shouldShutdownClient() throws InterruptedException {\n             StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);\n \n             produceMessages(0L, inputTopic, \"A\");\n-            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.NOT_RUNNING, DEFAULT_DURATION);\n+            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.ERROR, DEFAULT_DURATION);", "originalCommit": "96751a586e54e8a74f940abef8004a574897e2d2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0ODI3NQ==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r547548275", "bodyText": "super nit: fix indention of comment\nAlso please update the state diagram in the comment above.", "author": "mjsax", "createdAt": "2020-12-22T23:03:09Z", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -226,7 +226,8 @@\n         RUNNING(1, 2, 3, 5),    // 2\n         PENDING_SHUTDOWN(4),    // 3\n         NOT_RUNNING,            // 4\n-        ERROR(3);               // 5\n+        PENDING_ERROR(6),       // 5\n+        ERROR;               // 6", "originalCommit": "3c75523873452f76180190deeb6f9d65a3c17651", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQyOTUzNQ==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r551429535", "bodyText": "yay ascii art! good catch I forgot about that\nWhen I build the docs locally it looks about right", "author": "wcarlson5", "createdAt": "2021-01-04T16:38:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU0ODI3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1NjE4MA==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r547556180", "bodyText": "Should we return true there? I understand that we are not in NOT_RUNNING state, but in the end we are in a terminal state and we did cleanup all resources. -- I guess, I am raising the question if we should relax the definition of this return value?", "author": "mjsax", "createdAt": "2020-12-22T23:29:34Z", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -1165,11 +1151,21 @@ private Thread shutdownHelper(final boolean error) {\n             metrics.close();\n             if (!error) {\n                 setState(State.NOT_RUNNING);\n+            } else {\n+                setState(State.ERROR);\n             }\n         }, \"kafka-streams-close-thread\");\n     }\n \n     private boolean close(final long timeoutMs) {\n+        if (state == State.ERROR) {\n+            log.info(\"Streams client is already in the terminal state ERROR, all resources are closed and the client has stopped.\");\n+            return false;", "originalCommit": "3c75523873452f76180190deeb6f9d65a3c17651", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NTQxOQ==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r551445419", "bodyText": "I don't think that we should return true. A user would then expect that that the state would then change to NOT_RUNNING and could be stuck waiting on that. Where if we return false in then they might retry and get stuck there.\nI don't know which is a better problem to have but I think that changing the meaning of this return value won't add any more clarity to the situation.", "author": "wcarlson5", "createdAt": "2021-01-04T17:03:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1NjE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAyMjQ4MQ==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r553022481", "bodyText": "Fair point. Might be good to get input from somebody else in addition. \\cc @cadonna", "author": "mjsax", "createdAt": "2021-01-06T23:49:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1NjE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTczNDk2Nw==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r561734967", "bodyText": "As far as I can see, where the return value is used the javadoc says\ntrue if all threads were successfully stopped, false if the timeout was reached.\n\nSince all threads were successfully stopped, I would return true. We clearly document that ERROR is a terminal state, so I do not see why somebody should wait for NOT_RUNNING when the client is in ERROR and close() returns true.", "author": "cadonna", "createdAt": "2021-01-21T09:46:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1NjE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjA0MzQ0NA==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r562043444", "bodyText": "Alright I adjusted the close response to align with this.", "author": "wcarlson5", "createdAt": "2021-01-21T16:59:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1NjE4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2MzkxNw==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r547563917", "bodyText": "If the global thread dies, should we not transit to ERROR at the end?", "author": "mjsax", "createdAt": "2020-12-22T23:58:42Z", "path": "streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java", "diffHunk": "@@ -557,12 +490,12 @@ public void testStateGlobalThreadClose() throws Exception {\n                 () -> globalStreamThread.state() == GlobalStreamThread.State.DEAD,\n                 \"Thread never stopped.\");\n             globalStreamThread.join();\n-            assertEquals(streams.state(), KafkaStreams.State.ERROR);\n+            assertEquals(streams.state(), KafkaStreams.State.PENDING_ERROR);\n         } finally {\n             streams.close();\n         }\n \n-        assertEquals(streams.state(), KafkaStreams.State.NOT_RUNNING);\n+        assertEquals(streams.state(), KafkaStreams.State.PENDING_ERROR);", "originalCommit": "3c75523873452f76180190deeb6f9d65a3c17651", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1ODQ2Nw==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r551458467", "bodyText": "It will. We don't strictly need to test it here as that is tested elsewhere but we can add it for clarity", "author": "wcarlson5", "createdAt": "2021-01-04T17:27:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2MzkxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAyMjc5OA==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r553022798", "bodyText": "I guess it would not hurt. Leave it up to you than.", "author": "mjsax", "createdAt": "2021-01-06T23:50:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2MzkxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2NDU4MA==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r547564580", "bodyText": "Why not just change this from CLOSE_CRASHED to CRASH ?", "author": "mjsax", "createdAt": "2020-12-23T00:01:36Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -388,7 +382,8 @@ public void shouldUpgradeFromEosAlphaToEosBeta() throws Exception {\n                 errorInjectedClient1.set(false);\n                 stateTransitions1.clear();\n                 streams1Alpha.close();\n-                waitForStateTransition(stateTransitions1, CLOSE_CRASHED);", "originalCommit": "3c75523873452f76180190deeb6f9d65a3c17651", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2NDg2Mg==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r547564862", "bodyText": "Should we extend it to have two state transitions, RUNNING -> PENDING_ERROR and PENDING_ERROR -> ERROR ?", "author": "mjsax", "createdAt": "2020-12-23T00:02:50Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -113,14 +114,7 @@\n     private static final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> CRASH =\n         Collections.unmodifiableList(\n             Collections.singletonList(\n-                KeyValue.pair(KafkaStreams.State.RUNNING, KafkaStreams.State.ERROR)\n-            )\n-        );\n-    private static final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> CLOSE_CRASHED =\n-        Collections.unmodifiableList(\n-            Arrays.asList(\n-                KeyValue.pair(KafkaStreams.State.ERROR, KafkaStreams.State.PENDING_SHUTDOWN),\n-                KeyValue.pair(KafkaStreams.State.PENDING_SHUTDOWN, KafkaStreams.State.NOT_RUNNING)\n+                KeyValue.pair(KafkaStreams.State.RUNNING, State.PENDING_ERROR)", "originalCommit": "3c75523873452f76180190deeb6f9d65a3c17651", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjIxODk5Nw==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r556218997", "bodyText": "Actually it could probably be just PENDING_ERROR -> ERROR because it could be in RUNNING or REBALNCING previously", "author": "wcarlson5", "createdAt": "2021-01-13T02:15:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2NDg2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2NTYxNQ==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r547565615", "bodyText": "Why do we remove this? If the fail, we should transit to PENDING_ERROR state first, and only afterwards move forward with the test.", "author": "mjsax", "createdAt": "2020-12-23T00:05:55Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -521,12 +516,10 @@ public void shouldUpgradeFromEosAlphaToEosBeta() throws Exception {\n \n                 assignmentListener.waitForNextStableAssignment(MAX_WAIT_TIME_MS);\n \n-                waitForStateTransition(stateTransitions2, CRASH);", "originalCommit": "3c75523873452f76180190deeb6f9d65a3c17651", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2NjU5OQ==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r547566599", "bodyText": "As above", "author": "mjsax", "createdAt": "2020-12-23T00:09:53Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -611,12 +604,11 @@ public void shouldUpgradeFromEosAlphaToEosBeta() throws Exception {\n                 verifyUncommitted(expectedUncommittedResult);\n \n                 assignmentListener.waitForNextStableAssignment(MAX_WAIT_TIME_MS);\n-                waitForStateTransition(stateTransitions1, CRASH);", "originalCommit": "3c75523873452f76180190deeb6f9d65a3c17651", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2NjYxOA==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r547566618", "bodyText": "As above", "author": "mjsax", "createdAt": "2020-12-23T00:09:59Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -611,12 +604,11 @@ public void shouldUpgradeFromEosAlphaToEosBeta() throws Exception {\n                 verifyUncommitted(expectedUncommittedResult);\n \n                 assignmentListener.waitForNextStableAssignment(MAX_WAIT_TIME_MS);\n-                waitForStateTransition(stateTransitions1, CRASH);\n \n                 commitErrorInjectedClient1.set(false);\n                 stateTransitions1.clear();\n                 streams1Beta.close();\n-                waitForStateTransition(stateTransitions1, CLOSE_CRASHED);\n+                waitForStateTransition(stateTransitions1, CLOSE);", "originalCommit": "3c75523873452f76180190deeb6f9d65a3c17651", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2NjY2Mw==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r547566663", "bodyText": "As above", "author": "mjsax", "createdAt": "2020-12-23T00:10:11Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -737,7 +729,7 @@ public void shouldUpgradeFromEosAlphaToEosBeta() throws Exception {\n                 errorInjectedClient2.set(false);\n                 stateTransitions2.clear();\n                 streams2AlphaTwo.close();\n-                waitForStateTransition(stateTransitions2, CLOSE_CRASHED);\n+                waitForStateTransition(stateTransitions2, CLOSE);", "originalCommit": "3c75523873452f76180190deeb6f9d65a3c17651", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2NzUxOA==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r547567518", "bodyText": "Should we add a metric check to verify that the thread count is zero?", "author": "mjsax", "createdAt": "2020-12-23T00:13:51Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/StreamsUncaughtExceptionHandlerIntegrationTest.java", "diffHunk": "@@ -128,8 +128,8 @@ public void shouldShutdownThreadUsingOldHandler() throws InterruptedException {\n             TestUtils.waitForCondition(() -> counter.get() == 1, \"Handler was called 1st time\");\n             // should call the UncaughtExceptionHandler after rebalancing to another thread\n             TestUtils.waitForCondition(() -> counter.get() == 2, DEFAULT_DURATION.toMillis(), \"Handler was called 2nd time\");\n-            // the stream should now turn into ERROR state after 2 threads are dead\n-            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.ERROR, DEFAULT_DURATION);\n+            // there is no threads running but the client is still in running\n+            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.RUNNING, DEFAULT_DURATION);", "originalCommit": "3c75523873452f76180190deeb6f9d65a3c17651", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2NzI4Ng==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r551467286", "bodyText": "We can but we should be able to see that with counter that the 2 threads already failed", "author": "wcarlson5", "createdAt": "2021-01-04T17:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2NzUxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2ODAxOQ==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r547568019", "bodyText": "Nit: the error message is weird -> Streams didn't transit to ERROR state.", "author": "mjsax", "createdAt": "2020-12-23T00:15:41Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/SuppressionIntegrationTest.java", "diffHunk": "@@ -526,6 +526,6 @@ private static void produceSynchronously(final String topic, final List<KeyValue\n \n     private static void verifyErrorShutdown(final KafkaStreams driver) throws InterruptedException {\n         waitForCondition(() -> !driver.state().isRunningOrRebalancing(), DEFAULT_TIMEOUT, \"Streams didn't shut down.\");\n-        assertThat(driver.state(), is(KafkaStreams.State.PENDING_SHUTDOWN));\n+        waitForCondition(() -> driver.state() == KafkaStreams.State.ERROR, \"finish shutdown\");", "originalCommit": "3c75523873452f76180190deeb6f9d65a3c17651", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAyNTk2NA==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r553025964", "bodyText": "I thought we always need to call close? If an error happens, we call the handler, and if the handler return shutdown, we transit to PENDING_ERROR. On close() we transit from PENDING_ERROR -> ERROR?\nOr do I have some misconception?", "author": "mjsax", "createdAt": "2021-01-07T00:02:19Z", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -201,32 +201,33 @@\n      *         |              |                  |\n      *         |              v                  |\n      *         |       +------+-------+     +----+-------+\n-     *         +-----&gt; | Pending      |&lt;--- | Error (5)  |\n-     *                 | Shutdown (3) |     +------------+\n-     *                 +------+-------+\n-     *                        |\n-     *                        v\n-     *                 +------+-------+\n-     *                 | Not          |\n-     *                 | Running (4)  |\n+     *         +-----&gt; | Pending      |     | Pending    |\n+     *                 | Shutdown (3) |     | Error (5)  |\n+     *                 +------+-------+     +-----+------+\n+     *                        |                   |\n+     *                        v                   v\n+     *                 +------+-------+     +-----+--------+\n+     *                 | Not          |     | Error (6)    |\n+     *                 | Running (4)  |     +--------------+\n      *                 +--------------+\n      *\n      *\n      * </pre>\n      * Note the following:\n      * - RUNNING state will transit to REBALANCING if any of its threads is in PARTITION_REVOKED or PARTITIONS_ASSIGNED state\n      * - REBALANCING state will transit to RUNNING if all of its threads are in RUNNING state\n-     * - Any state except NOT_RUNNING can go to PENDING_SHUTDOWN (whenever close is called)\n+     * - Any state except NOT_RUNNING, PENDING_ERROR or ERROR can go to PENDING_SHUTDOWN (whenever close is called)\n      * - Of special importance: If the global stream thread dies, or all stream threads die (or both) then\n-     *   the instance will be in the ERROR state. The user will need to close it.\n+     *   the instance will be in the ERROR state. The user will not need to close it.", "originalCommit": "f4e91dc3741944e779cac5723929b0370ac1d6f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzYxMjAwMA==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r553612000", "bodyText": "the handler will call close, but the user will not need to. The PENDING_ERROR state is indicating the resources are closing before the transition to ERROR after which no more work will be done. We made it so the user can call close on PENDING_ERROR or ERROR but it will only log a warning", "author": "wcarlson5", "createdAt": "2021-01-07T21:52:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAyNTk2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE5NTkwMw==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r556195903", "bodyText": "Thanks for clarifying!", "author": "mjsax", "createdAt": "2021-01-13T01:03:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAyNTk2NA=="}], "type": "inlineReview"}, {"oid": "c7412f83e29251fa1bc44e7931c8d9fe0c565a79", "url": "https://github.com/apache/kafka/commit/c7412f83e29251fa1bc44e7931c8d9fe0c565a79", "message": "init commit, one test is still failing", "committedDate": "2021-01-19T19:15:32Z", "type": "commit"}, {"oid": "42aa534515309ee728e4c5019668673c8be6a364", "url": "https://github.com/apache/kafka/commit/42aa534515309ee728e4c5019668673c8be6a364", "message": "debug", "committedDate": "2021-01-19T19:15:32Z", "type": "commit"}, {"oid": "7c3e014d30b40d7658fe8253d43d7fb3088354e3", "url": "https://github.com/apache/kafka/commit/7c3e014d30b40d7658fe8253d43d7fb3088354e3", "message": "fix state store wipe", "committedDate": "2021-01-19T19:15:32Z", "type": "commit"}, {"oid": "ae8ea329e0302621f1085435d18e4ebcb60750a0", "url": "https://github.com/apache/kafka/commit/ae8ea329e0302621f1085435d18e4ebcb60750a0", "message": "undo dep", "committedDate": "2021-01-19T19:15:32Z", "type": "commit"}, {"oid": "9aff9a7564156cbd77fdffc2610a90ac6ef5cd41", "url": "https://github.com/apache/kafka/commit/9aff9a7564156cbd77fdffc2610a90ac6ef5cd41", "message": "undo dep", "committedDate": "2021-01-19T21:51:04Z", "type": "commit"}, {"oid": "836e9aeadc1b865452f2f7ed8312b5aaf7db5683", "url": "https://github.com/apache/kafka/commit/836e9aeadc1b865452f2f7ed8312b5aaf7db5683", "message": "quick fixes", "committedDate": "2021-01-19T21:51:04Z", "type": "commit"}, {"oid": "280dab10ec1e0b66af9ebcc7d6c80325cd5c0959", "url": "https://github.com/apache/kafka/commit/280dab10ec1e0b66af9ebcc7d6c80325cd5c0959", "message": "rebase replace thread so global threads close correctly", "committedDate": "2021-01-19T21:51:04Z", "type": "commit"}, {"oid": "4e0b5659b5dd6a61e45fe47c8401bd6ed6408850", "url": "https://github.com/apache/kafka/commit/4e0b5659b5dd6a61e45fe47c8401bd6ed6408850", "message": "init commit, one test is still failing", "committedDate": "2021-01-19T21:51:04Z", "type": "commit"}, {"oid": "5f73045da8a02d287bceb4d8b5deee96e96fe03b", "url": "https://github.com/apache/kafka/commit/5f73045da8a02d287bceb4d8b5deee96e96fe03b", "message": "debug", "committedDate": "2021-01-19T21:51:04Z", "type": "commit"}, {"oid": "e1b6bb08aafaf73edee5bc420d924b69aab76281", "url": "https://github.com/apache/kafka/commit/e1b6bb08aafaf73edee5bc420d924b69aab76281", "message": "fix state store wipe", "committedDate": "2021-01-19T21:51:04Z", "type": "commit"}, {"oid": "468a0a62d49a51ed71887bb349913fefb64fa55a", "url": "https://github.com/apache/kafka/commit/468a0a62d49a51ed71887bb349913fefb64fa55a", "message": "undo dep", "committedDate": "2021-01-19T21:51:04Z", "type": "commit"}, {"oid": "960365970af371dcff7cc08dfdc68ea7654ef496", "url": "https://github.com/apache/kafka/commit/960365970af371dcff7cc08dfdc68ea7654ef496", "message": "undo dep", "committedDate": "2021-01-19T21:51:04Z", "type": "commit"}, {"oid": "0304647545c089b9572700625679a9461fee194b", "url": "https://github.com/apache/kafka/commit/0304647545c089b9572700625679a9461fee194b", "message": "quick fixes", "committedDate": "2021-01-19T21:51:04Z", "type": "commit"}, {"oid": "a0a51d94ac65d4218572185c8c6d1cb44d755344", "url": "https://github.com/apache/kafka/commit/a0a51d94ac65d4218572185c8c6d1cb44d755344", "message": "address comments", "committedDate": "2021-01-19T21:51:04Z", "type": "commit"}, {"oid": "35241f4494836fc30c01795322a053b0735ccaf7", "url": "https://github.com/apache/kafka/commit/35241f4494836fc30c01795322a053b0735ccaf7", "message": "returned checks", "committedDate": "2021-01-19T21:55:40Z", "type": "commit"}, {"oid": "8078e962ba05d37251d11c0960df223fdfa24cfd", "url": "https://github.com/apache/kafka/commit/8078e962ba05d37251d11c0960df223fdfa24cfd", "message": "update fail msg", "committedDate": "2021-01-19T22:08:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUyOTgwMw==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r560529803", "bodyText": "Using just PENDING_ERROR -> ERROR because the transition to PENDING_ERROR can be from multiple sources. Also that transition is already tested so this check implies it", "author": "wcarlson5", "createdAt": "2021-01-19T22:10:07Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -113,14 +114,7 @@\n     private static final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> CRASH =\n         Collections.unmodifiableList(\n             Collections.singletonList(\n-                KeyValue.pair(KafkaStreams.State.RUNNING, KafkaStreams.State.ERROR)\n-            )\n-        );\n-    private static final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> CLOSE_CRASHED =\n-        Collections.unmodifiableList(\n-            Arrays.asList(\n-                KeyValue.pair(KafkaStreams.State.ERROR, KafkaStreams.State.PENDING_SHUTDOWN),\n-                KeyValue.pair(KafkaStreams.State.PENDING_SHUTDOWN, KafkaStreams.State.NOT_RUNNING)\n+                KeyValue.pair(State.PENDING_ERROR, State.ERROR)", "originalCommit": "35241f4494836fc30c01795322a053b0735ccaf7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "de99a7c297143372eccfc35bc48752d2bfbd2e8f", "url": "https://github.com/apache/kafka/commit/de99a7c297143372eccfc35bc48752d2bfbd2e8f", "message": "update fail msg", "committedDate": "2021-01-19T22:11:09Z", "type": "commit"}, {"oid": "93beb2f2437365270c5526946d51e3bb4961dd9c", "url": "https://github.com/apache/kafka/commit/93beb2f2437365270c5526946d51e3bb4961dd9c", "message": "close semantics", "committedDate": "2021-01-21T17:45:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjIwMDg5MQ==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r562200891", "bodyText": "Why this change? We do wait for RUNNING?", "author": "mjsax", "createdAt": "2021-01-21T21:14:12Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -978,7 +971,7 @@ private void waitForRunning(final List<KeyValue<KafkaStreams.State, KafkaStreams\n         waitForCondition(\n             () -> !observed.isEmpty() && observed.get(observed.size() - 1).value.equals(State.RUNNING),\n             MAX_WAIT_TIME_MS,\n-            () -> \"Client did not startup on time. Observers transitions: \" + observed\n+            () -> \"Client did not have the expected state transition on time. Observers transitions: \" + observed", "originalCommit": "93beb2f2437365270c5526946d51e3bb4961dd9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjIyMzMxOA==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r562223318", "bodyText": "We do wait for running, I was thinking of bringing it to match with the other methods below but that doesn't make it anymore useful so I will revet it.", "author": "wcarlson5", "createdAt": "2021-01-21T21:56:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjIwMDg5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjIwMTAwMg==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r562201002", "bodyText": "nit: fix indention", "author": "mjsax", "createdAt": "2021-01-21T21:14:23Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -993,6 +986,17 @@ private void waitForStateTransition(final List<KeyValue<KafkaStreams.State, Kafk\n         );\n     }\n \n+    private void waitForStateTransitionContains(final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> observed,\n+                                        final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> expected)", "originalCommit": "93beb2f2437365270c5526946d51e3bb4961dd9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjIwMTM2Ng==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r562201366", "bodyText": "Can we add the expected transitions, too? Easier to debug if the test fails.", "author": "mjsax", "createdAt": "2021-01-21T21:15:05Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/EosBetaUpgradeIntegrationTest.java", "diffHunk": "@@ -993,6 +986,17 @@ private void waitForStateTransition(final List<KeyValue<KafkaStreams.State, Kafk\n         );\n     }\n \n+    private void waitForStateTransitionContains(final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> observed,\n+                                        final List<KeyValue<KafkaStreams.State, KafkaStreams.State>> expected)\n+            throws Exception {\n+\n+        waitForCondition(\n+            () -> observed.containsAll(expected),\n+            MAX_WAIT_TIME_MS,\n+            () -> \"Client did not have the expected state transition on time. Observers transitions: \" + observed", "originalCommit": "93beb2f2437365270c5526946d51e3bb4961dd9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjIyNDQwOA==", "url": "https://github.com/apache/kafka/pull/9720#discussion_r562224408", "bodyText": "sure that is fine", "author": "wcarlson5", "createdAt": "2021-01-21T21:58:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjIwMTM2Ng=="}], "type": "inlineReview"}, {"oid": "034520223141396471406feb1f3786f91fca822d", "url": "https://github.com/apache/kafka/commit/034520223141396471406feb1f3786f91fca822d", "message": "nits", "committedDate": "2021-01-21T22:10:59Z", "type": "commit"}, {"oid": "e235b62f67fd1b2ab2323750f748e28ad87f9a98", "url": "https://github.com/apache/kafka/commit/e235b62f67fd1b2ab2323750f748e28ad87f9a98", "message": "extract system time change fix", "committedDate": "2021-01-21T22:43:21Z", "type": "commit"}]}