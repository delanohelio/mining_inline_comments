{"pr_number": 9435, "pr_title": "KAFKA-10606: Disable auto topic creation for fetch-all-topic-metadata request", "pr_createdAt": "2020-10-14T18:18:31Z", "pr_url": "https://github.com/apache/kafka/pull/9435", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1NTU1OQ==", "url": "https://github.com/apache/kafka/pull/9435#discussion_r509055559", "bodyText": "If we pass false to getTopicMetadata, it generates UNKNOWN_TOPIC_OR_PARTITION when the topic is removed, right? If so, does client-side need to handle such error? For example, KafkaAdminClient#listTopics should filter out those \"nonexistent\" topics (https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java#L1717). Otherwise, users want to get all \"existent\" topics but response say a_topic is \"nonexistent\".", "author": "chia7712", "createdAt": "2020-10-21T07:39:23Z", "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -1236,9 +1236,19 @@ class KafkaApis(val requestChannel: RequestChannel,\n     val topicMetadata =\n       if (authorizedTopics.isEmpty)\n         Seq.empty[MetadataResponseTopic]\n-      else\n-        getTopicMetadata(metadataRequest.allowAutoTopicCreation, authorizedTopics, request.context.listenerName,\n-          errorUnavailableEndpoints, errorUnavailableListeners)\n+      else {\n+        // KAFKA-10606: If this request is to get metadata for all topics, auto topic creation should not be allowed\n+        // The special handling is necessary on broker side because allowAutoTopicCreation is hard coded to true\n+        // for backward compatibility on client side.\n+        val allowAutoTopicCreation = (!metadataRequest.isAllTopics) && metadataRequest.allowAutoTopicCreation", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ0MTMyMQ==", "url": "https://github.com/apache/kafka/pull/9435#discussion_r522441321", "bodyText": "Hi @chia7712 , thank you for bringing up this issue and it's totally valid!\nIn order to preserve its behavior (not including UNKNOWN_TOPIC_OR_PARTITION  in the response to fetch all topic metadata request), we implemented the below logic which filters out all entries in the response with UNKNOWN_TOPIC_OR_PARTITION  if the metadata request is to get metadata for all topisc.\nval completeTopicMetadata = (if (metadataRequest.isAllTopics) {\n    opicMetadata.filter(_.errorCode() != Errors.UNKNOWN_TOPIC_OR_PARTITION.code())\n} else {\n    topicMetadata\n}) ++ unauthorizedForCreateTopicMetadata ++ unauthorizedForDescribeTopicMetadata\n\nWe have added a unit test as well. Hope to get some feedback from you soon!", "author": "Lincong", "createdAt": "2020-11-12T21:36:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1NTU1OQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYxNjU4NA==", "url": "https://github.com/apache/kafka/pull/9435#discussion_r526616584", "bodyText": "Could we do this filter early? For example, how about filtering getTopicMetadata directly? That makes all fixes be in one place and following authorized ops can skip \"unknown partition/topic\" as well.", "author": "chia7712", "createdAt": "2020-11-19T06:12:19Z", "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -1333,7 +1343,17 @@ class KafkaApis(val requestChannel: RequestChannel,\n       }\n     }\n \n-    val completeTopicMetadata = topicMetadata ++ unauthorizedForCreateTopicMetadata ++ unauthorizedForDescribeTopicMetadata\n+    val completeTopicMetadata = (if (metadataRequest.isAllTopics) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkxMTIwMA==", "url": "https://github.com/apache/kafka/pull/9435#discussion_r526911200", "bodyText": "This is a good point. We should pass a boolean to getTopicMetadata indicating that it's an \"allTopics\" request and have that method handle everything.", "author": "ijuma", "createdAt": "2020-11-19T14:04:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYxNjU4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE5MjgwMg==", "url": "https://github.com/apache/kafka/pull/9435#discussion_r527192802", "bodyText": "Hi @chia7712 @ijuma ,\nThis is Joseph and I'm @Lincong 's colleague working on this patch with him.  I think this is a good point and just updated the PR accordingly", "author": "lmr3796", "createdAt": "2020-11-19T20:56:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYxNjU4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI2OTczNw==", "url": "https://github.com/apache/kafka/pull/9435#discussion_r530269737", "bodyText": "@ijuma I will merge this PR tomorrow if there is no objection.", "author": "chia7712", "createdAt": "2020-11-25T10:34:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYxNjU4NA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU4NTc2OA==", "url": "https://github.com/apache/kafka/pull/9435#discussion_r528585768", "bodyText": "Could we remove this @Before code? Changing modifier of metadataCache from \"val\" to \"var\" is enough.", "author": "chia7712", "createdAt": "2020-11-23T10:00:28Z", "path": "core/src/test/scala/unit/kafka/server/KafkaApisTest.scala", "diffHunk": "@@ -107,6 +108,11 @@ class KafkaApisTest {\n   private val time = new MockTime\n   private val clientId = \"\"\n \n+  @Before\n+  def setUp(): Unit = {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIwMzY1Mg==", "url": "https://github.com/apache/kafka/pull/9435#discussion_r529203652", "bodyText": "hey @chia7712 ,\nI add this to let each test case to have a clean, uncorrupted MetadataCache.  Is there any historical context that we should avoid that cleanup?", "author": "lmr3796", "createdAt": "2020-11-24T04:59:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU4NTc2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI0MDcxMQ==", "url": "https://github.com/apache/kafka/pull/9435#discussion_r529240711", "bodyText": "It seems to me following code is able to generate a clean, uncorrupted MetadataCache for each test case.\nvar metadataCache = new MetadataCache(brokerId)\n\nAlso, it is simpler than @Before block.", "author": "chia7712", "createdAt": "2020-11-24T06:57:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU4NTc2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzOTQyMA==", "url": "https://github.com/apache/kafka/pull/9435#discussion_r530139420", "bodyText": "Hey @chia7712 you're right.  I did some reading and found that I misunderstood JUnit's behavior.  Just updated that part and rebased latest trunk.", "author": "lmr3796", "createdAt": "2020-11-25T06:44:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU4NTc2OA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ0NjA2OA==", "url": "https://github.com/apache/kafka/pull/9435#discussion_r530446068", "bodyText": "Could we not avoid this altogether instead of doing the filter later?", "author": "ijuma", "createdAt": "2020-11-25T15:12:12Z", "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -1250,13 +1251,23 @@ class KafkaApis(val requestChannel: RequestChannel,\n             metadataResponseTopic(Errors.INVALID_REPLICATION_FACTOR, topic, true, util.Collections.emptyList())\n           else\n             topicMetadata\n-        } else if (allowAutoTopicCreation && config.autoCreateTopicsEnable) {\n+        } else if (!isFetchAllMetadata && allowAutoTopicCreation && config.autoCreateTopicsEnable) {\n+          // KAFKA-10606: If this request is to get metadata for all topics, auto topic creation should not be allowed\n+          // The special handling is necessary on broker side because allowAutoTopicCreation is hard coded to true\n+          // for backward compatibility on client side.\n           createTopic(topic, config.numPartitions, config.defaultReplicationFactor)\n         } else {\n           metadataResponseTopic(Errors.UNKNOWN_TOPIC_OR_PARTITION, topic, false, util.Collections.emptyList())", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE1MzYzNA==", "url": "https://github.com/apache/kafka/pull/9435#discussion_r533153634", "bodyText": "@ijuma I slightly changed it (and rebased latest) so the processing is a branch in the middle about isFetchAllMetadata.\nIt's still a map and filter structure because I don't want to sacrifice the readability, but it's handled in the middle instead of at the returning statement, which I think is more elegant and readable than the original version.\nLet me know what you think!", "author": "lmr3796", "createdAt": "2020-12-01T08:31:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ0NjA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE1NDA2Nw==", "url": "https://github.com/apache/kafka/pull/9435#discussion_r533154067", "bodyText": "Also, I added the assertion of no UNKNOWN_TOPIC_OR_PARTITION into the unit test", "author": "lmr3796", "createdAt": "2020-12-01T08:32:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ0NjA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQwMjg1Mg==", "url": "https://github.com/apache/kafka/pull/9435#discussion_r533402852", "bodyText": "I think if you use flatMap, you don't need the filter and it's still readable. Thoughts?", "author": "ijuma", "createdAt": "2020-12-01T13:23:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ0NjA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0ODk4OA==", "url": "https://github.com/apache/kafka/pull/9435#discussion_r533648988", "bodyText": "@ijuma That's a good point.  I've updated it.", "author": "lmr3796", "createdAt": "2020-12-01T18:58:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ0NjA2OA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "38f9de2566e79a6967e2615f59ededa14e930557", "url": "https://github.com/apache/kafka/commit/38f9de2566e79a6967e2615f59ededa14e930557", "message": "KAFKA-10606 Change UNKNOWN_TOPIC_OR_PARTITION filtering", "committedDate": "2020-12-01T19:02:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1MjMyNg==", "url": "https://github.com/apache/kafka/pull/9435#discussion_r534752326", "bodyText": "Is Some/None more readable than List/Nil?", "author": "chia7712", "createdAt": "2020-12-03T06:52:14Z", "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -1243,19 +1244,30 @@ class KafkaApis(val requestChannel: RequestChannel,\n       topicResponses\n     } else {\n       val nonExistentTopics = topics.diff(topicResponses.map(_.name).toSet)\n-      val responsesForNonExistentTopics = nonExistentTopics.map { topic =>\n+      val responsesForNonExistentTopics = nonExistentTopics.flatMap { topic =>\n         if (isInternal(topic)) {\n           val topicMetadata = createInternalTopic(topic)\n-          if (topicMetadata.errorCode == Errors.COORDINATOR_NOT_AVAILABLE.code)\n-            metadataResponseTopic(Errors.INVALID_REPLICATION_FACTOR, topic, true, util.Collections.emptyList())\n-          else\n-            topicMetadata\n+          List(\n+            if (topicMetadata.errorCode == Errors.COORDINATOR_NOT_AVAILABLE.code)\n+              metadataResponseTopic(Errors.INVALID_REPLICATION_FACTOR, topic, true, util.Collections.emptyList())\n+            else\n+              topicMetadata\n+          )\n+        } else if (isFetchAllMetadata) {\n+          // KAFKA-10606: If this request is to get metadata for all topics, auto topic creation should not be allowed\n+          // The special handling is necessary on broker side because allowAutoTopicCreation is hard coded to true\n+          // for backward compatibility on client side.\n+          //\n+          // However, in previous versions, UNKNOWN_TOPIC_OR_PARTITION won't happen on fetch all metadata,\n+          // so, for backward-compatibility, we need to skip these not founds during fetch all metadata here.\n+          Nil", "originalCommit": "38f9de2566e79a6967e2615f59ededa14e930557", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAxOTgxMA==", "url": "https://github.com/apache/kafka/pull/9435#discussion_r535019810", "bodyText": "@chia7712 Thanks, you're right.  Just updated accordingly and rebased latest trunk", "author": "lmr3796", "createdAt": "2020-12-03T09:44:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc1MjMyNg=="}], "type": "inlineReview"}, {"oid": "779f6f3274d4fdf38179ab87939bb3c8b71ba82e", "url": "https://github.com/apache/kafka/commit/779f6f3274d4fdf38179ab87939bb3c8b71ba82e", "message": "KAFKA-10606 Fix styling", "committedDate": "2020-12-03T09:43:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMyMTk3MQ==", "url": "https://github.com/apache/kafka/pull/9435#discussion_r535321971", "bodyText": "We don't usually include JIRA references in the code unless it's a very complex issue. I think the comment here could be something like:\n\"A metadata request for all topics should never result in topic auto creation. A topic may be deleted between the creation of topics and topicResponses, so we make sure to always return None for this case.\"", "author": "ijuma", "createdAt": "2020-12-03T15:17:46Z", "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -1243,19 +1244,30 @@ class KafkaApis(val requestChannel: RequestChannel,\n       topicResponses\n     } else {\n       val nonExistentTopics = topics.diff(topicResponses.map(_.name).toSet)\n-      val responsesForNonExistentTopics = nonExistentTopics.map { topic =>\n+      val responsesForNonExistentTopics = nonExistentTopics.flatMap { topic =>\n         if (isInternal(topic)) {\n           val topicMetadata = createInternalTopic(topic)\n-          if (topicMetadata.errorCode == Errors.COORDINATOR_NOT_AVAILABLE.code)\n-            metadataResponseTopic(Errors.INVALID_REPLICATION_FACTOR, topic, true, util.Collections.emptyList())\n-          else\n-            topicMetadata\n+          Some(\n+            if (topicMetadata.errorCode == Errors.COORDINATOR_NOT_AVAILABLE.code)\n+              metadataResponseTopic(Errors.INVALID_REPLICATION_FACTOR, topic, true, util.Collections.emptyList())\n+            else\n+              topicMetadata\n+          )\n+        } else if (isFetchAllMetadata) {\n+          // KAFKA-10606: If this request is to get metadata for all topics, auto topic creation should not be allowed\n+          // The special handling is necessary on broker side because allowAutoTopicCreation is hard coded to true\n+          // for backward compatibility on client side.\n+          //\n+          // However, in previous versions, UNKNOWN_TOPIC_OR_PARTITION won't happen on fetch all metadata,\n+          // so, for backward-compatibility, we need to skip these not founds during fetch all metadata here.", "originalCommit": "779f6f3274d4fdf38179ab87939bb3c8b71ba82e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ4OTg4Nw==", "url": "https://github.com/apache/kafka/pull/9435#discussion_r535489887", "bodyText": "Thanks @ijuma ,\nTo follow the convention in Kafka, I just updated the comments.  Let me know if you have there are any other thoughts!", "author": "lmr3796", "createdAt": "2020-12-03T18:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMyMTk3MQ=="}], "type": "inlineReview"}, {"oid": "b6b6713db60cee8d779eee6e1ee2936e6d05e27a", "url": "https://github.com/apache/kafka/commit/b6b6713db60cee8d779eee6e1ee2936e6d05e27a", "message": "KAFKA-10606 Update comments", "committedDate": "2020-12-06T10:14:37Z", "type": "forcePushed"}, {"oid": "6778e69a3547a50437ff99a48a4eee490856ec49", "url": "https://github.com/apache/kafka/commit/6778e69a3547a50437ff99a48a4eee490856ec49", "message": "KAFKA-10606 Update comments", "committedDate": "2020-12-08T07:12:34Z", "type": "forcePushed"}, {"oid": "06ca7b07da658215b0dd20ce66bde31772de36fe", "url": "https://github.com/apache/kafka/commit/06ca7b07da658215b0dd20ce66bde31772de36fe", "message": "KAFKA-10606 Disable auto topic creation for fetch-all-topic-metadata request\n\nThere is a bug that causes fetch-all-topic-metadata request triggering\nauto topic creation. Details are described in KAFKA-10606. This is the\nsimplest way to fix this bug on the broker side.", "committedDate": "2020-12-09T09:28:10Z", "type": "commit"}, {"oid": "e16b036c3fca20f6080b93676f89685e6661b680", "url": "https://github.com/apache/kafka/commit/e16b036c3fca20f6080b93676f89685e6661b680", "message": "KAFKA-10606 Add unit test and more comments", "committedDate": "2020-12-09T09:28:10Z", "type": "commit"}, {"oid": "1f66e0660e8d0ff6dc36a6c90b3f4a523c0e1de3", "url": "https://github.com/apache/kafka/commit/1f66e0660e8d0ff6dc36a6c90b3f4a523c0e1de3", "message": "KAFKA-10606 Filter out UNKNOWN_TOPIC_OR_PARTITION in fetch all metadata response", "committedDate": "2020-12-09T09:28:10Z", "type": "commit"}, {"oid": "e01660e05dedc8ffdb8360862f8c4252077bfa9d", "url": "https://github.com/apache/kafka/commit/e01660e05dedc8ffdb8360862f8c4252077bfa9d", "message": "KAFKA-10606 Fix build error in Scala 2.12", "committedDate": "2020-12-09T09:28:10Z", "type": "commit"}, {"oid": "f59039d4f9ebd1ef1d860638d2fcddf6430b0424", "url": "https://github.com/apache/kafka/commit/f59039d4f9ebd1ef1d860638d2fcddf6430b0424", "message": "KAFKA-10606 Move UNKNOWN_TOPIC_OR_PARTITION filtering to getTopicMetadata", "committedDate": "2020-12-09T09:28:10Z", "type": "commit"}, {"oid": "6aa047316c1b13239b296c65a12aff3f69dc2780", "url": "https://github.com/apache/kafka/commit/6aa047316c1b13239b296c65a12aff3f69dc2780", "message": "KAFKA-10606 Change @Before method to constructor setup in KafkaApiTest", "committedDate": "2020-12-09T09:28:10Z", "type": "commit"}, {"oid": "61fa5b0f694af01329594b673e0e9278b5b56514", "url": "https://github.com/apache/kafka/commit/61fa5b0f694af01329594b673e0e9278b5b56514", "message": "KAFKA-10606 Change UNKNOWN_TOPIC_OR_PARTITION filtering", "committedDate": "2020-12-09T09:28:10Z", "type": "commit"}, {"oid": "74832766bd1b55da41be3d5c0e424ebbfa6f45db", "url": "https://github.com/apache/kafka/commit/74832766bd1b55da41be3d5c0e424ebbfa6f45db", "message": "KAFKA-10606 Fix styling", "committedDate": "2020-12-09T09:28:10Z", "type": "commit"}, {"oid": "19e323e7df90d0268de476c87db6819e293902b0", "url": "https://github.com/apache/kafka/commit/19e323e7df90d0268de476c87db6819e293902b0", "message": "KAFKA-10606 Update comments", "committedDate": "2020-12-09T09:28:10Z", "type": "commit"}, {"oid": "19e323e7df90d0268de476c87db6819e293902b0", "url": "https://github.com/apache/kafka/commit/19e323e7df90d0268de476c87db6819e293902b0", "message": "KAFKA-10606 Update comments", "committedDate": "2020-12-09T09:28:10Z", "type": "forcePushed"}]}