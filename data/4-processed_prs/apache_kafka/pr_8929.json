{"pr_number": 8929, "pr_title": "KAFKA-4996: Fix findbugs multithreaded correctness warnings for streams", "pr_createdAt": "2020-06-25T18:30:20Z", "pr_url": "https://github.com/apache/kafka/pull/8929", "timeline": [{"oid": "bd31e513f84de72e26bb6cdbd995caaa4f4533d6", "url": "https://github.com/apache/kafka/commit/bd31e513f84de72e26bb6cdbd995caaa4f4533d6", "message": "update spotbugs exclude for ticket 4996", "committedDate": "2020-06-25T17:05:34Z", "type": "commit"}, {"oid": "801d60184a2969c1539126972e51a13ab20e4ed0", "url": "https://github.com/apache/kafka/commit/801d60184a2969c1539126972e51a13ab20e4ed0", "message": "updated maxObservedTimestamp and localMetadata to be threadsafe", "committedDate": "2020-06-25T17:45:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2NDkzNw==", "url": "https://github.com/apache/kafka/pull/8929#discussion_r445864937", "bodyText": "Interesting... which value is it? Looking at the class, it seems like it's probably the builder methods, which should all be called before passing the pre-built topology to the StreamThreads. I agree this should be safe, but it still might be nice to clean up the class so that this suppression isn't necessary.\nCan you expand this XML comment a little to explain what would need to be done to resolve this suppression?", "author": "vvcephei", "createdAt": "2020-06-25T22:05:57Z", "path": "gradle/spotbugs-exclude.xml", "diffHunk": "@@ -348,14 +348,11 @@ For a detailed description of spotbugs bug categories, see https://spotbugs.read\n     </Match>\n \n     <Match>\n-        <!-- TODO: fix this (see KAFKA-4996) -->\n-        <Or>\n-            <Package name=\"org.apache.kafka.streams.state.internals\"/>\n+        <!-- Suppress warning about a value that gets initialized\n+             before any other threads are created. -->\n             <Package name=\"org.apache.kafka.streams.processor.internals\"/>\n-            <Package name=\"org.apache.kafka.streams.processor\"/>\n-            <Package name=\"org.apache.kafka.streams\"/>\n-        </Or>\n-        <Bug pattern=\"IS2_INCONSISTENT_SYNC\"/>\n+            <Source name=\"InternalTopologyBuilder.java\"/>\n+            <Bug pattern=\"IS2_INCONSISTENT_SYNC\"/>", "originalCommit": "801d60184a2969c1539126972e51a13ab20e4ed0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg3Mjc3MQ==", "url": "https://github.com/apache/kafka/pull/8929#discussion_r445872771", "bodyText": "It's the applicationId -- I guess we should specify in the comment since both you and Boyang asked", "author": "ableegoldman", "createdAt": "2020-06-25T22:26:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2NDkzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg3NzMwMQ==", "url": "https://github.com/apache/kafka/pull/8929#discussion_r445877301", "bodyText": "We get this from the configs, which are passed in to rewriteTopology when it's called by KafkaStreams constructor. Since we don't always pass the configs in to the topology, we can't initialize this when the InternalTopologyBuilder is constructed.\nThat said, I'd be in favor of requiring to pass the configs in to the topology instead of passing them in by the KafkaStreams constructor. In fact we already force users who want an optimized topology to pass the configs in to the topology AND to the KafkaStreams, which is confusing. If the topology sometimes needs the configs, and we always pass the topology to the KafkaStreams, we should just let KafkaStreams get the configs from the topology.\nie, I'd like to deprecate all KafkaStreams constructors with config arguments (which I think is all of them?) and all Topology/StreamsBuilder#build/etc without the config argument. Then we could just initialize the application id in the constructor. Of course, this would require a KIP, and is way out of scope here -- just pointing out why this is so weird", "author": "ableegoldman", "createdAt": "2020-06-25T22:40:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2NDkzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzNTUxMQ==", "url": "https://github.com/apache/kafka/pull/8929#discussion_r445935511", "bodyText": "Quite a few folks have pushed for this, but I can't help feeling like it's the wrong way to go. It doesn't seem appropriate\nto pass the application configs to the topology builder to begin with.\nI'm long overdue in writing down my counterproposal, and I won't derail this PR by doing it here. I just wanted to register the possibility that there's a better way out of this mess than forcing users to provide their runtime configurations when compiling their program.\nLeaving that aside, I do think you're right. Findbugs is justified in flagging this because, although what we are doing is actually threadsafe, it's hacky and indistingushable from unsafe code.", "author": "vvcephei", "createdAt": "2020-06-26T02:26:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2NDkzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwODM5NQ==", "url": "https://github.com/apache/kafka/pull/8929#discussion_r446308395", "bodyText": "Fair enough. I eagerly await your alternative proposal :P", "author": "ableegoldman", "createdAt": "2020-06-26T17:11:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2NDkzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2ODUxNQ==", "url": "https://github.com/apache/kafka/pull/8929#discussion_r445868515", "bodyText": "Will this get us NullPointer? Do we need to get an initial value for localMetadata?", "author": "abbccdda", "createdAt": "2020-06-25T22:15:05Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsMetadataState.java", "diffHunk": "@@ -226,7 +227,7 @@ public StreamsMetadata getLocalMetadata() {\n             if (thisHost.equals(UNKNOWN_HOST)) {\n                 return new KeyQueryMetadata(allMetadata.get(0).hostInfo(), Collections.emptySet(), -1);\n             }\n-            return new KeyQueryMetadata(localMetadata.hostInfo(), Collections.emptySet(), -1);\n+            return new KeyQueryMetadata(localMetadata.get().hostInfo(), Collections.emptySet(), -1);", "originalCommit": "801d60184a2969c1539126972e51a13ab20e4ed0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg3Mjk1Mw==", "url": "https://github.com/apache/kafka/pull/8929#discussion_r445872953", "bodyText": "Yeah good catch, see above", "author": "ableegoldman", "createdAt": "2020-06-25T22:27:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2ODUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzNTY4Ng==", "url": "https://github.com/apache/kafka/pull/8929#discussion_r445935686", "bodyText": "Very good catch. Thanks, @abbccdda .", "author": "vvcephei", "createdAt": "2020-06-26T02:27:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2ODUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwNjI2MQ==", "url": "https://github.com/apache/kafka/pull/8929#discussion_r446406261", "bodyText": "Hmm, why do we still keep it? Based on the reviews for previous version, I believe that there is some strict ordering for getting localMetadata initialized to be non-null on L352 first before hitting this logic, but still a null check sound more resilient to me, unless we want to have a NullPointerException to be thrown explicitly.", "author": "abbccdda", "createdAt": "2020-06-26T20:56:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2ODUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwODk2NA==", "url": "https://github.com/apache/kafka/pull/8929#discussion_r446408964", "bodyText": "This gets initialized during the rebalance and IQ isn't available until Streams has reached RUNNING.", "author": "ableegoldman", "createdAt": "2020-06-26T21:03:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2ODUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzMTY4OQ==", "url": "https://github.com/apache/kafka/pull/8929#discussion_r446431689", "bodyText": "I looked through the StreamsMetadataState and it does seem like it could technically be null if this instance was never assigned any active or standby tasks at all, ever. That really shouldn't happen, but of course it can if you massively over-provisioned your app and we shouldn't throw an NPE over that.\nSeems like this is actually an existing bug that we should fix. Then we can improve the initialization check on the side", "author": "ableegoldman", "createdAt": "2020-06-26T22:08:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2ODUxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2OTE5Mg==", "url": "https://github.com/apache/kafka/pull/8929#discussion_r445869192", "bodyText": "What are we suppressing here?", "author": "abbccdda", "createdAt": "2020-06-25T22:16:56Z", "path": "gradle/spotbugs-exclude.xml", "diffHunk": "@@ -348,14 +348,11 @@ For a detailed description of spotbugs bug categories, see https://spotbugs.read\n     </Match>\n \n     <Match>\n-        <!-- TODO: fix this (see KAFKA-4996) -->\n-        <Or>\n-            <Package name=\"org.apache.kafka.streams.state.internals\"/>\n+        <!-- Suppress warning about a value that gets initialized", "originalCommit": "801d60184a2969c1539126972e51a13ab20e4ed0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg3MjM0NQ==", "url": "https://github.com/apache/kafka/pull/8929#discussion_r445872345", "bodyText": "We need to actually initialize this now, although we can just initialize the value to null. ie\nprivate AtomicReference<StreamsMetadata> localMetadata = new AtomicReference<>(null);", "author": "ableegoldman", "createdAt": "2020-06-25T22:25:45Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsMetadataState.java", "diffHunk": "@@ -50,7 +51,7 @@\n     private final HostInfo thisHost;\n     private List<StreamsMetadata> allMetadata = Collections.emptyList();\n     private Cluster clusterMetadata;\n-    private StreamsMetadata localMetadata;\n+    private AtomicReference<StreamsMetadata> localMetadata;", "originalCommit": "801d60184a2969c1539126972e51a13ab20e4ed0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2c5f1080bd7d36a6392627eb0562a0e6d62d5a86", "url": "https://github.com/apache/kafka/commit/2c5f1080bd7d36a6392627eb0562a0e6d62d5a86", "message": "fixed initialization and updated comment", "committedDate": "2020-06-26T16:14:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwNDM5Mw==", "url": "https://github.com/apache/kafka/pull/8929#discussion_r446404393", "bodyText": "This could be final", "author": "abbccdda", "createdAt": "2020-06-26T20:52:07Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsMetadataState.java", "diffHunk": "@@ -50,7 +51,7 @@\n     private final HostInfo thisHost;\n     private List<StreamsMetadata> allMetadata = Collections.emptyList();\n     private Cluster clusterMetadata;\n-    private StreamsMetadata localMetadata;\n+    private AtomicReference<StreamsMetadata> localMetadata = new AtomicReference<>(null);", "originalCommit": "2c5f1080bd7d36a6392627eb0562a0e6d62d5a86", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "21ca71a4bb08ad17bd2ccdcdb61dce47f958d29e", "url": "https://github.com/apache/kafka/commit/21ca71a4bb08ad17bd2ccdcdb61dce47f958d29e", "message": "fixed localMetadata initialization", "committedDate": "2020-06-29T16:22:40Z", "type": "commit"}]}