{"pr_number": 8579, "pr_title": "KAFKA-9930: Prevent ReplicaFetcherThread from throwing UnknownTopicOrPartitionException upon topic creation and deletion.", "pr_createdAt": "2020-04-29T01:39:15Z", "pr_url": "https://github.com/apache/kafka/pull/8579", "timeline": [{"oid": "4fec8239c562fe176ec83a776aff36b5122e14f2", "url": "https://github.com/apache/kafka/commit/4fec8239c562fe176ec83a776aff36b5122e14f2", "message": "KAFKA-9930: Prevent ReplicaFetcherThread from throwing UnknownTopicOrPartitionException upon topic creation and deletion.\n\nWhen does UnknownTopicOrPartitionException typically occur?\n * Upon a topic creation, a follower broker of a new partition starts replica fetcher before the prospective leader broker of the new partition receives the leadership information from the controller (see KAFKA-6221).\n * Upon a topic deletion, a follower broker of a to-be-deleted partition starts replica fetcher after the leader broker of the to-be-deleted partition processes the deletion information from the controller.\n * As expected, clusters with frequent topic creation and deletion report UnknownTopicOrPartitionException with relatively higher frequency.\n\nWhat is the impact?\n * Exception tracking systems identify the error logs with UnknownTopicOrPartitionException as an exception. This results in a lot of noise for a transient issue that is expected to recover by itself and a natural process in Kafka due to its asynchronous state propagation.\n\nWhy not move it to a lower than warn-level log?\n * Despite typically being a transient issue, UnknownTopicOrPartitionException may also indicate real issues if it doesn't fix itself after a short period of time. To ensure detection of such scenarios, we set the log level to warn.", "committedDate": "2020-04-29T01:33:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA0NDg4Mg==", "url": "https://github.com/apache/kafka/pull/8579#discussion_r417044882", "bodyText": "Should it be info if we think this is expected? That would still show in the logs.", "author": "ijuma", "createdAt": "2020-04-29T03:16:44Z", "path": "core/src/main/scala/kafka/server/AbstractFetcherThread.scala", "diffHunk": "@@ -382,6 +382,11 @@ abstract class AbstractFetcherThread(name: String,\n                     \"that the partition is being moved\")\n                   partitionsWithError += topicPartition\n \n+                case Errors.UNKNOWN_TOPIC_OR_PARTITION =>\n+                  warn(s\"Remote broker does not host the partition $topicPartition, which could indicate \" +\n+                    \"that the partition is being created or deleted.\")", "originalCommit": "4fec8239c562fe176ec83a776aff36b5122e14f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2MDY4Mw==", "url": "https://github.com/apache/kafka/pull/8579#discussion_r417460683", "bodyText": "@ijuma I feel that info has an implicit implication that everything is \"fine\"; hence, I am concerned that it might be overlooked when investigating an issue.\nThe current broadcast-based approach in Kafka is just one way -- which arguably, has room for improvement -- of implementing state propagation for topic creation/deletion, and this error is a side-effect of it. Extended occurrence of this error can hamper the read/write availability as well as state consistency. Thus, even if UNKNOWN_TOPIC_OR_PARTITION is expected under the current design/implementation, it is definitely not desired.\nWhat are your thoughts?", "author": "efeg", "createdAt": "2020-04-29T16:46:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA0NDg4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzODEzNg==", "url": "https://github.com/apache/kafka/pull/8579#discussion_r419038136", "bodyText": "I think that relying on warnings in logs to detect propagation issues is difficult. We have metrics to indicate issues with failed replica fetches and such. Are those enough for these cases?", "author": "ijuma", "createdAt": "2020-05-03T02:55:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA0NDg4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgzMzM0NA==", "url": "https://github.com/apache/kafka/pull/8579#discussion_r419833344", "bodyText": "@ijuma Thanks for your reply!\nWe both agree that relying on warnings in logs to detect propagation issues is not practical -- metrics indeed should be used in \"detection\" of such issues.\nI believe the focus of this discussion is the investigation of detected issues.\nMetrics typically fail to provide the level of details to examine the interaction of various events in a distributed environment. Hence, in case we need to look at the logs for figuring out such cases, I claim that being able to grep warns and see undesired events is useful -- as opposed to trying to browse info logs for bad/undesirable events.\nNote that in trunk, such UNKNOWN_TOPIC_OR_PARTITION events are already printed in a stronger level (i.e. error).", "author": "efeg", "createdAt": "2020-05-05T02:32:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA0NDg4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA3MzUxOA==", "url": "https://github.com/apache/kafka/pull/8579#discussion_r432073518", "bodyText": "I still think that info would be a better log level for this. But let's get a second opinion from @junrao or @hachikuji.", "author": "ijuma", "createdAt": "2020-05-28T19:36:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA0NDg4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNjc2MA==", "url": "https://github.com/apache/kafka/pull/8579#discussion_r436406760", "bodyText": "I don't have a strong opinion on this one. I guess we would most likely see this in startup cases where the remote broker has just started and may not have gotten the full metadata yet. If we fixed that common case, then I think there would be a stronger case to change this to warn. Otherwise, we'd just learn to ignore them in spite of the higher level.", "author": "hachikuji", "createdAt": "2020-06-07T22:13:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA0NDg4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1MTg5Nw==", "url": "https://github.com/apache/kafka/pull/8579#discussion_r445751897", "bodyText": "If a broker is restarted, it typically doesn't have any leader replicas and won't receive follower requests. So, this is mostly related to topic creation/deletion. When there is topic creation/deletion, receiving transient UNKNOWN_TOPIC_OR_PARTITION is expected. But sustained UNKNOWN_TOPIC_OR_PARTITION is unexpected. So, perhaps we could keep the logging at WARN, but tweak the message a bit to sth like \"Receiving UNKNOWN_TOPIC_OR_PARTITION from the leader for partition XXXX. This can happen transiently if the partition is being created or deleted. However, this is unexpected if it sustains.\"", "author": "junrao", "createdAt": "2020-06-25T18:22:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA0NDg4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzMzg1Ng==", "url": "https://github.com/apache/kafka/pull/8579#discussion_r445833856", "bodyText": "@junrao @hachikuji @ijuma Thanks for the review!\nI updated the message as per Jun's recommendation -- please let me know if further changes needed.", "author": "efeg", "createdAt": "2020-06-25T20:57:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA0NDg4Mg=="}], "type": "inlineReview"}, {"oid": "a9e16f693de60b62da59175da8c61fd419c9a463", "url": "https://github.com/apache/kafka/commit/a9e16f693de60b62da59175da8c61fd419c9a463", "message": "[LI-HOTFIX] Address the feedback to clarify the log message.\nTICKET =\nLI_DESCRIPTION =\n\nEXIT_CRITERIA = MANUAL [\"\"]", "committedDate": "2020-06-25T20:14:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzNjU0OQ==", "url": "https://github.com/apache/kafka/pull/8579#discussion_r445936549", "bodyText": "Thanks for the update. I think the following reads a bit better and is a bit more consistent with the other messages:\ns\"Received ${Errors.UNKNOWN_TOPIC_OR_PARTITION} from the leader for partition $topicPartition. \" +\n\"This error may be returned transiently when the partition is being created or deleted, but it is not \" +\n\"expected to persist.\")", "author": "ijuma", "createdAt": "2020-06-26T02:30:51Z", "path": "core/src/main/scala/kafka/server/AbstractFetcherThread.scala", "diffHunk": "@@ -382,6 +382,12 @@ abstract class AbstractFetcherThread(name: String,\n                     \"that the partition is being moved\")\n                   partitionsWithError += topicPartition\n \n+                case Errors.UNKNOWN_TOPIC_OR_PARTITION =>\n+                  warn(s\"Receiving ${Errors.UNKNOWN_TOPIC_OR_PARTITION} from the leader for partition $topicPartition. \" +\n+                       s\"This can happen transiently if the partition is being created or deleted. \" +\n+                       s\"However, this is unexpected if it sustains.\")", "originalCommit": "a9e16f693de60b62da59175da8c61fd419c9a463", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyNzk1Mg==", "url": "https://github.com/apache/kafka/pull/8579#discussion_r446327952", "bodyText": "@ijuma thanks for the update -- let me know if further changes needed.", "author": "efeg", "createdAt": "2020-06-26T17:52:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzNjU0OQ=="}], "type": "inlineReview"}, {"oid": "dfd33e34af00bc4afa58980eff8cd0ad3161463e", "url": "https://github.com/apache/kafka/commit/dfd33e34af00bc4afa58980eff8cd0ad3161463e", "message": "Address the feedback.", "committedDate": "2020-06-26T17:49:51Z", "type": "commit"}]}