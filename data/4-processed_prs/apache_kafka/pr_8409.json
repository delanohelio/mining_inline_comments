{"pr_number": 8409, "pr_title": "KAFKA-6145: KIP-441 Pt. 6 Trigger probing rebalances until group is stable", "pr_createdAt": "2020-04-03T01:33:39Z", "pr_url": "https://github.com/apache/kafka/pull/8409", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAyNzQ4MA==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403027480", "bodyText": "Q: This does'nt seem to be used anywhere. Should it be removed?", "author": "cadonna", "createdAt": "2020-04-03T14:02:14Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -158,6 +158,7 @@ public String toString() {\n     @SuppressWarnings(\"deprecation\")\n     private org.apache.kafka.streams.processor.PartitionGrouper partitionGrouper;\n     private AtomicInteger assignmentErrorCode;\n+    private Optional<Long> nextProbingRebalanceMs;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzMzEwMA==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403233100", "bodyText": "Nope, but it should have been AtomicLong", "author": "ableegoldman", "createdAt": "2020-04-03T18:38:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAyNzQ4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAyODU1Mg==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403028552", "bodyText": "prop:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final boolean followupRebalanceNeeded = assignTasksToClients(allSourceTopics, partitionsForTask, topicGroups, clientMetadataMap, fullMetadata);\n          \n          \n            \n                    final boolean followupRebalanceNeeded = \n          \n          \n            \n                        assignTasksToClients(allSourceTopics, partitionsForTask, topicGroups, clientMetadataMap, fullMetadata);", "author": "cadonna", "createdAt": "2020-04-03T14:03:47Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -359,7 +361,7 @@ public GroupAssignment assign(final Cluster metadata, final GroupSubscription gr\n         final Map<TaskId, Set<TopicPartition>> partitionsForTask =\n             partitionGrouper.partitionGroups(sourceTopicsByGroup, fullMetadata);\n \n-        assignTasksToClients(allSourceTopics, partitionsForTask, topicGroups, clientMetadataMap, fullMetadata);\n+        final boolean followupRebalanceNeeded = assignTasksToClients(allSourceTopics, partitionsForTask, topicGroups, clientMetadataMap, fullMetadata);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAzOTMzNw==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403039337", "bodyText": "req: This comments is not correct anymore, isn't it? Please correct it.", "author": "cadonna", "createdAt": "2020-04-03T14:19:59Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -685,8 +688,9 @@ private void checkAllPartitions(final Set<String> allSourceTopics,\n     /**\n      * Assigns a set of tasks to each client (Streams instance) using the sticky assignor to prioritize clients\n      * based on the previous state and overall lag.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA0MzI2NQ==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403043265", "bodyText": "req: Those steps comment do not match the steps in the description of the method. Please make them match.", "author": "cadonna", "createdAt": "2020-04-03T14:25:39Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -359,7 +361,7 @@ public GroupAssignment assign(final Cluster metadata, final GroupSubscription gr\n         final Map<TaskId, Set<TopicPartition>> partitionsForTask =\n             partitionGrouper.partitionGroups(sourceTopicsByGroup, fullMetadata);\n \n-        assignTasksToClients(allSourceTopics, partitionsForTask, topicGroups, clientMetadataMap, fullMetadata);\n+        final boolean followupRebalanceNeeded = assignTasksToClients(allSourceTopics, partitionsForTask, topicGroups, clientMetadataMap, fullMetadata);\n \n         // ---------------- Step Three ---------------- //", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0OTU4NA==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403249584", "bodyText": "done", "author": "ableegoldman", "createdAt": "2020-04-03T19:01:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA0MzI2NQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0NzcyNA==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403247724", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            } else if (nextProbingRebalanceMs.get() < System.currentTimeMillis()) {\n          \n          \n            \n                            } else if (nextProbingRebalanceMs.get() < Time.milliseconds()) {\n          \n      \n    \n    \n  \n\nThis will let us control it in testing, which we should do.", "author": "vvcephei", "createdAt": "2020-04-03T18:59:29Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -554,6 +561,10 @@ private void runLoop() {\n                                  \"trigger a new rebalance.\");\n                     assignmentErrorCode.set(AssignorError.NONE.code());\n                     mainConsumer.enforceRebalance();\n+                } else if (nextProbingRebalanceMs.get() < System.currentTimeMillis()) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0ODU0MA==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403248540", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            \"rebalance to probe for newly aught-up clients\");\n          \n          \n            \n                                            \"rebalance to probe for newly caught-up clients\");\n          \n      \n    \n    \n  \n\n\"aught\" is so 2000s.", "author": "vvcephei", "createdAt": "2020-04-03T19:00:26Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -554,6 +561,10 @@ private void runLoop() {\n                                  \"trigger a new rebalance.\");\n                     assignmentErrorCode.set(AssignorError.NONE.code());\n                     mainConsumer.enforceRebalance();\n+                } else if (nextProbingRebalanceMs.get() < System.currentTimeMillis()) {\n+                    log.info(\"The probing rebalance interval has elapsed since the last rebalance, triggering a \" +\n+                                \"rebalance to probe for newly aught-up clients\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI4MjMxNw==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403282317", "bodyText": "Ideally, we'd use the Time#milliseconds() here instead of System.currentTimeMillis(), but you'd have to pass the time instance in through configure. It would aid in testability, but it's not strictly necessary. I'll leave it to you.", "author": "vvcephei", "createdAt": "2020-04-03T19:52:41Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -952,51 +971,66 @@ private void addClientAssignments(final Map<String, Assignment> assignment,\n             final List<TopicPartition> activePartitionsList = new ArrayList<>();\n             final List<TaskId> assignedActiveList = new ArrayList<>();\n \n-            populateActiveTaskAndPartitionsLists(\n+            if (populateActiveTaskAndPartitionsLists(\n                 activePartitionsList,\n                 assignedActiveList,\n                 consumer,\n                 clientMetadata.state,\n                 activeTasksForConsumer,\n                 partitionsForTask,\n-                allOwnedPartitions\n-            );\n+                allOwnedPartitions)) {\n+                stableAssignment = false;\n+            }\n \n             final Map<TaskId, Set<TopicPartition>> standbyTaskMap =\n                 buildStandbyTaskMap(standbyTaskAssignments.get(consumer), partitionsForTask);\n \n+            final AssignmentInfo info = new AssignmentInfo(\n+                minUserMetadataVersion,\n+                minSupportedMetadataVersion,\n+                assignedActiveList,\n+                standbyTaskMap,\n+                partitionsByHostState,\n+                standbyPartitionsByHost,\n+                AssignorError.NONE.code()\n+            );\n+\n+            if (encodeNextRebalanceTime) {\n+                final long nextRebalanceTimeMs = System.currentTimeMillis() + probingRebalanceIntervalMs();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2MTg3OA==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403361878", "bodyText": "Seems worth it", "author": "ableegoldman", "createdAt": "2020-04-03T22:14:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI4MjMxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI4NDIwOA==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403284208", "bodyText": "Por favor, else { \"Finished unstable assignment of tasks. Followup rebalance is scheduled for {time}.\" }", "author": "vvcephei", "createdAt": "2020-04-03T19:55:04Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -952,51 +971,66 @@ private void addClientAssignments(final Map<String, Assignment> assignment,\n             final List<TopicPartition> activePartitionsList = new ArrayList<>();\n             final List<TaskId> assignedActiveList = new ArrayList<>();\n \n-            populateActiveTaskAndPartitionsLists(\n+            if (populateActiveTaskAndPartitionsLists(\n                 activePartitionsList,\n                 assignedActiveList,\n                 consumer,\n                 clientMetadata.state,\n                 activeTasksForConsumer,\n                 partitionsForTask,\n-                allOwnedPartitions\n-            );\n+                allOwnedPartitions)) {\n+                stableAssignment = false;\n+            }\n \n             final Map<TaskId, Set<TopicPartition>> standbyTaskMap =\n                 buildStandbyTaskMap(standbyTaskAssignments.get(consumer), partitionsForTask);\n \n+            final AssignmentInfo info = new AssignmentInfo(\n+                minUserMetadataVersion,\n+                minSupportedMetadataVersion,\n+                assignedActiveList,\n+                standbyTaskMap,\n+                partitionsByHostState,\n+                standbyPartitionsByHost,\n+                AssignorError.NONE.code()\n+            );\n+\n+            if (encodeNextRebalanceTime) {\n+                final long nextRebalanceTimeMs = System.currentTimeMillis() + probingRebalanceIntervalMs();\n+                encodeNextRebalanceTime = false;\n+                info.setNextRebalanceTime(nextRebalanceTimeMs);\n+            }\n+\n             // finally, encode the assignment and insert into map with all assignments\n             assignment.put(\n                 consumer,\n                 new Assignment(\n                     activePartitionsList,\n-                    new AssignmentInfo(\n-                        minUserMetadataVersion,\n-                        minSupportedMetadataVersion,\n-                        assignedActiveList,\n-                        standbyTaskMap,\n-                        partitionsByHostState,\n-                        standbyPartitionsByHost,\n-                        AssignorError.NONE.code()\n-                    ).encode()\n+                    info.encode()\n                 )\n             );\n         }\n+\n+        if (stableAssignment) {\n+            log.info(\"Finished stable assignment of tasks, no followup rebalances required.\");\n+        }", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2Mjg4Ng==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403362886", "bodyText": "It doesn't make sense to add the time here, as the assignment can be \"unstable\" for other reasons (partitions to be revoked, version probing). But we can log the time if it is a probing rebalance, and just say \"unstable assignment\" here", "author": "ableegoldman", "createdAt": "2020-04-03T22:17:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI4NDIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxNzczNA==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r404417734", "bodyText": "Sounds good. The time thing was just me playing jazz. The main thing was that it seems asymmetrical to only log when we do a stable assignment; it seems nice as an operator to also see that we finished an unstable assignment and that we'll stabilize it later.", "author": "vvcephei", "createdAt": "2020-04-06T22:07:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI4NDIwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI5NTMxMw==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403295313", "bodyText": "I'm wondering if we can avoid encoding this for the common case where there is no \"next rebalance time\". Do you have thoughts on the subject?", "author": "vvcephei", "createdAt": "2020-04-03T20:09:41Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/AssignmentInfo.java", "diffHunk": "@@ -328,13 +344,21 @@ public static AssignmentInfo decode(final ByteBuffer data) {\n                     assignmentInfo.errCode = in.readInt();\n                     break;\n                 case 6:\n+                    commonlySupportedVersion = in.readInt();\n+                    assignmentInfo = new AssignmentInfo(usedVersion, commonlySupportedVersion);\n+                    decodeActiveTasks(assignmentInfo, in);\n+                    decodeStandbyTasks(assignmentInfo, in);\n+                    decodeActiveAndStandbyHostPartitions(assignmentInfo, in);\n+                    assignmentInfo.errCode = in.readInt();\n+                    break;\n                 case 7:\n                     commonlySupportedVersion = in.readInt();\n                     assignmentInfo = new AssignmentInfo(usedVersion, commonlySupportedVersion);\n                     decodeActiveTasks(assignmentInfo, in);\n                     decodeStandbyTasks(assignmentInfo, in);\n                     decodeActiveAndStandbyHostPartitions(assignmentInfo, in);\n                     assignmentInfo.errCode = in.readInt();\n+                    assignmentInfo.nextRebalanceMs = in.readLong();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2Nzg3Mg==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403367872", "bodyText": "I think it's only worth doing if we don't intend to switch over to generated protocol code for the AssignmnentInfo anytime soon. I'm pretty sure it's not possible to accomplish this in the json schema, so it would be a short lived optimization and/or require us to bump the protocol version unnecessarily once we do switch over.", "author": "ableegoldman", "createdAt": "2020-04-03T22:34:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI5NTMxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2OTI4Mg==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403369282", "bodyText": "Of course, we don't have to move the AssignmentInfo to generated code as well (although imo it's a bit weird to do it for the subscription but not the assignment). Or we could probably just add support for this ourselves at some later point.\nDo you think we should try and save these 8 bytes per assignment?", "author": "ableegoldman", "createdAt": "2020-04-03T22:38:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI5NTMxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxODY2Nw==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r404418667", "bodyText": "Yeah, this is a good reason to hold off. We can always bump the version later to try a different encoding.", "author": "vvcephei", "createdAt": "2020-04-06T22:09:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI5NTMxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMwMDYzMA==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403300630", "bodyText": "Am I right in thinking that all that happened to these older ones is that you added line breaks?\nCan we do that in a later PR that doesn't also change the production logic, so it's easier to see that we're not invalidating the tests here? I.e., it's suspicious to change regression tests while you're changing the logic the regression tests would be checking.", "author": "vvcephei", "createdAt": "2020-04-03T20:17:05Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/AssignmentInfoTest.java", "diffHunk": "@@ -88,47 +88,63 @@ public void shouldThrowForUnknownVersion2() {\n \n     @Test\n     public void shouldEncodeAndDecodeVersion1() {\n-        final AssignmentInfo info = new AssignmentInfo(1, activeTasks, standbyTasks, activeAssignment, standbyAssignment, 0);\n-        final AssignmentInfo expectedInfo = new AssignmentInfo(1, UNKNOWN, activeTasks, standbyTasks, Collections.emptyMap(), Collections.emptyMap(), 0);\n+        final AssignmentInfo info =\n+            new AssignmentInfo(1, activeTasks, standbyTasks, activeAssignment, standbyAssignment, 0);\n+        final AssignmentInfo expectedInfo =\n+            new AssignmentInfo(1, UNKNOWN, activeTasks, standbyTasks, Collections.emptyMap(), Collections.emptyMap(), 0);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2OTU4OQ==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r403369589", "bodyText": "Yeah it's just fixing the spacing, I'll remove it", "author": "ableegoldman", "createdAt": "2020-04-03T22:39:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMwMDYzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxODgzMA==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r404418830", "bodyText": "Thanks!", "author": "vvcephei", "createdAt": "2020-04-06T22:09:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMwMDYzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDczOTUyMQ==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r404739521", "bodyText": "prop:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    consumerConfigs.put(InternalConfig.TIME, time);\n          \n          \n            \n                    consumerConfigs.put(StreamsConfig.InternalConfig.TIME, time);", "author": "cadonna", "createdAt": "2020-04-07T11:34:15Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -365,11 +368,14 @@ public static StreamThread create(final InternalTopologyBuilder builder,\n         log.info(\"Creating consumer client\");\n         final String applicationId = config.getString(StreamsConfig.APPLICATION_ID_CONFIG);\n         final Map<String, Object> consumerConfigs = config.getMainConsumerConfigs(applicationId, getConsumerClientId(threadId), threadIdx);\n+        consumerConfigs.put(InternalConfig.TIME, time);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0NDk1NQ==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r404744955", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *    they have been created with the right number of partitions. also verify and/or create\n          \n          \n            \n                 *    they have been created with the right number of partitions. Also verify and/or create", "author": "cadonna", "createdAt": "2020-04-07T11:44:54Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -252,22 +258,18 @@ public ByteBuffer subscriptionUserData(final Set<String> topics) {\n     /*\n      * This assigns tasks to consumer clients in the following steps.\n      *\n-     * 0. check all repartition source topics and use internal topic manager to make sure\n-     *    they have been created with the right number of partitions.\n+     * 0. decode the subscriptions to assemble the metadata for each client and check for version probing\n+     *\n+     * 1. check all repartition source topics and use internal topic manager to make sure\n+     *    they have been created with the right number of partitions. also verify and/or create", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1MzY0NQ==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r404753645", "bodyText": "prop: Please fix indentation of parameters.", "author": "cadonna", "createdAt": "2020-04-07T12:01:39Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -683,10 +687,10 @@ private void checkAllPartitions(final Set<String> allSourceTopics,\n     }\n \n     /**\n-     * Assigns a set of tasks to each client (Streams instance) using the sticky assignor to prioritize clients\n-     * based on the previous state and overall lag.\n+     * Assigns a set of tasks to each client (Streams instance) using the configured task assignor\n+     * @return true if a followup rebalance should be triggered\n      */\n-    private void assignTasksToClients(final Set<String> allSourceTopics,\n+    private boolean assignTasksToClients(final Set<String> allSourceTopics,", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1Nzk0NA==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r404757944", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (populateActiveTaskAndPartitionsLists(\n          \n          \n            \n                            activePartitionsList,\n          \n          \n            \n                            assignedActiveList,\n          \n          \n            \n                            consumer,\n          \n          \n            \n                            clientMetadata.state,\n          \n          \n            \n                            activeTasksForConsumer,\n          \n          \n            \n                            partitionsForTask,\n          \n          \n            \n                        if (populateActiveTaskAndPartitionsLists(\n          \n          \n            \n                                activePartitionsList,\n          \n          \n            \n                                assignedActiveList,\n          \n          \n            \n                                consumer,\n          \n          \n            \n                                clientMetadata.state,\n          \n          \n            \n                                activeTasksForConsumer,\n          \n          \n            \n                                partitionsForTask,", "author": "cadonna", "createdAt": "2020-04-07T12:09:51Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -952,51 +974,69 @@ private void addClientAssignments(final Map<String, Assignment> assignment,\n             final List<TopicPartition> activePartitionsList = new ArrayList<>();\n             final List<TaskId> assignedActiveList = new ArrayList<>();\n \n-            populateActiveTaskAndPartitionsLists(\n+            if (populateActiveTaskAndPartitionsLists(\n                 activePartitionsList,\n                 assignedActiveList,\n                 consumer,\n                 clientMetadata.state,\n                 activeTasksForConsumer,\n                 partitionsForTask,", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc1ODQ4Nw==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r404758487", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            allOwnedPartitions)) {\n          \n          \n            \n                                allOwnedPartitions\n          \n          \n            \n                            )) {", "author": "cadonna", "createdAt": "2020-04-07T12:10:49Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -952,51 +974,69 @@ private void addClientAssignments(final Map<String, Assignment> assignment,\n             final List<TopicPartition> activePartitionsList = new ArrayList<>();\n             final List<TaskId> assignedActiveList = new ArrayList<>();\n \n-            populateActiveTaskAndPartitionsLists(\n+            if (populateActiveTaskAndPartitionsLists(\n                 activePartitionsList,\n                 assignedActiveList,\n                 consumer,\n                 clientMetadata.state,\n                 activeTasksForConsumer,\n                 partitionsForTask,\n-                allOwnedPartitions\n-            );\n+                allOwnedPartitions)) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3NTMyMA==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r404775320", "bodyText": "req: Could you please add unit tests for these two methods? I am aware that there isn't even a AssignorConfigurationTest class (which makes me a bit sad ;-)). We can add the unit tests for the other methods in a separate PR.", "author": "cadonna", "createdAt": "2020-04-07T12:39:20Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/AssignorConfiguration.java", "diffHunk": "@@ -186,6 +189,44 @@ public AtomicInteger getAssignmentErrorCode(final Map<String, ?> configs) {\n         return (AtomicInteger) ai;\n     }\n \n+    public AtomicLong getNextProbingRebalanceMs(final Map<String, ?> configs) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc4MDIzNw==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r404780237", "bodyText": "req: Please add a test that calls StreamThread#create() with a custom KafkaClientSupplier that provides a mock consumer and verify that the internal config is set.", "author": "cadonna", "createdAt": "2020-04-07T12:47:06Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -365,11 +368,14 @@ public static StreamThread create(final InternalTopologyBuilder builder,\n         log.info(\"Creating consumer client\");\n         final String applicationId = config.getString(StreamsConfig.APPLICATION_ID_CONFIG);\n         final Map<String, Object> consumerConfigs = config.getMainConsumerConfigs(applicationId, getConsumerClientId(threadId), threadIdx);\n+        consumerConfigs.put(InternalConfig.TIME, time);\n         consumerConfigs.put(StreamsConfig.InternalConfig.TASK_MANAGER_FOR_PARTITION_ASSIGNOR, taskManager);\n         consumerConfigs.put(StreamsConfig.InternalConfig.STREAMS_METADATA_STATE_FOR_PARTITION_ASSIGNOR, streamsMetadataState);\n         consumerConfigs.put(StreamsConfig.InternalConfig.STREAMS_ADMIN_CLIENT, adminClient);\n         final AtomicInteger assignmentErrorCode = new AtomicInteger();\n         consumerConfigs.put(StreamsConfig.InternalConfig.ASSIGNMENT_ERROR_CODE, assignmentErrorCode);\n+        final AtomicLong nextProbingRebalanceMs = new AtomicLong(Long.MAX_VALUE);\n+        consumerConfigs.put(StreamsConfig.InternalConfig.NEXT_PROBING_REBALANCE_MS, nextProbingRebalanceMs);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyMzk4NQ==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r405123985", "bodyText": "This feels a bit out of scope, since we don't currently have any tests that verify StreamThread#create(). Also, failing to set this attribute would instantly break all of our integration tests, since the consumer wouldn't be able to instantiate the assignor.\nNot saying it wouldn't be valuable to have a unit test for it, but maybe we can call this one a follow-on task.", "author": "vvcephei", "createdAt": "2020-04-07T21:28:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc4MDIzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMzOTk0Mg==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r405339942", "bodyText": "Agreed", "author": "cadonna", "createdAt": "2020-04-08T08:15:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc4MDIzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc4OTI2Mw==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r404789263", "bodyText": "req: I guess you could also verify this with a mock consumer.", "author": "cadonna", "createdAt": "2020-04-07T13:00:49Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -554,6 +563,10 @@ private void runLoop() {\n                                  \"trigger a new rebalance.\");\n                     assignmentErrorCode.set(AssignorError.NONE.code());\n                     mainConsumer.enforceRebalance();\n+                } else if (nextProbingRebalanceMs.get() < time.milliseconds()) {\n+                    log.info(\"The probing rebalance interval has elapsed since the last rebalance, triggering a \" +\n+                                \"rebalance to probe for newly caught-up clients\");\n+                    mainConsumer.enforceRebalance();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2MzczNw==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r405163737", "bodyText": "added shouldEnforceRebalanceAfterNextScheduledProbingRebalanceTime", "author": "ableegoldman", "createdAt": "2020-04-07T23:03:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc4OTI2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc5MTA3Mw==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r404791073", "bodyText": "super-nit: nextRebalanceTimeShouldBeMxValueByDefault() -> nextRebalanceTimeShouldBeMaxValueByDefault()", "author": "cadonna", "createdAt": "2020-04-07T13:03:35Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/AssignmentInfoTest.java", "diffHunk": "@@ -142,4 +152,23 @@ public void shouldEncodeAndDecodeSmallerCommonlySupportedVersion() {\n             activeAssignment, Collections.emptyMap(), 2);\n         assertEquals(expectedInfo, AssignmentInfo.decode(info.encode()));\n     }\n+\n+    @Test\n+    public void nextRebalanceTimeShouldBeMxValueByDefault() {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2cade0406e2d8ea1e3b10477eea22aea732c673d", "url": "https://github.com/apache/kafka/commit/2cade0406e2d8ea1e3b10477eea22aea732c673d", "message": "log stable assignmnet", "committedDate": "2020-04-08T01:51:48Z", "type": "commit"}, {"oid": "bcd28772fd27366bb58fd31ff793b7bfe88a73d9", "url": "https://github.com/apache/kafka/commit/bcd28772fd27366bb58fd31ff793b7bfe88a73d9", "message": "add config for rebalance time", "committedDate": "2020-04-08T01:51:48Z", "type": "commit"}, {"oid": "45303d6959b8ff00b507cd59015e3d59efc16ab2", "url": "https://github.com/apache/kafka/commit/45303d6959b8ff00b507cd59015e3d59efc16ab2", "message": "optional casting", "committedDate": "2020-04-08T01:51:48Z", "type": "commit"}, {"oid": "579a0c014ca25c80b7b808ed03816390d830c9e5", "url": "https://github.com/apache/kafka/commit/579a0c014ca25c80b7b808ed03816390d830c9e5", "message": "checkstyle", "committedDate": "2020-04-08T01:51:48Z", "type": "commit"}, {"oid": "f2d8148137c5c5f7f753d599270bafd3c6c9f4f5", "url": "https://github.com/apache/kafka/commit/f2d8148137c5c5f7f753d599270bafd3c6c9f4f5", "message": "fix test", "committedDate": "2020-04-08T01:51:48Z", "type": "commit"}, {"oid": "c95a096ccb250d3204b6a3141d89810a2b8baea4", "url": "https://github.com/apache/kafka/commit/c95a096ccb250d3204b6a3141d89810a2b8baea4", "message": "add to test", "committedDate": "2020-04-08T01:51:48Z", "type": "commit"}, {"oid": "d1940c91eaa9dac27dfedd71846acee33c3672fa", "url": "https://github.com/apache/kafka/commit/d1940c91eaa9dac27dfedd71846acee33c3672fa", "message": "only trigger rebalance on failed fetch end offsets when HA is enabled", "committedDate": "2020-04-08T01:51:48Z", "type": "commit"}, {"oid": "060cc5e8e548a196ec240be69befe1209f75787a", "url": "https://github.com/apache/kafka/commit/060cc5e8e548a196ec240be69befe1209f75787a", "message": "repalce Optional with AtomicLong", "committedDate": "2020-04-08T01:51:48Z", "type": "commit"}, {"oid": "b5fb66c564f3e41b407daa52fcd78e7af03a2a57", "url": "https://github.com/apache/kafka/commit/b5fb66c564f3e41b407daa52fcd78e7af03a2a57", "message": "fix SPAT", "committedDate": "2020-04-08T01:51:48Z", "type": "commit"}, {"oid": "b42b1b57f92893b72561117389c5868853f5add5", "url": "https://github.com/apache/kafka/commit/b42b1b57f92893b72561117389c5868853f5add5", "message": "github comments", "committedDate": "2020-04-08T01:51:48Z", "type": "commit"}, {"oid": "672366a1eb6a7da4e246cd46932a40346e7b742a", "url": "https://github.com/apache/kafka/commit/672366a1eb6a7da4e246cd46932a40346e7b742a", "message": "github comments, add test", "committedDate": "2020-04-08T01:51:48Z", "type": "commit"}, {"oid": "6240f69b3ae5dc7de8fee167f900aa6369ef3066", "url": "https://github.com/apache/kafka/commit/6240f69b3ae5dc7de8fee167f900aa6369ef3066", "message": "formatting/wording suggestions", "committedDate": "2020-04-08T01:51:48Z", "type": "commit"}, {"oid": "ea6382a68f4d4279e74ac81e2f72137404b06af2", "url": "https://github.com/apache/kafka/commit/ea6382a68f4d4279e74ac81e2f72137404b06af2", "message": "add new assignorConfiguration configs test", "committedDate": "2020-04-08T01:51:48Z", "type": "commit"}, {"oid": "00cc2287194a255d9de97cd3047aef4e3ca94d62", "url": "https://github.com/apache/kafka/commit/00cc2287194a255d9de97cd3047aef4e3ca94d62", "message": "add test to verify enforceRebalance", "committedDate": "2020-04-08T01:51:48Z", "type": "commit"}, {"oid": "51cf963d8b8817cf7f617356b55fdfe1459a0760", "url": "https://github.com/apache/kafka/commit/51cf963d8b8817cf7f617356b55fdfe1459a0760", "message": "merge with trunk and fix", "committedDate": "2020-04-08T01:53:55Z", "type": "commit"}, {"oid": "51cf963d8b8817cf7f617356b55fdfe1459a0760", "url": "https://github.com/apache/kafka/commit/51cf963d8b8817cf7f617356b55fdfe1459a0760", "message": "merge with trunk and fix", "committedDate": "2020-04-08T01:53:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NTY2NA==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r405355664", "bodyText": "I was more thinking about a separate unit test class AssignorConfigurationTest with a more thorough testing of all code paths, but if we feel that this should also be a follow up task, that is also fine with me.", "author": "cadonna", "createdAt": "2020-04-08T08:40:51Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1845,6 +1845,28 @@ public void shouldSetAdminClientTimeout() {\n         assertThat(assignorConfiguration.getAdminClientTimeout(), is(2 * 60 * 1000));\n     }\n \n+    @Test\n+    public void shouldGetNextProbingRebalanceMs() {\n+        nextProbingRebalanceMs.set(5 * 60 * 1000L);\n+\n+        createDefaultMockTaskManager();\n+        final Map<String, Object> props = configProps();\n+        final AssignorConfiguration assignorConfiguration = new AssignorConfiguration(props);\n+\n+        assertThat(assignorConfiguration.getNextProbingRebalanceMs(props).get(), equalTo(5 * 60 * 1000L));\n+    }\n+\n+    @Test\n+    public void shouldGetTime() {\n+        time.setCurrentTimeMs(Long.MAX_VALUE);\n+\n+        createDefaultMockTaskManager();\n+        final Map<String, Object> props = configProps();\n+        final AssignorConfiguration assignorConfiguration = new AssignorConfiguration(props);\n+\n+        assertThat(assignorConfiguration.getTime(props).milliseconds(), equalTo(Long.MAX_VALUE));\n+    }\n+", "originalCommit": "51cf963d8b8817cf7f617356b55fdfe1459a0760", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMTM2Mw==", "url": "https://github.com/apache/kafka/pull/8409#discussion_r405711363", "bodyText": "Thanks for pointing these out, @cadonna .", "author": "vvcephei", "createdAt": "2020-04-08T18:00:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NTY2NA=="}], "type": "inlineReview"}]}