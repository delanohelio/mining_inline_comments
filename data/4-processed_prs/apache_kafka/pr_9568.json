{"pr_number": 9568, "pr_title": "KAFKA-10689: fix windowed FKJ topology and put checks in assignor to avoid infinite loops", "pr_createdAt": "2020-11-06T01:24:58Z", "pr_url": "https://github.com/apache/kafka/pull/9568", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUzMTcxMA==", "url": "https://github.com/apache/kafka/pull/9568#discussion_r522531710", "bodyText": "Would it be easier to do\n  if (!progressMadeThisIteration) {\n    throw new TaskAssignmentException(\"Failed to compute number of partitions for all repartition topics\");\n  }\n} while (numPartitionsNeeded);\n\n(and don't have the if (numPartitionsNeeded) after the while loop)\nI guess both is correct and it might be a matter of taste. Also don't have a strong opinion about it. It's just an idea.", "author": "mjsax", "createdAt": "2020-11-13T00:45:23Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -575,17 +577,22 @@ private void setRepartitionTopicMetadataNumberOfPartitions(final Map<String, Int\n                             }\n                         }\n \n-                        // if we still have not found the right number of partitions,\n-                        // another iteration is needed\n                         if (numPartitions == null) {\n                             numPartitionsNeeded = true;\n+                            log.trace(\"Unable to determine number of partitions for {}, another iteration is needed\",\n+                                      repartitionSourceTopic);\n                         } else {\n-                            repartitionTopicMetadata.get(topicName).setNumberOfPartitions(numPartitions);\n+                            repartitionTopicMetadata.get(repartitionSourceTopic).setNumberOfPartitions(numPartitions);\n+                            progressMadeThisIteration = true;\n                         }\n                     }\n                 }\n             }\n-        } while (numPartitionsNeeded);\n+        } while (numPartitionsNeeded && progressMadeThisIteration);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU5MTY0NQ==", "url": "https://github.com/apache/kafka/pull/9568#discussion_r522591645", "bodyText": "Mm yeah that does sound cleaner, will do", "author": "ableegoldman", "createdAt": "2020-11-13T03:31:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUzMTcxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUzMTgwMg==", "url": "https://github.com/apache/kafka/pull/9568#discussion_r522531802", "bodyText": "Do we need this commet?", "author": "mjsax", "createdAt": "2020-11-13T00:45:44Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java", "diffHunk": "@@ -135,6 +141,37 @@ private Admin createAdminClient() {\n         return Admin.create(adminClientConfig);\n     }\n \n+    /*\n+     * This test just ensures that that the assignor does not get stuck during partition number resolution\n+     *  for internal repartition topics. See KAFKA-10689\n+     */", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU5NDkzMw==", "url": "https://github.com/apache/kafka/pull/9568#discussion_r522594933", "bodyText": "I'd prefer to leave it in because otherwise the test looks totally out of place and doesn't seem to test anything. Historical context can be useful \ud83d\ude42", "author": "ableegoldman", "createdAt": "2020-11-13T03:44:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUzMTgwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU5NTU0Mw==", "url": "https://github.com/apache/kafka/pull/9568#discussion_r522595543", "bodyText": "To quote a very salty developer in the comments of the leaked Windows Media Player source code:\n/* The reason for requiring the following test is now lost\n         * in the mists of time.  Now this app is 32-bit, these\n         * bogus timer callbacks (if they really do still occur)\n         * could be 16-bit, so we need to add yet more ugliness\n         * in the form of assembler to an app which is already\n         * hardly a paragon of pulchritude.\n         *\n         * A plea:\n         *\n         * If you add some obscure code such as below, to this or\n         * any other app, even if it has only the teeniest chance\n         * of being less blindingly obvious to someone else than\n         * it is to you at the time of writing, please please please\n         * add a f***ing comment.\n         *\n         * Respectfully,\n         * A Developer\n         */\n\n\ud83d\ude02", "author": "ableegoldman", "createdAt": "2020-11-13T03:47:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUzMTgwMg=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "ffd1982a59d80fa7e14a92ee1179c2b9db974e0e", "url": "https://github.com/apache/kafka/commit/ffd1982a59d80fa7e14a92ee1179c2b9db974e0e", "message": "fix logic in StreamSinkNode", "committedDate": "2020-11-13T22:38:50Z", "type": "commit"}, {"oid": "d23a66a408a121e3480a9e3bddba02f0ad187510", "url": "https://github.com/apache/kafka/commit/d23a66a408a121e3480a9e3bddba02f0ad187510", "message": "minor renamings in SPA", "committedDate": "2020-11-13T22:38:50Z", "type": "commit"}, {"oid": "18ad4aac7af9efdedabdf3c3bfd5d89d9ab56b7d", "url": "https://github.com/apache/kafka/commit/18ad4aac7af9efdedabdf3c3bfd5d89d9ab56b7d", "message": "add integration test", "committedDate": "2020-11-13T22:38:50Z", "type": "commit"}, {"oid": "949e59d1fe677decaa695aa3a35e80f363170b35", "url": "https://github.com/apache/kafka/commit/949e59d1fe677decaa695aa3a35e80f363170b35", "message": "break loop if not making progress, add unit test for SPA", "committedDate": "2020-11-13T22:38:50Z", "type": "commit"}, {"oid": "10c0fd9ca268dad72dfecfe16e3e8040b49dee17", "url": "https://github.com/apache/kafka/commit/10c0fd9ca268dad72dfecfe16e3e8040b49dee17", "message": "ClassFanOutComplexity violation", "committedDate": "2020-11-13T22:38:51Z", "type": "commit"}, {"oid": "527e219ea0fafec5a7a96f92f98894ac2d3519c4", "url": "https://github.com/apache/kafka/commit/527e219ea0fafec5a7a96f92f98894ac2d3519c4", "message": "review suggestion", "committedDate": "2020-11-14T00:10:14Z", "type": "commit"}, {"oid": "ab43672abe356c775fa2d5c6a7bde4cb0c00b0a3", "url": "https://github.com/apache/kafka/commit/ab43672abe356c775fa2d5c6a7bde4cb0c00b0a3", "message": "fix condition", "committedDate": "2020-11-14T00:12:25Z", "type": "commit"}, {"oid": "ab43672abe356c775fa2d5c6a7bde4cb0c00b0a3", "url": "https://github.com/apache/kafka/commit/ab43672abe356c775fa2d5c6a7bde4cb0c00b0a3", "message": "fix condition", "committedDate": "2020-11-14T00:12:25Z", "type": "forcePushed"}]}