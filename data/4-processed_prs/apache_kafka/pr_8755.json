{"pr_number": 8755, "pr_title": "KAFKA-10069: Correctly remove user-defined \"predicate\" and \"negate\" configs from transformation properties", "pr_createdAt": "2020-05-29T15:15:47Z", "pr_url": "https://github.com/apache/kafka/pull/8755", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2ODE0Ng==", "url": "https://github.com/apache/kafka/pull/8755#discussion_r432568146", "bodyText": "I think we should assert that the \"predicate\" and \"negate\" config were the implicit ones and not the ones defined by HasDuplicateConfigTransformation. I guess we could do this by having HasDuplicateConfigTransformation's configs use different types (\"negate is BOOLEAN in both) and then asserting the expected types.", "author": "tombentley", "createdAt": "2020-05-29T15:36:19Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ConnectorConfigTest.java", "diffHunk": "@@ -434,5 +436,56 @@ public void configure(Map<String, ?> configs) {\n         }\n     }\n \n+    @Test\n+    public void testConfigDefOverrideByInitialConfigDef() {\n+        String alias = \"hdt\";\n+        String prefix = ConnectorConfig.TRANSFORMS_CONFIG + \".\" + alias + \".\";\n+        Map<String, String> props = new HashMap<>();\n+        props.put(ConnectorConfig.TRANSFORMS_CONFIG, alias);\n+        props.put(prefix + \"type\", HasDuplicateConfigTransformation.class.getName());\n+        ConfigDef def = ConnectorConfig.enrich(MOCK_PLUGINS,\n+                new ConfigDef(),\n+                props,\n+                false);\n+        Arrays.asList(PredicatedTransformation.PREDICATE_CONFIG,\n+                PredicatedTransformation.NEGATE_CONFIG,\n+                HasDuplicateConfigTransformation.MUST_EXIST_KEY)\n+                .forEach(key -> {\n+                    Assert.assertNotNull(def.configKeys().get(prefix + key));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU3MjA1OA==", "url": "https://github.com/apache/kafka/pull/8755#discussion_r432572058", "bodyText": "will roger that", "author": "chia7712", "createdAt": "2020-05-29T15:42:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2ODE0Ng=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwNDMxNQ==", "url": "https://github.com/apache/kafka/pull/8755#discussion_r432604315", "bodyText": "There are already static imports for some Assert methods, so no reason not to make assertNull and assertNotNull static imports too.\nAnd I don't think the asList()/forEach() are really providing much benefit here. It would be clearer if you factored out a method:\n        assertNotNull(def.configKeys().get(prefix + HasDuplicateConfigTransformation.MUST_EXIST_KEY));\n        assertNull(def.configKeys().get(HasDuplicateConfigTransformation.MUST_EXIST_KEY));\n        assertImplicitConfigDef(def, prefix, PredicatedTransformation.PREDICATE_CONFIG, ConfigDef.Type.STRING);\n        assertImplicitConfigDef(def, prefix, PredicatedTransformation.NEGATE_CONFIG, ConfigDef.Type.BOOLEAN);\n    }\n\n    private void assertImplicitConfigDef(ConfigDef def, String prefix, String keyName, ConfigDef.Type expectedType) {\n        assertNull(def.configKeys().get(keyName));\n        ConfigDef.ConfigKey configKey = def.configKeys().get(prefix + keyName);\n        assertNotNull(\"Implicit '\" + prefix + keyName + \"' config must be present\", configKey);\n        assertEquals(\"Implicit '\" + prefix + keyName + \"' config should be a \" + expectedType,\n                expectedType, configKey.type);\n    }", "author": "tombentley", "createdAt": "2020-05-29T16:38:19Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ConnectorConfigTest.java", "diffHunk": "@@ -434,5 +436,63 @@ public void configure(Map<String, ?> configs) {\n         }\n     }\n \n+    @Test\n+    public void testConfigDefOverrideByInitialConfigDef() {\n+        String alias = \"hdt\";\n+        String prefix = ConnectorConfig.TRANSFORMS_CONFIG + \".\" + alias + \".\";\n+        Map<String, String> props = new HashMap<>();\n+        props.put(ConnectorConfig.TRANSFORMS_CONFIG, alias);\n+        props.put(prefix + \"type\", HasDuplicateConfigTransformation.class.getName());\n+        ConfigDef def = ConnectorConfig.enrich(MOCK_PLUGINS,\n+                new ConfigDef(),\n+                props,\n+                false);\n+\n+        Arrays.asList(PredicatedTransformation.PREDICATE_CONFIG,\n+                PredicatedTransformation.NEGATE_CONFIG,\n+                HasDuplicateConfigTransformation.MUST_EXIST_KEY)\n+                .forEach(key -> {\n+                    Assert.assertNotNull(def.configKeys().get(prefix + key));\n+                    Assert.assertNull(def.configKeys().get(key));\n+                });\n+\n+        Arrays.asList(PredicatedTransformation.PREDICATE_CONFIG,\n+                PredicatedTransformation.NEGATE_CONFIG)\n+                .forEach(key -> Assert.assertNotEquals(\n+                        HasDuplicateConfigTransformation.CONFIG_DEF.configKeys().get(key).type,\n+                        def.configKeys().get(prefix + key).type));\n+    }", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwOTEwMA==", "url": "https://github.com/apache/kafka/pull/8755#discussion_r432809100", "bodyText": "@tombentley Thanks for your reviews! I have addressed ur comment.", "author": "chia7712", "createdAt": "2020-05-30T04:26:08Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ConnectorConfigTest.java", "diffHunk": "@@ -434,5 +436,59 @@ public void configure(Map<String, ?> configs) {\n         }\n     }\n \n+    @Test\n+    public void testConfigDefOverrideByInitialConfigDef() {\n+        String alias = \"hdt\";\n+        String prefix = ConnectorConfig.TRANSFORMS_CONFIG + \".\" + alias + \".\";\n+        Map<String, String> props = new HashMap<>();\n+        props.put(ConnectorConfig.TRANSFORMS_CONFIG, alias);\n+        props.put(prefix + \"type\", HasDuplicateConfigTransformation.class.getName());\n+        ConfigDef def = ConnectorConfig.enrich(MOCK_PLUGINS,\n+                new ConfigDef(),\n+                props,\n+                false);\n+        assertConfigDef(def, prefix, HasDuplicateConfigTransformation.MUST_EXIST_KEY, ConfigDef.Type.BOOLEAN);\n+        assertConfigDef(def, prefix, PredicatedTransformation.PREDICATE_CONFIG, ConfigDef.Type.STRING);\n+        assertConfigDef(def, prefix, PredicatedTransformation.NEGATE_CONFIG, ConfigDef.Type.BOOLEAN);\n+    }\n+\n+    private static void assertConfigDef(ConfigDef def, String prefix, String keyName, ConfigDef.Type expectedType) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzODI4MA==", "url": "https://github.com/apache/kafka/pull/8755#discussion_r433538280", "bodyText": "nit: extra blank line", "author": "kkonstantine", "createdAt": "2020-06-01T23:18:08Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ConnectorConfigTest.java", "diffHunk": "@@ -434,5 +436,59 @@ public void configure(Map<String, ?> configs) {\n         }\n     }\n \n+    @Test\n+    public void testConfigDefOverrideByInitialConfigDef() {\n+        String alias = \"hdt\";\n+        String prefix = ConnectorConfig.TRANSFORMS_CONFIG + \".\" + alias + \".\";\n+        Map<String, String> props = new HashMap<>();\n+        props.put(ConnectorConfig.TRANSFORMS_CONFIG, alias);\n+        props.put(prefix + \"type\", HasDuplicateConfigTransformation.class.getName());\n+        ConfigDef def = ConnectorConfig.enrich(MOCK_PLUGINS,\n+                new ConfigDef(),\n+                props,\n+                false);\n+        assertConfigDef(def, prefix, HasDuplicateConfigTransformation.MUST_EXIST_KEY, ConfigDef.Type.BOOLEAN);\n+        assertConfigDef(def, prefix, PredicatedTransformation.PREDICATE_CONFIG, ConfigDef.Type.STRING);\n+        assertConfigDef(def, prefix, PredicatedTransformation.NEGATE_CONFIG, ConfigDef.Type.BOOLEAN);\n+    }\n+\n+    private static void assertConfigDef(ConfigDef def, String prefix, String keyName, ConfigDef.Type expectedType) {\n+        assertNull(def.configKeys().get(keyName));\n+        ConfigDef.ConfigKey configKey = def.configKeys().get(prefix + keyName);\n+        assertNotNull(prefix + keyName + \"' config must be present\", configKey);\n+        assertEquals(prefix + keyName + \"' config should be a \" + expectedType, expectedType, configKey.type);\n+    }\n+\n+    public static class HasDuplicateConfigTransformation<R extends ConnectRecord<R>> implements Transformation<R> {\n+        private static final String MUST_EXIST_KEY = \"must.exist.key\";\n+        private static final ConfigDef CONFIG_DEF = new ConfigDef()\n+                // this configDef is duplicate. It should be removed automatically so as to avoid duplicate config error.\n+                .define(PredicatedTransformation.PREDICATE_CONFIG, ConfigDef.Type.INT, 100, ConfigDef.Importance.MEDIUM,\n+                        \"fake\")\n+                // this configDef is duplicate. It should be removed automatically so as to avoid duplicate config error.\n+                .define(PredicatedTransformation.NEGATE_CONFIG, ConfigDef.Type.INT, 123, ConfigDef.Importance.MEDIUM,\n+                        \"fake\")\n+                // this configDef should appear if above duplicate configDef is removed without any error\n+                .define(MUST_EXIST_KEY, ConfigDef.Type.BOOLEAN, true, ConfigDef.Importance.MEDIUM,\n+                        \"this key must exist\");\n+        @Override\n+        public R apply(R record) {\n+            return record;\n+        }\n+\n+        @Override\n+        public ConfigDef config() {\n+            return CONFIG_DEF;\n+        }\n+\n+        @Override\n+        public void close() {\n+        }\n+\n+        @Override\n+        public void configure(Map<String, ?> configs) {\n+        }\n+    }\n+", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzODMyNg==", "url": "https://github.com/apache/kafka/pull/8755#discussion_r433538326", "bodyText": "nit: blank line missing here", "author": "kkonstantine", "createdAt": "2020-06-01T23:18:21Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ConnectorConfigTest.java", "diffHunk": "@@ -434,5 +436,59 @@ public void configure(Map<String, ?> configs) {\n         }\n     }\n \n+    @Test\n+    public void testConfigDefOverrideByInitialConfigDef() {\n+        String alias = \"hdt\";\n+        String prefix = ConnectorConfig.TRANSFORMS_CONFIG + \".\" + alias + \".\";\n+        Map<String, String> props = new HashMap<>();\n+        props.put(ConnectorConfig.TRANSFORMS_CONFIG, alias);\n+        props.put(prefix + \"type\", HasDuplicateConfigTransformation.class.getName());\n+        ConfigDef def = ConnectorConfig.enrich(MOCK_PLUGINS,\n+                new ConfigDef(),\n+                props,\n+                false);\n+        assertConfigDef(def, prefix, HasDuplicateConfigTransformation.MUST_EXIST_KEY, ConfigDef.Type.BOOLEAN);\n+        assertConfigDef(def, prefix, PredicatedTransformation.PREDICATE_CONFIG, ConfigDef.Type.STRING);\n+        assertConfigDef(def, prefix, PredicatedTransformation.NEGATE_CONFIG, ConfigDef.Type.BOOLEAN);\n+    }\n+\n+    private static void assertConfigDef(ConfigDef def, String prefix, String keyName, ConfigDef.Type expectedType) {\n+        assertNull(def.configKeys().get(keyName));\n+        ConfigDef.ConfigKey configKey = def.configKeys().get(prefix + keyName);\n+        assertNotNull(prefix + keyName + \"' config must be present\", configKey);\n+        assertEquals(prefix + keyName + \"' config should be a \" + expectedType, expectedType, configKey.type);\n+    }\n+\n+    public static class HasDuplicateConfigTransformation<R extends ConnectRecord<R>> implements Transformation<R> {\n+        private static final String MUST_EXIST_KEY = \"must.exist.key\";\n+        private static final ConfigDef CONFIG_DEF = new ConfigDef()\n+                // this configDef is duplicate. It should be removed automatically so as to avoid duplicate config error.\n+                .define(PredicatedTransformation.PREDICATE_CONFIG, ConfigDef.Type.INT, 100, ConfigDef.Importance.MEDIUM,\n+                        \"fake\")\n+                // this configDef is duplicate. It should be removed automatically so as to avoid duplicate config error.\n+                .define(PredicatedTransformation.NEGATE_CONFIG, ConfigDef.Type.INT, 123, ConfigDef.Importance.MEDIUM,\n+                        \"fake\")\n+                // this configDef should appear if above duplicate configDef is removed without any error\n+                .define(MUST_EXIST_KEY, ConfigDef.Type.BOOLEAN, true, ConfigDef.Importance.MEDIUM,\n+                        \"this key must exist\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzODQ1Mw==", "url": "https://github.com/apache/kafka/pull/8755#discussion_r433538453", "bodyText": "nit: I'm sure these fit in a line shorter than the one below", "author": "kkonstantine", "createdAt": "2020-06-01T23:18:52Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ConnectorConfigTest.java", "diffHunk": "@@ -434,5 +436,59 @@ public void configure(Map<String, ?> configs) {\n         }\n     }\n \n+    @Test\n+    public void testConfigDefOverrideByInitialConfigDef() {\n+        String alias = \"hdt\";\n+        String prefix = ConnectorConfig.TRANSFORMS_CONFIG + \".\" + alias + \".\";\n+        Map<String, String> props = new HashMap<>();\n+        props.put(ConnectorConfig.TRANSFORMS_CONFIG, alias);\n+        props.put(prefix + \"type\", HasDuplicateConfigTransformation.class.getName());\n+        ConfigDef def = ConnectorConfig.enrich(MOCK_PLUGINS,\n+                new ConfigDef(),\n+                props,\n+                false);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU0MTI1Mw==", "url": "https://github.com/apache/kafka/pull/8755#discussion_r433541253", "bodyText": "this method won't work with empty prefix but that's not obvious just by reading its name.", "author": "kkonstantine", "createdAt": "2020-06-01T23:28:50Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ConnectorConfigTest.java", "diffHunk": "@@ -434,5 +436,59 @@ public void configure(Map<String, ?> configs) {\n         }\n     }\n \n+    @Test\n+    public void testConfigDefOverrideByInitialConfigDef() {\n+        String alias = \"hdt\";\n+        String prefix = ConnectorConfig.TRANSFORMS_CONFIG + \".\" + alias + \".\";\n+        Map<String, String> props = new HashMap<>();\n+        props.put(ConnectorConfig.TRANSFORMS_CONFIG, alias);\n+        props.put(prefix + \"type\", HasDuplicateConfigTransformation.class.getName());\n+        ConfigDef def = ConnectorConfig.enrich(MOCK_PLUGINS,\n+                new ConfigDef(),\n+                props,\n+                false);\n+        assertConfigDef(def, prefix, HasDuplicateConfigTransformation.MUST_EXIST_KEY, ConfigDef.Type.BOOLEAN);\n+        assertConfigDef(def, prefix, PredicatedTransformation.PREDICATE_CONFIG, ConfigDef.Type.STRING);\n+        assertConfigDef(def, prefix, PredicatedTransformation.NEGATE_CONFIG, ConfigDef.Type.BOOLEAN);\n+    }\n+\n+    private static void assertConfigDef(ConfigDef def, String prefix, String keyName, ConfigDef.Type expectedType) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU0NTE2OQ==", "url": "https://github.com/apache/kafka/pull/8755#discussion_r433545169", "bodyText": "let's add ConfigDef.NO_DEFAULT_VALUE in one of them", "author": "kkonstantine", "createdAt": "2020-06-01T23:43:08Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ConnectorConfigTest.java", "diffHunk": "@@ -434,5 +436,59 @@ public void configure(Map<String, ?> configs) {\n         }\n     }\n \n+    @Test\n+    public void testConfigDefOverrideByInitialConfigDef() {\n+        String alias = \"hdt\";\n+        String prefix = ConnectorConfig.TRANSFORMS_CONFIG + \".\" + alias + \".\";\n+        Map<String, String> props = new HashMap<>();\n+        props.put(ConnectorConfig.TRANSFORMS_CONFIG, alias);\n+        props.put(prefix + \"type\", HasDuplicateConfigTransformation.class.getName());\n+        ConfigDef def = ConnectorConfig.enrich(MOCK_PLUGINS,\n+                new ConfigDef(),\n+                props,\n+                false);\n+        assertConfigDef(def, prefix, HasDuplicateConfigTransformation.MUST_EXIST_KEY, ConfigDef.Type.BOOLEAN);\n+        assertConfigDef(def, prefix, PredicatedTransformation.PREDICATE_CONFIG, ConfigDef.Type.STRING);\n+        assertConfigDef(def, prefix, PredicatedTransformation.NEGATE_CONFIG, ConfigDef.Type.BOOLEAN);\n+    }\n+\n+    private static void assertConfigDef(ConfigDef def, String prefix, String keyName, ConfigDef.Type expectedType) {\n+        assertNull(def.configKeys().get(keyName));\n+        ConfigDef.ConfigKey configKey = def.configKeys().get(prefix + keyName);\n+        assertNotNull(prefix + keyName + \"' config must be present\", configKey);\n+        assertEquals(prefix + keyName + \"' config should be a \" + expectedType, expectedType, configKey.type);\n+    }\n+\n+    public static class HasDuplicateConfigTransformation<R extends ConnectRecord<R>> implements Transformation<R> {\n+        private static final String MUST_EXIST_KEY = \"must.exist.key\";\n+        private static final ConfigDef CONFIG_DEF = new ConfigDef()\n+                // this configDef is duplicate. It should be removed automatically so as to avoid duplicate config error.\n+                .define(PredicatedTransformation.PREDICATE_CONFIG, ConfigDef.Type.INT, 100, ConfigDef.Importance.MEDIUM,", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU0NTIzNg==", "url": "https://github.com/apache/kafka/pull/8755#discussion_r433545236", "bodyText": "nit: fits in one line", "author": "kkonstantine", "createdAt": "2020-06-01T23:43:21Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ConnectorConfigTest.java", "diffHunk": "@@ -434,5 +436,59 @@ public void configure(Map<String, ?> configs) {\n         }\n     }\n \n+    @Test\n+    public void testConfigDefOverrideByInitialConfigDef() {\n+        String alias = \"hdt\";\n+        String prefix = ConnectorConfig.TRANSFORMS_CONFIG + \".\" + alias + \".\";\n+        Map<String, String> props = new HashMap<>();\n+        props.put(ConnectorConfig.TRANSFORMS_CONFIG, alias);\n+        props.put(prefix + \"type\", HasDuplicateConfigTransformation.class.getName());\n+        ConfigDef def = ConnectorConfig.enrich(MOCK_PLUGINS,\n+                new ConfigDef(),\n+                props,\n+                false);\n+        assertConfigDef(def, prefix, HasDuplicateConfigTransformation.MUST_EXIST_KEY, ConfigDef.Type.BOOLEAN);\n+        assertConfigDef(def, prefix, PredicatedTransformation.PREDICATE_CONFIG, ConfigDef.Type.STRING);\n+        assertConfigDef(def, prefix, PredicatedTransformation.NEGATE_CONFIG, ConfigDef.Type.BOOLEAN);\n+    }\n+\n+    private static void assertConfigDef(ConfigDef def, String prefix, String keyName, ConfigDef.Type expectedType) {\n+        assertNull(def.configKeys().get(keyName));\n+        ConfigDef.ConfigKey configKey = def.configKeys().get(prefix + keyName);\n+        assertNotNull(prefix + keyName + \"' config must be present\", configKey);\n+        assertEquals(prefix + keyName + \"' config should be a \" + expectedType, expectedType, configKey.type);\n+    }\n+\n+    public static class HasDuplicateConfigTransformation<R extends ConnectRecord<R>> implements Transformation<R> {\n+        private static final String MUST_EXIST_KEY = \"must.exist.key\";\n+        private static final ConfigDef CONFIG_DEF = new ConfigDef()\n+                // this configDef is duplicate. It should be removed automatically so as to avoid duplicate config error.\n+                .define(PredicatedTransformation.PREDICATE_CONFIG, ConfigDef.Type.INT, 100, ConfigDef.Importance.MEDIUM,\n+                        \"fake\")\n+                // this configDef is duplicate. It should be removed automatically so as to avoid duplicate config error.\n+                .define(PredicatedTransformation.NEGATE_CONFIG, ConfigDef.Type.INT, 123, ConfigDef.Importance.MEDIUM,\n+                        \"fake\")\n+                // this configDef should appear if above duplicate configDef is removed without any error\n+                .define(MUST_EXIST_KEY, ConfigDef.Type.BOOLEAN, true, ConfigDef.Importance.MEDIUM,\n+                        \"this key must exist\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU0NTI0Mw==", "url": "https://github.com/apache/kafka/pull/8755#discussion_r433545243", "bodyText": "nit: fits in one line", "author": "kkonstantine", "createdAt": "2020-06-01T23:43:23Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ConnectorConfigTest.java", "diffHunk": "@@ -434,5 +436,59 @@ public void configure(Map<String, ?> configs) {\n         }\n     }\n \n+    @Test\n+    public void testConfigDefOverrideByInitialConfigDef() {\n+        String alias = \"hdt\";\n+        String prefix = ConnectorConfig.TRANSFORMS_CONFIG + \".\" + alias + \".\";\n+        Map<String, String> props = new HashMap<>();\n+        props.put(ConnectorConfig.TRANSFORMS_CONFIG, alias);\n+        props.put(prefix + \"type\", HasDuplicateConfigTransformation.class.getName());\n+        ConfigDef def = ConnectorConfig.enrich(MOCK_PLUGINS,\n+                new ConfigDef(),\n+                props,\n+                false);\n+        assertConfigDef(def, prefix, HasDuplicateConfigTransformation.MUST_EXIST_KEY, ConfigDef.Type.BOOLEAN);\n+        assertConfigDef(def, prefix, PredicatedTransformation.PREDICATE_CONFIG, ConfigDef.Type.STRING);\n+        assertConfigDef(def, prefix, PredicatedTransformation.NEGATE_CONFIG, ConfigDef.Type.BOOLEAN);\n+    }\n+\n+    private static void assertConfigDef(ConfigDef def, String prefix, String keyName, ConfigDef.Type expectedType) {\n+        assertNull(def.configKeys().get(keyName));\n+        ConfigDef.ConfigKey configKey = def.configKeys().get(prefix + keyName);\n+        assertNotNull(prefix + keyName + \"' config must be present\", configKey);\n+        assertEquals(prefix + keyName + \"' config should be a \" + expectedType, expectedType, configKey.type);\n+    }\n+\n+    public static class HasDuplicateConfigTransformation<R extends ConnectRecord<R>> implements Transformation<R> {\n+        private static final String MUST_EXIST_KEY = \"must.exist.key\";\n+        private static final ConfigDef CONFIG_DEF = new ConfigDef()\n+                // this configDef is duplicate. It should be removed automatically so as to avoid duplicate config error.\n+                .define(PredicatedTransformation.PREDICATE_CONFIG, ConfigDef.Type.INT, 100, ConfigDef.Importance.MEDIUM,\n+                        \"fake\")\n+                // this configDef is duplicate. It should be removed automatically so as to avoid duplicate config error.\n+                .define(PredicatedTransformation.NEGATE_CONFIG, ConfigDef.Type.INT, 123, ConfigDef.Importance.MEDIUM,\n+                        \"fake\")", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcyNDI5Ng==", "url": "https://github.com/apache/kafka/pull/8755#discussion_r433724296", "bodyText": "@kkonstantine Please take a look at this new name", "author": "chia7712", "createdAt": "2020-06-02T08:56:48Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/runtime/ConnectorConfigTest.java", "diffHunk": "@@ -434,5 +436,52 @@ public void configure(Map<String, ?> configs) {\n         }\n     }\n \n+    @Test\n+    public void testEnrichedConfigDef() {\n+        String alias = \"hdt\";\n+        String prefix = ConnectorConfig.TRANSFORMS_CONFIG + \".\" + alias + \".\";\n+        Map<String, String> props = new HashMap<>();\n+        props.put(ConnectorConfig.TRANSFORMS_CONFIG, alias);\n+        props.put(prefix + \"type\", HasDuplicateConfigTransformation.class.getName());\n+        ConfigDef def = ConnectorConfig.enrich(MOCK_PLUGINS, new ConfigDef(), props, false);\n+        assertEnrichedConfigDef(def, prefix, HasDuplicateConfigTransformation.MUST_EXIST_KEY, ConfigDef.Type.BOOLEAN);\n+        assertEnrichedConfigDef(def, prefix, PredicatedTransformation.PREDICATE_CONFIG, ConfigDef.Type.STRING);\n+        assertEnrichedConfigDef(def, prefix, PredicatedTransformation.NEGATE_CONFIG, ConfigDef.Type.BOOLEAN);\n+    }\n+\n+    private static void assertEnrichedConfigDef(ConfigDef def, String prefix, String keyName, ConfigDef.Type expectedType) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "0386f700a9f31b1f06df8da6061f6670344dd571", "url": "https://github.com/apache/kafka/commit/0386f700a9f31b1f06df8da6061f6670344dd571", "message": "KAFKA-10069 The user-defined \"predicate\" and \"negate\" are not removed from Transformation", "committedDate": "2020-06-03T07:06:27Z", "type": "commit"}, {"oid": "0386f700a9f31b1f06df8da6061f6670344dd571", "url": "https://github.com/apache/kafka/commit/0386f700a9f31b1f06df8da6061f6670344dd571", "message": "KAFKA-10069 The user-defined \"predicate\" and \"negate\" are not removed from Transformation", "committedDate": "2020-06-03T07:06:27Z", "type": "forcePushed"}]}