{"pr_number": 9446, "pr_title": "MINOR: distinguish between missing source topics and internal assignment errors", "pr_createdAt": "2020-10-15T22:27:26Z", "pr_url": "https://github.com/apache/kafka/pull/9446", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkwMDY0NA==", "url": "https://github.com/apache/kafka/pull/9446#discussion_r505900644", "bodyText": "The diff is kind of annoying but basically I just moved all the try-catch blocks into a single outer try that encapsulates all of the assignment logic. If we throw a TaskAssignmentException at any point it'll bail and just encode the ASSIGNMENT_ERROR code (or INCOMPLETE_SOURCE_TOPIC_METADATA if MissingSourceTopicException is thrown)", "author": "ableegoldman", "createdAt": "2020-10-15T22:30:48Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -330,75 +331,61 @@ public GroupAssignment assign(final Cluster metadata, final GroupSubscription gr\n             clientMetadata.addPreviousTasksAndOffsetSums(consumerId, info.taskOffsetSums());\n         }\n \n-        final boolean versionProbing =\n-            checkMetadataVersions(minReceivedMetadataVersion, minSupportedMetadataVersion, futureMetadataVersion);\n+        try {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkwMTI2NQ==", "url": "https://github.com/apache/kafka/pull/9446#discussion_r505901265", "bodyText": "Just tried to standardize all permanent errors to throw TaskAssignmentException instead. eg if there are incompatible mixed versions we should shut everyone down until the operator can sort it out", "author": "ableegoldman", "createdAt": "2020-10-15T22:32:39Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -434,7 +430,7 @@ private boolean checkMetadataVersions(final int minReceivedMetadataVersion,\n                 minSupportedMetadataVersion);\n \n         } else {\n-            throw new IllegalStateException(\n+            throw new TaskAssignmentException(", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkwMTgwMQ==", "url": "https://github.com/apache/kafka/pull/9446#discussion_r505901801", "bodyText": "If we ever hit this it means there is a serious bug in the assignment algorithm. In that case we should go ahead and shut everyone down once we notice, since otherwise it would be a long slow death of single threads at a time", "author": "ableegoldman", "createdAt": "2020-10-15T22:34:07Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -704,8 +700,9 @@ private boolean assignTasksToClients(final Cluster fullMetadata,\n                                          final Map<UUID, ClientMetadata> clientMetadataMap,\n                                          final Map<TaskId, Set<TopicPartition>> partitionsForTask,\n                                          final Set<TaskId> statefulTasks) {\n-        if (!statefulTasks.isEmpty())\n-            throw new IllegalArgumentException(\"The stateful tasks should not be populated before assigning tasks to clients\");\n+        if (!statefulTasks.isEmpty()) {\n+            throw new TaskAssignmentException(\"The stateful tasks should not be populated before assigning tasks to clients\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkwMTk5MA==", "url": "https://github.com/apache/kafka/pull/9446#discussion_r505901990", "bodyText": "Likewise, this means a bug in the assignment algorithm that should never be hit", "author": "ableegoldman", "createdAt": "2020-10-15T22:34:40Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -1235,7 +1232,7 @@ private boolean addClientAssignments(final Set<TaskId> statefulTasks,\n                         consumersToFill.offer(consumer);\n                     }\n                 } else {\n-                    throw new IllegalStateException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");\n+                    throw new TaskAssignmentException(\"Ran out of unassigned stateful tasks but some members were not at capacity\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU2NzE1OQ==", "url": "https://github.com/apache/kafka/pull/9446#discussion_r506567159", "bodyText": "Hey @ableegoldman , I just looked into this, and it appears that this is the only place that the error code would be read and thrown as an exception to kill the thread, right?\nIf so, then it looks like older clients are looking specifically for the error code to be == AssignorError.INCOMPLETE_SOURCE_TOPIC_METADATA.code(), and they'd interpret any other code as \"looks good\" and proceed with PARTITIONS_ASSIGNED.\nMaybe there's nothing we can do about it now, but perhaps we should put in a block to future-proof this code by adding an else if (assignmentErrorCode.get() != 0) { throw new TaskAssignmentException(\"Unknown error code: \"+assignmentErrorCode.get()) } ?\nOr is this already handled in some other way I'm not seeing?", "author": "vvcephei", "createdAt": "2020-10-16T15:53:40Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsRebalanceListener.java", "diffHunk": "@@ -52,8 +53,11 @@ public void onPartitionsAssigned(final Collection<TopicPartition> partitions) {\n         // NB: all task management is already handled by:\n         // org.apache.kafka.streams.processor.internals.StreamsPartitionAssignor.onAssignment\n         if (assignmentErrorCode.get() == AssignorError.INCOMPLETE_SOURCE_TOPIC_METADATA.code()) {\n-            log.error(\"Received error code {}\", assignmentErrorCode.get());\n+            log.error(\"Received error code {}\", AssignorError.INCOMPLETE_SOURCE_TOPIC_METADATA);\n             throw new MissingSourceTopicException(\"One or more source topics were missing during rebalance\");\n+        } else if (assignmentErrorCode.get() == AssignorError.ASSIGNMENT_ERROR.code()) {\n+            log.error(\"Received error code {}\", AssignorError.ASSIGNMENT_ERROR);\n+            throw new TaskAssignmentException(\"Hit an unexpected exception during task assignment phase of rebalance\");\n         }", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYxODk0OQ==", "url": "https://github.com/apache/kafka/pull/9446#discussion_r506618949", "bodyText": "+1 on future proofing this", "author": "ableegoldman", "createdAt": "2020-10-16T17:26:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU2NzE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYyMjQ2NQ==", "url": "https://github.com/apache/kafka/pull/9446#discussion_r506622465", "bodyText": "Ooh, but we did use to have a VERSION_PROBING error code that had value 2. So we should skip that and go right to 3, thanks for reminding me", "author": "ableegoldman", "createdAt": "2020-10-16T17:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU2NzE1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU2ODI2MQ==", "url": "https://github.com/apache/kafka/pull/9446#discussion_r506568261", "bodyText": "Following on my other comment, should we gate this on the usedMetadataVersion so that we'd return a INCOMPLETE_SOURCE_TOPIC_METADATA for versions 7 and below, to ensure they'll be properly handled as exceptions on the member side?", "author": "vvcephei", "createdAt": "2020-10-16T15:55:28Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -409,9 +396,18 @@ public GroupAssignment assign(final Cluster metadata, final GroupSubscription gr\n                 minSupportedMetadataVersion,\n                 versionProbing,\n                 probingRebalanceNeeded\n-        );\n+            );\n \n-        return new GroupAssignment(assignment);\n+            return new GroupAssignment(assignment);\n+        } catch (final MissingSourceTopicException e) {\n+            return new GroupAssignment(\n+                errorAssignment(clientMetadataMap, AssignorError.INCOMPLETE_SOURCE_TOPIC_METADATA.code())\n+            );\n+        } catch (final TaskAssignmentException e) {\n+            return new GroupAssignment(\n+                errorAssignment(clientMetadataMap, AssignorError.ASSIGNMENT_ERROR.code())", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYxNjE1NQ==", "url": "https://github.com/apache/kafka/pull/9446#discussion_r506616155", "bodyText": "I'm honestly not sure that INCOMPLETE_SOURCE_TOPIC_METADATA is better than just throwing nothing for older clients. Is it better to shut everyone down immediately if it not only completely obfuscates the reason for shutting down, but actually points to a completely different (and wrong) root cause?\nObviously a slow death by one thread at a time is not a good user experience, but this is slightly different. For one thing, you'd still see all the upgraded clients shut down, and only the older ones would remain. Presumably you're in the middle of a rolling bounce, so eventually all of those surviving older clients will eventually be upgraded to understand this error code and shut down. Note that the previous behavior is to just kill a single thread at a time upon hitting this exception, so it's not a regression. Throwing a misleading exception actually seems more like a regression to me.\nWDYT? How important does it seem to ensure that the entire group shuts down immediately during a rolling bounce? It does seem preferable to cut the rolling bounce early if it's doomed from the start. But I personally feel like logging a misleading error is a worse user experience.", "author": "ableegoldman", "createdAt": "2020-10-16T17:21:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU2ODI2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYxODY0Mw==", "url": "https://github.com/apache/kafka/pull/9446#discussion_r506618643", "bodyText": "In my experience, users would not check the logs of every single instance, especially if the first set of logs they checked states very clearly what the problem is -- even if it makes no sense", "author": "ableegoldman", "createdAt": "2020-10-16T17:26:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU2ODI2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAzMDA3Mw==", "url": "https://github.com/apache/kafka/pull/9446#discussion_r508030073", "bodyText": "Perhaps I did misunderstand the code after all.\nMy read was that the old clients would actually not get an exception if we return a new code. Instead, they would continue running in an undefined state and maybe just cryptically do nothing, or maybe throw an even more confusing exception, or maybe do something worse.\nThat was my motivation for making sure they would at least throw an exception (the same exception they've always thrown for this condition, right?)", "author": "vvcephei", "createdAt": "2020-10-19T20:06:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU2ODI2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwMjI4Mw==", "url": "https://github.com/apache/kafka/pull/9446#discussion_r508802283", "bodyText": "Ok, what I didn't realize before is that the \"prior\" code in this diff hasn't been released yet, so we are good to just do this change in place.", "author": "vvcephei", "createdAt": "2020-10-20T20:00:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU2ODI2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcyOTg3NA==", "url": "https://github.com/apache/kafka/pull/9446#discussion_r507729874", "bodyText": "I could not find a unit test that verifies this code.", "author": "cadonna", "createdAt": "2020-10-19T13:06:35Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -409,9 +396,18 @@ public GroupAssignment assign(final Cluster metadata, final GroupSubscription gr\n                 minSupportedMetadataVersion,\n                 versionProbing,\n                 probingRebalanceNeeded\n-        );\n+            );\n \n-        return new GroupAssignment(assignment);\n+            return new GroupAssignment(assignment);\n+        } catch (final MissingSourceTopicException e) {\n+            return new GroupAssignment(\n+                errorAssignment(clientMetadataMap, AssignorError.INCOMPLETE_SOURCE_TOPIC_METADATA.code())\n+            );", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE3OTQ4NQ==", "url": "https://github.com/apache/kafka/pull/9446#discussion_r508179485", "bodyText": "Ah. I had assumed there was one because this functionality is so old, but nope. Thanks for actually checking (added one)", "author": "ableegoldman", "createdAt": "2020-10-20T03:00:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcyOTg3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzczMDAzMA==", "url": "https://github.com/apache/kafka/pull/9446#discussion_r507730030", "bodyText": "I could not find a unit test that verifies this code.", "author": "cadonna", "createdAt": "2020-10-19T13:06:53Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -409,9 +396,18 @@ public GroupAssignment assign(final Cluster metadata, final GroupSubscription gr\n                 minSupportedMetadataVersion,\n                 versionProbing,\n                 probingRebalanceNeeded\n-        );\n+            );\n \n-        return new GroupAssignment(assignment);\n+            return new GroupAssignment(assignment);\n+        } catch (final MissingSourceTopicException e) {\n+            return new GroupAssignment(\n+                errorAssignment(clientMetadataMap, AssignorError.INCOMPLETE_SOURCE_TOPIC_METADATA.code())\n+            );\n+        } catch (final TaskAssignmentException e) {\n+            return new GroupAssignment(\n+                errorAssignment(clientMetadataMap, AssignorError.ASSIGNMENT_ERROR.code())\n+            );", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE4MjY3Nw==", "url": "https://github.com/apache/kafka/pull/9446#discussion_r508182677", "bodyText": "This is covered by shouldEncodeAssignmentErrorIfPreVersionProbingSubscriptionAndFutureSubscriptionIsMixed which hits the TaskAssignmentException in checkMetadataVersions().\nI can try to add another test for one of the other instances where TaskAssignmentException might be thrown, but I would have to go really out of the way to artificially corrupt the data structures of the assignor in order to actually hit it (eg by mocking the Cluster so that it returns one set of topics the first time it's called, and then reports another set of topics the next time). I'm honestly not sure if it adds any value at that point -- WDYT?", "author": "ableegoldman", "createdAt": "2020-10-20T03:12:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzczMDAzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE4NTIwNA==", "url": "https://github.com/apache/kafka/pull/9446#discussion_r508185204", "bodyText": "I happened to notice that this test was not actually using this streamsBuilder, so I tried to fix that and it broke. After some debugging I realized this test was broken in so many different ways that it's a miracle it was ever passing at all. Luckily all the bugs were in the test and not in the actual code \ud83d\ude4f", "author": "ableegoldman", "createdAt": "2020-10-20T03:20:53Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1899,14 +1973,18 @@ public void shouldRequestEndOffsetsForPreexistingChangelogs() {\n     @Test\n     public void shouldRequestCommittedOffsetsForPreexistingSourceChangelogs() {\n         final Set<TopicPartition> changelogs = mkSet(\n-            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 0),\n-            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 1),\n-            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 2)\n+            new TopicPartition(\"topic1\", 0),\n+            new TopicPartition(\"topic1\", 1),\n+            new TopicPartition(\"topic1\", 2)\n         );\n \n         final StreamsBuilder streamsBuilder = new StreamsBuilder();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY1NzgwOA==", "url": "https://github.com/apache/kafka/pull/9446#discussion_r508657808", "bodyText": "Goodness... Thanks for fixing this.", "author": "vvcephei", "createdAt": "2020-10-20T16:10:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE4NTIwNA=="}], "type": "inlineReview"}, {"oid": "cb9c76c130951939ed2d0876a4466b47bba274b6", "url": "https://github.com/apache/kafka/commit/cb9c76c130951939ed2d0876a4466b47bba274b6", "message": "add new ASSIGNMENT_ERROR error code, differentiate MissingSourceTopic from generic TaskAssignmentException", "committedDate": "2020-10-20T17:48:46Z", "type": "commit"}, {"oid": "cb9c76c130951939ed2d0876a4466b47bba274b6", "url": "https://github.com/apache/kafka/commit/cb9c76c130951939ed2d0876a4466b47bba274b6", "message": "add new ASSIGNMENT_ERROR error code, differentiate MissingSourceTopic from generic TaskAssignmentException", "committedDate": "2020-10-20T17:48:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg2NjA3Nw==", "url": "https://github.com/apache/kafka/pull/9446#discussion_r508866077", "bodyText": "Maybe we shouldn't say \"error\" when it's not an error. I'm just imagining the mailing list questions that will start pouring in...\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log.info(\"Received error code {}\", AssignorError.VERSION_PROBING);\n          \n          \n            \n                        log.info(\"Received version probing code {}\", AssignorError.VERSION_PROBING);", "author": "vvcephei", "createdAt": "2020-10-20T21:59:44Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsRebalanceListener.java", "diffHunk": "@@ -52,8 +53,16 @@ public void onPartitionsAssigned(final Collection<TopicPartition> partitions) {\n         // NB: all task management is already handled by:\n         // org.apache.kafka.streams.processor.internals.StreamsPartitionAssignor.onAssignment\n         if (assignmentErrorCode.get() == AssignorError.INCOMPLETE_SOURCE_TOPIC_METADATA.code()) {\n-            log.error(\"Received error code {}\", assignmentErrorCode.get());\n+            log.error(\"Received error code {}\", AssignorError.INCOMPLETE_SOURCE_TOPIC_METADATA);\n             throw new MissingSourceTopicException(\"One or more source topics were missing during rebalance\");\n+        } else if (assignmentErrorCode.get() == AssignorError.VERSION_PROBING.code()) {\n+            log.info(\"Received error code {}\", AssignorError.VERSION_PROBING);", "originalCommit": "cb9c76c130951939ed2d0876a4466b47bba274b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f607303d9058f5cfbb2f6f7d2552ed6c3d38ebe3", "url": "https://github.com/apache/kafka/commit/f607303d9058f5cfbb2f6f7d2552ed6c3d38ebe3", "message": "rebase and fix test broken by collision with recent PR", "committedDate": "2020-10-21T01:12:42Z", "type": "commit"}, {"oid": "69b543cad9c4142675f44e6e01c7e562be34ebda", "url": "https://github.com/apache/kafka/commit/69b543cad9c4142675f44e6e01c7e562be34ebda", "message": "Avoid using the word \"error\" in context of version probing\n\nCo-authored-by: John Roesler <vvcephei@users.noreply.github.com>", "committedDate": "2020-10-21T02:21:25Z", "type": "commit"}]}