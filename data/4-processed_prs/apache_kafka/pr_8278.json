{"pr_number": 8278, "pr_title": "KAFKA-8803: Remove timestamp check in completeTransitionTo", "pr_createdAt": "2020-03-11T17:56:22Z", "pr_url": "https://github.com/apache/kafka/pull/8278", "timeline": [{"oid": "1cfd75667e79f633ea5ce13340f9eb03f58d6b1c", "url": "https://github.com/apache/kafka/commit/1cfd75667e79f633ea5ce13340f9eb03f58d6b1c", "message": "one liner", "committedDate": "2020-03-11T17:52:28Z", "type": "commit"}, {"oid": "01fabcc02e0e7fd2613cc18c73817d07a354af3f", "url": "https://github.com/apache/kafka/commit/01fabcc02e0e7fd2613cc18c73817d07a354af3f", "message": "add unit tests", "committedDate": "2020-03-13T19:33:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQzMDI0Mg==", "url": "https://github.com/apache/kafka/pull/8278#discussion_r392430242", "bodyText": "This test would fail without the one-liner in this PR.", "author": "guozhangwang", "createdAt": "2020-03-13T19:34:18Z", "path": "core/src/test/scala/unit/kafka/coordinator/transaction/TransactionMetadataTest.scala", "diffHunk": "@@ -98,10 +95,198 @@ class TransactionMetadataTest {\n     txnMetadata.prepareIncrementProducerEpoch(30000, None, time.milliseconds())\n   }\n \n+  @Test\n+  def testTolerateUpdateTimeShiftDuringEpochBump(): Unit = {\n+    val producerEpoch: Short = 1\n+    val txnMetadata = new TransactionMetadata(\n+      transactionalId = transactionalId,\n+      producerId = producerId,\n+      lastProducerId = RecordBatch.NO_PRODUCER_ID,\n+      producerEpoch = producerEpoch,\n+      lastProducerEpoch = RecordBatch.NO_PRODUCER_EPOCH,\n+      txnTimeoutMs = 30000,\n+      state = Empty,\n+      topicPartitions = mutable.Set.empty,\n+      txnStartTimestamp = 1L,\n+      txnLastUpdateTimestamp = time.milliseconds())\n+\n+    // let new time be smaller\n+    val transitMetadata = txnMetadata.prepareIncrementProducerEpoch(30000, Option(producerEpoch), time.milliseconds() - 1).right.get\n+    txnMetadata.completeTransitionTo(transitMetadata)\n+    assertEquals(producerId, txnMetadata.producerId)\n+    assertEquals(producerEpoch + 1, txnMetadata.producerEpoch)\n+    assertEquals(producerEpoch, txnMetadata.lastProducerEpoch)\n+    assertEquals(1L, txnMetadata.txnStartTimestamp)\n+    assertEquals(time.milliseconds() - 1, txnMetadata.txnLastUpdateTimestamp)\n+  }\n+\n+  @Test\n+  def testTolerateUpdateTimeResetDuringProducerIdRotation(): Unit = {\n+    val producerEpoch: Short = 1\n+    val txnMetadata = new TransactionMetadata(\n+      transactionalId = transactionalId,\n+      producerId = producerId,\n+      lastProducerId = RecordBatch.NO_PRODUCER_ID,\n+      producerEpoch = producerEpoch,\n+      lastProducerEpoch = RecordBatch.NO_PRODUCER_EPOCH,\n+      txnTimeoutMs = 30000,\n+      state = Empty,\n+      topicPartitions = mutable.Set.empty,\n+      txnStartTimestamp = 1L,\n+      txnLastUpdateTimestamp = time.milliseconds())\n+\n+    // let new time be smaller\n+    val transitMetadata = txnMetadata.prepareProducerIdRotation(producerId + 1, 30000, time.milliseconds() - 1, recordLastEpoch = true)\n+    txnMetadata.completeTransitionTo(transitMetadata)\n+    assertEquals(producerId + 1, txnMetadata.producerId)\n+    assertEquals(producerEpoch, txnMetadata.lastProducerEpoch)\n+    assertEquals(0, txnMetadata.producerEpoch)\n+    assertEquals(1L, txnMetadata.txnStartTimestamp)\n+    assertEquals(time.milliseconds() - 1, txnMetadata.txnLastUpdateTimestamp)\n+  }\n+\n+  @Test\n+  def testTolerateTimeShiftDuringAddPartitions(): Unit = {", "originalCommit": "01fabcc02e0e7fd2613cc18c73817d07a354af3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNTA4Mg==", "url": "https://github.com/apache/kafka/pull/8278#discussion_r393215082", "bodyText": "I checked this and the test still passes. I think the issue is that we are initializing txnStartTimestamp to 1 below.", "author": "hachikuji", "createdAt": "2020-03-16T18:03:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQzMDI0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzMjIxNA==", "url": "https://github.com/apache/kafka/pull/8278#discussion_r393332214", "bodyText": "Updated the test, could you review again?", "author": "guozhangwang", "createdAt": "2020-03-16T21:56:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQzMDI0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQzMDMyMQ==", "url": "https://github.com/apache/kafka/pull/8278#discussion_r392430321", "bodyText": "These tests are added to cover #3286", "author": "guozhangwang", "createdAt": "2020-03-13T19:34:34Z", "path": "core/src/test/scala/unit/kafka/coordinator/transaction/TransactionMetadataTest.scala", "diffHunk": "@@ -98,10 +95,198 @@ class TransactionMetadataTest {\n     txnMetadata.prepareIncrementProducerEpoch(30000, None, time.milliseconds())\n   }\n \n+  @Test\n+  def testTolerateUpdateTimeShiftDuringEpochBump(): Unit = {\n+    val producerEpoch: Short = 1\n+    val txnMetadata = new TransactionMetadata(\n+      transactionalId = transactionalId,\n+      producerId = producerId,\n+      lastProducerId = RecordBatch.NO_PRODUCER_ID,\n+      producerEpoch = producerEpoch,\n+      lastProducerEpoch = RecordBatch.NO_PRODUCER_EPOCH,\n+      txnTimeoutMs = 30000,\n+      state = Empty,\n+      topicPartitions = mutable.Set.empty,\n+      txnStartTimestamp = 1L,\n+      txnLastUpdateTimestamp = time.milliseconds())\n+\n+    // let new time be smaller\n+    val transitMetadata = txnMetadata.prepareIncrementProducerEpoch(30000, Option(producerEpoch), time.milliseconds() - 1).right.get\n+    txnMetadata.completeTransitionTo(transitMetadata)\n+    assertEquals(producerId, txnMetadata.producerId)\n+    assertEquals(producerEpoch + 1, txnMetadata.producerEpoch)\n+    assertEquals(producerEpoch, txnMetadata.lastProducerEpoch)\n+    assertEquals(1L, txnMetadata.txnStartTimestamp)\n+    assertEquals(time.milliseconds() - 1, txnMetadata.txnLastUpdateTimestamp)\n+  }\n+\n+  @Test\n+  def testTolerateUpdateTimeResetDuringProducerIdRotation(): Unit = {\n+    val producerEpoch: Short = 1\n+    val txnMetadata = new TransactionMetadata(\n+      transactionalId = transactionalId,\n+      producerId = producerId,\n+      lastProducerId = RecordBatch.NO_PRODUCER_ID,\n+      producerEpoch = producerEpoch,\n+      lastProducerEpoch = RecordBatch.NO_PRODUCER_EPOCH,\n+      txnTimeoutMs = 30000,\n+      state = Empty,\n+      topicPartitions = mutable.Set.empty,\n+      txnStartTimestamp = 1L,\n+      txnLastUpdateTimestamp = time.milliseconds())\n+\n+    // let new time be smaller\n+    val transitMetadata = txnMetadata.prepareProducerIdRotation(producerId + 1, 30000, time.milliseconds() - 1, recordLastEpoch = true)\n+    txnMetadata.completeTransitionTo(transitMetadata)\n+    assertEquals(producerId + 1, txnMetadata.producerId)\n+    assertEquals(producerEpoch, txnMetadata.lastProducerEpoch)\n+    assertEquals(0, txnMetadata.producerEpoch)\n+    assertEquals(1L, txnMetadata.txnStartTimestamp)\n+    assertEquals(time.milliseconds() - 1, txnMetadata.txnLastUpdateTimestamp)\n+  }\n+\n+  @Test\n+  def testTolerateTimeShiftDuringAddPartitions(): Unit = {\n+    val producerEpoch: Short = 1\n+    val txnMetadata = new TransactionMetadata(\n+      transactionalId = transactionalId,\n+      producerId = producerId,\n+      lastProducerId = RecordBatch.NO_PRODUCER_ID,\n+      producerEpoch = producerEpoch,\n+      lastProducerEpoch = RecordBatch.NO_PRODUCER_EPOCH,\n+      txnTimeoutMs = 30000,\n+      state = Empty,\n+      topicPartitions = mutable.Set.empty,\n+      txnStartTimestamp = 1L,\n+      txnLastUpdateTimestamp = time.milliseconds())\n+\n+    // let new time be smaller\n+    var transitMetadata = txnMetadata.prepareAddPartitions(Set[TopicPartition](new TopicPartition(\"topic1\", 0)), time.milliseconds() - 1)\n+    txnMetadata.completeTransitionTo(transitMetadata)\n+    assertEquals(Set[TopicPartition](new TopicPartition(\"topic1\", 0)), txnMetadata.topicPartitions)\n+    assertEquals(producerId, txnMetadata.producerId)\n+    assertEquals(RecordBatch.NO_PRODUCER_EPOCH, txnMetadata.lastProducerEpoch)\n+    assertEquals(producerEpoch, txnMetadata.producerEpoch)\n+    assertEquals(time.milliseconds() - 1, txnMetadata.txnStartTimestamp)\n+    assertEquals(time.milliseconds() - 1, txnMetadata.txnLastUpdateTimestamp)\n+\n+    // add another partition, check that this time the start timestamp would not change\n+    transitMetadata = txnMetadata.prepareAddPartitions(Set[TopicPartition](new TopicPartition(\"topic2\", 0)), time.milliseconds() - 2)\n+    txnMetadata.completeTransitionTo(transitMetadata)\n+    assertEquals(Set[TopicPartition](new TopicPartition(\"topic1\", 0), new TopicPartition(\"topic2\", 0)), txnMetadata.topicPartitions)\n+    assertEquals(producerId, txnMetadata.producerId)\n+    assertEquals(RecordBatch.NO_PRODUCER_EPOCH, txnMetadata.lastProducerEpoch)\n+    assertEquals(producerEpoch, txnMetadata.producerEpoch)\n+    assertEquals(time.milliseconds() - 1, txnMetadata.txnStartTimestamp)\n+    assertEquals(time.milliseconds() - 2, txnMetadata.txnLastUpdateTimestamp)\n+  }\n+\n+  @Test\n+  def testTolerateTimeShiftDuringPrepareCommit(): Unit = {", "originalCommit": "01fabcc02e0e7fd2613cc18c73817d07a354af3f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7151567c195c7c208067eb25c24c27f964325c0e", "url": "https://github.com/apache/kafka/commit/7151567c195c7c208067eb25c24c27f964325c0e", "message": "Merge branch 'trunk' of https://github.com/apache/kafka into K8803-remove-time-check", "committedDate": "2020-03-16T21:46:29Z", "type": "commit"}, {"oid": "6ba4ba2158a8f2c65a386e6dd9b8b0ccbe1a13e0", "url": "https://github.com/apache/kafka/commit/6ba4ba2158a8f2c65a386e6dd9b8b0ccbe1a13e0", "message": "address comments", "committedDate": "2020-03-16T21:56:31Z", "type": "commit"}]}