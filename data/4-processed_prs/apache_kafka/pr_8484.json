{"pr_number": 8484, "pr_title": "MINOR: eliminate unnecessary partition lookups in fetch path", "pr_createdAt": "2020-04-14T15:06:55Z", "pr_url": "https://github.com/apache/kafka/pull/8484", "timeline": [{"oid": "3aa0caa036cc21bfd4305558bf9a0421e3b5600e", "url": "https://github.com/apache/kafka/commit/3aa0caa036cc21bfd4305558bf9a0421e3b5600e", "message": "MINOR: elimination unnecessary partition lookups", "committedDate": "2020-04-14T04:48:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIxMjM3Mg==", "url": "https://github.com/apache/kafka/pull/8484#discussion_r408212372", "bodyText": "Avoids a partition lookup", "author": "lbradstreet", "createdAt": "2020-04-14T15:07:27Z", "path": "core/src/main/scala/kafka/server/ReplicaManager.scala", "diffHunk": "@@ -1154,9 +1152,9 @@ class ReplicaManager(val config: KafkaConfig,\n    *  To avoid ISR thrashing, we only throttle a replica on the leader if it's in the throttled replica list,\n    *  the quota is exceeded and the replica is not in sync.\n    */\n-  def shouldLeaderThrottle(quota: ReplicaQuota, topicPartition: TopicPartition, replicaId: Int): Boolean = {\n-    val isReplicaInSync = nonOfflinePartition(topicPartition).exists(_.inSyncReplicaIds.contains(replicaId))\n-    !isReplicaInSync && quota.isThrottled(topicPartition) && quota.isQuotaExceeded\n+  def shouldLeaderThrottle(quota: ReplicaQuota, partition: Partition, replicaId: Int): Boolean = {", "originalCommit": "3aa0caa036cc21bfd4305558bf9a0421e3b5600e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDg3NQ==", "url": "https://github.com/apache/kafka/pull/8484#discussion_r408970875", "bodyText": "Are the semantics the same? Do we ensure that Partition is not offline? Or does that not matter here?", "author": "ijuma", "createdAt": "2020-04-15T16:22:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIxMjM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MTQyNw==", "url": "https://github.com/apache/kafka/pull/8484#discussion_r408971427", "bodyText": "On second thought, I think this doesn't matter.", "author": "ijuma", "createdAt": "2020-04-15T16:23:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIxMjM3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIxMjg1OQ==", "url": "https://github.com/apache/kafka/pull/8484#discussion_r408212859", "bodyText": "Partition is already accessible, there's no need to look it it up in findPreferredReadReplica.", "author": "lbradstreet", "createdAt": "2020-04-14T15:08:03Z", "path": "core/src/main/scala/kafka/server/ReplicaManager.scala", "diffHunk": "@@ -987,7 +987,7 @@ class ReplicaManager(val config: KafkaConfig,\n \n         // If we are the leader, determine the preferred read-replica\n         val preferredReadReplica = clientMetadata.flatMap(\n-          metadata => findPreferredReadReplica(tp, metadata, replicaId, fetchInfo.fetchOffset, fetchTimeMs))\n+          metadata => findPreferredReadReplica(partition, metadata, replicaId, fetchInfo.fetchOffset, fetchTimeMs))", "originalCommit": "3aa0caa036cc21bfd4305558bf9a0421e3b5600e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}