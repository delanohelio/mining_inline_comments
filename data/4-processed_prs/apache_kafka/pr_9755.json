{"pr_number": 9755, "pr_title": "MINOR: refactor SelectingIterator by scala iterator", "pr_createdAt": "2020-12-15T09:40:36Z", "pr_url": "https://github.com/apache/kafka/pull/9755", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1NjE5OA==", "url": "https://github.com/apache/kafka/pull/9755#discussion_r543356198", "bodyText": "Nit: no need for () after iterator.", "author": "ijuma", "createdAt": "2020-12-15T13:50:22Z", "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -972,40 +972,13 @@ class KafkaApis(val requestChannel: RequestChannel,\n     }\n   }\n \n-  class SelectingIterator(val partitions: util.LinkedHashMap[TopicPartition, FetchResponse.PartitionData[Records]],\n-                          val quota: ReplicationQuotaManager)\n-                          extends util.Iterator[util.Map.Entry[TopicPartition, FetchResponse.PartitionData[Records]]] {\n-    val iter = partitions.entrySet().iterator()\n-\n-    var nextElement: util.Map.Entry[TopicPartition, FetchResponse.PartitionData[Records]] = null\n-\n-    override def hasNext: Boolean = {\n-      while ((nextElement == null) && iter.hasNext()) {\n-        val element = iter.next()\n-        if (quota.isThrottled(element.getKey)) {\n-          nextElement = element\n-        }\n-      }\n-      nextElement != null\n-    }\n-\n-    override def next(): util.Map.Entry[TopicPartition, FetchResponse.PartitionData[Records]] = {\n-      if (!hasNext()) throw new NoSuchElementException()\n-      val element = nextElement\n-      nextElement = null\n-      element\n-    }\n-\n-    override def remove(): Unit = throw new UnsupportedOperationException()\n-  }\n-\n   // Traffic from both in-sync and out of sync replicas are accounted for in replication quota to ensure total replication\n   // traffic doesn't exceed quota.\n-  private def sizeOfThrottledPartitions(versionId: Short,\n-                                        unconvertedResponse: FetchResponse[Records],\n-                                        quota: ReplicationQuotaManager): Int = {\n-    val iter = new SelectingIterator(unconvertedResponse.responseData, quota)\n-    FetchResponse.sizeOf(versionId, iter)\n+  private[server] def sizeOfThrottledPartitions(versionId: Short,\n+                                                unconvertedResponse: FetchResponse[Records],\n+                                                quota: ReplicationQuotaManager): Int = {\n+    FetchResponse.sizeOf(versionId, unconvertedResponse.responseData.entrySet()\n+      .iterator().asScala.filter(element => quota.isThrottled(element.getKey)).asJava)", "originalCommit": "05474c3d9f273ace0b5fe28c5426b35eb762e5b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1OTI5OQ==", "url": "https://github.com/apache/kafka/pull/9755#discussion_r543359299", "bodyText": "Seems like you could use map here?", "author": "ijuma", "createdAt": "2020-12-15T13:54:32Z", "path": "core/src/test/scala/unit/kafka/server/KafkaApisTest.scala", "diffHunk": "@@ -3045,4 +3046,32 @@ class KafkaApisTest {\n       Errors.LOG_DIR_NOT_FOUND -> 1,\n       Errors.INVALID_TOPIC_EXCEPTION -> 1).asJava, response.errorCounts)\n   }\n+\n+  @Test\n+  def testSizeOfThrottledPartitions(): Unit = {\n+    def fetchResponse(data: Map[TopicPartition, String]): FetchResponse[Records] = {\n+      val responseData = new util.LinkedHashMap[TopicPartition, FetchResponse.PartitionData[Records]]\n+      data.foreach {", "originalCommit": "05474c3d9f273ace0b5fe28c5426b35eb762e5b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1OTczNA==", "url": "https://github.com/apache/kafka/pull/9755#discussion_r543359734", "bodyText": "Nit: no need for ().", "author": "ijuma", "createdAt": "2020-12-15T13:55:09Z", "path": "core/src/test/scala/unit/kafka/server/KafkaApisTest.scala", "diffHunk": "@@ -3045,4 +3046,32 @@ class KafkaApisTest {\n       Errors.LOG_DIR_NOT_FOUND -> 1,\n       Errors.INVALID_TOPIC_EXCEPTION -> 1).asJava, response.errorCounts)\n   }\n+\n+  @Test\n+  def testSizeOfThrottledPartitions(): Unit = {\n+    def fetchResponse(data: Map[TopicPartition, String]): FetchResponse[Records] = {\n+      val responseData = new util.LinkedHashMap[TopicPartition, FetchResponse.PartitionData[Records]]\n+      data.foreach {\n+        case (tp, raw) =>\n+          responseData.put(tp, new FetchResponse.PartitionData(Errors.NONE,\n+            105, 105, 0, Optional.empty(), Collections.emptyList(), Optional.empty(),\n+            MemoryRecords.withRecords(CompressionType.NONE, new SimpleRecord(100, raw.getBytes(StandardCharsets.UTF_8)))))\n+      }\n+      new FetchResponse(Errors.NONE, responseData, 100, 100)\n+    }\n+\n+    val throttledPartition = new TopicPartition(\"throttledData\", 0)\n+    val throttledData = Map(throttledPartition -> \"throttledData\")\n+    val expectedSize = FetchResponse.sizeOf(FetchResponseData.HIGHEST_SUPPORTED_VERSION,\n+      fetchResponse(throttledData).responseData().entrySet().iterator())", "originalCommit": "05474c3d9f273ace0b5fe28c5426b35eb762e5b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM2MDM3NQ==", "url": "https://github.com/apache/kafka/pull/9755#discussion_r543360375", "bodyText": "Seems like we could move this method to some utility class or the KafkaApis companion object and then you don't need to mock KafkaApis at all.", "author": "ijuma", "createdAt": "2020-12-15T13:55:57Z", "path": "core/src/test/scala/unit/kafka/server/KafkaApisTest.scala", "diffHunk": "@@ -3045,4 +3046,32 @@ class KafkaApisTest {\n       Errors.LOG_DIR_NOT_FOUND -> 1,\n       Errors.INVALID_TOPIC_EXCEPTION -> 1).asJava, response.errorCounts)\n   }\n+\n+  @Test\n+  def testSizeOfThrottledPartitions(): Unit = {\n+    def fetchResponse(data: Map[TopicPartition, String]): FetchResponse[Records] = {\n+      val responseData = new util.LinkedHashMap[TopicPartition, FetchResponse.PartitionData[Records]]\n+      data.foreach {\n+        case (tp, raw) =>\n+          responseData.put(tp, new FetchResponse.PartitionData(Errors.NONE,\n+            105, 105, 0, Optional.empty(), Collections.emptyList(), Optional.empty(),\n+            MemoryRecords.withRecords(CompressionType.NONE, new SimpleRecord(100, raw.getBytes(StandardCharsets.UTF_8)))))\n+      }\n+      new FetchResponse(Errors.NONE, responseData, 100, 100)\n+    }\n+\n+    val throttledPartition = new TopicPartition(\"throttledData\", 0)\n+    val throttledData = Map(throttledPartition -> \"throttledData\")\n+    val expectedSize = FetchResponse.sizeOf(FetchResponseData.HIGHEST_SUPPORTED_VERSION,\n+      fetchResponse(throttledData).responseData().entrySet().iterator())\n+\n+    val response = fetchResponse(throttledData ++ Map(new TopicPartition(\"nonThrottledData\", 0) -> \"nonThrottledData\"))\n+\n+    val quota = Mockito.mock(classOf[ReplicationQuotaManager])\n+    Mockito.when(quota.isThrottled(ArgumentMatchers.any(classOf[TopicPartition])))\n+      .thenAnswer(invocation => throttledPartition == invocation.getArgument(0).asInstanceOf[TopicPartition])\n+\n+    val kafkaApis = createKafkaApis()\n+    assertEquals(expectedSize, kafkaApis.sizeOfThrottledPartitions(FetchResponseData.HIGHEST_SUPPORTED_VERSION, response, quota))", "originalCommit": "05474c3d9f273ace0b5fe28c5426b35eb762e5b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c5ea1d1b5874c5360c3eeaab53fabbba38b9d54e", "url": "https://github.com/apache/kafka/commit/c5ea1d1b5874c5360c3eeaab53fabbba38b9d54e", "message": "move sizeOfThrottledPartitions to utils", "committedDate": "2020-12-15T14:25:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM5OTkzMA==", "url": "https://github.com/apache/kafka/pull/9755#discussion_r543399930", "bodyText": "I don't think creating a KafkaApisUtils makes things any better since it's unclear when to use this and when to use KafkaApis. If there is no utilities class related to quotas and requests handling, I would put it in the KafkaApis companion object.", "author": "ijuma", "createdAt": "2020-12-15T14:36:21Z", "path": "core/src/main/scala/kafka/server/KafkaApisUtils.scala", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.server\n+\n+import org.apache.kafka.common.record.Records\n+import org.apache.kafka.common.requests.FetchResponse\n+\n+import scala.jdk.CollectionConverters._\n+\n+/**\n+ * the suites of helpers for KafkaApis class.\n+ * We don't use companion object since KafkaApis is too fat.\n+ */\n+object KafkaApisUtils {", "originalCommit": "85bcabf7c4fbc3c160ddf1b053974e087de4d66a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQxMjEwMQ==", "url": "https://github.com/apache/kafka/pull/9755#discussion_r543412101", "bodyText": "make sense. will replace utils by companion object.", "author": "chia7712", "createdAt": "2020-12-15T14:50:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM5OTkzMA=="}], "type": "inlineReview"}, {"oid": "d9d8b9a577d25baf8948a9fddf07bb8d2580ee33", "url": "https://github.com/apache/kafka/commit/d9d8b9a577d25baf8948a9fddf07bb8d2580ee33", "message": "use companion object replace utils class", "committedDate": "2020-12-16T09:20:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjM5ODk5OA==", "url": "https://github.com/apache/kafka/pull/9755#discussion_r546398998", "bodyText": "Indent is not right.", "author": "ijuma", "createdAt": "2020-12-20T16:29:22Z", "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -3530,3 +3494,14 @@ class KafkaApis(val requestChannel: RequestChannel,\n   }\n \n }\n+\n+object KafkaApis {\n+    // Traffic from both in-sync and out of sync replicas are accounted for in replication quota to ensure total replication", "originalCommit": "d9d8b9a577d25baf8948a9fddf07bb8d2580ee33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjM5OTA1Nw==", "url": "https://github.com/apache/kafka/pull/9755#discussion_r546399057", "bodyText": "A couple of unnecessary ().", "author": "ijuma", "createdAt": "2020-12-20T16:30:05Z", "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -3530,3 +3494,14 @@ class KafkaApis(val requestChannel: RequestChannel,\n   }\n \n }\n+\n+object KafkaApis {\n+    // Traffic from both in-sync and out of sync replicas are accounted for in replication quota to ensure total replication\n+  // traffic doesn't exceed quota.\n+  private[server] def sizeOfThrottledPartitions(versionId: Short,\n+                                                unconvertedResponse: FetchResponse[Records],\n+                                                quota: ReplicationQuotaManager): Int = {\n+    FetchResponse.sizeOf(versionId, unconvertedResponse.responseData.entrySet()\n+      .iterator().asScala.filter(element => quota.isThrottled(element.getKey)).asJava)", "originalCommit": "d9d8b9a577d25baf8948a9fddf07bb8d2580ee33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjM5OTIxMg==", "url": "https://github.com/apache/kafka/pull/9755#discussion_r546399212", "bodyText": "Unnecessary () here and in the inner method.", "author": "ijuma", "createdAt": "2020-12-20T16:31:33Z", "path": "core/src/test/scala/unit/kafka/server/KafkaApisTest.scala", "diffHunk": "@@ -3067,4 +3067,31 @@ class KafkaApisTest {\n       Errors.LOG_DIR_NOT_FOUND -> 1,\n       Errors.INVALID_TOPIC_EXCEPTION -> 1).asJava, response.errorCounts)\n   }\n+\n+  @Test\n+  def testSizeOfThrottledPartitions(): Unit = {\n+    def fetchResponse(data: Map[TopicPartition, String]): FetchResponse[Records] = {\n+      val responseData = new util.LinkedHashMap[TopicPartition, FetchResponse.PartitionData[Records]](data.map {\n+        case (tp, raw) =>\n+          tp -> new FetchResponse.PartitionData(Errors.NONE,\n+            105, 105, 0, Optional.empty(), Collections.emptyList(), Optional.empty(),\n+            MemoryRecords.withRecords(CompressionType.NONE,\n+              new SimpleRecord(100, raw.getBytes(StandardCharsets.UTF_8))).asInstanceOf[Records])\n+      }.toMap.asJava)\n+      new FetchResponse(Errors.NONE, responseData, 100, 100)\n+    }\n+\n+    val throttledPartition = new TopicPartition(\"throttledData\", 0)\n+    val throttledData = Map(throttledPartition -> \"throttledData\")\n+    val expectedSize = FetchResponse.sizeOf(FetchResponseData.HIGHEST_SUPPORTED_VERSION,\n+      fetchResponse(throttledData).responseData().entrySet().iterator)", "originalCommit": "d9d8b9a577d25baf8948a9fddf07bb8d2580ee33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjM5OTQ4NQ==", "url": "https://github.com/apache/kafka/pull/9755#discussion_r546399485", "bodyText": "I think I'd move data to the next line to make it a bit more readable.", "author": "ijuma", "createdAt": "2020-12-20T16:33:58Z", "path": "core/src/test/scala/unit/kafka/server/KafkaApisTest.scala", "diffHunk": "@@ -3067,4 +3067,31 @@ class KafkaApisTest {\n       Errors.LOG_DIR_NOT_FOUND -> 1,\n       Errors.INVALID_TOPIC_EXCEPTION -> 1).asJava, response.errorCounts)\n   }\n+\n+  @Test\n+  def testSizeOfThrottledPartitions(): Unit = {\n+    def fetchResponse(data: Map[TopicPartition, String]): FetchResponse[Records] = {\n+      val responseData = new util.LinkedHashMap[TopicPartition, FetchResponse.PartitionData[Records]](data.map {", "originalCommit": "d9d8b9a577d25baf8948a9fddf07bb8d2580ee33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c06ec24932da0d0e8e4879fbf1014a39d55d5bdf", "url": "https://github.com/apache/kafka/commit/c06ec24932da0d0e8e4879fbf1014a39d55d5bdf", "message": "MINOR: refactor SelectingIterator by scala iterator", "committedDate": "2020-12-21T04:32:50Z", "type": "commit"}, {"oid": "f8c8013600b6de671b36abd11a9748e82d2224e4", "url": "https://github.com/apache/kafka/commit/f8c8013600b6de671b36abd11a9748e82d2224e4", "message": "move sizeOfThrottledPartitions to utils", "committedDate": "2020-12-21T04:32:50Z", "type": "commit"}, {"oid": "6cf15aefeb495192c418ee1a3cfd32ebd4231a73", "url": "https://github.com/apache/kafka/commit/6cf15aefeb495192c418ee1a3cfd32ebd4231a73", "message": "revert useless change", "committedDate": "2020-12-21T04:32:50Z", "type": "commit"}, {"oid": "7f5657ca799f5733fd5e60b528c98bfdc9bb042b", "url": "https://github.com/apache/kafka/commit/7f5657ca799f5733fd5e60b528c98bfdc9bb042b", "message": "use companion object replace utils class", "committedDate": "2020-12-21T04:32:50Z", "type": "commit"}, {"oid": "c99a2cfcc9af78d24cecc40b0fe02b092df2e361", "url": "https://github.com/apache/kafka/commit/c99a2cfcc9af78d24cecc40b0fe02b092df2e361", "message": "code style fix", "committedDate": "2020-12-21T04:36:34Z", "type": "commit"}, {"oid": "c99a2cfcc9af78d24cecc40b0fe02b092df2e361", "url": "https://github.com/apache/kafka/commit/c99a2cfcc9af78d24cecc40b0fe02b092df2e361", "message": "code style fix", "committedDate": "2020-12-21T04:36:34Z", "type": "forcePushed"}]}