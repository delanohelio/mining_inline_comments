{"pr_number": 9278, "pr_title": "MINOR: remove DelayedOperations.checkAndCompleteFetch", "pr_createdAt": "2020-09-10T02:34:07Z", "pr_url": "https://github.com/apache/kafka/pull/9278", "timeline": [{"oid": "6e89b25a1cc4ba3a987f1fa00357f97b932ffaac", "url": "https://github.com/apache/kafka/commit/6e89b25a1cc4ba3a987f1fa00357f97b932ffaac", "message": "MINOR: remove DelayedOperations.checkAndCompleteFetch", "committedDate": "2020-09-10T02:33:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAyNzMxMQ==", "url": "https://github.com/apache/kafka/pull/9278#discussion_r486027311", "bodyText": "```appendRecordsToLeader`` does not complete delayed fetch anymore (c2273ad) so this test can be removed.", "author": "chia7712", "createdAt": "2020-09-10T02:35:21Z", "path": "core/src/test/scala/unit/kafka/cluster/PartitionTest.scala", "diffHunk": "@@ -922,102 +918,6 @@ class PartitionTest extends AbstractPartitionTest {\n     assertEquals(\"ISR\", Set[Integer](leader, follower1, follower2), partition.inSyncReplicaIds)\n   }\n \n-  /**\n-   * Verify that delayed fetch operations which are completed when records are appended don't result in deadlocks.\n-   * Delayed fetch operations acquire Partition leaderIsrUpdate read lock for one or more partitions. So they\n-   * need to be completed after releasing the lock acquired to append records. Otherwise, waiting writers\n-   * (e.g. to check if ISR needs to be shrinked) can trigger deadlock in request handler threads waiting for\n-   * read lock of one Partition while holding on to read lock of another Partition.\n-   */\n-  @Test\n-  def testDelayedFetchAfterAppendRecords(): Unit = {", "originalCommit": "6e89b25a1cc4ba3a987f1fa00357f97b932ffaac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}