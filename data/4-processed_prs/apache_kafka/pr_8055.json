{"pr_number": 8055, "pr_title": "MINOR: Start using Response and replace IOException in EmbeddedConnectCluster for failures", "pr_createdAt": "2020-02-06T21:56:51Z", "pr_url": "https://github.com/apache/kafka/pull/8055", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIzMjc3Nw==", "url": "https://github.com/apache/kafka/pull/8055#discussion_r376232777", "bodyText": "seems the return value is never used?", "author": "chia7712", "createdAt": "2020-02-07T06:31:11Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/util/clusters/EmbeddedConnectCluster.java", "diffHunk": "@@ -263,36 +266,37 @@ public void startConnect() {\n      *\n      * @param connName   the name of the connector\n      * @param connConfig the intended configuration\n-     * @throws IOException          if call to the REST api fails.\n+     * @throws ConnectException if the configuration fails to be serialized\n      * @throws ConnectRestException if REST api returns error status\n      */\n-    public void configureConnector(String connName, Map<String, String> connConfig) throws IOException {\n+    public String configureConnector(String connName, Map<String, String> connConfig) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4NDU4Mg==", "url": "https://github.com/apache/kafka/pull/8055#discussion_r376484582", "bodyText": "Isn't a string returned on line 283?", "author": "rhauch", "createdAt": "2020-02-07T16:28:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIzMjc3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5MTg5Ng==", "url": "https://github.com/apache/kafka/pull/8055#discussion_r376491896", "bodyText": "BTW, I think changing the return type from void to something else would be considered backward compatible, so this type of change is acceptable.", "author": "rhauch", "createdAt": "2020-02-07T16:42:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIzMjc3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4NjkyNg==", "url": "https://github.com/apache/kafka/pull/8055#discussion_r376486926", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws ConnectException if the configuration fails to be serialized\n          \n          \n            \n                 * @throws ConnectException if the configuration fails to be serialized or if the request could not be sent", "author": "rhauch", "createdAt": "2020-02-07T16:32:53Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/util/clusters/EmbeddedConnectCluster.java", "diffHunk": "@@ -263,36 +266,37 @@ public void startConnect() {\n      *\n      * @param connName   the name of the connector\n      * @param connConfig the intended configuration\n-     * @throws IOException          if call to the REST api fails.\n+     * @throws ConnectException if the configuration fails to be serialized", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2OTU5Mw==", "url": "https://github.com/apache/kafka/pull/8055#discussion_r376569593", "bodyText": "Added with the other changes", "author": "kkonstantine", "createdAt": "2020-02-07T19:35:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4NjkyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4NzI1MA==", "url": "https://github.com/apache/kafka/pull/8055#discussion_r376487250", "bodyText": "The executePut can actually throw ConnectException, so we should reflect that in the JavaDoc", "author": "rhauch", "createdAt": "2020-02-07T16:33:34Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/util/clusters/EmbeddedConnectCluster.java", "diffHunk": "@@ -263,36 +266,37 @@ public void startConnect() {\n      *\n      * @param connName   the name of the connector\n      * @param connConfig the intended configuration\n-     * @throws IOException          if call to the REST api fails.\n+     * @throws ConnectException if the configuration fails to be serialized\n      * @throws ConnectRestException if REST api returns error status\n      */\n-    public void configureConnector(String connName, Map<String, String> connConfig) throws IOException {\n+    public String configureConnector(String connName, Map<String, String> connConfig) {\n         String url = endpointForResource(String.format(\"connectors/%s/config\", connName));\n         ObjectMapper mapper = new ObjectMapper();\n-        int status;\n+        String content;\n         try {\n-            String content = mapper.writeValueAsString(connConfig);\n-            status = executePut(url, content);\n+            content = mapper.writeValueAsString(connConfig);\n         } catch (IOException e) {\n-            log.error(\"Could not execute PUT request to \" + url, e);\n-            throw e;\n+            throw new ConnectException(\"Could not serialize connector configuration and execute PUT request\");\n         }\n-        if (status >= HttpServletResponse.SC_BAD_REQUEST) {\n-            throw new ConnectRestException(status, \"Could not execute PUT request\");\n+        Response response = executePut(url, content);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2OTAyNQ==", "url": "https://github.com/apache/kafka/pull/8055#discussion_r376569025", "bodyText": "Good point. Added", "author": "kkonstantine", "createdAt": "2020-02-07T19:33:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4NzI1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4ODUyOQ==", "url": "https://github.com/apache/kafka/pull/8055#discussion_r376488529", "bodyText": "Since the IOException was declared on the signature, it's clear that calling code has to handle this case. But because ConnectException is a runtime exception, we should probably add JavaDoc for this method to explain that ConnectException will be thrown if the endpoint is not known.", "author": "rhauch", "createdAt": "2020-02-07T16:36:03Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/util/clusters/EmbeddedConnectCluster.java", "diffHunk": "@@ -305,50 +309,63 @@ public void deleteConnector(String connName) throws IOException {\n      */\n     public Collection<String> connectors() {\n         ObjectMapper mapper = new ObjectMapper();\n-        try {\n-            String url = endpointForResource(\"connectors\");\n-            return mapper.readerFor(Collection.class).readValue(executeGet(url));\n-        } catch (IOException e) {\n-            log.error(\"Could not read connector list\", e);\n-            throw new ConnectException(\"Could not read connector list\", e);\n+        String url = endpointForResource(\"connectors\");\n+        Response response = executeGet(url);\n+        if (response.getStatus() < Response.Status.BAD_REQUEST.getStatusCode()) {\n+            try {\n+                return mapper.readerFor(Collection.class).readValue(responseToString(response));\n+            } catch(IOException e){\n+                log.error(\"Could not parse connector list from response: {}\",\n+                        responseToString(response), e);\n+                throw new ConnectException(\"Could not not parse connector list\", e);\n+            }\n         }\n+        throw new ConnectRestException(response.getStatus(),\n+                \"Could not read connector list. Error response: \" + responseToString(response));\n     }\n \n     /**\n      * Get the status for a connector running in this cluster.\n      *\n      * @param connectorName name of the connector\n-     * @return an instance of {@link ConnectorStateInfo} populated with state informaton of the connector and it's tasks.\n+     * @return an instance of {@link ConnectorStateInfo} populated with state information of the connector and its tasks.\n      * @throws ConnectRestException if the HTTP request to the REST API failed with a valid status code.\n      * @throws ConnectException for any other error.\n      */\n     public ConnectorStateInfo connectorStatus(String connectorName) {\n         ObjectMapper mapper = new ObjectMapper();\n+        String url = endpointForResource(String.format(\"connectors/%s/status\", connectorName));\n+        Response response = executeGet(url);\n         try {\n-            String url = endpointForResource(String.format(\"connectors/%s/status\", connectorName));\n-            return mapper.readerFor(ConnectorStateInfo.class).readValue(executeGet(url));\n+            if (response.getStatus() < Response.Status.BAD_REQUEST.getStatusCode()) {\n+                return mapper.readerFor(ConnectorStateInfo.class)\n+                        .readValue(responseToString(response));\n+            }\n         } catch (IOException e) {\n-            log.error(\"Could not read connector state\", e);\n-            throw new ConnectException(\"Could not read connector state\", e);\n+            log.error(\"Could not read connector state from response: {}\",\n+                    responseToString(response), e);\n+            throw new ConnectException(\"Could not not parse connector state\", e);\n         }\n+        throw new ConnectRestException(response.getStatus(),\n+                \"Could not read connector state. Error response: \" + responseToString(response));\n     }\n \n-    public String adminEndpoint(String resource) throws IOException {\n+    public String adminEndpoint(String resource) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2OTg4NA==", "url": "https://github.com/apache/kafka/pull/8055#discussion_r376569884", "bodyText": "Missed that these public methods were missing a javadoc. Added.", "author": "kkonstantine", "createdAt": "2020-02-07T19:35:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4ODUyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4ODU5OQ==", "url": "https://github.com/apache/kafka/pull/8055#discussion_r376488599", "bodyText": "Since the IOException was declared on the signature, it's clear that calling code has to handle this case. But because ConnectException is a runtime exception, we should probably add JavaDoc for this method to explain that ConnectException will be thrown if the endpoint is not known.", "author": "rhauch", "createdAt": "2020-02-07T16:36:10Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/util/clusters/EmbeddedConnectCluster.java", "diffHunk": "@@ -305,50 +309,63 @@ public void deleteConnector(String connName) throws IOException {\n      */\n     public Collection<String> connectors() {\n         ObjectMapper mapper = new ObjectMapper();\n-        try {\n-            String url = endpointForResource(\"connectors\");\n-            return mapper.readerFor(Collection.class).readValue(executeGet(url));\n-        } catch (IOException e) {\n-            log.error(\"Could not read connector list\", e);\n-            throw new ConnectException(\"Could not read connector list\", e);\n+        String url = endpointForResource(\"connectors\");\n+        Response response = executeGet(url);\n+        if (response.getStatus() < Response.Status.BAD_REQUEST.getStatusCode()) {\n+            try {\n+                return mapper.readerFor(Collection.class).readValue(responseToString(response));\n+            } catch(IOException e){\n+                log.error(\"Could not parse connector list from response: {}\",\n+                        responseToString(response), e);\n+                throw new ConnectException(\"Could not not parse connector list\", e);\n+            }\n         }\n+        throw new ConnectRestException(response.getStatus(),\n+                \"Could not read connector list. Error response: \" + responseToString(response));\n     }\n \n     /**\n      * Get the status for a connector running in this cluster.\n      *\n      * @param connectorName name of the connector\n-     * @return an instance of {@link ConnectorStateInfo} populated with state informaton of the connector and it's tasks.\n+     * @return an instance of {@link ConnectorStateInfo} populated with state information of the connector and its tasks.\n      * @throws ConnectRestException if the HTTP request to the REST API failed with a valid status code.\n      * @throws ConnectException for any other error.\n      */\n     public ConnectorStateInfo connectorStatus(String connectorName) {\n         ObjectMapper mapper = new ObjectMapper();\n+        String url = endpointForResource(String.format(\"connectors/%s/status\", connectorName));\n+        Response response = executeGet(url);\n         try {\n-            String url = endpointForResource(String.format(\"connectors/%s/status\", connectorName));\n-            return mapper.readerFor(ConnectorStateInfo.class).readValue(executeGet(url));\n+            if (response.getStatus() < Response.Status.BAD_REQUEST.getStatusCode()) {\n+                return mapper.readerFor(ConnectorStateInfo.class)\n+                        .readValue(responseToString(response));\n+            }\n         } catch (IOException e) {\n-            log.error(\"Could not read connector state\", e);\n-            throw new ConnectException(\"Could not read connector state\", e);\n+            log.error(\"Could not read connector state from response: {}\",\n+                    responseToString(response), e);\n+            throw new ConnectException(\"Could not not parse connector state\", e);\n         }\n+        throw new ConnectRestException(response.getStatus(),\n+                \"Could not read connector state. Error response: \" + responseToString(response));\n     }\n \n-    public String adminEndpoint(String resource) throws IOException {\n+    public String adminEndpoint(String resource) {\n         String url = connectCluster.stream()\n                 .map(WorkerHandle::adminUrl)\n                 .filter(Objects::nonNull)\n                 .findFirst()\n-                .orElseThrow(() -> new IOException(\"Admin endpoint is disabled.\"))\n+                .orElseThrow(() -> new ConnectException(\"Admin endpoint is disabled.\"))\n                 .toString();\n         return url + resource;\n     }\n \n-    public String endpointForResource(String resource) throws IOException {\n+    public String endpointForResource(String resource) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3MDA5Nw==", "url": "https://github.com/apache/kafka/pull/8055#discussion_r376570097", "bodyText": "Same as above", "author": "kkonstantine", "createdAt": "2020-02-07T19:36:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4ODU5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5MDIxMA==", "url": "https://github.com/apache/kafka/pull/8055#discussion_r376490210", "bodyText": "Changing the return type from int to Response would be a breaking change. While this test harness is technically not part of the public API of Connect, we did intend that other projects could use this harness as long as they understand that we might change the API in breaking ways.\nBut IMO we should still try to evolve the API in ways that are backward compatible, and so I would suggest adding new methods that return Response, having the existing methods delegate to them, and deprecate the old methods.", "author": "rhauch", "createdAt": "2020-02-07T16:39:17Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/util/clusters/EmbeddedConnectCluster.java", "diffHunk": "@@ -363,87 +380,97 @@ public EmbeddedKafkaCluster kafka() {\n         return kafkaCluster;\n     }\n \n-    public int executePut(String url, String body) throws IOException {\n-        log.debug(\"Executing PUT request to URL={}. Payload={}\", url, body);\n-        HttpURLConnection httpCon = (HttpURLConnection) new URL(url).openConnection();\n-        httpCon.setDoOutput(true);\n-        httpCon.setRequestProperty(\"Content-Type\", \"application/json\");\n-        httpCon.setRequestMethod(\"PUT\");\n-        try (OutputStreamWriter out = new OutputStreamWriter(httpCon.getOutputStream())) {\n-            out.write(body);\n-        }\n-        if (httpCon.getResponseCode() < HttpURLConnection.HTTP_BAD_REQUEST) {\n-            try (InputStream is = httpCon.getInputStream()) {\n-                log.info(\"PUT response for URL={} is {}\", url, responseToString(is));\n-            }\n-        } else {\n-            try (InputStream is = httpCon.getErrorStream()) {\n-                log.info(\"PUT error response for URL={} is {}\", url, responseToString(is));\n-            }\n-        }\n-        return httpCon.getResponseCode();\n+    /**\n+     * Execute a GET request on the given URL.\n+     *\n+     * @param url the HTTP endpoint\n+     * @return the response to the GET request\n+     * @throws ConnectException if execution of the GET request fails\n+     */\n+    public Response executeGet(String url) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3MDc1Mg==", "url": "https://github.com/apache/kafka/pull/8055#discussion_r376570752", "bodyText": "That's an excellent point. I overlooked this possibility.\nI've deprecated all the execute* methods. Since there can't be overloading on the return type alone I've added the new methods as request*. Hope that works.", "author": "kkonstantine", "createdAt": "2020-02-07T19:37:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5MDIxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5MTg1Nw==", "url": "https://github.com/apache/kafka/pull/8055#discussion_r376491857", "bodyText": "Technically, we shouldn't have to change this test if we were to maintain backward compatibility as I suggested on a different comment. But if we were to deprecate the existing executePost method that returns an int (and similar methods), I think it's worth changing this test to use the new methods that do return the Response to prevent a deprecation warning and to show users an example of how to migrate to the new methods.", "author": "rhauch", "createdAt": "2020-02-07T16:42:26Z", "path": "connect/runtime/src/test/java/org/apache/kafka/connect/integration/SessionedProtocolIntegrationTest.java", "diffHunk": "@@ -162,7 +162,7 @@ public void ensureInternalEndpointIsSecured() throws Throwable {\n         );\n         assertEquals(\n             FORBIDDEN.getStatusCode(),\n-            connect.executePost(connectorTasksEndpoint, \"[]\", invalidSignatureHeaders)\n+            connect.executePost(connectorTasksEndpoint, \"[]\", invalidSignatureHeaders).getStatus()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2OTQwMA==", "url": "https://github.com/apache/kafka/pull/8055#discussion_r376569400", "bodyText": "I agree. Using the new methods now.", "author": "kkonstantine", "createdAt": "2020-02-07T19:34:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5MTg1Nw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "87d90831082603afe49d4f0225a0e066b593db48", "url": "https://github.com/apache/kafka/commit/87d90831082603afe49d4f0225a0e066b593db48", "message": "MINOR: Start using Response and replace IOException in EmbeddedConnectCluster for failures", "committedDate": "2020-02-10T23:54:02Z", "type": "commit"}, {"oid": "265bd60bdc77fad442134d3ad1a4abddc4ef00b3", "url": "https://github.com/apache/kafka/commit/265bd60bdc77fad442134d3ad1a4abddc4ef00b3", "message": "MINOR: Fix typos", "committedDate": "2020-02-10T23:54:02Z", "type": "commit"}, {"oid": "9cd701b6616ec93ce9e090fbb13d6de58607cdc2", "url": "https://github.com/apache/kafka/commit/9cd701b6616ec93ce9e090fbb13d6de58607cdc2", "message": "MINOR: Small fixes including javadocs", "committedDate": "2020-02-10T23:54:02Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "3fa03cf089bee00757bf50d72692fd1eb8a7df0c", "url": "https://github.com/apache/kafka/commit/3fa03cf089bee00757bf50d72692fd1eb8a7df0c", "message": "MINOR: Deprecate existing methods and add missing javadocs", "committedDate": "2020-02-11T19:19:39Z", "type": "commit"}, {"oid": "939ba2286b70346ac333188d4e6b2acb5864b20d", "url": "https://github.com/apache/kafka/commit/939ba2286b70346ac333188d4e6b2acb5864b20d", "message": "MINOR: Introduce common assertions under EmbeddedConnectClusterAssertions", "committedDate": "2020-02-11T19:19:39Z", "type": "commit"}, {"oid": "939ba2286b70346ac333188d4e6b2acb5864b20d", "url": "https://github.com/apache/kafka/commit/939ba2286b70346ac333188d4e6b2acb5864b20d", "message": "MINOR: Introduce common assertions under EmbeddedConnectClusterAssertions", "committedDate": "2020-02-11T19:19:39Z", "type": "forcePushed"}]}