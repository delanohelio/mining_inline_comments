{"pr_number": 9417, "pr_title": "MINOR: Fix flaky ControllerMutationQuotaTest.testQuotaMetric", "pr_createdAt": "2020-10-12T22:47:52Z", "pr_url": "https://github.com/apache/kafka/pull/9417", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM2Mzc2Mg==", "url": "https://github.com/apache/kafka/pull/9417#discussion_r506363762", "bodyText": "While this works, I wonder if this is the right way to overcome the issue. My concern is that there are other read paths which remain unprotected so we are not consistent. I would rather prefer to update the test as you suggested.", "author": "dajac", "createdAt": "2020-10-16T12:28:55Z", "path": "core/src/main/scala/kafka/server/ClientQuotaManager.scala", "diffHunk": "@@ -360,8 +360,14 @@ class ClientQuotaManager(private val config: ClientQuotaManagerConfig,\n    * Note: this method is expensive, it is meant to be used by tests only\n    */\n   def quota(userPrincipal: KafkaPrincipal, clientId: String): Quota = {\n-    val metricTags = quotaCallback.quotaMetricTags(clientQuotaType, userPrincipal, clientId)\n-    Quota.upperBound(quotaLimit(metricTags))\n+    // acquire read lock to ensure that both quota limit and metric config are updated atomically\n+    lock.readLock().lock()\n+    try {\n+      val metricTags = quotaCallback.quotaMetricTags(clientQuotaType, userPrincipal, clientId)\n+      Quota.upperBound(quotaLimit(metricTags))\n+    } finally {\n+      lock.readLock().unlock()\n+    }", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUzNjk1Ng==", "url": "https://github.com/apache/kafka/pull/9417#discussion_r507536956", "bodyText": "nit: Could we use DEFAULT_MAX_WAIT_MS (defined in o.a.k.t.TestUtils) here?", "author": "dajac", "createdAt": "2020-10-19T07:44:26Z", "path": "core/src/test/scala/unit/kafka/server/ControllerMutationQuotaTest.scala", "diffHunk": "@@ -381,16 +381,18 @@ class ControllerMutationQuotaTest extends BaseRequestTest {\n     Option(servers.head.metrics.metric(metricName))\n   }\n \n-  private def verifyQuotaMetric(user: String, expectedQuota: Double): Unit = {\n-    quotaMetric(user) match {\n-      case Some(metric) =>\n-        val config = metric.config()\n-        assertEquals(expectedQuota, config.quota().bound(), 0.1)\n-        assertEquals(ControllerQuotaSamples, config.samples())\n-        assertEquals(ControllerQuotaWindowSizeSeconds * 1000, config.timeWindowMs())\n-\n-      case None =>\n-        fail(s\"Quota metric of $user is not defined\")\n+  private def waitQuotaMetric(user: String, expectedQuota: Double): Unit = {\n+    TestUtils.retry(200) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3be693efe60e721f366d5fd8bfbc674e60e9d038", "url": "https://github.com/apache/kafka/commit/3be693efe60e721f366d5fd8bfbc674e60e9d038", "message": "retry when checking quota config value", "committedDate": "2020-10-20T16:18:29Z", "type": "commit"}, {"oid": "b2036d9bdc4a512bc2af8a0d93ac1bcf0dbdc81e", "url": "https://github.com/apache/kafka/commit/b2036d9bdc4a512bc2af8a0d93ac1bcf0dbdc81e", "message": "use DEFAULT_MAX_WAIT_MS", "committedDate": "2020-10-20T16:18:29Z", "type": "commit"}, {"oid": "b2036d9bdc4a512bc2af8a0d93ac1bcf0dbdc81e", "url": "https://github.com/apache/kafka/commit/b2036d9bdc4a512bc2af8a0d93ac1bcf0dbdc81e", "message": "use DEFAULT_MAX_WAIT_MS", "committedDate": "2020-10-20T16:18:29Z", "type": "forcePushed"}]}