{"pr_number": 9520, "pr_title": "MINOR: replace test \"expected\" parameter by assertThrows", "pr_createdAt": "2020-10-28T15:06:37Z", "pr_url": "https://github.com/apache/kafka/pull/9520", "timeline": [{"oid": "a74703b812598cb62025aef3c421790c0869b746", "url": "https://github.com/apache/kafka/commit/a74703b812598cb62025aef3c421790c0869b746", "message": "MINOR: replace test \"expected\" parameter by assertThrows", "committedDate": "2020-11-18T10:38:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQxNjEzOQ==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r539416139", "bodyText": "We don't need this anymore?", "author": "ijuma", "createdAt": "2020-12-09T15:43:43Z", "path": "clients/src/test/java/org/apache/kafka/clients/NetworkClientTest.java", "diffHunk": "@@ -117,13 +118,12 @@ public void setup() {\n         selector.reset();\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testSendToUnreadyNode() {\n         MetadataRequest.Builder builder = new MetadataRequest.Builder(Collections.singletonList(\"test\"), true);\n         long now = time.milliseconds();\n         ClientRequest request = client.newClientRequest(\"5\", builder, now, false);\n-        client.send(request, now);\n-        client.poll(1, time.milliseconds());", "originalCommit": "a74703b812598cb62025aef3c421790c0869b746", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyMjc2MA==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r539422760", "bodyText": "client.send(request, now); throws exception so client.poll(1, time.milliseconds()); was never reached.", "author": "chia7712", "createdAt": "2020-12-09T15:51:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQxNjEzOQ=="}], "type": "inlineReview"}, {"oid": "15275951b436908f24a023652b8fd20bdf339430", "url": "https://github.com/apache/kafka/commit/15275951b436908f24a023652b8fd20bdf339430", "message": "MINOR: replace test \"expected\" parameter by assertThrows", "committedDate": "2020-12-09T15:53:36Z", "type": "forcePushed"}, {"oid": "e5972a6c028dca139699c235a85de24a4e1968a7", "url": "https://github.com/apache/kafka/commit/e5972a6c028dca139699c235a85de24a4e1968a7", "message": "MINOR: replace test \"expected\" parameter by assertThrows", "committedDate": "2020-12-14T09:17:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyMDQzNA==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r546320434", "bodyText": "We can remove the comment, it's redundant.", "author": "ijuma", "createdAt": "2020-12-20T04:35:20Z", "path": "clients/src/test/java/org/apache/kafka/common/metrics/MetricsTest.java", "diffHunk": "@@ -196,12 +197,12 @@ public void testHierarchicalSensors() {\n         assertNull(metrics.childrenSensors().get(grandchild));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n     public void testBadSensorHierarchy() {\n         Sensor p = metrics.sensor(\"parent\");\n         Sensor c1 = metrics.sensor(\"child1\", p);\n         Sensor c2 = metrics.sensor(\"child2\", p);\n-        metrics.sensor(\"gc\", c1, c2); // should fail\n+        assertThrows(IllegalArgumentException.class, () -> metrics.sensor(\"gc\", c1, c2)); // should fail", "originalCommit": "e5972a6c028dca139699c235a85de24a4e1968a7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyMTMwNA==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r546321304", "bodyText": "Hmm, I think this was intended to fail on the second nextBatch, so maybe we should adjust the test.", "author": "ijuma", "createdAt": "2020-12-20T04:44:51Z", "path": "clients/src/test/java/org/apache/kafka/common/record/ByteBufferLogInputStreamTest.java", "diffHunk": "@@ -116,8 +117,7 @@ public void iteratorRaisesOnTooLargeRecords() {\n         buffer.flip();\n \n         ByteBufferLogInputStream logInputStream = new ByteBufferLogInputStream(buffer, 25);\n-        assertNotNull(logInputStream.nextBatch());\n-        logInputStream.nextBatch();\n+        assertThrows(CorruptRecordException.class, logInputStream::nextBatch);", "originalCommit": "e5972a6c028dca139699c235a85de24a4e1968a7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQzOTI1Nw==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r546439257", "bodyText": "We should not remove this, right?", "author": "ijuma", "createdAt": "2020-12-20T21:34:18Z", "path": "core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala", "diffHunk": "@@ -411,14 +411,13 @@ abstract class EndToEndAuthorizationTest extends IntegrationTestHarness with Sas\n     * Tests that a consumer fails to consume messages without the appropriate\n     * ACL set.\n     */\n-  @Test(expected = classOf[KafkaException])\n+  @Test\n   def testNoConsumeWithoutDescribeAclViaAssign(): Unit = {\n     noConsumeWithoutDescribeAclSetup()\n     val consumer = createConsumer()\n     consumer.assign(List(tp).asJava)\n     // the exception is expected when the consumer attempts to lookup offsets\n-    consumeRecords(consumer)\n-    confirmReauthenticationMetrics()", "originalCommit": "e5972a6c028dca139699c235a85de24a4e1968a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4MDgzMw==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r546580833", "bodyText": "good catching!", "author": "chia7712", "createdAt": "2020-12-21T08:51:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQzOTI1Nw=="}], "type": "inlineReview"}, {"oid": "2387efe966e9073e251b2b825b02ee51be3cbcc2", "url": "https://github.com/apache/kafka/commit/2387efe966e9073e251b2b825b02ee51be3cbcc2", "message": "replace org.scalatest.Assertions by junit as much as possible", "committedDate": "2020-12-21T08:53:20Z", "type": "forcePushed"}, {"oid": "f04e2adf41f82b522f8ffe10ba30e131119d2388", "url": "https://github.com/apache/kafka/commit/f04e2adf41f82b522f8ffe10ba30e131119d2388", "message": "replace org.scalatest.Assertions by junit as much as possible", "committedDate": "2020-12-22T03:36:23Z", "type": "forcePushed"}, {"oid": "0672b9590cc1c3e7d4e7f4976e834953ddfe0a6a", "url": "https://github.com/apache/kafka/commit/0672b9590cc1c3e7d4e7f4976e834953ddfe0a6a", "message": "replace all ExpectedException or @Test(expected = Exception.class) by assertThrows", "committedDate": "2020-12-23T08:15:54Z", "type": "forcePushed"}, {"oid": "e07f732f06db0aed77e6b84c0a364da609d37d73", "url": "https://github.com/apache/kafka/commit/e07f732f06db0aed77e6b84c0a364da609d37d73", "message": "replace all ExpectedException or @test(expected = Exception.class) by assertThrows", "committedDate": "2020-12-23T11:45:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxNzE1NQ==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549417155", "bodyText": "Was this new line intentional?", "author": "ijuma", "createdAt": "2020-12-28T17:02:30Z", "path": "clients/src/test/java/org/apache/kafka/clients/producer/KafkaProducerTest.java", "diffHunk": "@@ -192,11 +192,12 @@ public void testConstructorWithSerializers() {\n         new KafkaProducer<>(producerProps, new ByteArraySerializer(), new ByteArraySerializer()).close();\n     }\n \n-    @Test(expected = ConfigException.class)\n+    @Test\n     public void testNoSerializerProvided() {\n         Properties producerProps = new Properties();\n         producerProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9000\");\n-        new KafkaProducer(producerProps);\n+", "originalCommit": "e07f732f06db0aed77e6b84c0a364da609d37d73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxNzg5Mg==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549417892", "bodyText": "I think this was intended to be groupCommit2, right?", "author": "ijuma", "createdAt": "2020-12-28T17:05:02Z", "path": "clients/src/test/java/org/apache/kafka/clients/producer/MockProducerTest.java", "diffHunk": "@@ -663,12 +623,6 @@ public void shouldPreserveOffsetsFromCommitByGroupMetadataOnAbortIfTransactionsA\n         producer.beginTransaction();\n \n         String group2 = \"g2\";\n-        Map<TopicPartition, OffsetAndMetadata> groupCommit2 = new HashMap<TopicPartition, OffsetAndMetadata>() {\n-            {\n-                put(new TopicPartition(topic, 2), new OffsetAndMetadata(53L, null));\n-                put(new TopicPartition(topic, 3), new OffsetAndMetadata(84L, null));\n-            }\n-        };\n         producer.sendOffsetsToTransaction(groupCommit, new ConsumerGroupMetadata(group2));", "originalCommit": "e07f732f06db0aed77e6b84c0a364da609d37d73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxODM4OQ==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549418389", "bodyText": "This change doesn't seem right. The test is intended to test maybeAddPartitionToTransaction.", "author": "ijuma", "createdAt": "2020-12-28T17:06:33Z", "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java", "diffHunk": "@@ -444,34 +444,30 @@ public void testAddPartitionToTransactionRetainsRetryBackoffWhenPartitionsAlread\n         assertEquals(DEFAULT_RETRY_BACKOFF_MS, handler.retryBackoffMs());\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionBeforeInitTransactions() {\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(IllegalStateException.class, () -> transactionManager.failIfNotReadyForSend());", "originalCommit": "e07f732f06db0aed77e6b84c0a364da609d37d73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxODQ3Mw==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549418473", "bodyText": "Same as above.", "author": "ijuma", "createdAt": "2020-12-28T17:06:45Z", "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java", "diffHunk": "@@ -444,34 +444,30 @@ public void testAddPartitionToTransactionRetainsRetryBackoffWhenPartitionsAlread\n         assertEquals(DEFAULT_RETRY_BACKOFF_MS, handler.retryBackoffMs());\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionBeforeInitTransactions() {\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(IllegalStateException.class, () -> transactionManager.failIfNotReadyForSend());\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionBeforeBeginTransaction() {\n         doInitTransactions();\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(IllegalStateException.class, () -> transactionManager.failIfNotReadyForSend());", "originalCommit": "e07f732f06db0aed77e6b84c0a364da609d37d73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxODU4MQ==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549418581", "bodyText": "Same as above.", "author": "ijuma", "createdAt": "2020-12-28T17:06:59Z", "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java", "diffHunk": "@@ -444,34 +444,30 @@ public void testAddPartitionToTransactionRetainsRetryBackoffWhenPartitionsAlread\n         assertEquals(DEFAULT_RETRY_BACKOFF_MS, handler.retryBackoffMs());\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionBeforeInitTransactions() {\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(IllegalStateException.class, () -> transactionManager.failIfNotReadyForSend());\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionBeforeBeginTransaction() {\n         doInitTransactions();\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(IllegalStateException.class, () -> transactionManager.failIfNotReadyForSend());\n     }\n \n-    @Test(expected = KafkaException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionAfterAbortableError() {\n         doInitTransactions();\n         transactionManager.beginTransaction();\n         transactionManager.transitionToAbortableError(new KafkaException());\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(KafkaException.class, () -> transactionManager.failIfNotReadyForSend());", "originalCommit": "e07f732f06db0aed77e6b84c0a364da609d37d73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxODYxNw==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549418617", "bodyText": "Same as above.", "author": "ijuma", "createdAt": "2020-12-28T17:07:06Z", "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java", "diffHunk": "@@ -444,34 +444,30 @@ public void testAddPartitionToTransactionRetainsRetryBackoffWhenPartitionsAlread\n         assertEquals(DEFAULT_RETRY_BACKOFF_MS, handler.retryBackoffMs());\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionBeforeInitTransactions() {\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(IllegalStateException.class, () -> transactionManager.failIfNotReadyForSend());\n     }\n \n-    @Test(expected = IllegalStateException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionBeforeBeginTransaction() {\n         doInitTransactions();\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(IllegalStateException.class, () -> transactionManager.failIfNotReadyForSend());\n     }\n \n-    @Test(expected = KafkaException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionAfterAbortableError() {\n         doInitTransactions();\n         transactionManager.beginTransaction();\n         transactionManager.transitionToAbortableError(new KafkaException());\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(KafkaException.class, () -> transactionManager.failIfNotReadyForSend());\n     }\n \n-    @Test(expected = KafkaException.class)\n+    @Test\n     public void testMaybeAddPartitionToTransactionAfterFatalError() {\n         doInitTransactions();\n         transactionManager.transitionToFatalError(new KafkaException());\n-        transactionManager.failIfNotReadyForSend();\n-        transactionManager.maybeAddPartitionToTransaction(new TopicPartition(\"foo\", 0));\n+        assertThrows(KafkaException.class, () -> transactionManager.failIfNotReadyForSend());", "originalCommit": "e07f732f06db0aed77e6b84c0a364da609d37d73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU2NzQ3Nw==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549567477", "bodyText": "717c55b moved the check of state out of maybeAddPartitionToTransaction and it added failIfNotReadyForSend to all test cases to make them throw exception. I will update the test cases name to avoid confusion.", "author": "chia7712", "createdAt": "2020-12-29T04:54:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxODYxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxOTU4NQ==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549419585", "bodyText": "Do we still need to call close to avoid a leak?", "author": "ijuma", "createdAt": "2020-12-28T17:10:35Z", "path": "clients/src/test/java/org/apache/kafka/common/memory/GarbageCollectedMemoryPoolTest.java", "diffHunk": "@@ -23,68 +23,74 @@\n import org.junit.Assert;\n import org.junit.Test;\n \n+import static org.junit.Assert.assertThrows;\n+\n \n public class GarbageCollectedMemoryPoolTest {\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testZeroSize() throws Exception {\n-        new GarbageCollectedMemoryPool(0, 7, true, null);\n+    @Test\n+    public void testZeroSize() {\n+        assertThrows(IllegalArgumentException.class,\n+            () -> new GarbageCollectedMemoryPool(0, 7, true, null));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testNegativeSize() throws Exception {\n-        new GarbageCollectedMemoryPool(-1, 7, false, null);\n+    @Test\n+    public void testNegativeSize() {\n+        assertThrows(IllegalArgumentException.class,\n+            () -> new GarbageCollectedMemoryPool(-1, 7, false, null));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testZeroMaxAllocation() throws Exception {\n-        new GarbageCollectedMemoryPool(100, 0, true, null);\n+    @Test\n+    public void testZeroMaxAllocation() {\n+        assertThrows(IllegalArgumentException.class,\n+            () -> new GarbageCollectedMemoryPool(100, 0, true, null));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testNegativeMaxAllocation() throws Exception {\n-        new GarbageCollectedMemoryPool(100, -1, false, null);\n+    @Test\n+    public void testNegativeMaxAllocation() {\n+        assertThrows(IllegalArgumentException.class,\n+            () -> new GarbageCollectedMemoryPool(100, -1, false, null));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testMaxAllocationLargerThanSize() throws Exception {\n-        new GarbageCollectedMemoryPool(100, 101, true, null);\n+    @Test\n+    public void testMaxAllocationLargerThanSize() {\n+        assertThrows(IllegalArgumentException.class,\n+            () -> new GarbageCollectedMemoryPool(100, 101, true, null));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testAllocationOverMaxAllocation() throws Exception {\n+    @Test\n+    public void testAllocationOverMaxAllocation() {\n         GarbageCollectedMemoryPool pool = new GarbageCollectedMemoryPool(1000, 10, false, null);\n-        pool.tryAllocate(11);\n+        assertThrows(IllegalArgumentException.class, () -> pool.tryAllocate(11));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testAllocationZero() throws Exception {\n+    @Test\n+    public void testAllocationZero() {\n         GarbageCollectedMemoryPool pool = new GarbageCollectedMemoryPool(1000, 10, true, null);\n-        pool.tryAllocate(0);\n+        assertThrows(IllegalArgumentException.class, () -> pool.tryAllocate(0));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testAllocationNegative() throws Exception {\n+    @Test\n+    public void testAllocationNegative() {\n         GarbageCollectedMemoryPool pool = new GarbageCollectedMemoryPool(1000, 10, false, null);\n-        pool.tryAllocate(-1);\n+        assertThrows(IllegalArgumentException.class, () -> pool.tryAllocate(-1));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testReleaseNull() throws Exception {\n+    @Test\n+    public void testReleaseNull() {\n         GarbageCollectedMemoryPool pool = new GarbageCollectedMemoryPool(1000, 10, true, null);\n-        pool.release(null);\n+        assertThrows(IllegalArgumentException.class, () -> pool.release(null));\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testReleaseForeignBuffer() throws Exception {\n+    @Test\n+    public void testReleaseForeignBuffer() {\n         GarbageCollectedMemoryPool pool = new GarbageCollectedMemoryPool(1000, 10, true, null);\n         ByteBuffer fellOffATruck = ByteBuffer.allocate(1);\n-        pool.release(fellOffATruck);\n-        pool.close();", "originalCommit": "e07f732f06db0aed77e6b84c0a364da609d37d73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQyMDgxMQ==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549420811", "bodyText": "Why did we change the magic value version here?", "author": "ijuma", "createdAt": "2020-12-28T17:14:54Z", "path": "clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java", "diffHunk": "@@ -504,20 +510,21 @@ public void writePastLimit() {\n         }\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n     public void testAppendAtInvalidOffset() {\n         ByteBuffer buffer = ByteBuffer.allocate(1024);\n         buffer.position(bufferOffset);\n \n         long logAppendTime = System.currentTimeMillis();\n-        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.MAGIC_VALUE_V1, compressionType,\n+        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.MAGIC_VALUE_V2, compressionType,", "originalCommit": "e07f732f06db0aed77e6b84c0a364da609d37d73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU2ODcyOQ==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549568729", "bodyText": "magic 1 does not support ZStandard", "author": "chia7712", "createdAt": "2020-12-29T05:02:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQyMDgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjcwNTU5OA==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r552705598", "bodyText": "Unrelated to the changes in this PR then, just something you noticed? Worth a line in the PR description to avoid confusion.", "author": "ijuma", "createdAt": "2021-01-06T15:17:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQyMDgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjcxMzU1OQ==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r552713559", "bodyText": "will copy that", "author": "chia7712", "createdAt": "2021-01-06T15:26:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQyMDgxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQyMjE4NQ==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549422185", "bodyText": "Why don't we need the verify call?", "author": "ijuma", "createdAt": "2020-12-28T17:19:18Z", "path": "clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslServerAuthenticatorTest.java", "diffHunk": "@@ -67,8 +68,7 @@ public void testOversizeRequest() throws IOException {\n             invocation.<ByteBuffer>getArgument(0).putInt(SaslServerAuthenticator.MAX_RECEIVE_SIZE + 1);\n             return 4;\n         });\n-        authenticator.authenticate();\n-        verify(transportLayer).read(any(ByteBuffer.class));", "originalCommit": "e07f732f06db0aed77e6b84c0a364da609d37d73", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQyMzEzMg==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549423132", "bodyText": "It seems that we are not testing the validate method anymore.", "author": "ijuma", "createdAt": "2020-12-28T17:22:49Z", "path": "connect/api/src/test/java/org/apache/kafka/connect/data/SchemaBuilderTest.java", "diffHunk": "@@ -293,16 +295,13 @@ public void testEmptyStruct() {\n         new Struct(emptyStructSchema);\n     }\n \n-    @Test(expected = SchemaBuilderException.class)\n+    @Test\n     public void testDuplicateFields() {\n-        final Schema schema = SchemaBuilder.struct()\n-                .name(\"testing\")\n-                .field(\"id\", SchemaBuilder.string().doc(\"\").build())\n-                .field(\"id\", SchemaBuilder.string().doc(\"\").build())\n-                .build();\n-        final Struct struct = new Struct(schema)\n-                .put(\"id\", \"testing\");\n-        struct.validate();\n+        assertThrows(SchemaBuilderException.class, () -> SchemaBuilder.struct()\n+            .name(\"testing\")\n+            .field(\"id\", SchemaBuilder.string().doc(\"\").build())\n+            .field(\"id\", SchemaBuilder.string().doc(\"\").build())\n+            .build());", "originalCommit": "e07f732f06db0aed77e6b84c0a364da609d37d73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU2OTgzNg==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r549569836", "bodyText": "StructTest has test cases for validate method.", "author": "chia7712", "createdAt": "2020-12-29T05:09:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQyMzEzMg=="}], "type": "inlineReview"}, {"oid": "eb40960b6bac8d5c7b52cec9f6f9dca680dc2509", "url": "https://github.com/apache/kafka/commit/eb40960b6bac8d5c7b52cec9f6f9dca680dc2509", "message": "fix conflicts", "committedDate": "2021-01-07T06:50:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM2ODI5OA==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553368298", "bodyText": "Should we keep the close?", "author": "ijuma", "createdAt": "2021-01-07T14:40:05Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorNodeTest.java", "diffHunk": "@@ -49,18 +49,17 @@\n public class ProcessorNodeTest {\n \n     @SuppressWarnings(\"unchecked\")\n-    @Test(expected = StreamsException.class)\n+    @Test\n     public void shouldThrowStreamsExceptionIfExceptionCaughtDuringInit() {\n         final ProcessorNode node = new ProcessorNode(\"name\", new ExceptionalProcessor(), Collections.emptySet());\n-        node.init(null);\n+        assertThrows(StreamsException.class, () -> node.init(null));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    @Test(expected = StreamsException.class)\n+    @Test\n     public void shouldThrowStreamsExceptionIfExceptionCaughtDuringClose() {\n         final ProcessorNode node = new ProcessorNode(\"name\", new ExceptionalProcessor(), Collections.emptySet());\n-        node.init(null);\n-        node.close();", "originalCommit": "eb40960b6bac8d5c7b52cec9f6f9dca680dc2509", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM5NDQwNg==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553394406", "bodyText": "It fails to init so the close is unnecessary.", "author": "chia7712", "createdAt": "2021-01-07T15:21:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM2ODI5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQzNzMwNA==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553437304", "bodyText": "I don't think this is necessarily the case. The failure during init can happen after some resources have been allocated, right?", "author": "ijuma", "createdAt": "2021-01-07T16:28:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM2ODI5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM2OTg3Mw==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553369873", "bodyText": "Why did we change this?", "author": "ijuma", "createdAt": "2021-01-07T14:42:39Z", "path": "core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala", "diffHunk": "@@ -715,7 +711,7 @@ class ZooKeeperClientTest extends ZooKeeperTestHarness {\n \n   private def cleanMetricsRegistry(): Unit = {\n     val metrics = KafkaYammerMetrics.defaultRegistry\n-    metrics.allMetrics.keySet.forEach(metrics.removeMetric)\n+    metrics.allMetrics.keySet.forEach(m => metrics.removeMetric(m))", "originalCommit": "eb40960b6bac8d5c7b52cec9f6f9dca680dc2509", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM4NjEwNA==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553386104", "bodyText": "IntelliJ can't be aware that lambda function :(\nWill revert it.", "author": "chia7712", "createdAt": "2021-01-07T15:08:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM2OTg3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM3NjI5OA==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553376298", "bodyText": "Why did we increase maxBlockMs here?", "author": "ijuma", "createdAt": "2021-01-07T14:53:00Z", "path": "core/src/test/scala/integration/kafka/api/TransactionsTest.scala", "diffHunk": "@@ -407,46 +406,40 @@ class TransactionsTest extends KafkaServerTestHarness {\n     TestUtils.waitUntilTrue(() => offsetAndMetadata.equals(consumer.committed(Set(tp).asJava).get(tp)), \"cannot read committed offset\")\n   }\n \n-  @Test(expected = classOf[TimeoutException])\n+  @Test\n   def testInitTransactionsTimeout(): Unit = {\n     testTimeout(false, producer => producer.initTransactions())\n   }\n \n-  @Test(expected = classOf[TimeoutException])\n+  @Test\n   def testSendOffsetsToTransactionTimeout(): Unit = {\n     testTimeout(true, producer => producer.sendOffsetsToTransaction(\n       Map(new TopicPartition(topic1, 0) -> new OffsetAndMetadata(0)).asJava, \"test-group\"))\n   }\n \n-  @Test(expected = classOf[TimeoutException])\n+  @Test\n   def testCommitTransactionTimeout(): Unit = {\n     testTimeout(true, producer => producer.commitTransaction())\n   }\n \n-  @Test(expected = classOf[TimeoutException])\n+  @Test\n   def testAbortTransactionTimeout(): Unit = {\n     testTimeout(true, producer => producer.abortTransaction())\n   }\n \n-  def testTimeout(needInitAndSendMsg: Boolean,\n+  private def testTimeout(needInitAndSendMsg: Boolean,\n                   timeoutProcess: KafkaProducer[Array[Byte], Array[Byte]] => Unit): Unit = {\n-    val producer = createTransactionalProducer(\"transactionProducer\", maxBlockMs =  1000)\n-\n+    val producer = createTransactionalProducer(\"transactionProducer\", maxBlockMs = 3000)", "originalCommit": "eb40960b6bac8d5c7b52cec9f6f9dca680dc2509", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM5MDEzMg==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553390132", "bodyText": "1000 is too small to complete createTransactionalProducer and it causes TimeoutException. I don't think those test cases tried to test timeout on createTransactionalProducer.", "author": "chia7712", "createdAt": "2021-01-07T15:15:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM3NjI5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM3ODgyMA==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553378820", "bodyText": "Why did you change this?", "author": "ijuma", "createdAt": "2021-01-07T14:56:52Z", "path": "core/src/test/scala/unit/kafka/utils/QuotaUtilsTest.scala", "diffHunk": "@@ -17,24 +17,21 @@\n \n package kafka.utils\n \n-import java.util.concurrent.TimeUnit\n-\n import org.apache.kafka.common.MetricName\n-import org.apache.kafka.common.metrics.{KafkaMetric, MetricConfig, Quota, QuotaViolationException}\n import org.apache.kafka.common.metrics.stats.{Rate, Value}\n-\n-import scala.jdk.CollectionConverters._\n+import org.apache.kafka.common.metrics.{KafkaMetric, MetricConfig, Quota, QuotaViolationException}\n import org.junit.Assert._\n import org.junit.Test\n-import org.scalatest.Assertions.assertThrows\n+\n+import java.util.concurrent.TimeUnit\n \n class QuotaUtilsTest {\n \n   private val time = new MockTime\n   private val numSamples = 10\n   private val sampleWindowSec = 1\n   private val maxThrottleTimeMs = 500\n-  private val metricName = new MetricName(\"test-metric\", \"groupA\", \"testA\", Map.empty.asJava)\n+  private val metricName = new MetricName(\"test-metric\", \"groupA\", \"testA\", java.util.Collections.emptyMap())", "originalCommit": "eb40960b6bac8d5c7b52cec9f6f9dca680dc2509", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM5MjYwMQ==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553392601", "bodyText": "my bad and will revert it. (IntelliJ complained about the erased types)", "author": "chia7712", "createdAt": "2021-01-07T15:18:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM3ODgyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQzNzk5NA==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553437994", "bodyText": "I would ignore IntelliJ issues if it compiles without warnings. I think there are a few more changes like this in the middle of thousands of lines of diff. Something to avoid in the future. :)", "author": "ijuma", "createdAt": "2021-01-07T16:29:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM3ODgyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQzOTA0Nw==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553439047", "bodyText": "Please give me one second to revert those changes :(", "author": "chia7712", "createdAt": "2021-01-07T16:31:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM3ODgyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM4ODIwNQ==", "url": "https://github.com/apache/kafka/pull/9520#discussion_r553388205", "bodyText": "Why did we change this?", "author": "ijuma", "createdAt": "2021-01-07T15:11:52Z", "path": "core/src/test/scala/unit/kafka/server/DynamicBrokerConfigTest.scala", "diffHunk": "@@ -343,7 +340,7 @@ class DynamicBrokerConfigTest {\n \n     class TestAuthorizer extends Authorizer with Reconfigurable {\n       @volatile var superUsers = \"\"\n-      override def start(serverInfo: AuthorizerServerInfo): util.Map[Endpoint, _ <: CompletionStage[Void]] = Map.empty.asJava\n+      override def start(serverInfo: AuthorizerServerInfo): util.Map[Endpoint, _ <: CompletionStage[Void]] = util.Collections.emptyMap()", "originalCommit": "eb40960b6bac8d5c7b52cec9f6f9dca680dc2509", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "90588f259b156fcffb26d925196b7da15c647695", "url": "https://github.com/apache/kafka/commit/90588f259b156fcffb26d925196b7da15c647695", "message": "fix QuotaUtilsTest", "committedDate": "2021-01-10T05:38:23Z", "type": "forcePushed"}, {"oid": "1be166f24b34a4fae5a6ad75571df0df3ff687cd", "url": "https://github.com/apache/kafka/commit/1be166f24b34a4fae5a6ad75571df0df3ff687cd", "message": "MINOR: replace test \"expected\" parameter by assertThrows", "committedDate": "2021-01-10T07:11:29Z", "type": "commit"}, {"oid": "70a5b51027621386b467094c382b7e006a67f495", "url": "https://github.com/apache/kafka/commit/70a5b51027621386b467094c382b7e006a67f495", "message": "replace org.scalatest.Assertions by junit as much as possible", "committedDate": "2021-01-10T07:11:29Z", "type": "commit"}, {"oid": "fcdba8a4b6cc19839fbc42ee5485c5631056f334", "url": "https://github.com/apache/kafka/commit/fcdba8a4b6cc19839fbc42ee5485c5631056f334", "message": "replace all ExpectedException or @test(expected = Exception.class) by assertThrows", "committedDate": "2021-01-10T07:11:29Z", "type": "commit"}, {"oid": "bdf7f9b5e01225be07723ab624aa4f45e6d417ad", "url": "https://github.com/apache/kafka/commit/bdf7f9b5e01225be07723ab624aa4f45e6d417ad", "message": "address review comment", "committedDate": "2021-01-10T07:11:29Z", "type": "commit"}, {"oid": "3fe0f9c6ac544f180136a7d86e9ccde7e6da226e", "url": "https://github.com/apache/kafka/commit/3fe0f9c6ac544f180136a7d86e9ccde7e6da226e", "message": "fix conflicts", "committedDate": "2021-01-10T07:11:29Z", "type": "commit"}, {"oid": "ed00227129730f36576c6cfd6535497015d037e3", "url": "https://github.com/apache/kafka/commit/ed00227129730f36576c6cfd6535497015d037e3", "message": "revert unnecessary changes", "committedDate": "2021-01-10T07:11:29Z", "type": "commit"}, {"oid": "c1275c81d0d73462467a78d814ace48c8a9c3544", "url": "https://github.com/apache/kafka/commit/c1275c81d0d73462467a78d814ace48c8a9c3544", "message": "revert changes", "committedDate": "2021-01-10T07:11:29Z", "type": "commit"}, {"oid": "adff89925fc6b8837d9721e2891f8ee00476e3b4", "url": "https://github.com/apache/kafka/commit/adff89925fc6b8837d9721e2891f8ee00476e3b4", "message": "revert more changes", "committedDate": "2021-01-10T07:11:29Z", "type": "commit"}, {"oid": "41cd0beedf85001cfcb1e610bc19556fa09ec3c1", "url": "https://github.com/apache/kafka/commit/41cd0beedf85001cfcb1e610bc19556fa09ec3c1", "message": "Revert \"revert more changes\"\n\nThis reverts commit d0e2236e96db0b514f4d2c07641eb236feb1de74.", "committedDate": "2021-01-10T07:11:29Z", "type": "commit"}, {"oid": "4c8d8255b160e2956089c2a6af0b56e79c49c3f6", "url": "https://github.com/apache/kafka/commit/4c8d8255b160e2956089c2a6af0b56e79c49c3f6", "message": "fix QuotaUtilsTest", "committedDate": "2021-01-10T07:11:29Z", "type": "commit"}, {"oid": "4c8d8255b160e2956089c2a6af0b56e79c49c3f6", "url": "https://github.com/apache/kafka/commit/4c8d8255b160e2956089c2a6af0b56e79c49c3f6", "message": "fix QuotaUtilsTest", "committedDate": "2021-01-10T07:11:29Z", "type": "forcePushed"}]}