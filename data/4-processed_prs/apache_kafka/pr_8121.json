{"pr_number": 8121, "pr_title": "KAFKA-6145: Pt 1. Bump protocol version and encode task lag map", "pr_createdAt": "2020-02-15T01:58:49Z", "pr_url": "https://github.com/apache/kafka/pull/8121", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA3NTM3Nw==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r381075377", "bodyText": "This plus the tech debt cleanup allows for the subscription handling to be greatly simplified, here and below in #assign", "author": "ableegoldman", "createdAt": "2020-02-19T04:46:39Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -217,49 +217,17 @@ public String name() {\n     public ByteBuffer subscriptionUserData(final Set<String> topics) {\n         // Adds the following information to subscription\n         // 1. Client UUID (a unique id assigned to an instance of KafkaStreams)\n-        // 2. Task ids of previously running tasks\n-        // 3. Task ids of valid local states on the client's state directory.\n-        final Set<TaskId> standbyTasks = taskManager.tasksOnLocalStorage();\n-        final Set<TaskId> activeTasks = prepareForSubscription(taskManager,\n-            topics,\n-            standbyTasks,\n-            rebalanceProtocol);\n+        // 2. Map from task id to its overall lag", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExMjY3NQ==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r381112675", "bodyText": "This was only ever used to encode the subscription info, which is now all handled by getTaskLags", "author": "ableegoldman", "createdAt": "2020-02-19T07:18:25Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -300,11 +303,27 @@ void handleLostAll() {\n         }\n     }\n \n+    /**\n+     * @return Map from task id to that task's overall lag across all state stores\n+     */\n+    public Map<TaskId, Integer> getTaskLags() {\n+        final Map<TaskId, Integer> taskLags = new HashMap<>();\n+\n+        for (final TaskId id : tasksOnLocalStorage()) {\n+            if (isActive(id)) {\n+                taskLags.put(id, ACTIVE_TASK_SENTINEL_LAG);\n+            } else {\n+                taskLags.put(id, 0);\n+            }\n+        }\n+        return taskLags;\n+    }\n+\n     /**\n      * Returns ids of tasks whose states are kept on the local storage. This includes active, standby, and previously\n      * assigned but not yet cleaned up tasks\n      */\n-    public Set<TaskId> tasksOnLocalStorage() {\n+    Set<TaskId> tasksOnLocalStorage() {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2OTkxOQ==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r385969919", "bodyText": "This method could actually become private, except for a single test. I'm wondering if we can port that test to use getTaskLags instead. Aside from letting us make this private, that would probably improve our testing coverage, since I suppose that test was intended to unit test this class, meaning it should be testing this class's public API, not internal methods.", "author": "vvcephei", "createdAt": "2020-02-28T23:37:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExMjY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNDk4Mg==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r386004982", "bodyText": "This method is getting refactored somewhat heavily in the next PR, where we actually collect the offsets and will lay in some heavy testing. Still trying to strike a balance between not writing/fixing up any tests until the end, and spending time on 50 tests per PR that are all rendered useless as soon as I start the next one.\nBut, I will tighten up this test", "author": "ableegoldman", "createdAt": "2020-02-29T06:01:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExMjY3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ1NTM0MA==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382455340", "bodyText": "req: I understand why you called this a pair. However, it seems odd that this pair consists of three fields. Could you call it TaskLagTriple?", "author": "cadonna", "createdAt": "2020-02-21T08:37:10Z", "path": "streams/src/main/resources/common/message/SubscriptionInfo.json", "diffHunk": "@@ -65,6 +70,27 @@\n           \"type\": \"int32\"\n         }\n       ]\n+    },\n+    {\n+      \"name\": \"TaskLagPair\",", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgyODk3MA==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r384828970", "bodyText": "Ack, will fix this if it turns out nested structs aren't possible", "author": "ableegoldman", "createdAt": "2020-02-26T23:26:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ1NTM0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ1OTg0Nw==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382459847", "bodyText": "Q: Shouldn't that be 7+? Same question for the other two fields.", "author": "cadonna", "createdAt": "2020-02-21T08:47:59Z", "path": "streams/src/main/resources/common/message/SubscriptionInfo.json", "diffHunk": "@@ -65,6 +70,27 @@\n           \"type\": \"int32\"\n         }\n       ]\n+    },\n+    {\n+      \"name\": \"TaskLagPair\",\n+      \"versions\": \"7+\",\n+      \"fields\": [\n+        {\n+          \"name\": \"topicGroupId\",\n+          \"versions\": \"1+\",", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgyNzMzMA==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r384827330", "bodyText": "Not sure...I'll try to get clarification on the best practice here but I don't think it matters", "author": "ableegoldman", "createdAt": "2020-02-26T23:21:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ1OTg0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ2NDI5OQ==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382464299", "bodyText": "Q: Is it not possible to use the struct TaskId here? If not, the versions field of TaskId (and of all nested fields?) should be set to 1-6, shouldn't they? TaskId is only used for the fields that are removed in version 7.", "author": "cadonna", "createdAt": "2020-02-21T08:58:20Z", "path": "streams/src/main/resources/common/message/SubscriptionInfo.json", "diffHunk": "@@ -65,6 +70,27 @@\n           \"type\": \"int32\"\n         }\n       ]\n+    },\n+    {\n+      \"name\": \"TaskLagPair\",\n+      \"versions\": \"7+\",\n+      \"fields\": [\n+        {\n+          \"name\": \"topicGroupId\",\n+          \"versions\": \"1+\",\n+          \"type\": \"int32\"\n+        },\n+        {\n+          \"name\": \"partition\",\n+          \"versions\": \"1+\",\n+          \"type\": \"int32\"\n+        },", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgyODIxNw==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r384828217", "bodyText": "Working on finding someone who knows the code generation code to clear things up here (whether we can have nested structs, and what is the correct version for structs/inner fields)", "author": "ableegoldman", "createdAt": "2020-02-26T23:24:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ2NDI5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNTU2NA==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r386005564", "bodyText": "Alright so the good/bad news is that this only works if the nested struct is an array (ie can do type: []TaskId but not type: TaskId). There's no reason for this to be the case, besides \"didn't have the time and need to implement it\" so we could in theory just add this ability.\nI haven't looked into the code really so I'm not sure how much time that might take, so, I'm deciding to just encode as basic types for now. It's only two fields after all", "author": "ableegoldman", "createdAt": "2020-02-29T06:12:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ2NDI5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzgyMA==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382483820", "bodyText": "req: Is it possible to use a defined constant (e.g. ACTIVE_TASK_SENTINEL_LAG) here and also use it in TaskManager? I think it would be good to have this constant defined here and then use it in TaskManager.", "author": "cadonna", "createdAt": "2020-02-21T09:39:46Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfo.java", "diffHunk": "@@ -83,7 +87,38 @@ public SubscriptionInfo(final int version,\n         if (version >= 3) {\n             data.setLatestSupportedVersion(latestSupportedVersion);\n         }\n-        data.setProcessId(processId);\n+        if (version >= 7) {\n+            setTaskLagDataFromTaskLagMap(data, taskLags);\n+        } else {\n+            setPrevAndStandbySetsFromParsedTaskLagMap(data, taskLags);\n+        }\n+        this.data = data;\n+    }\n+\n+    private static void setTaskLagDataFromTaskLagMap(final SubscriptionInfoData data,\n+                                                     final Map<TaskId, Integer> taskLags) {\n+        data.setTaskLags(taskLags.entrySet().stream().map(t -> {\n+            final SubscriptionInfoData.TaskLagPair taskLagPair = new SubscriptionInfoData.TaskLagPair();\n+            taskLagPair.setTopicGroupId(t.getKey().topicGroupId);\n+            taskLagPair.setPartition(t.getKey().partition);\n+            taskLagPair.setLag(t.getValue());\n+            return taskLagPair;\n+        }).collect(Collectors.toList()));\n+    }\n+\n+    private static void setPrevAndStandbySetsFromParsedTaskLagMap(final SubscriptionInfoData data,\n+                                                                  final Map<TaskId, Integer> taskLags) {\n+        final Set<TaskId> prevTasks = new HashSet<>();\n+        final Set<TaskId> standbyTasks = new HashSet<>();\n+\n+        for (final Map.Entry<TaskId, Integer> taskLagEntry : taskLags.entrySet()) {\n+            if (taskLagEntry.getValue() == -1) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgyNTA3OQ==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r384825079", "bodyText": "Moved to this class", "author": "ableegoldman", "createdAt": "2020-02-26T23:14:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzgyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxNTEyNw==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382515127", "bodyText": "req: Due to this deletion, line 327 becomes a no-op. Please remove it, too.", "author": "cadonna", "createdAt": "2020-02-21T10:45:45Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -314,7 +282,6 @@ public GroupAssignment assign(final Cluster metadata, final GroupSubscription gr\n         // keep track of any future consumers in a \"dummy\" Client since we can't decipher their subscription\n         final UUID futureId = randomUUID();\n         final ClientMetadata futureClient = new ClientMetadata(null);\n-        clientMetadataMap.put(futureId, futureClient);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgyMzU5OA==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r384823598", "bodyText": "Oh nice catch thanks", "author": "ableegoldman", "createdAt": "2020-02-26T23:10:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxNTEyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyMTg3NA==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382521874", "bodyText": "req: subscription -> subscription info", "author": "cadonna", "createdAt": "2020-02-21T11:00:42Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -581,12 +551,13 @@ public GroupAssignment assign(final Cluster metadata, final GroupSubscription gr\n \n         final Map<UUID, ClientState> states = new HashMap<>();\n         for (final Map.Entry<UUID, ClientMetadata> entry : clientMetadataMap.entrySet()) {\n+            final UUID uuid = entry.getKey();\n             final ClientState state = entry.getValue().state;\n-            states.put(entry.getKey(), state);\n+            states.put(uuid, state);\n \n-            // Either the active tasks (eager) OR the owned partitions (cooperative) were encoded in the subscription\n-            // according to the rebalancing protocol, so convert any partitions in a client to tasks where necessary\n-            if (!state.ownedPartitions().isEmpty()) {\n+            // this is an optimization: we can't decode the future subscription's prev tasks, but we can figure them", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyMzcxNg==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382523716", "bodyText": "See my comment the constant in SubscriptionInfo.", "author": "cadonna", "createdAt": "2020-02-21T11:05:00Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -50,6 +50,8 @@\n import static org.apache.kafka.streams.processor.internals.Task.State.RESTORING;\n \n public class TaskManager {\n+    static final int ACTIVE_TASK_SENTINEL_LAG = -1;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyODY4MQ==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382528681", "bodyText": "prop: Instead of making this method public in the production code, you could add an accessor class in the same package as this class but in the test code, i.e., streams->src->test, that has a public method that calls this package-private method. Have a look into SensorAccessor for an example.", "author": "cadonna", "createdAt": "2020-02-21T11:17:25Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -103,7 +105,8 @@ InternalTopologyBuilder builder() {\n         return builder;\n     }\n \n-    void handleRebalanceStart(final Set<String> subscribedTopics) {\n+    // visible for testing\n+    public void handleRebalanceStart(final Set<String> subscribedTopics) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzMDI5NA==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r384830294", "bodyText": "Hm...imo that seems like overkill for just this one method, but we'll likely need to expose more and more methods as KIP-441 goes on. WDYT about leaving this as-is for now, and adding an accessor class if we find ourselves making more methods public in later PRs?", "author": "ableegoldman", "createdAt": "2020-02-26T23:30:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyODY4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2ODc3NQ==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r385968775", "bodyText": "To be honest, this also bugs me :)\nWhat if we move org.apache.kafka.streams.tests.StreamsUpgradeTest.FutureStreamsPartitionAssignor into package org.apache.kafka.streams.processor.internals? Then package-private would continue to work fine.\nMy personal bias is that anytime you see // visible for testing, you're looking at a potential bug, because nothing prevents that comment from becoming false, and in fact, I have found such comments in our code base that were already false. Either this method is part of the public contract of the class, or it's not.\nThat said, if you really prefer it this way, we can keep it (although, I might ask you to review a clean-up PR later ;) )", "author": "vvcephei", "createdAt": "2020-02-28T23:32:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyODY4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNDAwNQ==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r386004005", "bodyText": "Alright alright, I concede. I have pretty strong (negative) feelings about the future partition assignor, which I'm sure I've expressed (ranted about) before, and don't see much value in moving it to a new package so it can use methods it really shouldn't need to call directly in the first place...\nBut that's a discussion for another time.  I'll add an accessor class and hold off on sprinkling soon-to-be-obselete comments throughout the code for now", "author": "ableegoldman", "createdAt": "2020-02-29T05:42:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyODY4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNDQyMw==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r386004423", "bodyText": "Ok actually I'm just going to fix the FutureStreamsPartitionAssignor to not try and call this method. Thanks ^^", "author": "ableegoldman", "createdAt": "2020-02-29T05:50:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyODY4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU0NTAyMA==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382545020", "bodyText": "prop: Just a proposal\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Map<TaskId, Integer> TASK_LAGS = new HashMap<>();\n          \n          \n            \n                private static final Map<TaskId, Integer> TASK_LAGS = mkMap(\n          \n          \n            \n                    mkEntry(new TaskId(0, 0), -1),\n          \n          \n            \n                    mkEntry(new TaskId(0, 1), -1),\n          \n          \n            \n                    mkEntry(new TaskId(1, 0), -1),\n          \n          \n            \n                    mkEntry(new TaskId(1, 1), 0),\n          \n          \n            \n                    mkEntry(new TaskId(2, 0), 10)\n          \n          \n            \n                );", "author": "cadonna", "createdAt": "2020-02-21T12:00:47Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java", "diffHunk": "@@ -31,13 +33,21 @@\n \n public class SubscriptionInfoTest {\n     private final UUID processId = UUID.randomUUID();\n-    private final Set<TaskId> activeTasks = new HashSet<>(Arrays.asList(\n+    private static final Set<TaskId> ACTIVE_TASKS = new HashSet<>(Arrays.asList(\n         new TaskId(0, 0),\n         new TaskId(0, 1),\n         new TaskId(1, 0)));\n-    private final Set<TaskId> standbyTasks = new HashSet<>(Arrays.asList(\n+    private static final Set<TaskId> STANDBY_TASKS = new HashSet<>(Arrays.asList(\n         new TaskId(1, 1),\n         new TaskId(2, 0)));\n+    private static final Map<TaskId, Integer> TASK_LAGS = new HashMap<>();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1MDE0NQ==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382550145", "bodyText": "Q: Why do you pass in null here but in some other cases you pass in TASK_LAGS?", "author": "cadonna", "createdAt": "2020-02-21T12:13:38Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java", "diffHunk": "@@ -90,40 +97,39 @@ public void generatedVersion1ShouldBeDecodableByLegacyLogic() {\n             1,\n             1234,\n             processId,\n-            activeTasks,\n-            standbyTasks,\n-            \"ignoreme\"\n+            \"ignoreme\",\n+            TASK_LAGS\n         );\n         final ByteBuffer buffer = info.encode();\n \n         final LegacySubscriptionInfoSerde decoded = LegacySubscriptionInfoSerde.decode(buffer);\n         assertEquals(1, decoded.version());\n         assertEquals(SubscriptionInfo.UNKNOWN, decoded.latestSupportedVersion());\n         assertEquals(processId, decoded.processId());\n-        assertEquals(activeTasks, decoded.prevTasks());\n-        assertEquals(standbyTasks, decoded.standbyTasks());\n+        assertEquals(ACTIVE_TASKS, decoded.prevTasks());\n+        assertEquals(STANDBY_TASKS, decoded.standbyTasks());\n         assertNull(decoded.userEndPoint());\n     }\n \n-\n     @Test\n     public void generatedVersion1ShouldDecodeLegacyFormat() {\n         final LegacySubscriptionInfoSerde info = new LegacySubscriptionInfoSerde(\n             1,\n             LATEST_SUPPORTED_VERSION,\n             processId,\n-            activeTasks,\n-            standbyTasks,\n-            \"localhost:80\"\n+            ACTIVE_TASKS,\n+            STANDBY_TASKS,\n+            \"localhost:80\",\n+            null", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1MDI3MQ==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382550271", "bodyText": "Q: Why do you pass in null here but in some other cases you pass in TASK_LAGS?", "author": "cadonna", "createdAt": "2020-02-21T12:14:01Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java", "diffHunk": "@@ -173,18 +177,19 @@ public void generatedVersion2ShouldDecodeLegacyFormat() {\n             2,\n             LATEST_SUPPORTED_VERSION,\n             processId,\n-            activeTasks,\n-            standbyTasks,\n-            \"localhost:80\"\n+            ACTIVE_TASKS,\n+            STANDBY_TASKS,\n+            \"localhost:80\",\n+            null", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNjA2MQ==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r386006061", "bodyText": "Ended up removing the taskLags(now taskOffsetSums) from the constructor entirely", "author": "ableegoldman", "createdAt": "2020-02-29T06:23:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1MDI3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNjU1Mg==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r386006552", "bodyText": "Actually, @vvcephei I have to say I'm not sure I entirely understand the point of this legacy subscription serde. Shouldn't SubscriptionInfo also be able to decode older \"legacy\"versions?", "author": "ableegoldman", "createdAt": "2020-02-29T06:32:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1MDI3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzOTY2Ng==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r386639666", "bodyText": "Yes, it should... I asked a question about this on that class itself. It seems like you shouldn't have had to modify it at all.", "author": "vvcephei", "createdAt": "2020-03-02T20:45:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1MDI3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1MTU0NA==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382551544", "bodyText": "Q: Why do you pass in null here but in some other cases you pass in TASK_LAGS?", "author": "cadonna", "createdAt": "2020-02-21T12:17:37Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java", "diffHunk": "@@ -239,9 +242,10 @@ public void generatedVersion3To6ShouldDecodeLegacyFormat() {\n                 version,\n                 LATEST_SUPPORTED_VERSION,\n                 processId,\n-                activeTasks,\n-                standbyTasks,\n-                \"localhost:80\"\n+                ACTIVE_TASKS,\n+                STANDBY_TASKS,\n+                \"localhost:80\",\n+                null", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1MzQ5OA==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382553498", "bodyText": "prop:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(info, SubscriptionInfo.decode(info.encode()));\n          \n          \n            \n                    assertThat(SubscriptionInfo.decode(info.encode()), is(info));", "author": "cadonna", "createdAt": "2020-02-21T12:22:56Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java", "diffHunk": "@@ -274,11 +279,27 @@ public void shouldEncodeAndDecodeSmallerLatestSupportedVersion() {\n         final int usedVersion = LATEST_SUPPORTED_VERSION - 1;\n         final int latestSupportedVersion = LATEST_SUPPORTED_VERSION - 1;\n \n-        final SubscriptionInfo info = new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, activeTasks, standbyTasks, \"localhost:80\");\n-        final SubscriptionInfo expectedInfo = new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, activeTasks, standbyTasks, \"localhost:80\");\n+        final SubscriptionInfo info =\n+            new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, \"localhost:80\", TASK_LAGS);\n+        final SubscriptionInfo expectedInfo =\n+            new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, \"localhost:80\", TASK_LAGS);\n         assertEquals(expectedInfo, SubscriptionInfo.decode(info.encode()));\n     }\n \n+    @Test\n+    public void shouldEncodeAndDecodeVersion7() {\n+        final SubscriptionInfo info =\n+            new SubscriptionInfo(7, LATEST_SUPPORTED_VERSION, processId, \"localhost:80\", TASK_LAGS);\n+        assertEquals(info, SubscriptionInfo.decode(info.encode()));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1NDE3NA==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382554174", "bodyText": "prop:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(info.prevTasks(), ACTIVE_TASKS);\n          \n          \n            \n                    assertThat(info.prevTasks(), is(ACTIVE_TASKS));", "author": "cadonna", "createdAt": "2020-02-21T12:24:37Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java", "diffHunk": "@@ -274,11 +279,27 @@ public void shouldEncodeAndDecodeSmallerLatestSupportedVersion() {\n         final int usedVersion = LATEST_SUPPORTED_VERSION - 1;\n         final int latestSupportedVersion = LATEST_SUPPORTED_VERSION - 1;\n \n-        final SubscriptionInfo info = new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, activeTasks, standbyTasks, \"localhost:80\");\n-        final SubscriptionInfo expectedInfo = new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, activeTasks, standbyTasks, \"localhost:80\");\n+        final SubscriptionInfo info =\n+            new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, \"localhost:80\", TASK_LAGS);\n+        final SubscriptionInfo expectedInfo =\n+            new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, \"localhost:80\", TASK_LAGS);\n         assertEquals(expectedInfo, SubscriptionInfo.decode(info.encode()));\n     }\n \n+    @Test\n+    public void shouldEncodeAndDecodeVersion7() {\n+        final SubscriptionInfo info =\n+            new SubscriptionInfo(7, LATEST_SUPPORTED_VERSION, processId, \"localhost:80\", TASK_LAGS);\n+        assertEquals(info, SubscriptionInfo.decode(info.encode()));\n+    }\n+\n+    @Test\n+    public void shouldConvertTaskLagMapToTaskSetsForOlderVersion() {\n+        final SubscriptionInfo info = new SubscriptionInfo(7, LATEST_SUPPORTED_VERSION, processId, \"localhost:80\", TASK_LAGS);\n+        assertEquals(info.prevTasks(), ACTIVE_TASKS);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1NDMxMg==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382554312", "bodyText": "prop:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(info.standbyTasks(), STANDBY_TASKS);\n          \n          \n            \n                    assertThat(info.standbyTasks(), is(STANDBY_TASKS));", "author": "cadonna", "createdAt": "2020-02-21T12:25:02Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java", "diffHunk": "@@ -274,11 +279,27 @@ public void shouldEncodeAndDecodeSmallerLatestSupportedVersion() {\n         final int usedVersion = LATEST_SUPPORTED_VERSION - 1;\n         final int latestSupportedVersion = LATEST_SUPPORTED_VERSION - 1;\n \n-        final SubscriptionInfo info = new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, activeTasks, standbyTasks, \"localhost:80\");\n-        final SubscriptionInfo expectedInfo = new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, activeTasks, standbyTasks, \"localhost:80\");\n+        final SubscriptionInfo info =\n+            new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, \"localhost:80\", TASK_LAGS);\n+        final SubscriptionInfo expectedInfo =\n+            new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, \"localhost:80\", TASK_LAGS);\n         assertEquals(expectedInfo, SubscriptionInfo.decode(info.encode()));\n     }\n \n+    @Test\n+    public void shouldEncodeAndDecodeVersion7() {\n+        final SubscriptionInfo info =\n+            new SubscriptionInfo(7, LATEST_SUPPORTED_VERSION, processId, \"localhost:80\", TASK_LAGS);\n+        assertEquals(info, SubscriptionInfo.decode(info.encode()));\n+    }\n+\n+    @Test\n+    public void shouldConvertTaskLagMapToTaskSetsForOlderVersion() {\n+        final SubscriptionInfo info = new SubscriptionInfo(7, LATEST_SUPPORTED_VERSION, processId, \"localhost:80\", TASK_LAGS);\n+        assertEquals(info.prevTasks(), ACTIVE_TASKS);\n+        assertEquals(info.standbyTasks(), STANDBY_TASKS);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU2MTM4MQ==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382561381", "bodyText": "req: After this deletion, REBALANCE_PROTOCOL defined on line 66 is not used anymore and can be deleted, too.", "author": "cadonna", "createdAt": "2020-02-21T12:43:26Z", "path": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java", "diffHunk": "@@ -146,30 +146,22 @@ public ByteBuffer subscriptionUserData(final Set<String> topics) {\n             // 2. Task ids of previously running tasks\n             // 3. Task ids of valid local states on the client's state directory.\n             final TaskManager taskManager = taskManger();\n-\n-            final Set<TaskId> standbyTasks = taskManager.tasksOnLocalStorage();\n-            final Set<TaskId> activeTasks = prepareForSubscription(taskManager,\n-                                                                   topics,\n-                                                                   standbyTasks,\n-                                                                   REBALANCE_PROTOCOL);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU2MzA5MA==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r382563090", "bodyText": "The KIP still states that we bump from 4 to 5. Could you please change that as well?", "author": "cadonna", "createdAt": "2020-02-21T12:47:36Z", "path": "streams/src/main/resources/common/message/SubscriptionInfo.json", "diffHunk": "@@ -15,7 +15,7 @@\n \n {\n   \"name\": \"SubscriptionInfo\",\n-  \"validVersions\": \"1-6\",\n+  \"validVersions\": \"1-7\",", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgyNjMyNw==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r384826327", "bodyText": "Ack", "author": "ableegoldman", "createdAt": "2020-02-26T23:18:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU2MzA5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgyNjU1MA==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r384826550", "bodyText": "Clearly it's taken a while to get this KIP off the ground :P", "author": "ableegoldman", "createdAt": "2020-02-26T23:18:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU2MzA5MA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2NjI1NA==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r385966254", "bodyText": "Just to be clear, does this mean we're certain that for non-future members (current or older-versioned ones), the encoded \"prevTasks\" actually contains all the previous tasks?\nI gather this is true from the SubscriptionInfo protcol:\n    {\n      \"name\": \"prevTasks\",\n      \"versions\": \"1-6\",\n      \"type\": \"[]TaskId\"\n    }\n\nBut then, I'm a little mystified by the prior comment... why would \"active tasks\" not have been encoded with the cooperative protocol?", "author": "vvcephei", "createdAt": "2020-02-28T23:21:39Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -581,12 +550,13 @@ public GroupAssignment assign(final Cluster metadata, final GroupSubscription gr\n \n         final Map<UUID, ClientState> states = new HashMap<>();\n         for (final Map.Entry<UUID, ClientMetadata> entry : clientMetadataMap.entrySet()) {\n+            final UUID uuid = entry.getKey();\n             final ClientState state = entry.getValue().state;\n-            states.put(entry.getKey(), state);\n+            states.put(uuid, state);\n \n-            // Either the active tasks (eager) OR the owned partitions (cooperative) were encoded in the subscription\n-            // according to the rebalancing protocol, so convert any partitions in a client to tasks where necessary\n-            if (!state.ownedPartitions().isEmpty()) {\n+            // this is an optimization: we can't decode the future subscription info's prev tasks, but we can figure\n+            // them out from the encoded ownedPartitions\n+            if (uuid == futureId && !state.ownedPartitions().isEmpty()) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMzUwMw==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r386003503", "bodyText": "Let me give a quick history lesson to clarify:\nBy adding the ownedPartitions field to the subscription we were able to remove the encoded prevTasks and avoid duplicating info we could get from the new field for COOPERATIVE members. Note the ownedPartitions are the source of truth and may differ from the prevTasks that would have been encoded in edge cases (eg topic deletion, partitions lost)\nIn hindsight, aka a few weeks back when I started looking at the assignor code again, I realized this was just unnecessary and likely to lead to more trouble than it solves. So, now we just encode all tasks in the offset map regardless of rebalance protocol.\nOk, while explaining that I now realize we obviously still need to fill in the prevTasks from the ownedPartitions for members on 2.5/2.6 -- thanks Socrates :P", "author": "ableegoldman", "createdAt": "2020-02-29T05:33:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2NjI1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2ODUzMA==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r385968530", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            taskLags.put(id, 0);\n          \n          \n            \n                            taskLags.put(id, STANDBY_TASK_SENTINEL_LAG);\n          \n      \n    \n    \n  \n\nEither that, or my preference would actually be to inline both sentinel lags (with a comment explaining why that choice of sentinels).", "author": "vvcephei", "createdAt": "2020-02-28T23:31:19Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -307,11 +309,27 @@ void handleLostAll() {\n         }\n     }\n \n+    /**\n+     * @return Map from task id to that task's overall lag across all state stores\n+     */\n+    public Map<TaskId, Integer> getTaskLags() {\n+        final Map<TaskId, Integer> taskLags = new HashMap<>();\n+\n+        for (final TaskId id : tasksOnLocalStorage()) {\n+            if (isActive(id)) {\n+                taskLags.put(id, ACTIVE_TASK_SENTINEL_LAG);\n+            } else {\n+                taskLags.put(id, 0);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3MDUxNA==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r385970514", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            taskOffsetSums.put(id, ACTIVE_TASK_SENTINEL_OFFSET);\n          \n          \n            \n                            taskOffsetSums.put(id, -1);\n          \n      \n    \n    \n  \n\nNo need for a constant, and it's more readable inline. Although, it could use a comment explaining the choice of sentinel values.", "author": "vvcephei", "createdAt": "2020-02-28T23:40:02Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -354,11 +356,27 @@ void handleLostAll() {\n         }\n     }\n \n+    /**\n+     * @return Map from task id to that task's overall lag across all state stores\n+     */\n+    public Map<TaskId, Integer> getTaskOffsetSums() {\n+        final Map<TaskId, Integer> taskOffsetSums = new HashMap<>();\n+\n+        for (final TaskId id : tasksOnLocalStorage()) {\n+            if (isActive(id)) {\n+                taskOffsetSums.put(id, ACTIVE_TASK_SENTINEL_OFFSET);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNTE5NQ==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r386005195", "bodyText": "Do you stick by this after seeing where it should be used below? Either way I'll add a comment", "author": "ableegoldman", "createdAt": "2020-02-29T06:06:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3MDUxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4NzIyMQ==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r386487221", "bodyText": "No, I'm good now.", "author": "vvcephei", "createdAt": "2020-03-02T16:06:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3MDUxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3MTAyNg==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r385971026", "bodyText": "Oh, actually, here's the reason a constant sentinel is nice, but we didn't actually use it!", "author": "vvcephei", "createdAt": "2020-02-28T23:42:25Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfo.java", "diffHunk": "@@ -83,7 +89,38 @@ public SubscriptionInfo(final int version,\n         if (version >= 3) {\n             data.setLatestSupportedVersion(latestSupportedVersion);\n         }\n-        data.setProcessId(processId);\n+        if (version >= 7) {\n+            setTaskOffsetSumDataFromTaskOffsetSumMap(data, taskOffsetSums);\n+        } else {\n+            setPrevAndStandbySetsFromParsedTaskOffsetSumMap(data, taskOffsetSums);\n+        }\n+        this.data = data;\n+    }\n+\n+    private static void setTaskOffsetSumDataFromTaskOffsetSumMap(final SubscriptionInfoData data,\n+                                                                 final Map<TaskId, Integer> taskOffsetSums) {\n+        data.setTaskOffsetSums(taskOffsetSums.entrySet().stream().map(t -> {\n+            final SubscriptionInfoData.TaskOffsetSum taskOffsetSum = new SubscriptionInfoData.TaskOffsetSum();\n+            taskOffsetSum.setTopicGroupId(t.getKey().topicGroupId);\n+            taskOffsetSum.setPartition(t.getKey().partition);\n+            taskOffsetSum.setOffsetSum(t.getValue());\n+            return taskOffsetSum;\n+        }).collect(Collectors.toList()));\n+    }\n+\n+    private static void setPrevAndStandbySetsFromParsedTaskOffsetSumMap(final SubscriptionInfoData data,\n+                                                                        final Map<TaskId, Integer> taskOffsetSums) {\n+        final Set<TaskId> prevTasks = new HashSet<>();\n+        final Set<TaskId> standbyTasks = new HashSet<>();\n+\n+        for (final Map.Entry<TaskId, Integer> taskOffsetSum : taskOffsetSums.entrySet()) {\n+            if (taskOffsetSum.getValue() == -1) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNDUzNw==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r386004537", "bodyText": "\ud83e\udd26\u200d\u2640", "author": "ableegoldman", "createdAt": "2020-02-29T05:53:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3MTAyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4OTkzNA==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r386489934", "bodyText": "Since we invoke this method from a number of places, should we add a flag and make sure it only sets the state once?", "author": "vvcephei", "createdAt": "2020-03-02T16:10:33Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfo.java", "diffHunk": "@@ -83,7 +90,38 @@ public SubscriptionInfo(final int version,\n         if (version >= 3) {\n             data.setLatestSupportedVersion(latestSupportedVersion);\n         }\n-        data.setProcessId(processId);\n+        if (version >= 7) {\n+            setTaskOffsetSumDataFromTaskOffsetSumMap(data, taskOffsetSums);\n+        } else {\n+            setPrevAndStandbySetsFromParsedTaskOffsetSumMap(data, taskOffsetSums);\n+        }\n+        this.data = data;\n+    }\n+\n+    private static void setTaskOffsetSumDataFromTaskOffsetSumMap(final SubscriptionInfoData data,\n+                                                                 final Map<TaskId, Integer> taskOffsetSums) {\n+        data.setTaskOffsetSums(taskOffsetSums.entrySet().stream().map(t -> {\n+            final SubscriptionInfoData.TaskOffsetSum taskOffsetSum = new SubscriptionInfoData.TaskOffsetSum();\n+            taskOffsetSum.setTopicGroupId(t.getKey().topicGroupId);\n+            taskOffsetSum.setPartition(t.getKey().partition);\n+            taskOffsetSum.setOffsetSum(t.getValue());\n+            return taskOffsetSum;\n+        }).collect(Collectors.toList()));\n+    }\n+\n+    private static void setPrevAndStandbySetsFromParsedTaskOffsetSumMap(final SubscriptionInfoData data,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU0Nzk4OQ==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r388547989", "bodyText": "bump", "author": "vvcephei", "createdAt": "2020-03-05T20:32:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4OTkzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MDg0MA==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r388590840", "bodyText": "I realized the other callers actually don't need to call this at all, so now these only get called from the constructor", "author": "ableegoldman", "createdAt": "2020-03-05T21:57:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4OTkzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzODQxMQ==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r386638411", "bodyText": "I'm probably missing the point here, but I think the idea of this class is that it should not change in response to changes in SubscriptionInfo. I think it's supposed to be a stand-in for the behavior of older Streams versions when the cluster has old and new members running at the same time. Maybe it doesn't really work that way, though, in which case, I might doubt the utility of this class at all, and instead recommend relying on the system tests. Can you comment?", "author": "vvcephei", "createdAt": "2020-03-02T20:42:35Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/LegacySubscriptionInfoSerde.java", "diffHunk": "@@ -41,13 +45,15 @@\n     private final Set<TaskId> prevTasks;\n     private final Set<TaskId> standbyTasks;\n     private final String userEndPoint;\n+    private final Map<TaskId, Integer> taskLags;\n \n     public LegacySubscriptionInfoSerde(final int version,\n                                        final int latestSupportedVersion,\n                                        final UUID processId,\n                                        final Set<TaskId> prevTasks,\n                                        final Set<TaskId> standbyTasks,\n-                                       final String userEndPoint) {\n+                                       final String userEndPoint,\n+                                       final Map<TaskId, Integer> taskLags) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzOTA3MQ==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r386639071", "bodyText": "What's up with the pre-loaded map followed by a static block adding the same contents to it? (Looks like maybe a refactoring artifact).", "author": "vvcephei", "createdAt": "2020-03-02T20:44:00Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java", "diffHunk": "@@ -25,19 +26,37 @@\n import java.util.Set;\n import java.util.UUID;\n \n+import static org.apache.kafka.common.utils.Utils.mkEntry;\n+import static org.apache.kafka.common.utils.Utils.mkMap;\n import static org.apache.kafka.streams.processor.internals.assignment.StreamsAssignmentProtocolVersions.LATEST_SUPPORTED_VERSION;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNull;\n \n public class SubscriptionInfoTest {\n     private final UUID processId = UUID.randomUUID();\n-    private final Set<TaskId> activeTasks = new HashSet<>(Arrays.asList(\n+    private static final Set<TaskId> ACTIVE_TASKS = new HashSet<>(Arrays.asList(\n         new TaskId(0, 0),\n         new TaskId(0, 1),\n         new TaskId(1, 0)));\n-    private final Set<TaskId> standbyTasks = new HashSet<>(Arrays.asList(\n+    private static final Set<TaskId> STANDBY_TASKS = new HashSet<>(Arrays.asList(\n         new TaskId(1, 1),\n         new TaskId(2, 0)));\n+    private static final Map<TaskId, Integer> TASK_OFFSET_SUMS = mkMap(\n+        mkEntry(new TaskId(0, 0), -1),\n+        mkEntry(new TaskId(0, 1), -1),\n+        mkEntry(new TaskId(1, 0), -1),\n+        mkEntry(new TaskId(1, 1), 0),\n+        mkEntry(new TaskId(2, 0), 10)\n+    );\n+    static {\n+        TASK_OFFSET_SUMS.put(new TaskId(0, 0), -1);\n+        TASK_OFFSET_SUMS.put(new TaskId(0, 1), -1);\n+        TASK_OFFSET_SUMS.put(new TaskId(1, 0), -1);\n+        TASK_OFFSET_SUMS.put(new TaskId(1, 1), 0);\n+        TASK_OFFSET_SUMS.put(new TaskId(2, 0), 10);\n+    }", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0OTA2MQ==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r387849061", "bodyText": "Technically it was a \"commit straight from github suggestion\" artifact \ud83d\ude42", "author": "ableegoldman", "createdAt": "2020-03-04T18:22:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzOTA3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0MDUwMA==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r386640500", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            info.userEndPoint(), taskManager().getTaskOffsetSums())\n          \n          \n            \n                                            info.userEndPoint(),\n          \n          \n            \n                                            taskManager().getTaskOffsetSums())", "author": "vvcephei", "createdAt": "2020-03-02T20:47:00Z", "path": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java", "diffHunk": "@@ -258,9 +248,7 @@ public GroupAssignment assign(final Cluster metadata, final GroupSubscription gr\n                                 LATEST_SUPPORTED_VERSION,\n                                 LATEST_SUPPORTED_VERSION,\n                                 info.processId(),\n-                                info.prevTasks(),\n-                                info.standbyTasks(),\n-                                info.userEndPoint())\n+                                info.userEndPoint(), taskManager().getTaskOffsetSums())", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0MTc0Ng==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r386641746", "bodyText": "I'm not sure this should be necessary either. IIUC, the \"future\" subscription info isn't supposed to really be a descendant of the current protocol, just a stand-in for some protocol version bigger than ours, in which case all that really matters is the version number. Its role is just to join the cluster and get downgraded to the \"latest\" version, in which case it should be able to defer to SubscriptionInfo.", "author": "vvcephei", "createdAt": "2020-03-02T20:49:32Z", "path": "streams/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeTest.java", "diffHunk": "@@ -291,21 +279,18 @@ public GroupAssignment assign(final Cluster metadata, final GroupSubscription gr\n     private static class FutureSubscriptionInfo {\n         private final int version;\n         private final UUID processId;\n-        private final Set<TaskId> prevTasks;\n-        private final Set<TaskId> standbyTasks;\n         private final String userEndPoint;\n+        private final Map<TaskId, Integer> taskLags;\n \n         // for testing only; don't apply version checks\n         FutureSubscriptionInfo(final int version,\n                                final UUID processId,\n-                               final Set<TaskId> prevTasks,\n-                               final Set<TaskId> standbyTasks,\n-                               final String userEndPoint) {\n+                               final String userEndPoint,\n+                               final Map<TaskId, Integer> taskLags) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0ODIyMQ==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r387848221", "bodyText": "Good point", "author": "ableegoldman", "createdAt": "2020-03-04T18:20:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0MTc0Ng=="}], "type": "inlineReview"}, {"oid": "5a67b592c6947c20f07f116037cc1ed159a06d50", "url": "https://github.com/apache/kafka/commit/5a67b592c6947c20f07f116037cc1ed159a06d50", "message": "use taskLags to infer prev/standby tasks if necessary", "committedDate": "2020-03-04T20:25:22Z", "type": "commit"}, {"oid": "8b45f78aee5bcb3fa49830e1256ed2121fdd28be", "url": "https://github.com/apache/kafka/commit/8b45f78aee5bcb3fa49830e1256ed2121fdd28be", "message": "fixing up tests", "committedDate": "2020-03-04T20:25:22Z", "type": "commit"}, {"oid": "b4d91a85a7eabbfdf2e0ebfa59d3e411302e7a88", "url": "https://github.com/apache/kafka/commit/b4d91a85a7eabbfdf2e0ebfa59d3e411302e7a88", "message": "cleaned up task manager and subscription code, compiles", "committedDate": "2020-03-04T20:25:22Z", "type": "commit"}, {"oid": "2aabf29def59f348ce2abdb60771d8d60878e220", "url": "https://github.com/apache/kafka/commit/2aabf29def59f348ce2abdb60771d8d60878e220", "message": "bump assignment version handling", "committedDate": "2020-03-04T20:25:23Z", "type": "commit"}, {"oid": "f510057179581229975f58666352c20077571f68", "url": "https://github.com/apache/kafka/commit/f510057179581229975f58666352c20077571f68", "message": "add subscription info tests", "committedDate": "2020-03-04T20:25:23Z", "type": "commit"}, {"oid": "c063dc42a6412815367fbb0dd6557c2e20cae05b", "url": "https://github.com/apache/kafka/commit/c063dc42a6412815367fbb0dd6557c2e20cae05b", "message": "fix assignmentinfo test", "committedDate": "2020-03-04T20:25:23Z", "type": "commit"}, {"oid": "424af9ae596cd2bb74869a577168a55f0254db72", "url": "https://github.com/apache/kafka/commit/424af9ae596cd2bb74869a577168a55f0254db72", "message": "fixing up tests", "committedDate": "2020-03-04T20:25:23Z", "type": "commit"}, {"oid": "cac1f396386ecdba75930bff372ce18c8c05abda", "url": "https://github.com/apache/kafka/commit/cac1f396386ecdba75930bff372ce18c8c05abda", "message": "null check task", "committedDate": "2020-03-04T20:25:23Z", "type": "commit"}, {"oid": "72ecf580c005deb312828bde7567f96b170663f2", "url": "https://github.com/apache/kafka/commit/72ecf580c005deb312828bde7567f96b170663f2", "message": "github reivew: main code", "committedDate": "2020-03-04T20:25:23Z", "type": "commit"}, {"oid": "c2da9f7cd5088a3c7f78f6ab77c522a0fc4163d1", "url": "https://github.com/apache/kafka/commit/c2da9f7cd5088a3c7f78f6ab77c522a0fc4163d1", "message": "remove 'paior' from name", "committedDate": "2020-03-04T20:25:23Z", "type": "commit"}, {"oid": "a37a8eb48cf12223d052c23319965ca96d6dba9a", "url": "https://github.com/apache/kafka/commit/a37a8eb48cf12223d052c23319965ca96d6dba9a", "message": "Github suggestions\n\nCo-Authored-By: Bruno Cadonna <bruno@confluent.io>", "committedDate": "2020-03-04T20:25:23Z", "type": "commit"}, {"oid": "40e20e352f46b7be84058c9859004a0106592eef", "url": "https://github.com/apache/kafka/commit/40e20e352f46b7be84058c9859004a0106592eef", "message": "use offset sum instead of lag", "committedDate": "2020-03-04T20:25:23Z", "type": "commit"}, {"oid": "7d8bdc21fa4f36c01f54884f8bd2fada0b135da2", "url": "https://github.com/apache/kafka/commit/7d8bdc21fa4f36c01f54884f8bd2fada0b135da2", "message": "fix names", "committedDate": "2020-03-04T20:25:23Z", "type": "commit"}, {"oid": "e4e941f8dacb35590b9ff247a0eed9bf8a54a28d", "url": "https://github.com/apache/kafka/commit/e4e941f8dacb35590b9ff247a0eed9bf8a54a28d", "message": "github review", "committedDate": "2020-03-04T20:25:23Z", "type": "commit"}, {"oid": "0fe088a5e16694ba008c4f16f4face445bda28b6", "url": "https://github.com/apache/kafka/commit/0fe088a5e16694ba008c4f16f4face445bda28b6", "message": "bump version in VP system test", "committedDate": "2020-03-04T20:25:23Z", "type": "commit"}, {"oid": "361e4496245017a7301d481934d6a8aafc8f0d80", "url": "https://github.com/apache/kafka/commit/361e4496245017a7301d481934d6a8aafc8f0d80", "message": "review", "committedDate": "2020-03-04T20:25:23Z", "type": "commit"}, {"oid": "951c245be7fbbe3a43c96b7f4f21956593ef0613", "url": "https://github.com/apache/kafka/commit/951c245be7fbbe3a43c96b7f4f21956593ef0613", "message": "checkstyle", "committedDate": "2020-03-04T20:25:23Z", "type": "commit"}, {"oid": "951c245be7fbbe3a43c96b7f4f21956593ef0613", "url": "https://github.com/apache/kafka/commit/951c245be7fbbe3a43c96b7f4f21956593ef0613", "message": "checkstyle", "committedDate": "2020-03-04T20:25:23Z", "type": "forcePushed"}, {"oid": "41d70a24b09f6c500ab0db780ec723a5b5003c1f", "url": "https://github.com/apache/kafka/commit/41d70a24b09f6c500ab0db780ec723a5b5003c1f", "message": "only encode RUNNING active tasks as -1", "committedDate": "2020-03-04T20:35:34Z", "type": "commit"}, {"oid": "aeebfa8b60f7d99c36cd0b3854ae3700bd25f5d3", "url": "https://github.com/apache/kafka/commit/aeebfa8b60f7d99c36cd0b3854ae3700bd25f5d3", "message": "fix javadocs", "committedDate": "2020-03-04T20:39:00Z", "type": "commit"}, {"oid": "16be04627aec19705a439a75b20a2a68ea08ded6", "url": "https://github.com/apache/kafka/commit/16be04627aec19705a439a75b20a2a68ea08ded6", "message": "reuse existing Task.LATEST_OFFSET for active running task sentinel offset", "committedDate": "2020-03-04T21:49:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1MTI2NQ==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r388551265", "bodyText": "Do we want to try for a slightly more efficient encoding here, of Map[topicGroupId -> Map[partition -> offsetSum]], or do you think this is fine for now?", "author": "vvcephei", "createdAt": "2020-03-05T20:38:16Z", "path": "streams/src/main/resources/common/message/SubscriptionInfo.json", "diffHunk": "@@ -35,18 +35,23 @@\n     },\n     {\n       \"name\": \"prevTasks\",\n-      \"versions\": \"1+\",\n+      \"versions\": \"1-6\",\n       \"type\": \"[]TaskId\"\n     },\n     {\n       \"name\": \"standbyTasks\",\n-      \"versions\": \"1+\",\n+      \"versions\": \"1-6\",\n       \"type\": \"[]TaskId\"\n     },\n     {\n       \"name\": \"userEndPoint\",\n       \"versions\": \"2+\",\n       \"type\": \"bytes\"\n+    },\n+    {\n+      \"name\": \"taskOffsetSums\",\n+      \"versions\": \"7+\",\n+      \"type\": \"[]TaskOffsetSum\"", "originalCommit": "16be04627aec19705a439a75b20a2a68ea08ded6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5Mjg4Nw==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r388592887", "bodyText": "I was vaguely hoping that we'd add the ability to use nested structs in the near future and could move to use the TaskId struct here, but I suppose we may as well take advantage of this to go for the more efficient encoding when possible. Will do", "author": "ableegoldman", "createdAt": "2020-03-05T22:01:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1MTI2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1NzQ1Nw==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r388557457", "bodyText": "looks like maybe we have duelling code formatters. Not sure which choice makes more sense.", "author": "vvcephei", "createdAt": "2020-03-05T20:50:15Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java", "diffHunk": "@@ -274,14 +279,31 @@ public void shouldEncodeAndDecodeSmallerLatestSupportedVersion() {\n         final int usedVersion = LATEST_SUPPORTED_VERSION - 1;\n         final int latestSupportedVersion = LATEST_SUPPORTED_VERSION - 1;\n \n-        final SubscriptionInfo info = new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, activeTasks, standbyTasks, \"localhost:80\");\n-        final SubscriptionInfo expectedInfo = new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, activeTasks, standbyTasks, \"localhost:80\");\n+        final SubscriptionInfo info =\n+            new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, \"localhost:80\", TASK_OFFSET_SUMS);\n+        final SubscriptionInfo expectedInfo =\n+            new SubscriptionInfo(usedVersion, latestSupportedVersion, processId, \"localhost:80\", TASK_OFFSET_SUMS);\n         assertEquals(expectedInfo, SubscriptionInfo.decode(info.encode()));\n     }\n \n+    @Test\n+    public void shouldEncodeAndDecodeVersion7() {\n+        final SubscriptionInfo info =\n+            new SubscriptionInfo(7, LATEST_SUPPORTED_VERSION, processId, \"localhost:80\", TASK_OFFSET_SUMS);\n+        assertThat(info, is(SubscriptionInfo.decode(info.encode())));\n+    }\n+\n+    @Test\n+    public void shouldConvertTaskOffsetSumMapToTaskSetsForOlderVersion() {\n+        final SubscriptionInfo info =\n+            new SubscriptionInfo(7, LATEST_SUPPORTED_VERSION, processId, \"localhost:80\", TASK_OFFSET_SUMS);\n+        assertThat(info.prevTasks(), is(ACTIVE_TASKS));\n+        assertThat(info.standbyTasks(), is(STANDBY_TASKS));\n+    }\n+\n     private static ByteBuffer encodeFutureVersion() {\n         final ByteBuffer buf = ByteBuffer.allocate(4 /* used version */\n-                                                       + 4 /* supported version */);", "originalCommit": "16be04627aec19705a439a75b20a2a68ea08ded6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MTcwOQ==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r388591709", "bodyText": "Sounds like you think the other choice makes more sense \ud83d\ude1c Honestly neither of them looks that good to me but I'll revert the reformatting", "author": "ableegoldman", "createdAt": "2020-03-05T21:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1NzQ1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1OTU2Mg==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r388559562", "bodyText": "I'm just a tiny bit uncomfortable with re-using that sentinel, because the correctness of our logic depends on the active sentinel being less than the standby sentinel, so it must be less than zero. Do we have a reason to believe that Task.LATEST_OFFSET would never change to a number that would spoil us here, such as zero?", "author": "vvcephei", "createdAt": "2020-03-05T20:54:11Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TaskManager.java", "diffHunk": "@@ -354,11 +355,27 @@ void handleLostAll() {\n         }\n     }\n \n+    /**\n+     * @return Map from task id to its total offset summed across all state stores\n+     */\n+    public Map<TaskId, Long> getTaskOffsetSums() {\n+        final Map<TaskId, Long> taskOffsetSums = new HashMap<>();\n+\n+        for (final TaskId id : tasksOnLocalStorage()) {\n+            if (isRunning(id)) {\n+                taskOffsetSums.put(id, Task.LATEST_OFFSET);", "originalCommit": "16be04627aec19705a439a75b20a2a68ea08ded6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5NTgyNg==", "url": "https://github.com/apache/kafka/pull/8121#discussion_r388595826", "bodyText": "I actually changed this based on working on the next PR, as Task#changelogOffsets uses this sentinel for exactly the same thing, ie an indicator that the task is running (and active). This is only used in computing the lag info for KIP-535, which has a similar desire to differentiate between a running task that is completely caught up and any other. So, I can't imagine this being changed -- but I can add a comment to the constant explaining it should always be negative (not sure why it's \"-2\" specifically, as opposed to \"-1\", do you?)", "author": "ableegoldman", "createdAt": "2020-03-05T22:08:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU1OTU2Mg=="}], "type": "inlineReview"}, {"oid": "cce68476ac15ff67bc5db4a49945170f73da076f", "url": "https://github.com/apache/kafka/commit/cce68476ac15ff67bc5db4a49945170f73da076f", "message": "github review", "committedDate": "2020-03-05T22:24:49Z", "type": "commit"}, {"oid": "36b94cc2d87783c943f3189965ad25fb88ae7748", "url": "https://github.com/apache/kafka/commit/36b94cc2d87783c943f3189965ad25fb88ae7748", "message": "encode task id offset mapcompactly", "committedDate": "2020-03-05T23:03:25Z", "type": "commit"}, {"oid": "f0f20224659759d920218cf9be2ac91a6dc3d6ae", "url": "https://github.com/apache/kafka/commit/f0f20224659759d920218cf9be2ac91a6dc3d6ae", "message": "fx NPE", "committedDate": "2020-03-05T23:09:54Z", "type": "commit"}, {"oid": "9c1849c0c1506c3db22a16d0954faf76135b89e2", "url": "https://github.com/apache/kafka/commit/9c1849c0c1506c3db22a16d0954faf76135b89e2", "message": "fix VP upgrade test", "committedDate": "2020-03-05T23:38:21Z", "type": "commit"}]}