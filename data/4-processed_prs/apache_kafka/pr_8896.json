{"pr_number": 8896, "pr_title": "KAFKA-10185: Restoration info logging", "pr_createdAt": "2020-06-18T17:28:44Z", "pr_url": "https://github.com/apache/kafka/pull/8896", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5NzUyMw==", "url": "https://github.com/apache/kafka/pull/8896#discussion_r442397523", "bodyText": "trivial cleanup", "author": "vvcephei", "createdAt": "2020-06-18T17:44:31Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StoreChangelogReader.java", "diffHunk": "@@ -415,19 +418,20 @@ public void restore() {\n                 // for restoring active and updating standby we may prefer different poll time\n                 // in order to make sure we call the main consumer#poll in time.\n                 // TODO: once we move ChangelogReader to a separate thread this may no longer be a concern\n-                polledRecords = restoreConsumer.poll(state.equals(ChangelogReaderState.STANDBY_UPDATING) ? Duration.ZERO : pollTime);\n+                polledRecords = restoreConsumer.poll(state == ChangelogReaderState.STANDBY_UPDATING ? Duration.ZERO : pollTime);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5ODI2OA==", "url": "https://github.com/apache/kafka/pull/8896#discussion_r442398268", "bodyText": "Added the exception itself as the \"cause\" of the warning. The actual message of the IOE is actually pretty good at explaining the root cause.", "author": "vvcephei", "createdAt": "2020-06-18T17:45:49Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StoreChangelogReader.java", "diffHunk": "@@ -415,19 +418,20 @@ public void restore() {\n                 // for restoring active and updating standby we may prefer different poll time\n                 // in order to make sure we call the main consumer#poll in time.\n                 // TODO: once we move ChangelogReader to a separate thread this may no longer be a concern\n-                polledRecords = restoreConsumer.poll(state.equals(ChangelogReaderState.STANDBY_UPDATING) ? Duration.ZERO : pollTime);\n+                polledRecords = restoreConsumer.poll(state == ChangelogReaderState.STANDBY_UPDATING ? Duration.ZERO : pollTime);\n             } catch (final InvalidOffsetException e) {\n-                log.warn(\"Encountered {} fetching records from restore consumer for partitions {}, it is likely that \" +\n+                log.warn(\"Encountered \" + e.getClass().getName() +\n+                    \" fetching records from restore consumer for partitions \" + e.partitions() + \", it is likely that \" +\n                     \"the consumer's position has fallen out of the topic partition offset range because the topic was \" +\n                     \"truncated or compacted on the broker, marking the corresponding tasks as corrupted and re-initializing\" +\n-                    \" it later.\", e.getClass().getName(), e.partitions());\n+                    \" it later.\", e);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkyODM1OQ==", "url": "https://github.com/apache/kafka/pull/8896#discussion_r442928359", "bodyText": "The exception message may not always contain the partitions() list, maybe we should still print that as part of warn log?", "author": "guozhangwang", "createdAt": "2020-06-19T16:11:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5ODI2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAwMDA3Ng==", "url": "https://github.com/apache/kafka/pull/8896#discussion_r443000076", "bodyText": "It is still there, on L424.", "author": "vvcephei", "createdAt": "2020-06-19T18:59:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5ODI2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAwMTI4OA==", "url": "https://github.com/apache/kafka/pull/8896#discussion_r443001288", "bodyText": "Ah got it, I'm still think about it as the string template and was overlooking that. SG.", "author": "guozhangwang", "createdAt": "2020-06-19T19:02:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5ODI2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5ODQzMw==", "url": "https://github.com/apache/kafka/pull/8896#discussion_r442398433", "bodyText": "Also added the cause to the thrown exception.", "author": "vvcephei", "createdAt": "2020-06-18T17:46:06Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StoreChangelogReader.java", "diffHunk": "@@ -415,19 +418,20 @@ public void restore() {\n                 // for restoring active and updating standby we may prefer different poll time\n                 // in order to make sure we call the main consumer#poll in time.\n                 // TODO: once we move ChangelogReader to a separate thread this may no longer be a concern\n-                polledRecords = restoreConsumer.poll(state.equals(ChangelogReaderState.STANDBY_UPDATING) ? Duration.ZERO : pollTime);\n+                polledRecords = restoreConsumer.poll(state == ChangelogReaderState.STANDBY_UPDATING ? Duration.ZERO : pollTime);\n             } catch (final InvalidOffsetException e) {\n-                log.warn(\"Encountered {} fetching records from restore consumer for partitions {}, it is likely that \" +\n+                log.warn(\"Encountered \" + e.getClass().getName() +\n+                    \" fetching records from restore consumer for partitions \" + e.partitions() + \", it is likely that \" +\n                     \"the consumer's position has fallen out of the topic partition offset range because the topic was \" +\n                     \"truncated or compacted on the broker, marking the corresponding tasks as corrupted and re-initializing\" +\n-                    \" it later.\", e.getClass().getName(), e.partitions());\n+                    \" it later.\", e);\n \n                 final Map<TaskId, Collection<TopicPartition>> taskWithCorruptedChangelogs = new HashMap<>();\n                 for (final TopicPartition partition : e.partitions()) {\n                     final TaskId taskId = changelogs.get(partition).stateManager.taskId();\n                     taskWithCorruptedChangelogs.computeIfAbsent(taskId, k -> new HashSet<>()).add(partition);\n                 }\n-                throw new TaskCorruptedException(taskWithCorruptedChangelogs);\n+                throw new TaskCorruptedException(taskWithCorruptedChangelogs, e);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5OTM4Ng==", "url": "https://github.com/apache/kafka/pull/8896#discussion_r442399386", "bodyText": "This is the main change. Once every ten seconds, we will log the progress for each active restoring changelog.", "author": "vvcephei", "createdAt": "2020-06-18T17:47:47Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StoreChangelogReader.java", "diffHunk": "@@ -446,6 +450,38 @@ public void restore() {\n             }\n \n             maybeUpdateLimitOffsetsForStandbyChangelogs();\n+\n+            maybeLogRestorationProgress();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUyOTk3NQ==", "url": "https://github.com/apache/kafka/pull/8896#discussion_r442529975", "bodyText": "I've rolled back a bunch of accidental formatting changes, but left the ones that are actually code style compliance issues (like using brackets around conditional bodies).", "author": "vvcephei", "createdAt": "2020-06-18T22:11:23Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StoreChangelogReader.java", "diffHunk": "@@ -496,8 +539,9 @@ private void bufferChangelogRecords(final ChangelogMetadata changelogMetadata, f\n             } else {\n                 changelogMetadata.bufferedRecords.add(record);\n                 final long offset = record.offset();\n-                if (changelogMetadata.restoreEndOffset == null || offset < changelogMetadata.restoreEndOffset)\n+                if (changelogMetadata.restoreEndOffset == null || offset < changelogMetadata.restoreEndOffset) {\n                     changelogMetadata.bufferedLimitIndex = changelogMetadata.bufferedRecords.size();\n+                }", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzMTMwMA==", "url": "https://github.com/apache/kafka/pull/8896#discussion_r442531300", "bodyText": "This is moderately obnoxious... The addition of logging these values means that these tests will get a NullPointerException unless we mock this call, but the mock is irrelevant to the test outcome.", "author": "vvcephei", "createdAt": "2020-06-18T22:15:17Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StoreChangelogReaderTest.java", "diffHunk": "@@ -223,6 +227,7 @@ public void shouldInitializeChangelogAndCheckForCompletion() {\n     @Test\n     public void shouldPollWithRightTimeout() {\n         EasyMock.expect(storeMetadata.offset()).andReturn(null).andReturn(9L).anyTimes();\n+        EasyMock.expect(stateManager.changelogOffsets()).andReturn(singletonMap(tp, 5L));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzMTkyNA==", "url": "https://github.com/apache/kafka/pull/8896#discussion_r442931924", "bodyText": "This comment seems worth adding to the code :)", "author": "guozhangwang", "createdAt": "2020-06-19T16:19:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzMTMwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAwNTUwNA==", "url": "https://github.com/apache/kafka/pull/8896#discussion_r443005504", "bodyText": "I didn't think to do this... This might be equivocation, but it seems like if I wrote that in a code comment, it may or may not be true in the future. Looking at the tests, there are already like a dozen cryptic, redundant mocks, so I'm not sure justifying this one really makes a material impact on this test's readability, which is already approaching zero.\nAdding a comment like \"this is just to prevent the logger from throwing an NPE\" carries the risk that it can quickly become untrue in two ways:\n\nMaybe we remove or change the log so that it wouldn't need this mock; since it's a \"nice\" mock, we'll never know. In fact, I can't verify this call because the way the logger is configured only to print every ten seconds makes the NPE nondeterministic. Plus, it's not great to verify stuff that is beside the point of the test.\nMaybe we change the implementation so that it actually does exercise this mocked behavior, then the comment will become untrue, but we may not even notice.\n\nTypically, having this many specific and complex mocks in a test indicates that we shouldn't be using easymock, but instead configure the component with \"dummy\" state manager, etc. If we re-wrote this test to use that strategy, then we wouldn't need to make explicit expectations like this.\nAnyway, that's why I'm sort of inclined on just declaring bankruptcy on the comprehensibility of this test.", "author": "vvcephei", "createdAt": "2020-06-19T19:14:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzMTMwMA=="}], "type": "inlineReview"}, {"oid": "6431b199f51feb7a4fc92b446780d85721e56879", "url": "https://github.com/apache/kafka/commit/6431b199f51feb7a4fc92b446780d85721e56879", "message": "KAFKA-10185: Restoration info logging", "committedDate": "2020-06-18T22:19:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzMTM1Ng==", "url": "https://github.com/apache/kafka/pull/8896#discussion_r442931356", "bodyText": "nit: should we have a newline for each partition? Otherwise that ling maybe too long.", "author": "guozhangwang", "createdAt": "2020-06-19T16:18:20Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StoreChangelogReader.java", "diffHunk": "@@ -458,9 +462,48 @@ public void restore() {\n             }\n \n             maybeUpdateLimitOffsetsForStandbyChangelogs();\n+\n+            maybeLogRestorationProgress();\n+        }\n+    }\n+\n+    private void maybeLogRestorationProgress() {\n+        if (state == ChangelogReaderState.ACTIVE_RESTORING) {\n+            if (time.milliseconds() - lastRestoreLogTime > RESTORE_LOG_INTERVAL_MS) {\n+                final Set<TopicPartition> topicPartitions = activeRestoringChangelogs();\n+                if (!topicPartitions.isEmpty()) {\n+                    final StringBuilder builder = new StringBuilder().append(\"Restoration in progress for \")\n+                                                                     .append(topicPartitions.size())\n+                                                                     .append(\" partitions.\");\n+                    for (final TopicPartition partition : topicPartitions) {", "originalCommit": "6431b199f51feb7a4fc92b446780d85721e56879", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAwMTQ0Mg==", "url": "https://github.com/apache/kafka/pull/8896#discussion_r443001442", "bodyText": "I thought about it; while it does make the logs easier to read, it makes them harder to search (as in grep, since the line that would match the query doesn't contain all the information.\nWe do have other places where we concatenate every topic-partition on a single line, eg in the StreamsPartitionAssignor, so I think if long lines were a problem, people would already be complaining.", "author": "vvcephei", "createdAt": "2020-06-19T19:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzMTM1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAwNDE5Mg==", "url": "https://github.com/apache/kafka/pull/8896#discussion_r443004192", "bodyText": "Actually I do have complaints about the StreamsPartitionAssignor log entries haha :)\nAnyways, I think grep a valid reason. My rationale was that when searching for this entry, most people would use \"Restoration in progress for\" and then manually check if the particular interested partition in the following line, but I guess I'm just biased because I'm not a heavy grep user.\nIt is a quite nit comment and I won't feel strong about it. Your call.", "author": "guozhangwang", "createdAt": "2020-06-19T19:10:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzMTM1Ng=="}], "type": "inlineReview"}]}