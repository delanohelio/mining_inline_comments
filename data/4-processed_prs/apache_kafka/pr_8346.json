{"pr_number": 8346, "pr_title": "KAFKA-9373: Reduce shutdown time by avoiding unnecessary loading of indexes", "pr_createdAt": "2020-03-25T14:48:47Z", "pr_url": "https://github.com/apache/kafka/pull/8346", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2MzcwMg==", "url": "https://github.com/apache/kafka/pull/8346#discussion_r398063702", "bodyText": "Identation of *. Also there seems to be tab in front of AbstractIndex.", "author": "junrao", "createdAt": "2020-03-25T18:05:40Z", "path": "core/src/main/scala/kafka/log/LazyIndex.scala", "diffHunk": "@@ -18,22 +18,32 @@\n package kafka.log\n \n import java.io.File\n+import java.nio.file.{Files, NoSuchFileException}\n import java.util.concurrent.locks.ReentrantLock\n \n import LazyIndex._\n import kafka.utils.CoreUtils.inLock\n import kafka.utils.threadsafe\n+import org.apache.kafka.common.utils.Utils\n \n /**\n-  * A wrapper over an `AbstractIndex` instance that provides a mechanism to defer loading (i.e. memory mapping) the\n-  * underlying index until it is accessed for the first time via the `get` method.\n+  * A wrapper over an `AbstractIndex` instance that provides a mechanism to defer loading\n+  * (i.e. memory mapping) the underlying index until it is accessed for the first time via the\n+  * `get` method.\n   *\n-  * This is an important optimization with regards to broker start-up time if it has a large number of segments.\n+  * In addition, this class exposes a number of methods (e.g. updateParentDir, renameTo, close,\n+  * etc.) that provide the desired behavior without causing the index to be loaded. If the index\n+  * had previously been loaded, the methods in this class simply delegate to the relevant method in\n+  * the index.\n   *\n-  * Methods of this class are thread safe. Make sure to check `AbstractIndex` subclasses documentation\n-  * to establish their thread safety.\n+  * This is an important optimization with regards to broker start-up and shutdown time if it has a\n+  * large number of segments.\n   *\n-  * @param loadIndex A function that takes a `File` pointing to an index and returns a loaded `AbstractIndex` instance.\n+  * Methods of this class are thread safe. Make sure to check `AbstractIndex` subclasses\n+  * documentation to establish their thread safety.\n+  *\n+  * @param loadIndex A function that takes a `File` pointing to an index and returns a loaded\n+ *                  `AbstractIndex` instance.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NTc5NQ==", "url": "https://github.com/apache/kafka/pull/8346#discussion_r398075795", "bodyText": "Hmm, we didn't do that before. Is there a reason that we should hide this exception?", "author": "junrao", "createdAt": "2020-03-25T18:24:10Z", "path": "core/src/main/scala/kafka/log/LazyIndex.scala", "diffHunk": "@@ -75,15 +109,57 @@ object LazyIndex {\n     new LazyIndex(new IndexFile(file), file => new TimeIndex(file, baseOffset, maxIndexSize, writable))\n \n   private sealed trait IndexWrapper {\n+\n     def file: File\n-    def file_=(f: File): Unit\n+\n+    def updateParentDir(f: File): Unit\n+\n+    def renameTo(f: File): Unit\n+\n+    def deleteIfExists(): Boolean\n+\n+    def close(): Unit\n+\n+    def closeHandler(): Unit\n+\n   }\n \n-  private class IndexFile(@volatile var file: File) extends IndexWrapper\n+  private class IndexFile(@volatile private var _file: File) extends IndexWrapper {\n+\n+    def file: File = _file\n+\n+    def updateParentDir(parentDir: File): Unit = _file = new File(parentDir, file.getName)\n+\n+    def renameTo(f: File): Unit = {\n+      try Utils.atomicMoveWithFallback(file.toPath, f.toPath)\n+      catch {\n+        case _: NoSuchFileException if !file.exists => ()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4MDY2Mg==", "url": "https://github.com/apache/kafka/pull/8346#discussion_r398180662", "bodyText": "We may call renameTo when the index file has not been created yet with this new approach. So we catch this case and ignore it. We could alternatively check if the file exists before calling atomicMoveWithFallback.", "author": "ijuma", "createdAt": "2020-03-25T21:27:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NTc5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxOTIzMw==", "url": "https://github.com/apache/kafka/pull/8346#discussion_r398319233", "bodyText": "Interesting. That's true for the active segment.", "author": "junrao", "createdAt": "2020-03-26T05:02:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NTc5NQ=="}], "type": "inlineReview"}, {"oid": "18b608a5ec9902af03bda291dbafc4f4aec4e5b4", "url": "https://github.com/apache/kafka/commit/18b608a5ec9902af03bda291dbafc4f4aec4e5b4", "message": "KAFKA-9373: Reduce shutdown time by avoiding unnecessary loading of indexes\n\nKAFKA-7283 enabled lazy mmap on index files by initializing indices\non-demand rather than performing costly disk/memory operations when\ncreating all indices on broker startup. This helped reducing the startup\ntime of brokers. However, segment indices are still created on closing\nsegments, regardless of whether they need to be closed or not.\n\nThis is a cleaned up version of #7900, which was submitted by @efeg. It\neliminates unnecessary disk accesses and memory map operations while\ndeleting, renaming or closing offset and time indexes.\n\nIn a cluster with 31 brokers, where each broker has 13K to 20K segments,\n@efeg and team observed up to 2 orders of magnitude faster LogManager\nshutdown times - i.e. dropping the LogManager shutdown time of each\nbroker from 10s of seconds to 100s of milliseconds.\n\nTo avoid confusion between `renameTo` and `setFile`, I replaced the\nlatter with the more restricted updateParentDir` (it turns out that's\nall we need).\n\nCo-authored-by: Adem Efe Gencer <agencer@linkedin.com>\nCo-authored-by: Ismael Juma <ismael@juma.me.uk>", "committedDate": "2020-03-26T03:56:16Z", "type": "commit"}, {"oid": "06c44ac60abed218be463bbfa8f2b185f611e961", "url": "https://github.com/apache/kafka/commit/06c44ac60abed218be463bbfa8f2b185f611e961", "message": "Fix scaladoc indent", "committedDate": "2020-03-26T03:56:16Z", "type": "commit"}, {"oid": "06c44ac60abed218be463bbfa8f2b185f611e961", "url": "https://github.com/apache/kafka/commit/06c44ac60abed218be463bbfa8f2b185f611e961", "message": "Fix scaladoc indent", "committedDate": "2020-03-26T03:56:16Z", "type": "forcePushed"}, {"oid": "57f6bf83fc0bf6f700b64b1a9e4f1dcec1ea070f", "url": "https://github.com/apache/kafka/commit/57f6bf83fc0bf6f700b64b1a9e4f1dcec1ea070f", "message": "Fix benchmark compilation error", "committedDate": "2020-03-26T05:43:38Z", "type": "commit"}, {"oid": "f3fe9f7bd8cdee0369b5b4ceda3c62ea8db4a6bd", "url": "https://github.com/apache/kafka/commit/f3fe9f7bd8cdee0369b5b4ceda3c62ea8db4a6bd", "message": "Fix compilation error in benchmark", "committedDate": "2020-03-26T06:42:21Z", "type": "commit"}, {"oid": "f3fe9f7bd8cdee0369b5b4ceda3c62ea8db4a6bd", "url": "https://github.com/apache/kafka/commit/f3fe9f7bd8cdee0369b5b4ceda3c62ea8db4a6bd", "message": "Fix compilation error in benchmark", "committedDate": "2020-03-26T06:42:21Z", "type": "forcePushed"}]}