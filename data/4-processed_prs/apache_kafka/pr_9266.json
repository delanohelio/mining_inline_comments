{"pr_number": 9266, "pr_title": "KAFKA-10469: Resolve logger levels hierarchically", "pr_createdAt": "2020-09-08T16:18:28Z", "pr_url": "https://github.com/apache/kafka/pull/9266", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYxODc3OQ==", "url": "https://github.com/apache/kafka/pull/9266#discussion_r485618779", "bodyText": "@tombentley A small propsal: would org.apache.log4j.Level.TRACE.toString be better?\nIt passes compilation checks.", "author": "dongjinleekr", "createdAt": "2020-09-09T13:39:19Z", "path": "core/src/test/scala/kafka/utils/LoggingTest.scala", "diffHunk": "@@ -58,4 +60,20 @@ class LoggingTest extends Logging {\n \n     assertEquals(logging.getClass.getName, logging.log.underlying.getName)\n   }\n+\n+  @Test\n+  def testLoggerLevelIsResolved(): Unit = {\n+    val controller = new Log4jController()\n+    val previousLevel = controller.getLogLevel(\"kafka\")\n+    try {\n+      controller.setLogLevel(\"kafka\", \"TRACE\")", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY3MTUwMw==", "url": "https://github.com/apache/kafka/pull/9266#discussion_r485671503", "bodyText": "@dongjinleekr that would be fine for the setLogLevel() and assertEquals calls, but there would still be the level name in the assertTrue(...contains(\"kafka=TRACE\")) calls. I think fixing it there would make the code harder to read, and given that the declaration of TRACE is in an external API on which we depend, and the name will not change there doesn't seem to be any benefit to using the declaration rather than the name as a literal.", "author": "tombentley", "createdAt": "2020-09-09T14:47:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYxODc3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY3MzEwMA==", "url": "https://github.com/apache/kafka/pull/9266#discussion_r485673100", "bodyText": "@tombentley Great. Your stance is reasonable. I am convinced.", "author": "dongjinleekr", "createdAt": "2020-09-09T14:49:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYxODc3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1NjIyNw==", "url": "https://github.com/apache/kafka/pull/9266#discussion_r490256227", "bodyText": "Can we add a comment explaining why we are invoking the logger here?", "author": "ijuma", "createdAt": "2020-09-17T13:42:43Z", "path": "core/src/test/scala/kafka/utils/LoggingTest.scala", "diffHunk": "@@ -58,4 +60,20 @@ class LoggingTest extends Logging {\n \n     assertEquals(logging.getClass.getName, logging.log.underlying.getName)\n   }\n+\n+  @Test\n+  def testLoggerLevelIsResolved(): Unit = {\n+    val controller = new Log4jController()\n+    val previousLevel = controller.getLogLevel(\"kafka\")\n+    try {\n+      controller.setLogLevel(\"kafka\", \"TRACE\")\n+      Logger(LoggerFactory.getLogger(\"kafka.utils.Log4jControllerTest\")).trace(\"test\")", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM4MzcyNg==", "url": "https://github.com/apache/kafka/pull/9266#discussion_r490383726", "bodyText": "I verified that it works without com.typesafe.scalalogging.Logger#apply here, i.e.,  LoggerFactory.getLogger(\"kafka.utils.Log4jControllerTest\").trace(\"test\"). Other test cases like RestServerTest don't invoke it. It would be better to remove it.", "author": "dongjinleekr", "createdAt": "2020-09-17T16:17:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1NjIyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1OTQ1OA==", "url": "https://github.com/apache/kafka/pull/9266#discussion_r490259458", "bodyText": "Should this be private?", "author": "ijuma", "createdAt": "2020-09-17T13:47:14Z", "path": "core/src/main/scala/kafka/utils/Log4jController.scala", "diffHunk": "@@ -29,6 +29,24 @@ import scala.jdk.CollectionConverters._\n object Log4jController {\n   val ROOT_LOGGER = \"root\"\n \n+  def resolveLevel(logger: Logger): String = {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI2MDk0OA==", "url": "https://github.com/apache/kafka/pull/9266#discussion_r490260948", "bodyText": "Nit: we don't usually include the Assert. prefix in test assertions.", "author": "ijuma", "createdAt": "2020-09-17T13:49:13Z", "path": "core/src/test/scala/kafka/utils/LoggingTest.scala", "diffHunk": "@@ -58,4 +60,22 @@ class LoggingTest extends Logging {\n \n     assertEquals(logging.getClass.getName, logging.log.underlying.getName)\n   }\n+\n+  @Test\n+  def testLoggerLevelIsResolved(): Unit = {\n+    val controller = new Log4jController()\n+    val previousLevel = controller.getLogLevel(\"kafka\")\n+    try {\n+      controller.setLogLevel(\"kafka\", \"TRACE\")\n+      // Do some logging so that the Logger is created within the hierarchy\n+      // (until loggers are used only loggers in the config file exist)\n+      Logger(LoggerFactory.getLogger(\"kafka.utils.Log4jControllerTest\")).trace(\"test\")\n+      Assert.assertEquals(\"TRACE\", controller.getLogLevel(\"kafka\"))\n+      Assert.assertEquals(\"TRACE\", controller.getLogLevel(\"kafka.utils.Log4jControllerTest\"))\n+      Assert.assertTrue(controller.getLoggers.contains(\"kafka=TRACE\"))\n+      Assert.assertTrue(controller.getLoggers.contains(\"kafka.utils.Log4jControllerTest=TRACE\"))", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2272bf33b7606162c7b2006910b8ccd975232601", "url": "https://github.com/apache/kafka/commit/2272bf33b7606162c7b2006910b8ccd975232601", "message": "KAFKA-10469: Resolve logger levels hierarchically\n\nPrevious to root logger level was used, ignoring intervening loggers with\ndifferent levels.", "committedDate": "2020-09-22T07:58:48Z", "type": "commit"}, {"oid": "3b75b0b69e8d70a97716ccb3e3dfdb5fca31b691", "url": "https://github.com/apache/kafka/commit/3b75b0b69e8d70a97716ccb3e3dfdb5fca31b691", "message": "Fix logic & move test", "committedDate": "2020-09-22T07:58:48Z", "type": "commit"}, {"oid": "9fe8c465a8b0253237250930b59fff9eb5429b4b", "url": "https://github.com/apache/kafka/commit/9fe8c465a8b0253237250930b59fff9eb5429b4b", "message": "comment", "committedDate": "2020-09-22T07:58:48Z", "type": "commit"}, {"oid": "814431e048668486ad145f6f92e30d31e54d6e55", "url": "https://github.com/apache/kafka/commit/814431e048668486ad145f6f92e30d31e54d6e55", "message": "make private", "committedDate": "2020-09-22T07:58:48Z", "type": "commit"}, {"oid": "dbeead90e038f463445e84efd387aa083378d554", "url": "https://github.com/apache/kafka/commit/dbeead90e038f463445e84efd387aa083378d554", "message": "Assert", "committedDate": "2020-09-22T07:58:48Z", "type": "commit"}, {"oid": "9110d76ec416907a3f75478d5d2b77777cc31f13", "url": "https://github.com/apache/kafka/commit/9110d76ec416907a3f75478d5d2b77777cc31f13", "message": "Remove com.typesafe.scalalogging.Logger", "committedDate": "2020-09-22T07:58:48Z", "type": "commit"}, {"oid": "6310c039f94e10eb9f219acd16f946c27b4fa711", "url": "https://github.com/apache/kafka/commit/6310c039f94e10eb9f219acd16f946c27b4fa711", "message": "Fix infinite loop", "committedDate": "2020-09-22T09:55:23Z", "type": "commit"}, {"oid": "6310c039f94e10eb9f219acd16f946c27b4fa711", "url": "https://github.com/apache/kafka/commit/6310c039f94e10eb9f219acd16f946c27b4fa711", "message": "Fix infinite loop", "committedDate": "2020-09-22T09:55:23Z", "type": "forcePushed"}, {"oid": "42ddf73d99da8f47489af13016172b3151eec618", "url": "https://github.com/apache/kafka/commit/42ddf73d99da8f47489af13016172b3151eec618", "message": "Fix test", "committedDate": "2020-09-22T15:43:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk3NTMyNQ==", "url": "https://github.com/apache/kafka/pull/9266#discussion_r495975325", "bodyText": "Wouldn't the first ancestor be kafka.cluster?", "author": "ijuma", "createdAt": "2020-09-28T14:19:04Z", "path": "core/src/test/scala/integration/kafka/api/PlaintextAdminIntegrationTest.scala", "diffHunk": "@@ -2061,11 +2062,12 @@ class PlaintextAdminIntegrationTest extends BaseAdminIntegrationTest {\n   @Test\n   def testDescribeConfigsForLog4jLogLevels(): Unit = {\n     client = Admin.create(createConfig)\n-\n+    LoggerFactory.getLogger(\"kafka.cluster.Replica\").trace(\"Message to create the logger\")\n     val loggerConfig = describeBrokerLoggers()\n-    val rootLogLevel = loggerConfig.get(Log4jController.ROOT_LOGGER).value()\n+    val kafkaLogLevel = loggerConfig.get(\"kafka\").value()\n     val logCleanerLogLevelConfig = loggerConfig.get(\"kafka.cluster.Replica\")\n-    assertEquals(rootLogLevel, logCleanerLogLevelConfig.value()) // we expect an undefined log level to be the same as the root logger\n+    // we expect an undefined log level to be the same as its first ancestor logger", "originalCommit": "42ddf73d99da8f47489af13016172b3151eec618", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA0ODMzNA==", "url": "https://github.com/apache/kafka/pull/9266#discussion_r496048334", "bodyText": "It would, but that's not configured in the log4j.properties used for this test, so we inherit from the 2nd ancestor, which is ERROR, where as the root logger was OFF. Which is why I had to fix this test. Let me fix the comment.", "author": "tombentley", "createdAt": "2020-09-28T15:39:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk3NTMyNQ=="}], "type": "inlineReview"}, {"oid": "a4ec8437a361a289bc2da2f15f44df1fa69595a1", "url": "https://github.com/apache/kafka/commit/a4ec8437a361a289bc2da2f15f44df1fa69595a1", "message": "Review comment", "committedDate": "2020-09-28T15:41:17Z", "type": "commit"}]}