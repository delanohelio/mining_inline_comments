{"pr_number": 9680, "pr_title": "MINOR: a small refactor for LogManage#shutdown", "pr_createdAt": "2020-12-03T13:29:54Z", "pr_url": "https://github.com/apache/kafka/pull/9680", "timeline": [{"oid": "ed2f6d10c2b8e47bb2da31349565fb84e9e770af", "url": "https://github.com/apache/kafka/commit/ed2f6d10c2b8e47bb2da31349565fb84e9e770af", "message": "MINOR: case2.patch\n\nHomework", "committedDate": "2020-12-03T13:20:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE3OTEyNg==", "url": "https://github.com/apache/kafka/pull/9680#discussion_r540179126", "bodyText": "@chia7712 This changed behavior. Previously we would call get on every Future and now we don't. @kowshik @junrao Seems like we didn't add a test that verifies the recent fix in this area?", "author": "ijuma", "createdAt": "2020-12-10T13:44:39Z", "path": "core/src/main/scala/kafka/log/LogManager.scala", "diffHunk": "@@ -479,14 +479,14 @@ class LogManager(logDirs: Seq[File],\n \n     try {\n       for ((dir, dirJobs) <- jobs) {\n-        val hasErrors = dirJobs.map { future =>\n+        val hasErrors = dirJobs.exists  { future =>\n           Try(future.get) match {\n             case Success(_) => false\n             case Failure(e) =>\n               warn(s\"There was an error in one of the threads during LogManager shutdown: ${e.getCause}\")\n               true\n           }\n-        }.contains(true)\n+        }", "originalCommit": "ed2f6d10c2b8e47bb2da31349565fb84e9e770af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIzNzA5NQ==", "url": "https://github.com/apache/kafka/pull/9680#discussion_r540237095", "bodyText": "Oh, my bad. Will revert it with suitable test.", "author": "chia7712", "createdAt": "2020-12-10T14:59:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE3OTEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1Njg4MQ==", "url": "https://github.com/apache/kafka/pull/9680#discussion_r540356881", "bodyText": "see #9728", "author": "chia7712", "createdAt": "2020-12-10T17:26:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE3OTEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ3NjE1Nw==", "url": "https://github.com/apache/kafka/pull/9680#discussion_r540476157", "bodyText": "@chia7712 @ijuma I think you were referring to #9596 ?\nThe test added in #9596 to verify this was LogManagerTest.testHandlingExceptionsDuringShutdown (link). I agree that the test wasn't effective enough to catch the problem. The issue was that fundamentally this area of the code was a little bit difficult to test due to the asynchronous behavior.\nSo for example, although @chia7712 has a fix in #9728, I still think it is not easy to write a test that reliably fails if the bug is introduced again.\nBelow is my explanation on why it is difficult to improve the existing testHandlingExceptionsDuringShutdown to catch such issues. Let us imagine that the test setup introduced multiple logs for each log dir, and setup an expectation (in the test code) that if one of the logs failed during close(), then, the other logs under the same log directory should still be closed by the time LogManager.shutdown() returns. Such a kind of test expectation would have caught the problem introduced in this PR. Now, writing that kind of a test was not easy, because, even if one of the logs failed to close, the other futures can still be completed by the time LogManager.shutdown() returns (there is no strong need to call future.get for the future to pass). Thus, the test can pass despite the bug.\nOne potential solution (a bigger change) is to see if we can inject a different thread pool executor that only during test executes the threads lazily i.e. it executes the submitted threads only when future.get is called, otherwise it will never execute them. If we succeed in doing this, then, the test can be improved such that unless future.get is called on all logs, some of the log close() will never happen and will fail the test in the presence of the bug introduced by this PR.\ncc @junrao", "author": "kowshik", "createdAt": "2020-12-10T20:31:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE3OTEyNg=="}], "type": "inlineReview"}]}