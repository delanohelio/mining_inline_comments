{"pr_number": 9000, "pr_title": "KAFKA-10036 Improve handling and documentation of Suppliers", "pr_createdAt": "2020-07-09T09:59:17Z", "pr_url": "https://github.com/apache/kafka/pull/9000", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc0ODcxMA==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r464748710", "bodyText": "nit each time {@link  ProcessorSupplier#get()} is called. (similar elsewhere -- please fix throughout the whole PR)", "author": "mjsax", "createdAt": "2020-08-04T01:36:52Z", "path": "streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java", "diffHunk": "@@ -521,6 +521,10 @@ public synchronized StreamsBuilder addStateStore(final StoreBuilder<?> builder)\n      * <p>\n      * It is not required to connect a global store to {@link Processor Processors}, {@link Transformer Transformers},\n      * or {@link ValueTransformer ValueTransformer}; those have read-only access to all global stores by default.\n+     * <p>\n+     * The supplier should always generate a new instance each time invoking {@link  ProcessorSupplier#get()}. Creating", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc0ODgwMQ==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r464748801", "bodyText": "{@link Processor}(similar elsewhere -- please fix throughout the whole PR)", "author": "mjsax", "createdAt": "2020-08-04T01:37:16Z", "path": "streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java", "diffHunk": "@@ -521,6 +521,10 @@ public synchronized StreamsBuilder addStateStore(final StoreBuilder<?> builder)\n      * <p>\n      * It is not required to connect a global store to {@link Processor Processors}, {@link Transformer Transformers},\n      * or {@link ValueTransformer ValueTransformer}; those have read-only access to all global stores by default.\n+     * <p>\n+     * The supplier should always generate a new instance each time invoking {@link  ProcessorSupplier#get()}. Creating\n+     * a single Processor object and returning the same object reference in {@link ProcessorSupplier#get()} would be", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc0OTMyMA==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r464749320", "bodyText": "{@link Transformer} (also elsewhere)", "author": "mjsax", "createdAt": "2020-08-04T01:39:16Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/KStream.java", "diffHunk": "@@ -2522,8 +2522,12 @@ void to(final TopicNameExtractor<K, V> topicExtractor,\n      * If in {@link Transformer#transform(Object, Object) Transformer#transform()} multiple records need to be emitted\n      * for each input record, it is recommended to use {@link #flatTransform(TransformerSupplier, String...)\n      * flatTransform()}.\n+     * The supplier should always generate a new instance each time invoking {@link TransformerSupplier#get()}. Creating\n+     * a single Transformer object and returning the same object reference in {@link TransformerSupplier#get()} would be", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc0OTcyNw==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r464749727", "bodyText": "I think we can be more elaborate and add something like TransformerSupplier#get() must return a new Transformer object each time it is called.", "author": "mjsax", "createdAt": "2020-08-04T01:41:05Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamUtil.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.kstream.internals;\n+\n+import org.apache.kafka.streams.kstream.TransformerSupplier;\n+\n+/**\n+ * Shared functions to handle verifications of a valid {@link org.apache.kafka.streams.kstream.KStream}.\n+ */\n+final class KStreamUtil {\n+\n+    private KStreamUtil() {}\n+\n+    /**\n+     * @throws IllegalArgumentException if the same transformer instance is obtained each time\n+     */\n+    static void checkTransformerSupplier(final TransformerSupplier<?, ?, ?> supplier) {\n+        if (supplier.get() == supplier.get()) {\n+            throw new IllegalArgumentException(\"TransformerSupplier generates single transformer reference. Supplier \" +\n+                    \"pattern violated.\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc0OTk4MA==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r464749980", "bodyText": "As above.", "author": "mjsax", "createdAt": "2020-08-04T01:42:04Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/TopologyUtil.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.processor.internals;\n+\n+import org.apache.kafka.streams.errors.TopologyException;\n+import org.apache.kafka.streams.processor.ProcessorSupplier;\n+\n+/**\n+ * Shared functions to handle verifications of a valid {@link org.apache.kafka.streams.Topology}.\n+ */\n+public final class TopologyUtil {\n+\n+    private TopologyUtil() {}\n+\n+    /**\n+     * @throws TopologyException if the same processor instance is obtained each time\n+     */\n+    public static void checkProcessorSupplier(final ProcessorSupplier<?, ?> supplier) {\n+        if (supplier.get() == supplier.get()) {\n+            throw new TopologyException(\"ProcessorSupplier generates single processor reference. Supplier pattern\" +\n+                    \" violated.\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc1MDM2OQ==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r464750369", "bodyText": "We should use aasertThrows and verify the error message similar to the TransformerSupplier test", "author": "mjsax", "createdAt": "2020-08-04T01:43:23Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilderTest.java", "diffHunk": "@@ -175,6 +177,12 @@ public void testAddProcessorWithNullParents() {\n         builder.addProcessor(\"processor\", new MockProcessorSupplier<>(), (String) null);\n     }\n \n+    @Test(expected = TopologyException.class)\n+    public void testAddProcessorWithBadSupplier() {\n+        final Processor<Object, Object> processor = new MockProcessor<>();\n+        builder.addProcessor(\"processor\", () -> processor, (String) null);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc1MDg5MQ==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r464750891", "bodyText": "It might be nice to replicate this test for all \"siblings\" of flatTransform (including the \"Value\" variants). -- Also note that there is KStream#process() and `StreamsBuilder#addGlobalStateStore), too, that should also be tested.", "author": "mjsax", "createdAt": "2020-08-04T01:45:14Z", "path": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java", "diffHunk": "@@ -1865,6 +1865,17 @@ public void shouldNotAllowNullNamedOnTransformWithStoreName() {\n         assertThat(exception.getMessage(), equalTo(\"named can't be null\"));\n     }\n \n+    @Test\n+    public void shouldNotAllowBadTransformerSupplierOnFlatTransform() {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4MDQ1MQ==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r466080451", "bodyText": "The \"Value\" variants use a ValueTransformerSupplier instead of a TransformerSupplier. Does it makes sense to extend the supplier usage verification to ValueTransformerSupplier as well?", "author": "soarez", "createdAt": "2020-08-06T00:42:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc1MDg5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg4NzUzNQ==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r474887535", "bodyText": "Yes, those suppliers must return a new instance on get(), too, so the new check should be done for them as well.", "author": "mjsax", "createdAt": "2020-08-21T19:22:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc1MDg5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk1MDUyNg==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r474950526", "bodyText": "Ok. I just added equivalent documentation changes, checks and tests for ValueTransformerSupplier and ValueTransformerWithKeySupplier as well in 567d5e0 .", "author": "soarez", "createdAt": "2020-08-21T20:40:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc1MDg5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc1MTIxMg==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r464751212", "bodyText": "We should also test addGlobalStateStore()", "author": "mjsax", "createdAt": "2020-08-04T01:46:36Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilderTest.java", "diffHunk": "@@ -175,6 +177,12 @@ public void testAddProcessorWithNullParents() {\n         builder.addProcessor(\"processor\", new MockProcessorSupplier<>(), (String) null);\n     }\n \n+    @Test(expected = TopologyException.class)\n+    public void testAddProcessorWithBadSupplier() {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4MTY0Nw==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r466081647", "bodyText": "Assuming you mean .addGlobalStore(), as there's no .addGlobalStateStore() in the builder. There was a supplier usage check missing there too.", "author": "soarez", "createdAt": "2020-08-06T00:47:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc1MTIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg4NjY4OQ==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r474886689", "bodyText": "Yes. Sorry for using the wrong name...", "author": "mjsax", "createdAt": "2020-08-21T19:21:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc1MTIxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYyMDQwOA==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r477620408", "bodyText": "I am wondering if we actually need three methods? Could we use java.util.function.Supplier instead (we don't really care about generic types.\nTo customize the error message we just pass an additional String or use supplier.getClass().getName() ?", "author": "mjsax", "createdAt": "2020-08-26T22:17:40Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.streams.kstream.internals;\n+\n+import org.apache.kafka.streams.kstream.TransformerSupplier;\n+import org.apache.kafka.streams.kstream.ValueTransformerSupplier;\n+import org.apache.kafka.streams.kstream.ValueTransformerWithKeySupplier;\n+\n+/**\n+ * Shared functions to handle verifications of a valid {@link org.apache.kafka.streams.kstream.KStream}.\n+ */\n+final class KStreamUtil {\n+\n+    private KStreamUtil() {}\n+\n+    /**\n+     * @throws IllegalArgumentException if the same transformer instance is obtained each time\n+     */\n+    static void checkSupplier(final TransformerSupplier<?, ?, ?> supplier) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgzMjAxMQ==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r479832011", "bodyText": "Good idea. supplier.getClass().getName() doesn't really work, but we get the name by looking through supplier.getClass().getInterfaces().", "author": "soarez", "createdAt": "2020-08-30T23:52:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYyMDQwOA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "20ba02a727b6af3bcdc059f54375f458fccaf889", "url": "https://github.com/apache/kafka/commit/20ba02a727b6af3bcdc059f54375f458fccaf889", "message": "KAFKA-10036 Detect singleton suppliers", "committedDate": "2020-10-22T09:21:38Z", "type": "commit"}, {"oid": "20ba02a727b6af3bcdc059f54375f458fccaf889", "url": "https://github.com/apache/kafka/commit/20ba02a727b6af3bcdc059f54375f458fccaf889", "message": "KAFKA-10036 Detect singleton suppliers", "committedDate": "2020-10-22T09:21:38Z", "type": "forcePushed"}, {"oid": "041c51a5c3a70dde7be18a006a3b14b63d2f9199", "url": "https://github.com/apache/kafka/commit/041c51a5c3a70dde7be18a006a3b14b63d2f9199", "message": "Missed compilation error", "committedDate": "2020-10-22T20:35:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIzOTkzNQ==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r516239935", "bodyText": "This seems to be a public API change that we cannot do without a KIP. Seem you added it so you can pass the different suppliers into checkSupplier ? Also not sure if checkSupplier must be as \"complicated\" as proposed.", "author": "mjsax", "createdAt": "2020-11-02T20:37:33Z", "path": "streams/src/main/java/org/apache/kafka/streams/kstream/ValueTransformerSupplier.java", "diffHunk": "@@ -33,12 +38,17 @@\n  * @see TransformerSupplier\n  * @see KStream#transform(TransformerSupplier, String...)\n  */\n-public interface ValueTransformerSupplier<V, VR> extends ConnectedStoreProvider {\n+public interface ValueTransformerSupplier<V, VR> extends ConnectedStoreProvider, Supplier<ValueTransformer<V, VR>> {", "originalCommit": "041c51a5c3a70dde7be18a006a3b14b63d2f9199", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY4MDIxMA==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r516680210", "bodyText": "Indeed, that was why. Since it already conforms to the interface, I didn't realize this would be a public API change. Will revert and overload checkSupplier instead.", "author": "soarez", "createdAt": "2020-11-03T13:52:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIzOTkzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA0ODE0OA==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r517048148", "bodyText": "Yeah. Even if it's \"compatible\" and does not break anything, it's still fall into the \"public api change\" category...", "author": "mjsax", "createdAt": "2020-11-04T01:28:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIzOTkzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI0MDc2OQ==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r516240769", "bodyText": "Do we really need to try to extract the concrete interface name?", "author": "mjsax", "createdAt": "2020-11-02T20:39:23Z", "path": "streams/src/main/java/org/apache/kafka/streams/internals/ApiUtils.java", "diffHunk": "@@ -75,4 +81,31 @@ public static long validateMillisecondInstant(final Instant instant, final Strin\n     public static String prepareMillisCheckFailMsgPrefix(final Object value, final String name) {\n         return format(MILLISECOND_VALIDATION_FAIL_MSG_FRMT, name, value);\n     }\n+\n+    /**\n+     * @throws IllegalArgumentException if the same instance is obtained each time\n+     */\n+    public static void checkSupplier(final Supplier<?> supplier) {\n+        if (supplier.get() == supplier.get()) {\n+            final String supplierClass = getAllImplementedInterfaces(supplier.getClass()).stream()", "originalCommit": "041c51a5c3a70dde7be18a006a3b14b63d2f9199", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY4MTc2MQ==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r516681761", "bodyText": "We don't really need to. I thought it could make for a better, and also predictable, error message. But maybe just using the implementing class name is fine.", "author": "soarez", "createdAt": "2020-11-03T13:54:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI0MDc2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA0ODI2NA==", "url": "https://github.com/apache/kafka/pull/9000#discussion_r517048264", "bodyText": "But maybe just using the implementing class name is fine.\n\nThat was my though, too.", "author": "mjsax", "createdAt": "2020-11-04T01:28:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI0MDc2OQ=="}], "type": "inlineReview"}, {"oid": "fa8c9c1077c147f43ea4fb2346d56530cb0c7be1", "url": "https://github.com/apache/kafka/commit/fa8c9c1077c147f43ea4fb2346d56530cb0c7be1", "message": "Overload and simplify checkSupplier", "committedDate": "2020-11-03T13:49:41Z", "type": "commit"}]}