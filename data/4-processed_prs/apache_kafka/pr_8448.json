{"pr_number": 8448, "pr_title": "KAFKA-9796; Broker shutdown could be stuck forever under certain conditions", "pr_createdAt": "2020-04-08T12:24:27Z", "pr_url": "https://github.com/apache/kafka/pull/8448", "timeline": [{"oid": "e347ce338b8fc524ee958817d35a0c7e47fd0b89", "url": "https://github.com/apache/kafka/commit/e347ce338b8fc524ee958817d35a0c7e47fd0b89", "message": "KAFKA-9796; Broker shutdown could be stuck forever under certain conditions", "committedDate": "2020-04-08T12:13:50Z", "type": "commit"}, {"oid": "494e95834dc8f74f3041f5c524674b455c312dca", "url": "https://github.com/apache/kafka/commit/494e95834dc8f74f3041f5c524674b455c312dca", "message": "fixup", "committedDate": "2020-04-08T14:50:22Z", "type": "commit"}, {"oid": "0f8a9dc4a1efef4f1af8ab1bf8ad8c6f3bd985af", "url": "https://github.com/apache/kafka/commit/0f8a9dc4a1efef4f1af8ab1bf8ad8c6f3bd985af", "message": "keep a more intuitive shutdown ordering: 1) acceptor; 2) processors", "committedDate": "2020-04-08T15:21:47Z", "type": "commit"}, {"oid": "5565c8925ffbd79be414e6148449447eb6003500", "url": "https://github.com/apache/kafka/commit/5565c8925ffbd79be414e6148449447eb6003500", "message": "fixup", "committedDate": "2020-04-09T08:08:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4MTgzMA==", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408181830", "bodyText": "These two lines are still true, but removed from the comment?", "author": "rajinisivaram", "createdAt": "2020-04-14T14:29:44Z", "path": "core/src/main/scala/kafka/network/SocketServer.scala", "diffHunk": "@@ -100,29 +100,28 @@ class SocketServer(val config: KafkaConfig,\n \n   private var nextProcessorId = 0\n   private var connectionQuotas: ConnectionQuotas = _\n+  private var startedProcessingRequests = false\n   private var stoppedProcessingRequests = false\n \n   /**\n-   * Start the socket server. Acceptors for all the listeners are started. Processors\n-   * are started if `startupProcessors` is true. If not, processors are only started when\n-   * [[kafka.network.SocketServer#startDataPlaneProcessors()]] or\n-   * [[kafka.network.SocketServer#startControlPlaneProcessor()]] is invoked. Delayed starting of processors\n-   * is used to delay processing client connections until server is fully initialized, e.g.\n-   * to ensure that all credentials have been loaded before authentications are performed.\n-   * Acceptors are always started during `startup` so that the bound port is known when this\n-   * method completes even when ephemeral ports are used. Incoming connections on this server", "originalCommit": "5565c8925ffbd79be414e6148449447eb6003500", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0ODU0OA==", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408648548", "bodyText": "Partially. The acceptors are not started but start to listen. Let me rework the comment to include the part about the bound port though.", "author": "dajac", "createdAt": "2020-04-15T07:52:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4MTgzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4MTg0Mw==", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408181843", "bodyText": "These two lines are still true, but removed from the comment?", "author": "rajinisivaram", "createdAt": "2020-04-14T14:29:45Z", "path": "core/src/main/scala/kafka/network/SocketServer.scala", "diffHunk": "@@ -100,29 +100,28 @@ class SocketServer(val config: KafkaConfig,\n \n   private var nextProcessorId = 0\n   private var connectionQuotas: ConnectionQuotas = _\n+  private var startedProcessingRequests = false\n   private var stoppedProcessingRequests = false\n \n   /**\n-   * Start the socket server. Acceptors for all the listeners are started. Processors\n-   * are started if `startupProcessors` is true. If not, processors are only started when\n-   * [[kafka.network.SocketServer#startDataPlaneProcessors()]] or\n-   * [[kafka.network.SocketServer#startControlPlaneProcessor()]] is invoked. Delayed starting of processors\n-   * is used to delay processing client connections until server is fully initialized, e.g.\n-   * to ensure that all credentials have been loaded before authentications are performed.\n-   * Acceptors are always started during `startup` so that the bound port is known when this\n-   * method completes even when ephemeral ports are used. Incoming connections on this server", "originalCommit": "5565c8925ffbd79be414e6148449447eb6003500", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4Mjg4MQ==", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408182881", "bodyText": "this is not just data-plane processors?", "author": "rajinisivaram", "createdAt": "2020-04-14T14:31:03Z", "path": "core/src/main/scala/kafka/network/SocketServer.scala", "diffHunk": "@@ -160,66 +159,101 @@ class SocketServer(val config: KafkaConfig,\n         Option(metrics.metric(metricName)).fold(0.0)(m => m.metricValue.asInstanceOf[Double])\n       }.getOrElse(0.0)\n     })\n-    info(s\"Started ${dataPlaneAcceptors.size} acceptor threads for data-plane\")\n-    if (controlPlaneAcceptorOpt.isDefined)\n-      info(\"Started control-plane acceptor thread\")\n   }\n \n   /**\n-   * Starts processors of all the data-plane acceptors of this server if they have not already been started.\n-   * This method is used for delayed starting of data-plane processors if [[kafka.network.SocketServer#startup]]\n-   * was invoked with `startupProcessors=false`.\n+   * Start processing requests and new connections. This method is used for delayed starting of\n+   * data-plane processors if [[kafka.network.SocketServer#startup]] was invoked with", "originalCommit": "5565c8925ffbd79be414e6148449447eb6003500", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0OTYyNA==", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408649624", "bodyText": "Correct. Let me rework the comment.", "author": "dajac", "createdAt": "2020-04-15T07:54:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4Mjg4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4MzQ2MQ==", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408183461", "bodyText": "Add a description?", "author": "rajinisivaram", "createdAt": "2020-04-14T14:31:46Z", "path": "core/src/main/scala/kafka/network/SocketServer.scala", "diffHunk": "@@ -160,66 +159,101 @@ class SocketServer(val config: KafkaConfig,\n         Option(metrics.metric(metricName)).fold(0.0)(m => m.metricValue.asInstanceOf[Double])\n       }.getOrElse(0.0)\n     })\n-    info(s\"Started ${dataPlaneAcceptors.size} acceptor threads for data-plane\")\n-    if (controlPlaneAcceptorOpt.isDefined)\n-      info(\"Started control-plane acceptor thread\")\n   }\n \n   /**\n-   * Starts processors of all the data-plane acceptors of this server if they have not already been started.\n-   * This method is used for delayed starting of data-plane processors if [[kafka.network.SocketServer#startup]]\n-   * was invoked with `startupProcessors=false`.\n+   * Start processing requests and new connections. This method is used for delayed starting of\n+   * data-plane processors if [[kafka.network.SocketServer#startup]] was invoked with\n+   * `startProcessingRequests=false`.\n    *\n    * Before starting processors for each endpoint, we ensure that authorizer has all the metadata\n-   * to authorize requests on that endpoint by waiting on the provided future. We start inter-broker listener\n-   * before other listeners. This allows authorization metadata for other listeners to be stored in Kafka topics\n-   * in this cluster.\n+   * to authorize requests on that endpoint by waiting on the provided future. We start inter-broker\n+   * listener before other listeners. This allows authorization metadata for other listeners to be\n+   * stored in Kafka topics in this cluster.\n+   *\n+   * @param authorizerFutures", "originalCommit": "5565c8925ffbd79be414e6148449447eb6003500", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5ODIzNg==", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408198236", "bodyText": "The blocked acceptor would then add another connection to this list right? Do we close that one?", "author": "rajinisivaram", "createdAt": "2020-04-14T14:50:14Z", "path": "core/src/main/scala/kafka/network/SocketServer.scala", "diffHunk": "@@ -1038,6 +1093,9 @@ private[kafka] class Processor(val id: Int,\n    * Close the selector and all open connections\n    */\n   private def closeAll(): Unit = {\n+    // Clear to unblock blocked acceptors\n+    newConnections.asScala.foreach(_.close())", "originalCommit": "5565c8925ffbd79be414e6148449447eb6003500", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1OTY4Nw==", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408659687", "bodyText": "No, we don't close that one. Let me rework this.", "author": "dajac", "createdAt": "2020-04-15T08:12:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5ODIzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIwMDM1Mg==", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408200352", "bodyText": "Why? If it for the failure case, then perhaps it should be in a catch block?", "author": "rajinisivaram", "createdAt": "2020-04-14T14:52:56Z", "path": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala", "diffHunk": "@@ -337,11 +344,34 @@ class SocketServerTest {\n       externalReadyFuture.complete(null)\n       TestUtils.waitUntilTrue(() => listenerStarted(externalListener), \"External listener not started\")\n     } finally {\n+      externalReadyFuture.complete(null)", "originalCommit": "5565c8925ffbd79be414e6148449447eb6003500", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NTI0Ng==", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408665246", "bodyText": "This is not needed. It is a left over from my debugging. Let me remove it.", "author": "dajac", "createdAt": "2020-04-15T08:21:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIwMDM1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIwMjc5Ng==", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408202796", "bodyText": "Can we replace sleep with some condition?", "author": "rajinisivaram", "createdAt": "2020-04-14T14:55:41Z", "path": "core/src/test/scala/unit/kafka/network/SocketServerTest.scala", "diffHunk": "@@ -337,11 +344,34 @@ class SocketServerTest {\n       externalReadyFuture.complete(null)\n       TestUtils.waitUntilTrue(() => listenerStarted(externalListener), \"External listener not started\")\n     } finally {\n+      externalReadyFuture.complete(null)\n       executor.shutdownNow()\n       shutdownServerAndMetrics(testableServer)\n     }\n   }\n \n+  @Test\n+  def testStagedListenerShutdownWhenConnectionQueueIsFull(): Unit = {\n+    val testProps = new Properties\n+    testProps ++= props\n+    testProps.put(\"listeners\", \"EXTERNAL://localhost:0,INTERNAL://localhost:0,CONTROLLER://localhost:0\")\n+    testProps.put(\"listener.security.protocol.map\", \"EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT\")\n+    testProps.put(\"control.plane.listener.name\", \"CONTROLLER\")\n+    testProps.put(\"inter.broker.listener.name\", \"INTERNAL\")\n+    val config = KafkaConfig.fromProps(testProps)\n+    val connectionQueueSize = 1\n+    val testableServer = new TestableSocketServer(config, connectionQueueSize)\n+    testableServer.startup(startProcessingRequests = false)\n+\n+    connect(testableServer, new ListenerName(\"EXTERNAL\"), localAddr = InetAddress.getLocalHost)\n+    connect(testableServer, new ListenerName(\"EXTERNAL\"), localAddr = InetAddress.getLocalHost)\n+\n+    // Wait to let the acceptor accepts the connections\n+    Thread.sleep(100)", "originalCommit": "5565c8925ffbd79be414e6148449447eb6003500", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3OTAxMg==", "url": "https://github.com/apache/kafka/pull/8448#discussion_r408679012", "bodyText": "I have reworked this test. It still consistently fails without this patch and it does not have the sleep any more.", "author": "dajac", "createdAt": "2020-04-15T08:44:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIwMjc5Ng=="}], "type": "inlineReview"}, {"oid": "51925b7634cf994390ff3c68a76bf2cf8ff73d3f", "url": "https://github.com/apache/kafka/commit/51925b7634cf994390ff3c68a76bf2cf8ff73d3f", "message": "Address review", "committedDate": "2020-04-15T08:35:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2Mzk1OA==", "url": "https://github.com/apache/kafka/pull/8448#discussion_r409463958", "bodyText": "Should we rename this method to be initiateShutdown() to be consistent with kafka.utils.ShutdownableThread?", "author": "rajinisivaram", "createdAt": "2020-04-16T10:51:50Z", "path": "core/src/main/scala/kafka/network/SocketServer.scala", "diffHunk": "@@ -422,14 +461,23 @@ private[kafka] abstract class AbstractServerThread(connectionQuotas: ConnectionQ\n   def wakeup(): Unit\n \n   /**\n-   * Initiates a graceful shutdown by signaling to stop and waiting for the shutdown to complete\n+   * Initiates a graceful shutdown by signaling to stop\n    */\n   def shutdown(): Unit = {", "originalCommit": "51925b7634cf994390ff3c68a76bf2cf8ff73d3f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2NTI3Nw==", "url": "https://github.com/apache/kafka/pull/8448#discussion_r409465277", "bodyText": "clear() is unnecessary since we would expect the loop to clear (i.e. we shouldn't have code that clears without closing).", "author": "rajinisivaram", "createdAt": "2020-04-16T10:54:05Z", "path": "core/src/main/scala/kafka/network/SocketServer.scala", "diffHunk": "@@ -1038,6 +1094,10 @@ private[kafka] class Processor(val id: Int,\n    * Close the selector and all open connections\n    */\n   private def closeAll(): Unit = {\n+    while (!newConnections.isEmpty) {\n+      newConnections.poll().close()\n+    }\n+    newConnections.clear()", "originalCommit": "51925b7634cf994390ff3c68a76bf2cf8ff73d3f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7c8251a5af2cbc19ee8818cf4f4e8f4448020862", "url": "https://github.com/apache/kafka/commit/7c8251a5af2cbc19ee8818cf4f4e8f4448020862", "message": "Address comments", "committedDate": "2020-04-16T11:18:24Z", "type": "commit"}]}