{"pr_number": 8299, "pr_title": "KAFKA-9568: enforce rebalance if client endpoint has changed", "pr_createdAt": "2020-03-14T00:18:33Z", "pr_url": "https://github.com/apache/kafka/pull/8299", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NDM3Nw==", "url": "https://github.com/apache/kafka/pull/8299#discussion_r392544377", "bodyText": "This is unrelated to this change, I just happened to notice this test didn't seem to actually be testing anything at all", "author": "ableegoldman", "createdAt": "2020-03-14T01:27:16Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1403,17 +1404,58 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NDc3NA==", "url": "https://github.com/apache/kafka/pull/8299#discussion_r392544774", "bodyText": "We can reuse this for KIP-441 as well", "author": "ableegoldman", "createdAt": "2020-03-14T01:31:34Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/assignment/AssignorError.java", "diffHunk": "@@ -19,7 +19,7 @@\n public enum AssignorError {\n     NONE(0),\n     INCOMPLETE_SOURCE_TOPIC_METADATA(1),\n-    VERSION_PROBING(2);\n+    REBALANCE_NEEDED(2);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM4ODQ5NA==", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393388494", "bodyText": "Are we deprecating the VERSION_PROBING?", "author": "abbccdda", "createdAt": "2020-03-17T00:54:27Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java", "diffHunk": "@@ -496,9 +496,7 @@ private void runLoop() {\n         while (isRunning() || taskManager.isRebalanceInProgress()) {\n             try {\n                 runOnce();\n-                if (assignmentErrorCode.get() == AssignorError.VERSION_PROBING.code()) {\n-                    log.info(\"Version probing detected. Rejoining the consumer group to trigger a new rebalance.\");\n-\n+                if (assignmentErrorCode.get() == AssignorError.REBALANCE_NEEDED.code()) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwNTQ3NQ==", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393405475", "bodyText": "This isn't a client or externally-facing config, just something each thread sets internally if it detects version probing during onAssignment\nIf you're asking about the old log message, I moved it to where we set the error code.", "author": "ableegoldman", "createdAt": "2020-03-17T02:06:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM4ODQ5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc0ODQ3MA==", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393748470", "bodyText": "Remove only maybe?", "author": "abbccdda", "createdAt": "2020-03-17T15:06:48Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1403,17 +1404,58 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );\n \n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"newotherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createStrictMock(StreamsMetadataState.class);\n         createMockTaskManager();\n-        EasyMock.replay(taskManager);\n-        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n         configurePartitionAssignor(emptyMap());\n \n-        partitionAssignor.onAssignment(createAssignment(hostState), null);\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+\n+        EasyMock.replay(taskManager, streamsMetadataState);\n+\n+        partitionAssignor.onAssignment(createAssignment(initialHostState), null);\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        EasyMock.verify(taskManager, streamsMetadataState);\n+    }\n+\n+    @Test\n+    public void shouldTriggerRebalanceOnHostInfoChangeOnly() {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1MDAxNA==", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393750014", "bodyText": "Could we also verify streamsMetadataState?", "author": "abbccdda", "createdAt": "2020-03-17T15:09:03Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1403,17 +1404,58 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );\n \n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"newotherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createStrictMock(StreamsMetadataState.class);\n         createMockTaskManager();\n-        EasyMock.replay(taskManager);\n-        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n         configurePartitionAssignor(emptyMap());\n \n-        partitionAssignor.onAssignment(createAssignment(hostState), null);\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+\n+        EasyMock.replay(taskManager, streamsMetadataState);\n+\n+        partitionAssignor.onAssignment(createAssignment(initialHostState), null);\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        EasyMock.verify(taskManager, streamsMetadataState);\n+    }\n+\n+    @Test\n+    public void shouldTriggerRebalanceOnHostInfoChangeOnly() {\n+        final Map<HostInfo, Set<TopicPartition>> oldHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"newhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n+        createMockTaskManager();\n+        final Map<String, Object> configs = configProps();\n+        configs.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"newhost:9090\");\n+        configurePartitionAssignor(configs);\n+        EasyMock.replay(taskManager);\n+\n+        partitionAssignor.onAssignment(createAssignment(oldHostState), null);\n+\n+        assertThat(partitionAssignor.assignmentErrorCode(), is(AssignorError.REBALANCE_NEEDED.code()));\n+\n+        partitionAssignor.setAssignmentErrorCode(AssignorError.NONE.code());\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        assertThat(partitionAssignor.assignmentErrorCode(), not(AssignorError.REBALANCE_NEEDED.code()));\n \n         EasyMock.verify(taskManager);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NTQ5Mg==", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393875492", "bodyText": "streamsMetadataState isn't really part of this test, we just have to create the mock as part of the setup for the assignor configuration", "author": "ableegoldman", "createdAt": "2020-03-17T18:10:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1MDAxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1MzgxMQ==", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393753811", "bodyText": "nit: I feel we could internalize the hostInfo creation, including the null check:\nhostInfo = HostInfo.buildFromEndpoint(endPoint);", "author": "abbccdda", "createdAt": "2020-03-17T15:14:13Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -110,20 +107,7 @@ public int hashCode() {\n         ClientMetadata(final String endPoint) {\n \n             // get the host info if possible\n-            if (endPoint != null) {\n-                final String host = getHost(endPoint);\n-                final Integer port = getPort(endPoint);\n-\n-                if (host == null || port == null) {\n-                    throw new ConfigException(\n-                        String.format(\"Error parsing host address %s. Expected format host:port.\", endPoint)\n-                    );\n-                }\n-\n-                hostInfo = new HostInfo(host, port);\n-            } else {\n-                hostInfo = null;\n-            }\n+            hostInfo = endPoint != null ? HostInfo.buildFromEndpoint(endPoint) : null;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NTU4NQ==", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393875585", "bodyText": "Ack", "author": "ableegoldman", "createdAt": "2020-03-17T18:11:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1MzgxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1NTQ0NQ==", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393755445", "bodyText": "nit: space after )", "author": "abbccdda", "createdAt": "2020-03-17T15:16:27Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignor.java", "diffHunk": "@@ -1392,6 +1398,10 @@ protected void setAssignmentErrorCode(final Integer errorCode) {\n         assignmentErrorCode.set(errorCode);\n     }\n \n+    Integer assignmentErrorCode(){", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1NTczOA==", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393755738", "bodyText": "Have you also migrated the unit test?", "author": "abbccdda", "createdAt": "2020-03-17T15:16:51Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/HostInfo.java", "diffHunk": "@@ -46,6 +50,22 @@ public HostInfo(final String host,\n         this.port = port;\n     }\n \n+    /**\n+     *\n+     * @throws ConfigException if the host or port cannot be parsed from the given endpoint string\n+     */\n+    public static HostInfo buildFromEndpoint(final String endPoint) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4NTMyNA==", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393885324", "bodyText": "I don't think we need to migrate all the unit tests, since we just pass in a host+port directly (vs building it from a single string). But I'll add unit tests for the static builder", "author": "ableegoldman", "createdAt": "2020-03-17T18:27:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1NTczOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1OTU4Mg==", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393759582", "bodyText": "Combine L1421-1422 with times(2)?", "author": "abbccdda", "createdAt": "2020-03-17T15:22:05Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1403,17 +1404,58 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );\n \n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"newotherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createStrictMock(StreamsMetadataState.class);\n         createMockTaskManager();\n-        EasyMock.replay(taskManager);\n-        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n         configurePartitionAssignor(emptyMap());\n \n-        partitionAssignor.onAssignment(createAssignment(hostState), null);\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MTU5Ng==", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393891596", "bodyText": "Modified to expect the actual host state", "author": "ableegoldman", "createdAt": "2020-03-17T18:37:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1OTU4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc2MDQ4Mg==", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393760482", "bodyText": "streamsMetadataState never been used?", "author": "abbccdda", "createdAt": "2020-03-17T15:23:19Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1403,17 +1404,58 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );\n \n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"newotherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createStrictMock(StreamsMetadataState.class);\n         createMockTaskManager();\n-        EasyMock.replay(taskManager);\n-        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n         configurePartitionAssignor(emptyMap());\n \n-        partitionAssignor.onAssignment(createAssignment(hostState), null);\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+\n+        EasyMock.replay(taskManager, streamsMetadataState);\n+\n+        partitionAssignor.onAssignment(createAssignment(initialHostState), null);\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        EasyMock.verify(taskManager, streamsMetadataState);\n+    }\n+\n+    @Test\n+    public void shouldTriggerRebalanceOnHostInfoChangeOnly() {\n+        final Map<HostInfo, Set<TopicPartition>> oldHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"newhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MjUxOQ==", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393892519", "bodyText": "It's used during the assignor configuration, you have to set it up in all these tests. I just opened a PR to clean this up so once it's merged I'll rebase this PR and remove this here -- see #8306", "author": "ableegoldman", "createdAt": "2020-03-17T18:39:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc2MDQ4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc2MTM1MQ==", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393761351", "bodyText": "Could we just check if the error code is null?", "author": "abbccdda", "createdAt": "2020-03-17T15:24:31Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1403,17 +1404,58 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );\n \n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"newotherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createStrictMock(StreamsMetadataState.class);\n         createMockTaskManager();\n-        EasyMock.replay(taskManager);\n-        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n         configurePartitionAssignor(emptyMap());\n \n-        partitionAssignor.onAssignment(createAssignment(hostState), null);\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+        streamsMetadataState.onChange(EasyMock.anyObject(), EasyMock.anyObject(), EasyMock.anyObject());\n+\n+        EasyMock.replay(taskManager, streamsMetadataState);\n+\n+        partitionAssignor.onAssignment(createAssignment(initialHostState), null);\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        EasyMock.verify(taskManager, streamsMetadataState);\n+    }\n+\n+    @Test\n+    public void shouldTriggerRebalanceOnHostInfoChangeOnly() {\n+        final Map<HostInfo, Set<TopicPartition>> oldHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"newhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n+        createMockTaskManager();\n+        final Map<String, Object> configs = configProps();\n+        configs.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"newhost:9090\");\n+        configurePartitionAssignor(configs);\n+        EasyMock.replay(taskManager);\n+\n+        partitionAssignor.onAssignment(createAssignment(oldHostState), null);\n+\n+        assertThat(partitionAssignor.assignmentErrorCode(), is(AssignorError.REBALANCE_NEEDED.code()));\n+\n+        partitionAssignor.setAssignmentErrorCode(AssignorError.NONE.code());\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        assertThat(partitionAssignor.assignmentErrorCode(), not(AssignorError.REBALANCE_NEEDED.code()));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MjYyOQ==", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393892629", "bodyText": "Good point", "author": "ableegoldman", "createdAt": "2020-03-17T18:39:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc2MTM1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk3ODE2MQ==", "url": "https://github.com/apache/kafka/pull/8299#discussion_r393978161", "bodyText": "nit: Just my usual habit, I think we should get a separate test file HostInfoTest instead.", "author": "abbccdda", "createdAt": "2020-03-17T21:21:47Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1403,21 +1406,86 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );\n+\n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"newotherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n \n+        streamsMetadataState = EasyMock.createStrictMock(StreamsMetadataState.class);\n         createMockTaskManager();\n-        EasyMock.replay(taskManager);\n-        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n         configurePartitionAssignor(emptyMap());\n \n-        partitionAssignor.onAssignment(createAssignment(hostState), null);\n+        streamsMetadataState.onChange(EasyMock.eq(initialHostState), EasyMock.anyObject(), EasyMock.anyObject());\n+        streamsMetadataState.onChange(EasyMock.eq(newHostState), EasyMock.anyObject(), EasyMock.anyObject());\n+\n+        EasyMock.replay(taskManager, streamsMetadataState);\n+\n+        partitionAssignor.onAssignment(createAssignment(initialHostState), null);\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        EasyMock.verify(taskManager, streamsMetadataState);\n+    }\n+\n+    @Test\n+    public void shouldTriggerRebalanceOnHostInfoChange() {\n+        final Map<HostInfo, Set<TopicPartition>> oldHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        final Map<HostInfo, Set<TopicPartition>> newHostState = mkMap(\n+            mkEntry(new HostInfo(\"newhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+        );\n+\n+        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n+        createMockTaskManager();\n+        final Map<String, Object> configs = configProps();\n+        configs.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"newhost:9090\");\n+        configurePartitionAssignor(configs);\n+        EasyMock.replay(taskManager);\n+\n+        partitionAssignor.onAssignment(createAssignment(oldHostState), null);\n+\n+        assertThat(partitionAssignor.assignmentErrorCode(), is(AssignorError.REBALANCE_NEEDED.code()));\n+\n+        partitionAssignor.setAssignmentErrorCode(AssignorError.NONE.code());\n+        partitionAssignor.onAssignment(createAssignment(newHostState), null);\n+\n+        assertThat(partitionAssignor.assignmentErrorCode(), is(AssignorError.NONE.code()));\n \n         EasyMock.verify(taskManager);\n     }\n \n+    @Test", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNjcyOA==", "url": "https://github.com/apache/kafka/pull/8299#discussion_r394036728", "bodyText": "fair enough, moved to HostInfoTest", "author": "ableegoldman", "createdAt": "2020-03-17T23:56:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk3ODE2MQ=="}], "type": "inlineReview"}, {"oid": "8a2ec5f53f878b73e09a2b4490756f1b90044609", "url": "https://github.com/apache/kafka/commit/8a2ec5f53f878b73e09a2b4490756f1b90044609", "message": "verify that our host info was included in the returned map, if applicable, and trigger a rebalance", "committedDate": "2020-03-18T05:39:45Z", "type": "commit"}, {"oid": "4d49d449ce5c2bfe0b71ddaf3a4c419af1bb3c93", "url": "https://github.com/apache/kafka/commit/4d49d449ce5c2bfe0b71ddaf3a4c419af1bb3c93", "message": "rename VP code for generic rebalance", "committedDate": "2020-03-18T05:39:45Z", "type": "commit"}, {"oid": "63c4d83142a1f8fa1cc47713d30939e12dbc9b50", "url": "https://github.com/apache/kafka/commit/63c4d83142a1f8fa1cc47713d30939e12dbc9b50", "message": "actually, introduce new code", "committedDate": "2020-03-18T05:39:45Z", "type": "commit"}, {"oid": "48356d3b794e70c3e4f7547cc94de2f82d74741d", "url": "https://github.com/apache/kafka/commit/48356d3b794e70c3e4f7547cc94de2f82d74741d", "message": "on 3rd thought, DO reuse the vp code", "committedDate": "2020-03-18T05:39:45Z", "type": "commit"}, {"oid": "91c2a85bcca110355e12c2205b789854eb1edccb", "url": "https://github.com/apache/kafka/commit/91c2a85bcca110355e12c2205b789854eb1edccb", "message": "move method call", "committedDate": "2020-03-18T05:39:45Z", "type": "commit"}, {"oid": "60798bbc5d6ba464637e90eeb31a4a42bd05e88f", "url": "https://github.com/apache/kafka/commit/60798bbc5d6ba464637e90eeb31a4a42bd05e88f", "message": "add test", "committedDate": "2020-03-18T05:42:33Z", "type": "commit"}, {"oid": "7f9efaeebb6623a29610fc50417fb62e823afc87", "url": "https://github.com/apache/kafka/commit/7f9efaeebb6623a29610fc50417fb62e823afc87", "message": "github review", "committedDate": "2020-03-18T05:43:03Z", "type": "commit"}, {"oid": "c6b60ad0cfca4722dee04001938d3b46246662ff", "url": "https://github.com/apache/kafka/commit/c6b60ad0cfca4722dee04001938d3b46246662ff", "message": "move HostInfo tests to separate class", "committedDate": "2020-03-18T05:43:03Z", "type": "commit"}, {"oid": "c6b60ad0cfca4722dee04001938d3b46246662ff", "url": "https://github.com/apache/kafka/commit/c6b60ad0cfca4722dee04001938d3b46246662ff", "message": "move HostInfo tests to separate class", "committedDate": "2020-03-18T05:43:03Z", "type": "forcePushed"}, {"oid": "80c457cbd193c011347903439463da5e0a46b19f", "url": "https://github.com/apache/kafka/commit/80c457cbd193c011347903439463da5e0a46b19f", "message": "checkstyle & fix test", "committedDate": "2020-03-18T05:44:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3MjExNA==", "url": "https://github.com/apache/kafka/pull/8299#discussion_r394672114", "bodyText": "nit: extra spaces?", "author": "guozhangwang", "createdAt": "2020-03-18T22:20:13Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java", "diffHunk": "@@ -1281,15 +1284,54 @@ public void shouldNotLoopInfinitelyOnMissingMetadataAndShouldNotCreateRelatedTas\n \n     @Test\n     public void shouldUpdateClusterMetadataAndHostInfoOnAssignment() {\n-        final TopicPartition partitionOne = new TopicPartition(\"topic\", 1);\n-        final TopicPartition partitionTwo = new TopicPartition(\"topic\", 2);\n-        final Map<HostInfo, Set<TopicPartition>> hostState = Collections.singletonMap(\n-            new HostInfo(\"localhost\", 9090), mkSet(partitionOne, partitionTwo));\n+        final Map<HostInfo, Set<TopicPartition>> initialHostState = mkMap(\n+            mkEntry(new HostInfo(\"localhost\", 9090), mkSet(t1p0, t1p1)),\n+            mkEntry(new HostInfo(\"otherhost\", 9090), mkSet(t2p0, t2p1))\n+            );", "originalCommit": "80c457cbd193c011347903439463da5e0a46b19f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4OTc1NQ==", "url": "https://github.com/apache/kafka/pull/8299#discussion_r394689755", "bodyText": "Ack, I'll fix this in a next PR", "author": "ableegoldman", "createdAt": "2020-03-18T23:08:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3MjExNA=="}], "type": "inlineReview"}]}