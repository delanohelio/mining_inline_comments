{"pr_number": 7946, "pr_title": "MINOR: MiniKdc JVM shutdown hook fix", "pr_createdAt": "2020-01-13T14:32:27Z", "pr_url": "https://github.com/apache/kafka/pull/7946", "timeline": [{"oid": "371cb03a8efdd694bd07e5ac12d1b0051051f583", "url": "https://github.com/apache/kafka/commit/371cb03a8efdd694bd07e5ac12d1b0051051f583", "message": "MINOR: MiniKdc JVM shutdown hook fix", "committedDate": "2020-01-13T14:13:19Z", "type": "commit"}, {"oid": "a878154cf632e7e5b959244ccbbe4fecc584c0f1", "url": "https://github.com/apache/kafka/commit/a878154cf632e7e5b959244ccbbe4fecc584c0f1", "message": "Scala changes for kafka.utils.Exit", "committedDate": "2020-01-17T02:57:15Z", "type": "commit"}, {"oid": "114737b3323fce4d1d2d847757c86716677cfdcd", "url": "https://github.com/apache/kafka/commit/114737b3323fce4d1d2d847757c86716677cfdcd", "message": "Java changes for o.a.k.common.utils.Exit", "committedDate": "2020-01-17T02:59:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEwNzUxOQ==", "url": "https://github.com/apache/kafka/pull/7946#discussion_r369107519", "bodyText": "Should we use a by-name parameter instead?", "author": "ijuma", "createdAt": "2020-01-21T16:30:24Z", "path": "core/src/main/scala/kafka/utils/Exit.scala", "diffHunk": "@@ -34,20 +34,34 @@ object Exit {\n     throw new AssertionError(\"halt should not return, but it did.\")\n   }\n \n+  def addShutdownHook(runnable: Runnable, name: Option[String] = None): Unit = {", "originalCommit": "114737b3323fce4d1d2d847757c86716677cfdcd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEyMjg0OQ==", "url": "https://github.com/apache/kafka/pull/7946#discussion_r369122849", "bodyText": "I don't think so because the runnable is dereferenced once, immediately, and the code passes it to the underlying Java implementation org.apache.kafka.common.utils.Exit", "author": "rondagostino", "createdAt": "2020-01-21T16:56:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEwNzUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEzNDE3NQ==", "url": "https://github.com/apache/kafka/pull/7946#discussion_r369134175", "bodyText": "I don't understand why any of that disqualifies a by name parameter. The benefit of using a by-name is that the caller code becomes cleaner (no need for () => ...).", "author": "ijuma", "createdAt": "2020-01-21T17:16:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEwNzUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2MTAyOA==", "url": "https://github.com/apache/kafka/pull/7946#discussion_r369261028", "bodyText": "I got it working with a by-name parameter, and the below test passes.  Is this what you were thinking?  If so, I can add a new commit with the changes for a better look.\n  @Test\n  def shouldNotInvokeShutdownHookImmediately(): Unit = {\n    val value = \"value\"\n    val array:Array[Any] = Array(value)\n\n    def sideEffect(): Unit = {\n      // mutate the first element\n      array(0) = array(0).toString + array(0).toString\n    }\n    Exit.addShutdownHook(sideEffect) // by-name parameter, not invoked\n    // make sure the first element wasn't mutated\n    assertEquals(value, array(0))\n    Exit.addShutdownHook(sideEffect()) // by-name parameter, not invoked\n    // again make sure the first element wasn't mutated\n    assertEquals(value, array(0))\n    Exit.addShutdownHook(sideEffect, Some(\"message\")) // by-name parameter, not invoked\n    // make sure the first element still isn't mutated\n    assertEquals(value, array(0))\n  }", "author": "rondagostino", "createdAt": "2020-01-21T21:48:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEwNzUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2ODA2OA==", "url": "https://github.com/apache/kafka/pull/7946#discussion_r369268068", "bodyText": "@rondagostino yeah", "author": "ijuma", "createdAt": "2020-01-21T22:04:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEwNzUxOQ=="}], "type": "inlineReview"}, {"oid": "473b31b24bb6dcd89b8f4c6bd781f420f155c22b", "url": "https://github.com/apache/kafka/commit/473b31b24bb6dcd89b8f4c6bd781f420f155c22b", "message": "Use by-name parameter for cleaner Scala code", "committedDate": "2020-01-21T22:07:59Z", "type": "commit"}, {"oid": "f14afa8292b98346929689a4563e6614c0a58b83", "url": "https://github.com/apache/kafka/commit/f14afa8292b98346929689a4563e6614c0a58b83", "message": "minor fixes for clarity", "committedDate": "2020-01-21T22:20:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNDI1Ng==", "url": "https://github.com/apache/kafka/pull/7946#discussion_r369314256", "bodyText": "Scala is an expression oriented language, there are no statements. This could be simply f or shutdownHook. Also, I think name should not be optional and should be the first parameter.", "author": "ijuma", "createdAt": "2020-01-22T00:21:26Z", "path": "core/src/main/scala/kafka/utils/Exit.scala", "diffHunk": "@@ -34,8 +34,8 @@ object Exit {\n     throw new AssertionError(\"halt should not return, but it did.\")\n   }\n \n-  def addShutdownHook(code: => Unit, name: Option[String] = None): Unit = {\n-    JExit.addShutdownHook(() => code, name.orNull)\n+  def addShutdownHook(statementByName: => Unit, name: Option[String] = None): Unit = {", "originalCommit": "f14afa8292b98346929689a4563e6614c0a58b83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MDE3Mg==", "url": "https://github.com/apache/kafka/pull/7946#discussion_r369340172", "bodyText": "there are no statements\nThis could be simply f or shutdownHook\n\nI was under the impression that statements were expressions that return no value (i.e. :Unit), but I could see how this may be technically incorrect.  I'll rename it shutdownHook.\n\nI think name should not be optional and should be the first parameter.\n\nThere are places where currently a name is not given, and the Thread class auto-generates a name when it is not supplied, but I don't see a problem with making it a mandatory first parameter and supplying a thread name in the places where one is not yet supplied to the shutdown hook thread; I will do that.  I will switch the order in the Java Exit class as well (name first, Runnable second).", "author": "rondagostino", "createdAt": "2020-01-22T02:11:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNDI1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY5MjE0NQ==", "url": "https://github.com/apache/kafka/pull/7946#discussion_r369692145", "bodyText": "Yeah, Unit in Scala is actually a type and () a value. So, no statements. :)\nWith regards to names, I personally think it's very useful to give names to threads and we should require it. I think you've done that for the Scala code. Can we do it for the Java code too?", "author": "ijuma", "createdAt": "2020-01-22T17:15:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxNDI1Ng=="}], "type": "inlineReview"}, {"oid": "2dd54dfa6b3b7cd1685c6fb228205d46f335ed9b", "url": "https://github.com/apache/kafka/commit/2dd54dfa6b3b7cd1685c6fb228205d46f335ed9b", "message": "name required as first parameter, then shutdownHook", "committedDate": "2020-01-22T02:42:59Z", "type": "commit"}, {"oid": "63bd6b64dd60e151302fa4dcd9f6ad90177b4fda", "url": "https://github.com/apache/kafka/commit/63bd6b64dd60e151302fa4dcd9f6ad90177b4fda", "message": "Always provide a shutdown hook thread name", "committedDate": "2020-01-23T22:29:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3NDQ3OA==", "url": "https://github.com/apache/kafka/pull/7946#discussion_r370574478", "bodyText": "Hmm, odd formatting change. Can we revert this?", "author": "rajinisivaram", "createdAt": "2020-01-24T10:49:16Z", "path": "core/src/main/scala/kafka/tools/MirrorMaker.scala", "diffHunk": "@@ -562,14 +556,10 @@ object MirrorMaker extends Logging with KafkaMetricsGroup {\n       val customMessageHandlerClass = options.valueOf(messageHandlerOpt)\n       val messageHandlerArgs = options.valueOf(messageHandlerArgsOpt)\n       messageHandler = {\n-        if (customMessageHandlerClass != null) {\n-          if (messageHandlerArgs != null)\n-            CoreUtils.createObject[MirrorMakerMessageHandler](customMessageHandlerClass, messageHandlerArgs)\n-          else\n-            CoreUtils.createObject[MirrorMakerMessageHandler](customMessageHandlerClass)\n-        } else {\n-          defaultMirrorMakerMessageHandler\n-        }\n+        if (customMessageHandlerClass != null) if (messageHandlerArgs != null)", "originalCommit": "63bd6b64dd60e151302fa4dcd9f6ad90177b4fda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3NDQ4Mg==", "url": "https://github.com/apache/kafka/pull/7946#discussion_r370574482", "bodyText": "Hmm, odd formatting change. Can we revert this?", "author": "rajinisivaram", "createdAt": "2020-01-24T10:49:17Z", "path": "core/src/main/scala/kafka/tools/MirrorMaker.scala", "diffHunk": "@@ -562,14 +556,10 @@ object MirrorMaker extends Logging with KafkaMetricsGroup {\n       val customMessageHandlerClass = options.valueOf(messageHandlerOpt)\n       val messageHandlerArgs = options.valueOf(messageHandlerArgsOpt)\n       messageHandler = {\n-        if (customMessageHandlerClass != null) {\n-          if (messageHandlerArgs != null)\n-            CoreUtils.createObject[MirrorMakerMessageHandler](customMessageHandlerClass, messageHandlerArgs)\n-          else\n-            CoreUtils.createObject[MirrorMakerMessageHandler](customMessageHandlerClass)\n-        } else {\n-          defaultMirrorMakerMessageHandler\n-        }\n+        if (customMessageHandlerClass != null) if (messageHandlerArgs != null)", "originalCommit": "63bd6b64dd60e151302fa4dcd9f6ad90177b4fda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3NDU5NA==", "url": "https://github.com/apache/kafka/pull/7946#discussion_r370574594", "bodyText": "unrelated to the PR, perhaps revert?", "author": "rajinisivaram", "createdAt": "2020-01-24T10:49:33Z", "path": "core/src/main/scala/kafka/tools/MirrorMaker.scala", "diffHunk": "@@ -536,17 +532,15 @@ object MirrorMaker extends Logging with KafkaMetricsGroup {\n       producer = new MirrorMakerProducer(sync, producerProps)\n \n       // Create consumers\n-      val customRebalanceListener: Option[ConsumerRebalanceListener] = {\n+      val customRebalanceListener = {", "originalCommit": "63bd6b64dd60e151302fa4dcd9f6ad90177b4fda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MjczOA==", "url": "https://github.com/apache/kafka/pull/7946#discussion_r370582738", "bodyText": "Couldn't we do something like:\nJExit.setShutdownHookAdder((name, runnable) => shutdownHookAdder(name, runnable.run()))\n\ninstead of a separate  functionToShutdownHookAdder method?", "author": "rajinisivaram", "createdAt": "2020-01-24T11:10:49Z", "path": "core/src/main/scala/kafka/utils/Exit.scala", "diffHunk": "@@ -34,20 +34,34 @@ object Exit {\n     throw new AssertionError(\"halt should not return, but it did.\")\n   }\n \n+  def addShutdownHook(name: String, shutdownHook: => Unit): Unit = {\n+    JExit.addShutdownHook(name, () => shutdownHook)\n+  }\n+\n   def setExitProcedure(exitProcedure: (Int, Option[String]) => Nothing): Unit =\n     JExit.setExitProcedure(functionToProcedure(exitProcedure))\n \n   def setHaltProcedure(haltProcedure: (Int, Option[String]) => Nothing): Unit =\n     JExit.setHaltProcedure(functionToProcedure(haltProcedure))\n \n+  def setShutdownHookAdder(shutdownHookAdder: (String, => Unit) => Unit): Unit = {\n+    JExit.setShutdownHookAdder(functionToShutdownHookAdder(shutdownHookAdder))", "originalCommit": "63bd6b64dd60e151302fa4dcd9f6ad90177b4fda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MzE2Ng==", "url": "https://github.com/apache/kafka/pull/7946#discussion_r370583166", "bodyText": "Since the implementation class is MiniKdc with upper-case K, we should perhaps rename this file and class to be MiniKdcTest.", "author": "rajinisivaram", "createdAt": "2020-01-24T11:11:54Z", "path": "core/src/test/scala/kafka/security/minikdc/MinikdcTest.scala", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package kafka.security.minikdc\n+\n+import java.util.Properties\n+\n+import kafka.utils.TestUtils\n+import org.junit.Test\n+import org.junit.Assert._\n+\n+class MinikdcTest {", "originalCommit": "63bd6b64dd60e151302fa4dcd9f6ad90177b4fda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4Mzk4Mg==", "url": "https://github.com/apache/kafka/pull/7946#discussion_r370583982", "bodyText": "we could use intercept[Exception]. It will simplify the code and check that Exception was thrown.", "author": "rajinisivaram", "createdAt": "2020-01-24T11:14:13Z", "path": "core/src/test/scala/kafka/utils/ExitTest.scala", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+  * Licensed to the Apache Software Foundation (ASF) under one or more\n+  * contributor license agreements.  See the NOTICE file distributed with\n+  * this work for additional information regarding copyright ownership.\n+  * The ASF licenses this file to You under the Apache License, Version 2.0\n+  * (the \"License\"); you may not use this file except in compliance with\n+  * the License.  You may obtain a copy of the License at\n+  *\n+  *    http://www.apache.org/licenses/LICENSE-2.0\n+  *\n+  * Unless required by applicable law or agreed to in writing, software\n+  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  * See the License for the specific language governing permissions and\n+  * limitations under the License.\n+  */\n+\n+package kafka.utils\n+\n+import org.junit.Assert.assertEquals\n+import org.junit.Test\n+\n+class ExitTest {\n+  @Test\n+  def shouldHaltImmediately(): Unit = {\n+    val array:Array[Any] = Array(\"a\", \"b\")\n+    def haltProcedure(exitStatus: Int, message: Option[String]) : Nothing = {\n+      array(0) = exitStatus\n+      array(1) = message\n+      throw new Exception()\n+    }\n+    Exit.setHaltProcedure(haltProcedure)\n+    val statusCode = 0\n+    val message = Some(\"message\")\n+    try {\n+      try {", "originalCommit": "63bd6b64dd60e151302fa4dcd9f6ad90177b4fda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NDIxNA==", "url": "https://github.com/apache/kafka/pull/7946#discussion_r370584214", "bodyText": "Perhaps use a more specific Exception class since we want to catch this specific one later?", "author": "rajinisivaram", "createdAt": "2020-01-24T11:14:54Z", "path": "core/src/test/scala/kafka/utils/ExitTest.scala", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+  * Licensed to the Apache Software Foundation (ASF) under one or more\n+  * contributor license agreements.  See the NOTICE file distributed with\n+  * this work for additional information regarding copyright ownership.\n+  * The ASF licenses this file to You under the Apache License, Version 2.0\n+  * (the \"License\"); you may not use this file except in compliance with\n+  * the License.  You may obtain a copy of the License at\n+  *\n+  *    http://www.apache.org/licenses/LICENSE-2.0\n+  *\n+  * Unless required by applicable law or agreed to in writing, software\n+  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  * See the License for the specific language governing permissions and\n+  * limitations under the License.\n+  */\n+\n+package kafka.utils\n+\n+import org.junit.Assert.assertEquals\n+import org.junit.Test\n+\n+class ExitTest {\n+  @Test\n+  def shouldHaltImmediately(): Unit = {\n+    val array:Array[Any] = Array(\"a\", \"b\")\n+    def haltProcedure(exitStatus: Int, message: Option[String]) : Nothing = {\n+      array(0) = exitStatus\n+      array(1) = message\n+      throw new Exception()", "originalCommit": "63bd6b64dd60e151302fa4dcd9f6ad90177b4fda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "78a0d9ed6ee0999008c3261bc9b356c4fdef80f2", "url": "https://github.com/apache/kafka/commit/78a0d9ed6ee0999008c3261bc9b356c4fdef80f2", "message": "address review comments", "committedDate": "2020-01-24T14:38:23Z", "type": "commit"}]}