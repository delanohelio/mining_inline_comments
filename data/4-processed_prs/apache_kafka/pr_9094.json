{"pr_number": 9094, "pr_title": "KAFKA-10054: KIP-613, add TRACE-level e2e latency metrics", "pr_createdAt": "2020-07-29T01:59:58Z", "pr_url": "https://github.com/apache/kafka/pull/9094", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5MzY4OA==", "url": "https://github.com/apache/kafka/pull/9094#discussion_r461993688", "bodyText": "It's kind of a bummer that we can't just add the new TRACE level for Streams only; we have to add it to all the clients that Streams passes its configs down to. We could check for the new TRACE level and strip it off before passing the configs on to the clients, but that just seems like asking for trouble.", "author": "ableegoldman", "createdAt": "2020-07-29T02:01:53Z", "path": "clients/src/main/java/org/apache/kafka/clients/admin/AdminClientConfig.java", "diffHunk": "@@ -198,7 +198,7 @@\n                                 .define(METRICS_RECORDING_LEVEL_CONFIG,\n                                         Type.STRING,\n                                         Sensor.RecordingLevel.INFO.toString(),\n-                                        in(Sensor.RecordingLevel.INFO.toString(), Sensor.RecordingLevel.DEBUG.toString()),\n+                                        in(Sensor.RecordingLevel.INFO.toString(), Sensor.RecordingLevel.DEBUG.toString(), Sensor.RecordingLevel.TRACE.toString()),", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5Mzk4Ng==", "url": "https://github.com/apache/kafka/pull/9094#discussion_r461993986", "bodyText": "Moved the common descriptions to StreamsMetricsImpl", "author": "ableegoldman", "createdAt": "2020-07-29T02:03:03Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/TaskMetrics.java", "diffHunk": "@@ -88,13 +92,6 @@ private TaskMetrics() {}\n     private static final String NUM_BUFFERED_RECORDS_DESCRIPTION = \"The count of buffered records that are polled \" +\n         \"from consumer and not yet processed for this active task\";\n \n-    private static final String RECORD_E2E_LATENCY = \"record-e2e-latency\";", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5NDU5OQ==", "url": "https://github.com/apache/kafka/pull/9094#discussion_r461994599", "bodyText": "For KV stores, we just compare the current time with the current record's timestamp", "author": "ableegoldman", "createdAt": "2020-07-29T02:05:09Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java", "diffHunk": "@@ -227,6 +234,14 @@ protected Bytes keyBytes(final K key) {\n         return byteEntries;\n     }\n \n+    private void maybeRecordE2ELatency() {\n+        if (e2eLatencySensor.shouldRecord() && e2eLatencySensor.hasMetrics()) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5ODgxMg==", "url": "https://github.com/apache/kafka/pull/9094#discussion_r461998812", "bodyText": "For session and window stores, we also just compare the current time with the current record's timestamp when put is called. This can mean the e2e latency is measured several times on the same record, for example in a windowed aggregation.\nAt first I thought that didn't make sense, but now I think it's actually exactly what we want. First of all, it means we can actually account for the latency between calls to put within a processor. For simple point inserts this might not be a huge increase on the scale of ms, but more complex processing may benefit from seeing this granularity of information. If they don't want it, well, that's why we introduced TRACE\nSecond, while it might seem like we're over-weighting some records by measuring the e2e latency on them more than others, I'm starting to think this actually makes more sense than not: the big picture benefit/use case for the e2e latency metric is less \"how long for this record to get sent downstream\" and more \"how long for this record to be reflected in the state store/IQ results\". Given that, each record should be weighted by its actual proportion of the state store. You aren't querying individual records (in a window store), you're querying the windows themselves\nI toyed around with the idea of measuring the e2e latency relative to the window time, instead of the record timestamp, but ultimately couldn't find any sense in that.\nThoughts?", "author": "ableegoldman", "createdAt": "2020-07-29T02:20:38Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java", "diffHunk": "@@ -248,4 +253,12 @@ public void close() {\n     private Bytes keyBytes(final K key) {\n         return Bytes.wrap(serdes.rawKey(key));\n     }\n+\n+    private void maybeRecordE2ELatency() {\n+        if (e2eLatencySensor.shouldRecord() && e2eLatencySensor.hasMetrics()) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzNjQ5Mw==", "url": "https://github.com/apache/kafka/pull/9094#discussion_r462336493", "bodyText": "Your approach makes sense to me. I agree that the latency should refer to the update in the state store and not to record itself. If a record updates the state more than once then latency should be measured each time.", "author": "cadonna", "createdAt": "2020-07-29T14:20:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5ODgxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwMDk4MA==", "url": "https://github.com/apache/kafka/pull/9094#discussion_r462000980", "bodyText": "Ok there's something I'm not understanding about this test and/or the built-in metrics version. For some reason, the KV-store metrics are 0 when METRICS_0100_TO_24 is used, and 1 (as expected) when the latest version in used. I feel like this is wrong, and it should always be 1, but I need some clarify on how this config is supposed to be used\nWhat makes me pretty sure there's something actually wrong here is that for the window/session store metrics, they are actually always at 1. But I can't figure out why the KV store metrics would be any different than the others. Any ideas @cadonna ?", "author": "ableegoldman", "createdAt": "2020-07-29T02:29:20Z", "path": "streams/src/test/java/org/apache/kafka/streams/integration/MetricsIntegrationTest.java", "diffHunk": "@@ -668,6 +671,9 @@ private void checkKeyValueStoreMetrics(final String group0100To24,\n         checkMetricByName(listMetricStore, SUPPRESSION_BUFFER_SIZE_CURRENT, 0);\n         checkMetricByName(listMetricStore, SUPPRESSION_BUFFER_SIZE_AVG, 0);\n         checkMetricByName(listMetricStore, SUPPRESSION_BUFFER_SIZE_MAX, 0);\n+        checkMetricByName(listMetricStore, RECORD_E2E_LATENCY_AVG, expectedNumberofE2ELatencyMetrics);\n+        checkMetricByName(listMetricStore, RECORD_E2E_LATENCY_MIN, expectedNumberofE2ELatencyMetrics);\n+        checkMetricByName(listMetricStore, RECORD_E2E_LATENCY_MAX, expectedNumberofE2ELatencyMetrics);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3MzY5NQ==", "url": "https://github.com/apache/kafka/pull/9094#discussion_r462373695", "bodyText": "I agree with you, it should always be 1. It is the group of the metrics. See my comment in StateStoreMetrics. I am glad this test served its purpose, because I did not notice this in the unit tests!", "author": "cadonna", "createdAt": "2020-07-29T15:08:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwMDk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg4MTkzMw==", "url": "https://github.com/apache/kafka/pull/9094#discussion_r462881933", "bodyText": "Sorry, I did a mistake here. We should not give new metrics old groups. I think to fix this test you need to adapt the filter on line 618 to let all metrics with groups that relate to KV state stores pass. See checkWindowStoreAndSuppressionBufferMetrics() for an example.", "author": "cadonna", "createdAt": "2020-07-30T09:48:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwMDk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5MTI2OA==", "url": "https://github.com/apache/kafka/pull/9094#discussion_r463291268", "bodyText": "Hm, if I let additional metrics through (by allowing all STATE_STORE_LEVEL_GROUP metrics regardless of buildInMetricsVersion) then the test fails much earlier. For example\njava.lang.AssertionError: Size of metrics of type:'put-latency-avg' must be equal to 1 but it's equal to 3 \nI think I could just do the check for the e2e latency before filtering, but I'm worried there's something else wrong here. Why do we get 3 put-latency-avg metrics if we let all store metrics through in checkKeyValueStoreMetrics but not when we let all metrics through in checkWindowStoreAndSuppressionBufferMetrics?", "author": "ableegoldman", "createdAt": "2020-07-30T21:49:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwMDk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUxNDE3OQ==", "url": "https://github.com/apache/kafka/pull/9094#discussion_r463514179", "bodyText": "You can use the following to get it right without the need to do the check for the e2e latency before filtering\n.filter(m -> m.metricName().tags().containsKey(tagKey) && \n    (m.metricName().group().equals(group0100To24) || m.metricName().group().equals(STATE_STORE_LEVEL_GROUP))\n).collect(Collectors.toList());\n\n\nThe reason for the difference between the KV store and the window store is that they are used in different tests with different number of state stores.\nThe test that uses the KV stores tests three different types of KV stores, namely in-memory, rocksdb, and in-memory-lru-cache. For each of this types the old group name changes. That is also the reason we need to pass the parameter group0100To24 to checkKeyValueStoreMetrics().\nIn checkWindowStoreAndSuppressionBufferMetrics() we need to filter for four groups, because the corresponding test uses suppression and window state store. Suppression buffers had their own group in the old version. In the new version they moved into the state store group. Those groups are BUFFER_LEVEL_GROUP_0100_TO_24 and STATE_STORE_LEVEL_GROUP. The window state store had their own group in the old version, i.e., STATE_STORE_LEVEL_GROUP_ROCKSDB_WINDOW_STORE_0100_TO_24 (we are only using RocksDB-based window stores in the test). Finally, during the implementation of KIP-444, we discovered that we named a group incorrectly. That's why we filter also for group stream-rocksdb-window-metrics.\nSo to sum up, it is hard to compare the verifications for KV stores and window stores, because they are used in different tests. Sorry, I should have been clearer on that before.", "author": "cadonna", "createdAt": "2020-07-31T09:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwMDk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1MDk0MQ==", "url": "https://github.com/apache/kafka/pull/9094#discussion_r463750941", "bodyText": "I see, thanks for the explanation.  The suggestion worked", "author": "ableegoldman", "createdAt": "2020-07-31T17:56:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwMDk4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyNzA1MA==", "url": "https://github.com/apache/kafka/pull/9094#discussion_r462327050", "bodyText": "I think, you do not need to check for metrics with e2eLatencySensor.hasMetrics(). There should always be metrics within this sensor.\nhasMetrics() is used in StreamsMetricsImpl#maybeMeasureLatency() because some sensors may not contain any metrics due to the built-in metrics version. For instance, the destroy sensor exists for built-in metrics version 0.10.0-2.4 but not for latest. To avoid version checks in the record processing code, we just create an empty sensor and call record on it effectively not recording any metrics for this sensor for version latest.\nWe do not hide newly added metrics if the built-in version is set to an older version.\nSame applies to the other uses of hasMetrics() introduced in this PR.", "author": "cadonna", "createdAt": "2020-07-29T14:08:34Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java", "diffHunk": "@@ -227,6 +234,14 @@ protected Bytes keyBytes(final K key) {\n         return byteEntries;\n     }\n \n+    private void maybeRecordE2ELatency() {\n+        if (e2eLatencySensor.shouldRecord() && e2eLatencySensor.hasMetrics()) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI4MzAwNA==", "url": "https://github.com/apache/kafka/pull/9094#discussion_r463283004", "bodyText": "Ah, ok that makes sense. Thanks for clarifying", "author": "ableegoldman", "createdAt": "2020-07-30T21:31:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyNzA1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0NTgxMQ==", "url": "https://github.com/apache/kafka/pull/9094#discussion_r462345811", "bodyText": "Could you test maybeRecordE2ELatency() through process() and forward()? Although you test maybeRecordE2ELatency(), you do not test if the recording is done during processing, but that is the crucial thing, IMO.", "author": "cadonna", "createdAt": "2020-07-29T14:32:04Z", "path": "streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java", "diffHunk": "@@ -468,38 +468,44 @@ public void shouldRecordE2ELatencyOnProcessForSourceNodes() {\n     }\n \n     @Test\n-    public void shouldRecordE2ELatencyMinAndMax() {\n+    public void shouldRecordE2ELatencyAvgAndMinAndMax() {\n         time = new MockTime(0L, 0L, 0L);\n         metrics = new Metrics(new MetricConfig().recordLevel(Sensor.RecordingLevel.INFO), time);\n         task = createStatelessTask(createConfig(false, \"0\"), StreamsConfig.METRICS_LATEST);\n \n         final String sourceNode = source1.name();\n \n-        final Metric maxMetric = getProcessorMetric(\"record-e2e-latency\", \"%s-max\", task.id().toString(), sourceNode, StreamsConfig.METRICS_LATEST);\n+        final Metric avgMetric = getProcessorMetric(\"record-e2e-latency\", \"%s-avg\", task.id().toString(), sourceNode, StreamsConfig.METRICS_LATEST);\n         final Metric minMetric = getProcessorMetric(\"record-e2e-latency\", \"%s-min\", task.id().toString(), sourceNode, StreamsConfig.METRICS_LATEST);\n+        final Metric maxMetric = getProcessorMetric(\"record-e2e-latency\", \"%s-max\", task.id().toString(), sourceNode, StreamsConfig.METRICS_LATEST);\n \n+        assertThat(avgMetric.metricValue(), equalTo(Double.NaN));\n         assertThat(minMetric.metricValue(), equalTo(Double.NaN));\n         assertThat(maxMetric.metricValue(), equalTo(Double.NaN));\n \n         // e2e latency = 10\n         task.maybeRecordE2ELatency(0L, 10L, sourceNode);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxMjMxMA==", "url": "https://github.com/apache/kafka/pull/9094#discussion_r463312310", "bodyText": "Ack", "author": "ableegoldman", "createdAt": "2020-07-30T22:44:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0NTgxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3MDM0MA==", "url": "https://github.com/apache/kafka/pull/9094#discussion_r462370340", "bodyText": "You need to use the stateStoreLevelGroup() here instead of STATE_STORE_LEVEL_GROUP because the group name depends on the version and the store type.", "author": "cadonna", "createdAt": "2020-07-29T15:04:00Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/metrics/StateStoreMetrics.java", "diffHunk": "@@ -443,6 +447,25 @@ public static Sensor suppressionBufferSizeSensor(final String threadId,\n         );\n     }\n \n+    public static Sensor e2ELatencySensor(final String threadId,\n+                                          final String taskId,\n+                                          final String storeType,\n+                                          final String storeName,\n+                                          final StreamsMetricsImpl streamsMetrics) {\n+        final Sensor sensor = streamsMetrics.storeLevelSensor(threadId, taskId, storeName, RECORD_E2E_LATENCY, RecordingLevel.TRACE);\n+        final Map<String, String> tagMap = streamsMetrics.storeLevelTagMap(threadId, taskId, storeType, storeName);\n+        addAvgAndMinAndMaxToSensor(\n+            sensor,\n+            STATE_STORE_LEVEL_GROUP,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg4MjkyNg==", "url": "https://github.com/apache/kafka/pull/9094#discussion_r462882926", "bodyText": "I just realized that we should not put new metrics into old groups. Your code is fine. Do not use stateStoreLevelGroup()! Sorry for the confusion.", "author": "cadonna", "createdAt": "2020-07-30T09:50:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3MDM0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3NzMyMw==", "url": "https://github.com/apache/kafka/pull/9094#discussion_r462377323", "bodyText": "You need to make this dependent on the built-in metrics version by using instance variable storeLevelGroup.", "author": "cadonna", "createdAt": "2020-07-29T15:13:23Z", "path": "streams/src/test/java/org/apache/kafka/streams/state/internals/metrics/StateStoreMetricsTest.java", "diffHunk": "@@ -327,6 +327,38 @@ public void shouldGetExpiredWindowRecordDropSensor() {\n         assertThat(sensor, is(expectedSensor));\n     }\n \n+    @Test\n+    public void shouldGetRecordE2ELatencySensor() {\n+        final String metricName = \"record-e2e-latency\";\n+\n+        final String e2eLatencyDescription =\n+            \"end-to-end latency of a record, measuring by comparing the record timestamp with the \"\n+                + \"system time when it has been fully processed by the node\";\n+        final String descriptionOfAvg = \"The average \" + e2eLatencyDescription;\n+        final String descriptionOfMin = \"The minimum \" + e2eLatencyDescription;\n+        final String descriptionOfMax = \"The maximum \" + e2eLatencyDescription;\n+\n+        expect(streamsMetrics.storeLevelSensor(THREAD_ID, TASK_ID, STORE_NAME, metricName, RecordingLevel.TRACE))\n+            .andReturn(expectedSensor);\n+        expect(streamsMetrics.storeLevelTagMap(THREAD_ID, TASK_ID, STORE_TYPE, STORE_NAME)).andReturn(storeTagMap);\n+        StreamsMetricsImpl.addAvgAndMinAndMaxToSensor(\n+            expectedSensor,\n+            STORE_LEVEL_GROUP,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg4MzM0Nw==", "url": "https://github.com/apache/kafka/pull/9094#discussion_r462883347", "bodyText": "I just realized that we should not put new metrics into old groups. Your code is fine. Do not use instance variable storeLevelGroup! Sorry for the confusion.", "author": "cadonna", "createdAt": "2020-07-30T09:51:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3NzMyMw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzNDE4Ng==", "url": "https://github.com/apache/kafka/pull/9094#discussion_r466134186", "bodyText": "This is not introduced by this PR, but I'm wondering why we record the maybeRecordE2ELatency twice, once before the record is being processed and once when it reaches the sink node?", "author": "guozhangwang", "createdAt": "2020-08-06T04:09:51Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java", "diffHunk": "@@ -154,15 +153,15 @@ public StreamTask(final TaskId id,\n         for (final String terminalNodeName : topology.terminalNodes()) {\n             e2eLatencySensors.put(\n                 terminalNodeName,\n-                TaskMetrics.e2ELatencySensor(threadId, taskId, terminalNodeName, RecordingLevel.INFO, streamsMetrics)\n+                TaskMetrics.e2ELatencySensor(threadId, taskId, terminalNodeName, streamsMetrics)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk4MzY2Nw==", "url": "https://github.com/apache/kafka/pull/9094#discussion_r468983667", "bodyText": "NVM, I realized it is at the per-node metrics level, we just have two types of nodes (source and termination node) for each task.", "author": "guozhangwang", "createdAt": "2020-08-12T03:28:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzNDE4Ng=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MjI4NA==", "url": "https://github.com/apache/kafka/pull/9094#discussion_r469582284", "bodyText": "There's a slight hiccup with moving the INFO metrics from task to node level:\nWe get the current sensor from StreamsMetrics#taskLevelSensor which computes the fullSensorName with the #taskSensorPrefix\nIf we instead use StreamsMetrics#nodeLevelSensor then the fullSensorName is constructed from the #nodeSensorPrefix, which is obviously different. So moving this to a \u201ctrue\u201d node level sensor would be a breaking change, IIUC\nI think the best we can do is just move this from TaskMetrics to ProcessorNodeMetrics, but still leave it as a taskLevelSensor. Let me know if I'm missing something though cc @guozhangwang @cadonna", "author": "ableegoldman", "createdAt": "2020-08-12T22:29:08Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/ProcessorNodeMetrics.java", "diffHunk": "@@ -289,6 +294,25 @@ public static Sensor processorAtSourceSensorOrForwardSensor(final String threadI\n         return processAtSourceSensor(threadId, taskId, processorNodeId, streamsMetrics);\n     }\n \n+    public static Sensor e2ELatencySensor(final String threadId,\n+                                          final String taskId,\n+                                          final String processorNodeId,\n+                                          final StreamsMetricsImpl streamsMetrics) {\n+        final String sensorName = processorNodeId + \"-\" + RECORD_E2E_LATENCY;\n+        final Sensor sensor = streamsMetrics.taskLevelSensor(threadId, taskId, sensorName, RecordingLevel.INFO);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc4MTMxOQ==", "url": "https://github.com/apache/kafka/pull/9094#discussion_r469781319", "bodyText": "I do not think that using StreamsMetrics#nodeLevelSensor() is a breaking change. Sensors are not exposed publicly. They are merely containers for metrics. Metrics are exposed publicy. The full sensor name is just the key to retrieve sensors in the metrics map. It is also stored in StreamsMetricsImpl in the *LevelSensor data structures to know what sensors need to be removed from the metrics map when removeAll*LevelSensors() is called. So, the full sensor name is used for internal house keeping and hidden from the users. I think it is fine to change the fullSensorName.", "author": "cadonna", "createdAt": "2020-08-13T08:23:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MjI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEzOTk2Nw==", "url": "https://github.com/apache/kafka/pull/9094#discussion_r470139967", "bodyText": "Oh, awesome, that's what I was hoping to hear! I'll move it to use the nodeLevelSensor then", "author": "ableegoldman", "createdAt": "2020-08-13T17:52:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MjI4NA=="}], "type": "inlineReview"}, {"oid": "aaaebb18cce6c43baed320a66a13e1c139078172", "url": "https://github.com/apache/kafka/commit/aaaebb18cce6c43baed320a66a13e1c139078172", "message": "WIP", "committedDate": "2020-08-14T01:48:24Z", "type": "commit"}, {"oid": "df2b264644c7d4fe1807c5feff68c35876d4bdb0", "url": "https://github.com/apache/kafka/commit/df2b264644c7d4fe1807c5feff68c35876d4bdb0", "message": "add TRACE level metrics and avg", "committedDate": "2020-08-14T01:48:26Z", "type": "commit"}, {"oid": "c56ab0bac404f5722675a4202e46dac333a33e40", "url": "https://github.com/apache/kafka/commit/c56ab0bac404f5722675a4202e46dac333a33e40", "message": "add tests for new recording level", "committedDate": "2020-08-14T01:48:26Z", "type": "commit"}, {"oid": "6eb754aa3413a9f437ce1bd4e00f74570d93f13a", "url": "https://github.com/apache/kafka/commit/6eb754aa3413a9f437ce1bd4e00f74570d93f13a", "message": "checkstyle", "committedDate": "2020-08-14T01:48:26Z", "type": "commit"}, {"oid": "b4197f357357cb654003470983e634c2bc57cc9d", "url": "https://github.com/apache/kafka/commit/b4197f357357cb654003470983e634c2bc57cc9d", "message": "fix metrics integration test", "committedDate": "2020-08-14T01:48:26Z", "type": "commit"}, {"oid": "800a95e5806cbfbd7c36c96b2d006ef5c275c3b9", "url": "https://github.com/apache/kafka/commit/800a95e5806cbfbd7c36c96b2d006ef5c275c3b9", "message": "review comments", "committedDate": "2020-08-14T01:48:26Z", "type": "commit"}, {"oid": "cec034545c4809282bab363236bfeacdc9f8f36e", "url": "https://github.com/apache/kafka/commit/cec034545c4809282bab363236bfeacdc9f8f36e", "message": "improve StreamTaskTest", "committedDate": "2020-08-14T01:48:27Z", "type": "commit"}, {"oid": "75a0ed2b73dfc5f7a2e8ac058924105149e7285f", "url": "https://github.com/apache/kafka/commit/75a0ed2b73dfc5f7a2e8ac058924105149e7285f", "message": "fix metrics integraiton test", "committedDate": "2020-08-14T01:48:27Z", "type": "commit"}, {"oid": "18fcd37b09645a687fe1e58dae183364b0973a39", "url": "https://github.com/apache/kafka/commit/18fcd37b09645a687fe1e58dae183364b0973a39", "message": "move to ProcessorNodeMetrics", "committedDate": "2020-08-14T01:48:27Z", "type": "commit"}, {"oid": "ee543643e9b5f656032211f0f609a9a3e841e028", "url": "https://github.com/apache/kafka/commit/ee543643e9b5f656032211f0f609a9a3e841e028", "message": "use nodeLevelSensor", "committedDate": "2020-08-14T01:48:27Z", "type": "commit"}, {"oid": "5469984a49edcd4e05ea016c10d51d828d5b7930", "url": "https://github.com/apache/kafka/commit/5469984a49edcd4e05ea016c10d51d828d5b7930", "message": "remove sensors in task", "committedDate": "2020-08-14T02:03:34Z", "type": "commit"}, {"oid": "5469984a49edcd4e05ea016c10d51d828d5b7930", "url": "https://github.com/apache/kafka/commit/5469984a49edcd4e05ea016c10d51d828d5b7930", "message": "remove sensors in task", "committedDate": "2020-08-14T02:03:34Z", "type": "forcePushed"}]}