{"pr_number": 8603, "pr_title": "MINOR: Fix ProcessorContext JavaDocs", "pr_createdAt": "2020-05-02T20:49:54Z", "pr_url": "https://github.com/apache/kafka/pull/8603", "timeline": [{"oid": "7b80c61bf07ff940f222ce7c2da353f2540ecf9c", "url": "https://github.com/apache/kafka/commit/7b80c61bf07ff940f222ce7c2da353f2540ecf9c", "message": "MINOR: Fix ProcessorContext JavaDocs", "committedDate": "2020-05-02T20:48:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM3NzM2MQ==", "url": "https://github.com/apache/kafka/pull/8603#discussion_r420377361", "bodyText": "I just took another look at the definition of streamTime, and it actually looks like it might be computed wrongly.\nThe way it works is that the \"stream time\" for a task is computed most of the time in org.apache.kafka.streams.processor.internals.PartitionGroup#nextRecord, i.e., it's the max timestamp of any record polled from the PartitionGroup.\nHowever, when we commit, we commit the \"partition time\" for each TopicPartition, which is set when we move a record into the head position for that queue. During restoration, we read these committed timestamps for each TopicPartition, and we (incorrectly) set the \"stream time\" to be the maximum over the \"partition time\" of each partition in the PartitionGroup (aka Task).\nThis is incorrect in two ways:\n\nit should be the minimum, not the maximum (since we would choose the record with the minimum timestamp to process next)\nthe timestamp of the head enqueued record (partition time) is not the timestamp of the last dequeued record (stream time).\n\nI'll file a Jira ticket capturing all this. In the mean time, I'd suggest that we just update the docs to reflect the correct definition of \"stream time\": which is defined as the largest timestamp of any record processed by the task. Then, we can fix the code to make this true all the time. Currently, it's only true in steady state, not immediately after restoration.", "author": "vvcephei", "createdAt": "2020-05-05T20:12:31Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/ProcessorContext.java", "diffHunk": "@@ -209,49 +211,52 @@ Cancellable schedule(final Duration interval,\n     <K1 extends K, V1 extends V> void forward(final K1 key, final V1 value, final String childName);\n \n     /**\n-     * Requests a commit\n+     * Requests a commit.\n      */\n     void commit();\n \n     /**\n      * Returns the topic name of the current input record; could be null if it is not\n-     * available (for example, if this method is invoked from the punctuate call)\n+     * available (for example, if this method is invoked from the punctuate call).\n      *\n      * @return the topic name\n      */\n     String topic();\n \n     /**\n      * Returns the partition id of the current input record; could be -1 if it is not\n-     * available (for example, if this method is invoked from the punctuate call)\n+     * available (for example, if this method is invoked from the punctuate call).\n      *\n      * @return the partition id\n      */\n     int partition();\n \n     /**\n      * Returns the offset of the current input record; could be -1 if it is not\n-     * available (for example, if this method is invoked from the punctuate call)\n+     * available (for example, if this method is invoked from the punctuate call).\n      *\n      * @return the offset\n      */\n     long offset();\n \n     /**\n-     * Returns the headers of the current input record; could be null if it is not available\n+     * Returns the headers of the current input record; could be null if it is not\n+     * available (for example, if this method is invoked from the punctuate call).\n+     *\n      * @return the headers\n      */\n     Headers headers();\n \n     /**\n      * Returns the current timestamp.\n      *\n-     * If it is triggered while processing a record streamed from the source processor, timestamp is defined as the timestamp of the current input record; the timestamp is extracted from\n+     * <p> If it is triggered while processing a record streamed from the source processor,\n+     * timestamp is defined as the timestamp of the current input record; the timestamp is extracted from\n      * {@link org.apache.kafka.clients.consumer.ConsumerRecord ConsumerRecord} by {@link TimestampExtractor}.\n      *\n-     * If it is triggered while processing a record generated not from the source processor (for example,\n+     * <p> If it is triggered while processing a record generated not from the source processor (for example,\n      * if this method is invoked from the punctuate call), timestamp is defined as the current\n-     * task's stream time, which is defined as the smallest among all its input stream partition timestamps.\n+     * task's stream time, which is defined as the largest among all its input stream partition timestamps.", "originalCommit": "7b80c61bf07ff940f222ce7c2da353f2540ecf9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2MzUwOA==", "url": "https://github.com/apache/kafka/pull/8603#discussion_r420463508", "bodyText": "Sound like a bug :)\nBut it seems to be a one line fix that I can piggy-back on this PR. We advance the \"partition time\" too early. If we advance it when the return the record for processing, all should be fixed? Partition time should not be the head-record timestamp but the past processed record of the partition.", "author": "mjsax", "createdAt": "2020-05-05T23:18:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM3NzM2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1NjQyNA==", "url": "https://github.com/apache/kafka/pull/8603#discussion_r423356424", "bodyText": "Ah, perfect! This is much simpler than what I was thinking. Thanks.", "author": "vvcephei", "createdAt": "2020-05-11T22:29:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM3NzM2MQ=="}], "type": "inlineReview"}, {"oid": "60eabac9bb93b22b7cc5e47e58e92f4ff2e52655", "url": "https://github.com/apache/kafka/commit/60eabac9bb93b22b7cc5e47e58e92f4ff2e52655", "message": "Github comments", "committedDate": "2020-05-06T00:00:07Z", "type": "commit"}]}