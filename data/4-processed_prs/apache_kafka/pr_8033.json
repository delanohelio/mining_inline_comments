{"pr_number": 8033, "pr_title": "KAFKA-9487: Follow-up PR of Kafka-9445", "pr_createdAt": "2020-02-02T06:56:45Z", "pr_url": "https://github.com/apache/kafka/pull/8033", "timeline": [{"oid": "c438c5dfc451cfdf6ed2d452c8142e596bc83321", "url": "https://github.com/apache/kafka/commit/c438c5dfc451cfdf6ed2d452c8142e596bc83321", "message": "Addressing code review comments of 9445", "committedDate": "2020-02-02T06:54:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwMDA2NA==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374300064", "bodyText": "cosmetic: Represents all the query options that a user can provide to control the kind of stores we would like to fetch ?", "author": "vinothchandar", "createdAt": "2020-02-03T19:39:09Z", "path": "streams/src/main/java/org/apache/kafka/streams/StoreQueryParams.java", "diffHunk": "@@ -21,12 +21,11 @@\n import java.util.Objects;\n \n /**\n- * Represents all the query options that a user can provide to state what kind of stores it is expecting.\n+ * Represents all the query options that a user can provide to state what kind of stores we are expecting.", "originalCommit": "c438c5dfc451cfdf6ed2d452c8142e596bc83321", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgxMDA3Ng==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374810076", "bodyText": "Done.", "author": "brary", "createdAt": "2020-02-04T17:19:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwMDA2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwMDkxMA==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374300910", "bodyText": "Cosmetic:  Options could indicate - whether we want stale stores to be included (or) we want to filter for only stores belonging to a partition.", "author": "vinothchandar", "createdAt": "2020-02-03T19:41:00Z", "path": "streams/src/main/java/org/apache/kafka/streams/StoreQueryParams.java", "diffHunk": "@@ -21,12 +21,11 @@\n import java.util.Objects;\n \n /**\n- * Represents all the query options that a user can provide to state what kind of stores it is expecting.\n+ * Represents all the query options that a user can provide to state what kind of stores we are expecting.\n  * The options would be whether a user would want to enable/disable stale stores", "originalCommit": "c438c5dfc451cfdf6ed2d452c8142e596bc83321", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgxMDAzOA==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374810038", "bodyText": "Done.", "author": "brary", "createdAt": "2020-02-04T17:19:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwMDkxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwMTQ2NQ==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374301465", "bodyText": "Could we use a different sentinel than null for the partition field?. Does an Optional make sense?", "author": "vinothchandar", "createdAt": "2020-02-03T19:42:08Z", "path": "streams/src/main/java/org/apache/kafka/streams/StoreQueryParams.java", "diffHunk": "@@ -35,46 +34,42 @@\n     private final String storeName;\n     private final QueryableStoreType<T> queryableStoreType;\n \n-    private StoreQueryParams(final String storeName, final QueryableStoreType<T>  queryableStoreType) {\n+    private StoreQueryParams(final String storeName, final QueryableStoreType<T>  queryableStoreType, final Integer partition, final boolean staleStores) {\n         this.storeName = storeName;\n         this.queryableStoreType = queryableStoreType;\n+        this.partition = partition;\n+        this.staleStores = staleStores;\n     }\n \n     public static <T> StoreQueryParams<T> fromNameAndType(final String storeName,\n                                                           final QueryableStoreType<T>  queryableStoreType) {\n-        return new StoreQueryParams<T>(storeName, queryableStoreType);\n+        return new StoreQueryParams<T>(storeName, queryableStoreType, null, false);", "originalCommit": "c438c5dfc451cfdf6ed2d452c8142e596bc83321", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgxMTI1OQ==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374811259", "bodyText": "Actually we had a long discussion on keeping this null and adding it in Java doc that null means all partitions. Do you think this is important to start a discussion on the thread again? :)", "author": "brary", "createdAt": "2020-02-04T17:22:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwMTQ2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMyNTIzNg==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r375325236", "bodyText": "dont worry about it :) .. Happy to budge on stylistic things and leave it to the committers' call", "author": "vinothchandar", "createdAt": "2020-02-05T15:28:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwMTQ2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwMjA5MQ==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374302091", "bodyText": "nit: we need the * before @return right?", "author": "vinothchandar", "createdAt": "2020-02-03T19:43:28Z", "path": "streams/src/main/java/org/apache/kafka/streams/StoreQueryParams.java", "diffHunk": "@@ -35,46 +34,42 @@\n     private final String storeName;\n     private final QueryableStoreType<T> queryableStoreType;\n \n-    private StoreQueryParams(final String storeName, final QueryableStoreType<T>  queryableStoreType) {\n+    private StoreQueryParams(final String storeName, final QueryableStoreType<T>  queryableStoreType, final Integer partition, final boolean staleStores) {\n         this.storeName = storeName;\n         this.queryableStoreType = queryableStoreType;\n+        this.partition = partition;\n+        this.staleStores = staleStores;\n     }\n \n     public static <T> StoreQueryParams<T> fromNameAndType(final String storeName,\n                                                           final QueryableStoreType<T>  queryableStoreType) {\n-        return new StoreQueryParams<T>(storeName, queryableStoreType);\n+        return new StoreQueryParams<T>(storeName, queryableStoreType, null, false);\n     }\n \n     /**\n      * Set a specific partition that should be queried exclusively.\n      *\n      * @param partition   The specific integer partition to be fetched from the stores list by using {@link StoreQueryParams}.\n      *\n-     * @return String storeName\n+     @return StoreQueryParams a new {@code StoreQueryParams} instance configured with the specified partition", "originalCommit": "c438c5dfc451cfdf6ed2d452c8142e596bc83321", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgxMDAwMA==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374810000", "bodyText": "Done.", "author": "brary", "createdAt": "2020-02-04T17:19:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwMjA5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwMzQ5NA==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374303494", "bodyText": "any reason we can't use an empty list for the sentinel?", "author": "vinothchandar", "createdAt": "2020-02-03T19:46:14Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1148,6 +1148,17 @@ private static Pattern buildPattern(final Collection<String> sourceTopics,\n         return results;\n     }\n \n+    public List<String> sourceTopicsForStore(final String storeName) {\n+        final List<String> results = new ArrayList<>();\n+        for (final Map.Entry<String, Set<String>> entry : stateStoreNameToSourceTopics.entrySet()) {\n+            if (entry.getKey().equals(storeName)) {\n+                results.addAll(maybeDecorateInternalSourceTopics(entry.getValue()));\n+                return results;\n+            }\n+        }\n+        return null;", "originalCommit": "c438c5dfc451cfdf6ed2d452c8142e596bc83321", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwODMxOA==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374808318", "bodyText": "Done.", "author": "brary", "createdAt": "2020-02-04T17:16:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwMzQ5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwNjYyNQ==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374306625", "bodyText": "can't we just lookup the map? why iterate over if we are going to compare the key anyway?", "author": "vinothchandar", "createdAt": "2020-02-03T19:52:32Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1148,6 +1148,17 @@ private static Pattern buildPattern(final Collection<String> sourceTopics,\n         return results;\n     }\n \n+    public List<String> sourceTopicsForStore(final String storeName) {\n+        final List<String> results = new ArrayList<>();\n+        for (final Map.Entry<String, Set<String>> entry : stateStoreNameToSourceTopics.entrySet()) {\n+            if (entry.getKey().equals(storeName)) {", "originalCommit": "c438c5dfc451cfdf6ed2d452c8142e596bc83321", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwODI4MQ==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374808281", "bodyText": "I think the return type of stateStoreNameToSourceTopics is a set and we wanted to return a list, so I had to loop and add it to list.", "author": "brary", "createdAt": "2020-02-04T17:16:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwNjYyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyNTU3Mw==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374825573", "bodyText": "I'm also a little confused. Would this not be the same?\nresults.addAll(maybeDecorateInternalSourceTopics(stateStoreNameToSourceTopics.get(storeName))\n\nI.e., converting the returned set to a list doesn't seem to require iterating over the whole map just to look for one key.\nOn a different note, it doesn't seem like we really need a List in particular. We could just relax it to Collection, and then you wouldn't have to convert the set to a list. But that's not a big issue to me.", "author": "vvcephei", "createdAt": "2020-02-04T17:50:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwNjYyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwMDE2Ng==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r375100166", "bodyText": "Makes sense, Changed to Collection and removed the loop.", "author": "brary", "createdAt": "2020-02-05T07:46:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwNjYyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwNjk1NQ==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374306955", "bodyText": "a side note: Should we also consider the map stateStoreNameToSourceRegex here?", "author": "vinothchandar", "createdAt": "2020-02-03T19:53:13Z", "path": "streams/src/main/java/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.java", "diffHunk": "@@ -1148,6 +1148,17 @@ private static Pattern buildPattern(final Collection<String> sourceTopics,\n         return results;\n     }\n \n+    public List<String> sourceTopicsForStore(final String storeName) {", "originalCommit": "c438c5dfc451cfdf6ed2d452c8142e596bc83321", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwOTkyNg==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374809926", "bodyText": "I am not sure, do you think it will identify more topic groups? At the end of the day we are identifying a topic groupId to which a store belongs to.\nOn a side note, if we do want to add stateStoreNameToSourceRegex along with stateStoreNameToSourceTopics, then we can probably return a set instead of list in this function and iterate over both of above one by one.", "author": "brary", "createdAt": "2020-02-04T17:19:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwNjk1NQ=="}], "type": "inlineReview"}, {"oid": "decbe530f2a9b914a4e9461d1df75d560085d083", "url": "https://github.com/apache/kafka/commit/decbe530f2a9b914a4e9461d1df75d560085d083", "message": "Addressing code review comments", "committedDate": "2020-02-04T17:22:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgxNzg5Nw==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374817897", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param storeQueryParams   the parameteres used to fetch a type of queryable store\n          \n          \n            \n                 * @param storeQueryParams   the parameters used to fetch a queryable store", "author": "vvcephei", "createdAt": "2020-02-04T17:34:30Z", "path": "streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java", "diffHunk": "@@ -1171,11 +1171,9 @@ public void cleanUp() {\n \n     /**\n      * Get a facade wrapping the local {@link StateStore} instances with the provided {@link StoreQueryParams}.\n-     * StoreQueryParams need required parameters to be set, which are {@code storeName} and if\n-     * type is accepted by the provided {@link QueryableStoreType#accepts(StateStore) queryableStoreType}.\n      * The returned object can be used to query the {@link StateStore} instances.\n      *\n-     * @param storeQueryParams   to set the optional parameters to fetch type of stores user wants to fetch when a key is queried\n+     * @param storeQueryParams   the parameteres used to fetch a type of queryable store", "originalCommit": "decbe530f2a9b914a4e9461d1df75d560085d083", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwMDA1NA==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r375100054", "bodyText": "Added this my commit for addressing the other comments.", "author": "brary", "createdAt": "2020-02-05T07:46:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgxNzg5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyMDQyOQ==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r374820429", "bodyText": "This comment can easily become outdated as the class evolved. Better to keep it high level and defer to the setters' javadocs for a description of the available operations.\nEg:\n{@code StoreQueryParams} allows you to pass a variety of parameters when fetching a store for interactive query.", "author": "vvcephei", "createdAt": "2020-02-04T17:39:41Z", "path": "streams/src/main/java/org/apache/kafka/streams/StoreQueryParams.java", "diffHunk": "@@ -21,12 +21,11 @@\n import java.util.Objects;\n \n /**\n- * Represents all the query options that a user can provide to state what kind of stores it is expecting.\n- * The options would be whether a user would want to enable/disable stale stores\n- * or whether it knows the list of partitions that it specifically wants to fetch.\n- * If this information is not provided the default behavior is to fetch the stores for all the partitions\n+ * Represents all the query options that a user can provide to control the kind of stores we would like to fetch.\n+ * The options could indicate - whether we want stale stores to be included (or)\n+ * we want to filter for only stores belonging to a partition.\n+ * If no specific partition is specified the default behavior is to fetch the stores for all the partitions\n  * available on that instance for that particular store name.", "originalCommit": "decbe530f2a9b914a4e9461d1df75d560085d083", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEwMDAyNA==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r375100024", "bodyText": "Done.", "author": "brary", "createdAt": "2020-02-05T07:45:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyMDQyOQ=="}], "type": "inlineReview"}, {"oid": "7ba542355ca70cb1d21d22ba994daa4f805bf478", "url": "https://github.com/apache/kafka/commit/7ba542355ca70cb1d21d22ba994daa4f805bf478", "message": "Addressing code review comments", "committedDate": "2020-02-05T08:06:03Z", "type": "commit"}, {"oid": "da685d9e7edb286398383bcc153e861c6fa15a00", "url": "https://github.com/apache/kafka/commit/da685d9e7edb286398383bcc153e861c6fa15a00", "message": "Merge branch 'trunk' into navinderbrar-Followup-KAFKA-9445", "committedDate": "2020-02-05T08:14:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUxMTA4Mg==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r375511082", "bodyText": "Nit: No need to do method calls, we can just access the variables directly.  Also, try to avoid unnecessary this. prefix", "author": "mjsax", "createdAt": "2020-02-05T21:14:17Z", "path": "streams/src/main/java/org/apache/kafka/streams/StoreQueryParams.java", "diffHunk": "@@ -35,46 +30,42 @@\n     private final String storeName;\n     private final QueryableStoreType<T> queryableStoreType;\n \n-    private StoreQueryParams(final String storeName, final QueryableStoreType<T>  queryableStoreType) {\n+    private StoreQueryParams(final String storeName, final QueryableStoreType<T>  queryableStoreType, final Integer partition, final boolean staleStores) {\n         this.storeName = storeName;\n         this.queryableStoreType = queryableStoreType;\n+        this.partition = partition;\n+        this.staleStores = staleStores;\n     }\n \n     public static <T> StoreQueryParams<T> fromNameAndType(final String storeName,\n                                                           final QueryableStoreType<T>  queryableStoreType) {\n-        return new StoreQueryParams<T>(storeName, queryableStoreType);\n+        return new StoreQueryParams<T>(storeName, queryableStoreType, null, false);\n     }\n \n     /**\n      * Set a specific partition that should be queried exclusively.\n      *\n      * @param partition   The specific integer partition to be fetched from the stores list by using {@link StoreQueryParams}.\n      *\n-     * @return String storeName\n+     * @return StoreQueryParams a new {@code StoreQueryParams} instance configured with the specified partition\n      */\n     public StoreQueryParams<T> withPartition(final Integer partition) {\n-        final StoreQueryParams<T> storeQueryParams = StoreQueryParams.fromNameAndType(this.storeName(), this.queryableStoreType());\n-        storeQueryParams.partition = partition;\n-        storeQueryParams.staleStores = this.staleStores;\n-        return storeQueryParams;\n+        return new StoreQueryParams<T>(this.storeName(), this.queryableStoreType(), partition, this.staleStores);", "originalCommit": "da685d9e7edb286398383bcc153e861c6fa15a00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY1MTY0Mw==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r375651643", "bodyText": "Done.", "author": "brary", "createdAt": "2020-02-06T05:52:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUxMTA4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUxMTE5MA==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r375511190", "bodyText": "as above.", "author": "mjsax", "createdAt": "2020-02-05T21:14:35Z", "path": "streams/src/main/java/org/apache/kafka/streams/StoreQueryParams.java", "diffHunk": "@@ -35,46 +30,42 @@\n     private final String storeName;\n     private final QueryableStoreType<T> queryableStoreType;\n \n-    private StoreQueryParams(final String storeName, final QueryableStoreType<T>  queryableStoreType) {\n+    private StoreQueryParams(final String storeName, final QueryableStoreType<T>  queryableStoreType, final Integer partition, final boolean staleStores) {\n         this.storeName = storeName;\n         this.queryableStoreType = queryableStoreType;\n+        this.partition = partition;\n+        this.staleStores = staleStores;\n     }\n \n     public static <T> StoreQueryParams<T> fromNameAndType(final String storeName,\n                                                           final QueryableStoreType<T>  queryableStoreType) {\n-        return new StoreQueryParams<T>(storeName, queryableStoreType);\n+        return new StoreQueryParams<T>(storeName, queryableStoreType, null, false);\n     }\n \n     /**\n      * Set a specific partition that should be queried exclusively.\n      *\n      * @param partition   The specific integer partition to be fetched from the stores list by using {@link StoreQueryParams}.\n      *\n-     * @return String storeName\n+     * @return StoreQueryParams a new {@code StoreQueryParams} instance configured with the specified partition\n      */\n     public StoreQueryParams<T> withPartition(final Integer partition) {\n-        final StoreQueryParams<T> storeQueryParams = StoreQueryParams.fromNameAndType(this.storeName(), this.queryableStoreType());\n-        storeQueryParams.partition = partition;\n-        storeQueryParams.staleStores = this.staleStores;\n-        return storeQueryParams;\n+        return new StoreQueryParams<T>(this.storeName(), this.queryableStoreType(), partition, this.staleStores);\n     }\n \n     /**\n      * Enable querying of stale state stores, i.e., allow to query active tasks during restore as well as standby tasks.\n      *\n-     * @return String storeName\n+     * @return StoreQueryParams a new {@code StoreQueryParams} instance configured with serving from stale stores enabled\n      */\n     public StoreQueryParams<T> enableStaleStores() {\n-        final StoreQueryParams<T> storeQueryParams = StoreQueryParams.fromNameAndType(this.storeName(), this.queryableStoreType());\n-        storeQueryParams.partition = this.partition;\n-        storeQueryParams.staleStores = true;\n-        return storeQueryParams;\n+        return new StoreQueryParams<T>(this.storeName(), this.queryableStoreType(), this.partition, true);", "originalCommit": "da685d9e7edb286398383bcc153e861c6fa15a00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY1MTY3Mg==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r375651672", "bodyText": "Done.", "author": "brary", "createdAt": "2020-02-06T05:52:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUxMTE5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUxNDE2OQ==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r375514169", "bodyText": "I cannot comment below, but I think we should still simplify the code when the user specifies a partition. I left a comment on the original PR about it (https://github.com/apache/kafka/pull/7984/files#r375513526). Let me know if this comment makes sense.", "author": "mjsax", "createdAt": "2020-02-05T21:21:13Z", "path": "streams/src/main/java/org/apache/kafka/streams/state/internals/StreamThreadStateStoreProvider.java", "diffHunk": "@@ -34,6 +34,8 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.Collection;\n+import java.util.stream.Collectors;", "originalCommit": "da685d9e7edb286398383bcc153e861c6fa15a00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcwNTcxNA==", "url": "https://github.com/apache/kafka/pull/8033#discussion_r375705714", "bodyText": "Thanks. It makes sense, I have made the suggested change.", "author": "brary", "createdAt": "2020-02-06T08:52:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUxNDE2OQ=="}], "type": "inlineReview"}, {"oid": "0f115ea90ec3fb49f0ffa02f2df2932780e7e5e0", "url": "https://github.com/apache/kafka/commit/0f115ea90ec3fb49f0ffa02f2df2932780e7e5e0", "message": "Changing StoreQueryParams to StoreQueryParameters", "committedDate": "2020-02-06T07:02:56Z", "type": "commit"}, {"oid": "8801c608eced5331eca213227c45d5da7960062a", "url": "https://github.com/apache/kafka/commit/8801c608eced5331eca213227c45d5da7960062a", "message": "Resolving merge conflicts", "committedDate": "2020-02-06T08:49:10Z", "type": "commit"}]}