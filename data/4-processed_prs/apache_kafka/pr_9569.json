{"pr_number": 9569, "pr_title": "KAFKA-10687: make ProduceRespone only returns INVALID_PRODUCER_EPOCH", "pr_createdAt": "2020-11-06T03:51:11Z", "pr_url": "https://github.com/apache/kafka/pull/9569", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU4MjE2Mg==", "url": "https://github.com/apache/kafka/pull/9569#discussion_r518582162", "bodyText": "\"..always return INVALID_PRODUCER_EPOCH as the partitioner leader ..\"", "author": "edenhill", "createdAt": "2020-11-06T08:05:16Z", "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -609,6 +609,12 @@ class KafkaApis(val requestChannel: RequestChannel,\n \n       mergedResponseStatus.forKeyValue { (topicPartition, status) =>\n         if (status.error != Errors.NONE) {\n+          if (status.error == Errors.PRODUCER_FENCED) {\n+            // Produce request should always return the INVALID_PRODUCER_EPOCH to as", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "119c883285b55d34ee43e2bf2e348e90cfc356a5", "url": "https://github.com/apache/kafka/commit/119c883285b55d34ee43e2bf2e348e90cfc356a5", "message": "make ProduceRespone only returns INVALID_PRODUCER_EPOCH", "committedDate": "2020-11-10T21:52:11Z", "type": "commit"}, {"oid": "06624823ae31cb8f291fe0a9d846178a7aabf39d", "url": "https://github.com/apache/kafka/commit/06624823ae31cb8f291fe0a9d846178a7aabf39d", "message": "comment", "committedDate": "2020-11-10T21:52:11Z", "type": "commit"}, {"oid": "7b2a8c3b9c89514ddcc2dd0c56292106ffac9c95", "url": "https://github.com/apache/kafka/commit/7b2a8c3b9c89514ddcc2dd0c56292106ffac9c95", "message": "remove INVALID_PRODUCER_EPOCH retry", "committedDate": "2020-11-10T21:52:11Z", "type": "commit"}, {"oid": "78b170734627a753ecd03cbbd6896b449b647352", "url": "https://github.com/apache/kafka/commit/78b170734627a753ecd03cbbd6896b449b647352", "message": "test fixes", "committedDate": "2020-11-10T22:00:03Z", "type": "commit"}, {"oid": "78b170734627a753ecd03cbbd6896b449b647352", "url": "https://github.com/apache/kafka/commit/78b170734627a753ecd03cbbd6896b449b647352", "message": "test fixes", "committedDate": "2020-11-10T22:00:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkyNDY0OQ==", "url": "https://github.com/apache/kafka/pull/9569#discussion_r520924649", "bodyText": "I feel this is not the right place to fix on broker: if we think produce request should never see a fenced producer exception, we should just modify ProducerStateManager#checkProducerEpoch to throw InvalidProducerEpochException instead.", "author": "guozhangwang", "createdAt": "2020-11-10T22:50:54Z", "path": "core/src/main/scala/kafka/server/KafkaApis.scala", "diffHunk": "@@ -609,6 +609,12 @@ class KafkaApis(val requestChannel: RequestChannel,\n \n       mergedResponseStatus.forKeyValue { (topicPartition, status) =>\n         if (status.error != Errors.NONE) {\n+          if (status.error == Errors.PRODUCER_FENCED) {", "originalCommit": "78b170734627a753ecd03cbbd6896b449b647352", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkyNzQ4MQ==", "url": "https://github.com/apache/kafka/pull/9569#discussion_r520927481", "bodyText": "If we are going to expose this exception, then 1) it cannot be in the internals package, 2) public API javadocs should include this exception, also explains what users should do when getting this error. 3) KIP-588 should include this since it is now a publicly throwable exception.", "author": "guozhangwang", "createdAt": "2020-11-10T22:57:31Z", "path": "clients/src/main/java/org/apache/kafka/common/internals/InvalidProducerEpochException.java", "diffHunk": "@@ -16,14 +16,15 @@\n  */\n package org.apache.kafka.common.internals;\n \n-import org.apache.kafka.common.errors.RetriableException;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.common.errors.ApiException;\n \n /**\n  * This exception indicates that the produce request sent to the partition leader\n- * contains a non-matching producer epoch. When encountering this exception, the ongoing transaction\n- * will be aborted and can be retried.\n+ * contains a non-matching producer epoch. When encountering this exception, user should abort the ongoing transaction\n+ * by calling {@link KafkaProducer#abortTransaction()} to reinitialize the producer state.\n  */\n-public class InvalidProducerEpochException extends RetriableException {", "originalCommit": "78b170734627a753ecd03cbbd6896b449b647352", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1d827ea6d65804339d37f5baf1dc7fe82268388f", "url": "https://github.com/apache/kafka/commit/1d827ea6d65804339d37f5baf1dc7fe82268388f", "message": "make InvalidProducerEpoch public", "committedDate": "2020-11-11T05:00:12Z", "type": "commit"}, {"oid": "1d827ea6d65804339d37f5baf1dc7fe82268388f", "url": "https://github.com/apache/kafka/commit/1d827ea6d65804339d37f5baf1dc7fe82268388f", "message": "make InvalidProducerEpoch public", "committedDate": "2020-11-11T05:00:12Z", "type": "forcePushed"}, {"oid": "833a0b0dbda0ce67d69d407c7300935a3e9e9255", "url": "https://github.com/apache/kafka/commit/833a0b0dbda0ce67d69d407c7300935a3e9e9255", "message": "test fix", "committedDate": "2020-11-13T00:45:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY3NTUxOA==", "url": "https://github.com/apache/kafka/pull/9569#discussion_r522675518", "bodyText": "For both these two functions: are we certain that InvalidProducerEpochException could be thrown directly from the call? For sendOffsetsToTransaction we are sending a commit-offset request to the consumer coordinator which should not get this error code, and for both AddPartitionsToTxn and EndTxn responses we should only have INVALID_PRODUCER_EPOCH error for version <= 1, right?\nEven if they are thrown, then we should add them in the throws as well similar to ProducerFencedException, right?", "author": "guozhangwang", "createdAt": "2020-11-13T06:16:34Z", "path": "clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java", "diffHunk": "@@ -713,6 +715,8 @@ public void sendOffsetsToTransaction(Map<TopicPartition, OffsetAndMetadata> offs\n      *         does not support transactions (i.e. if its version is lower than 0.11.0.0)\n      * @throws org.apache.kafka.common.errors.AuthorizationException fatal error indicating that the configured\n      *         transactional.id is not authorized. See the exception for more details\n+     * @throws org.apache.kafka.common.errors.InvalidProducerEpochException if the producer has attempted to produce with an old epoch", "originalCommit": "833a0b0dbda0ce67d69d407c7300935a3e9e9255", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEwMjYwNA==", "url": "https://github.com/apache/kafka/pull/9569#discussion_r523102604", "bodyText": "Yes, they would throw from TransactionManager#maybeFailWithError as user is not required to handle the send callback. As for throws block, I feel it's not necessary since we do have other fatal exceptions only declared in comment, which I believe is intentional to make the function signature concise.", "author": "abbccdda", "createdAt": "2020-11-13T17:20:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY3NTUxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzMjQ1Mg==", "url": "https://github.com/apache/kafka/pull/9569#discussion_r523232452", "bodyText": "In maybeFailWithError we only throw ProducerFenced directly if the lastError is ProducerFenced, otherwise we throw KafkaException which includes the lastError as its cause. That's also why we only throws ProducerFenced in the function signature.\nRegarding other exceptions: IllegalState / Interrupt / KafkaExceptions are all unchecked exceptions; Authorization / Timeout / UnsupportedVersionException are ApiExceptions but are common ones. Only ProducerFenced are the only producer-specific checked exceptions which we should add in throws.", "author": "guozhangwang", "createdAt": "2020-11-13T21:06:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY3NTUxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI2NDQ4Nw==", "url": "https://github.com/apache/kafka/pull/9569#discussion_r523264487", "bodyText": "I see your point. As of today, if we throw KafkaException then streams thread would die as we wrap it as StreamsException which is fatal. It's only gonna work if we throw InvalidEpoch exception directly and let stream catch and swallow it. Do you think that would be the correct way?", "author": "abbccdda", "createdAt": "2020-11-13T22:23:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY3NTUxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI3NzQxOQ==", "url": "https://github.com/apache/kafka/pull/9569#discussion_r523277419", "bodyText": "Well, as the javadoc said in producer\nKafkaException if the producer has encountered a previous fatal or abortable error, or for any\n     *         other unexpected error\n\nIt is not always a fatal, so the caller code , like Streams, should check for its root upon getting the KafkaException and then handle correspondingly: if its root is InvalidProducerEpoch, it should abort and begin new txn right?", "author": "guozhangwang", "createdAt": "2020-11-13T23:05:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY3NTUxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ0MDYwNQ==", "url": "https://github.com/apache/kafka/pull/9569#discussion_r523440605", "bodyText": "I thought we would catch and rethrow as StreamsException:\ncatch (final KafkaException error) {\n            throw new StreamsException(\n                formatException(\"Error encountered trying to commit a transaction\"),\n                error\n            );\n        }\n\nwhich is a fatal one.", "author": "abbccdda", "createdAt": "2020-11-14T17:06:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY3NTUxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY3NTczNw==", "url": "https://github.com/apache/kafka/pull/9569#discussion_r522675737", "bodyText": "Let's add a comment why we change this to the InvalidProducerEpochException.", "author": "guozhangwang", "createdAt": "2020-11-13T06:17:24Z", "path": "core/src/main/scala/kafka/log/ProducerStateManager.scala", "diffHunk": "@@ -203,7 +203,7 @@ private[log] class ProducerAppendInfo(val topicPartition: TopicPartition,\n       if (origin == AppendOrigin.Replication) {\n         warn(message)\n       } else {\n-        throw new ProducerFencedException(message)\n+        throw new InvalidProducerEpochException(message)", "originalCommit": "833a0b0dbda0ce67d69d407c7300935a3e9e9255", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0983acb93367bd2a5aaa13ab1659569f9512ae5f", "url": "https://github.com/apache/kafka/commit/0983acb93367bd2a5aaa13ab1659569f9512ae5f", "message": "more comments", "committedDate": "2020-11-13T17:24:03Z", "type": "commit"}, {"oid": "e935ac284f39b4dc2315a4aa9b4236b09408b5a5", "url": "https://github.com/apache/kafka/commit/e935ac284f39b4dc2315a4aa9b4236b09408b5a5", "message": "add stream side handling", "committedDate": "2020-11-16T23:50:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1OTU5OQ==", "url": "https://github.com/apache/kafka/pull/9569#discussion_r525559599", "bodyText": "nit: InvalidProducerEpochException.", "author": "guozhangwang", "createdAt": "2020-11-17T22:12:56Z", "path": "clients/src/main/java/org/apache/kafka/clients/producer/Callback.java", "diffHunk": "@@ -40,6 +40,7 @@\n      *                  RecordTooLargeException\n      *                  UnknownServerException\n      *                  UnknownProducerIdException\n+     *                  InvalidProducerEpoch", "originalCommit": "e935ac284f39b4dc2315a4aa9b4236b09408b5a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8def4510257b11cd1a4caaeb916944c44b3d0ec3", "url": "https://github.com/apache/kafka/commit/8def4510257b11cd1a4caaeb916944c44b3d0ec3", "message": "nit", "committedDate": "2020-11-17T23:15:01Z", "type": "commit"}]}