{"pr_number": 8549, "pr_title": "KAFKA-9911: Add new PRODUCER_FENCED error code", "pr_createdAt": "2020-04-25T03:56:52Z", "pr_url": "https://github.com/apache/kafka/pull/8549", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA1NzcxMg==", "url": "https://github.com/apache/kafka/pull/8549#discussion_r416057712", "bodyText": "Side improvement for shouldReplaceCoordinatorNotAvailableWithLoadInProcessInTxnOffsetCommitWithOlderClient", "author": "abbccdda", "createdAt": "2020-04-27T18:40:17Z", "path": "core/src/test/scala/unit/kafka/server/KafkaApisTest.scala", "diffHunk": "@@ -297,46 +298,271 @@ class KafkaApisTest {\n     val topic = \"topic\"\n     setupBasicMetadataCache(topic, numPartitions = 2)\n \n-    EasyMock.reset(replicaManager, clientRequestQuotaManager, requestChannel, groupCoordinator)\n+    for (version <- ApiKeys.TXN_OFFSET_COMMIT.oldestVersion to ApiKeys.TXN_OFFSET_COMMIT.latestVersion) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "9bd99a6ae054a21e186ad452edb4842950783be1", "url": "https://github.com/apache/kafka/commit/9bd99a6ae054a21e186ad452edb4842950783be1", "message": "add init pid bump", "committedDate": "2020-05-06T16:36:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzNDk3MQ==", "url": "https://github.com/apache/kafka/pull/8549#discussion_r430034971", "bodyText": "nit: For older versions.. -> we could still receive INVALID_PRODUCER_EPOCH from old versioned transaction coordinator...", "author": "guozhangwang", "createdAt": "2020-05-25T18:00:52Z", "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java", "diffHunk": "@@ -1415,8 +1419,10 @@ public void handleResponse(AbstractResponse response) {\n                 } else if (error == Errors.COORDINATOR_LOAD_IN_PROGRESS || error == Errors.UNKNOWN_TOPIC_OR_PARTITION) {\n                     reenqueue();\n                     return;\n-                } else if (error == Errors.INVALID_PRODUCER_EPOCH) {\n-                    fatalError(error.exception());\n+                } else if (error == Errors.INVALID_PRODUCER_EPOCH || error == Errors.PRODUCER_FENCED) {\n+                    // For older versions, we could still receive INVALID_PRODUCER_EPOCH from transaction coordinator.", "originalCommit": "9bd99a6ae054a21e186ad452edb4842950783be1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzNTMwMQ==", "url": "https://github.com/apache/kafka/pull/8549#discussion_r430035301", "bodyText": "nit: ditto here, We could still receive INVALID_PRODUCER_EPOCH from old versioned transaction coordinator.", "author": "guozhangwang", "createdAt": "2020-05-25T18:02:21Z", "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java", "diffHunk": "@@ -1364,6 +1364,10 @@ public void handleResponse(AbstractResponse response) {\n             } else if (error == Errors.TRANSACTIONAL_ID_AUTHORIZATION_FAILED ||\n                     error == Errors.CLUSTER_AUTHORIZATION_FAILED) {\n                 fatalError(error.exception());\n+            } else if (error == Errors.INVALID_PRODUCER_EPOCH || error == Errors.PRODUCER_FENCED) {\n+                // For older versions, we could still receive INVALID_PRODUCER_EPOCH from transaction coordinator.", "originalCommit": "9bd99a6ae054a21e186ad452edb4842950783be1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzNTQzNg==", "url": "https://github.com/apache/kafka/pull/8549#discussion_r430035436", "bodyText": "Ditto here.", "author": "guozhangwang", "createdAt": "2020-05-25T18:02:54Z", "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java", "diffHunk": "@@ -1573,8 +1579,10 @@ public void handleResponse(AbstractResponse response) {\n                 reenqueue();\n             } else if (error == Errors.COORDINATOR_LOAD_IN_PROGRESS || error == Errors.CONCURRENT_TRANSACTIONS) {\n                 reenqueue();\n-            } else if (error == Errors.INVALID_PRODUCER_EPOCH) {\n-                fatalError(error.exception());\n+            } else if (error == Errors.INVALID_PRODUCER_EPOCH || error == Errors.PRODUCER_FENCED) {\n+                // For older versions, we could still receive INVALID_PRODUCER_EPOCH from transaction coordinator.", "originalCommit": "9bd99a6ae054a21e186ad452edb4842950783be1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzNTQ1MA==", "url": "https://github.com/apache/kafka/pull/8549#discussion_r430035450", "bodyText": "Ditto here.", "author": "guozhangwang", "createdAt": "2020-05-25T18:02:58Z", "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java", "diffHunk": "@@ -1630,8 +1638,10 @@ public void handleResponse(AbstractResponse response) {\n                 reenqueue();\n             } else if (error == Errors.UNKNOWN_PRODUCER_ID || error == Errors.INVALID_PRODUCER_ID_MAPPING) {\n                 abortableErrorIfPossible(error.exception());\n-            } else if (error == Errors.INVALID_PRODUCER_EPOCH) {\n-                fatalError(error.exception());\n+            } else if (error == Errors.INVALID_PRODUCER_EPOCH || error == Errors.PRODUCER_FENCED) {\n+                // For older versions, we could still receive INVALID_PRODUCER_EPOCH from transaction coordinator.", "originalCommit": "9bd99a6ae054a21e186ad452edb4842950783be1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzNjQyMw==", "url": "https://github.com/apache/kafka/pull/8549#discussion_r430036423", "bodyText": "If my understanding is correct this exception would never be thrown out to the caller? If that's the case do we need to put it as a public class, or could we put it as part of o.a.k.clients.internals?", "author": "guozhangwang", "createdAt": "2020-05-25T18:05:38Z", "path": "clients/src/main/java/org/apache/kafka/common/errors/InvalidProducerEpochException.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.kafka.common.errors;\n+\n+/**\n+ * This exception indicates that the produce request sent to the partition leader\n+ * contains a non-matching producer epoch. When encountering this exception, the ongoing transaction\n+ * will be aborted and can be retried.\n+ */\n+public class InvalidProducerEpochException extends RetriableException {", "originalCommit": "9bd99a6ae054a21e186ad452edb4842950783be1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEzNzMwMQ==", "url": "https://github.com/apache/kafka/pull/8549#discussion_r430137301", "bodyText": "Sg, let me have a try.", "author": "abbccdda", "createdAt": "2020-05-26T03:23:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzNjQyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzNzcyNQ==", "url": "https://github.com/apache/kafka/pull/8549#discussion_r430037725", "bodyText": "Could we also verify that the producer did retry by sending initPid to the txn coordinator?", "author": "guozhangwang", "createdAt": "2020-05-25T18:11:25Z", "path": "clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java", "diffHunk": "@@ -1571,6 +1637,54 @@ public void testProducerFencedException() throws InterruptedException {\n             Collections.emptyMap(), new ConsumerGroupMetadata(\"dummyId\")));\n     }\n \n+    @Test\n+    public void testInvalidProducerEpochConvertToProducerFencedInEndTxn() throws InterruptedException {\n+        doInitTransactions();\n+\n+        transactionManager.beginTransaction();\n+        transactionManager.failIfNotReadyForSend();\n+        transactionManager.maybeAddPartitionToTransaction(tp0);\n+        TransactionalRequestResult commitResult = transactionManager.beginCommit();\n+\n+        Future<RecordMetadata> responseFuture = appendToAccumulator(tp0);\n+\n+        assertFalse(responseFuture.isDone());\n+        prepareAddPartitionsToTxnResponse(Errors.NONE, tp0, epoch, producerId);\n+        prepareProduceResponse(Errors.NONE, producerId, epoch);\n+        prepareEndTxnResponse(Errors.INVALID_PRODUCER_EPOCH, TransactionResult.COMMIT, producerId, epoch);\n+\n+        runUntil(commitResult::isCompleted);\n+        runUntil(responseFuture::isDone);\n+\n+        // make sure the exception was thrown directly from the follow-up calls.\n+        assertThrows(KafkaException.class, () -> transactionManager.beginTransaction());\n+        assertThrows(KafkaException.class, () -> transactionManager.beginCommit());\n+        assertThrows(KafkaException.class, () -> transactionManager.beginAbort());\n+        assertThrows(KafkaException.class, () -> transactionManager.sendOffsetsToTransaction(\n+            Collections.emptyMap(), new ConsumerGroupMetadata(\"dummyId\")));\n+    }\n+\n+    @Test\n+    public void testInvalidProducerEpochFromProduce() throws InterruptedException {\n+        doInitTransactions();\n+\n+        transactionManager.beginTransaction();\n+        transactionManager.failIfNotReadyForSend();\n+        transactionManager.maybeAddPartitionToTransaction(tp0);\n+\n+        Future<RecordMetadata> responseFuture = appendToAccumulator(tp0);\n+\n+        assertFalse(responseFuture.isDone());\n+        prepareAddPartitionsToTxnResponse(Errors.NONE, tp0, epoch, producerId);\n+        prepareProduceResponse(Errors.INVALID_PRODUCER_EPOCH, producerId, epoch);\n+        prepareProduceResponse(Errors.NONE, producerId, epoch);\n+\n+        sender.runOnce();\n+\n+        runUntil(responseFuture::isDone);\n+        assertFalse(transactionManager.hasError());", "originalCommit": "9bd99a6ae054a21e186ad452edb4842950783be1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMzMDcyMg==", "url": "https://github.com/apache/kafka/pull/8549#discussion_r468330722", "bodyText": "Thanks for adding the coverage!", "author": "guozhangwang", "createdAt": "2020-08-11T05:14:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzNzcyNQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "294a2bf8fa66dcbb5a4a132fc7b28b7c0cfa6b57", "url": "https://github.com/apache/kafka/commit/294a2bf8fa66dcbb5a4a132fc7b28b7c0cfa6b57", "message": "add producer fenced error code", "committedDate": "2020-08-11T03:12:48Z", "type": "commit"}, {"oid": "b7b9264f7480509d483e9bb030284cfa8e7ed8c3", "url": "https://github.com/apache/kafka/commit/b7b9264f7480509d483e9bb030284cfa8e7ed8c3", "message": "add tests", "committedDate": "2020-08-11T03:12:48Z", "type": "commit"}, {"oid": "912dbfe4da89b723dfd87cc2d0b2b90664adfbee", "url": "https://github.com/apache/kafka/commit/912dbfe4da89b723dfd87cc2d0b2b90664adfbee", "message": "add init pid bump", "committedDate": "2020-08-11T03:12:48Z", "type": "commit"}, {"oid": "c9268669b7817a8041a3ffed8522c69c4ce95385", "url": "https://github.com/apache/kafka/commit/c9268669b7817a8041a3ffed8522c69c4ce95385", "message": "address Guozhang's comment", "committedDate": "2020-08-11T03:12:48Z", "type": "commit"}, {"oid": "f5f64d4df4d4998cb2f5a53ce07952f0b8571d46", "url": "https://github.com/apache/kafka/commit/f5f64d4df4d4998cb2f5a53ce07952f0b8571d46", "message": "invalid producer epoch recoverable", "committedDate": "2020-08-11T03:12:48Z", "type": "commit"}, {"oid": "f5f64d4df4d4998cb2f5a53ce07952f0b8571d46", "url": "https://github.com/apache/kafka/commit/f5f64d4df4d4998cb2f5a53ce07952f0b8571d46", "message": "invalid producer epoch recoverable", "committedDate": "2020-08-11T03:12:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMyNzkyMA==", "url": "https://github.com/apache/kafka/pull/8549#discussion_r468327920", "bodyText": "Good catch.", "author": "guozhangwang", "createdAt": "2020-08-11T05:03:19Z", "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java", "diffHunk": "@@ -1366,6 +1366,10 @@ public void handleResponse(AbstractResponse response) {\n             } else if (error == Errors.TRANSACTIONAL_ID_AUTHORIZATION_FAILED ||\n                     error == Errors.CLUSTER_AUTHORIZATION_FAILED) {\n                 fatalError(error.exception());\n+            } else if (error == Errors.INVALID_PRODUCER_EPOCH || error == Errors.PRODUCER_FENCED) {\n+                // We could still receive INVALID_PRODUCER_EPOCH from transaction coordinator,", "originalCommit": "f5f64d4df4d4998cb2f5a53ce07952f0b8571d46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMyODQ3OQ==", "url": "https://github.com/apache/kafka/pull/8549#discussion_r468328479", "bodyText": "nit: \".. old versioned transaction coordinator\", ditto below.", "author": "guozhangwang", "createdAt": "2020-08-11T05:05:27Z", "path": "clients/src/main/java/org/apache/kafka/clients/producer/internals/TransactionManager.java", "diffHunk": "@@ -1417,8 +1421,10 @@ public void handleResponse(AbstractResponse response) {\n                 } else if (error == Errors.COORDINATOR_LOAD_IN_PROGRESS || error == Errors.UNKNOWN_TOPIC_OR_PARTITION) {\n                     reenqueue();\n                     return;\n-                } else if (error == Errors.INVALID_PRODUCER_EPOCH) {\n-                    fatalError(error.exception());\n+                } else if (error == Errors.INVALID_PRODUCER_EPOCH || error == Errors.PRODUCER_FENCED) {", "originalCommit": "f5f64d4df4d4998cb2f5a53ce07952f0b8571d46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMzMDE4NQ==", "url": "https://github.com/apache/kafka/pull/8549#discussion_r468330185", "bodyText": "Why not put this internal exception in org.apache.kafka.clients.producer.internals?", "author": "guozhangwang", "createdAt": "2020-08-11T05:12:10Z", "path": "clients/src/main/java/org/apache/kafka/common/internals/InvalidProducerEpochException.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more", "originalCommit": "f5f64d4df4d4998cb2f5a53ce07952f0b8571d46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY5MzAzNg==", "url": "https://github.com/apache/kafka/pull/8549#discussion_r468693036", "bodyText": "sg", "author": "abbccdda", "createdAt": "2020-08-11T16:02:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMzMDE4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMzMjU1OQ==", "url": "https://github.com/apache/kafka/pull/8549#discussion_r468332559", "bodyText": "In the new broker version, when do we still return INVALID_PRODUCER_EPOCH then? Or would we never return it any more?", "author": "guozhangwang", "createdAt": "2020-08-11T05:21:27Z", "path": "core/src/main/scala/kafka/coordinator/transaction/TransactionCoordinator.scala", "diffHunk": "@@ -539,7 +539,7 @@ class TransactionCoordinator(brokerId: Int,\n           s\"${txnIdAndPidEpoch.transactionalId} due to timeout\")\n \n       case error@(Errors.INVALID_PRODUCER_ID_MAPPING |\n-                  Errors.INVALID_PRODUCER_EPOCH |", "originalCommit": "f5f64d4df4d4998cb2f5a53ce07952f0b8571d46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY5NDA4OQ==", "url": "https://github.com/apache/kafka/pull/8549#discussion_r468694089", "bodyText": "We do return INVALID_PRODUCER_EPOCH when the client is in old version, as they don't recognize the new error code. See KafkaApis", "author": "abbccdda", "createdAt": "2020-08-11T16:04:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMzMjU1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkwMDM4Ng==", "url": "https://github.com/apache/kafka/pull/8549#discussion_r468900386", "bodyText": "My confusion was that for new broker <-> new client communication, could we still return INVALID_PRODUCER_EPOCH as the error code? From KIP-588 my understanding is that, txn-coordinator -> producer would not return INVALID_PRODUCER_EPOCH anymore for all txn-related requests, and only broker -> producer ProduceResponse would return INVALID_PRODUCER_EPOCH. Now I get that you are maintaining the javadoc / handling for compatibility. So we are good :)", "author": "guozhangwang", "createdAt": "2020-08-11T22:29:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMzMjU1OQ=="}], "type": "inlineReview"}, {"oid": "a9b5affee19c24e8d46bc99d5b15ccae873ca311", "url": "https://github.com/apache/kafka/commit/a9b5affee19c24e8d46bc99d5b15ccae873ca311", "message": "address Guozhang comment", "committedDate": "2020-08-11T16:10:53Z", "type": "commit"}, {"oid": "4379dac808d7f56e93ac0cad8420a41c0647e310", "url": "https://github.com/apache/kafka/commit/4379dac808d7f56e93ac0cad8420a41c0647e310", "message": "fix error code", "committedDate": "2020-08-11T18:30:37Z", "type": "commit"}, {"oid": "817445990b397bebcdedc430d40f16e6b1bd4ed2", "url": "https://github.com/apache/kafka/commit/817445990b397bebcdedc430d40f16e6b1bd4ed2", "message": "move back error", "committedDate": "2020-08-12T04:14:42Z", "type": "commit"}]}