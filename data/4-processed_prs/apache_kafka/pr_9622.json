{"pr_number": 9622, "pr_title": "KAFKA-10547; add topicId in MetadataResp", "pr_createdAt": "2020-11-19T11:59:14Z", "pr_url": "https://github.com/apache/kafka/pull/9622", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODM2NjA3Mw==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r528366073", "bodyText": "nit: Uuid topicId", "author": "jolshan", "createdAt": "2020-11-22T17:26:37Z", "path": "clients/src/main/java/org/apache/kafka/common/Cluster.java", "diffHunk": "@@ -327,6 +350,18 @@ public Node controller() {\n         return controller;\n     }\n \n+    public Collection<Uuid> topicIds() {\n+        return topicIds.values();\n+    }\n+\n+    public Uuid getTopicId(String topic) {\n+        return topicIds.getOrDefault(topic, Uuid.ZERO_UUID);\n+    }\n+\n+    public String getTopicName(Uuid topiId) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQwMTAzMw==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r528401033", "bodyText": "Also, for getTopicId, we do getOrDefault. Is there a reason we wouldn't do that here?", "author": "jolshan", "createdAt": "2020-11-22T20:38:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODM2NjA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5OTQxMQ==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r528699411", "bodyText": "Here, I try to use getOrDefault but don't know what the default value is(it seems that \"\" is not a good default topicName). so just return null and let the caller decide, suggestions are welcomed if you have good ideas.", "author": "dengziming", "createdAt": "2020-11-23T13:23:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODM2NjA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgzMDgzOA==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r528830838", "bodyText": "I see...maybe I missed it, but I did not see the method used. What use case would you expect for topic names in Cluster?", "author": "jolshan", "createdAt": "2020-11-23T16:22:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODM2NjA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEyMjIzMA==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r529122230", "bodyText": "This is not used so far but will be used when we get TopicMetadata by topicId, so just add it in advance.", "author": "dengziming", "createdAt": "2020-11-24T01:54:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODM2NjA3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQwMTU2OA==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r528401568", "bodyText": "Do we want to print an empty string for TopicId? Would it make sense to include the Zero Uuid or not print a topic ID label at all?", "author": "jolshan", "createdAt": "2020-11-22T20:42:52Z", "path": "core/src/main/scala/kafka/admin/TopicCommand.scala", "diffHunk": "@@ -113,6 +114,7 @@ object TopicCommand extends Logging {\n     def printDescription(): Unit = {\n       val configsAsString = config.entries.asScala.filter(!_.isDefault).map { ce => s\"${ce.name}=${ce.value}\" }.mkString(\",\")\n       print(s\"Topic: $topic\")\n+      print(s\"\\tTopicId: ${if(topicId == Uuid.ZERO_UUID) \"\" else topicId}\")", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQwNDM3OA==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r528404378", "bodyText": "nit: this should be KAFKA_2_8_IV0, or KAFKA_2_8_IV1 if #9601 merges", "author": "jolshan", "createdAt": "2020-11-22T21:06:13Z", "path": "core/src/main/scala/kafka/api/ApiVersion.scala", "diffHunk": "@@ -424,6 +426,13 @@ case object KAFKA_2_7_IV2 extends DefaultApiVersion {\n   val id: Int = 30\n }\n \n+case object KAFKA_2_7_IV3 extends DefaultApiVersion {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQwNzU5NA==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r528407594", "bodyText": "As discussed in the mailing thread and the KIP writeup, this should be \"nullable\" rather than ignorable", "author": "jolshan", "createdAt": "2020-11-22T21:31:03Z", "path": "clients/src/main/resources/common/message/MetadataRequest.json", "diffHunk": "@@ -31,9 +31,11 @@\n     // Starting in version 8, authorized operations can be requested for cluster and topic resource.\n     //\n     // Version 9 is the first flexible version.\n+    // Version 10 add topicId\n     { \"name\": \"Topics\", \"type\": \"[]MetadataRequestTopic\", \"versions\": \"0+\", \"nullableVersions\": \"1+\",\n       \"about\": \"The topics to fetch metadata for.\", \"fields\": [\n-      { \"name\": \"Name\", \"type\": \"string\", \"versions\": \"0+\", \"entityType\": \"topicName\",\n+      { \"name\": \"TopicId\", \"type\": \"uuid\", \"versions\": \"10+\", \"ignorable\": true, \"about\": \"The topic id.\" },\n+      { \"name\": \"Name\", \"type\": \"string\", \"versions\": \"0+\", \"entityType\": \"topicName\", \"ignorable\": true,", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "54a2236a79cd1dc8c7208d253ca128cf6571953f", "url": "https://github.com/apache/kafka/commit/54a2236a79cd1dc8c7208d253ca128cf6571953f", "message": "KAFKA-10547; add topicId in metadata resp", "committedDate": "2020-11-23T13:53:29Z", "type": "forcePushed"}, {"oid": "6b3a0e6ebedc36413445a18df902694298e3de7a", "url": "https://github.com/apache/kafka/commit/6b3a0e6ebedc36413445a18df902694298e3de7a", "message": "KAFKA-10547; Add topicNames in MetadataCache", "committedDate": "2020-12-11T05:17:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxMjcxMQ==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r543212711", "bodyText": "Was this file checked in by mistake? Can we remove?", "author": "rajinisivaram", "createdAt": "2020-12-15T10:11:01Z", "path": "core/src/main/scala/kafka/log4j.properties", "diffHunk": "@@ -0,0 +1,91 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+# Unspecified loggers and loggers with additivity=true output to server.log and stdout\n+# Note that INFO only applies to unspecified loggers, the log level of the child logger is used otherwise\n+log4j.rootLogger=INFO, stdout, kafkaAppender", "originalCommit": "6b3a0e6ebedc36413445a18df902694298e3de7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxMzkwOA==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r543213908", "bodyText": "It seems unnecessary to include both topicIds and topicNames in the constructor of this case class. We can add val topicNames inside this class that creates the second map from the first.", "author": "rajinisivaram", "createdAt": "2020-12-15T10:12:41Z", "path": "core/src/main/scala/kafka/server/MetadataCache.scala", "diffHunk": "@@ -372,6 +380,8 @@ class MetadataCache(brokerId: Int) extends Logging {\n   }\n \n   case class MetadataSnapshot(partitionStates: mutable.AnyRefMap[String, mutable.LongMap[UpdateMetadataPartitionState]],\n+                              topicIds: Map[String, Uuid],\n+                              topicNames: Map[Uuid, String],", "originalCommit": "6b3a0e6ebedc36413445a18df902694298e3de7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyNDcxNg==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r543224716", "bodyText": "Also same question as for Cluster: Do we have a use case that requires both maps to be stored for fast lookups? Or would it be sufficient to store it one-way and look up the single map for the other way?", "author": "rajinisivaram", "createdAt": "2020-12-15T10:27:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxMzkwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxNTExOQ==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r543215119", "bodyText": "Couldn't we just do this instead of the for loop:\n topicIds.foreach { case (name, id) => context.addTopicId(name, id) }", "author": "rajinisivaram", "createdAt": "2020-12-15T10:14:35Z", "path": "core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala", "diffHunk": "@@ -873,6 +883,11 @@ class ControllerChannelManagerTest {\n       context.updatePartitionFullReplicaAssignment(partition, ReplicaAssignment(replicas))\n       leaderIndex += 1\n     }\n+\n+    context.allTopics ++= topics\n+    for (topic <- topics if topicIds.contains(topic)) {", "originalCommit": "6b3a0e6ebedc36413445a18df902694298e3de7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI4ODE1Mg==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r543288152", "bodyText": "done!", "author": "dengziming", "createdAt": "2020-12-15T12:07:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIxNTExOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyNDA5Mw==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r543224093", "bodyText": "Do we have a use case that requires both maps to be stored in Cluster for fast lookups? Or would it be sufficient to store it one-way and look up the single map for the other way?", "author": "rajinisivaram", "createdAt": "2020-12-15T10:26:57Z", "path": "clients/src/main/java/org/apache/kafka/common/Cluster.java", "diffHunk": "@@ -46,6 +46,8 @@\n     private final Map<Integer, List<PartitionInfo>> partitionsByNode;\n     private final Map<Integer, Node> nodesById;\n     private final ClusterResource clusterResource;\n+    private final Map<String, Uuid> topicIds;\n+    private final Map<Uuid, String> topicNames;", "originalCommit": "6b3a0e6ebedc36413445a18df902694298e3de7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI4OTg5Mg==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r543289892", "bodyText": "Thank you for your suggestions, the topicNames is not used so I just removed it. Maybe we will add them if it's necessary in a future use case.", "author": "dengziming", "createdAt": "2020-12-15T12:10:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyNDA5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyNTE1Nw==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r543225157", "bodyText": "We seem to be adding to the topicIds/topicNames map, but never removing anything.", "author": "rajinisivaram", "createdAt": "2020-12-15T10:28:33Z", "path": "core/src/main/scala/kafka/server/MetadataCache.scala", "diffHunk": "@@ -314,9 +315,16 @@ class MetadataCache(brokerId: Int) extends Logging {\n           error(s\"Listeners are not identical across brokers: $aliveNodes\")\n       }\n \n+      val newTopicIds = updateMetadataRequest.topicStates().asScala\n+        .map(topicState => (topicState.topicName(), topicState.topicId()))\n+        .filter(_._2 != Uuid.ZERO_UUID).toMap\n+      val topicIds = mutable.Map.empty[String, Uuid]\n+      topicIds.addAll(metadataSnapshot.topicIds)\n+      topicIds.addAll(newTopicIds)", "originalCommit": "6b3a0e6ebedc36413445a18df902694298e3de7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzMTI5OA==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r543331298", "bodyText": "Hi, @rajinisivaram ,Thank you for your reply. I find that when KafkaController deletes a topic it will send updateMetadataRequest with all the partitions in it, and set state.leader=-2 indicating the partition is deleted. And the MetadataCache will not remove the topic from cache but just keep the UpdateMetadataPartitionState of the deleted topics, so I also keep the topicId when deleted.\nhere I tried to delete a topic and then describe it.\n\u279c  ~ kafka-topics.sh --delete --zookeeper localhost:2181 --topic old-version-topic\nTopic old-version-topic is marked for deletion.\nNote: This will have no impact if delete.topic.enable is not set to true.\n\u279c  ~ kafka-topics.sh --describe --zookeeper localhost:2181 --topic old-version-topic\nTopic: old-version-topic TopicId: wRPl6VAlQeyE77bDxEESzg  PartitionCount: 1\tReplicationFactor: 1 Configs: \tMarkedForDeletion: true\nTopic: old-version-topic\tPartition: 0\tLeader: 0\tReplicas: 0\tIsr: 0\tMarkedForDeletion: true\nSo the topicId of the deleted topic should also remain when deleted, when do you think we should delete the topicId from MetadataCache? suggestions are welcomed.", "author": "dengziming", "createdAt": "2020-12-15T13:15:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyNTE1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE4MDY1MQ==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r544180651", "bodyText": "When a topic is deleted, brokers process UpdateMetadataRequest and remove deleted topics from their cache. We track deletion state in ZooKeeper and as you mentioned, you can get this information by directly going to ZK in kafka-topics.sh. But we don't retain that information in every broker. I would remove topic id in the code segment just below this when the partition state is removed from the MetadataCache since we cannot clearly have a map that keeps growing in brokers. Is there a reason why we would want to retain topic id in every broker even after the topic has been deleted? We can't get this information through existing metadata request from brokers anyway. I guess in future, we can add additional metadata to track deleted topic ids if we wanted to, but for now it seems better to delete topic ids from MetadataCache when we delete the partition from the cache.  What do you think?", "author": "rajinisivaram", "createdAt": "2020-12-16T10:23:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyNTE1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ3OTg4Nw==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r544479887", "bodyText": "So it seems like there is some logic to remove the partition states of deleted topics from the MetadataSnapshot. Would we want to do something similar there but with topic Ids? Apologies if I'm missing something", "author": "jolshan", "createdAt": "2020-12-16T17:19:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyNTE1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUxNTE0Mg==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r544515142", "bodyText": "Yes, that was my suggestion too, but my wording wasn't right. I will reword that to avoid confusion.", "author": "rajinisivaram", "createdAt": "2020-12-16T18:11:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyNTE1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc4MjgzMA==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r544782830", "bodyText": "Thank you for your suggestions, I now understand the solution. I remove the topicId in removePartitionInfo.", "author": "dengziming", "createdAt": "2020-12-17T03:21:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIyNTE1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ1MDI1Mg==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r543450252", "bodyText": "nit: toString() unnecessary", "author": "rajinisivaram", "createdAt": "2020-12-15T15:34:58Z", "path": "clients/src/main/java/org/apache/kafka/common/requests/MetadataResponse.java", "diffHunk": "@@ -320,6 +333,7 @@ public String toString() {\n             return \"TopicMetadata{\" +\n                 \"error=\" + error +\n                 \", topic='\" + topic + '\\'' +\n+                \", topicId='\" + topicId.toString() + '\\'' +", "originalCommit": "dac9503351a8bc952e108ce69a819a79a64bfbec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE1MDAzMA==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r544150030", "bodyText": "we probably also want to assert that the topic id is not null here (even though we currently never return null).", "author": "rajinisivaram", "createdAt": "2020-12-16T09:38:46Z", "path": "core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala", "diffHunk": "@@ -223,6 +224,31 @@ class MetadataRequestTest extends BaseRequestTest {\n     assertEquals(\"V1 Response should have 2 (all) topics\", 2, metadataResponseV1.topicMetadata.size())\n   }\n \n+  @Test\n+  def testTopicIdsInResponse(): Unit = {\n+    val replicaAssignment = Map(0 -> Seq(1, 2, 0), 1 -> Seq(2, 0, 1))\n+    val topic1 = \"topic1\"\n+    val topic2 = \"topic2\"\n+    createTopic(topic1, replicaAssignment)\n+    createTopic(topic2, replicaAssignment)\n+\n+    // if version < 9, return ZERO_UUID in MetadataResponse\n+    val resp1 = sendMetadataRequest(new MetadataRequest.Builder(Seq(topic1, topic2).asJava, true, 0, 9).build(), Some(controllerSocketServer))\n+    assertEquals(2, resp1.topicMetadata.size)\n+    resp1.topicMetadata.forEach { topicMetadata =>\n+      assertEquals(Errors.NONE, topicMetadata.error)\n+      assertEquals(Uuid.ZERO_UUID, topicMetadata.topicId())\n+    }\n+\n+    // from version 10, UUID will be included in MetadataResponse\n+    val resp2 = sendMetadataRequest(new MetadataRequest.Builder(Seq(topic1, topic2).asJava, true, 10, 10).build(), Some(notControllerSocketServer))\n+    assertEquals(2, resp2.topicMetadata.size)\n+    resp2.topicMetadata.forEach { topicMetadata =>\n+      assertEquals(Errors.NONE, topicMetadata.error)\n+      assertNotEquals(Uuid.ZERO_UUID, topicMetadata.topicId())", "originalCommit": "dac9503351a8bc952e108ce69a819a79a64bfbec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5e599379a465658b52656aa67f46f3caa9e7bf12", "url": "https://github.com/apache/kafka/commit/5e599379a465658b52656aa67f46f3caa9e7bf12", "message": "KAFKA-10547; alter some unit tests\n\nKAFKA-10547; alter some integration tests\n\nKAFKA-10547; optimeze imports\n\nresolve comments", "committedDate": "2020-12-17T03:06:41Z", "type": "forcePushed"}, {"oid": "680308e856ee95a1895e16ec4f07efcf089ba42b", "url": "https://github.com/apache/kafka/commit/680308e856ee95a1895e16ec4f07efcf089ba42b", "message": "KAFKA-10547; alter some unit tests\n\nKAFKA-10547; alter some integration tests\n\nKAFKA-10547; optimeze imports\n\nresolve comments", "committedDate": "2020-12-17T03:17:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk3NzU1MQ==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r544977551", "bodyText": "nit: We don't use get prefix in other methods. Since this is part of the public API, can we change this to topicId(String topic) before merging?", "author": "rajinisivaram", "createdAt": "2020-12-17T10:26:39Z", "path": "clients/src/main/java/org/apache/kafka/common/Cluster.java", "diffHunk": "@@ -327,6 +346,14 @@ public Node controller() {\n         return controller;\n     }\n \n+    public Collection<Uuid> topicIds() {\n+        return topicIds.values();\n+    }\n+\n+    public Uuid getTopicId(String topic) {", "originalCommit": "680308e856ee95a1895e16ec4f07efcf089ba42b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk4ODQ1OQ==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r544988459", "bodyText": "Thank you for your reminder, it's helpful to me.", "author": "dengziming", "createdAt": "2020-12-17T10:43:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk3NzU1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg2MzcxMQ==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r546863711", "bodyText": "Can we also add this and any other new public APIs to the KIP page?", "author": "jolshan", "createdAt": "2020-12-21T18:32:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk3NzU1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgyOTE3OQ==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r550829179", "bodyText": "Thank you for your reminder, I have added these 2 methods to the KIP page, take a look if you have time.", "author": "dengziming", "createdAt": "2021-01-02T01:34:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk3NzU1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkwNjA1NA==", "url": "https://github.com/apache/kafka/pull/9622#discussion_r550906054", "bodyText": "Thanks. looks good!", "author": "jolshan", "createdAt": "2021-01-02T18:08:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk3NzU1MQ=="}], "type": "inlineReview"}, {"oid": "587c0e0652e8386126460ab4c4508349e24afa22", "url": "https://github.com/apache/kafka/commit/587c0e0652e8386126460ab4c4508349e24afa22", "message": "KAFKA-10547; alter some unit tests\n\nKAFKA-10547; alter some integration tests\n\nKAFKA-10547; optimeze imports\n\nresolve comments", "committedDate": "2020-12-17T10:41:15Z", "type": "commit"}, {"oid": "587c0e0652e8386126460ab4c4508349e24afa22", "url": "https://github.com/apache/kafka/commit/587c0e0652e8386126460ab4c4508349e24afa22", "message": "KAFKA-10547; alter some unit tests\n\nKAFKA-10547; alter some integration tests\n\nKAFKA-10547; optimeze imports\n\nresolve comments", "committedDate": "2020-12-17T10:41:15Z", "type": "forcePushed"}, {"oid": "b48aa7f4f949b234f486b462f90ddeaadca556ba", "url": "https://github.com/apache/kafka/commit/b48aa7f4f949b234f486b462f90ddeaadca556ba", "message": "Fix Scala 2.12 build", "committedDate": "2020-12-18T18:20:40Z", "type": "commit"}]}